
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc78  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  0800dd38  0800dd38  0001dd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e094  0800e094  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e094  0800e094  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e094  0800e094  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e094  0800e094  0001e094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e098  0800e098  0001e098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e09c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001468  200001e0  0800e27c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001648  0800e27c  00021648  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c2d9  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051a0  00000000  00000000  0004c4e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  00051688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015a0  00000000  00000000  00052e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002074f  00000000  00000000  000543b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020d41  00000000  00000000  00074aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4839  00000000  00000000  00095840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013a079  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000576c  00000000  00000000  0013a0cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800dd20 	.word	0x0800dd20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800dd20 	.word	0x0800dd20

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <comHandler>:
 *
 * Při přijmutí instrukce nedochází k zpracování, ale pouze k nastavení adekvátního flagu.
 * Vykonání instrukce musí být zařízeno v jiné části hlavního programu.
 */
void comHandler(void)
{
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	46c6      	mov	lr, r8
 800041c:	b500      	push	{lr}
 800041e:	b0a6      	sub	sp, #152	; 0x98
 8000420:	af00      	add	r7, sp, #0
	//___Ošetření plného bufferu___//
	if(USB_Rx_Buffer->status == BUFFER_FULL)
 8000422:	4bc4      	ldr	r3, [pc, #784]	; (8000734 <comHandler+0x31c>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	7d1b      	ldrb	r3, [r3, #20]
 8000428:	2b02      	cmp	r3, #2
 800042a:	d109      	bne.n	8000440 <comHandler+0x28>
	{
		flags.data_received = 0;
 800042c:	4bc2      	ldr	r3, [pc, #776]	; (8000738 <comHandler+0x320>)
 800042e:	7a1a      	ldrb	r2, [r3, #8]
 8000430:	2101      	movs	r1, #1
 8000432:	438a      	bics	r2, r1
 8000434:	721a      	strb	r2, [r3, #8]
		clearBuffer(USB_Rx_Buffer);
 8000436:	4bbf      	ldr	r3, [pc, #764]	; (8000734 <comHandler+0x31c>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	0018      	movs	r0, r3
 800043c:	f001 ffcc 	bl	80023d8 <clearBuffer>
	}

	//___Příjem dat___//
	if(flags.data_received)
 8000440:	4bbd      	ldr	r3, [pc, #756]	; (8000738 <comHandler+0x320>)
 8000442:	7a1b      	ldrb	r3, [r3, #8]
 8000444:	2201      	movs	r2, #1
 8000446:	4013      	ands	r3, r2
 8000448:	b2db      	uxtb	r3, r3
 800044a:	2b00      	cmp	r3, #0
 800044c:	d100      	bne.n	8000450 <comHandler+0x38>
 800044e:	e0d6      	b.n	80005fe <comHandler+0x1e6>
	{
		int start = 0;	//flag o nalezení počátku paketu
 8000450:	2300      	movs	r3, #0
 8000452:	2284      	movs	r2, #132	; 0x84
 8000454:	18ba      	adds	r2, r7, r2
 8000456:	6013      	str	r3, [r2, #0]

		for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 8000458:	2300      	movs	r3, #0
 800045a:	2288      	movs	r2, #136	; 0x88
 800045c:	18ba      	adds	r2, r7, r2
 800045e:	6013      	str	r3, [r2, #0]
 8000460:	e04d      	b.n	80004fe <comHandler+0xe6>
		{
			//Přečti znaky na pozici i a i+1
			char tmp1, tmp2;
			at(USB_Rx_Buffer, i, &tmp1);
 8000462:	4bb4      	ldr	r3, [pc, #720]	; (8000734 <comHandler+0x31c>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2657      	movs	r6, #87	; 0x57
 8000468:	2218      	movs	r2, #24
 800046a:	18b9      	adds	r1, r7, r2
 800046c:	198a      	adds	r2, r1, r6
 800046e:	2188      	movs	r1, #136	; 0x88
 8000470:	1878      	adds	r0, r7, r1
 8000472:	6801      	ldr	r1, [r0, #0]
 8000474:	0018      	movs	r0, r3
 8000476:	f002 f857 	bl	8002528 <at>
			at(USB_Rx_Buffer, i+1, &tmp2);
 800047a:	4bae      	ldr	r3, [pc, #696]	; (8000734 <comHandler+0x31c>)
 800047c:	6818      	ldr	r0, [r3, #0]
 800047e:	2388      	movs	r3, #136	; 0x88
 8000480:	18fb      	adds	r3, r7, r3
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	3301      	adds	r3, #1
 8000486:	2256      	movs	r2, #86	; 0x56
 8000488:	2118      	movs	r1, #24
 800048a:	468c      	mov	ip, r1
 800048c:	44bc      	add	ip, r7
 800048e:	4462      	add	r2, ip
 8000490:	0019      	movs	r1, r3
 8000492:	f002 f849 	bl	8002528 <at>

			if(tmp1 == '>' && tmp1 == '>')	//začátek paketu
 8000496:	2218      	movs	r2, #24
 8000498:	18bb      	adds	r3, r7, r2
 800049a:	199b      	adds	r3, r3, r6
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b3e      	cmp	r3, #62	; 0x3e
 80004a0:	d127      	bne.n	80004f2 <comHandler+0xda>
 80004a2:	18bb      	adds	r3, r7, r2
 80004a4:	199b      	adds	r3, r3, r6
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b3e      	cmp	r3, #62	; 0x3e
 80004aa:	d122      	bne.n	80004f2 <comHandler+0xda>
			{
				for(int y = 0; y < i; y++)	//vymazání obsahu buuferu před začátkem paketu (neplatná data)
 80004ac:	2300      	movs	r3, #0
 80004ae:	228c      	movs	r2, #140	; 0x8c
 80004b0:	18ba      	adds	r2, r7, r2
 80004b2:	6013      	str	r3, [r2, #0]
 80004b4:	e010      	b.n	80004d8 <comHandler+0xc0>
				{
					char tmp;
					pop(USB_Rx_Buffer, &tmp);
 80004b6:	4b9f      	ldr	r3, [pc, #636]	; (8000734 <comHandler+0x31c>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	2255      	movs	r2, #85	; 0x55
 80004bc:	2118      	movs	r1, #24
 80004be:	468c      	mov	ip, r1
 80004c0:	44bc      	add	ip, r7
 80004c2:	4462      	add	r2, ip
 80004c4:	0011      	movs	r1, r2
 80004c6:	0018      	movs	r0, r3
 80004c8:	f001 fffb 	bl	80024c2 <pop>
				for(int y = 0; y < i; y++)	//vymazání obsahu buuferu před začátkem paketu (neplatná data)
 80004cc:	228c      	movs	r2, #140	; 0x8c
 80004ce:	18bb      	adds	r3, r7, r2
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	3301      	adds	r3, #1
 80004d4:	18ba      	adds	r2, r7, r2
 80004d6:	6013      	str	r3, [r2, #0]
 80004d8:	238c      	movs	r3, #140	; 0x8c
 80004da:	18fb      	adds	r3, r7, r3
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	2388      	movs	r3, #136	; 0x88
 80004e0:	18fb      	adds	r3, r7, r3
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	dbe6      	blt.n	80004b6 <comHandler+0x9e>
				}
				start = 1;	//nastav flag o nalezení počátku
 80004e8:	2301      	movs	r3, #1
 80004ea:	2284      	movs	r2, #132	; 0x84
 80004ec:	18ba      	adds	r2, r7, r2
 80004ee:	6013      	str	r3, [r2, #0]
 80004f0:	e00d      	b.n	800050e <comHandler+0xf6>
		for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 80004f2:	2288      	movs	r2, #136	; 0x88
 80004f4:	18bb      	adds	r3, r7, r2
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	3301      	adds	r3, #1
 80004fa:	18ba      	adds	r2, r7, r2
 80004fc:	6013      	str	r3, [r2, #0]
 80004fe:	4b8d      	ldr	r3, [pc, #564]	; (8000734 <comHandler+0x31c>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	689b      	ldr	r3, [r3, #8]
 8000504:	2288      	movs	r2, #136	; 0x88
 8000506:	18ba      	adds	r2, r7, r2
 8000508:	6812      	ldr	r2, [r2, #0]
 800050a:	429a      	cmp	r2, r3
 800050c:	dba9      	blt.n	8000462 <comHandler+0x4a>
				break;
			}
		}

		if(start)	//počátek byl nalezen
 800050e:	2384      	movs	r3, #132	; 0x84
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d06d      	beq.n	80005f4 <comHandler+0x1dc>
		{
			for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 8000518:	2300      	movs	r3, #0
 800051a:	2290      	movs	r2, #144	; 0x90
 800051c:	18ba      	adds	r2, r7, r2
 800051e:	6013      	str	r3, [r2, #0]
 8000520:	e060      	b.n	80005e4 <comHandler+0x1cc>
			{
				//Přečti znaky na pozici i a i+1
				char tmp1, tmp2;
				at(USB_Rx_Buffer, i, &tmp1);
 8000522:	4b84      	ldr	r3, [pc, #528]	; (8000734 <comHandler+0x31c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2654      	movs	r6, #84	; 0x54
 8000528:	2218      	movs	r2, #24
 800052a:	18b9      	adds	r1, r7, r2
 800052c:	198a      	adds	r2, r1, r6
 800052e:	2190      	movs	r1, #144	; 0x90
 8000530:	1878      	adds	r0, r7, r1
 8000532:	6801      	ldr	r1, [r0, #0]
 8000534:	0018      	movs	r0, r3
 8000536:	f001 fff7 	bl	8002528 <at>
				at(USB_Rx_Buffer, i+1, &tmp2);
 800053a:	4b7e      	ldr	r3, [pc, #504]	; (8000734 <comHandler+0x31c>)
 800053c:	6818      	ldr	r0, [r3, #0]
 800053e:	2390      	movs	r3, #144	; 0x90
 8000540:	18f9      	adds	r1, r7, r3
 8000542:	680b      	ldr	r3, [r1, #0]
 8000544:	3301      	adds	r3, #1
 8000546:	2253      	movs	r2, #83	; 0x53
 8000548:	2118      	movs	r1, #24
 800054a:	468c      	mov	ip, r1
 800054c:	44bc      	add	ip, r7
 800054e:	4462      	add	r2, ip
 8000550:	0019      	movs	r1, r3
 8000552:	f001 ffe9 	bl	8002528 <at>

				if(tmp1 == '<' && tmp1 == '<')	//konec paketu
 8000556:	2218      	movs	r2, #24
 8000558:	18b9      	adds	r1, r7, r2
 800055a:	198b      	adds	r3, r1, r6
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b3c      	cmp	r3, #60	; 0x3c
 8000560:	d13a      	bne.n	80005d8 <comHandler+0x1c0>
 8000562:	18ba      	adds	r2, r7, r2
 8000564:	1993      	adds	r3, r2, r6
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b3c      	cmp	r3, #60	; 0x3c
 800056a:	d135      	bne.n	80005d8 <comHandler+0x1c0>
				{
					uint8_t* tmp = (uint8_t*)malloc((i+2)*sizeof(uint8_t));
 800056c:	2390      	movs	r3, #144	; 0x90
 800056e:	18fb      	adds	r3, r7, r3
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	3302      	adds	r3, #2
 8000574:	0018      	movs	r0, r3
 8000576:	f00c ff91 	bl	800d49c <malloc>
 800057a:	0003      	movs	r3, r0
 800057c:	67fb      	str	r3, [r7, #124]	; 0x7c
					for(int y = 0; y < i+2; y++)	//překopírování zprávy
 800057e:	2300      	movs	r3, #0
 8000580:	2294      	movs	r2, #148	; 0x94
 8000582:	18ba      	adds	r2, r7, r2
 8000584:	6013      	str	r3, [r2, #0]
 8000586:	e00f      	b.n	80005a8 <comHandler+0x190>
					{
						pop(USB_Rx_Buffer, &tmp[y]);
 8000588:	4b6a      	ldr	r3, [pc, #424]	; (8000734 <comHandler+0x31c>)
 800058a:	6818      	ldr	r0, [r3, #0]
 800058c:	2694      	movs	r6, #148	; 0x94
 800058e:	19bb      	adds	r3, r7, r6
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000594:	18d3      	adds	r3, r2, r3
 8000596:	0019      	movs	r1, r3
 8000598:	f001 ff93 	bl	80024c2 <pop>
					for(int y = 0; y < i+2; y++)	//překopírování zprávy
 800059c:	0032      	movs	r2, r6
 800059e:	18bb      	adds	r3, r7, r2
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	3301      	adds	r3, #1
 80005a4:	18ba      	adds	r2, r7, r2
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	2190      	movs	r1, #144	; 0x90
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	3301      	adds	r3, #1
 80005b0:	2294      	movs	r2, #148	; 0x94
 80005b2:	18ba      	adds	r2, r7, r2
 80005b4:	6812      	ldr	r2, [r2, #0]
 80005b6:	429a      	cmp	r2, r3
 80005b8:	dde6      	ble.n	8000588 <comHandler+0x170>
					}

					decodePaket(tmp, i+2);
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	3302      	adds	r3, #2
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005c6:	0011      	movs	r1, r2
 80005c8:	0018      	movs	r0, r3
 80005ca:	f000 fab3 	bl	8000b34 <decodePaket>
					free(tmp);
 80005ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005d0:	0018      	movs	r0, r3
 80005d2:	f00c ff6d 	bl	800d4b0 <free>
					break;
 80005d6:	e00d      	b.n	80005f4 <comHandler+0x1dc>
			for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 80005d8:	2290      	movs	r2, #144	; 0x90
 80005da:	18bb      	adds	r3, r7, r2
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	3301      	adds	r3, #1
 80005e0:	18ba      	adds	r2, r7, r2
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b53      	ldr	r3, [pc, #332]	; (8000734 <comHandler+0x31c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	689b      	ldr	r3, [r3, #8]
 80005ea:	2290      	movs	r2, #144	; 0x90
 80005ec:	18ba      	adds	r2, r7, r2
 80005ee:	6812      	ldr	r2, [r2, #0]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	db96      	blt.n	8000522 <comHandler+0x10a>
				}
			}
		}

		flags.data_received = 0;
 80005f4:	4b50      	ldr	r3, [pc, #320]	; (8000738 <comHandler+0x320>)
 80005f6:	7a1a      	ldrb	r2, [r3, #8]
 80005f8:	2101      	movs	r1, #1
 80005fa:	438a      	bics	r2, r1
 80005fc:	721a      	strb	r2, [r3, #8]
	}

	if(flags.testProgress)	//Pokud test pokročil...
 80005fe:	4b4e      	ldr	r3, [pc, #312]	; (8000738 <comHandler+0x320>)
 8000600:	7e1b      	ldrb	r3, [r3, #24]
 8000602:	2202      	movs	r2, #2
 8000604:	4013      	ands	r3, r2
 8000606:	b2db      	uxtb	r3, r3
 8000608:	2b00      	cmp	r3, #0
 800060a:	d055      	beq.n	80006b8 <comHandler+0x2a0>
	{
		//...zjisti v jaké je fázi...
		char testPhaseChr;
		switch(currentPhase())
 800060c:	f002 faa2 	bl	8002b54 <currentPhase>
 8000610:	0003      	movs	r3, r0
 8000612:	2b06      	cmp	r3, #6
 8000614:	d834      	bhi.n	8000680 <comHandler+0x268>
 8000616:	009a      	lsls	r2, r3, #2
 8000618:	4b48      	ldr	r3, [pc, #288]	; (800073c <comHandler+0x324>)
 800061a:	18d3      	adds	r3, r2, r3
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	469f      	mov	pc, r3
		{
		case START:
			testPhaseChr = 's';
 8000620:	2352      	movs	r3, #82	; 0x52
 8000622:	2218      	movs	r2, #24
 8000624:	4694      	mov	ip, r2
 8000626:	44bc      	add	ip, r7
 8000628:	4463      	add	r3, ip
 800062a:	2273      	movs	r2, #115	; 0x73
 800062c:	701a      	strb	r2, [r3, #0]
			break;
 800062e:	e02f      	b.n	8000690 <comHandler+0x278>
		case START_DONE:
			testPhaseChr = 's';
 8000630:	2352      	movs	r3, #82	; 0x52
 8000632:	2218      	movs	r2, #24
 8000634:	4694      	mov	ip, r2
 8000636:	44bc      	add	ip, r7
 8000638:	4463      	add	r3, ip
 800063a:	2273      	movs	r2, #115	; 0x73
 800063c:	701a      	strb	r2, [r3, #0]
			break;
 800063e:	e027      	b.n	8000690 <comHandler+0x278>
		case MAIN_TEST:
			testPhaseChr = 'm';
 8000640:	2352      	movs	r3, #82	; 0x52
 8000642:	2218      	movs	r2, #24
 8000644:	4694      	mov	ip, r2
 8000646:	44bc      	add	ip, r7
 8000648:	4463      	add	r3, ip
 800064a:	226d      	movs	r2, #109	; 0x6d
 800064c:	701a      	strb	r2, [r3, #0]
			break;
 800064e:	e01f      	b.n	8000690 <comHandler+0x278>
		case MAIN_TEST_DONE:
			testPhaseChr = 'm';
 8000650:	2352      	movs	r3, #82	; 0x52
 8000652:	2218      	movs	r2, #24
 8000654:	4694      	mov	ip, r2
 8000656:	44bc      	add	ip, r7
 8000658:	4463      	add	r3, ip
 800065a:	226d      	movs	r2, #109	; 0x6d
 800065c:	701a      	strb	r2, [r3, #0]
			break;
 800065e:	e017      	b.n	8000690 <comHandler+0x278>
		case BATTERY_TEST:
			testPhaseChr = 'b';
 8000660:	2352      	movs	r3, #82	; 0x52
 8000662:	2218      	movs	r2, #24
 8000664:	4694      	mov	ip, r2
 8000666:	44bc      	add	ip, r7
 8000668:	4463      	add	r3, ip
 800066a:	2262      	movs	r2, #98	; 0x62
 800066c:	701a      	strb	r2, [r3, #0]
			break;
 800066e:	e00f      	b.n	8000690 <comHandler+0x278>
		case BATTERY_TEST_DONE:
			testPhaseChr = 'M';
 8000670:	2352      	movs	r3, #82	; 0x52
 8000672:	2218      	movs	r2, #24
 8000674:	4694      	mov	ip, r2
 8000676:	44bc      	add	ip, r7
 8000678:	4463      	add	r3, ip
 800067a:	224d      	movs	r2, #77	; 0x4d
 800067c:	701a      	strb	r2, [r3, #0]
			break;
 800067e:	e007      	b.n	8000690 <comHandler+0x278>
		default:
			testPhaseChr = 'e';
 8000680:	2352      	movs	r3, #82	; 0x52
 8000682:	2218      	movs	r2, #24
 8000684:	4694      	mov	ip, r2
 8000686:	44bc      	add	ip, r7
 8000688:	4463      	add	r3, ip
 800068a:	2265      	movs	r2, #101	; 0x65
 800068c:	701a      	strb	r2, [r3, #0]
			break;
 800068e:	46c0      	nop			; (mov r8, r8)
		}

		//...a upozorni na to PC
		Paket paket;
		fillPaket(&paket, TEST_PHASE_PAKET, &testPhaseChr, 1);
 8000690:	2352      	movs	r3, #82	; 0x52
 8000692:	2118      	movs	r1, #24
 8000694:	187a      	adds	r2, r7, r1
 8000696:	18d2      	adds	r2, r2, r3
 8000698:	2644      	movs	r6, #68	; 0x44
 800069a:	187b      	adds	r3, r7, r1
 800069c:	1998      	adds	r0, r3, r6
 800069e:	2301      	movs	r3, #1
 80006a0:	2104      	movs	r1, #4
 80006a2:	f000 f94b 	bl	800093c <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 80006a6:	4b26      	ldr	r3, [pc, #152]	; (8000740 <comHandler+0x328>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2118      	movs	r1, #24
 80006ac:	187a      	adds	r2, r7, r1
 80006ae:	1992      	adds	r2, r2, r6
 80006b0:	0011      	movs	r1, r2
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 f982 	bl	80009bc <pushPaket>
	}

	if(flags.meas.measComplete)	//Jsou připravena data k odeslání
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <comHandler+0x320>)
 80006ba:	7d1b      	ldrb	r3, [r3, #20]
 80006bc:	2202      	movs	r2, #2
 80006be:	4013      	ands	r3, r2
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d056      	beq.n	8000774 <comHandler+0x35c>
	{
		if(!flags.meas.calibMeas)
 80006c6:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <comHandler+0x320>)
 80006c8:	7d1b      	ldrb	r3, [r3, #20]
 80006ca:	2240      	movs	r2, #64	; 0x40
 80006cc:	4013      	ands	r3, r2
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d117      	bne.n	8000704 <comHandler+0x2ec>
		{
			//Nejde o kalibrační data -> pošli číslo dat
			Paket paket;
			fillPaket(&paket, TEST_NUM_PAKET, &testNum, 1);
 80006d4:	4a1b      	ldr	r2, [pc, #108]	; (8000744 <comHandler+0x32c>)
 80006d6:	262c      	movs	r6, #44	; 0x2c
 80006d8:	2318      	movs	r3, #24
 80006da:	18f9      	adds	r1, r7, r3
 80006dc:	1988      	adds	r0, r1, r6
 80006de:	2301      	movs	r3, #1
 80006e0:	2103      	movs	r1, #3
 80006e2:	f000 f92b 	bl	800093c <fillPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 80006e6:	4b16      	ldr	r3, [pc, #88]	; (8000740 <comHandler+0x328>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2218      	movs	r2, #24
 80006ec:	18ba      	adds	r2, r7, r2
 80006ee:	1992      	adds	r2, r2, r6
 80006f0:	0011      	movs	r1, r2
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 f962 	bl	80009bc <pushPaket>
			testNum++;
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <comHandler+0x32c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	1c5a      	adds	r2, r3, #1
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <comHandler+0x32c>)
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	e004      	b.n	800070e <comHandler+0x2f6>
		}
		else
		{
			flags.meas.calibMeas = 0;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <comHandler+0x320>)
 8000706:	7d1a      	ldrb	r2, [r3, #20]
 8000708:	2140      	movs	r1, #64	; 0x40
 800070a:	438a      	bics	r2, r1
 800070c:	751a      	strb	r2, [r3, #20]
		}

		//___Připrav a odešli paket___//
		makeByteArray();
 800070e:	f000 f8e9 	bl	80008e4 <makeByteArray>
		Paket paket;
		if(flags.meas.onlyBattery)
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <comHandler+0x320>)
 8000714:	7d1b      	ldrb	r3, [r3, #20]
 8000716:	2220      	movs	r2, #32
 8000718:	4013      	ands	r3, r2
 800071a:	b2db      	uxtb	r3, r3
 800071c:	2b00      	cmp	r3, #0
 800071e:	d015      	beq.n	800074c <comHandler+0x334>
		{
			fillPaket(&paket, DATA_BAT_PAKET, data+12, BAT_DATA_PAKET_LENGHT);
 8000720:	4a09      	ldr	r2, [pc, #36]	; (8000748 <comHandler+0x330>)
 8000722:	2338      	movs	r3, #56	; 0x38
 8000724:	2118      	movs	r1, #24
 8000726:	1879      	adds	r1, r7, r1
 8000728:	18c8      	adds	r0, r1, r3
 800072a:	2302      	movs	r3, #2
 800072c:	2102      	movs	r1, #2
 800072e:	f000 f905 	bl	800093c <fillPaket>
 8000732:	e014      	b.n	800075e <comHandler+0x346>
 8000734:	20001140 	.word	0x20001140
 8000738:	2000063c 	.word	0x2000063c
 800073c:	0800de60 	.word	0x0800de60
 8000740:	2000049c 	.word	0x2000049c
 8000744:	2000026c 	.word	0x2000026c
 8000748:	200004ac 	.word	0x200004ac
		}
		else
		{
			fillPaket(&paket, DATA_PAKET, data, DATA_PAKET_LENGHT);
 800074c:	4a61      	ldr	r2, [pc, #388]	; (80008d4 <comHandler+0x4bc>)
 800074e:	2338      	movs	r3, #56	; 0x38
 8000750:	2118      	movs	r1, #24
 8000752:	1879      	adds	r1, r7, r1
 8000754:	18c8      	adds	r0, r1, r3
 8000756:	230e      	movs	r3, #14
 8000758:	2101      	movs	r1, #1
 800075a:	f000 f8ef 	bl	800093c <fillPaket>
		}
		pushPaket(USB_Tx_Buffer, &paket);
 800075e:	4b5e      	ldr	r3, [pc, #376]	; (80008d8 <comHandler+0x4c0>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2238      	movs	r2, #56	; 0x38
 8000764:	2118      	movs	r1, #24
 8000766:	468c      	mov	ip, r1
 8000768:	44bc      	add	ip, r7
 800076a:	4462      	add	r2, ip
 800076c:	0011      	movs	r1, r2
 800076e:	0018      	movs	r0, r3
 8000770:	f000 f924 	bl	80009bc <pushPaket>
	}

#ifdef __APP_COMPATIBILITY__
	//___Odesílání refresh zprávy___//
	if(flags.time.sec)
 8000774:	4b59      	ldr	r3, [pc, #356]	; (80008dc <comHandler+0x4c4>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2202      	movs	r2, #2
 800077a:	4013      	ands	r3, r2
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d011      	beq.n	80007a6 <comHandler+0x38e>
	{
		Paket paket;
		fillPaket(&paket, REFRESH_PAKET, NULL, 0);
 8000782:	2620      	movs	r6, #32
 8000784:	2218      	movs	r2, #24
 8000786:	18bb      	adds	r3, r7, r2
 8000788:	1998      	adds	r0, r3, r6
 800078a:	2300      	movs	r3, #0
 800078c:	2200      	movs	r2, #0
 800078e:	2106      	movs	r1, #6
 8000790:	f000 f8d4 	bl	800093c <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 8000794:	4b50      	ldr	r3, [pc, #320]	; (80008d8 <comHandler+0x4c0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2218      	movs	r2, #24
 800079a:	18ba      	adds	r2, r7, r2
 800079c:	1992      	adds	r2, r2, r6
 800079e:	0011      	movs	r1, r2
 80007a0:	0018      	movs	r0, r3
 80007a2:	f000 f90b 	bl	80009bc <pushPaket>
	}
#endif

	if(flags.buttons.butt0_ver)
 80007a6:	4b4d      	ldr	r3, [pc, #308]	; (80008dc <comHandler+0x4c4>)
 80007a8:	791b      	ldrb	r3, [r3, #4]
 80007aa:	2202      	movs	r2, #2
 80007ac:	4013      	ands	r3, r2
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d011      	beq.n	80007d8 <comHandler+0x3c0>
	{
		Paket paket;
		fillPaket(&paket, CANCEL_FROM_USER_PAKET, NULL, 0);
 80007b4:	2614      	movs	r6, #20
 80007b6:	2218      	movs	r2, #24
 80007b8:	18bb      	adds	r3, r7, r2
 80007ba:	1998      	adds	r0, r3, r6
 80007bc:	2300      	movs	r3, #0
 80007be:	2200      	movs	r2, #0
 80007c0:	2107      	movs	r1, #7
 80007c2:	f000 f8bb 	bl	800093c <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 80007c6:	4b44      	ldr	r3, [pc, #272]	; (80008d8 <comHandler+0x4c0>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	2218      	movs	r2, #24
 80007cc:	18ba      	adds	r2, r7, r2
 80007ce:	1992      	adds	r2, r2, r6
 80007d0:	0011      	movs	r1, r2
 80007d2:	0018      	movs	r0, r3
 80007d4:	f000 f8f2 	bl	80009bc <pushPaket>
	}

	//___Odesílání dat___//
	//_Ošetření plného bufferu_//
	if(USB_Tx_Buffer->status == BUFFER_FULL)
 80007d8:	4b3f      	ldr	r3, [pc, #252]	; (80008d8 <comHandler+0x4c0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	7d1b      	ldrb	r3, [r3, #20]
 80007de:	2b02      	cmp	r3, #2
 80007e0:	d11b      	bne.n	800081a <comHandler+0x402>
	{
		flags.ui.shortBeep = 1;
 80007e2:	4b3e      	ldr	r3, [pc, #248]	; (80008dc <comHandler+0x4c4>)
 80007e4:	7c1a      	ldrb	r2, [r3, #16]
 80007e6:	2101      	movs	r1, #1
 80007e8:	430a      	orrs	r2, r1
 80007ea:	741a      	strb	r2, [r3, #16]
		char msg[] = {"Buffer full\n"};
 80007ec:	261c      	movs	r6, #28
 80007ee:	19bb      	adds	r3, r7, r6
 80007f0:	4a3b      	ldr	r2, [pc, #236]	; (80008e0 <comHandler+0x4c8>)
 80007f2:	ca43      	ldmia	r2!, {r0, r1, r6}
 80007f4:	c343      	stmia	r3!, {r0, r1, r6}
 80007f6:	7812      	ldrb	r2, [r2, #0]
 80007f8:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(msg, strlen(msg));
 80007fa:	261c      	movs	r6, #28
 80007fc:	19bb      	adds	r3, r7, r6
 80007fe:	0018      	movs	r0, r3
 8000800:	f7ff fc82 	bl	8000108 <strlen>
 8000804:	0002      	movs	r2, r0
 8000806:	19bb      	adds	r3, r7, r6
 8000808:	0011      	movs	r1, r2
 800080a:	0018      	movs	r0, r3
 800080c:	f00c f960 	bl	800cad0 <CDC_Transmit_FS>
		clearBuffer(USB_Tx_Buffer);
 8000810:	4b31      	ldr	r3, [pc, #196]	; (80008d8 <comHandler+0x4c0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	0018      	movs	r0, r3
 8000816:	f001 fddf 	bl	80023d8 <clearBuffer>
	}
	//_Samotné odesílání_//
	if(USB_Tx_Buffer->filled)
 800081a:	4b2f      	ldr	r3, [pc, #188]	; (80008d8 <comHandler+0x4c0>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d051      	beq.n	80008c8 <comHandler+0x4b0>
	{
 8000824:	466b      	mov	r3, sp
 8000826:	4698      	mov	r8, r3
		int size = USB_Tx_Buffer->filled;
 8000828:	4b2b      	ldr	r3, [pc, #172]	; (80008d8 <comHandler+0x4c0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	689b      	ldr	r3, [r3, #8]
 800082e:	67bb      	str	r3, [r7, #120]	; 0x78
		char tmpStr[size];
 8000830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000832:	1e5a      	subs	r2, r3, #1
 8000834:	677a      	str	r2, [r7, #116]	; 0x74
 8000836:	001a      	movs	r2, r3
 8000838:	60ba      	str	r2, [r7, #8]
 800083a:	2200      	movs	r2, #0
 800083c:	60fa      	str	r2, [r7, #12]
 800083e:	68b8      	ldr	r0, [r7, #8]
 8000840:	68f9      	ldr	r1, [r7, #12]
 8000842:	0002      	movs	r2, r0
 8000844:	0f52      	lsrs	r2, r2, #29
 8000846:	000e      	movs	r6, r1
 8000848:	00f6      	lsls	r6, r6, #3
 800084a:	617e      	str	r6, [r7, #20]
 800084c:	697e      	ldr	r6, [r7, #20]
 800084e:	4316      	orrs	r6, r2
 8000850:	617e      	str	r6, [r7, #20]
 8000852:	0002      	movs	r2, r0
 8000854:	00d2      	lsls	r2, r2, #3
 8000856:	613a      	str	r2, [r7, #16]
 8000858:	001a      	movs	r2, r3
 800085a:	603a      	str	r2, [r7, #0]
 800085c:	2200      	movs	r2, #0
 800085e:	607a      	str	r2, [r7, #4]
 8000860:	6838      	ldr	r0, [r7, #0]
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	0002      	movs	r2, r0
 8000866:	0f52      	lsrs	r2, r2, #29
 8000868:	000e      	movs	r6, r1
 800086a:	00f5      	lsls	r5, r6, #3
 800086c:	4315      	orrs	r5, r2
 800086e:	0002      	movs	r2, r0
 8000870:	00d4      	lsls	r4, r2, #3
 8000872:	3307      	adds	r3, #7
 8000874:	08db      	lsrs	r3, r3, #3
 8000876:	00db      	lsls	r3, r3, #3
 8000878:	466a      	mov	r2, sp
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	469d      	mov	sp, r3
 800087e:	466b      	mov	r3, sp
 8000880:	3300      	adds	r3, #0
 8000882:	673b      	str	r3, [r7, #112]	; 0x70
		for(int i = 0; i < size; i++)
 8000884:	2300      	movs	r3, #0
 8000886:	2280      	movs	r2, #128	; 0x80
 8000888:	18ba      	adds	r2, r7, r2
 800088a:	6013      	str	r3, [r2, #0]
 800088c:	e00f      	b.n	80008ae <comHandler+0x496>
		{
			pop(USB_Tx_Buffer, &tmpStr[i]);
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <comHandler+0x4c0>)
 8000890:	6818      	ldr	r0, [r3, #0]
 8000892:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000894:	2480      	movs	r4, #128	; 0x80
 8000896:	193b      	adds	r3, r7, r4
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	18d3      	adds	r3, r2, r3
 800089c:	0019      	movs	r1, r3
 800089e:	f001 fe10 	bl	80024c2 <pop>
		for(int i = 0; i < size; i++)
 80008a2:	0022      	movs	r2, r4
 80008a4:	18bb      	adds	r3, r7, r2
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	3301      	adds	r3, #1
 80008aa:	18ba      	adds	r2, r7, r2
 80008ac:	6013      	str	r3, [r2, #0]
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80008b6:	429a      	cmp	r2, r3
 80008b8:	dbe9      	blt.n	800088e <comHandler+0x476>
		}
		CDC_Transmit_FS(tmpStr, size);
 80008ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80008bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80008be:	0011      	movs	r1, r2
 80008c0:	0018      	movs	r0, r3
 80008c2:	f00c f905 	bl	800cad0 <CDC_Transmit_FS>
 80008c6:	46c5      	mov	sp, r8
	}

}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b026      	add	sp, #152	; 0x98
 80008ce:	bc80      	pop	{r7}
 80008d0:	46b8      	mov	r8, r7
 80008d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008d4:	200004a0 	.word	0x200004a0
 80008d8:	2000049c 	.word	0x2000049c
 80008dc:	2000063c 	.word	0x2000063c
 80008e0:	0800dd38 	.word	0x0800dd38

080008e4 <makeByteArray>:

//_____Zpracuje ADC_Results do pole data_____//
static void makeByteArray()
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
	for(int i = 0; i < 7; i++)
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	e018      	b.n	8000922 <makeByteArray+0x3e>
	{
		data[2*i] = MaskByte(ADC_Results[2*i], 1);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	005a      	lsls	r2, r3, #1
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <makeByteArray+0x50>)
 80008f6:	0092      	lsls	r2, r2, #2
 80008f8:	58d3      	ldr	r3, [r2, r3]
 80008fa:	0a1a      	lsrs	r2, r3, #8
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	b2d1      	uxtb	r1, r2
 8000902:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <makeByteArray+0x54>)
 8000904:	54d1      	strb	r1, [r2, r3]
		data[2*i+1] = MaskByte(ADC_Results[2*i], 0);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	005a      	lsls	r2, r3, #1
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <makeByteArray+0x50>)
 800090c:	0092      	lsls	r2, r2, #2
 800090e:	58d2      	ldr	r2, [r2, r3]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	3301      	adds	r3, #1
 8000916:	b2d1      	uxtb	r1, r2
 8000918:	4a07      	ldr	r2, [pc, #28]	; (8000938 <makeByteArray+0x54>)
 800091a:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 7; i++)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3301      	adds	r3, #1
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2b06      	cmp	r3, #6
 8000926:	dde3      	ble.n	80008f0 <makeByteArray+0xc>
	}
}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b002      	add	sp, #8
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	20000200 	.word	0x20000200
 8000938:	200004a0 	.word	0x200004a0

0800093c <fillPaket>:

//_____Vytvoří strukturu Paket z dat v argumentech_____//
static void fillPaket(Paket* paket, outPaketType type, uint8_t* data, uint8_t dataLength)
{
 800093c:	b590      	push	{r4, r7, lr}
 800093e:	b087      	sub	sp, #28
 8000940:	af00      	add	r7, sp, #0
 8000942:	60f8      	str	r0, [r7, #12]
 8000944:	0008      	movs	r0, r1
 8000946:	607a      	str	r2, [r7, #4]
 8000948:	0019      	movs	r1, r3
 800094a:	240b      	movs	r4, #11
 800094c:	193b      	adds	r3, r7, r4
 800094e:	1c02      	adds	r2, r0, #0
 8000950:	701a      	strb	r2, [r3, #0]
 8000952:	200a      	movs	r0, #10
 8000954:	183b      	adds	r3, r7, r0
 8000956:	1c0a      	adds	r2, r1, #0
 8000958:	701a      	strb	r2, [r3, #0]
	paket->type = type;
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	0021      	movs	r1, r4
 800095e:	187a      	adds	r2, r7, r1
 8000960:	7812      	ldrb	r2, [r2, #0]
 8000962:	701a      	strb	r2, [r3, #0]
	paket->data = data;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	605a      	str	r2, [r3, #4]
	paket->dataLength = dataLength;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	183a      	adds	r2, r7, r0
 800096e:	7812      	ldrb	r2, [r2, #0]
 8000970:	721a      	strb	r2, [r3, #8]
	uint8_t CA = type;
 8000972:	2317      	movs	r3, #23
 8000974:	18fb      	adds	r3, r7, r3
 8000976:	187a      	adds	r2, r7, r1
 8000978:	7812      	ldrb	r2, [r2, #0]
 800097a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataLength; i++)
 800097c:	2300      	movs	r3, #0
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	e00c      	b.n	800099c <fillPaket+0x60>
		CA += data[i];
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	687a      	ldr	r2, [r7, #4]
 8000986:	18d3      	adds	r3, r2, r3
 8000988:	7819      	ldrb	r1, [r3, #0]
 800098a:	2217      	movs	r2, #23
 800098c:	18bb      	adds	r3, r7, r2
 800098e:	18ba      	adds	r2, r7, r2
 8000990:	7812      	ldrb	r2, [r2, #0]
 8000992:	188a      	adds	r2, r1, r2
 8000994:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataLength; i++)
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	3301      	adds	r3, #1
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	230a      	movs	r3, #10
 800099e:	18fb      	adds	r3, r7, r3
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	dbec      	blt.n	8000982 <fillPaket+0x46>
	paket->CA_value = CA;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	2217      	movs	r2, #23
 80009ac:	18ba      	adds	r2, r7, r2
 80009ae:	7812      	ldrb	r2, [r2, #0]
 80009b0:	725a      	strb	r2, [r3, #9]
}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b007      	add	sp, #28
 80009b8:	bd90      	pop	{r4, r7, pc}
	...

080009bc <pushPaket>:

//_____Vloží do bufferu řetězec odpovídající sestavenému paketu_____//
static void pushPaket(RING_BUFFER* buffer, Paket* paket)
{
 80009bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009be:	46c6      	mov	lr, r8
 80009c0:	b500      	push	{lr}
 80009c2:	b096      	sub	sp, #88	; 0x58
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	63f8      	str	r0, [r7, #60]	; 0x3c
 80009c8:	63b9      	str	r1, [r7, #56]	; 0x38
 80009ca:	466b      	mov	r3, sp
 80009cc:	4698      	mov	r8, r3
	uint8_t msg[paket->dataLength + 2];
 80009ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009d0:	7a1b      	ldrb	r3, [r3, #8]
 80009d2:	1c9a      	adds	r2, r3, #2
 80009d4:	1e53      	subs	r3, r2, #1
 80009d6:	657b      	str	r3, [r7, #84]	; 0x54
 80009d8:	0013      	movs	r3, r2
 80009da:	61bb      	str	r3, [r7, #24]
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
 80009e0:	69b8      	ldr	r0, [r7, #24]
 80009e2:	69f9      	ldr	r1, [r7, #28]
 80009e4:	0003      	movs	r3, r0
 80009e6:	0f5b      	lsrs	r3, r3, #29
 80009e8:	000e      	movs	r6, r1
 80009ea:	00f5      	lsls	r5, r6, #3
 80009ec:	431d      	orrs	r5, r3
 80009ee:	0003      	movs	r3, r0
 80009f0:	00dc      	lsls	r4, r3, #3
 80009f2:	0013      	movs	r3, r2
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	6938      	ldr	r0, [r7, #16]
 80009fc:	6979      	ldr	r1, [r7, #20]
 80009fe:	0003      	movs	r3, r0
 8000a00:	0f5b      	lsrs	r3, r3, #29
 8000a02:	000c      	movs	r4, r1
 8000a04:	00e4      	lsls	r4, r4, #3
 8000a06:	637c      	str	r4, [r7, #52]	; 0x34
 8000a08:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8000a0a:	431c      	orrs	r4, r3
 8000a0c:	637c      	str	r4, [r7, #52]	; 0x34
 8000a0e:	0003      	movs	r3, r0
 8000a10:	00db      	lsls	r3, r3, #3
 8000a12:	633b      	str	r3, [r7, #48]	; 0x30
 8000a14:	0013      	movs	r3, r2
 8000a16:	3307      	adds	r3, #7
 8000a18:	08db      	lsrs	r3, r3, #3
 8000a1a:	00db      	lsls	r3, r3, #3
 8000a1c:	466a      	mov	r2, sp
 8000a1e:	1ad3      	subs	r3, r2, r3
 8000a20:	469d      	mov	sp, r3
 8000a22:	466b      	mov	r3, sp
 8000a24:	3300      	adds	r3, #0
 8000a26:	653b      	str	r3, [r7, #80]	; 0x50
	msg[0] = paket->type;
 8000a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a2a:	781a      	ldrb	r2, [r3, #0]
 8000a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a2e:	701a      	strb	r2, [r3, #0]
	memcpy(msg+1, paket->data, paket->dataLength);
 8000a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a32:	1c58      	adds	r0, r3, #1
 8000a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a36:	6859      	ldr	r1, [r3, #4]
 8000a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a3a:	7a1b      	ldrb	r3, [r3, #8]
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	f00c fd41 	bl	800d4c4 <memcpy>
	msg[paket->dataLength+1] = paket->CA_value;
 8000a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a44:	7a1b      	ldrb	r3, [r3, #8]
 8000a46:	3301      	adds	r3, #1
 8000a48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a4a:	7a51      	ldrb	r1, [r2, #9]
 8000a4c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000a4e:	54d1      	strb	r1, [r2, r3]
	//msg[paket->dataLength+2] = 0U;

	uint8_t str[] = {">>"};
 8000a50:	200c      	movs	r0, #12
 8000a52:	2638      	movs	r6, #56	; 0x38
 8000a54:	19bb      	adds	r3, r7, r6
 8000a56:	181b      	adds	r3, r3, r0
 8000a58:	4a34      	ldr	r2, [pc, #208]	; (8000b2c <pushPaket+0x170>)
 8000a5a:	8811      	ldrh	r1, [r2, #0]
 8000a5c:	8019      	strh	r1, [r3, #0]
 8000a5e:	7892      	ldrb	r2, [r2, #2]
 8000a60:	709a      	strb	r2, [r3, #2]
	uint8_t end[] = {"<<\n"};
 8000a62:	2508      	movs	r5, #8
 8000a64:	19bb      	adds	r3, r7, r6
 8000a66:	195b      	adds	r3, r3, r5
 8000a68:	4a31      	ldr	r2, [pc, #196]	; (8000b30 <pushPaket+0x174>)
 8000a6a:	601a      	str	r2, [r3, #0]

	uint8_t toSend[6+paket->dataLength + 2];
 8000a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a6e:	7a1b      	ldrb	r3, [r3, #8]
 8000a70:	3308      	adds	r3, #8
 8000a72:	001c      	movs	r4, r3
 8000a74:	1e63      	subs	r3, r4, #1
 8000a76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a78:	0023      	movs	r3, r4
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68b9      	ldr	r1, [r7, #8]
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	000b      	movs	r3, r1
 8000a86:	0f5b      	lsrs	r3, r3, #29
 8000a88:	0016      	movs	r6, r2
 8000a8a:	00f6      	lsls	r6, r6, #3
 8000a8c:	62fe      	str	r6, [r7, #44]	; 0x2c
 8000a8e:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8000a90:	431e      	orrs	r6, r3
 8000a92:	62fe      	str	r6, [r7, #44]	; 0x2c
 8000a94:	000b      	movs	r3, r1
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a9a:	0023      	movs	r3, r4
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	6839      	ldr	r1, [r7, #0]
 8000aa4:	687a      	ldr	r2, [r7, #4]
 8000aa6:	000b      	movs	r3, r1
 8000aa8:	0f5b      	lsrs	r3, r3, #29
 8000aaa:	0016      	movs	r6, r2
 8000aac:	00f6      	lsls	r6, r6, #3
 8000aae:	627e      	str	r6, [r7, #36]	; 0x24
 8000ab0:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8000ab2:	431e      	orrs	r6, r3
 8000ab4:	627e      	str	r6, [r7, #36]	; 0x24
 8000ab6:	000b      	movs	r3, r1
 8000ab8:	00db      	lsls	r3, r3, #3
 8000aba:	623b      	str	r3, [r7, #32]
 8000abc:	0023      	movs	r3, r4
 8000abe:	3307      	adds	r3, #7
 8000ac0:	08db      	lsrs	r3, r3, #3
 8000ac2:	00db      	lsls	r3, r3, #3
 8000ac4:	466a      	mov	r2, sp
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	469d      	mov	sp, r3
 8000aca:	466b      	mov	r3, sp
 8000acc:	3300      	adds	r3, #0
 8000ace:	64bb      	str	r3, [r7, #72]	; 0x48
	//sprintf(toSend, "%s%s%s\n", str, msg, end);	//pro testNum = 0 se vytiskne jen paket->type, jelikož sprintf pak narazí na nulu
	memcpy(toSend, str, 2);
 8000ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ad2:	2638      	movs	r6, #56	; 0x38
 8000ad4:	19ba      	adds	r2, r7, r6
 8000ad6:	1811      	adds	r1, r2, r0
 8000ad8:	2202      	movs	r2, #2
 8000ada:	0018      	movs	r0, r3
 8000adc:	f00c fcf2 	bl	800d4c4 <memcpy>
	memcpy(toSend+2, msg, paket->dataLength + 2);
 8000ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ae2:	1c98      	adds	r0, r3, #2
 8000ae4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ae8:	7a1b      	ldrb	r3, [r3, #8]
 8000aea:	3302      	adds	r3, #2
 8000aec:	001a      	movs	r2, r3
 8000aee:	f00c fce9 	bl	800d4c4 <memcpy>
	memcpy(toSend+2+paket->dataLength + 2, end, 4);
 8000af2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000af6:	7a1b      	ldrb	r3, [r3, #8]
 8000af8:	3304      	adds	r3, #4
 8000afa:	18d2      	adds	r2, r2, r3
 8000afc:	19bb      	adds	r3, r7, r6
 8000afe:	195b      	adds	r3, r3, r5
 8000b00:	0010      	movs	r0, r2
 8000b02:	0019      	movs	r1, r3
 8000b04:	2304      	movs	r3, #4
 8000b06:	001a      	movs	r2, r3
 8000b08:	f00c fcdc 	bl	800d4c4 <memcpy>
	pushStr(buffer, toSend, sizeof(toSend)-1);
 8000b0c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000b0e:	0023      	movs	r3, r4
 8000b10:	3b01      	subs	r3, #1
 8000b12:	001a      	movs	r2, r3
 8000b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b16:	0018      	movs	r0, r3
 8000b18:	f001 fcab 	bl	8002472 <pushStr>
 8000b1c:	46c5      	mov	sp, r8
}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b016      	add	sp, #88	; 0x58
 8000b24:	bc80      	pop	{r7}
 8000b26:	46b8      	mov	r8, r7
 8000b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	0800dd48 	.word	0x0800dd48
 8000b30:	000a3c3c 	.word	0x000a3c3c

08000b34 <decodePaket>:

//_____Příchozí řetězec přepracuje do struktury typu paket (pokud to lze)_____//
static uint8_t decodePaket(/*Paket* paket,*/ uint8_t* data, uint8_t dataLenght)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b089      	sub	sp, #36	; 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	000a      	movs	r2, r1
 8000b3e:	1cfb      	adds	r3, r7, #3
 8000b40:	701a      	strb	r2, [r3, #0]
	int sum = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
	for(int i = 2; i < dataLenght - 3; i++)
 8000b46:	2302      	movs	r3, #2
 8000b48:	61bb      	str	r3, [r7, #24]
 8000b4a:	e00a      	b.n	8000b62 <decodePaket+0x2e>
	{
		sum += data[i];
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	18d3      	adds	r3, r2, r3
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	001a      	movs	r2, r3
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	189b      	adds	r3, r3, r2
 8000b5a:	61fb      	str	r3, [r7, #28]
	for(int i = 2; i < dataLenght - 3; i++)
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	61bb      	str	r3, [r7, #24]
 8000b62:	1cfb      	adds	r3, r7, #3
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	3b03      	subs	r3, #3
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	dbee      	blt.n	8000b4c <decodePaket+0x18>
	}
	if(sum == data[dataLenght - 3])	//kontorlní součet odpovídá
 8000b6e:	1cfb      	adds	r3, r7, #3
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	3b03      	subs	r3, #3
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	18d3      	adds	r3, r2, r3
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	001a      	movs	r2, r3
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d15a      	bne.n	8000c38 <decodePaket+0x104>
	{
		switch(data[2])	//Na třetím místě je instrukce
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3302      	adds	r3, #2
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	3b61      	subs	r3, #97	; 0x61
 8000b8a:	2b12      	cmp	r3, #18
 8000b8c:	d84e      	bhi.n	8000c2c <decodePaket+0xf8>
 8000b8e:	009a      	lsls	r2, r3, #2
 8000b90:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <decodePaket+0x120>)
 8000b92:	18d3      	adds	r3, r2, r3
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	469f      	mov	pc, r3
		{
		case 's': ;
			//___Start testu___//
			if(dataLenght == 7)
 8000b98:	1cfb      	adds	r3, r7, #3
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b07      	cmp	r3, #7
 8000b9e:	d14d      	bne.n	8000c3c <decodePaket+0x108>
			{
				flags.instructions.startRequest = 1;
 8000ba0:	4b2d      	ldr	r3, [pc, #180]	; (8000c58 <decodePaket+0x124>)
 8000ba2:	7b1a      	ldrb	r2, [r3, #12]
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	731a      	strb	r2, [r3, #12]
				supplyToTest = data[3];
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	78da      	ldrb	r2, [r3, #3]
 8000bae:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <decodePaket+0x128>)
 8000bb0:	701a      	strb	r2, [r3, #0]
				sprintf(txt, "Start\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				//Na pozici data je ukazatel na testovaný zdroj
			}
			break;
 8000bb2:	e043      	b.n	8000c3c <decodePaket+0x108>

		case'c': ;
			//___Ukončení___//
		if(dataLenght == 7)
 8000bb4:	1cfb      	adds	r3, r7, #3
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b07      	cmp	r3, #7
 8000bba:	d141      	bne.n	8000c40 <decodePaket+0x10c>
		{
			flags.instructions.stopRequest = 1;
 8000bbc:	4b26      	ldr	r3, [pc, #152]	; (8000c58 <decodePaket+0x124>)
 8000bbe:	7b1a      	ldrb	r2, [r3, #12]
 8000bc0:	2102      	movs	r1, #2
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Ukonceni\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000bc6:	e03b      	b.n	8000c40 <decodePaket+0x10c>

		case'p': ;
			//___Pauza___//
		if(dataLenght == 7)
 8000bc8:	1cfb      	adds	r3, r7, #3
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	2b07      	cmp	r3, #7
 8000bce:	d139      	bne.n	8000c44 <decodePaket+0x110>
		{
			flags.instructions.pauseRequest = 1;
 8000bd0:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <decodePaket+0x124>)
 8000bd2:	7b1a      	ldrb	r2, [r3, #12]
 8000bd4:	2104      	movs	r1, #4
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Pauza\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000bda:	e033      	b.n	8000c44 <decodePaket+0x110>

		case'k': ;
			//___Kalibrace___//
		if(dataLenght == 7)
 8000bdc:	1cfb      	adds	r3, r7, #3
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b07      	cmp	r3, #7
 8000be2:	d131      	bne.n	8000c48 <decodePaket+0x114>
		{
			flags.instructions.calibRequest = 1;
 8000be4:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <decodePaket+0x124>)
 8000be6:	7b1a      	ldrb	r2, [r3, #12]
 8000be8:	2108      	movs	r1, #8
 8000bea:	430a      	orrs	r2, r1
 8000bec:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Kalibrace\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000bee:	e02b      	b.n	8000c48 <decodePaket+0x114>

		case 'a' : ;
			//___Navázání komunikace___//
		if(dataLenght == 7)
 8000bf0:	1cfb      	adds	r3, r7, #3
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b07      	cmp	r3, #7
 8000bf6:	d119      	bne.n	8000c2c <decodePaket+0xf8>
		{
			uint8_t data = regCount;
 8000bf8:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <decodePaket+0x12c>)
 8000bfa:	781a      	ldrb	r2, [r3, #0]
 8000bfc:	2117      	movs	r1, #23
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	701a      	strb	r2, [r3, #0]
			Paket paket;
			fillPaket(&paket, ACK_PAKET, &data, 1);
 8000c02:	187a      	adds	r2, r7, r1
 8000c04:	2408      	movs	r4, #8
 8000c06:	1938      	adds	r0, r7, r4
 8000c08:	2301      	movs	r3, #1
 8000c0a:	2105      	movs	r1, #5
 8000c0c:	f7ff fe96 	bl	800093c <fillPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <decodePaket+0x130>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	193a      	adds	r2, r7, r4
 8000c16:	0011      	movs	r1, r2
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f7ff fecf 	bl	80009bc <pushPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <decodePaket+0x130>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	193a      	adds	r2, r7, r4
 8000c24:	0011      	movs	r1, r2
 8000c26:	0018      	movs	r0, r3
 8000c28:	f7ff fec8 	bl	80009bc <pushPaket>
		}

		default: ;
			//___Neplatný příkaz___//
			flags.instructions.unknownInst = 1;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <decodePaket+0x124>)
 8000c2e:	7b1a      	ldrb	r2, [r3, #12]
 8000c30:	2110      	movs	r1, #16
 8000c32:	430a      	orrs	r2, r1
 8000c34:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
			sprintf(txt, "Neplatna instrukce\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			break;
 8000c36:	e008      	b.n	8000c4a <decodePaket+0x116>
		}
	}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	e006      	b.n	8000c4a <decodePaket+0x116>
			break;
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	e004      	b.n	8000c4a <decodePaket+0x116>
			break;
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	e002      	b.n	8000c4a <decodePaket+0x116>
			break;
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	e000      	b.n	8000c4a <decodePaket+0x116>
			break;
 8000c48:	46c0      	nop			; (mov r8, r8)
	return 1;
 8000c4a:	2301      	movs	r3, #1
}
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b009      	add	sp, #36	; 0x24
 8000c52:	bd90      	pop	{r4, r7, pc}
 8000c54:	0800de7c 	.word	0x0800de7c
 8000c58:	2000063c 	.word	0x2000063c
 8000c5c:	20000252 	.word	0x20000252
 8000c60:	2000069d 	.word	0x2000069d
 8000c64:	2000049c 	.word	0x2000049c

08000c68 <setColour>:
static BACKLIGHT colour;

//_____Rozvítí podsvícení dané argumentem_____//
//-> argument: Barva podsvícení
void setColour(BACKLIGHT colourToSet)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	0002      	movs	r2, r0
 8000c70:	1dfb      	adds	r3, r7, #7
 8000c72:	701a      	strb	r2, [r3, #0]
	switch(colourToSet)
 8000c74:	1dfb      	adds	r3, r7, #7
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b02      	cmp	r3, #2
 8000c7a:	d033      	beq.n	8000ce4 <setColour+0x7c>
 8000c7c:	dc49      	bgt.n	8000d12 <setColour+0xaa>
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d002      	beq.n	8000c88 <setColour+0x20>
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d017      	beq.n	8000cb6 <setColour+0x4e>
 8000c86:	e044      	b.n	8000d12 <setColour+0xaa>
	{
	case BACKLIGHT_WHITE:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_SET);
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	4830      	ldr	r0, [pc, #192]	; (8000d50 <setColour+0xe8>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	0019      	movs	r1, r3
 8000c92:	f003 fa9e 	bl	80041d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000c96:	2380      	movs	r3, #128	; 0x80
 8000c98:	0219      	lsls	r1, r3, #8
 8000c9a:	2390      	movs	r3, #144	; 0x90
 8000c9c:	05db      	lsls	r3, r3, #23
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f003 fa96 	bl	80041d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000ca6:	2380      	movs	r3, #128	; 0x80
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	4829      	ldr	r0, [pc, #164]	; (8000d50 <setColour+0xe8>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	0019      	movs	r1, r3
 8000cb0:	f003 fa8f 	bl	80041d2 <HAL_GPIO_WritePin>
		break;
 8000cb4:	e044      	b.n	8000d40 <setColour+0xd8>

	case BACKLIGHT_GREEN:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4825      	ldr	r0, [pc, #148]	; (8000d50 <setColour+0xe8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	0019      	movs	r1, r3
 8000cc0:	f003 fa87 	bl	80041d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000cc4:	2380      	movs	r3, #128	; 0x80
 8000cc6:	0219      	lsls	r1, r3, #8
 8000cc8:	2390      	movs	r3, #144	; 0x90
 8000cca:	05db      	lsls	r3, r3, #23
 8000ccc:	2200      	movs	r2, #0
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f003 fa7f 	bl	80041d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_SET);
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	481d      	ldr	r0, [pc, #116]	; (8000d50 <setColour+0xe8>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	0019      	movs	r1, r3
 8000cde:	f003 fa78 	bl	80041d2 <HAL_GPIO_WritePin>
		break;
 8000ce2:	e02d      	b.n	8000d40 <setColour+0xd8>

	case BACKLIGHT_RED:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	4819      	ldr	r0, [pc, #100]	; (8000d50 <setColour+0xe8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	0019      	movs	r1, r3
 8000cee:	f003 fa70 	bl	80041d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_SET);
 8000cf2:	2380      	movs	r3, #128	; 0x80
 8000cf4:	0219      	lsls	r1, r3, #8
 8000cf6:	2390      	movs	r3, #144	; 0x90
 8000cf8:	05db      	lsls	r3, r3, #23
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f003 fa68 	bl	80041d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000d02:	2380      	movs	r3, #128	; 0x80
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	4812      	ldr	r0, [pc, #72]	; (8000d50 <setColour+0xe8>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	0019      	movs	r1, r3
 8000d0c:	f003 fa61 	bl	80041d2 <HAL_GPIO_WritePin>
		break;
 8000d10:	e016      	b.n	8000d40 <setColour+0xd8>

	default:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000d12:	2380      	movs	r3, #128	; 0x80
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	480e      	ldr	r0, [pc, #56]	; (8000d50 <setColour+0xe8>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	0019      	movs	r1, r3
 8000d1c:	f003 fa59 	bl	80041d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000d20:	2380      	movs	r3, #128	; 0x80
 8000d22:	0219      	lsls	r1, r3, #8
 8000d24:	2390      	movs	r3, #144	; 0x90
 8000d26:	05db      	lsls	r3, r3, #23
 8000d28:	2200      	movs	r2, #0
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f003 fa51 	bl	80041d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	4806      	ldr	r0, [pc, #24]	; (8000d50 <setColour+0xe8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	0019      	movs	r1, r3
 8000d3a:	f003 fa4a 	bl	80041d2 <HAL_GPIO_WritePin>
		break;
 8000d3e:	46c0      	nop			; (mov r8, r8)
	}

	colour = colourToSet;
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <setColour+0xec>)
 8000d42:	1dfa      	adds	r2, r7, #7
 8000d44:	7812      	ldrb	r2, [r2, #0]
 8000d46:	701a      	strb	r2, [r3, #0]
}
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b002      	add	sp, #8
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	48000400 	.word	0x48000400
 8000d54:	200001fc 	.word	0x200001fc

08000d58 <sendByte>:

//_____Pošle byte dat_____//
//-> argumenty: char - posílaný byte, Start_byte definuje zda jde o instrukci nebo data
// !!! Pracuje v blokujícím módu !!!
static DISP_STATE sendByte(char byte, START_BYTE type)
{
 8000d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	0002      	movs	r2, r0
 8000d60:	1dfb      	adds	r3, r7, #7
 8000d62:	701a      	strb	r2, [r3, #0]
 8000d64:	1dbb      	adds	r3, r7, #6
 8000d66:	1c0a      	adds	r2, r1, #0
 8000d68:	701a      	strb	r2, [r3, #0]
		{
			return SPI_ERR;
		}
	}*/
	uint8_t buffer[3];
	switch(type)
 8000d6a:	1dbb      	adds	r3, r7, #6
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d002      	beq.n	8000d78 <sendByte+0x20>
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d005      	beq.n	8000d82 <sendByte+0x2a>
 8000d76:	e009      	b.n	8000d8c <sendByte+0x34>
	{
		case INSTRUCTION:
			buffer[0] = 0xF8;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	18fb      	adds	r3, r7, r3
 8000d7c:	22f8      	movs	r2, #248	; 0xf8
 8000d7e:	701a      	strb	r2, [r3, #0]
			break;
 8000d80:	e006      	b.n	8000d90 <sendByte+0x38>
		case DATA:
			buffer[0] = 0xFA;
 8000d82:	2308      	movs	r3, #8
 8000d84:	18fb      	adds	r3, r7, r3
 8000d86:	22fa      	movs	r2, #250	; 0xfa
 8000d88:	701a      	strb	r2, [r3, #0]
			break;
 8000d8a:	e001      	b.n	8000d90 <sendByte+0x38>
		default:	//neošetřené možnosti
			return SPI_ERR;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	e074      	b.n	8000e7a <sendByte+0x122>
			break;
	}
	uint8_t tmp1 = 0U, tmp2 = 0U;
 8000d90:	230f      	movs	r3, #15
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	230e      	movs	r3, #14
 8000d9a:	18fb      	adds	r3, r7, r3
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8000da0:	230d      	movs	r3, #13
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
 8000da8:	e03a      	b.n	8000e20 <sendByte+0xc8>
	{
		if(MaskBit(byte, i))
 8000daa:	1dfb      	adds	r3, r7, #7
 8000dac:	781a      	ldrb	r2, [r3, #0]
 8000dae:	210d      	movs	r1, #13
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	411a      	asrs	r2, r3
 8000db6:	0013      	movs	r3, r2
 8000db8:	2201      	movs	r2, #1
 8000dba:	4013      	ands	r3, r2
 8000dbc:	d00f      	beq.n	8000dde <sendByte+0x86>
		{
			SetBit(tmp1, (7-i));
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2207      	movs	r2, #7
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	409a      	lsls	r2, r3
 8000dca:	0013      	movs	r3, r2
 8000dcc:	b25a      	sxtb	r2, r3
 8000dce:	210f      	movs	r1, #15
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	b25b      	sxtb	r3, r3
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	b25a      	sxtb	r2, r3
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	701a      	strb	r2, [r3, #0]
		}
		if(MaskBit(byte, (i+4)))
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	781a      	ldrb	r2, [r3, #0]
 8000de2:	210d      	movs	r1, #13
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	3304      	adds	r3, #4
 8000dea:	411a      	asrs	r2, r3
 8000dec:	0013      	movs	r3, r2
 8000dee:	2201      	movs	r2, #1
 8000df0:	4013      	ands	r3, r2
 8000df2:	d00f      	beq.n	8000e14 <sendByte+0xbc>
		{
			SetBit(tmp2, (7-i));
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	2207      	movs	r2, #7
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	409a      	lsls	r2, r3
 8000e00:	0013      	movs	r3, r2
 8000e02:	b25a      	sxtb	r2, r3
 8000e04:	210e      	movs	r1, #14
 8000e06:	187b      	adds	r3, r7, r1
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b25b      	sxtb	r3, r3
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b25a      	sxtb	r2, r3
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8000e14:	210d      	movs	r1, #13
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	781a      	ldrb	r2, [r3, #0]
 8000e1a:	187b      	adds	r3, r7, r1
 8000e1c:	3201      	adds	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
 8000e20:	230d      	movs	r3, #13
 8000e22:	18fb      	adds	r3, r7, r3
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d9bf      	bls.n	8000daa <sendByte+0x52>
		}
	}
	buffer[1] = tmp1;
 8000e2a:	2508      	movs	r5, #8
 8000e2c:	197b      	adds	r3, r7, r5
 8000e2e:	220f      	movs	r2, #15
 8000e30:	18ba      	adds	r2, r7, r2
 8000e32:	7812      	ldrb	r2, [r2, #0]
 8000e34:	705a      	strb	r2, [r3, #1]
	buffer[2] = tmp2;
 8000e36:	197b      	adds	r3, r7, r5
 8000e38:	220e      	movs	r2, #14
 8000e3a:	18ba      	adds	r2, r7, r2
 8000e3c:	7812      	ldrb	r2, [r2, #0]
 8000e3e:	709a      	strb	r2, [r3, #2]

	DISP_CS_ON;
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <sendByte+0x12c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	2140      	movs	r1, #64	; 0x40
 8000e46:	0018      	movs	r0, r3
 8000e48:	f003 f9c3 	bl	80041d2 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, buffer, 3, 100);
 8000e4c:	260c      	movs	r6, #12
 8000e4e:	19bc      	adds	r4, r7, r6
 8000e50:	1979      	adds	r1, r7, r5
 8000e52:	480d      	ldr	r0, [pc, #52]	; (8000e88 <sendByte+0x130>)
 8000e54:	2364      	movs	r3, #100	; 0x64
 8000e56:	2203      	movs	r2, #3
 8000e58:	f005 ff3a 	bl	8006cd0 <HAL_SPI_Transmit>
 8000e5c:	0003      	movs	r3, r0
 8000e5e:	7023      	strb	r3, [r4, #0]
	DISP_CS_OFF;
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <sendByte+0x12c>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	2140      	movs	r1, #64	; 0x40
 8000e66:	0018      	movs	r0, r3
 8000e68:	f003 f9b3 	bl	80041d2 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	if(ret == HAL_OK)
 8000e6c:	19bb      	adds	r3, r7, r6
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d101      	bne.n	8000e78 <sendByte+0x120>
		return DISP_OK;
 8000e74:	2300      	movs	r3, #0
 8000e76:	e000      	b.n	8000e7a <sendByte+0x122>
	else
		return SPI_ERR;
 8000e78:	2302      	movs	r3, #2
}
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b005      	add	sp, #20
 8000e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	48000400 	.word	0x48000400
 8000e88:	20000590 	.word	0x20000590

08000e8c <dispInit>:
}

//_____Provede reset displeje a defaultní nastavení_____//
// !!! Pracuje v blokujícím módu !!!
void dispInit(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	//_____Reset displeje po startu_____//
	HAL_Delay(10);
 8000e90:	200a      	movs	r0, #10
 8000e92:	f002 f969 	bl	8003168 <HAL_Delay>
	HAL_GPIO_WritePin(DISP_RST_GPIO_Port,DISP_RST_Pin, GPIO_PIN_RESET);
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <dispInit+0x74>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2180      	movs	r1, #128	; 0x80
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f003 f998 	bl	80041d2 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000ea2:	2014      	movs	r0, #20
 8000ea4:	f002 f960 	bl	8003168 <HAL_Delay>
	HAL_GPIO_WritePin(DISP_RST_GPIO_Port,DISP_RST_Pin, GPIO_PIN_SET);
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <dispInit+0x74>)
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2180      	movs	r1, #128	; 0x80
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f003 f98f 	bl	80041d2 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000eb4:	2005      	movs	r0, #5
 8000eb6:	f002 f957 	bl	8003168 <HAL_Delay>

	//_____Nastavit parametry_____//
	sendByte(0x31, INSTRUCTION);	//Function set
 8000eba:	2101      	movs	r1, #1
 8000ebc:	2031      	movs	r0, #49	; 0x31
 8000ebe:	f7ff ff4b 	bl	8000d58 <sendByte>
	sendByte(0x01, INSTRUCTION);	//Clear display
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f7ff ff47 	bl	8000d58 <sendByte>
	sendByte(0x13, INSTRUCTION);	//Oscilator
 8000eca:	2101      	movs	r1, #1
 8000ecc:	2013      	movs	r0, #19
 8000ece:	f7ff ff43 	bl	8000d58 <sendByte>
	sendByte(0x70, INSTRUCTION);	//Contrast
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	2070      	movs	r0, #112	; 0x70
 8000ed6:	f7ff ff3f 	bl	8000d58 <sendByte>
	sendByte(0x5C, INSTRUCTION);	//Power/Icon/Contrast
 8000eda:	2101      	movs	r1, #1
 8000edc:	205c      	movs	r0, #92	; 0x5c
 8000ede:	f7ff ff3b 	bl	8000d58 <sendByte>
	sendByte(0x6B, INSTRUCTION);	//Follower control
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	206b      	movs	r0, #107	; 0x6b
 8000ee6:	f7ff ff37 	bl	8000d58 <sendByte>
	sendByte(0x0F, INSTRUCTION);	//Display on
 8000eea:	2101      	movs	r1, #1
 8000eec:	200f      	movs	r0, #15
 8000eee:	f7ff ff33 	bl	8000d58 <sendByte>

	//_____Zapnout podsvícení_____//
	setColour(BACKLIGHT_WHITE);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff feb8 	bl	8000c68 <setColour>
}
 8000ef8:	46c0      	nop			; (mov r8, r8)
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	48000400 	.word	0x48000400

08000f04 <setCursor>:
//_____Nastaví kurzor_____//
//pozice počítána od nuly//
//-> argumenty: řádek, sloupec
// !!! Pracuje v blokujícím módu !!!
DISP_STATE setCursor(uint8_t row, uint8_t col)
{
 8000f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	0002      	movs	r2, r0
 8000f0c:	1dfb      	adds	r3, r7, #7
 8000f0e:	701a      	strb	r2, [r3, #0]
 8000f10:	1dbb      	adds	r3, r7, #6
 8000f12:	1c0a      	adds	r2, r1, #0
 8000f14:	701a      	strb	r2, [r3, #0]
	uint8_t addres = 0x80;	//DDRAM adresa
 8000f16:	230f      	movs	r3, #15
 8000f18:	18fb      	adds	r3, r7, r3
 8000f1a:	2280      	movs	r2, #128	; 0x80
 8000f1c:	701a      	strb	r2, [r3, #0]
	if(row > 3 || col > 15)	//displej 4x16
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d803      	bhi.n	8000f2e <setCursor+0x2a>
 8000f26:	1dbb      	adds	r3, r7, #6
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b0f      	cmp	r3, #15
 8000f2c:	d901      	bls.n	8000f32 <setCursor+0x2e>
		return DISP_ERR;
 8000f2e:	2304      	movs	r3, #4
 8000f30:	e020      	b.n	8000f74 <setCursor+0x70>
	addres += row*0x20;
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	015b      	lsls	r3, r3, #5
 8000f38:	b2d9      	uxtb	r1, r3
 8000f3a:	250f      	movs	r5, #15
 8000f3c:	197b      	adds	r3, r7, r5
 8000f3e:	197a      	adds	r2, r7, r5
 8000f40:	7812      	ldrb	r2, [r2, #0]
 8000f42:	188a      	adds	r2, r1, r2
 8000f44:	701a      	strb	r2, [r3, #0]
	addres += col;
 8000f46:	197b      	adds	r3, r7, r5
 8000f48:	1979      	adds	r1, r7, r5
 8000f4a:	1dba      	adds	r2, r7, #6
 8000f4c:	7809      	ldrb	r1, [r1, #0]
 8000f4e:	7812      	ldrb	r2, [r2, #0]
 8000f50:	188a      	adds	r2, r1, r2
 8000f52:	701a      	strb	r2, [r3, #0]

	sendByte(0x38, INSTRUCTION);	//Function set RE = 0
 8000f54:	2101      	movs	r1, #1
 8000f56:	2038      	movs	r0, #56	; 0x38
 8000f58:	f7ff fefe 	bl	8000d58 <sendByte>
	//HAL_Delay(5);
	DISP_STATE ret = sendByte(addres, INSTRUCTION);
 8000f5c:	260e      	movs	r6, #14
 8000f5e:	19bc      	adds	r4, r7, r6
 8000f60:	197b      	adds	r3, r7, r5
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	2101      	movs	r1, #1
 8000f66:	0018      	movs	r0, r3
 8000f68:	f7ff fef6 	bl	8000d58 <sendByte>
 8000f6c:	0003      	movs	r3, r0
 8000f6e:	7023      	strb	r3, [r4, #0]
	//HAL_Delay(5);
	return ret;
 8000f70:	19bb      	adds	r3, r7, r6
 8000f72:	781b      	ldrb	r3, [r3, #0]
}
 8000f74:	0018      	movs	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b005      	add	sp, #20
 8000f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f7c <writeChar>:

//_____Zapiš znak na dané souřadnice_____//
//-> argumenty: znak k zobrazení, řádek, sloupec
// !!! Pracuje v blokujícím módu !!!
DISP_STATE writeChar(char character, uint8_t row, uint8_t col)
{
 8000f7c:	b5b0      	push	{r4, r5, r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	0004      	movs	r4, r0
 8000f84:	0008      	movs	r0, r1
 8000f86:	0011      	movs	r1, r2
 8000f88:	1dfb      	adds	r3, r7, #7
 8000f8a:	1c22      	adds	r2, r4, #0
 8000f8c:	701a      	strb	r2, [r3, #0]
 8000f8e:	1dbb      	adds	r3, r7, #6
 8000f90:	1c02      	adds	r2, r0, #0
 8000f92:	701a      	strb	r2, [r3, #0]
 8000f94:	1d7b      	adds	r3, r7, #5
 8000f96:	1c0a      	adds	r2, r1, #0
 8000f98:	701a      	strb	r2, [r3, #0]
	DISP_STATE ret = setCursor(row, col);
 8000f9a:	250f      	movs	r5, #15
 8000f9c:	197c      	adds	r4, r7, r5
 8000f9e:	1d7b      	adds	r3, r7, #5
 8000fa0:	781a      	ldrb	r2, [r3, #0]
 8000fa2:	1dbb      	adds	r3, r7, #6
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	0011      	movs	r1, r2
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff ffab 	bl	8000f04 <setCursor>
 8000fae:	0003      	movs	r3, r0
 8000fb0:	7023      	strb	r3, [r4, #0]
	//HAL_Delay(5);
	if(ret == DISP_OK)
 8000fb2:	197b      	adds	r3, r7, r5
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10b      	bne.n	8000fd2 <writeChar+0x56>
	{
		//doplnit úpravu dat podle převodní tabulky displeje
		ret = sendByte(character, DATA);
 8000fba:	197c      	adds	r4, r7, r5
 8000fbc:	1dfb      	adds	r3, r7, #7
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2102      	movs	r1, #2
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f7ff fec8 	bl	8000d58 <sendByte>
 8000fc8:	0003      	movs	r3, r0
 8000fca:	7023      	strb	r3, [r4, #0]
		//HAL_Delay(5);
		return ret;
 8000fcc:	197b      	adds	r3, r7, r5
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	e002      	b.n	8000fd8 <writeChar+0x5c>
	}
	else
		return ret;
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	18fb      	adds	r3, r7, r3
 8000fd6:	781b      	ldrb	r3, [r3, #0]
}
 8000fd8:	0018      	movs	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b004      	add	sp, #16
 8000fde:	bdb0      	pop	{r4, r5, r7, pc}

08000fe0 <writeRow>:
//_____Zapiš řetězec na daný řádek_____//
//znaky přečnívající znaky budou smazány//
//-> argumenty: pole znaků, délka řetězce, řádek, zarovnání
// !!! Pracuje v blokujícím módu !!!
DISP_STATE writeRow(char* string, uint8_t lenght, uint8_t row, ALIGN align)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	000c      	movs	r4, r1
 8000fea:	0010      	movs	r0, r2
 8000fec:	0019      	movs	r1, r3
 8000fee:	1cfb      	adds	r3, r7, #3
 8000ff0:	1c22      	adds	r2, r4, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
 8000ff4:	1cbb      	adds	r3, r7, #2
 8000ff6:	1c02      	adds	r2, r0, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
 8000ffa:	1c7b      	adds	r3, r7, #1
 8000ffc:	1c0a      	adds	r2, r1, #0
 8000ffe:	701a      	strb	r2, [r3, #0]
	if(lenght > 16)	//neplatná délka řetězce
 8001000:	1cfb      	adds	r3, r7, #3
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b10      	cmp	r3, #16
 8001006:	d901      	bls.n	800100c <writeRow+0x2c>
		return DISP_ERR;
 8001008:	2304      	movs	r3, #4
 800100a:	e080      	b.n	800110e <writeRow+0x12e>
	uint8_t col;
	char newString[16];
	for(uint8_t i = 0; i < 16; i++)
 800100c:	231e      	movs	r3, #30
 800100e:	18fb      	adds	r3, r7, r3
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	e00b      	b.n	800102e <writeRow+0x4e>
	{
		newString[i] = ' ';
 8001016:	201e      	movs	r0, #30
 8001018:	183b      	adds	r3, r7, r0
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	220c      	movs	r2, #12
 800101e:	18ba      	adds	r2, r7, r2
 8001020:	2120      	movs	r1, #32
 8001022:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 16; i++)
 8001024:	183b      	adds	r3, r7, r0
 8001026:	781a      	ldrb	r2, [r3, #0]
 8001028:	183b      	adds	r3, r7, r0
 800102a:	3201      	adds	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	231e      	movs	r3, #30
 8001030:	18fb      	adds	r3, r7, r3
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b0f      	cmp	r3, #15
 8001036:	d9ee      	bls.n	8001016 <writeRow+0x36>
	}
	switch(align)
 8001038:	1c7b      	adds	r3, r7, #1
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d012      	beq.n	8001066 <writeRow+0x86>
 8001040:	dc1e      	bgt.n	8001080 <writeRow+0xa0>
 8001042:	2b00      	cmp	r3, #0
 8001044:	d002      	beq.n	800104c <writeRow+0x6c>
 8001046:	2b01      	cmp	r3, #1
 8001048:	d005      	beq.n	8001056 <writeRow+0x76>
 800104a:	e019      	b.n	8001080 <writeRow+0xa0>
	{
		case LEFT:	//zarovnání doleva
			col = 0;
 800104c:	231f      	movs	r3, #31
 800104e:	18fb      	adds	r3, r7, r3
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
			break;
 8001054:	e019      	b.n	800108a <writeRow+0xaa>
		case RIGHT:
			col = 15 - lenght;
 8001056:	231f      	movs	r3, #31
 8001058:	18fb      	adds	r3, r7, r3
 800105a:	1cfa      	adds	r2, r7, #3
 800105c:	7812      	ldrb	r2, [r2, #0]
 800105e:	210f      	movs	r1, #15
 8001060:	1a8a      	subs	r2, r1, r2
 8001062:	701a      	strb	r2, [r3, #0]
			break;
 8001064:	e011      	b.n	800108a <writeRow+0xaa>
		case CENTER:
			col = (15 - lenght)/2 + 1;
 8001066:	1cfb      	adds	r3, r7, #3
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	220f      	movs	r2, #15
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	d500      	bpl.n	8001072 <writeRow+0x92>
 8001070:	3301      	adds	r3, #1
 8001072:	105b      	asrs	r3, r3, #1
 8001074:	b2da      	uxtb	r2, r3
 8001076:	231f      	movs	r3, #31
 8001078:	18fb      	adds	r3, r7, r3
 800107a:	3201      	adds	r2, #1
 800107c:	701a      	strb	r2, [r3, #0]
			break;
 800107e:	e004      	b.n	800108a <writeRow+0xaa>
		default:
			col = 0;
 8001080:	231f      	movs	r3, #31
 8001082:	18fb      	adds	r3, r7, r3
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
			break;
 8001088:	46c0      	nop			; (mov r8, r8)
	}
	for(uint8_t i = 0; i < lenght; i++)
 800108a:	231d      	movs	r3, #29
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	e013      	b.n	80010bc <writeRow+0xdc>
	{
		newString[col + i] = string[i];
 8001094:	201d      	movs	r0, #29
 8001096:	183b      	adds	r3, r7, r0
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	18d2      	adds	r2, r2, r3
 800109e:	231f      	movs	r3, #31
 80010a0:	18fb      	adds	r3, r7, r3
 80010a2:	7819      	ldrb	r1, [r3, #0]
 80010a4:	183b      	adds	r3, r7, r0
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	18cb      	adds	r3, r1, r3
 80010aa:	7811      	ldrb	r1, [r2, #0]
 80010ac:	220c      	movs	r2, #12
 80010ae:	18ba      	adds	r2, r7, r2
 80010b0:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < lenght; i++)
 80010b2:	183b      	adds	r3, r7, r0
 80010b4:	781a      	ldrb	r2, [r3, #0]
 80010b6:	183b      	adds	r3, r7, r0
 80010b8:	3201      	adds	r2, #1
 80010ba:	701a      	strb	r2, [r3, #0]
 80010bc:	231d      	movs	r3, #29
 80010be:	18fa      	adds	r2, r7, r3
 80010c0:	1cfb      	adds	r3, r7, #3
 80010c2:	7812      	ldrb	r2, [r2, #0]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d3e4      	bcc.n	8001094 <writeRow+0xb4>
	}
	for(uint8_t i = 0; i < 16; i++)
 80010ca:	231c      	movs	r3, #28
 80010cc:	18fb      	adds	r3, r7, r3
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
 80010d2:	e016      	b.n	8001102 <writeRow+0x122>
	{
		if(writeChar(newString[i], row, i) != DISP_OK)
 80010d4:	211c      	movs	r1, #28
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	220c      	movs	r2, #12
 80010dc:	18ba      	adds	r2, r7, r2
 80010de:	5cd0      	ldrb	r0, [r2, r3]
 80010e0:	187b      	adds	r3, r7, r1
 80010e2:	781a      	ldrb	r2, [r3, #0]
 80010e4:	1cbb      	adds	r3, r7, #2
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	0019      	movs	r1, r3
 80010ea:	f7ff ff47 	bl	8000f7c <writeChar>
 80010ee:	1e03      	subs	r3, r0, #0
 80010f0:	d001      	beq.n	80010f6 <writeRow+0x116>
					return SPI_ERR;
 80010f2:	2302      	movs	r3, #2
 80010f4:	e00b      	b.n	800110e <writeRow+0x12e>
	for(uint8_t i = 0; i < 16; i++)
 80010f6:	211c      	movs	r1, #28
 80010f8:	187b      	adds	r3, r7, r1
 80010fa:	781a      	ldrb	r2, [r3, #0]
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	3201      	adds	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
 8001102:	231c      	movs	r3, #28
 8001104:	18fb      	adds	r3, r7, r3
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b0f      	cmp	r3, #15
 800110a:	d9e3      	bls.n	80010d4 <writeRow+0xf4>
	}
	return DISP_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	0018      	movs	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	b009      	add	sp, #36	; 0x24
 8001114:	bd90      	pop	{r4, r7, pc}
	...

08001118 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	0002      	movs	r2, r0
 8001120:	1dbb      	adds	r3, r7, #6
 8001122:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 8001124:	1dbb      	adds	r3, r7, #6
 8001126:	881a      	ldrh	r2, [r3, #0]
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	429a      	cmp	r2, r3
 800112e:	d104      	bne.n	800113a <HAL_GPIO_EXTI_Callback+0x22>
	{
		flags.buttons.butt0_int = 1;
 8001130:	4b09      	ldr	r3, [pc, #36]	; (8001158 <HAL_GPIO_EXTI_Callback+0x40>)
 8001132:	791a      	ldrb	r2, [r3, #4]
 8001134:	2101      	movs	r1, #1
 8001136:	430a      	orrs	r2, r1
 8001138:	711a      	strb	r2, [r3, #4]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 800113a:	1dbb      	adds	r3, r7, #6
 800113c:	881a      	ldrh	r2, [r3, #0]
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	429a      	cmp	r2, r3
 8001144:	d104      	bne.n	8001150 <HAL_GPIO_EXTI_Callback+0x38>
	{
		flags.buttons.butt1_int = 1;
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <HAL_GPIO_EXTI_Callback+0x40>)
 8001148:	791a      	ldrb	r2, [r3, #4]
 800114a:	2104      	movs	r1, #4
 800114c:	430a      	orrs	r2, r1
 800114e:	711a      	strb	r2, [r3, #4]
	}
}
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	b002      	add	sp, #8
 8001156:	bd80      	pop	{r7, pc}
 8001158:	2000063c 	.word	0x2000063c

0800115c <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001168:	429a      	cmp	r2, r3
 800116a:	d104      	bne.n	8001176 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		flags.time.ten_ms = 1;
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800116e:	781a      	ldrb	r2, [r3, #0]
 8001170:	2101      	movs	r1, #1
 8001172:	430a      	orrs	r2, r1
 8001174:	701a      	strb	r2, [r3, #0]
	}
}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	46bd      	mov	sp, r7
 800117a:	b002      	add	sp, #8
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	200005f4 	.word	0x200005f4
 8001184:	2000063c 	.word	0x2000063c

08001188 <HAL_ADC_ConvCpltCallback>:

//_____ADC data ready callback_____//
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_IT(&hadc);
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	0018      	movs	r0, r3
 8001194:	f002 f9be 	bl	8003514 <HAL_ADC_Stop_IT>
	flags.meas.measDataReady = 1;
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <HAL_ADC_ConvCpltCallback+0x24>)
 800119a:	7d1a      	ldrb	r2, [r3, #20]
 800119c:	2104      	movs	r1, #4
 800119e:	430a      	orrs	r2, r1
 80011a0:	751a      	strb	r2, [r3, #20]
}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	46bd      	mov	sp, r7
 80011a6:	b002      	add	sp, #8
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	2000063c 	.word	0x2000063c

080011b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b6:	f001 ff73 	bl	80030a0 <HAL_Init>

  /* USER CODE BEGIN Init */

  //__Buffery___//
  dispBuffer = createBuffer(100);
 80011ba:	2064      	movs	r0, #100	; 0x64
 80011bc:	f001 f8d7 	bl	800236e <createBuffer>
 80011c0:	0002      	movs	r2, r0
 80011c2:	4b46      	ldr	r3, [pc, #280]	; (80012dc <main+0x12c>)
 80011c4:	601a      	str	r2, [r3, #0]
  regBuffer = createBuffer(100);
 80011c6:	2064      	movs	r0, #100	; 0x64
 80011c8:	f001 f8d1 	bl	800236e <createBuffer>
 80011cc:	0002      	movs	r2, r0
 80011ce:	4b44      	ldr	r3, [pc, #272]	; (80012e0 <main+0x130>)
 80011d0:	601a      	str	r2, [r3, #0]
  USB_Rx_Buffer = createBuffer(500);
 80011d2:	23fa      	movs	r3, #250	; 0xfa
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	0018      	movs	r0, r3
 80011d8:	f001 f8c9 	bl	800236e <createBuffer>
 80011dc:	0002      	movs	r2, r0
 80011de:	4b41      	ldr	r3, [pc, #260]	; (80012e4 <main+0x134>)
 80011e0:	601a      	str	r2, [r3, #0]
  USB_Tx_Buffer = createBuffer(500);
 80011e2:	23fa      	movs	r3, #250	; 0xfa
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	0018      	movs	r0, r3
 80011e8:	f001 f8c1 	bl	800236e <createBuffer>
 80011ec:	0002      	movs	r2, r0
 80011ee:	4b3e      	ldr	r3, [pc, #248]	; (80012e8 <main+0x138>)
 80011f0:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f2:	f000 f885 	bl	8001300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f6:	f000 facf 	bl	8001798 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80011fa:	f00b fbbf 	bl	800c97c <MX_USB_DEVICE_Init>
  MX_ADC_Init();
 80011fe:	f000 f8eb 	bl	80013d8 <MX_ADC_Init>
  MX_SPI1_Init();
 8001202:	f000 fa07 	bl	8001614 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001206:	f000 fa97 	bl	8001738 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 800120a:	f000 fa49 	bl	80016a0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Inicializace displeje___//
  dispInit();
 800120e:	f7ff fe3d 	bl	8000e8c <dispInit>
  char line1[] = "Zahoreni";
 8001212:	200c      	movs	r0, #12
 8001214:	183b      	adds	r3, r7, r0
 8001216:	4a35      	ldr	r2, [pc, #212]	; (80012ec <main+0x13c>)
 8001218:	ca12      	ldmia	r2!, {r1, r4}
 800121a:	c312      	stmia	r3!, {r1, r4}
 800121c:	7812      	ldrb	r2, [r2, #0]
 800121e:	701a      	strb	r2, [r3, #0]
  char line2[] = "zdroju";
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	4a33      	ldr	r2, [pc, #204]	; (80012f0 <main+0x140>)
 8001224:	6811      	ldr	r1, [r2, #0]
 8001226:	6019      	str	r1, [r3, #0]
 8001228:	8891      	ldrh	r1, [r2, #4]
 800122a:	8099      	strh	r1, [r3, #4]
 800122c:	7992      	ldrb	r2, [r2, #6]
 800122e:	719a      	strb	r2, [r3, #6]
  writeRow(line1, 8, 1, CENTER);
 8001230:	1838      	adds	r0, r7, r0
 8001232:	2302      	movs	r3, #2
 8001234:	2201      	movs	r2, #1
 8001236:	2108      	movs	r1, #8
 8001238:	f7ff fed2 	bl	8000fe0 <writeRow>
  writeRow(line2, 6, 2, CENTER);
 800123c:	1d38      	adds	r0, r7, #4
 800123e:	2302      	movs	r3, #2
 8001240:	2202      	movs	r2, #2
 8001242:	2106      	movs	r1, #6
 8001244:	f7ff fecc 	bl	8000fe0 <writeRow>

  LOAD_MIN_OFF;
 8001248:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <main+0x144>)
 800124a:	2200      	movs	r2, #0
 800124c:	2180      	movs	r1, #128	; 0x80
 800124e:	0018      	movs	r0, r3
 8001250:	f002 ffbf 	bl	80041d2 <HAL_GPIO_WritePin>
  LOAD_MAX_OFF;
 8001254:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <main+0x144>)
 8001256:	2200      	movs	r2, #0
 8001258:	2140      	movs	r1, #64	; 0x40
 800125a:	0018      	movs	r0, r3
 800125c:	f002 ffb9 	bl	80041d2 <HAL_GPIO_WritePin>

  if(regInit() != REG_OK)	//inicializace shift registrů
 8001260:	f001 f9d2 	bl	8002608 <regInit>
 8001264:	1e03      	subs	r3, r0, #0
 8001266:	d004      	beq.n	8001272 <main+0xc2>
  {
	  flags.conErr = 1;
 8001268:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <main+0x148>)
 800126a:	7e1a      	ldrb	r2, [r3, #24]
 800126c:	2108      	movs	r1, #8
 800126e:	430a      	orrs	r2, r1
 8001270:	761a      	strb	r2, [r3, #24]
	  //Odešli zprávu do PC
  }

  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 8001272:	4b22      	ldr	r3, [pc, #136]	; (80012fc <main+0x14c>)
 8001274:	0018      	movs	r0, r3
 8001276:	f006 fa1b 	bl	80076b0 <HAL_TIM_Base_Start_IT>

  flags.ui.longBeep = 1;
 800127a:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <main+0x148>)
 800127c:	7c1a      	ldrb	r2, [r3, #16]
 800127e:	2102      	movs	r1, #2
 8001280:	430a      	orrs	r2, r1
 8001282:	741a      	strb	r2, [r3, #16]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flags.time.ten_ms)	// 10 ms
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <main+0x148>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	07db      	lsls	r3, r3, #31
 800128a:	0fdb      	lsrs	r3, r3, #31
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f8      	beq.n	8001284 <main+0xd4>
	  {
		  clkHandler();
 8001292:	f000 fb6d 	bl	8001970 <clkHandler>
		  buttonDebounce();
 8001296:	f000 fbe9 	bl	8001a6c <buttonDebounce>
		  comHandler();
 800129a:	f7ff f8bd 	bl	8000418 <comHandler>
		  if(flags.instructions.calibRequest)
 800129e:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <main+0x148>)
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	071b      	lsls	r3, r3, #28
 80012a4:	0fdb      	lsrs	r3, r3, #31
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00e      	beq.n	80012ca <main+0x11a>
		  {
			  flags.meas.measRequest = 1;
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <main+0x148>)
 80012ae:	7d1a      	ldrb	r2, [r3, #20]
 80012b0:	2101      	movs	r1, #1
 80012b2:	430a      	orrs	r2, r1
 80012b4:	751a      	strb	r2, [r3, #20]
			  flags.meas.calibMeas = 1;
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <main+0x148>)
 80012b8:	7d1a      	ldrb	r2, [r3, #20]
 80012ba:	2140      	movs	r1, #64	; 0x40
 80012bc:	430a      	orrs	r2, r1
 80012be:	751a      	strb	r2, [r3, #20]
			  flags.instructions.calibRequest = 0;
 80012c0:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <main+0x148>)
 80012c2:	7b1a      	ldrb	r2, [r3, #12]
 80012c4:	2108      	movs	r1, #8
 80012c6:	438a      	bics	r2, r1
 80012c8:	731a      	strb	r2, [r3, #12]
		  }
		  dispHandler();
 80012ca:	f000 fc57 	bl	8001b7c <dispHandler>
		  UI_Handler();
 80012ce:	f000 fe31 	bl	8001f34 <UI_Handler>
		  testHandler();
 80012d2:	f001 fc49 	bl	8002b68 <testHandler>
		  measHandler();
 80012d6:	f000 ff93 	bl	8002200 <measHandler>
	  if(flags.time.ten_ms)	// 10 ms
 80012da:	e7d3      	b.n	8001284 <main+0xd4>
 80012dc:	200004b0 	.word	0x200004b0
 80012e0:	200006a0 	.word	0x200006a0
 80012e4:	20001140 	.word	0x20001140
 80012e8:	2000049c 	.word	0x2000049c
 80012ec:	0800dd4c 	.word	0x0800dd4c
 80012f0:	0800dd58 	.word	0x0800dd58
 80012f4:	48000800 	.word	0x48000800
 80012f8:	2000063c 	.word	0x2000063c
 80012fc:	200005f4 	.word	0x200005f4

08001300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b099      	sub	sp, #100	; 0x64
 8001304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001306:	242c      	movs	r4, #44	; 0x2c
 8001308:	193b      	adds	r3, r7, r4
 800130a:	0018      	movs	r0, r3
 800130c:	2334      	movs	r3, #52	; 0x34
 800130e:	001a      	movs	r2, r3
 8001310:	2100      	movs	r1, #0
 8001312:	f00c f8e0 	bl	800d4d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001316:	231c      	movs	r3, #28
 8001318:	18fb      	adds	r3, r7, r3
 800131a:	0018      	movs	r0, r3
 800131c:	2310      	movs	r3, #16
 800131e:	001a      	movs	r2, r3
 8001320:	2100      	movs	r1, #0
 8001322:	f00c f8d8 	bl	800d4d6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001326:	003b      	movs	r3, r7
 8001328:	0018      	movs	r0, r3
 800132a:	231c      	movs	r3, #28
 800132c:	001a      	movs	r2, r3
 800132e:	2100      	movs	r1, #0
 8001330:	f00c f8d1 	bl	800d4d6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8001334:	0021      	movs	r1, r4
 8001336:	187b      	adds	r3, r7, r1
 8001338:	2232      	movs	r2, #50	; 0x32
 800133a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133c:	187b      	adds	r3, r7, r1
 800133e:	2201      	movs	r2, #1
 8001340:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001342:	187b      	adds	r3, r7, r1
 8001344:	2201      	movs	r2, #1
 8001346:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001348:	187b      	adds	r3, r7, r1
 800134a:	2201      	movs	r2, #1
 800134c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134e:	187b      	adds	r3, r7, r1
 8001350:	2210      	movs	r2, #16
 8001352:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001354:	187b      	adds	r3, r7, r1
 8001356:	2210      	movs	r2, #16
 8001358:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135a:	187b      	adds	r3, r7, r1
 800135c:	2202      	movs	r2, #2
 800135e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001360:	187b      	adds	r3, r7, r1
 8001362:	2280      	movs	r2, #128	; 0x80
 8001364:	0212      	lsls	r2, r2, #8
 8001366:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001368:	187b      	adds	r3, r7, r1
 800136a:	2200      	movs	r2, #0
 800136c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800136e:	187b      	adds	r3, r7, r1
 8001370:	2200      	movs	r2, #0
 8001372:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001374:	187b      	adds	r3, r7, r1
 8001376:	0018      	movs	r0, r3
 8001378:	f004 fdf2 	bl	8005f60 <HAL_RCC_OscConfig>
 800137c:	1e03      	subs	r3, r0, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001380:	f000 fff0 	bl	8002364 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001384:	211c      	movs	r1, #28
 8001386:	187b      	adds	r3, r7, r1
 8001388:	2207      	movs	r2, #7
 800138a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800138c:	187b      	adds	r3, r7, r1
 800138e:	2202      	movs	r2, #2
 8001390:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001392:	187b      	adds	r3, r7, r1
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001398:	187b      	adds	r3, r7, r1
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800139e:	187b      	adds	r3, r7, r1
 80013a0:	2100      	movs	r1, #0
 80013a2:	0018      	movs	r0, r3
 80013a4:	f005 f962 	bl	800666c <HAL_RCC_ClockConfig>
 80013a8:	1e03      	subs	r3, r0, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80013ac:	f000 ffda 	bl	8002364 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013b0:	003b      	movs	r3, r7
 80013b2:	2280      	movs	r2, #128	; 0x80
 80013b4:	0292      	lsls	r2, r2, #10
 80013b6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80013b8:	003b      	movs	r3, r7
 80013ba:	2200      	movs	r2, #0
 80013bc:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013be:	003b      	movs	r3, r7
 80013c0:	0018      	movs	r0, r3
 80013c2:	f005 facf 	bl	8006964 <HAL_RCCEx_PeriphCLKConfig>
 80013c6:	1e03      	subs	r3, r0, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0xce>
  {
    Error_Handler();
 80013ca:	f000 ffcb 	bl	8002364 <Error_Handler>
  }
}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b019      	add	sp, #100	; 0x64
 80013d4:	bd90      	pop	{r4, r7, pc}
	...

080013d8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	0018      	movs	r0, r3
 80013e2:	230c      	movs	r3, #12
 80013e4:	001a      	movs	r2, r3
 80013e6:	2100      	movs	r1, #0
 80013e8:	f00c f875 	bl	800d4d6 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80013ec:	4b87      	ldr	r3, [pc, #540]	; (800160c <MX_ADC_Init+0x234>)
 80013ee:	4a88      	ldr	r2, [pc, #544]	; (8001610 <MX_ADC_Init+0x238>)
 80013f0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013f2:	4b86      	ldr	r3, [pc, #536]	; (800160c <MX_ADC_Init+0x234>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80013f8:	4b84      	ldr	r3, [pc, #528]	; (800160c <MX_ADC_Init+0x234>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013fe:	4b83      	ldr	r3, [pc, #524]	; (800160c <MX_ADC_Init+0x234>)
 8001400:	2200      	movs	r2, #0
 8001402:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001404:	4b81      	ldr	r3, [pc, #516]	; (800160c <MX_ADC_Init+0x234>)
 8001406:	2201      	movs	r2, #1
 8001408:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800140a:	4b80      	ldr	r3, [pc, #512]	; (800160c <MX_ADC_Init+0x234>)
 800140c:	2204      	movs	r2, #4
 800140e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001410:	4b7e      	ldr	r3, [pc, #504]	; (800160c <MX_ADC_Init+0x234>)
 8001412:	2200      	movs	r2, #0
 8001414:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001416:	4b7d      	ldr	r3, [pc, #500]	; (800160c <MX_ADC_Init+0x234>)
 8001418:	2200      	movs	r2, #0
 800141a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800141c:	4b7b      	ldr	r3, [pc, #492]	; (800160c <MX_ADC_Init+0x234>)
 800141e:	2200      	movs	r2, #0
 8001420:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001422:	4b7a      	ldr	r3, [pc, #488]	; (800160c <MX_ADC_Init+0x234>)
 8001424:	2200      	movs	r2, #0
 8001426:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001428:	4b78      	ldr	r3, [pc, #480]	; (800160c <MX_ADC_Init+0x234>)
 800142a:	22c2      	movs	r2, #194	; 0xc2
 800142c:	32ff      	adds	r2, #255	; 0xff
 800142e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001430:	4b76      	ldr	r3, [pc, #472]	; (800160c <MX_ADC_Init+0x234>)
 8001432:	2200      	movs	r2, #0
 8001434:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001436:	4b75      	ldr	r3, [pc, #468]	; (800160c <MX_ADC_Init+0x234>)
 8001438:	2224      	movs	r2, #36	; 0x24
 800143a:	2100      	movs	r1, #0
 800143c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800143e:	4b73      	ldr	r3, [pc, #460]	; (800160c <MX_ADC_Init+0x234>)
 8001440:	2201      	movs	r2, #1
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001444:	4b71      	ldr	r3, [pc, #452]	; (800160c <MX_ADC_Init+0x234>)
 8001446:	0018      	movs	r0, r3
 8001448:	f001 feb2 	bl	80031b0 <HAL_ADC_Init>
 800144c:	1e03      	subs	r3, r0, #0
 800144e:	d001      	beq.n	8001454 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001450:	f000 ff88 	bl	8002364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2280      	movs	r2, #128	; 0x80
 800145e:	0152      	lsls	r2, r2, #5
 8001460:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	2205      	movs	r2, #5
 8001466:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001468:	1d3a      	adds	r2, r7, #4
 800146a:	4b68      	ldr	r3, [pc, #416]	; (800160c <MX_ADC_Init+0x234>)
 800146c:	0011      	movs	r1, r2
 800146e:	0018      	movs	r0, r3
 8001470:	f002 f96e 	bl	8003750 <HAL_ADC_ConfigChannel>
 8001474:	1e03      	subs	r3, r0, #0
 8001476:	d001      	beq.n	800147c <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8001478:	f000 ff74 	bl	8002364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2201      	movs	r2, #1
 8001480:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001482:	1d3a      	adds	r2, r7, #4
 8001484:	4b61      	ldr	r3, [pc, #388]	; (800160c <MX_ADC_Init+0x234>)
 8001486:	0011      	movs	r1, r2
 8001488:	0018      	movs	r0, r3
 800148a:	f002 f961 	bl	8003750 <HAL_ADC_ConfigChannel>
 800148e:	1e03      	subs	r3, r0, #0
 8001490:	d001      	beq.n	8001496 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8001492:	f000 ff67 	bl	8002364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2202      	movs	r2, #2
 800149a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800149c:	1d3a      	adds	r2, r7, #4
 800149e:	4b5b      	ldr	r3, [pc, #364]	; (800160c <MX_ADC_Init+0x234>)
 80014a0:	0011      	movs	r1, r2
 80014a2:	0018      	movs	r0, r3
 80014a4:	f002 f954 	bl	8003750 <HAL_ADC_ConfigChannel>
 80014a8:	1e03      	subs	r3, r0, #0
 80014aa:	d001      	beq.n	80014b0 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 80014ac:	f000 ff5a 	bl	8002364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2203      	movs	r2, #3
 80014b4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014b6:	1d3a      	adds	r2, r7, #4
 80014b8:	4b54      	ldr	r3, [pc, #336]	; (800160c <MX_ADC_Init+0x234>)
 80014ba:	0011      	movs	r1, r2
 80014bc:	0018      	movs	r0, r3
 80014be:	f002 f947 	bl	8003750 <HAL_ADC_ConfigChannel>
 80014c2:	1e03      	subs	r3, r0, #0
 80014c4:	d001      	beq.n	80014ca <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 80014c6:	f000 ff4d 	bl	8002364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	2204      	movs	r2, #4
 80014ce:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014d0:	1d3a      	adds	r2, r7, #4
 80014d2:	4b4e      	ldr	r3, [pc, #312]	; (800160c <MX_ADC_Init+0x234>)
 80014d4:	0011      	movs	r1, r2
 80014d6:	0018      	movs	r0, r3
 80014d8:	f002 f93a 	bl	8003750 <HAL_ADC_ConfigChannel>
 80014dc:	1e03      	subs	r3, r0, #0
 80014de:	d001      	beq.n	80014e4 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 80014e0:	f000 ff40 	bl	8002364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2205      	movs	r2, #5
 80014e8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014ea:	1d3a      	adds	r2, r7, #4
 80014ec:	4b47      	ldr	r3, [pc, #284]	; (800160c <MX_ADC_Init+0x234>)
 80014ee:	0011      	movs	r1, r2
 80014f0:	0018      	movs	r0, r3
 80014f2:	f002 f92d 	bl	8003750 <HAL_ADC_ConfigChannel>
 80014f6:	1e03      	subs	r3, r0, #0
 80014f8:	d001      	beq.n	80014fe <MX_ADC_Init+0x126>
  {
    Error_Handler();
 80014fa:	f000 ff33 	bl	8002364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	2206      	movs	r2, #6
 8001502:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001504:	1d3a      	adds	r2, r7, #4
 8001506:	4b41      	ldr	r3, [pc, #260]	; (800160c <MX_ADC_Init+0x234>)
 8001508:	0011      	movs	r1, r2
 800150a:	0018      	movs	r0, r3
 800150c:	f002 f920 	bl	8003750 <HAL_ADC_ConfigChannel>
 8001510:	1e03      	subs	r3, r0, #0
 8001512:	d001      	beq.n	8001518 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8001514:	f000 ff26 	bl	8002364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2207      	movs	r2, #7
 800151c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800151e:	1d3a      	adds	r2, r7, #4
 8001520:	4b3a      	ldr	r3, [pc, #232]	; (800160c <MX_ADC_Init+0x234>)
 8001522:	0011      	movs	r1, r2
 8001524:	0018      	movs	r0, r3
 8001526:	f002 f913 	bl	8003750 <HAL_ADC_ConfigChannel>
 800152a:	1e03      	subs	r3, r0, #0
 800152c:	d001      	beq.n	8001532 <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 800152e:	f000 ff19 	bl	8002364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	2208      	movs	r2, #8
 8001536:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001538:	1d3a      	adds	r2, r7, #4
 800153a:	4b34      	ldr	r3, [pc, #208]	; (800160c <MX_ADC_Init+0x234>)
 800153c:	0011      	movs	r1, r2
 800153e:	0018      	movs	r0, r3
 8001540:	f002 f906 	bl	8003750 <HAL_ADC_ConfigChannel>
 8001544:	1e03      	subs	r3, r0, #0
 8001546:	d001      	beq.n	800154c <MX_ADC_Init+0x174>
  {
    Error_Handler();
 8001548:	f000 ff0c 	bl	8002364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2209      	movs	r2, #9
 8001550:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001552:	1d3a      	adds	r2, r7, #4
 8001554:	4b2d      	ldr	r3, [pc, #180]	; (800160c <MX_ADC_Init+0x234>)
 8001556:	0011      	movs	r1, r2
 8001558:	0018      	movs	r0, r3
 800155a:	f002 f8f9 	bl	8003750 <HAL_ADC_ConfigChannel>
 800155e:	1e03      	subs	r3, r0, #0
 8001560:	d001      	beq.n	8001566 <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 8001562:	f000 feff 	bl	8002364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	220a      	movs	r2, #10
 800156a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800156c:	1d3a      	adds	r2, r7, #4
 800156e:	4b27      	ldr	r3, [pc, #156]	; (800160c <MX_ADC_Init+0x234>)
 8001570:	0011      	movs	r1, r2
 8001572:	0018      	movs	r0, r3
 8001574:	f002 f8ec 	bl	8003750 <HAL_ADC_ConfigChannel>
 8001578:	1e03      	subs	r3, r0, #0
 800157a:	d001      	beq.n	8001580 <MX_ADC_Init+0x1a8>
  {
    Error_Handler();
 800157c:	f000 fef2 	bl	8002364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	220b      	movs	r2, #11
 8001584:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001586:	1d3a      	adds	r2, r7, #4
 8001588:	4b20      	ldr	r3, [pc, #128]	; (800160c <MX_ADC_Init+0x234>)
 800158a:	0011      	movs	r1, r2
 800158c:	0018      	movs	r0, r3
 800158e:	f002 f8df 	bl	8003750 <HAL_ADC_ConfigChannel>
 8001592:	1e03      	subs	r3, r0, #0
 8001594:	d001      	beq.n	800159a <MX_ADC_Init+0x1c2>
  {
    Error_Handler();
 8001596:	f000 fee5 	bl	8002364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	220c      	movs	r2, #12
 800159e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015a0:	1d3a      	adds	r2, r7, #4
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <MX_ADC_Init+0x234>)
 80015a4:	0011      	movs	r1, r2
 80015a6:	0018      	movs	r0, r3
 80015a8:	f002 f8d2 	bl	8003750 <HAL_ADC_ConfigChannel>
 80015ac:	1e03      	subs	r3, r0, #0
 80015ae:	d001      	beq.n	80015b4 <MX_ADC_Init+0x1dc>
  {
    Error_Handler();
 80015b0:	f000 fed8 	bl	8002364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	220d      	movs	r2, #13
 80015b8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015ba:	1d3a      	adds	r2, r7, #4
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <MX_ADC_Init+0x234>)
 80015be:	0011      	movs	r1, r2
 80015c0:	0018      	movs	r0, r3
 80015c2:	f002 f8c5 	bl	8003750 <HAL_ADC_ConfigChannel>
 80015c6:	1e03      	subs	r3, r0, #0
 80015c8:	d001      	beq.n	80015ce <MX_ADC_Init+0x1f6>
  {
    Error_Handler();
 80015ca:	f000 fecb 	bl	8002364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	220e      	movs	r2, #14
 80015d2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015d4:	1d3a      	adds	r2, r7, #4
 80015d6:	4b0d      	ldr	r3, [pc, #52]	; (800160c <MX_ADC_Init+0x234>)
 80015d8:	0011      	movs	r1, r2
 80015da:	0018      	movs	r0, r3
 80015dc:	f002 f8b8 	bl	8003750 <HAL_ADC_ConfigChannel>
 80015e0:	1e03      	subs	r3, r0, #0
 80015e2:	d001      	beq.n	80015e8 <MX_ADC_Init+0x210>
  {
    Error_Handler();
 80015e4:	f000 febe 	bl	8002364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	220f      	movs	r2, #15
 80015ec:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015ee:	1d3a      	adds	r2, r7, #4
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <MX_ADC_Init+0x234>)
 80015f2:	0011      	movs	r1, r2
 80015f4:	0018      	movs	r0, r3
 80015f6:	f002 f8ab 	bl	8003750 <HAL_ADC_ConfigChannel>
 80015fa:	1e03      	subs	r3, r0, #0
 80015fc:	d001      	beq.n	8001602 <MX_ADC_Init+0x22a>
  {
    Error_Handler();
 80015fe:	f000 feb1 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	46bd      	mov	sp, r7
 8001606:	b004      	add	sp, #16
 8001608:	bd80      	pop	{r7, pc}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	20000658 	.word	0x20000658
 8001610:	40012400 	.word	0x40012400

08001614 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001618:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <MX_SPI1_Init+0x80>)
 800161a:	4a1f      	ldr	r2, [pc, #124]	; (8001698 <MX_SPI1_Init+0x84>)
 800161c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800161e:	4b1d      	ldr	r3, [pc, #116]	; (8001694 <MX_SPI1_Init+0x80>)
 8001620:	2282      	movs	r2, #130	; 0x82
 8001622:	0052      	lsls	r2, r2, #1
 8001624:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001626:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <MX_SPI1_Init+0x80>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800162c:	4b19      	ldr	r3, [pc, #100]	; (8001694 <MX_SPI1_Init+0x80>)
 800162e:	22e0      	movs	r2, #224	; 0xe0
 8001630:	00d2      	lsls	r2, r2, #3
 8001632:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001634:	4b17      	ldr	r3, [pc, #92]	; (8001694 <MX_SPI1_Init+0x80>)
 8001636:	2202      	movs	r2, #2
 8001638:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800163a:	4b16      	ldr	r3, [pc, #88]	; (8001694 <MX_SPI1_Init+0x80>)
 800163c:	2201      	movs	r2, #1
 800163e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001640:	4b14      	ldr	r3, [pc, #80]	; (8001694 <MX_SPI1_Init+0x80>)
 8001642:	2280      	movs	r2, #128	; 0x80
 8001644:	0092      	lsls	r2, r2, #2
 8001646:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <MX_SPI1_Init+0x80>)
 800164a:	2238      	movs	r2, #56	; 0x38
 800164c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <MX_SPI1_Init+0x80>)
 8001650:	2200      	movs	r2, #0
 8001652:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001654:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <MX_SPI1_Init+0x80>)
 8001656:	2200      	movs	r2, #0
 8001658:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800165a:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <MX_SPI1_Init+0x80>)
 800165c:	2200      	movs	r2, #0
 800165e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <MX_SPI1_Init+0x80>)
 8001662:	2207      	movs	r2, #7
 8001664:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <MX_SPI1_Init+0x80>)
 8001668:	2200      	movs	r2, #0
 800166a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <MX_SPI1_Init+0x80>)
 800166e:	2200      	movs	r2, #0
 8001670:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001672:	4b08      	ldr	r3, [pc, #32]	; (8001694 <MX_SPI1_Init+0x80>)
 8001674:	0018      	movs	r0, r3
 8001676:	f005 fa73 	bl	8006b60 <HAL_SPI_Init>
 800167a:	1e03      	subs	r3, r0, #0
 800167c:	d001      	beq.n	8001682 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800167e:	f000 fe71 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_SPI1_Init+0x88>)
 8001684:	2201      	movs	r2, #1
 8001686:	2140      	movs	r1, #64	; 0x40
 8001688:	0018      	movs	r0, r3
 800168a:	f002 fda2 	bl	80041d2 <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000590 	.word	0x20000590
 8001698:	40013000 	.word	0x40013000
 800169c:	48000400 	.word	0x48000400

080016a0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	0018      	movs	r0, r3
 80016aa:	231c      	movs	r3, #28
 80016ac:	001a      	movs	r2, r3
 80016ae:	2100      	movs	r1, #0
 80016b0:	f00b ff11 	bl	800d4d6 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80016b4:	4b1d      	ldr	r3, [pc, #116]	; (800172c <MX_TIM14_Init+0x8c>)
 80016b6:	4a1e      	ldr	r2, [pc, #120]	; (8001730 <MX_TIM14_Init+0x90>)
 80016b8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16-1;
 80016ba:	4b1c      	ldr	r3, [pc, #112]	; (800172c <MX_TIM14_Init+0x8c>)
 80016bc:	220f      	movs	r2, #15
 80016be:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c0:	4b1a      	ldr	r3, [pc, #104]	; (800172c <MX_TIM14_Init+0x8c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <MX_TIM14_Init+0x8c>)
 80016c8:	4a1a      	ldr	r2, [pc, #104]	; (8001734 <MX_TIM14_Init+0x94>)
 80016ca:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016cc:	4b17      	ldr	r3, [pc, #92]	; (800172c <MX_TIM14_Init+0x8c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d2:	4b16      	ldr	r3, [pc, #88]	; (800172c <MX_TIM14_Init+0x8c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <MX_TIM14_Init+0x8c>)
 80016da:	0018      	movs	r0, r3
 80016dc:	f005 ff98 	bl	8007610 <HAL_TIM_Base_Init>
 80016e0:	1e03      	subs	r3, r0, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 80016e4:	f000 fe3e 	bl	8002364 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 80016e8:	4b10      	ldr	r3, [pc, #64]	; (800172c <MX_TIM14_Init+0x8c>)
 80016ea:	0018      	movs	r0, r3
 80016ec:	f006 f832 	bl	8007754 <HAL_TIM_OC_Init>
 80016f0:	1e03      	subs	r3, r0, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 80016f4:	f000 fe36 	bl	8002364 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	2200      	movs	r2, #0
 8001702:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001710:	1d39      	adds	r1, r7, #4
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_TIM14_Init+0x8c>)
 8001714:	2200      	movs	r2, #0
 8001716:	0018      	movs	r0, r3
 8001718:	f006 f98a 	bl	8007a30 <HAL_TIM_OC_ConfigChannel>
 800171c:	1e03      	subs	r3, r0, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001720:	f000 fe20 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001724:	46c0      	nop			; (mov r8, r8)
 8001726:	46bd      	mov	sp, r7
 8001728:	b008      	add	sp, #32
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200005f4 	.word	0x200005f4
 8001730:	40002000 	.word	0x40002000
 8001734:	0000270f 	.word	0x0000270f

08001738 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <MX_USART3_UART_Init+0x58>)
 800173e:	4a15      	ldr	r2, [pc, #84]	; (8001794 <MX_USART3_UART_Init+0x5c>)
 8001740:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <MX_USART3_UART_Init+0x58>)
 8001744:	2296      	movs	r2, #150	; 0x96
 8001746:	0212      	lsls	r2, r2, #8
 8001748:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800174a:	4b11      	ldr	r3, [pc, #68]	; (8001790 <MX_USART3_UART_Init+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <MX_USART3_UART_Init+0x58>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001756:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <MX_USART3_UART_Init+0x58>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800175c:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <MX_USART3_UART_Init+0x58>)
 800175e:	220c      	movs	r2, #12
 8001760:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <MX_USART3_UART_Init+0x58>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <MX_USART3_UART_Init+0x58>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <MX_USART3_UART_Init+0x58>)
 8001770:	2200      	movs	r2, #0
 8001772:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <MX_USART3_UART_Init+0x58>)
 8001776:	2200      	movs	r2, #0
 8001778:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800177a:	4b05      	ldr	r3, [pc, #20]	; (8001790 <MX_USART3_UART_Init+0x58>)
 800177c:	0018      	movs	r0, r3
 800177e:	f006 fc5b 	bl	8008038 <HAL_UART_Init>
 8001782:	1e03      	subs	r3, r0, #0
 8001784:	d001      	beq.n	800178a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001786:	f000 fded 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	2000050c 	.word	0x2000050c
 8001794:	40004800 	.word	0x40004800

08001798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b08b      	sub	sp, #44	; 0x2c
 800179c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179e:	2414      	movs	r4, #20
 80017a0:	193b      	adds	r3, r7, r4
 80017a2:	0018      	movs	r0, r3
 80017a4:	2314      	movs	r3, #20
 80017a6:	001a      	movs	r2, r3
 80017a8:	2100      	movs	r1, #0
 80017aa:	f00b fe94 	bl	800d4d6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ae:	4b6b      	ldr	r3, [pc, #428]	; (800195c <MX_GPIO_Init+0x1c4>)
 80017b0:	695a      	ldr	r2, [r3, #20]
 80017b2:	4b6a      	ldr	r3, [pc, #424]	; (800195c <MX_GPIO_Init+0x1c4>)
 80017b4:	2180      	movs	r1, #128	; 0x80
 80017b6:	03c9      	lsls	r1, r1, #15
 80017b8:	430a      	orrs	r2, r1
 80017ba:	615a      	str	r2, [r3, #20]
 80017bc:	4b67      	ldr	r3, [pc, #412]	; (800195c <MX_GPIO_Init+0x1c4>)
 80017be:	695a      	ldr	r2, [r3, #20]
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	03db      	lsls	r3, r3, #15
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ca:	4b64      	ldr	r3, [pc, #400]	; (800195c <MX_GPIO_Init+0x1c4>)
 80017cc:	695a      	ldr	r2, [r3, #20]
 80017ce:	4b63      	ldr	r3, [pc, #396]	; (800195c <MX_GPIO_Init+0x1c4>)
 80017d0:	2180      	movs	r1, #128	; 0x80
 80017d2:	0309      	lsls	r1, r1, #12
 80017d4:	430a      	orrs	r2, r1
 80017d6:	615a      	str	r2, [r3, #20]
 80017d8:	4b60      	ldr	r3, [pc, #384]	; (800195c <MX_GPIO_Init+0x1c4>)
 80017da:	695a      	ldr	r2, [r3, #20]
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	031b      	lsls	r3, r3, #12
 80017e0:	4013      	ands	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e6:	4b5d      	ldr	r3, [pc, #372]	; (800195c <MX_GPIO_Init+0x1c4>)
 80017e8:	695a      	ldr	r2, [r3, #20]
 80017ea:	4b5c      	ldr	r3, [pc, #368]	; (800195c <MX_GPIO_Init+0x1c4>)
 80017ec:	2180      	movs	r1, #128	; 0x80
 80017ee:	0289      	lsls	r1, r1, #10
 80017f0:	430a      	orrs	r2, r1
 80017f2:	615a      	str	r2, [r3, #20]
 80017f4:	4b59      	ldr	r3, [pc, #356]	; (800195c <MX_GPIO_Init+0x1c4>)
 80017f6:	695a      	ldr	r2, [r3, #20]
 80017f8:	2380      	movs	r3, #128	; 0x80
 80017fa:	029b      	lsls	r3, r3, #10
 80017fc:	4013      	ands	r3, r2
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	4b56      	ldr	r3, [pc, #344]	; (800195c <MX_GPIO_Init+0x1c4>)
 8001804:	695a      	ldr	r2, [r3, #20]
 8001806:	4b55      	ldr	r3, [pc, #340]	; (800195c <MX_GPIO_Init+0x1c4>)
 8001808:	2180      	movs	r1, #128	; 0x80
 800180a:	02c9      	lsls	r1, r1, #11
 800180c:	430a      	orrs	r2, r1
 800180e:	615a      	str	r2, [r3, #20]
 8001810:	4b52      	ldr	r3, [pc, #328]	; (800195c <MX_GPIO_Init+0x1c4>)
 8001812:	695a      	ldr	r2, [r3, #20]
 8001814:	2380      	movs	r3, #128	; 0x80
 8001816:	02db      	lsls	r3, r3, #11
 8001818:	4013      	ands	r3, r2
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800181e:	4b4f      	ldr	r3, [pc, #316]	; (800195c <MX_GPIO_Init+0x1c4>)
 8001820:	695a      	ldr	r2, [r3, #20]
 8001822:	4b4e      	ldr	r3, [pc, #312]	; (800195c <MX_GPIO_Init+0x1c4>)
 8001824:	2180      	movs	r1, #128	; 0x80
 8001826:	0349      	lsls	r1, r1, #13
 8001828:	430a      	orrs	r2, r1
 800182a:	615a      	str	r2, [r3, #20]
 800182c:	4b4b      	ldr	r3, [pc, #300]	; (800195c <MX_GPIO_Init+0x1c4>)
 800182e:	695a      	ldr	r2, [r3, #20]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	035b      	lsls	r3, r3, #13
 8001834:	4013      	ands	r3, r2
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 800183a:	4949      	ldr	r1, [pc, #292]	; (8001960 <MX_GPIO_Init+0x1c8>)
 800183c:	4b49      	ldr	r3, [pc, #292]	; (8001964 <MX_GPIO_Init+0x1cc>)
 800183e:	2200      	movs	r2, #0
 8001840:	0018      	movs	r0, r3
 8001842:	f002 fcc6 	bl	80041d2 <HAL_GPIO_WritePin>
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8001846:	239e      	movs	r3, #158	; 0x9e
 8001848:	015b      	lsls	r3, r3, #5
 800184a:	4847      	ldr	r0, [pc, #284]	; (8001968 <MX_GPIO_Init+0x1d0>)
 800184c:	2200      	movs	r2, #0
 800184e:	0019      	movs	r1, r3
 8001850:	f002 fcbf 	bl	80041d2 <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	0219      	lsls	r1, r3, #8
 8001858:	2390      	movs	r3, #144	; 0x90
 800185a:	05db      	lsls	r3, r3, #23
 800185c:	2200      	movs	r2, #0
 800185e:	0018      	movs	r0, r3
 8001860:	f002 fcb7 	bl	80041d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin DEBUG_Pin SR_CLR_Pin SR_RCLK_Pin
                           SR_OE_Pin DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin
                           BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8001864:	193b      	adds	r3, r7, r4
 8001866:	4a3e      	ldr	r2, [pc, #248]	; (8001960 <MX_GPIO_Init+0x1c8>)
 8001868:	601a      	str	r2, [r3, #0]
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186a:	193b      	adds	r3, r7, r4
 800186c:	2201      	movs	r2, #1
 800186e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	193b      	adds	r3, r7, r4
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	193b      	adds	r3, r7, r4
 8001878:	2200      	movs	r2, #0
 800187a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187c:	193b      	adds	r3, r7, r4
 800187e:	4a39      	ldr	r2, [pc, #228]	; (8001964 <MX_GPIO_Init+0x1cc>)
 8001880:	0019      	movs	r1, r3
 8001882:	0010      	movs	r0, r2
 8001884:	f002 fb10 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8001888:	0021      	movs	r1, r4
 800188a:	187b      	adds	r3, r7, r1
 800188c:	229e      	movs	r2, #158	; 0x9e
 800188e:	0152      	lsls	r2, r2, #5
 8001890:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001892:	000c      	movs	r4, r1
 8001894:	193b      	adds	r3, r7, r4
 8001896:	2201      	movs	r2, #1
 8001898:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	193b      	adds	r3, r7, r4
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	193b      	adds	r3, r7, r4
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a6:	193b      	adds	r3, r7, r4
 80018a8:	4a2f      	ldr	r2, [pc, #188]	; (8001968 <MX_GPIO_Init+0x1d0>)
 80018aa:	0019      	movs	r1, r3
 80018ac:	0010      	movs	r0, r2
 80018ae:	f002 fafb 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 80018b2:	193b      	adds	r3, r7, r4
 80018b4:	22c0      	movs	r2, #192	; 0xc0
 80018b6:	0092      	lsls	r2, r2, #2
 80018b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ba:	193b      	adds	r3, r7, r4
 80018bc:	2288      	movs	r2, #136	; 0x88
 80018be:	0352      	lsls	r2, r2, #13
 80018c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018c2:	193b      	adds	r3, r7, r4
 80018c4:	2202      	movs	r2, #2
 80018c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c8:	193a      	adds	r2, r7, r4
 80018ca:	2390      	movs	r3, #144	; 0x90
 80018cc:	05db      	lsls	r3, r3, #23
 80018ce:	0011      	movs	r1, r2
 80018d0:	0018      	movs	r0, r3
 80018d2:	f002 fae9 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018d6:	193b      	adds	r3, r7, r4
 80018d8:	2280      	movs	r2, #128	; 0x80
 80018da:	00d2      	lsls	r2, r2, #3
 80018dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018de:	193b      	adds	r3, r7, r4
 80018e0:	2200      	movs	r2, #0
 80018e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	193b      	adds	r3, r7, r4
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018ea:	193a      	adds	r2, r7, r4
 80018ec:	2390      	movs	r3, #144	; 0x90
 80018ee:	05db      	lsls	r3, r3, #23
 80018f0:	0011      	movs	r1, r2
 80018f2:	0018      	movs	r0, r3
 80018f4:	f002 fad8 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 80018f8:	0021      	movs	r1, r4
 80018fa:	187b      	adds	r3, r7, r1
 80018fc:	2280      	movs	r2, #128	; 0x80
 80018fe:	0212      	lsls	r2, r2, #8
 8001900:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001902:	000c      	movs	r4, r1
 8001904:	193b      	adds	r3, r7, r4
 8001906:	2201      	movs	r2, #1
 8001908:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	193b      	adds	r3, r7, r4
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001910:	193b      	adds	r3, r7, r4
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 8001916:	193a      	adds	r2, r7, r4
 8001918:	2390      	movs	r3, #144	; 0x90
 800191a:	05db      	lsls	r3, r3, #23
 800191c:	0011      	movs	r1, r2
 800191e:	0018      	movs	r0, r3
 8001920:	f002 fac2 	bl	8003ea8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 8001924:	193b      	adds	r3, r7, r4
 8001926:	2204      	movs	r2, #4
 8001928:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192a:	193b      	adds	r3, r7, r4
 800192c:	2200      	movs	r2, #0
 800192e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	193b      	adds	r3, r7, r4
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 8001936:	193b      	adds	r3, r7, r4
 8001938:	4a0c      	ldr	r2, [pc, #48]	; (800196c <MX_GPIO_Init+0x1d4>)
 800193a:	0019      	movs	r1, r3
 800193c:	0010      	movs	r0, r2
 800193e:	f002 fab3 	bl	8003ea8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2100      	movs	r1, #0
 8001946:	2007      	movs	r0, #7
 8001948:	f002 f9fe 	bl	8003d48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800194c:	2007      	movs	r0, #7
 800194e:	f002 fa10 	bl	8003d72 <HAL_NVIC_EnableIRQ>

}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	46bd      	mov	sp, r7
 8001956:	b00b      	add	sp, #44	; 0x2c
 8001958:	bd90      	pop	{r4, r7, pc}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	40021000 	.word	0x40021000
 8001960:	0000f3c4 	.word	0x0000f3c4
 8001964:	48000400 	.word	0x48000400
 8001968:	48000800 	.word	0x48000800
 800196c:	48000c00 	.word	0x48000c00

08001970 <clkHandler>:

/* USER CODE BEGIN 4 */

//_____Hodiny_____//
void clkHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	//___nulování všech flagů___//
	flags.time.ten_ms = 0;
 8001974:	4b3b      	ldr	r3, [pc, #236]	; (8001a64 <clkHandler+0xf4>)
 8001976:	781a      	ldrb	r2, [r3, #0]
 8001978:	2101      	movs	r1, #1
 800197a:	438a      	bics	r2, r1
 800197c:	701a      	strb	r2, [r3, #0]
	flags.time.sec	= 0;
 800197e:	4b39      	ldr	r3, [pc, #228]	; (8001a64 <clkHandler+0xf4>)
 8001980:	781a      	ldrb	r2, [r3, #0]
 8001982:	2102      	movs	r1, #2
 8001984:	438a      	bics	r2, r1
 8001986:	701a      	strb	r2, [r3, #0]
	flags.time.min	= 0;
 8001988:	4b36      	ldr	r3, [pc, #216]	; (8001a64 <clkHandler+0xf4>)
 800198a:	781a      	ldrb	r2, [r3, #0]
 800198c:	2104      	movs	r1, #4
 800198e:	438a      	bics	r2, r1
 8001990:	701a      	strb	r2, [r3, #0]
	flags.time.hour	= 0;
 8001992:	4b34      	ldr	r3, [pc, #208]	; (8001a64 <clkHandler+0xf4>)
 8001994:	781a      	ldrb	r2, [r3, #0]
 8001996:	2108      	movs	r1, #8
 8001998:	438a      	bics	r2, r1
 800199a:	701a      	strb	r2, [r3, #0]

	sysTime[SYSTIME_TEN_MS]++;	//uplynulo dalších 10 ms
 800199c:	4b32      	ldr	r3, [pc, #200]	; (8001a68 <clkHandler+0xf8>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	1c5a      	adds	r2, r3, #1
 80019a2:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <clkHandler+0xf8>)
 80019a4:	601a      	str	r2, [r3, #0]

#ifdef __DEBUG_FAST__
	if((sysTime[SYSTIME_TEN_MS] % 10) == 0)	//0,1 s
 80019a6:	4b30      	ldr	r3, [pc, #192]	; (8001a68 <clkHandler+0xf8>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	210a      	movs	r1, #10
 80019ac:	0018      	movs	r0, r3
 80019ae:	f7fe fc43 	bl	8000238 <__aeabi_uidivmod>
 80019b2:	1e0b      	subs	r3, r1, #0
 80019b4:	d109      	bne.n	80019ca <clkHandler+0x5a>
#else
	if((sysTime[SYSTIME_TEN_MS] % 100) == 0)	//1 s
#endif
	{
		sysTime[SYSTIME_SEC]++;
 80019b6:	4b2c      	ldr	r3, [pc, #176]	; (8001a68 <clkHandler+0xf8>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	1c5a      	adds	r2, r3, #1
 80019bc:	4b2a      	ldr	r3, [pc, #168]	; (8001a68 <clkHandler+0xf8>)
 80019be:	605a      	str	r2, [r3, #4]
		flags.time.sec = 1;
 80019c0:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <clkHandler+0xf4>)
 80019c2:	781a      	ldrb	r2, [r3, #0]
 80019c4:	2102      	movs	r1, #2
 80019c6:	430a      	orrs	r2, r1
 80019c8:	701a      	strb	r2, [r3, #0]
	}

	if(flags.time.sec)	//Uplynula 1 s
 80019ca:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <clkHandler+0xf4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	079b      	lsls	r3, r3, #30
 80019d0:	0fdb      	lsrs	r3, r3, #31
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d042      	beq.n	8001a5e <clkHandler+0xee>
	{
		if((sysTime[SYSTIME_SEC] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 80019d8:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <clkHandler+0xf8>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	213c      	movs	r1, #60	; 0x3c
 80019de:	0018      	movs	r0, r3
 80019e0:	f7fe fc2a 	bl	8000238 <__aeabi_uidivmod>
 80019e4:	1e0b      	subs	r3, r1, #0
 80019e6:	d110      	bne.n	8001a0a <clkHandler+0x9a>
 80019e8:	4b1f      	ldr	r3, [pc, #124]	; (8001a68 <clkHandler+0xf8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00c      	beq.n	8001a0a <clkHandler+0x9a>
		{
			sysTime[SYSTIME_SEC] = 0;
 80019f0:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <clkHandler+0xf8>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	605a      	str	r2, [r3, #4]
			sysTime[SYSTIME_MIN]++;
 80019f6:	4b1c      	ldr	r3, [pc, #112]	; (8001a68 <clkHandler+0xf8>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <clkHandler+0xf8>)
 80019fe:	609a      	str	r2, [r3, #8]
			flags.time.min = 1;
 8001a00:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <clkHandler+0xf4>)
 8001a02:	781a      	ldrb	r2, [r3, #0]
 8001a04:	2104      	movs	r1, #4
 8001a06:	430a      	orrs	r2, r1
 8001a08:	701a      	strb	r2, [r3, #0]
		}

		if(flags.time.min)	//Uplynula 1 min
 8001a0a:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <clkHandler+0xf4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	075b      	lsls	r3, r3, #29
 8001a10:	0fdb      	lsrs	r3, r3, #31
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d022      	beq.n	8001a5e <clkHandler+0xee>
		{
			if((sysTime[SYSTIME_MIN] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8001a18:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <clkHandler+0xf8>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	213c      	movs	r1, #60	; 0x3c
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f7fe fc0a 	bl	8000238 <__aeabi_uidivmod>
 8001a24:	1e0b      	subs	r3, r1, #0
 8001a26:	d11a      	bne.n	8001a5e <clkHandler+0xee>
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <clkHandler+0xf8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d016      	beq.n	8001a5e <clkHandler+0xee>
			{

				sysTime[SYSTIME_SEC] = 0;
 8001a30:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <clkHandler+0xf8>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	605a      	str	r2, [r3, #4]
				sysTime[SYSTIME_MIN] = 0;
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <clkHandler+0xf8>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
				sysTime[SYSTIME_HOUR]++;
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <clkHandler+0xf8>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <clkHandler+0xf8>)
 8001a44:	60da      	str	r2, [r3, #12]
				flags.time.hour = 1;
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <clkHandler+0xf4>)
 8001a48:	781a      	ldrb	r2, [r3, #0]
 8001a4a:	2108      	movs	r1, #8
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	701a      	strb	r2, [r3, #0]
				if(sysTime[SYSTIME_HOUR] >= 23)
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <clkHandler+0xf8>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b16      	cmp	r3, #22
 8001a56:	d902      	bls.n	8001a5e <clkHandler+0xee>
					sysTime[SYSTIME_HOUR] = 0;
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <clkHandler+0xf8>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime[SYSTIME_HOUR], sysTime[SYSTIME_MIN], sysTime[SYSTIME_SEC]);
		pushStr(USB_Tx_Buffer, timeStamp, strlen(timeStamp));	//odešli čas
	}
#endif
}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	2000063c 	.word	0x2000063c
 8001a68:	20000240 	.word	0x20000240

08001a6c <buttonDebounce>:

//_____Debounce tlačítek_____//
void buttonDebounce(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	//___nulování flagů___//
	flags.buttons.butt0_ver = 0;
 8001a70:	4b3f      	ldr	r3, [pc, #252]	; (8001b70 <buttonDebounce+0x104>)
 8001a72:	791a      	ldrb	r2, [r3, #4]
 8001a74:	2102      	movs	r1, #2
 8001a76:	438a      	bics	r2, r1
 8001a78:	711a      	strb	r2, [r3, #4]
	flags.buttons.butt1_ver = 0;
 8001a7a:	4b3d      	ldr	r3, [pc, #244]	; (8001b70 <buttonDebounce+0x104>)
 8001a7c:	791a      	ldrb	r2, [r3, #4]
 8001a7e:	2108      	movs	r1, #8
 8001a80:	438a      	bics	r2, r1
 8001a82:	711a      	strb	r2, [r3, #4]

	if(flags.buttons.butt0_int)	//interrupt tlačítka 0
 8001a84:	4b3a      	ldr	r3, [pc, #232]	; (8001b70 <buttonDebounce+0x104>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	07db      	lsls	r3, r3, #31
 8001a8a:	0fdb      	lsrs	r3, r3, #31
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d031      	beq.n	8001af6 <buttonDebounce+0x8a>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	009a      	lsls	r2, r3, #2
 8001a96:	2390      	movs	r3, #144	; 0x90
 8001a98:	05db      	lsls	r3, r3, #23
 8001a9a:	0011      	movs	r1, r2
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	f002 fb7b 	bl	8004198 <HAL_GPIO_ReadPin>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d107      	bne.n	8001ab8 <buttonDebounce+0x4c>
		{
			button0_Debounce++;
 8001aa8:	4b32      	ldr	r3, [pc, #200]	; (8001b74 <buttonDebounce+0x108>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	3301      	adds	r3, #1
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4b30      	ldr	r3, [pc, #192]	; (8001b74 <buttonDebounce+0x108>)
 8001ab4:	701a      	strb	r2, [r3, #0]
 8001ab6:	e007      	b.n	8001ac8 <buttonDebounce+0x5c>
		}
		else	//pin tlačítka na Low -> šlo o zákmit
		{
			button0_Debounce = 0;
 8001ab8:	4b2e      	ldr	r3, [pc, #184]	; (8001b74 <buttonDebounce+0x108>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt0_int = 0;
 8001abe:	4b2c      	ldr	r3, [pc, #176]	; (8001b70 <buttonDebounce+0x104>)
 8001ac0:	791a      	ldrb	r2, [r3, #4]
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	438a      	bics	r2, r1
 8001ac6:	711a      	strb	r2, [r3, #4]
		}
		if(button0_Debounce >= 5)	//pin tlačítka na High 5*10 ms -> ustálený stisk
 8001ac8:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <buttonDebounce+0x108>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d911      	bls.n	8001af6 <buttonDebounce+0x8a>
		{
			flags.buttons.butt0_ver = 1;
 8001ad2:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <buttonDebounce+0x104>)
 8001ad4:	791a      	ldrb	r2, [r3, #4]
 8001ad6:	2102      	movs	r1, #2
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt0_int = 0;
 8001adc:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <buttonDebounce+0x104>)
 8001ade:	791a      	ldrb	r2, [r3, #4]
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	438a      	bics	r2, r1
 8001ae4:	711a      	strb	r2, [r3, #4]
			button0_Debounce = 0;
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <buttonDebounce+0x108>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]

			flags.ui.active = 1;
 8001aec:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <buttonDebounce+0x104>)
 8001aee:	7c1a      	ldrb	r2, [r3, #16]
 8001af0:	2120      	movs	r1, #32
 8001af2:	430a      	orrs	r2, r1
 8001af4:	741a      	strb	r2, [r3, #16]
			//writeChar('a', 1, 5);
#endif
		}
	}

	if(flags.buttons.butt1_int)	//interrupt tlačítka 1
 8001af6:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <buttonDebounce+0x104>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	075b      	lsls	r3, r3, #29
 8001afc:	0fdb      	lsrs	r3, r3, #31
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d031      	beq.n	8001b68 <buttonDebounce+0xfc>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	005a      	lsls	r2, r3, #1
 8001b08:	2390      	movs	r3, #144	; 0x90
 8001b0a:	05db      	lsls	r3, r3, #23
 8001b0c:	0011      	movs	r1, r2
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f002 fb42 	bl	8004198 <HAL_GPIO_ReadPin>
 8001b14:	0003      	movs	r3, r0
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d107      	bne.n	8001b2a <buttonDebounce+0xbe>
		{
			button1_Debounce++;
 8001b1a:	4b17      	ldr	r3, [pc, #92]	; (8001b78 <buttonDebounce+0x10c>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	3301      	adds	r3, #1
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <buttonDebounce+0x10c>)
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	e007      	b.n	8001b3a <buttonDebounce+0xce>
		}
		else	//pin tlačítka na Low -> šlo o zákmit
		{
			button1_Debounce = 0;
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <buttonDebounce+0x10c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt1_int = 0;
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <buttonDebounce+0x104>)
 8001b32:	791a      	ldrb	r2, [r3, #4]
 8001b34:	2104      	movs	r1, #4
 8001b36:	438a      	bics	r2, r1
 8001b38:	711a      	strb	r2, [r3, #4]
		}
		if(button1_Debounce >= 5)	//pin tlačítka na High 5*10 ms -> ustálený stisk
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <buttonDebounce+0x10c>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b04      	cmp	r3, #4
 8001b42:	d911      	bls.n	8001b68 <buttonDebounce+0xfc>
		{
			flags.buttons.butt1_ver = 1;
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <buttonDebounce+0x104>)
 8001b46:	791a      	ldrb	r2, [r3, #4]
 8001b48:	2108      	movs	r1, #8
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt1_int = 0;
 8001b4e:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <buttonDebounce+0x104>)
 8001b50:	791a      	ldrb	r2, [r3, #4]
 8001b52:	2104      	movs	r1, #4
 8001b54:	438a      	bics	r2, r1
 8001b56:	711a      	strb	r2, [r3, #4]
			button1_Debounce = 0;
 8001b58:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <buttonDebounce+0x10c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]

			flags.ui.active = 1;
 8001b5e:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <buttonDebounce+0x104>)
 8001b60:	7c1a      	ldrb	r2, [r3, #16]
 8001b62:	2120      	movs	r1, #32
 8001b64:	430a      	orrs	r2, r1
 8001b66:	741a      	strb	r2, [r3, #16]
#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
#endif
		}
	}
}
 8001b68:	46c0      	nop			; (mov r8, r8)
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	2000063c 	.word	0x2000063c
 8001b74:	20000250 	.word	0x20000250
 8001b78:	20000251 	.word	0x20000251

08001b7c <dispHandler>:

//_____Obsluha výtisků textu na displej_____//
void dispHandler()
{
 8001b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7e:	b0bd      	sub	sp, #244	; 0xf4
 8001b80:	af02      	add	r7, sp, #8
	char emptyString[] = "                ";
 8001b82:	25cc      	movs	r5, #204	; 0xcc
 8001b84:	197b      	adds	r3, r7, r5
 8001b86:	4ada      	ldr	r2, [pc, #872]	; (8001ef0 <dispHandler+0x374>)
 8001b88:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b8a:	c313      	stmia	r3!, {r0, r1, r4}
 8001b8c:	6811      	ldr	r1, [r2, #0]
 8001b8e:	6019      	str	r1, [r3, #0]
 8001b90:	7912      	ldrb	r2, [r2, #4]
 8001b92:	711a      	strb	r2, [r3, #4]
	char* strings[4] = {emptyString};
 8001b94:	24bc      	movs	r4, #188	; 0xbc
 8001b96:	193b      	adds	r3, r7, r4
 8001b98:	0018      	movs	r0, r3
 8001b9a:	2310      	movs	r3, #16
 8001b9c:	001a      	movs	r2, r3
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	f00b fc99 	bl	800d4d6 <memset>
 8001ba4:	193b      	adds	r3, r7, r4
 8001ba6:	197a      	adds	r2, r7, r5
 8001ba8:	601a      	str	r2, [r3, #0]
	ALIGN align[4] = {CENTER};
 8001baa:	25b8      	movs	r5, #184	; 0xb8
 8001bac:	197b      	adds	r3, r7, r5
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	197b      	adds	r3, r7, r5
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	701a      	strb	r2, [r3, #0]

	if(flags.testProgress && !flags.instructions.stopRequest)
 8001bb8:	4bce      	ldr	r3, [pc, #824]	; (8001ef4 <dispHandler+0x378>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	079b      	lsls	r3, r3, #30
 8001bbe:	0fdb      	lsrs	r3, r3, #31
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d100      	bne.n	8001bc8 <dispHandler+0x4c>
 8001bc6:	e0f6      	b.n	8001db6 <dispHandler+0x23a>
 8001bc8:	4bca      	ldr	r3, [pc, #808]	; (8001ef4 <dispHandler+0x378>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	079b      	lsls	r3, r3, #30
 8001bce:	0fdb      	lsrs	r3, r3, #31
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d000      	beq.n	8001bd8 <dispHandler+0x5c>
 8001bd6:	e0ee      	b.n	8001db6 <dispHandler+0x23a>
	{
		if(currentPhase() != WAITING)
 8001bd8:	f000 ffbc 	bl	8002b54 <currentPhase>
 8001bdc:	1e03      	subs	r3, r0, #0
 8001bde:	d010      	beq.n	8001c02 <dispHandler+0x86>
		{
			char supplyInTestingNum[6];
			sprintf(supplyInTestingNum, "%d/%d", supplyToTest+1, regCount);
 8001be0:	4bc5      	ldr	r3, [pc, #788]	; (8001ef8 <dispHandler+0x37c>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	4bc4      	ldr	r3, [pc, #784]	; (8001efc <dispHandler+0x380>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	49c4      	ldr	r1, [pc, #784]	; (8001f00 <dispHandler+0x384>)
 8001bee:	26b0      	movs	r6, #176	; 0xb0
 8001bf0:	19b8      	adds	r0, r7, r6
 8001bf2:	f00b fd33 	bl	800d65c <siprintf>

			strings[0] = supplyInTestingNum;
 8001bf6:	193b      	adds	r3, r7, r4
 8001bf8:	19ba      	adds	r2, r7, r6
 8001bfa:	601a      	str	r2, [r3, #0]
			align[0] = LEFT;
 8001bfc:	197b      	adds	r3, r7, r5
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
		}

		switch(currentPhase())
 8001c02:	f000 ffa7 	bl	8002b54 <currentPhase>
 8001c06:	0003      	movs	r3, r0
 8001c08:	2b06      	cmp	r3, #6
 8001c0a:	d900      	bls.n	8001c0e <dispHandler+0x92>
 8001c0c:	e087      	b.n	8001d1e <dispHandler+0x1a2>
 8001c0e:	009a      	lsls	r2, r3, #2
 8001c10:	4bbc      	ldr	r3, [pc, #752]	; (8001f04 <dispHandler+0x388>)
 8001c12:	18d3      	adds	r3, r2, r3
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	469f      	mov	pc, r3
		{
		case START:
		{
			char start1[] = "Spousteni";
 8001c18:	21a4      	movs	r1, #164	; 0xa4
 8001c1a:	187b      	adds	r3, r7, r1
 8001c1c:	4aba      	ldr	r2, [pc, #744]	; (8001f08 <dispHandler+0x38c>)
 8001c1e:	ca11      	ldmia	r2!, {r0, r4}
 8001c20:	c311      	stmia	r3!, {r0, r4}
 8001c22:	8812      	ldrh	r2, [r2, #0]
 8001c24:	801a      	strh	r2, [r3, #0]
			strings[1] = start1;
 8001c26:	23bc      	movs	r3, #188	; 0xbc
 8001c28:	18fb      	adds	r3, r7, r3
 8001c2a:	187a      	adds	r2, r7, r1
 8001c2c:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001c2e:	23b8      	movs	r3, #184	; 0xb8
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	2202      	movs	r2, #2
 8001c34:	705a      	strb	r2, [r3, #1]

			break;
 8001c36:	e091      	b.n	8001d5c <dispHandler+0x1e0>
		}
		case START_DONE:
		{
			char start1[] = "Spousteni";
 8001c38:	2198      	movs	r1, #152	; 0x98
 8001c3a:	187b      	adds	r3, r7, r1
 8001c3c:	4ab2      	ldr	r2, [pc, #712]	; (8001f08 <dispHandler+0x38c>)
 8001c3e:	ca11      	ldmia	r2!, {r0, r4}
 8001c40:	c311      	stmia	r3!, {r0, r4}
 8001c42:	8812      	ldrh	r2, [r2, #0]
 8001c44:	801a      	strh	r2, [r3, #0]
			char start2[] = "dokonceno";
 8001c46:	208c      	movs	r0, #140	; 0x8c
 8001c48:	183b      	adds	r3, r7, r0
 8001c4a:	4ab0      	ldr	r2, [pc, #704]	; (8001f0c <dispHandler+0x390>)
 8001c4c:	ca30      	ldmia	r2!, {r4, r5}
 8001c4e:	c330      	stmia	r3!, {r4, r5}
 8001c50:	8812      	ldrh	r2, [r2, #0]
 8001c52:	801a      	strh	r2, [r3, #0]
			strings[1] = start1;
 8001c54:	24bc      	movs	r4, #188	; 0xbc
 8001c56:	193b      	adds	r3, r7, r4
 8001c58:	187a      	adds	r2, r7, r1
 8001c5a:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001c5c:	21b8      	movs	r1, #184	; 0xb8
 8001c5e:	187b      	adds	r3, r7, r1
 8001c60:	2202      	movs	r2, #2
 8001c62:	705a      	strb	r2, [r3, #1]
			strings[2] = start2;
 8001c64:	193b      	adds	r3, r7, r4
 8001c66:	183a      	adds	r2, r7, r0
 8001c68:	609a      	str	r2, [r3, #8]
			align[2] = CENTER;
 8001c6a:	187b      	adds	r3, r7, r1
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	709a      	strb	r2, [r3, #2]
			break;
 8001c70:	e074      	b.n	8001d5c <dispHandler+0x1e0>
		}
		case MAIN_TEST:
		{
			char main1[] = "Hlavni test";
 8001c72:	2180      	movs	r1, #128	; 0x80
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	4aa6      	ldr	r2, [pc, #664]	; (8001f10 <dispHandler+0x394>)
 8001c78:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001c7a:	c331      	stmia	r3!, {r0, r4, r5}
			strings[1] = main1;
 8001c7c:	23bc      	movs	r3, #188	; 0xbc
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	187a      	adds	r2, r7, r1
 8001c82:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001c84:	23b8      	movs	r3, #184	; 0xb8
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	2202      	movs	r2, #2
 8001c8a:	705a      	strb	r2, [r3, #1]
			break;
 8001c8c:	e066      	b.n	8001d5c <dispHandler+0x1e0>
		}
		case MAIN_TEST_DONE:
		{
			char main1[] = "Hlavni test";
 8001c8e:	2174      	movs	r1, #116	; 0x74
 8001c90:	187b      	adds	r3, r7, r1
 8001c92:	4a9f      	ldr	r2, [pc, #636]	; (8001f10 <dispHandler+0x394>)
 8001c94:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001c96:	c331      	stmia	r3!, {r0, r4, r5}
			char main2[] = "dokoncen";
 8001c98:	2068      	movs	r0, #104	; 0x68
 8001c9a:	183b      	adds	r3, r7, r0
 8001c9c:	4a9d      	ldr	r2, [pc, #628]	; (8001f14 <dispHandler+0x398>)
 8001c9e:	ca30      	ldmia	r2!, {r4, r5}
 8001ca0:	c330      	stmia	r3!, {r4, r5}
 8001ca2:	7812      	ldrb	r2, [r2, #0]
 8001ca4:	701a      	strb	r2, [r3, #0]
			strings[1] = main1;
 8001ca6:	24bc      	movs	r4, #188	; 0xbc
 8001ca8:	193b      	adds	r3, r7, r4
 8001caa:	187a      	adds	r2, r7, r1
 8001cac:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001cae:	21b8      	movs	r1, #184	; 0xb8
 8001cb0:	187b      	adds	r3, r7, r1
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	705a      	strb	r2, [r3, #1]
			strings[2] = main2;
 8001cb6:	193b      	adds	r3, r7, r4
 8001cb8:	183a      	adds	r2, r7, r0
 8001cba:	609a      	str	r2, [r3, #8]
			align[2] = CENTER;
 8001cbc:	187b      	adds	r3, r7, r1
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	709a      	strb	r2, [r3, #2]
			break;
 8001cc2:	e04b      	b.n	8001d5c <dispHandler+0x1e0>
		}
		case BATTERY_TEST:
		{
			char bat1[] = "Test baterie";
 8001cc4:	2158      	movs	r1, #88	; 0x58
 8001cc6:	187b      	adds	r3, r7, r1
 8001cc8:	4a93      	ldr	r2, [pc, #588]	; (8001f18 <dispHandler+0x39c>)
 8001cca:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001ccc:	c331      	stmia	r3!, {r0, r4, r5}
 8001cce:	7812      	ldrb	r2, [r2, #0]
 8001cd0:	701a      	strb	r2, [r3, #0]
			strings[1] = bat1;
 8001cd2:	23bc      	movs	r3, #188	; 0xbc
 8001cd4:	18fb      	adds	r3, r7, r3
 8001cd6:	187a      	adds	r2, r7, r1
 8001cd8:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001cda:	23b8      	movs	r3, #184	; 0xb8
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	2202      	movs	r2, #2
 8001ce0:	705a      	strb	r2, [r3, #1]
			break;
 8001ce2:	e03b      	b.n	8001d5c <dispHandler+0x1e0>
		}
		case BATTERY_TEST_DONE:
		{
			char bat1[] = "Test baterie";
 8001ce4:	2148      	movs	r1, #72	; 0x48
 8001ce6:	187b      	adds	r3, r7, r1
 8001ce8:	4a8b      	ldr	r2, [pc, #556]	; (8001f18 <dispHandler+0x39c>)
 8001cea:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001cec:	c331      	stmia	r3!, {r0, r4, r5}
 8001cee:	7812      	ldrb	r2, [r2, #0]
 8001cf0:	701a      	strb	r2, [r3, #0]
			char bat2[] = "dokoncen";
 8001cf2:	203c      	movs	r0, #60	; 0x3c
 8001cf4:	183b      	adds	r3, r7, r0
 8001cf6:	4a87      	ldr	r2, [pc, #540]	; (8001f14 <dispHandler+0x398>)
 8001cf8:	ca30      	ldmia	r2!, {r4, r5}
 8001cfa:	c330      	stmia	r3!, {r4, r5}
 8001cfc:	7812      	ldrb	r2, [r2, #0]
 8001cfe:	701a      	strb	r2, [r3, #0]
			strings[1] = bat1;
 8001d00:	24bc      	movs	r4, #188	; 0xbc
 8001d02:	193b      	adds	r3, r7, r4
 8001d04:	187a      	adds	r2, r7, r1
 8001d06:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001d08:	21b8      	movs	r1, #184	; 0xb8
 8001d0a:	187b      	adds	r3, r7, r1
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	705a      	strb	r2, [r3, #1]
			strings[2] = bat2;
 8001d10:	193b      	adds	r3, r7, r4
 8001d12:	183a      	adds	r2, r7, r0
 8001d14:	609a      	str	r2, [r3, #8]
			align[2] = CENTER;
 8001d16:	187b      	adds	r3, r7, r1
 8001d18:	2202      	movs	r2, #2
 8001d1a:	709a      	strb	r2, [r3, #2]
			break;
 8001d1c:	e01e      	b.n	8001d5c <dispHandler+0x1e0>
		}
		default:
		{
			char default1[] = "Zahoreni";
 8001d1e:	2030      	movs	r0, #48	; 0x30
 8001d20:	183b      	adds	r3, r7, r0
 8001d22:	4a7e      	ldr	r2, [pc, #504]	; (8001f1c <dispHandler+0x3a0>)
 8001d24:	ca12      	ldmia	r2!, {r1, r4}
 8001d26:	c312      	stmia	r3!, {r1, r4}
 8001d28:	7812      	ldrb	r2, [r2, #0]
 8001d2a:	701a      	strb	r2, [r3, #0]
			char default2[] = "zdroju";
 8001d2c:	2428      	movs	r4, #40	; 0x28
 8001d2e:	193b      	adds	r3, r7, r4
 8001d30:	4a7b      	ldr	r2, [pc, #492]	; (8001f20 <dispHandler+0x3a4>)
 8001d32:	6811      	ldr	r1, [r2, #0]
 8001d34:	6019      	str	r1, [r3, #0]
 8001d36:	8891      	ldrh	r1, [r2, #4]
 8001d38:	8099      	strh	r1, [r3, #4]
 8001d3a:	7992      	ldrb	r2, [r2, #6]
 8001d3c:	719a      	strb	r2, [r3, #6]
			strings[1] = default1;
 8001d3e:	21bc      	movs	r1, #188	; 0xbc
 8001d40:	187b      	adds	r3, r7, r1
 8001d42:	183a      	adds	r2, r7, r0
 8001d44:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001d46:	20b8      	movs	r0, #184	; 0xb8
 8001d48:	183b      	adds	r3, r7, r0
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	705a      	strb	r2, [r3, #1]
			strings[2] = default2;
 8001d4e:	187b      	adds	r3, r7, r1
 8001d50:	193a      	adds	r2, r7, r4
 8001d52:	609a      	str	r2, [r3, #8]
			align[2] = CENTER;
 8001d54:	183b      	adds	r3, r7, r0
 8001d56:	2202      	movs	r2, #2
 8001d58:	709a      	strb	r2, [r3, #2]

			break;
 8001d5a:	46c0      	nop			; (mov r8, r8)
		}
		}

		for(int i = 0; i < 4; i++)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	22e4      	movs	r2, #228	; 0xe4
 8001d60:	18ba      	adds	r2, r7, r2
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	e022      	b.n	8001dac <dispHandler+0x230>
		{
			writeRow(strings[i], strlen(strings[i]), i, align[i]);
 8001d66:	21bc      	movs	r1, #188	; 0xbc
 8001d68:	187b      	adds	r3, r7, r1
 8001d6a:	25e4      	movs	r5, #228	; 0xe4
 8001d6c:	197a      	adds	r2, r7, r5
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	0092      	lsls	r2, r2, #2
 8001d72:	58d4      	ldr	r4, [r2, r3]
 8001d74:	187b      	adds	r3, r7, r1
 8001d76:	197a      	adds	r2, r7, r5
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	0092      	lsls	r2, r2, #2
 8001d7c:	58d3      	ldr	r3, [r2, r3]
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f7fe f9c2 	bl	8000108 <strlen>
 8001d84:	0003      	movs	r3, r0
 8001d86:	b2d9      	uxtb	r1, r3
 8001d88:	197b      	adds	r3, r7, r5
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	b2d8      	uxtb	r0, r3
 8001d8e:	23b8      	movs	r3, #184	; 0xb8
 8001d90:	18fa      	adds	r2, r7, r3
 8001d92:	197b      	adds	r3, r7, r5
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	18d3      	adds	r3, r2, r3
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	0020      	movs	r0, r4
 8001d9e:	f7ff f91f 	bl	8000fe0 <writeRow>
		for(int i = 0; i < 4; i++)
 8001da2:	197b      	adds	r3, r7, r5
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	3301      	adds	r3, #1
 8001da8:	197a      	adds	r2, r7, r5
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	23e4      	movs	r3, #228	; 0xe4
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	ddd7      	ble.n	8001d66 <dispHandler+0x1ea>
		}
	}

	//_____Zobrazení času u hlavních testů_____//
	if(flags.time.sec)
 8001db6:	4b4f      	ldr	r3, [pc, #316]	; (8001ef4 <dispHandler+0x378>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	079b      	lsls	r3, r3, #30
 8001dbc:	0fdb      	lsrs	r3, r3, #31
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d051      	beq.n	8001e68 <dispHandler+0x2ec>
	{
		switch(currentPhase())
 8001dc4:	f000 fec6 	bl	8002b54 <currentPhase>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d002      	beq.n	8001dd4 <dispHandler+0x258>
 8001dce:	2b05      	cmp	r3, #5
 8001dd0:	d028      	beq.n	8001e24 <dispHandler+0x2a8>
			sprintf(time, "%d:%d", 14-sysTime[SYSTIME_MIN], 60-sysTime[SYSTIME_SEC]);
			writeRow(time, strlen(time), 2, CENTER);
			break;
		}
		default:
			break;
 8001dd2:	e04a      	b.n	8001e6a <dispHandler+0x2ee>
			char time[9] = {0};
 8001dd4:	251c      	movs	r5, #28
 8001dd6:	197b      	adds	r3, r7, r5
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
 8001ddc:	3304      	adds	r3, #4
 8001dde:	2205      	movs	r2, #5
 8001de0:	2100      	movs	r1, #0
 8001de2:	0018      	movs	r0, r3
 8001de4:	f00b fb77 	bl	800d4d6 <memset>
			sprintf(time, "%d:%d:%d", 2-sysTime[SYSTIME_HOUR], 59-sysTime[SYSTIME_MIN], 60-sysTime[SYSTIME_SEC]);
 8001de8:	4b4e      	ldr	r3, [pc, #312]	; (8001f24 <dispHandler+0x3a8>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	2202      	movs	r2, #2
 8001dee:	1ad2      	subs	r2, r2, r3
 8001df0:	4b4c      	ldr	r3, [pc, #304]	; (8001f24 <dispHandler+0x3a8>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	213b      	movs	r1, #59	; 0x3b
 8001df6:	1acc      	subs	r4, r1, r3
 8001df8:	4b4a      	ldr	r3, [pc, #296]	; (8001f24 <dispHandler+0x3a8>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	213c      	movs	r1, #60	; 0x3c
 8001dfe:	1acb      	subs	r3, r1, r3
 8001e00:	4949      	ldr	r1, [pc, #292]	; (8001f28 <dispHandler+0x3ac>)
 8001e02:	1978      	adds	r0, r7, r5
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	0023      	movs	r3, r4
 8001e08:	f00b fc28 	bl	800d65c <siprintf>
			writeRow(time, strlen(time), 2, CENTER);
 8001e0c:	197b      	adds	r3, r7, r5
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f7fe f97a 	bl	8000108 <strlen>
 8001e14:	0003      	movs	r3, r0
 8001e16:	b2d9      	uxtb	r1, r3
 8001e18:	1978      	adds	r0, r7, r5
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	f7ff f8df 	bl	8000fe0 <writeRow>
			break;
 8001e22:	e022      	b.n	8001e6a <dispHandler+0x2ee>
			char time[9] = {0};
 8001e24:	2410      	movs	r4, #16
 8001e26:	193b      	adds	r3, r7, r4
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	2205      	movs	r2, #5
 8001e30:	2100      	movs	r1, #0
 8001e32:	0018      	movs	r0, r3
 8001e34:	f00b fb4f 	bl	800d4d6 <memset>
			sprintf(time, "%d:%d", 14-sysTime[SYSTIME_MIN], 60-sysTime[SYSTIME_SEC]);
 8001e38:	4b3a      	ldr	r3, [pc, #232]	; (8001f24 <dispHandler+0x3a8>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	220e      	movs	r2, #14
 8001e3e:	1ad2      	subs	r2, r2, r3
 8001e40:	4b38      	ldr	r3, [pc, #224]	; (8001f24 <dispHandler+0x3a8>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	213c      	movs	r1, #60	; 0x3c
 8001e46:	1acb      	subs	r3, r1, r3
 8001e48:	4938      	ldr	r1, [pc, #224]	; (8001f2c <dispHandler+0x3b0>)
 8001e4a:	1938      	adds	r0, r7, r4
 8001e4c:	f00b fc06 	bl	800d65c <siprintf>
			writeRow(time, strlen(time), 2, CENTER);
 8001e50:	193b      	adds	r3, r7, r4
 8001e52:	0018      	movs	r0, r3
 8001e54:	f7fe f958 	bl	8000108 <strlen>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	b2d9      	uxtb	r1, r3
 8001e5c:	1938      	adds	r0, r7, r4
 8001e5e:	2302      	movs	r3, #2
 8001e60:	2202      	movs	r2, #2
 8001e62:	f7ff f8bd 	bl	8000fe0 <writeRow>
			break;
 8001e66:	e000      	b.n	8001e6a <dispHandler+0x2ee>
		}
	}
 8001e68:	46c0      	nop			; (mov r8, r8)

	if(flags.instructions.stopRequest || flags.testCanceled)
 8001e6a:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <dispHandler+0x378>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	079b      	lsls	r3, r3, #30
 8001e70:	0fdb      	lsrs	r3, r3, #31
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d106      	bne.n	8001e86 <dispHandler+0x30a>
 8001e78:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <dispHandler+0x378>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	075b      	lsls	r3, r3, #29
 8001e7e:	0fdb      	lsrs	r3, r3, #31
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d030      	beq.n	8001ee8 <dispHandler+0x36c>
	{
		char err[] = "Preruseni";
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	4a29      	ldr	r2, [pc, #164]	; (8001f30 <dispHandler+0x3b4>)
 8001e8a:	ca03      	ldmia	r2!, {r0, r1}
 8001e8c:	c303      	stmia	r3!, {r0, r1}
 8001e8e:	8812      	ldrh	r2, [r2, #0]
 8001e90:	801a      	strh	r2, [r3, #0]
		strings[1] = err;
 8001e92:	23bc      	movs	r3, #188	; 0xbc
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	1d3a      	adds	r2, r7, #4
 8001e98:	605a      	str	r2, [r3, #4]

		for(int i = 0; i < 4; i++)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	22e0      	movs	r2, #224	; 0xe0
 8001e9e:	18ba      	adds	r2, r7, r2
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	e01c      	b.n	8001ede <dispHandler+0x362>
		{
			writeRow(strings[i], strlen(strings[i]), i, CENTER);
 8001ea4:	21bc      	movs	r1, #188	; 0xbc
 8001ea6:	187b      	adds	r3, r7, r1
 8001ea8:	25e0      	movs	r5, #224	; 0xe0
 8001eaa:	197a      	adds	r2, r7, r5
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	0092      	lsls	r2, r2, #2
 8001eb0:	58d4      	ldr	r4, [r2, r3]
 8001eb2:	187b      	adds	r3, r7, r1
 8001eb4:	197a      	adds	r2, r7, r5
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	0092      	lsls	r2, r2, #2
 8001eba:	58d3      	ldr	r3, [r2, r3]
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f7fe f923 	bl	8000108 <strlen>
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	b2d9      	uxtb	r1, r3
 8001ec6:	197b      	adds	r3, r7, r5
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	2302      	movs	r3, #2
 8001ece:	0020      	movs	r0, r4
 8001ed0:	f7ff f886 	bl	8000fe0 <writeRow>
		for(int i = 0; i < 4; i++)
 8001ed4:	197b      	adds	r3, r7, r5
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	197a      	adds	r2, r7, r5
 8001edc:	6013      	str	r3, [r2, #0]
 8001ede:	23e0      	movs	r3, #224	; 0xe0
 8001ee0:	18fb      	adds	r3, r7, r3
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	dddd      	ble.n	8001ea4 <dispHandler+0x328>
		}
	}
}
 8001ee8:	46c0      	nop			; (mov r8, r8)
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b03b      	add	sp, #236	; 0xec
 8001eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ef0:	0800dd7c 	.word	0x0800dd7c
 8001ef4:	2000063c 	.word	0x2000063c
 8001ef8:	20000252 	.word	0x20000252
 8001efc:	2000069d 	.word	0x2000069d
 8001f00:	0800dd60 	.word	0x0800dd60
 8001f04:	0800df08 	.word	0x0800df08
 8001f08:	0800dd90 	.word	0x0800dd90
 8001f0c:	0800dd9c 	.word	0x0800dd9c
 8001f10:	0800dda8 	.word	0x0800dda8
 8001f14:	0800ddb4 	.word	0x0800ddb4
 8001f18:	0800ddc0 	.word	0x0800ddc0
 8001f1c:	0800dd4c 	.word	0x0800dd4c
 8001f20:	0800dd58 	.word	0x0800dd58
 8001f24:	20000240 	.word	0x20000240
 8001f28:	0800dd68 	.word	0x0800dd68
 8001f2c:	0800dd74 	.word	0x0800dd74
 8001f30:	0800ddd0 	.word	0x0800ddd0

08001f34 <UI_Handler>:

//_____Obsluha piezo + podsvícení displeje_____//
void UI_Handler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
	//_____Vypínání podsvětlení displeje při nečinnosti_____//
	static uint32_t startTime_LCD = 0;

	if(flags.testProgress)
 8001f38:	4ba8      	ldr	r3, [pc, #672]	; (80021dc <UI_Handler+0x2a8>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	079b      	lsls	r3, r3, #30
 8001f3e:	0fdb      	lsrs	r3, r3, #31
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d004      	beq.n	8001f50 <UI_Handler+0x1c>
		flags.ui.active = 1;
 8001f46:	4ba5      	ldr	r3, [pc, #660]	; (80021dc <UI_Handler+0x2a8>)
 8001f48:	7c1a      	ldrb	r2, [r3, #16]
 8001f4a:	2120      	movs	r1, #32
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	741a      	strb	r2, [r3, #16]
	if(flags.instructions.calibRequest || flags.instructions.startRequest || flags.instructions.stopRequest || flags.instructions.pauseRequest)
 8001f50:	4ba2      	ldr	r3, [pc, #648]	; (80021dc <UI_Handler+0x2a8>)
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	071b      	lsls	r3, r3, #28
 8001f56:	0fdb      	lsrs	r3, r3, #31
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d114      	bne.n	8001f88 <UI_Handler+0x54>
 8001f5e:	4b9f      	ldr	r3, [pc, #636]	; (80021dc <UI_Handler+0x2a8>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	07db      	lsls	r3, r3, #31
 8001f64:	0fdb      	lsrs	r3, r3, #31
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10d      	bne.n	8001f88 <UI_Handler+0x54>
 8001f6c:	4b9b      	ldr	r3, [pc, #620]	; (80021dc <UI_Handler+0x2a8>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	079b      	lsls	r3, r3, #30
 8001f72:	0fdb      	lsrs	r3, r3, #31
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d106      	bne.n	8001f88 <UI_Handler+0x54>
 8001f7a:	4b98      	ldr	r3, [pc, #608]	; (80021dc <UI_Handler+0x2a8>)
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	075b      	lsls	r3, r3, #29
 8001f80:	0fdb      	lsrs	r3, r3, #31
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d004      	beq.n	8001f92 <UI_Handler+0x5e>
		flags.ui.active = 1;
 8001f88:	4b94      	ldr	r3, [pc, #592]	; (80021dc <UI_Handler+0x2a8>)
 8001f8a:	7c1a      	ldrb	r2, [r3, #16]
 8001f8c:	2120      	movs	r1, #32
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	741a      	strb	r2, [r3, #16]

	if(flags.ui.active)
 8001f92:	4b92      	ldr	r3, [pc, #584]	; (80021dc <UI_Handler+0x2a8>)
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	069b      	lsls	r3, r3, #26
 8001f98:	0fdb      	lsrs	r3, r3, #31
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d006      	beq.n	8001fae <UI_Handler+0x7a>
	{
		startTime_LCD = sysTime[SYSTIME_TEN_MS];
 8001fa0:	4b8f      	ldr	r3, [pc, #572]	; (80021e0 <UI_Handler+0x2ac>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b8f      	ldr	r3, [pc, #572]	; (80021e4 <UI_Handler+0x2b0>)
 8001fa6:	601a      	str	r2, [r3, #0]
		setColour(BACKLIGHT_WHITE);
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7fe fe5d 	bl	8000c68 <setColour>
	}

	if((sysTime[SYSTIME_TEN_MS] - startTime_LCD) >= 6000)	//1min
 8001fae:	4b8c      	ldr	r3, [pc, #560]	; (80021e0 <UI_Handler+0x2ac>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	4b8c      	ldr	r3, [pc, #560]	; (80021e4 <UI_Handler+0x2b0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	4a8b      	ldr	r2, [pc, #556]	; (80021e8 <UI_Handler+0x2b4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d902      	bls.n	8001fc4 <UI_Handler+0x90>
	{
		setColour(BACKLIGHT_OFF);
 8001fbe:	2003      	movs	r0, #3
 8001fc0:	f7fe fe52 	bl	8000c68 <setColour>
	}

	flags.ui.active = 0;
 8001fc4:	4b85      	ldr	r3, [pc, #532]	; (80021dc <UI_Handler+0x2a8>)
 8001fc6:	7c1a      	ldrb	r2, [r3, #16]
 8001fc8:	2120      	movs	r1, #32
 8001fca:	438a      	bics	r2, r1
 8001fcc:	741a      	strb	r2, [r3, #16]

	static uint32_t startTime;	//proměnná pro časování dějů

	//___Nastavení stavu podle požadavků___//
	//___Stavy výše mají vyšší prioritu (error nejvyšší)___//
	if(flags.ui.error && (UI_State != ERROR))
 8001fce:	4b83      	ldr	r3, [pc, #524]	; (80021dc <UI_Handler+0x2a8>)
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	075b      	lsls	r3, r3, #29
 8001fd4:	0fdb      	lsrs	r3, r3, #31
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00b      	beq.n	8001ff4 <UI_Handler+0xc0>
 8001fdc:	4b83      	ldr	r3, [pc, #524]	; (80021ec <UI_Handler+0x2b8>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d007      	beq.n	8001ff4 <UI_Handler+0xc0>
	{
		UI_State = ERROR;
 8001fe4:	4b81      	ldr	r3, [pc, #516]	; (80021ec <UI_Handler+0x2b8>)
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001fea:	4b7d      	ldr	r3, [pc, #500]	; (80021e0 <UI_Handler+0x2ac>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	4b80      	ldr	r3, [pc, #512]	; (80021f0 <UI_Handler+0x2bc>)
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e05e      	b.n	80020b2 <UI_Handler+0x17e>
	}
	else if(flags.ui.notice && (UI_State == OFF))
 8001ff4:	4b79      	ldr	r3, [pc, #484]	; (80021dc <UI_Handler+0x2a8>)
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	071b      	lsls	r3, r3, #28
 8001ffa:	0fdb      	lsrs	r3, r3, #31
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d010      	beq.n	8002024 <UI_Handler+0xf0>
 8002002:	4b7a      	ldr	r3, [pc, #488]	; (80021ec <UI_Handler+0x2b8>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10c      	bne.n	8002024 <UI_Handler+0xf0>
	{
		UI_State = NOTICE;
 800200a:	4b78      	ldr	r3, [pc, #480]	; (80021ec <UI_Handler+0x2b8>)
 800200c:	2204      	movs	r2, #4
 800200e:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8002010:	4b73      	ldr	r3, [pc, #460]	; (80021e0 <UI_Handler+0x2ac>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b76      	ldr	r3, [pc, #472]	; (80021f0 <UI_Handler+0x2bc>)
 8002016:	601a      	str	r2, [r3, #0]
		flags.ui.notice = 0;
 8002018:	4b70      	ldr	r3, [pc, #448]	; (80021dc <UI_Handler+0x2a8>)
 800201a:	7c1a      	ldrb	r2, [r3, #16]
 800201c:	2108      	movs	r1, #8
 800201e:	438a      	bics	r2, r1
 8002020:	741a      	strb	r2, [r3, #16]
 8002022:	e046      	b.n	80020b2 <UI_Handler+0x17e>
	}
	else if(flags.ui.done && (UI_State == OFF))
 8002024:	4b6d      	ldr	r3, [pc, #436]	; (80021dc <UI_Handler+0x2a8>)
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	06db      	lsls	r3, r3, #27
 800202a:	0fdb      	lsrs	r3, r3, #31
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d010      	beq.n	8002054 <UI_Handler+0x120>
 8002032:	4b6e      	ldr	r3, [pc, #440]	; (80021ec <UI_Handler+0x2b8>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10c      	bne.n	8002054 <UI_Handler+0x120>
	{
		UI_State = DONE;
 800203a:	4b6c      	ldr	r3, [pc, #432]	; (80021ec <UI_Handler+0x2b8>)
 800203c:	2205      	movs	r2, #5
 800203e:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8002040:	4b67      	ldr	r3, [pc, #412]	; (80021e0 <UI_Handler+0x2ac>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b6a      	ldr	r3, [pc, #424]	; (80021f0 <UI_Handler+0x2bc>)
 8002046:	601a      	str	r2, [r3, #0]
		flags.ui.done = 0;
 8002048:	4b64      	ldr	r3, [pc, #400]	; (80021dc <UI_Handler+0x2a8>)
 800204a:	7c1a      	ldrb	r2, [r3, #16]
 800204c:	2110      	movs	r1, #16
 800204e:	438a      	bics	r2, r1
 8002050:	741a      	strb	r2, [r3, #16]
 8002052:	e02e      	b.n	80020b2 <UI_Handler+0x17e>
	}
	else if(flags.ui.longBeep && (UI_State == OFF))
 8002054:	4b61      	ldr	r3, [pc, #388]	; (80021dc <UI_Handler+0x2a8>)
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	079b      	lsls	r3, r3, #30
 800205a:	0fdb      	lsrs	r3, r3, #31
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d010      	beq.n	8002084 <UI_Handler+0x150>
 8002062:	4b62      	ldr	r3, [pc, #392]	; (80021ec <UI_Handler+0x2b8>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10c      	bne.n	8002084 <UI_Handler+0x150>
	{
		UI_State = LONG_BEEP;
 800206a:	4b60      	ldr	r3, [pc, #384]	; (80021ec <UI_Handler+0x2b8>)
 800206c:	2202      	movs	r2, #2
 800206e:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8002070:	4b5b      	ldr	r3, [pc, #364]	; (80021e0 <UI_Handler+0x2ac>)
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b5e      	ldr	r3, [pc, #376]	; (80021f0 <UI_Handler+0x2bc>)
 8002076:	601a      	str	r2, [r3, #0]
		flags.ui.longBeep = 0;
 8002078:	4b58      	ldr	r3, [pc, #352]	; (80021dc <UI_Handler+0x2a8>)
 800207a:	7c1a      	ldrb	r2, [r3, #16]
 800207c:	2102      	movs	r1, #2
 800207e:	438a      	bics	r2, r1
 8002080:	741a      	strb	r2, [r3, #16]
 8002082:	e016      	b.n	80020b2 <UI_Handler+0x17e>
	}
	else if(flags.ui.shortBeep && (UI_State == OFF))
 8002084:	4b55      	ldr	r3, [pc, #340]	; (80021dc <UI_Handler+0x2a8>)
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	07db      	lsls	r3, r3, #31
 800208a:	0fdb      	lsrs	r3, r3, #31
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00f      	beq.n	80020b2 <UI_Handler+0x17e>
 8002092:	4b56      	ldr	r3, [pc, #344]	; (80021ec <UI_Handler+0x2b8>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10b      	bne.n	80020b2 <UI_Handler+0x17e>
	{
		UI_State = SHORT_BEEP;
 800209a:	4b54      	ldr	r3, [pc, #336]	; (80021ec <UI_Handler+0x2b8>)
 800209c:	2201      	movs	r2, #1
 800209e:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80020a0:	4b4f      	ldr	r3, [pc, #316]	; (80021e0 <UI_Handler+0x2ac>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b52      	ldr	r3, [pc, #328]	; (80021f0 <UI_Handler+0x2bc>)
 80020a6:	601a      	str	r2, [r3, #0]
		flags.ui.shortBeep = 0;
 80020a8:	4b4c      	ldr	r3, [pc, #304]	; (80021dc <UI_Handler+0x2a8>)
 80020aa:	7c1a      	ldrb	r2, [r3, #16]
 80020ac:	2101      	movs	r1, #1
 80020ae:	438a      	bics	r2, r1
 80020b0:	741a      	strb	r2, [r3, #16]
	}

	switch(UI_State)
 80020b2:	4b4e      	ldr	r3, [pc, #312]	; (80021ec <UI_Handler+0x2b8>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b05      	cmp	r3, #5
 80020b8:	d900      	bls.n	80020bc <UI_Handler+0x188>
 80020ba:	e07a      	b.n	80021b2 <UI_Handler+0x27e>
 80020bc:	009a      	lsls	r2, r3, #2
 80020be:	4b4d      	ldr	r3, [pc, #308]	; (80021f4 <UI_Handler+0x2c0>)
 80020c0:	18d3      	adds	r3, r2, r3
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	469f      	mov	pc, r3
	{
	case SHORT_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 50)		//0,5s
 80020c6:	4b46      	ldr	r3, [pc, #280]	; (80021e0 <UI_Handler+0x2ac>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	4b49      	ldr	r3, [pc, #292]	; (80021f0 <UI_Handler+0x2bc>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b31      	cmp	r3, #49	; 0x31
 80020d2:	d800      	bhi.n	80020d6 <UI_Handler+0x1a2>
 80020d4:	e075      	b.n	80021c2 <UI_Handler+0x28e>
		{
			UI_State = OFF;
 80020d6:	4b45      	ldr	r3, [pc, #276]	; (80021ec <UI_Handler+0x2b8>)
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	015b      	lsls	r3, r3, #5
 80020e0:	4845      	ldr	r0, [pc, #276]	; (80021f8 <UI_Handler+0x2c4>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	0019      	movs	r1, r3
 80020e6:	f002 f874 	bl	80041d2 <HAL_GPIO_WritePin>
		}
		break;
 80020ea:	e06a      	b.n	80021c2 <UI_Handler+0x28e>

	case LONG_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 100)	//1s
 80020ec:	4b3c      	ldr	r3, [pc, #240]	; (80021e0 <UI_Handler+0x2ac>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b3f      	ldr	r3, [pc, #252]	; (80021f0 <UI_Handler+0x2bc>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b63      	cmp	r3, #99	; 0x63
 80020f8:	d965      	bls.n	80021c6 <UI_Handler+0x292>
		{
			UI_State = OFF;
 80020fa:	4b3c      	ldr	r3, [pc, #240]	; (80021ec <UI_Handler+0x2b8>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	015b      	lsls	r3, r3, #5
 8002104:	483c      	ldr	r0, [pc, #240]	; (80021f8 <UI_Handler+0x2c4>)
 8002106:	2200      	movs	r2, #0
 8002108:	0019      	movs	r1, r3
 800210a:	f002 f862 	bl	80041d2 <HAL_GPIO_WritePin>
		}
		break;
 800210e:	e05a      	b.n	80021c6 <UI_Handler+0x292>

	case ERROR:
		if(!flags.ui.error)	//dokud není požadavek zrušen provádí se error
 8002110:	4b32      	ldr	r3, [pc, #200]	; (80021dc <UI_Handler+0x2a8>)
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	075b      	lsls	r3, r3, #29
 8002116:	0fdb      	lsrs	r3, r3, #31
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <UI_Handler+0x1f0>
			UI_State = OFF;
 800211e:	4b33      	ldr	r3, [pc, #204]	; (80021ec <UI_Handler+0x2b8>)
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))	//každých 0,5s
 8002124:	4b2e      	ldr	r3, [pc, #184]	; (80021e0 <UI_Handler+0x2ac>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b31      	ldr	r3, [pc, #196]	; (80021f0 <UI_Handler+0x2bc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2132      	movs	r1, #50	; 0x32
 8002130:	0018      	movs	r0, r3
 8002132:	f7fe f881 	bl	8000238 <__aeabi_uidivmod>
 8002136:	1e0b      	subs	r3, r1, #0
 8002138:	d147      	bne.n	80021ca <UI_Handler+0x296>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
#endif
			BACKLIGHT_RED_Toggle;
 800213a:	2380      	movs	r3, #128	; 0x80
 800213c:	021a      	lsls	r2, r3, #8
 800213e:	2390      	movs	r3, #144	; 0x90
 8002140:	05db      	lsls	r3, r3, #23
 8002142:	0011      	movs	r1, r2
 8002144:	0018      	movs	r0, r3
 8002146:	f002 f861 	bl	800420c <HAL_GPIO_TogglePin>
		}
		break;
 800214a:	e03e      	b.n	80021ca <UI_Handler+0x296>

	case NOTICE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 35))	//každých 0,35s
 800214c:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <UI_Handler+0x2ac>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <UI_Handler+0x2bc>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2123      	movs	r1, #35	; 0x23
 8002158:	0018      	movs	r0, r3
 800215a:	f7fe f86d 	bl	8000238 <__aeabi_uidivmod>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
#endif
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 209)	//Po 2,1s ukonči
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <UI_Handler+0x2ac>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <UI_Handler+0x2bc>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2bd0      	cmp	r3, #208	; 0xd0
 800216a:	d930      	bls.n	80021ce <UI_Handler+0x29a>
			UI_State = OFF;
 800216c:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <UI_Handler+0x2b8>)
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
		break;
 8002172:	e02c      	b.n	80021ce <UI_Handler+0x29a>

	case DONE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))	//každých 0,5s
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <UI_Handler+0x2ac>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <UI_Handler+0x2bc>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2132      	movs	r1, #50	; 0x32
 8002180:	0018      	movs	r0, r3
 8002182:	f7fe f859 	bl	8000238 <__aeabi_uidivmod>
 8002186:	1e0b      	subs	r3, r1, #0
 8002188:	d106      	bne.n	8002198 <UI_Handler+0x264>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
#endif
			BACKLIGHT_GREEN_Toggle;
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <UI_Handler+0x2c8>)
 8002190:	0019      	movs	r1, r3
 8002192:	0010      	movs	r0, r2
 8002194:	f002 f83a 	bl	800420c <HAL_GPIO_TogglePin>
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 299)	//Po 3s ukonči
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <UI_Handler+0x2ac>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <UI_Handler+0x2bc>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	1ad2      	subs	r2, r2, r3
 80021a2:	2395      	movs	r3, #149	; 0x95
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d913      	bls.n	80021d2 <UI_Handler+0x29e>
			UI_State = OFF;
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <UI_Handler+0x2b8>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
		break;
 80021b0:	e00f      	b.n	80021d2 <UI_Handler+0x29e>

	default:	//Ošetřuje i UI_State == OFF
		BUZZER_OFF;
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	015b      	lsls	r3, r3, #5
 80021b6:	4810      	ldr	r0, [pc, #64]	; (80021f8 <UI_Handler+0x2c4>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	0019      	movs	r1, r3
 80021bc:	f002 f809 	bl	80041d2 <HAL_GPIO_WritePin>
#ifndef __DEBUG_BUTT__
		//setColour(BACKLIGHT_OFF);
#endif
		break;
 80021c0:	e008      	b.n	80021d4 <UI_Handler+0x2a0>
		break;
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	e006      	b.n	80021d4 <UI_Handler+0x2a0>
		break;
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	e004      	b.n	80021d4 <UI_Handler+0x2a0>
		break;
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	e002      	b.n	80021d4 <UI_Handler+0x2a0>
		break;
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	e000      	b.n	80021d4 <UI_Handler+0x2a0>
		break;
 80021d2:	46c0      	nop			; (mov r8, r8)

	}
}
 80021d4:	46c0      	nop			; (mov r8, r8)
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	2000063c 	.word	0x2000063c
 80021e0:	20000240 	.word	0x20000240
 80021e4:	20000254 	.word	0x20000254
 80021e8:	0000176f 	.word	0x0000176f
 80021ec:	20000258 	.word	0x20000258
 80021f0:	2000025c 	.word	0x2000025c
 80021f4:	0800df24 	.word	0x0800df24
 80021f8:	48000800 	.word	0x48000800
 80021fc:	48000400 	.word	0x48000400

08002200 <measHandler>:

//_____Osluha AD převodníků_____//
void measHandler(void)
{
 8002200:	b5b0      	push	{r4, r5, r7, lr}
 8002202:	af00      	add	r7, sp, #0
	static ADC_State_Type ADC_State;

	//___Nulování flagů___//
	flags.meas.measComplete = 0;
 8002204:	4b51      	ldr	r3, [pc, #324]	; (800234c <measHandler+0x14c>)
 8002206:	7d1a      	ldrb	r2, [r3, #20]
 8002208:	2102      	movs	r1, #2
 800220a:	438a      	bics	r2, r1
 800220c:	751a      	strb	r2, [r3, #20]
	flags.meas.measConflict = 0;
 800220e:	4b4f      	ldr	r3, [pc, #316]	; (800234c <measHandler+0x14c>)
 8002210:	7d1a      	ldrb	r2, [r3, #20]
 8002212:	2110      	movs	r1, #16
 8002214:	438a      	bics	r2, r1
 8002216:	751a      	strb	r2, [r3, #20]

	if(flags.meas.measRequest)
 8002218:	4b4c      	ldr	r3, [pc, #304]	; (800234c <measHandler+0x14c>)
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	07db      	lsls	r3, r3, #31
 800221e:	0fdb      	lsrs	r3, r3, #31
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d045      	beq.n	80022b2 <measHandler+0xb2>
	{
		if(!flags.meas.measRunning)
 8002226:	4b49      	ldr	r3, [pc, #292]	; (800234c <measHandler+0x14c>)
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	071b      	lsls	r3, r3, #28
 800222c:	0fdb      	lsrs	r3, r3, #31
 800222e:	b2db      	uxtb	r3, r3
 8002230:	2b00      	cmp	r3, #0
 8002232:	d134      	bne.n	800229e <measHandler+0x9e>
		{
			flags.meas.measRunning = 1;
 8002234:	4b45      	ldr	r3, [pc, #276]	; (800234c <measHandler+0x14c>)
 8002236:	7d1a      	ldrb	r2, [r3, #20]
 8002238:	2108      	movs	r1, #8
 800223a:	430a      	orrs	r2, r1
 800223c:	751a      	strb	r2, [r3, #20]
			if(currentPhase() == BATTERY_TEST || currentPhase() == BATTERY_TEST_DONE)	//probíhá battery test
 800223e:	f000 fc89 	bl	8002b54 <currentPhase>
 8002242:	0003      	movs	r3, r0
 8002244:	2b05      	cmp	r3, #5
 8002246:	d004      	beq.n	8002252 <measHandler+0x52>
 8002248:	f000 fc84 	bl	8002b54 <currentPhase>
 800224c:	0003      	movs	r3, r0
 800224e:	2b06      	cmp	r3, #6
 8002250:	d110      	bne.n	8002274 <measHandler+0x74>
			{
				flags.meas.onlyBattery = 1;
 8002252:	4b3e      	ldr	r3, [pc, #248]	; (800234c <measHandler+0x14c>)
 8002254:	7d1a      	ldrb	r2, [r3, #20]
 8002256:	2120      	movs	r1, #32
 8002258:	430a      	orrs	r2, r1
 800225a:	751a      	strb	r2, [r3, #20]
				ADC_State = U_BAT;
 800225c:	4b3c      	ldr	r3, [pc, #240]	; (8002350 <measHandler+0x150>)
 800225e:	220d      	movs	r2, #13
 8002260:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 8002262:	4b3b      	ldr	r3, [pc, #236]	; (8002350 <measHandler+0x150>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	1e59      	subs	r1, r3, #1
 8002268:	4b3a      	ldr	r3, [pc, #232]	; (8002354 <measHandler+0x154>)
 800226a:	4a3b      	ldr	r2, [pc, #236]	; (8002358 <measHandler+0x158>)
 800226c:	0089      	lsls	r1, r1, #2
 800226e:	588a      	ldr	r2, [r1, r2]
 8002270:	629a      	str	r2, [r3, #40]	; 0x28
 8002272:	e00f      	b.n	8002294 <measHandler+0x94>
			}
			else
			{
				flags.meas.onlyBattery = 0;
 8002274:	4b35      	ldr	r3, [pc, #212]	; (800234c <measHandler+0x14c>)
 8002276:	7d1a      	ldrb	r2, [r3, #20]
 8002278:	2120      	movs	r1, #32
 800227a:	438a      	bics	r2, r1
 800227c:	751a      	strb	r2, [r3, #20]
				ADC_State = U15V;
 800227e:	4b34      	ldr	r3, [pc, #208]	; (8002350 <measHandler+0x150>)
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 8002284:	4b32      	ldr	r3, [pc, #200]	; (8002350 <measHandler+0x150>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	1e59      	subs	r1, r3, #1
 800228a:	4b32      	ldr	r3, [pc, #200]	; (8002354 <measHandler+0x154>)
 800228c:	4a32      	ldr	r2, [pc, #200]	; (8002358 <measHandler+0x158>)
 800228e:	0089      	lsls	r1, r1, #2
 8002290:	588a      	ldr	r2, [r1, r2]
 8002292:	629a      	str	r2, [r3, #40]	; 0x28
			}
			HAL_ADC_Start_IT(&hadc);
 8002294:	4b31      	ldr	r3, [pc, #196]	; (800235c <measHandler+0x15c>)
 8002296:	0018      	movs	r0, r3
 8002298:	f001 f8ca 	bl	8003430 <HAL_ADC_Start_IT>
 800229c:	e004      	b.n	80022a8 <measHandler+0xa8>
		}
		else
		{
			flags.meas.measConflict = 1;
 800229e:	4b2b      	ldr	r3, [pc, #172]	; (800234c <measHandler+0x14c>)
 80022a0:	7d1a      	ldrb	r2, [r3, #20]
 80022a2:	2110      	movs	r1, #16
 80022a4:	430a      	orrs	r2, r1
 80022a6:	751a      	strb	r2, [r3, #20]
		}
		flags.meas.measRequest = 0;
 80022a8:	4b28      	ldr	r3, [pc, #160]	; (800234c <measHandler+0x14c>)
 80022aa:	7d1a      	ldrb	r2, [r3, #20]
 80022ac:	2101      	movs	r1, #1
 80022ae:	438a      	bics	r2, r1
 80022b0:	751a      	strb	r2, [r3, #20]
	}

	if(ADC_State != ADC_WAITING)
 80022b2:	4b27      	ldr	r3, [pc, #156]	; (8002350 <measHandler+0x150>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d045      	beq.n	8002346 <measHandler+0x146>
	{
		if(flags.meas.measDataReady)
 80022ba:	4b24      	ldr	r3, [pc, #144]	; (800234c <measHandler+0x14c>)
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	075b      	lsls	r3, r3, #29
 80022c0:	0fdb      	lsrs	r3, r3, #31
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d03e      	beq.n	8002346 <measHandler+0x146>
		{
			flags.meas.measDataReady = 0;
 80022c8:	4b20      	ldr	r3, [pc, #128]	; (800234c <measHandler+0x14c>)
 80022ca:	7d1a      	ldrb	r2, [r3, #20]
 80022cc:	2104      	movs	r1, #4
 80022ce:	438a      	bics	r2, r1
 80022d0:	751a      	strb	r2, [r3, #20]

			if(ADC_State == U_BAT)	//U_BAT je vždy měřeno jako poslední
 80022d2:	4b1f      	ldr	r3, [pc, #124]	; (8002350 <measHandler+0x150>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b0d      	cmp	r3, #13
 80022d8:	d118      	bne.n	800230c <measHandler+0x10c>
			{
				ADC_Results[ADC_State-1] = HAL_ADC_GetValue(&hadc);
 80022da:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <measHandler+0x150>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	1e5c      	subs	r4, r3, #1
 80022e0:	4b1e      	ldr	r3, [pc, #120]	; (800235c <measHandler+0x15c>)
 80022e2:	0018      	movs	r0, r3
 80022e4:	f001 f960 	bl	80035a8 <HAL_ADC_GetValue>
 80022e8:	0001      	movs	r1, r0
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <measHandler+0x160>)
 80022ec:	00a2      	lsls	r2, r4, #2
 80022ee:	50d1      	str	r1, [r2, r3]
				flags.meas.measComplete = 1;
 80022f0:	4b16      	ldr	r3, [pc, #88]	; (800234c <measHandler+0x14c>)
 80022f2:	7d1a      	ldrb	r2, [r3, #20]
 80022f4:	2102      	movs	r1, #2
 80022f6:	430a      	orrs	r2, r1
 80022f8:	751a      	strb	r2, [r3, #20]
				flags.meas.measRunning = 0;
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <measHandler+0x14c>)
 80022fc:	7d1a      	ldrb	r2, [r3, #20]
 80022fe:	2108      	movs	r1, #8
 8002300:	438a      	bics	r2, r1
 8002302:	751a      	strb	r2, [r3, #20]
				ADC_State = ADC_WAITING;
 8002304:	4b12      	ldr	r3, [pc, #72]	; (8002350 <measHandler+0x150>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]

				HAL_ADC_Start_IT(&hadc);
			}
		}
	}
}
 800230a:	e01c      	b.n	8002346 <measHandler+0x146>
				ADC_Results[ADC_State-1] = HAL_ADC_GetValue(&hadc);
 800230c:	4b10      	ldr	r3, [pc, #64]	; (8002350 <measHandler+0x150>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	1e5c      	subs	r4, r3, #1
 8002312:	4b12      	ldr	r3, [pc, #72]	; (800235c <measHandler+0x15c>)
 8002314:	0018      	movs	r0, r3
 8002316:	f001 f947 	bl	80035a8 <HAL_ADC_GetValue>
 800231a:	0001      	movs	r1, r0
 800231c:	4b10      	ldr	r3, [pc, #64]	; (8002360 <measHandler+0x160>)
 800231e:	00a2      	lsls	r2, r4, #2
 8002320:	50d1      	str	r1, [r2, r3]
				ADC_State += 2;	//Měř další kanál (měření proudů se přeskakuje)
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <measHandler+0x150>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	3302      	adds	r3, #2
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <measHandler+0x150>)
 800232c:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];	//Nastav měřený kanál
 800232e:	4b08      	ldr	r3, [pc, #32]	; (8002350 <measHandler+0x150>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	1e59      	subs	r1, r3, #1
 8002334:	4b07      	ldr	r3, [pc, #28]	; (8002354 <measHandler+0x154>)
 8002336:	4a08      	ldr	r2, [pc, #32]	; (8002358 <measHandler+0x158>)
 8002338:	0089      	lsls	r1, r1, #2
 800233a:	588a      	ldr	r2, [r1, r2]
 800233c:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_ADC_Start_IT(&hadc);
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <measHandler+0x15c>)
 8002340:	0018      	movs	r0, r3
 8002342:	f001 f875 	bl	8003430 <HAL_ADC_Start_IT>
}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	46bd      	mov	sp, r7
 800234a:	bdb0      	pop	{r4, r5, r7, pc}
 800234c:	2000063c 	.word	0x2000063c
 8002350:	20000260 	.word	0x20000260
 8002354:	40012400 	.word	0x40012400
 8002358:	0800dec8 	.word	0x0800dec8
 800235c:	20000658 	.word	0x20000658
 8002360:	20000200 	.word	0x20000200

08002364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002368:	b672      	cpsid	i
}
 800236a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800236c:	e7fe      	b.n	800236c <Error_Handler+0x8>

0800236e <createBuffer>:

//_____Vytvoří buffer v dynamické paměti_____//
//Návratová hodnota - ukazatel na vytvořený buffer (NULL = chyba)
//Argument - velikost bufferu
RING_BUFFER* createBuffer(int size)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
	RING_BUFFER* buffer = (RING_BUFFER*) malloc(sizeof(RING_BUFFER));
 8002376:	2018      	movs	r0, #24
 8002378:	f00b f890 	bl	800d49c <malloc>
 800237c:	0003      	movs	r3, r0
 800237e:	60fb      	str	r3, [r7, #12]
	if(buffer == NULL)			//Nepodařilo se alokovat paměť
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <createBuffer+0x1c>
	{
		return NULL;
 8002386:	2300      	movs	r3, #0
 8002388:	e022      	b.n	80023d0 <createBuffer+0x62>
	}
	buffer->buffer = (char*) malloc(size * sizeof(char));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	0018      	movs	r0, r3
 800238e:	f00b f885 	bl	800d49c <malloc>
 8002392:	0003      	movs	r3, r0
 8002394:	001a      	movs	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	601a      	str	r2, [r3, #0]
	if(buffer->buffer == NULL)	//Nepodařilo se alokovat paměť
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d105      	bne.n	80023ae <createBuffer+0x40>
	{
		free(buffer);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	0018      	movs	r0, r3
 80023a6:	f00b f883 	bl	800d4b0 <free>
		return NULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	e010      	b.n	80023d0 <createBuffer+0x62>
	}

	buffer->bufferSize = size;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	605a      	str	r2, [r3, #4]
	buffer->filled = 0;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
	buffer->first = 0;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	60da      	str	r2, [r3, #12]
	buffer->last = size-1;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	1e5a      	subs	r2, r3, #1
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	611a      	str	r2, [r3, #16]
	buffer->status = BUFFER_EMPTY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2201      	movs	r2, #1
 80023cc:	751a      	strb	r2, [r3, #20]

	return buffer;
 80023ce:	68fb      	ldr	r3, [r7, #12]
}
 80023d0:	0018      	movs	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b004      	add	sp, #16
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <clearBuffer>:
	free(buffer);
}

//_____Uvede buffer do výchzího stavu_____//
void clearBuffer(RING_BUFFER* buffer)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
	buffer->filled = 0;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
	buffer->first = 0;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	60da      	str	r2, [r3, #12]
	buffer->last = buffer->bufferSize-1;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	1e5a      	subs	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	611a      	str	r2, [r3, #16]
	buffer->status = BUFFER_EMPTY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	751a      	strb	r2, [r3, #20]
}
 80023fc:	46c0      	nop			; (mov r8, r8)
 80023fe:	46bd      	mov	sp, r7
 8002400:	b002      	add	sp, #8
 8002402:	bd80      	pop	{r7, pc}

08002404 <push>:
	return buffer->status;
}

//_____Uloží znak do bufferu_____//
BUFFER_STATE push(RING_BUFFER* buffer, char character)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	000a      	movs	r2, r1
 800240e:	1cfb      	adds	r3, r7, #3
 8002410:	701a      	strb	r2, [r3, #0]
	if(buffer->status == BUFFER_FULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	7d1b      	ldrb	r3, [r3, #20]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d101      	bne.n	800241e <push+0x1a>
		return BUFFER_FULL;
 800241a:	2302      	movs	r3, #2
 800241c:	e025      	b.n	800246a <push+0x66>

	buffer->last = (buffer->last + 1) % (buffer->bufferSize);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	0019      	movs	r1, r3
 800242a:	0010      	movs	r0, r2
 800242c:	f7fd ffee 	bl	800040c <__aeabi_idivmod>
 8002430:	000b      	movs	r3, r1
 8002432:	001a      	movs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	611a      	str	r2, [r3, #16]
	buffer->filled++;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	609a      	str	r2, [r3, #8]
	buffer->buffer[buffer->last] = character;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	18d3      	adds	r3, r2, r3
 800244c:	1cfa      	adds	r2, r7, #3
 800244e:	7812      	ldrb	r2, [r2, #0]
 8002450:	701a      	strb	r2, [r3, #0]
	buffer->status = (buffer->filled >= buffer->bufferSize)? BUFFER_FULL : BUFFER_OK;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	429a      	cmp	r2, r3
 800245c:	db01      	blt.n	8002462 <push+0x5e>
 800245e:	2202      	movs	r2, #2
 8002460:	e000      	b.n	8002464 <push+0x60>
 8002462:	2200      	movs	r2, #0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	0018      	movs	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	b002      	add	sp, #8
 8002470:	bd80      	pop	{r7, pc}

08002472 <pushStr>:

//_____Uloží řetězec do bufferu_____//
BUFFER_STATE pushStr(RING_BUFFER* buffer, char* str, int len)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
	if(buffer->bufferSize < (buffer->filled + len))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6899      	ldr	r1, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	18cb      	adds	r3, r1, r3
 800248a:	429a      	cmp	r2, r3
 800248c:	da01      	bge.n	8002492 <pushStr+0x20>
		return BUFFER_FULL;
 800248e:	2302      	movs	r3, #2
 8002490:	e013      	b.n	80024ba <pushStr+0x48>

	for(int i = 0; i < len; i++)
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	e00b      	b.n	80024b0 <pushStr+0x3e>
	{
		push(buffer, str[i]);
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	18d3      	adds	r3, r2, r3
 800249e:	781a      	ldrb	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	0011      	movs	r1, r2
 80024a4:	0018      	movs	r0, r3
 80024a6:	f7ff ffad 	bl	8002404 <push>
	for(int i = 0; i < len; i++)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	3301      	adds	r3, #1
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	dbef      	blt.n	8002498 <pushStr+0x26>
	}

	return BUFFER_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	0018      	movs	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	b006      	add	sp, #24
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <pop>:

//_____Přečte a odstraní poslední znak z bufferu_____//
//Znak bude uložen na adresu v argumentu
BUFFER_STATE pop(RING_BUFFER* buffer, char* character)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	6039      	str	r1, [r7, #0]
	if(buffer->status == BUFFER_EMPTY)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	7d1b      	ldrb	r3, [r3, #20]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <pop+0x16>
		return BUFFER_EMPTY;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e023      	b.n	8002520 <pop+0x5e>

	*character = buffer->buffer[buffer->first];
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	18d3      	adds	r3, r2, r3
 80024e2:	781a      	ldrb	r2, [r3, #0]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	701a      	strb	r2, [r3, #0]
	buffer->first = (buffer->first + 1) % (buffer->bufferSize);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	0019      	movs	r1, r3
 80024f4:	0010      	movs	r0, r2
 80024f6:	f7fd ff89 	bl	800040c <__aeabi_idivmod>
 80024fa:	000b      	movs	r3, r1
 80024fc:	001a      	movs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	60da      	str	r2, [r3, #12]
	buffer->filled--;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	1e5a      	subs	r2, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	609a      	str	r2, [r3, #8]
	buffer->status = (buffer->filled <= 0)? BUFFER_EMPTY : BUFFER_OK;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	1e5a      	subs	r2, r3, #1
 8002512:	4313      	orrs	r3, r2
 8002514:	0fdb      	lsrs	r3, r3, #31
 8002516:	b2db      	uxtb	r3, r3
 8002518:	001a      	movs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	0018      	movs	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	b002      	add	sp, #8
 8002526:	bd80      	pop	{r7, pc}

08002528 <at>:

//_____Přečte a zachová hodnotu na dané pozici od prvního uloženého znaku_____//
BUFFER_STATE at(RING_BUFFER* buffer, int index, char* character)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
	if(buffer->status == BUFFER_EMPTY)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	7d1b      	ldrb	r3, [r3, #20]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <at+0x18>
		return BUFFER_EMPTY;
 800253c:	2301      	movs	r3, #1
 800253e:	e01a      	b.n	8002576 <at+0x4e>

	 if((index + 1) > buffer->filled)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	429a      	cmp	r2, r3
 8002548:	db01      	blt.n	800254e <at+0x26>
		 return BUFFER_ERR;
 800254a:	2303      	movs	r3, #3
 800254c:	e013      	b.n	8002576 <at+0x4e>

	 int tmp = (buffer->first + index) % (buffer->bufferSize);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	18d2      	adds	r2, r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	0019      	movs	r1, r3
 800255c:	0010      	movs	r0, r2
 800255e:	f7fd ff55 	bl	800040c <__aeabi_idivmod>
 8002562:	000b      	movs	r3, r1
 8002564:	617b      	str	r3, [r7, #20]
	 *character = buffer->buffer[tmp];
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	18d3      	adds	r3, r2, r3
 800256e:	781a      	ldrb	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	701a      	strb	r2, [r3, #0]

	 return BUFFER_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	0018      	movs	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	b006      	add	sp, #24
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <getCount>:



//_____Zjistí počet registrů_____//
static uint8_t getCount(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af02      	add	r7, sp, #8
	uint8_t question;
	uint8_t answer;
	regCount = 0;
 8002586:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <getCount+0x7c>)
 8002588:	2200      	movs	r2, #0
 800258a:	701a      	strb	r2, [r3, #0]

	do
	{
		question = 42;
 800258c:	1dfb      	adds	r3, r7, #7
 800258e:	222a      	movs	r2, #42	; 0x2a
 8002590:	701a      	strb	r2, [r3, #0]
		answer = 0;
 8002592:	1dbb      	adds	r3, r7, #6
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
		if(HAL_SPI_TransmitReceive(&hspi1, &question, &answer, 1, 100) != HAL_OK)
 8002598:	1dba      	adds	r2, r7, #6
 800259a:	1df9      	adds	r1, r7, #7
 800259c:	4818      	ldr	r0, [pc, #96]	; (8002600 <getCount+0x80>)
 800259e:	2364      	movs	r3, #100	; 0x64
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	2301      	movs	r3, #1
 80025a4:	f004 fcec 	bl	8006f80 <HAL_SPI_TransmitReceive>
 80025a8:	1e03      	subs	r3, r0, #0
 80025aa:	d001      	beq.n	80025b0 <getCount+0x30>
			return 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	e021      	b.n	80025f4 <getCount+0x74>
		regCount++;
 80025b0:	4b12      	ldr	r3, [pc, #72]	; (80025fc <getCount+0x7c>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	3301      	adds	r3, #1
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	4b10      	ldr	r3, [pc, #64]	; (80025fc <getCount+0x7c>)
 80025ba:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1);
 80025bc:	2001      	movs	r0, #1
 80025be:	f000 fdd3 	bl	8003168 <HAL_Delay>

		if(regCount >= 100)	//Ošetření nepřipojených relé desek
 80025c2:	4b0e      	ldr	r3, [pc, #56]	; (80025fc <getCount+0x7c>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b63      	cmp	r3, #99	; 0x63
 80025c8:	d906      	bls.n	80025d8 <getCount+0x58>
		{
			flags.conErr = 1;
 80025ca:	4b0e      	ldr	r3, [pc, #56]	; (8002604 <getCount+0x84>)
 80025cc:	7e1a      	ldrb	r2, [r3, #24]
 80025ce:	2108      	movs	r1, #8
 80025d0:	430a      	orrs	r2, r1
 80025d2:	761a      	strb	r2, [r3, #24]
			return 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e00d      	b.n	80025f4 <getCount+0x74>
		}
	}
	while(answer != question);
 80025d8:	1dbb      	adds	r3, r7, #6
 80025da:	781a      	ldrb	r2, [r3, #0]
 80025dc:	1dfb      	adds	r3, r7, #7
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d1d3      	bne.n	800258c <getCount+0xc>

	regCount--;
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <getCount+0x7c>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	4b03      	ldr	r3, [pc, #12]	; (80025fc <getCount+0x7c>)
 80025ee:	701a      	strb	r2, [r3, #0]

	return regCount;
 80025f0:	4b02      	ldr	r3, [pc, #8]	; (80025fc <getCount+0x7c>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
}
 80025f4:	0018      	movs	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	b002      	add	sp, #8
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	2000069d 	.word	0x2000069d
 8002600:	20000590 	.word	0x20000590
 8002604:	2000063c 	.word	0x2000063c

08002608 <regInit>:

//_____Inicializuje registry_____//
REG_STATE regInit(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
	//___Clear registrů___//
	REG_CLR_ACTIVE;
 800260e:	2380      	movs	r3, #128	; 0x80
 8002610:	019b      	lsls	r3, r3, #6
 8002612:	4827      	ldr	r0, [pc, #156]	; (80026b0 <regInit+0xa8>)
 8002614:	2200      	movs	r2, #0
 8002616:	0019      	movs	r1, r3
 8002618:	f001 fddb 	bl	80041d2 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800261c:	2005      	movs	r0, #5
 800261e:	f000 fda3 	bl	8003168 <HAL_Delay>
	REG_CLR_INACTIVE;
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	019b      	lsls	r3, r3, #6
 8002626:	4822      	ldr	r0, [pc, #136]	; (80026b0 <regInit+0xa8>)
 8002628:	2201      	movs	r2, #1
 800262a:	0019      	movs	r1, r3
 800262c:	f001 fdd1 	bl	80041d2 <HAL_GPIO_WritePin>

	REG_DISABLE;
 8002630:	2380      	movs	r3, #128	; 0x80
 8002632:	021b      	lsls	r3, r3, #8
 8002634:	481e      	ldr	r0, [pc, #120]	; (80026b0 <regInit+0xa8>)
 8002636:	2201      	movs	r2, #1
 8002638:	0019      	movs	r1, r3
 800263a:	f001 fdca 	bl	80041d2 <HAL_GPIO_WritePin>

		if(getCount() == 0)
 800263e:	f7ff ff9f 	bl	8002580 <getCount>
 8002642:	1e03      	subs	r3, r0, #0
 8002644:	d101      	bne.n	800264a <regInit+0x42>
		{
			return REG_CON_ERR;	//Connection error
 8002646:	2301      	movs	r3, #1
 8002648:	e02e      	b.n	80026a8 <regInit+0xa0>
		}

		regValues = (uint8_t*) malloc(regCount * sizeof(uint8_t));
 800264a:	4b1a      	ldr	r3, [pc, #104]	; (80026b4 <regInit+0xac>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	0018      	movs	r0, r3
 8002650:	f00a ff24 	bl	800d49c <malloc>
 8002654:	0003      	movs	r3, r0
 8002656:	001a      	movs	r2, r3
 8002658:	4b17      	ldr	r3, [pc, #92]	; (80026b8 <regInit+0xb0>)
 800265a:	601a      	str	r2, [r3, #0]
		if(regValues == NULL)
 800265c:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <regInit+0xb0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d104      	bne.n	800266e <regInit+0x66>
		{
			regState = REG_ERR;
 8002664:	4b15      	ldr	r3, [pc, #84]	; (80026bc <regInit+0xb4>)
 8002666:	2202      	movs	r2, #2
 8002668:	701a      	strb	r2, [r3, #0]
			return REG_ERR;
 800266a:	2302      	movs	r3, #2
 800266c:	e01c      	b.n	80026a8 <regInit+0xa0>
		}

		for(int i = 0; i < regCount; i++)
 800266e:	2300      	movs	r3, #0
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	e008      	b.n	8002686 <regInit+0x7e>
		{
			regValues[i] = 0;
 8002674:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <regInit+0xb0>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	18d3      	adds	r3, r2, r3
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < regCount; i++)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3301      	adds	r3, #1
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <regInit+0xac>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	001a      	movs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4293      	cmp	r3, r2
 8002690:	dbf0      	blt.n	8002674 <regInit+0x6c>
		}

		sendData();
 8002692:	f000 f815 	bl	80026c0 <sendData>

	REG_ENABLE;
 8002696:	2380      	movs	r3, #128	; 0x80
 8002698:	021b      	lsls	r3, r3, #8
 800269a:	4805      	ldr	r0, [pc, #20]	; (80026b0 <regInit+0xa8>)
 800269c:	2200      	movs	r2, #0
 800269e:	0019      	movs	r1, r3
 80026a0:	f001 fd97 	bl	80041d2 <HAL_GPIO_WritePin>

	return regState;
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <regInit+0xb4>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
}
 80026a8:	0018      	movs	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b002      	add	sp, #8
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	48000400 	.word	0x48000400
 80026b4:	2000069d 	.word	0x2000069d
 80026b8:	20000698 	.word	0x20000698
 80026bc:	2000069c 	.word	0x2000069c

080026c0 <sendData>:

//_____Pošle data z regValues do registrů_____//
REG_STATE sendData(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
	if(HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)
 80026c4:	4b17      	ldr	r3, [pc, #92]	; (8002724 <sendData+0x64>)
 80026c6:	6819      	ldr	r1, [r3, #0]
 80026c8:	4b17      	ldr	r3, [pc, #92]	; (8002728 <sendData+0x68>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	4817      	ldr	r0, [pc, #92]	; (800272c <sendData+0x6c>)
 80026d0:	2364      	movs	r3, #100	; 0x64
 80026d2:	f004 fafd 	bl	8006cd0 <HAL_SPI_Transmit>
 80026d6:	1e03      	subs	r3, r0, #0
 80026d8:	d114      	bne.n	8002704 <sendData+0x44>
	{
		//vytvoř pulz na RCLK¨
		REG_RCLK_HIGH;
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	01db      	lsls	r3, r3, #7
 80026de:	4814      	ldr	r0, [pc, #80]	; (8002730 <sendData+0x70>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	0019      	movs	r1, r3
 80026e4:	f001 fd75 	bl	80041d2 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80026e8:	2001      	movs	r0, #1
 80026ea:	f000 fd3d 	bl	8003168 <HAL_Delay>
		REG_RCLK_LOW;
 80026ee:	2380      	movs	r3, #128	; 0x80
 80026f0:	01db      	lsls	r3, r3, #7
 80026f2:	480f      	ldr	r0, [pc, #60]	; (8002730 <sendData+0x70>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	0019      	movs	r1, r3
 80026f8:	f001 fd6b 	bl	80041d2 <HAL_GPIO_WritePin>

		regState = REG_OK;
 80026fc:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <sendData+0x74>)
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
 8002702:	e009      	b.n	8002718 <sendData+0x58>
	}
	else
	{
		regState = REG_ERR;
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <sendData+0x74>)
 8002706:	2202      	movs	r2, #2
 8002708:	701a      	strb	r2, [r3, #0]

		REG_DISABLE;	//výstup ve stavu vysoké impedance (zabrání nechtěnému nastavení relé)
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	021b      	lsls	r3, r3, #8
 800270e:	4808      	ldr	r0, [pc, #32]	; (8002730 <sendData+0x70>)
 8002710:	2201      	movs	r2, #1
 8002712:	0019      	movs	r1, r3
 8002714:	f001 fd5d 	bl	80041d2 <HAL_GPIO_WritePin>
	}

	return regState;
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <sendData+0x74>)
 800271a:	781b      	ldrb	r3, [r3, #0]
}
 800271c:	0018      	movs	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	46c0      	nop			; (mov r8, r8)
 8002724:	20000698 	.word	0x20000698
 8002728:	2000069d 	.word	0x2000069d
 800272c:	20000590 	.word	0x20000590
 8002730:	48000400 	.word	0x48000400
 8002734:	2000069c 	.word	0x2000069c

08002738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273e:	4b0f      	ldr	r3, [pc, #60]	; (800277c <HAL_MspInit+0x44>)
 8002740:	699a      	ldr	r2, [r3, #24]
 8002742:	4b0e      	ldr	r3, [pc, #56]	; (800277c <HAL_MspInit+0x44>)
 8002744:	2101      	movs	r1, #1
 8002746:	430a      	orrs	r2, r1
 8002748:	619a      	str	r2, [r3, #24]
 800274a:	4b0c      	ldr	r3, [pc, #48]	; (800277c <HAL_MspInit+0x44>)
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2201      	movs	r2, #1
 8002750:	4013      	ands	r3, r2
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_MspInit+0x44>)
 8002758:	69da      	ldr	r2, [r3, #28]
 800275a:	4b08      	ldr	r3, [pc, #32]	; (800277c <HAL_MspInit+0x44>)
 800275c:	2180      	movs	r1, #128	; 0x80
 800275e:	0549      	lsls	r1, r1, #21
 8002760:	430a      	orrs	r2, r1
 8002762:	61da      	str	r2, [r3, #28]
 8002764:	4b05      	ldr	r3, [pc, #20]	; (800277c <HAL_MspInit+0x44>)
 8002766:	69da      	ldr	r2, [r3, #28]
 8002768:	2380      	movs	r3, #128	; 0x80
 800276a:	055b      	lsls	r3, r3, #21
 800276c:	4013      	ands	r3, r2
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	46bd      	mov	sp, r7
 8002776:	b002      	add	sp, #8
 8002778:	bd80      	pop	{r7, pc}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	40021000 	.word	0x40021000

08002780 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002780:	b590      	push	{r4, r7, lr}
 8002782:	b08d      	sub	sp, #52	; 0x34
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	241c      	movs	r4, #28
 800278a:	193b      	adds	r3, r7, r4
 800278c:	0018      	movs	r0, r3
 800278e:	2314      	movs	r3, #20
 8002790:	001a      	movs	r2, r3
 8002792:	2100      	movs	r1, #0
 8002794:	f00a fe9f 	bl	800d4d6 <memset>
  if(hadc->Instance==ADC1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a3a      	ldr	r2, [pc, #232]	; (8002888 <HAL_ADC_MspInit+0x108>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d16d      	bne.n	800287e <HAL_ADC_MspInit+0xfe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027a2:	4b3a      	ldr	r3, [pc, #232]	; (800288c <HAL_ADC_MspInit+0x10c>)
 80027a4:	699a      	ldr	r2, [r3, #24]
 80027a6:	4b39      	ldr	r3, [pc, #228]	; (800288c <HAL_ADC_MspInit+0x10c>)
 80027a8:	2180      	movs	r1, #128	; 0x80
 80027aa:	0089      	lsls	r1, r1, #2
 80027ac:	430a      	orrs	r2, r1
 80027ae:	619a      	str	r2, [r3, #24]
 80027b0:	4b36      	ldr	r3, [pc, #216]	; (800288c <HAL_ADC_MspInit+0x10c>)
 80027b2:	699a      	ldr	r2, [r3, #24]
 80027b4:	2380      	movs	r3, #128	; 0x80
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
 80027bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027be:	4b33      	ldr	r3, [pc, #204]	; (800288c <HAL_ADC_MspInit+0x10c>)
 80027c0:	695a      	ldr	r2, [r3, #20]
 80027c2:	4b32      	ldr	r3, [pc, #200]	; (800288c <HAL_ADC_MspInit+0x10c>)
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	0309      	lsls	r1, r1, #12
 80027c8:	430a      	orrs	r2, r1
 80027ca:	615a      	str	r2, [r3, #20]
 80027cc:	4b2f      	ldr	r3, [pc, #188]	; (800288c <HAL_ADC_MspInit+0x10c>)
 80027ce:	695a      	ldr	r2, [r3, #20]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	031b      	lsls	r3, r3, #12
 80027d4:	4013      	ands	r3, r2
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027da:	4b2c      	ldr	r3, [pc, #176]	; (800288c <HAL_ADC_MspInit+0x10c>)
 80027dc:	695a      	ldr	r2, [r3, #20]
 80027de:	4b2b      	ldr	r3, [pc, #172]	; (800288c <HAL_ADC_MspInit+0x10c>)
 80027e0:	2180      	movs	r1, #128	; 0x80
 80027e2:	0289      	lsls	r1, r1, #10
 80027e4:	430a      	orrs	r2, r1
 80027e6:	615a      	str	r2, [r3, #20]
 80027e8:	4b28      	ldr	r3, [pc, #160]	; (800288c <HAL_ADC_MspInit+0x10c>)
 80027ea:	695a      	ldr	r2, [r3, #20]
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	029b      	lsls	r3, r3, #10
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f6:	4b25      	ldr	r3, [pc, #148]	; (800288c <HAL_ADC_MspInit+0x10c>)
 80027f8:	695a      	ldr	r2, [r3, #20]
 80027fa:	4b24      	ldr	r3, [pc, #144]	; (800288c <HAL_ADC_MspInit+0x10c>)
 80027fc:	2180      	movs	r1, #128	; 0x80
 80027fe:	02c9      	lsls	r1, r1, #11
 8002800:	430a      	orrs	r2, r1
 8002802:	615a      	str	r2, [r3, #20]
 8002804:	4b21      	ldr	r3, [pc, #132]	; (800288c <HAL_ADC_MspInit+0x10c>)
 8002806:	695a      	ldr	r2, [r3, #20]
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	02db      	lsls	r3, r3, #11
 800280c:	4013      	ands	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002812:	193b      	adds	r3, r7, r4
 8002814:	223f      	movs	r2, #63	; 0x3f
 8002816:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002818:	193b      	adds	r3, r7, r4
 800281a:	2203      	movs	r2, #3
 800281c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	193b      	adds	r3, r7, r4
 8002820:	2200      	movs	r2, #0
 8002822:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002824:	193b      	adds	r3, r7, r4
 8002826:	4a1a      	ldr	r2, [pc, #104]	; (8002890 <HAL_ADC_MspInit+0x110>)
 8002828:	0019      	movs	r1, r3
 800282a:	0010      	movs	r0, r2
 800282c:	f001 fb3c 	bl	8003ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002830:	193b      	adds	r3, r7, r4
 8002832:	22ff      	movs	r2, #255	; 0xff
 8002834:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002836:	193b      	adds	r3, r7, r4
 8002838:	2203      	movs	r2, #3
 800283a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	193b      	adds	r3, r7, r4
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002842:	193a      	adds	r2, r7, r4
 8002844:	2390      	movs	r3, #144	; 0x90
 8002846:	05db      	lsls	r3, r3, #23
 8002848:	0011      	movs	r1, r2
 800284a:	0018      	movs	r0, r3
 800284c:	f001 fb2c 	bl	8003ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002850:	193b      	adds	r3, r7, r4
 8002852:	2203      	movs	r2, #3
 8002854:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002856:	193b      	adds	r3, r7, r4
 8002858:	2203      	movs	r2, #3
 800285a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285c:	193b      	adds	r3, r7, r4
 800285e:	2200      	movs	r2, #0
 8002860:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002862:	193b      	adds	r3, r7, r4
 8002864:	4a0b      	ldr	r2, [pc, #44]	; (8002894 <HAL_ADC_MspInit+0x114>)
 8002866:	0019      	movs	r1, r3
 8002868:	0010      	movs	r0, r2
 800286a:	f001 fb1d 	bl	8003ea8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 800286e:	2200      	movs	r2, #0
 8002870:	2100      	movs	r1, #0
 8002872:	200c      	movs	r0, #12
 8002874:	f001 fa68 	bl	8003d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8002878:	200c      	movs	r0, #12
 800287a:	f001 fa7a 	bl	8003d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	46bd      	mov	sp, r7
 8002882:	b00d      	add	sp, #52	; 0x34
 8002884:	bd90      	pop	{r4, r7, pc}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	40012400 	.word	0x40012400
 800288c:	40021000 	.word	0x40021000
 8002890:	48000800 	.word	0x48000800
 8002894:	48000400 	.word	0x48000400

08002898 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002898:	b590      	push	{r4, r7, lr}
 800289a:	b08b      	sub	sp, #44	; 0x2c
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a0:	2414      	movs	r4, #20
 80028a2:	193b      	adds	r3, r7, r4
 80028a4:	0018      	movs	r0, r3
 80028a6:	2314      	movs	r3, #20
 80028a8:	001a      	movs	r2, r3
 80028aa:	2100      	movs	r1, #0
 80028ac:	f00a fe13 	bl	800d4d6 <memset>
  if(hspi->Instance==SPI1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a1c      	ldr	r2, [pc, #112]	; (8002928 <HAL_SPI_MspInit+0x90>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d131      	bne.n	800291e <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028ba:	4b1c      	ldr	r3, [pc, #112]	; (800292c <HAL_SPI_MspInit+0x94>)
 80028bc:	699a      	ldr	r2, [r3, #24]
 80028be:	4b1b      	ldr	r3, [pc, #108]	; (800292c <HAL_SPI_MspInit+0x94>)
 80028c0:	2180      	movs	r1, #128	; 0x80
 80028c2:	0149      	lsls	r1, r1, #5
 80028c4:	430a      	orrs	r2, r1
 80028c6:	619a      	str	r2, [r3, #24]
 80028c8:	4b18      	ldr	r3, [pc, #96]	; (800292c <HAL_SPI_MspInit+0x94>)
 80028ca:	699a      	ldr	r2, [r3, #24]
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	015b      	lsls	r3, r3, #5
 80028d0:	4013      	ands	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d6:	4b15      	ldr	r3, [pc, #84]	; (800292c <HAL_SPI_MspInit+0x94>)
 80028d8:	695a      	ldr	r2, [r3, #20]
 80028da:	4b14      	ldr	r3, [pc, #80]	; (800292c <HAL_SPI_MspInit+0x94>)
 80028dc:	2180      	movs	r1, #128	; 0x80
 80028de:	02c9      	lsls	r1, r1, #11
 80028e0:	430a      	orrs	r2, r1
 80028e2:	615a      	str	r2, [r3, #20]
 80028e4:	4b11      	ldr	r3, [pc, #68]	; (800292c <HAL_SPI_MspInit+0x94>)
 80028e6:	695a      	ldr	r2, [r3, #20]
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	02db      	lsls	r3, r3, #11
 80028ec:	4013      	ands	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80028f2:	0021      	movs	r1, r4
 80028f4:	187b      	adds	r3, r7, r1
 80028f6:	2238      	movs	r2, #56	; 0x38
 80028f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fa:	187b      	adds	r3, r7, r1
 80028fc:	2202      	movs	r2, #2
 80028fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	187b      	adds	r3, r7, r1
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002906:	187b      	adds	r3, r7, r1
 8002908:	2203      	movs	r2, #3
 800290a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800290c:	187b      	adds	r3, r7, r1
 800290e:	2200      	movs	r2, #0
 8002910:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002912:	187b      	adds	r3, r7, r1
 8002914:	4a06      	ldr	r2, [pc, #24]	; (8002930 <HAL_SPI_MspInit+0x98>)
 8002916:	0019      	movs	r1, r3
 8002918:	0010      	movs	r0, r2
 800291a:	f001 fac5 	bl	8003ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	46bd      	mov	sp, r7
 8002922:	b00b      	add	sp, #44	; 0x2c
 8002924:	bd90      	pop	{r4, r7, pc}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	40013000 	.word	0x40013000
 800292c:	40021000 	.word	0x40021000
 8002930:	48000400 	.word	0x48000400

08002934 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a0e      	ldr	r2, [pc, #56]	; (800297c <HAL_TIM_Base_MspInit+0x48>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d115      	bne.n	8002972 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002946:	4b0e      	ldr	r3, [pc, #56]	; (8002980 <HAL_TIM_Base_MspInit+0x4c>)
 8002948:	69da      	ldr	r2, [r3, #28]
 800294a:	4b0d      	ldr	r3, [pc, #52]	; (8002980 <HAL_TIM_Base_MspInit+0x4c>)
 800294c:	2180      	movs	r1, #128	; 0x80
 800294e:	0049      	lsls	r1, r1, #1
 8002950:	430a      	orrs	r2, r1
 8002952:	61da      	str	r2, [r3, #28]
 8002954:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <HAL_TIM_Base_MspInit+0x4c>)
 8002956:	69da      	ldr	r2, [r3, #28]
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4013      	ands	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002962:	2200      	movs	r2, #0
 8002964:	2100      	movs	r1, #0
 8002966:	2013      	movs	r0, #19
 8002968:	f001 f9ee 	bl	8003d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800296c:	2013      	movs	r0, #19
 800296e:	f001 fa00 	bl	8003d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	46bd      	mov	sp, r7
 8002976:	b004      	add	sp, #16
 8002978:	bd80      	pop	{r7, pc}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	40002000 	.word	0x40002000
 8002980:	40021000 	.word	0x40021000

08002984 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002984:	b590      	push	{r4, r7, lr}
 8002986:	b08b      	sub	sp, #44	; 0x2c
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	2414      	movs	r4, #20
 800298e:	193b      	adds	r3, r7, r4
 8002990:	0018      	movs	r0, r3
 8002992:	2314      	movs	r3, #20
 8002994:	001a      	movs	r2, r3
 8002996:	2100      	movs	r1, #0
 8002998:	f00a fd9d 	bl	800d4d6 <memset>
  if(huart->Instance==USART3)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a20      	ldr	r2, [pc, #128]	; (8002a24 <HAL_UART_MspInit+0xa0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d13a      	bne.n	8002a1c <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80029a6:	4b20      	ldr	r3, [pc, #128]	; (8002a28 <HAL_UART_MspInit+0xa4>)
 80029a8:	69da      	ldr	r2, [r3, #28]
 80029aa:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <HAL_UART_MspInit+0xa4>)
 80029ac:	2180      	movs	r1, #128	; 0x80
 80029ae:	02c9      	lsls	r1, r1, #11
 80029b0:	430a      	orrs	r2, r1
 80029b2:	61da      	str	r2, [r3, #28]
 80029b4:	4b1c      	ldr	r3, [pc, #112]	; (8002a28 <HAL_UART_MspInit+0xa4>)
 80029b6:	69da      	ldr	r2, [r3, #28]
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	02db      	lsls	r3, r3, #11
 80029bc:	4013      	ands	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029c2:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <HAL_UART_MspInit+0xa4>)
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	4b18      	ldr	r3, [pc, #96]	; (8002a28 <HAL_UART_MspInit+0xa4>)
 80029c8:	2180      	movs	r1, #128	; 0x80
 80029ca:	0309      	lsls	r1, r1, #12
 80029cc:	430a      	orrs	r2, r1
 80029ce:	615a      	str	r2, [r3, #20]
 80029d0:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <HAL_UART_MspInit+0xa4>)
 80029d2:	695a      	ldr	r2, [r3, #20]
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	031b      	lsls	r3, r3, #12
 80029d8:	4013      	ands	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80029de:	193b      	adds	r3, r7, r4
 80029e0:	22c0      	movs	r2, #192	; 0xc0
 80029e2:	0112      	lsls	r2, r2, #4
 80029e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e6:	0021      	movs	r1, r4
 80029e8:	187b      	adds	r3, r7, r1
 80029ea:	2202      	movs	r2, #2
 80029ec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ee:	187b      	adds	r3, r7, r1
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029f4:	187b      	adds	r3, r7, r1
 80029f6:	2203      	movs	r2, #3
 80029f8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 80029fa:	187b      	adds	r3, r7, r1
 80029fc:	2201      	movs	r2, #1
 80029fe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a00:	187b      	adds	r3, r7, r1
 8002a02:	4a0a      	ldr	r2, [pc, #40]	; (8002a2c <HAL_UART_MspInit+0xa8>)
 8002a04:	0019      	movs	r1, r3
 8002a06:	0010      	movs	r0, r2
 8002a08:	f001 fa4e 	bl	8003ea8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2100      	movs	r1, #0
 8002a10:	201d      	movs	r0, #29
 8002a12:	f001 f999 	bl	8003d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8002a16:	201d      	movs	r0, #29
 8002a18:	f001 f9ab 	bl	8003d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a1c:	46c0      	nop			; (mov r8, r8)
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b00b      	add	sp, #44	; 0x2c
 8002a22:	bd90      	pop	{r4, r7, pc}
 8002a24:	40004800 	.word	0x40004800
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	48000800 	.word	0x48000800

08002a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a34:	e7fe      	b.n	8002a34 <NMI_Handler+0x4>

08002a36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a3a:	e7fe      	b.n	8002a3a <HardFault_Handler+0x4>

08002a3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002a40:	46c0      	nop			; (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a54:	f000 fb6c 	bl	8003130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a58:	46c0      	nop			; (mov r8, r8)
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	0018      	movs	r0, r3
 8002a68:	f001 fbec 	bl	8004244 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002a6c:	2380      	movs	r3, #128	; 0x80
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	0018      	movs	r0, r3
 8002a72:	f001 fbe7 	bl	8004244 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002a80:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <ADC1_COMP_IRQHandler+0x14>)
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 fd9c 	bl	80035c0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	20000658 	.word	0x20000658

08002a94 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <TIM14_IRQHandler+0x14>)
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f004 feb2 	bl	8007804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002aa0:	46c0      	nop			; (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	200005f4 	.word	0x200005f4

08002aac <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <USART3_4_IRQHandler+0x14>)
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f005 fb14 	bl	80080e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	2000050c 	.word	0x2000050c

08002ac4 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002ac8:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <USB_IRQHandler+0x14>)
 8002aca:	0018      	movs	r0, r3
 8002acc:	f001 fd0c 	bl	80044e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002ad0:	46c0      	nop			; (mov r8, r8)
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	20001344 	.word	0x20001344

08002adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ae4:	4a14      	ldr	r2, [pc, #80]	; (8002b38 <_sbrk+0x5c>)
 8002ae6:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <_sbrk+0x60>)
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002af0:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <_sbrk+0x64>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d102      	bne.n	8002afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002af8:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <_sbrk+0x64>)
 8002afa:	4a12      	ldr	r2, [pc, #72]	; (8002b44 <_sbrk+0x68>)
 8002afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <_sbrk+0x64>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	18d3      	adds	r3, r2, r3
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d207      	bcs.n	8002b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b0c:	f00a fc9c 	bl	800d448 <__errno>
 8002b10:	0003      	movs	r3, r0
 8002b12:	220c      	movs	r2, #12
 8002b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b16:	2301      	movs	r3, #1
 8002b18:	425b      	negs	r3, r3
 8002b1a:	e009      	b.n	8002b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b1c:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <_sbrk+0x64>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b22:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <_sbrk+0x64>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	18d2      	adds	r2, r2, r3
 8002b2a:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <_sbrk+0x64>)
 8002b2c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
}
 8002b30:	0018      	movs	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b006      	add	sp, #24
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20004000 	.word	0x20004000
 8002b3c:	00000400 	.word	0x00000400
 8002b40:	20000264 	.word	0x20000264
 8002b44:	20001648 	.word	0x20001648

08002b48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002b4c:	46c0      	nop			; (mov r8, r8)
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <currentPhase>:
static void startTest();
static void stopTest();

//_____Dotaz na aktuální fázi testu_____//
TEST_PHASE currentPhase()
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
	return testPhase;
 8002b58:	4b02      	ldr	r3, [pc, #8]	; (8002b64 <currentPhase+0x10>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
}
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	20000268 	.word	0x20000268

08002b68 <testHandler>:

//_____Funkce pro řízení testu_____//
void testHandler()
{
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b08b      	sub	sp, #44	; 0x2c
 8002b6c:	af00      	add	r7, sp, #0
	flags.testProgress = 0;
 8002b6e:	4bd9      	ldr	r3, [pc, #868]	; (8002ed4 <testHandler+0x36c>)
 8002b70:	7e1a      	ldrb	r2, [r3, #24]
 8002b72:	2102      	movs	r1, #2
 8002b74:	438a      	bics	r2, r1
 8002b76:	761a      	strb	r2, [r3, #24]
	flags.testCanceled = 0;
 8002b78:	4bd6      	ldr	r3, [pc, #856]	; (8002ed4 <testHandler+0x36c>)
 8002b7a:	7e1a      	ldrb	r2, [r3, #24]
 8002b7c:	2104      	movs	r1, #4
 8002b7e:	438a      	bics	r2, r1
 8002b80:	761a      	strb	r2, [r3, #24]

	if(flags.instructions.startRequest)
 8002b82:	4bd4      	ldr	r3, [pc, #848]	; (8002ed4 <testHandler+0x36c>)
 8002b84:	7b1b      	ldrb	r3, [r3, #12]
 8002b86:	2201      	movs	r2, #1
 8002b88:	4013      	ands	r3, r2
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d032      	beq.n	8002bf6 <testHandler+0x8e>
	{
		if(testPhase == WAITING)
 8002b90:	4bd1      	ldr	r3, [pc, #836]	; (8002ed8 <testHandler+0x370>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d124      	bne.n	8002be2 <testHandler+0x7a>
		{
			if(flags.conErr)
 8002b98:	4bce      	ldr	r3, [pc, #824]	; (8002ed4 <testHandler+0x36c>)
 8002b9a:	7e1b      	ldrb	r3, [r3, #24]
 8002b9c:	2208      	movs	r2, #8
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d01a      	beq.n	8002bdc <testHandler+0x74>
			{
				char txt[] = {"Relay PCB connection error\n"};
 8002ba6:	1d3b      	adds	r3, r7, #4
 8002ba8:	4acc      	ldr	r2, [pc, #816]	; (8002edc <testHandler+0x374>)
 8002baa:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002bac:	c313      	stmia	r3!, {r0, r1, r4}
 8002bae:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002bb0:	c313      	stmia	r3!, {r0, r1, r4}
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	601a      	str	r2, [r3, #0]
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8002bb6:	4bca      	ldr	r3, [pc, #808]	; (8002ee0 <testHandler+0x378>)
 8002bb8:	681c      	ldr	r4, [r3, #0]
 8002bba:	1d3b      	adds	r3, r7, #4
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f7fd faa3 	bl	8000108 <strlen>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	001a      	movs	r2, r3
 8002bc6:	1d3b      	adds	r3, r7, #4
 8002bc8:	0019      	movs	r1, r3
 8002bca:	0020      	movs	r0, r4
 8002bcc:	f7ff fc51 	bl	8002472 <pushStr>
				flags.instructions.startRequest = 0;
 8002bd0:	4bc0      	ldr	r3, [pc, #768]	; (8002ed4 <testHandler+0x36c>)
 8002bd2:	7b1a      	ldrb	r2, [r3, #12]
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	438a      	bics	r2, r1
 8002bd8:	731a      	strb	r2, [r3, #12]
 8002bda:	e00c      	b.n	8002bf6 <testHandler+0x8e>
			}
			else
			{
				startTest();
 8002bdc:	f000 f990 	bl	8002f00 <startTest>
 8002be0:	e009      	b.n	8002bf6 <testHandler+0x8e>
			}
		}
		else
		{
			flags.startConflict = 1;
 8002be2:	4bbc      	ldr	r3, [pc, #752]	; (8002ed4 <testHandler+0x36c>)
 8002be4:	7e1a      	ldrb	r2, [r3, #24]
 8002be6:	2101      	movs	r1, #1
 8002be8:	430a      	orrs	r2, r1
 8002bea:	761a      	strb	r2, [r3, #24]
			flags.instructions.startRequest = 0;
 8002bec:	4bb9      	ldr	r3, [pc, #740]	; (8002ed4 <testHandler+0x36c>)
 8002bee:	7b1a      	ldrb	r2, [r3, #12]
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	438a      	bics	r2, r1
 8002bf4:	731a      	strb	r2, [r3, #12]
		}
	}
	if(flags.instructions.stopRequest)
 8002bf6:	4bb7      	ldr	r3, [pc, #732]	; (8002ed4 <testHandler+0x36c>)
 8002bf8:	7b1b      	ldrb	r3, [r3, #12]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <testHandler+0xa0>
	{
		stopTest();
 8002c04:	f000 f9ec 	bl	8002fe0 <stopTest>
	}

	if(testPhase != WAITING)
 8002c08:	4bb3      	ldr	r3, [pc, #716]	; (8002ed8 <testHandler+0x370>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00d      	beq.n	8002c2c <testHandler+0xc4>
	{
		if(flags.buttons.butt0_ver)
 8002c10:	4bb0      	ldr	r3, [pc, #704]	; (8002ed4 <testHandler+0x36c>)
 8002c12:	791b      	ldrb	r3, [r3, #4]
 8002c14:	2202      	movs	r2, #2
 8002c16:	4013      	ands	r3, r2
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d006      	beq.n	8002c2c <testHandler+0xc4>
		{
			stopTest();
 8002c1e:	f000 f9df 	bl	8002fe0 <stopTest>
			flags.testCanceled = 1;
 8002c22:	4bac      	ldr	r3, [pc, #688]	; (8002ed4 <testHandler+0x36c>)
 8002c24:	7e1a      	ldrb	r2, [r3, #24]
 8002c26:	2104      	movs	r1, #4
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	761a      	strb	r2, [r3, #24]
		}
	}

	switch(testPhase)
 8002c2c:	4baa      	ldr	r3, [pc, #680]	; (8002ed8 <testHandler+0x370>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b06      	cmp	r3, #6
 8002c32:	d900      	bls.n	8002c36 <testHandler+0xce>
 8002c34:	e15f      	b.n	8002ef6 <testHandler+0x38e>
 8002c36:	009a      	lsls	r2, r3, #2
 8002c38:	4baa      	ldr	r3, [pc, #680]	; (8002ee4 <testHandler+0x37c>)
 8002c3a:	18d3      	adds	r3, r2, r3
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	469f      	mov	pc, r3
	{
	case WAITING:
		flags.testProgress = 0;
 8002c40:	4ba4      	ldr	r3, [pc, #656]	; (8002ed4 <testHandler+0x36c>)
 8002c42:	7e1a      	ldrb	r2, [r3, #24]
 8002c44:	2102      	movs	r1, #2
 8002c46:	438a      	bics	r2, r1
 8002c48:	761a      	strb	r2, [r3, #24]
		//flags.meas.measRequest = 0;
		break;
 8002c4a:	e154      	b.n	8002ef6 <testHandler+0x38e>
	case START:

		//___Pokud je dokončeno měření napětí naprázdno...____//
		if(flags.meas.measComplete)
 8002c4c:	4ba1      	ldr	r3, [pc, #644]	; (8002ed4 <testHandler+0x36c>)
 8002c4e:	7d1b      	ldrb	r3, [r3, #20]
 8002c50:	2202      	movs	r2, #2
 8002c52:	4013      	ands	r3, r2
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d006      	beq.n	8002c68 <testHandler+0x100>
		{
			testPhase++;
 8002c5a:	4b9f      	ldr	r3, [pc, #636]	; (8002ed8 <testHandler+0x370>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	4b9d      	ldr	r3, [pc, #628]	; (8002ed8 <testHandler+0x370>)
 8002c64:	701a      	strb	r2, [r3, #0]
		}
		else if(sysTime[SYSTIME_SEC] == 1)	//Pauza pro ustálení po sepnutí relé
		{
			flags.meas.measRequest = 1;
		}
		break;
 8002c66:	e12d      	b.n	8002ec4 <testHandler+0x35c>
		else if(sysTime[SYSTIME_SEC] == 1)	//Pauza pro ustálení po sepnutí relé
 8002c68:	4b9f      	ldr	r3, [pc, #636]	; (8002ee8 <testHandler+0x380>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d000      	beq.n	8002c72 <testHandler+0x10a>
 8002c70:	e128      	b.n	8002ec4 <testHandler+0x35c>
			flags.meas.measRequest = 1;
 8002c72:	4b98      	ldr	r3, [pc, #608]	; (8002ed4 <testHandler+0x36c>)
 8002c74:	7d1a      	ldrb	r2, [r3, #20]
 8002c76:	2101      	movs	r1, #1
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	751a      	strb	r2, [r3, #20]
		break;
 8002c7c:	e122      	b.n	8002ec4 <testHandler+0x35c>
	case START_DONE:
		//___Připojení zátěže___//
		LOAD_MIN_ON;
 8002c7e:	4b9b      	ldr	r3, [pc, #620]	; (8002eec <testHandler+0x384>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	2180      	movs	r1, #128	; 0x80
 8002c84:	0018      	movs	r0, r3
 8002c86:	f001 faa4 	bl	80041d2 <HAL_GPIO_WritePin>
		LOAD_MAX_ON;
 8002c8a:	4b98      	ldr	r3, [pc, #608]	; (8002eec <testHandler+0x384>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	2140      	movs	r1, #64	; 0x40
 8002c90:	0018      	movs	r0, r3
 8002c92:	f001 fa9e 	bl	80041d2 <HAL_GPIO_WritePin>

		testPhase++;
 8002c96:	4b90      	ldr	r3, [pc, #576]	; (8002ed8 <testHandler+0x370>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	4b8e      	ldr	r3, [pc, #568]	; (8002ed8 <testHandler+0x370>)
 8002ca0:	701a      	strb	r2, [r3, #0]
		flags.testProgress = 1;
 8002ca2:	4b8c      	ldr	r3, [pc, #560]	; (8002ed4 <testHandler+0x36c>)
 8002ca4:	7e1a      	ldrb	r2, [r3, #24]
 8002ca6:	2102      	movs	r1, #2
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	761a      	strb	r2, [r3, #24]
		//flags.ui.shortBeep = 1;

		PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//blikání druhé progress led
 8002cac:	4b90      	ldr	r3, [pc, #576]	; (8002ef0 <testHandler+0x388>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	781a      	ldrb	r2, [r3, #0]
 8002cb2:	4b8f      	ldr	r3, [pc, #572]	; (8002ef0 <testHandler+0x388>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2120      	movs	r1, #32
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]
		sendData();
 8002cbe:	f7ff fcff 	bl	80026c0 <sendData>

		//___Nulování času___//
		for(int i = 1; i < 4; i++)
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc6:	e007      	b.n	8002cd8 <testHandler+0x170>
		{
			sysTime[i] = 0;
 8002cc8:	4b87      	ldr	r3, [pc, #540]	; (8002ee8 <testHandler+0x380>)
 8002cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ccc:	0092      	lsls	r2, r2, #2
 8002cce:	2100      	movs	r1, #0
 8002cd0:	50d1      	str	r1, [r2, r3]
		for(int i = 1; i < 4; i++)
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	ddf4      	ble.n	8002cc8 <testHandler+0x160>
		}
		break;
 8002cde:	e10a      	b.n	8002ef6 <testHandler+0x38e>
	case MAIN_TEST:
		if(flags.time.sec)	//___Změna času___//
 8002ce0:	4b7c      	ldr	r3, [pc, #496]	; (8002ed4 <testHandler+0x36c>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <testHandler+0x19c>
		{
			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED2);	//blikání druhé progress led
 8002cee:	4b80      	ldr	r3, [pc, #512]	; (8002ef0 <testHandler+0x388>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	781a      	ldrb	r2, [r3, #0]
 8002cf4:	4b7e      	ldr	r3, [pc, #504]	; (8002ef0 <testHandler+0x388>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2110      	movs	r1, #16
 8002cfa:	404a      	eors	r2, r1
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	701a      	strb	r2, [r3, #0]
			sendData();
 8002d00:	f7ff fcde 	bl	80026c0 <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
#else
		if(!(sysTime[SYSTIME_MIN] % 10) && !(sysTime[SYSTIME_MIN] == 0 && sysTime[SYSTIME_HOUR] == 0) && flags.time.min)	//___Měření napětí každých deset minut___//
 8002d04:	4b78      	ldr	r3, [pc, #480]	; (8002ee8 <testHandler+0x380>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	210a      	movs	r1, #10
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f7fd fb7e 	bl	800040c <__aeabi_idivmod>
 8002d10:	1e0b      	subs	r3, r1, #0
 8002d12:	d113      	bne.n	8002d3c <testHandler+0x1d4>
 8002d14:	4b74      	ldr	r3, [pc, #464]	; (8002ee8 <testHandler+0x380>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d103      	bne.n	8002d24 <testHandler+0x1bc>
 8002d1c:	4b72      	ldr	r3, [pc, #456]	; (8002ee8 <testHandler+0x380>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00b      	beq.n	8002d3c <testHandler+0x1d4>
 8002d24:	4b6b      	ldr	r3, [pc, #428]	; (8002ed4 <testHandler+0x36c>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2204      	movs	r2, #4
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d004      	beq.n	8002d3c <testHandler+0x1d4>
#endif
		{
			flags.meas.measRequest = 1;
 8002d32:	4b68      	ldr	r3, [pc, #416]	; (8002ed4 <testHandler+0x36c>)
 8002d34:	7d1a      	ldrb	r2, [r3, #20]
 8002d36:	2101      	movs	r1, #1
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 10)	//___Po deseti minutách je měření u konce___//
#else
		if(sysTime[SYSTIME_HOUR] >= 3)	//___Po třech hodinách je měření u konce___//
 8002d3c:	4b6a      	ldr	r3, [pc, #424]	; (8002ee8 <testHandler+0x380>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	dc00      	bgt.n	8002d46 <testHandler+0x1de>
 8002d44:	e0c0      	b.n	8002ec8 <testHandler+0x360>
#endif
		{
			testPhase++;
 8002d46:	4b64      	ldr	r3, [pc, #400]	; (8002ed8 <testHandler+0x370>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	4b62      	ldr	r3, [pc, #392]	; (8002ed8 <testHandler+0x370>)
 8002d50:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002d52:	e0b9      	b.n	8002ec8 <testHandler+0x360>
	case MAIN_TEST_DONE:
		if(!flags.meas.measRunning)
 8002d54:	4b5f      	ldr	r3, [pc, #380]	; (8002ed4 <testHandler+0x36c>)
 8002d56:	7d1b      	ldrb	r3, [r3, #20]
 8002d58:	2208      	movs	r2, #8
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d000      	beq.n	8002d64 <testHandler+0x1fc>
 8002d62:	e0b3      	b.n	8002ecc <testHandler+0x364>
		{
			flags.ui.notice = 1;
 8002d64:	4b5b      	ldr	r3, [pc, #364]	; (8002ed4 <testHandler+0x36c>)
 8002d66:	7c1a      	ldrb	r2, [r3, #16]
 8002d68:	2108      	movs	r1, #8
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8002d6e:	4b59      	ldr	r3, [pc, #356]	; (8002ed4 <testHandler+0x36c>)
 8002d70:	7e1a      	ldrb	r2, [r3, #24]
 8002d72:	2102      	movs	r1, #2
 8002d74:	430a      	orrs	r2, r1
 8002d76:	761a      	strb	r2, [r3, #24]

			testPhase++;
 8002d78:	4b57      	ldr	r3, [pc, #348]	; (8002ed8 <testHandler+0x370>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	4b55      	ldr	r3, [pc, #340]	; (8002ed8 <testHandler+0x370>)
 8002d82:	701a      	strb	r2, [r3, #0]

			LOAD_MIN_OFF;
 8002d84:	4b59      	ldr	r3, [pc, #356]	; (8002eec <testHandler+0x384>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	2180      	movs	r1, #128	; 0x80
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	f001 fa21 	bl	80041d2 <HAL_GPIO_WritePin>
			LOAD_MAX_OFF;
 8002d90:	4b56      	ldr	r3, [pc, #344]	; (8002eec <testHandler+0x384>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	2140      	movs	r1, #64	; 0x40
 8002d96:	0018      	movs	r0, r3
 8002d98:	f001 fa1b 	bl	80041d2 <HAL_GPIO_WritePin>

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED2);
 8002d9c:	4b54      	ldr	r3, [pc, #336]	; (8002ef0 <testHandler+0x388>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	4b53      	ldr	r3, [pc, #332]	; (8002ef0 <testHandler+0x388>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2110      	movs	r1, #16
 8002da8:	430a      	orrs	r2, r1
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	701a      	strb	r2, [r3, #0]
			PWR_OFF(*sourceInTesting);
 8002dae:	4b50      	ldr	r3, [pc, #320]	; (8002ef0 <testHandler+0x388>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	781a      	ldrb	r2, [r3, #0]
 8002db4:	4b4e      	ldr	r3, [pc, #312]	; (8002ef0 <testHandler+0x388>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2101      	movs	r1, #1
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	701a      	strb	r2, [r3, #0]
			sendData();
 8002dc0:	f7ff fc7e 	bl	80026c0 <sendData>

			//___Nulování času___//
			for(int i = 1; i < 4; i++)
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	623b      	str	r3, [r7, #32]
 8002dc8:	e007      	b.n	8002dda <testHandler+0x272>
			{
				sysTime[i] = 0;
 8002dca:	4b47      	ldr	r3, [pc, #284]	; (8002ee8 <testHandler+0x380>)
 8002dcc:	6a3a      	ldr	r2, [r7, #32]
 8002dce:	0092      	lsls	r2, r2, #2
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	50d1      	str	r1, [r2, r3]
			for(int i = 1; i < 4; i++)
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	623b      	str	r3, [r7, #32]
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	ddf4      	ble.n	8002dca <testHandler+0x262>
			}
		}
		break;
 8002de0:	e074      	b.n	8002ecc <testHandler+0x364>
	case BATTERY_TEST:
		if(flags.time.sec)	//___Změna času___//
 8002de2:	4b3c      	ldr	r3, [pc, #240]	; (8002ed4 <testHandler+0x36c>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2202      	movs	r2, #2
 8002de8:	4013      	ands	r3, r2
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00a      	beq.n	8002e06 <testHandler+0x29e>
		{
			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED3);	//blikání třetí progress led
 8002df0:	4b3f      	ldr	r3, [pc, #252]	; (8002ef0 <testHandler+0x388>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	781a      	ldrb	r2, [r3, #0]
 8002df6:	4b3e      	ldr	r3, [pc, #248]	; (8002ef0 <testHandler+0x388>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2108      	movs	r1, #8
 8002dfc:	404a      	eors	r2, r1
 8002dfe:	b2d2      	uxtb	r2, r2
 8002e00:	701a      	strb	r2, [r3, #0]
			sendData();
 8002e02:	f7ff fc5d 	bl	80026c0 <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
#else
		if(!(sysTime[SYSTIME_MIN] % 5) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých pět minut___//
 8002e06:	4b38      	ldr	r3, [pc, #224]	; (8002ee8 <testHandler+0x380>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	2105      	movs	r1, #5
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f7fd fafd 	bl	800040c <__aeabi_idivmod>
 8002e12:	1e0b      	subs	r3, r1, #0
 8002e14:	d114      	bne.n	8002e40 <testHandler+0x2d8>
 8002e16:	4b34      	ldr	r3, [pc, #208]	; (8002ee8 <testHandler+0x380>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d010      	beq.n	8002e40 <testHandler+0x2d8>
 8002e1e:	4b2d      	ldr	r3, [pc, #180]	; (8002ed4 <testHandler+0x36c>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2204      	movs	r2, #4
 8002e24:	4013      	ands	r3, r2
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d009      	beq.n	8002e40 <testHandler+0x2d8>
#endif
		{
			flags.meas.onlyBattery = 1;
 8002e2c:	4b29      	ldr	r3, [pc, #164]	; (8002ed4 <testHandler+0x36c>)
 8002e2e:	7d1a      	ldrb	r2, [r3, #20]
 8002e30:	2120      	movs	r1, #32
 8002e32:	430a      	orrs	r2, r1
 8002e34:	751a      	strb	r2, [r3, #20]
			flags.meas.measRequest = 1;
 8002e36:	4b27      	ldr	r3, [pc, #156]	; (8002ed4 <testHandler+0x36c>)
 8002e38:	7d1a      	ldrb	r2, [r3, #20]
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 3)	//___Po třech minutách je měření u konce___//
#else
		if(sysTime[SYSTIME_MIN] >= 15)	//___Po patnácti minutách je měření u konce___//
 8002e40:	4b29      	ldr	r3, [pc, #164]	; (8002ee8 <testHandler+0x380>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b0e      	cmp	r3, #14
 8002e46:	dd43      	ble.n	8002ed0 <testHandler+0x368>
#endif
		{
			testPhase++;
 8002e48:	4b23      	ldr	r3, [pc, #140]	; (8002ed8 <testHandler+0x370>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	4b21      	ldr	r3, [pc, #132]	; (8002ed8 <testHandler+0x370>)
 8002e52:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002e54:	e03c      	b.n	8002ed0 <testHandler+0x368>
	case BATTERY_TEST_DONE:
		if(!flags.meas.measRunning)
 8002e56:	4b1f      	ldr	r3, [pc, #124]	; (8002ed4 <testHandler+0x36c>)
 8002e58:	7d1b      	ldrb	r3, [r3, #20]
 8002e5a:	2208      	movs	r2, #8
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d147      	bne.n	8002ef4 <testHandler+0x38c>
		{
			flags.ui.done = 1;
 8002e64:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <testHandler+0x36c>)
 8002e66:	7c1a      	ldrb	r2, [r3, #16]
 8002e68:	2110      	movs	r1, #16
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8002e6e:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <testHandler+0x36c>)
 8002e70:	7e1a      	ldrb	r2, [r3, #24]
 8002e72:	2102      	movs	r1, #2
 8002e74:	430a      	orrs	r2, r1
 8002e76:	761a      	strb	r2, [r3, #24]

			//Zobrazit text na displej

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED3);
 8002e78:	4b1d      	ldr	r3, [pc, #116]	; (8002ef0 <testHandler+0x388>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	781a      	ldrb	r2, [r3, #0]
 8002e7e:	4b1c      	ldr	r3, [pc, #112]	; (8002ef0 <testHandler+0x388>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2108      	movs	r1, #8
 8002e84:	430a      	orrs	r2, r1
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	701a      	strb	r2, [r3, #0]
			RELAY_OFF(*sourceInTesting);
 8002e8a:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <testHandler+0x388>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	781a      	ldrb	r2, [r3, #0]
 8002e90:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <testHandler+0x388>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2102      	movs	r1, #2
 8002e96:	438a      	bics	r2, r1
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	701a      	strb	r2, [r3, #0]
			PWR_ON(*sourceInTesting);
 8002e9c:	4b14      	ldr	r3, [pc, #80]	; (8002ef0 <testHandler+0x388>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	781a      	ldrb	r2, [r3, #0]
 8002ea2:	4b13      	ldr	r3, [pc, #76]	; (8002ef0 <testHandler+0x388>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	438a      	bics	r2, r1
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	701a      	strb	r2, [r3, #0]
			sendData();
 8002eae:	f7ff fc07 	bl	80026c0 <sendData>

			flags.meas.onlyBattery = 0;
 8002eb2:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <testHandler+0x36c>)
 8002eb4:	7d1a      	ldrb	r2, [r3, #20]
 8002eb6:	2120      	movs	r1, #32
 8002eb8:	438a      	bics	r2, r1
 8002eba:	751a      	strb	r2, [r3, #20]

			testPhase = WAITING;
 8002ebc:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <testHandler+0x370>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002ec2:	e017      	b.n	8002ef4 <testHandler+0x38c>
		break;
 8002ec4:	46c0      	nop			; (mov r8, r8)
 8002ec6:	e016      	b.n	8002ef6 <testHandler+0x38e>
		break;
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	e014      	b.n	8002ef6 <testHandler+0x38e>
		break;
 8002ecc:	46c0      	nop			; (mov r8, r8)
 8002ece:	e012      	b.n	8002ef6 <testHandler+0x38e>
		break;
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	e010      	b.n	8002ef6 <testHandler+0x38e>
 8002ed4:	2000063c 	.word	0x2000063c
 8002ed8:	20000268 	.word	0x20000268
 8002edc:	0800dddc 	.word	0x0800dddc
 8002ee0:	2000049c 	.word	0x2000049c
 8002ee4:	0800df54 	.word	0x0800df54
 8002ee8:	20000240 	.word	0x20000240
 8002eec:	48000800 	.word	0x48000800
 8002ef0:	200006a4 	.word	0x200006a4
		break;
 8002ef4:	46c0      	nop			; (mov r8, r8)

	}
}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	b00b      	add	sp, #44	; 0x2c
 8002efc:	bd90      	pop	{r4, r7, pc}
 8002efe:	46c0      	nop			; (mov r8, r8)

08002f00 <startTest>:

//_____Funkce pro zahájení testu_____//
static void startTest(/*ukazatel na zdroj*/)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
	if(supplyToTest > regCount)
 8002f06:	4b2e      	ldr	r3, [pc, #184]	; (8002fc0 <startTest+0xc0>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	4b2d      	ldr	r3, [pc, #180]	; (8002fc4 <startTest+0xc4>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d851      	bhi.n	8002fb8 <startTest+0xb8>
	{
		return;
	}

	flags.ui.shortBeep = 1;
 8002f14:	4b2c      	ldr	r3, [pc, #176]	; (8002fc8 <startTest+0xc8>)
 8002f16:	7c1a      	ldrb	r2, [r3, #16]
 8002f18:	2101      	movs	r1, #1
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	741a      	strb	r2, [r3, #16]
	testPhase = START;
 8002f1e:	4b2b      	ldr	r3, [pc, #172]	; (8002fcc <startTest+0xcc>)
 8002f20:	2201      	movs	r2, #1
 8002f22:	701a      	strb	r2, [r3, #0]
	testNum = 0;
 8002f24:	4b2a      	ldr	r3, [pc, #168]	; (8002fd0 <startTest+0xd0>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
	flags.testProgress = 1;
 8002f2a:	4b27      	ldr	r3, [pc, #156]	; (8002fc8 <startTest+0xc8>)
 8002f2c:	7e1a      	ldrb	r2, [r3, #24]
 8002f2e:	2102      	movs	r1, #2
 8002f30:	430a      	orrs	r2, r1
 8002f32:	761a      	strb	r2, [r3, #24]

	sourceInTesting = &regValues[supplyToTest];
 8002f34:	4b27      	ldr	r3, [pc, #156]	; (8002fd4 <startTest+0xd4>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a21      	ldr	r2, [pc, #132]	; (8002fc0 <startTest+0xc0>)
 8002f3a:	7812      	ldrb	r2, [r2, #0]
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	189a      	adds	r2, r3, r2
 8002f40:	4b25      	ldr	r3, [pc, #148]	; (8002fd8 <startTest+0xd8>)
 8002f42:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < regCount; i++)
 8002f44:	2300      	movs	r3, #0
 8002f46:	607b      	str	r3, [r7, #4]
 8002f48:	e008      	b.n	8002f5c <startTest+0x5c>
	{
		regValues[i] = 0;
 8002f4a:	4b22      	ldr	r3, [pc, #136]	; (8002fd4 <startTest+0xd4>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	18d3      	adds	r3, r2, r3
 8002f52:	2200      	movs	r2, #0
 8002f54:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < regCount; i++)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	607b      	str	r3, [r7, #4]
 8002f5c:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <startTest+0xc4>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	001a      	movs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4293      	cmp	r3, r2
 8002f66:	dbf0      	blt.n	8002f4a <startTest+0x4a>
	}
	PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//rozsvítit první ledku progress
 8002f68:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <startTest+0xd8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	781a      	ldrb	r2, [r3, #0]
 8002f6e:	4b1a      	ldr	r3, [pc, #104]	; (8002fd8 <startTest+0xd8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2120      	movs	r1, #32
 8002f74:	430a      	orrs	r2, r1
 8002f76:	b2d2      	uxtb	r2, r2
 8002f78:	701a      	strb	r2, [r3, #0]
	RELAY_ON(*sourceInTesting);	//připojit relé
 8002f7a:	4b17      	ldr	r3, [pc, #92]	; (8002fd8 <startTest+0xd8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	781a      	ldrb	r2, [r3, #0]
 8002f80:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <startTest+0xd8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2102      	movs	r1, #2
 8002f86:	430a      	orrs	r2, r1
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	701a      	strb	r2, [r3, #0]

	sendData();	//poslat konfiguraci shift registrům
 8002f8c:	f7ff fb98 	bl	80026c0 <sendData>
	//Zobrazit text na displej

	//___Nulování času___//
	for(int i = 1; i < 4; i++)
 8002f90:	2301      	movs	r3, #1
 8002f92:	603b      	str	r3, [r7, #0]
 8002f94:	e007      	b.n	8002fa6 <startTest+0xa6>
	{
		sysTime[i] = 0;
 8002f96:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <startTest+0xdc>)
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	0092      	lsls	r2, r2, #2
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	50d1      	str	r1, [r2, r3]
	for(int i = 1; i < 4; i++)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	603b      	str	r3, [r7, #0]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	ddf4      	ble.n	8002f96 <startTest+0x96>
	}

	flags.instructions.startRequest = 0;
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <startTest+0xc8>)
 8002fae:	7b1a      	ldrb	r2, [r3, #12]
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	438a      	bics	r2, r1
 8002fb4:	731a      	strb	r2, [r3, #12]
 8002fb6:	e000      	b.n	8002fba <startTest+0xba>
		return;
 8002fb8:	46c0      	nop			; (mov r8, r8)
}
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b002      	add	sp, #8
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20000252 	.word	0x20000252
 8002fc4:	2000069d 	.word	0x2000069d
 8002fc8:	2000063c 	.word	0x2000063c
 8002fcc:	20000268 	.word	0x20000268
 8002fd0:	2000026c 	.word	0x2000026c
 8002fd4:	20000698 	.word	0x20000698
 8002fd8:	200006a4 	.word	0x200006a4
 8002fdc:	20000240 	.word	0x20000240

08002fe0 <stopTest>:

//_____Funkce pro ukončení testu_____//
static void stopTest()
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
	flags.ui.longBeep = 1;
 8002fe4:	4b15      	ldr	r3, [pc, #84]	; (800303c <stopTest+0x5c>)
 8002fe6:	7c1a      	ldrb	r2, [r3, #16]
 8002fe8:	2102      	movs	r1, #2
 8002fea:	430a      	orrs	r2, r1
 8002fec:	741a      	strb	r2, [r3, #16]
	testPhase = WAITING;
 8002fee:	4b14      	ldr	r3, [pc, #80]	; (8003040 <stopTest+0x60>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]

	//Zobrazit text na displej
	LOAD_MIN_OFF;
 8002ff4:	4b13      	ldr	r3, [pc, #76]	; (8003044 <stopTest+0x64>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2180      	movs	r1, #128	; 0x80
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f001 f8e9 	bl	80041d2 <HAL_GPIO_WritePin>
	LOAD_MAX_OFF;
 8003000:	4b10      	ldr	r3, [pc, #64]	; (8003044 <stopTest+0x64>)
 8003002:	2200      	movs	r2, #0
 8003004:	2140      	movs	r1, #64	; 0x40
 8003006:	0018      	movs	r0, r3
 8003008:	f001 f8e3 	bl	80041d2 <HAL_GPIO_WritePin>

	*sourceInTesting = 0;
 800300c:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <stopTest+0x68>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2200      	movs	r2, #0
 8003012:	701a      	strb	r2, [r3, #0]
	ERROR_ON(*sourceInTesting);
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <stopTest+0x68>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	781a      	ldrb	r2, [r3, #0]
 800301a:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <stopTest+0x68>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2104      	movs	r1, #4
 8003020:	430a      	orrs	r2, r1
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]
	sendData();
 8003026:	f7ff fb4b 	bl	80026c0 <sendData>

	flags.instructions.stopRequest = 0;
 800302a:	4b04      	ldr	r3, [pc, #16]	; (800303c <stopTest+0x5c>)
 800302c:	7b1a      	ldrb	r2, [r3, #12]
 800302e:	2102      	movs	r1, #2
 8003030:	438a      	bics	r2, r1
 8003032:	731a      	strb	r2, [r3, #12]
}
 8003034:	46c0      	nop			; (mov r8, r8)
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	2000063c 	.word	0x2000063c
 8003040:	20000268 	.word	0x20000268
 8003044:	48000800 	.word	0x48000800
 8003048:	200006a4 	.word	0x200006a4

0800304c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800304c:	480d      	ldr	r0, [pc, #52]	; (8003084 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800304e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003050:	480d      	ldr	r0, [pc, #52]	; (8003088 <LoopForever+0x6>)
  ldr r1, =_edata
 8003052:	490e      	ldr	r1, [pc, #56]	; (800308c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003054:	4a0e      	ldr	r2, [pc, #56]	; (8003090 <LoopForever+0xe>)
  movs r3, #0
 8003056:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003058:	e002      	b.n	8003060 <LoopCopyDataInit>

0800305a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800305a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800305c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800305e:	3304      	adds	r3, #4

08003060 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003060:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003062:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003064:	d3f9      	bcc.n	800305a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003066:	4a0b      	ldr	r2, [pc, #44]	; (8003094 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003068:	4c0b      	ldr	r4, [pc, #44]	; (8003098 <LoopForever+0x16>)
  movs r3, #0
 800306a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800306c:	e001      	b.n	8003072 <LoopFillZerobss>

0800306e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800306e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003070:	3204      	adds	r2, #4

08003072 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003072:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003074:	d3fb      	bcc.n	800306e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003076:	f7ff fd67 	bl	8002b48 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800307a:	f00a f9eb 	bl	800d454 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800307e:	f7fe f897 	bl	80011b0 <main>

08003082 <LoopForever>:

LoopForever:
    b LoopForever
 8003082:	e7fe      	b.n	8003082 <LoopForever>
  ldr   r0, =_estack
 8003084:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8003088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800308c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003090:	0800e09c 	.word	0x0800e09c
  ldr r2, =_sbss
 8003094:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003098:	20001648 	.word	0x20001648

0800309c <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800309c:	e7fe      	b.n	800309c <CEC_CAN_IRQHandler>
	...

080030a0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030a4:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <HAL_Init+0x24>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <HAL_Init+0x24>)
 80030aa:	2110      	movs	r1, #16
 80030ac:	430a      	orrs	r2, r1
 80030ae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80030b0:	2003      	movs	r0, #3
 80030b2:	f000 f809 	bl	80030c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030b6:	f7ff fb3f 	bl	8002738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	0018      	movs	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	40022000 	.word	0x40022000

080030c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030c8:	b590      	push	{r4, r7, lr}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030d0:	4b14      	ldr	r3, [pc, #80]	; (8003124 <HAL_InitTick+0x5c>)
 80030d2:	681c      	ldr	r4, [r3, #0]
 80030d4:	4b14      	ldr	r3, [pc, #80]	; (8003128 <HAL_InitTick+0x60>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	0019      	movs	r1, r3
 80030da:	23fa      	movs	r3, #250	; 0xfa
 80030dc:	0098      	lsls	r0, r3, #2
 80030de:	f7fd f825 	bl	800012c <__udivsi3>
 80030e2:	0003      	movs	r3, r0
 80030e4:	0019      	movs	r1, r3
 80030e6:	0020      	movs	r0, r4
 80030e8:	f7fd f820 	bl	800012c <__udivsi3>
 80030ec:	0003      	movs	r3, r0
 80030ee:	0018      	movs	r0, r3
 80030f0:	f000 fe4f 	bl	8003d92 <HAL_SYSTICK_Config>
 80030f4:	1e03      	subs	r3, r0, #0
 80030f6:	d001      	beq.n	80030fc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e00f      	b.n	800311c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b03      	cmp	r3, #3
 8003100:	d80b      	bhi.n	800311a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	2301      	movs	r3, #1
 8003106:	425b      	negs	r3, r3
 8003108:	2200      	movs	r2, #0
 800310a:	0018      	movs	r0, r3
 800310c:	f000 fe1c 	bl	8003d48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <HAL_InitTick+0x64>)
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	e000      	b.n	800311c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
}
 800311c:	0018      	movs	r0, r3
 800311e:	46bd      	mov	sp, r7
 8003120:	b003      	add	sp, #12
 8003122:	bd90      	pop	{r4, r7, pc}
 8003124:	20000000 	.word	0x20000000
 8003128:	20000008 	.word	0x20000008
 800312c:	20000004 	.word	0x20000004

08003130 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003134:	4b05      	ldr	r3, [pc, #20]	; (800314c <HAL_IncTick+0x1c>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	001a      	movs	r2, r3
 800313a:	4b05      	ldr	r3, [pc, #20]	; (8003150 <HAL_IncTick+0x20>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	18d2      	adds	r2, r2, r3
 8003140:	4b03      	ldr	r3, [pc, #12]	; (8003150 <HAL_IncTick+0x20>)
 8003142:	601a      	str	r2, [r3, #0]
}
 8003144:	46c0      	nop			; (mov r8, r8)
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	20000008 	.word	0x20000008
 8003150:	200006a8 	.word	0x200006a8

08003154 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  return uwTick;
 8003158:	4b02      	ldr	r3, [pc, #8]	; (8003164 <HAL_GetTick+0x10>)
 800315a:	681b      	ldr	r3, [r3, #0]
}
 800315c:	0018      	movs	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	200006a8 	.word	0x200006a8

08003168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003170:	f7ff fff0 	bl	8003154 <HAL_GetTick>
 8003174:	0003      	movs	r3, r0
 8003176:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	3301      	adds	r3, #1
 8003180:	d005      	beq.n	800318e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003182:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <HAL_Delay+0x44>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	001a      	movs	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	189b      	adds	r3, r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	f7ff ffe0 	bl	8003154 <HAL_GetTick>
 8003194:	0002      	movs	r2, r0
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	429a      	cmp	r2, r3
 800319e:	d8f7      	bhi.n	8003190 <HAL_Delay+0x28>
  {
  }
}
 80031a0:	46c0      	nop			; (mov r8, r8)
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	46bd      	mov	sp, r7
 80031a6:	b004      	add	sp, #16
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	20000008 	.word	0x20000008

080031b0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031b8:	230f      	movs	r3, #15
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e125      	b.n	800341a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10a      	bne.n	80031ec <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2234      	movs	r2, #52	; 0x34
 80031e0:	2100      	movs	r1, #0
 80031e2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	0018      	movs	r0, r3
 80031e8:	f7ff faca 	bl	8002780 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f0:	2210      	movs	r2, #16
 80031f2:	4013      	ands	r3, r2
 80031f4:	d000      	beq.n	80031f8 <HAL_ADC_Init+0x48>
 80031f6:	e103      	b.n	8003400 <HAL_ADC_Init+0x250>
 80031f8:	230f      	movs	r3, #15
 80031fa:	18fb      	adds	r3, r7, r3
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d000      	beq.n	8003204 <HAL_ADC_Init+0x54>
 8003202:	e0fd      	b.n	8003400 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	2204      	movs	r2, #4
 800320c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800320e:	d000      	beq.n	8003212 <HAL_ADC_Init+0x62>
 8003210:	e0f6      	b.n	8003400 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003216:	4a83      	ldr	r2, [pc, #524]	; (8003424 <HAL_ADC_Init+0x274>)
 8003218:	4013      	ands	r3, r2
 800321a:	2202      	movs	r2, #2
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2203      	movs	r2, #3
 800322a:	4013      	ands	r3, r2
 800322c:	2b01      	cmp	r3, #1
 800322e:	d112      	bne.n	8003256 <HAL_ADC_Init+0xa6>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2201      	movs	r2, #1
 8003238:	4013      	ands	r3, r2
 800323a:	2b01      	cmp	r3, #1
 800323c:	d009      	beq.n	8003252 <HAL_ADC_Init+0xa2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	2380      	movs	r3, #128	; 0x80
 8003246:	021b      	lsls	r3, r3, #8
 8003248:	401a      	ands	r2, r3
 800324a:	2380      	movs	r3, #128	; 0x80
 800324c:	021b      	lsls	r3, r3, #8
 800324e:	429a      	cmp	r2, r3
 8003250:	d101      	bne.n	8003256 <HAL_ADC_Init+0xa6>
 8003252:	2301      	movs	r3, #1
 8003254:	e000      	b.n	8003258 <HAL_ADC_Init+0xa8>
 8003256:	2300      	movs	r3, #0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d116      	bne.n	800328a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	2218      	movs	r2, #24
 8003264:	4393      	bics	r3, r2
 8003266:	0019      	movs	r1, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	0899      	lsrs	r1, r3, #2
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4964      	ldr	r1, [pc, #400]	; (8003428 <HAL_ADC_Init+0x278>)
 8003296:	400a      	ands	r2, r1
 8003298:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	7e1b      	ldrb	r3, [r3, #24]
 800329e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	7e5b      	ldrb	r3, [r3, #25]
 80032a4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032a6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	7e9b      	ldrb	r3, [r3, #26]
 80032ac:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80032ae:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d002      	beq.n	80032be <HAL_ADC_Init+0x10e>
 80032b8:	2380      	movs	r3, #128	; 0x80
 80032ba:	015b      	lsls	r3, r3, #5
 80032bc:	e000      	b.n	80032c0 <HAL_ADC_Init+0x110>
 80032be:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80032c0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80032c6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d101      	bne.n	80032d4 <HAL_ADC_Init+0x124>
 80032d0:	2304      	movs	r3, #4
 80032d2:	e000      	b.n	80032d6 <HAL_ADC_Init+0x126>
 80032d4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80032d6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2124      	movs	r1, #36	; 0x24
 80032dc:	5c5b      	ldrb	r3, [r3, r1]
 80032de:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80032e0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	7edb      	ldrb	r3, [r3, #27]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d115      	bne.n	800331c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	7e9b      	ldrb	r3, [r3, #26]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d105      	bne.n	8003304 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2280      	movs	r2, #128	; 0x80
 80032fc:	0252      	lsls	r2, r2, #9
 80032fe:	4313      	orrs	r3, r2
 8003300:	60bb      	str	r3, [r7, #8]
 8003302:	e00b      	b.n	800331c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003308:	2220      	movs	r2, #32
 800330a:	431a      	orrs	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003314:	2201      	movs	r2, #1
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69da      	ldr	r2, [r3, #28]
 8003320:	23c2      	movs	r3, #194	; 0xc2
 8003322:	33ff      	adds	r3, #255	; 0xff
 8003324:	429a      	cmp	r2, r3
 8003326:	d007      	beq.n	8003338 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003330:	4313      	orrs	r3, r2
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	4313      	orrs	r3, r2
 8003336:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68d9      	ldr	r1, [r3, #12]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	430a      	orrs	r2, r1
 8003346:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	055b      	lsls	r3, r3, #21
 8003350:	429a      	cmp	r2, r3
 8003352:	d01b      	beq.n	800338c <HAL_ADC_Init+0x1dc>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	2b01      	cmp	r3, #1
 800335a:	d017      	beq.n	800338c <HAL_ADC_Init+0x1dc>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	2b02      	cmp	r3, #2
 8003362:	d013      	beq.n	800338c <HAL_ADC_Init+0x1dc>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	2b03      	cmp	r3, #3
 800336a:	d00f      	beq.n	800338c <HAL_ADC_Init+0x1dc>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	2b04      	cmp	r3, #4
 8003372:	d00b      	beq.n	800338c <HAL_ADC_Init+0x1dc>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	2b05      	cmp	r3, #5
 800337a:	d007      	beq.n	800338c <HAL_ADC_Init+0x1dc>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003380:	2b06      	cmp	r3, #6
 8003382:	d003      	beq.n	800338c <HAL_ADC_Init+0x1dc>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	2b07      	cmp	r3, #7
 800338a:	d112      	bne.n	80033b2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2107      	movs	r1, #7
 8003398:	438a      	bics	r2, r1
 800339a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6959      	ldr	r1, [r3, #20]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a6:	2207      	movs	r2, #7
 80033a8:	401a      	ands	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4a1c      	ldr	r2, [pc, #112]	; (800342c <HAL_ADC_Init+0x27c>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d10b      	bne.n	80033da <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033cc:	2203      	movs	r2, #3
 80033ce:	4393      	bics	r3, r2
 80033d0:	2201      	movs	r2, #1
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80033d8:	e01c      	b.n	8003414 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033de:	2212      	movs	r2, #18
 80033e0:	4393      	bics	r3, r2
 80033e2:	2210      	movs	r2, #16
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ee:	2201      	movs	r2, #1
 80033f0:	431a      	orrs	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80033f6:	230f      	movs	r3, #15
 80033f8:	18fb      	adds	r3, r7, r3
 80033fa:	2201      	movs	r2, #1
 80033fc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80033fe:	e009      	b.n	8003414 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003404:	2210      	movs	r2, #16
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800340c:	230f      	movs	r3, #15
 800340e:	18fb      	adds	r3, r7, r3
 8003410:	2201      	movs	r2, #1
 8003412:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003414:	230f      	movs	r3, #15
 8003416:	18fb      	adds	r3, r7, r3
 8003418:	781b      	ldrb	r3, [r3, #0]
}
 800341a:	0018      	movs	r0, r3
 800341c:	46bd      	mov	sp, r7
 800341e:	b004      	add	sp, #16
 8003420:	bd80      	pop	{r7, pc}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	fffffefd 	.word	0xfffffefd
 8003428:	fffe0219 	.word	0xfffe0219
 800342c:	833fffe7 	.word	0x833fffe7

08003430 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003430:	b590      	push	{r4, r7, lr}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003438:	230f      	movs	r3, #15
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2204      	movs	r2, #4
 8003448:	4013      	ands	r3, r2
 800344a:	d156      	bne.n	80034fa <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2234      	movs	r2, #52	; 0x34
 8003450:	5c9b      	ldrb	r3, [r3, r2]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_ADC_Start_IT+0x2a>
 8003456:	2302      	movs	r3, #2
 8003458:	e056      	b.n	8003508 <HAL_ADC_Start_IT+0xd8>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2234      	movs	r2, #52	; 0x34
 800345e:	2101      	movs	r1, #1
 8003460:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	7e5b      	ldrb	r3, [r3, #25]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d007      	beq.n	800347a <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800346a:	230f      	movs	r3, #15
 800346c:	18fc      	adds	r4, r7, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	0018      	movs	r0, r3
 8003472:	f000 fa7b 	bl	800396c <ADC_Enable>
 8003476:	0003      	movs	r3, r0
 8003478:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800347a:	230f      	movs	r3, #15
 800347c:	18fb      	adds	r3, r7, r3
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d13e      	bne.n	8003502 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003488:	4a21      	ldr	r2, [pc, #132]	; (8003510 <HAL_ADC_Start_IT+0xe0>)
 800348a:	4013      	ands	r3, r2
 800348c:	2280      	movs	r2, #128	; 0x80
 800348e:	0052      	lsls	r2, r2, #1
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2234      	movs	r2, #52	; 0x34
 80034a0:	2100      	movs	r1, #0
 80034a2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	221c      	movs	r2, #28
 80034aa:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d110      	bne.n	80034d6 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2104      	movs	r1, #4
 80034c0:	438a      	bics	r2, r1
 80034c2:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2118      	movs	r1, #24
 80034d0:	430a      	orrs	r2, r1
 80034d2:	605a      	str	r2, [r3, #4]
          break;
 80034d4:	e008      	b.n	80034e8 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	211c      	movs	r1, #28
 80034e2:	430a      	orrs	r2, r1
 80034e4:	605a      	str	r2, [r3, #4]
          break;
 80034e6:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2104      	movs	r1, #4
 80034f4:	430a      	orrs	r2, r1
 80034f6:	609a      	str	r2, [r3, #8]
 80034f8:	e003      	b.n	8003502 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034fa:	230f      	movs	r3, #15
 80034fc:	18fb      	adds	r3, r7, r3
 80034fe:	2202      	movs	r2, #2
 8003500:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 8003502:	230f      	movs	r3, #15
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	781b      	ldrb	r3, [r3, #0]
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	b005      	add	sp, #20
 800350e:	bd90      	pop	{r4, r7, pc}
 8003510:	fffff0fe 	.word	0xfffff0fe

08003514 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8003514:	b5b0      	push	{r4, r5, r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800351c:	230f      	movs	r3, #15
 800351e:	18fb      	adds	r3, r7, r3
 8003520:	2200      	movs	r2, #0
 8003522:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2234      	movs	r2, #52	; 0x34
 8003528:	5c9b      	ldrb	r3, [r3, r2]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <HAL_ADC_Stop_IT+0x1e>
 800352e:	2302      	movs	r3, #2
 8003530:	e033      	b.n	800359a <HAL_ADC_Stop_IT+0x86>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2234      	movs	r2, #52	; 0x34
 8003536:	2101      	movs	r1, #1
 8003538:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800353a:	250f      	movs	r5, #15
 800353c:	197c      	adds	r4, r7, r5
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	0018      	movs	r0, r3
 8003542:	f000 fb08 	bl	8003b56 <ADC_ConversionStop>
 8003546:	0003      	movs	r3, r0
 8003548:	7023      	strb	r3, [r4, #0]
   
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800354a:	0028      	movs	r0, r5
 800354c:	183b      	adds	r3, r7, r0
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d11b      	bne.n	800358c <HAL_ADC_Stop_IT+0x78>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	211c      	movs	r1, #28
 8003560:	438a      	bics	r2, r1
 8003562:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003564:	0005      	movs	r5, r0
 8003566:	183c      	adds	r4, r7, r0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	0018      	movs	r0, r3
 800356c:	f000 fa82 	bl	8003a74 <ADC_Disable>
 8003570:	0003      	movs	r3, r0
 8003572:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003574:	197b      	adds	r3, r7, r5
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d107      	bne.n	800358c <HAL_ADC_Stop_IT+0x78>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003580:	4a08      	ldr	r2, [pc, #32]	; (80035a4 <HAL_ADC_Stop_IT+0x90>)
 8003582:	4013      	ands	r3, r2
 8003584:	2201      	movs	r2, #1
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2234      	movs	r2, #52	; 0x34
 8003590:	2100      	movs	r1, #0
 8003592:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003594:	230f      	movs	r3, #15
 8003596:	18fb      	adds	r3, r7, r3
 8003598:	781b      	ldrb	r3, [r3, #0]
}
 800359a:	0018      	movs	r0, r3
 800359c:	46bd      	mov	sp, r7
 800359e:	b004      	add	sp, #16
 80035a0:	bdb0      	pop	{r4, r5, r7, pc}
 80035a2:	46c0      	nop			; (mov r8, r8)
 80035a4:	fffffefe 	.word	0xfffffefe

080035a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80035b6:	0018      	movs	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b002      	add	sp, #8
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2204      	movs	r2, #4
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d106      	bne.n	80035e4 <HAL_ADC_IRQHandler+0x24>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	2204      	movs	r2, #4
 80035de:	4013      	ands	r3, r2
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d00d      	beq.n	8003600 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2208      	movs	r2, #8
 80035ec:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d14f      	bne.n	8003692 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2208      	movs	r2, #8
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d148      	bne.n	8003692 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003604:	2210      	movs	r2, #16
 8003606:	4013      	ands	r3, r2
 8003608:	d106      	bne.n	8003618 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	2280      	movs	r2, #128	; 0x80
 8003610:	0092      	lsls	r2, r2, #2
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	23c0      	movs	r3, #192	; 0xc0
 8003620:	011b      	lsls	r3, r3, #4
 8003622:	4013      	ands	r3, r2
 8003624:	d12d      	bne.n	8003682 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800362a:	2b00      	cmp	r3, #0
 800362c:	d129      	bne.n	8003682 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2208      	movs	r2, #8
 8003636:	4013      	ands	r3, r2
 8003638:	2b08      	cmp	r3, #8
 800363a:	d122      	bne.n	8003682 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2204      	movs	r2, #4
 8003644:	4013      	ands	r3, r2
 8003646:	d110      	bne.n	800366a <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	210c      	movs	r1, #12
 8003654:	438a      	bics	r2, r1
 8003656:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365c:	4a33      	ldr	r2, [pc, #204]	; (800372c <HAL_ADC_IRQHandler+0x16c>)
 800365e:	4013      	ands	r3, r2
 8003660:	2201      	movs	r2, #1
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	639a      	str	r2, [r3, #56]	; 0x38
 8003668:	e00b      	b.n	8003682 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366e:	2220      	movs	r2, #32
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367a:	2201      	movs	r2, #1
 800367c:	431a      	orrs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	0018      	movs	r0, r3
 8003686:	f7fd fd7f 	bl	8001188 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	220c      	movs	r2, #12
 8003690:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2280      	movs	r2, #128	; 0x80
 800369a:	4013      	ands	r3, r2
 800369c:	2b80      	cmp	r3, #128	; 0x80
 800369e:	d115      	bne.n	80036cc <HAL_ADC_IRQHandler+0x10c>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2280      	movs	r2, #128	; 0x80
 80036a8:	4013      	ands	r3, r2
 80036aa:	2b80      	cmp	r3, #128	; 0x80
 80036ac:	d10e      	bne.n	80036cc <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b2:	2280      	movs	r2, #128	; 0x80
 80036b4:	0252      	lsls	r2, r2, #9
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	0018      	movs	r0, r3
 80036c0:	f000 f836 	bl	8003730 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2280      	movs	r2, #128	; 0x80
 80036ca:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2210      	movs	r2, #16
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b10      	cmp	r3, #16
 80036d8:	d123      	bne.n	8003722 <HAL_ADC_IRQHandler+0x162>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2210      	movs	r2, #16
 80036e2:	4013      	ands	r3, r2
 80036e4:	2b10      	cmp	r3, #16
 80036e6:	d11c      	bne.n	8003722 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d006      	beq.n	80036fe <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	2201      	movs	r2, #1
 80036f8:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d10d      	bne.n	800371a <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003702:	2202      	movs	r2, #2
 8003704:	431a      	orrs	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2210      	movs	r2, #16
 8003710:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	0018      	movs	r0, r3
 8003716:	f000 f813 	bl	8003740 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2210      	movs	r2, #16
 8003720:	601a      	str	r2, [r3, #0]
  }

}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	46bd      	mov	sp, r7
 8003726:	b002      	add	sp, #8
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			; (mov r8, r8)
 800372c:	fffffefe 	.word	0xfffffefe

08003730 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003738:	46c0      	nop			; (mov r8, r8)
 800373a:	46bd      	mov	sp, r7
 800373c:	b002      	add	sp, #8
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003748:	46c0      	nop			; (mov r8, r8)
 800374a:	46bd      	mov	sp, r7
 800374c:	b002      	add	sp, #8
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800375a:	230f      	movs	r3, #15
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	2200      	movs	r2, #0
 8003760:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800376a:	2380      	movs	r3, #128	; 0x80
 800376c:	055b      	lsls	r3, r3, #21
 800376e:	429a      	cmp	r2, r3
 8003770:	d011      	beq.n	8003796 <HAL_ADC_ConfigChannel+0x46>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003776:	2b01      	cmp	r3, #1
 8003778:	d00d      	beq.n	8003796 <HAL_ADC_ConfigChannel+0x46>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377e:	2b02      	cmp	r3, #2
 8003780:	d009      	beq.n	8003796 <HAL_ADC_ConfigChannel+0x46>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003786:	2b03      	cmp	r3, #3
 8003788:	d005      	beq.n	8003796 <HAL_ADC_ConfigChannel+0x46>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	2b04      	cmp	r3, #4
 8003790:	d001      	beq.n	8003796 <HAL_ADC_ConfigChannel+0x46>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2234      	movs	r2, #52	; 0x34
 800379a:	5c9b      	ldrb	r3, [r3, r2]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x54>
 80037a0:	2302      	movs	r3, #2
 80037a2:	e0d0      	b.n	8003946 <HAL_ADC_ConfigChannel+0x1f6>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2234      	movs	r2, #52	; 0x34
 80037a8:	2101      	movs	r1, #1
 80037aa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2204      	movs	r2, #4
 80037b4:	4013      	ands	r3, r2
 80037b6:	d000      	beq.n	80037ba <HAL_ADC_ConfigChannel+0x6a>
 80037b8:	e0b4      	b.n	8003924 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	4a64      	ldr	r2, [pc, #400]	; (8003950 <HAL_ADC_ConfigChannel+0x200>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d100      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x76>
 80037c4:	e082      	b.n	80038cc <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2201      	movs	r2, #1
 80037d2:	409a      	lsls	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e0:	2380      	movs	r3, #128	; 0x80
 80037e2:	055b      	lsls	r3, r3, #21
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d037      	beq.n	8003858 <HAL_ADC_ConfigChannel+0x108>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d033      	beq.n	8003858 <HAL_ADC_ConfigChannel+0x108>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d02f      	beq.n	8003858 <HAL_ADC_ConfigChannel+0x108>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d02b      	beq.n	8003858 <HAL_ADC_ConfigChannel+0x108>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	2b04      	cmp	r3, #4
 8003806:	d027      	beq.n	8003858 <HAL_ADC_ConfigChannel+0x108>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	2b05      	cmp	r3, #5
 800380e:	d023      	beq.n	8003858 <HAL_ADC_ConfigChannel+0x108>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	2b06      	cmp	r3, #6
 8003816:	d01f      	beq.n	8003858 <HAL_ADC_ConfigChannel+0x108>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	2b07      	cmp	r3, #7
 800381e:	d01b      	beq.n	8003858 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	2107      	movs	r1, #7
 800382c:	400b      	ands	r3, r1
 800382e:	429a      	cmp	r2, r3
 8003830:	d012      	beq.n	8003858 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695a      	ldr	r2, [r3, #20]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2107      	movs	r1, #7
 800383e:	438a      	bics	r2, r1
 8003840:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6959      	ldr	r1, [r3, #20]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	2207      	movs	r2, #7
 800384e:	401a      	ands	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b10      	cmp	r3, #16
 800385e:	d007      	beq.n	8003870 <HAL_ADC_ConfigChannel+0x120>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b11      	cmp	r3, #17
 8003866:	d003      	beq.n	8003870 <HAL_ADC_ConfigChannel+0x120>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b12      	cmp	r3, #18
 800386e:	d163      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003870:	4b38      	ldr	r3, [pc, #224]	; (8003954 <HAL_ADC_ConfigChannel+0x204>)
 8003872:	6819      	ldr	r1, [r3, #0]
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b10      	cmp	r3, #16
 800387a:	d009      	beq.n	8003890 <HAL_ADC_ConfigChannel+0x140>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b11      	cmp	r3, #17
 8003882:	d102      	bne.n	800388a <HAL_ADC_ConfigChannel+0x13a>
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	03db      	lsls	r3, r3, #15
 8003888:	e004      	b.n	8003894 <HAL_ADC_ConfigChannel+0x144>
 800388a:	2380      	movs	r3, #128	; 0x80
 800388c:	045b      	lsls	r3, r3, #17
 800388e:	e001      	b.n	8003894 <HAL_ADC_ConfigChannel+0x144>
 8003890:	2380      	movs	r3, #128	; 0x80
 8003892:	041b      	lsls	r3, r3, #16
 8003894:	4a2f      	ldr	r2, [pc, #188]	; (8003954 <HAL_ADC_ConfigChannel+0x204>)
 8003896:	430b      	orrs	r3, r1
 8003898:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b10      	cmp	r3, #16
 80038a0:	d14a      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038a2:	4b2d      	ldr	r3, [pc, #180]	; (8003958 <HAL_ADC_ConfigChannel+0x208>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	492d      	ldr	r1, [pc, #180]	; (800395c <HAL_ADC_ConfigChannel+0x20c>)
 80038a8:	0018      	movs	r0, r3
 80038aa:	f7fc fc3f 	bl	800012c <__udivsi3>
 80038ae:	0003      	movs	r3, r0
 80038b0:	001a      	movs	r2, r3
 80038b2:	0013      	movs	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	189b      	adds	r3, r3, r2
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038bc:	e002      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	3b01      	subs	r3, #1
 80038c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f9      	bne.n	80038be <HAL_ADC_ConfigChannel+0x16e>
 80038ca:	e035      	b.n	8003938 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2101      	movs	r1, #1
 80038d8:	4099      	lsls	r1, r3
 80038da:	000b      	movs	r3, r1
 80038dc:	43d9      	mvns	r1, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	400a      	ands	r2, r1
 80038e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b10      	cmp	r3, #16
 80038ec:	d007      	beq.n	80038fe <HAL_ADC_ConfigChannel+0x1ae>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b11      	cmp	r3, #17
 80038f4:	d003      	beq.n	80038fe <HAL_ADC_ConfigChannel+0x1ae>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b12      	cmp	r3, #18
 80038fc:	d11c      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80038fe:	4b15      	ldr	r3, [pc, #84]	; (8003954 <HAL_ADC_ConfigChannel+0x204>)
 8003900:	6819      	ldr	r1, [r3, #0]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b10      	cmp	r3, #16
 8003908:	d007      	beq.n	800391a <HAL_ADC_ConfigChannel+0x1ca>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2b11      	cmp	r3, #17
 8003910:	d101      	bne.n	8003916 <HAL_ADC_ConfigChannel+0x1c6>
 8003912:	4b13      	ldr	r3, [pc, #76]	; (8003960 <HAL_ADC_ConfigChannel+0x210>)
 8003914:	e002      	b.n	800391c <HAL_ADC_ConfigChannel+0x1cc>
 8003916:	4b13      	ldr	r3, [pc, #76]	; (8003964 <HAL_ADC_ConfigChannel+0x214>)
 8003918:	e000      	b.n	800391c <HAL_ADC_ConfigChannel+0x1cc>
 800391a:	4b13      	ldr	r3, [pc, #76]	; (8003968 <HAL_ADC_ConfigChannel+0x218>)
 800391c:	4a0d      	ldr	r2, [pc, #52]	; (8003954 <HAL_ADC_ConfigChannel+0x204>)
 800391e:	400b      	ands	r3, r1
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e009      	b.n	8003938 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	2220      	movs	r2, #32
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003930:	230f      	movs	r3, #15
 8003932:	18fb      	adds	r3, r7, r3
 8003934:	2201      	movs	r2, #1
 8003936:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2234      	movs	r2, #52	; 0x34
 800393c:	2100      	movs	r1, #0
 800393e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003940:	230f      	movs	r3, #15
 8003942:	18fb      	adds	r3, r7, r3
 8003944:	781b      	ldrb	r3, [r3, #0]
}
 8003946:	0018      	movs	r0, r3
 8003948:	46bd      	mov	sp, r7
 800394a:	b004      	add	sp, #16
 800394c:	bd80      	pop	{r7, pc}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	00001001 	.word	0x00001001
 8003954:	40012708 	.word	0x40012708
 8003958:	20000000 	.word	0x20000000
 800395c:	000f4240 	.word	0x000f4240
 8003960:	ffbfffff 	.word	0xffbfffff
 8003964:	feffffff 	.word	0xfeffffff
 8003968:	ff7fffff 	.word	0xff7fffff

0800396c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2203      	movs	r2, #3
 8003984:	4013      	ands	r3, r2
 8003986:	2b01      	cmp	r3, #1
 8003988:	d112      	bne.n	80039b0 <ADC_Enable+0x44>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2201      	movs	r2, #1
 8003992:	4013      	ands	r3, r2
 8003994:	2b01      	cmp	r3, #1
 8003996:	d009      	beq.n	80039ac <ADC_Enable+0x40>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	2380      	movs	r3, #128	; 0x80
 80039a0:	021b      	lsls	r3, r3, #8
 80039a2:	401a      	ands	r2, r3
 80039a4:	2380      	movs	r3, #128	; 0x80
 80039a6:	021b      	lsls	r3, r3, #8
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d101      	bne.n	80039b0 <ADC_Enable+0x44>
 80039ac:	2301      	movs	r3, #1
 80039ae:	e000      	b.n	80039b2 <ADC_Enable+0x46>
 80039b0:	2300      	movs	r3, #0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d152      	bne.n	8003a5c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	4a2a      	ldr	r2, [pc, #168]	; (8003a68 <ADC_Enable+0xfc>)
 80039be:	4013      	ands	r3, r2
 80039c0:	d00d      	beq.n	80039de <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c6:	2210      	movs	r2, #16
 80039c8:	431a      	orrs	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d2:	2201      	movs	r2, #1
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e03f      	b.n	8003a5e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2101      	movs	r1, #1
 80039ea:	430a      	orrs	r2, r1
 80039ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80039ee:	4b1f      	ldr	r3, [pc, #124]	; (8003a6c <ADC_Enable+0x100>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	491f      	ldr	r1, [pc, #124]	; (8003a70 <ADC_Enable+0x104>)
 80039f4:	0018      	movs	r0, r3
 80039f6:	f7fc fb99 	bl	800012c <__udivsi3>
 80039fa:	0003      	movs	r3, r0
 80039fc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80039fe:	e002      	b.n	8003a06 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1f9      	bne.n	8003a00 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a0c:	f7ff fba2 	bl	8003154 <HAL_GetTick>
 8003a10:	0003      	movs	r3, r0
 8003a12:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003a14:	e01b      	b.n	8003a4e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a16:	f7ff fb9d 	bl	8003154 <HAL_GetTick>
 8003a1a:	0002      	movs	r2, r0
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d914      	bls.n	8003a4e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d00d      	beq.n	8003a4e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a36:	2210      	movs	r2, #16
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a42:	2201      	movs	r2, #1
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e007      	b.n	8003a5e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2201      	movs	r2, #1
 8003a56:	4013      	ands	r3, r2
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d1dc      	bne.n	8003a16 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	0018      	movs	r0, r3
 8003a60:	46bd      	mov	sp, r7
 8003a62:	b004      	add	sp, #16
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	80000017 	.word	0x80000017
 8003a6c:	20000000 	.word	0x20000000
 8003a70:	000f4240 	.word	0x000f4240

08003a74 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2203      	movs	r2, #3
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d112      	bne.n	8003ab4 <ADC_Disable+0x40>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2201      	movs	r2, #1
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d009      	beq.n	8003ab0 <ADC_Disable+0x3c>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	2380      	movs	r3, #128	; 0x80
 8003aa4:	021b      	lsls	r3, r3, #8
 8003aa6:	401a      	ands	r2, r3
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	021b      	lsls	r3, r3, #8
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d101      	bne.n	8003ab4 <ADC_Disable+0x40>
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e000      	b.n	8003ab6 <ADC_Disable+0x42>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d048      	beq.n	8003b4c <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2205      	movs	r2, #5
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d110      	bne.n	8003aea <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	609a      	str	r2, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2203      	movs	r2, #3
 8003ade:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003ae0:	f7ff fb38 	bl	8003154 <HAL_GetTick>
 8003ae4:	0003      	movs	r3, r0
 8003ae6:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003ae8:	e029      	b.n	8003b3e <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aee:	2210      	movs	r2, #16
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afa:	2201      	movs	r2, #1
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e023      	b.n	8003b4e <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b06:	f7ff fb25 	bl	8003154 <HAL_GetTick>
 8003b0a:	0002      	movs	r2, r0
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d914      	bls.n	8003b3e <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d10d      	bne.n	8003b3e <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b26:	2210      	movs	r2, #16
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b32:	2201      	movs	r2, #1
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e007      	b.n	8003b4e <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2201      	movs	r2, #1
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d0dc      	beq.n	8003b06 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	0018      	movs	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	b004      	add	sp, #16
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b084      	sub	sp, #16
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2204      	movs	r2, #4
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d03a      	beq.n	8003be4 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2204      	movs	r2, #4
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d10d      	bne.n	8003b98 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	2202      	movs	r2, #2
 8003b84:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003b86:	d107      	bne.n	8003b98 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689a      	ldr	r2, [r3, #8]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2110      	movs	r1, #16
 8003b94:	430a      	orrs	r2, r1
 8003b96:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003b98:	f7ff fadc 	bl	8003154 <HAL_GetTick>
 8003b9c:	0003      	movs	r3, r0
 8003b9e:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003ba0:	e01a      	b.n	8003bd8 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003ba2:	f7ff fad7 	bl	8003154 <HAL_GetTick>
 8003ba6:	0002      	movs	r2, r0
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d913      	bls.n	8003bd8 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d00d      	beq.n	8003bd8 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc0:	2210      	movs	r2, #16
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bcc:	2201      	movs	r2, #1
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e006      	b.n	8003be6 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	2204      	movs	r2, #4
 8003be0:	4013      	ands	r3, r2
 8003be2:	d1de      	bne.n	8003ba2 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	0018      	movs	r0, r3
 8003be8:	46bd      	mov	sp, r7
 8003bea:	b004      	add	sp, #16
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	0002      	movs	r2, r0
 8003bf8:	1dfb      	adds	r3, r7, #7
 8003bfa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003bfc:	1dfb      	adds	r3, r7, #7
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b7f      	cmp	r3, #127	; 0x7f
 8003c02:	d809      	bhi.n	8003c18 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c04:	1dfb      	adds	r3, r7, #7
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	001a      	movs	r2, r3
 8003c0a:	231f      	movs	r3, #31
 8003c0c:	401a      	ands	r2, r3
 8003c0e:	4b04      	ldr	r3, [pc, #16]	; (8003c20 <__NVIC_EnableIRQ+0x30>)
 8003c10:	2101      	movs	r1, #1
 8003c12:	4091      	lsls	r1, r2
 8003c14:	000a      	movs	r2, r1
 8003c16:	601a      	str	r2, [r3, #0]
  }
}
 8003c18:	46c0      	nop			; (mov r8, r8)
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b002      	add	sp, #8
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	e000e100 	.word	0xe000e100

08003c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c24:	b590      	push	{r4, r7, lr}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	0002      	movs	r2, r0
 8003c2c:	6039      	str	r1, [r7, #0]
 8003c2e:	1dfb      	adds	r3, r7, #7
 8003c30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003c32:	1dfb      	adds	r3, r7, #7
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b7f      	cmp	r3, #127	; 0x7f
 8003c38:	d828      	bhi.n	8003c8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c3a:	4a2f      	ldr	r2, [pc, #188]	; (8003cf8 <__NVIC_SetPriority+0xd4>)
 8003c3c:	1dfb      	adds	r3, r7, #7
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	b25b      	sxtb	r3, r3
 8003c42:	089b      	lsrs	r3, r3, #2
 8003c44:	33c0      	adds	r3, #192	; 0xc0
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	589b      	ldr	r3, [r3, r2]
 8003c4a:	1dfa      	adds	r2, r7, #7
 8003c4c:	7812      	ldrb	r2, [r2, #0]
 8003c4e:	0011      	movs	r1, r2
 8003c50:	2203      	movs	r2, #3
 8003c52:	400a      	ands	r2, r1
 8003c54:	00d2      	lsls	r2, r2, #3
 8003c56:	21ff      	movs	r1, #255	; 0xff
 8003c58:	4091      	lsls	r1, r2
 8003c5a:	000a      	movs	r2, r1
 8003c5c:	43d2      	mvns	r2, r2
 8003c5e:	401a      	ands	r2, r3
 8003c60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	019b      	lsls	r3, r3, #6
 8003c66:	22ff      	movs	r2, #255	; 0xff
 8003c68:	401a      	ands	r2, r3
 8003c6a:	1dfb      	adds	r3, r7, #7
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	0018      	movs	r0, r3
 8003c70:	2303      	movs	r3, #3
 8003c72:	4003      	ands	r3, r0
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c78:	481f      	ldr	r0, [pc, #124]	; (8003cf8 <__NVIC_SetPriority+0xd4>)
 8003c7a:	1dfb      	adds	r3, r7, #7
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	b25b      	sxtb	r3, r3
 8003c80:	089b      	lsrs	r3, r3, #2
 8003c82:	430a      	orrs	r2, r1
 8003c84:	33c0      	adds	r3, #192	; 0xc0
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003c8a:	e031      	b.n	8003cf0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c8c:	4a1b      	ldr	r2, [pc, #108]	; (8003cfc <__NVIC_SetPriority+0xd8>)
 8003c8e:	1dfb      	adds	r3, r7, #7
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	0019      	movs	r1, r3
 8003c94:	230f      	movs	r3, #15
 8003c96:	400b      	ands	r3, r1
 8003c98:	3b08      	subs	r3, #8
 8003c9a:	089b      	lsrs	r3, r3, #2
 8003c9c:	3306      	adds	r3, #6
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	18d3      	adds	r3, r2, r3
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	1dfa      	adds	r2, r7, #7
 8003ca8:	7812      	ldrb	r2, [r2, #0]
 8003caa:	0011      	movs	r1, r2
 8003cac:	2203      	movs	r2, #3
 8003cae:	400a      	ands	r2, r1
 8003cb0:	00d2      	lsls	r2, r2, #3
 8003cb2:	21ff      	movs	r1, #255	; 0xff
 8003cb4:	4091      	lsls	r1, r2
 8003cb6:	000a      	movs	r2, r1
 8003cb8:	43d2      	mvns	r2, r2
 8003cba:	401a      	ands	r2, r3
 8003cbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	019b      	lsls	r3, r3, #6
 8003cc2:	22ff      	movs	r2, #255	; 0xff
 8003cc4:	401a      	ands	r2, r3
 8003cc6:	1dfb      	adds	r3, r7, #7
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	0018      	movs	r0, r3
 8003ccc:	2303      	movs	r3, #3
 8003cce:	4003      	ands	r3, r0
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003cd4:	4809      	ldr	r0, [pc, #36]	; (8003cfc <__NVIC_SetPriority+0xd8>)
 8003cd6:	1dfb      	adds	r3, r7, #7
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	001c      	movs	r4, r3
 8003cdc:	230f      	movs	r3, #15
 8003cde:	4023      	ands	r3, r4
 8003ce0:	3b08      	subs	r3, #8
 8003ce2:	089b      	lsrs	r3, r3, #2
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	3306      	adds	r3, #6
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	18c3      	adds	r3, r0, r3
 8003cec:	3304      	adds	r3, #4
 8003cee:	601a      	str	r2, [r3, #0]
}
 8003cf0:	46c0      	nop			; (mov r8, r8)
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b003      	add	sp, #12
 8003cf6:	bd90      	pop	{r4, r7, pc}
 8003cf8:	e000e100 	.word	0xe000e100
 8003cfc:	e000ed00 	.word	0xe000ed00

08003d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	1e5a      	subs	r2, r3, #1
 8003d0c:	2380      	movs	r3, #128	; 0x80
 8003d0e:	045b      	lsls	r3, r3, #17
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d301      	bcc.n	8003d18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d14:	2301      	movs	r3, #1
 8003d16:	e010      	b.n	8003d3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d18:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <SysTick_Config+0x44>)
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	3a01      	subs	r2, #1
 8003d1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d20:	2301      	movs	r3, #1
 8003d22:	425b      	negs	r3, r3
 8003d24:	2103      	movs	r1, #3
 8003d26:	0018      	movs	r0, r3
 8003d28:	f7ff ff7c 	bl	8003c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <SysTick_Config+0x44>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d32:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <SysTick_Config+0x44>)
 8003d34:	2207      	movs	r2, #7
 8003d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	b002      	add	sp, #8
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	e000e010 	.word	0xe000e010

08003d48 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	607a      	str	r2, [r7, #4]
 8003d52:	210f      	movs	r1, #15
 8003d54:	187b      	adds	r3, r7, r1
 8003d56:	1c02      	adds	r2, r0, #0
 8003d58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	187b      	adds	r3, r7, r1
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	b25b      	sxtb	r3, r3
 8003d62:	0011      	movs	r1, r2
 8003d64:	0018      	movs	r0, r3
 8003d66:	f7ff ff5d 	bl	8003c24 <__NVIC_SetPriority>
}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b004      	add	sp, #16
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	0002      	movs	r2, r0
 8003d7a:	1dfb      	adds	r3, r7, #7
 8003d7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d7e:	1dfb      	adds	r3, r7, #7
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	b25b      	sxtb	r3, r3
 8003d84:	0018      	movs	r0, r3
 8003d86:	f7ff ff33 	bl	8003bf0 <__NVIC_EnableIRQ>
}
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b002      	add	sp, #8
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b082      	sub	sp, #8
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f7ff ffaf 	bl	8003d00 <SysTick_Config>
 8003da2:	0003      	movs	r3, r0
}
 8003da4:	0018      	movs	r0, r3
 8003da6:	46bd      	mov	sp, r7
 8003da8:	b002      	add	sp, #8
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2221      	movs	r2, #33	; 0x21
 8003db8:	5c9b      	ldrb	r3, [r3, r2]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d008      	beq.n	8003dd2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2204      	movs	r2, #4
 8003dc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	2100      	movs	r1, #0
 8003dcc:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e020      	b.n	8003e14 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	210e      	movs	r1, #14
 8003dde:	438a      	bics	r2, r1
 8003de0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2101      	movs	r1, #1
 8003dee:	438a      	bics	r2, r1
 8003df0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	4091      	lsls	r1, r2
 8003dfe:	000a      	movs	r2, r1
 8003e00:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2221      	movs	r2, #33	; 0x21
 8003e06:	2101      	movs	r1, #1
 8003e08:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	2100      	movs	r1, #0
 8003e10:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	0018      	movs	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b002      	add	sp, #8
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e24:	210f      	movs	r1, #15
 8003e26:	187b      	adds	r3, r7, r1
 8003e28:	2200      	movs	r2, #0
 8003e2a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2221      	movs	r2, #33	; 0x21
 8003e30:	5c9b      	ldrb	r3, [r3, r2]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d006      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2204      	movs	r2, #4
 8003e3c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003e3e:	187b      	adds	r3, r7, r1
 8003e40:	2201      	movs	r2, #1
 8003e42:	701a      	strb	r2, [r3, #0]
 8003e44:	e028      	b.n	8003e98 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	210e      	movs	r1, #14
 8003e52:	438a      	bics	r2, r1
 8003e54:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2101      	movs	r1, #1
 8003e62:	438a      	bics	r2, r1
 8003e64:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6e:	2101      	movs	r1, #1
 8003e70:	4091      	lsls	r1, r2
 8003e72:	000a      	movs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2221      	movs	r2, #33	; 0x21
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2220      	movs	r2, #32
 8003e82:	2100      	movs	r1, #0
 8003e84:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d004      	beq.n	8003e98 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	0010      	movs	r0, r2
 8003e96:	4798      	blx	r3
    } 
  }
  return status;
 8003e98:	230f      	movs	r3, #15
 8003e9a:	18fb      	adds	r3, r7, r3
 8003e9c:	781b      	ldrb	r3, [r3, #0]
}
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	b004      	add	sp, #16
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eb6:	e155      	b.n	8004164 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4091      	lsls	r1, r2
 8003ec2:	000a      	movs	r2, r1
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d100      	bne.n	8003ed0 <HAL_GPIO_Init+0x28>
 8003ece:	e146      	b.n	800415e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2203      	movs	r2, #3
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d005      	beq.n	8003ee8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d130      	bne.n	8003f4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	2203      	movs	r2, #3
 8003ef4:	409a      	lsls	r2, r3
 8003ef6:	0013      	movs	r3, r2
 8003ef8:	43da      	mvns	r2, r3
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	4013      	ands	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	409a      	lsls	r2, r3
 8003f0a:	0013      	movs	r3, r2
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f1e:	2201      	movs	r2, #1
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	409a      	lsls	r2, r3
 8003f24:	0013      	movs	r3, r2
 8003f26:	43da      	mvns	r2, r3
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	091b      	lsrs	r3, r3, #4
 8003f34:	2201      	movs	r2, #1
 8003f36:	401a      	ands	r2, r3
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	0013      	movs	r3, r2
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2203      	movs	r2, #3
 8003f50:	4013      	ands	r3, r2
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d017      	beq.n	8003f86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	2203      	movs	r2, #3
 8003f62:	409a      	lsls	r2, r3
 8003f64:	0013      	movs	r3, r2
 8003f66:	43da      	mvns	r2, r3
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	409a      	lsls	r2, r3
 8003f78:	0013      	movs	r3, r2
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2203      	movs	r2, #3
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d123      	bne.n	8003fda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	08da      	lsrs	r2, r3, #3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3208      	adds	r2, #8
 8003f9a:	0092      	lsls	r2, r2, #2
 8003f9c:	58d3      	ldr	r3, [r2, r3]
 8003f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2207      	movs	r2, #7
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	220f      	movs	r2, #15
 8003faa:	409a      	lsls	r2, r3
 8003fac:	0013      	movs	r3, r2
 8003fae:	43da      	mvns	r2, r3
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2107      	movs	r1, #7
 8003fbe:	400b      	ands	r3, r1
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	409a      	lsls	r2, r3
 8003fc4:	0013      	movs	r3, r2
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	08da      	lsrs	r2, r3, #3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3208      	adds	r2, #8
 8003fd4:	0092      	lsls	r2, r2, #2
 8003fd6:	6939      	ldr	r1, [r7, #16]
 8003fd8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	0013      	movs	r3, r2
 8003fea:	43da      	mvns	r2, r3
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	401a      	ands	r2, r3
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	409a      	lsls	r2, r3
 8004000:	0013      	movs	r3, r2
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	4313      	orrs	r3, r2
 8004006:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	23c0      	movs	r3, #192	; 0xc0
 8004014:	029b      	lsls	r3, r3, #10
 8004016:	4013      	ands	r3, r2
 8004018:	d100      	bne.n	800401c <HAL_GPIO_Init+0x174>
 800401a:	e0a0      	b.n	800415e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800401c:	4b57      	ldr	r3, [pc, #348]	; (800417c <HAL_GPIO_Init+0x2d4>)
 800401e:	699a      	ldr	r2, [r3, #24]
 8004020:	4b56      	ldr	r3, [pc, #344]	; (800417c <HAL_GPIO_Init+0x2d4>)
 8004022:	2101      	movs	r1, #1
 8004024:	430a      	orrs	r2, r1
 8004026:	619a      	str	r2, [r3, #24]
 8004028:	4b54      	ldr	r3, [pc, #336]	; (800417c <HAL_GPIO_Init+0x2d4>)
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	2201      	movs	r2, #1
 800402e:	4013      	ands	r3, r2
 8004030:	60bb      	str	r3, [r7, #8]
 8004032:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004034:	4a52      	ldr	r2, [pc, #328]	; (8004180 <HAL_GPIO_Init+0x2d8>)
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	089b      	lsrs	r3, r3, #2
 800403a:	3302      	adds	r3, #2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	589b      	ldr	r3, [r3, r2]
 8004040:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2203      	movs	r2, #3
 8004046:	4013      	ands	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	220f      	movs	r2, #15
 800404c:	409a      	lsls	r2, r3
 800404e:	0013      	movs	r3, r2
 8004050:	43da      	mvns	r2, r3
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4013      	ands	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	2390      	movs	r3, #144	; 0x90
 800405c:	05db      	lsls	r3, r3, #23
 800405e:	429a      	cmp	r2, r3
 8004060:	d019      	beq.n	8004096 <HAL_GPIO_Init+0x1ee>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a47      	ldr	r2, [pc, #284]	; (8004184 <HAL_GPIO_Init+0x2dc>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d013      	beq.n	8004092 <HAL_GPIO_Init+0x1ea>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a46      	ldr	r2, [pc, #280]	; (8004188 <HAL_GPIO_Init+0x2e0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00d      	beq.n	800408e <HAL_GPIO_Init+0x1e6>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a45      	ldr	r2, [pc, #276]	; (800418c <HAL_GPIO_Init+0x2e4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d007      	beq.n	800408a <HAL_GPIO_Init+0x1e2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a44      	ldr	r2, [pc, #272]	; (8004190 <HAL_GPIO_Init+0x2e8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d101      	bne.n	8004086 <HAL_GPIO_Init+0x1de>
 8004082:	2304      	movs	r3, #4
 8004084:	e008      	b.n	8004098 <HAL_GPIO_Init+0x1f0>
 8004086:	2305      	movs	r3, #5
 8004088:	e006      	b.n	8004098 <HAL_GPIO_Init+0x1f0>
 800408a:	2303      	movs	r3, #3
 800408c:	e004      	b.n	8004098 <HAL_GPIO_Init+0x1f0>
 800408e:	2302      	movs	r3, #2
 8004090:	e002      	b.n	8004098 <HAL_GPIO_Init+0x1f0>
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <HAL_GPIO_Init+0x1f0>
 8004096:	2300      	movs	r3, #0
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	2103      	movs	r1, #3
 800409c:	400a      	ands	r2, r1
 800409e:	0092      	lsls	r2, r2, #2
 80040a0:	4093      	lsls	r3, r2
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040a8:	4935      	ldr	r1, [pc, #212]	; (8004180 <HAL_GPIO_Init+0x2d8>)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	089b      	lsrs	r3, r3, #2
 80040ae:	3302      	adds	r3, #2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040b6:	4b37      	ldr	r3, [pc, #220]	; (8004194 <HAL_GPIO_Init+0x2ec>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	43da      	mvns	r2, r3
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	4013      	ands	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	2380      	movs	r3, #128	; 0x80
 80040cc:	025b      	lsls	r3, r3, #9
 80040ce:	4013      	ands	r3, r2
 80040d0:	d003      	beq.n	80040da <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80040da:	4b2e      	ldr	r3, [pc, #184]	; (8004194 <HAL_GPIO_Init+0x2ec>)
 80040dc:	693a      	ldr	r2, [r7, #16]
 80040de:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80040e0:	4b2c      	ldr	r3, [pc, #176]	; (8004194 <HAL_GPIO_Init+0x2ec>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	43da      	mvns	r2, r3
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	4013      	ands	r3, r2
 80040ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	2380      	movs	r3, #128	; 0x80
 80040f6:	029b      	lsls	r3, r3, #10
 80040f8:	4013      	ands	r3, r2
 80040fa:	d003      	beq.n	8004104 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	4313      	orrs	r3, r2
 8004102:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004104:	4b23      	ldr	r3, [pc, #140]	; (8004194 <HAL_GPIO_Init+0x2ec>)
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800410a:	4b22      	ldr	r3, [pc, #136]	; (8004194 <HAL_GPIO_Init+0x2ec>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	43da      	mvns	r2, r3
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	4013      	ands	r3, r2
 8004118:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	2380      	movs	r3, #128	; 0x80
 8004120:	035b      	lsls	r3, r3, #13
 8004122:	4013      	ands	r3, r2
 8004124:	d003      	beq.n	800412e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800412e:	4b19      	ldr	r3, [pc, #100]	; (8004194 <HAL_GPIO_Init+0x2ec>)
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004134:	4b17      	ldr	r3, [pc, #92]	; (8004194 <HAL_GPIO_Init+0x2ec>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	43da      	mvns	r2, r3
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	4013      	ands	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	2380      	movs	r3, #128	; 0x80
 800414a:	039b      	lsls	r3, r3, #14
 800414c:	4013      	ands	r3, r2
 800414e:	d003      	beq.n	8004158 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004158:	4b0e      	ldr	r3, [pc, #56]	; (8004194 <HAL_GPIO_Init+0x2ec>)
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	3301      	adds	r3, #1
 8004162:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	40da      	lsrs	r2, r3
 800416c:	1e13      	subs	r3, r2, #0
 800416e:	d000      	beq.n	8004172 <HAL_GPIO_Init+0x2ca>
 8004170:	e6a2      	b.n	8003eb8 <HAL_GPIO_Init+0x10>
  } 
}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	46c0      	nop			; (mov r8, r8)
 8004176:	46bd      	mov	sp, r7
 8004178:	b006      	add	sp, #24
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40021000 	.word	0x40021000
 8004180:	40010000 	.word	0x40010000
 8004184:	48000400 	.word	0x48000400
 8004188:	48000800 	.word	0x48000800
 800418c:	48000c00 	.word	0x48000c00
 8004190:	48001000 	.word	0x48001000
 8004194:	40010400 	.word	0x40010400

08004198 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	000a      	movs	r2, r1
 80041a2:	1cbb      	adds	r3, r7, #2
 80041a4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	1cba      	adds	r2, r7, #2
 80041ac:	8812      	ldrh	r2, [r2, #0]
 80041ae:	4013      	ands	r3, r2
 80041b0:	d004      	beq.n	80041bc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80041b2:	230f      	movs	r3, #15
 80041b4:	18fb      	adds	r3, r7, r3
 80041b6:	2201      	movs	r2, #1
 80041b8:	701a      	strb	r2, [r3, #0]
 80041ba:	e003      	b.n	80041c4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041bc:	230f      	movs	r3, #15
 80041be:	18fb      	adds	r3, r7, r3
 80041c0:	2200      	movs	r2, #0
 80041c2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80041c4:	230f      	movs	r3, #15
 80041c6:	18fb      	adds	r3, r7, r3
 80041c8:	781b      	ldrb	r3, [r3, #0]
  }
 80041ca:	0018      	movs	r0, r3
 80041cc:	46bd      	mov	sp, r7
 80041ce:	b004      	add	sp, #16
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b082      	sub	sp, #8
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	0008      	movs	r0, r1
 80041dc:	0011      	movs	r1, r2
 80041de:	1cbb      	adds	r3, r7, #2
 80041e0:	1c02      	adds	r2, r0, #0
 80041e2:	801a      	strh	r2, [r3, #0]
 80041e4:	1c7b      	adds	r3, r7, #1
 80041e6:	1c0a      	adds	r2, r1, #0
 80041e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041ea:	1c7b      	adds	r3, r7, #1
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d004      	beq.n	80041fc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041f2:	1cbb      	adds	r3, r7, #2
 80041f4:	881a      	ldrh	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041fa:	e003      	b.n	8004204 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041fc:	1cbb      	adds	r3, r7, #2
 80041fe:	881a      	ldrh	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004204:	46c0      	nop			; (mov r8, r8)
 8004206:	46bd      	mov	sp, r7
 8004208:	b002      	add	sp, #8
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	000a      	movs	r2, r1
 8004216:	1cbb      	adds	r3, r7, #2
 8004218:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004220:	1cbb      	adds	r3, r7, #2
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	4013      	ands	r3, r2
 8004228:	041a      	lsls	r2, r3, #16
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	43db      	mvns	r3, r3
 800422e:	1cb9      	adds	r1, r7, #2
 8004230:	8809      	ldrh	r1, [r1, #0]
 8004232:	400b      	ands	r3, r1
 8004234:	431a      	orrs	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	619a      	str	r2, [r3, #24]
}
 800423a:	46c0      	nop			; (mov r8, r8)
 800423c:	46bd      	mov	sp, r7
 800423e:	b004      	add	sp, #16
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	0002      	movs	r2, r0
 800424c:	1dbb      	adds	r3, r7, #6
 800424e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004250:	4b09      	ldr	r3, [pc, #36]	; (8004278 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	1dba      	adds	r2, r7, #6
 8004256:	8812      	ldrh	r2, [r2, #0]
 8004258:	4013      	ands	r3, r2
 800425a:	d008      	beq.n	800426e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800425c:	4b06      	ldr	r3, [pc, #24]	; (8004278 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800425e:	1dba      	adds	r2, r7, #6
 8004260:	8812      	ldrh	r2, [r2, #0]
 8004262:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004264:	1dbb      	adds	r3, r7, #6
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	0018      	movs	r0, r3
 800426a:	f7fc ff55 	bl	8001118 <HAL_GPIO_EXTI_Callback>
  }
}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	46bd      	mov	sp, r7
 8004272:	b002      	add	sp, #8
 8004274:	bd80      	pop	{r7, pc}
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	40010400 	.word	0x40010400

0800427c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800427c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800427e:	b08b      	sub	sp, #44	; 0x2c
 8004280:	af06      	add	r7, sp, #24
 8004282:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e0ff      	b.n	800448e <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a81      	ldr	r2, [pc, #516]	; (8004498 <HAL_PCD_Init+0x21c>)
 8004292:	5c9b      	ldrb	r3, [r3, r2]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d108      	bne.n	80042ac <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	23aa      	movs	r3, #170	; 0xaa
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	2100      	movs	r1, #0
 80042a2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	0018      	movs	r0, r3
 80042a8:	f008 fd70 	bl	800cd8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a7a      	ldr	r2, [pc, #488]	; (8004498 <HAL_PCD_Init+0x21c>)
 80042b0:	2103      	movs	r1, #3
 80042b2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	0018      	movs	r0, r3
 80042ba:	f004 fe0f 	bl	8008edc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042be:	230f      	movs	r3, #15
 80042c0:	18fb      	adds	r3, r7, r3
 80042c2:	2200      	movs	r2, #0
 80042c4:	701a      	strb	r2, [r3, #0]
 80042c6:	e058      	b.n	800437a <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042c8:	200f      	movs	r0, #15
 80042ca:	183b      	adds	r3, r7, r0
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	1c5a      	adds	r2, r3, #1
 80042d2:	0013      	movs	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	189b      	adds	r3, r3, r2
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	18cb      	adds	r3, r1, r3
 80042dc:	3301      	adds	r3, #1
 80042de:	2201      	movs	r2, #1
 80042e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042e2:	183b      	adds	r3, r7, r0
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	0013      	movs	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	189b      	adds	r3, r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	183a      	adds	r2, r7, r0
 80042f4:	7812      	ldrb	r2, [r2, #0]
 80042f6:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80042f8:	0004      	movs	r4, r0
 80042fa:	183b      	adds	r3, r7, r0
 80042fc:	781a      	ldrb	r2, [r3, #0]
 80042fe:	193b      	adds	r3, r7, r4
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	b298      	uxth	r0, r3
 8004304:	6879      	ldr	r1, [r7, #4]
 8004306:	0013      	movs	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	189b      	adds	r3, r3, r2
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	18cb      	adds	r3, r1, r3
 8004310:	3336      	adds	r3, #54	; 0x36
 8004312:	1c02      	adds	r2, r0, #0
 8004314:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004316:	193b      	adds	r3, r7, r4
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	0013      	movs	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	189b      	adds	r3, r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	18cb      	adds	r3, r1, r3
 8004328:	3303      	adds	r3, #3
 800432a:	2200      	movs	r2, #0
 800432c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800432e:	193b      	adds	r3, r7, r4
 8004330:	781a      	ldrb	r2, [r3, #0]
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	0013      	movs	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	189b      	adds	r3, r3, r2
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	18cb      	adds	r3, r1, r3
 800433e:	3338      	adds	r3, #56	; 0x38
 8004340:	2200      	movs	r2, #0
 8004342:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004344:	193b      	adds	r3, r7, r4
 8004346:	781a      	ldrb	r2, [r3, #0]
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	0013      	movs	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	189b      	adds	r3, r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	18cb      	adds	r3, r1, r3
 8004354:	333c      	adds	r3, #60	; 0x3c
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800435a:	193b      	adds	r3, r7, r4
 800435c:	781a      	ldrb	r2, [r3, #0]
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	0013      	movs	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	189b      	adds	r3, r3, r2
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	18cb      	adds	r3, r1, r3
 800436a:	3340      	adds	r3, #64	; 0x40
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004370:	193b      	adds	r3, r7, r4
 8004372:	781a      	ldrb	r2, [r3, #0]
 8004374:	193b      	adds	r3, r7, r4
 8004376:	3201      	adds	r2, #1
 8004378:	701a      	strb	r2, [r3, #0]
 800437a:	210f      	movs	r1, #15
 800437c:	187b      	adds	r3, r7, r1
 800437e:	781a      	ldrb	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	429a      	cmp	r2, r3
 8004386:	d39f      	bcc.n	80042c8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004388:	187b      	adds	r3, r7, r1
 800438a:	2200      	movs	r2, #0
 800438c:	701a      	strb	r2, [r3, #0]
 800438e:	e056      	b.n	800443e <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004390:	240f      	movs	r4, #15
 8004392:	193b      	adds	r3, r7, r4
 8004394:	781a      	ldrb	r2, [r3, #0]
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	236a      	movs	r3, #106	; 0x6a
 800439a:	33ff      	adds	r3, #255	; 0xff
 800439c:	0019      	movs	r1, r3
 800439e:	0013      	movs	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	189b      	adds	r3, r3, r2
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	18c3      	adds	r3, r0, r3
 80043a8:	185b      	adds	r3, r3, r1
 80043aa:	2200      	movs	r2, #0
 80043ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80043ae:	193b      	adds	r3, r7, r4
 80043b0:	781a      	ldrb	r2, [r3, #0]
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	23b4      	movs	r3, #180	; 0xb4
 80043b6:	0059      	lsls	r1, r3, #1
 80043b8:	0013      	movs	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	189b      	adds	r3, r3, r2
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	18c3      	adds	r3, r0, r3
 80043c2:	185b      	adds	r3, r3, r1
 80043c4:	193a      	adds	r2, r7, r4
 80043c6:	7812      	ldrb	r2, [r2, #0]
 80043c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80043ca:	193b      	adds	r3, r7, r4
 80043cc:	781a      	ldrb	r2, [r3, #0]
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	236c      	movs	r3, #108	; 0x6c
 80043d2:	33ff      	adds	r3, #255	; 0xff
 80043d4:	0019      	movs	r1, r3
 80043d6:	0013      	movs	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	189b      	adds	r3, r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	18c3      	adds	r3, r0, r3
 80043e0:	185b      	adds	r3, r3, r1
 80043e2:	2200      	movs	r2, #0
 80043e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80043e6:	193b      	adds	r3, r7, r4
 80043e8:	781a      	ldrb	r2, [r3, #0]
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	23bc      	movs	r3, #188	; 0xbc
 80043ee:	0059      	lsls	r1, r3, #1
 80043f0:	0013      	movs	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	189b      	adds	r3, r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	18c3      	adds	r3, r0, r3
 80043fa:	185b      	adds	r3, r3, r1
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004400:	193b      	adds	r3, r7, r4
 8004402:	781a      	ldrb	r2, [r3, #0]
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	23be      	movs	r3, #190	; 0xbe
 8004408:	0059      	lsls	r1, r3, #1
 800440a:	0013      	movs	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	189b      	adds	r3, r3, r2
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	18c3      	adds	r3, r0, r3
 8004414:	185b      	adds	r3, r3, r1
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800441a:	193b      	adds	r3, r7, r4
 800441c:	781a      	ldrb	r2, [r3, #0]
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	23c0      	movs	r3, #192	; 0xc0
 8004422:	0059      	lsls	r1, r3, #1
 8004424:	0013      	movs	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	189b      	adds	r3, r3, r2
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	18c3      	adds	r3, r0, r3
 800442e:	185b      	adds	r3, r3, r1
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004434:	193b      	adds	r3, r7, r4
 8004436:	781a      	ldrb	r2, [r3, #0]
 8004438:	193b      	adds	r3, r7, r4
 800443a:	3201      	adds	r2, #1
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	230f      	movs	r3, #15
 8004440:	18fb      	adds	r3, r7, r3
 8004442:	781a      	ldrb	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	429a      	cmp	r2, r3
 800444a:	d3a1      	bcc.n	8004390 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6818      	ldr	r0, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	466a      	mov	r2, sp
 8004454:	0011      	movs	r1, r2
 8004456:	001a      	movs	r2, r3
 8004458:	3210      	adds	r2, #16
 800445a:	ca70      	ldmia	r2!, {r4, r5, r6}
 800445c:	c170      	stmia	r1!, {r4, r5, r6}
 800445e:	ca30      	ldmia	r2!, {r4, r5}
 8004460:	c130      	stmia	r1!, {r4, r5}
 8004462:	6859      	ldr	r1, [r3, #4]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f004 fd52 	bl	8008f10 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2224      	movs	r2, #36	; 0x24
 8004470:	2100      	movs	r1, #0
 8004472:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a08      	ldr	r2, [pc, #32]	; (8004498 <HAL_PCD_Init+0x21c>)
 8004478:	2101      	movs	r1, #1
 800447a:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d103      	bne.n	800448c <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	0018      	movs	r0, r3
 8004488:	f001 fd34 	bl	8005ef4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	0018      	movs	r0, r3
 8004490:	46bd      	mov	sp, r7
 8004492:	b005      	add	sp, #20
 8004494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	000002a9 	.word	0x000002a9

0800449c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	23aa      	movs	r3, #170	; 0xaa
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	5cd3      	ldrb	r3, [r2, r3]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_PCD_Start+0x18>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e014      	b.n	80044de <HAL_PCD_Start+0x42>
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	23aa      	movs	r3, #170	; 0xaa
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	2101      	movs	r1, #1
 80044bc:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	0018      	movs	r0, r3
 80044c4:	f004 fcf4 	bl	8008eb0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	0018      	movs	r0, r3
 80044ce:	f006 fc4f 	bl	800ad70 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	23aa      	movs	r3, #170	; 0xaa
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	2100      	movs	r1, #0
 80044da:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	0018      	movs	r0, r3
 80044e0:	46bd      	mov	sp, r7
 80044e2:	b002      	add	sp, #8
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	0018      	movs	r0, r3
 80044f6:	f006 fc51 	bl	800ad9c <USB_ReadInterrupts>
 80044fa:	0002      	movs	r2, r0
 80044fc:	2380      	movs	r3, #128	; 0x80
 80044fe:	021b      	lsls	r3, r3, #8
 8004500:	401a      	ands	r2, r3
 8004502:	2380      	movs	r3, #128	; 0x80
 8004504:	021b      	lsls	r3, r3, #8
 8004506:	429a      	cmp	r2, r3
 8004508:	d103      	bne.n	8004512 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	0018      	movs	r0, r3
 800450e:	f000 fbbb 	bl	8004c88 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	0018      	movs	r0, r3
 8004518:	f006 fc40 	bl	800ad9c <USB_ReadInterrupts>
 800451c:	0002      	movs	r2, r0
 800451e:	2380      	movs	r3, #128	; 0x80
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	401a      	ands	r2, r3
 8004524:	2380      	movs	r3, #128	; 0x80
 8004526:	00db      	lsls	r3, r3, #3
 8004528:	429a      	cmp	r2, r3
 800452a:	d114      	bne.n	8004556 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2244      	movs	r2, #68	; 0x44
 8004532:	5a9b      	ldrh	r3, [r3, r2]
 8004534:	b29a      	uxth	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	49a2      	ldr	r1, [pc, #648]	; (80047c4 <HAL_PCD_IRQHandler+0x2dc>)
 800453c:	400a      	ands	r2, r1
 800453e:	b291      	uxth	r1, r2
 8004540:	2244      	movs	r2, #68	; 0x44
 8004542:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	0018      	movs	r0, r3
 8004548:	f008 fcab 	bl	800cea2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2100      	movs	r1, #0
 8004550:	0018      	movs	r0, r3
 8004552:	f000 f945 	bl	80047e0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	0018      	movs	r0, r3
 800455c:	f006 fc1e 	bl	800ad9c <USB_ReadInterrupts>
 8004560:	0002      	movs	r2, r0
 8004562:	2380      	movs	r3, #128	; 0x80
 8004564:	01db      	lsls	r3, r3, #7
 8004566:	401a      	ands	r2, r3
 8004568:	2380      	movs	r3, #128	; 0x80
 800456a:	01db      	lsls	r3, r3, #7
 800456c:	429a      	cmp	r2, r3
 800456e:	d10b      	bne.n	8004588 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2244      	movs	r2, #68	; 0x44
 8004576:	5a9b      	ldrh	r3, [r3, r2]
 8004578:	b29a      	uxth	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4992      	ldr	r1, [pc, #584]	; (80047c8 <HAL_PCD_IRQHandler+0x2e0>)
 8004580:	400a      	ands	r2, r1
 8004582:	b291      	uxth	r1, r2
 8004584:	2244      	movs	r2, #68	; 0x44
 8004586:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	0018      	movs	r0, r3
 800458e:	f006 fc05 	bl	800ad9c <USB_ReadInterrupts>
 8004592:	0002      	movs	r2, r0
 8004594:	2380      	movs	r3, #128	; 0x80
 8004596:	019b      	lsls	r3, r3, #6
 8004598:	401a      	ands	r2, r3
 800459a:	2380      	movs	r3, #128	; 0x80
 800459c:	019b      	lsls	r3, r3, #6
 800459e:	429a      	cmp	r2, r3
 80045a0:	d10b      	bne.n	80045ba <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2244      	movs	r2, #68	; 0x44
 80045a8:	5a9b      	ldrh	r3, [r3, r2]
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4986      	ldr	r1, [pc, #536]	; (80047cc <HAL_PCD_IRQHandler+0x2e4>)
 80045b2:	400a      	ands	r2, r1
 80045b4:	b291      	uxth	r1, r2
 80045b6:	2244      	movs	r2, #68	; 0x44
 80045b8:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	0018      	movs	r0, r3
 80045c0:	f006 fbec 	bl	800ad9c <USB_ReadInterrupts>
 80045c4:	0002      	movs	r2, r0
 80045c6:	2380      	movs	r3, #128	; 0x80
 80045c8:	015b      	lsls	r3, r3, #5
 80045ca:	401a      	ands	r2, r3
 80045cc:	2380      	movs	r3, #128	; 0x80
 80045ce:	015b      	lsls	r3, r3, #5
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d137      	bne.n	8004644 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2240      	movs	r2, #64	; 0x40
 80045da:	5a9b      	ldrh	r3, [r3, r2]
 80045dc:	b29a      	uxth	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2104      	movs	r1, #4
 80045e4:	438a      	bics	r2, r1
 80045e6:	b291      	uxth	r1, r2
 80045e8:	2240      	movs	r2, #64	; 0x40
 80045ea:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2240      	movs	r2, #64	; 0x40
 80045f2:	5a9b      	ldrh	r3, [r3, r2]
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2108      	movs	r1, #8
 80045fc:	438a      	bics	r2, r1
 80045fe:	b291      	uxth	r1, r2
 8004600:	2240      	movs	r2, #64	; 0x40
 8004602:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	23b8      	movs	r3, #184	; 0xb8
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	5cd3      	ldrb	r3, [r2, r3]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d109      	bne.n	8004624 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	23b8      	movs	r3, #184	; 0xb8
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	2100      	movs	r1, #0
 8004618:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2100      	movs	r1, #0
 800461e:	0018      	movs	r0, r3
 8004620:	f001 fc92 	bl	8005f48 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	0018      	movs	r0, r3
 8004628:	f008 fc7c 	bl	800cf24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2244      	movs	r2, #68	; 0x44
 8004632:	5a9b      	ldrh	r3, [r3, r2]
 8004634:	b29a      	uxth	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4965      	ldr	r1, [pc, #404]	; (80047d0 <HAL_PCD_IRQHandler+0x2e8>)
 800463c:	400a      	ands	r2, r1
 800463e:	b291      	uxth	r1, r2
 8004640:	2244      	movs	r2, #68	; 0x44
 8004642:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	0018      	movs	r0, r3
 800464a:	f006 fba7 	bl	800ad9c <USB_ReadInterrupts>
 800464e:	0002      	movs	r2, r0
 8004650:	2380      	movs	r3, #128	; 0x80
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	401a      	ands	r2, r3
 8004656:	2380      	movs	r3, #128	; 0x80
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	429a      	cmp	r2, r3
 800465c:	d127      	bne.n	80046ae <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2240      	movs	r2, #64	; 0x40
 8004664:	5a9b      	ldrh	r3, [r3, r2]
 8004666:	b29a      	uxth	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2108      	movs	r1, #8
 800466e:	430a      	orrs	r2, r1
 8004670:	b291      	uxth	r1, r2
 8004672:	2240      	movs	r2, #64	; 0x40
 8004674:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2244      	movs	r2, #68	; 0x44
 800467c:	5a9b      	ldrh	r3, [r3, r2]
 800467e:	b29a      	uxth	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4953      	ldr	r1, [pc, #332]	; (80047d4 <HAL_PCD_IRQHandler+0x2ec>)
 8004686:	400a      	ands	r2, r1
 8004688:	b291      	uxth	r1, r2
 800468a:	2244      	movs	r2, #68	; 0x44
 800468c:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2240      	movs	r2, #64	; 0x40
 8004694:	5a9b      	ldrh	r3, [r3, r2]
 8004696:	b29a      	uxth	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2104      	movs	r1, #4
 800469e:	430a      	orrs	r2, r1
 80046a0:	b291      	uxth	r1, r2
 80046a2:	2240      	movs	r2, #64	; 0x40
 80046a4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	0018      	movs	r0, r3
 80046aa:	f008 fc1f 	bl	800ceec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	0018      	movs	r0, r3
 80046b4:	f006 fb72 	bl	800ad9c <USB_ReadInterrupts>
 80046b8:	0003      	movs	r3, r0
 80046ba:	2280      	movs	r2, #128	; 0x80
 80046bc:	4013      	ands	r3, r2
 80046be:	2b80      	cmp	r3, #128	; 0x80
 80046c0:	d145      	bne.n	800474e <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2244      	movs	r2, #68	; 0x44
 80046c8:	5a9b      	ldrh	r3, [r3, r2]
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2180      	movs	r1, #128	; 0x80
 80046d2:	438a      	bics	r2, r1
 80046d4:	b291      	uxth	r1, r2
 80046d6:	2244      	movs	r2, #68	; 0x44
 80046d8:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	23b8      	movs	r3, #184	; 0xb8
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	5cd3      	ldrb	r3, [r2, r3]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d12f      	bne.n	8004746 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2240      	movs	r2, #64	; 0x40
 80046ec:	5a9b      	ldrh	r3, [r3, r2]
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2104      	movs	r1, #4
 80046f6:	430a      	orrs	r2, r1
 80046f8:	b291      	uxth	r1, r2
 80046fa:	2240      	movs	r2, #64	; 0x40
 80046fc:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2240      	movs	r2, #64	; 0x40
 8004704:	5a9b      	ldrh	r3, [r3, r2]
 8004706:	b29a      	uxth	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2108      	movs	r1, #8
 800470e:	430a      	orrs	r2, r1
 8004710:	b291      	uxth	r1, r2
 8004712:	2240      	movs	r2, #64	; 0x40
 8004714:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	23b8      	movs	r3, #184	; 0xb8
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	2101      	movs	r1, #1
 800471e:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2254      	movs	r2, #84	; 0x54
 8004726:	5a9b      	ldrh	r3, [r3, r2]
 8004728:	b29b      	uxth	r3, r3
 800472a:	089b      	lsrs	r3, r3, #2
 800472c:	223c      	movs	r2, #60	; 0x3c
 800472e:	4013      	ands	r3, r2
 8004730:	0019      	movs	r1, r3
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	23b9      	movs	r3, #185	; 0xb9
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2101      	movs	r1, #1
 800473e:	0018      	movs	r0, r3
 8004740:	f001 fc02 	bl	8005f48 <HAL_PCDEx_LPM_Callback>
 8004744:	e003      	b.n	800474e <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	0018      	movs	r0, r3
 800474a:	f008 fbcf 	bl	800ceec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	0018      	movs	r0, r3
 8004754:	f006 fb22 	bl	800ad9c <USB_ReadInterrupts>
 8004758:	0002      	movs	r2, r0
 800475a:	2380      	movs	r3, #128	; 0x80
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	401a      	ands	r2, r3
 8004760:	2380      	movs	r3, #128	; 0x80
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	429a      	cmp	r2, r3
 8004766:	d10f      	bne.n	8004788 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2244      	movs	r2, #68	; 0x44
 800476e:	5a9b      	ldrh	r3, [r3, r2]
 8004770:	b29a      	uxth	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4918      	ldr	r1, [pc, #96]	; (80047d8 <HAL_PCD_IRQHandler+0x2f0>)
 8004778:	400a      	ands	r2, r1
 800477a:	b291      	uxth	r1, r2
 800477c:	2244      	movs	r2, #68	; 0x44
 800477e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	0018      	movs	r0, r3
 8004784:	f008 fb7e 	bl	800ce84 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	0018      	movs	r0, r3
 800478e:	f006 fb05 	bl	800ad9c <USB_ReadInterrupts>
 8004792:	0002      	movs	r2, r0
 8004794:	2380      	movs	r3, #128	; 0x80
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	401a      	ands	r2, r3
 800479a:	2380      	movs	r3, #128	; 0x80
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	429a      	cmp	r2, r3
 80047a0:	d10b      	bne.n	80047ba <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2244      	movs	r2, #68	; 0x44
 80047a8:	5a9b      	ldrh	r3, [r3, r2]
 80047aa:	b29a      	uxth	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	490a      	ldr	r1, [pc, #40]	; (80047dc <HAL_PCD_IRQHandler+0x2f4>)
 80047b2:	400a      	ands	r2, r1
 80047b4:	b291      	uxth	r1, r2
 80047b6:	2244      	movs	r2, #68	; 0x44
 80047b8:	5299      	strh	r1, [r3, r2]
  }
}
 80047ba:	46c0      	nop			; (mov r8, r8)
 80047bc:	46bd      	mov	sp, r7
 80047be:	b002      	add	sp, #8
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	46c0      	nop			; (mov r8, r8)
 80047c4:	fffffbff 	.word	0xfffffbff
 80047c8:	ffffbfff 	.word	0xffffbfff
 80047cc:	ffffdfff 	.word	0xffffdfff
 80047d0:	ffffefff 	.word	0xffffefff
 80047d4:	fffff7ff 	.word	0xfffff7ff
 80047d8:	fffffdff 	.word	0xfffffdff
 80047dc:	fffffeff 	.word	0xfffffeff

080047e0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	000a      	movs	r2, r1
 80047ea:	1cfb      	adds	r3, r7, #3
 80047ec:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	23aa      	movs	r3, #170	; 0xaa
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	5cd3      	ldrb	r3, [r2, r3]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_PCD_SetAddress+0x1e>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e017      	b.n	800482e <HAL_PCD_SetAddress+0x4e>
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	23aa      	movs	r3, #170	; 0xaa
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	2101      	movs	r1, #1
 8004806:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	1cfa      	adds	r2, r7, #3
 800480c:	2124      	movs	r1, #36	; 0x24
 800480e:	7812      	ldrb	r2, [r2, #0]
 8004810:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	1cfb      	adds	r3, r7, #3
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	0019      	movs	r1, r3
 800481c:	0010      	movs	r0, r2
 800481e:	f006 fa93 	bl	800ad48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	23aa      	movs	r3, #170	; 0xaa
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	2100      	movs	r1, #0
 800482a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	0018      	movs	r0, r3
 8004830:	46bd      	mov	sp, r7
 8004832:	b002      	add	sp, #8
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004836:	b590      	push	{r4, r7, lr}
 8004838:	b085      	sub	sp, #20
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	000c      	movs	r4, r1
 8004840:	0010      	movs	r0, r2
 8004842:	0019      	movs	r1, r3
 8004844:	1cfb      	adds	r3, r7, #3
 8004846:	1c22      	adds	r2, r4, #0
 8004848:	701a      	strb	r2, [r3, #0]
 800484a:	003b      	movs	r3, r7
 800484c:	1c02      	adds	r2, r0, #0
 800484e:	801a      	strh	r2, [r3, #0]
 8004850:	1cbb      	adds	r3, r7, #2
 8004852:	1c0a      	adds	r2, r1, #0
 8004854:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004856:	230b      	movs	r3, #11
 8004858:	18fb      	adds	r3, r7, r3
 800485a:	2200      	movs	r2, #0
 800485c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800485e:	1cfb      	adds	r3, r7, #3
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	b25b      	sxtb	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	da0f      	bge.n	8004888 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004868:	1cfb      	adds	r3, r7, #3
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2207      	movs	r2, #7
 800486e:	4013      	ands	r3, r2
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	0013      	movs	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	189b      	adds	r3, r3, r2
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	18d3      	adds	r3, r2, r3
 800487e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2201      	movs	r2, #1
 8004884:	705a      	strb	r2, [r3, #1]
 8004886:	e00f      	b.n	80048a8 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004888:	1cfb      	adds	r3, r7, #3
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2207      	movs	r2, #7
 800488e:	401a      	ands	r2, r3
 8004890:	0013      	movs	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	189b      	adds	r3, r3, r2
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	3369      	adds	r3, #105	; 0x69
 800489a:	33ff      	adds	r3, #255	; 0xff
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	18d3      	adds	r3, r2, r3
 80048a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80048a8:	1cfb      	adds	r3, r7, #3
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	2207      	movs	r2, #7
 80048ae:	4013      	ands	r3, r2
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80048b6:	003b      	movs	r3, r7
 80048b8:	881a      	ldrh	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1cba      	adds	r2, r7, #2
 80048c2:	7812      	ldrb	r2, [r2, #0]
 80048c4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	785b      	ldrb	r3, [r3, #1]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d004      	beq.n	80048d8 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80048d8:	1cbb      	adds	r3, r7, #2
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d102      	bne.n	80048e6 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	23aa      	movs	r3, #170	; 0xaa
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	5cd3      	ldrb	r3, [r2, r3]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <HAL_PCD_EP_Open+0xc0>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e013      	b.n	800491e <HAL_PCD_EP_Open+0xe8>
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	23aa      	movs	r3, #170	; 0xaa
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	2101      	movs	r1, #1
 80048fe:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	0011      	movs	r1, r2
 8004908:	0018      	movs	r0, r3
 800490a:	f004 fb2d 	bl	8008f68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	23aa      	movs	r3, #170	; 0xaa
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	2100      	movs	r1, #0
 8004916:	54d1      	strb	r1, [r2, r3]

  return ret;
 8004918:	230b      	movs	r3, #11
 800491a:	18fb      	adds	r3, r7, r3
 800491c:	781b      	ldrb	r3, [r3, #0]
}
 800491e:	0018      	movs	r0, r3
 8004920:	46bd      	mov	sp, r7
 8004922:	b005      	add	sp, #20
 8004924:	bd90      	pop	{r4, r7, pc}

08004926 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	000a      	movs	r2, r1
 8004930:	1cfb      	adds	r3, r7, #3
 8004932:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004934:	1cfb      	adds	r3, r7, #3
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	b25b      	sxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	da0f      	bge.n	800495e <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800493e:	1cfb      	adds	r3, r7, #3
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	2207      	movs	r2, #7
 8004944:	4013      	ands	r3, r2
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	0013      	movs	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	189b      	adds	r3, r3, r2
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	18d3      	adds	r3, r2, r3
 8004954:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2201      	movs	r2, #1
 800495a:	705a      	strb	r2, [r3, #1]
 800495c:	e00f      	b.n	800497e <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800495e:	1cfb      	adds	r3, r7, #3
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	2207      	movs	r2, #7
 8004964:	401a      	ands	r2, r3
 8004966:	0013      	movs	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	189b      	adds	r3, r3, r2
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	3369      	adds	r3, #105	; 0x69
 8004970:	33ff      	adds	r3, #255	; 0xff
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	18d3      	adds	r3, r2, r3
 8004976:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800497e:	1cfb      	adds	r3, r7, #3
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	2207      	movs	r2, #7
 8004984:	4013      	ands	r3, r2
 8004986:	b2da      	uxtb	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	23aa      	movs	r3, #170	; 0xaa
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	5cd3      	ldrb	r3, [r2, r3]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_PCD_EP_Close+0x76>
 8004998:	2302      	movs	r3, #2
 800499a:	e011      	b.n	80049c0 <HAL_PCD_EP_Close+0x9a>
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	23aa      	movs	r3, #170	; 0xaa
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	2101      	movs	r1, #1
 80049a4:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	0011      	movs	r1, r2
 80049ae:	0018      	movs	r0, r3
 80049b0:	f004 fe4e 	bl	8009650 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	23aa      	movs	r3, #170	; 0xaa
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	2100      	movs	r1, #0
 80049bc:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	0018      	movs	r0, r3
 80049c2:	46bd      	mov	sp, r7
 80049c4:	b004      	add	sp, #16
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	607a      	str	r2, [r7, #4]
 80049d2:	603b      	str	r3, [r7, #0]
 80049d4:	200b      	movs	r0, #11
 80049d6:	183b      	adds	r3, r7, r0
 80049d8:	1c0a      	adds	r2, r1, #0
 80049da:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049dc:	0001      	movs	r1, r0
 80049de:	187b      	adds	r3, r7, r1
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	2207      	movs	r2, #7
 80049e4:	401a      	ands	r2, r3
 80049e6:	0013      	movs	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	189b      	adds	r3, r3, r2
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	3369      	adds	r3, #105	; 0x69
 80049f0:	33ff      	adds	r3, #255	; 0xff
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	18d3      	adds	r3, r2, r3
 80049f6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2200      	movs	r2, #0
 8004a08:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a10:	187b      	adds	r3, r7, r1
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2207      	movs	r2, #7
 8004a16:	4013      	ands	r3, r2
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a1e:	187b      	adds	r3, r7, r1
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	2207      	movs	r2, #7
 8004a24:	4013      	ands	r3, r2
 8004a26:	d107      	bne.n	8004a38 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	0011      	movs	r1, r2
 8004a30:	0018      	movs	r0, r3
 8004a32:	f004 ffcd 	bl	80099d0 <USB_EPStartXfer>
 8004a36:	e006      	b.n	8004a46 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	0011      	movs	r1, r2
 8004a40:	0018      	movs	r0, r3
 8004a42:	f004 ffc5 	bl	80099d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	0018      	movs	r0, r3
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	b006      	add	sp, #24
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	000a      	movs	r2, r1
 8004a5a:	1cfb      	adds	r3, r7, #3
 8004a5c:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004a5e:	1cfb      	adds	r3, r7, #3
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	2207      	movs	r2, #7
 8004a64:	401a      	ands	r2, r3
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	23c2      	movs	r3, #194	; 0xc2
 8004a6a:	0059      	lsls	r1, r3, #1
 8004a6c:	0013      	movs	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	189b      	adds	r3, r3, r2
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	18c3      	adds	r3, r0, r3
 8004a76:	185b      	adds	r3, r3, r1
 8004a78:	681b      	ldr	r3, [r3, #0]
}
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	b002      	add	sp, #8
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b086      	sub	sp, #24
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	60f8      	str	r0, [r7, #12]
 8004a8a:	607a      	str	r2, [r7, #4]
 8004a8c:	603b      	str	r3, [r7, #0]
 8004a8e:	200b      	movs	r0, #11
 8004a90:	183b      	adds	r3, r7, r0
 8004a92:	1c0a      	adds	r2, r1, #0
 8004a94:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a96:	183b      	adds	r3, r7, r0
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2207      	movs	r2, #7
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	1c5a      	adds	r2, r3, #1
 8004aa0:	0013      	movs	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	189b      	adds	r3, r3, r2
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	18d3      	adds	r3, r2, r3
 8004aac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2224      	movs	r2, #36	; 0x24
 8004abe:	2101      	movs	r1, #1
 8004ac0:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	683a      	ldr	r2, [r7, #0]
 8004ac6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2200      	movs	r2, #0
 8004acc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ad4:	183b      	adds	r3, r7, r0
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	2207      	movs	r2, #7
 8004ada:	4013      	ands	r3, r2
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ae2:	183b      	adds	r3, r7, r0
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2207      	movs	r2, #7
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d107      	bne.n	8004afc <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	0011      	movs	r1, r2
 8004af4:	0018      	movs	r0, r3
 8004af6:	f004 ff6b 	bl	80099d0 <USB_EPStartXfer>
 8004afa:	e006      	b.n	8004b0a <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	0011      	movs	r1, r2
 8004b04:	0018      	movs	r0, r3
 8004b06:	f004 ff63 	bl	80099d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	b006      	add	sp, #24
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	000a      	movs	r2, r1
 8004b1e:	1cfb      	adds	r3, r7, #3
 8004b20:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b22:	1cfb      	adds	r3, r7, #3
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	2207      	movs	r2, #7
 8004b28:	401a      	ands	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d901      	bls.n	8004b36 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e046      	b.n	8004bc4 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b36:	1cfb      	adds	r3, r7, #3
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	b25b      	sxtb	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	da0f      	bge.n	8004b60 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b40:	1cfb      	adds	r3, r7, #3
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2207      	movs	r2, #7
 8004b46:	4013      	ands	r3, r2
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	0013      	movs	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	189b      	adds	r3, r3, r2
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	18d3      	adds	r3, r2, r3
 8004b56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	705a      	strb	r2, [r3, #1]
 8004b5e:	e00d      	b.n	8004b7c <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b60:	1cfb      	adds	r3, r7, #3
 8004b62:	781a      	ldrb	r2, [r3, #0]
 8004b64:	0013      	movs	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	189b      	adds	r3, r3, r2
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	3369      	adds	r3, #105	; 0x69
 8004b6e:	33ff      	adds	r3, #255	; 0xff
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	18d3      	adds	r3, r2, r3
 8004b74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b82:	1cfb      	adds	r3, r7, #3
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2207      	movs	r2, #7
 8004b88:	4013      	ands	r3, r2
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	23aa      	movs	r3, #170	; 0xaa
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	5cd3      	ldrb	r3, [r2, r3]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_PCD_EP_SetStall+0x8c>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e011      	b.n	8004bc4 <HAL_PCD_EP_SetStall+0xb0>
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	23aa      	movs	r3, #170	; 0xaa
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	2101      	movs	r1, #1
 8004ba8:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	0011      	movs	r1, r2
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f005 ffc6 	bl	800ab44 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	23aa      	movs	r3, #170	; 0xaa
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	b004      	add	sp, #16
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	000a      	movs	r2, r1
 8004bd6:	1cfb      	adds	r3, r7, #3
 8004bd8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004bda:	1cfb      	adds	r3, r7, #3
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	220f      	movs	r2, #15
 8004be0:	401a      	ands	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d901      	bls.n	8004bee <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e048      	b.n	8004c80 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bee:	1cfb      	adds	r3, r7, #3
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	b25b      	sxtb	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	da0f      	bge.n	8004c18 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bf8:	1cfb      	adds	r3, r7, #3
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	2207      	movs	r2, #7
 8004bfe:	4013      	ands	r3, r2
 8004c00:	1c5a      	adds	r2, r3, #1
 8004c02:	0013      	movs	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	189b      	adds	r3, r3, r2
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	18d3      	adds	r3, r2, r3
 8004c0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2201      	movs	r2, #1
 8004c14:	705a      	strb	r2, [r3, #1]
 8004c16:	e00f      	b.n	8004c38 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c18:	1cfb      	adds	r3, r7, #3
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	2207      	movs	r2, #7
 8004c1e:	401a      	ands	r2, r3
 8004c20:	0013      	movs	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	189b      	adds	r3, r3, r2
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	3369      	adds	r3, #105	; 0x69
 8004c2a:	33ff      	adds	r3, #255	; 0xff
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	18d3      	adds	r3, r2, r3
 8004c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c3e:	1cfb      	adds	r3, r7, #3
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	2207      	movs	r2, #7
 8004c44:	4013      	ands	r3, r2
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	23aa      	movs	r3, #170	; 0xaa
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	5cd3      	ldrb	r3, [r2, r3]
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_PCD_EP_ClrStall+0x90>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e011      	b.n	8004c80 <HAL_PCD_EP_ClrStall+0xb4>
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	23aa      	movs	r3, #170	; 0xaa
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	2101      	movs	r1, #1
 8004c64:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	0011      	movs	r1, r2
 8004c6e:	0018      	movs	r0, r3
 8004c70:	f005 ffb8 	bl	800abe4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	23aa      	movs	r3, #170	; 0xaa
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	0018      	movs	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	b004      	add	sp, #16
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004c88:	b5b0      	push	{r4, r5, r7, lr}
 8004c8a:	b096      	sub	sp, #88	; 0x58
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004c90:	f000 fbd8 	bl	8005444 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	2056      	movs	r0, #86	; 0x56
 8004c9a:	183b      	adds	r3, r7, r0
 8004c9c:	2144      	movs	r1, #68	; 0x44
 8004c9e:	5a52      	ldrh	r2, [r2, r1]
 8004ca0:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004ca2:	183b      	adds	r3, r7, r0
 8004ca4:	881b      	ldrh	r3, [r3, #0]
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	2455      	movs	r4, #85	; 0x55
 8004caa:	193b      	adds	r3, r7, r4
 8004cac:	210f      	movs	r1, #15
 8004cae:	400a      	ands	r2, r1
 8004cb0:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8004cb2:	193b      	adds	r3, r7, r4
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d000      	beq.n	8004cbc <PCD_EP_ISR_Handler+0x34>
 8004cba:	e179      	b.n	8004fb0 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004cbc:	183b      	adds	r3, r7, r0
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	2210      	movs	r2, #16
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	d154      	bne.n	8004d70 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	881b      	ldrh	r3, [r3, #0]
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	200e      	movs	r0, #14
 8004cd0:	183b      	adds	r3, r7, r0
 8004cd2:	49af      	ldr	r1, [pc, #700]	; (8004f90 <PCD_EP_ISR_Handler+0x308>)
 8004cd4:	400a      	ands	r2, r1
 8004cd6:	801a      	strh	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	183a      	adds	r2, r7, r0
 8004cde:	8812      	ldrh	r2, [r2, #0]
 8004ce0:	49ac      	ldr	r1, [pc, #688]	; (8004f94 <PCD_EP_ISR_Handler+0x30c>)
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	b292      	uxth	r2, r2
 8004ce6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3328      	adds	r3, #40	; 0x28
 8004cec:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2250      	movs	r2, #80	; 0x50
 8004cf4:	5a9b      	ldrh	r3, [r3, r2]
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	001a      	movs	r2, r3
 8004cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	18d2      	adds	r2, r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	18d3      	adds	r3, r2, r3
 8004d08:	4aa3      	ldr	r2, [pc, #652]	; (8004f98 <PCD_EP_ISR_Handler+0x310>)
 8004d0a:	4694      	mov	ip, r2
 8004d0c:	4463      	add	r3, ip
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	059b      	lsls	r3, r3, #22
 8004d12:	0d9a      	lsrs	r2, r3, #22
 8004d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d16:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d1a:	695a      	ldr	r2, [r3, #20]
 8004d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	18d2      	adds	r2, r2, r3
 8004d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d24:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2100      	movs	r1, #0
 8004d2a:	0018      	movs	r0, r3
 8004d2c:	f008 f88c 	bl	800ce48 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2224      	movs	r2, #36	; 0x24
 8004d34:	5c9b      	ldrb	r3, [r3, r2]
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <PCD_EP_ISR_Handler+0xb8>
 8004d3c:	f000 fb82 	bl	8005444 <PCD_EP_ISR_Handler+0x7bc>
 8004d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <PCD_EP_ISR_Handler+0xc4>
 8004d48:	f000 fb7c 	bl	8005444 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2224      	movs	r2, #36	; 0x24
 8004d50:	5c9b      	ldrb	r3, [r3, r2]
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2280      	movs	r2, #128	; 0x80
 8004d56:	4252      	negs	r2, r2
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	b291      	uxth	r1, r2
 8004d62:	224c      	movs	r2, #76	; 0x4c
 8004d64:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2224      	movs	r2, #36	; 0x24
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	5499      	strb	r1, [r3, r2]
 8004d6e:	e369      	b.n	8005444 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3369      	adds	r3, #105	; 0x69
 8004d74:	33ff      	adds	r3, #255	; 0xff
 8004d76:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	2152      	movs	r1, #82	; 0x52
 8004d7e:	187b      	adds	r3, r7, r1
 8004d80:	8812      	ldrh	r2, [r2, #0]
 8004d82:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004d84:	187b      	adds	r3, r7, r1
 8004d86:	881a      	ldrh	r2, [r3, #0]
 8004d88:	2380      	movs	r3, #128	; 0x80
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d037      	beq.n	8004e00 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2250      	movs	r2, #80	; 0x50
 8004d96:	5a9b      	ldrh	r3, [r3, r2]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	001a      	movs	r2, r3
 8004d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	18d2      	adds	r2, r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	18d3      	adds	r3, r2, r3
 8004daa:	4a7c      	ldr	r2, [pc, #496]	; (8004f9c <PCD_EP_ISR_Handler+0x314>)
 8004dac:	4694      	mov	ip, r2
 8004dae:	4463      	add	r3, ip
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	059b      	lsls	r3, r3, #22
 8004db4:	0d9a      	lsrs	r2, r3, #22
 8004db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004db8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6818      	ldr	r0, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	22ac      	movs	r2, #172	; 0xac
 8004dc2:	0092      	lsls	r2, r2, #2
 8004dc4:	1899      	adds	r1, r3, r2
 8004dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dcc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	f006 f836 	bl	800ae40 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	2010      	movs	r0, #16
 8004dde:	183b      	adds	r3, r7, r0
 8004de0:	496f      	ldr	r1, [pc, #444]	; (8004fa0 <PCD_EP_ISR_Handler+0x318>)
 8004de2:	400a      	ands	r2, r1
 8004de4:	801a      	strh	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	183a      	adds	r2, r7, r0
 8004dec:	8812      	ldrh	r2, [r2, #0]
 8004dee:	2180      	movs	r1, #128	; 0x80
 8004df0:	430a      	orrs	r2, r1
 8004df2:	b292      	uxth	r2, r2
 8004df4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f007 ffef 	bl	800cddc <HAL_PCD_SetupStageCallback>
 8004dfe:	e321      	b.n	8005444 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004e00:	2352      	movs	r3, #82	; 0x52
 8004e02:	18fb      	adds	r3, r7, r3
 8004e04:	2200      	movs	r2, #0
 8004e06:	5e9b      	ldrsh	r3, [r3, r2]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	db00      	blt.n	8004e0e <PCD_EP_ISR_Handler+0x186>
 8004e0c:	e31a      	b.n	8005444 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	201e      	movs	r0, #30
 8004e18:	183b      	adds	r3, r7, r0
 8004e1a:	4961      	ldr	r1, [pc, #388]	; (8004fa0 <PCD_EP_ISR_Handler+0x318>)
 8004e1c:	400a      	ands	r2, r1
 8004e1e:	801a      	strh	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	183a      	adds	r2, r7, r0
 8004e26:	8812      	ldrh	r2, [r2, #0]
 8004e28:	2180      	movs	r1, #128	; 0x80
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	b292      	uxth	r2, r2
 8004e2e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2250      	movs	r2, #80	; 0x50
 8004e36:	5a9b      	ldrh	r3, [r3, r2]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	001a      	movs	r2, r3
 8004e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	18d2      	adds	r2, r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	18d3      	adds	r3, r2, r3
 8004e4a:	4a54      	ldr	r2, [pc, #336]	; (8004f9c <PCD_EP_ISR_Handler+0x314>)
 8004e4c:	4694      	mov	ip, r2
 8004e4e:	4463      	add	r3, ip
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	059b      	lsls	r3, r3, #22
 8004e54:	0d9a      	lsrs	r2, r3, #22
 8004e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e58:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d01a      	beq.n	8004e98 <PCD_EP_ISR_Handler+0x210>
 8004e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d016      	beq.n	8004e98 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e70:	6959      	ldr	r1, [r3, #20]
 8004e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e74:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e78:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	f005 ffe0 	bl	800ae40 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e82:	695a      	ldr	r2, [r3, #20]
 8004e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	18d2      	adds	r2, r2, r3
 8004e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e8c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2100      	movs	r1, #0
 8004e92:	0018      	movs	r0, r3
 8004e94:	f007 ffb7 	bl	800ce06 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	001a      	movs	r2, r3
 8004ea2:	2380      	movs	r3, #128	; 0x80
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	d000      	beq.n	8004eac <PCD_EP_ISR_Handler+0x224>
 8004eaa:	e2cb      	b.n	8005444 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	61bb      	str	r3, [r7, #24]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2250      	movs	r2, #80	; 0x50
 8004eb8:	5a9b      	ldrh	r3, [r3, r2]
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	001a      	movs	r2, r3
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	189b      	adds	r3, r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	4a35      	ldr	r2, [pc, #212]	; (8004f9c <PCD_EP_ISR_Handler+0x314>)
 8004ec8:	4694      	mov	ip, r2
 8004eca:	4463      	add	r3, ip
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d110      	bne.n	8004ef8 <PCD_EP_ISR_Handler+0x270>
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	4a31      	ldr	r2, [pc, #196]	; (8004fa4 <PCD_EP_ISR_Handler+0x31c>)
 8004ede:	4013      	ands	r3, r2
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	801a      	strh	r2, [r3, #0]
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	881b      	ldrh	r3, [r3, #0]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	4a29      	ldr	r2, [pc, #164]	; (8004f94 <PCD_EP_ISR_Handler+0x30c>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	801a      	strh	r2, [r3, #0]
 8004ef6:	e02b      	b.n	8004f50 <PCD_EP_ISR_Handler+0x2c8>
 8004ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	2b3e      	cmp	r3, #62	; 0x3e
 8004efe:	d812      	bhi.n	8004f26 <PCD_EP_ISR_Handler+0x29e>
 8004f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	085b      	lsrs	r3, r3, #1
 8004f06:	647b      	str	r3, [r7, #68]	; 0x44
 8004f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	4013      	ands	r3, r2
 8004f10:	d002      	beq.n	8004f18 <PCD_EP_ISR_Handler+0x290>
 8004f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f14:	3301      	adds	r3, #1
 8004f16:	647b      	str	r3, [r7, #68]	; 0x44
 8004f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	029b      	lsls	r3, r3, #10
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	801a      	strh	r2, [r3, #0]
 8004f24:	e014      	b.n	8004f50 <PCD_EP_ISR_Handler+0x2c8>
 8004f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	221f      	movs	r2, #31
 8004f34:	4013      	ands	r3, r2
 8004f36:	d102      	bne.n	8004f3e <PCD_EP_ISR_Handler+0x2b6>
 8004f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	029b      	lsls	r3, r3, #10
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	4a13      	ldr	r2, [pc, #76]	; (8004f94 <PCD_EP_ISR_Handler+0x30c>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	b29a      	uxth	r2, r3
 8004f58:	2012      	movs	r0, #18
 8004f5a:	183b      	adds	r3, r7, r0
 8004f5c:	4912      	ldr	r1, [pc, #72]	; (8004fa8 <PCD_EP_ISR_Handler+0x320>)
 8004f5e:	400a      	ands	r2, r1
 8004f60:	801a      	strh	r2, [r3, #0]
 8004f62:	183b      	adds	r3, r7, r0
 8004f64:	183a      	adds	r2, r7, r0
 8004f66:	8812      	ldrh	r2, [r2, #0]
 8004f68:	2180      	movs	r1, #128	; 0x80
 8004f6a:	0149      	lsls	r1, r1, #5
 8004f6c:	404a      	eors	r2, r1
 8004f6e:	801a      	strh	r2, [r3, #0]
 8004f70:	183b      	adds	r3, r7, r0
 8004f72:	183a      	adds	r2, r7, r0
 8004f74:	8812      	ldrh	r2, [r2, #0]
 8004f76:	2180      	movs	r1, #128	; 0x80
 8004f78:	0189      	lsls	r1, r1, #6
 8004f7a:	404a      	eors	r2, r1
 8004f7c:	801a      	strh	r2, [r3, #0]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	183a      	adds	r2, r7, r0
 8004f84:	8812      	ldrh	r2, [r2, #0]
 8004f86:	4909      	ldr	r1, [pc, #36]	; (8004fac <PCD_EP_ISR_Handler+0x324>)
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	b292      	uxth	r2, r2
 8004f8c:	801a      	strh	r2, [r3, #0]
 8004f8e:	e259      	b.n	8005444 <PCD_EP_ISR_Handler+0x7bc>
 8004f90:	ffff8f0f 	.word	0xffff8f0f
 8004f94:	ffff8000 	.word	0xffff8000
 8004f98:	00000402 	.word	0x00000402
 8004f9c:	00000406 	.word	0x00000406
 8004fa0:	00000f8f 	.word	0x00000f8f
 8004fa4:	ffff83ff 	.word	0xffff83ff
 8004fa8:	ffffbf8f 	.word	0xffffbf8f
 8004fac:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	001a      	movs	r2, r3
 8004fb6:	2055      	movs	r0, #85	; 0x55
 8004fb8:	183b      	adds	r3, r7, r0
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	18d2      	adds	r2, r2, r3
 8004fc0:	2152      	movs	r1, #82	; 0x52
 8004fc2:	187b      	adds	r3, r7, r1
 8004fc4:	8812      	ldrh	r2, [r2, #0]
 8004fc6:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004fc8:	187b      	adds	r3, r7, r1
 8004fca:	2200      	movs	r2, #0
 8004fcc:	5e9b      	ldrsh	r3, [r3, r2]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	db00      	blt.n	8004fd4 <PCD_EP_ISR_Handler+0x34c>
 8004fd2:	e0fa      	b.n	80051ca <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	001a      	movs	r2, r3
 8004fda:	183b      	adds	r3, r7, r0
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	18d3      	adds	r3, r2, r3
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	2450      	movs	r4, #80	; 0x50
 8004fe8:	193b      	adds	r3, r7, r4
 8004fea:	49cf      	ldr	r1, [pc, #828]	; (8005328 <PCD_EP_ISR_Handler+0x6a0>)
 8004fec:	400a      	ands	r2, r1
 8004fee:	801a      	strh	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	001a      	movs	r2, r3
 8004ff6:	183b      	adds	r3, r7, r0
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	18d3      	adds	r3, r2, r3
 8004ffe:	193a      	adds	r2, r7, r4
 8005000:	8812      	ldrh	r2, [r2, #0]
 8005002:	2180      	movs	r1, #128	; 0x80
 8005004:	430a      	orrs	r2, r1
 8005006:	b292      	uxth	r2, r2
 8005008:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800500a:	183b      	adds	r3, r7, r0
 800500c:	781a      	ldrb	r2, [r3, #0]
 800500e:	0013      	movs	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	189b      	adds	r3, r3, r2
 8005014:	00db      	lsls	r3, r3, #3
 8005016:	3369      	adds	r3, #105	; 0x69
 8005018:	33ff      	adds	r3, #255	; 0xff
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	18d3      	adds	r3, r2, r3
 800501e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005022:	7b1b      	ldrb	r3, [r3, #12]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d125      	bne.n	8005074 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2250      	movs	r2, #80	; 0x50
 800502e:	5a9b      	ldrh	r3, [r3, r2]
 8005030:	b29b      	uxth	r3, r3
 8005032:	001a      	movs	r2, r3
 8005034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	18d2      	adds	r2, r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	18d3      	adds	r3, r2, r3
 8005042:	4aba      	ldr	r2, [pc, #744]	; (800532c <PCD_EP_ISR_Handler+0x6a4>)
 8005044:	4694      	mov	ip, r2
 8005046:	4463      	add	r3, ip
 8005048:	881a      	ldrh	r2, [r3, #0]
 800504a:	2448      	movs	r4, #72	; 0x48
 800504c:	193b      	adds	r3, r7, r4
 800504e:	0592      	lsls	r2, r2, #22
 8005050:	0d92      	lsrs	r2, r2, #22
 8005052:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8005054:	193b      	adds	r3, r7, r4
 8005056:	881b      	ldrh	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d100      	bne.n	800505e <PCD_EP_ISR_Handler+0x3d6>
 800505c:	e08d      	b.n	800517a <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6818      	ldr	r0, [r3, #0]
 8005062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005064:	6959      	ldr	r1, [r3, #20]
 8005066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005068:	88da      	ldrh	r2, [r3, #6]
 800506a:	193b      	adds	r3, r7, r4
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	f005 fee7 	bl	800ae40 <USB_ReadPMA>
 8005072:	e082      	b.n	800517a <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005076:	78db      	ldrb	r3, [r3, #3]
 8005078:	2b02      	cmp	r3, #2
 800507a:	d10c      	bne.n	8005096 <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800507c:	2348      	movs	r3, #72	; 0x48
 800507e:	18fc      	adds	r4, r7, r3
 8005080:	2352      	movs	r3, #82	; 0x52
 8005082:	18fb      	adds	r3, r7, r3
 8005084:	881a      	ldrh	r2, [r3, #0]
 8005086:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	0018      	movs	r0, r3
 800508c:	f000 f9ee 	bl	800546c <HAL_PCD_EP_DB_Receive>
 8005090:	0003      	movs	r3, r0
 8005092:	8023      	strh	r3, [r4, #0]
 8005094:	e071      	b.n	800517a <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	001a      	movs	r2, r3
 800509c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	18d3      	adds	r3, r2, r3
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	b29a      	uxth	r2, r3
 80050a8:	204a      	movs	r0, #74	; 0x4a
 80050aa:	183b      	adds	r3, r7, r0
 80050ac:	49a0      	ldr	r1, [pc, #640]	; (8005330 <PCD_EP_ISR_Handler+0x6a8>)
 80050ae:	400a      	ands	r2, r1
 80050b0:	801a      	strh	r2, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	001a      	movs	r2, r3
 80050b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	18d3      	adds	r3, r2, r3
 80050c0:	183a      	adds	r2, r7, r0
 80050c2:	8812      	ldrh	r2, [r2, #0]
 80050c4:	499b      	ldr	r1, [pc, #620]	; (8005334 <PCD_EP_ISR_Handler+0x6ac>)
 80050c6:	430a      	orrs	r2, r1
 80050c8:	b292      	uxth	r2, r2
 80050ca:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	001a      	movs	r2, r3
 80050d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	18d3      	adds	r3, r2, r3
 80050da:	881b      	ldrh	r3, [r3, #0]
 80050dc:	b29b      	uxth	r3, r3
 80050de:	001a      	movs	r2, r3
 80050e0:	2380      	movs	r3, #128	; 0x80
 80050e2:	01db      	lsls	r3, r3, #7
 80050e4:	4013      	ands	r3, r2
 80050e6:	d024      	beq.n	8005132 <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2250      	movs	r2, #80	; 0x50
 80050ee:	5a9b      	ldrh	r3, [r3, r2]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	001a      	movs	r2, r3
 80050f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	18d2      	adds	r2, r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	18d3      	adds	r3, r2, r3
 8005102:	4a8d      	ldr	r2, [pc, #564]	; (8005338 <PCD_EP_ISR_Handler+0x6b0>)
 8005104:	4694      	mov	ip, r2
 8005106:	4463      	add	r3, ip
 8005108:	881a      	ldrh	r2, [r3, #0]
 800510a:	2448      	movs	r4, #72	; 0x48
 800510c:	193b      	adds	r3, r7, r4
 800510e:	0592      	lsls	r2, r2, #22
 8005110:	0d92      	lsrs	r2, r2, #22
 8005112:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8005114:	193b      	adds	r3, r7, r4
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d02e      	beq.n	800517a <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6818      	ldr	r0, [r3, #0]
 8005120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005122:	6959      	ldr	r1, [r3, #20]
 8005124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005126:	891a      	ldrh	r2, [r3, #8]
 8005128:	193b      	adds	r3, r7, r4
 800512a:	881b      	ldrh	r3, [r3, #0]
 800512c:	f005 fe88 	bl	800ae40 <USB_ReadPMA>
 8005130:	e023      	b.n	800517a <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2250      	movs	r2, #80	; 0x50
 8005138:	5a9b      	ldrh	r3, [r3, r2]
 800513a:	b29b      	uxth	r3, r3
 800513c:	001a      	movs	r2, r3
 800513e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	18d2      	adds	r2, r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	18d3      	adds	r3, r2, r3
 800514c:	4a77      	ldr	r2, [pc, #476]	; (800532c <PCD_EP_ISR_Handler+0x6a4>)
 800514e:	4694      	mov	ip, r2
 8005150:	4463      	add	r3, ip
 8005152:	881a      	ldrh	r2, [r3, #0]
 8005154:	2448      	movs	r4, #72	; 0x48
 8005156:	193b      	adds	r3, r7, r4
 8005158:	0592      	lsls	r2, r2, #22
 800515a:	0d92      	lsrs	r2, r2, #22
 800515c:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800515e:	193b      	adds	r3, r7, r4
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d009      	beq.n	800517a <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800516c:	6959      	ldr	r1, [r3, #20]
 800516e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005170:	895a      	ldrh	r2, [r3, #10]
 8005172:	193b      	adds	r3, r7, r4
 8005174:	881b      	ldrh	r3, [r3, #0]
 8005176:	f005 fe63 	bl	800ae40 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800517a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800517c:	69da      	ldr	r2, [r3, #28]
 800517e:	2148      	movs	r1, #72	; 0x48
 8005180:	187b      	adds	r3, r7, r1
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	18d2      	adds	r2, r2, r3
 8005186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005188:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800518a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800518c:	695a      	ldr	r2, [r3, #20]
 800518e:	187b      	adds	r3, r7, r1
 8005190:	881b      	ldrh	r3, [r3, #0]
 8005192:	18d2      	adds	r2, r2, r3
 8005194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005196:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d005      	beq.n	80051ac <PCD_EP_ISR_Handler+0x524>
 80051a0:	187b      	adds	r3, r7, r1
 80051a2:	881a      	ldrh	r2, [r3, #0]
 80051a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d207      	bcs.n	80051bc <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80051ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051ae:	781a      	ldrb	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	0011      	movs	r1, r2
 80051b4:	0018      	movs	r0, r3
 80051b6:	f007 fe26 	bl	800ce06 <HAL_PCD_DataOutStageCallback>
 80051ba:	e006      	b.n	80051ca <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051c2:	0011      	movs	r1, r2
 80051c4:	0018      	movs	r0, r3
 80051c6:	f004 fc03 	bl	80099d0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80051ca:	2452      	movs	r4, #82	; 0x52
 80051cc:	193b      	adds	r3, r7, r4
 80051ce:	881b      	ldrh	r3, [r3, #0]
 80051d0:	2280      	movs	r2, #128	; 0x80
 80051d2:	4013      	ands	r3, r2
 80051d4:	d100      	bne.n	80051d8 <PCD_EP_ISR_Handler+0x550>
 80051d6:	e135      	b.n	8005444 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 80051d8:	2055      	movs	r0, #85	; 0x55
 80051da:	183b      	adds	r3, r7, r0
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	1c5a      	adds	r2, r3, #1
 80051e0:	0013      	movs	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	189b      	adds	r3, r3, r2
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	18d3      	adds	r3, r2, r3
 80051ec:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	001a      	movs	r2, r3
 80051f4:	183b      	adds	r3, r7, r0
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	18d3      	adds	r3, r2, r3
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	b29a      	uxth	r2, r3
 8005200:	2542      	movs	r5, #66	; 0x42
 8005202:	197b      	adds	r3, r7, r5
 8005204:	494d      	ldr	r1, [pc, #308]	; (800533c <PCD_EP_ISR_Handler+0x6b4>)
 8005206:	400a      	ands	r2, r1
 8005208:	801a      	strh	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	001a      	movs	r2, r3
 8005210:	183b      	adds	r3, r7, r0
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	18d3      	adds	r3, r2, r3
 8005218:	197a      	adds	r2, r7, r5
 800521a:	8812      	ldrh	r2, [r2, #0]
 800521c:	4948      	ldr	r1, [pc, #288]	; (8005340 <PCD_EP_ISR_Handler+0x6b8>)
 800521e:	430a      	orrs	r2, r1
 8005220:	b292      	uxth	r2, r2
 8005222:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 8005224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005226:	78db      	ldrb	r3, [r3, #3]
 8005228:	2b02      	cmp	r3, #2
 800522a:	d100      	bne.n	800522e <PCD_EP_ISR_Handler+0x5a6>
 800522c:	e0ad      	b.n	800538a <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 800522e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005230:	2200      	movs	r2, #0
 8005232:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005234:	193b      	adds	r3, r7, r4
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	2240      	movs	r2, #64	; 0x40
 800523a:	4013      	ands	r3, r2
 800523c:	d046      	beq.n	80052cc <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800523e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005240:	785b      	ldrb	r3, [r3, #1]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d125      	bne.n	8005292 <PCD_EP_ISR_Handler+0x60a>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2250      	movs	r2, #80	; 0x50
 8005252:	5a9b      	ldrh	r3, [r3, r2]
 8005254:	b29b      	uxth	r3, r3
 8005256:	001a      	movs	r2, r3
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	189b      	adds	r3, r3, r2
 800525c:	627b      	str	r3, [r7, #36]	; 0x24
 800525e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	00da      	lsls	r2, r3, #3
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	18d3      	adds	r3, r2, r3
 8005268:	4a33      	ldr	r2, [pc, #204]	; (8005338 <PCD_EP_ISR_Handler+0x6b0>)
 800526a:	4694      	mov	ip, r2
 800526c:	4463      	add	r3, ip
 800526e:	623b      	str	r3, [r7, #32]
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	b29b      	uxth	r3, r3
 8005276:	4a33      	ldr	r2, [pc, #204]	; (8005344 <PCD_EP_ISR_Handler+0x6bc>)
 8005278:	4013      	ands	r3, r2
 800527a:	b29a      	uxth	r2, r3
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	801a      	strh	r2, [r3, #0]
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	881b      	ldrh	r3, [r3, #0]
 8005284:	b29b      	uxth	r3, r3
 8005286:	4a2e      	ldr	r2, [pc, #184]	; (8005340 <PCD_EP_ISR_Handler+0x6b8>)
 8005288:	4313      	orrs	r3, r2
 800528a:	b29a      	uxth	r2, r3
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	801a      	strh	r2, [r3, #0]
 8005290:	e073      	b.n	800537a <PCD_EP_ISR_Handler+0x6f2>
 8005292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005294:	785b      	ldrb	r3, [r3, #1]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d16f      	bne.n	800537a <PCD_EP_ISR_Handler+0x6f2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2250      	movs	r2, #80	; 0x50
 80052a6:	5a9b      	ldrh	r3, [r3, r2]
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	001a      	movs	r2, r3
 80052ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ae:	189b      	adds	r3, r3, r2
 80052b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	00da      	lsls	r2, r3, #3
 80052b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ba:	18d3      	adds	r3, r2, r3
 80052bc:	4a1e      	ldr	r2, [pc, #120]	; (8005338 <PCD_EP_ISR_Handler+0x6b0>)
 80052be:	4694      	mov	ip, r2
 80052c0:	4463      	add	r3, ip
 80052c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	2200      	movs	r2, #0
 80052c8:	801a      	strh	r2, [r3, #0]
 80052ca:	e056      	b.n	800537a <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052d4:	785b      	ldrb	r3, [r3, #1]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d136      	bne.n	8005348 <PCD_EP_ISR_Handler+0x6c0>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	637b      	str	r3, [r7, #52]	; 0x34
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2250      	movs	r2, #80	; 0x50
 80052e6:	5a9b      	ldrh	r3, [r3, r2]
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	001a      	movs	r2, r3
 80052ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ee:	189b      	adds	r3, r3, r2
 80052f0:	637b      	str	r3, [r7, #52]	; 0x34
 80052f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	00da      	lsls	r2, r3, #3
 80052f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fa:	18d3      	adds	r3, r2, r3
 80052fc:	4a0b      	ldr	r2, [pc, #44]	; (800532c <PCD_EP_ISR_Handler+0x6a4>)
 80052fe:	4694      	mov	ip, r2
 8005300:	4463      	add	r3, ip
 8005302:	633b      	str	r3, [r7, #48]	; 0x30
 8005304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	b29b      	uxth	r3, r3
 800530a:	4a0e      	ldr	r2, [pc, #56]	; (8005344 <PCD_EP_ISR_Handler+0x6bc>)
 800530c:	4013      	ands	r3, r2
 800530e:	b29a      	uxth	r2, r3
 8005310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005312:	801a      	strh	r2, [r3, #0]
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	881b      	ldrh	r3, [r3, #0]
 8005318:	b29b      	uxth	r3, r3
 800531a:	4a09      	ldr	r2, [pc, #36]	; (8005340 <PCD_EP_ISR_Handler+0x6b8>)
 800531c:	4313      	orrs	r3, r2
 800531e:	b29a      	uxth	r2, r3
 8005320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005322:	801a      	strh	r2, [r3, #0]
 8005324:	e029      	b.n	800537a <PCD_EP_ISR_Handler+0x6f2>
 8005326:	46c0      	nop			; (mov r8, r8)
 8005328:	00000f8f 	.word	0x00000f8f
 800532c:	00000406 	.word	0x00000406
 8005330:	ffff8f8f 	.word	0xffff8f8f
 8005334:	ffff80c0 	.word	0xffff80c0
 8005338:	00000402 	.word	0x00000402
 800533c:	ffff8f0f 	.word	0xffff8f0f
 8005340:	ffff8000 	.word	0xffff8000
 8005344:	ffff83ff 	.word	0xffff83ff
 8005348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800534a:	785b      	ldrb	r3, [r3, #1]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d114      	bne.n	800537a <PCD_EP_ISR_Handler+0x6f2>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2250      	movs	r2, #80	; 0x50
 8005356:	5a9b      	ldrh	r3, [r3, r2]
 8005358:	b29b      	uxth	r3, r3
 800535a:	001a      	movs	r2, r3
 800535c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800535e:	189b      	adds	r3, r3, r2
 8005360:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	00da      	lsls	r2, r3, #3
 8005368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800536a:	18d3      	adds	r3, r2, r3
 800536c:	4a3d      	ldr	r2, [pc, #244]	; (8005464 <PCD_EP_ISR_Handler+0x7dc>)
 800536e:	4694      	mov	ip, r2
 8005370:	4463      	add	r3, ip
 8005372:	63bb      	str	r3, [r7, #56]	; 0x38
 8005374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005376:	2200      	movs	r2, #0
 8005378:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800537a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800537c:	781a      	ldrb	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	0011      	movs	r1, r2
 8005382:	0018      	movs	r0, r3
 8005384:	f007 fd60 	bl	800ce48 <HAL_PCD_DataInStageCallback>
 8005388:	e05c      	b.n	8005444 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800538a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800538c:	78db      	ldrb	r3, [r3, #3]
 800538e:	2b02      	cmp	r3, #2
 8005390:	d150      	bne.n	8005434 <PCD_EP_ISR_Handler+0x7ac>
 8005392:	2352      	movs	r3, #82	; 0x52
 8005394:	18fb      	adds	r3, r7, r3
 8005396:	881a      	ldrh	r2, [r3, #0]
 8005398:	2380      	movs	r3, #128	; 0x80
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	4013      	ands	r3, r2
 800539e:	d149      	bne.n	8005434 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2250      	movs	r2, #80	; 0x50
 80053a6:	5a9b      	ldrh	r3, [r3, r2]
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	001a      	movs	r2, r3
 80053ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	18d2      	adds	r2, r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	18d3      	adds	r3, r2, r3
 80053ba:	4a2b      	ldr	r2, [pc, #172]	; (8005468 <PCD_EP_ISR_Handler+0x7e0>)
 80053bc:	4694      	mov	ip, r2
 80053be:	4463      	add	r3, ip
 80053c0:	881a      	ldrh	r2, [r3, #0]
 80053c2:	2140      	movs	r1, #64	; 0x40
 80053c4:	187b      	adds	r3, r7, r1
 80053c6:	0592      	lsls	r2, r2, #22
 80053c8:	0d92      	lsrs	r2, r2, #22
 80053ca:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 80053cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ce:	699a      	ldr	r2, [r3, #24]
 80053d0:	187b      	adds	r3, r7, r1
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d907      	bls.n	80053e8 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 80053d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053da:	699a      	ldr	r2, [r3, #24]
 80053dc:	187b      	adds	r3, r7, r1
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	1ad2      	subs	r2, r2, r3
 80053e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e4:	619a      	str	r2, [r3, #24]
 80053e6:	e002      	b.n	80053ee <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 80053e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ea:	2200      	movs	r2, #0
 80053ec:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80053ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d107      	bne.n	8005406 <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f8:	781a      	ldrb	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	0011      	movs	r1, r2
 80053fe:	0018      	movs	r0, r3
 8005400:	f007 fd22 	bl	800ce48 <HAL_PCD_DataInStageCallback>
 8005404:	e01e      	b.n	8005444 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005408:	695a      	ldr	r2, [r3, #20]
 800540a:	2140      	movs	r1, #64	; 0x40
 800540c:	187b      	adds	r3, r7, r1
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	18d2      	adds	r2, r2, r3
 8005412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005414:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005418:	69da      	ldr	r2, [r3, #28]
 800541a:	187b      	adds	r3, r7, r1
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	18d2      	adds	r2, r2, r3
 8005420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005422:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800542a:	0011      	movs	r1, r2
 800542c:	0018      	movs	r0, r3
 800542e:	f004 facf 	bl	80099d0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005432:	e007      	b.n	8005444 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005434:	2352      	movs	r3, #82	; 0x52
 8005436:	18fb      	adds	r3, r7, r3
 8005438:	881a      	ldrh	r2, [r3, #0]
 800543a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	0018      	movs	r0, r3
 8005440:	f000 f930 	bl	80056a4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2244      	movs	r2, #68	; 0x44
 800544a:	5a9b      	ldrh	r3, [r3, r2]
 800544c:	b29b      	uxth	r3, r3
 800544e:	b21b      	sxth	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	da01      	bge.n	8005458 <PCD_EP_ISR_Handler+0x7d0>
 8005454:	f7ff fc1e 	bl	8004c94 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	0018      	movs	r0, r3
 800545c:	46bd      	mov	sp, r7
 800545e:	b016      	add	sp, #88	; 0x58
 8005460:	bdb0      	pop	{r4, r5, r7, pc}
 8005462:	46c0      	nop			; (mov r8, r8)
 8005464:	00000406 	.word	0x00000406
 8005468:	00000402 	.word	0x00000402

0800546c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800546c:	b590      	push	{r4, r7, lr}
 800546e:	b089      	sub	sp, #36	; 0x24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	1dbb      	adds	r3, r7, #6
 8005478:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800547a:	1dbb      	adds	r3, r7, #6
 800547c:	881a      	ldrh	r2, [r3, #0]
 800547e:	2380      	movs	r3, #128	; 0x80
 8005480:	01db      	lsls	r3, r3, #7
 8005482:	4013      	ands	r3, r2
 8005484:	d100      	bne.n	8005488 <HAL_PCD_EP_DB_Receive+0x1c>
 8005486:	e07d      	b.n	8005584 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2250      	movs	r2, #80	; 0x50
 800548e:	5a9b      	ldrh	r3, [r3, r2]
 8005490:	b29b      	uxth	r3, r3
 8005492:	001a      	movs	r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	18d2      	adds	r2, r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	18d3      	adds	r3, r2, r3
 80054a2:	4a7a      	ldr	r2, [pc, #488]	; (800568c <HAL_PCD_EP_DB_Receive+0x220>)
 80054a4:	4694      	mov	ip, r2
 80054a6:	4463      	add	r3, ip
 80054a8:	881a      	ldrh	r2, [r3, #0]
 80054aa:	211a      	movs	r1, #26
 80054ac:	187b      	adds	r3, r7, r1
 80054ae:	0592      	lsls	r2, r2, #22
 80054b0:	0d92      	lsrs	r2, r2, #22
 80054b2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	699a      	ldr	r2, [r3, #24]
 80054b8:	187b      	adds	r3, r7, r1
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d307      	bcc.n	80054d0 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	699a      	ldr	r2, [r3, #24]
 80054c4:	187b      	adds	r3, r7, r1
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	1ad2      	subs	r2, r2, r3
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	619a      	str	r2, [r3, #24]
 80054ce:	e002      	b.n	80054d6 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2200      	movs	r2, #0
 80054d4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d121      	bne.n	8005522 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	001a      	movs	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	18d3      	adds	r3, r2, r3
 80054ec:	881b      	ldrh	r3, [r3, #0]
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	2018      	movs	r0, #24
 80054f2:	183b      	adds	r3, r7, r0
 80054f4:	4966      	ldr	r1, [pc, #408]	; (8005690 <HAL_PCD_EP_DB_Receive+0x224>)
 80054f6:	400a      	ands	r2, r1
 80054f8:	801a      	strh	r2, [r3, #0]
 80054fa:	183b      	adds	r3, r7, r0
 80054fc:	183a      	adds	r2, r7, r0
 80054fe:	8812      	ldrh	r2, [r2, #0]
 8005500:	2180      	movs	r1, #128	; 0x80
 8005502:	0189      	lsls	r1, r1, #6
 8005504:	404a      	eors	r2, r1
 8005506:	801a      	strh	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	001a      	movs	r2, r3
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	18d3      	adds	r3, r2, r3
 8005516:	183a      	adds	r2, r7, r0
 8005518:	8812      	ldrh	r2, [r2, #0]
 800551a:	495e      	ldr	r1, [pc, #376]	; (8005694 <HAL_PCD_EP_DB_Receive+0x228>)
 800551c:	430a      	orrs	r2, r1
 800551e:	b292      	uxth	r2, r2
 8005520:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005522:	1dbb      	adds	r3, r7, #6
 8005524:	881b      	ldrh	r3, [r3, #0]
 8005526:	2240      	movs	r2, #64	; 0x40
 8005528:	4013      	ands	r3, r2
 800552a:	d01a      	beq.n	8005562 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	001a      	movs	r2, r3
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	18d3      	adds	r3, r2, r3
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	b29a      	uxth	r2, r3
 800553e:	2016      	movs	r0, #22
 8005540:	183b      	adds	r3, r7, r0
 8005542:	4955      	ldr	r1, [pc, #340]	; (8005698 <HAL_PCD_EP_DB_Receive+0x22c>)
 8005544:	400a      	ands	r2, r1
 8005546:	801a      	strh	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	001a      	movs	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	18d3      	adds	r3, r2, r3
 8005556:	183a      	adds	r2, r7, r0
 8005558:	8812      	ldrh	r2, [r2, #0]
 800555a:	4950      	ldr	r1, [pc, #320]	; (800569c <HAL_PCD_EP_DB_Receive+0x230>)
 800555c:	430a      	orrs	r2, r1
 800555e:	b292      	uxth	r2, r2
 8005560:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8005562:	241a      	movs	r4, #26
 8005564:	193b      	adds	r3, r7, r4
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d100      	bne.n	800556e <HAL_PCD_EP_DB_Receive+0x102>
 800556c:	e086      	b.n	800567c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6818      	ldr	r0, [r3, #0]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	6959      	ldr	r1, [r3, #20]
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	891a      	ldrh	r2, [r3, #8]
 800557a:	193b      	adds	r3, r7, r4
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	f005 fc5f 	bl	800ae40 <USB_ReadPMA>
 8005582:	e07b      	b.n	800567c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2250      	movs	r2, #80	; 0x50
 800558a:	5a9b      	ldrh	r3, [r3, r2]
 800558c:	b29b      	uxth	r3, r3
 800558e:	001a      	movs	r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	18d2      	adds	r2, r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	18d3      	adds	r3, r2, r3
 800559e:	4a40      	ldr	r2, [pc, #256]	; (80056a0 <HAL_PCD_EP_DB_Receive+0x234>)
 80055a0:	4694      	mov	ip, r2
 80055a2:	4463      	add	r3, ip
 80055a4:	881a      	ldrh	r2, [r3, #0]
 80055a6:	211a      	movs	r1, #26
 80055a8:	187b      	adds	r3, r7, r1
 80055aa:	0592      	lsls	r2, r2, #22
 80055ac:	0d92      	lsrs	r2, r2, #22
 80055ae:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	699a      	ldr	r2, [r3, #24]
 80055b4:	187b      	adds	r3, r7, r1
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d307      	bcc.n	80055cc <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	699a      	ldr	r2, [r3, #24]
 80055c0:	187b      	adds	r3, r7, r1
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	1ad2      	subs	r2, r2, r3
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	619a      	str	r2, [r3, #24]
 80055ca:	e002      	b.n	80055d2 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2200      	movs	r2, #0
 80055d0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d121      	bne.n	800561e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	001a      	movs	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	18d3      	adds	r3, r2, r3
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	201e      	movs	r0, #30
 80055ee:	183b      	adds	r3, r7, r0
 80055f0:	4927      	ldr	r1, [pc, #156]	; (8005690 <HAL_PCD_EP_DB_Receive+0x224>)
 80055f2:	400a      	ands	r2, r1
 80055f4:	801a      	strh	r2, [r3, #0]
 80055f6:	183b      	adds	r3, r7, r0
 80055f8:	183a      	adds	r2, r7, r0
 80055fa:	8812      	ldrh	r2, [r2, #0]
 80055fc:	2180      	movs	r1, #128	; 0x80
 80055fe:	0189      	lsls	r1, r1, #6
 8005600:	404a      	eors	r2, r1
 8005602:	801a      	strh	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	001a      	movs	r2, r3
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	18d3      	adds	r3, r2, r3
 8005612:	183a      	adds	r2, r7, r0
 8005614:	8812      	ldrh	r2, [r2, #0]
 8005616:	491f      	ldr	r1, [pc, #124]	; (8005694 <HAL_PCD_EP_DB_Receive+0x228>)
 8005618:	430a      	orrs	r2, r1
 800561a:	b292      	uxth	r2, r2
 800561c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800561e:	1dbb      	adds	r3, r7, #6
 8005620:	881b      	ldrh	r3, [r3, #0]
 8005622:	2240      	movs	r2, #64	; 0x40
 8005624:	4013      	ands	r3, r2
 8005626:	d11a      	bne.n	800565e <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	001a      	movs	r2, r3
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	18d3      	adds	r3, r2, r3
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	b29a      	uxth	r2, r3
 800563a:	201c      	movs	r0, #28
 800563c:	183b      	adds	r3, r7, r0
 800563e:	4916      	ldr	r1, [pc, #88]	; (8005698 <HAL_PCD_EP_DB_Receive+0x22c>)
 8005640:	400a      	ands	r2, r1
 8005642:	801a      	strh	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	001a      	movs	r2, r3
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	18d3      	adds	r3, r2, r3
 8005652:	183a      	adds	r2, r7, r0
 8005654:	8812      	ldrh	r2, [r2, #0]
 8005656:	4911      	ldr	r1, [pc, #68]	; (800569c <HAL_PCD_EP_DB_Receive+0x230>)
 8005658:	430a      	orrs	r2, r1
 800565a:	b292      	uxth	r2, r2
 800565c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800565e:	241a      	movs	r4, #26
 8005660:	193b      	adds	r3, r7, r4
 8005662:	881b      	ldrh	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d009      	beq.n	800567c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6818      	ldr	r0, [r3, #0]
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	6959      	ldr	r1, [r3, #20]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	895a      	ldrh	r2, [r3, #10]
 8005674:	193b      	adds	r3, r7, r4
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	f005 fbe2 	bl	800ae40 <USB_ReadPMA>
    }
  }

  return count;
 800567c:	231a      	movs	r3, #26
 800567e:	18fb      	adds	r3, r7, r3
 8005680:	881b      	ldrh	r3, [r3, #0]
}
 8005682:	0018      	movs	r0, r3
 8005684:	46bd      	mov	sp, r7
 8005686:	b009      	add	sp, #36	; 0x24
 8005688:	bd90      	pop	{r4, r7, pc}
 800568a:	46c0      	nop			; (mov r8, r8)
 800568c:	00000402 	.word	0x00000402
 8005690:	ffffbf8f 	.word	0xffffbf8f
 8005694:	ffff8080 	.word	0xffff8080
 8005698:	ffff8f8f 	.word	0xffff8f8f
 800569c:	ffff80c0 	.word	0xffff80c0
 80056a0:	00000406 	.word	0x00000406

080056a4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b0a2      	sub	sp, #136	; 0x88
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	1dbb      	adds	r3, r7, #6
 80056b0:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80056b2:	1dbb      	adds	r3, r7, #6
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	2240      	movs	r2, #64	; 0x40
 80056b8:	4013      	ands	r3, r2
 80056ba:	d100      	bne.n	80056be <HAL_PCD_EP_DB_Transmit+0x1a>
 80056bc:	e1c8      	b.n	8005a50 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2250      	movs	r2, #80	; 0x50
 80056c4:	5a9b      	ldrh	r3, [r3, r2]
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	001a      	movs	r2, r3
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	18d2      	adds	r2, r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	18d3      	adds	r3, r2, r3
 80056d8:	4ad7      	ldr	r2, [pc, #860]	; (8005a38 <HAL_PCD_EP_DB_Transmit+0x394>)
 80056da:	4694      	mov	ip, r2
 80056dc:	4463      	add	r3, ip
 80056de:	881a      	ldrh	r2, [r3, #0]
 80056e0:	214e      	movs	r1, #78	; 0x4e
 80056e2:	187b      	adds	r3, r7, r1
 80056e4:	0592      	lsls	r2, r2, #22
 80056e6:	0d92      	lsrs	r2, r2, #22
 80056e8:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	187b      	adds	r3, r7, r1
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d907      	bls.n	8005706 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	699a      	ldr	r2, [r3, #24]
 80056fa:	187b      	adds	r3, r7, r1
 80056fc:	881b      	ldrh	r3, [r3, #0]
 80056fe:	1ad2      	subs	r2, r2, r3
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	619a      	str	r2, [r3, #24]
 8005704:	e002      	b.n	800570c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2200      	movs	r2, #0
 800570a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d000      	beq.n	8005716 <HAL_PCD_EP_DB_Transmit+0x72>
 8005714:	e0b5      	b.n	8005882 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	785b      	ldrb	r3, [r3, #1]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d125      	bne.n	800576a <HAL_PCD_EP_DB_Transmit+0xc6>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	62bb      	str	r3, [r7, #40]	; 0x28
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2250      	movs	r2, #80	; 0x50
 800572a:	5a9b      	ldrh	r3, [r3, r2]
 800572c:	b29b      	uxth	r3, r3
 800572e:	001a      	movs	r2, r3
 8005730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005732:	189b      	adds	r3, r3, r2
 8005734:	62bb      	str	r3, [r7, #40]	; 0x28
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	00da      	lsls	r2, r3, #3
 800573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573e:	18d3      	adds	r3, r2, r3
 8005740:	4abd      	ldr	r2, [pc, #756]	; (8005a38 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005742:	4694      	mov	ip, r2
 8005744:	4463      	add	r3, ip
 8005746:	627b      	str	r3, [r7, #36]	; 0x24
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	4abb      	ldr	r2, [pc, #748]	; (8005a3c <HAL_PCD_EP_DB_Transmit+0x398>)
 8005750:	4013      	ands	r3, r2
 8005752:	b29a      	uxth	r2, r3
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	801a      	strh	r2, [r3, #0]
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	881b      	ldrh	r3, [r3, #0]
 800575c:	b29b      	uxth	r3, r3
 800575e:	4ab8      	ldr	r2, [pc, #736]	; (8005a40 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005760:	4313      	orrs	r3, r2
 8005762:	b29a      	uxth	r2, r3
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	801a      	strh	r2, [r3, #0]
 8005768:	e01b      	b.n	80057a2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	785b      	ldrb	r3, [r3, #1]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d117      	bne.n	80057a2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	633b      	str	r3, [r7, #48]	; 0x30
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2250      	movs	r2, #80	; 0x50
 800577e:	5a9b      	ldrh	r3, [r3, r2]
 8005780:	b29b      	uxth	r3, r3
 8005782:	001a      	movs	r2, r3
 8005784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005786:	189b      	adds	r3, r3, r2
 8005788:	633b      	str	r3, [r7, #48]	; 0x30
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	00da      	lsls	r2, r3, #3
 8005790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005792:	18d3      	adds	r3, r2, r3
 8005794:	4aa8      	ldr	r2, [pc, #672]	; (8005a38 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005796:	4694      	mov	ip, r2
 8005798:	4463      	add	r3, ip
 800579a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800579c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579e:	2200      	movs	r2, #0
 80057a0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	623b      	str	r3, [r7, #32]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	785b      	ldrb	r3, [r3, #1]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d125      	bne.n	80057fc <HAL_PCD_EP_DB_Transmit+0x158>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	61bb      	str	r3, [r7, #24]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2250      	movs	r2, #80	; 0x50
 80057bc:	5a9b      	ldrh	r3, [r3, r2]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	001a      	movs	r2, r3
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	189b      	adds	r3, r3, r2
 80057c6:	61bb      	str	r3, [r7, #24]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	00da      	lsls	r2, r3, #3
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	18d3      	adds	r3, r2, r3
 80057d2:	4a9c      	ldr	r2, [pc, #624]	; (8005a44 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 80057d4:	4694      	mov	ip, r2
 80057d6:	4463      	add	r3, ip
 80057d8:	617b      	str	r3, [r7, #20]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	b29b      	uxth	r3, r3
 80057e0:	4a96      	ldr	r2, [pc, #600]	; (8005a3c <HAL_PCD_EP_DB_Transmit+0x398>)
 80057e2:	4013      	ands	r3, r2
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	801a      	strh	r2, [r3, #0]
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	4a93      	ldr	r2, [pc, #588]	; (8005a40 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	801a      	strh	r2, [r3, #0]
 80057fa:	e018      	b.n	800582e <HAL_PCD_EP_DB_Transmit+0x18a>
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	785b      	ldrb	r3, [r3, #1]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d114      	bne.n	800582e <HAL_PCD_EP_DB_Transmit+0x18a>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2250      	movs	r2, #80	; 0x50
 800580a:	5a9b      	ldrh	r3, [r3, r2]
 800580c:	b29b      	uxth	r3, r3
 800580e:	001a      	movs	r2, r3
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	189b      	adds	r3, r3, r2
 8005814:	623b      	str	r3, [r7, #32]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	00da      	lsls	r2, r3, #3
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	18d3      	adds	r3, r2, r3
 8005820:	4a88      	ldr	r2, [pc, #544]	; (8005a44 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8005822:	4694      	mov	ip, r2
 8005824:	4463      	add	r3, ip
 8005826:	61fb      	str	r3, [r7, #28]
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	2200      	movs	r2, #0
 800582c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	781a      	ldrb	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	0011      	movs	r1, r2
 8005836:	0018      	movs	r0, r3
 8005838:	f007 fb06 	bl	800ce48 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800583c:	1dbb      	adds	r3, r7, #6
 800583e:	881a      	ldrh	r2, [r3, #0]
 8005840:	2380      	movs	r3, #128	; 0x80
 8005842:	01db      	lsls	r3, r3, #7
 8005844:	4013      	ands	r3, r2
 8005846:	d100      	bne.n	800584a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8005848:	e2d4      	b.n	8005df4 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	001a      	movs	r2, r3
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	18d3      	adds	r3, r2, r3
 8005858:	881b      	ldrh	r3, [r3, #0]
 800585a:	b29a      	uxth	r2, r3
 800585c:	2012      	movs	r0, #18
 800585e:	183b      	adds	r3, r7, r0
 8005860:	4979      	ldr	r1, [pc, #484]	; (8005a48 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8005862:	400a      	ands	r2, r1
 8005864:	801a      	strh	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	001a      	movs	r2, r3
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	18d3      	adds	r3, r2, r3
 8005874:	183a      	adds	r2, r7, r0
 8005876:	8812      	ldrh	r2, [r2, #0]
 8005878:	4974      	ldr	r1, [pc, #464]	; (8005a4c <HAL_PCD_EP_DB_Transmit+0x3a8>)
 800587a:	430a      	orrs	r2, r1
 800587c:	b292      	uxth	r2, r2
 800587e:	801a      	strh	r2, [r3, #0]
 8005880:	e2b8      	b.n	8005df4 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005882:	1dbb      	adds	r3, r7, #6
 8005884:	881a      	ldrh	r2, [r3, #0]
 8005886:	2380      	movs	r3, #128	; 0x80
 8005888:	01db      	lsls	r3, r3, #7
 800588a:	4013      	ands	r3, r2
 800588c:	d01a      	beq.n	80058c4 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	001a      	movs	r2, r3
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	18d3      	adds	r3, r2, r3
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	b29a      	uxth	r2, r3
 80058a0:	2044      	movs	r0, #68	; 0x44
 80058a2:	183b      	adds	r3, r7, r0
 80058a4:	4968      	ldr	r1, [pc, #416]	; (8005a48 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 80058a6:	400a      	ands	r2, r1
 80058a8:	801a      	strh	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	001a      	movs	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	18d3      	adds	r3, r2, r3
 80058b8:	183a      	adds	r2, r7, r0
 80058ba:	8812      	ldrh	r2, [r2, #0]
 80058bc:	4963      	ldr	r1, [pc, #396]	; (8005a4c <HAL_PCD_EP_DB_Transmit+0x3a8>)
 80058be:	430a      	orrs	r2, r1
 80058c0:	b292      	uxth	r2, r2
 80058c2:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2224      	movs	r2, #36	; 0x24
 80058c8:	5c9b      	ldrb	r3, [r3, r2]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d000      	beq.n	80058d0 <HAL_PCD_EP_DB_Transmit+0x22c>
 80058ce:	e291      	b.n	8005df4 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	695a      	ldr	r2, [r3, #20]
 80058d4:	214e      	movs	r1, #78	; 0x4e
 80058d6:	187b      	adds	r3, r7, r1
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	18d2      	adds	r2, r2, r3
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	69da      	ldr	r2, [r3, #28]
 80058e4:	187b      	adds	r3, r7, r1
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	18d2      	adds	r2, r2, r3
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	6a1a      	ldr	r2, [r3, #32]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d309      	bcc.n	800590e <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	6a1a      	ldr	r2, [r3, #32]
 8005904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005906:	1ad2      	subs	r2, r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	621a      	str	r2, [r3, #32]
 800590c:	e016      	b.n	800593c <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d108      	bne.n	8005928 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8005916:	234e      	movs	r3, #78	; 0x4e
 8005918:	18fb      	adds	r3, r7, r3
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2224      	movs	r2, #36	; 0x24
 8005922:	2100      	movs	r1, #0
 8005924:	5499      	strb	r1, [r3, r2]
 8005926:	e009      	b.n	800593c <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2224      	movs	r2, #36	; 0x24
 800592c:	2100      	movs	r1, #0
 800592e:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2200      	movs	r2, #0
 800593a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	785b      	ldrb	r3, [r3, #1]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d150      	bne.n	80059e6 <HAL_PCD_EP_DB_Transmit+0x342>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	63bb      	str	r3, [r7, #56]	; 0x38
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2250      	movs	r2, #80	; 0x50
 8005950:	5a9b      	ldrh	r3, [r3, r2]
 8005952:	b29b      	uxth	r3, r3
 8005954:	001a      	movs	r2, r3
 8005956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005958:	189b      	adds	r3, r3, r2
 800595a:	63bb      	str	r3, [r7, #56]	; 0x38
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	00da      	lsls	r2, r3, #3
 8005962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005964:	18d3      	adds	r3, r2, r3
 8005966:	4a34      	ldr	r2, [pc, #208]	; (8005a38 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005968:	4694      	mov	ip, r2
 800596a:	4463      	add	r3, ip
 800596c:	637b      	str	r3, [r7, #52]	; 0x34
 800596e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005970:	2b00      	cmp	r3, #0
 8005972:	d110      	bne.n	8005996 <HAL_PCD_EP_DB_Transmit+0x2f2>
 8005974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	b29b      	uxth	r3, r3
 800597a:	4a30      	ldr	r2, [pc, #192]	; (8005a3c <HAL_PCD_EP_DB_Transmit+0x398>)
 800597c:	4013      	ands	r3, r2
 800597e:	b29a      	uxth	r2, r3
 8005980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005982:	801a      	strh	r2, [r3, #0]
 8005984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	b29b      	uxth	r3, r3
 800598a:	4a2d      	ldr	r2, [pc, #180]	; (8005a40 <HAL_PCD_EP_DB_Transmit+0x39c>)
 800598c:	4313      	orrs	r3, r2
 800598e:	b29a      	uxth	r2, r3
 8005990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005992:	801a      	strh	r2, [r3, #0]
 8005994:	e044      	b.n	8005a20 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005998:	2b3e      	cmp	r3, #62	; 0x3e
 800599a:	d810      	bhi.n	80059be <HAL_PCD_EP_DB_Transmit+0x31a>
 800599c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800599e:	085b      	lsrs	r3, r3, #1
 80059a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80059a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059a4:	2201      	movs	r2, #1
 80059a6:	4013      	ands	r3, r2
 80059a8:	d002      	beq.n	80059b0 <HAL_PCD_EP_DB_Transmit+0x30c>
 80059aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ac:	3301      	adds	r3, #1
 80059ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80059b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	029b      	lsls	r3, r3, #10
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ba:	801a      	strh	r2, [r3, #0]
 80059bc:	e030      	b.n	8005a20 <HAL_PCD_EP_DB_Transmit+0x37c>
 80059be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059c0:	095b      	lsrs	r3, r3, #5
 80059c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80059c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059c6:	221f      	movs	r2, #31
 80059c8:	4013      	ands	r3, r2
 80059ca:	d102      	bne.n	80059d2 <HAL_PCD_EP_DB_Transmit+0x32e>
 80059cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ce:	3b01      	subs	r3, #1
 80059d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80059d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	029b      	lsls	r3, r3, #10
 80059d8:	b29b      	uxth	r3, r3
 80059da:	4a19      	ldr	r2, [pc, #100]	; (8005a40 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	b29a      	uxth	r2, r3
 80059e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e2:	801a      	strh	r2, [r3, #0]
 80059e4:	e01c      	b.n	8005a20 <HAL_PCD_EP_DB_Transmit+0x37c>
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	785b      	ldrb	r3, [r3, #1]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d118      	bne.n	8005a20 <HAL_PCD_EP_DB_Transmit+0x37c>
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	643b      	str	r3, [r7, #64]	; 0x40
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2250      	movs	r2, #80	; 0x50
 80059fa:	5a9b      	ldrh	r3, [r3, r2]
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	001a      	movs	r2, r3
 8005a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a02:	189b      	adds	r3, r3, r2
 8005a04:	643b      	str	r3, [r7, #64]	; 0x40
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	00da      	lsls	r2, r3, #3
 8005a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a0e:	18d3      	adds	r3, r2, r3
 8005a10:	4a09      	ldr	r2, [pc, #36]	; (8005a38 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005a12:	4694      	mov	ip, r2
 8005a14:	4463      	add	r3, ip
 8005a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6818      	ldr	r0, [r3, #0]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	6959      	ldr	r1, [r3, #20]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	891a      	ldrh	r2, [r3, #8]
 8005a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	f005 f9c2 	bl	800adb8 <USB_WritePMA>
 8005a34:	e1de      	b.n	8005df4 <HAL_PCD_EP_DB_Transmit+0x750>
 8005a36:	46c0      	nop			; (mov r8, r8)
 8005a38:	00000402 	.word	0x00000402
 8005a3c:	ffff83ff 	.word	0xffff83ff
 8005a40:	ffff8000 	.word	0xffff8000
 8005a44:	00000406 	.word	0x00000406
 8005a48:	ffff8f8f 	.word	0xffff8f8f
 8005a4c:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2250      	movs	r2, #80	; 0x50
 8005a56:	5a9b      	ldrh	r3, [r3, r2]
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	001a      	movs	r2, r3
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	18d2      	adds	r2, r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	18d3      	adds	r3, r2, r3
 8005a6a:	4aca      	ldr	r2, [pc, #808]	; (8005d94 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005a6c:	4694      	mov	ip, r2
 8005a6e:	4463      	add	r3, ip
 8005a70:	881a      	ldrh	r2, [r3, #0]
 8005a72:	214e      	movs	r1, #78	; 0x4e
 8005a74:	187b      	adds	r3, r7, r1
 8005a76:	0592      	lsls	r2, r2, #22
 8005a78:	0d92      	lsrs	r2, r2, #22
 8005a7a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	699a      	ldr	r2, [r3, #24]
 8005a80:	187b      	adds	r3, r7, r1
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d307      	bcc.n	8005a98 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	699a      	ldr	r2, [r3, #24]
 8005a8c:	187b      	adds	r3, r7, r1
 8005a8e:	881b      	ldrh	r3, [r3, #0]
 8005a90:	1ad2      	subs	r2, r2, r3
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	619a      	str	r2, [r3, #24]
 8005a96:	e002      	b.n	8005a9e <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d000      	beq.n	8005aa8 <HAL_PCD_EP_DB_Transmit+0x404>
 8005aa6:	e0c0      	b.n	8005c2a <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	785b      	ldrb	r3, [r3, #1]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d125      	bne.n	8005afc <HAL_PCD_EP_DB_Transmit+0x458>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2250      	movs	r2, #80	; 0x50
 8005abc:	5a9b      	ldrh	r3, [r3, r2]
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	001a      	movs	r2, r3
 8005ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac4:	189b      	adds	r3, r3, r2
 8005ac6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	00da      	lsls	r2, r3, #3
 8005ace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ad0:	18d3      	adds	r3, r2, r3
 8005ad2:	4ab1      	ldr	r2, [pc, #708]	; (8005d98 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8005ad4:	4694      	mov	ip, r2
 8005ad6:	4463      	add	r3, ip
 8005ad8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	4aae      	ldr	r2, [pc, #696]	; (8005d9c <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ae8:	801a      	strh	r2, [r3, #0]
 8005aea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	4aab      	ldr	r2, [pc, #684]	; (8005da0 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005af8:	801a      	strh	r2, [r3, #0]
 8005afa:	e01b      	b.n	8005b34 <HAL_PCD_EP_DB_Transmit+0x490>
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	785b      	ldrb	r3, [r3, #1]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d117      	bne.n	8005b34 <HAL_PCD_EP_DB_Transmit+0x490>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	677b      	str	r3, [r7, #116]	; 0x74
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2250      	movs	r2, #80	; 0x50
 8005b10:	5a9b      	ldrh	r3, [r3, r2]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	001a      	movs	r2, r3
 8005b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b18:	189b      	adds	r3, r3, r2
 8005b1a:	677b      	str	r3, [r7, #116]	; 0x74
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	00da      	lsls	r2, r3, #3
 8005b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b24:	18d3      	adds	r3, r2, r3
 8005b26:	4a9c      	ldr	r2, [pc, #624]	; (8005d98 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8005b28:	4694      	mov	ip, r2
 8005b2a:	4463      	add	r3, ip
 8005b2c:	673b      	str	r3, [r7, #112]	; 0x70
 8005b2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b30:	2200      	movs	r2, #0
 8005b32:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	785b      	ldrb	r3, [r3, #1]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d130      	bne.n	8005ba4 <HAL_PCD_EP_DB_Transmit+0x500>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2180      	movs	r1, #128	; 0x80
 8005b48:	187a      	adds	r2, r7, r1
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2250      	movs	r2, #80	; 0x50
 8005b52:	5a9b      	ldrh	r3, [r3, r2]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	001a      	movs	r2, r3
 8005b58:	187b      	adds	r3, r7, r1
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	189b      	adds	r3, r3, r2
 8005b5e:	187a      	adds	r2, r7, r1
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	00da      	lsls	r2, r3, #3
 8005b68:	187b      	adds	r3, r7, r1
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	18d3      	adds	r3, r2, r3
 8005b6e:	4a89      	ldr	r2, [pc, #548]	; (8005d94 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005b70:	4694      	mov	ip, r2
 8005b72:	4463      	add	r3, ip
 8005b74:	2184      	movs	r1, #132	; 0x84
 8005b76:	187a      	adds	r2, r7, r1
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	187b      	adds	r3, r7, r1
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	4a86      	ldr	r2, [pc, #536]	; (8005d9c <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8005b84:	4013      	ands	r3, r2
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	187b      	adds	r3, r7, r1
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	801a      	strh	r2, [r3, #0]
 8005b8e:	187b      	adds	r3, r7, r1
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	4a82      	ldr	r2, [pc, #520]	; (8005da0 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	187b      	adds	r3, r7, r1
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	801a      	strh	r2, [r3, #0]
 8005ba2:	e018      	b.n	8005bd6 <HAL_PCD_EP_DB_Transmit+0x532>
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	785b      	ldrb	r3, [r3, #1]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d114      	bne.n	8005bd6 <HAL_PCD_EP_DB_Transmit+0x532>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2250      	movs	r2, #80	; 0x50
 8005bb2:	5a9b      	ldrh	r3, [r3, r2]
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	001a      	movs	r2, r3
 8005bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bba:	189b      	adds	r3, r3, r2
 8005bbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	00da      	lsls	r2, r3, #3
 8005bc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bc6:	18d3      	adds	r3, r2, r3
 8005bc8:	4a72      	ldr	r2, [pc, #456]	; (8005d94 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005bca:	4694      	mov	ip, r2
 8005bcc:	4463      	add	r3, ip
 8005bce:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005bd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	781a      	ldrb	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	0011      	movs	r1, r2
 8005bde:	0018      	movs	r0, r3
 8005be0:	f007 f932 	bl	800ce48 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005be4:	1dbb      	adds	r3, r7, #6
 8005be6:	881a      	ldrh	r2, [r3, #0]
 8005be8:	2380      	movs	r3, #128	; 0x80
 8005bea:	01db      	lsls	r3, r3, #7
 8005bec:	4013      	ands	r3, r2
 8005bee:	d000      	beq.n	8005bf2 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005bf0:	e100      	b.n	8005df4 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	001a      	movs	r2, r3
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	18d3      	adds	r3, r2, r3
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	2046      	movs	r0, #70	; 0x46
 8005c06:	183b      	adds	r3, r7, r0
 8005c08:	4966      	ldr	r1, [pc, #408]	; (8005da4 <HAL_PCD_EP_DB_Transmit+0x700>)
 8005c0a:	400a      	ands	r2, r1
 8005c0c:	801a      	strh	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	001a      	movs	r2, r3
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	18d3      	adds	r3, r2, r3
 8005c1c:	183a      	adds	r2, r7, r0
 8005c1e:	8812      	ldrh	r2, [r2, #0]
 8005c20:	4961      	ldr	r1, [pc, #388]	; (8005da8 <HAL_PCD_EP_DB_Transmit+0x704>)
 8005c22:	430a      	orrs	r2, r1
 8005c24:	b292      	uxth	r2, r2
 8005c26:	801a      	strh	r2, [r3, #0]
 8005c28:	e0e4      	b.n	8005df4 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005c2a:	1dbb      	adds	r3, r7, #6
 8005c2c:	881a      	ldrh	r2, [r3, #0]
 8005c2e:	2380      	movs	r3, #128	; 0x80
 8005c30:	01db      	lsls	r3, r3, #7
 8005c32:	4013      	ands	r3, r2
 8005c34:	d11a      	bne.n	8005c6c <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	001a      	movs	r2, r3
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	18d3      	adds	r3, r2, r3
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	204c      	movs	r0, #76	; 0x4c
 8005c4a:	183b      	adds	r3, r7, r0
 8005c4c:	4955      	ldr	r1, [pc, #340]	; (8005da4 <HAL_PCD_EP_DB_Transmit+0x700>)
 8005c4e:	400a      	ands	r2, r1
 8005c50:	801a      	strh	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	001a      	movs	r2, r3
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	18d3      	adds	r3, r2, r3
 8005c60:	183a      	adds	r2, r7, r0
 8005c62:	8812      	ldrh	r2, [r2, #0]
 8005c64:	4950      	ldr	r1, [pc, #320]	; (8005da8 <HAL_PCD_EP_DB_Transmit+0x704>)
 8005c66:	430a      	orrs	r2, r1
 8005c68:	b292      	uxth	r2, r2
 8005c6a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2224      	movs	r2, #36	; 0x24
 8005c70:	5c9b      	ldrb	r3, [r3, r2]
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d000      	beq.n	8005c78 <HAL_PCD_EP_DB_Transmit+0x5d4>
 8005c76:	e0bd      	b.n	8005df4 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	695a      	ldr	r2, [r3, #20]
 8005c7c:	214e      	movs	r1, #78	; 0x4e
 8005c7e:	187b      	adds	r3, r7, r1
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	18d2      	adds	r2, r2, r3
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	69da      	ldr	r2, [r3, #28]
 8005c8c:	187b      	adds	r3, r7, r1
 8005c8e:	881b      	ldrh	r3, [r3, #0]
 8005c90:	18d2      	adds	r2, r2, r3
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	6a1a      	ldr	r2, [r3, #32]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d309      	bcc.n	8005cb6 <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	6a1a      	ldr	r2, [r3, #32]
 8005cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cae:	1ad2      	subs	r2, r2, r3
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	621a      	str	r2, [r3, #32]
 8005cb4:	e016      	b.n	8005ce4 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d108      	bne.n	8005cd0 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8005cbe:	234e      	movs	r3, #78	; 0x4e
 8005cc0:	18fb      	adds	r3, r7, r3
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2224      	movs	r2, #36	; 0x24
 8005cca:	2100      	movs	r1, #0
 8005ccc:	5499      	strb	r1, [r3, r2]
 8005cce:	e009      	b.n	8005ce4 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2224      	movs	r2, #36	; 0x24
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	667b      	str	r3, [r7, #100]	; 0x64
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	785b      	ldrb	r3, [r3, #1]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d15c      	bne.n	8005dac <HAL_PCD_EP_DB_Transmit+0x708>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2250      	movs	r2, #80	; 0x50
 8005cfe:	5a9b      	ldrh	r3, [r3, r2]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	001a      	movs	r2, r3
 8005d04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d06:	189b      	adds	r3, r3, r2
 8005d08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	00da      	lsls	r2, r3, #3
 8005d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d12:	18d3      	adds	r3, r2, r3
 8005d14:	4a1f      	ldr	r2, [pc, #124]	; (8005d94 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005d16:	4694      	mov	ip, r2
 8005d18:	4463      	add	r3, ip
 8005d1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d110      	bne.n	8005d44 <HAL_PCD_EP_DB_Transmit+0x6a0>
 8005d22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d24:	881b      	ldrh	r3, [r3, #0]
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	4a1c      	ldr	r2, [pc, #112]	; (8005d9c <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d30:	801a      	strh	r2, [r3, #0]
 8005d32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	4a19      	ldr	r2, [pc, #100]	; (8005da0 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d40:	801a      	strh	r2, [r3, #0]
 8005d42:	e04d      	b.n	8005de0 <HAL_PCD_EP_DB_Transmit+0x73c>
 8005d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d46:	2b3e      	cmp	r3, #62	; 0x3e
 8005d48:	d810      	bhi.n	8005d6c <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d4c:	085b      	lsrs	r3, r3, #1
 8005d4e:	657b      	str	r3, [r7, #84]	; 0x54
 8005d50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d52:	2201      	movs	r2, #1
 8005d54:	4013      	ands	r3, r2
 8005d56:	d002      	beq.n	8005d5e <HAL_PCD_EP_DB_Transmit+0x6ba>
 8005d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d5a:	3301      	adds	r3, #1
 8005d5c:	657b      	str	r3, [r7, #84]	; 0x54
 8005d5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	029b      	lsls	r3, r3, #10
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d68:	801a      	strh	r2, [r3, #0]
 8005d6a:	e039      	b.n	8005de0 <HAL_PCD_EP_DB_Transmit+0x73c>
 8005d6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d6e:	095b      	lsrs	r3, r3, #5
 8005d70:	657b      	str	r3, [r7, #84]	; 0x54
 8005d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d74:	221f      	movs	r2, #31
 8005d76:	4013      	ands	r3, r2
 8005d78:	d102      	bne.n	8005d80 <HAL_PCD_EP_DB_Transmit+0x6dc>
 8005d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	657b      	str	r3, [r7, #84]	; 0x54
 8005d80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	029b      	lsls	r3, r3, #10
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	4a05      	ldr	r2, [pc, #20]	; (8005da0 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d90:	801a      	strh	r2, [r3, #0]
 8005d92:	e025      	b.n	8005de0 <HAL_PCD_EP_DB_Transmit+0x73c>
 8005d94:	00000406 	.word	0x00000406
 8005d98:	00000402 	.word	0x00000402
 8005d9c:	ffff83ff 	.word	0xffff83ff
 8005da0:	ffff8000 	.word	0xffff8000
 8005da4:	ffff8f8f 	.word	0xffff8f8f
 8005da8:	ffffc080 	.word	0xffffc080
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	785b      	ldrb	r3, [r3, #1]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d115      	bne.n	8005de0 <HAL_PCD_EP_DB_Transmit+0x73c>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2250      	movs	r2, #80	; 0x50
 8005dba:	5a9b      	ldrh	r3, [r3, r2]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	001a      	movs	r2, r3
 8005dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dc2:	189b      	adds	r3, r3, r2
 8005dc4:	667b      	str	r3, [r7, #100]	; 0x64
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	00da      	lsls	r2, r3, #3
 8005dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dce:	18d3      	adds	r3, r2, r3
 8005dd0:	4a1e      	ldr	r2, [pc, #120]	; (8005e4c <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8005dd2:	4694      	mov	ip, r2
 8005dd4:	4463      	add	r3, ip
 8005dd6:	663b      	str	r3, [r7, #96]	; 0x60
 8005dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dde:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6818      	ldr	r0, [r3, #0]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	6959      	ldr	r1, [r3, #20]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	895a      	ldrh	r2, [r3, #10]
 8005dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	f004 ffe2 	bl	800adb8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	001a      	movs	r2, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	18d3      	adds	r3, r2, r3
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	2010      	movs	r0, #16
 8005e08:	183b      	adds	r3, r7, r0
 8005e0a:	4911      	ldr	r1, [pc, #68]	; (8005e50 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8005e0c:	400a      	ands	r2, r1
 8005e0e:	801a      	strh	r2, [r3, #0]
 8005e10:	183b      	adds	r3, r7, r0
 8005e12:	183a      	adds	r2, r7, r0
 8005e14:	8812      	ldrh	r2, [r2, #0]
 8005e16:	2110      	movs	r1, #16
 8005e18:	404a      	eors	r2, r1
 8005e1a:	801a      	strh	r2, [r3, #0]
 8005e1c:	183b      	adds	r3, r7, r0
 8005e1e:	183a      	adds	r2, r7, r0
 8005e20:	8812      	ldrh	r2, [r2, #0]
 8005e22:	2120      	movs	r1, #32
 8005e24:	404a      	eors	r2, r1
 8005e26:	801a      	strh	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	001a      	movs	r2, r3
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	18d3      	adds	r3, r2, r3
 8005e36:	183a      	adds	r2, r7, r0
 8005e38:	8812      	ldrh	r2, [r2, #0]
 8005e3a:	4906      	ldr	r1, [pc, #24]	; (8005e54 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	b292      	uxth	r2, r2
 8005e40:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	0018      	movs	r0, r3
 8005e46:	46bd      	mov	sp, r7
 8005e48:	b022      	add	sp, #136	; 0x88
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	00000406 	.word	0x00000406
 8005e50:	ffff8fbf 	.word	0xffff8fbf
 8005e54:	ffff8080 	.word	0xffff8080

08005e58 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005e58:	b590      	push	{r4, r7, lr}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	0008      	movs	r0, r1
 8005e62:	0011      	movs	r1, r2
 8005e64:	607b      	str	r3, [r7, #4]
 8005e66:	240a      	movs	r4, #10
 8005e68:	193b      	adds	r3, r7, r4
 8005e6a:	1c02      	adds	r2, r0, #0
 8005e6c:	801a      	strh	r2, [r3, #0]
 8005e6e:	2308      	movs	r3, #8
 8005e70:	18fb      	adds	r3, r7, r3
 8005e72:	1c0a      	adds	r2, r1, #0
 8005e74:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005e76:	0021      	movs	r1, r4
 8005e78:	187b      	adds	r3, r7, r1
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	2280      	movs	r2, #128	; 0x80
 8005e7e:	4013      	ands	r3, r2
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00c      	beq.n	8005ea0 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e86:	187b      	adds	r3, r7, r1
 8005e88:	881b      	ldrh	r3, [r3, #0]
 8005e8a:	2207      	movs	r2, #7
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	0013      	movs	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	189b      	adds	r3, r3, r2
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	18d3      	adds	r3, r2, r3
 8005e9c:	617b      	str	r3, [r7, #20]
 8005e9e:	e00b      	b.n	8005eb8 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005ea0:	230a      	movs	r3, #10
 8005ea2:	18fb      	adds	r3, r7, r3
 8005ea4:	881a      	ldrh	r2, [r3, #0]
 8005ea6:	0013      	movs	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	189b      	adds	r3, r3, r2
 8005eac:	00db      	lsls	r3, r3, #3
 8005eae:	3369      	adds	r3, #105	; 0x69
 8005eb0:	33ff      	adds	r3, #255	; 0xff
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	18d3      	adds	r3, r2, r3
 8005eb6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005eb8:	2308      	movs	r3, #8
 8005eba:	18fb      	adds	r3, r7, r3
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d107      	bne.n	8005ed2 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	80da      	strh	r2, [r3, #6]
 8005ed0:	e00b      	b.n	8005eea <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	0c1b      	lsrs	r3, r3, #16
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	0018      	movs	r0, r3
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	b007      	add	sp, #28
 8005ef2:	bd90      	pop	{r4, r7, pc}

08005ef4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	23ba      	movs	r3, #186	; 0xba
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	2101      	movs	r1, #1
 8005f0a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	23b8      	movs	r3, #184	; 0xb8
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	2100      	movs	r1, #0
 8005f14:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2254      	movs	r2, #84	; 0x54
 8005f1a:	5a9b      	ldrh	r3, [r3, r2]
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	2201      	movs	r2, #1
 8005f20:	4313      	orrs	r3, r2
 8005f22:	b299      	uxth	r1, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2254      	movs	r2, #84	; 0x54
 8005f28:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2254      	movs	r2, #84	; 0x54
 8005f2e:	5a9b      	ldrh	r3, [r3, r2]
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	2202      	movs	r2, #2
 8005f34:	4313      	orrs	r3, r2
 8005f36:	b299      	uxth	r1, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2254      	movs	r2, #84	; 0x54
 8005f3c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	0018      	movs	r0, r3
 8005f42:	46bd      	mov	sp, r7
 8005f44:	b004      	add	sp, #16
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	000a      	movs	r2, r1
 8005f52:	1cfb      	adds	r3, r7, #3
 8005f54:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	b002      	add	sp, #8
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b088      	sub	sp, #32
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d102      	bne.n	8005f74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	f000 fb76 	bl	8006660 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	d100      	bne.n	8005f80 <HAL_RCC_OscConfig+0x20>
 8005f7e:	e08e      	b.n	800609e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005f80:	4bc5      	ldr	r3, [pc, #788]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	220c      	movs	r2, #12
 8005f86:	4013      	ands	r3, r2
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d00e      	beq.n	8005faa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f8c:	4bc2      	ldr	r3, [pc, #776]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	220c      	movs	r2, #12
 8005f92:	4013      	ands	r3, r2
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d117      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x68>
 8005f98:	4bbf      	ldr	r3, [pc, #764]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 8005f9a:	685a      	ldr	r2, [r3, #4]
 8005f9c:	23c0      	movs	r3, #192	; 0xc0
 8005f9e:	025b      	lsls	r3, r3, #9
 8005fa0:	401a      	ands	r2, r3
 8005fa2:	2380      	movs	r3, #128	; 0x80
 8005fa4:	025b      	lsls	r3, r3, #9
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d10e      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005faa:	4bbb      	ldr	r3, [pc, #748]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	2380      	movs	r3, #128	; 0x80
 8005fb0:	029b      	lsls	r3, r3, #10
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	d100      	bne.n	8005fb8 <HAL_RCC_OscConfig+0x58>
 8005fb6:	e071      	b.n	800609c <HAL_RCC_OscConfig+0x13c>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d000      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x62>
 8005fc0:	e06c      	b.n	800609c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	f000 fb4c 	bl	8006660 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d107      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x80>
 8005fd0:	4bb1      	ldr	r3, [pc, #708]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	4bb0      	ldr	r3, [pc, #704]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 8005fd6:	2180      	movs	r1, #128	; 0x80
 8005fd8:	0249      	lsls	r1, r1, #9
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	e02f      	b.n	8006040 <HAL_RCC_OscConfig+0xe0>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10c      	bne.n	8006002 <HAL_RCC_OscConfig+0xa2>
 8005fe8:	4bab      	ldr	r3, [pc, #684]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	4baa      	ldr	r3, [pc, #680]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 8005fee:	49ab      	ldr	r1, [pc, #684]	; (800629c <HAL_RCC_OscConfig+0x33c>)
 8005ff0:	400a      	ands	r2, r1
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	4ba8      	ldr	r3, [pc, #672]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	4ba7      	ldr	r3, [pc, #668]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 8005ffa:	49a9      	ldr	r1, [pc, #676]	; (80062a0 <HAL_RCC_OscConfig+0x340>)
 8005ffc:	400a      	ands	r2, r1
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	e01e      	b.n	8006040 <HAL_RCC_OscConfig+0xe0>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2b05      	cmp	r3, #5
 8006008:	d10e      	bne.n	8006028 <HAL_RCC_OscConfig+0xc8>
 800600a:	4ba3      	ldr	r3, [pc, #652]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	4ba2      	ldr	r3, [pc, #648]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 8006010:	2180      	movs	r1, #128	; 0x80
 8006012:	02c9      	lsls	r1, r1, #11
 8006014:	430a      	orrs	r2, r1
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	4b9f      	ldr	r3, [pc, #636]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	4b9e      	ldr	r3, [pc, #632]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 800601e:	2180      	movs	r1, #128	; 0x80
 8006020:	0249      	lsls	r1, r1, #9
 8006022:	430a      	orrs	r2, r1
 8006024:	601a      	str	r2, [r3, #0]
 8006026:	e00b      	b.n	8006040 <HAL_RCC_OscConfig+0xe0>
 8006028:	4b9b      	ldr	r3, [pc, #620]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	4b9a      	ldr	r3, [pc, #616]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 800602e:	499b      	ldr	r1, [pc, #620]	; (800629c <HAL_RCC_OscConfig+0x33c>)
 8006030:	400a      	ands	r2, r1
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	4b98      	ldr	r3, [pc, #608]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	4b97      	ldr	r3, [pc, #604]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 800603a:	4999      	ldr	r1, [pc, #612]	; (80062a0 <HAL_RCC_OscConfig+0x340>)
 800603c:	400a      	ands	r2, r1
 800603e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d014      	beq.n	8006072 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006048:	f7fd f884 	bl	8003154 <HAL_GetTick>
 800604c:	0003      	movs	r3, r0
 800604e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006050:	e008      	b.n	8006064 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006052:	f7fd f87f 	bl	8003154 <HAL_GetTick>
 8006056:	0002      	movs	r2, r0
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b64      	cmp	r3, #100	; 0x64
 800605e:	d901      	bls.n	8006064 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e2fd      	b.n	8006660 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006064:	4b8c      	ldr	r3, [pc, #560]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	2380      	movs	r3, #128	; 0x80
 800606a:	029b      	lsls	r3, r3, #10
 800606c:	4013      	ands	r3, r2
 800606e:	d0f0      	beq.n	8006052 <HAL_RCC_OscConfig+0xf2>
 8006070:	e015      	b.n	800609e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006072:	f7fd f86f 	bl	8003154 <HAL_GetTick>
 8006076:	0003      	movs	r3, r0
 8006078:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800607a:	e008      	b.n	800608e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800607c:	f7fd f86a 	bl	8003154 <HAL_GetTick>
 8006080:	0002      	movs	r2, r0
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b64      	cmp	r3, #100	; 0x64
 8006088:	d901      	bls.n	800608e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	e2e8      	b.n	8006660 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800608e:	4b82      	ldr	r3, [pc, #520]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	2380      	movs	r3, #128	; 0x80
 8006094:	029b      	lsls	r3, r3, #10
 8006096:	4013      	ands	r3, r2
 8006098:	d1f0      	bne.n	800607c <HAL_RCC_OscConfig+0x11c>
 800609a:	e000      	b.n	800609e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800609c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2202      	movs	r2, #2
 80060a4:	4013      	ands	r3, r2
 80060a6:	d100      	bne.n	80060aa <HAL_RCC_OscConfig+0x14a>
 80060a8:	e06c      	b.n	8006184 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80060aa:	4b7b      	ldr	r3, [pc, #492]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	220c      	movs	r2, #12
 80060b0:	4013      	ands	r3, r2
 80060b2:	d00e      	beq.n	80060d2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80060b4:	4b78      	ldr	r3, [pc, #480]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	220c      	movs	r2, #12
 80060ba:	4013      	ands	r3, r2
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d11f      	bne.n	8006100 <HAL_RCC_OscConfig+0x1a0>
 80060c0:	4b75      	ldr	r3, [pc, #468]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	23c0      	movs	r3, #192	; 0xc0
 80060c6:	025b      	lsls	r3, r3, #9
 80060c8:	401a      	ands	r2, r3
 80060ca:	2380      	movs	r3, #128	; 0x80
 80060cc:	021b      	lsls	r3, r3, #8
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d116      	bne.n	8006100 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060d2:	4b71      	ldr	r3, [pc, #452]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2202      	movs	r2, #2
 80060d8:	4013      	ands	r3, r2
 80060da:	d005      	beq.n	80060e8 <HAL_RCC_OscConfig+0x188>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d001      	beq.n	80060e8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e2bb      	b.n	8006660 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060e8:	4b6b      	ldr	r3, [pc, #428]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	22f8      	movs	r2, #248	; 0xf8
 80060ee:	4393      	bics	r3, r2
 80060f0:	0019      	movs	r1, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	00da      	lsls	r2, r3, #3
 80060f8:	4b67      	ldr	r3, [pc, #412]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 80060fa:	430a      	orrs	r2, r1
 80060fc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060fe:	e041      	b.n	8006184 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d024      	beq.n	8006152 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006108:	4b63      	ldr	r3, [pc, #396]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	4b62      	ldr	r3, [pc, #392]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 800610e:	2101      	movs	r1, #1
 8006110:	430a      	orrs	r2, r1
 8006112:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006114:	f7fd f81e 	bl	8003154 <HAL_GetTick>
 8006118:	0003      	movs	r3, r0
 800611a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800611c:	e008      	b.n	8006130 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800611e:	f7fd f819 	bl	8003154 <HAL_GetTick>
 8006122:	0002      	movs	r2, r0
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d901      	bls.n	8006130 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e297      	b.n	8006660 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006130:	4b59      	ldr	r3, [pc, #356]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2202      	movs	r2, #2
 8006136:	4013      	ands	r3, r2
 8006138:	d0f1      	beq.n	800611e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800613a:	4b57      	ldr	r3, [pc, #348]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	22f8      	movs	r2, #248	; 0xf8
 8006140:	4393      	bics	r3, r2
 8006142:	0019      	movs	r1, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	00da      	lsls	r2, r3, #3
 800614a:	4b53      	ldr	r3, [pc, #332]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 800614c:	430a      	orrs	r2, r1
 800614e:	601a      	str	r2, [r3, #0]
 8006150:	e018      	b.n	8006184 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006152:	4b51      	ldr	r3, [pc, #324]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	4b50      	ldr	r3, [pc, #320]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 8006158:	2101      	movs	r1, #1
 800615a:	438a      	bics	r2, r1
 800615c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800615e:	f7fc fff9 	bl	8003154 <HAL_GetTick>
 8006162:	0003      	movs	r3, r0
 8006164:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006166:	e008      	b.n	800617a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006168:	f7fc fff4 	bl	8003154 <HAL_GetTick>
 800616c:	0002      	movs	r2, r0
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b02      	cmp	r3, #2
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e272      	b.n	8006660 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800617a:	4b47      	ldr	r3, [pc, #284]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2202      	movs	r2, #2
 8006180:	4013      	ands	r3, r2
 8006182:	d1f1      	bne.n	8006168 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2208      	movs	r2, #8
 800618a:	4013      	ands	r3, r2
 800618c:	d036      	beq.n	80061fc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d019      	beq.n	80061ca <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006196:	4b40      	ldr	r3, [pc, #256]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 8006198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800619a:	4b3f      	ldr	r3, [pc, #252]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 800619c:	2101      	movs	r1, #1
 800619e:	430a      	orrs	r2, r1
 80061a0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061a2:	f7fc ffd7 	bl	8003154 <HAL_GetTick>
 80061a6:	0003      	movs	r3, r0
 80061a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061ac:	f7fc ffd2 	bl	8003154 <HAL_GetTick>
 80061b0:	0002      	movs	r2, r0
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e250      	b.n	8006660 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061be:	4b36      	ldr	r3, [pc, #216]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	2202      	movs	r2, #2
 80061c4:	4013      	ands	r3, r2
 80061c6:	d0f1      	beq.n	80061ac <HAL_RCC_OscConfig+0x24c>
 80061c8:	e018      	b.n	80061fc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061ca:	4b33      	ldr	r3, [pc, #204]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 80061cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061ce:	4b32      	ldr	r3, [pc, #200]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 80061d0:	2101      	movs	r1, #1
 80061d2:	438a      	bics	r2, r1
 80061d4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061d6:	f7fc ffbd 	bl	8003154 <HAL_GetTick>
 80061da:	0003      	movs	r3, r0
 80061dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061de:	e008      	b.n	80061f2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061e0:	f7fc ffb8 	bl	8003154 <HAL_GetTick>
 80061e4:	0002      	movs	r2, r0
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d901      	bls.n	80061f2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e236      	b.n	8006660 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061f2:	4b29      	ldr	r3, [pc, #164]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	2202      	movs	r2, #2
 80061f8:	4013      	ands	r3, r2
 80061fa:	d1f1      	bne.n	80061e0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2204      	movs	r2, #4
 8006202:	4013      	ands	r3, r2
 8006204:	d100      	bne.n	8006208 <HAL_RCC_OscConfig+0x2a8>
 8006206:	e0b5      	b.n	8006374 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006208:	201f      	movs	r0, #31
 800620a:	183b      	adds	r3, r7, r0
 800620c:	2200      	movs	r2, #0
 800620e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006210:	4b21      	ldr	r3, [pc, #132]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 8006212:	69da      	ldr	r2, [r3, #28]
 8006214:	2380      	movs	r3, #128	; 0x80
 8006216:	055b      	lsls	r3, r3, #21
 8006218:	4013      	ands	r3, r2
 800621a:	d110      	bne.n	800623e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800621c:	4b1e      	ldr	r3, [pc, #120]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 800621e:	69da      	ldr	r2, [r3, #28]
 8006220:	4b1d      	ldr	r3, [pc, #116]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 8006222:	2180      	movs	r1, #128	; 0x80
 8006224:	0549      	lsls	r1, r1, #21
 8006226:	430a      	orrs	r2, r1
 8006228:	61da      	str	r2, [r3, #28]
 800622a:	4b1b      	ldr	r3, [pc, #108]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 800622c:	69da      	ldr	r2, [r3, #28]
 800622e:	2380      	movs	r3, #128	; 0x80
 8006230:	055b      	lsls	r3, r3, #21
 8006232:	4013      	ands	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]
 8006236:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006238:	183b      	adds	r3, r7, r0
 800623a:	2201      	movs	r2, #1
 800623c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800623e:	4b19      	ldr	r3, [pc, #100]	; (80062a4 <HAL_RCC_OscConfig+0x344>)
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	2380      	movs	r3, #128	; 0x80
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	4013      	ands	r3, r2
 8006248:	d11a      	bne.n	8006280 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800624a:	4b16      	ldr	r3, [pc, #88]	; (80062a4 <HAL_RCC_OscConfig+0x344>)
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	4b15      	ldr	r3, [pc, #84]	; (80062a4 <HAL_RCC_OscConfig+0x344>)
 8006250:	2180      	movs	r1, #128	; 0x80
 8006252:	0049      	lsls	r1, r1, #1
 8006254:	430a      	orrs	r2, r1
 8006256:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006258:	f7fc ff7c 	bl	8003154 <HAL_GetTick>
 800625c:	0003      	movs	r3, r0
 800625e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006260:	e008      	b.n	8006274 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006262:	f7fc ff77 	bl	8003154 <HAL_GetTick>
 8006266:	0002      	movs	r2, r0
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b64      	cmp	r3, #100	; 0x64
 800626e:	d901      	bls.n	8006274 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e1f5      	b.n	8006660 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006274:	4b0b      	ldr	r3, [pc, #44]	; (80062a4 <HAL_RCC_OscConfig+0x344>)
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	2380      	movs	r3, #128	; 0x80
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	4013      	ands	r3, r2
 800627e:	d0f0      	beq.n	8006262 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d10f      	bne.n	80062a8 <HAL_RCC_OscConfig+0x348>
 8006288:	4b03      	ldr	r3, [pc, #12]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 800628a:	6a1a      	ldr	r2, [r3, #32]
 800628c:	4b02      	ldr	r3, [pc, #8]	; (8006298 <HAL_RCC_OscConfig+0x338>)
 800628e:	2101      	movs	r1, #1
 8006290:	430a      	orrs	r2, r1
 8006292:	621a      	str	r2, [r3, #32]
 8006294:	e036      	b.n	8006304 <HAL_RCC_OscConfig+0x3a4>
 8006296:	46c0      	nop			; (mov r8, r8)
 8006298:	40021000 	.word	0x40021000
 800629c:	fffeffff 	.word	0xfffeffff
 80062a0:	fffbffff 	.word	0xfffbffff
 80062a4:	40007000 	.word	0x40007000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10c      	bne.n	80062ca <HAL_RCC_OscConfig+0x36a>
 80062b0:	4bca      	ldr	r3, [pc, #808]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80062b2:	6a1a      	ldr	r2, [r3, #32]
 80062b4:	4bc9      	ldr	r3, [pc, #804]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80062b6:	2101      	movs	r1, #1
 80062b8:	438a      	bics	r2, r1
 80062ba:	621a      	str	r2, [r3, #32]
 80062bc:	4bc7      	ldr	r3, [pc, #796]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80062be:	6a1a      	ldr	r2, [r3, #32]
 80062c0:	4bc6      	ldr	r3, [pc, #792]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80062c2:	2104      	movs	r1, #4
 80062c4:	438a      	bics	r2, r1
 80062c6:	621a      	str	r2, [r3, #32]
 80062c8:	e01c      	b.n	8006304 <HAL_RCC_OscConfig+0x3a4>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	2b05      	cmp	r3, #5
 80062d0:	d10c      	bne.n	80062ec <HAL_RCC_OscConfig+0x38c>
 80062d2:	4bc2      	ldr	r3, [pc, #776]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80062d4:	6a1a      	ldr	r2, [r3, #32]
 80062d6:	4bc1      	ldr	r3, [pc, #772]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80062d8:	2104      	movs	r1, #4
 80062da:	430a      	orrs	r2, r1
 80062dc:	621a      	str	r2, [r3, #32]
 80062de:	4bbf      	ldr	r3, [pc, #764]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80062e0:	6a1a      	ldr	r2, [r3, #32]
 80062e2:	4bbe      	ldr	r3, [pc, #760]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80062e4:	2101      	movs	r1, #1
 80062e6:	430a      	orrs	r2, r1
 80062e8:	621a      	str	r2, [r3, #32]
 80062ea:	e00b      	b.n	8006304 <HAL_RCC_OscConfig+0x3a4>
 80062ec:	4bbb      	ldr	r3, [pc, #748]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80062ee:	6a1a      	ldr	r2, [r3, #32]
 80062f0:	4bba      	ldr	r3, [pc, #744]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80062f2:	2101      	movs	r1, #1
 80062f4:	438a      	bics	r2, r1
 80062f6:	621a      	str	r2, [r3, #32]
 80062f8:	4bb8      	ldr	r3, [pc, #736]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80062fa:	6a1a      	ldr	r2, [r3, #32]
 80062fc:	4bb7      	ldr	r3, [pc, #732]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80062fe:	2104      	movs	r1, #4
 8006300:	438a      	bics	r2, r1
 8006302:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d014      	beq.n	8006336 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800630c:	f7fc ff22 	bl	8003154 <HAL_GetTick>
 8006310:	0003      	movs	r3, r0
 8006312:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006314:	e009      	b.n	800632a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006316:	f7fc ff1d 	bl	8003154 <HAL_GetTick>
 800631a:	0002      	movs	r2, r0
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	4aaf      	ldr	r2, [pc, #700]	; (80065e0 <HAL_RCC_OscConfig+0x680>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d901      	bls.n	800632a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e19a      	b.n	8006660 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800632a:	4bac      	ldr	r3, [pc, #688]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	2202      	movs	r2, #2
 8006330:	4013      	ands	r3, r2
 8006332:	d0f0      	beq.n	8006316 <HAL_RCC_OscConfig+0x3b6>
 8006334:	e013      	b.n	800635e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006336:	f7fc ff0d 	bl	8003154 <HAL_GetTick>
 800633a:	0003      	movs	r3, r0
 800633c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800633e:	e009      	b.n	8006354 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006340:	f7fc ff08 	bl	8003154 <HAL_GetTick>
 8006344:	0002      	movs	r2, r0
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	4aa5      	ldr	r2, [pc, #660]	; (80065e0 <HAL_RCC_OscConfig+0x680>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d901      	bls.n	8006354 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e185      	b.n	8006660 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006354:	4ba1      	ldr	r3, [pc, #644]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	2202      	movs	r2, #2
 800635a:	4013      	ands	r3, r2
 800635c:	d1f0      	bne.n	8006340 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800635e:	231f      	movs	r3, #31
 8006360:	18fb      	adds	r3, r7, r3
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d105      	bne.n	8006374 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006368:	4b9c      	ldr	r3, [pc, #624]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 800636a:	69da      	ldr	r2, [r3, #28]
 800636c:	4b9b      	ldr	r3, [pc, #620]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 800636e:	499d      	ldr	r1, [pc, #628]	; (80065e4 <HAL_RCC_OscConfig+0x684>)
 8006370:	400a      	ands	r2, r1
 8006372:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2210      	movs	r2, #16
 800637a:	4013      	ands	r3, r2
 800637c:	d063      	beq.n	8006446 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d12a      	bne.n	80063dc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006386:	4b95      	ldr	r3, [pc, #596]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 8006388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800638a:	4b94      	ldr	r3, [pc, #592]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 800638c:	2104      	movs	r1, #4
 800638e:	430a      	orrs	r2, r1
 8006390:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006392:	4b92      	ldr	r3, [pc, #584]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 8006394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006396:	4b91      	ldr	r3, [pc, #580]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 8006398:	2101      	movs	r1, #1
 800639a:	430a      	orrs	r2, r1
 800639c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800639e:	f7fc fed9 	bl	8003154 <HAL_GetTick>
 80063a2:	0003      	movs	r3, r0
 80063a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80063a6:	e008      	b.n	80063ba <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80063a8:	f7fc fed4 	bl	8003154 <HAL_GetTick>
 80063ac:	0002      	movs	r2, r0
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e152      	b.n	8006660 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80063ba:	4b88      	ldr	r3, [pc, #544]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80063bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063be:	2202      	movs	r2, #2
 80063c0:	4013      	ands	r3, r2
 80063c2:	d0f1      	beq.n	80063a8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80063c4:	4b85      	ldr	r3, [pc, #532]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80063c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c8:	22f8      	movs	r2, #248	; 0xf8
 80063ca:	4393      	bics	r3, r2
 80063cc:	0019      	movs	r1, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	00da      	lsls	r2, r3, #3
 80063d4:	4b81      	ldr	r3, [pc, #516]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80063d6:	430a      	orrs	r2, r1
 80063d8:	635a      	str	r2, [r3, #52]	; 0x34
 80063da:	e034      	b.n	8006446 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	3305      	adds	r3, #5
 80063e2:	d111      	bne.n	8006408 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80063e4:	4b7d      	ldr	r3, [pc, #500]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80063e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063e8:	4b7c      	ldr	r3, [pc, #496]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80063ea:	2104      	movs	r1, #4
 80063ec:	438a      	bics	r2, r1
 80063ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80063f0:	4b7a      	ldr	r3, [pc, #488]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80063f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f4:	22f8      	movs	r2, #248	; 0xf8
 80063f6:	4393      	bics	r3, r2
 80063f8:	0019      	movs	r1, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	00da      	lsls	r2, r3, #3
 8006400:	4b76      	ldr	r3, [pc, #472]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 8006402:	430a      	orrs	r2, r1
 8006404:	635a      	str	r2, [r3, #52]	; 0x34
 8006406:	e01e      	b.n	8006446 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006408:	4b74      	ldr	r3, [pc, #464]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 800640a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800640c:	4b73      	ldr	r3, [pc, #460]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 800640e:	2104      	movs	r1, #4
 8006410:	430a      	orrs	r2, r1
 8006412:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006414:	4b71      	ldr	r3, [pc, #452]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 8006416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006418:	4b70      	ldr	r3, [pc, #448]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 800641a:	2101      	movs	r1, #1
 800641c:	438a      	bics	r2, r1
 800641e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006420:	f7fc fe98 	bl	8003154 <HAL_GetTick>
 8006424:	0003      	movs	r3, r0
 8006426:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006428:	e008      	b.n	800643c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800642a:	f7fc fe93 	bl	8003154 <HAL_GetTick>
 800642e:	0002      	movs	r2, r0
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d901      	bls.n	800643c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e111      	b.n	8006660 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800643c:	4b67      	ldr	r3, [pc, #412]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 800643e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006440:	2202      	movs	r2, #2
 8006442:	4013      	ands	r3, r2
 8006444:	d1f1      	bne.n	800642a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2220      	movs	r2, #32
 800644c:	4013      	ands	r3, r2
 800644e:	d05c      	beq.n	800650a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006450:	4b62      	ldr	r3, [pc, #392]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	220c      	movs	r2, #12
 8006456:	4013      	ands	r3, r2
 8006458:	2b0c      	cmp	r3, #12
 800645a:	d00e      	beq.n	800647a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800645c:	4b5f      	ldr	r3, [pc, #380]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	220c      	movs	r2, #12
 8006462:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006464:	2b08      	cmp	r3, #8
 8006466:	d114      	bne.n	8006492 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006468:	4b5c      	ldr	r3, [pc, #368]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	23c0      	movs	r3, #192	; 0xc0
 800646e:	025b      	lsls	r3, r3, #9
 8006470:	401a      	ands	r2, r3
 8006472:	23c0      	movs	r3, #192	; 0xc0
 8006474:	025b      	lsls	r3, r3, #9
 8006476:	429a      	cmp	r2, r3
 8006478:	d10b      	bne.n	8006492 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800647a:	4b58      	ldr	r3, [pc, #352]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 800647c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800647e:	2380      	movs	r3, #128	; 0x80
 8006480:	025b      	lsls	r3, r3, #9
 8006482:	4013      	ands	r3, r2
 8006484:	d040      	beq.n	8006508 <HAL_RCC_OscConfig+0x5a8>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d03c      	beq.n	8006508 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e0e6      	b.n	8006660 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d01b      	beq.n	80064d2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800649a:	4b50      	ldr	r3, [pc, #320]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 800649c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800649e:	4b4f      	ldr	r3, [pc, #316]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80064a0:	2180      	movs	r1, #128	; 0x80
 80064a2:	0249      	lsls	r1, r1, #9
 80064a4:	430a      	orrs	r2, r1
 80064a6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064a8:	f7fc fe54 	bl	8003154 <HAL_GetTick>
 80064ac:	0003      	movs	r3, r0
 80064ae:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80064b0:	e008      	b.n	80064c4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064b2:	f7fc fe4f 	bl	8003154 <HAL_GetTick>
 80064b6:	0002      	movs	r2, r0
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d901      	bls.n	80064c4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e0cd      	b.n	8006660 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80064c4:	4b45      	ldr	r3, [pc, #276]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80064c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064c8:	2380      	movs	r3, #128	; 0x80
 80064ca:	025b      	lsls	r3, r3, #9
 80064cc:	4013      	ands	r3, r2
 80064ce:	d0f0      	beq.n	80064b2 <HAL_RCC_OscConfig+0x552>
 80064d0:	e01b      	b.n	800650a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80064d2:	4b42      	ldr	r3, [pc, #264]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80064d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064d6:	4b41      	ldr	r3, [pc, #260]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80064d8:	4943      	ldr	r1, [pc, #268]	; (80065e8 <HAL_RCC_OscConfig+0x688>)
 80064da:	400a      	ands	r2, r1
 80064dc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064de:	f7fc fe39 	bl	8003154 <HAL_GetTick>
 80064e2:	0003      	movs	r3, r0
 80064e4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80064e6:	e008      	b.n	80064fa <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064e8:	f7fc fe34 	bl	8003154 <HAL_GetTick>
 80064ec:	0002      	movs	r2, r0
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e0b2      	b.n	8006660 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80064fa:	4b38      	ldr	r3, [pc, #224]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80064fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064fe:	2380      	movs	r3, #128	; 0x80
 8006500:	025b      	lsls	r3, r3, #9
 8006502:	4013      	ands	r3, r2
 8006504:	d1f0      	bne.n	80064e8 <HAL_RCC_OscConfig+0x588>
 8006506:	e000      	b.n	800650a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8006508:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650e:	2b00      	cmp	r3, #0
 8006510:	d100      	bne.n	8006514 <HAL_RCC_OscConfig+0x5b4>
 8006512:	e0a4      	b.n	800665e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006514:	4b31      	ldr	r3, [pc, #196]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	220c      	movs	r2, #12
 800651a:	4013      	ands	r3, r2
 800651c:	2b08      	cmp	r3, #8
 800651e:	d100      	bne.n	8006522 <HAL_RCC_OscConfig+0x5c2>
 8006520:	e078      	b.n	8006614 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	2b02      	cmp	r3, #2
 8006528:	d14c      	bne.n	80065c4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800652a:	4b2c      	ldr	r3, [pc, #176]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	4b2b      	ldr	r3, [pc, #172]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 8006530:	492e      	ldr	r1, [pc, #184]	; (80065ec <HAL_RCC_OscConfig+0x68c>)
 8006532:	400a      	ands	r2, r1
 8006534:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006536:	f7fc fe0d 	bl	8003154 <HAL_GetTick>
 800653a:	0003      	movs	r3, r0
 800653c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800653e:	e008      	b.n	8006552 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006540:	f7fc fe08 	bl	8003154 <HAL_GetTick>
 8006544:	0002      	movs	r2, r0
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b02      	cmp	r3, #2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e086      	b.n	8006660 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006552:	4b22      	ldr	r3, [pc, #136]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	2380      	movs	r3, #128	; 0x80
 8006558:	049b      	lsls	r3, r3, #18
 800655a:	4013      	ands	r3, r2
 800655c:	d1f0      	bne.n	8006540 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800655e:	4b1f      	ldr	r3, [pc, #124]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 8006560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006562:	220f      	movs	r2, #15
 8006564:	4393      	bics	r3, r2
 8006566:	0019      	movs	r1, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800656c:	4b1b      	ldr	r3, [pc, #108]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 800656e:	430a      	orrs	r2, r1
 8006570:	62da      	str	r2, [r3, #44]	; 0x2c
 8006572:	4b1a      	ldr	r3, [pc, #104]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	4a1e      	ldr	r2, [pc, #120]	; (80065f0 <HAL_RCC_OscConfig+0x690>)
 8006578:	4013      	ands	r3, r2
 800657a:	0019      	movs	r1, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006584:	431a      	orrs	r2, r3
 8006586:	4b15      	ldr	r3, [pc, #84]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 8006588:	430a      	orrs	r2, r1
 800658a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800658c:	4b13      	ldr	r3, [pc, #76]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	4b12      	ldr	r3, [pc, #72]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 8006592:	2180      	movs	r1, #128	; 0x80
 8006594:	0449      	lsls	r1, r1, #17
 8006596:	430a      	orrs	r2, r1
 8006598:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800659a:	f7fc fddb 	bl	8003154 <HAL_GetTick>
 800659e:	0003      	movs	r3, r0
 80065a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065a2:	e008      	b.n	80065b6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065a4:	f7fc fdd6 	bl	8003154 <HAL_GetTick>
 80065a8:	0002      	movs	r2, r0
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e054      	b.n	8006660 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80065b6:	4b09      	ldr	r3, [pc, #36]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	2380      	movs	r3, #128	; 0x80
 80065bc:	049b      	lsls	r3, r3, #18
 80065be:	4013      	ands	r3, r2
 80065c0:	d0f0      	beq.n	80065a4 <HAL_RCC_OscConfig+0x644>
 80065c2:	e04c      	b.n	800665e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065c4:	4b05      	ldr	r3, [pc, #20]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	4b04      	ldr	r3, [pc, #16]	; (80065dc <HAL_RCC_OscConfig+0x67c>)
 80065ca:	4908      	ldr	r1, [pc, #32]	; (80065ec <HAL_RCC_OscConfig+0x68c>)
 80065cc:	400a      	ands	r2, r1
 80065ce:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d0:	f7fc fdc0 	bl	8003154 <HAL_GetTick>
 80065d4:	0003      	movs	r3, r0
 80065d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065d8:	e015      	b.n	8006606 <HAL_RCC_OscConfig+0x6a6>
 80065da:	46c0      	nop			; (mov r8, r8)
 80065dc:	40021000 	.word	0x40021000
 80065e0:	00001388 	.word	0x00001388
 80065e4:	efffffff 	.word	0xefffffff
 80065e8:	fffeffff 	.word	0xfffeffff
 80065ec:	feffffff 	.word	0xfeffffff
 80065f0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065f4:	f7fc fdae 	bl	8003154 <HAL_GetTick>
 80065f8:	0002      	movs	r2, r0
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d901      	bls.n	8006606 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e02c      	b.n	8006660 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006606:	4b18      	ldr	r3, [pc, #96]	; (8006668 <HAL_RCC_OscConfig+0x708>)
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	2380      	movs	r3, #128	; 0x80
 800660c:	049b      	lsls	r3, r3, #18
 800660e:	4013      	ands	r3, r2
 8006610:	d1f0      	bne.n	80065f4 <HAL_RCC_OscConfig+0x694>
 8006612:	e024      	b.n	800665e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	2b01      	cmp	r3, #1
 800661a:	d101      	bne.n	8006620 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e01f      	b.n	8006660 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006620:	4b11      	ldr	r3, [pc, #68]	; (8006668 <HAL_RCC_OscConfig+0x708>)
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006626:	4b10      	ldr	r3, [pc, #64]	; (8006668 <HAL_RCC_OscConfig+0x708>)
 8006628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800662c:	697a      	ldr	r2, [r7, #20]
 800662e:	23c0      	movs	r3, #192	; 0xc0
 8006630:	025b      	lsls	r3, r3, #9
 8006632:	401a      	ands	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006638:	429a      	cmp	r2, r3
 800663a:	d10e      	bne.n	800665a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	220f      	movs	r2, #15
 8006640:	401a      	ands	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006646:	429a      	cmp	r2, r3
 8006648:	d107      	bne.n	800665a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	23f0      	movs	r3, #240	; 0xf0
 800664e:	039b      	lsls	r3, r3, #14
 8006650:	401a      	ands	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006656:	429a      	cmp	r2, r3
 8006658:	d001      	beq.n	800665e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e000      	b.n	8006660 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	0018      	movs	r0, r3
 8006662:	46bd      	mov	sp, r7
 8006664:	b008      	add	sp, #32
 8006666:	bd80      	pop	{r7, pc}
 8006668:	40021000 	.word	0x40021000

0800666c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e0bf      	b.n	8006800 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006680:	4b61      	ldr	r3, [pc, #388]	; (8006808 <HAL_RCC_ClockConfig+0x19c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2201      	movs	r2, #1
 8006686:	4013      	ands	r3, r2
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	429a      	cmp	r2, r3
 800668c:	d911      	bls.n	80066b2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800668e:	4b5e      	ldr	r3, [pc, #376]	; (8006808 <HAL_RCC_ClockConfig+0x19c>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2201      	movs	r2, #1
 8006694:	4393      	bics	r3, r2
 8006696:	0019      	movs	r1, r3
 8006698:	4b5b      	ldr	r3, [pc, #364]	; (8006808 <HAL_RCC_ClockConfig+0x19c>)
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	430a      	orrs	r2, r1
 800669e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066a0:	4b59      	ldr	r3, [pc, #356]	; (8006808 <HAL_RCC_ClockConfig+0x19c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2201      	movs	r2, #1
 80066a6:	4013      	ands	r3, r2
 80066a8:	683a      	ldr	r2, [r7, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d001      	beq.n	80066b2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e0a6      	b.n	8006800 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2202      	movs	r2, #2
 80066b8:	4013      	ands	r3, r2
 80066ba:	d015      	beq.n	80066e8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2204      	movs	r2, #4
 80066c2:	4013      	ands	r3, r2
 80066c4:	d006      	beq.n	80066d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80066c6:	4b51      	ldr	r3, [pc, #324]	; (800680c <HAL_RCC_ClockConfig+0x1a0>)
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	4b50      	ldr	r3, [pc, #320]	; (800680c <HAL_RCC_ClockConfig+0x1a0>)
 80066cc:	21e0      	movs	r1, #224	; 0xe0
 80066ce:	00c9      	lsls	r1, r1, #3
 80066d0:	430a      	orrs	r2, r1
 80066d2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066d4:	4b4d      	ldr	r3, [pc, #308]	; (800680c <HAL_RCC_ClockConfig+0x1a0>)
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	22f0      	movs	r2, #240	; 0xf0
 80066da:	4393      	bics	r3, r2
 80066dc:	0019      	movs	r1, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689a      	ldr	r2, [r3, #8]
 80066e2:	4b4a      	ldr	r3, [pc, #296]	; (800680c <HAL_RCC_ClockConfig+0x1a0>)
 80066e4:	430a      	orrs	r2, r1
 80066e6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2201      	movs	r2, #1
 80066ee:	4013      	ands	r3, r2
 80066f0:	d04c      	beq.n	800678c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d107      	bne.n	800670a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066fa:	4b44      	ldr	r3, [pc, #272]	; (800680c <HAL_RCC_ClockConfig+0x1a0>)
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	2380      	movs	r3, #128	; 0x80
 8006700:	029b      	lsls	r3, r3, #10
 8006702:	4013      	ands	r3, r2
 8006704:	d120      	bne.n	8006748 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e07a      	b.n	8006800 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	2b02      	cmp	r3, #2
 8006710:	d107      	bne.n	8006722 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006712:	4b3e      	ldr	r3, [pc, #248]	; (800680c <HAL_RCC_ClockConfig+0x1a0>)
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	2380      	movs	r3, #128	; 0x80
 8006718:	049b      	lsls	r3, r3, #18
 800671a:	4013      	ands	r3, r2
 800671c:	d114      	bne.n	8006748 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e06e      	b.n	8006800 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	2b03      	cmp	r3, #3
 8006728:	d107      	bne.n	800673a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800672a:	4b38      	ldr	r3, [pc, #224]	; (800680c <HAL_RCC_ClockConfig+0x1a0>)
 800672c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800672e:	2380      	movs	r3, #128	; 0x80
 8006730:	025b      	lsls	r3, r3, #9
 8006732:	4013      	ands	r3, r2
 8006734:	d108      	bne.n	8006748 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e062      	b.n	8006800 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800673a:	4b34      	ldr	r3, [pc, #208]	; (800680c <HAL_RCC_ClockConfig+0x1a0>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2202      	movs	r2, #2
 8006740:	4013      	ands	r3, r2
 8006742:	d101      	bne.n	8006748 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e05b      	b.n	8006800 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006748:	4b30      	ldr	r3, [pc, #192]	; (800680c <HAL_RCC_ClockConfig+0x1a0>)
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	2203      	movs	r2, #3
 800674e:	4393      	bics	r3, r2
 8006750:	0019      	movs	r1, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	4b2d      	ldr	r3, [pc, #180]	; (800680c <HAL_RCC_ClockConfig+0x1a0>)
 8006758:	430a      	orrs	r2, r1
 800675a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800675c:	f7fc fcfa 	bl	8003154 <HAL_GetTick>
 8006760:	0003      	movs	r3, r0
 8006762:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006764:	e009      	b.n	800677a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006766:	f7fc fcf5 	bl	8003154 <HAL_GetTick>
 800676a:	0002      	movs	r2, r0
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	4a27      	ldr	r2, [pc, #156]	; (8006810 <HAL_RCC_ClockConfig+0x1a4>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d901      	bls.n	800677a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e042      	b.n	8006800 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800677a:	4b24      	ldr	r3, [pc, #144]	; (800680c <HAL_RCC_ClockConfig+0x1a0>)
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	220c      	movs	r2, #12
 8006780:	401a      	ands	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	429a      	cmp	r2, r3
 800678a:	d1ec      	bne.n	8006766 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800678c:	4b1e      	ldr	r3, [pc, #120]	; (8006808 <HAL_RCC_ClockConfig+0x19c>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2201      	movs	r2, #1
 8006792:	4013      	ands	r3, r2
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	429a      	cmp	r2, r3
 8006798:	d211      	bcs.n	80067be <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800679a:	4b1b      	ldr	r3, [pc, #108]	; (8006808 <HAL_RCC_ClockConfig+0x19c>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2201      	movs	r2, #1
 80067a0:	4393      	bics	r3, r2
 80067a2:	0019      	movs	r1, r3
 80067a4:	4b18      	ldr	r3, [pc, #96]	; (8006808 <HAL_RCC_ClockConfig+0x19c>)
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067ac:	4b16      	ldr	r3, [pc, #88]	; (8006808 <HAL_RCC_ClockConfig+0x19c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2201      	movs	r2, #1
 80067b2:	4013      	ands	r3, r2
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d001      	beq.n	80067be <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e020      	b.n	8006800 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2204      	movs	r2, #4
 80067c4:	4013      	ands	r3, r2
 80067c6:	d009      	beq.n	80067dc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80067c8:	4b10      	ldr	r3, [pc, #64]	; (800680c <HAL_RCC_ClockConfig+0x1a0>)
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	4a11      	ldr	r2, [pc, #68]	; (8006814 <HAL_RCC_ClockConfig+0x1a8>)
 80067ce:	4013      	ands	r3, r2
 80067d0:	0019      	movs	r1, r3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68da      	ldr	r2, [r3, #12]
 80067d6:	4b0d      	ldr	r3, [pc, #52]	; (800680c <HAL_RCC_ClockConfig+0x1a0>)
 80067d8:	430a      	orrs	r2, r1
 80067da:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80067dc:	f000 f820 	bl	8006820 <HAL_RCC_GetSysClockFreq>
 80067e0:	0001      	movs	r1, r0
 80067e2:	4b0a      	ldr	r3, [pc, #40]	; (800680c <HAL_RCC_ClockConfig+0x1a0>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	091b      	lsrs	r3, r3, #4
 80067e8:	220f      	movs	r2, #15
 80067ea:	4013      	ands	r3, r2
 80067ec:	4a0a      	ldr	r2, [pc, #40]	; (8006818 <HAL_RCC_ClockConfig+0x1ac>)
 80067ee:	5cd3      	ldrb	r3, [r2, r3]
 80067f0:	000a      	movs	r2, r1
 80067f2:	40da      	lsrs	r2, r3
 80067f4:	4b09      	ldr	r3, [pc, #36]	; (800681c <HAL_RCC_ClockConfig+0x1b0>)
 80067f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80067f8:	2003      	movs	r0, #3
 80067fa:	f7fc fc65 	bl	80030c8 <HAL_InitTick>
  
  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	0018      	movs	r0, r3
 8006802:	46bd      	mov	sp, r7
 8006804:	b004      	add	sp, #16
 8006806:	bd80      	pop	{r7, pc}
 8006808:	40022000 	.word	0x40022000
 800680c:	40021000 	.word	0x40021000
 8006810:	00001388 	.word	0x00001388
 8006814:	fffff8ff 	.word	0xfffff8ff
 8006818:	0800df3c 	.word	0x0800df3c
 800681c:	20000000 	.word	0x20000000

08006820 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006820:	b590      	push	{r4, r7, lr}
 8006822:	b08f      	sub	sp, #60	; 0x3c
 8006824:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8006826:	2314      	movs	r3, #20
 8006828:	18fb      	adds	r3, r7, r3
 800682a:	4a38      	ldr	r2, [pc, #224]	; (800690c <HAL_RCC_GetSysClockFreq+0xec>)
 800682c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800682e:	c313      	stmia	r3!, {r0, r1, r4}
 8006830:	6812      	ldr	r2, [r2, #0]
 8006832:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8006834:	1d3b      	adds	r3, r7, #4
 8006836:	4a36      	ldr	r2, [pc, #216]	; (8006910 <HAL_RCC_GetSysClockFreq+0xf0>)
 8006838:	ca13      	ldmia	r2!, {r0, r1, r4}
 800683a:	c313      	stmia	r3!, {r0, r1, r4}
 800683c:	6812      	ldr	r2, [r2, #0]
 800683e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006844:	2300      	movs	r3, #0
 8006846:	62bb      	str	r3, [r7, #40]	; 0x28
 8006848:	2300      	movs	r3, #0
 800684a:	637b      	str	r3, [r7, #52]	; 0x34
 800684c:	2300      	movs	r3, #0
 800684e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8006850:	2300      	movs	r3, #0
 8006852:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8006854:	4b2f      	ldr	r3, [pc, #188]	; (8006914 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800685a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685c:	220c      	movs	r2, #12
 800685e:	4013      	ands	r3, r2
 8006860:	2b0c      	cmp	r3, #12
 8006862:	d047      	beq.n	80068f4 <HAL_RCC_GetSysClockFreq+0xd4>
 8006864:	d849      	bhi.n	80068fa <HAL_RCC_GetSysClockFreq+0xda>
 8006866:	2b04      	cmp	r3, #4
 8006868:	d002      	beq.n	8006870 <HAL_RCC_GetSysClockFreq+0x50>
 800686a:	2b08      	cmp	r3, #8
 800686c:	d003      	beq.n	8006876 <HAL_RCC_GetSysClockFreq+0x56>
 800686e:	e044      	b.n	80068fa <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006870:	4b29      	ldr	r3, [pc, #164]	; (8006918 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006872:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006874:	e044      	b.n	8006900 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006878:	0c9b      	lsrs	r3, r3, #18
 800687a:	220f      	movs	r2, #15
 800687c:	4013      	ands	r3, r2
 800687e:	2214      	movs	r2, #20
 8006880:	18ba      	adds	r2, r7, r2
 8006882:	5cd3      	ldrb	r3, [r2, r3]
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006886:	4b23      	ldr	r3, [pc, #140]	; (8006914 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688a:	220f      	movs	r2, #15
 800688c:	4013      	ands	r3, r2
 800688e:	1d3a      	adds	r2, r7, #4
 8006890:	5cd3      	ldrb	r3, [r2, r3]
 8006892:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006896:	23c0      	movs	r3, #192	; 0xc0
 8006898:	025b      	lsls	r3, r3, #9
 800689a:	401a      	ands	r2, r3
 800689c:	2380      	movs	r3, #128	; 0x80
 800689e:	025b      	lsls	r3, r3, #9
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d109      	bne.n	80068b8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80068a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068a6:	481c      	ldr	r0, [pc, #112]	; (8006918 <HAL_RCC_GetSysClockFreq+0xf8>)
 80068a8:	f7f9 fc40 	bl	800012c <__udivsi3>
 80068ac:	0003      	movs	r3, r0
 80068ae:	001a      	movs	r2, r3
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	4353      	muls	r3, r2
 80068b4:	637b      	str	r3, [r7, #52]	; 0x34
 80068b6:	e01a      	b.n	80068ee <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80068b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068ba:	23c0      	movs	r3, #192	; 0xc0
 80068bc:	025b      	lsls	r3, r3, #9
 80068be:	401a      	ands	r2, r3
 80068c0:	23c0      	movs	r3, #192	; 0xc0
 80068c2:	025b      	lsls	r3, r3, #9
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d109      	bne.n	80068dc <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80068c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068ca:	4814      	ldr	r0, [pc, #80]	; (800691c <HAL_RCC_GetSysClockFreq+0xfc>)
 80068cc:	f7f9 fc2e 	bl	800012c <__udivsi3>
 80068d0:	0003      	movs	r3, r0
 80068d2:	001a      	movs	r2, r3
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	4353      	muls	r3, r2
 80068d8:	637b      	str	r3, [r7, #52]	; 0x34
 80068da:	e008      	b.n	80068ee <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80068dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068de:	4810      	ldr	r0, [pc, #64]	; (8006920 <HAL_RCC_GetSysClockFreq+0x100>)
 80068e0:	f7f9 fc24 	bl	800012c <__udivsi3>
 80068e4:	0003      	movs	r3, r0
 80068e6:	001a      	movs	r2, r3
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	4353      	muls	r3, r2
 80068ec:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80068ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80068f2:	e005      	b.n	8006900 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80068f4:	4b09      	ldr	r3, [pc, #36]	; (800691c <HAL_RCC_GetSysClockFreq+0xfc>)
 80068f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80068f8:	e002      	b.n	8006900 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80068fa:	4b09      	ldr	r3, [pc, #36]	; (8006920 <HAL_RCC_GetSysClockFreq+0x100>)
 80068fc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80068fe:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006902:	0018      	movs	r0, r3
 8006904:	46bd      	mov	sp, r7
 8006906:	b00f      	add	sp, #60	; 0x3c
 8006908:	bd90      	pop	{r4, r7, pc}
 800690a:	46c0      	nop			; (mov r8, r8)
 800690c:	0800ddf8 	.word	0x0800ddf8
 8006910:	0800de08 	.word	0x0800de08
 8006914:	40021000 	.word	0x40021000
 8006918:	00f42400 	.word	0x00f42400
 800691c:	02dc6c00 	.word	0x02dc6c00
 8006920:	007a1200 	.word	0x007a1200

08006924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006928:	4b02      	ldr	r3, [pc, #8]	; (8006934 <HAL_RCC_GetHCLKFreq+0x10>)
 800692a:	681b      	ldr	r3, [r3, #0]
}
 800692c:	0018      	movs	r0, r3
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	46c0      	nop			; (mov r8, r8)
 8006934:	20000000 	.word	0x20000000

08006938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800693c:	f7ff fff2 	bl	8006924 <HAL_RCC_GetHCLKFreq>
 8006940:	0001      	movs	r1, r0
 8006942:	4b06      	ldr	r3, [pc, #24]	; (800695c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	0a1b      	lsrs	r3, r3, #8
 8006948:	2207      	movs	r2, #7
 800694a:	4013      	ands	r3, r2
 800694c:	4a04      	ldr	r2, [pc, #16]	; (8006960 <HAL_RCC_GetPCLK1Freq+0x28>)
 800694e:	5cd3      	ldrb	r3, [r2, r3]
 8006950:	40d9      	lsrs	r1, r3
 8006952:	000b      	movs	r3, r1
}    
 8006954:	0018      	movs	r0, r3
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	46c0      	nop			; (mov r8, r8)
 800695c:	40021000 	.word	0x40021000
 8006960:	0800df4c 	.word	0x0800df4c

08006964 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800696c:	2300      	movs	r3, #0
 800696e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006970:	2300      	movs	r3, #0
 8006972:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	2380      	movs	r3, #128	; 0x80
 800697a:	025b      	lsls	r3, r3, #9
 800697c:	4013      	ands	r3, r2
 800697e:	d100      	bne.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006980:	e08e      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006982:	2017      	movs	r0, #23
 8006984:	183b      	adds	r3, r7, r0
 8006986:	2200      	movs	r2, #0
 8006988:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800698a:	4b6e      	ldr	r3, [pc, #440]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800698c:	69da      	ldr	r2, [r3, #28]
 800698e:	2380      	movs	r3, #128	; 0x80
 8006990:	055b      	lsls	r3, r3, #21
 8006992:	4013      	ands	r3, r2
 8006994:	d110      	bne.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006996:	4b6b      	ldr	r3, [pc, #428]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006998:	69da      	ldr	r2, [r3, #28]
 800699a:	4b6a      	ldr	r3, [pc, #424]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800699c:	2180      	movs	r1, #128	; 0x80
 800699e:	0549      	lsls	r1, r1, #21
 80069a0:	430a      	orrs	r2, r1
 80069a2:	61da      	str	r2, [r3, #28]
 80069a4:	4b67      	ldr	r3, [pc, #412]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80069a6:	69da      	ldr	r2, [r3, #28]
 80069a8:	2380      	movs	r3, #128	; 0x80
 80069aa:	055b      	lsls	r3, r3, #21
 80069ac:	4013      	ands	r3, r2
 80069ae:	60bb      	str	r3, [r7, #8]
 80069b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069b2:	183b      	adds	r3, r7, r0
 80069b4:	2201      	movs	r2, #1
 80069b6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069b8:	4b63      	ldr	r3, [pc, #396]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	2380      	movs	r3, #128	; 0x80
 80069be:	005b      	lsls	r3, r3, #1
 80069c0:	4013      	ands	r3, r2
 80069c2:	d11a      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069c4:	4b60      	ldr	r3, [pc, #384]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	4b5f      	ldr	r3, [pc, #380]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80069ca:	2180      	movs	r1, #128	; 0x80
 80069cc:	0049      	lsls	r1, r1, #1
 80069ce:	430a      	orrs	r2, r1
 80069d0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069d2:	f7fc fbbf 	bl	8003154 <HAL_GetTick>
 80069d6:	0003      	movs	r3, r0
 80069d8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069da:	e008      	b.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069dc:	f7fc fbba 	bl	8003154 <HAL_GetTick>
 80069e0:	0002      	movs	r2, r0
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b64      	cmp	r3, #100	; 0x64
 80069e8:	d901      	bls.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e0a6      	b.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069ee:	4b56      	ldr	r3, [pc, #344]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	2380      	movs	r3, #128	; 0x80
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	4013      	ands	r3, r2
 80069f8:	d0f0      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80069fa:	4b52      	ldr	r3, [pc, #328]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80069fc:	6a1a      	ldr	r2, [r3, #32]
 80069fe:	23c0      	movs	r3, #192	; 0xc0
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	4013      	ands	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d034      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	23c0      	movs	r3, #192	; 0xc0
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4013      	ands	r3, r2
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d02c      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a1c:	4b49      	ldr	r3, [pc, #292]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a1e:	6a1b      	ldr	r3, [r3, #32]
 8006a20:	4a4a      	ldr	r2, [pc, #296]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006a22:	4013      	ands	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a26:	4b47      	ldr	r3, [pc, #284]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a28:	6a1a      	ldr	r2, [r3, #32]
 8006a2a:	4b46      	ldr	r3, [pc, #280]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a2c:	2180      	movs	r1, #128	; 0x80
 8006a2e:	0249      	lsls	r1, r1, #9
 8006a30:	430a      	orrs	r2, r1
 8006a32:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a34:	4b43      	ldr	r3, [pc, #268]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a36:	6a1a      	ldr	r2, [r3, #32]
 8006a38:	4b42      	ldr	r3, [pc, #264]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a3a:	4945      	ldr	r1, [pc, #276]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006a3c:	400a      	ands	r2, r1
 8006a3e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006a40:	4b40      	ldr	r3, [pc, #256]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	d013      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a4e:	f7fc fb81 	bl	8003154 <HAL_GetTick>
 8006a52:	0003      	movs	r3, r0
 8006a54:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a56:	e009      	b.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a58:	f7fc fb7c 	bl	8003154 <HAL_GetTick>
 8006a5c:	0002      	movs	r2, r0
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	4a3c      	ldr	r2, [pc, #240]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d901      	bls.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e067      	b.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a6c:	4b35      	ldr	r3, [pc, #212]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a6e:	6a1b      	ldr	r3, [r3, #32]
 8006a70:	2202      	movs	r2, #2
 8006a72:	4013      	ands	r3, r2
 8006a74:	d0f0      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a76:	4b33      	ldr	r3, [pc, #204]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	4a34      	ldr	r2, [pc, #208]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	0019      	movs	r1, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	4b2f      	ldr	r3, [pc, #188]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a86:	430a      	orrs	r2, r1
 8006a88:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006a8a:	2317      	movs	r3, #23
 8006a8c:	18fb      	adds	r3, r7, r3
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d105      	bne.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a94:	4b2b      	ldr	r3, [pc, #172]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a96:	69da      	ldr	r2, [r3, #28]
 8006a98:	4b2a      	ldr	r3, [pc, #168]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006a9a:	492f      	ldr	r1, [pc, #188]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006a9c:	400a      	ands	r2, r1
 8006a9e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	d009      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006aaa:	4b26      	ldr	r3, [pc, #152]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aae:	2203      	movs	r2, #3
 8006ab0:	4393      	bics	r3, r2
 8006ab2:	0019      	movs	r1, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689a      	ldr	r2, [r3, #8]
 8006ab8:	4b22      	ldr	r3, [pc, #136]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006aba:	430a      	orrs	r2, r1
 8006abc:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	d009      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ac8:	4b1e      	ldr	r3, [pc, #120]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006acc:	4a23      	ldr	r2, [pc, #140]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006ace:	4013      	ands	r3, r2
 8006ad0:	0019      	movs	r1, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	4b1b      	ldr	r3, [pc, #108]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	d009      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ae6:	4b17      	ldr	r3, [pc, #92]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aea:	2210      	movs	r2, #16
 8006aec:	4393      	bics	r3, r2
 8006aee:	0019      	movs	r1, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	691a      	ldr	r2, [r3, #16]
 8006af4:	4b13      	ldr	r3, [pc, #76]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006af6:	430a      	orrs	r2, r1
 8006af8:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	2380      	movs	r3, #128	; 0x80
 8006b00:	029b      	lsls	r3, r3, #10
 8006b02:	4013      	ands	r3, r2
 8006b04:	d009      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b06:	4b0f      	ldr	r3, [pc, #60]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0a:	2280      	movs	r2, #128	; 0x80
 8006b0c:	4393      	bics	r3, r2
 8006b0e:	0019      	movs	r1, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	699a      	ldr	r2, [r3, #24]
 8006b14:	4b0b      	ldr	r3, [pc, #44]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006b16:	430a      	orrs	r2, r1
 8006b18:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	2380      	movs	r3, #128	; 0x80
 8006b20:	00db      	lsls	r3, r3, #3
 8006b22:	4013      	ands	r3, r2
 8006b24:	d009      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006b26:	4b07      	ldr	r3, [pc, #28]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2a:	2240      	movs	r2, #64	; 0x40
 8006b2c:	4393      	bics	r3, r2
 8006b2e:	0019      	movs	r1, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	695a      	ldr	r2, [r3, #20]
 8006b34:	4b03      	ldr	r3, [pc, #12]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006b36:	430a      	orrs	r2, r1
 8006b38:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	b006      	add	sp, #24
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	40021000 	.word	0x40021000
 8006b48:	40007000 	.word	0x40007000
 8006b4c:	fffffcff 	.word	0xfffffcff
 8006b50:	fffeffff 	.word	0xfffeffff
 8006b54:	00001388 	.word	0x00001388
 8006b58:	efffffff 	.word	0xefffffff
 8006b5c:	fffcffff 	.word	0xfffcffff

08006b60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e0a8      	b.n	8006cc4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d109      	bne.n	8006b8e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	2382      	movs	r3, #130	; 0x82
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d009      	beq.n	8006b9a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	61da      	str	r2, [r3, #28]
 8006b8c:	e005      	b.n	8006b9a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	225d      	movs	r2, #93	; 0x5d
 8006ba4:	5c9b      	ldrb	r3, [r3, r2]
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d107      	bne.n	8006bbc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	225c      	movs	r2, #92	; 0x5c
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	0018      	movs	r0, r3
 8006bb8:	f7fb fe6e 	bl	8002898 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	225d      	movs	r2, #93	; 0x5d
 8006bc0:	2102      	movs	r1, #2
 8006bc2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2140      	movs	r1, #64	; 0x40
 8006bd0:	438a      	bics	r2, r1
 8006bd2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68da      	ldr	r2, [r3, #12]
 8006bd8:	23e0      	movs	r3, #224	; 0xe0
 8006bda:	00db      	lsls	r3, r3, #3
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d902      	bls.n	8006be6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006be0:	2300      	movs	r3, #0
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	e002      	b.n	8006bec <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006be6:	2380      	movs	r3, #128	; 0x80
 8006be8:	015b      	lsls	r3, r3, #5
 8006bea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	68da      	ldr	r2, [r3, #12]
 8006bf0:	23f0      	movs	r3, #240	; 0xf0
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d008      	beq.n	8006c0a <HAL_SPI_Init+0xaa>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68da      	ldr	r2, [r3, #12]
 8006bfc:	23e0      	movs	r3, #224	; 0xe0
 8006bfe:	00db      	lsls	r3, r3, #3
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d002      	beq.n	8006c0a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	2382      	movs	r3, #130	; 0x82
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	401a      	ands	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6899      	ldr	r1, [r3, #8]
 8006c18:	2384      	movs	r3, #132	; 0x84
 8006c1a:	021b      	lsls	r3, r3, #8
 8006c1c:	400b      	ands	r3, r1
 8006c1e:	431a      	orrs	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	2102      	movs	r1, #2
 8006c26:	400b      	ands	r3, r1
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	2101      	movs	r1, #1
 8006c30:	400b      	ands	r3, r1
 8006c32:	431a      	orrs	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6999      	ldr	r1, [r3, #24]
 8006c38:	2380      	movs	r3, #128	; 0x80
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	400b      	ands	r3, r1
 8006c3e:	431a      	orrs	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	69db      	ldr	r3, [r3, #28]
 8006c44:	2138      	movs	r1, #56	; 0x38
 8006c46:	400b      	ands	r3, r1
 8006c48:	431a      	orrs	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	2180      	movs	r1, #128	; 0x80
 8006c50:	400b      	ands	r3, r1
 8006c52:	431a      	orrs	r2, r3
 8006c54:	0011      	movs	r1, r2
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c5a:	2380      	movs	r3, #128	; 0x80
 8006c5c:	019b      	lsls	r3, r3, #6
 8006c5e:	401a      	ands	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	0c1b      	lsrs	r3, r3, #16
 8006c6e:	2204      	movs	r2, #4
 8006c70:	401a      	ands	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c76:	2110      	movs	r1, #16
 8006c78:	400b      	ands	r3, r1
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c80:	2108      	movs	r1, #8
 8006c82:	400b      	ands	r3, r1
 8006c84:	431a      	orrs	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	68d9      	ldr	r1, [r3, #12]
 8006c8a:	23f0      	movs	r3, #240	; 0xf0
 8006c8c:	011b      	lsls	r3, r3, #4
 8006c8e:	400b      	ands	r3, r1
 8006c90:	431a      	orrs	r2, r3
 8006c92:	0011      	movs	r1, r2
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	2380      	movs	r3, #128	; 0x80
 8006c98:	015b      	lsls	r3, r3, #5
 8006c9a:	401a      	ands	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	69da      	ldr	r2, [r3, #28]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4907      	ldr	r1, [pc, #28]	; (8006ccc <HAL_SPI_Init+0x16c>)
 8006cb0:	400a      	ands	r2, r1
 8006cb2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	225d      	movs	r2, #93	; 0x5d
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	b004      	add	sp, #16
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	fffff7ff 	.word	0xfffff7ff

08006cd0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b088      	sub	sp, #32
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	603b      	str	r3, [r7, #0]
 8006cdc:	1dbb      	adds	r3, r7, #6
 8006cde:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ce0:	231f      	movs	r3, #31
 8006ce2:	18fb      	adds	r3, r7, r3
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	225c      	movs	r2, #92	; 0x5c
 8006cec:	5c9b      	ldrb	r3, [r3, r2]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d101      	bne.n	8006cf6 <HAL_SPI_Transmit+0x26>
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	e140      	b.n	8006f78 <HAL_SPI_Transmit+0x2a8>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	225c      	movs	r2, #92	; 0x5c
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cfe:	f7fc fa29 	bl	8003154 <HAL_GetTick>
 8006d02:	0003      	movs	r3, r0
 8006d04:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006d06:	2316      	movs	r3, #22
 8006d08:	18fb      	adds	r3, r7, r3
 8006d0a:	1dba      	adds	r2, r7, #6
 8006d0c:	8812      	ldrh	r2, [r2, #0]
 8006d0e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	225d      	movs	r2, #93	; 0x5d
 8006d14:	5c9b      	ldrb	r3, [r3, r2]
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d004      	beq.n	8006d26 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006d1c:	231f      	movs	r3, #31
 8006d1e:	18fb      	adds	r3, r7, r3
 8006d20:	2202      	movs	r2, #2
 8006d22:	701a      	strb	r2, [r3, #0]
    goto error;
 8006d24:	e11d      	b.n	8006f62 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <HAL_SPI_Transmit+0x64>
 8006d2c:	1dbb      	adds	r3, r7, #6
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d104      	bne.n	8006d3e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006d34:	231f      	movs	r3, #31
 8006d36:	18fb      	adds	r3, r7, r3
 8006d38:	2201      	movs	r2, #1
 8006d3a:	701a      	strb	r2, [r3, #0]
    goto error;
 8006d3c:	e111      	b.n	8006f62 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	225d      	movs	r2, #93	; 0x5d
 8006d42:	2103      	movs	r1, #3
 8006d44:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	1dba      	adds	r2, r7, #6
 8006d56:	8812      	ldrh	r2, [r2, #0]
 8006d58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	1dba      	adds	r2, r7, #6
 8006d5e:	8812      	ldrh	r2, [r2, #0]
 8006d60:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2244      	movs	r2, #68	; 0x44
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2246      	movs	r2, #70	; 0x46
 8006d74:	2100      	movs	r1, #0
 8006d76:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	689a      	ldr	r2, [r3, #8]
 8006d88:	2380      	movs	r3, #128	; 0x80
 8006d8a:	021b      	lsls	r3, r3, #8
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d110      	bne.n	8006db2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2140      	movs	r1, #64	; 0x40
 8006d9c:	438a      	bics	r2, r1
 8006d9e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2180      	movs	r1, #128	; 0x80
 8006dac:	01c9      	lsls	r1, r1, #7
 8006dae:	430a      	orrs	r2, r1
 8006db0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2240      	movs	r2, #64	; 0x40
 8006dba:	4013      	ands	r3, r2
 8006dbc:	2b40      	cmp	r3, #64	; 0x40
 8006dbe:	d007      	beq.n	8006dd0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2140      	movs	r1, #64	; 0x40
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	68da      	ldr	r2, [r3, #12]
 8006dd4:	23e0      	movs	r3, #224	; 0xe0
 8006dd6:	00db      	lsls	r3, r3, #3
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d94e      	bls.n	8006e7a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d004      	beq.n	8006dee <HAL_SPI_Transmit+0x11e>
 8006de4:	2316      	movs	r3, #22
 8006de6:	18fb      	adds	r3, r7, r3
 8006de8:	881b      	ldrh	r3, [r3, #0]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d13f      	bne.n	8006e6e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df2:	881a      	ldrh	r2, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfe:	1c9a      	adds	r2, r3, #2
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e12:	e02c      	b.n	8006e6e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d112      	bne.n	8006e48 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e26:	881a      	ldrh	r2, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e32:	1c9a      	adds	r2, r3, #2
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	b29a      	uxth	r2, r3
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e46:	e012      	b.n	8006e6e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e48:	f7fc f984 	bl	8003154 <HAL_GetTick>
 8006e4c:	0002      	movs	r2, r0
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d802      	bhi.n	8006e5e <HAL_SPI_Transmit+0x18e>
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	d102      	bne.n	8006e64 <HAL_SPI_Transmit+0x194>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d104      	bne.n	8006e6e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006e64:	231f      	movs	r3, #31
 8006e66:	18fb      	adds	r3, r7, r3
 8006e68:	2203      	movs	r2, #3
 8006e6a:	701a      	strb	r2, [r3, #0]
          goto error;
 8006e6c:	e079      	b.n	8006f62 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1cd      	bne.n	8006e14 <HAL_SPI_Transmit+0x144>
 8006e78:	e04f      	b.n	8006f1a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d004      	beq.n	8006e8c <HAL_SPI_Transmit+0x1bc>
 8006e82:	2316      	movs	r3, #22
 8006e84:	18fb      	adds	r3, r7, r3
 8006e86:	881b      	ldrh	r3, [r3, #0]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d141      	bne.n	8006f10 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	330c      	adds	r3, #12
 8006e96:	7812      	ldrb	r2, [r2, #0]
 8006e98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006eb2:	e02d      	b.n	8006f10 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	2202      	movs	r2, #2
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d113      	bne.n	8006eea <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	330c      	adds	r3, #12
 8006ecc:	7812      	ldrb	r2, [r2, #0]
 8006ece:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed4:	1c5a      	adds	r2, r3, #1
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	b29a      	uxth	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ee8:	e012      	b.n	8006f10 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006eea:	f7fc f933 	bl	8003154 <HAL_GetTick>
 8006eee:	0002      	movs	r2, r0
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d802      	bhi.n	8006f00 <HAL_SPI_Transmit+0x230>
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	3301      	adds	r3, #1
 8006efe:	d102      	bne.n	8006f06 <HAL_SPI_Transmit+0x236>
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d104      	bne.n	8006f10 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8006f06:	231f      	movs	r3, #31
 8006f08:	18fb      	adds	r3, r7, r3
 8006f0a:	2203      	movs	r2, #3
 8006f0c:	701a      	strb	r2, [r3, #0]
          goto error;
 8006f0e:	e028      	b.n	8006f62 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1cc      	bne.n	8006eb4 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	6839      	ldr	r1, [r7, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	0018      	movs	r0, r3
 8006f22:	f000 fb2f 	bl	8007584 <SPI_EndRxTxTransaction>
 8006f26:	1e03      	subs	r3, r0, #0
 8006f28:	d002      	beq.n	8006f30 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2220      	movs	r2, #32
 8006f2e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f38:	2300      	movs	r3, #0
 8006f3a:	613b      	str	r3, [r7, #16]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	613b      	str	r3, [r7, #16]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	613b      	str	r3, [r7, #16]
 8006f4c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d004      	beq.n	8006f60 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006f56:	231f      	movs	r3, #31
 8006f58:	18fb      	adds	r3, r7, r3
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	701a      	strb	r2, [r3, #0]
 8006f5e:	e000      	b.n	8006f62 <HAL_SPI_Transmit+0x292>
  }

error:
 8006f60:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	225d      	movs	r2, #93	; 0x5d
 8006f66:	2101      	movs	r1, #1
 8006f68:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	225c      	movs	r2, #92	; 0x5c
 8006f6e:	2100      	movs	r1, #0
 8006f70:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006f72:	231f      	movs	r3, #31
 8006f74:	18fb      	adds	r3, r7, r3
 8006f76:	781b      	ldrb	r3, [r3, #0]
}
 8006f78:	0018      	movs	r0, r3
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	b008      	add	sp, #32
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08a      	sub	sp, #40	; 0x28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
 8006f8c:	001a      	movs	r2, r3
 8006f8e:	1cbb      	adds	r3, r7, #2
 8006f90:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006f92:	2301      	movs	r3, #1
 8006f94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006f96:	2323      	movs	r3, #35	; 0x23
 8006f98:	18fb      	adds	r3, r7, r3
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	225c      	movs	r2, #92	; 0x5c
 8006fa2:	5c9b      	ldrb	r3, [r3, r2]
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d101      	bne.n	8006fac <HAL_SPI_TransmitReceive+0x2c>
 8006fa8:	2302      	movs	r3, #2
 8006faa:	e1b5      	b.n	8007318 <HAL_SPI_TransmitReceive+0x398>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	225c      	movs	r2, #92	; 0x5c
 8006fb0:	2101      	movs	r1, #1
 8006fb2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fb4:	f7fc f8ce 	bl	8003154 <HAL_GetTick>
 8006fb8:	0003      	movs	r3, r0
 8006fba:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006fbc:	201b      	movs	r0, #27
 8006fbe:	183b      	adds	r3, r7, r0
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	215d      	movs	r1, #93	; 0x5d
 8006fc4:	5c52      	ldrb	r2, [r2, r1]
 8006fc6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006fce:	2312      	movs	r3, #18
 8006fd0:	18fb      	adds	r3, r7, r3
 8006fd2:	1cba      	adds	r2, r7, #2
 8006fd4:	8812      	ldrh	r2, [r2, #0]
 8006fd6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006fd8:	183b      	adds	r3, r7, r0
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d011      	beq.n	8007004 <HAL_SPI_TransmitReceive+0x84>
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	2382      	movs	r3, #130	; 0x82
 8006fe4:	005b      	lsls	r3, r3, #1
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d107      	bne.n	8006ffa <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d103      	bne.n	8006ffa <HAL_SPI_TransmitReceive+0x7a>
 8006ff2:	183b      	adds	r3, r7, r0
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	2b04      	cmp	r3, #4
 8006ff8:	d004      	beq.n	8007004 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006ffa:	2323      	movs	r3, #35	; 0x23
 8006ffc:	18fb      	adds	r3, r7, r3
 8006ffe:	2202      	movs	r2, #2
 8007000:	701a      	strb	r2, [r3, #0]
    goto error;
 8007002:	e17e      	b.n	8007302 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d006      	beq.n	8007018 <HAL_SPI_TransmitReceive+0x98>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d003      	beq.n	8007018 <HAL_SPI_TransmitReceive+0x98>
 8007010:	1cbb      	adds	r3, r7, #2
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d104      	bne.n	8007022 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007018:	2323      	movs	r3, #35	; 0x23
 800701a:	18fb      	adds	r3, r7, r3
 800701c:	2201      	movs	r2, #1
 800701e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007020:	e16f      	b.n	8007302 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	225d      	movs	r2, #93	; 0x5d
 8007026:	5c9b      	ldrb	r3, [r3, r2]
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b04      	cmp	r3, #4
 800702c:	d003      	beq.n	8007036 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	225d      	movs	r2, #93	; 0x5d
 8007032:	2105      	movs	r1, #5
 8007034:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	1cba      	adds	r2, r7, #2
 8007046:	2146      	movs	r1, #70	; 0x46
 8007048:	8812      	ldrh	r2, [r2, #0]
 800704a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	1cba      	adds	r2, r7, #2
 8007050:	2144      	movs	r1, #68	; 0x44
 8007052:	8812      	ldrh	r2, [r2, #0]
 8007054:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	1cba      	adds	r2, r7, #2
 8007060:	8812      	ldrh	r2, [r2, #0]
 8007062:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	1cba      	adds	r2, r7, #2
 8007068:	8812      	ldrh	r2, [r2, #0]
 800706a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2200      	movs	r2, #0
 8007070:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	23e0      	movs	r3, #224	; 0xe0
 800707e:	00db      	lsls	r3, r3, #3
 8007080:	429a      	cmp	r2, r3
 8007082:	d908      	bls.n	8007096 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	49a4      	ldr	r1, [pc, #656]	; (8007320 <HAL_SPI_TransmitReceive+0x3a0>)
 8007090:	400a      	ands	r2, r1
 8007092:	605a      	str	r2, [r3, #4]
 8007094:	e008      	b.n	80070a8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2180      	movs	r1, #128	; 0x80
 80070a2:	0149      	lsls	r1, r1, #5
 80070a4:	430a      	orrs	r2, r1
 80070a6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2240      	movs	r2, #64	; 0x40
 80070b0:	4013      	ands	r3, r2
 80070b2:	2b40      	cmp	r3, #64	; 0x40
 80070b4:	d007      	beq.n	80070c6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2140      	movs	r1, #64	; 0x40
 80070c2:	430a      	orrs	r2, r1
 80070c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	68da      	ldr	r2, [r3, #12]
 80070ca:	23e0      	movs	r3, #224	; 0xe0
 80070cc:	00db      	lsls	r3, r3, #3
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d800      	bhi.n	80070d4 <HAL_SPI_TransmitReceive+0x154>
 80070d2:	e07f      	b.n	80071d4 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d005      	beq.n	80070e8 <HAL_SPI_TransmitReceive+0x168>
 80070dc:	2312      	movs	r3, #18
 80070de:	18fb      	adds	r3, r7, r3
 80070e0:	881b      	ldrh	r3, [r3, #0]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d000      	beq.n	80070e8 <HAL_SPI_TransmitReceive+0x168>
 80070e6:	e069      	b.n	80071bc <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ec:	881a      	ldrh	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f8:	1c9a      	adds	r2, r3, #2
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007102:	b29b      	uxth	r3, r3
 8007104:	3b01      	subs	r3, #1
 8007106:	b29a      	uxth	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800710c:	e056      	b.n	80071bc <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	2202      	movs	r2, #2
 8007116:	4013      	ands	r3, r2
 8007118:	2b02      	cmp	r3, #2
 800711a:	d11b      	bne.n	8007154 <HAL_SPI_TransmitReceive+0x1d4>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007120:	b29b      	uxth	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d016      	beq.n	8007154 <HAL_SPI_TransmitReceive+0x1d4>
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	2b01      	cmp	r3, #1
 800712a:	d113      	bne.n	8007154 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007130:	881a      	ldrh	r2, [r3, #0]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713c:	1c9a      	adds	r2, r3, #2
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007146:	b29b      	uxth	r3, r3
 8007148:	3b01      	subs	r3, #1
 800714a:	b29a      	uxth	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007150:	2300      	movs	r3, #0
 8007152:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	2201      	movs	r2, #1
 800715c:	4013      	ands	r3, r2
 800715e:	2b01      	cmp	r3, #1
 8007160:	d11c      	bne.n	800719c <HAL_SPI_TransmitReceive+0x21c>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2246      	movs	r2, #70	; 0x46
 8007166:	5a9b      	ldrh	r3, [r3, r2]
 8007168:	b29b      	uxth	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d016      	beq.n	800719c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68da      	ldr	r2, [r3, #12]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007178:	b292      	uxth	r2, r2
 800717a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007180:	1c9a      	adds	r2, r3, #2
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2246      	movs	r2, #70	; 0x46
 800718a:	5a9b      	ldrh	r3, [r3, r2]
 800718c:	b29b      	uxth	r3, r3
 800718e:	3b01      	subs	r3, #1
 8007190:	b299      	uxth	r1, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2246      	movs	r2, #70	; 0x46
 8007196:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007198:	2301      	movs	r3, #1
 800719a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800719c:	f7fb ffda 	bl	8003154 <HAL_GetTick>
 80071a0:	0002      	movs	r2, r0
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d807      	bhi.n	80071bc <HAL_SPI_TransmitReceive+0x23c>
 80071ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ae:	3301      	adds	r3, #1
 80071b0:	d004      	beq.n	80071bc <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80071b2:	2323      	movs	r3, #35	; 0x23
 80071b4:	18fb      	adds	r3, r7, r3
 80071b6:	2203      	movs	r2, #3
 80071b8:	701a      	strb	r2, [r3, #0]
        goto error;
 80071ba:	e0a2      	b.n	8007302 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1a3      	bne.n	800710e <HAL_SPI_TransmitReceive+0x18e>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2246      	movs	r2, #70	; 0x46
 80071ca:	5a9b      	ldrh	r3, [r3, r2]
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d19d      	bne.n	800710e <HAL_SPI_TransmitReceive+0x18e>
 80071d2:	e085      	b.n	80072e0 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d005      	beq.n	80071e8 <HAL_SPI_TransmitReceive+0x268>
 80071dc:	2312      	movs	r3, #18
 80071de:	18fb      	adds	r3, r7, r3
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d000      	beq.n	80071e8 <HAL_SPI_TransmitReceive+0x268>
 80071e6:	e070      	b.n	80072ca <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	330c      	adds	r3, #12
 80071f2:	7812      	ldrb	r2, [r2, #0]
 80071f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007204:	b29b      	uxth	r3, r3
 8007206:	3b01      	subs	r3, #1
 8007208:	b29a      	uxth	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800720e:	e05c      	b.n	80072ca <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	2202      	movs	r2, #2
 8007218:	4013      	ands	r3, r2
 800721a:	2b02      	cmp	r3, #2
 800721c:	d11c      	bne.n	8007258 <HAL_SPI_TransmitReceive+0x2d8>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007222:	b29b      	uxth	r3, r3
 8007224:	2b00      	cmp	r3, #0
 8007226:	d017      	beq.n	8007258 <HAL_SPI_TransmitReceive+0x2d8>
 8007228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722a:	2b01      	cmp	r3, #1
 800722c:	d114      	bne.n	8007258 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	330c      	adds	r3, #12
 8007238:	7812      	ldrb	r2, [r2, #0]
 800723a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007240:	1c5a      	adds	r2, r3, #1
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800724a:	b29b      	uxth	r3, r3
 800724c:	3b01      	subs	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007254:	2300      	movs	r3, #0
 8007256:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	2201      	movs	r2, #1
 8007260:	4013      	ands	r3, r2
 8007262:	2b01      	cmp	r3, #1
 8007264:	d11e      	bne.n	80072a4 <HAL_SPI_TransmitReceive+0x324>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2246      	movs	r2, #70	; 0x46
 800726a:	5a9b      	ldrh	r3, [r3, r2]
 800726c:	b29b      	uxth	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d018      	beq.n	80072a4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	330c      	adds	r3, #12
 8007278:	001a      	movs	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	7812      	ldrb	r2, [r2, #0]
 8007280:	b2d2      	uxtb	r2, r2
 8007282:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007288:	1c5a      	adds	r2, r3, #1
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2246      	movs	r2, #70	; 0x46
 8007292:	5a9b      	ldrh	r3, [r3, r2]
 8007294:	b29b      	uxth	r3, r3
 8007296:	3b01      	subs	r3, #1
 8007298:	b299      	uxth	r1, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2246      	movs	r2, #70	; 0x46
 800729e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072a0:	2301      	movs	r3, #1
 80072a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80072a4:	f7fb ff56 	bl	8003154 <HAL_GetTick>
 80072a8:	0002      	movs	r2, r0
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	1ad3      	subs	r3, r2, r3
 80072ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072b0:	429a      	cmp	r2, r3
 80072b2:	d802      	bhi.n	80072ba <HAL_SPI_TransmitReceive+0x33a>
 80072b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b6:	3301      	adds	r3, #1
 80072b8:	d102      	bne.n	80072c0 <HAL_SPI_TransmitReceive+0x340>
 80072ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d104      	bne.n	80072ca <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80072c0:	2323      	movs	r3, #35	; 0x23
 80072c2:	18fb      	adds	r3, r7, r3
 80072c4:	2203      	movs	r2, #3
 80072c6:	701a      	strb	r2, [r3, #0]
        goto error;
 80072c8:	e01b      	b.n	8007302 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d19d      	bne.n	8007210 <HAL_SPI_TransmitReceive+0x290>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2246      	movs	r2, #70	; 0x46
 80072d8:	5a9b      	ldrh	r3, [r3, r2]
 80072da:	b29b      	uxth	r3, r3
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d197      	bne.n	8007210 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072e0:	69fa      	ldr	r2, [r7, #28]
 80072e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	0018      	movs	r0, r3
 80072e8:	f000 f94c 	bl	8007584 <SPI_EndRxTxTransaction>
 80072ec:	1e03      	subs	r3, r0, #0
 80072ee:	d007      	beq.n	8007300 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80072f0:	2323      	movs	r3, #35	; 0x23
 80072f2:	18fb      	adds	r3, r7, r3
 80072f4:	2201      	movs	r2, #1
 80072f6:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2220      	movs	r2, #32
 80072fc:	661a      	str	r2, [r3, #96]	; 0x60
 80072fe:	e000      	b.n	8007302 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8007300:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	225d      	movs	r2, #93	; 0x5d
 8007306:	2101      	movs	r1, #1
 8007308:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	225c      	movs	r2, #92	; 0x5c
 800730e:	2100      	movs	r1, #0
 8007310:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007312:	2323      	movs	r3, #35	; 0x23
 8007314:	18fb      	adds	r3, r7, r3
 8007316:	781b      	ldrb	r3, [r3, #0]
}
 8007318:	0018      	movs	r0, r3
 800731a:	46bd      	mov	sp, r7
 800731c:	b00a      	add	sp, #40	; 0x28
 800731e:	bd80      	pop	{r7, pc}
 8007320:	ffffefff 	.word	0xffffefff

08007324 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b088      	sub	sp, #32
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	603b      	str	r3, [r7, #0]
 8007330:	1dfb      	adds	r3, r7, #7
 8007332:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007334:	f7fb ff0e 	bl	8003154 <HAL_GetTick>
 8007338:	0002      	movs	r2, r0
 800733a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733c:	1a9b      	subs	r3, r3, r2
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	18d3      	adds	r3, r2, r3
 8007342:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007344:	f7fb ff06 	bl	8003154 <HAL_GetTick>
 8007348:	0003      	movs	r3, r0
 800734a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800734c:	4b3a      	ldr	r3, [pc, #232]	; (8007438 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	015b      	lsls	r3, r3, #5
 8007352:	0d1b      	lsrs	r3, r3, #20
 8007354:	69fa      	ldr	r2, [r7, #28]
 8007356:	4353      	muls	r3, r2
 8007358:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800735a:	e058      	b.n	800740e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	3301      	adds	r3, #1
 8007360:	d055      	beq.n	800740e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007362:	f7fb fef7 	bl	8003154 <HAL_GetTick>
 8007366:	0002      	movs	r2, r0
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	69fa      	ldr	r2, [r7, #28]
 800736e:	429a      	cmp	r2, r3
 8007370:	d902      	bls.n	8007378 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d142      	bne.n	80073fe <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	21e0      	movs	r1, #224	; 0xe0
 8007384:	438a      	bics	r2, r1
 8007386:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	685a      	ldr	r2, [r3, #4]
 800738c:	2382      	movs	r3, #130	; 0x82
 800738e:	005b      	lsls	r3, r3, #1
 8007390:	429a      	cmp	r2, r3
 8007392:	d113      	bne.n	80073bc <SPI_WaitFlagStateUntilTimeout+0x98>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	689a      	ldr	r2, [r3, #8]
 8007398:	2380      	movs	r3, #128	; 0x80
 800739a:	021b      	lsls	r3, r3, #8
 800739c:	429a      	cmp	r2, r3
 800739e:	d005      	beq.n	80073ac <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	689a      	ldr	r2, [r3, #8]
 80073a4:	2380      	movs	r3, #128	; 0x80
 80073a6:	00db      	lsls	r3, r3, #3
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d107      	bne.n	80073bc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2140      	movs	r1, #64	; 0x40
 80073b8:	438a      	bics	r2, r1
 80073ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073c0:	2380      	movs	r3, #128	; 0x80
 80073c2:	019b      	lsls	r3, r3, #6
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d110      	bne.n	80073ea <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	491a      	ldr	r1, [pc, #104]	; (800743c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80073d4:	400a      	ands	r2, r1
 80073d6:	601a      	str	r2, [r3, #0]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2180      	movs	r1, #128	; 0x80
 80073e4:	0189      	lsls	r1, r1, #6
 80073e6:	430a      	orrs	r2, r1
 80073e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	225d      	movs	r2, #93	; 0x5d
 80073ee:	2101      	movs	r1, #1
 80073f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	225c      	movs	r2, #92	; 0x5c
 80073f6:	2100      	movs	r1, #0
 80073f8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e017      	b.n	800742e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	3b01      	subs	r3, #1
 800740c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	4013      	ands	r3, r2
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	425a      	negs	r2, r3
 800741e:	4153      	adcs	r3, r2
 8007420:	b2db      	uxtb	r3, r3
 8007422:	001a      	movs	r2, r3
 8007424:	1dfb      	adds	r3, r7, #7
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	429a      	cmp	r2, r3
 800742a:	d197      	bne.n	800735c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	0018      	movs	r0, r3
 8007430:	46bd      	mov	sp, r7
 8007432:	b008      	add	sp, #32
 8007434:	bd80      	pop	{r7, pc}
 8007436:	46c0      	nop			; (mov r8, r8)
 8007438:	20000000 	.word	0x20000000
 800743c:	ffffdfff 	.word	0xffffdfff

08007440 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b08a      	sub	sp, #40	; 0x28
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800744e:	2317      	movs	r3, #23
 8007450:	18fb      	adds	r3, r7, r3
 8007452:	2200      	movs	r2, #0
 8007454:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007456:	f7fb fe7d 	bl	8003154 <HAL_GetTick>
 800745a:	0002      	movs	r2, r0
 800745c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745e:	1a9b      	subs	r3, r3, r2
 8007460:	683a      	ldr	r2, [r7, #0]
 8007462:	18d3      	adds	r3, r2, r3
 8007464:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007466:	f7fb fe75 	bl	8003154 <HAL_GetTick>
 800746a:	0003      	movs	r3, r0
 800746c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	330c      	adds	r3, #12
 8007474:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007476:	4b41      	ldr	r3, [pc, #260]	; (800757c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	0013      	movs	r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	189b      	adds	r3, r3, r2
 8007480:	00da      	lsls	r2, r3, #3
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	0d1b      	lsrs	r3, r3, #20
 8007486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007488:	4353      	muls	r3, r2
 800748a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800748c:	e068      	b.n	8007560 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	23c0      	movs	r3, #192	; 0xc0
 8007492:	00db      	lsls	r3, r3, #3
 8007494:	429a      	cmp	r2, r3
 8007496:	d10a      	bne.n	80074ae <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d107      	bne.n	80074ae <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	b2da      	uxtb	r2, r3
 80074a4:	2117      	movs	r1, #23
 80074a6:	187b      	adds	r3, r7, r1
 80074a8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80074aa:	187b      	adds	r3, r7, r1
 80074ac:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	3301      	adds	r3, #1
 80074b2:	d055      	beq.n	8007560 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074b4:	f7fb fe4e 	bl	8003154 <HAL_GetTick>
 80074b8:	0002      	movs	r2, r0
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d902      	bls.n	80074ca <SPI_WaitFifoStateUntilTimeout+0x8a>
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d142      	bne.n	8007550 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	21e0      	movs	r1, #224	; 0xe0
 80074d6:	438a      	bics	r2, r1
 80074d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	685a      	ldr	r2, [r3, #4]
 80074de:	2382      	movs	r3, #130	; 0x82
 80074e0:	005b      	lsls	r3, r3, #1
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d113      	bne.n	800750e <SPI_WaitFifoStateUntilTimeout+0xce>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	689a      	ldr	r2, [r3, #8]
 80074ea:	2380      	movs	r3, #128	; 0x80
 80074ec:	021b      	lsls	r3, r3, #8
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d005      	beq.n	80074fe <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	689a      	ldr	r2, [r3, #8]
 80074f6:	2380      	movs	r3, #128	; 0x80
 80074f8:	00db      	lsls	r3, r3, #3
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d107      	bne.n	800750e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2140      	movs	r1, #64	; 0x40
 800750a:	438a      	bics	r2, r1
 800750c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007512:	2380      	movs	r3, #128	; 0x80
 8007514:	019b      	lsls	r3, r3, #6
 8007516:	429a      	cmp	r2, r3
 8007518:	d110      	bne.n	800753c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4916      	ldr	r1, [pc, #88]	; (8007580 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007526:	400a      	ands	r2, r1
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2180      	movs	r1, #128	; 0x80
 8007536:	0189      	lsls	r1, r1, #6
 8007538:	430a      	orrs	r2, r1
 800753a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	225d      	movs	r2, #93	; 0x5d
 8007540:	2101      	movs	r1, #1
 8007542:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	225c      	movs	r2, #92	; 0x5c
 8007548:	2100      	movs	r1, #0
 800754a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e010      	b.n	8007572 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007556:	2300      	movs	r3, #0
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	3b01      	subs	r3, #1
 800755e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	4013      	ands	r3, r2
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	429a      	cmp	r2, r3
 800756e:	d18e      	bne.n	800748e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	0018      	movs	r0, r3
 8007574:	46bd      	mov	sp, r7
 8007576:	b00a      	add	sp, #40	; 0x28
 8007578:	bd80      	pop	{r7, pc}
 800757a:	46c0      	nop			; (mov r8, r8)
 800757c:	20000000 	.word	0x20000000
 8007580:	ffffdfff 	.word	0xffffdfff

08007584 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af02      	add	r7, sp, #8
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	23c0      	movs	r3, #192	; 0xc0
 8007594:	0159      	lsls	r1, r3, #5
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	0013      	movs	r3, r2
 800759e:	2200      	movs	r2, #0
 80075a0:	f7ff ff4e 	bl	8007440 <SPI_WaitFifoStateUntilTimeout>
 80075a4:	1e03      	subs	r3, r0, #0
 80075a6:	d007      	beq.n	80075b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ac:	2220      	movs	r2, #32
 80075ae:	431a      	orrs	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e027      	b.n	8007608 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	0013      	movs	r3, r2
 80075c2:	2200      	movs	r2, #0
 80075c4:	2180      	movs	r1, #128	; 0x80
 80075c6:	f7ff fead 	bl	8007324 <SPI_WaitFlagStateUntilTimeout>
 80075ca:	1e03      	subs	r3, r0, #0
 80075cc:	d007      	beq.n	80075de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075d2:	2220      	movs	r2, #32
 80075d4:	431a      	orrs	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e014      	b.n	8007608 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	23c0      	movs	r3, #192	; 0xc0
 80075e2:	00d9      	lsls	r1, r3, #3
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	0013      	movs	r3, r2
 80075ec:	2200      	movs	r2, #0
 80075ee:	f7ff ff27 	bl	8007440 <SPI_WaitFifoStateUntilTimeout>
 80075f2:	1e03      	subs	r3, r0, #0
 80075f4:	d007      	beq.n	8007606 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075fa:	2220      	movs	r2, #32
 80075fc:	431a      	orrs	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e000      	b.n	8007608 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	0018      	movs	r0, r3
 800760a:	46bd      	mov	sp, r7
 800760c:	b004      	add	sp, #16
 800760e:	bd80      	pop	{r7, pc}

08007610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e042      	b.n	80076a8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	223d      	movs	r2, #61	; 0x3d
 8007626:	5c9b      	ldrb	r3, [r3, r2]
 8007628:	b2db      	uxtb	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d107      	bne.n	800763e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	223c      	movs	r2, #60	; 0x3c
 8007632:	2100      	movs	r1, #0
 8007634:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	0018      	movs	r0, r3
 800763a:	f7fb f97b 	bl	8002934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	223d      	movs	r2, #61	; 0x3d
 8007642:	2102      	movs	r1, #2
 8007644:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	3304      	adds	r3, #4
 800764e:	0019      	movs	r1, r3
 8007650:	0010      	movs	r0, r2
 8007652:	f000 fa65 	bl	8007b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2246      	movs	r2, #70	; 0x46
 800765a:	2101      	movs	r1, #1
 800765c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	223e      	movs	r2, #62	; 0x3e
 8007662:	2101      	movs	r1, #1
 8007664:	5499      	strb	r1, [r3, r2]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	223f      	movs	r2, #63	; 0x3f
 800766a:	2101      	movs	r1, #1
 800766c:	5499      	strb	r1, [r3, r2]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2240      	movs	r2, #64	; 0x40
 8007672:	2101      	movs	r1, #1
 8007674:	5499      	strb	r1, [r3, r2]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2241      	movs	r2, #65	; 0x41
 800767a:	2101      	movs	r1, #1
 800767c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2242      	movs	r2, #66	; 0x42
 8007682:	2101      	movs	r1, #1
 8007684:	5499      	strb	r1, [r3, r2]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2243      	movs	r2, #67	; 0x43
 800768a:	2101      	movs	r1, #1
 800768c:	5499      	strb	r1, [r3, r2]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2244      	movs	r2, #68	; 0x44
 8007692:	2101      	movs	r1, #1
 8007694:	5499      	strb	r1, [r3, r2]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2245      	movs	r2, #69	; 0x45
 800769a:	2101      	movs	r1, #1
 800769c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	223d      	movs	r2, #61	; 0x3d
 80076a2:	2101      	movs	r1, #1
 80076a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	0018      	movs	r0, r3
 80076aa:	46bd      	mov	sp, r7
 80076ac:	b002      	add	sp, #8
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	223d      	movs	r2, #61	; 0x3d
 80076bc:	5c9b      	ldrb	r3, [r3, r2]
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d001      	beq.n	80076c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e03b      	b.n	8007740 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	223d      	movs	r2, #61	; 0x3d
 80076cc:	2102      	movs	r1, #2
 80076ce:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68da      	ldr	r2, [r3, #12]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	2101      	movs	r1, #1
 80076dc:	430a      	orrs	r2, r1
 80076de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a18      	ldr	r2, [pc, #96]	; (8007748 <HAL_TIM_Base_Start_IT+0x98>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d00f      	beq.n	800770a <HAL_TIM_Base_Start_IT+0x5a>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	2380      	movs	r3, #128	; 0x80
 80076f0:	05db      	lsls	r3, r3, #23
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d009      	beq.n	800770a <HAL_TIM_Base_Start_IT+0x5a>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a14      	ldr	r2, [pc, #80]	; (800774c <HAL_TIM_Base_Start_IT+0x9c>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d004      	beq.n	800770a <HAL_TIM_Base_Start_IT+0x5a>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a12      	ldr	r2, [pc, #72]	; (8007750 <HAL_TIM_Base_Start_IT+0xa0>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d111      	bne.n	800772e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	2207      	movs	r2, #7
 8007712:	4013      	ands	r3, r2
 8007714:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2b06      	cmp	r3, #6
 800771a:	d010      	beq.n	800773e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2101      	movs	r1, #1
 8007728:	430a      	orrs	r2, r1
 800772a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800772c:	e007      	b.n	800773e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2101      	movs	r1, #1
 800773a:	430a      	orrs	r2, r1
 800773c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	0018      	movs	r0, r3
 8007742:	46bd      	mov	sp, r7
 8007744:	b004      	add	sp, #16
 8007746:	bd80      	pop	{r7, pc}
 8007748:	40012c00 	.word	0x40012c00
 800774c:	40000400 	.word	0x40000400
 8007750:	40014000 	.word	0x40014000

08007754 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b082      	sub	sp, #8
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	e042      	b.n	80077ec <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	223d      	movs	r2, #61	; 0x3d
 800776a:	5c9b      	ldrb	r3, [r3, r2]
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d107      	bne.n	8007782 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	223c      	movs	r2, #60	; 0x3c
 8007776:	2100      	movs	r1, #0
 8007778:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	0018      	movs	r0, r3
 800777e:	f000 f839 	bl	80077f4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	223d      	movs	r2, #61	; 0x3d
 8007786:	2102      	movs	r1, #2
 8007788:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	3304      	adds	r3, #4
 8007792:	0019      	movs	r1, r3
 8007794:	0010      	movs	r0, r2
 8007796:	f000 f9c3 	bl	8007b20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2246      	movs	r2, #70	; 0x46
 800779e:	2101      	movs	r1, #1
 80077a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	223e      	movs	r2, #62	; 0x3e
 80077a6:	2101      	movs	r1, #1
 80077a8:	5499      	strb	r1, [r3, r2]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	223f      	movs	r2, #63	; 0x3f
 80077ae:	2101      	movs	r1, #1
 80077b0:	5499      	strb	r1, [r3, r2]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2240      	movs	r2, #64	; 0x40
 80077b6:	2101      	movs	r1, #1
 80077b8:	5499      	strb	r1, [r3, r2]
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2241      	movs	r2, #65	; 0x41
 80077be:	2101      	movs	r1, #1
 80077c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2242      	movs	r2, #66	; 0x42
 80077c6:	2101      	movs	r1, #1
 80077c8:	5499      	strb	r1, [r3, r2]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2243      	movs	r2, #67	; 0x43
 80077ce:	2101      	movs	r1, #1
 80077d0:	5499      	strb	r1, [r3, r2]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2244      	movs	r2, #68	; 0x44
 80077d6:	2101      	movs	r1, #1
 80077d8:	5499      	strb	r1, [r3, r2]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2245      	movs	r2, #69	; 0x45
 80077de:	2101      	movs	r1, #1
 80077e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	223d      	movs	r2, #61	; 0x3d
 80077e6:	2101      	movs	r1, #1
 80077e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	0018      	movs	r0, r3
 80077ee:	46bd      	mov	sp, r7
 80077f0:	b002      	add	sp, #8
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80077fc:	46c0      	nop			; (mov r8, r8)
 80077fe:	46bd      	mov	sp, r7
 8007800:	b002      	add	sp, #8
 8007802:	bd80      	pop	{r7, pc}

08007804 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	2202      	movs	r2, #2
 8007814:	4013      	ands	r3, r2
 8007816:	2b02      	cmp	r3, #2
 8007818:	d124      	bne.n	8007864 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	2202      	movs	r2, #2
 8007822:	4013      	ands	r3, r2
 8007824:	2b02      	cmp	r3, #2
 8007826:	d11d      	bne.n	8007864 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2203      	movs	r2, #3
 800782e:	4252      	negs	r2, r2
 8007830:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	699b      	ldr	r3, [r3, #24]
 800783e:	2203      	movs	r2, #3
 8007840:	4013      	ands	r3, r2
 8007842:	d004      	beq.n	800784e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	0018      	movs	r0, r3
 8007848:	f000 f952 	bl	8007af0 <HAL_TIM_IC_CaptureCallback>
 800784c:	e007      	b.n	800785e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	0018      	movs	r0, r3
 8007852:	f000 f945 	bl	8007ae0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	0018      	movs	r0, r3
 800785a:	f000 f951 	bl	8007b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	2204      	movs	r2, #4
 800786c:	4013      	ands	r3, r2
 800786e:	2b04      	cmp	r3, #4
 8007870:	d125      	bne.n	80078be <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	2204      	movs	r2, #4
 800787a:	4013      	ands	r3, r2
 800787c:	2b04      	cmp	r3, #4
 800787e:	d11e      	bne.n	80078be <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2205      	movs	r2, #5
 8007886:	4252      	negs	r2, r2
 8007888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2202      	movs	r2, #2
 800788e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	699a      	ldr	r2, [r3, #24]
 8007896:	23c0      	movs	r3, #192	; 0xc0
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	4013      	ands	r3, r2
 800789c:	d004      	beq.n	80078a8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	0018      	movs	r0, r3
 80078a2:	f000 f925 	bl	8007af0 <HAL_TIM_IC_CaptureCallback>
 80078a6:	e007      	b.n	80078b8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	0018      	movs	r0, r3
 80078ac:	f000 f918 	bl	8007ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	0018      	movs	r0, r3
 80078b4:	f000 f924 	bl	8007b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	2208      	movs	r2, #8
 80078c6:	4013      	ands	r3, r2
 80078c8:	2b08      	cmp	r3, #8
 80078ca:	d124      	bne.n	8007916 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	2208      	movs	r2, #8
 80078d4:	4013      	ands	r3, r2
 80078d6:	2b08      	cmp	r3, #8
 80078d8:	d11d      	bne.n	8007916 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2209      	movs	r2, #9
 80078e0:	4252      	negs	r2, r2
 80078e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2204      	movs	r2, #4
 80078e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	69db      	ldr	r3, [r3, #28]
 80078f0:	2203      	movs	r2, #3
 80078f2:	4013      	ands	r3, r2
 80078f4:	d004      	beq.n	8007900 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	0018      	movs	r0, r3
 80078fa:	f000 f8f9 	bl	8007af0 <HAL_TIM_IC_CaptureCallback>
 80078fe:	e007      	b.n	8007910 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	0018      	movs	r0, r3
 8007904:	f000 f8ec 	bl	8007ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	0018      	movs	r0, r3
 800790c:	f000 f8f8 	bl	8007b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	691b      	ldr	r3, [r3, #16]
 800791c:	2210      	movs	r2, #16
 800791e:	4013      	ands	r3, r2
 8007920:	2b10      	cmp	r3, #16
 8007922:	d125      	bne.n	8007970 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	2210      	movs	r2, #16
 800792c:	4013      	ands	r3, r2
 800792e:	2b10      	cmp	r3, #16
 8007930:	d11e      	bne.n	8007970 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2211      	movs	r2, #17
 8007938:	4252      	negs	r2, r2
 800793a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2208      	movs	r2, #8
 8007940:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	69da      	ldr	r2, [r3, #28]
 8007948:	23c0      	movs	r3, #192	; 0xc0
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	4013      	ands	r3, r2
 800794e:	d004      	beq.n	800795a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	0018      	movs	r0, r3
 8007954:	f000 f8cc 	bl	8007af0 <HAL_TIM_IC_CaptureCallback>
 8007958:	e007      	b.n	800796a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	0018      	movs	r0, r3
 800795e:	f000 f8bf 	bl	8007ae0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	0018      	movs	r0, r3
 8007966:	f000 f8cb 	bl	8007b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	691b      	ldr	r3, [r3, #16]
 8007976:	2201      	movs	r2, #1
 8007978:	4013      	ands	r3, r2
 800797a:	2b01      	cmp	r3, #1
 800797c:	d10f      	bne.n	800799e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	2201      	movs	r2, #1
 8007986:	4013      	ands	r3, r2
 8007988:	2b01      	cmp	r3, #1
 800798a:	d108      	bne.n	800799e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2202      	movs	r2, #2
 8007992:	4252      	negs	r2, r2
 8007994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	0018      	movs	r0, r3
 800799a:	f7f9 fbdf 	bl	800115c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	2280      	movs	r2, #128	; 0x80
 80079a6:	4013      	ands	r3, r2
 80079a8:	2b80      	cmp	r3, #128	; 0x80
 80079aa:	d10f      	bne.n	80079cc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	2280      	movs	r2, #128	; 0x80
 80079b4:	4013      	ands	r3, r2
 80079b6:	2b80      	cmp	r3, #128	; 0x80
 80079b8:	d108      	bne.n	80079cc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2281      	movs	r2, #129	; 0x81
 80079c0:	4252      	negs	r2, r2
 80079c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	0018      	movs	r0, r3
 80079c8:	f000 fb2e 	bl	8008028 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	2240      	movs	r2, #64	; 0x40
 80079d4:	4013      	ands	r3, r2
 80079d6:	2b40      	cmp	r3, #64	; 0x40
 80079d8:	d10f      	bne.n	80079fa <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	2240      	movs	r2, #64	; 0x40
 80079e2:	4013      	ands	r3, r2
 80079e4:	2b40      	cmp	r3, #64	; 0x40
 80079e6:	d108      	bne.n	80079fa <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2241      	movs	r2, #65	; 0x41
 80079ee:	4252      	negs	r2, r2
 80079f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	0018      	movs	r0, r3
 80079f6:	f000 f88b 	bl	8007b10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	2220      	movs	r2, #32
 8007a02:	4013      	ands	r3, r2
 8007a04:	2b20      	cmp	r3, #32
 8007a06:	d10f      	bne.n	8007a28 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	2220      	movs	r2, #32
 8007a10:	4013      	ands	r3, r2
 8007a12:	2b20      	cmp	r3, #32
 8007a14:	d108      	bne.n	8007a28 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2221      	movs	r2, #33	; 0x21
 8007a1c:	4252      	negs	r2, r2
 8007a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	0018      	movs	r0, r3
 8007a24:	f000 faf8 	bl	8008018 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a28:	46c0      	nop			; (mov r8, r8)
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	b002      	add	sp, #8
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a3c:	2317      	movs	r3, #23
 8007a3e:	18fb      	adds	r3, r7, r3
 8007a40:	2200      	movs	r2, #0
 8007a42:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	223c      	movs	r2, #60	; 0x3c
 8007a48:	5c9b      	ldrb	r3, [r3, r2]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d101      	bne.n	8007a52 <HAL_TIM_OC_ConfigChannel+0x22>
 8007a4e:	2302      	movs	r3, #2
 8007a50:	e042      	b.n	8007ad8 <HAL_TIM_OC_ConfigChannel+0xa8>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	223c      	movs	r2, #60	; 0x3c
 8007a56:	2101      	movs	r1, #1
 8007a58:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2b0c      	cmp	r3, #12
 8007a5e:	d027      	beq.n	8007ab0 <HAL_TIM_OC_ConfigChannel+0x80>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b0c      	cmp	r3, #12
 8007a64:	d82c      	bhi.n	8007ac0 <HAL_TIM_OC_ConfigChannel+0x90>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2b08      	cmp	r3, #8
 8007a6a:	d019      	beq.n	8007aa0 <HAL_TIM_OC_ConfigChannel+0x70>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b08      	cmp	r3, #8
 8007a70:	d826      	bhi.n	8007ac0 <HAL_TIM_OC_ConfigChannel+0x90>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d003      	beq.n	8007a80 <HAL_TIM_OC_ConfigChannel+0x50>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d008      	beq.n	8007a90 <HAL_TIM_OC_ConfigChannel+0x60>
 8007a7e:	e01f      	b.n	8007ac0 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	0011      	movs	r1, r2
 8007a88:	0018      	movs	r0, r3
 8007a8a:	f000 f8c9 	bl	8007c20 <TIM_OC1_SetConfig>
      break;
 8007a8e:	e01c      	b.n	8007aca <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68ba      	ldr	r2, [r7, #8]
 8007a96:	0011      	movs	r1, r2
 8007a98:	0018      	movs	r0, r3
 8007a9a:	f000 f949 	bl	8007d30 <TIM_OC2_SetConfig>
      break;
 8007a9e:	e014      	b.n	8007aca <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	0011      	movs	r1, r2
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	f000 f9c5 	bl	8007e38 <TIM_OC3_SetConfig>
      break;
 8007aae:	e00c      	b.n	8007aca <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68ba      	ldr	r2, [r7, #8]
 8007ab6:	0011      	movs	r1, r2
 8007ab8:	0018      	movs	r0, r3
 8007aba:	f000 fa43 	bl	8007f44 <TIM_OC4_SetConfig>
      break;
 8007abe:	e004      	b.n	8007aca <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8007ac0:	2317      	movs	r3, #23
 8007ac2:	18fb      	adds	r3, r7, r3
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	701a      	strb	r2, [r3, #0]
      break;
 8007ac8:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	223c      	movs	r2, #60	; 0x3c
 8007ace:	2100      	movs	r1, #0
 8007ad0:	5499      	strb	r1, [r3, r2]

  return status;
 8007ad2:	2317      	movs	r3, #23
 8007ad4:	18fb      	adds	r3, r7, r3
 8007ad6:	781b      	ldrb	r3, [r3, #0]
}
 8007ad8:	0018      	movs	r0, r3
 8007ada:	46bd      	mov	sp, r7
 8007adc:	b006      	add	sp, #24
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ae8:	46c0      	nop			; (mov r8, r8)
 8007aea:	46bd      	mov	sp, r7
 8007aec:	b002      	add	sp, #8
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007af8:	46c0      	nop			; (mov r8, r8)
 8007afa:	46bd      	mov	sp, r7
 8007afc:	b002      	add	sp, #8
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b08:	46c0      	nop			; (mov r8, r8)
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	b002      	add	sp, #8
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b18:	46c0      	nop			; (mov r8, r8)
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	b002      	add	sp, #8
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a34      	ldr	r2, [pc, #208]	; (8007c04 <TIM_Base_SetConfig+0xe4>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d008      	beq.n	8007b4a <TIM_Base_SetConfig+0x2a>
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	2380      	movs	r3, #128	; 0x80
 8007b3c:	05db      	lsls	r3, r3, #23
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d003      	beq.n	8007b4a <TIM_Base_SetConfig+0x2a>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a30      	ldr	r2, [pc, #192]	; (8007c08 <TIM_Base_SetConfig+0xe8>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d108      	bne.n	8007b5c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2270      	movs	r2, #112	; 0x70
 8007b4e:	4393      	bics	r3, r2
 8007b50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a29      	ldr	r2, [pc, #164]	; (8007c04 <TIM_Base_SetConfig+0xe4>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d018      	beq.n	8007b96 <TIM_Base_SetConfig+0x76>
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	2380      	movs	r3, #128	; 0x80
 8007b68:	05db      	lsls	r3, r3, #23
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d013      	beq.n	8007b96 <TIM_Base_SetConfig+0x76>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a25      	ldr	r2, [pc, #148]	; (8007c08 <TIM_Base_SetConfig+0xe8>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d00f      	beq.n	8007b96 <TIM_Base_SetConfig+0x76>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a24      	ldr	r2, [pc, #144]	; (8007c0c <TIM_Base_SetConfig+0xec>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d00b      	beq.n	8007b96 <TIM_Base_SetConfig+0x76>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	4a23      	ldr	r2, [pc, #140]	; (8007c10 <TIM_Base_SetConfig+0xf0>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d007      	beq.n	8007b96 <TIM_Base_SetConfig+0x76>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a22      	ldr	r2, [pc, #136]	; (8007c14 <TIM_Base_SetConfig+0xf4>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d003      	beq.n	8007b96 <TIM_Base_SetConfig+0x76>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a21      	ldr	r2, [pc, #132]	; (8007c18 <TIM_Base_SetConfig+0xf8>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d108      	bne.n	8007ba8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	4a20      	ldr	r2, [pc, #128]	; (8007c1c <TIM_Base_SetConfig+0xfc>)
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2280      	movs	r2, #128	; 0x80
 8007bac:	4393      	bics	r3, r2
 8007bae:	001a      	movs	r2, r3
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	689a      	ldr	r2, [r3, #8]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a0c      	ldr	r2, [pc, #48]	; (8007c04 <TIM_Base_SetConfig+0xe4>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d00b      	beq.n	8007bee <TIM_Base_SetConfig+0xce>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a0d      	ldr	r2, [pc, #52]	; (8007c10 <TIM_Base_SetConfig+0xf0>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d007      	beq.n	8007bee <TIM_Base_SetConfig+0xce>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a0c      	ldr	r2, [pc, #48]	; (8007c14 <TIM_Base_SetConfig+0xf4>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d003      	beq.n	8007bee <TIM_Base_SetConfig+0xce>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a0b      	ldr	r2, [pc, #44]	; (8007c18 <TIM_Base_SetConfig+0xf8>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d103      	bne.n	8007bf6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	691a      	ldr	r2, [r3, #16]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	615a      	str	r2, [r3, #20]
}
 8007bfc:	46c0      	nop			; (mov r8, r8)
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	b004      	add	sp, #16
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	40012c00 	.word	0x40012c00
 8007c08:	40000400 	.word	0x40000400
 8007c0c:	40002000 	.word	0x40002000
 8007c10:	40014000 	.word	0x40014000
 8007c14:	40014400 	.word	0x40014400
 8007c18:	40014800 	.word	0x40014800
 8007c1c:	fffffcff 	.word	0xfffffcff

08007c20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	4393      	bics	r3, r2
 8007c32:	001a      	movs	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a1b      	ldr	r3, [r3, #32]
 8007c3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2270      	movs	r2, #112	; 0x70
 8007c4e:	4393      	bics	r3, r2
 8007c50:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2203      	movs	r2, #3
 8007c56:	4393      	bics	r3, r2
 8007c58:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	2202      	movs	r2, #2
 8007c68:	4393      	bics	r3, r2
 8007c6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	4313      	orrs	r3, r2
 8007c74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a27      	ldr	r2, [pc, #156]	; (8007d18 <TIM_OC1_SetConfig+0xf8>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d00b      	beq.n	8007c96 <TIM_OC1_SetConfig+0x76>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a26      	ldr	r2, [pc, #152]	; (8007d1c <TIM_OC1_SetConfig+0xfc>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d007      	beq.n	8007c96 <TIM_OC1_SetConfig+0x76>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a25      	ldr	r2, [pc, #148]	; (8007d20 <TIM_OC1_SetConfig+0x100>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d003      	beq.n	8007c96 <TIM_OC1_SetConfig+0x76>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a24      	ldr	r2, [pc, #144]	; (8007d24 <TIM_OC1_SetConfig+0x104>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d10c      	bne.n	8007cb0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	2208      	movs	r2, #8
 8007c9a:	4393      	bics	r3, r2
 8007c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	68db      	ldr	r3, [r3, #12]
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	2204      	movs	r2, #4
 8007cac:	4393      	bics	r3, r2
 8007cae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a19      	ldr	r2, [pc, #100]	; (8007d18 <TIM_OC1_SetConfig+0xf8>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d00b      	beq.n	8007cd0 <TIM_OC1_SetConfig+0xb0>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a18      	ldr	r2, [pc, #96]	; (8007d1c <TIM_OC1_SetConfig+0xfc>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d007      	beq.n	8007cd0 <TIM_OC1_SetConfig+0xb0>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a17      	ldr	r2, [pc, #92]	; (8007d20 <TIM_OC1_SetConfig+0x100>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d003      	beq.n	8007cd0 <TIM_OC1_SetConfig+0xb0>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a16      	ldr	r2, [pc, #88]	; (8007d24 <TIM_OC1_SetConfig+0x104>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d111      	bne.n	8007cf4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	4a15      	ldr	r2, [pc, #84]	; (8007d28 <TIM_OC1_SetConfig+0x108>)
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	4a14      	ldr	r2, [pc, #80]	; (8007d2c <TIM_OC1_SetConfig+0x10c>)
 8007cdc:	4013      	ands	r3, r2
 8007cde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	693a      	ldr	r2, [r7, #16]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	621a      	str	r2, [r3, #32]
}
 8007d0e:	46c0      	nop			; (mov r8, r8)
 8007d10:	46bd      	mov	sp, r7
 8007d12:	b006      	add	sp, #24
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	46c0      	nop			; (mov r8, r8)
 8007d18:	40012c00 	.word	0x40012c00
 8007d1c:	40014000 	.word	0x40014000
 8007d20:	40014400 	.word	0x40014400
 8007d24:	40014800 	.word	0x40014800
 8007d28:	fffffeff 	.word	0xfffffeff
 8007d2c:	fffffdff 	.word	0xfffffdff

08007d30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a1b      	ldr	r3, [r3, #32]
 8007d3e:	2210      	movs	r2, #16
 8007d40:	4393      	bics	r3, r2
 8007d42:	001a      	movs	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a1b      	ldr	r3, [r3, #32]
 8007d4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	4a2e      	ldr	r2, [pc, #184]	; (8007e18 <TIM_OC2_SetConfig+0xe8>)
 8007d5e:	4013      	ands	r3, r2
 8007d60:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	4a2d      	ldr	r2, [pc, #180]	; (8007e1c <TIM_OC2_SetConfig+0xec>)
 8007d66:	4013      	ands	r3, r2
 8007d68:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	021b      	lsls	r3, r3, #8
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	4393      	bics	r3, r2
 8007d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	011b      	lsls	r3, r3, #4
 8007d84:	697a      	ldr	r2, [r7, #20]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a24      	ldr	r2, [pc, #144]	; (8007e20 <TIM_OC2_SetConfig+0xf0>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d10d      	bne.n	8007dae <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	2280      	movs	r2, #128	; 0x80
 8007d96:	4393      	bics	r3, r2
 8007d98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	011b      	lsls	r3, r3, #4
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	2240      	movs	r2, #64	; 0x40
 8007daa:	4393      	bics	r3, r2
 8007dac:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a1b      	ldr	r2, [pc, #108]	; (8007e20 <TIM_OC2_SetConfig+0xf0>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d00b      	beq.n	8007dce <TIM_OC2_SetConfig+0x9e>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a1a      	ldr	r2, [pc, #104]	; (8007e24 <TIM_OC2_SetConfig+0xf4>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d007      	beq.n	8007dce <TIM_OC2_SetConfig+0x9e>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a19      	ldr	r2, [pc, #100]	; (8007e28 <TIM_OC2_SetConfig+0xf8>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d003      	beq.n	8007dce <TIM_OC2_SetConfig+0x9e>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a18      	ldr	r2, [pc, #96]	; (8007e2c <TIM_OC2_SetConfig+0xfc>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d113      	bne.n	8007df6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	4a17      	ldr	r2, [pc, #92]	; (8007e30 <TIM_OC2_SetConfig+0x100>)
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	4a16      	ldr	r2, [pc, #88]	; (8007e34 <TIM_OC2_SetConfig+0x104>)
 8007dda:	4013      	ands	r3, r2
 8007ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	693a      	ldr	r2, [r7, #16]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	685a      	ldr	r2, [r3, #4]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	621a      	str	r2, [r3, #32]
}
 8007e10:	46c0      	nop			; (mov r8, r8)
 8007e12:	46bd      	mov	sp, r7
 8007e14:	b006      	add	sp, #24
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	ffff8fff 	.word	0xffff8fff
 8007e1c:	fffffcff 	.word	0xfffffcff
 8007e20:	40012c00 	.word	0x40012c00
 8007e24:	40014000 	.word	0x40014000
 8007e28:	40014400 	.word	0x40014400
 8007e2c:	40014800 	.word	0x40014800
 8007e30:	fffffbff 	.word	0xfffffbff
 8007e34:	fffff7ff 	.word	0xfffff7ff

08007e38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	4a35      	ldr	r2, [pc, #212]	; (8007f1c <TIM_OC3_SetConfig+0xe4>)
 8007e48:	401a      	ands	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	69db      	ldr	r3, [r3, #28]
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2270      	movs	r2, #112	; 0x70
 8007e64:	4393      	bics	r3, r2
 8007e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2203      	movs	r2, #3
 8007e6c:	4393      	bics	r3, r2
 8007e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	4a28      	ldr	r2, [pc, #160]	; (8007f20 <TIM_OC3_SetConfig+0xe8>)
 8007e7e:	4013      	ands	r3, r2
 8007e80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	021b      	lsls	r3, r3, #8
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a24      	ldr	r2, [pc, #144]	; (8007f24 <TIM_OC3_SetConfig+0xec>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d10d      	bne.n	8007eb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	4a23      	ldr	r2, [pc, #140]	; (8007f28 <TIM_OC3_SetConfig+0xf0>)
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	021b      	lsls	r3, r3, #8
 8007ea4:	697a      	ldr	r2, [r7, #20]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	4a1f      	ldr	r2, [pc, #124]	; (8007f2c <TIM_OC3_SetConfig+0xf4>)
 8007eae:	4013      	ands	r3, r2
 8007eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a1b      	ldr	r2, [pc, #108]	; (8007f24 <TIM_OC3_SetConfig+0xec>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d00b      	beq.n	8007ed2 <TIM_OC3_SetConfig+0x9a>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a1c      	ldr	r2, [pc, #112]	; (8007f30 <TIM_OC3_SetConfig+0xf8>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d007      	beq.n	8007ed2 <TIM_OC3_SetConfig+0x9a>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	4a1b      	ldr	r2, [pc, #108]	; (8007f34 <TIM_OC3_SetConfig+0xfc>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d003      	beq.n	8007ed2 <TIM_OC3_SetConfig+0x9a>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a1a      	ldr	r2, [pc, #104]	; (8007f38 <TIM_OC3_SetConfig+0x100>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d113      	bne.n	8007efa <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	4a19      	ldr	r2, [pc, #100]	; (8007f3c <TIM_OC3_SetConfig+0x104>)
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	4a18      	ldr	r2, [pc, #96]	; (8007f40 <TIM_OC3_SetConfig+0x108>)
 8007ede:	4013      	ands	r3, r2
 8007ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	011b      	lsls	r3, r3, #4
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	011b      	lsls	r3, r3, #4
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	685a      	ldr	r2, [r3, #4]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	621a      	str	r2, [r3, #32]
}
 8007f14:	46c0      	nop			; (mov r8, r8)
 8007f16:	46bd      	mov	sp, r7
 8007f18:	b006      	add	sp, #24
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	fffffeff 	.word	0xfffffeff
 8007f20:	fffffdff 	.word	0xfffffdff
 8007f24:	40012c00 	.word	0x40012c00
 8007f28:	fffff7ff 	.word	0xfffff7ff
 8007f2c:	fffffbff 	.word	0xfffffbff
 8007f30:	40014000 	.word	0x40014000
 8007f34:	40014400 	.word	0x40014400
 8007f38:	40014800 	.word	0x40014800
 8007f3c:	ffffefff 	.word	0xffffefff
 8007f40:	ffffdfff 	.word	0xffffdfff

08007f44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a1b      	ldr	r3, [r3, #32]
 8007f52:	4a28      	ldr	r2, [pc, #160]	; (8007ff4 <TIM_OC4_SetConfig+0xb0>)
 8007f54:	401a      	ands	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a1b      	ldr	r3, [r3, #32]
 8007f5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	69db      	ldr	r3, [r3, #28]
 8007f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4a22      	ldr	r2, [pc, #136]	; (8007ff8 <TIM_OC4_SetConfig+0xb4>)
 8007f70:	4013      	ands	r3, r2
 8007f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4a21      	ldr	r2, [pc, #132]	; (8007ffc <TIM_OC4_SetConfig+0xb8>)
 8007f78:	4013      	ands	r3, r2
 8007f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	021b      	lsls	r3, r3, #8
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	4a1d      	ldr	r2, [pc, #116]	; (8008000 <TIM_OC4_SetConfig+0xbc>)
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	031b      	lsls	r3, r3, #12
 8007f96:	693a      	ldr	r2, [r7, #16]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a19      	ldr	r2, [pc, #100]	; (8008004 <TIM_OC4_SetConfig+0xc0>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d00b      	beq.n	8007fbc <TIM_OC4_SetConfig+0x78>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a18      	ldr	r2, [pc, #96]	; (8008008 <TIM_OC4_SetConfig+0xc4>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d007      	beq.n	8007fbc <TIM_OC4_SetConfig+0x78>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a17      	ldr	r2, [pc, #92]	; (800800c <TIM_OC4_SetConfig+0xc8>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d003      	beq.n	8007fbc <TIM_OC4_SetConfig+0x78>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a16      	ldr	r2, [pc, #88]	; (8008010 <TIM_OC4_SetConfig+0xcc>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d109      	bne.n	8007fd0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	4a15      	ldr	r2, [pc, #84]	; (8008014 <TIM_OC4_SetConfig+0xd0>)
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	695b      	ldr	r3, [r3, #20]
 8007fc8:	019b      	lsls	r3, r3, #6
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	697a      	ldr	r2, [r7, #20]
 8007fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	685a      	ldr	r2, [r3, #4]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	621a      	str	r2, [r3, #32]
}
 8007fea:	46c0      	nop			; (mov r8, r8)
 8007fec:	46bd      	mov	sp, r7
 8007fee:	b006      	add	sp, #24
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	46c0      	nop			; (mov r8, r8)
 8007ff4:	ffffefff 	.word	0xffffefff
 8007ff8:	ffff8fff 	.word	0xffff8fff
 8007ffc:	fffffcff 	.word	0xfffffcff
 8008000:	ffffdfff 	.word	0xffffdfff
 8008004:	40012c00 	.word	0x40012c00
 8008008:	40014000 	.word	0x40014000
 800800c:	40014400 	.word	0x40014400
 8008010:	40014800 	.word	0x40014800
 8008014:	ffffbfff 	.word	0xffffbfff

08008018 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008020:	46c0      	nop			; (mov r8, r8)
 8008022:	46bd      	mov	sp, r7
 8008024:	b002      	add	sp, #8
 8008026:	bd80      	pop	{r7, pc}

08008028 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008030:	46c0      	nop			; (mov r8, r8)
 8008032:	46bd      	mov	sp, r7
 8008034:	b002      	add	sp, #8
 8008036:	bd80      	pop	{r7, pc}

08008038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d101      	bne.n	800804a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e044      	b.n	80080d4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800804e:	2b00      	cmp	r3, #0
 8008050:	d107      	bne.n	8008062 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2274      	movs	r2, #116	; 0x74
 8008056:	2100      	movs	r1, #0
 8008058:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	0018      	movs	r0, r3
 800805e:	f7fa fc91 	bl	8002984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2224      	movs	r2, #36	; 0x24
 8008066:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2101      	movs	r1, #1
 8008074:	438a      	bics	r2, r1
 8008076:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	0018      	movs	r0, r3
 800807c:	f000 fb24 	bl	80086c8 <UART_SetConfig>
 8008080:	0003      	movs	r3, r0
 8008082:	2b01      	cmp	r3, #1
 8008084:	d101      	bne.n	800808a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e024      	b.n	80080d4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	0018      	movs	r0, r3
 8008096:	f000 fc9f 	bl	80089d8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	685a      	ldr	r2, [r3, #4]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	490d      	ldr	r1, [pc, #52]	; (80080dc <HAL_UART_Init+0xa4>)
 80080a6:	400a      	ands	r2, r1
 80080a8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	689a      	ldr	r2, [r3, #8]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	212a      	movs	r1, #42	; 0x2a
 80080b6:	438a      	bics	r2, r1
 80080b8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2101      	movs	r1, #1
 80080c6:	430a      	orrs	r2, r1
 80080c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	0018      	movs	r0, r3
 80080ce:	f000 fd37 	bl	8008b40 <UART_CheckIdleState>
 80080d2:	0003      	movs	r3, r0
}
 80080d4:	0018      	movs	r0, r3
 80080d6:	46bd      	mov	sp, r7
 80080d8:	b002      	add	sp, #8
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	ffffb7ff 	.word	0xffffb7ff

080080e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080e0:	b590      	push	{r4, r7, lr}
 80080e2:	b0ab      	sub	sp, #172	; 0xac
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	22a4      	movs	r2, #164	; 0xa4
 80080f0:	18b9      	adds	r1, r7, r2
 80080f2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	20a0      	movs	r0, #160	; 0xa0
 80080fc:	1839      	adds	r1, r7, r0
 80080fe:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	219c      	movs	r1, #156	; 0x9c
 8008108:	1879      	adds	r1, r7, r1
 800810a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800810c:	0011      	movs	r1, r2
 800810e:	18bb      	adds	r3, r7, r2
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a99      	ldr	r2, [pc, #612]	; (8008378 <HAL_UART_IRQHandler+0x298>)
 8008114:	4013      	ands	r3, r2
 8008116:	2298      	movs	r2, #152	; 0x98
 8008118:	18bc      	adds	r4, r7, r2
 800811a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800811c:	18bb      	adds	r3, r7, r2
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d114      	bne.n	800814e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008124:	187b      	adds	r3, r7, r1
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2220      	movs	r2, #32
 800812a:	4013      	ands	r3, r2
 800812c:	d00f      	beq.n	800814e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800812e:	183b      	adds	r3, r7, r0
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2220      	movs	r2, #32
 8008134:	4013      	ands	r3, r2
 8008136:	d00a      	beq.n	800814e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800813c:	2b00      	cmp	r3, #0
 800813e:	d100      	bne.n	8008142 <HAL_UART_IRQHandler+0x62>
 8008140:	e296      	b.n	8008670 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	0010      	movs	r0, r2
 800814a:	4798      	blx	r3
      }
      return;
 800814c:	e290      	b.n	8008670 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800814e:	2398      	movs	r3, #152	; 0x98
 8008150:	18fb      	adds	r3, r7, r3
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d100      	bne.n	800815a <HAL_UART_IRQHandler+0x7a>
 8008158:	e114      	b.n	8008384 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800815a:	239c      	movs	r3, #156	; 0x9c
 800815c:	18fb      	adds	r3, r7, r3
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2201      	movs	r2, #1
 8008162:	4013      	ands	r3, r2
 8008164:	d106      	bne.n	8008174 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008166:	23a0      	movs	r3, #160	; 0xa0
 8008168:	18fb      	adds	r3, r7, r3
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a83      	ldr	r2, [pc, #524]	; (800837c <HAL_UART_IRQHandler+0x29c>)
 800816e:	4013      	ands	r3, r2
 8008170:	d100      	bne.n	8008174 <HAL_UART_IRQHandler+0x94>
 8008172:	e107      	b.n	8008384 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008174:	23a4      	movs	r3, #164	; 0xa4
 8008176:	18fb      	adds	r3, r7, r3
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2201      	movs	r2, #1
 800817c:	4013      	ands	r3, r2
 800817e:	d012      	beq.n	80081a6 <HAL_UART_IRQHandler+0xc6>
 8008180:	23a0      	movs	r3, #160	; 0xa0
 8008182:	18fb      	adds	r3, r7, r3
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	2380      	movs	r3, #128	; 0x80
 8008188:	005b      	lsls	r3, r3, #1
 800818a:	4013      	ands	r3, r2
 800818c:	d00b      	beq.n	80081a6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2201      	movs	r2, #1
 8008194:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2280      	movs	r2, #128	; 0x80
 800819a:	589b      	ldr	r3, [r3, r2]
 800819c:	2201      	movs	r2, #1
 800819e:	431a      	orrs	r2, r3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2180      	movs	r1, #128	; 0x80
 80081a4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081a6:	23a4      	movs	r3, #164	; 0xa4
 80081a8:	18fb      	adds	r3, r7, r3
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2202      	movs	r2, #2
 80081ae:	4013      	ands	r3, r2
 80081b0:	d011      	beq.n	80081d6 <HAL_UART_IRQHandler+0xf6>
 80081b2:	239c      	movs	r3, #156	; 0x9c
 80081b4:	18fb      	adds	r3, r7, r3
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	2201      	movs	r2, #1
 80081ba:	4013      	ands	r3, r2
 80081bc:	d00b      	beq.n	80081d6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2202      	movs	r2, #2
 80081c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2280      	movs	r2, #128	; 0x80
 80081ca:	589b      	ldr	r3, [r3, r2]
 80081cc:	2204      	movs	r2, #4
 80081ce:	431a      	orrs	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2180      	movs	r1, #128	; 0x80
 80081d4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081d6:	23a4      	movs	r3, #164	; 0xa4
 80081d8:	18fb      	adds	r3, r7, r3
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2204      	movs	r2, #4
 80081de:	4013      	ands	r3, r2
 80081e0:	d011      	beq.n	8008206 <HAL_UART_IRQHandler+0x126>
 80081e2:	239c      	movs	r3, #156	; 0x9c
 80081e4:	18fb      	adds	r3, r7, r3
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2201      	movs	r2, #1
 80081ea:	4013      	ands	r3, r2
 80081ec:	d00b      	beq.n	8008206 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2204      	movs	r2, #4
 80081f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2280      	movs	r2, #128	; 0x80
 80081fa:	589b      	ldr	r3, [r3, r2]
 80081fc:	2202      	movs	r2, #2
 80081fe:	431a      	orrs	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2180      	movs	r1, #128	; 0x80
 8008204:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008206:	23a4      	movs	r3, #164	; 0xa4
 8008208:	18fb      	adds	r3, r7, r3
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2208      	movs	r2, #8
 800820e:	4013      	ands	r3, r2
 8008210:	d017      	beq.n	8008242 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008212:	23a0      	movs	r3, #160	; 0xa0
 8008214:	18fb      	adds	r3, r7, r3
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2220      	movs	r2, #32
 800821a:	4013      	ands	r3, r2
 800821c:	d105      	bne.n	800822a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800821e:	239c      	movs	r3, #156	; 0x9c
 8008220:	18fb      	adds	r3, r7, r3
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2201      	movs	r2, #1
 8008226:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008228:	d00b      	beq.n	8008242 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2208      	movs	r2, #8
 8008230:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2280      	movs	r2, #128	; 0x80
 8008236:	589b      	ldr	r3, [r3, r2]
 8008238:	2208      	movs	r2, #8
 800823a:	431a      	orrs	r2, r3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2180      	movs	r1, #128	; 0x80
 8008240:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008242:	23a4      	movs	r3, #164	; 0xa4
 8008244:	18fb      	adds	r3, r7, r3
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	2380      	movs	r3, #128	; 0x80
 800824a:	011b      	lsls	r3, r3, #4
 800824c:	4013      	ands	r3, r2
 800824e:	d013      	beq.n	8008278 <HAL_UART_IRQHandler+0x198>
 8008250:	23a0      	movs	r3, #160	; 0xa0
 8008252:	18fb      	adds	r3, r7, r3
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	2380      	movs	r3, #128	; 0x80
 8008258:	04db      	lsls	r3, r3, #19
 800825a:	4013      	ands	r3, r2
 800825c:	d00c      	beq.n	8008278 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2280      	movs	r2, #128	; 0x80
 8008264:	0112      	lsls	r2, r2, #4
 8008266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2280      	movs	r2, #128	; 0x80
 800826c:	589b      	ldr	r3, [r3, r2]
 800826e:	2220      	movs	r2, #32
 8008270:	431a      	orrs	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2180      	movs	r1, #128	; 0x80
 8008276:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2280      	movs	r2, #128	; 0x80
 800827c:	589b      	ldr	r3, [r3, r2]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d100      	bne.n	8008284 <HAL_UART_IRQHandler+0x1a4>
 8008282:	e1f7      	b.n	8008674 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008284:	23a4      	movs	r3, #164	; 0xa4
 8008286:	18fb      	adds	r3, r7, r3
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2220      	movs	r2, #32
 800828c:	4013      	ands	r3, r2
 800828e:	d00e      	beq.n	80082ae <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008290:	23a0      	movs	r3, #160	; 0xa0
 8008292:	18fb      	adds	r3, r7, r3
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2220      	movs	r2, #32
 8008298:	4013      	ands	r3, r2
 800829a:	d008      	beq.n	80082ae <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d004      	beq.n	80082ae <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	0010      	movs	r0, r2
 80082ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2280      	movs	r2, #128	; 0x80
 80082b2:	589b      	ldr	r3, [r3, r2]
 80082b4:	2194      	movs	r1, #148	; 0x94
 80082b6:	187a      	adds	r2, r7, r1
 80082b8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	2240      	movs	r2, #64	; 0x40
 80082c2:	4013      	ands	r3, r2
 80082c4:	2b40      	cmp	r3, #64	; 0x40
 80082c6:	d004      	beq.n	80082d2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80082c8:	187b      	adds	r3, r7, r1
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2228      	movs	r2, #40	; 0x28
 80082ce:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80082d0:	d047      	beq.n	8008362 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	0018      	movs	r0, r3
 80082d6:	f000 fd3f 	bl	8008d58 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	2240      	movs	r2, #64	; 0x40
 80082e2:	4013      	ands	r3, r2
 80082e4:	2b40      	cmp	r3, #64	; 0x40
 80082e6:	d137      	bne.n	8008358 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082e8:	f3ef 8310 	mrs	r3, PRIMASK
 80082ec:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80082ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082f0:	2090      	movs	r0, #144	; 0x90
 80082f2:	183a      	adds	r2, r7, r0
 80082f4:	6013      	str	r3, [r2, #0]
 80082f6:	2301      	movs	r3, #1
 80082f8:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082fc:	f383 8810 	msr	PRIMASK, r3
}
 8008300:	46c0      	nop			; (mov r8, r8)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	689a      	ldr	r2, [r3, #8]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2140      	movs	r1, #64	; 0x40
 800830e:	438a      	bics	r2, r1
 8008310:	609a      	str	r2, [r3, #8]
 8008312:	183b      	adds	r3, r7, r0
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008318:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800831a:	f383 8810 	msr	PRIMASK, r3
}
 800831e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008324:	2b00      	cmp	r3, #0
 8008326:	d012      	beq.n	800834e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800832c:	4a14      	ldr	r2, [pc, #80]	; (8008380 <HAL_UART_IRQHandler+0x2a0>)
 800832e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008334:	0018      	movs	r0, r3
 8008336:	f7fb fd71 	bl	8003e1c <HAL_DMA_Abort_IT>
 800833a:	1e03      	subs	r3, r0, #0
 800833c:	d01a      	beq.n	8008374 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008348:	0018      	movs	r0, r3
 800834a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800834c:	e012      	b.n	8008374 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	0018      	movs	r0, r3
 8008352:	f000 f9a5 	bl	80086a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008356:	e00d      	b.n	8008374 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	0018      	movs	r0, r3
 800835c:	f000 f9a0 	bl	80086a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008360:	e008      	b.n	8008374 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	0018      	movs	r0, r3
 8008366:	f000 f99b 	bl	80086a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2280      	movs	r2, #128	; 0x80
 800836e:	2100      	movs	r1, #0
 8008370:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008372:	e17f      	b.n	8008674 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008374:	46c0      	nop			; (mov r8, r8)
    return;
 8008376:	e17d      	b.n	8008674 <HAL_UART_IRQHandler+0x594>
 8008378:	0000080f 	.word	0x0000080f
 800837c:	04000120 	.word	0x04000120
 8008380:	08008e1d 	.word	0x08008e1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008388:	2b01      	cmp	r3, #1
 800838a:	d000      	beq.n	800838e <HAL_UART_IRQHandler+0x2ae>
 800838c:	e131      	b.n	80085f2 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800838e:	23a4      	movs	r3, #164	; 0xa4
 8008390:	18fb      	adds	r3, r7, r3
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2210      	movs	r2, #16
 8008396:	4013      	ands	r3, r2
 8008398:	d100      	bne.n	800839c <HAL_UART_IRQHandler+0x2bc>
 800839a:	e12a      	b.n	80085f2 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800839c:	23a0      	movs	r3, #160	; 0xa0
 800839e:	18fb      	adds	r3, r7, r3
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2210      	movs	r2, #16
 80083a4:	4013      	ands	r3, r2
 80083a6:	d100      	bne.n	80083aa <HAL_UART_IRQHandler+0x2ca>
 80083a8:	e123      	b.n	80085f2 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2210      	movs	r2, #16
 80083b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	2240      	movs	r2, #64	; 0x40
 80083ba:	4013      	ands	r3, r2
 80083bc:	2b40      	cmp	r3, #64	; 0x40
 80083be:	d000      	beq.n	80083c2 <HAL_UART_IRQHandler+0x2e2>
 80083c0:	e09b      	b.n	80084fa <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	685a      	ldr	r2, [r3, #4]
 80083ca:	217e      	movs	r1, #126	; 0x7e
 80083cc:	187b      	adds	r3, r7, r1
 80083ce:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80083d0:	187b      	adds	r3, r7, r1
 80083d2:	881b      	ldrh	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d100      	bne.n	80083da <HAL_UART_IRQHandler+0x2fa>
 80083d8:	e14e      	b.n	8008678 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2258      	movs	r2, #88	; 0x58
 80083de:	5a9b      	ldrh	r3, [r3, r2]
 80083e0:	187a      	adds	r2, r7, r1
 80083e2:	8812      	ldrh	r2, [r2, #0]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d300      	bcc.n	80083ea <HAL_UART_IRQHandler+0x30a>
 80083e8:	e146      	b.n	8008678 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	187a      	adds	r2, r7, r1
 80083ee:	215a      	movs	r1, #90	; 0x5a
 80083f0:	8812      	ldrh	r2, [r2, #0]
 80083f2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	2b20      	cmp	r3, #32
 80083fc:	d06e      	beq.n	80084dc <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083fe:	f3ef 8310 	mrs	r3, PRIMASK
 8008402:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008406:	67bb      	str	r3, [r7, #120]	; 0x78
 8008408:	2301      	movs	r3, #1
 800840a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800840c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800840e:	f383 8810 	msr	PRIMASK, r3
}
 8008412:	46c0      	nop			; (mov r8, r8)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681a      	ldr	r2, [r3, #0]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	499a      	ldr	r1, [pc, #616]	; (8008688 <HAL_UART_IRQHandler+0x5a8>)
 8008420:	400a      	ands	r2, r1
 8008422:	601a      	str	r2, [r3, #0]
 8008424:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008426:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842a:	f383 8810 	msr	PRIMASK, r3
}
 800842e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008430:	f3ef 8310 	mrs	r3, PRIMASK
 8008434:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008438:	677b      	str	r3, [r7, #116]	; 0x74
 800843a:	2301      	movs	r3, #1
 800843c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800843e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008440:	f383 8810 	msr	PRIMASK, r3
}
 8008444:	46c0      	nop			; (mov r8, r8)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	689a      	ldr	r2, [r3, #8]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2101      	movs	r1, #1
 8008452:	438a      	bics	r2, r1
 8008454:	609a      	str	r2, [r3, #8]
 8008456:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008458:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800845a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800845c:	f383 8810 	msr	PRIMASK, r3
}
 8008460:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008462:	f3ef 8310 	mrs	r3, PRIMASK
 8008466:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8008468:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800846a:	673b      	str	r3, [r7, #112]	; 0x70
 800846c:	2301      	movs	r3, #1
 800846e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008472:	f383 8810 	msr	PRIMASK, r3
}
 8008476:	46c0      	nop			; (mov r8, r8)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	689a      	ldr	r2, [r3, #8]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2140      	movs	r1, #64	; 0x40
 8008484:	438a      	bics	r2, r1
 8008486:	609a      	str	r2, [r3, #8]
 8008488:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800848a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800848c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800848e:	f383 8810 	msr	PRIMASK, r3
}
 8008492:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2220      	movs	r2, #32
 8008498:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084a0:	f3ef 8310 	mrs	r3, PRIMASK
 80084a4:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80084a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80084aa:	2301      	movs	r3, #1
 80084ac:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084b0:	f383 8810 	msr	PRIMASK, r3
}
 80084b4:	46c0      	nop			; (mov r8, r8)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2110      	movs	r1, #16
 80084c2:	438a      	bics	r2, r1
 80084c4:	601a      	str	r2, [r3, #0]
 80084c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084cc:	f383 8810 	msr	PRIMASK, r3
}
 80084d0:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d6:	0018      	movs	r0, r3
 80084d8:	f7fb fc68 	bl	8003dac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2258      	movs	r2, #88	; 0x58
 80084e0:	5a9a      	ldrh	r2, [r3, r2]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	215a      	movs	r1, #90	; 0x5a
 80084e6:	5a5b      	ldrh	r3, [r3, r1]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	1ad3      	subs	r3, r2, r3
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	0011      	movs	r1, r2
 80084f2:	0018      	movs	r0, r3
 80084f4:	f000 f8dc 	bl	80086b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084f8:	e0be      	b.n	8008678 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2258      	movs	r2, #88	; 0x58
 80084fe:	5a99      	ldrh	r1, [r3, r2]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	225a      	movs	r2, #90	; 0x5a
 8008504:	5a9b      	ldrh	r3, [r3, r2]
 8008506:	b29a      	uxth	r2, r3
 8008508:	208e      	movs	r0, #142	; 0x8e
 800850a:	183b      	adds	r3, r7, r0
 800850c:	1a8a      	subs	r2, r1, r2
 800850e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	225a      	movs	r2, #90	; 0x5a
 8008514:	5a9b      	ldrh	r3, [r3, r2]
 8008516:	b29b      	uxth	r3, r3
 8008518:	2b00      	cmp	r3, #0
 800851a:	d100      	bne.n	800851e <HAL_UART_IRQHandler+0x43e>
 800851c:	e0ae      	b.n	800867c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800851e:	183b      	adds	r3, r7, r0
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d100      	bne.n	8008528 <HAL_UART_IRQHandler+0x448>
 8008526:	e0a9      	b.n	800867c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008528:	f3ef 8310 	mrs	r3, PRIMASK
 800852c:	60fb      	str	r3, [r7, #12]
  return(result);
 800852e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008530:	2488      	movs	r4, #136	; 0x88
 8008532:	193a      	adds	r2, r7, r4
 8008534:	6013      	str	r3, [r2, #0]
 8008536:	2301      	movs	r3, #1
 8008538:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	f383 8810 	msr	PRIMASK, r3
}
 8008540:	46c0      	nop			; (mov r8, r8)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	494f      	ldr	r1, [pc, #316]	; (800868c <HAL_UART_IRQHandler+0x5ac>)
 800854e:	400a      	ands	r2, r1
 8008550:	601a      	str	r2, [r3, #0]
 8008552:	193b      	adds	r3, r7, r4
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	f383 8810 	msr	PRIMASK, r3
}
 800855e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008560:	f3ef 8310 	mrs	r3, PRIMASK
 8008564:	61bb      	str	r3, [r7, #24]
  return(result);
 8008566:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008568:	2484      	movs	r4, #132	; 0x84
 800856a:	193a      	adds	r2, r7, r4
 800856c:	6013      	str	r3, [r2, #0]
 800856e:	2301      	movs	r3, #1
 8008570:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	f383 8810 	msr	PRIMASK, r3
}
 8008578:	46c0      	nop			; (mov r8, r8)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	689a      	ldr	r2, [r3, #8]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2101      	movs	r1, #1
 8008586:	438a      	bics	r2, r1
 8008588:	609a      	str	r2, [r3, #8]
 800858a:	193b      	adds	r3, r7, r4
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008590:	6a3b      	ldr	r3, [r7, #32]
 8008592:	f383 8810 	msr	PRIMASK, r3
}
 8008596:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2220      	movs	r2, #32
 800859c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085aa:	f3ef 8310 	mrs	r3, PRIMASK
 80085ae:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085b2:	2480      	movs	r4, #128	; 0x80
 80085b4:	193a      	adds	r2, r7, r4
 80085b6:	6013      	str	r3, [r2, #0]
 80085b8:	2301      	movs	r3, #1
 80085ba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085be:	f383 8810 	msr	PRIMASK, r3
}
 80085c2:	46c0      	nop			; (mov r8, r8)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2110      	movs	r1, #16
 80085d0:	438a      	bics	r2, r1
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	193b      	adds	r3, r7, r4
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085dc:	f383 8810 	msr	PRIMASK, r3
}
 80085e0:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085e2:	183b      	adds	r3, r7, r0
 80085e4:	881a      	ldrh	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	0011      	movs	r1, r2
 80085ea:	0018      	movs	r0, r3
 80085ec:	f000 f860 	bl	80086b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80085f0:	e044      	b.n	800867c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80085f2:	23a4      	movs	r3, #164	; 0xa4
 80085f4:	18fb      	adds	r3, r7, r3
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	2380      	movs	r3, #128	; 0x80
 80085fa:	035b      	lsls	r3, r3, #13
 80085fc:	4013      	ands	r3, r2
 80085fe:	d010      	beq.n	8008622 <HAL_UART_IRQHandler+0x542>
 8008600:	239c      	movs	r3, #156	; 0x9c
 8008602:	18fb      	adds	r3, r7, r3
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	2380      	movs	r3, #128	; 0x80
 8008608:	03db      	lsls	r3, r3, #15
 800860a:	4013      	ands	r3, r2
 800860c:	d009      	beq.n	8008622 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	2280      	movs	r2, #128	; 0x80
 8008614:	0352      	lsls	r2, r2, #13
 8008616:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	0018      	movs	r0, r3
 800861c:	f000 fc40 	bl	8008ea0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008620:	e02f      	b.n	8008682 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008622:	23a4      	movs	r3, #164	; 0xa4
 8008624:	18fb      	adds	r3, r7, r3
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2280      	movs	r2, #128	; 0x80
 800862a:	4013      	ands	r3, r2
 800862c:	d00f      	beq.n	800864e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800862e:	23a0      	movs	r3, #160	; 0xa0
 8008630:	18fb      	adds	r3, r7, r3
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2280      	movs	r2, #128	; 0x80
 8008636:	4013      	ands	r3, r2
 8008638:	d009      	beq.n	800864e <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800863e:	2b00      	cmp	r3, #0
 8008640:	d01e      	beq.n	8008680 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	0010      	movs	r0, r2
 800864a:	4798      	blx	r3
    }
    return;
 800864c:	e018      	b.n	8008680 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800864e:	23a4      	movs	r3, #164	; 0xa4
 8008650:	18fb      	adds	r3, r7, r3
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2240      	movs	r2, #64	; 0x40
 8008656:	4013      	ands	r3, r2
 8008658:	d013      	beq.n	8008682 <HAL_UART_IRQHandler+0x5a2>
 800865a:	23a0      	movs	r3, #160	; 0xa0
 800865c:	18fb      	adds	r3, r7, r3
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2240      	movs	r2, #64	; 0x40
 8008662:	4013      	ands	r3, r2
 8008664:	d00d      	beq.n	8008682 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	0018      	movs	r0, r3
 800866a:	f000 fbee 	bl	8008e4a <UART_EndTransmit_IT>
    return;
 800866e:	e008      	b.n	8008682 <HAL_UART_IRQHandler+0x5a2>
      return;
 8008670:	46c0      	nop			; (mov r8, r8)
 8008672:	e006      	b.n	8008682 <HAL_UART_IRQHandler+0x5a2>
    return;
 8008674:	46c0      	nop			; (mov r8, r8)
 8008676:	e004      	b.n	8008682 <HAL_UART_IRQHandler+0x5a2>
      return;
 8008678:	46c0      	nop			; (mov r8, r8)
 800867a:	e002      	b.n	8008682 <HAL_UART_IRQHandler+0x5a2>
      return;
 800867c:	46c0      	nop			; (mov r8, r8)
 800867e:	e000      	b.n	8008682 <HAL_UART_IRQHandler+0x5a2>
    return;
 8008680:	46c0      	nop			; (mov r8, r8)
  }

}
 8008682:	46bd      	mov	sp, r7
 8008684:	b02b      	add	sp, #172	; 0xac
 8008686:	bd90      	pop	{r4, r7, pc}
 8008688:	fffffeff 	.word	0xfffffeff
 800868c:	fffffedf 	.word	0xfffffedf

08008690 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008698:	46c0      	nop			; (mov r8, r8)
 800869a:	46bd      	mov	sp, r7
 800869c:	b002      	add	sp, #8
 800869e:	bd80      	pop	{r7, pc}

080086a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086a8:	46c0      	nop			; (mov r8, r8)
 80086aa:	46bd      	mov	sp, r7
 80086ac:	b002      	add	sp, #8
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	000a      	movs	r2, r1
 80086ba:	1cbb      	adds	r3, r7, #2
 80086bc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80086be:	46c0      	nop			; (mov r8, r8)
 80086c0:	46bd      	mov	sp, r7
 80086c2:	b002      	add	sp, #8
 80086c4:	bd80      	pop	{r7, pc}
	...

080086c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b088      	sub	sp, #32
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80086d0:	231e      	movs	r3, #30
 80086d2:	18fb      	adds	r3, r7, r3
 80086d4:	2200      	movs	r2, #0
 80086d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	689a      	ldr	r2, [r3, #8]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	431a      	orrs	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	695b      	ldr	r3, [r3, #20]
 80086e6:	431a      	orrs	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	69db      	ldr	r3, [r3, #28]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4aaf      	ldr	r2, [pc, #700]	; (80089b4 <UART_SetConfig+0x2ec>)
 80086f8:	4013      	ands	r3, r2
 80086fa:	0019      	movs	r1, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	430a      	orrs	r2, r1
 8008704:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	4aaa      	ldr	r2, [pc, #680]	; (80089b8 <UART_SetConfig+0x2f0>)
 800870e:	4013      	ands	r3, r2
 8008710:	0019      	movs	r1, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68da      	ldr	r2, [r3, #12]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	430a      	orrs	r2, r1
 800871c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a1b      	ldr	r3, [r3, #32]
 8008728:	697a      	ldr	r2, [r7, #20]
 800872a:	4313      	orrs	r3, r2
 800872c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	4aa1      	ldr	r2, [pc, #644]	; (80089bc <UART_SetConfig+0x2f4>)
 8008736:	4013      	ands	r3, r2
 8008738:	0019      	movs	r1, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	430a      	orrs	r2, r1
 8008742:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a9d      	ldr	r2, [pc, #628]	; (80089c0 <UART_SetConfig+0x2f8>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d127      	bne.n	800879e <UART_SetConfig+0xd6>
 800874e:	4b9d      	ldr	r3, [pc, #628]	; (80089c4 <UART_SetConfig+0x2fc>)
 8008750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008752:	2203      	movs	r2, #3
 8008754:	4013      	ands	r3, r2
 8008756:	2b03      	cmp	r3, #3
 8008758:	d00d      	beq.n	8008776 <UART_SetConfig+0xae>
 800875a:	d81b      	bhi.n	8008794 <UART_SetConfig+0xcc>
 800875c:	2b02      	cmp	r3, #2
 800875e:	d014      	beq.n	800878a <UART_SetConfig+0xc2>
 8008760:	d818      	bhi.n	8008794 <UART_SetConfig+0xcc>
 8008762:	2b00      	cmp	r3, #0
 8008764:	d002      	beq.n	800876c <UART_SetConfig+0xa4>
 8008766:	2b01      	cmp	r3, #1
 8008768:	d00a      	beq.n	8008780 <UART_SetConfig+0xb8>
 800876a:	e013      	b.n	8008794 <UART_SetConfig+0xcc>
 800876c:	231f      	movs	r3, #31
 800876e:	18fb      	adds	r3, r7, r3
 8008770:	2200      	movs	r2, #0
 8008772:	701a      	strb	r2, [r3, #0]
 8008774:	e065      	b.n	8008842 <UART_SetConfig+0x17a>
 8008776:	231f      	movs	r3, #31
 8008778:	18fb      	adds	r3, r7, r3
 800877a:	2202      	movs	r2, #2
 800877c:	701a      	strb	r2, [r3, #0]
 800877e:	e060      	b.n	8008842 <UART_SetConfig+0x17a>
 8008780:	231f      	movs	r3, #31
 8008782:	18fb      	adds	r3, r7, r3
 8008784:	2204      	movs	r2, #4
 8008786:	701a      	strb	r2, [r3, #0]
 8008788:	e05b      	b.n	8008842 <UART_SetConfig+0x17a>
 800878a:	231f      	movs	r3, #31
 800878c:	18fb      	adds	r3, r7, r3
 800878e:	2208      	movs	r2, #8
 8008790:	701a      	strb	r2, [r3, #0]
 8008792:	e056      	b.n	8008842 <UART_SetConfig+0x17a>
 8008794:	231f      	movs	r3, #31
 8008796:	18fb      	adds	r3, r7, r3
 8008798:	2210      	movs	r2, #16
 800879a:	701a      	strb	r2, [r3, #0]
 800879c:	e051      	b.n	8008842 <UART_SetConfig+0x17a>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a89      	ldr	r2, [pc, #548]	; (80089c8 <UART_SetConfig+0x300>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d134      	bne.n	8008812 <UART_SetConfig+0x14a>
 80087a8:	4b86      	ldr	r3, [pc, #536]	; (80089c4 <UART_SetConfig+0x2fc>)
 80087aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087ac:	23c0      	movs	r3, #192	; 0xc0
 80087ae:	029b      	lsls	r3, r3, #10
 80087b0:	4013      	ands	r3, r2
 80087b2:	22c0      	movs	r2, #192	; 0xc0
 80087b4:	0292      	lsls	r2, r2, #10
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d017      	beq.n	80087ea <UART_SetConfig+0x122>
 80087ba:	22c0      	movs	r2, #192	; 0xc0
 80087bc:	0292      	lsls	r2, r2, #10
 80087be:	4293      	cmp	r3, r2
 80087c0:	d822      	bhi.n	8008808 <UART_SetConfig+0x140>
 80087c2:	2280      	movs	r2, #128	; 0x80
 80087c4:	0292      	lsls	r2, r2, #10
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d019      	beq.n	80087fe <UART_SetConfig+0x136>
 80087ca:	2280      	movs	r2, #128	; 0x80
 80087cc:	0292      	lsls	r2, r2, #10
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d81a      	bhi.n	8008808 <UART_SetConfig+0x140>
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d004      	beq.n	80087e0 <UART_SetConfig+0x118>
 80087d6:	2280      	movs	r2, #128	; 0x80
 80087d8:	0252      	lsls	r2, r2, #9
 80087da:	4293      	cmp	r3, r2
 80087dc:	d00a      	beq.n	80087f4 <UART_SetConfig+0x12c>
 80087de:	e013      	b.n	8008808 <UART_SetConfig+0x140>
 80087e0:	231f      	movs	r3, #31
 80087e2:	18fb      	adds	r3, r7, r3
 80087e4:	2200      	movs	r2, #0
 80087e6:	701a      	strb	r2, [r3, #0]
 80087e8:	e02b      	b.n	8008842 <UART_SetConfig+0x17a>
 80087ea:	231f      	movs	r3, #31
 80087ec:	18fb      	adds	r3, r7, r3
 80087ee:	2202      	movs	r2, #2
 80087f0:	701a      	strb	r2, [r3, #0]
 80087f2:	e026      	b.n	8008842 <UART_SetConfig+0x17a>
 80087f4:	231f      	movs	r3, #31
 80087f6:	18fb      	adds	r3, r7, r3
 80087f8:	2204      	movs	r2, #4
 80087fa:	701a      	strb	r2, [r3, #0]
 80087fc:	e021      	b.n	8008842 <UART_SetConfig+0x17a>
 80087fe:	231f      	movs	r3, #31
 8008800:	18fb      	adds	r3, r7, r3
 8008802:	2208      	movs	r2, #8
 8008804:	701a      	strb	r2, [r3, #0]
 8008806:	e01c      	b.n	8008842 <UART_SetConfig+0x17a>
 8008808:	231f      	movs	r3, #31
 800880a:	18fb      	adds	r3, r7, r3
 800880c:	2210      	movs	r2, #16
 800880e:	701a      	strb	r2, [r3, #0]
 8008810:	e017      	b.n	8008842 <UART_SetConfig+0x17a>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a6d      	ldr	r2, [pc, #436]	; (80089cc <UART_SetConfig+0x304>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d104      	bne.n	8008826 <UART_SetConfig+0x15e>
 800881c:	231f      	movs	r3, #31
 800881e:	18fb      	adds	r3, r7, r3
 8008820:	2200      	movs	r2, #0
 8008822:	701a      	strb	r2, [r3, #0]
 8008824:	e00d      	b.n	8008842 <UART_SetConfig+0x17a>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a69      	ldr	r2, [pc, #420]	; (80089d0 <UART_SetConfig+0x308>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d104      	bne.n	800883a <UART_SetConfig+0x172>
 8008830:	231f      	movs	r3, #31
 8008832:	18fb      	adds	r3, r7, r3
 8008834:	2200      	movs	r2, #0
 8008836:	701a      	strb	r2, [r3, #0]
 8008838:	e003      	b.n	8008842 <UART_SetConfig+0x17a>
 800883a:	231f      	movs	r3, #31
 800883c:	18fb      	adds	r3, r7, r3
 800883e:	2210      	movs	r2, #16
 8008840:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	69da      	ldr	r2, [r3, #28]
 8008846:	2380      	movs	r3, #128	; 0x80
 8008848:	021b      	lsls	r3, r3, #8
 800884a:	429a      	cmp	r2, r3
 800884c:	d15d      	bne.n	800890a <UART_SetConfig+0x242>
  {
    switch (clocksource)
 800884e:	231f      	movs	r3, #31
 8008850:	18fb      	adds	r3, r7, r3
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	2b08      	cmp	r3, #8
 8008856:	d015      	beq.n	8008884 <UART_SetConfig+0x1bc>
 8008858:	dc18      	bgt.n	800888c <UART_SetConfig+0x1c4>
 800885a:	2b04      	cmp	r3, #4
 800885c:	d00d      	beq.n	800887a <UART_SetConfig+0x1b2>
 800885e:	dc15      	bgt.n	800888c <UART_SetConfig+0x1c4>
 8008860:	2b00      	cmp	r3, #0
 8008862:	d002      	beq.n	800886a <UART_SetConfig+0x1a2>
 8008864:	2b02      	cmp	r3, #2
 8008866:	d005      	beq.n	8008874 <UART_SetConfig+0x1ac>
 8008868:	e010      	b.n	800888c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800886a:	f7fe f865 	bl	8006938 <HAL_RCC_GetPCLK1Freq>
 800886e:	0003      	movs	r3, r0
 8008870:	61bb      	str	r3, [r7, #24]
        break;
 8008872:	e012      	b.n	800889a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008874:	4b57      	ldr	r3, [pc, #348]	; (80089d4 <UART_SetConfig+0x30c>)
 8008876:	61bb      	str	r3, [r7, #24]
        break;
 8008878:	e00f      	b.n	800889a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800887a:	f7fd ffd1 	bl	8006820 <HAL_RCC_GetSysClockFreq>
 800887e:	0003      	movs	r3, r0
 8008880:	61bb      	str	r3, [r7, #24]
        break;
 8008882:	e00a      	b.n	800889a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008884:	2380      	movs	r3, #128	; 0x80
 8008886:	021b      	lsls	r3, r3, #8
 8008888:	61bb      	str	r3, [r7, #24]
        break;
 800888a:	e006      	b.n	800889a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 800888c:	2300      	movs	r3, #0
 800888e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008890:	231e      	movs	r3, #30
 8008892:	18fb      	adds	r3, r7, r3
 8008894:	2201      	movs	r2, #1
 8008896:	701a      	strb	r2, [r3, #0]
        break;
 8008898:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d100      	bne.n	80088a2 <UART_SetConfig+0x1da>
 80088a0:	e07b      	b.n	800899a <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	005a      	lsls	r2, r3, #1
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	085b      	lsrs	r3, r3, #1
 80088ac:	18d2      	adds	r2, r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	0019      	movs	r1, r3
 80088b4:	0010      	movs	r0, r2
 80088b6:	f7f7 fc39 	bl	800012c <__udivsi3>
 80088ba:	0003      	movs	r3, r0
 80088bc:	b29b      	uxth	r3, r3
 80088be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	2b0f      	cmp	r3, #15
 80088c4:	d91c      	bls.n	8008900 <UART_SetConfig+0x238>
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	2380      	movs	r3, #128	; 0x80
 80088ca:	025b      	lsls	r3, r3, #9
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d217      	bcs.n	8008900 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	200e      	movs	r0, #14
 80088d6:	183b      	adds	r3, r7, r0
 80088d8:	210f      	movs	r1, #15
 80088da:	438a      	bics	r2, r1
 80088dc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	085b      	lsrs	r3, r3, #1
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	2207      	movs	r2, #7
 80088e6:	4013      	ands	r3, r2
 80088e8:	b299      	uxth	r1, r3
 80088ea:	183b      	adds	r3, r7, r0
 80088ec:	183a      	adds	r2, r7, r0
 80088ee:	8812      	ldrh	r2, [r2, #0]
 80088f0:	430a      	orrs	r2, r1
 80088f2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	183a      	adds	r2, r7, r0
 80088fa:	8812      	ldrh	r2, [r2, #0]
 80088fc:	60da      	str	r2, [r3, #12]
 80088fe:	e04c      	b.n	800899a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8008900:	231e      	movs	r3, #30
 8008902:	18fb      	adds	r3, r7, r3
 8008904:	2201      	movs	r2, #1
 8008906:	701a      	strb	r2, [r3, #0]
 8008908:	e047      	b.n	800899a <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800890a:	231f      	movs	r3, #31
 800890c:	18fb      	adds	r3, r7, r3
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	2b08      	cmp	r3, #8
 8008912:	d015      	beq.n	8008940 <UART_SetConfig+0x278>
 8008914:	dc18      	bgt.n	8008948 <UART_SetConfig+0x280>
 8008916:	2b04      	cmp	r3, #4
 8008918:	d00d      	beq.n	8008936 <UART_SetConfig+0x26e>
 800891a:	dc15      	bgt.n	8008948 <UART_SetConfig+0x280>
 800891c:	2b00      	cmp	r3, #0
 800891e:	d002      	beq.n	8008926 <UART_SetConfig+0x25e>
 8008920:	2b02      	cmp	r3, #2
 8008922:	d005      	beq.n	8008930 <UART_SetConfig+0x268>
 8008924:	e010      	b.n	8008948 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008926:	f7fe f807 	bl	8006938 <HAL_RCC_GetPCLK1Freq>
 800892a:	0003      	movs	r3, r0
 800892c:	61bb      	str	r3, [r7, #24]
        break;
 800892e:	e012      	b.n	8008956 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008930:	4b28      	ldr	r3, [pc, #160]	; (80089d4 <UART_SetConfig+0x30c>)
 8008932:	61bb      	str	r3, [r7, #24]
        break;
 8008934:	e00f      	b.n	8008956 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008936:	f7fd ff73 	bl	8006820 <HAL_RCC_GetSysClockFreq>
 800893a:	0003      	movs	r3, r0
 800893c:	61bb      	str	r3, [r7, #24]
        break;
 800893e:	e00a      	b.n	8008956 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008940:	2380      	movs	r3, #128	; 0x80
 8008942:	021b      	lsls	r3, r3, #8
 8008944:	61bb      	str	r3, [r7, #24]
        break;
 8008946:	e006      	b.n	8008956 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8008948:	2300      	movs	r3, #0
 800894a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800894c:	231e      	movs	r3, #30
 800894e:	18fb      	adds	r3, r7, r3
 8008950:	2201      	movs	r2, #1
 8008952:	701a      	strb	r2, [r3, #0]
        break;
 8008954:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d01e      	beq.n	800899a <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	085a      	lsrs	r2, r3, #1
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	18d2      	adds	r2, r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	0019      	movs	r1, r3
 800896c:	0010      	movs	r0, r2
 800896e:	f7f7 fbdd 	bl	800012c <__udivsi3>
 8008972:	0003      	movs	r3, r0
 8008974:	b29b      	uxth	r3, r3
 8008976:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	2b0f      	cmp	r3, #15
 800897c:	d909      	bls.n	8008992 <UART_SetConfig+0x2ca>
 800897e:	693a      	ldr	r2, [r7, #16]
 8008980:	2380      	movs	r3, #128	; 0x80
 8008982:	025b      	lsls	r3, r3, #9
 8008984:	429a      	cmp	r2, r3
 8008986:	d204      	bcs.n	8008992 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	60da      	str	r2, [r3, #12]
 8008990:	e003      	b.n	800899a <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8008992:	231e      	movs	r3, #30
 8008994:	18fb      	adds	r3, r7, r3
 8008996:	2201      	movs	r2, #1
 8008998:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80089a6:	231e      	movs	r3, #30
 80089a8:	18fb      	adds	r3, r7, r3
 80089aa:	781b      	ldrb	r3, [r3, #0]
}
 80089ac:	0018      	movs	r0, r3
 80089ae:	46bd      	mov	sp, r7
 80089b0:	b008      	add	sp, #32
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	efff69f3 	.word	0xefff69f3
 80089b8:	ffffcfff 	.word	0xffffcfff
 80089bc:	fffff4ff 	.word	0xfffff4ff
 80089c0:	40013800 	.word	0x40013800
 80089c4:	40021000 	.word	0x40021000
 80089c8:	40004400 	.word	0x40004400
 80089cc:	40004800 	.word	0x40004800
 80089d0:	40004c00 	.word	0x40004c00
 80089d4:	007a1200 	.word	0x007a1200

080089d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e4:	2201      	movs	r2, #1
 80089e6:	4013      	ands	r3, r2
 80089e8:	d00b      	beq.n	8008a02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	4a4a      	ldr	r2, [pc, #296]	; (8008b1c <UART_AdvFeatureConfig+0x144>)
 80089f2:	4013      	ands	r3, r2
 80089f4:	0019      	movs	r1, r3
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	430a      	orrs	r2, r1
 8008a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a06:	2202      	movs	r2, #2
 8008a08:	4013      	ands	r3, r2
 8008a0a:	d00b      	beq.n	8008a24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	4a43      	ldr	r2, [pc, #268]	; (8008b20 <UART_AdvFeatureConfig+0x148>)
 8008a14:	4013      	ands	r3, r2
 8008a16:	0019      	movs	r1, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	430a      	orrs	r2, r1
 8008a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a28:	2204      	movs	r2, #4
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	d00b      	beq.n	8008a46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	4a3b      	ldr	r2, [pc, #236]	; (8008b24 <UART_AdvFeatureConfig+0x14c>)
 8008a36:	4013      	ands	r3, r2
 8008a38:	0019      	movs	r1, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	430a      	orrs	r2, r1
 8008a44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4a:	2208      	movs	r2, #8
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	d00b      	beq.n	8008a68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	4a34      	ldr	r2, [pc, #208]	; (8008b28 <UART_AdvFeatureConfig+0x150>)
 8008a58:	4013      	ands	r3, r2
 8008a5a:	0019      	movs	r1, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	430a      	orrs	r2, r1
 8008a66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6c:	2210      	movs	r2, #16
 8008a6e:	4013      	ands	r3, r2
 8008a70:	d00b      	beq.n	8008a8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	4a2c      	ldr	r2, [pc, #176]	; (8008b2c <UART_AdvFeatureConfig+0x154>)
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	0019      	movs	r1, r3
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	430a      	orrs	r2, r1
 8008a88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8e:	2220      	movs	r2, #32
 8008a90:	4013      	ands	r3, r2
 8008a92:	d00b      	beq.n	8008aac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	4a25      	ldr	r2, [pc, #148]	; (8008b30 <UART_AdvFeatureConfig+0x158>)
 8008a9c:	4013      	ands	r3, r2
 8008a9e:	0019      	movs	r1, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	430a      	orrs	r2, r1
 8008aaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab0:	2240      	movs	r2, #64	; 0x40
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	d01d      	beq.n	8008af2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	4a1d      	ldr	r2, [pc, #116]	; (8008b34 <UART_AdvFeatureConfig+0x15c>)
 8008abe:	4013      	ands	r3, r2
 8008ac0:	0019      	movs	r1, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	430a      	orrs	r2, r1
 8008acc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ad2:	2380      	movs	r3, #128	; 0x80
 8008ad4:	035b      	lsls	r3, r3, #13
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d10b      	bne.n	8008af2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	4a15      	ldr	r2, [pc, #84]	; (8008b38 <UART_AdvFeatureConfig+0x160>)
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	0019      	movs	r1, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	430a      	orrs	r2, r1
 8008af0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af6:	2280      	movs	r2, #128	; 0x80
 8008af8:	4013      	ands	r3, r2
 8008afa:	d00b      	beq.n	8008b14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	4a0e      	ldr	r2, [pc, #56]	; (8008b3c <UART_AdvFeatureConfig+0x164>)
 8008b04:	4013      	ands	r3, r2
 8008b06:	0019      	movs	r1, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	430a      	orrs	r2, r1
 8008b12:	605a      	str	r2, [r3, #4]
  }
}
 8008b14:	46c0      	nop			; (mov r8, r8)
 8008b16:	46bd      	mov	sp, r7
 8008b18:	b002      	add	sp, #8
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	fffdffff 	.word	0xfffdffff
 8008b20:	fffeffff 	.word	0xfffeffff
 8008b24:	fffbffff 	.word	0xfffbffff
 8008b28:	ffff7fff 	.word	0xffff7fff
 8008b2c:	ffffefff 	.word	0xffffefff
 8008b30:	ffffdfff 	.word	0xffffdfff
 8008b34:	ffefffff 	.word	0xffefffff
 8008b38:	ff9fffff 	.word	0xff9fffff
 8008b3c:	fff7ffff 	.word	0xfff7ffff

08008b40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b086      	sub	sp, #24
 8008b44:	af02      	add	r7, sp, #8
 8008b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2280      	movs	r2, #128	; 0x80
 8008b4c:	2100      	movs	r1, #0
 8008b4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b50:	f7fa fb00 	bl	8003154 <HAL_GetTick>
 8008b54:	0003      	movs	r3, r0
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2208      	movs	r2, #8
 8008b60:	4013      	ands	r3, r2
 8008b62:	2b08      	cmp	r3, #8
 8008b64:	d10c      	bne.n	8008b80 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2280      	movs	r2, #128	; 0x80
 8008b6a:	0391      	lsls	r1, r2, #14
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	4a17      	ldr	r2, [pc, #92]	; (8008bcc <UART_CheckIdleState+0x8c>)
 8008b70:	9200      	str	r2, [sp, #0]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f000 f82c 	bl	8008bd0 <UART_WaitOnFlagUntilTimeout>
 8008b78:	1e03      	subs	r3, r0, #0
 8008b7a:	d001      	beq.n	8008b80 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	e021      	b.n	8008bc4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2204      	movs	r2, #4
 8008b88:	4013      	ands	r3, r2
 8008b8a:	2b04      	cmp	r3, #4
 8008b8c:	d10c      	bne.n	8008ba8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2280      	movs	r2, #128	; 0x80
 8008b92:	03d1      	lsls	r1, r2, #15
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	4a0d      	ldr	r2, [pc, #52]	; (8008bcc <UART_CheckIdleState+0x8c>)
 8008b98:	9200      	str	r2, [sp, #0]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f000 f818 	bl	8008bd0 <UART_WaitOnFlagUntilTimeout>
 8008ba0:	1e03      	subs	r3, r0, #0
 8008ba2:	d001      	beq.n	8008ba8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	e00d      	b.n	8008bc4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2220      	movs	r2, #32
 8008bac:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2220      	movs	r2, #32
 8008bb2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2274      	movs	r2, #116	; 0x74
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	0018      	movs	r0, r3
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	b004      	add	sp, #16
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	01ffffff 	.word	0x01ffffff

08008bd0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b094      	sub	sp, #80	; 0x50
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	603b      	str	r3, [r7, #0]
 8008bdc:	1dfb      	adds	r3, r7, #7
 8008bde:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008be0:	e0a3      	b.n	8008d2a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008be4:	3301      	adds	r3, #1
 8008be6:	d100      	bne.n	8008bea <UART_WaitOnFlagUntilTimeout+0x1a>
 8008be8:	e09f      	b.n	8008d2a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bea:	f7fa fab3 	bl	8003154 <HAL_GetTick>
 8008bee:	0002      	movs	r2, r0
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	1ad3      	subs	r3, r2, r3
 8008bf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d302      	bcc.n	8008c00 <UART_WaitOnFlagUntilTimeout+0x30>
 8008bfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d13d      	bne.n	8008c7c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c00:	f3ef 8310 	mrs	r3, PRIMASK
 8008c04:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c08:	647b      	str	r3, [r7, #68]	; 0x44
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c10:	f383 8810 	msr	PRIMASK, r3
}
 8008c14:	46c0      	nop			; (mov r8, r8)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	494c      	ldr	r1, [pc, #304]	; (8008d54 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008c22:	400a      	ands	r2, r1
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c28:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2c:	f383 8810 	msr	PRIMASK, r3
}
 8008c30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c32:	f3ef 8310 	mrs	r3, PRIMASK
 8008c36:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c3a:	643b      	str	r3, [r7, #64]	; 0x40
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c42:	f383 8810 	msr	PRIMASK, r3
}
 8008c46:	46c0      	nop			; (mov r8, r8)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	689a      	ldr	r2, [r3, #8]
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2101      	movs	r1, #1
 8008c54:	438a      	bics	r2, r1
 8008c56:	609a      	str	r2, [r3, #8]
 8008c58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c5e:	f383 8810 	msr	PRIMASK, r3
}
 8008c62:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2220      	movs	r2, #32
 8008c68:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2220      	movs	r2, #32
 8008c6e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2274      	movs	r2, #116	; 0x74
 8008c74:	2100      	movs	r1, #0
 8008c76:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e067      	b.n	8008d4c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2204      	movs	r2, #4
 8008c84:	4013      	ands	r3, r2
 8008c86:	d050      	beq.n	8008d2a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	69da      	ldr	r2, [r3, #28]
 8008c8e:	2380      	movs	r3, #128	; 0x80
 8008c90:	011b      	lsls	r3, r3, #4
 8008c92:	401a      	ands	r2, r3
 8008c94:	2380      	movs	r3, #128	; 0x80
 8008c96:	011b      	lsls	r3, r3, #4
 8008c98:	429a      	cmp	r2, r3
 8008c9a:	d146      	bne.n	8008d2a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2280      	movs	r2, #128	; 0x80
 8008ca2:	0112      	lsls	r2, r2, #4
 8008ca4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8008caa:	613b      	str	r3, [r7, #16]
  return(result);
 8008cac:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	f383 8810 	msr	PRIMASK, r3
}
 8008cba:	46c0      	nop			; (mov r8, r8)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681a      	ldr	r2, [r3, #0]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4923      	ldr	r1, [pc, #140]	; (8008d54 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008cc8:	400a      	ands	r2, r1
 8008cca:	601a      	str	r2, [r3, #0]
 8008ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cce:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	f383 8810 	msr	PRIMASK, r3
}
 8008cd6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8008cdc:	61fb      	str	r3, [r7, #28]
  return(result);
 8008cde:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ce0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ce6:	6a3b      	ldr	r3, [r7, #32]
 8008ce8:	f383 8810 	msr	PRIMASK, r3
}
 8008cec:	46c0      	nop			; (mov r8, r8)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	689a      	ldr	r2, [r3, #8]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	438a      	bics	r2, r1
 8008cfc:	609a      	str	r2, [r3, #8]
 8008cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d00:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d04:	f383 8810 	msr	PRIMASK, r3
}
 8008d08:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2220      	movs	r2, #32
 8008d0e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2220      	movs	r2, #32
 8008d14:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2280      	movs	r2, #128	; 0x80
 8008d1a:	2120      	movs	r1, #32
 8008d1c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2274      	movs	r2, #116	; 0x74
 8008d22:	2100      	movs	r1, #0
 8008d24:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008d26:	2303      	movs	r3, #3
 8008d28:	e010      	b.n	8008d4c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	69db      	ldr	r3, [r3, #28]
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	4013      	ands	r3, r2
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	1ad3      	subs	r3, r2, r3
 8008d38:	425a      	negs	r2, r3
 8008d3a:	4153      	adcs	r3, r2
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	001a      	movs	r2, r3
 8008d40:	1dfb      	adds	r3, r7, #7
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d100      	bne.n	8008d4a <UART_WaitOnFlagUntilTimeout+0x17a>
 8008d48:	e74b      	b.n	8008be2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	0018      	movs	r0, r3
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	b014      	add	sp, #80	; 0x50
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	fffffe5f 	.word	0xfffffe5f

08008d58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b08e      	sub	sp, #56	; 0x38
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d60:	f3ef 8310 	mrs	r3, PRIMASK
 8008d64:	617b      	str	r3, [r7, #20]
  return(result);
 8008d66:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d68:	637b      	str	r3, [r7, #52]	; 0x34
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	f383 8810 	msr	PRIMASK, r3
}
 8008d74:	46c0      	nop			; (mov r8, r8)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4925      	ldr	r1, [pc, #148]	; (8008e18 <UART_EndRxTransfer+0xc0>)
 8008d82:	400a      	ands	r2, r1
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	f383 8810 	msr	PRIMASK, r3
}
 8008d90:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d92:	f3ef 8310 	mrs	r3, PRIMASK
 8008d96:	623b      	str	r3, [r7, #32]
  return(result);
 8008d98:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d9a:	633b      	str	r3, [r7, #48]	; 0x30
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da2:	f383 8810 	msr	PRIMASK, r3
}
 8008da6:	46c0      	nop			; (mov r8, r8)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	689a      	ldr	r2, [r3, #8]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2101      	movs	r1, #1
 8008db4:	438a      	bics	r2, r1
 8008db6:	609a      	str	r2, [r3, #8]
 8008db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dba:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dbe:	f383 8810 	msr	PRIMASK, r3
}
 8008dc2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d118      	bne.n	8008dfe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8008dd0:	60bb      	str	r3, [r7, #8]
  return(result);
 8008dd2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f383 8810 	msr	PRIMASK, r3
}
 8008de0:	46c0      	nop			; (mov r8, r8)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2110      	movs	r1, #16
 8008dee:	438a      	bics	r2, r1
 8008df0:	601a      	str	r2, [r3, #0]
 8008df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008df4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	f383 8810 	msr	PRIMASK, r3
}
 8008dfc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2220      	movs	r2, #32
 8008e02:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008e10:	46c0      	nop			; (mov r8, r8)
 8008e12:	46bd      	mov	sp, r7
 8008e14:	b00e      	add	sp, #56	; 0x38
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	fffffedf 	.word	0xfffffedf

08008e1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	225a      	movs	r2, #90	; 0x5a
 8008e2e:	2100      	movs	r1, #0
 8008e30:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2252      	movs	r2, #82	; 0x52
 8008e36:	2100      	movs	r1, #0
 8008e38:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	0018      	movs	r0, r3
 8008e3e:	f7ff fc2f 	bl	80086a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e42:	46c0      	nop			; (mov r8, r8)
 8008e44:	46bd      	mov	sp, r7
 8008e46:	b004      	add	sp, #16
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b086      	sub	sp, #24
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e52:	f3ef 8310 	mrs	r3, PRIMASK
 8008e56:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e58:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e5a:	617b      	str	r3, [r7, #20]
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f383 8810 	msr	PRIMASK, r3
}
 8008e66:	46c0      	nop			; (mov r8, r8)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2140      	movs	r1, #64	; 0x40
 8008e74:	438a      	bics	r2, r1
 8008e76:	601a      	str	r2, [r3, #0]
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	f383 8810 	msr	PRIMASK, r3
}
 8008e82:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2220      	movs	r2, #32
 8008e88:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	0018      	movs	r0, r3
 8008e94:	f7ff fbfc 	bl	8008690 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e98:	46c0      	nop			; (mov r8, r8)
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	b006      	add	sp, #24
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008ea8:	46c0      	nop			; (mov r8, r8)
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	b002      	add	sp, #8
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2244      	movs	r2, #68	; 0x44
 8008ebc:	2100      	movs	r1, #0
 8008ebe:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008ec0:	4b05      	ldr	r3, [pc, #20]	; (8008ed8 <USB_EnableGlobalInt+0x28>)
 8008ec2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	b299      	uxth	r1, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2240      	movs	r2, #64	; 0x40
 8008ecc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008ece:	2300      	movs	r3, #0
}
 8008ed0:	0018      	movs	r0, r3
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	b004      	add	sp, #16
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	0000bf80 	.word	0x0000bf80

08008edc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008ee4:	4b09      	ldr	r3, [pc, #36]	; (8008f0c <USB_DisableGlobalInt+0x30>)
 8008ee6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2240      	movs	r2, #64	; 0x40
 8008eec:	5a9b      	ldrh	r3, [r3, r2]
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	b292      	uxth	r2, r2
 8008ef4:	43d2      	mvns	r2, r2
 8008ef6:	b292      	uxth	r2, r2
 8008ef8:	4013      	ands	r3, r2
 8008efa:	b299      	uxth	r1, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2240      	movs	r2, #64	; 0x40
 8008f00:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	0018      	movs	r0, r3
 8008f06:	46bd      	mov	sp, r7
 8008f08:	b004      	add	sp, #16
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	0000bf80 	.word	0x0000bf80

08008f10 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008f10:	b084      	sub	sp, #16
 8008f12:	b590      	push	{r4, r7, lr}
 8008f14:	46c6      	mov	lr, r8
 8008f16:	b500      	push	{lr}
 8008f18:	b082      	sub	sp, #8
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
 8008f1e:	2004      	movs	r0, #4
 8008f20:	2410      	movs	r4, #16
 8008f22:	46a4      	mov	ip, r4
 8008f24:	2408      	movs	r4, #8
 8008f26:	46a0      	mov	r8, r4
 8008f28:	44b8      	add	r8, r7
 8008f2a:	44c4      	add	ip, r8
 8008f2c:	4460      	add	r0, ip
 8008f2e:	6001      	str	r1, [r0, #0]
 8008f30:	6042      	str	r2, [r0, #4]
 8008f32:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2240      	movs	r2, #64	; 0x40
 8008f38:	2101      	movs	r1, #1
 8008f3a:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2240      	movs	r2, #64	; 0x40
 8008f40:	2100      	movs	r1, #0
 8008f42:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2244      	movs	r2, #68	; 0x44
 8008f48:	2100      	movs	r1, #0
 8008f4a:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2250      	movs	r2, #80	; 0x50
 8008f50:	2100      	movs	r1, #0
 8008f52:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	0018      	movs	r0, r3
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	b002      	add	sp, #8
 8008f5c:	bc80      	pop	{r7}
 8008f5e:	46b8      	mov	r8, r7
 8008f60:	bc90      	pop	{r4, r7}
 8008f62:	bc08      	pop	{r3}
 8008f64:	b004      	add	sp, #16
 8008f66:	4718      	bx	r3

08008f68 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b09c      	sub	sp, #112	; 0x70
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008f72:	236f      	movs	r3, #111	; 0x6f
 8008f74:	18fb      	adds	r3, r7, r3
 8008f76:	2200      	movs	r2, #0
 8008f78:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	18d3      	adds	r3, r2, r3
 8008f84:	881b      	ldrh	r3, [r3, #0]
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	236c      	movs	r3, #108	; 0x6c
 8008f8a:	18fb      	adds	r3, r7, r3
 8008f8c:	49cf      	ldr	r1, [pc, #828]	; (80092cc <USB_ActivateEndpoint+0x364>)
 8008f8e:	400a      	ands	r2, r1
 8008f90:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	78db      	ldrb	r3, [r3, #3]
 8008f96:	2b03      	cmp	r3, #3
 8008f98:	d017      	beq.n	8008fca <USB_ActivateEndpoint+0x62>
 8008f9a:	dc28      	bgt.n	8008fee <USB_ActivateEndpoint+0x86>
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d00e      	beq.n	8008fbe <USB_ActivateEndpoint+0x56>
 8008fa0:	dc25      	bgt.n	8008fee <USB_ActivateEndpoint+0x86>
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d002      	beq.n	8008fac <USB_ActivateEndpoint+0x44>
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d018      	beq.n	8008fdc <USB_ActivateEndpoint+0x74>
 8008faa:	e020      	b.n	8008fee <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008fac:	226c      	movs	r2, #108	; 0x6c
 8008fae:	18bb      	adds	r3, r7, r2
 8008fb0:	18ba      	adds	r2, r7, r2
 8008fb2:	8812      	ldrh	r2, [r2, #0]
 8008fb4:	2180      	movs	r1, #128	; 0x80
 8008fb6:	0089      	lsls	r1, r1, #2
 8008fb8:	430a      	orrs	r2, r1
 8008fba:	801a      	strh	r2, [r3, #0]
      break;
 8008fbc:	e01c      	b.n	8008ff8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8008fbe:	226c      	movs	r2, #108	; 0x6c
 8008fc0:	18bb      	adds	r3, r7, r2
 8008fc2:	18ba      	adds	r2, r7, r2
 8008fc4:	8812      	ldrh	r2, [r2, #0]
 8008fc6:	801a      	strh	r2, [r3, #0]
      break;
 8008fc8:	e016      	b.n	8008ff8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008fca:	226c      	movs	r2, #108	; 0x6c
 8008fcc:	18bb      	adds	r3, r7, r2
 8008fce:	18ba      	adds	r2, r7, r2
 8008fd0:	8812      	ldrh	r2, [r2, #0]
 8008fd2:	21c0      	movs	r1, #192	; 0xc0
 8008fd4:	00c9      	lsls	r1, r1, #3
 8008fd6:	430a      	orrs	r2, r1
 8008fd8:	801a      	strh	r2, [r3, #0]
      break;
 8008fda:	e00d      	b.n	8008ff8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008fdc:	226c      	movs	r2, #108	; 0x6c
 8008fde:	18bb      	adds	r3, r7, r2
 8008fe0:	18ba      	adds	r2, r7, r2
 8008fe2:	8812      	ldrh	r2, [r2, #0]
 8008fe4:	2180      	movs	r1, #128	; 0x80
 8008fe6:	00c9      	lsls	r1, r1, #3
 8008fe8:	430a      	orrs	r2, r1
 8008fea:	801a      	strh	r2, [r3, #0]
      break;
 8008fec:	e004      	b.n	8008ff8 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8008fee:	236f      	movs	r3, #111	; 0x6f
 8008ff0:	18fb      	adds	r3, r7, r3
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	701a      	strb	r2, [r3, #0]
      break;
 8008ff6:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	18d3      	adds	r3, r2, r3
 8009002:	226c      	movs	r2, #108	; 0x6c
 8009004:	18ba      	adds	r2, r7, r2
 8009006:	8812      	ldrh	r2, [r2, #0]
 8009008:	49b1      	ldr	r1, [pc, #708]	; (80092d0 <USB_ActivateEndpoint+0x368>)
 800900a:	430a      	orrs	r2, r1
 800900c:	b292      	uxth	r2, r2
 800900e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	18d3      	adds	r3, r2, r3
 800901a:	881b      	ldrh	r3, [r3, #0]
 800901c:	b29b      	uxth	r3, r3
 800901e:	b21b      	sxth	r3, r3
 8009020:	4aac      	ldr	r2, [pc, #688]	; (80092d4 <USB_ActivateEndpoint+0x36c>)
 8009022:	4013      	ands	r3, r2
 8009024:	b21a      	sxth	r2, r3
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	781b      	ldrb	r3, [r3, #0]
 800902a:	b21b      	sxth	r3, r3
 800902c:	4313      	orrs	r3, r2
 800902e:	b21a      	sxth	r2, r3
 8009030:	2166      	movs	r1, #102	; 0x66
 8009032:	187b      	adds	r3, r7, r1
 8009034:	801a      	strh	r2, [r3, #0]
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	18d3      	adds	r3, r2, r3
 8009040:	187a      	adds	r2, r7, r1
 8009042:	8812      	ldrh	r2, [r2, #0]
 8009044:	49a2      	ldr	r1, [pc, #648]	; (80092d0 <USB_ActivateEndpoint+0x368>)
 8009046:	430a      	orrs	r2, r1
 8009048:	b292      	uxth	r2, r2
 800904a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	7b1b      	ldrb	r3, [r3, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d000      	beq.n	8009056 <USB_ActivateEndpoint+0xee>
 8009054:	e150      	b.n	80092f8 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	785b      	ldrb	r3, [r3, #1]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d100      	bne.n	8009060 <USB_ActivateEndpoint+0xf8>
 800905e:	e07a      	b.n	8009156 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	61bb      	str	r3, [r7, #24]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2250      	movs	r2, #80	; 0x50
 8009068:	5a9b      	ldrh	r3, [r3, r2]
 800906a:	b29b      	uxth	r3, r3
 800906c:	001a      	movs	r2, r3
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	189b      	adds	r3, r3, r2
 8009072:	61bb      	str	r3, [r7, #24]
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	00da      	lsls	r2, r3, #3
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	18d3      	adds	r3, r2, r3
 800907e:	2280      	movs	r2, #128	; 0x80
 8009080:	00d2      	lsls	r2, r2, #3
 8009082:	4694      	mov	ip, r2
 8009084:	4463      	add	r3, ip
 8009086:	617b      	str	r3, [r7, #20]
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	88db      	ldrh	r3, [r3, #6]
 800908c:	085b      	lsrs	r3, r3, #1
 800908e:	b29b      	uxth	r3, r3
 8009090:	18db      	adds	r3, r3, r3
 8009092:	b29a      	uxth	r2, r3
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	18d2      	adds	r2, r2, r3
 80090a2:	2112      	movs	r1, #18
 80090a4:	187b      	adds	r3, r7, r1
 80090a6:	8812      	ldrh	r2, [r2, #0]
 80090a8:	801a      	strh	r2, [r3, #0]
 80090aa:	187b      	adds	r3, r7, r1
 80090ac:	881b      	ldrh	r3, [r3, #0]
 80090ae:	2240      	movs	r2, #64	; 0x40
 80090b0:	4013      	ands	r3, r2
 80090b2:	d016      	beq.n	80090e2 <USB_ActivateEndpoint+0x17a>
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	18d3      	adds	r3, r2, r3
 80090be:	881b      	ldrh	r3, [r3, #0]
 80090c0:	b29a      	uxth	r2, r3
 80090c2:	2010      	movs	r0, #16
 80090c4:	183b      	adds	r3, r7, r0
 80090c6:	4983      	ldr	r1, [pc, #524]	; (80092d4 <USB_ActivateEndpoint+0x36c>)
 80090c8:	400a      	ands	r2, r1
 80090ca:	801a      	strh	r2, [r3, #0]
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	18d3      	adds	r3, r2, r3
 80090d6:	183a      	adds	r2, r7, r0
 80090d8:	8812      	ldrh	r2, [r2, #0]
 80090da:	497f      	ldr	r1, [pc, #508]	; (80092d8 <USB_ActivateEndpoint+0x370>)
 80090dc:	430a      	orrs	r2, r1
 80090de:	b292      	uxth	r2, r2
 80090e0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	78db      	ldrb	r3, [r3, #3]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d01d      	beq.n	8009126 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	18d3      	adds	r3, r2, r3
 80090f4:	881b      	ldrh	r3, [r3, #0]
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	200c      	movs	r0, #12
 80090fa:	183b      	adds	r3, r7, r0
 80090fc:	4977      	ldr	r1, [pc, #476]	; (80092dc <USB_ActivateEndpoint+0x374>)
 80090fe:	400a      	ands	r2, r1
 8009100:	801a      	strh	r2, [r3, #0]
 8009102:	183b      	adds	r3, r7, r0
 8009104:	183a      	adds	r2, r7, r0
 8009106:	8812      	ldrh	r2, [r2, #0]
 8009108:	2120      	movs	r1, #32
 800910a:	404a      	eors	r2, r1
 800910c:	801a      	strh	r2, [r3, #0]
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	18d3      	adds	r3, r2, r3
 8009118:	183a      	adds	r2, r7, r0
 800911a:	8812      	ldrh	r2, [r2, #0]
 800911c:	496c      	ldr	r1, [pc, #432]	; (80092d0 <USB_ActivateEndpoint+0x368>)
 800911e:	430a      	orrs	r2, r1
 8009120:	b292      	uxth	r2, r2
 8009122:	801a      	strh	r2, [r3, #0]
 8009124:	e27a      	b.n	800961c <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	18d3      	adds	r3, r2, r3
 8009130:	881b      	ldrh	r3, [r3, #0]
 8009132:	b29a      	uxth	r2, r3
 8009134:	200e      	movs	r0, #14
 8009136:	183b      	adds	r3, r7, r0
 8009138:	4968      	ldr	r1, [pc, #416]	; (80092dc <USB_ActivateEndpoint+0x374>)
 800913a:	400a      	ands	r2, r1
 800913c:	801a      	strh	r2, [r3, #0]
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	18d3      	adds	r3, r2, r3
 8009148:	183a      	adds	r2, r7, r0
 800914a:	8812      	ldrh	r2, [r2, #0]
 800914c:	4960      	ldr	r1, [pc, #384]	; (80092d0 <USB_ActivateEndpoint+0x368>)
 800914e:	430a      	orrs	r2, r1
 8009150:	b292      	uxth	r2, r2
 8009152:	801a      	strh	r2, [r3, #0]
 8009154:	e262      	b.n	800961c <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	633b      	str	r3, [r7, #48]	; 0x30
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2250      	movs	r2, #80	; 0x50
 800915e:	5a9b      	ldrh	r3, [r3, r2]
 8009160:	b29b      	uxth	r3, r3
 8009162:	001a      	movs	r2, r3
 8009164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009166:	189b      	adds	r3, r3, r2
 8009168:	633b      	str	r3, [r7, #48]	; 0x30
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	00da      	lsls	r2, r3, #3
 8009170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009172:	18d3      	adds	r3, r2, r3
 8009174:	4a5a      	ldr	r2, [pc, #360]	; (80092e0 <USB_ActivateEndpoint+0x378>)
 8009176:	4694      	mov	ip, r2
 8009178:	4463      	add	r3, ip
 800917a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	88db      	ldrh	r3, [r3, #6]
 8009180:	085b      	lsrs	r3, r3, #1
 8009182:	b29b      	uxth	r3, r3
 8009184:	18db      	adds	r3, r3, r3
 8009186:	b29a      	uxth	r2, r3
 8009188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2250      	movs	r2, #80	; 0x50
 8009194:	5a9b      	ldrh	r3, [r3, r2]
 8009196:	b29b      	uxth	r3, r3
 8009198:	001a      	movs	r2, r3
 800919a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919c:	189b      	adds	r3, r3, r2
 800919e:	62bb      	str	r3, [r7, #40]	; 0x28
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	00da      	lsls	r2, r3, #3
 80091a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a8:	18d3      	adds	r3, r2, r3
 80091aa:	4a4e      	ldr	r2, [pc, #312]	; (80092e4 <USB_ActivateEndpoint+0x37c>)
 80091ac:	4694      	mov	ip, r2
 80091ae:	4463      	add	r3, ip
 80091b0:	627b      	str	r3, [r7, #36]	; 0x24
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d110      	bne.n	80091dc <USB_ActivateEndpoint+0x274>
 80091ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091bc:	881b      	ldrh	r3, [r3, #0]
 80091be:	b29b      	uxth	r3, r3
 80091c0:	4a49      	ldr	r2, [pc, #292]	; (80092e8 <USB_ActivateEndpoint+0x380>)
 80091c2:	4013      	ands	r3, r2
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c8:	801a      	strh	r2, [r3, #0]
 80091ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091cc:	881b      	ldrh	r3, [r3, #0]
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	4a46      	ldr	r2, [pc, #280]	; (80092ec <USB_ActivateEndpoint+0x384>)
 80091d2:	4313      	orrs	r3, r2
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d8:	801a      	strh	r2, [r3, #0]
 80091da:	e02b      	b.n	8009234 <USB_ActivateEndpoint+0x2cc>
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	2b3e      	cmp	r3, #62	; 0x3e
 80091e2:	d812      	bhi.n	800920a <USB_ActivateEndpoint+0x2a2>
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	691b      	ldr	r3, [r3, #16]
 80091e8:	085b      	lsrs	r3, r3, #1
 80091ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	2201      	movs	r2, #1
 80091f2:	4013      	ands	r3, r2
 80091f4:	d002      	beq.n	80091fc <USB_ActivateEndpoint+0x294>
 80091f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091f8:	3301      	adds	r3, #1
 80091fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80091fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091fe:	b29b      	uxth	r3, r3
 8009200:	029b      	lsls	r3, r3, #10
 8009202:	b29a      	uxth	r2, r3
 8009204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009206:	801a      	strh	r2, [r3, #0]
 8009208:	e014      	b.n	8009234 <USB_ActivateEndpoint+0x2cc>
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	095b      	lsrs	r3, r3, #5
 8009210:	66bb      	str	r3, [r7, #104]	; 0x68
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	691b      	ldr	r3, [r3, #16]
 8009216:	221f      	movs	r2, #31
 8009218:	4013      	ands	r3, r2
 800921a:	d102      	bne.n	8009222 <USB_ActivateEndpoint+0x2ba>
 800921c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800921e:	3b01      	subs	r3, #1
 8009220:	66bb      	str	r3, [r7, #104]	; 0x68
 8009222:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009224:	b29b      	uxth	r3, r3
 8009226:	029b      	lsls	r3, r3, #10
 8009228:	b29b      	uxth	r3, r3
 800922a:	4a30      	ldr	r2, [pc, #192]	; (80092ec <USB_ActivateEndpoint+0x384>)
 800922c:	4313      	orrs	r3, r2
 800922e:	b29a      	uxth	r2, r3
 8009230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009232:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	18d2      	adds	r2, r2, r3
 800923e:	2122      	movs	r1, #34	; 0x22
 8009240:	187b      	adds	r3, r7, r1
 8009242:	8812      	ldrh	r2, [r2, #0]
 8009244:	801a      	strh	r2, [r3, #0]
 8009246:	187b      	adds	r3, r7, r1
 8009248:	881a      	ldrh	r2, [r3, #0]
 800924a:	2380      	movs	r3, #128	; 0x80
 800924c:	01db      	lsls	r3, r3, #7
 800924e:	4013      	ands	r3, r2
 8009250:	d016      	beq.n	8009280 <USB_ActivateEndpoint+0x318>
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	18d3      	adds	r3, r2, r3
 800925c:	881b      	ldrh	r3, [r3, #0]
 800925e:	b29a      	uxth	r2, r3
 8009260:	2020      	movs	r0, #32
 8009262:	183b      	adds	r3, r7, r0
 8009264:	491b      	ldr	r1, [pc, #108]	; (80092d4 <USB_ActivateEndpoint+0x36c>)
 8009266:	400a      	ands	r2, r1
 8009268:	801a      	strh	r2, [r3, #0]
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	18d3      	adds	r3, r2, r3
 8009274:	183a      	adds	r2, r7, r0
 8009276:	8812      	ldrh	r2, [r2, #0]
 8009278:	491d      	ldr	r1, [pc, #116]	; (80092f0 <USB_ActivateEndpoint+0x388>)
 800927a:	430a      	orrs	r2, r1
 800927c:	b292      	uxth	r2, r2
 800927e:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	18d3      	adds	r3, r2, r3
 800928a:	881b      	ldrh	r3, [r3, #0]
 800928c:	b29a      	uxth	r2, r3
 800928e:	201e      	movs	r0, #30
 8009290:	183b      	adds	r3, r7, r0
 8009292:	4918      	ldr	r1, [pc, #96]	; (80092f4 <USB_ActivateEndpoint+0x38c>)
 8009294:	400a      	ands	r2, r1
 8009296:	801a      	strh	r2, [r3, #0]
 8009298:	183b      	adds	r3, r7, r0
 800929a:	183a      	adds	r2, r7, r0
 800929c:	8812      	ldrh	r2, [r2, #0]
 800929e:	2180      	movs	r1, #128	; 0x80
 80092a0:	0149      	lsls	r1, r1, #5
 80092a2:	404a      	eors	r2, r1
 80092a4:	801a      	strh	r2, [r3, #0]
 80092a6:	183b      	adds	r3, r7, r0
 80092a8:	183a      	adds	r2, r7, r0
 80092aa:	8812      	ldrh	r2, [r2, #0]
 80092ac:	2180      	movs	r1, #128	; 0x80
 80092ae:	0189      	lsls	r1, r1, #6
 80092b0:	404a      	eors	r2, r1
 80092b2:	801a      	strh	r2, [r3, #0]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	18d3      	adds	r3, r2, r3
 80092be:	183a      	adds	r2, r7, r0
 80092c0:	8812      	ldrh	r2, [r2, #0]
 80092c2:	4903      	ldr	r1, [pc, #12]	; (80092d0 <USB_ActivateEndpoint+0x368>)
 80092c4:	430a      	orrs	r2, r1
 80092c6:	b292      	uxth	r2, r2
 80092c8:	801a      	strh	r2, [r3, #0]
 80092ca:	e1a7      	b.n	800961c <USB_ActivateEndpoint+0x6b4>
 80092cc:	ffff898f 	.word	0xffff898f
 80092d0:	ffff8080 	.word	0xffff8080
 80092d4:	ffff8f8f 	.word	0xffff8f8f
 80092d8:	ffff80c0 	.word	0xffff80c0
 80092dc:	ffff8fbf 	.word	0xffff8fbf
 80092e0:	00000404 	.word	0x00000404
 80092e4:	00000406 	.word	0x00000406
 80092e8:	ffff83ff 	.word	0xffff83ff
 80092ec:	ffff8000 	.word	0xffff8000
 80092f0:	ffffc080 	.word	0xffffc080
 80092f4:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	78db      	ldrb	r3, [r3, #3]
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d117      	bne.n	8009330 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	18d3      	adds	r3, r2, r3
 800930a:	881b      	ldrh	r3, [r3, #0]
 800930c:	b29a      	uxth	r2, r3
 800930e:	2062      	movs	r0, #98	; 0x62
 8009310:	183b      	adds	r3, r7, r0
 8009312:	49c6      	ldr	r1, [pc, #792]	; (800962c <USB_ActivateEndpoint+0x6c4>)
 8009314:	400a      	ands	r2, r1
 8009316:	801a      	strh	r2, [r3, #0]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	18d3      	adds	r3, r2, r3
 8009322:	183a      	adds	r2, r7, r0
 8009324:	8812      	ldrh	r2, [r2, #0]
 8009326:	49c2      	ldr	r1, [pc, #776]	; (8009630 <USB_ActivateEndpoint+0x6c8>)
 8009328:	430a      	orrs	r2, r1
 800932a:	b292      	uxth	r2, r2
 800932c:	801a      	strh	r2, [r3, #0]
 800932e:	e016      	b.n	800935e <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	18d3      	adds	r3, r2, r3
 800933a:	881b      	ldrh	r3, [r3, #0]
 800933c:	b29a      	uxth	r2, r3
 800933e:	2064      	movs	r0, #100	; 0x64
 8009340:	183b      	adds	r3, r7, r0
 8009342:	49bc      	ldr	r1, [pc, #752]	; (8009634 <USB_ActivateEndpoint+0x6cc>)
 8009344:	400a      	ands	r2, r1
 8009346:	801a      	strh	r2, [r3, #0]
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	18d3      	adds	r3, r2, r3
 8009352:	183a      	adds	r2, r7, r0
 8009354:	8812      	ldrh	r2, [r2, #0]
 8009356:	49b8      	ldr	r1, [pc, #736]	; (8009638 <USB_ActivateEndpoint+0x6d0>)
 8009358:	430a      	orrs	r2, r1
 800935a:	b292      	uxth	r2, r2
 800935c:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2250      	movs	r2, #80	; 0x50
 8009366:	5a9b      	ldrh	r3, [r3, r2]
 8009368:	b29b      	uxth	r3, r3
 800936a:	001a      	movs	r2, r3
 800936c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800936e:	189b      	adds	r3, r3, r2
 8009370:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	00da      	lsls	r2, r3, #3
 8009378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800937a:	18d3      	adds	r3, r2, r3
 800937c:	2280      	movs	r2, #128	; 0x80
 800937e:	00d2      	lsls	r2, r2, #3
 8009380:	4694      	mov	ip, r2
 8009382:	4463      	add	r3, ip
 8009384:	65bb      	str	r3, [r7, #88]	; 0x58
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	891b      	ldrh	r3, [r3, #8]
 800938a:	085b      	lsrs	r3, r3, #1
 800938c:	b29b      	uxth	r3, r3
 800938e:	18db      	adds	r3, r3, r3
 8009390:	b29a      	uxth	r2, r3
 8009392:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009394:	801a      	strh	r2, [r3, #0]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	657b      	str	r3, [r7, #84]	; 0x54
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2250      	movs	r2, #80	; 0x50
 800939e:	5a9b      	ldrh	r3, [r3, r2]
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	001a      	movs	r2, r3
 80093a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093a6:	189b      	adds	r3, r3, r2
 80093a8:	657b      	str	r3, [r7, #84]	; 0x54
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	00da      	lsls	r2, r3, #3
 80093b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093b2:	18d3      	adds	r3, r2, r3
 80093b4:	4aa1      	ldr	r2, [pc, #644]	; (800963c <USB_ActivateEndpoint+0x6d4>)
 80093b6:	4694      	mov	ip, r2
 80093b8:	4463      	add	r3, ip
 80093ba:	653b      	str	r3, [r7, #80]	; 0x50
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	895b      	ldrh	r3, [r3, #10]
 80093c0:	085b      	lsrs	r3, r3, #1
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	18db      	adds	r3, r3, r3
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093ca:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	785b      	ldrb	r3, [r3, #1]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d000      	beq.n	80093d6 <USB_ActivateEndpoint+0x46e>
 80093d4:	e087      	b.n	80094e6 <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	18d2      	adds	r2, r2, r3
 80093e0:	2140      	movs	r1, #64	; 0x40
 80093e2:	187b      	adds	r3, r7, r1
 80093e4:	8812      	ldrh	r2, [r2, #0]
 80093e6:	801a      	strh	r2, [r3, #0]
 80093e8:	187b      	adds	r3, r7, r1
 80093ea:	881a      	ldrh	r2, [r3, #0]
 80093ec:	2380      	movs	r3, #128	; 0x80
 80093ee:	01db      	lsls	r3, r3, #7
 80093f0:	4013      	ands	r3, r2
 80093f2:	d016      	beq.n	8009422 <USB_ActivateEndpoint+0x4ba>
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	18d3      	adds	r3, r2, r3
 80093fe:	881b      	ldrh	r3, [r3, #0]
 8009400:	b29a      	uxth	r2, r3
 8009402:	203e      	movs	r0, #62	; 0x3e
 8009404:	183b      	adds	r3, r7, r0
 8009406:	4989      	ldr	r1, [pc, #548]	; (800962c <USB_ActivateEndpoint+0x6c4>)
 8009408:	400a      	ands	r2, r1
 800940a:	801a      	strh	r2, [r3, #0]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	18d3      	adds	r3, r2, r3
 8009416:	183a      	adds	r2, r7, r0
 8009418:	8812      	ldrh	r2, [r2, #0]
 800941a:	4989      	ldr	r1, [pc, #548]	; (8009640 <USB_ActivateEndpoint+0x6d8>)
 800941c:	430a      	orrs	r2, r1
 800941e:	b292      	uxth	r2, r2
 8009420:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	18d2      	adds	r2, r2, r3
 800942c:	213c      	movs	r1, #60	; 0x3c
 800942e:	187b      	adds	r3, r7, r1
 8009430:	8812      	ldrh	r2, [r2, #0]
 8009432:	801a      	strh	r2, [r3, #0]
 8009434:	187b      	adds	r3, r7, r1
 8009436:	881b      	ldrh	r3, [r3, #0]
 8009438:	2240      	movs	r2, #64	; 0x40
 800943a:	4013      	ands	r3, r2
 800943c:	d016      	beq.n	800946c <USB_ActivateEndpoint+0x504>
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	18d3      	adds	r3, r2, r3
 8009448:	881b      	ldrh	r3, [r3, #0]
 800944a:	b29a      	uxth	r2, r3
 800944c:	203a      	movs	r0, #58	; 0x3a
 800944e:	183b      	adds	r3, r7, r0
 8009450:	4976      	ldr	r1, [pc, #472]	; (800962c <USB_ActivateEndpoint+0x6c4>)
 8009452:	400a      	ands	r2, r1
 8009454:	801a      	strh	r2, [r3, #0]
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	18d3      	adds	r3, r2, r3
 8009460:	183a      	adds	r2, r7, r0
 8009462:	8812      	ldrh	r2, [r2, #0]
 8009464:	4977      	ldr	r1, [pc, #476]	; (8009644 <USB_ActivateEndpoint+0x6dc>)
 8009466:	430a      	orrs	r2, r1
 8009468:	b292      	uxth	r2, r2
 800946a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	18d3      	adds	r3, r2, r3
 8009476:	881b      	ldrh	r3, [r3, #0]
 8009478:	b29a      	uxth	r2, r3
 800947a:	2038      	movs	r0, #56	; 0x38
 800947c:	183b      	adds	r3, r7, r0
 800947e:	4972      	ldr	r1, [pc, #456]	; (8009648 <USB_ActivateEndpoint+0x6e0>)
 8009480:	400a      	ands	r2, r1
 8009482:	801a      	strh	r2, [r3, #0]
 8009484:	183b      	adds	r3, r7, r0
 8009486:	183a      	adds	r2, r7, r0
 8009488:	8812      	ldrh	r2, [r2, #0]
 800948a:	2180      	movs	r1, #128	; 0x80
 800948c:	0149      	lsls	r1, r1, #5
 800948e:	404a      	eors	r2, r1
 8009490:	801a      	strh	r2, [r3, #0]
 8009492:	183b      	adds	r3, r7, r0
 8009494:	183a      	adds	r2, r7, r0
 8009496:	8812      	ldrh	r2, [r2, #0]
 8009498:	2180      	movs	r1, #128	; 0x80
 800949a:	0189      	lsls	r1, r1, #6
 800949c:	404a      	eors	r2, r1
 800949e:	801a      	strh	r2, [r3, #0]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	18d3      	adds	r3, r2, r3
 80094aa:	183a      	adds	r2, r7, r0
 80094ac:	8812      	ldrh	r2, [r2, #0]
 80094ae:	4962      	ldr	r1, [pc, #392]	; (8009638 <USB_ActivateEndpoint+0x6d0>)
 80094b0:	430a      	orrs	r2, r1
 80094b2:	b292      	uxth	r2, r2
 80094b4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	18d3      	adds	r3, r2, r3
 80094c0:	881b      	ldrh	r3, [r3, #0]
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	2036      	movs	r0, #54	; 0x36
 80094c6:	183b      	adds	r3, r7, r0
 80094c8:	4960      	ldr	r1, [pc, #384]	; (800964c <USB_ActivateEndpoint+0x6e4>)
 80094ca:	400a      	ands	r2, r1
 80094cc:	801a      	strh	r2, [r3, #0]
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	18d3      	adds	r3, r2, r3
 80094d8:	183a      	adds	r2, r7, r0
 80094da:	8812      	ldrh	r2, [r2, #0]
 80094dc:	4956      	ldr	r1, [pc, #344]	; (8009638 <USB_ActivateEndpoint+0x6d0>)
 80094de:	430a      	orrs	r2, r1
 80094e0:	b292      	uxth	r2, r2
 80094e2:	801a      	strh	r2, [r3, #0]
 80094e4:	e09a      	b.n	800961c <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	18d2      	adds	r2, r2, r3
 80094f0:	214e      	movs	r1, #78	; 0x4e
 80094f2:	187b      	adds	r3, r7, r1
 80094f4:	8812      	ldrh	r2, [r2, #0]
 80094f6:	801a      	strh	r2, [r3, #0]
 80094f8:	187b      	adds	r3, r7, r1
 80094fa:	881a      	ldrh	r2, [r3, #0]
 80094fc:	2380      	movs	r3, #128	; 0x80
 80094fe:	01db      	lsls	r3, r3, #7
 8009500:	4013      	ands	r3, r2
 8009502:	d016      	beq.n	8009532 <USB_ActivateEndpoint+0x5ca>
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	18d3      	adds	r3, r2, r3
 800950e:	881b      	ldrh	r3, [r3, #0]
 8009510:	b29a      	uxth	r2, r3
 8009512:	204c      	movs	r0, #76	; 0x4c
 8009514:	183b      	adds	r3, r7, r0
 8009516:	4945      	ldr	r1, [pc, #276]	; (800962c <USB_ActivateEndpoint+0x6c4>)
 8009518:	400a      	ands	r2, r1
 800951a:	801a      	strh	r2, [r3, #0]
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	18d3      	adds	r3, r2, r3
 8009526:	183a      	adds	r2, r7, r0
 8009528:	8812      	ldrh	r2, [r2, #0]
 800952a:	4945      	ldr	r1, [pc, #276]	; (8009640 <USB_ActivateEndpoint+0x6d8>)
 800952c:	430a      	orrs	r2, r1
 800952e:	b292      	uxth	r2, r2
 8009530:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	18d2      	adds	r2, r2, r3
 800953c:	214a      	movs	r1, #74	; 0x4a
 800953e:	187b      	adds	r3, r7, r1
 8009540:	8812      	ldrh	r2, [r2, #0]
 8009542:	801a      	strh	r2, [r3, #0]
 8009544:	187b      	adds	r3, r7, r1
 8009546:	881b      	ldrh	r3, [r3, #0]
 8009548:	2240      	movs	r2, #64	; 0x40
 800954a:	4013      	ands	r3, r2
 800954c:	d016      	beq.n	800957c <USB_ActivateEndpoint+0x614>
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	18d3      	adds	r3, r2, r3
 8009558:	881b      	ldrh	r3, [r3, #0]
 800955a:	b29a      	uxth	r2, r3
 800955c:	2048      	movs	r0, #72	; 0x48
 800955e:	183b      	adds	r3, r7, r0
 8009560:	4932      	ldr	r1, [pc, #200]	; (800962c <USB_ActivateEndpoint+0x6c4>)
 8009562:	400a      	ands	r2, r1
 8009564:	801a      	strh	r2, [r3, #0]
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	18d3      	adds	r3, r2, r3
 8009570:	183a      	adds	r2, r7, r0
 8009572:	8812      	ldrh	r2, [r2, #0]
 8009574:	4933      	ldr	r1, [pc, #204]	; (8009644 <USB_ActivateEndpoint+0x6dc>)
 8009576:	430a      	orrs	r2, r1
 8009578:	b292      	uxth	r2, r2
 800957a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	78db      	ldrb	r3, [r3, #3]
 8009580:	2b01      	cmp	r3, #1
 8009582:	d01d      	beq.n	80095c0 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	18d3      	adds	r3, r2, r3
 800958e:	881b      	ldrh	r3, [r3, #0]
 8009590:	b29a      	uxth	r2, r3
 8009592:	2044      	movs	r0, #68	; 0x44
 8009594:	183b      	adds	r3, r7, r0
 8009596:	492d      	ldr	r1, [pc, #180]	; (800964c <USB_ActivateEndpoint+0x6e4>)
 8009598:	400a      	ands	r2, r1
 800959a:	801a      	strh	r2, [r3, #0]
 800959c:	183b      	adds	r3, r7, r0
 800959e:	183a      	adds	r2, r7, r0
 80095a0:	8812      	ldrh	r2, [r2, #0]
 80095a2:	2120      	movs	r1, #32
 80095a4:	404a      	eors	r2, r1
 80095a6:	801a      	strh	r2, [r3, #0]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	18d3      	adds	r3, r2, r3
 80095b2:	183a      	adds	r2, r7, r0
 80095b4:	8812      	ldrh	r2, [r2, #0]
 80095b6:	4920      	ldr	r1, [pc, #128]	; (8009638 <USB_ActivateEndpoint+0x6d0>)
 80095b8:	430a      	orrs	r2, r1
 80095ba:	b292      	uxth	r2, r2
 80095bc:	801a      	strh	r2, [r3, #0]
 80095be:	e016      	b.n	80095ee <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	18d3      	adds	r3, r2, r3
 80095ca:	881b      	ldrh	r3, [r3, #0]
 80095cc:	b29a      	uxth	r2, r3
 80095ce:	2046      	movs	r0, #70	; 0x46
 80095d0:	183b      	adds	r3, r7, r0
 80095d2:	491e      	ldr	r1, [pc, #120]	; (800964c <USB_ActivateEndpoint+0x6e4>)
 80095d4:	400a      	ands	r2, r1
 80095d6:	801a      	strh	r2, [r3, #0]
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	18d3      	adds	r3, r2, r3
 80095e2:	183a      	adds	r2, r7, r0
 80095e4:	8812      	ldrh	r2, [r2, #0]
 80095e6:	4914      	ldr	r1, [pc, #80]	; (8009638 <USB_ActivateEndpoint+0x6d0>)
 80095e8:	430a      	orrs	r2, r1
 80095ea:	b292      	uxth	r2, r2
 80095ec:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	18d3      	adds	r3, r2, r3
 80095f8:	881b      	ldrh	r3, [r3, #0]
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	2042      	movs	r0, #66	; 0x42
 80095fe:	183b      	adds	r3, r7, r0
 8009600:	4911      	ldr	r1, [pc, #68]	; (8009648 <USB_ActivateEndpoint+0x6e0>)
 8009602:	400a      	ands	r2, r1
 8009604:	801a      	strh	r2, [r3, #0]
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	781b      	ldrb	r3, [r3, #0]
 800960c:	009b      	lsls	r3, r3, #2
 800960e:	18d3      	adds	r3, r2, r3
 8009610:	183a      	adds	r2, r7, r0
 8009612:	8812      	ldrh	r2, [r2, #0]
 8009614:	4908      	ldr	r1, [pc, #32]	; (8009638 <USB_ActivateEndpoint+0x6d0>)
 8009616:	430a      	orrs	r2, r1
 8009618:	b292      	uxth	r2, r2
 800961a:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 800961c:	236f      	movs	r3, #111	; 0x6f
 800961e:	18fb      	adds	r3, r7, r3
 8009620:	781b      	ldrb	r3, [r3, #0]
}
 8009622:	0018      	movs	r0, r3
 8009624:	46bd      	mov	sp, r7
 8009626:	b01c      	add	sp, #112	; 0x70
 8009628:	bd80      	pop	{r7, pc}
 800962a:	46c0      	nop			; (mov r8, r8)
 800962c:	ffff8f8f 	.word	0xffff8f8f
 8009630:	ffff8180 	.word	0xffff8180
 8009634:	ffff8e8f 	.word	0xffff8e8f
 8009638:	ffff8080 	.word	0xffff8080
 800963c:	00000404 	.word	0x00000404
 8009640:	ffffc080 	.word	0xffffc080
 8009644:	ffff80c0 	.word	0xffff80c0
 8009648:	ffffbf8f 	.word	0xffffbf8f
 800964c:	ffff8fbf 	.word	0xffff8fbf

08009650 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b08c      	sub	sp, #48	; 0x30
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	7b1b      	ldrb	r3, [r3, #12]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d000      	beq.n	8009664 <USB_DeactivateEndpoint+0x14>
 8009662:	e07e      	b.n	8009762 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	785b      	ldrb	r3, [r3, #1]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d03c      	beq.n	80096e6 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	18d2      	adds	r2, r2, r3
 8009676:	210c      	movs	r1, #12
 8009678:	187b      	adds	r3, r7, r1
 800967a:	8812      	ldrh	r2, [r2, #0]
 800967c:	801a      	strh	r2, [r3, #0]
 800967e:	187b      	adds	r3, r7, r1
 8009680:	881b      	ldrh	r3, [r3, #0]
 8009682:	2240      	movs	r2, #64	; 0x40
 8009684:	4013      	ands	r3, r2
 8009686:	d016      	beq.n	80096b6 <USB_DeactivateEndpoint+0x66>
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	18d3      	adds	r3, r2, r3
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	b29a      	uxth	r2, r3
 8009696:	200a      	movs	r0, #10
 8009698:	183b      	adds	r3, r7, r0
 800969a:	49c7      	ldr	r1, [pc, #796]	; (80099b8 <USB_DeactivateEndpoint+0x368>)
 800969c:	400a      	ands	r2, r1
 800969e:	801a      	strh	r2, [r3, #0]
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	18d3      	adds	r3, r2, r3
 80096aa:	183a      	adds	r2, r7, r0
 80096ac:	8812      	ldrh	r2, [r2, #0]
 80096ae:	49c3      	ldr	r1, [pc, #780]	; (80099bc <USB_DeactivateEndpoint+0x36c>)
 80096b0:	430a      	orrs	r2, r1
 80096b2:	b292      	uxth	r2, r2
 80096b4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	18d3      	adds	r3, r2, r3
 80096c0:	881b      	ldrh	r3, [r3, #0]
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	2008      	movs	r0, #8
 80096c6:	183b      	adds	r3, r7, r0
 80096c8:	49bd      	ldr	r1, [pc, #756]	; (80099c0 <USB_DeactivateEndpoint+0x370>)
 80096ca:	400a      	ands	r2, r1
 80096cc:	801a      	strh	r2, [r3, #0]
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	18d3      	adds	r3, r2, r3
 80096d8:	183a      	adds	r2, r7, r0
 80096da:	8812      	ldrh	r2, [r2, #0]
 80096dc:	49b9      	ldr	r1, [pc, #740]	; (80099c4 <USB_DeactivateEndpoint+0x374>)
 80096de:	430a      	orrs	r2, r1
 80096e0:	b292      	uxth	r2, r2
 80096e2:	801a      	strh	r2, [r3, #0]
 80096e4:	e163      	b.n	80099ae <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	18d2      	adds	r2, r2, r3
 80096f0:	2112      	movs	r1, #18
 80096f2:	187b      	adds	r3, r7, r1
 80096f4:	8812      	ldrh	r2, [r2, #0]
 80096f6:	801a      	strh	r2, [r3, #0]
 80096f8:	187b      	adds	r3, r7, r1
 80096fa:	881a      	ldrh	r2, [r3, #0]
 80096fc:	2380      	movs	r3, #128	; 0x80
 80096fe:	01db      	lsls	r3, r3, #7
 8009700:	4013      	ands	r3, r2
 8009702:	d016      	beq.n	8009732 <USB_DeactivateEndpoint+0xe2>
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	18d3      	adds	r3, r2, r3
 800970e:	881b      	ldrh	r3, [r3, #0]
 8009710:	b29a      	uxth	r2, r3
 8009712:	2010      	movs	r0, #16
 8009714:	183b      	adds	r3, r7, r0
 8009716:	49a8      	ldr	r1, [pc, #672]	; (80099b8 <USB_DeactivateEndpoint+0x368>)
 8009718:	400a      	ands	r2, r1
 800971a:	801a      	strh	r2, [r3, #0]
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	18d3      	adds	r3, r2, r3
 8009726:	183a      	adds	r2, r7, r0
 8009728:	8812      	ldrh	r2, [r2, #0]
 800972a:	49a7      	ldr	r1, [pc, #668]	; (80099c8 <USB_DeactivateEndpoint+0x378>)
 800972c:	430a      	orrs	r2, r1
 800972e:	b292      	uxth	r2, r2
 8009730:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	18d3      	adds	r3, r2, r3
 800973c:	881b      	ldrh	r3, [r3, #0]
 800973e:	b29a      	uxth	r2, r3
 8009740:	200e      	movs	r0, #14
 8009742:	183b      	adds	r3, r7, r0
 8009744:	49a1      	ldr	r1, [pc, #644]	; (80099cc <USB_DeactivateEndpoint+0x37c>)
 8009746:	400a      	ands	r2, r1
 8009748:	801a      	strh	r2, [r3, #0]
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	18d3      	adds	r3, r2, r3
 8009754:	183a      	adds	r2, r7, r0
 8009756:	8812      	ldrh	r2, [r2, #0]
 8009758:	499a      	ldr	r1, [pc, #616]	; (80099c4 <USB_DeactivateEndpoint+0x374>)
 800975a:	430a      	orrs	r2, r1
 800975c:	b292      	uxth	r2, r2
 800975e:	801a      	strh	r2, [r3, #0]
 8009760:	e125      	b.n	80099ae <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	785b      	ldrb	r3, [r3, #1]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d000      	beq.n	800976c <USB_DeactivateEndpoint+0x11c>
 800976a:	e090      	b.n	800988e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	18d2      	adds	r2, r2, r3
 8009776:	2120      	movs	r1, #32
 8009778:	187b      	adds	r3, r7, r1
 800977a:	8812      	ldrh	r2, [r2, #0]
 800977c:	801a      	strh	r2, [r3, #0]
 800977e:	187b      	adds	r3, r7, r1
 8009780:	881a      	ldrh	r2, [r3, #0]
 8009782:	2380      	movs	r3, #128	; 0x80
 8009784:	01db      	lsls	r3, r3, #7
 8009786:	4013      	ands	r3, r2
 8009788:	d016      	beq.n	80097b8 <USB_DeactivateEndpoint+0x168>
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	18d3      	adds	r3, r2, r3
 8009794:	881b      	ldrh	r3, [r3, #0]
 8009796:	b29a      	uxth	r2, r3
 8009798:	201e      	movs	r0, #30
 800979a:	183b      	adds	r3, r7, r0
 800979c:	4986      	ldr	r1, [pc, #536]	; (80099b8 <USB_DeactivateEndpoint+0x368>)
 800979e:	400a      	ands	r2, r1
 80097a0:	801a      	strh	r2, [r3, #0]
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	18d3      	adds	r3, r2, r3
 80097ac:	183a      	adds	r2, r7, r0
 80097ae:	8812      	ldrh	r2, [r2, #0]
 80097b0:	4985      	ldr	r1, [pc, #532]	; (80099c8 <USB_DeactivateEndpoint+0x378>)
 80097b2:	430a      	orrs	r2, r1
 80097b4:	b292      	uxth	r2, r2
 80097b6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	18d2      	adds	r2, r2, r3
 80097c2:	211c      	movs	r1, #28
 80097c4:	187b      	adds	r3, r7, r1
 80097c6:	8812      	ldrh	r2, [r2, #0]
 80097c8:	801a      	strh	r2, [r3, #0]
 80097ca:	187b      	adds	r3, r7, r1
 80097cc:	881b      	ldrh	r3, [r3, #0]
 80097ce:	2240      	movs	r2, #64	; 0x40
 80097d0:	4013      	ands	r3, r2
 80097d2:	d016      	beq.n	8009802 <USB_DeactivateEndpoint+0x1b2>
 80097d4:	687a      	ldr	r2, [r7, #4]
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	18d3      	adds	r3, r2, r3
 80097de:	881b      	ldrh	r3, [r3, #0]
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	201a      	movs	r0, #26
 80097e4:	183b      	adds	r3, r7, r0
 80097e6:	4974      	ldr	r1, [pc, #464]	; (80099b8 <USB_DeactivateEndpoint+0x368>)
 80097e8:	400a      	ands	r2, r1
 80097ea:	801a      	strh	r2, [r3, #0]
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	18d3      	adds	r3, r2, r3
 80097f6:	183a      	adds	r2, r7, r0
 80097f8:	8812      	ldrh	r2, [r2, #0]
 80097fa:	4970      	ldr	r1, [pc, #448]	; (80099bc <USB_DeactivateEndpoint+0x36c>)
 80097fc:	430a      	orrs	r2, r1
 80097fe:	b292      	uxth	r2, r2
 8009800:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	18d3      	adds	r3, r2, r3
 800980c:	881b      	ldrh	r3, [r3, #0]
 800980e:	b29a      	uxth	r2, r3
 8009810:	2018      	movs	r0, #24
 8009812:	183b      	adds	r3, r7, r0
 8009814:	4968      	ldr	r1, [pc, #416]	; (80099b8 <USB_DeactivateEndpoint+0x368>)
 8009816:	400a      	ands	r2, r1
 8009818:	801a      	strh	r2, [r3, #0]
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	18d3      	adds	r3, r2, r3
 8009824:	183a      	adds	r2, r7, r0
 8009826:	8812      	ldrh	r2, [r2, #0]
 8009828:	4964      	ldr	r1, [pc, #400]	; (80099bc <USB_DeactivateEndpoint+0x36c>)
 800982a:	430a      	orrs	r2, r1
 800982c:	b292      	uxth	r2, r2
 800982e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	18d3      	adds	r3, r2, r3
 800983a:	881b      	ldrh	r3, [r3, #0]
 800983c:	b29a      	uxth	r2, r3
 800983e:	2016      	movs	r0, #22
 8009840:	183b      	adds	r3, r7, r0
 8009842:	4962      	ldr	r1, [pc, #392]	; (80099cc <USB_DeactivateEndpoint+0x37c>)
 8009844:	400a      	ands	r2, r1
 8009846:	801a      	strh	r2, [r3, #0]
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	18d3      	adds	r3, r2, r3
 8009852:	183a      	adds	r2, r7, r0
 8009854:	8812      	ldrh	r2, [r2, #0]
 8009856:	495b      	ldr	r1, [pc, #364]	; (80099c4 <USB_DeactivateEndpoint+0x374>)
 8009858:	430a      	orrs	r2, r1
 800985a:	b292      	uxth	r2, r2
 800985c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	18d3      	adds	r3, r2, r3
 8009868:	881b      	ldrh	r3, [r3, #0]
 800986a:	b29a      	uxth	r2, r3
 800986c:	2014      	movs	r0, #20
 800986e:	183b      	adds	r3, r7, r0
 8009870:	4953      	ldr	r1, [pc, #332]	; (80099c0 <USB_DeactivateEndpoint+0x370>)
 8009872:	400a      	ands	r2, r1
 8009874:	801a      	strh	r2, [r3, #0]
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	18d3      	adds	r3, r2, r3
 8009880:	183a      	adds	r2, r7, r0
 8009882:	8812      	ldrh	r2, [r2, #0]
 8009884:	494f      	ldr	r1, [pc, #316]	; (80099c4 <USB_DeactivateEndpoint+0x374>)
 8009886:	430a      	orrs	r2, r1
 8009888:	b292      	uxth	r2, r2
 800988a:	801a      	strh	r2, [r3, #0]
 800988c:	e08f      	b.n	80099ae <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800988e:	687a      	ldr	r2, [r7, #4]
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	18d2      	adds	r2, r2, r3
 8009898:	212e      	movs	r1, #46	; 0x2e
 800989a:	187b      	adds	r3, r7, r1
 800989c:	8812      	ldrh	r2, [r2, #0]
 800989e:	801a      	strh	r2, [r3, #0]
 80098a0:	187b      	adds	r3, r7, r1
 80098a2:	881a      	ldrh	r2, [r3, #0]
 80098a4:	2380      	movs	r3, #128	; 0x80
 80098a6:	01db      	lsls	r3, r3, #7
 80098a8:	4013      	ands	r3, r2
 80098aa:	d016      	beq.n	80098da <USB_DeactivateEndpoint+0x28a>
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	18d3      	adds	r3, r2, r3
 80098b6:	881b      	ldrh	r3, [r3, #0]
 80098b8:	b29a      	uxth	r2, r3
 80098ba:	202c      	movs	r0, #44	; 0x2c
 80098bc:	183b      	adds	r3, r7, r0
 80098be:	493e      	ldr	r1, [pc, #248]	; (80099b8 <USB_DeactivateEndpoint+0x368>)
 80098c0:	400a      	ands	r2, r1
 80098c2:	801a      	strh	r2, [r3, #0]
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	18d3      	adds	r3, r2, r3
 80098ce:	183a      	adds	r2, r7, r0
 80098d0:	8812      	ldrh	r2, [r2, #0]
 80098d2:	493d      	ldr	r1, [pc, #244]	; (80099c8 <USB_DeactivateEndpoint+0x378>)
 80098d4:	430a      	orrs	r2, r1
 80098d6:	b292      	uxth	r2, r2
 80098d8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	18d2      	adds	r2, r2, r3
 80098e4:	212a      	movs	r1, #42	; 0x2a
 80098e6:	187b      	adds	r3, r7, r1
 80098e8:	8812      	ldrh	r2, [r2, #0]
 80098ea:	801a      	strh	r2, [r3, #0]
 80098ec:	187b      	adds	r3, r7, r1
 80098ee:	881b      	ldrh	r3, [r3, #0]
 80098f0:	2240      	movs	r2, #64	; 0x40
 80098f2:	4013      	ands	r3, r2
 80098f4:	d016      	beq.n	8009924 <USB_DeactivateEndpoint+0x2d4>
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	18d3      	adds	r3, r2, r3
 8009900:	881b      	ldrh	r3, [r3, #0]
 8009902:	b29a      	uxth	r2, r3
 8009904:	2028      	movs	r0, #40	; 0x28
 8009906:	183b      	adds	r3, r7, r0
 8009908:	492b      	ldr	r1, [pc, #172]	; (80099b8 <USB_DeactivateEndpoint+0x368>)
 800990a:	400a      	ands	r2, r1
 800990c:	801a      	strh	r2, [r3, #0]
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	18d3      	adds	r3, r2, r3
 8009918:	183a      	adds	r2, r7, r0
 800991a:	8812      	ldrh	r2, [r2, #0]
 800991c:	4927      	ldr	r1, [pc, #156]	; (80099bc <USB_DeactivateEndpoint+0x36c>)
 800991e:	430a      	orrs	r2, r1
 8009920:	b292      	uxth	r2, r2
 8009922:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	18d3      	adds	r3, r2, r3
 800992e:	881b      	ldrh	r3, [r3, #0]
 8009930:	b29a      	uxth	r2, r3
 8009932:	2026      	movs	r0, #38	; 0x26
 8009934:	183b      	adds	r3, r7, r0
 8009936:	4920      	ldr	r1, [pc, #128]	; (80099b8 <USB_DeactivateEndpoint+0x368>)
 8009938:	400a      	ands	r2, r1
 800993a:	801a      	strh	r2, [r3, #0]
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	18d3      	adds	r3, r2, r3
 8009946:	183a      	adds	r2, r7, r0
 8009948:	8812      	ldrh	r2, [r2, #0]
 800994a:	491f      	ldr	r1, [pc, #124]	; (80099c8 <USB_DeactivateEndpoint+0x378>)
 800994c:	430a      	orrs	r2, r1
 800994e:	b292      	uxth	r2, r2
 8009950:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	18d3      	adds	r3, r2, r3
 800995c:	881b      	ldrh	r3, [r3, #0]
 800995e:	b29a      	uxth	r2, r3
 8009960:	2024      	movs	r0, #36	; 0x24
 8009962:	183b      	adds	r3, r7, r0
 8009964:	4916      	ldr	r1, [pc, #88]	; (80099c0 <USB_DeactivateEndpoint+0x370>)
 8009966:	400a      	ands	r2, r1
 8009968:	801a      	strh	r2, [r3, #0]
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	18d3      	adds	r3, r2, r3
 8009974:	183a      	adds	r2, r7, r0
 8009976:	8812      	ldrh	r2, [r2, #0]
 8009978:	4912      	ldr	r1, [pc, #72]	; (80099c4 <USB_DeactivateEndpoint+0x374>)
 800997a:	430a      	orrs	r2, r1
 800997c:	b292      	uxth	r2, r2
 800997e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	18d3      	adds	r3, r2, r3
 800998a:	881b      	ldrh	r3, [r3, #0]
 800998c:	b29a      	uxth	r2, r3
 800998e:	2022      	movs	r0, #34	; 0x22
 8009990:	183b      	adds	r3, r7, r0
 8009992:	490e      	ldr	r1, [pc, #56]	; (80099cc <USB_DeactivateEndpoint+0x37c>)
 8009994:	400a      	ands	r2, r1
 8009996:	801a      	strh	r2, [r3, #0]
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	18d3      	adds	r3, r2, r3
 80099a2:	183a      	adds	r2, r7, r0
 80099a4:	8812      	ldrh	r2, [r2, #0]
 80099a6:	4907      	ldr	r1, [pc, #28]	; (80099c4 <USB_DeactivateEndpoint+0x374>)
 80099a8:	430a      	orrs	r2, r1
 80099aa:	b292      	uxth	r2, r2
 80099ac:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80099ae:	2300      	movs	r3, #0
}
 80099b0:	0018      	movs	r0, r3
 80099b2:	46bd      	mov	sp, r7
 80099b4:	b00c      	add	sp, #48	; 0x30
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	ffff8f8f 	.word	0xffff8f8f
 80099bc:	ffff80c0 	.word	0xffff80c0
 80099c0:	ffff8fbf 	.word	0xffff8fbf
 80099c4:	ffff8080 	.word	0xffff8080
 80099c8:	ffffc080 	.word	0xffffc080
 80099cc:	ffffbf8f 	.word	0xffffbf8f

080099d0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80099d0:	b590      	push	{r4, r7, lr}
 80099d2:	b0c3      	sub	sp, #268	; 0x10c
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	785b      	ldrb	r3, [r3, #1]
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d001      	beq.n	80099e6 <USB_EPStartXfer+0x16>
 80099e2:	f000 fcef 	bl	800a3c4 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	699a      	ldr	r2, [r3, #24]
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d905      	bls.n	80099fe <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	691b      	ldr	r3, [r3, #16]
 80099f6:	1d7a      	adds	r2, r7, #5
 80099f8:	32ff      	adds	r2, #255	; 0xff
 80099fa:	6013      	str	r3, [r2, #0]
 80099fc:	e004      	b.n	8009a08 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	699b      	ldr	r3, [r3, #24]
 8009a02:	1d7a      	adds	r2, r7, #5
 8009a04:	32ff      	adds	r2, #255	; 0xff
 8009a06:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	7b1b      	ldrb	r3, [r3, #12]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d125      	bne.n	8009a5c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	6959      	ldr	r1, [r3, #20]
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	88da      	ldrh	r2, [r3, #6]
 8009a18:	1d7b      	adds	r3, r7, #5
 8009a1a:	33ff      	adds	r3, #255	; 0xff
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f001 f9c9 	bl	800adb8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	613b      	str	r3, [r7, #16]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2250      	movs	r2, #80	; 0x50
 8009a2e:	5a9b      	ldrh	r3, [r3, r2]
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	001a      	movs	r2, r3
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	189b      	adds	r3, r3, r2
 8009a38:	613b      	str	r3, [r7, #16]
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	781b      	ldrb	r3, [r3, #0]
 8009a3e:	00da      	lsls	r2, r3, #3
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	18d3      	adds	r3, r2, r3
 8009a44:	4acc      	ldr	r2, [pc, #816]	; (8009d78 <USB_EPStartXfer+0x3a8>)
 8009a46:	4694      	mov	ip, r2
 8009a48:	4463      	add	r3, ip
 8009a4a:	60fb      	str	r3, [r7, #12]
 8009a4c:	1d7b      	adds	r3, r7, #5
 8009a4e:	33ff      	adds	r3, #255	; 0xff
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	b29a      	uxth	r2, r3
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	801a      	strh	r2, [r3, #0]
 8009a58:	f000 fc8f 	bl	800a37a <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	78db      	ldrb	r3, [r3, #3]
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	d000      	beq.n	8009a66 <USB_EPStartXfer+0x96>
 8009a64:	e33a      	b.n	800a0dc <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	6a1a      	ldr	r2, [r3, #32]
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d800      	bhi.n	8009a74 <USB_EPStartXfer+0xa4>
 8009a72:	e2df      	b.n	800a034 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	18d3      	adds	r3, r2, r3
 8009a7e:	881b      	ldrh	r3, [r3, #0]
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	2056      	movs	r0, #86	; 0x56
 8009a84:	183b      	adds	r3, r7, r0
 8009a86:	49bd      	ldr	r1, [pc, #756]	; (8009d7c <USB_EPStartXfer+0x3ac>)
 8009a88:	400a      	ands	r2, r1
 8009a8a:	801a      	strh	r2, [r3, #0]
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	18d3      	adds	r3, r2, r3
 8009a96:	183a      	adds	r2, r7, r0
 8009a98:	8812      	ldrh	r2, [r2, #0]
 8009a9a:	49b9      	ldr	r1, [pc, #740]	; (8009d80 <USB_EPStartXfer+0x3b0>)
 8009a9c:	430a      	orrs	r2, r1
 8009a9e:	b292      	uxth	r2, r2
 8009aa0:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	6a1a      	ldr	r2, [r3, #32]
 8009aa6:	1d7b      	adds	r3, r7, #5
 8009aa8:	33ff      	adds	r3, #255	; 0xff
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	1ad2      	subs	r2, r2, r3
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	18d3      	adds	r3, r2, r3
 8009abc:	881b      	ldrh	r3, [r3, #0]
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	001a      	movs	r2, r3
 8009ac2:	2340      	movs	r3, #64	; 0x40
 8009ac4:	4013      	ands	r3, r2
 8009ac6:	d100      	bne.n	8009aca <USB_EPStartXfer+0xfa>
 8009ac8:	e162      	b.n	8009d90 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	633b      	str	r3, [r7, #48]	; 0x30
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	785b      	ldrb	r3, [r3, #1]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d16a      	bne.n	8009bac <USB_EPStartXfer+0x1dc>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2250      	movs	r2, #80	; 0x50
 8009ade:	5a9b      	ldrh	r3, [r3, r2]
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	001a      	movs	r2, r3
 8009ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae6:	189b      	adds	r3, r3, r2
 8009ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	00da      	lsls	r2, r3, #3
 8009af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af2:	18d3      	adds	r3, r2, r3
 8009af4:	4aa3      	ldr	r2, [pc, #652]	; (8009d84 <USB_EPStartXfer+0x3b4>)
 8009af6:	4694      	mov	ip, r2
 8009af8:	4463      	add	r3, ip
 8009afa:	627b      	str	r3, [r7, #36]	; 0x24
 8009afc:	1d7b      	adds	r3, r7, #5
 8009afe:	33ff      	adds	r3, #255	; 0xff
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d110      	bne.n	8009b28 <USB_EPStartXfer+0x158>
 8009b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b08:	881b      	ldrh	r3, [r3, #0]
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	4a9e      	ldr	r2, [pc, #632]	; (8009d88 <USB_EPStartXfer+0x3b8>)
 8009b0e:	4013      	ands	r3, r2
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b14:	801a      	strh	r2, [r3, #0]
 8009b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b18:	881b      	ldrh	r3, [r3, #0]
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	4a9b      	ldr	r2, [pc, #620]	; (8009d8c <USB_EPStartXfer+0x3bc>)
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	b29a      	uxth	r2, r3
 8009b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b24:	801a      	strh	r2, [r3, #0]
 8009b26:	e05c      	b.n	8009be2 <USB_EPStartXfer+0x212>
 8009b28:	1d7b      	adds	r3, r7, #5
 8009b2a:	33ff      	adds	r3, #255	; 0xff
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b3e      	cmp	r3, #62	; 0x3e
 8009b30:	d81c      	bhi.n	8009b6c <USB_EPStartXfer+0x19c>
 8009b32:	1d7b      	adds	r3, r7, #5
 8009b34:	33ff      	adds	r3, #255	; 0xff
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	085b      	lsrs	r3, r3, #1
 8009b3a:	1c7a      	adds	r2, r7, #1
 8009b3c:	32ff      	adds	r2, #255	; 0xff
 8009b3e:	6013      	str	r3, [r2, #0]
 8009b40:	1d7b      	adds	r3, r7, #5
 8009b42:	33ff      	adds	r3, #255	; 0xff
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2201      	movs	r2, #1
 8009b48:	4013      	ands	r3, r2
 8009b4a:	d006      	beq.n	8009b5a <USB_EPStartXfer+0x18a>
 8009b4c:	1c7b      	adds	r3, r7, #1
 8009b4e:	33ff      	adds	r3, #255	; 0xff
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	3301      	adds	r3, #1
 8009b54:	1c7a      	adds	r2, r7, #1
 8009b56:	32ff      	adds	r2, #255	; 0xff
 8009b58:	6013      	str	r3, [r2, #0]
 8009b5a:	1c7b      	adds	r3, r7, #1
 8009b5c:	33ff      	adds	r3, #255	; 0xff
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	029b      	lsls	r3, r3, #10
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b68:	801a      	strh	r2, [r3, #0]
 8009b6a:	e03a      	b.n	8009be2 <USB_EPStartXfer+0x212>
 8009b6c:	1d7b      	adds	r3, r7, #5
 8009b6e:	33ff      	adds	r3, #255	; 0xff
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	095b      	lsrs	r3, r3, #5
 8009b74:	1c7a      	adds	r2, r7, #1
 8009b76:	32ff      	adds	r2, #255	; 0xff
 8009b78:	6013      	str	r3, [r2, #0]
 8009b7a:	1d7b      	adds	r3, r7, #5
 8009b7c:	33ff      	adds	r3, #255	; 0xff
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	221f      	movs	r2, #31
 8009b82:	4013      	ands	r3, r2
 8009b84:	d106      	bne.n	8009b94 <USB_EPStartXfer+0x1c4>
 8009b86:	1c7b      	adds	r3, r7, #1
 8009b88:	33ff      	adds	r3, #255	; 0xff
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	1c7a      	adds	r2, r7, #1
 8009b90:	32ff      	adds	r2, #255	; 0xff
 8009b92:	6013      	str	r3, [r2, #0]
 8009b94:	1c7b      	adds	r3, r7, #1
 8009b96:	33ff      	adds	r3, #255	; 0xff
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	029b      	lsls	r3, r3, #10
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	4a7a      	ldr	r2, [pc, #488]	; (8009d8c <USB_EPStartXfer+0x3bc>)
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba8:	801a      	strh	r2, [r3, #0]
 8009baa:	e01a      	b.n	8009be2 <USB_EPStartXfer+0x212>
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	785b      	ldrb	r3, [r3, #1]
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d116      	bne.n	8009be2 <USB_EPStartXfer+0x212>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2250      	movs	r2, #80	; 0x50
 8009bb8:	5a9b      	ldrh	r3, [r3, r2]
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	001a      	movs	r2, r3
 8009bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc0:	189b      	adds	r3, r3, r2
 8009bc2:	633b      	str	r3, [r7, #48]	; 0x30
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	00da      	lsls	r2, r3, #3
 8009bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bcc:	18d3      	adds	r3, r2, r3
 8009bce:	4a6d      	ldr	r2, [pc, #436]	; (8009d84 <USB_EPStartXfer+0x3b4>)
 8009bd0:	4694      	mov	ip, r2
 8009bd2:	4463      	add	r3, ip
 8009bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bd6:	1d7b      	adds	r3, r7, #5
 8009bd8:	33ff      	adds	r3, #255	; 0xff
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	b29a      	uxth	r2, r3
 8009bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009be2:	2076      	movs	r0, #118	; 0x76
 8009be4:	183b      	adds	r3, r7, r0
 8009be6:	683a      	ldr	r2, [r7, #0]
 8009be8:	8952      	ldrh	r2, [r2, #10]
 8009bea:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	6959      	ldr	r1, [r3, #20]
 8009bf0:	1d7b      	adds	r3, r7, #5
 8009bf2:	33ff      	adds	r3, #255	; 0xff
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	b29c      	uxth	r4, r3
 8009bf8:	183b      	adds	r3, r7, r0
 8009bfa:	881a      	ldrh	r2, [r3, #0]
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	0023      	movs	r3, r4
 8009c00:	f001 f8da 	bl	800adb8 <USB_WritePMA>
            ep->xfer_buff += len;
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	695a      	ldr	r2, [r3, #20]
 8009c08:	1d7b      	adds	r3, r7, #5
 8009c0a:	33ff      	adds	r3, #255	; 0xff
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	18d2      	adds	r2, r2, r3
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	6a1a      	ldr	r2, [r3, #32]
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d908      	bls.n	8009c32 <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	6a1a      	ldr	r2, [r3, #32]
 8009c24:	1d7b      	adds	r3, r7, #5
 8009c26:	33ff      	adds	r3, #255	; 0xff
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	1ad2      	subs	r2, r2, r3
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	621a      	str	r2, [r3, #32]
 8009c30:	e007      	b.n	8009c42 <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	6a1b      	ldr	r3, [r3, #32]
 8009c36:	1d7a      	adds	r2, r7, #5
 8009c38:	32ff      	adds	r2, #255	; 0xff
 8009c3a:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	785b      	ldrb	r3, [r3, #1]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d166      	bne.n	8009d18 <USB_EPStartXfer+0x348>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	61bb      	str	r3, [r7, #24]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2250      	movs	r2, #80	; 0x50
 8009c52:	5a9b      	ldrh	r3, [r3, r2]
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	001a      	movs	r2, r3
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	189b      	adds	r3, r3, r2
 8009c5c:	61bb      	str	r3, [r7, #24]
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	00da      	lsls	r2, r3, #3
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	18d3      	adds	r3, r2, r3
 8009c68:	4a43      	ldr	r2, [pc, #268]	; (8009d78 <USB_EPStartXfer+0x3a8>)
 8009c6a:	4694      	mov	ip, r2
 8009c6c:	4463      	add	r3, ip
 8009c6e:	617b      	str	r3, [r7, #20]
 8009c70:	1d7b      	adds	r3, r7, #5
 8009c72:	33ff      	adds	r3, #255	; 0xff
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d110      	bne.n	8009c9c <USB_EPStartXfer+0x2cc>
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	881b      	ldrh	r3, [r3, #0]
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	4a41      	ldr	r2, [pc, #260]	; (8009d88 <USB_EPStartXfer+0x3b8>)
 8009c82:	4013      	ands	r3, r2
 8009c84:	b29a      	uxth	r2, r3
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	801a      	strh	r2, [r3, #0]
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	881b      	ldrh	r3, [r3, #0]
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	4a3e      	ldr	r2, [pc, #248]	; (8009d8c <USB_EPStartXfer+0x3bc>)
 8009c92:	4313      	orrs	r3, r2
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	801a      	strh	r2, [r3, #0]
 8009c9a:	e05a      	b.n	8009d52 <USB_EPStartXfer+0x382>
 8009c9c:	1d7b      	adds	r3, r7, #5
 8009c9e:	33ff      	adds	r3, #255	; 0xff
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2b3e      	cmp	r3, #62	; 0x3e
 8009ca4:	d81a      	bhi.n	8009cdc <USB_EPStartXfer+0x30c>
 8009ca6:	1d7b      	adds	r3, r7, #5
 8009ca8:	33ff      	adds	r3, #255	; 0xff
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	085b      	lsrs	r3, r3, #1
 8009cae:	21fc      	movs	r1, #252	; 0xfc
 8009cb0:	187a      	adds	r2, r7, r1
 8009cb2:	6013      	str	r3, [r2, #0]
 8009cb4:	1d7b      	adds	r3, r7, #5
 8009cb6:	33ff      	adds	r3, #255	; 0xff
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	d004      	beq.n	8009cca <USB_EPStartXfer+0x2fa>
 8009cc0:	187b      	adds	r3, r7, r1
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	187a      	adds	r2, r7, r1
 8009cc8:	6013      	str	r3, [r2, #0]
 8009cca:	23fc      	movs	r3, #252	; 0xfc
 8009ccc:	18fb      	adds	r3, r7, r3
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	029b      	lsls	r3, r3, #10
 8009cd4:	b29a      	uxth	r2, r3
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	801a      	strh	r2, [r3, #0]
 8009cda:	e03a      	b.n	8009d52 <USB_EPStartXfer+0x382>
 8009cdc:	1d7b      	adds	r3, r7, #5
 8009cde:	33ff      	adds	r3, #255	; 0xff
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	095b      	lsrs	r3, r3, #5
 8009ce4:	21fc      	movs	r1, #252	; 0xfc
 8009ce6:	187a      	adds	r2, r7, r1
 8009ce8:	6013      	str	r3, [r2, #0]
 8009cea:	1d7b      	adds	r3, r7, #5
 8009cec:	33ff      	adds	r3, #255	; 0xff
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	221f      	movs	r2, #31
 8009cf2:	4013      	ands	r3, r2
 8009cf4:	d104      	bne.n	8009d00 <USB_EPStartXfer+0x330>
 8009cf6:	187b      	adds	r3, r7, r1
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	187a      	adds	r2, r7, r1
 8009cfe:	6013      	str	r3, [r2, #0]
 8009d00:	23fc      	movs	r3, #252	; 0xfc
 8009d02:	18fb      	adds	r3, r7, r3
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	029b      	lsls	r3, r3, #10
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	4a1f      	ldr	r2, [pc, #124]	; (8009d8c <USB_EPStartXfer+0x3bc>)
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	801a      	strh	r2, [r3, #0]
 8009d16:	e01c      	b.n	8009d52 <USB_EPStartXfer+0x382>
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	785b      	ldrb	r3, [r3, #1]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d118      	bne.n	8009d52 <USB_EPStartXfer+0x382>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	623b      	str	r3, [r7, #32]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2250      	movs	r2, #80	; 0x50
 8009d28:	5a9b      	ldrh	r3, [r3, r2]
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	001a      	movs	r2, r3
 8009d2e:	6a3b      	ldr	r3, [r7, #32]
 8009d30:	189b      	adds	r3, r3, r2
 8009d32:	623b      	str	r3, [r7, #32]
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	00da      	lsls	r2, r3, #3
 8009d3a:	6a3b      	ldr	r3, [r7, #32]
 8009d3c:	18d3      	adds	r3, r2, r3
 8009d3e:	4a0e      	ldr	r2, [pc, #56]	; (8009d78 <USB_EPStartXfer+0x3a8>)
 8009d40:	4694      	mov	ip, r2
 8009d42:	4463      	add	r3, ip
 8009d44:	61fb      	str	r3, [r7, #28]
 8009d46:	1d7b      	adds	r3, r7, #5
 8009d48:	33ff      	adds	r3, #255	; 0xff
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	b29a      	uxth	r2, r3
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009d52:	2076      	movs	r0, #118	; 0x76
 8009d54:	183b      	adds	r3, r7, r0
 8009d56:	683a      	ldr	r2, [r7, #0]
 8009d58:	8912      	ldrh	r2, [r2, #8]
 8009d5a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	6959      	ldr	r1, [r3, #20]
 8009d60:	1d7b      	adds	r3, r7, #5
 8009d62:	33ff      	adds	r3, #255	; 0xff
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	b29c      	uxth	r4, r3
 8009d68:	183b      	adds	r3, r7, r0
 8009d6a:	881a      	ldrh	r2, [r3, #0]
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	0023      	movs	r3, r4
 8009d70:	f001 f822 	bl	800adb8 <USB_WritePMA>
 8009d74:	e301      	b.n	800a37a <USB_EPStartXfer+0x9aa>
 8009d76:	46c0      	nop			; (mov r8, r8)
 8009d78:	00000402 	.word	0x00000402
 8009d7c:	ffff8f8f 	.word	0xffff8f8f
 8009d80:	ffff8180 	.word	0xffff8180
 8009d84:	00000406 	.word	0x00000406
 8009d88:	ffff83ff 	.word	0xffff83ff
 8009d8c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	785b      	ldrb	r3, [r3, #1]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d166      	bne.n	8009e66 <USB_EPStartXfer+0x496>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2250      	movs	r2, #80	; 0x50
 8009da0:	5a9b      	ldrh	r3, [r3, r2]
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	001a      	movs	r2, r3
 8009da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009da8:	189b      	adds	r3, r3, r2
 8009daa:	64bb      	str	r3, [r7, #72]	; 0x48
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	00da      	lsls	r2, r3, #3
 8009db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009db4:	18d3      	adds	r3, r2, r3
 8009db6:	4ac3      	ldr	r2, [pc, #780]	; (800a0c4 <USB_EPStartXfer+0x6f4>)
 8009db8:	4694      	mov	ip, r2
 8009dba:	4463      	add	r3, ip
 8009dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8009dbe:	1d7b      	adds	r3, r7, #5
 8009dc0:	33ff      	adds	r3, #255	; 0xff
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d110      	bne.n	8009dea <USB_EPStartXfer+0x41a>
 8009dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dca:	881b      	ldrh	r3, [r3, #0]
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	4abe      	ldr	r2, [pc, #760]	; (800a0c8 <USB_EPStartXfer+0x6f8>)
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dd6:	801a      	strh	r2, [r3, #0]
 8009dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dda:	881b      	ldrh	r3, [r3, #0]
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	4abb      	ldr	r2, [pc, #748]	; (800a0cc <USB_EPStartXfer+0x6fc>)
 8009de0:	4313      	orrs	r3, r2
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009de6:	801a      	strh	r2, [r3, #0]
 8009de8:	e05a      	b.n	8009ea0 <USB_EPStartXfer+0x4d0>
 8009dea:	1d7b      	adds	r3, r7, #5
 8009dec:	33ff      	adds	r3, #255	; 0xff
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2b3e      	cmp	r3, #62	; 0x3e
 8009df2:	d81a      	bhi.n	8009e2a <USB_EPStartXfer+0x45a>
 8009df4:	1d7b      	adds	r3, r7, #5
 8009df6:	33ff      	adds	r3, #255	; 0xff
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	085b      	lsrs	r3, r3, #1
 8009dfc:	21f8      	movs	r1, #248	; 0xf8
 8009dfe:	187a      	adds	r2, r7, r1
 8009e00:	6013      	str	r3, [r2, #0]
 8009e02:	1d7b      	adds	r3, r7, #5
 8009e04:	33ff      	adds	r3, #255	; 0xff
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	4013      	ands	r3, r2
 8009e0c:	d004      	beq.n	8009e18 <USB_EPStartXfer+0x448>
 8009e0e:	187b      	adds	r3, r7, r1
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	3301      	adds	r3, #1
 8009e14:	187a      	adds	r2, r7, r1
 8009e16:	6013      	str	r3, [r2, #0]
 8009e18:	23f8      	movs	r3, #248	; 0xf8
 8009e1a:	18fb      	adds	r3, r7, r3
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	029b      	lsls	r3, r3, #10
 8009e22:	b29a      	uxth	r2, r3
 8009e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e26:	801a      	strh	r2, [r3, #0]
 8009e28:	e03a      	b.n	8009ea0 <USB_EPStartXfer+0x4d0>
 8009e2a:	1d7b      	adds	r3, r7, #5
 8009e2c:	33ff      	adds	r3, #255	; 0xff
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	095b      	lsrs	r3, r3, #5
 8009e32:	21f8      	movs	r1, #248	; 0xf8
 8009e34:	187a      	adds	r2, r7, r1
 8009e36:	6013      	str	r3, [r2, #0]
 8009e38:	1d7b      	adds	r3, r7, #5
 8009e3a:	33ff      	adds	r3, #255	; 0xff
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	221f      	movs	r2, #31
 8009e40:	4013      	ands	r3, r2
 8009e42:	d104      	bne.n	8009e4e <USB_EPStartXfer+0x47e>
 8009e44:	187b      	adds	r3, r7, r1
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	187a      	adds	r2, r7, r1
 8009e4c:	6013      	str	r3, [r2, #0]
 8009e4e:	23f8      	movs	r3, #248	; 0xf8
 8009e50:	18fb      	adds	r3, r7, r3
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	029b      	lsls	r3, r3, #10
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	4a9c      	ldr	r2, [pc, #624]	; (800a0cc <USB_EPStartXfer+0x6fc>)
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e62:	801a      	strh	r2, [r3, #0]
 8009e64:	e01c      	b.n	8009ea0 <USB_EPStartXfer+0x4d0>
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	785b      	ldrb	r3, [r3, #1]
 8009e6a:	2b01      	cmp	r3, #1
 8009e6c:	d118      	bne.n	8009ea0 <USB_EPStartXfer+0x4d0>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	653b      	str	r3, [r7, #80]	; 0x50
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2250      	movs	r2, #80	; 0x50
 8009e76:	5a9b      	ldrh	r3, [r3, r2]
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	001a      	movs	r2, r3
 8009e7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e7e:	189b      	adds	r3, r3, r2
 8009e80:	653b      	str	r3, [r7, #80]	; 0x50
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	00da      	lsls	r2, r3, #3
 8009e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e8a:	18d3      	adds	r3, r2, r3
 8009e8c:	4a8d      	ldr	r2, [pc, #564]	; (800a0c4 <USB_EPStartXfer+0x6f4>)
 8009e8e:	4694      	mov	ip, r2
 8009e90:	4463      	add	r3, ip
 8009e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e94:	1d7b      	adds	r3, r7, #5
 8009e96:	33ff      	adds	r3, #255	; 0xff
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e9e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009ea0:	2076      	movs	r0, #118	; 0x76
 8009ea2:	183b      	adds	r3, r7, r0
 8009ea4:	683a      	ldr	r2, [r7, #0]
 8009ea6:	8912      	ldrh	r2, [r2, #8]
 8009ea8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	6959      	ldr	r1, [r3, #20]
 8009eae:	1d7b      	adds	r3, r7, #5
 8009eb0:	33ff      	adds	r3, #255	; 0xff
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	b29c      	uxth	r4, r3
 8009eb6:	183b      	adds	r3, r7, r0
 8009eb8:	881a      	ldrh	r2, [r3, #0]
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	0023      	movs	r3, r4
 8009ebe:	f000 ff7b 	bl	800adb8 <USB_WritePMA>
            ep->xfer_buff += len;
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	695a      	ldr	r2, [r3, #20]
 8009ec6:	1d7b      	adds	r3, r7, #5
 8009ec8:	33ff      	adds	r3, #255	; 0xff
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	18d2      	adds	r2, r2, r3
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	6a1a      	ldr	r2, [r3, #32]
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d908      	bls.n	8009ef0 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	6a1a      	ldr	r2, [r3, #32]
 8009ee2:	1d7b      	adds	r3, r7, #5
 8009ee4:	33ff      	adds	r3, #255	; 0xff
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	1ad2      	subs	r2, r2, r3
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	621a      	str	r2, [r3, #32]
 8009eee:	e007      	b.n	8009f00 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	6a1b      	ldr	r3, [r3, #32]
 8009ef4:	1d7a      	adds	r2, r7, #5
 8009ef6:	32ff      	adds	r2, #255	; 0xff
 8009ef8:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	2200      	movs	r2, #0
 8009efe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	643b      	str	r3, [r7, #64]	; 0x40
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	785b      	ldrb	r3, [r3, #1]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d166      	bne.n	8009fda <USB_EPStartXfer+0x60a>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2250      	movs	r2, #80	; 0x50
 8009f14:	5a9b      	ldrh	r3, [r3, r2]
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	001a      	movs	r2, r3
 8009f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f1c:	189b      	adds	r3, r3, r2
 8009f1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	00da      	lsls	r2, r3, #3
 8009f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f28:	18d3      	adds	r3, r2, r3
 8009f2a:	4a69      	ldr	r2, [pc, #420]	; (800a0d0 <USB_EPStartXfer+0x700>)
 8009f2c:	4694      	mov	ip, r2
 8009f2e:	4463      	add	r3, ip
 8009f30:	637b      	str	r3, [r7, #52]	; 0x34
 8009f32:	1d7b      	adds	r3, r7, #5
 8009f34:	33ff      	adds	r3, #255	; 0xff
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d110      	bne.n	8009f5e <USB_EPStartXfer+0x58e>
 8009f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f3e:	881b      	ldrh	r3, [r3, #0]
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	4a61      	ldr	r2, [pc, #388]	; (800a0c8 <USB_EPStartXfer+0x6f8>)
 8009f44:	4013      	ands	r3, r2
 8009f46:	b29a      	uxth	r2, r3
 8009f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f4a:	801a      	strh	r2, [r3, #0]
 8009f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f4e:	881b      	ldrh	r3, [r3, #0]
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	4a5e      	ldr	r2, [pc, #376]	; (800a0cc <USB_EPStartXfer+0x6fc>)
 8009f54:	4313      	orrs	r3, r2
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f5a:	801a      	strh	r2, [r3, #0]
 8009f5c:	e058      	b.n	800a010 <USB_EPStartXfer+0x640>
 8009f5e:	1d7b      	adds	r3, r7, #5
 8009f60:	33ff      	adds	r3, #255	; 0xff
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b3e      	cmp	r3, #62	; 0x3e
 8009f66:	d81a      	bhi.n	8009f9e <USB_EPStartXfer+0x5ce>
 8009f68:	1d7b      	adds	r3, r7, #5
 8009f6a:	33ff      	adds	r3, #255	; 0xff
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	085b      	lsrs	r3, r3, #1
 8009f70:	21f4      	movs	r1, #244	; 0xf4
 8009f72:	187a      	adds	r2, r7, r1
 8009f74:	6013      	str	r3, [r2, #0]
 8009f76:	1d7b      	adds	r3, r7, #5
 8009f78:	33ff      	adds	r3, #255	; 0xff
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	4013      	ands	r3, r2
 8009f80:	d004      	beq.n	8009f8c <USB_EPStartXfer+0x5bc>
 8009f82:	187b      	adds	r3, r7, r1
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	3301      	adds	r3, #1
 8009f88:	187a      	adds	r2, r7, r1
 8009f8a:	6013      	str	r3, [r2, #0]
 8009f8c:	23f4      	movs	r3, #244	; 0xf4
 8009f8e:	18fb      	adds	r3, r7, r3
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	029b      	lsls	r3, r3, #10
 8009f96:	b29a      	uxth	r2, r3
 8009f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f9a:	801a      	strh	r2, [r3, #0]
 8009f9c:	e038      	b.n	800a010 <USB_EPStartXfer+0x640>
 8009f9e:	1d7b      	adds	r3, r7, #5
 8009fa0:	33ff      	adds	r3, #255	; 0xff
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	095b      	lsrs	r3, r3, #5
 8009fa6:	21f4      	movs	r1, #244	; 0xf4
 8009fa8:	187a      	adds	r2, r7, r1
 8009faa:	6013      	str	r3, [r2, #0]
 8009fac:	1d7b      	adds	r3, r7, #5
 8009fae:	33ff      	adds	r3, #255	; 0xff
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	221f      	movs	r2, #31
 8009fb4:	4013      	ands	r3, r2
 8009fb6:	d104      	bne.n	8009fc2 <USB_EPStartXfer+0x5f2>
 8009fb8:	187b      	adds	r3, r7, r1
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	3b01      	subs	r3, #1
 8009fbe:	187a      	adds	r2, r7, r1
 8009fc0:	6013      	str	r3, [r2, #0]
 8009fc2:	23f4      	movs	r3, #244	; 0xf4
 8009fc4:	18fb      	adds	r3, r7, r3
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	029b      	lsls	r3, r3, #10
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	4a3f      	ldr	r2, [pc, #252]	; (800a0cc <USB_EPStartXfer+0x6fc>)
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fd6:	801a      	strh	r2, [r3, #0]
 8009fd8:	e01a      	b.n	800a010 <USB_EPStartXfer+0x640>
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	785b      	ldrb	r3, [r3, #1]
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d116      	bne.n	800a010 <USB_EPStartXfer+0x640>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2250      	movs	r2, #80	; 0x50
 8009fe6:	5a9b      	ldrh	r3, [r3, r2]
 8009fe8:	b29b      	uxth	r3, r3
 8009fea:	001a      	movs	r2, r3
 8009fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009fee:	189b      	adds	r3, r3, r2
 8009ff0:	643b      	str	r3, [r7, #64]	; 0x40
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	00da      	lsls	r2, r3, #3
 8009ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ffa:	18d3      	adds	r3, r2, r3
 8009ffc:	4a34      	ldr	r2, [pc, #208]	; (800a0d0 <USB_EPStartXfer+0x700>)
 8009ffe:	4694      	mov	ip, r2
 800a000:	4463      	add	r3, ip
 800a002:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a004:	1d7b      	adds	r3, r7, #5
 800a006:	33ff      	adds	r3, #255	; 0xff
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	b29a      	uxth	r2, r3
 800a00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a00e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a010:	2076      	movs	r0, #118	; 0x76
 800a012:	183b      	adds	r3, r7, r0
 800a014:	683a      	ldr	r2, [r7, #0]
 800a016:	8952      	ldrh	r2, [r2, #10]
 800a018:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	6959      	ldr	r1, [r3, #20]
 800a01e:	1d7b      	adds	r3, r7, #5
 800a020:	33ff      	adds	r3, #255	; 0xff
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	b29c      	uxth	r4, r3
 800a026:	183b      	adds	r3, r7, r0
 800a028:	881a      	ldrh	r2, [r3, #0]
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	0023      	movs	r3, r4
 800a02e:	f000 fec3 	bl	800adb8 <USB_WritePMA>
 800a032:	e1a2      	b.n	800a37a <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	6a1b      	ldr	r3, [r3, #32]
 800a038:	1d7a      	adds	r2, r7, #5
 800a03a:	32ff      	adds	r2, #255	; 0xff
 800a03c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	18d3      	adds	r3, r2, r3
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	b29a      	uxth	r2, r3
 800a04c:	2062      	movs	r0, #98	; 0x62
 800a04e:	183b      	adds	r3, r7, r0
 800a050:	4920      	ldr	r1, [pc, #128]	; (800a0d4 <USB_EPStartXfer+0x704>)
 800a052:	400a      	ands	r2, r1
 800a054:	801a      	strh	r2, [r3, #0]
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	18d3      	adds	r3, r2, r3
 800a060:	183a      	adds	r2, r7, r0
 800a062:	8812      	ldrh	r2, [r2, #0]
 800a064:	491c      	ldr	r1, [pc, #112]	; (800a0d8 <USB_EPStartXfer+0x708>)
 800a066:	430a      	orrs	r2, r1
 800a068:	b292      	uxth	r2, r2
 800a06a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2250      	movs	r2, #80	; 0x50
 800a074:	5a9b      	ldrh	r3, [r3, r2]
 800a076:	b29b      	uxth	r3, r3
 800a078:	001a      	movs	r2, r3
 800a07a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a07c:	189b      	adds	r3, r3, r2
 800a07e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	781b      	ldrb	r3, [r3, #0]
 800a084:	00da      	lsls	r2, r3, #3
 800a086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a088:	18d3      	adds	r3, r2, r3
 800a08a:	4a0e      	ldr	r2, [pc, #56]	; (800a0c4 <USB_EPStartXfer+0x6f4>)
 800a08c:	4694      	mov	ip, r2
 800a08e:	4463      	add	r3, ip
 800a090:	65bb      	str	r3, [r7, #88]	; 0x58
 800a092:	1d7b      	adds	r3, r7, #5
 800a094:	33ff      	adds	r3, #255	; 0xff
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	b29a      	uxth	r2, r3
 800a09a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a09c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a09e:	2076      	movs	r0, #118	; 0x76
 800a0a0:	183b      	adds	r3, r7, r0
 800a0a2:	683a      	ldr	r2, [r7, #0]
 800a0a4:	8912      	ldrh	r2, [r2, #8]
 800a0a6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	6959      	ldr	r1, [r3, #20]
 800a0ac:	1d7b      	adds	r3, r7, #5
 800a0ae:	33ff      	adds	r3, #255	; 0xff
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	b29c      	uxth	r4, r3
 800a0b4:	183b      	adds	r3, r7, r0
 800a0b6:	881a      	ldrh	r2, [r3, #0]
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	0023      	movs	r3, r4
 800a0bc:	f000 fe7c 	bl	800adb8 <USB_WritePMA>
 800a0c0:	e15b      	b.n	800a37a <USB_EPStartXfer+0x9aa>
 800a0c2:	46c0      	nop			; (mov r8, r8)
 800a0c4:	00000402 	.word	0x00000402
 800a0c8:	ffff83ff 	.word	0xffff83ff
 800a0cc:	ffff8000 	.word	0xffff8000
 800a0d0:	00000406 	.word	0x00000406
 800a0d4:	ffff8e8f 	.word	0xffff8e8f
 800a0d8:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	6a1a      	ldr	r2, [r3, #32]
 800a0e0:	1d7b      	adds	r3, r7, #5
 800a0e2:	33ff      	adds	r3, #255	; 0xff
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	1ad2      	subs	r2, r2, r3
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	18d3      	adds	r3, r2, r3
 800a0f6:	881b      	ldrh	r3, [r3, #0]
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	001a      	movs	r2, r3
 800a0fc:	2340      	movs	r3, #64	; 0x40
 800a0fe:	4013      	ands	r3, r2
 800a100:	d100      	bne.n	800a104 <USB_EPStartXfer+0x734>
 800a102:	e099      	b.n	800a238 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	673b      	str	r3, [r7, #112]	; 0x70
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	785b      	ldrb	r3, [r3, #1]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d166      	bne.n	800a1de <USB_EPStartXfer+0x80e>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	66bb      	str	r3, [r7, #104]	; 0x68
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2250      	movs	r2, #80	; 0x50
 800a118:	5a9b      	ldrh	r3, [r3, r2]
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	001a      	movs	r2, r3
 800a11e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a120:	189b      	adds	r3, r3, r2
 800a122:	66bb      	str	r3, [r7, #104]	; 0x68
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	00da      	lsls	r2, r3, #3
 800a12a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a12c:	18d3      	adds	r3, r2, r3
 800a12e:	4ad0      	ldr	r2, [pc, #832]	; (800a470 <USB_EPStartXfer+0xaa0>)
 800a130:	4694      	mov	ip, r2
 800a132:	4463      	add	r3, ip
 800a134:	667b      	str	r3, [r7, #100]	; 0x64
 800a136:	1d7b      	adds	r3, r7, #5
 800a138:	33ff      	adds	r3, #255	; 0xff
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d110      	bne.n	800a162 <USB_EPStartXfer+0x792>
 800a140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a142:	881b      	ldrh	r3, [r3, #0]
 800a144:	b29b      	uxth	r3, r3
 800a146:	4acb      	ldr	r2, [pc, #812]	; (800a474 <USB_EPStartXfer+0xaa4>)
 800a148:	4013      	ands	r3, r2
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a14e:	801a      	strh	r2, [r3, #0]
 800a150:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a152:	881b      	ldrh	r3, [r3, #0]
 800a154:	b29b      	uxth	r3, r3
 800a156:	4ac8      	ldr	r2, [pc, #800]	; (800a478 <USB_EPStartXfer+0xaa8>)
 800a158:	4313      	orrs	r3, r2
 800a15a:	b29a      	uxth	r2, r3
 800a15c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a15e:	801a      	strh	r2, [r3, #0]
 800a160:	e058      	b.n	800a214 <USB_EPStartXfer+0x844>
 800a162:	1d7b      	adds	r3, r7, #5
 800a164:	33ff      	adds	r3, #255	; 0xff
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2b3e      	cmp	r3, #62	; 0x3e
 800a16a:	d81a      	bhi.n	800a1a2 <USB_EPStartXfer+0x7d2>
 800a16c:	1d7b      	adds	r3, r7, #5
 800a16e:	33ff      	adds	r3, #255	; 0xff
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	085b      	lsrs	r3, r3, #1
 800a174:	21f0      	movs	r1, #240	; 0xf0
 800a176:	187a      	adds	r2, r7, r1
 800a178:	6013      	str	r3, [r2, #0]
 800a17a:	1d7b      	adds	r3, r7, #5
 800a17c:	33ff      	adds	r3, #255	; 0xff
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2201      	movs	r2, #1
 800a182:	4013      	ands	r3, r2
 800a184:	d004      	beq.n	800a190 <USB_EPStartXfer+0x7c0>
 800a186:	187b      	adds	r3, r7, r1
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	3301      	adds	r3, #1
 800a18c:	187a      	adds	r2, r7, r1
 800a18e:	6013      	str	r3, [r2, #0]
 800a190:	23f0      	movs	r3, #240	; 0xf0
 800a192:	18fb      	adds	r3, r7, r3
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	b29b      	uxth	r3, r3
 800a198:	029b      	lsls	r3, r3, #10
 800a19a:	b29a      	uxth	r2, r3
 800a19c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a19e:	801a      	strh	r2, [r3, #0]
 800a1a0:	e038      	b.n	800a214 <USB_EPStartXfer+0x844>
 800a1a2:	1d7b      	adds	r3, r7, #5
 800a1a4:	33ff      	adds	r3, #255	; 0xff
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	095b      	lsrs	r3, r3, #5
 800a1aa:	21f0      	movs	r1, #240	; 0xf0
 800a1ac:	187a      	adds	r2, r7, r1
 800a1ae:	6013      	str	r3, [r2, #0]
 800a1b0:	1d7b      	adds	r3, r7, #5
 800a1b2:	33ff      	adds	r3, #255	; 0xff
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	221f      	movs	r2, #31
 800a1b8:	4013      	ands	r3, r2
 800a1ba:	d104      	bne.n	800a1c6 <USB_EPStartXfer+0x7f6>
 800a1bc:	187b      	adds	r3, r7, r1
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	187a      	adds	r2, r7, r1
 800a1c4:	6013      	str	r3, [r2, #0]
 800a1c6:	23f0      	movs	r3, #240	; 0xf0
 800a1c8:	18fb      	adds	r3, r7, r3
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	029b      	lsls	r3, r3, #10
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	4aa9      	ldr	r2, [pc, #676]	; (800a478 <USB_EPStartXfer+0xaa8>)
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	b29a      	uxth	r2, r3
 800a1d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1da:	801a      	strh	r2, [r3, #0]
 800a1dc:	e01a      	b.n	800a214 <USB_EPStartXfer+0x844>
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	785b      	ldrb	r3, [r3, #1]
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d116      	bne.n	800a214 <USB_EPStartXfer+0x844>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2250      	movs	r2, #80	; 0x50
 800a1ea:	5a9b      	ldrh	r3, [r3, r2]
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	001a      	movs	r2, r3
 800a1f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1f2:	189b      	adds	r3, r3, r2
 800a1f4:	673b      	str	r3, [r7, #112]	; 0x70
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	781b      	ldrb	r3, [r3, #0]
 800a1fa:	00da      	lsls	r2, r3, #3
 800a1fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1fe:	18d3      	adds	r3, r2, r3
 800a200:	4a9b      	ldr	r2, [pc, #620]	; (800a470 <USB_EPStartXfer+0xaa0>)
 800a202:	4694      	mov	ip, r2
 800a204:	4463      	add	r3, ip
 800a206:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a208:	1d7b      	adds	r3, r7, #5
 800a20a:	33ff      	adds	r3, #255	; 0xff
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	b29a      	uxth	r2, r3
 800a210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a212:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a214:	2076      	movs	r0, #118	; 0x76
 800a216:	183b      	adds	r3, r7, r0
 800a218:	683a      	ldr	r2, [r7, #0]
 800a21a:	8952      	ldrh	r2, [r2, #10]
 800a21c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	6959      	ldr	r1, [r3, #20]
 800a222:	1d7b      	adds	r3, r7, #5
 800a224:	33ff      	adds	r3, #255	; 0xff
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	b29c      	uxth	r4, r3
 800a22a:	183b      	adds	r3, r7, r0
 800a22c:	881a      	ldrh	r2, [r3, #0]
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	0023      	movs	r3, r4
 800a232:	f000 fdc1 	bl	800adb8 <USB_WritePMA>
 800a236:	e0a0      	b.n	800a37a <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	785b      	ldrb	r3, [r3, #1]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d166      	bne.n	800a30e <USB_EPStartXfer+0x93e>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2250      	movs	r2, #80	; 0x50
 800a248:	5a9b      	ldrh	r3, [r3, r2]
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	001a      	movs	r2, r3
 800a24e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a250:	189b      	adds	r3, r3, r2
 800a252:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	00da      	lsls	r2, r3, #3
 800a25a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a25c:	18d3      	adds	r3, r2, r3
 800a25e:	4a87      	ldr	r2, [pc, #540]	; (800a47c <USB_EPStartXfer+0xaac>)
 800a260:	4694      	mov	ip, r2
 800a262:	4463      	add	r3, ip
 800a264:	67bb      	str	r3, [r7, #120]	; 0x78
 800a266:	1d7b      	adds	r3, r7, #5
 800a268:	33ff      	adds	r3, #255	; 0xff
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d110      	bne.n	800a292 <USB_EPStartXfer+0x8c2>
 800a270:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a272:	881b      	ldrh	r3, [r3, #0]
 800a274:	b29b      	uxth	r3, r3
 800a276:	4a7f      	ldr	r2, [pc, #508]	; (800a474 <USB_EPStartXfer+0xaa4>)
 800a278:	4013      	ands	r3, r2
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a27e:	801a      	strh	r2, [r3, #0]
 800a280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a282:	881b      	ldrh	r3, [r3, #0]
 800a284:	b29b      	uxth	r3, r3
 800a286:	4a7c      	ldr	r2, [pc, #496]	; (800a478 <USB_EPStartXfer+0xaa8>)
 800a288:	4313      	orrs	r3, r2
 800a28a:	b29a      	uxth	r2, r3
 800a28c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a28e:	801a      	strh	r2, [r3, #0]
 800a290:	e062      	b.n	800a358 <USB_EPStartXfer+0x988>
 800a292:	1d7b      	adds	r3, r7, #5
 800a294:	33ff      	adds	r3, #255	; 0xff
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	2b3e      	cmp	r3, #62	; 0x3e
 800a29a:	d81a      	bhi.n	800a2d2 <USB_EPStartXfer+0x902>
 800a29c:	1d7b      	adds	r3, r7, #5
 800a29e:	33ff      	adds	r3, #255	; 0xff
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	085b      	lsrs	r3, r3, #1
 800a2a4:	21ec      	movs	r1, #236	; 0xec
 800a2a6:	187a      	adds	r2, r7, r1
 800a2a8:	6013      	str	r3, [r2, #0]
 800a2aa:	1d7b      	adds	r3, r7, #5
 800a2ac:	33ff      	adds	r3, #255	; 0xff
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	4013      	ands	r3, r2
 800a2b4:	d004      	beq.n	800a2c0 <USB_EPStartXfer+0x8f0>
 800a2b6:	187b      	adds	r3, r7, r1
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	187a      	adds	r2, r7, r1
 800a2be:	6013      	str	r3, [r2, #0]
 800a2c0:	23ec      	movs	r3, #236	; 0xec
 800a2c2:	18fb      	adds	r3, r7, r3
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	029b      	lsls	r3, r3, #10
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2ce:	801a      	strh	r2, [r3, #0]
 800a2d0:	e042      	b.n	800a358 <USB_EPStartXfer+0x988>
 800a2d2:	1d7b      	adds	r3, r7, #5
 800a2d4:	33ff      	adds	r3, #255	; 0xff
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	095b      	lsrs	r3, r3, #5
 800a2da:	21ec      	movs	r1, #236	; 0xec
 800a2dc:	187a      	adds	r2, r7, r1
 800a2de:	6013      	str	r3, [r2, #0]
 800a2e0:	1d7b      	adds	r3, r7, #5
 800a2e2:	33ff      	adds	r3, #255	; 0xff
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	221f      	movs	r2, #31
 800a2e8:	4013      	ands	r3, r2
 800a2ea:	d104      	bne.n	800a2f6 <USB_EPStartXfer+0x926>
 800a2ec:	187b      	adds	r3, r7, r1
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	3b01      	subs	r3, #1
 800a2f2:	187a      	adds	r2, r7, r1
 800a2f4:	6013      	str	r3, [r2, #0]
 800a2f6:	23ec      	movs	r3, #236	; 0xec
 800a2f8:	18fb      	adds	r3, r7, r3
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	029b      	lsls	r3, r3, #10
 800a300:	b29b      	uxth	r3, r3
 800a302:	4a5d      	ldr	r2, [pc, #372]	; (800a478 <USB_EPStartXfer+0xaa8>)
 800a304:	4313      	orrs	r3, r2
 800a306:	b29a      	uxth	r2, r3
 800a308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a30a:	801a      	strh	r2, [r3, #0]
 800a30c:	e024      	b.n	800a358 <USB_EPStartXfer+0x988>
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	785b      	ldrb	r3, [r3, #1]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d120      	bne.n	800a358 <USB_EPStartXfer+0x988>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2184      	movs	r1, #132	; 0x84
 800a31a:	187a      	adds	r2, r7, r1
 800a31c:	6013      	str	r3, [r2, #0]
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2250      	movs	r2, #80	; 0x50
 800a322:	5a9b      	ldrh	r3, [r3, r2]
 800a324:	b29b      	uxth	r3, r3
 800a326:	001a      	movs	r2, r3
 800a328:	187b      	adds	r3, r7, r1
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	189b      	adds	r3, r3, r2
 800a32e:	187a      	adds	r2, r7, r1
 800a330:	6013      	str	r3, [r2, #0]
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	00da      	lsls	r2, r3, #3
 800a338:	187b      	adds	r3, r7, r1
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	18d3      	adds	r3, r2, r3
 800a33e:	4a4f      	ldr	r2, [pc, #316]	; (800a47c <USB_EPStartXfer+0xaac>)
 800a340:	4694      	mov	ip, r2
 800a342:	4463      	add	r3, ip
 800a344:	2180      	movs	r1, #128	; 0x80
 800a346:	187a      	adds	r2, r7, r1
 800a348:	6013      	str	r3, [r2, #0]
 800a34a:	1d7b      	adds	r3, r7, #5
 800a34c:	33ff      	adds	r3, #255	; 0xff
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	b29a      	uxth	r2, r3
 800a352:	187b      	adds	r3, r7, r1
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a358:	2076      	movs	r0, #118	; 0x76
 800a35a:	183b      	adds	r3, r7, r0
 800a35c:	683a      	ldr	r2, [r7, #0]
 800a35e:	8912      	ldrh	r2, [r2, #8]
 800a360:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	6959      	ldr	r1, [r3, #20]
 800a366:	1d7b      	adds	r3, r7, #5
 800a368:	33ff      	adds	r3, #255	; 0xff
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	b29c      	uxth	r4, r3
 800a36e:	183b      	adds	r3, r7, r0
 800a370:	881a      	ldrh	r2, [r3, #0]
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	0023      	movs	r3, r4
 800a376:	f000 fd1f 	bl	800adb8 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	18d3      	adds	r3, r2, r3
 800a384:	881b      	ldrh	r3, [r3, #0]
 800a386:	b29a      	uxth	r2, r3
 800a388:	200a      	movs	r0, #10
 800a38a:	183b      	adds	r3, r7, r0
 800a38c:	493c      	ldr	r1, [pc, #240]	; (800a480 <USB_EPStartXfer+0xab0>)
 800a38e:	400a      	ands	r2, r1
 800a390:	801a      	strh	r2, [r3, #0]
 800a392:	183b      	adds	r3, r7, r0
 800a394:	183a      	adds	r2, r7, r0
 800a396:	8812      	ldrh	r2, [r2, #0]
 800a398:	2110      	movs	r1, #16
 800a39a:	404a      	eors	r2, r1
 800a39c:	801a      	strh	r2, [r3, #0]
 800a39e:	183b      	adds	r3, r7, r0
 800a3a0:	183a      	adds	r2, r7, r0
 800a3a2:	8812      	ldrh	r2, [r2, #0]
 800a3a4:	2120      	movs	r1, #32
 800a3a6:	404a      	eors	r2, r1
 800a3a8:	801a      	strh	r2, [r3, #0]
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	18d3      	adds	r3, r2, r3
 800a3b4:	183a      	adds	r2, r7, r0
 800a3b6:	8812      	ldrh	r2, [r2, #0]
 800a3b8:	4932      	ldr	r1, [pc, #200]	; (800a484 <USB_EPStartXfer+0xab4>)
 800a3ba:	430a      	orrs	r2, r1
 800a3bc:	b292      	uxth	r2, r2
 800a3be:	801a      	strh	r2, [r3, #0]
 800a3c0:	f000 fbaf 	bl	800ab22 <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	7b1b      	ldrb	r3, [r3, #12]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d000      	beq.n	800a3ce <USB_EPStartXfer+0x9fe>
 800a3cc:	e09e      	b.n	800a50c <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	699a      	ldr	r2, [r3, #24]
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d90d      	bls.n	800a3f6 <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	1d7a      	adds	r2, r7, #5
 800a3e0:	32ff      	adds	r2, #255	; 0xff
 800a3e2:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	699a      	ldr	r2, [r3, #24]
 800a3e8:	1d7b      	adds	r3, r7, #5
 800a3ea:	33ff      	adds	r3, #255	; 0xff
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	1ad2      	subs	r2, r2, r3
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	619a      	str	r2, [r3, #24]
 800a3f4:	e007      	b.n	800a406 <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	699b      	ldr	r3, [r3, #24]
 800a3fa:	1d7a      	adds	r2, r7, #5
 800a3fc:	32ff      	adds	r2, #255	; 0xff
 800a3fe:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	2200      	movs	r2, #0
 800a404:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2190      	movs	r1, #144	; 0x90
 800a40a:	187a      	adds	r2, r7, r1
 800a40c:	6013      	str	r3, [r2, #0]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2250      	movs	r2, #80	; 0x50
 800a412:	5a9b      	ldrh	r3, [r3, r2]
 800a414:	b29b      	uxth	r3, r3
 800a416:	001a      	movs	r2, r3
 800a418:	187b      	adds	r3, r7, r1
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	189b      	adds	r3, r3, r2
 800a41e:	187a      	adds	r2, r7, r1
 800a420:	6013      	str	r3, [r2, #0]
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	00da      	lsls	r2, r3, #3
 800a428:	187b      	adds	r3, r7, r1
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	18d3      	adds	r3, r2, r3
 800a42e:	4a10      	ldr	r2, [pc, #64]	; (800a470 <USB_EPStartXfer+0xaa0>)
 800a430:	4694      	mov	ip, r2
 800a432:	4463      	add	r3, ip
 800a434:	218c      	movs	r1, #140	; 0x8c
 800a436:	187a      	adds	r2, r7, r1
 800a438:	6013      	str	r3, [r2, #0]
 800a43a:	1d7b      	adds	r3, r7, #5
 800a43c:	33ff      	adds	r3, #255	; 0xff
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d121      	bne.n	800a488 <USB_EPStartXfer+0xab8>
 800a444:	187b      	adds	r3, r7, r1
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	881b      	ldrh	r3, [r3, #0]
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	4a09      	ldr	r2, [pc, #36]	; (800a474 <USB_EPStartXfer+0xaa4>)
 800a44e:	4013      	ands	r3, r2
 800a450:	b29a      	uxth	r2, r3
 800a452:	187b      	adds	r3, r7, r1
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	801a      	strh	r2, [r3, #0]
 800a458:	187b      	adds	r3, r7, r1
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	881b      	ldrh	r3, [r3, #0]
 800a45e:	b29b      	uxth	r3, r3
 800a460:	4a05      	ldr	r2, [pc, #20]	; (800a478 <USB_EPStartXfer+0xaa8>)
 800a462:	4313      	orrs	r3, r2
 800a464:	b29a      	uxth	r2, r3
 800a466:	187b      	adds	r3, r7, r1
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	801a      	strh	r2, [r3, #0]
 800a46c:	e334      	b.n	800aad8 <USB_EPStartXfer+0x1108>
 800a46e:	46c0      	nop			; (mov r8, r8)
 800a470:	00000406 	.word	0x00000406
 800a474:	ffff83ff 	.word	0xffff83ff
 800a478:	ffff8000 	.word	0xffff8000
 800a47c:	00000402 	.word	0x00000402
 800a480:	ffff8fbf 	.word	0xffff8fbf
 800a484:	ffff8080 	.word	0xffff8080
 800a488:	1d7b      	adds	r3, r7, #5
 800a48a:	33ff      	adds	r3, #255	; 0xff
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2b3e      	cmp	r3, #62	; 0x3e
 800a490:	d81c      	bhi.n	800a4cc <USB_EPStartXfer+0xafc>
 800a492:	1d7b      	adds	r3, r7, #5
 800a494:	33ff      	adds	r3, #255	; 0xff
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	085b      	lsrs	r3, r3, #1
 800a49a:	21e8      	movs	r1, #232	; 0xe8
 800a49c:	187a      	adds	r2, r7, r1
 800a49e:	6013      	str	r3, [r2, #0]
 800a4a0:	1d7b      	adds	r3, r7, #5
 800a4a2:	33ff      	adds	r3, #255	; 0xff
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	d004      	beq.n	800a4b6 <USB_EPStartXfer+0xae6>
 800a4ac:	187b      	adds	r3, r7, r1
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	187a      	adds	r2, r7, r1
 800a4b4:	6013      	str	r3, [r2, #0]
 800a4b6:	23e8      	movs	r3, #232	; 0xe8
 800a4b8:	18fb      	adds	r3, r7, r3
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	029b      	lsls	r3, r3, #10
 800a4c0:	b29a      	uxth	r2, r3
 800a4c2:	238c      	movs	r3, #140	; 0x8c
 800a4c4:	18fb      	adds	r3, r7, r3
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	801a      	strh	r2, [r3, #0]
 800a4ca:	e305      	b.n	800aad8 <USB_EPStartXfer+0x1108>
 800a4cc:	1d7b      	adds	r3, r7, #5
 800a4ce:	33ff      	adds	r3, #255	; 0xff
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	095b      	lsrs	r3, r3, #5
 800a4d4:	21e8      	movs	r1, #232	; 0xe8
 800a4d6:	187a      	adds	r2, r7, r1
 800a4d8:	6013      	str	r3, [r2, #0]
 800a4da:	1d7b      	adds	r3, r7, #5
 800a4dc:	33ff      	adds	r3, #255	; 0xff
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	221f      	movs	r2, #31
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	d104      	bne.n	800a4f0 <USB_EPStartXfer+0xb20>
 800a4e6:	187b      	adds	r3, r7, r1
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	187a      	adds	r2, r7, r1
 800a4ee:	6013      	str	r3, [r2, #0]
 800a4f0:	23e8      	movs	r3, #232	; 0xe8
 800a4f2:	18fb      	adds	r3, r7, r3
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	029b      	lsls	r3, r3, #10
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	4aca      	ldr	r2, [pc, #808]	; (800a828 <USB_EPStartXfer+0xe58>)
 800a4fe:	4313      	orrs	r3, r2
 800a500:	b29a      	uxth	r2, r3
 800a502:	238c      	movs	r3, #140	; 0x8c
 800a504:	18fb      	adds	r3, r7, r3
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	801a      	strh	r2, [r3, #0]
 800a50a:	e2e5      	b.n	800aad8 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	78db      	ldrb	r3, [r3, #3]
 800a510:	2b02      	cmp	r3, #2
 800a512:	d000      	beq.n	800a516 <USB_EPStartXfer+0xb46>
 800a514:	e16f      	b.n	800a7f6 <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	785b      	ldrb	r3, [r3, #1]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d16f      	bne.n	800a5fe <USB_EPStartXfer+0xc2e>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	21ac      	movs	r1, #172	; 0xac
 800a522:	187a      	adds	r2, r7, r1
 800a524:	6013      	str	r3, [r2, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2250      	movs	r2, #80	; 0x50
 800a52a:	5a9b      	ldrh	r3, [r3, r2]
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	001a      	movs	r2, r3
 800a530:	187b      	adds	r3, r7, r1
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	189b      	adds	r3, r3, r2
 800a536:	187a      	adds	r2, r7, r1
 800a538:	6013      	str	r3, [r2, #0]
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	00da      	lsls	r2, r3, #3
 800a540:	187b      	adds	r3, r7, r1
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	18d3      	adds	r3, r2, r3
 800a546:	4ab9      	ldr	r2, [pc, #740]	; (800a82c <USB_EPStartXfer+0xe5c>)
 800a548:	4694      	mov	ip, r2
 800a54a:	4463      	add	r3, ip
 800a54c:	21a8      	movs	r1, #168	; 0xa8
 800a54e:	187a      	adds	r2, r7, r1
 800a550:	6013      	str	r3, [r2, #0]
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	691b      	ldr	r3, [r3, #16]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d114      	bne.n	800a584 <USB_EPStartXfer+0xbb4>
 800a55a:	187b      	adds	r3, r7, r1
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	881b      	ldrh	r3, [r3, #0]
 800a560:	b29b      	uxth	r3, r3
 800a562:	4ab3      	ldr	r2, [pc, #716]	; (800a830 <USB_EPStartXfer+0xe60>)
 800a564:	4013      	ands	r3, r2
 800a566:	b29a      	uxth	r2, r3
 800a568:	187b      	adds	r3, r7, r1
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	801a      	strh	r2, [r3, #0]
 800a56e:	187b      	adds	r3, r7, r1
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	881b      	ldrh	r3, [r3, #0]
 800a574:	b29b      	uxth	r3, r3
 800a576:	4aac      	ldr	r2, [pc, #688]	; (800a828 <USB_EPStartXfer+0xe58>)
 800a578:	4313      	orrs	r3, r2
 800a57a:	b29a      	uxth	r2, r3
 800a57c:	187b      	adds	r3, r7, r1
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	801a      	strh	r2, [r3, #0]
 800a582:	e060      	b.n	800a646 <USB_EPStartXfer+0xc76>
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	2b3e      	cmp	r3, #62	; 0x3e
 800a58a:	d81a      	bhi.n	800a5c2 <USB_EPStartXfer+0xbf2>
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	085b      	lsrs	r3, r3, #1
 800a592:	21e4      	movs	r1, #228	; 0xe4
 800a594:	187a      	adds	r2, r7, r1
 800a596:	6013      	str	r3, [r2, #0]
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	691b      	ldr	r3, [r3, #16]
 800a59c:	2201      	movs	r2, #1
 800a59e:	4013      	ands	r3, r2
 800a5a0:	d004      	beq.n	800a5ac <USB_EPStartXfer+0xbdc>
 800a5a2:	187b      	adds	r3, r7, r1
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	187a      	adds	r2, r7, r1
 800a5aa:	6013      	str	r3, [r2, #0]
 800a5ac:	23e4      	movs	r3, #228	; 0xe4
 800a5ae:	18fb      	adds	r3, r7, r3
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	029b      	lsls	r3, r3, #10
 800a5b6:	b29a      	uxth	r2, r3
 800a5b8:	23a8      	movs	r3, #168	; 0xa8
 800a5ba:	18fb      	adds	r3, r7, r3
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	801a      	strh	r2, [r3, #0]
 800a5c0:	e041      	b.n	800a646 <USB_EPStartXfer+0xc76>
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	095b      	lsrs	r3, r3, #5
 800a5c8:	21e4      	movs	r1, #228	; 0xe4
 800a5ca:	187a      	adds	r2, r7, r1
 800a5cc:	6013      	str	r3, [r2, #0]
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	691b      	ldr	r3, [r3, #16]
 800a5d2:	221f      	movs	r2, #31
 800a5d4:	4013      	ands	r3, r2
 800a5d6:	d104      	bne.n	800a5e2 <USB_EPStartXfer+0xc12>
 800a5d8:	187b      	adds	r3, r7, r1
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	187a      	adds	r2, r7, r1
 800a5e0:	6013      	str	r3, [r2, #0]
 800a5e2:	23e4      	movs	r3, #228	; 0xe4
 800a5e4:	18fb      	adds	r3, r7, r3
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	b29b      	uxth	r3, r3
 800a5ea:	029b      	lsls	r3, r3, #10
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	4a8e      	ldr	r2, [pc, #568]	; (800a828 <USB_EPStartXfer+0xe58>)
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	23a8      	movs	r3, #168	; 0xa8
 800a5f6:	18fb      	adds	r3, r7, r3
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	801a      	strh	r2, [r3, #0]
 800a5fc:	e023      	b.n	800a646 <USB_EPStartXfer+0xc76>
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	785b      	ldrb	r3, [r3, #1]
 800a602:	2b01      	cmp	r3, #1
 800a604:	d11f      	bne.n	800a646 <USB_EPStartXfer+0xc76>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	21b4      	movs	r1, #180	; 0xb4
 800a60a:	187a      	adds	r2, r7, r1
 800a60c:	6013      	str	r3, [r2, #0]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2250      	movs	r2, #80	; 0x50
 800a612:	5a9b      	ldrh	r3, [r3, r2]
 800a614:	b29b      	uxth	r3, r3
 800a616:	001a      	movs	r2, r3
 800a618:	187b      	adds	r3, r7, r1
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	189b      	adds	r3, r3, r2
 800a61e:	187a      	adds	r2, r7, r1
 800a620:	6013      	str	r3, [r2, #0]
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	00da      	lsls	r2, r3, #3
 800a628:	187b      	adds	r3, r7, r1
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	18d3      	adds	r3, r2, r3
 800a62e:	4a7f      	ldr	r2, [pc, #508]	; (800a82c <USB_EPStartXfer+0xe5c>)
 800a630:	4694      	mov	ip, r2
 800a632:	4463      	add	r3, ip
 800a634:	21b0      	movs	r1, #176	; 0xb0
 800a636:	187a      	adds	r2, r7, r1
 800a638:	6013      	str	r3, [r2, #0]
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	691b      	ldr	r3, [r3, #16]
 800a63e:	b29a      	uxth	r2, r3
 800a640:	187b      	adds	r3, r7, r1
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	801a      	strh	r2, [r3, #0]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	22a4      	movs	r2, #164	; 0xa4
 800a64a:	18ba      	adds	r2, r7, r2
 800a64c:	6013      	str	r3, [r2, #0]
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	785b      	ldrb	r3, [r3, #1]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d16f      	bne.n	800a736 <USB_EPStartXfer+0xd66>
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	219c      	movs	r1, #156	; 0x9c
 800a65a:	187a      	adds	r2, r7, r1
 800a65c:	6013      	str	r3, [r2, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2250      	movs	r2, #80	; 0x50
 800a662:	5a9b      	ldrh	r3, [r3, r2]
 800a664:	b29b      	uxth	r3, r3
 800a666:	001a      	movs	r2, r3
 800a668:	187b      	adds	r3, r7, r1
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	189b      	adds	r3, r3, r2
 800a66e:	187a      	adds	r2, r7, r1
 800a670:	6013      	str	r3, [r2, #0]
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	00da      	lsls	r2, r3, #3
 800a678:	187b      	adds	r3, r7, r1
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	18d3      	adds	r3, r2, r3
 800a67e:	4a6d      	ldr	r2, [pc, #436]	; (800a834 <USB_EPStartXfer+0xe64>)
 800a680:	4694      	mov	ip, r2
 800a682:	4463      	add	r3, ip
 800a684:	2198      	movs	r1, #152	; 0x98
 800a686:	187a      	adds	r2, r7, r1
 800a688:	6013      	str	r3, [r2, #0]
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	691b      	ldr	r3, [r3, #16]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d114      	bne.n	800a6bc <USB_EPStartXfer+0xcec>
 800a692:	187b      	adds	r3, r7, r1
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	881b      	ldrh	r3, [r3, #0]
 800a698:	b29b      	uxth	r3, r3
 800a69a:	4a65      	ldr	r2, [pc, #404]	; (800a830 <USB_EPStartXfer+0xe60>)
 800a69c:	4013      	ands	r3, r2
 800a69e:	b29a      	uxth	r2, r3
 800a6a0:	187b      	adds	r3, r7, r1
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	801a      	strh	r2, [r3, #0]
 800a6a6:	187b      	adds	r3, r7, r1
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	881b      	ldrh	r3, [r3, #0]
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	4a5e      	ldr	r2, [pc, #376]	; (800a828 <USB_EPStartXfer+0xe58>)
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	b29a      	uxth	r2, r3
 800a6b4:	187b      	adds	r3, r7, r1
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	801a      	strh	r2, [r3, #0]
 800a6ba:	e05d      	b.n	800a778 <USB_EPStartXfer+0xda8>
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	691b      	ldr	r3, [r3, #16]
 800a6c0:	2b3e      	cmp	r3, #62	; 0x3e
 800a6c2:	d81a      	bhi.n	800a6fa <USB_EPStartXfer+0xd2a>
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	085b      	lsrs	r3, r3, #1
 800a6ca:	21e0      	movs	r1, #224	; 0xe0
 800a6cc:	187a      	adds	r2, r7, r1
 800a6ce:	6013      	str	r3, [r2, #0]
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	691b      	ldr	r3, [r3, #16]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	4013      	ands	r3, r2
 800a6d8:	d004      	beq.n	800a6e4 <USB_EPStartXfer+0xd14>
 800a6da:	187b      	adds	r3, r7, r1
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	187a      	adds	r2, r7, r1
 800a6e2:	6013      	str	r3, [r2, #0]
 800a6e4:	23e0      	movs	r3, #224	; 0xe0
 800a6e6:	18fb      	adds	r3, r7, r3
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	029b      	lsls	r3, r3, #10
 800a6ee:	b29a      	uxth	r2, r3
 800a6f0:	2398      	movs	r3, #152	; 0x98
 800a6f2:	18fb      	adds	r3, r7, r3
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	801a      	strh	r2, [r3, #0]
 800a6f8:	e03e      	b.n	800a778 <USB_EPStartXfer+0xda8>
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	691b      	ldr	r3, [r3, #16]
 800a6fe:	095b      	lsrs	r3, r3, #5
 800a700:	21e0      	movs	r1, #224	; 0xe0
 800a702:	187a      	adds	r2, r7, r1
 800a704:	6013      	str	r3, [r2, #0]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	691b      	ldr	r3, [r3, #16]
 800a70a:	221f      	movs	r2, #31
 800a70c:	4013      	ands	r3, r2
 800a70e:	d104      	bne.n	800a71a <USB_EPStartXfer+0xd4a>
 800a710:	187b      	adds	r3, r7, r1
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	3b01      	subs	r3, #1
 800a716:	187a      	adds	r2, r7, r1
 800a718:	6013      	str	r3, [r2, #0]
 800a71a:	23e0      	movs	r3, #224	; 0xe0
 800a71c:	18fb      	adds	r3, r7, r3
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	b29b      	uxth	r3, r3
 800a722:	029b      	lsls	r3, r3, #10
 800a724:	b29b      	uxth	r3, r3
 800a726:	4a40      	ldr	r2, [pc, #256]	; (800a828 <USB_EPStartXfer+0xe58>)
 800a728:	4313      	orrs	r3, r2
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	2398      	movs	r3, #152	; 0x98
 800a72e:	18fb      	adds	r3, r7, r3
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	801a      	strh	r2, [r3, #0]
 800a734:	e020      	b.n	800a778 <USB_EPStartXfer+0xda8>
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	785b      	ldrb	r3, [r3, #1]
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d11c      	bne.n	800a778 <USB_EPStartXfer+0xda8>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2250      	movs	r2, #80	; 0x50
 800a742:	5a9b      	ldrh	r3, [r3, r2]
 800a744:	b29b      	uxth	r3, r3
 800a746:	001a      	movs	r2, r3
 800a748:	21a4      	movs	r1, #164	; 0xa4
 800a74a:	187b      	adds	r3, r7, r1
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	189b      	adds	r3, r3, r2
 800a750:	187a      	adds	r2, r7, r1
 800a752:	6013      	str	r3, [r2, #0]
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	00da      	lsls	r2, r3, #3
 800a75a:	187b      	adds	r3, r7, r1
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	18d3      	adds	r3, r2, r3
 800a760:	4a34      	ldr	r2, [pc, #208]	; (800a834 <USB_EPStartXfer+0xe64>)
 800a762:	4694      	mov	ip, r2
 800a764:	4463      	add	r3, ip
 800a766:	21a0      	movs	r1, #160	; 0xa0
 800a768:	187a      	adds	r2, r7, r1
 800a76a:	6013      	str	r3, [r2, #0]
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	691b      	ldr	r3, [r3, #16]
 800a770:	b29a      	uxth	r2, r3
 800a772:	187b      	adds	r3, r7, r1
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	69db      	ldr	r3, [r3, #28]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d100      	bne.n	800a782 <USB_EPStartXfer+0xdb2>
 800a780:	e1aa      	b.n	800aad8 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	18d2      	adds	r2, r2, r3
 800a78c:	2196      	movs	r1, #150	; 0x96
 800a78e:	187b      	adds	r3, r7, r1
 800a790:	8812      	ldrh	r2, [r2, #0]
 800a792:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a794:	187b      	adds	r3, r7, r1
 800a796:	881a      	ldrh	r2, [r3, #0]
 800a798:	2380      	movs	r3, #128	; 0x80
 800a79a:	01db      	lsls	r3, r3, #7
 800a79c:	4013      	ands	r3, r2
 800a79e:	d004      	beq.n	800a7aa <USB_EPStartXfer+0xdda>
 800a7a0:	187b      	adds	r3, r7, r1
 800a7a2:	881b      	ldrh	r3, [r3, #0]
 800a7a4:	2240      	movs	r2, #64	; 0x40
 800a7a6:	4013      	ands	r3, r2
 800a7a8:	d10d      	bne.n	800a7c6 <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a7aa:	2196      	movs	r1, #150	; 0x96
 800a7ac:	187b      	adds	r3, r7, r1
 800a7ae:	881a      	ldrh	r2, [r3, #0]
 800a7b0:	2380      	movs	r3, #128	; 0x80
 800a7b2:	01db      	lsls	r3, r3, #7
 800a7b4:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a7b6:	d000      	beq.n	800a7ba <USB_EPStartXfer+0xdea>
 800a7b8:	e18e      	b.n	800aad8 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a7ba:	187b      	adds	r3, r7, r1
 800a7bc:	881b      	ldrh	r3, [r3, #0]
 800a7be:	2240      	movs	r2, #64	; 0x40
 800a7c0:	4013      	ands	r3, r2
 800a7c2:	d000      	beq.n	800a7c6 <USB_EPStartXfer+0xdf6>
 800a7c4:	e188      	b.n	800aad8 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	18d3      	adds	r3, r2, r3
 800a7d0:	881b      	ldrh	r3, [r3, #0]
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	2094      	movs	r0, #148	; 0x94
 800a7d6:	183b      	adds	r3, r7, r0
 800a7d8:	4917      	ldr	r1, [pc, #92]	; (800a838 <USB_EPStartXfer+0xe68>)
 800a7da:	400a      	ands	r2, r1
 800a7dc:	801a      	strh	r2, [r3, #0]
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	18d3      	adds	r3, r2, r3
 800a7e8:	183a      	adds	r2, r7, r0
 800a7ea:	8812      	ldrh	r2, [r2, #0]
 800a7ec:	4913      	ldr	r1, [pc, #76]	; (800a83c <USB_EPStartXfer+0xe6c>)
 800a7ee:	430a      	orrs	r2, r1
 800a7f0:	b292      	uxth	r2, r2
 800a7f2:	801a      	strh	r2, [r3, #0]
 800a7f4:	e170      	b.n	800aad8 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	78db      	ldrb	r3, [r3, #3]
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d000      	beq.n	800a800 <USB_EPStartXfer+0xe30>
 800a7fe:	e169      	b.n	800aad4 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	699a      	ldr	r2, [r3, #24]
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d919      	bls.n	800a840 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	691b      	ldr	r3, [r3, #16]
 800a810:	1d7a      	adds	r2, r7, #5
 800a812:	32ff      	adds	r2, #255	; 0xff
 800a814:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	699a      	ldr	r2, [r3, #24]
 800a81a:	1d7b      	adds	r3, r7, #5
 800a81c:	33ff      	adds	r3, #255	; 0xff
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	1ad2      	subs	r2, r2, r3
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	619a      	str	r2, [r3, #24]
 800a826:	e013      	b.n	800a850 <USB_EPStartXfer+0xe80>
 800a828:	ffff8000 	.word	0xffff8000
 800a82c:	00000402 	.word	0x00000402
 800a830:	ffff83ff 	.word	0xffff83ff
 800a834:	00000406 	.word	0x00000406
 800a838:	ffff8f8f 	.word	0xffff8f8f
 800a83c:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	699b      	ldr	r3, [r3, #24]
 800a844:	1d7a      	adds	r2, r7, #5
 800a846:	32ff      	adds	r2, #255	; 0xff
 800a848:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	2200      	movs	r2, #0
 800a84e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	785b      	ldrb	r3, [r3, #1]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d000      	beq.n	800a85a <USB_EPStartXfer+0xe8a>
 800a858:	e075      	b.n	800a946 <USB_EPStartXfer+0xf76>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	21cc      	movs	r1, #204	; 0xcc
 800a85e:	187a      	adds	r2, r7, r1
 800a860:	6013      	str	r3, [r2, #0]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2250      	movs	r2, #80	; 0x50
 800a866:	5a9b      	ldrh	r3, [r3, r2]
 800a868:	b29b      	uxth	r3, r3
 800a86a:	001a      	movs	r2, r3
 800a86c:	187b      	adds	r3, r7, r1
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	189b      	adds	r3, r3, r2
 800a872:	187a      	adds	r2, r7, r1
 800a874:	6013      	str	r3, [r2, #0]
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	00da      	lsls	r2, r3, #3
 800a87c:	187b      	adds	r3, r7, r1
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	18d3      	adds	r3, r2, r3
 800a882:	4aaa      	ldr	r2, [pc, #680]	; (800ab2c <USB_EPStartXfer+0x115c>)
 800a884:	4694      	mov	ip, r2
 800a886:	4463      	add	r3, ip
 800a888:	21c8      	movs	r1, #200	; 0xc8
 800a88a:	187a      	adds	r2, r7, r1
 800a88c:	6013      	str	r3, [r2, #0]
 800a88e:	1d7b      	adds	r3, r7, #5
 800a890:	33ff      	adds	r3, #255	; 0xff
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d114      	bne.n	800a8c2 <USB_EPStartXfer+0xef2>
 800a898:	187b      	adds	r3, r7, r1
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	881b      	ldrh	r3, [r3, #0]
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	4aa3      	ldr	r2, [pc, #652]	; (800ab30 <USB_EPStartXfer+0x1160>)
 800a8a2:	4013      	ands	r3, r2
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	187b      	adds	r3, r7, r1
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	801a      	strh	r2, [r3, #0]
 800a8ac:	187b      	adds	r3, r7, r1
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	881b      	ldrh	r3, [r3, #0]
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	4a9f      	ldr	r2, [pc, #636]	; (800ab34 <USB_EPStartXfer+0x1164>)
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	b29a      	uxth	r2, r3
 800a8ba:	187b      	adds	r3, r7, r1
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	801a      	strh	r2, [r3, #0]
 800a8c0:	e066      	b.n	800a990 <USB_EPStartXfer+0xfc0>
 800a8c2:	1d7b      	adds	r3, r7, #5
 800a8c4:	33ff      	adds	r3, #255	; 0xff
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	2b3e      	cmp	r3, #62	; 0x3e
 800a8ca:	d81c      	bhi.n	800a906 <USB_EPStartXfer+0xf36>
 800a8cc:	1d7b      	adds	r3, r7, #5
 800a8ce:	33ff      	adds	r3, #255	; 0xff
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	085b      	lsrs	r3, r3, #1
 800a8d4:	21dc      	movs	r1, #220	; 0xdc
 800a8d6:	187a      	adds	r2, r7, r1
 800a8d8:	6013      	str	r3, [r2, #0]
 800a8da:	1d7b      	adds	r3, r7, #5
 800a8dc:	33ff      	adds	r3, #255	; 0xff
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	4013      	ands	r3, r2
 800a8e4:	d004      	beq.n	800a8f0 <USB_EPStartXfer+0xf20>
 800a8e6:	187b      	adds	r3, r7, r1
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	187a      	adds	r2, r7, r1
 800a8ee:	6013      	str	r3, [r2, #0]
 800a8f0:	23dc      	movs	r3, #220	; 0xdc
 800a8f2:	18fb      	adds	r3, r7, r3
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	029b      	lsls	r3, r3, #10
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	23c8      	movs	r3, #200	; 0xc8
 800a8fe:	18fb      	adds	r3, r7, r3
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	801a      	strh	r2, [r3, #0]
 800a904:	e044      	b.n	800a990 <USB_EPStartXfer+0xfc0>
 800a906:	1d7b      	adds	r3, r7, #5
 800a908:	33ff      	adds	r3, #255	; 0xff
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	095b      	lsrs	r3, r3, #5
 800a90e:	21dc      	movs	r1, #220	; 0xdc
 800a910:	187a      	adds	r2, r7, r1
 800a912:	6013      	str	r3, [r2, #0]
 800a914:	1d7b      	adds	r3, r7, #5
 800a916:	33ff      	adds	r3, #255	; 0xff
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	221f      	movs	r2, #31
 800a91c:	4013      	ands	r3, r2
 800a91e:	d104      	bne.n	800a92a <USB_EPStartXfer+0xf5a>
 800a920:	187b      	adds	r3, r7, r1
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	3b01      	subs	r3, #1
 800a926:	187a      	adds	r2, r7, r1
 800a928:	6013      	str	r3, [r2, #0]
 800a92a:	23dc      	movs	r3, #220	; 0xdc
 800a92c:	18fb      	adds	r3, r7, r3
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	b29b      	uxth	r3, r3
 800a932:	029b      	lsls	r3, r3, #10
 800a934:	b29b      	uxth	r3, r3
 800a936:	4a7f      	ldr	r2, [pc, #508]	; (800ab34 <USB_EPStartXfer+0x1164>)
 800a938:	4313      	orrs	r3, r2
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	23c8      	movs	r3, #200	; 0xc8
 800a93e:	18fb      	adds	r3, r7, r3
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	801a      	strh	r2, [r3, #0]
 800a944:	e024      	b.n	800a990 <USB_EPStartXfer+0xfc0>
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	785b      	ldrb	r3, [r3, #1]
 800a94a:	2b01      	cmp	r3, #1
 800a94c:	d120      	bne.n	800a990 <USB_EPStartXfer+0xfc0>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	21d4      	movs	r1, #212	; 0xd4
 800a952:	187a      	adds	r2, r7, r1
 800a954:	6013      	str	r3, [r2, #0]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2250      	movs	r2, #80	; 0x50
 800a95a:	5a9b      	ldrh	r3, [r3, r2]
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	001a      	movs	r2, r3
 800a960:	187b      	adds	r3, r7, r1
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	189b      	adds	r3, r3, r2
 800a966:	187a      	adds	r2, r7, r1
 800a968:	6013      	str	r3, [r2, #0]
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	00da      	lsls	r2, r3, #3
 800a970:	187b      	adds	r3, r7, r1
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	18d3      	adds	r3, r2, r3
 800a976:	4a6d      	ldr	r2, [pc, #436]	; (800ab2c <USB_EPStartXfer+0x115c>)
 800a978:	4694      	mov	ip, r2
 800a97a:	4463      	add	r3, ip
 800a97c:	21d0      	movs	r1, #208	; 0xd0
 800a97e:	187a      	adds	r2, r7, r1
 800a980:	6013      	str	r3, [r2, #0]
 800a982:	1d7b      	adds	r3, r7, #5
 800a984:	33ff      	adds	r3, #255	; 0xff
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	b29a      	uxth	r2, r3
 800a98a:	187b      	adds	r3, r7, r1
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	801a      	strh	r2, [r3, #0]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	22c4      	movs	r2, #196	; 0xc4
 800a994:	18ba      	adds	r2, r7, r2
 800a996:	6013      	str	r3, [r2, #0]
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	785b      	ldrb	r3, [r3, #1]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d000      	beq.n	800a9a2 <USB_EPStartXfer+0xfd2>
 800a9a0:	e075      	b.n	800aa8e <USB_EPStartXfer+0x10be>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	21bc      	movs	r1, #188	; 0xbc
 800a9a6:	187a      	adds	r2, r7, r1
 800a9a8:	6013      	str	r3, [r2, #0]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2250      	movs	r2, #80	; 0x50
 800a9ae:	5a9b      	ldrh	r3, [r3, r2]
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	001a      	movs	r2, r3
 800a9b4:	187b      	adds	r3, r7, r1
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	189b      	adds	r3, r3, r2
 800a9ba:	187a      	adds	r2, r7, r1
 800a9bc:	6013      	str	r3, [r2, #0]
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	00da      	lsls	r2, r3, #3
 800a9c4:	187b      	adds	r3, r7, r1
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	18d3      	adds	r3, r2, r3
 800a9ca:	4a5b      	ldr	r2, [pc, #364]	; (800ab38 <USB_EPStartXfer+0x1168>)
 800a9cc:	4694      	mov	ip, r2
 800a9ce:	4463      	add	r3, ip
 800a9d0:	21b8      	movs	r1, #184	; 0xb8
 800a9d2:	187a      	adds	r2, r7, r1
 800a9d4:	6013      	str	r3, [r2, #0]
 800a9d6:	1d7b      	adds	r3, r7, #5
 800a9d8:	33ff      	adds	r3, #255	; 0xff
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d114      	bne.n	800aa0a <USB_EPStartXfer+0x103a>
 800a9e0:	187b      	adds	r3, r7, r1
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	881b      	ldrh	r3, [r3, #0]
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	4a51      	ldr	r2, [pc, #324]	; (800ab30 <USB_EPStartXfer+0x1160>)
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	b29a      	uxth	r2, r3
 800a9ee:	187b      	adds	r3, r7, r1
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	801a      	strh	r2, [r3, #0]
 800a9f4:	187b      	adds	r3, r7, r1
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	881b      	ldrh	r3, [r3, #0]
 800a9fa:	b29b      	uxth	r3, r3
 800a9fc:	4a4d      	ldr	r2, [pc, #308]	; (800ab34 <USB_EPStartXfer+0x1164>)
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	b29a      	uxth	r2, r3
 800aa02:	187b      	adds	r3, r7, r1
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	801a      	strh	r2, [r3, #0]
 800aa08:	e066      	b.n	800aad8 <USB_EPStartXfer+0x1108>
 800aa0a:	1d7b      	adds	r3, r7, #5
 800aa0c:	33ff      	adds	r3, #255	; 0xff
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2b3e      	cmp	r3, #62	; 0x3e
 800aa12:	d81c      	bhi.n	800aa4e <USB_EPStartXfer+0x107e>
 800aa14:	1d7b      	adds	r3, r7, #5
 800aa16:	33ff      	adds	r3, #255	; 0xff
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	085b      	lsrs	r3, r3, #1
 800aa1c:	21d8      	movs	r1, #216	; 0xd8
 800aa1e:	187a      	adds	r2, r7, r1
 800aa20:	6013      	str	r3, [r2, #0]
 800aa22:	1d7b      	adds	r3, r7, #5
 800aa24:	33ff      	adds	r3, #255	; 0xff
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2201      	movs	r2, #1
 800aa2a:	4013      	ands	r3, r2
 800aa2c:	d004      	beq.n	800aa38 <USB_EPStartXfer+0x1068>
 800aa2e:	187b      	adds	r3, r7, r1
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	3301      	adds	r3, #1
 800aa34:	187a      	adds	r2, r7, r1
 800aa36:	6013      	str	r3, [r2, #0]
 800aa38:	23d8      	movs	r3, #216	; 0xd8
 800aa3a:	18fb      	adds	r3, r7, r3
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	029b      	lsls	r3, r3, #10
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	23b8      	movs	r3, #184	; 0xb8
 800aa46:	18fb      	adds	r3, r7, r3
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	801a      	strh	r2, [r3, #0]
 800aa4c:	e044      	b.n	800aad8 <USB_EPStartXfer+0x1108>
 800aa4e:	1d7b      	adds	r3, r7, #5
 800aa50:	33ff      	adds	r3, #255	; 0xff
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	095b      	lsrs	r3, r3, #5
 800aa56:	21d8      	movs	r1, #216	; 0xd8
 800aa58:	187a      	adds	r2, r7, r1
 800aa5a:	6013      	str	r3, [r2, #0]
 800aa5c:	1d7b      	adds	r3, r7, #5
 800aa5e:	33ff      	adds	r3, #255	; 0xff
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	221f      	movs	r2, #31
 800aa64:	4013      	ands	r3, r2
 800aa66:	d104      	bne.n	800aa72 <USB_EPStartXfer+0x10a2>
 800aa68:	187b      	adds	r3, r7, r1
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	187a      	adds	r2, r7, r1
 800aa70:	6013      	str	r3, [r2, #0]
 800aa72:	23d8      	movs	r3, #216	; 0xd8
 800aa74:	18fb      	adds	r3, r7, r3
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	029b      	lsls	r3, r3, #10
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	4a2d      	ldr	r2, [pc, #180]	; (800ab34 <USB_EPStartXfer+0x1164>)
 800aa80:	4313      	orrs	r3, r2
 800aa82:	b29a      	uxth	r2, r3
 800aa84:	23b8      	movs	r3, #184	; 0xb8
 800aa86:	18fb      	adds	r3, r7, r3
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	801a      	strh	r2, [r3, #0]
 800aa8c:	e024      	b.n	800aad8 <USB_EPStartXfer+0x1108>
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	785b      	ldrb	r3, [r3, #1]
 800aa92:	2b01      	cmp	r3, #1
 800aa94:	d120      	bne.n	800aad8 <USB_EPStartXfer+0x1108>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2250      	movs	r2, #80	; 0x50
 800aa9a:	5a9b      	ldrh	r3, [r3, r2]
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	001a      	movs	r2, r3
 800aaa0:	21c4      	movs	r1, #196	; 0xc4
 800aaa2:	187b      	adds	r3, r7, r1
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	189b      	adds	r3, r3, r2
 800aaa8:	187a      	adds	r2, r7, r1
 800aaaa:	6013      	str	r3, [r2, #0]
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	00da      	lsls	r2, r3, #3
 800aab2:	187b      	adds	r3, r7, r1
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	18d3      	adds	r3, r2, r3
 800aab8:	4a1f      	ldr	r2, [pc, #124]	; (800ab38 <USB_EPStartXfer+0x1168>)
 800aaba:	4694      	mov	ip, r2
 800aabc:	4463      	add	r3, ip
 800aabe:	21c0      	movs	r1, #192	; 0xc0
 800aac0:	187a      	adds	r2, r7, r1
 800aac2:	6013      	str	r3, [r2, #0]
 800aac4:	1d7b      	adds	r3, r7, #5
 800aac6:	33ff      	adds	r3, #255	; 0xff
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	187b      	adds	r3, r7, r1
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	801a      	strh	r2, [r3, #0]
 800aad2:	e001      	b.n	800aad8 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 800aad4:	2301      	movs	r3, #1
 800aad6:	e025      	b.n	800ab24 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	009b      	lsls	r3, r3, #2
 800aae0:	18d3      	adds	r3, r2, r3
 800aae2:	881b      	ldrh	r3, [r3, #0]
 800aae4:	b29a      	uxth	r2, r3
 800aae6:	208a      	movs	r0, #138	; 0x8a
 800aae8:	183b      	adds	r3, r7, r0
 800aaea:	4914      	ldr	r1, [pc, #80]	; (800ab3c <USB_EPStartXfer+0x116c>)
 800aaec:	400a      	ands	r2, r1
 800aaee:	801a      	strh	r2, [r3, #0]
 800aaf0:	183b      	adds	r3, r7, r0
 800aaf2:	183a      	adds	r2, r7, r0
 800aaf4:	8812      	ldrh	r2, [r2, #0]
 800aaf6:	2180      	movs	r1, #128	; 0x80
 800aaf8:	0149      	lsls	r1, r1, #5
 800aafa:	404a      	eors	r2, r1
 800aafc:	801a      	strh	r2, [r3, #0]
 800aafe:	183b      	adds	r3, r7, r0
 800ab00:	183a      	adds	r2, r7, r0
 800ab02:	8812      	ldrh	r2, [r2, #0]
 800ab04:	2180      	movs	r1, #128	; 0x80
 800ab06:	0189      	lsls	r1, r1, #6
 800ab08:	404a      	eors	r2, r1
 800ab0a:	801a      	strh	r2, [r3, #0]
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	18d3      	adds	r3, r2, r3
 800ab16:	183a      	adds	r2, r7, r0
 800ab18:	8812      	ldrh	r2, [r2, #0]
 800ab1a:	4909      	ldr	r1, [pc, #36]	; (800ab40 <USB_EPStartXfer+0x1170>)
 800ab1c:	430a      	orrs	r2, r1
 800ab1e:	b292      	uxth	r2, r2
 800ab20:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800ab22:	2300      	movs	r3, #0
}
 800ab24:	0018      	movs	r0, r3
 800ab26:	46bd      	mov	sp, r7
 800ab28:	b043      	add	sp, #268	; 0x10c
 800ab2a:	bd90      	pop	{r4, r7, pc}
 800ab2c:	00000402 	.word	0x00000402
 800ab30:	ffff83ff 	.word	0xffff83ff
 800ab34:	ffff8000 	.word	0xffff8000
 800ab38:	00000406 	.word	0x00000406
 800ab3c:	ffffbf8f 	.word	0xffffbf8f
 800ab40:	ffff8080 	.word	0xffff8080

0800ab44 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	785b      	ldrb	r3, [r3, #1]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d01d      	beq.n	800ab92 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	18d3      	adds	r3, r2, r3
 800ab60:	881b      	ldrh	r3, [r3, #0]
 800ab62:	b29a      	uxth	r2, r3
 800ab64:	200c      	movs	r0, #12
 800ab66:	183b      	adds	r3, r7, r0
 800ab68:	491b      	ldr	r1, [pc, #108]	; (800abd8 <USB_EPSetStall+0x94>)
 800ab6a:	400a      	ands	r2, r1
 800ab6c:	801a      	strh	r2, [r3, #0]
 800ab6e:	183b      	adds	r3, r7, r0
 800ab70:	183a      	adds	r2, r7, r0
 800ab72:	8812      	ldrh	r2, [r2, #0]
 800ab74:	2110      	movs	r1, #16
 800ab76:	404a      	eors	r2, r1
 800ab78:	801a      	strh	r2, [r3, #0]
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	18d3      	adds	r3, r2, r3
 800ab84:	183a      	adds	r2, r7, r0
 800ab86:	8812      	ldrh	r2, [r2, #0]
 800ab88:	4914      	ldr	r1, [pc, #80]	; (800abdc <USB_EPSetStall+0x98>)
 800ab8a:	430a      	orrs	r2, r1
 800ab8c:	b292      	uxth	r2, r2
 800ab8e:	801a      	strh	r2, [r3, #0]
 800ab90:	e01d      	b.n	800abce <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	18d3      	adds	r3, r2, r3
 800ab9c:	881b      	ldrh	r3, [r3, #0]
 800ab9e:	b29a      	uxth	r2, r3
 800aba0:	200e      	movs	r0, #14
 800aba2:	183b      	adds	r3, r7, r0
 800aba4:	490e      	ldr	r1, [pc, #56]	; (800abe0 <USB_EPSetStall+0x9c>)
 800aba6:	400a      	ands	r2, r1
 800aba8:	801a      	strh	r2, [r3, #0]
 800abaa:	183b      	adds	r3, r7, r0
 800abac:	183a      	adds	r2, r7, r0
 800abae:	8812      	ldrh	r2, [r2, #0]
 800abb0:	2180      	movs	r1, #128	; 0x80
 800abb2:	0149      	lsls	r1, r1, #5
 800abb4:	404a      	eors	r2, r1
 800abb6:	801a      	strh	r2, [r3, #0]
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	18d3      	adds	r3, r2, r3
 800abc2:	183a      	adds	r2, r7, r0
 800abc4:	8812      	ldrh	r2, [r2, #0]
 800abc6:	4905      	ldr	r1, [pc, #20]	; (800abdc <USB_EPSetStall+0x98>)
 800abc8:	430a      	orrs	r2, r1
 800abca:	b292      	uxth	r2, r2
 800abcc:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800abce:	2300      	movs	r3, #0
}
 800abd0:	0018      	movs	r0, r3
 800abd2:	46bd      	mov	sp, r7
 800abd4:	b004      	add	sp, #16
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	ffff8fbf 	.word	0xffff8fbf
 800abdc:	ffff8080 	.word	0xffff8080
 800abe0:	ffffbf8f 	.word	0xffffbf8f

0800abe4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b086      	sub	sp, #24
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	7b1b      	ldrb	r3, [r3, #12]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d000      	beq.n	800abf8 <USB_EPClearStall+0x14>
 800abf6:	e095      	b.n	800ad24 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	785b      	ldrb	r3, [r3, #1]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d046      	beq.n	800ac8e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	18d2      	adds	r2, r2, r3
 800ac0a:	2110      	movs	r1, #16
 800ac0c:	187b      	adds	r3, r7, r1
 800ac0e:	8812      	ldrh	r2, [r2, #0]
 800ac10:	801a      	strh	r2, [r3, #0]
 800ac12:	187b      	adds	r3, r7, r1
 800ac14:	881b      	ldrh	r3, [r3, #0]
 800ac16:	2240      	movs	r2, #64	; 0x40
 800ac18:	4013      	ands	r3, r2
 800ac1a:	d016      	beq.n	800ac4a <USB_EPClearStall+0x66>
 800ac1c:	687a      	ldr	r2, [r7, #4]
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	18d3      	adds	r3, r2, r3
 800ac26:	881b      	ldrh	r3, [r3, #0]
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	200e      	movs	r0, #14
 800ac2c:	183b      	adds	r3, r7, r0
 800ac2e:	4940      	ldr	r1, [pc, #256]	; (800ad30 <USB_EPClearStall+0x14c>)
 800ac30:	400a      	ands	r2, r1
 800ac32:	801a      	strh	r2, [r3, #0]
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	18d3      	adds	r3, r2, r3
 800ac3e:	183a      	adds	r2, r7, r0
 800ac40:	8812      	ldrh	r2, [r2, #0]
 800ac42:	493c      	ldr	r1, [pc, #240]	; (800ad34 <USB_EPClearStall+0x150>)
 800ac44:	430a      	orrs	r2, r1
 800ac46:	b292      	uxth	r2, r2
 800ac48:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	78db      	ldrb	r3, [r3, #3]
 800ac4e:	2b01      	cmp	r3, #1
 800ac50:	d068      	beq.n	800ad24 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	18d3      	adds	r3, r2, r3
 800ac5c:	881b      	ldrh	r3, [r3, #0]
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	200c      	movs	r0, #12
 800ac62:	183b      	adds	r3, r7, r0
 800ac64:	4934      	ldr	r1, [pc, #208]	; (800ad38 <USB_EPClearStall+0x154>)
 800ac66:	400a      	ands	r2, r1
 800ac68:	801a      	strh	r2, [r3, #0]
 800ac6a:	183b      	adds	r3, r7, r0
 800ac6c:	183a      	adds	r2, r7, r0
 800ac6e:	8812      	ldrh	r2, [r2, #0]
 800ac70:	2120      	movs	r1, #32
 800ac72:	404a      	eors	r2, r1
 800ac74:	801a      	strh	r2, [r3, #0]
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	18d3      	adds	r3, r2, r3
 800ac80:	183a      	adds	r2, r7, r0
 800ac82:	8812      	ldrh	r2, [r2, #0]
 800ac84:	492d      	ldr	r1, [pc, #180]	; (800ad3c <USB_EPClearStall+0x158>)
 800ac86:	430a      	orrs	r2, r1
 800ac88:	b292      	uxth	r2, r2
 800ac8a:	801a      	strh	r2, [r3, #0]
 800ac8c:	e04a      	b.n	800ad24 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	18d2      	adds	r2, r2, r3
 800ac98:	2116      	movs	r1, #22
 800ac9a:	187b      	adds	r3, r7, r1
 800ac9c:	8812      	ldrh	r2, [r2, #0]
 800ac9e:	801a      	strh	r2, [r3, #0]
 800aca0:	187b      	adds	r3, r7, r1
 800aca2:	881a      	ldrh	r2, [r3, #0]
 800aca4:	2380      	movs	r3, #128	; 0x80
 800aca6:	01db      	lsls	r3, r3, #7
 800aca8:	4013      	ands	r3, r2
 800acaa:	d016      	beq.n	800acda <USB_EPClearStall+0xf6>
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	18d3      	adds	r3, r2, r3
 800acb6:	881b      	ldrh	r3, [r3, #0]
 800acb8:	b29a      	uxth	r2, r3
 800acba:	2014      	movs	r0, #20
 800acbc:	183b      	adds	r3, r7, r0
 800acbe:	491c      	ldr	r1, [pc, #112]	; (800ad30 <USB_EPClearStall+0x14c>)
 800acc0:	400a      	ands	r2, r1
 800acc2:	801a      	strh	r2, [r3, #0]
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	18d3      	adds	r3, r2, r3
 800acce:	183a      	adds	r2, r7, r0
 800acd0:	8812      	ldrh	r2, [r2, #0]
 800acd2:	491b      	ldr	r1, [pc, #108]	; (800ad40 <USB_EPClearStall+0x15c>)
 800acd4:	430a      	orrs	r2, r1
 800acd6:	b292      	uxth	r2, r2
 800acd8:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	009b      	lsls	r3, r3, #2
 800ace2:	18d3      	adds	r3, r2, r3
 800ace4:	881b      	ldrh	r3, [r3, #0]
 800ace6:	b29a      	uxth	r2, r3
 800ace8:	2012      	movs	r0, #18
 800acea:	183b      	adds	r3, r7, r0
 800acec:	4915      	ldr	r1, [pc, #84]	; (800ad44 <USB_EPClearStall+0x160>)
 800acee:	400a      	ands	r2, r1
 800acf0:	801a      	strh	r2, [r3, #0]
 800acf2:	183b      	adds	r3, r7, r0
 800acf4:	183a      	adds	r2, r7, r0
 800acf6:	8812      	ldrh	r2, [r2, #0]
 800acf8:	2180      	movs	r1, #128	; 0x80
 800acfa:	0149      	lsls	r1, r1, #5
 800acfc:	404a      	eors	r2, r1
 800acfe:	801a      	strh	r2, [r3, #0]
 800ad00:	183b      	adds	r3, r7, r0
 800ad02:	183a      	adds	r2, r7, r0
 800ad04:	8812      	ldrh	r2, [r2, #0]
 800ad06:	2180      	movs	r1, #128	; 0x80
 800ad08:	0189      	lsls	r1, r1, #6
 800ad0a:	404a      	eors	r2, r1
 800ad0c:	801a      	strh	r2, [r3, #0]
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	009b      	lsls	r3, r3, #2
 800ad16:	18d3      	adds	r3, r2, r3
 800ad18:	183a      	adds	r2, r7, r0
 800ad1a:	8812      	ldrh	r2, [r2, #0]
 800ad1c:	4907      	ldr	r1, [pc, #28]	; (800ad3c <USB_EPClearStall+0x158>)
 800ad1e:	430a      	orrs	r2, r1
 800ad20:	b292      	uxth	r2, r2
 800ad22:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	0018      	movs	r0, r3
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	b006      	add	sp, #24
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	46c0      	nop			; (mov r8, r8)
 800ad30:	ffff8f8f 	.word	0xffff8f8f
 800ad34:	ffff80c0 	.word	0xffff80c0
 800ad38:	ffff8fbf 	.word	0xffff8fbf
 800ad3c:	ffff8080 	.word	0xffff8080
 800ad40:	ffffc080 	.word	0xffffc080
 800ad44:	ffffbf8f 	.word	0xffffbf8f

0800ad48 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	000a      	movs	r2, r1
 800ad52:	1cfb      	adds	r3, r7, #3
 800ad54:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800ad56:	1cfb      	adds	r3, r7, #3
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d103      	bne.n	800ad66 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	224c      	movs	r2, #76	; 0x4c
 800ad62:	2180      	movs	r1, #128	; 0x80
 800ad64:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800ad66:	2300      	movs	r3, #0
}
 800ad68:	0018      	movs	r0, r3
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	b002      	add	sp, #8
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2258      	movs	r2, #88	; 0x58
 800ad7c:	5a9b      	ldrh	r3, [r3, r2]
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	4a05      	ldr	r2, [pc, #20]	; (800ad98 <USB_DevConnect+0x28>)
 800ad82:	4313      	orrs	r3, r2
 800ad84:	b299      	uxth	r1, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2258      	movs	r2, #88	; 0x58
 800ad8a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800ad8c:	2300      	movs	r3, #0
}
 800ad8e:	0018      	movs	r0, r3
 800ad90:	46bd      	mov	sp, r7
 800ad92:	b002      	add	sp, #8
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	46c0      	nop			; (mov r8, r8)
 800ad98:	ffff8000 	.word	0xffff8000

0800ad9c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2244      	movs	r2, #68	; 0x44
 800ada8:	5a9b      	ldrh	r3, [r3, r2]
 800adaa:	b29b      	uxth	r3, r3
 800adac:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800adae:	68fb      	ldr	r3, [r7, #12]
}
 800adb0:	0018      	movs	r0, r3
 800adb2:	46bd      	mov	sp, r7
 800adb4:	b004      	add	sp, #16
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b08c      	sub	sp, #48	; 0x30
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	0019      	movs	r1, r3
 800adc4:	1dbb      	adds	r3, r7, #6
 800adc6:	801a      	strh	r2, [r3, #0]
 800adc8:	1d3b      	adds	r3, r7, #4
 800adca:	1c0a      	adds	r2, r1, #0
 800adcc:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800adce:	1d3b      	adds	r3, r7, #4
 800add0:	881b      	ldrh	r3, [r3, #0]
 800add2:	3301      	adds	r3, #1
 800add4:	085b      	lsrs	r3, r3, #1
 800add6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ade0:	1dbb      	adds	r3, r7, #6
 800ade2:	881a      	ldrh	r2, [r3, #0]
 800ade4:	69fb      	ldr	r3, [r7, #28]
 800ade6:	18d3      	adds	r3, r2, r3
 800ade8:	2280      	movs	r2, #128	; 0x80
 800adea:	00d2      	lsls	r2, r2, #3
 800adec:	4694      	mov	ip, r2
 800adee:	4463      	add	r3, ip
 800adf0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800adf2:	6a3b      	ldr	r3, [r7, #32]
 800adf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adf6:	e01b      	b.n	800ae30 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800adf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800adfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae00:	3301      	adds	r3, #1
 800ae02:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800ae04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	b29b      	uxth	r3, r3
 800ae0a:	021b      	lsls	r3, r3, #8
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	001a      	movs	r2, r3
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	4313      	orrs	r3, r2
 800ae14:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	b29a      	uxth	r2, r3
 800ae1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae1c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ae1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae20:	3302      	adds	r3, #2
 800ae22:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800ae24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae26:	3301      	adds	r3, #1
 800ae28:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800ae2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2c:	3b01      	subs	r3, #1
 800ae2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d1e0      	bne.n	800adf8 <USB_WritePMA+0x40>
  }
}
 800ae36:	46c0      	nop			; (mov r8, r8)
 800ae38:	46c0      	nop			; (mov r8, r8)
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	b00c      	add	sp, #48	; 0x30
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b08a      	sub	sp, #40	; 0x28
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	0019      	movs	r1, r3
 800ae4c:	1dbb      	adds	r3, r7, #6
 800ae4e:	801a      	strh	r2, [r3, #0]
 800ae50:	1d3b      	adds	r3, r7, #4
 800ae52:	1c0a      	adds	r2, r1, #0
 800ae54:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ae56:	1d3b      	adds	r3, r7, #4
 800ae58:	881b      	ldrh	r3, [r3, #0]
 800ae5a:	085b      	lsrs	r3, r3, #1
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ae68:	1dbb      	adds	r3, r7, #6
 800ae6a:	881a      	ldrh	r2, [r3, #0]
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	18d3      	adds	r3, r2, r3
 800ae70:	2280      	movs	r2, #128	; 0x80
 800ae72:	00d2      	lsls	r2, r2, #3
 800ae74:	4694      	mov	ip, r2
 800ae76:	4463      	add	r3, ip
 800ae78:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800ae7a:	69bb      	ldr	r3, [r7, #24]
 800ae7c:	627b      	str	r3, [r7, #36]	; 0x24
 800ae7e:	e018      	b.n	800aeb2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800ae80:	6a3b      	ldr	r3, [r7, #32]
 800ae82:	881b      	ldrh	r3, [r3, #0]
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ae88:	6a3b      	ldr	r3, [r7, #32]
 800ae8a:	3302      	adds	r3, #2
 800ae8c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	b2da      	uxtb	r2, r3
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	0a1b      	lsrs	r3, r3, #8
 800aea0:	b2da      	uxtb	r2, r3
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800aeac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeae:	3b01      	subs	r3, #1
 800aeb0:	627b      	str	r3, [r7, #36]	; 0x24
 800aeb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d1e3      	bne.n	800ae80 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800aeb8:	1d3b      	adds	r3, r7, #4
 800aeba:	881b      	ldrh	r3, [r3, #0]
 800aebc:	2201      	movs	r2, #1
 800aebe:	4013      	ands	r3, r2
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d007      	beq.n	800aed6 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800aec6:	6a3b      	ldr	r3, [r7, #32]
 800aec8:	881b      	ldrh	r3, [r3, #0]
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800aece:	693b      	ldr	r3, [r7, #16]
 800aed0:	b2da      	uxtb	r2, r3
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	701a      	strb	r2, [r3, #0]
  }
}
 800aed6:	46c0      	nop			; (mov r8, r8)
 800aed8:	46bd      	mov	sp, r7
 800aeda:	b00a      	add	sp, #40	; 0x28
 800aedc:	bd80      	pop	{r7, pc}

0800aede <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aede:	b580      	push	{r7, lr}
 800aee0:	b084      	sub	sp, #16
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
 800aee6:	000a      	movs	r2, r1
 800aee8:	1cfb      	adds	r3, r7, #3
 800aeea:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800aeec:	230f      	movs	r3, #15
 800aeee:	18fb      	adds	r3, r7, r3
 800aef0:	2200      	movs	r2, #0
 800aef2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	7c1b      	ldrb	r3, [r3, #16]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d116      	bne.n	800af2a <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aefc:	2380      	movs	r3, #128	; 0x80
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	2202      	movs	r2, #2
 800af04:	2181      	movs	r1, #129	; 0x81
 800af06:	f002 f8b4 	bl	800d072 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2201      	movs	r2, #1
 800af0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800af10:	2380      	movs	r3, #128	; 0x80
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	2202      	movs	r2, #2
 800af18:	2101      	movs	r1, #1
 800af1a:	f002 f8aa 	bl	800d072 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	23b6      	movs	r3, #182	; 0xb6
 800af22:	005b      	lsls	r3, r3, #1
 800af24:	2101      	movs	r1, #1
 800af26:	50d1      	str	r1, [r2, r3]
 800af28:	e013      	b.n	800af52 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	2340      	movs	r3, #64	; 0x40
 800af2e:	2202      	movs	r2, #2
 800af30:	2181      	movs	r1, #129	; 0x81
 800af32:	f002 f89e 	bl	800d072 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2201      	movs	r2, #1
 800af3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	2340      	movs	r3, #64	; 0x40
 800af40:	2202      	movs	r2, #2
 800af42:	2101      	movs	r1, #1
 800af44:	f002 f895 	bl	800d072 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800af48:	687a      	ldr	r2, [r7, #4]
 800af4a:	23b6      	movs	r3, #182	; 0xb6
 800af4c:	005b      	lsls	r3, r3, #1
 800af4e:	2101      	movs	r1, #1
 800af50:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	2308      	movs	r3, #8
 800af56:	2203      	movs	r2, #3
 800af58:	2182      	movs	r1, #130	; 0x82
 800af5a:	f002 f88a 	bl	800d072 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2201      	movs	r2, #1
 800af62:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800af64:	2387      	movs	r3, #135	; 0x87
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	0018      	movs	r0, r3
 800af6a:	f002 fa1b 	bl	800d3a4 <USBD_static_malloc>
 800af6e:	0001      	movs	r1, r0
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	23ae      	movs	r3, #174	; 0xae
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	23ae      	movs	r3, #174	; 0xae
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	58d3      	ldr	r3, [r2, r3]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d104      	bne.n	800af8e <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800af84:	230f      	movs	r3, #15
 800af86:	18fb      	adds	r3, r7, r3
 800af88:	2201      	movs	r2, #1
 800af8a:	701a      	strb	r2, [r3, #0]
 800af8c:	e02c      	b.n	800afe8 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	23ae      	movs	r3, #174	; 0xae
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	58d3      	ldr	r3, [r2, r3]
 800af96:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	23af      	movs	r3, #175	; 0xaf
 800af9c:	009b      	lsls	r3, r3, #2
 800af9e:	58d3      	ldr	r3, [r2, r3]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800afa4:	68ba      	ldr	r2, [r7, #8]
 800afa6:	2385      	movs	r3, #133	; 0x85
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	2100      	movs	r1, #0
 800afac:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800afae:	68ba      	ldr	r2, [r7, #8]
 800afb0:	2386      	movs	r3, #134	; 0x86
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	2100      	movs	r1, #0
 800afb6:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	7c1b      	ldrb	r3, [r3, #16]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d10a      	bne.n	800afd6 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800afc0:	68ba      	ldr	r2, [r7, #8]
 800afc2:	2381      	movs	r3, #129	; 0x81
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	58d2      	ldr	r2, [r2, r3]
 800afc8:	2380      	movs	r3, #128	; 0x80
 800afca:	009b      	lsls	r3, r3, #2
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	2101      	movs	r1, #1
 800afd0:	f002 f99a 	bl	800d308 <USBD_LL_PrepareReceive>
 800afd4:	e008      	b.n	800afe8 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800afd6:	68ba      	ldr	r2, [r7, #8]
 800afd8:	2381      	movs	r3, #129	; 0x81
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	58d2      	ldr	r2, [r2, r3]
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	2340      	movs	r3, #64	; 0x40
 800afe2:	2101      	movs	r1, #1
 800afe4:	f002 f990 	bl	800d308 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800afe8:	230f      	movs	r3, #15
 800afea:	18fb      	adds	r3, r7, r3
 800afec:	781b      	ldrb	r3, [r3, #0]
}
 800afee:	0018      	movs	r0, r3
 800aff0:	46bd      	mov	sp, r7
 800aff2:	b004      	add	sp, #16
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aff6:	b580      	push	{r7, lr}
 800aff8:	b084      	sub	sp, #16
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
 800affe:	000a      	movs	r2, r1
 800b000:	1cfb      	adds	r3, r7, #3
 800b002:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800b004:	230f      	movs	r3, #15
 800b006:	18fb      	adds	r3, r7, r3
 800b008:	2200      	movs	r2, #0
 800b00a:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2181      	movs	r1, #129	; 0x81
 800b010:	0018      	movs	r0, r3
 800b012:	f002 f865 	bl	800d0e0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2200      	movs	r2, #0
 800b01a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2101      	movs	r1, #1
 800b020:	0018      	movs	r0, r3
 800b022:	f002 f85d 	bl	800d0e0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	23b6      	movs	r3, #182	; 0xb6
 800b02a:	005b      	lsls	r3, r3, #1
 800b02c:	2100      	movs	r1, #0
 800b02e:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2182      	movs	r1, #130	; 0x82
 800b034:	0018      	movs	r0, r3
 800b036:	f002 f853 	bl	800d0e0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	23ae      	movs	r3, #174	; 0xae
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	58d3      	ldr	r3, [r2, r3]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d011      	beq.n	800b070 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	23af      	movs	r3, #175	; 0xaf
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	58d3      	ldr	r3, [r2, r3]
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	23ae      	movs	r3, #174	; 0xae
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	58d3      	ldr	r3, [r2, r3]
 800b060:	0018      	movs	r0, r3
 800b062:	f002 f9ab 	bl	800d3bc <USBD_static_free>
    pdev->pClassData = NULL;
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	23ae      	movs	r3, #174	; 0xae
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	2100      	movs	r1, #0
 800b06e:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800b070:	230f      	movs	r3, #15
 800b072:	18fb      	adds	r3, r7, r3
 800b074:	781b      	ldrb	r3, [r3, #0]
}
 800b076:	0018      	movs	r0, r3
 800b078:	46bd      	mov	sp, r7
 800b07a:	b004      	add	sp, #16
 800b07c:	bd80      	pop	{r7, pc}
	...

0800b080 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b086      	sub	sp, #24
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b08a:	687a      	ldr	r2, [r7, #4]
 800b08c:	23ae      	movs	r3, #174	; 0xae
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	58d3      	ldr	r3, [r2, r3]
 800b092:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b094:	230f      	movs	r3, #15
 800b096:	18fb      	adds	r3, r7, r3
 800b098:	2200      	movs	r2, #0
 800b09a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800b09c:	230c      	movs	r3, #12
 800b09e:	18fb      	adds	r3, r7, r3
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800b0a4:	2317      	movs	r3, #23
 800b0a6:	18fb      	adds	r3, r7, r3
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	001a      	movs	r2, r3
 800b0b2:	2360      	movs	r3, #96	; 0x60
 800b0b4:	4013      	ands	r3, r2
 800b0b6:	d03d      	beq.n	800b134 <USBD_CDC_Setup+0xb4>
 800b0b8:	2b20      	cmp	r3, #32
 800b0ba:	d000      	beq.n	800b0be <USBD_CDC_Setup+0x3e>
 800b0bc:	e094      	b.n	800b1e8 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	88db      	ldrh	r3, [r3, #6]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d02b      	beq.n	800b11e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	b25b      	sxtb	r3, r3
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	da12      	bge.n	800b0f6 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	23af      	movs	r3, #175	; 0xaf
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	58d3      	ldr	r3, [r2, r3]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b0de:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b0e0:	683a      	ldr	r2, [r7, #0]
 800b0e2:	88d2      	ldrh	r2, [r2, #6]
 800b0e4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b0e6:	6939      	ldr	r1, [r7, #16]
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	88da      	ldrh	r2, [r3, #6]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	0018      	movs	r0, r3
 800b0f0:	f001 fbb2 	bl	800c858 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b0f4:	e083      	b.n	800b1fe <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	7859      	ldrb	r1, [r3, #1]
 800b0fa:	693a      	ldr	r2, [r7, #16]
 800b0fc:	2380      	movs	r3, #128	; 0x80
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	88db      	ldrh	r3, [r3, #6]
 800b106:	b2d9      	uxtb	r1, r3
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	4a40      	ldr	r2, [pc, #256]	; (800b20c <USBD_CDC_Setup+0x18c>)
 800b10c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b10e:	6939      	ldr	r1, [r7, #16]
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	88da      	ldrh	r2, [r3, #6]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	0018      	movs	r0, r3
 800b118:	f001 fbd1 	bl	800c8be <USBD_CtlPrepareRx>
      break;
 800b11c:	e06f      	b.n	800b1fe <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	23af      	movs	r3, #175	; 0xaf
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	58d3      	ldr	r3, [r2, r3]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	683a      	ldr	r2, [r7, #0]
 800b12a:	7850      	ldrb	r0, [r2, #1]
 800b12c:	6839      	ldr	r1, [r7, #0]
 800b12e:	2200      	movs	r2, #0
 800b130:	4798      	blx	r3
      break;
 800b132:	e064      	b.n	800b1fe <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	785b      	ldrb	r3, [r3, #1]
 800b138:	2b0b      	cmp	r3, #11
 800b13a:	d037      	beq.n	800b1ac <USBD_CDC_Setup+0x12c>
 800b13c:	dc47      	bgt.n	800b1ce <USBD_CDC_Setup+0x14e>
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d002      	beq.n	800b148 <USBD_CDC_Setup+0xc8>
 800b142:	2b0a      	cmp	r3, #10
 800b144:	d019      	beq.n	800b17a <USBD_CDC_Setup+0xfa>
 800b146:	e042      	b.n	800b1ce <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	23a7      	movs	r3, #167	; 0xa7
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	5cd3      	ldrb	r3, [r2, r3]
 800b150:	2b03      	cmp	r3, #3
 800b152:	d107      	bne.n	800b164 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b154:	230c      	movs	r3, #12
 800b156:	18f9      	adds	r1, r7, r3
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2202      	movs	r2, #2
 800b15c:	0018      	movs	r0, r3
 800b15e:	f001 fb7b 	bl	800c858 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b162:	e040      	b.n	800b1e6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800b164:	683a      	ldr	r2, [r7, #0]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	0011      	movs	r1, r2
 800b16a:	0018      	movs	r0, r3
 800b16c:	f001 faf6 	bl	800c75c <USBD_CtlError>
            ret = USBD_FAIL;
 800b170:	2317      	movs	r3, #23
 800b172:	18fb      	adds	r3, r7, r3
 800b174:	2202      	movs	r2, #2
 800b176:	701a      	strb	r2, [r3, #0]
          break;
 800b178:	e035      	b.n	800b1e6 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	23a7      	movs	r3, #167	; 0xa7
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	5cd3      	ldrb	r3, [r2, r3]
 800b182:	2b03      	cmp	r3, #3
 800b184:	d107      	bne.n	800b196 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b186:	230f      	movs	r3, #15
 800b188:	18f9      	adds	r1, r7, r3
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2201      	movs	r2, #1
 800b18e:	0018      	movs	r0, r3
 800b190:	f001 fb62 	bl	800c858 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b194:	e027      	b.n	800b1e6 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800b196:	683a      	ldr	r2, [r7, #0]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	0011      	movs	r1, r2
 800b19c:	0018      	movs	r0, r3
 800b19e:	f001 fadd 	bl	800c75c <USBD_CtlError>
            ret = USBD_FAIL;
 800b1a2:	2317      	movs	r3, #23
 800b1a4:	18fb      	adds	r3, r7, r3
 800b1a6:	2202      	movs	r2, #2
 800b1a8:	701a      	strb	r2, [r3, #0]
          break;
 800b1aa:	e01c      	b.n	800b1e6 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	23a7      	movs	r3, #167	; 0xa7
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	5cd3      	ldrb	r3, [r2, r3]
 800b1b4:	2b03      	cmp	r3, #3
 800b1b6:	d015      	beq.n	800b1e4 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800b1b8:	683a      	ldr	r2, [r7, #0]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	0011      	movs	r1, r2
 800b1be:	0018      	movs	r0, r3
 800b1c0:	f001 facc 	bl	800c75c <USBD_CtlError>
            ret = USBD_FAIL;
 800b1c4:	2317      	movs	r3, #23
 800b1c6:	18fb      	adds	r3, r7, r3
 800b1c8:	2202      	movs	r2, #2
 800b1ca:	701a      	strb	r2, [r3, #0]
          }
          break;
 800b1cc:	e00a      	b.n	800b1e4 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800b1ce:	683a      	ldr	r2, [r7, #0]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	0011      	movs	r1, r2
 800b1d4:	0018      	movs	r0, r3
 800b1d6:	f001 fac1 	bl	800c75c <USBD_CtlError>
          ret = USBD_FAIL;
 800b1da:	2317      	movs	r3, #23
 800b1dc:	18fb      	adds	r3, r7, r3
 800b1de:	2202      	movs	r2, #2
 800b1e0:	701a      	strb	r2, [r3, #0]
          break;
 800b1e2:	e000      	b.n	800b1e6 <USBD_CDC_Setup+0x166>
          break;
 800b1e4:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b1e6:	e00a      	b.n	800b1fe <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800b1e8:	683a      	ldr	r2, [r7, #0]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	0011      	movs	r1, r2
 800b1ee:	0018      	movs	r0, r3
 800b1f0:	f001 fab4 	bl	800c75c <USBD_CtlError>
      ret = USBD_FAIL;
 800b1f4:	2317      	movs	r3, #23
 800b1f6:	18fb      	adds	r3, r7, r3
 800b1f8:	2202      	movs	r2, #2
 800b1fa:	701a      	strb	r2, [r3, #0]
      break;
 800b1fc:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800b1fe:	2317      	movs	r3, #23
 800b200:	18fb      	adds	r3, r7, r3
 800b202:	781b      	ldrb	r3, [r3, #0]
}
 800b204:	0018      	movs	r0, r3
 800b206:	46bd      	mov	sp, r7
 800b208:	b006      	add	sp, #24
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	00000201 	.word	0x00000201

0800b210 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	000a      	movs	r2, r1
 800b21a:	1cfb      	adds	r3, r7, #3
 800b21c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	23ae      	movs	r3, #174	; 0xae
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	58d3      	ldr	r3, [r2, r3]
 800b226:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	23b0      	movs	r3, #176	; 0xb0
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	58d3      	ldr	r3, [r2, r3]
 800b230:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b232:	687a      	ldr	r2, [r7, #4]
 800b234:	23ae      	movs	r3, #174	; 0xae
 800b236:	009b      	lsls	r3, r3, #2
 800b238:	58d3      	ldr	r3, [r2, r3]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d03e      	beq.n	800b2bc <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b23e:	1cfb      	adds	r3, r7, #3
 800b240:	781a      	ldrb	r2, [r3, #0]
 800b242:	6879      	ldr	r1, [r7, #4]
 800b244:	0013      	movs	r3, r2
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	189b      	adds	r3, r3, r2
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	18cb      	adds	r3, r1, r3
 800b24e:	331c      	adds	r3, #28
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d02b      	beq.n	800b2ae <USBD_CDC_DataIn+0x9e>
 800b256:	1cfb      	adds	r3, r7, #3
 800b258:	781a      	ldrb	r2, [r3, #0]
 800b25a:	6879      	ldr	r1, [r7, #4]
 800b25c:	0013      	movs	r3, r2
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	189b      	adds	r3, r3, r2
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	18cb      	adds	r3, r1, r3
 800b266:	331c      	adds	r3, #28
 800b268:	6818      	ldr	r0, [r3, #0]
 800b26a:	1cfb      	adds	r3, r7, #3
 800b26c:	781a      	ldrb	r2, [r3, #0]
 800b26e:	68b9      	ldr	r1, [r7, #8]
 800b270:	0013      	movs	r3, r2
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	189b      	adds	r3, r3, r2
 800b276:	00db      	lsls	r3, r3, #3
 800b278:	18cb      	adds	r3, r1, r3
 800b27a:	3338      	adds	r3, #56	; 0x38
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	0019      	movs	r1, r3
 800b280:	f7f4 ffda 	bl	8000238 <__aeabi_uidivmod>
 800b284:	1e0b      	subs	r3, r1, #0
 800b286:	d112      	bne.n	800b2ae <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b288:	1cfb      	adds	r3, r7, #3
 800b28a:	781a      	ldrb	r2, [r3, #0]
 800b28c:	6879      	ldr	r1, [r7, #4]
 800b28e:	0013      	movs	r3, r2
 800b290:	009b      	lsls	r3, r3, #2
 800b292:	189b      	adds	r3, r3, r2
 800b294:	009b      	lsls	r3, r3, #2
 800b296:	18cb      	adds	r3, r1, r3
 800b298:	331c      	adds	r3, #28
 800b29a:	2200      	movs	r2, #0
 800b29c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b29e:	1cfb      	adds	r3, r7, #3
 800b2a0:	7819      	ldrb	r1, [r3, #0]
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f001 fff7 	bl	800d29a <USBD_LL_Transmit>
 800b2ac:	e004      	b.n	800b2b8 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800b2ae:	68fa      	ldr	r2, [r7, #12]
 800b2b0:	2385      	movs	r3, #133	; 0x85
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	e000      	b.n	800b2be <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800b2bc:	2302      	movs	r3, #2
  }
}
 800b2be:	0018      	movs	r0, r3
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	b004      	add	sp, #16
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b084      	sub	sp, #16
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
 800b2ce:	000a      	movs	r2, r1
 800b2d0:	1cfb      	adds	r3, r7, #3
 800b2d2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	23ae      	movs	r3, #174	; 0xae
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	58d3      	ldr	r3, [r2, r3]
 800b2dc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b2de:	1cfb      	adds	r3, r7, #3
 800b2e0:	781a      	ldrb	r2, [r3, #0]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	0011      	movs	r1, r2
 800b2e6:	0018      	movs	r0, r3
 800b2e8:	f002 f845 	bl	800d376 <USBD_LL_GetRxDataSize>
 800b2ec:	0001      	movs	r1, r0
 800b2ee:	68fa      	ldr	r2, [r7, #12]
 800b2f0:	2383      	movs	r3, #131	; 0x83
 800b2f2:	009b      	lsls	r3, r3, #2
 800b2f4:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b2f6:	687a      	ldr	r2, [r7, #4]
 800b2f8:	23ae      	movs	r3, #174	; 0xae
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	58d3      	ldr	r3, [r2, r3]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d011      	beq.n	800b326 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	23af      	movs	r3, #175	; 0xaf
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	58d3      	ldr	r3, [r2, r3]
 800b30a:	68da      	ldr	r2, [r3, #12]
 800b30c:	68f9      	ldr	r1, [r7, #12]
 800b30e:	2381      	movs	r3, #129	; 0x81
 800b310:	009b      	lsls	r3, r3, #2
 800b312:	58c8      	ldr	r0, [r1, r3]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2183      	movs	r1, #131	; 0x83
 800b318:	0089      	lsls	r1, r1, #2
 800b31a:	468c      	mov	ip, r1
 800b31c:	4463      	add	r3, ip
 800b31e:	0019      	movs	r1, r3
 800b320:	4790      	blx	r2

    return USBD_OK;
 800b322:	2300      	movs	r3, #0
 800b324:	e000      	b.n	800b328 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800b326:	2302      	movs	r3, #2
  }
}
 800b328:	0018      	movs	r0, r3
 800b32a:	46bd      	mov	sp, r7
 800b32c:	b004      	add	sp, #16
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b330:	b590      	push	{r4, r7, lr}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b338:	687a      	ldr	r2, [r7, #4]
 800b33a:	23ae      	movs	r3, #174	; 0xae
 800b33c:	009b      	lsls	r3, r3, #2
 800b33e:	58d3      	ldr	r3, [r2, r3]
 800b340:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	23af      	movs	r3, #175	; 0xaf
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	58d3      	ldr	r3, [r2, r3]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d019      	beq.n	800b382 <USBD_CDC_EP0_RxReady+0x52>
 800b34e:	68fa      	ldr	r2, [r7, #12]
 800b350:	2380      	movs	r3, #128	; 0x80
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	5cd3      	ldrb	r3, [r2, r3]
 800b356:	2bff      	cmp	r3, #255	; 0xff
 800b358:	d013      	beq.n	800b382 <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	23af      	movs	r3, #175	; 0xaf
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	58d3      	ldr	r3, [r2, r3]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	68f9      	ldr	r1, [r7, #12]
 800b366:	2280      	movs	r2, #128	; 0x80
 800b368:	0092      	lsls	r2, r2, #2
 800b36a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800b36c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b36e:	68fa      	ldr	r2, [r7, #12]
 800b370:	4c06      	ldr	r4, [pc, #24]	; (800b38c <USBD_CDC_EP0_RxReady+0x5c>)
 800b372:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b374:	b292      	uxth	r2, r2
 800b376:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b378:	68fa      	ldr	r2, [r7, #12]
 800b37a:	2380      	movs	r3, #128	; 0x80
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	21ff      	movs	r1, #255	; 0xff
 800b380:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800b382:	2300      	movs	r3, #0
}
 800b384:	0018      	movs	r0, r3
 800b386:	46bd      	mov	sp, r7
 800b388:	b005      	add	sp, #20
 800b38a:	bd90      	pop	{r4, r7, pc}
 800b38c:	00000201 	.word	0x00000201

0800b390 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2243      	movs	r2, #67	; 0x43
 800b39c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b39e:	4b02      	ldr	r3, [pc, #8]	; (800b3a8 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800b3a0:	0018      	movs	r0, r3
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	b002      	add	sp, #8
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	20000094 	.word	0x20000094

0800b3ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2243      	movs	r2, #67	; 0x43
 800b3b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b3ba:	4b02      	ldr	r3, [pc, #8]	; (800b3c4 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800b3bc:	0018      	movs	r0, r3
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	b002      	add	sp, #8
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	20000050 	.word	0x20000050

0800b3c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2243      	movs	r2, #67	; 0x43
 800b3d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b3d6:	4b02      	ldr	r3, [pc, #8]	; (800b3e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800b3d8:	0018      	movs	r0, r3
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	b002      	add	sp, #8
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	200000d8 	.word	0x200000d8

0800b3e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	220a      	movs	r2, #10
 800b3f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b3f2:	4b02      	ldr	r3, [pc, #8]	; (800b3fc <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800b3f4:	0018      	movs	r0, r3
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	b002      	add	sp, #8
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	2000000c 	.word	0x2000000c

0800b400 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b40a:	200f      	movs	r0, #15
 800b40c:	183b      	adds	r3, r7, r0
 800b40e:	2202      	movs	r2, #2
 800b410:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d007      	beq.n	800b428 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	23af      	movs	r3, #175	; 0xaf
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	6839      	ldr	r1, [r7, #0]
 800b420:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800b422:	183b      	adds	r3, r7, r0
 800b424:	2200      	movs	r2, #0
 800b426:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800b428:	230f      	movs	r3, #15
 800b42a:	18fb      	adds	r3, r7, r3
 800b42c:	781b      	ldrb	r3, [r3, #0]
}
 800b42e:	0018      	movs	r0, r3
 800b430:	46bd      	mov	sp, r7
 800b432:	b004      	add	sp, #16
 800b434:	bd80      	pop	{r7, pc}

0800b436 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b436:	b580      	push	{r7, lr}
 800b438:	b086      	sub	sp, #24
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	60f8      	str	r0, [r7, #12]
 800b43e:	60b9      	str	r1, [r7, #8]
 800b440:	1dbb      	adds	r3, r7, #6
 800b442:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b444:	68fa      	ldr	r2, [r7, #12]
 800b446:	23ae      	movs	r3, #174	; 0xae
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	58d3      	ldr	r3, [r2, r3]
 800b44c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b44e:	697a      	ldr	r2, [r7, #20]
 800b450:	2382      	movs	r3, #130	; 0x82
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	68b9      	ldr	r1, [r7, #8]
 800b456:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800b458:	1dbb      	adds	r3, r7, #6
 800b45a:	8819      	ldrh	r1, [r3, #0]
 800b45c:	697a      	ldr	r2, [r7, #20]
 800b45e:	2384      	movs	r3, #132	; 0x84
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	0018      	movs	r0, r3
 800b468:	46bd      	mov	sp, r7
 800b46a:	b006      	add	sp, #24
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b084      	sub	sp, #16
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
 800b476:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	23ae      	movs	r3, #174	; 0xae
 800b47c:	009b      	lsls	r3, r3, #2
 800b47e:	58d3      	ldr	r3, [r2, r3]
 800b480:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b482:	68fa      	ldr	r2, [r7, #12]
 800b484:	2381      	movs	r3, #129	; 0x81
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	6839      	ldr	r1, [r7, #0]
 800b48a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	0018      	movs	r0, r3
 800b490:	46bd      	mov	sp, r7
 800b492:	b004      	add	sp, #16
 800b494:	bd80      	pop	{r7, pc}

0800b496 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b084      	sub	sp, #16
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	23ae      	movs	r3, #174	; 0xae
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	58d3      	ldr	r3, [r2, r3]
 800b4a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	23ae      	movs	r3, #174	; 0xae
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	58d3      	ldr	r3, [r2, r3]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d022      	beq.n	800b4fa <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800b4b4:	68fa      	ldr	r2, [r7, #12]
 800b4b6:	2385      	movs	r3, #133	; 0x85
 800b4b8:	009b      	lsls	r3, r3, #2
 800b4ba:	58d3      	ldr	r3, [r2, r3]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d11a      	bne.n	800b4f6 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b4c0:	68fa      	ldr	r2, [r7, #12]
 800b4c2:	2385      	movs	r3, #133	; 0x85
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	2101      	movs	r1, #1
 800b4c8:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	2384      	movs	r3, #132	; 0x84
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	58d2      	ldr	r2, [r2, r3]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b4d6:	68fa      	ldr	r2, [r7, #12]
 800b4d8:	2382      	movs	r3, #130	; 0x82
 800b4da:	009b      	lsls	r3, r3, #2
 800b4dc:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800b4de:	68fa      	ldr	r2, [r7, #12]
 800b4e0:	2384      	movs	r3, #132	; 0x84
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	000a      	movs	r2, r1
 800b4ec:	2181      	movs	r1, #129	; 0x81
 800b4ee:	f001 fed4 	bl	800d29a <USBD_LL_Transmit>

      return USBD_OK;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	e002      	b.n	800b4fc <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e000      	b.n	800b4fc <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800b4fa:	2302      	movs	r3, #2
  }
}
 800b4fc:	0018      	movs	r0, r3
 800b4fe:	46bd      	mov	sp, r7
 800b500:	b004      	add	sp, #16
 800b502:	bd80      	pop	{r7, pc}

0800b504 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b50c:	687a      	ldr	r2, [r7, #4]
 800b50e:	23ae      	movs	r3, #174	; 0xae
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	58d3      	ldr	r3, [r2, r3]
 800b514:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	23ae      	movs	r3, #174	; 0xae
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	58d3      	ldr	r3, [r2, r3]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d019      	beq.n	800b556 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	7c1b      	ldrb	r3, [r3, #16]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d10a      	bne.n	800b540 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b52a:	68fa      	ldr	r2, [r7, #12]
 800b52c:	2381      	movs	r3, #129	; 0x81
 800b52e:	009b      	lsls	r3, r3, #2
 800b530:	58d2      	ldr	r2, [r2, r3]
 800b532:	2380      	movs	r3, #128	; 0x80
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	2101      	movs	r1, #1
 800b53a:	f001 fee5 	bl	800d308 <USBD_LL_PrepareReceive>
 800b53e:	e008      	b.n	800b552 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b540:	68fa      	ldr	r2, [r7, #12]
 800b542:	2381      	movs	r3, #129	; 0x81
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	58d2      	ldr	r2, [r2, r3]
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	2340      	movs	r3, #64	; 0x40
 800b54c:	2101      	movs	r1, #1
 800b54e:	f001 fedb 	bl	800d308 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b552:	2300      	movs	r3, #0
 800b554:	e000      	b.n	800b558 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800b556:	2302      	movs	r3, #2
  }
}
 800b558:	0018      	movs	r0, r3
 800b55a:	46bd      	mov	sp, r7
 800b55c:	b004      	add	sp, #16
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	1dfb      	adds	r3, r7, #7
 800b56c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d101      	bne.n	800b578 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b574:	2302      	movs	r3, #2
 800b576:	e020      	b.n	800b5ba <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b578:	68fa      	ldr	r2, [r7, #12]
 800b57a:	23ad      	movs	r3, #173	; 0xad
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	58d3      	ldr	r3, [r2, r3]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d004      	beq.n	800b58e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800b584:	68fa      	ldr	r2, [r7, #12]
 800b586:	23ad      	movs	r3, #173	; 0xad
 800b588:	009b      	lsls	r3, r3, #2
 800b58a:	2100      	movs	r1, #0
 800b58c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d004      	beq.n	800b59e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b594:	68fa      	ldr	r2, [r7, #12]
 800b596:	23ac      	movs	r3, #172	; 0xac
 800b598:	009b      	lsls	r3, r3, #2
 800b59a:	68b9      	ldr	r1, [r7, #8]
 800b59c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	23a7      	movs	r3, #167	; 0xa7
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	2101      	movs	r1, #1
 800b5a6:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	1dfa      	adds	r2, r7, #7
 800b5ac:	7812      	ldrb	r2, [r2, #0]
 800b5ae:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	0018      	movs	r0, r3
 800b5b4:	f001 fcd4 	bl	800cf60 <USBD_LL_Init>

  return USBD_OK;
 800b5b8:	2300      	movs	r3, #0
}
 800b5ba:	0018      	movs	r0, r3
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	b004      	add	sp, #16
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b084      	sub	sp, #16
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
 800b5ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b5cc:	200f      	movs	r0, #15
 800b5ce:	183b      	adds	r3, r7, r0
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d008      	beq.n	800b5ec <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b5da:	687a      	ldr	r2, [r7, #4]
 800b5dc:	23ad      	movs	r3, #173	; 0xad
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	6839      	ldr	r1, [r7, #0]
 800b5e2:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800b5e4:	183b      	adds	r3, r7, r0
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	701a      	strb	r2, [r3, #0]
 800b5ea:	e003      	b.n	800b5f4 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b5ec:	230f      	movs	r3, #15
 800b5ee:	18fb      	adds	r3, r7, r3
 800b5f0:	2202      	movs	r2, #2
 800b5f2:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800b5f4:	230f      	movs	r3, #15
 800b5f6:	18fb      	adds	r3, r7, r3
 800b5f8:	781b      	ldrb	r3, [r3, #0]
}
 800b5fa:	0018      	movs	r0, r3
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	b004      	add	sp, #16
 800b600:	bd80      	pop	{r7, pc}

0800b602 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b082      	sub	sp, #8
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	0018      	movs	r0, r3
 800b60e:	f001 fd0b 	bl	800d028 <USBD_LL_Start>

  return USBD_OK;
 800b612:	2300      	movs	r3, #0
}
 800b614:	0018      	movs	r0, r3
 800b616:	46bd      	mov	sp, r7
 800b618:	b002      	add	sp, #8
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b624:	2300      	movs	r3, #0
}
 800b626:	0018      	movs	r0, r3
 800b628:	46bd      	mov	sp, r7
 800b62a:	b002      	add	sp, #8
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b62e:	b590      	push	{r4, r7, lr}
 800b630:	b085      	sub	sp, #20
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
 800b636:	000a      	movs	r2, r1
 800b638:	1cfb      	adds	r3, r7, #3
 800b63a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b63c:	240f      	movs	r4, #15
 800b63e:	193b      	adds	r3, r7, r4
 800b640:	2202      	movs	r2, #2
 800b642:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	23ad      	movs	r3, #173	; 0xad
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	58d3      	ldr	r3, [r2, r3]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00e      	beq.n	800b66e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b650:	687a      	ldr	r2, [r7, #4]
 800b652:	23ad      	movs	r3, #173	; 0xad
 800b654:	009b      	lsls	r3, r3, #2
 800b656:	58d3      	ldr	r3, [r2, r3]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	1cfa      	adds	r2, r7, #3
 800b65c:	7811      	ldrb	r1, [r2, #0]
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	0010      	movs	r0, r2
 800b662:	4798      	blx	r3
 800b664:	1e03      	subs	r3, r0, #0
 800b666:	d102      	bne.n	800b66e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800b668:	193b      	adds	r3, r7, r4
 800b66a:	2200      	movs	r2, #0
 800b66c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800b66e:	230f      	movs	r3, #15
 800b670:	18fb      	adds	r3, r7, r3
 800b672:	781b      	ldrb	r3, [r3, #0]
}
 800b674:	0018      	movs	r0, r3
 800b676:	46bd      	mov	sp, r7
 800b678:	b005      	add	sp, #20
 800b67a:	bd90      	pop	{r4, r7, pc}

0800b67c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	000a      	movs	r2, r1
 800b686:	1cfb      	adds	r3, r7, #3
 800b688:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	23ad      	movs	r3, #173	; 0xad
 800b68e:	009b      	lsls	r3, r3, #2
 800b690:	58d3      	ldr	r3, [r2, r3]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	1cfa      	adds	r2, r7, #3
 800b696:	7811      	ldrb	r1, [r2, #0]
 800b698:	687a      	ldr	r2, [r7, #4]
 800b69a:	0010      	movs	r0, r2
 800b69c:	4798      	blx	r3

  return USBD_OK;
 800b69e:	2300      	movs	r3, #0
}
 800b6a0:	0018      	movs	r0, r3
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	b002      	add	sp, #8
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	22aa      	movs	r2, #170	; 0xaa
 800b6b6:	0092      	lsls	r2, r2, #2
 800b6b8:	4694      	mov	ip, r2
 800b6ba:	4463      	add	r3, ip
 800b6bc:	683a      	ldr	r2, [r7, #0]
 800b6be:	0011      	movs	r1, r2
 800b6c0:	0018      	movs	r0, r3
 800b6c2:	f001 f810 	bl	800c6e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	23a5      	movs	r3, #165	; 0xa5
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	2101      	movs	r1, #1
 800b6ce:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4a23      	ldr	r2, [pc, #140]	; (800b760 <USBD_LL_SetupStage+0xb8>)
 800b6d4:	5a9b      	ldrh	r3, [r3, r2]
 800b6d6:	0019      	movs	r1, r3
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	23a6      	movs	r3, #166	; 0xa6
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	23aa      	movs	r3, #170	; 0xaa
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	5cd3      	ldrb	r3, [r2, r3]
 800b6e8:	001a      	movs	r2, r3
 800b6ea:	231f      	movs	r3, #31
 800b6ec:	4013      	ands	r3, r2
 800b6ee:	2b02      	cmp	r3, #2
 800b6f0:	d019      	beq.n	800b726 <USBD_LL_SetupStage+0x7e>
 800b6f2:	d822      	bhi.n	800b73a <USBD_LL_SetupStage+0x92>
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d002      	beq.n	800b6fe <USBD_LL_SetupStage+0x56>
 800b6f8:	2b01      	cmp	r3, #1
 800b6fa:	d00a      	beq.n	800b712 <USBD_LL_SetupStage+0x6a>
 800b6fc:	e01d      	b.n	800b73a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	22aa      	movs	r2, #170	; 0xaa
 800b702:	0092      	lsls	r2, r2, #2
 800b704:	189a      	adds	r2, r3, r2
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	0011      	movs	r1, r2
 800b70a:	0018      	movs	r0, r3
 800b70c:	f000 fa10 	bl	800bb30 <USBD_StdDevReq>
      break;
 800b710:	e020      	b.n	800b754 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	22aa      	movs	r2, #170	; 0xaa
 800b716:	0092      	lsls	r2, r2, #2
 800b718:	189a      	adds	r2, r3, r2
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	0011      	movs	r1, r2
 800b71e:	0018      	movs	r0, r3
 800b720:	f000 fa78 	bl	800bc14 <USBD_StdItfReq>
      break;
 800b724:	e016      	b.n	800b754 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	22aa      	movs	r2, #170	; 0xaa
 800b72a:	0092      	lsls	r2, r2, #2
 800b72c:	189a      	adds	r2, r3, r2
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	0011      	movs	r1, r2
 800b732:	0018      	movs	r0, r3
 800b734:	f000 fac5 	bl	800bcc2 <USBD_StdEPReq>
      break;
 800b738:	e00c      	b.n	800b754 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	23aa      	movs	r3, #170	; 0xaa
 800b73e:	009b      	lsls	r3, r3, #2
 800b740:	5cd3      	ldrb	r3, [r2, r3]
 800b742:	227f      	movs	r2, #127	; 0x7f
 800b744:	4393      	bics	r3, r2
 800b746:	b2da      	uxtb	r2, r3
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	0011      	movs	r1, r2
 800b74c:	0018      	movs	r0, r3
 800b74e:	f001 fcf2 	bl	800d136 <USBD_LL_StallEP>
      break;
 800b752:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800b754:	2300      	movs	r3, #0
}
 800b756:	0018      	movs	r0, r3
 800b758:	46bd      	mov	sp, r7
 800b75a:	b002      	add	sp, #8
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	46c0      	nop			; (mov r8, r8)
 800b760:	000002ae 	.word	0x000002ae

0800b764 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b086      	sub	sp, #24
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	607a      	str	r2, [r7, #4]
 800b76e:	200b      	movs	r0, #11
 800b770:	183b      	adds	r3, r7, r0
 800b772:	1c0a      	adds	r2, r1, #0
 800b774:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b776:	183b      	adds	r3, r7, r0
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d154      	bne.n	800b828 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	3355      	adds	r3, #85	; 0x55
 800b782:	33ff      	adds	r3, #255	; 0xff
 800b784:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b786:	68fa      	ldr	r2, [r7, #12]
 800b788:	23a5      	movs	r3, #165	; 0xa5
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	58d3      	ldr	r3, [r2, r3]
 800b78e:	2b03      	cmp	r3, #3
 800b790:	d139      	bne.n	800b806 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	68da      	ldr	r2, [r3, #12]
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	691b      	ldr	r3, [r3, #16]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d919      	bls.n	800b7d2 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	68da      	ldr	r2, [r3, #12]
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	691b      	ldr	r3, [r3, #16]
 800b7a6:	1ad2      	subs	r2, r2, r3
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	68da      	ldr	r2, [r3, #12]
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d203      	bcs.n	800b7c0 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	e002      	b.n	800b7c6 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	6879      	ldr	r1, [r7, #4]
 800b7c8:	68f8      	ldr	r0, [r7, #12]
 800b7ca:	001a      	movs	r2, r3
 800b7cc:	f001 f89b 	bl	800c906 <USBD_CtlContinueRx>
 800b7d0:	e045      	b.n	800b85e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b7d2:	68fa      	ldr	r2, [r7, #12]
 800b7d4:	23ad      	movs	r3, #173	; 0xad
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	58d3      	ldr	r3, [r2, r3]
 800b7da:	691b      	ldr	r3, [r3, #16]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d00d      	beq.n	800b7fc <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b7e0:	68fa      	ldr	r2, [r7, #12]
 800b7e2:	23a7      	movs	r3, #167	; 0xa7
 800b7e4:	009b      	lsls	r3, r3, #2
 800b7e6:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b7e8:	2b03      	cmp	r3, #3
 800b7ea:	d107      	bne.n	800b7fc <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	23ad      	movs	r3, #173	; 0xad
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	58d3      	ldr	r3, [r2, r3]
 800b7f4:	691b      	ldr	r3, [r3, #16]
 800b7f6:	68fa      	ldr	r2, [r7, #12]
 800b7f8:	0010      	movs	r0, r2
 800b7fa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	0018      	movs	r0, r3
 800b800:	f001 f894 	bl	800c92c <USBD_CtlSendStatus>
 800b804:	e02b      	b.n	800b85e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	23a5      	movs	r3, #165	; 0xa5
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	58d3      	ldr	r3, [r2, r3]
 800b80e:	2b05      	cmp	r3, #5
 800b810:	d125      	bne.n	800b85e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b812:	68fa      	ldr	r2, [r7, #12]
 800b814:	23a5      	movs	r3, #165	; 0xa5
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	2100      	movs	r1, #0
 800b81a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2100      	movs	r1, #0
 800b820:	0018      	movs	r0, r3
 800b822:	f001 fc88 	bl	800d136 <USBD_LL_StallEP>
 800b826:	e01a      	b.n	800b85e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b828:	68fa      	ldr	r2, [r7, #12]
 800b82a:	23ad      	movs	r3, #173	; 0xad
 800b82c:	009b      	lsls	r3, r3, #2
 800b82e:	58d3      	ldr	r3, [r2, r3]
 800b830:	699b      	ldr	r3, [r3, #24]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d011      	beq.n	800b85a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	23a7      	movs	r3, #167	; 0xa7
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800b83e:	2b03      	cmp	r3, #3
 800b840:	d10b      	bne.n	800b85a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	23ad      	movs	r3, #173	; 0xad
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	58d3      	ldr	r3, [r2, r3]
 800b84a:	699b      	ldr	r3, [r3, #24]
 800b84c:	220b      	movs	r2, #11
 800b84e:	18ba      	adds	r2, r7, r2
 800b850:	7811      	ldrb	r1, [r2, #0]
 800b852:	68fa      	ldr	r2, [r7, #12]
 800b854:	0010      	movs	r0, r2
 800b856:	4798      	blx	r3
 800b858:	e001      	b.n	800b85e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b85a:	2302      	movs	r3, #2
 800b85c:	e000      	b.n	800b860 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800b85e:	2300      	movs	r3, #0
}
 800b860:	0018      	movs	r0, r3
 800b862:	46bd      	mov	sp, r7
 800b864:	b006      	add	sp, #24
 800b866:	bd80      	pop	{r7, pc}

0800b868 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b086      	sub	sp, #24
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	607a      	str	r2, [r7, #4]
 800b872:	200b      	movs	r0, #11
 800b874:	183b      	adds	r3, r7, r0
 800b876:	1c0a      	adds	r2, r1, #0
 800b878:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b87a:	183b      	adds	r3, r7, r0
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d000      	beq.n	800b884 <USBD_LL_DataInStage+0x1c>
 800b882:	e08e      	b.n	800b9a2 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	3314      	adds	r3, #20
 800b888:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b88a:	68fa      	ldr	r2, [r7, #12]
 800b88c:	23a5      	movs	r3, #165	; 0xa5
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	58d3      	ldr	r3, [r2, r3]
 800b892:	2b02      	cmp	r3, #2
 800b894:	d164      	bne.n	800b960 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	68da      	ldr	r2, [r3, #12]
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	691b      	ldr	r3, [r3, #16]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d915      	bls.n	800b8ce <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	68da      	ldr	r2, [r3, #12]
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	691b      	ldr	r3, [r3, #16]
 800b8aa:	1ad2      	subs	r2, r2, r3
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	68db      	ldr	r3, [r3, #12]
 800b8b4:	b29a      	uxth	r2, r3
 800b8b6:	6879      	ldr	r1, [r7, #4]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	0018      	movs	r0, r3
 800b8bc:	f000 ffec 	bl	800c898 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	2100      	movs	r1, #0
 800b8c8:	f001 fd1e 	bl	800d308 <USBD_LL_PrepareReceive>
 800b8cc:	e059      	b.n	800b982 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	689a      	ldr	r2, [r3, #8]
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	691b      	ldr	r3, [r3, #16]
 800b8d6:	0019      	movs	r1, r3
 800b8d8:	0010      	movs	r0, r2
 800b8da:	f7f4 fcad 	bl	8000238 <__aeabi_uidivmod>
 800b8de:	1e0b      	subs	r3, r1, #0
 800b8e0:	d11f      	bne.n	800b922 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	689a      	ldr	r2, [r3, #8]
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d319      	bcc.n	800b922 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	689a      	ldr	r2, [r3, #8]
 800b8f2:	68f9      	ldr	r1, [r7, #12]
 800b8f4:	23a6      	movs	r3, #166	; 0xa6
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d211      	bcs.n	800b922 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	2200      	movs	r2, #0
 800b902:	2100      	movs	r1, #0
 800b904:	0018      	movs	r0, r3
 800b906:	f000 ffc7 	bl	800c898 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b90a:	68fa      	ldr	r2, [r7, #12]
 800b90c:	23a6      	movs	r3, #166	; 0xa6
 800b90e:	009b      	lsls	r3, r3, #2
 800b910:	2100      	movs	r1, #0
 800b912:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	2300      	movs	r3, #0
 800b918:	2200      	movs	r2, #0
 800b91a:	2100      	movs	r1, #0
 800b91c:	f001 fcf4 	bl	800d308 <USBD_LL_PrepareReceive>
 800b920:	e02f      	b.n	800b982 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b922:	68fa      	ldr	r2, [r7, #12]
 800b924:	23ad      	movs	r3, #173	; 0xad
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	58d3      	ldr	r3, [r2, r3]
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d00d      	beq.n	800b94c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b930:	68fa      	ldr	r2, [r7, #12]
 800b932:	23a7      	movs	r3, #167	; 0xa7
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b938:	2b03      	cmp	r3, #3
 800b93a:	d107      	bne.n	800b94c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b93c:	68fa      	ldr	r2, [r7, #12]
 800b93e:	23ad      	movs	r3, #173	; 0xad
 800b940:	009b      	lsls	r3, r3, #2
 800b942:	58d3      	ldr	r3, [r2, r3]
 800b944:	68db      	ldr	r3, [r3, #12]
 800b946:	68fa      	ldr	r2, [r7, #12]
 800b948:	0010      	movs	r0, r2
 800b94a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2180      	movs	r1, #128	; 0x80
 800b950:	0018      	movs	r0, r3
 800b952:	f001 fbf0 	bl	800d136 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	0018      	movs	r0, r3
 800b95a:	f000 fffb 	bl	800c954 <USBD_CtlReceiveStatus>
 800b95e:	e010      	b.n	800b982 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	23a5      	movs	r3, #165	; 0xa5
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	58d3      	ldr	r3, [r2, r3]
 800b968:	2b04      	cmp	r3, #4
 800b96a:	d005      	beq.n	800b978 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b96c:	68fa      	ldr	r2, [r7, #12]
 800b96e:	23a5      	movs	r3, #165	; 0xa5
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b974:	2b00      	cmp	r3, #0
 800b976:	d104      	bne.n	800b982 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2180      	movs	r1, #128	; 0x80
 800b97c:	0018      	movs	r0, r3
 800b97e:	f001 fbda 	bl	800d136 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b982:	68fa      	ldr	r2, [r7, #12]
 800b984:	23a8      	movs	r3, #168	; 0xa8
 800b986:	009b      	lsls	r3, r3, #2
 800b988:	5cd3      	ldrb	r3, [r2, r3]
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d124      	bne.n	800b9d8 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	0018      	movs	r0, r3
 800b992:	f7ff fe43 	bl	800b61c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b996:	68fa      	ldr	r2, [r7, #12]
 800b998:	23a8      	movs	r3, #168	; 0xa8
 800b99a:	009b      	lsls	r3, r3, #2
 800b99c:	2100      	movs	r1, #0
 800b99e:	54d1      	strb	r1, [r2, r3]
 800b9a0:	e01a      	b.n	800b9d8 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b9a2:	68fa      	ldr	r2, [r7, #12]
 800b9a4:	23ad      	movs	r3, #173	; 0xad
 800b9a6:	009b      	lsls	r3, r3, #2
 800b9a8:	58d3      	ldr	r3, [r2, r3]
 800b9aa:	695b      	ldr	r3, [r3, #20]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d011      	beq.n	800b9d4 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b9b0:	68fa      	ldr	r2, [r7, #12]
 800b9b2:	23a7      	movs	r3, #167	; 0xa7
 800b9b4:	009b      	lsls	r3, r3, #2
 800b9b6:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800b9b8:	2b03      	cmp	r3, #3
 800b9ba:	d10b      	bne.n	800b9d4 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	23ad      	movs	r3, #173	; 0xad
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	58d3      	ldr	r3, [r2, r3]
 800b9c4:	695b      	ldr	r3, [r3, #20]
 800b9c6:	220b      	movs	r2, #11
 800b9c8:	18ba      	adds	r2, r7, r2
 800b9ca:	7811      	ldrb	r1, [r2, #0]
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	0010      	movs	r0, r2
 800b9d0:	4798      	blx	r3
 800b9d2:	e001      	b.n	800b9d8 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b9d4:	2302      	movs	r3, #2
 800b9d6:	e000      	b.n	800b9da <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	0018      	movs	r0, r3
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	b006      	add	sp, #24
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b082      	sub	sp, #8
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	2340      	movs	r3, #64	; 0x40
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	2100      	movs	r1, #0
 800b9f2:	f001 fb3e 	bl	800d072 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	23ac      	movs	r3, #172	; 0xac
 800b9fa:	005b      	lsls	r3, r3, #1
 800b9fc:	2101      	movs	r1, #1
 800b9fe:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	23b2      	movs	r3, #178	; 0xb2
 800ba04:	005b      	lsls	r3, r3, #1
 800ba06:	2140      	movs	r1, #64	; 0x40
 800ba08:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	2340      	movs	r3, #64	; 0x40
 800ba0e:	2200      	movs	r2, #0
 800ba10:	2180      	movs	r1, #128	; 0x80
 800ba12:	f001 fb2e 	bl	800d072 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2201      	movs	r2, #1
 800ba1a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2240      	movs	r2, #64	; 0x40
 800ba20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	23a7      	movs	r3, #167	; 0xa7
 800ba26:	009b      	lsls	r3, r3, #2
 800ba28:	2101      	movs	r1, #1
 800ba2a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	23a5      	movs	r3, #165	; 0xa5
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	2100      	movs	r1, #0
 800ba34:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	23a9      	movs	r3, #169	; 0xa9
 800ba40:	009b      	lsls	r3, r3, #2
 800ba42:	2100      	movs	r1, #0
 800ba44:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	23ae      	movs	r3, #174	; 0xae
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	58d3      	ldr	r3, [r2, r3]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00a      	beq.n	800ba68 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	23ad      	movs	r3, #173	; 0xad
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	58d3      	ldr	r3, [r2, r3]
 800ba5a:	685a      	ldr	r2, [r3, #4]
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	b2d9      	uxtb	r1, r3
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	0018      	movs	r0, r3
 800ba66:	4790      	blx	r2
  }

  return USBD_OK;
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	0018      	movs	r0, r3
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	b002      	add	sp, #8
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b082      	sub	sp, #8
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
 800ba7a:	000a      	movs	r2, r1
 800ba7c:	1cfb      	adds	r3, r7, #3
 800ba7e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	1cfa      	adds	r2, r7, #3
 800ba84:	7812      	ldrb	r2, [r2, #0]
 800ba86:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ba88:	2300      	movs	r3, #0
}
 800ba8a:	0018      	movs	r0, r3
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	b002      	add	sp, #8
 800ba90:	bd80      	pop	{r7, pc}
	...

0800ba94 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ba9c:	687a      	ldr	r2, [r7, #4]
 800ba9e:	23a7      	movs	r3, #167	; 0xa7
 800baa0:	009b      	lsls	r3, r3, #2
 800baa2:	5cd1      	ldrb	r1, [r2, r3]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4a06      	ldr	r2, [pc, #24]	; (800bac0 <USBD_LL_Suspend+0x2c>)
 800baa8:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	23a7      	movs	r3, #167	; 0xa7
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	2104      	movs	r1, #4
 800bab2:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800bab4:	2300      	movs	r3, #0
}
 800bab6:	0018      	movs	r0, r3
 800bab8:	46bd      	mov	sp, r7
 800baba:	b002      	add	sp, #8
 800babc:	bd80      	pop	{r7, pc}
 800babe:	46c0      	nop			; (mov r8, r8)
 800bac0:	0000029d 	.word	0x0000029d

0800bac4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	23a7      	movs	r3, #167	; 0xa7
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	5cd3      	ldrb	r3, [r2, r3]
 800bad4:	2b04      	cmp	r3, #4
 800bad6:	d106      	bne.n	800bae6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	4a05      	ldr	r2, [pc, #20]	; (800baf0 <USBD_LL_Resume+0x2c>)
 800badc:	5c99      	ldrb	r1, [r3, r2]
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	23a7      	movs	r3, #167	; 0xa7
 800bae2:	009b      	lsls	r3, r3, #2
 800bae4:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800bae6:	2300      	movs	r3, #0
}
 800bae8:	0018      	movs	r0, r3
 800baea:	46bd      	mov	sp, r7
 800baec:	b002      	add	sp, #8
 800baee:	bd80      	pop	{r7, pc}
 800baf0:	0000029d 	.word	0x0000029d

0800baf4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	23a7      	movs	r3, #167	; 0xa7
 800bb00:	009b      	lsls	r3, r3, #2
 800bb02:	5cd3      	ldrb	r3, [r2, r3]
 800bb04:	2b03      	cmp	r3, #3
 800bb06:	d10e      	bne.n	800bb26 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	23ad      	movs	r3, #173	; 0xad
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	58d3      	ldr	r3, [r2, r3]
 800bb10:	69db      	ldr	r3, [r3, #28]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d007      	beq.n	800bb26 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	23ad      	movs	r3, #173	; 0xad
 800bb1a:	009b      	lsls	r3, r3, #2
 800bb1c:	58d3      	ldr	r3, [r2, r3]
 800bb1e:	69db      	ldr	r3, [r3, #28]
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	0010      	movs	r0, r2
 800bb24:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bb26:	2300      	movs	r3, #0
}
 800bb28:	0018      	movs	r0, r3
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	b002      	add	sp, #8
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb3a:	230f      	movs	r3, #15
 800bb3c:	18fb      	adds	r3, r7, r3
 800bb3e:	2200      	movs	r2, #0
 800bb40:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	001a      	movs	r2, r3
 800bb48:	2360      	movs	r3, #96	; 0x60
 800bb4a:	4013      	ands	r3, r2
 800bb4c:	2b40      	cmp	r3, #64	; 0x40
 800bb4e:	d004      	beq.n	800bb5a <USBD_StdDevReq+0x2a>
 800bb50:	d84f      	bhi.n	800bbf2 <USBD_StdDevReq+0xc2>
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00b      	beq.n	800bb6e <USBD_StdDevReq+0x3e>
 800bb56:	2b20      	cmp	r3, #32
 800bb58:	d14b      	bne.n	800bbf2 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	23ad      	movs	r3, #173	; 0xad
 800bb5e:	009b      	lsls	r3, r3, #2
 800bb60:	58d3      	ldr	r3, [r2, r3]
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	6839      	ldr	r1, [r7, #0]
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	0010      	movs	r0, r2
 800bb6a:	4798      	blx	r3
      break;
 800bb6c:	e048      	b.n	800bc00 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	785b      	ldrb	r3, [r3, #1]
 800bb72:	2b09      	cmp	r3, #9
 800bb74:	d835      	bhi.n	800bbe2 <USBD_StdDevReq+0xb2>
 800bb76:	009a      	lsls	r2, r3, #2
 800bb78:	4b25      	ldr	r3, [pc, #148]	; (800bc10 <USBD_StdDevReq+0xe0>)
 800bb7a:	18d3      	adds	r3, r2, r3
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bb80:	683a      	ldr	r2, [r7, #0]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	0011      	movs	r1, r2
 800bb86:	0018      	movs	r0, r3
 800bb88:	f000 fa52 	bl	800c030 <USBD_GetDescriptor>
          break;
 800bb8c:	e030      	b.n	800bbf0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bb8e:	683a      	ldr	r2, [r7, #0]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	0011      	movs	r1, r2
 800bb94:	0018      	movs	r0, r3
 800bb96:	f000 fbfd 	bl	800c394 <USBD_SetAddress>
          break;
 800bb9a:	e029      	b.n	800bbf0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800bb9c:	683a      	ldr	r2, [r7, #0]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	0011      	movs	r1, r2
 800bba2:	0018      	movs	r0, r3
 800bba4:	f000 fc4a 	bl	800c43c <USBD_SetConfig>
          break;
 800bba8:	e022      	b.n	800bbf0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bbaa:	683a      	ldr	r2, [r7, #0]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	0011      	movs	r1, r2
 800bbb0:	0018      	movs	r0, r3
 800bbb2:	f000 fce7 	bl	800c584 <USBD_GetConfig>
          break;
 800bbb6:	e01b      	b.n	800bbf0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bbb8:	683a      	ldr	r2, [r7, #0]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	0011      	movs	r1, r2
 800bbbe:	0018      	movs	r0, r3
 800bbc0:	f000 fd1b 	bl	800c5fa <USBD_GetStatus>
          break;
 800bbc4:	e014      	b.n	800bbf0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bbc6:	683a      	ldr	r2, [r7, #0]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	0011      	movs	r1, r2
 800bbcc:	0018      	movs	r0, r3
 800bbce:	f000 fd4e 	bl	800c66e <USBD_SetFeature>
          break;
 800bbd2:	e00d      	b.n	800bbf0 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bbd4:	683a      	ldr	r2, [r7, #0]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	0011      	movs	r1, r2
 800bbda:	0018      	movs	r0, r3
 800bbdc:	f000 fd5d 	bl	800c69a <USBD_ClrFeature>
          break;
 800bbe0:	e006      	b.n	800bbf0 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bbe2:	683a      	ldr	r2, [r7, #0]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	0011      	movs	r1, r2
 800bbe8:	0018      	movs	r0, r3
 800bbea:	f000 fdb7 	bl	800c75c <USBD_CtlError>
          break;
 800bbee:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800bbf0:	e006      	b.n	800bc00 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800bbf2:	683a      	ldr	r2, [r7, #0]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	0011      	movs	r1, r2
 800bbf8:	0018      	movs	r0, r3
 800bbfa:	f000 fdaf 	bl	800c75c <USBD_CtlError>
      break;
 800bbfe:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800bc00:	230f      	movs	r3, #15
 800bc02:	18fb      	adds	r3, r7, r3
 800bc04:	781b      	ldrb	r3, [r3, #0]
}
 800bc06:	0018      	movs	r0, r3
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	b004      	add	sp, #16
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	46c0      	nop			; (mov r8, r8)
 800bc10:	0800df70 	.word	0x0800df70

0800bc14 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800bc14:	b5b0      	push	{r4, r5, r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc1e:	230f      	movs	r3, #15
 800bc20:	18fb      	adds	r3, r7, r3
 800bc22:	2200      	movs	r2, #0
 800bc24:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	001a      	movs	r2, r3
 800bc2c:	2360      	movs	r3, #96	; 0x60
 800bc2e:	4013      	ands	r3, r2
 800bc30:	2b40      	cmp	r3, #64	; 0x40
 800bc32:	d004      	beq.n	800bc3e <USBD_StdItfReq+0x2a>
 800bc34:	d839      	bhi.n	800bcaa <USBD_StdItfReq+0x96>
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d001      	beq.n	800bc3e <USBD_StdItfReq+0x2a>
 800bc3a:	2b20      	cmp	r3, #32
 800bc3c:	d135      	bne.n	800bcaa <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	23a7      	movs	r3, #167	; 0xa7
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	5cd3      	ldrb	r3, [r2, r3]
 800bc46:	3b01      	subs	r3, #1
 800bc48:	2b02      	cmp	r3, #2
 800bc4a:	d825      	bhi.n	800bc98 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	889b      	ldrh	r3, [r3, #4]
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d819      	bhi.n	800bc8a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	23ad      	movs	r3, #173	; 0xad
 800bc5a:	009b      	lsls	r3, r3, #2
 800bc5c:	58d3      	ldr	r3, [r2, r3]
 800bc5e:	689b      	ldr	r3, [r3, #8]
 800bc60:	250f      	movs	r5, #15
 800bc62:	197c      	adds	r4, r7, r5
 800bc64:	6839      	ldr	r1, [r7, #0]
 800bc66:	687a      	ldr	r2, [r7, #4]
 800bc68:	0010      	movs	r0, r2
 800bc6a:	4798      	blx	r3
 800bc6c:	0003      	movs	r3, r0
 800bc6e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	88db      	ldrh	r3, [r3, #6]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d116      	bne.n	800bca6 <USBD_StdItfReq+0x92>
 800bc78:	197b      	adds	r3, r7, r5
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d112      	bne.n	800bca6 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	0018      	movs	r0, r3
 800bc84:	f000 fe52 	bl	800c92c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bc88:	e00d      	b.n	800bca6 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800bc8a:	683a      	ldr	r2, [r7, #0]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	0011      	movs	r1, r2
 800bc90:	0018      	movs	r0, r3
 800bc92:	f000 fd63 	bl	800c75c <USBD_CtlError>
          break;
 800bc96:	e006      	b.n	800bca6 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800bc98:	683a      	ldr	r2, [r7, #0]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	0011      	movs	r1, r2
 800bc9e:	0018      	movs	r0, r3
 800bca0:	f000 fd5c 	bl	800c75c <USBD_CtlError>
          break;
 800bca4:	e000      	b.n	800bca8 <USBD_StdItfReq+0x94>
          break;
 800bca6:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800bca8:	e006      	b.n	800bcb8 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800bcaa:	683a      	ldr	r2, [r7, #0]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	0011      	movs	r1, r2
 800bcb0:	0018      	movs	r0, r3
 800bcb2:	f000 fd53 	bl	800c75c <USBD_CtlError>
      break;
 800bcb6:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800bcb8:	2300      	movs	r3, #0
}
 800bcba:	0018      	movs	r0, r3
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	b004      	add	sp, #16
 800bcc0:	bdb0      	pop	{r4, r5, r7, pc}

0800bcc2 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bcc2:	b5b0      	push	{r4, r5, r7, lr}
 800bcc4:	b084      	sub	sp, #16
 800bcc6:	af00      	add	r7, sp, #0
 800bcc8:	6078      	str	r0, [r7, #4]
 800bcca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bccc:	230f      	movs	r3, #15
 800bcce:	18fb      	adds	r3, r7, r3
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	889a      	ldrh	r2, [r3, #4]
 800bcd8:	230e      	movs	r3, #14
 800bcda:	18fb      	adds	r3, r7, r3
 800bcdc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	001a      	movs	r2, r3
 800bce4:	2360      	movs	r3, #96	; 0x60
 800bce6:	4013      	ands	r3, r2
 800bce8:	2b40      	cmp	r3, #64	; 0x40
 800bcea:	d006      	beq.n	800bcfa <USBD_StdEPReq+0x38>
 800bcec:	d900      	bls.n	800bcf0 <USBD_StdEPReq+0x2e>
 800bcee:	e190      	b.n	800c012 <USBD_StdEPReq+0x350>
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d00c      	beq.n	800bd0e <USBD_StdEPReq+0x4c>
 800bcf4:	2b20      	cmp	r3, #32
 800bcf6:	d000      	beq.n	800bcfa <USBD_StdEPReq+0x38>
 800bcf8:	e18b      	b.n	800c012 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	23ad      	movs	r3, #173	; 0xad
 800bcfe:	009b      	lsls	r3, r3, #2
 800bd00:	58d3      	ldr	r3, [r2, r3]
 800bd02:	689b      	ldr	r3, [r3, #8]
 800bd04:	6839      	ldr	r1, [r7, #0]
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	0010      	movs	r0, r2
 800bd0a:	4798      	blx	r3
      break;
 800bd0c:	e188      	b.n	800c020 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	001a      	movs	r2, r3
 800bd14:	2360      	movs	r3, #96	; 0x60
 800bd16:	4013      	ands	r3, r2
 800bd18:	2b20      	cmp	r3, #32
 800bd1a:	d10f      	bne.n	800bd3c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	23ad      	movs	r3, #173	; 0xad
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	58d3      	ldr	r3, [r2, r3]
 800bd24:	689b      	ldr	r3, [r3, #8]
 800bd26:	250f      	movs	r5, #15
 800bd28:	197c      	adds	r4, r7, r5
 800bd2a:	6839      	ldr	r1, [r7, #0]
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	0010      	movs	r0, r2
 800bd30:	4798      	blx	r3
 800bd32:	0003      	movs	r3, r0
 800bd34:	7023      	strb	r3, [r4, #0]

        return ret;
 800bd36:	197b      	adds	r3, r7, r5
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	e174      	b.n	800c026 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	785b      	ldrb	r3, [r3, #1]
 800bd40:	2b03      	cmp	r3, #3
 800bd42:	d007      	beq.n	800bd54 <USBD_StdEPReq+0x92>
 800bd44:	dd00      	ble.n	800bd48 <USBD_StdEPReq+0x86>
 800bd46:	e15c      	b.n	800c002 <USBD_StdEPReq+0x340>
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d100      	bne.n	800bd4e <USBD_StdEPReq+0x8c>
 800bd4c:	e092      	b.n	800be74 <USBD_StdEPReq+0x1b2>
 800bd4e:	2b01      	cmp	r3, #1
 800bd50:	d04b      	beq.n	800bdea <USBD_StdEPReq+0x128>
 800bd52:	e156      	b.n	800c002 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	23a7      	movs	r3, #167	; 0xa7
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	5cd3      	ldrb	r3, [r2, r3]
 800bd5c:	2b02      	cmp	r3, #2
 800bd5e:	d002      	beq.n	800bd66 <USBD_StdEPReq+0xa4>
 800bd60:	2b03      	cmp	r3, #3
 800bd62:	d01d      	beq.n	800bda0 <USBD_StdEPReq+0xde>
 800bd64:	e039      	b.n	800bdda <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd66:	220e      	movs	r2, #14
 800bd68:	18bb      	adds	r3, r7, r2
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d010      	beq.n	800bd92 <USBD_StdEPReq+0xd0>
 800bd70:	18bb      	adds	r3, r7, r2
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	2b80      	cmp	r3, #128	; 0x80
 800bd76:	d00c      	beq.n	800bd92 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bd78:	18bb      	adds	r3, r7, r2
 800bd7a:	781a      	ldrb	r2, [r3, #0]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	0011      	movs	r1, r2
 800bd80:	0018      	movs	r0, r3
 800bd82:	f001 f9d8 	bl	800d136 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2180      	movs	r1, #128	; 0x80
 800bd8a:	0018      	movs	r0, r3
 800bd8c:	f001 f9d3 	bl	800d136 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd90:	e02a      	b.n	800bde8 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800bd92:	683a      	ldr	r2, [r7, #0]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	0011      	movs	r1, r2
 800bd98:	0018      	movs	r0, r3
 800bd9a:	f000 fcdf 	bl	800c75c <USBD_CtlError>
              break;
 800bd9e:	e023      	b.n	800bde8 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	885b      	ldrh	r3, [r3, #2]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d113      	bne.n	800bdd0 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800bda8:	220e      	movs	r2, #14
 800bdaa:	18bb      	adds	r3, r7, r2
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d00e      	beq.n	800bdd0 <USBD_StdEPReq+0x10e>
 800bdb2:	18bb      	adds	r3, r7, r2
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	2b80      	cmp	r3, #128	; 0x80
 800bdb8:	d00a      	beq.n	800bdd0 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	88db      	ldrh	r3, [r3, #6]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d106      	bne.n	800bdd0 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bdc2:	18bb      	adds	r3, r7, r2
 800bdc4:	781a      	ldrb	r2, [r3, #0]
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	0011      	movs	r1, r2
 800bdca:	0018      	movs	r0, r3
 800bdcc:	f001 f9b3 	bl	800d136 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	0018      	movs	r0, r3
 800bdd4:	f000 fdaa 	bl	800c92c <USBD_CtlSendStatus>

              break;
 800bdd8:	e006      	b.n	800bde8 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800bdda:	683a      	ldr	r2, [r7, #0]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	0011      	movs	r1, r2
 800bde0:	0018      	movs	r0, r3
 800bde2:	f000 fcbb 	bl	800c75c <USBD_CtlError>
              break;
 800bde6:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800bde8:	e112      	b.n	800c010 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	23a7      	movs	r3, #167	; 0xa7
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	5cd3      	ldrb	r3, [r2, r3]
 800bdf2:	2b02      	cmp	r3, #2
 800bdf4:	d002      	beq.n	800bdfc <USBD_StdEPReq+0x13a>
 800bdf6:	2b03      	cmp	r3, #3
 800bdf8:	d01d      	beq.n	800be36 <USBD_StdEPReq+0x174>
 800bdfa:	e032      	b.n	800be62 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bdfc:	220e      	movs	r2, #14
 800bdfe:	18bb      	adds	r3, r7, r2
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d010      	beq.n	800be28 <USBD_StdEPReq+0x166>
 800be06:	18bb      	adds	r3, r7, r2
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	2b80      	cmp	r3, #128	; 0x80
 800be0c:	d00c      	beq.n	800be28 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800be0e:	18bb      	adds	r3, r7, r2
 800be10:	781a      	ldrb	r2, [r3, #0]
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	0011      	movs	r1, r2
 800be16:	0018      	movs	r0, r3
 800be18:	f001 f98d 	bl	800d136 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2180      	movs	r1, #128	; 0x80
 800be20:	0018      	movs	r0, r3
 800be22:	f001 f988 	bl	800d136 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800be26:	e024      	b.n	800be72 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800be28:	683a      	ldr	r2, [r7, #0]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	0011      	movs	r1, r2
 800be2e:	0018      	movs	r0, r3
 800be30:	f000 fc94 	bl	800c75c <USBD_CtlError>
              break;
 800be34:	e01d      	b.n	800be72 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	885b      	ldrh	r3, [r3, #2]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d118      	bne.n	800be70 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800be3e:	210e      	movs	r1, #14
 800be40:	187b      	adds	r3, r7, r1
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	227f      	movs	r2, #127	; 0x7f
 800be46:	4013      	ands	r3, r2
 800be48:	d006      	beq.n	800be58 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800be4a:	187b      	adds	r3, r7, r1
 800be4c:	781a      	ldrb	r2, [r3, #0]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	0011      	movs	r1, r2
 800be52:	0018      	movs	r0, r3
 800be54:	f001 f99a 	bl	800d18c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	0018      	movs	r0, r3
 800be5c:	f000 fd66 	bl	800c92c <USBD_CtlSendStatus>
              }
              break;
 800be60:	e006      	b.n	800be70 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800be62:	683a      	ldr	r2, [r7, #0]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	0011      	movs	r1, r2
 800be68:	0018      	movs	r0, r3
 800be6a:	f000 fc77 	bl	800c75c <USBD_CtlError>
              break;
 800be6e:	e000      	b.n	800be72 <USBD_StdEPReq+0x1b0>
              break;
 800be70:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800be72:	e0cd      	b.n	800c010 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	23a7      	movs	r3, #167	; 0xa7
 800be78:	009b      	lsls	r3, r3, #2
 800be7a:	5cd3      	ldrb	r3, [r2, r3]
 800be7c:	2b02      	cmp	r3, #2
 800be7e:	d002      	beq.n	800be86 <USBD_StdEPReq+0x1c4>
 800be80:	2b03      	cmp	r3, #3
 800be82:	d03c      	beq.n	800befe <USBD_StdEPReq+0x23c>
 800be84:	e0b5      	b.n	800bff2 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be86:	220e      	movs	r2, #14
 800be88:	18bb      	adds	r3, r7, r2
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d00a      	beq.n	800bea6 <USBD_StdEPReq+0x1e4>
 800be90:	18bb      	adds	r3, r7, r2
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	2b80      	cmp	r3, #128	; 0x80
 800be96:	d006      	beq.n	800bea6 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800be98:	683a      	ldr	r2, [r7, #0]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	0011      	movs	r1, r2
 800be9e:	0018      	movs	r0, r3
 800bea0:	f000 fc5c 	bl	800c75c <USBD_CtlError>
                break;
 800bea4:	e0ac      	b.n	800c000 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bea6:	220e      	movs	r2, #14
 800bea8:	18bb      	adds	r3, r7, r2
 800beaa:	781b      	ldrb	r3, [r3, #0]
 800beac:	b25b      	sxtb	r3, r3
 800beae:	2b00      	cmp	r3, #0
 800beb0:	da0c      	bge.n	800becc <USBD_StdEPReq+0x20a>
 800beb2:	18bb      	adds	r3, r7, r2
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	227f      	movs	r2, #127	; 0x7f
 800beb8:	401a      	ands	r2, r3
 800beba:	0013      	movs	r3, r2
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	189b      	adds	r3, r3, r2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	3310      	adds	r3, #16
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	18d3      	adds	r3, r2, r3
 800bec8:	3304      	adds	r3, #4
 800beca:	e00d      	b.n	800bee8 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800becc:	230e      	movs	r3, #14
 800bece:	18fb      	adds	r3, r7, r3
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	227f      	movs	r2, #127	; 0x7f
 800bed4:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bed6:	0013      	movs	r3, r2
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	189b      	adds	r3, r3, r2
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	3351      	adds	r3, #81	; 0x51
 800bee0:	33ff      	adds	r3, #255	; 0xff
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	18d3      	adds	r3, r2, r3
 800bee6:	3304      	adds	r3, #4
 800bee8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	2200      	movs	r2, #0
 800beee:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bef0:	68b9      	ldr	r1, [r7, #8]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2202      	movs	r2, #2
 800bef6:	0018      	movs	r0, r3
 800bef8:	f000 fcae 	bl	800c858 <USBD_CtlSendData>
              break;
 800befc:	e080      	b.n	800c000 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800befe:	220e      	movs	r2, #14
 800bf00:	18bb      	adds	r3, r7, r2
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	b25b      	sxtb	r3, r3
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	da14      	bge.n	800bf34 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bf0a:	18bb      	adds	r3, r7, r2
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	220f      	movs	r2, #15
 800bf10:	401a      	ands	r2, r3
 800bf12:	6879      	ldr	r1, [r7, #4]
 800bf14:	0013      	movs	r3, r2
 800bf16:	009b      	lsls	r3, r3, #2
 800bf18:	189b      	adds	r3, r3, r2
 800bf1a:	009b      	lsls	r3, r3, #2
 800bf1c:	18cb      	adds	r3, r1, r3
 800bf1e:	3318      	adds	r3, #24
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d11e      	bne.n	800bf64 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800bf26:	683a      	ldr	r2, [r7, #0]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	0011      	movs	r1, r2
 800bf2c:	0018      	movs	r0, r3
 800bf2e:	f000 fc15 	bl	800c75c <USBD_CtlError>
                  break;
 800bf32:	e065      	b.n	800c000 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bf34:	230e      	movs	r3, #14
 800bf36:	18fb      	adds	r3, r7, r3
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	220f      	movs	r2, #15
 800bf3c:	401a      	ands	r2, r3
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	23ac      	movs	r3, #172	; 0xac
 800bf42:	0059      	lsls	r1, r3, #1
 800bf44:	0013      	movs	r3, r2
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	189b      	adds	r3, r3, r2
 800bf4a:	009b      	lsls	r3, r3, #2
 800bf4c:	18c3      	adds	r3, r0, r3
 800bf4e:	185b      	adds	r3, r3, r1
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d106      	bne.n	800bf64 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800bf56:	683a      	ldr	r2, [r7, #0]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	0011      	movs	r1, r2
 800bf5c:	0018      	movs	r0, r3
 800bf5e:	f000 fbfd 	bl	800c75c <USBD_CtlError>
                  break;
 800bf62:	e04d      	b.n	800c000 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf64:	220e      	movs	r2, #14
 800bf66:	18bb      	adds	r3, r7, r2
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	b25b      	sxtb	r3, r3
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	da0c      	bge.n	800bf8a <USBD_StdEPReq+0x2c8>
 800bf70:	18bb      	adds	r3, r7, r2
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	227f      	movs	r2, #127	; 0x7f
 800bf76:	401a      	ands	r2, r3
 800bf78:	0013      	movs	r3, r2
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	189b      	adds	r3, r3, r2
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	3310      	adds	r3, #16
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	18d3      	adds	r3, r2, r3
 800bf86:	3304      	adds	r3, #4
 800bf88:	e00d      	b.n	800bfa6 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf8a:	230e      	movs	r3, #14
 800bf8c:	18fb      	adds	r3, r7, r3
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	227f      	movs	r2, #127	; 0x7f
 800bf92:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf94:	0013      	movs	r3, r2
 800bf96:	009b      	lsls	r3, r3, #2
 800bf98:	189b      	adds	r3, r3, r2
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	3351      	adds	r3, #81	; 0x51
 800bf9e:	33ff      	adds	r3, #255	; 0xff
 800bfa0:	687a      	ldr	r2, [r7, #4]
 800bfa2:	18d3      	adds	r3, r2, r3
 800bfa4:	3304      	adds	r3, #4
 800bfa6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bfa8:	220e      	movs	r2, #14
 800bfaa:	18bb      	adds	r3, r7, r2
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d003      	beq.n	800bfba <USBD_StdEPReq+0x2f8>
 800bfb2:	18bb      	adds	r3, r7, r2
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	2b80      	cmp	r3, #128	; 0x80
 800bfb8:	d103      	bne.n	800bfc2 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	601a      	str	r2, [r3, #0]
 800bfc0:	e010      	b.n	800bfe4 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bfc2:	230e      	movs	r3, #14
 800bfc4:	18fb      	adds	r3, r7, r3
 800bfc6:	781a      	ldrb	r2, [r3, #0]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	0011      	movs	r1, r2
 800bfcc:	0018      	movs	r0, r3
 800bfce:	f001 f908 	bl	800d1e2 <USBD_LL_IsStallEP>
 800bfd2:	1e03      	subs	r3, r0, #0
 800bfd4:	d003      	beq.n	800bfde <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	2201      	movs	r2, #1
 800bfda:	601a      	str	r2, [r3, #0]
 800bfdc:	e002      	b.n	800bfe4 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bfe4:	68b9      	ldr	r1, [r7, #8]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2202      	movs	r2, #2
 800bfea:	0018      	movs	r0, r3
 800bfec:	f000 fc34 	bl	800c858 <USBD_CtlSendData>
              break;
 800bff0:	e006      	b.n	800c000 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800bff2:	683a      	ldr	r2, [r7, #0]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	0011      	movs	r1, r2
 800bff8:	0018      	movs	r0, r3
 800bffa:	f000 fbaf 	bl	800c75c <USBD_CtlError>
              break;
 800bffe:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800c000:	e006      	b.n	800c010 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800c002:	683a      	ldr	r2, [r7, #0]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	0011      	movs	r1, r2
 800c008:	0018      	movs	r0, r3
 800c00a:	f000 fba7 	bl	800c75c <USBD_CtlError>
          break;
 800c00e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800c010:	e006      	b.n	800c020 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800c012:	683a      	ldr	r2, [r7, #0]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	0011      	movs	r1, r2
 800c018:	0018      	movs	r0, r3
 800c01a:	f000 fb9f 	bl	800c75c <USBD_CtlError>
      break;
 800c01e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800c020:	230f      	movs	r3, #15
 800c022:	18fb      	adds	r3, r7, r3
 800c024:	781b      	ldrb	r3, [r3, #0]
}
 800c026:	0018      	movs	r0, r3
 800c028:	46bd      	mov	sp, r7
 800c02a:	b004      	add	sp, #16
 800c02c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c030 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c03a:	2308      	movs	r3, #8
 800c03c:	18fb      	adds	r3, r7, r3
 800c03e:	2200      	movs	r2, #0
 800c040:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800c042:	2300      	movs	r3, #0
 800c044:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c046:	230b      	movs	r3, #11
 800c048:	18fb      	adds	r3, r7, r3
 800c04a:	2200      	movs	r2, #0
 800c04c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	885b      	ldrh	r3, [r3, #2]
 800c052:	0a1b      	lsrs	r3, r3, #8
 800c054:	b29b      	uxth	r3, r3
 800c056:	2b07      	cmp	r3, #7
 800c058:	d900      	bls.n	800c05c <USBD_GetDescriptor+0x2c>
 800c05a:	e159      	b.n	800c310 <USBD_GetDescriptor+0x2e0>
 800c05c:	009a      	lsls	r2, r3, #2
 800c05e:	4bcb      	ldr	r3, [pc, #812]	; (800c38c <USBD_GetDescriptor+0x35c>)
 800c060:	18d3      	adds	r3, r2, r3
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c066:	687a      	ldr	r2, [r7, #4]
 800c068:	23ac      	movs	r3, #172	; 0xac
 800c06a:	009b      	lsls	r3, r3, #2
 800c06c:	58d3      	ldr	r3, [r2, r3]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	7c12      	ldrb	r2, [r2, #16]
 800c074:	2108      	movs	r1, #8
 800c076:	1879      	adds	r1, r7, r1
 800c078:	0010      	movs	r0, r2
 800c07a:	4798      	blx	r3
 800c07c:	0003      	movs	r3, r0
 800c07e:	60fb      	str	r3, [r7, #12]
      break;
 800c080:	e153      	b.n	800c32a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	7c1b      	ldrb	r3, [r3, #16]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d10f      	bne.n	800c0aa <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	23ad      	movs	r3, #173	; 0xad
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	58d3      	ldr	r3, [r2, r3]
 800c092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c094:	2208      	movs	r2, #8
 800c096:	18ba      	adds	r2, r7, r2
 800c098:	0010      	movs	r0, r2
 800c09a:	4798      	blx	r3
 800c09c:	0003      	movs	r3, r0
 800c09e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	2202      	movs	r2, #2
 800c0a6:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c0a8:	e13f      	b.n	800c32a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	23ad      	movs	r3, #173	; 0xad
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	58d3      	ldr	r3, [r2, r3]
 800c0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b4:	2208      	movs	r2, #8
 800c0b6:	18ba      	adds	r2, r7, r2
 800c0b8:	0010      	movs	r0, r2
 800c0ba:	4798      	blx	r3
 800c0bc:	0003      	movs	r3, r0
 800c0be:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	2202      	movs	r2, #2
 800c0c6:	701a      	strb	r2, [r3, #0]
      break;
 800c0c8:	e12f      	b.n	800c32a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	885b      	ldrh	r3, [r3, #2]
 800c0ce:	b2db      	uxtb	r3, r3
 800c0d0:	2b05      	cmp	r3, #5
 800c0d2:	d900      	bls.n	800c0d6 <USBD_GetDescriptor+0xa6>
 800c0d4:	e0d0      	b.n	800c278 <USBD_GetDescriptor+0x248>
 800c0d6:	009a      	lsls	r2, r3, #2
 800c0d8:	4bad      	ldr	r3, [pc, #692]	; (800c390 <USBD_GetDescriptor+0x360>)
 800c0da:	18d3      	adds	r3, r2, r3
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	23ac      	movs	r3, #172	; 0xac
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	58d3      	ldr	r3, [r2, r3]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d00d      	beq.n	800c10a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	23ac      	movs	r3, #172	; 0xac
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	58d3      	ldr	r3, [r2, r3]
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	7c12      	ldrb	r2, [r2, #16]
 800c0fc:	2108      	movs	r1, #8
 800c0fe:	1879      	adds	r1, r7, r1
 800c100:	0010      	movs	r0, r2
 800c102:	4798      	blx	r3
 800c104:	0003      	movs	r3, r0
 800c106:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c108:	e0c3      	b.n	800c292 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c10a:	683a      	ldr	r2, [r7, #0]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	0011      	movs	r1, r2
 800c110:	0018      	movs	r0, r3
 800c112:	f000 fb23 	bl	800c75c <USBD_CtlError>
            err++;
 800c116:	210b      	movs	r1, #11
 800c118:	187b      	adds	r3, r7, r1
 800c11a:	781a      	ldrb	r2, [r3, #0]
 800c11c:	187b      	adds	r3, r7, r1
 800c11e:	3201      	adds	r2, #1
 800c120:	701a      	strb	r2, [r3, #0]
          break;
 800c122:	e0b6      	b.n	800c292 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	23ac      	movs	r3, #172	; 0xac
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	58d3      	ldr	r3, [r2, r3]
 800c12c:	689b      	ldr	r3, [r3, #8]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d00d      	beq.n	800c14e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	23ac      	movs	r3, #172	; 0xac
 800c136:	009b      	lsls	r3, r3, #2
 800c138:	58d3      	ldr	r3, [r2, r3]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	687a      	ldr	r2, [r7, #4]
 800c13e:	7c12      	ldrb	r2, [r2, #16]
 800c140:	2108      	movs	r1, #8
 800c142:	1879      	adds	r1, r7, r1
 800c144:	0010      	movs	r0, r2
 800c146:	4798      	blx	r3
 800c148:	0003      	movs	r3, r0
 800c14a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c14c:	e0a1      	b.n	800c292 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c14e:	683a      	ldr	r2, [r7, #0]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	0011      	movs	r1, r2
 800c154:	0018      	movs	r0, r3
 800c156:	f000 fb01 	bl	800c75c <USBD_CtlError>
            err++;
 800c15a:	210b      	movs	r1, #11
 800c15c:	187b      	adds	r3, r7, r1
 800c15e:	781a      	ldrb	r2, [r3, #0]
 800c160:	187b      	adds	r3, r7, r1
 800c162:	3201      	adds	r2, #1
 800c164:	701a      	strb	r2, [r3, #0]
          break;
 800c166:	e094      	b.n	800c292 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	23ac      	movs	r3, #172	; 0xac
 800c16c:	009b      	lsls	r3, r3, #2
 800c16e:	58d3      	ldr	r3, [r2, r3]
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d00d      	beq.n	800c192 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	23ac      	movs	r3, #172	; 0xac
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	58d3      	ldr	r3, [r2, r3]
 800c17e:	68db      	ldr	r3, [r3, #12]
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	7c12      	ldrb	r2, [r2, #16]
 800c184:	2108      	movs	r1, #8
 800c186:	1879      	adds	r1, r7, r1
 800c188:	0010      	movs	r0, r2
 800c18a:	4798      	blx	r3
 800c18c:	0003      	movs	r3, r0
 800c18e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c190:	e07f      	b.n	800c292 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c192:	683a      	ldr	r2, [r7, #0]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	0011      	movs	r1, r2
 800c198:	0018      	movs	r0, r3
 800c19a:	f000 fadf 	bl	800c75c <USBD_CtlError>
            err++;
 800c19e:	210b      	movs	r1, #11
 800c1a0:	187b      	adds	r3, r7, r1
 800c1a2:	781a      	ldrb	r2, [r3, #0]
 800c1a4:	187b      	adds	r3, r7, r1
 800c1a6:	3201      	adds	r2, #1
 800c1a8:	701a      	strb	r2, [r3, #0]
          break;
 800c1aa:	e072      	b.n	800c292 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	23ac      	movs	r3, #172	; 0xac
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	58d3      	ldr	r3, [r2, r3]
 800c1b4:	691b      	ldr	r3, [r3, #16]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d00d      	beq.n	800c1d6 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	23ac      	movs	r3, #172	; 0xac
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	58d3      	ldr	r3, [r2, r3]
 800c1c2:	691b      	ldr	r3, [r3, #16]
 800c1c4:	687a      	ldr	r2, [r7, #4]
 800c1c6:	7c12      	ldrb	r2, [r2, #16]
 800c1c8:	2108      	movs	r1, #8
 800c1ca:	1879      	adds	r1, r7, r1
 800c1cc:	0010      	movs	r0, r2
 800c1ce:	4798      	blx	r3
 800c1d0:	0003      	movs	r3, r0
 800c1d2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1d4:	e05d      	b.n	800c292 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c1d6:	683a      	ldr	r2, [r7, #0]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	0011      	movs	r1, r2
 800c1dc:	0018      	movs	r0, r3
 800c1de:	f000 fabd 	bl	800c75c <USBD_CtlError>
            err++;
 800c1e2:	210b      	movs	r1, #11
 800c1e4:	187b      	adds	r3, r7, r1
 800c1e6:	781a      	ldrb	r2, [r3, #0]
 800c1e8:	187b      	adds	r3, r7, r1
 800c1ea:	3201      	adds	r2, #1
 800c1ec:	701a      	strb	r2, [r3, #0]
          break;
 800c1ee:	e050      	b.n	800c292 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	23ac      	movs	r3, #172	; 0xac
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	58d3      	ldr	r3, [r2, r3]
 800c1f8:	695b      	ldr	r3, [r3, #20]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d00d      	beq.n	800c21a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	23ac      	movs	r3, #172	; 0xac
 800c202:	009b      	lsls	r3, r3, #2
 800c204:	58d3      	ldr	r3, [r2, r3]
 800c206:	695b      	ldr	r3, [r3, #20]
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	7c12      	ldrb	r2, [r2, #16]
 800c20c:	2108      	movs	r1, #8
 800c20e:	1879      	adds	r1, r7, r1
 800c210:	0010      	movs	r0, r2
 800c212:	4798      	blx	r3
 800c214:	0003      	movs	r3, r0
 800c216:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c218:	e03b      	b.n	800c292 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c21a:	683a      	ldr	r2, [r7, #0]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	0011      	movs	r1, r2
 800c220:	0018      	movs	r0, r3
 800c222:	f000 fa9b 	bl	800c75c <USBD_CtlError>
            err++;
 800c226:	210b      	movs	r1, #11
 800c228:	187b      	adds	r3, r7, r1
 800c22a:	781a      	ldrb	r2, [r3, #0]
 800c22c:	187b      	adds	r3, r7, r1
 800c22e:	3201      	adds	r2, #1
 800c230:	701a      	strb	r2, [r3, #0]
          break;
 800c232:	e02e      	b.n	800c292 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	23ac      	movs	r3, #172	; 0xac
 800c238:	009b      	lsls	r3, r3, #2
 800c23a:	58d3      	ldr	r3, [r2, r3]
 800c23c:	699b      	ldr	r3, [r3, #24]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d00d      	beq.n	800c25e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	23ac      	movs	r3, #172	; 0xac
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	58d3      	ldr	r3, [r2, r3]
 800c24a:	699b      	ldr	r3, [r3, #24]
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	7c12      	ldrb	r2, [r2, #16]
 800c250:	2108      	movs	r1, #8
 800c252:	1879      	adds	r1, r7, r1
 800c254:	0010      	movs	r0, r2
 800c256:	4798      	blx	r3
 800c258:	0003      	movs	r3, r0
 800c25a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c25c:	e019      	b.n	800c292 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c25e:	683a      	ldr	r2, [r7, #0]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	0011      	movs	r1, r2
 800c264:	0018      	movs	r0, r3
 800c266:	f000 fa79 	bl	800c75c <USBD_CtlError>
            err++;
 800c26a:	210b      	movs	r1, #11
 800c26c:	187b      	adds	r3, r7, r1
 800c26e:	781a      	ldrb	r2, [r3, #0]
 800c270:	187b      	adds	r3, r7, r1
 800c272:	3201      	adds	r2, #1
 800c274:	701a      	strb	r2, [r3, #0]
          break;
 800c276:	e00c      	b.n	800c292 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c278:	683a      	ldr	r2, [r7, #0]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	0011      	movs	r1, r2
 800c27e:	0018      	movs	r0, r3
 800c280:	f000 fa6c 	bl	800c75c <USBD_CtlError>
          err++;
 800c284:	210b      	movs	r1, #11
 800c286:	187b      	adds	r3, r7, r1
 800c288:	781a      	ldrb	r2, [r3, #0]
 800c28a:	187b      	adds	r3, r7, r1
 800c28c:	3201      	adds	r2, #1
 800c28e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800c290:	e04b      	b.n	800c32a <USBD_GetDescriptor+0x2fa>
 800c292:	e04a      	b.n	800c32a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	7c1b      	ldrb	r3, [r3, #16]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d10b      	bne.n	800c2b4 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	23ad      	movs	r3, #173	; 0xad
 800c2a0:	009b      	lsls	r3, r3, #2
 800c2a2:	58d3      	ldr	r3, [r2, r3]
 800c2a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2a6:	2208      	movs	r2, #8
 800c2a8:	18ba      	adds	r2, r7, r2
 800c2aa:	0010      	movs	r0, r2
 800c2ac:	4798      	blx	r3
 800c2ae:	0003      	movs	r3, r0
 800c2b0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c2b2:	e03a      	b.n	800c32a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800c2b4:	683a      	ldr	r2, [r7, #0]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	0011      	movs	r1, r2
 800c2ba:	0018      	movs	r0, r3
 800c2bc:	f000 fa4e 	bl	800c75c <USBD_CtlError>
        err++;
 800c2c0:	210b      	movs	r1, #11
 800c2c2:	187b      	adds	r3, r7, r1
 800c2c4:	781a      	ldrb	r2, [r3, #0]
 800c2c6:	187b      	adds	r3, r7, r1
 800c2c8:	3201      	adds	r2, #1
 800c2ca:	701a      	strb	r2, [r3, #0]
      break;
 800c2cc:	e02d      	b.n	800c32a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	7c1b      	ldrb	r3, [r3, #16]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d10f      	bne.n	800c2f6 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	23ad      	movs	r3, #173	; 0xad
 800c2da:	009b      	lsls	r3, r3, #2
 800c2dc:	58d3      	ldr	r3, [r2, r3]
 800c2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2e0:	2208      	movs	r2, #8
 800c2e2:	18ba      	adds	r2, r7, r2
 800c2e4:	0010      	movs	r0, r2
 800c2e6:	4798      	blx	r3
 800c2e8:	0003      	movs	r3, r0
 800c2ea:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	2207      	movs	r2, #7
 800c2f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c2f4:	e019      	b.n	800c32a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800c2f6:	683a      	ldr	r2, [r7, #0]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	0011      	movs	r1, r2
 800c2fc:	0018      	movs	r0, r3
 800c2fe:	f000 fa2d 	bl	800c75c <USBD_CtlError>
        err++;
 800c302:	210b      	movs	r1, #11
 800c304:	187b      	adds	r3, r7, r1
 800c306:	781a      	ldrb	r2, [r3, #0]
 800c308:	187b      	adds	r3, r7, r1
 800c30a:	3201      	adds	r2, #1
 800c30c:	701a      	strb	r2, [r3, #0]
      break;
 800c30e:	e00c      	b.n	800c32a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800c310:	683a      	ldr	r2, [r7, #0]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	0011      	movs	r1, r2
 800c316:	0018      	movs	r0, r3
 800c318:	f000 fa20 	bl	800c75c <USBD_CtlError>
      err++;
 800c31c:	210b      	movs	r1, #11
 800c31e:	187b      	adds	r3, r7, r1
 800c320:	781a      	ldrb	r2, [r3, #0]
 800c322:	187b      	adds	r3, r7, r1
 800c324:	3201      	adds	r2, #1
 800c326:	701a      	strb	r2, [r3, #0]
      break;
 800c328:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800c32a:	230b      	movs	r3, #11
 800c32c:	18fb      	adds	r3, r7, r3
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d127      	bne.n	800c384 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c334:	2108      	movs	r1, #8
 800c336:	187b      	adds	r3, r7, r1
 800c338:	881b      	ldrh	r3, [r3, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d019      	beq.n	800c372 <USBD_GetDescriptor+0x342>
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	88db      	ldrh	r3, [r3, #6]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d015      	beq.n	800c372 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	88da      	ldrh	r2, [r3, #6]
 800c34a:	187b      	adds	r3, r7, r1
 800c34c:	881b      	ldrh	r3, [r3, #0]
 800c34e:	1c18      	adds	r0, r3, #0
 800c350:	1c11      	adds	r1, r2, #0
 800c352:	b28a      	uxth	r2, r1
 800c354:	b283      	uxth	r3, r0
 800c356:	429a      	cmp	r2, r3
 800c358:	d900      	bls.n	800c35c <USBD_GetDescriptor+0x32c>
 800c35a:	1c01      	adds	r1, r0, #0
 800c35c:	b28a      	uxth	r2, r1
 800c35e:	2108      	movs	r1, #8
 800c360:	187b      	adds	r3, r7, r1
 800c362:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c364:	187b      	adds	r3, r7, r1
 800c366:	881a      	ldrh	r2, [r3, #0]
 800c368:	68f9      	ldr	r1, [r7, #12]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	0018      	movs	r0, r3
 800c36e:	f000 fa73 	bl	800c858 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	88db      	ldrh	r3, [r3, #6]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d105      	bne.n	800c386 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	0018      	movs	r0, r3
 800c37e:	f000 fad5 	bl	800c92c <USBD_CtlSendStatus>
 800c382:	e000      	b.n	800c386 <USBD_GetDescriptor+0x356>
    return;
 800c384:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800c386:	46bd      	mov	sp, r7
 800c388:	b004      	add	sp, #16
 800c38a:	bd80      	pop	{r7, pc}
 800c38c:	0800df98 	.word	0x0800df98
 800c390:	0800dfb8 	.word	0x0800dfb8

0800c394 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c394:	b590      	push	{r4, r7, lr}
 800c396:	b085      	sub	sp, #20
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	889b      	ldrh	r3, [r3, #4]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d13d      	bne.n	800c422 <USBD_SetAddress+0x8e>
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	88db      	ldrh	r3, [r3, #6]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d139      	bne.n	800c422 <USBD_SetAddress+0x8e>
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	885b      	ldrh	r3, [r3, #2]
 800c3b2:	2b7f      	cmp	r3, #127	; 0x7f
 800c3b4:	d835      	bhi.n	800c422 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	885b      	ldrh	r3, [r3, #2]
 800c3ba:	b2da      	uxtb	r2, r3
 800c3bc:	230f      	movs	r3, #15
 800c3be:	18fb      	adds	r3, r7, r3
 800c3c0:	217f      	movs	r1, #127	; 0x7f
 800c3c2:	400a      	ands	r2, r1
 800c3c4:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	23a7      	movs	r3, #167	; 0xa7
 800c3ca:	009b      	lsls	r3, r3, #2
 800c3cc:	5cd3      	ldrb	r3, [r2, r3]
 800c3ce:	2b03      	cmp	r3, #3
 800c3d0:	d106      	bne.n	800c3e0 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800c3d2:	683a      	ldr	r2, [r7, #0]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	0011      	movs	r1, r2
 800c3d8:	0018      	movs	r0, r3
 800c3da:	f000 f9bf 	bl	800c75c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3de:	e027      	b.n	800c430 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	240f      	movs	r4, #15
 800c3e4:	193a      	adds	r2, r7, r4
 800c3e6:	4914      	ldr	r1, [pc, #80]	; (800c438 <USBD_SetAddress+0xa4>)
 800c3e8:	7812      	ldrb	r2, [r2, #0]
 800c3ea:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c3ec:	193b      	adds	r3, r7, r4
 800c3ee:	781a      	ldrb	r2, [r3, #0]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	0011      	movs	r1, r2
 800c3f4:	0018      	movs	r0, r3
 800c3f6:	f000 ff25 	bl	800d244 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	0018      	movs	r0, r3
 800c3fe:	f000 fa95 	bl	800c92c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c402:	193b      	adds	r3, r7, r4
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d005      	beq.n	800c416 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	23a7      	movs	r3, #167	; 0xa7
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	2102      	movs	r1, #2
 800c412:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c414:	e00c      	b.n	800c430 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	23a7      	movs	r3, #167	; 0xa7
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	2101      	movs	r1, #1
 800c41e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c420:	e006      	b.n	800c430 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c422:	683a      	ldr	r2, [r7, #0]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	0011      	movs	r1, r2
 800c428:	0018      	movs	r0, r3
 800c42a:	f000 f997 	bl	800c75c <USBD_CtlError>
  }
}
 800c42e:	46c0      	nop			; (mov r8, r8)
 800c430:	46c0      	nop			; (mov r8, r8)
 800c432:	46bd      	mov	sp, r7
 800c434:	b005      	add	sp, #20
 800c436:	bd90      	pop	{r4, r7, pc}
 800c438:	0000029e 	.word	0x0000029e

0800c43c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	885b      	ldrh	r3, [r3, #2]
 800c44a:	b2da      	uxtb	r2, r3
 800c44c:	4b4c      	ldr	r3, [pc, #304]	; (800c580 <USBD_SetConfig+0x144>)
 800c44e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c450:	4b4b      	ldr	r3, [pc, #300]	; (800c580 <USBD_SetConfig+0x144>)
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	2b01      	cmp	r3, #1
 800c456:	d906      	bls.n	800c466 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800c458:	683a      	ldr	r2, [r7, #0]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	0011      	movs	r1, r2
 800c45e:	0018      	movs	r0, r3
 800c460:	f000 f97c 	bl	800c75c <USBD_CtlError>
 800c464:	e088      	b.n	800c578 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	23a7      	movs	r3, #167	; 0xa7
 800c46a:	009b      	lsls	r3, r3, #2
 800c46c:	5cd3      	ldrb	r3, [r2, r3]
 800c46e:	2b02      	cmp	r3, #2
 800c470:	d002      	beq.n	800c478 <USBD_SetConfig+0x3c>
 800c472:	2b03      	cmp	r3, #3
 800c474:	d029      	beq.n	800c4ca <USBD_SetConfig+0x8e>
 800c476:	e071      	b.n	800c55c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c478:	4b41      	ldr	r3, [pc, #260]	; (800c580 <USBD_SetConfig+0x144>)
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d01f      	beq.n	800c4c0 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800c480:	4b3f      	ldr	r3, [pc, #252]	; (800c580 <USBD_SetConfig+0x144>)
 800c482:	781b      	ldrb	r3, [r3, #0]
 800c484:	001a      	movs	r2, r3
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	23a7      	movs	r3, #167	; 0xa7
 800c48e:	009b      	lsls	r3, r3, #2
 800c490:	2103      	movs	r1, #3
 800c492:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c494:	4b3a      	ldr	r3, [pc, #232]	; (800c580 <USBD_SetConfig+0x144>)
 800c496:	781a      	ldrb	r2, [r3, #0]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	0011      	movs	r1, r2
 800c49c:	0018      	movs	r0, r3
 800c49e:	f7ff f8c6 	bl	800b62e <USBD_SetClassConfig>
 800c4a2:	0003      	movs	r3, r0
 800c4a4:	2b02      	cmp	r3, #2
 800c4a6:	d106      	bne.n	800c4b6 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800c4a8:	683a      	ldr	r2, [r7, #0]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	0011      	movs	r1, r2
 800c4ae:	0018      	movs	r0, r3
 800c4b0:	f000 f954 	bl	800c75c <USBD_CtlError>
            return;
 800c4b4:	e060      	b.n	800c578 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	0018      	movs	r0, r3
 800c4ba:	f000 fa37 	bl	800c92c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c4be:	e05b      	b.n	800c578 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	0018      	movs	r0, r3
 800c4c4:	f000 fa32 	bl	800c92c <USBD_CtlSendStatus>
        break;
 800c4c8:	e056      	b.n	800c578 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c4ca:	4b2d      	ldr	r3, [pc, #180]	; (800c580 <USBD_SetConfig+0x144>)
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d115      	bne.n	800c4fe <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4d2:	687a      	ldr	r2, [r7, #4]
 800c4d4:	23a7      	movs	r3, #167	; 0xa7
 800c4d6:	009b      	lsls	r3, r3, #2
 800c4d8:	2102      	movs	r1, #2
 800c4da:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800c4dc:	4b28      	ldr	r3, [pc, #160]	; (800c580 <USBD_SetConfig+0x144>)
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	001a      	movs	r2, r3
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c4e6:	4b26      	ldr	r3, [pc, #152]	; (800c580 <USBD_SetConfig+0x144>)
 800c4e8:	781a      	ldrb	r2, [r3, #0]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	0011      	movs	r1, r2
 800c4ee:	0018      	movs	r0, r3
 800c4f0:	f7ff f8c4 	bl	800b67c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	0018      	movs	r0, r3
 800c4f8:	f000 fa18 	bl	800c92c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c4fc:	e03c      	b.n	800c578 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800c4fe:	4b20      	ldr	r3, [pc, #128]	; (800c580 <USBD_SetConfig+0x144>)
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	001a      	movs	r2, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	685b      	ldr	r3, [r3, #4]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d022      	beq.n	800c552 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	b2da      	uxtb	r2, r3
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	0011      	movs	r1, r2
 800c516:	0018      	movs	r0, r3
 800c518:	f7ff f8b0 	bl	800b67c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c51c:	4b18      	ldr	r3, [pc, #96]	; (800c580 <USBD_SetConfig+0x144>)
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	001a      	movs	r2, r3
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c526:	4b16      	ldr	r3, [pc, #88]	; (800c580 <USBD_SetConfig+0x144>)
 800c528:	781a      	ldrb	r2, [r3, #0]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	0011      	movs	r1, r2
 800c52e:	0018      	movs	r0, r3
 800c530:	f7ff f87d 	bl	800b62e <USBD_SetClassConfig>
 800c534:	0003      	movs	r3, r0
 800c536:	2b02      	cmp	r3, #2
 800c538:	d106      	bne.n	800c548 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800c53a:	683a      	ldr	r2, [r7, #0]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	0011      	movs	r1, r2
 800c540:	0018      	movs	r0, r3
 800c542:	f000 f90b 	bl	800c75c <USBD_CtlError>
            return;
 800c546:	e017      	b.n	800c578 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	0018      	movs	r0, r3
 800c54c:	f000 f9ee 	bl	800c92c <USBD_CtlSendStatus>
        break;
 800c550:	e012      	b.n	800c578 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	0018      	movs	r0, r3
 800c556:	f000 f9e9 	bl	800c92c <USBD_CtlSendStatus>
        break;
 800c55a:	e00d      	b.n	800c578 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800c55c:	683a      	ldr	r2, [r7, #0]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	0011      	movs	r1, r2
 800c562:	0018      	movs	r0, r3
 800c564:	f000 f8fa 	bl	800c75c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c568:	4b05      	ldr	r3, [pc, #20]	; (800c580 <USBD_SetConfig+0x144>)
 800c56a:	781a      	ldrb	r2, [r3, #0]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	0011      	movs	r1, r2
 800c570:	0018      	movs	r0, r3
 800c572:	f7ff f883 	bl	800b67c <USBD_ClrClassConfig>
        break;
 800c576:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800c578:	46bd      	mov	sp, r7
 800c57a:	b002      	add	sp, #8
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	46c0      	nop			; (mov r8, r8)
 800c580:	20000270 	.word	0x20000270

0800c584 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	88db      	ldrh	r3, [r3, #6]
 800c592:	2b01      	cmp	r3, #1
 800c594:	d006      	beq.n	800c5a4 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800c596:	683a      	ldr	r2, [r7, #0]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	0011      	movs	r1, r2
 800c59c:	0018      	movs	r0, r3
 800c59e:	f000 f8dd 	bl	800c75c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c5a2:	e026      	b.n	800c5f2 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800c5a4:	687a      	ldr	r2, [r7, #4]
 800c5a6:	23a7      	movs	r3, #167	; 0xa7
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	5cd3      	ldrb	r3, [r2, r3]
 800c5ac:	2b02      	cmp	r3, #2
 800c5ae:	dc02      	bgt.n	800c5b6 <USBD_GetConfig+0x32>
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	dc03      	bgt.n	800c5bc <USBD_GetConfig+0x38>
 800c5b4:	e016      	b.n	800c5e4 <USBD_GetConfig+0x60>
 800c5b6:	2b03      	cmp	r3, #3
 800c5b8:	d00c      	beq.n	800c5d4 <USBD_GetConfig+0x50>
 800c5ba:	e013      	b.n	800c5e4 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	3308      	adds	r3, #8
 800c5c6:	0019      	movs	r1, r3
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	0018      	movs	r0, r3
 800c5ce:	f000 f943 	bl	800c858 <USBD_CtlSendData>
        break;
 800c5d2:	e00e      	b.n	800c5f2 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	1d19      	adds	r1, r3, #4
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	0018      	movs	r0, r3
 800c5de:	f000 f93b 	bl	800c858 <USBD_CtlSendData>
        break;
 800c5e2:	e006      	b.n	800c5f2 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800c5e4:	683a      	ldr	r2, [r7, #0]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	0011      	movs	r1, r2
 800c5ea:	0018      	movs	r0, r3
 800c5ec:	f000 f8b6 	bl	800c75c <USBD_CtlError>
        break;
 800c5f0:	46c0      	nop			; (mov r8, r8)
}
 800c5f2:	46c0      	nop			; (mov r8, r8)
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	b002      	add	sp, #8
 800c5f8:	bd80      	pop	{r7, pc}

0800c5fa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5fa:	b580      	push	{r7, lr}
 800c5fc:	b082      	sub	sp, #8
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	6078      	str	r0, [r7, #4]
 800c602:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	23a7      	movs	r3, #167	; 0xa7
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	5cd3      	ldrb	r3, [r2, r3]
 800c60c:	3b01      	subs	r3, #1
 800c60e:	2b02      	cmp	r3, #2
 800c610:	d822      	bhi.n	800c658 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	88db      	ldrh	r3, [r3, #6]
 800c616:	2b02      	cmp	r3, #2
 800c618:	d006      	beq.n	800c628 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800c61a:	683a      	ldr	r2, [r7, #0]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	0011      	movs	r1, r2
 800c620:	0018      	movs	r0, r3
 800c622:	f000 f89b 	bl	800c75c <USBD_CtlError>
        break;
 800c626:	e01e      	b.n	800c666 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2201      	movs	r2, #1
 800c62c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	23a9      	movs	r3, #169	; 0xa9
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	58d3      	ldr	r3, [r2, r3]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d005      	beq.n	800c646 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	68db      	ldr	r3, [r3, #12]
 800c63e:	2202      	movs	r2, #2
 800c640:	431a      	orrs	r2, r3
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	330c      	adds	r3, #12
 800c64a:	0019      	movs	r1, r3
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2202      	movs	r2, #2
 800c650:	0018      	movs	r0, r3
 800c652:	f000 f901 	bl	800c858 <USBD_CtlSendData>
      break;
 800c656:	e006      	b.n	800c666 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800c658:	683a      	ldr	r2, [r7, #0]
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	0011      	movs	r1, r2
 800c65e:	0018      	movs	r0, r3
 800c660:	f000 f87c 	bl	800c75c <USBD_CtlError>
      break;
 800c664:	46c0      	nop			; (mov r8, r8)
  }
}
 800c666:	46c0      	nop			; (mov r8, r8)
 800c668:	46bd      	mov	sp, r7
 800c66a:	b002      	add	sp, #8
 800c66c:	bd80      	pop	{r7, pc}

0800c66e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c66e:	b580      	push	{r7, lr}
 800c670:	b082      	sub	sp, #8
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
 800c676:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	885b      	ldrh	r3, [r3, #2]
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	d108      	bne.n	800c692 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800c680:	687a      	ldr	r2, [r7, #4]
 800c682:	23a9      	movs	r3, #169	; 0xa9
 800c684:	009b      	lsls	r3, r3, #2
 800c686:	2101      	movs	r1, #1
 800c688:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	0018      	movs	r0, r3
 800c68e:	f000 f94d 	bl	800c92c <USBD_CtlSendStatus>
  }
}
 800c692:	46c0      	nop			; (mov r8, r8)
 800c694:	46bd      	mov	sp, r7
 800c696:	b002      	add	sp, #8
 800c698:	bd80      	pop	{r7, pc}

0800c69a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b082      	sub	sp, #8
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
 800c6a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	23a7      	movs	r3, #167	; 0xa7
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	5cd3      	ldrb	r3, [r2, r3]
 800c6ac:	3b01      	subs	r3, #1
 800c6ae:	2b02      	cmp	r3, #2
 800c6b0:	d80d      	bhi.n	800c6ce <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	885b      	ldrh	r3, [r3, #2]
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d110      	bne.n	800c6dc <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800c6ba:	687a      	ldr	r2, [r7, #4]
 800c6bc:	23a9      	movs	r3, #169	; 0xa9
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	2100      	movs	r1, #0
 800c6c2:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	0018      	movs	r0, r3
 800c6c8:	f000 f930 	bl	800c92c <USBD_CtlSendStatus>
      }
      break;
 800c6cc:	e006      	b.n	800c6dc <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800c6ce:	683a      	ldr	r2, [r7, #0]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	0011      	movs	r1, r2
 800c6d4:	0018      	movs	r0, r3
 800c6d6:	f000 f841 	bl	800c75c <USBD_CtlError>
      break;
 800c6da:	e000      	b.n	800c6de <USBD_ClrFeature+0x44>
      break;
 800c6dc:	46c0      	nop			; (mov r8, r8)
  }
}
 800c6de:	46c0      	nop			; (mov r8, r8)
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	b002      	add	sp, #8
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	b082      	sub	sp, #8
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
 800c6ee:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	781a      	ldrb	r2, [r3, #0]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	785a      	ldrb	r2, [r3, #1]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	3302      	adds	r3, #2
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	b29a      	uxth	r2, r3
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	3303      	adds	r3, #3
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	b29b      	uxth	r3, r3
 800c710:	021b      	lsls	r3, r3, #8
 800c712:	b29b      	uxth	r3, r3
 800c714:	18d3      	adds	r3, r2, r3
 800c716:	b29a      	uxth	r2, r3
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	3304      	adds	r3, #4
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	b29a      	uxth	r2, r3
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	3305      	adds	r3, #5
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	021b      	lsls	r3, r3, #8
 800c72e:	b29b      	uxth	r3, r3
 800c730:	18d3      	adds	r3, r2, r3
 800c732:	b29a      	uxth	r2, r3
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	3306      	adds	r3, #6
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	b29a      	uxth	r2, r3
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	3307      	adds	r3, #7
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	b29b      	uxth	r3, r3
 800c748:	021b      	lsls	r3, r3, #8
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	18d3      	adds	r3, r2, r3
 800c74e:	b29a      	uxth	r2, r3
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	80da      	strh	r2, [r3, #6]

}
 800c754:	46c0      	nop			; (mov r8, r8)
 800c756:	46bd      	mov	sp, r7
 800c758:	b002      	add	sp, #8
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b082      	sub	sp, #8
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2180      	movs	r1, #128	; 0x80
 800c76a:	0018      	movs	r0, r3
 800c76c:	f000 fce3 	bl	800d136 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2100      	movs	r1, #0
 800c774:	0018      	movs	r0, r3
 800c776:	f000 fcde 	bl	800d136 <USBD_LL_StallEP>
}
 800c77a:	46c0      	nop			; (mov r8, r8)
 800c77c:	46bd      	mov	sp, r7
 800c77e:	b002      	add	sp, #8
 800c780:	bd80      	pop	{r7, pc}

0800c782 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c782:	b590      	push	{r4, r7, lr}
 800c784:	b087      	sub	sp, #28
 800c786:	af00      	add	r7, sp, #0
 800c788:	60f8      	str	r0, [r7, #12]
 800c78a:	60b9      	str	r1, [r7, #8]
 800c78c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c78e:	2417      	movs	r4, #23
 800c790:	193b      	adds	r3, r7, r4
 800c792:	2200      	movs	r2, #0
 800c794:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d03c      	beq.n	800c816 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	0018      	movs	r0, r3
 800c7a0:	f000 f83d 	bl	800c81e <USBD_GetLen>
 800c7a4:	0003      	movs	r3, r0
 800c7a6:	3301      	adds	r3, #1
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	18db      	adds	r3, r3, r3
 800c7ac:	b29a      	uxth	r2, r3
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c7b2:	193b      	adds	r3, r7, r4
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	193a      	adds	r2, r7, r4
 800c7b8:	1c59      	adds	r1, r3, #1
 800c7ba:	7011      	strb	r1, [r2, #0]
 800c7bc:	001a      	movs	r2, r3
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	189b      	adds	r3, r3, r2
 800c7c2:	687a      	ldr	r2, [r7, #4]
 800c7c4:	7812      	ldrb	r2, [r2, #0]
 800c7c6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c7c8:	193b      	adds	r3, r7, r4
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	193a      	adds	r2, r7, r4
 800c7ce:	1c59      	adds	r1, r3, #1
 800c7d0:	7011      	strb	r1, [r2, #0]
 800c7d2:	001a      	movs	r2, r3
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	189b      	adds	r3, r3, r2
 800c7d8:	2203      	movs	r2, #3
 800c7da:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c7dc:	e017      	b.n	800c80e <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	1c5a      	adds	r2, r3, #1
 800c7e2:	60fa      	str	r2, [r7, #12]
 800c7e4:	2417      	movs	r4, #23
 800c7e6:	193a      	adds	r2, r7, r4
 800c7e8:	7812      	ldrb	r2, [r2, #0]
 800c7ea:	1939      	adds	r1, r7, r4
 800c7ec:	1c50      	adds	r0, r2, #1
 800c7ee:	7008      	strb	r0, [r1, #0]
 800c7f0:	0011      	movs	r1, r2
 800c7f2:	68ba      	ldr	r2, [r7, #8]
 800c7f4:	1852      	adds	r2, r2, r1
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c7fa:	193b      	adds	r3, r7, r4
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	193a      	adds	r2, r7, r4
 800c800:	1c59      	adds	r1, r3, #1
 800c802:	7011      	strb	r1, [r2, #0]
 800c804:	001a      	movs	r2, r3
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	189b      	adds	r3, r3, r2
 800c80a:	2200      	movs	r2, #0
 800c80c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d1e3      	bne.n	800c7de <USBD_GetString+0x5c>
    }
  }
}
 800c816:	46c0      	nop			; (mov r8, r8)
 800c818:	46bd      	mov	sp, r7
 800c81a:	b007      	add	sp, #28
 800c81c:	bd90      	pop	{r4, r7, pc}

0800c81e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c81e:	b580      	push	{r7, lr}
 800c820:	b084      	sub	sp, #16
 800c822:	af00      	add	r7, sp, #0
 800c824:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c826:	230f      	movs	r3, #15
 800c828:	18fb      	adds	r3, r7, r3
 800c82a:	2200      	movs	r2, #0
 800c82c:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800c82e:	e008      	b.n	800c842 <USBD_GetLen+0x24>
  {
    len++;
 800c830:	210f      	movs	r1, #15
 800c832:	187b      	adds	r3, r7, r1
 800c834:	781a      	ldrb	r2, [r3, #0]
 800c836:	187b      	adds	r3, r7, r1
 800c838:	3201      	adds	r2, #1
 800c83a:	701a      	strb	r2, [r3, #0]
    buf++;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	3301      	adds	r3, #1
 800c840:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d1f2      	bne.n	800c830 <USBD_GetLen+0x12>
  }

  return len;
 800c84a:	230f      	movs	r3, #15
 800c84c:	18fb      	adds	r3, r7, r3
 800c84e:	781b      	ldrb	r3, [r3, #0]
}
 800c850:	0018      	movs	r0, r3
 800c852:	46bd      	mov	sp, r7
 800c854:	b004      	add	sp, #16
 800c856:	bd80      	pop	{r7, pc}

0800c858 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	1dbb      	adds	r3, r7, #6
 800c864:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c866:	68fa      	ldr	r2, [r7, #12]
 800c868:	23a5      	movs	r3, #165	; 0xa5
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	2102      	movs	r1, #2
 800c86e:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800c870:	1dbb      	adds	r3, r7, #6
 800c872:	881a      	ldrh	r2, [r3, #0]
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c878:	1dbb      	adds	r3, r7, #6
 800c87a:	881a      	ldrh	r2, [r3, #0]
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c880:	1dbb      	adds	r3, r7, #6
 800c882:	881b      	ldrh	r3, [r3, #0]
 800c884:	68ba      	ldr	r2, [r7, #8]
 800c886:	68f8      	ldr	r0, [r7, #12]
 800c888:	2100      	movs	r1, #0
 800c88a:	f000 fd06 	bl	800d29a <USBD_LL_Transmit>

  return USBD_OK;
 800c88e:	2300      	movs	r3, #0
}
 800c890:	0018      	movs	r0, r3
 800c892:	46bd      	mov	sp, r7
 800c894:	b004      	add	sp, #16
 800c896:	bd80      	pop	{r7, pc}

0800c898 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	60f8      	str	r0, [r7, #12]
 800c8a0:	60b9      	str	r1, [r7, #8]
 800c8a2:	1dbb      	adds	r3, r7, #6
 800c8a4:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8a6:	1dbb      	adds	r3, r7, #6
 800c8a8:	881b      	ldrh	r3, [r3, #0]
 800c8aa:	68ba      	ldr	r2, [r7, #8]
 800c8ac:	68f8      	ldr	r0, [r7, #12]
 800c8ae:	2100      	movs	r1, #0
 800c8b0:	f000 fcf3 	bl	800d29a <USBD_LL_Transmit>

  return USBD_OK;
 800c8b4:	2300      	movs	r3, #0
}
 800c8b6:	0018      	movs	r0, r3
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	b004      	add	sp, #16
 800c8bc:	bd80      	pop	{r7, pc}

0800c8be <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c8be:	b580      	push	{r7, lr}
 800c8c0:	b084      	sub	sp, #16
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	60f8      	str	r0, [r7, #12]
 800c8c6:	60b9      	str	r1, [r7, #8]
 800c8c8:	1dbb      	adds	r3, r7, #6
 800c8ca:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c8cc:	68fa      	ldr	r2, [r7, #12]
 800c8ce:	23a5      	movs	r3, #165	; 0xa5
 800c8d0:	009b      	lsls	r3, r3, #2
 800c8d2:	2103      	movs	r1, #3
 800c8d4:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800c8d6:	1dbb      	adds	r3, r7, #6
 800c8d8:	8819      	ldrh	r1, [r3, #0]
 800c8da:	68fa      	ldr	r2, [r7, #12]
 800c8dc:	23ae      	movs	r3, #174	; 0xae
 800c8de:	005b      	lsls	r3, r3, #1
 800c8e0:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800c8e2:	1dbb      	adds	r3, r7, #6
 800c8e4:	8819      	ldrh	r1, [r3, #0]
 800c8e6:	68fa      	ldr	r2, [r7, #12]
 800c8e8:	23b0      	movs	r3, #176	; 0xb0
 800c8ea:	005b      	lsls	r3, r3, #1
 800c8ec:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c8ee:	1dbb      	adds	r3, r7, #6
 800c8f0:	881b      	ldrh	r3, [r3, #0]
 800c8f2:	68ba      	ldr	r2, [r7, #8]
 800c8f4:	68f8      	ldr	r0, [r7, #12]
 800c8f6:	2100      	movs	r1, #0
 800c8f8:	f000 fd06 	bl	800d308 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c8fc:	2300      	movs	r3, #0
}
 800c8fe:	0018      	movs	r0, r3
 800c900:	46bd      	mov	sp, r7
 800c902:	b004      	add	sp, #16
 800c904:	bd80      	pop	{r7, pc}

0800c906 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c906:	b580      	push	{r7, lr}
 800c908:	b084      	sub	sp, #16
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	60f8      	str	r0, [r7, #12]
 800c90e:	60b9      	str	r1, [r7, #8]
 800c910:	1dbb      	adds	r3, r7, #6
 800c912:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c914:	1dbb      	adds	r3, r7, #6
 800c916:	881b      	ldrh	r3, [r3, #0]
 800c918:	68ba      	ldr	r2, [r7, #8]
 800c91a:	68f8      	ldr	r0, [r7, #12]
 800c91c:	2100      	movs	r1, #0
 800c91e:	f000 fcf3 	bl	800d308 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c922:	2300      	movs	r3, #0
}
 800c924:	0018      	movs	r0, r3
 800c926:	46bd      	mov	sp, r7
 800c928:	b004      	add	sp, #16
 800c92a:	bd80      	pop	{r7, pc}

0800c92c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	23a5      	movs	r3, #165	; 0xa5
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	2104      	movs	r1, #4
 800c93c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	2300      	movs	r3, #0
 800c942:	2200      	movs	r2, #0
 800c944:	2100      	movs	r1, #0
 800c946:	f000 fca8 	bl	800d29a <USBD_LL_Transmit>

  return USBD_OK;
 800c94a:	2300      	movs	r3, #0
}
 800c94c:	0018      	movs	r0, r3
 800c94e:	46bd      	mov	sp, r7
 800c950:	b002      	add	sp, #8
 800c952:	bd80      	pop	{r7, pc}

0800c954 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b082      	sub	sp, #8
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	23a5      	movs	r3, #165	; 0xa5
 800c960:	009b      	lsls	r3, r3, #2
 800c962:	2105      	movs	r1, #5
 800c964:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	2300      	movs	r3, #0
 800c96a:	2200      	movs	r2, #0
 800c96c:	2100      	movs	r1, #0
 800c96e:	f000 fccb 	bl	800d308 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c972:	2300      	movs	r3, #0
}
 800c974:	0018      	movs	r0, r3
 800c976:	46bd      	mov	sp, r7
 800c978:	b002      	add	sp, #8
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c980:	4914      	ldr	r1, [pc, #80]	; (800c9d4 <MX_USB_DEVICE_Init+0x58>)
 800c982:	4b15      	ldr	r3, [pc, #84]	; (800c9d8 <MX_USB_DEVICE_Init+0x5c>)
 800c984:	2200      	movs	r2, #0
 800c986:	0018      	movs	r0, r3
 800c988:	f7fe fdea 	bl	800b560 <USBD_Init>
 800c98c:	1e03      	subs	r3, r0, #0
 800c98e:	d001      	beq.n	800c994 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c990:	f7f5 fce8 	bl	8002364 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c994:	4a11      	ldr	r2, [pc, #68]	; (800c9dc <MX_USB_DEVICE_Init+0x60>)
 800c996:	4b10      	ldr	r3, [pc, #64]	; (800c9d8 <MX_USB_DEVICE_Init+0x5c>)
 800c998:	0011      	movs	r1, r2
 800c99a:	0018      	movs	r0, r3
 800c99c:	f7fe fe11 	bl	800b5c2 <USBD_RegisterClass>
 800c9a0:	1e03      	subs	r3, r0, #0
 800c9a2:	d001      	beq.n	800c9a8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800c9a4:	f7f5 fcde 	bl	8002364 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c9a8:	4a0d      	ldr	r2, [pc, #52]	; (800c9e0 <MX_USB_DEVICE_Init+0x64>)
 800c9aa:	4b0b      	ldr	r3, [pc, #44]	; (800c9d8 <MX_USB_DEVICE_Init+0x5c>)
 800c9ac:	0011      	movs	r1, r2
 800c9ae:	0018      	movs	r0, r3
 800c9b0:	f7fe fd26 	bl	800b400 <USBD_CDC_RegisterInterface>
 800c9b4:	1e03      	subs	r3, r0, #0
 800c9b6:	d001      	beq.n	800c9bc <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800c9b8:	f7f5 fcd4 	bl	8002364 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c9bc:	4b06      	ldr	r3, [pc, #24]	; (800c9d8 <MX_USB_DEVICE_Init+0x5c>)
 800c9be:	0018      	movs	r0, r3
 800c9c0:	f7fe fe1f 	bl	800b602 <USBD_Start>
 800c9c4:	1e03      	subs	r3, r0, #0
 800c9c6:	d001      	beq.n	800c9cc <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800c9c8:	f7f5 fccc 	bl	8002364 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c9cc:	46c0      	nop			; (mov r8, r8)
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	46c0      	nop			; (mov r8, r8)
 800c9d4:	2000012c 	.word	0x2000012c
 800c9d8:	200006ac 	.word	0x200006ac
 800c9dc:	20000018 	.word	0x20000018
 800c9e0:	2000011c 	.word	0x2000011c

0800c9e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c9e8:	4907      	ldr	r1, [pc, #28]	; (800ca08 <CDC_Init_FS+0x24>)
 800c9ea:	4b08      	ldr	r3, [pc, #32]	; (800ca0c <CDC_Init_FS+0x28>)
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	0018      	movs	r0, r3
 800c9f0:	f7fe fd21 	bl	800b436 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c9f4:	4a06      	ldr	r2, [pc, #24]	; (800ca10 <CDC_Init_FS+0x2c>)
 800c9f6:	4b05      	ldr	r3, [pc, #20]	; (800ca0c <CDC_Init_FS+0x28>)
 800c9f8:	0011      	movs	r1, r2
 800c9fa:	0018      	movs	r0, r3
 800c9fc:	f7fe fd37 	bl	800b46e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ca00:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ca02:	0018      	movs	r0, r3
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}
 800ca08:	20000d58 	.word	0x20000d58
 800ca0c:	200006ac 	.word	0x200006ac
 800ca10:	20000970 	.word	0x20000970

0800ca14 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ca18:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ca1a:	0018      	movs	r0, r3
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6039      	str	r1, [r7, #0]
 800ca28:	0011      	movs	r1, r2
 800ca2a:	1dfb      	adds	r3, r7, #7
 800ca2c:	1c02      	adds	r2, r0, #0
 800ca2e:	701a      	strb	r2, [r3, #0]
 800ca30:	1d3b      	adds	r3, r7, #4
 800ca32:	1c0a      	adds	r2, r1, #0
 800ca34:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ca36:	1dfb      	adds	r3, r7, #7
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	2b23      	cmp	r3, #35	; 0x23
 800ca3c:	d804      	bhi.n	800ca48 <CDC_Control_FS+0x28>
 800ca3e:	009a      	lsls	r2, r3, #2
 800ca40:	4b04      	ldr	r3, [pc, #16]	; (800ca54 <CDC_Control_FS+0x34>)
 800ca42:	18d3      	adds	r3, r2, r3
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ca48:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800ca4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ca4c:	0018      	movs	r0, r3
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	b002      	add	sp, #8
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	0800dfd0 	.word	0x0800dfd0

0800ca58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ca58:	b590      	push	{r4, r7, lr}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  flags.data_received = 1;
 800ca62:	4b18      	ldr	r3, [pc, #96]	; (800cac4 <CDC_Receive_FS+0x6c>)
 800ca64:	7a1a      	ldrb	r2, [r3, #8]
 800ca66:	2101      	movs	r1, #1
 800ca68:	430a      	orrs	r2, r1
 800ca6a:	721a      	strb	r2, [r3, #8]

  for(uint8_t i = 0; i < *Len; i++)
 800ca6c:	230f      	movs	r3, #15
 800ca6e:	18fb      	adds	r3, r7, r3
 800ca70:	2200      	movs	r2, #0
 800ca72:	701a      	strb	r2, [r3, #0]
 800ca74:	e00f      	b.n	800ca96 <CDC_Receive_FS+0x3e>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800ca76:	4b14      	ldr	r3, [pc, #80]	; (800cac8 <CDC_Receive_FS+0x70>)
 800ca78:	6818      	ldr	r0, [r3, #0]
 800ca7a:	240f      	movs	r4, #15
 800ca7c:	193b      	adds	r3, r7, r4
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	18d3      	adds	r3, r2, r3
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	0019      	movs	r1, r3
 800ca88:	f7f5 fcbc 	bl	8002404 <push>
  for(uint8_t i = 0; i < *Len; i++)
 800ca8c:	193b      	adds	r3, r7, r4
 800ca8e:	781a      	ldrb	r2, [r3, #0]
 800ca90:	193b      	adds	r3, r7, r4
 800ca92:	3201      	adds	r2, #1
 800ca94:	701a      	strb	r2, [r3, #0]
 800ca96:	230f      	movs	r3, #15
 800ca98:	18fb      	adds	r3, r7, r3
 800ca9a:	781a      	ldrb	r2, [r3, #0]
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d3e8      	bcc.n	800ca76 <CDC_Receive_FS+0x1e>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	4b09      	ldr	r3, [pc, #36]	; (800cacc <CDC_Receive_FS+0x74>)
 800caa8:	0011      	movs	r1, r2
 800caaa:	0018      	movs	r0, r3
 800caac:	f7fe fcdf 	bl	800b46e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cab0:	4b06      	ldr	r3, [pc, #24]	; (800cacc <CDC_Receive_FS+0x74>)
 800cab2:	0018      	movs	r0, r3
 800cab4:	f7fe fd26 	bl	800b504 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cab8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800caba:	0018      	movs	r0, r3
 800cabc:	46bd      	mov	sp, r7
 800cabe:	b005      	add	sp, #20
 800cac0:	bd90      	pop	{r4, r7, pc}
 800cac2:	46c0      	nop			; (mov r8, r8)
 800cac4:	2000063c 	.word	0x2000063c
 800cac8:	20001140 	.word	0x20001140
 800cacc:	200006ac 	.word	0x200006ac

0800cad0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cad0:	b5b0      	push	{r4, r5, r7, lr}
 800cad2:	b084      	sub	sp, #16
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	000a      	movs	r2, r1
 800cada:	1cbb      	adds	r3, r7, #2
 800cadc:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800cade:	230f      	movs	r3, #15
 800cae0:	18fb      	adds	r3, r7, r3
 800cae2:	2200      	movs	r2, #0
 800cae4:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cae6:	4a11      	ldr	r2, [pc, #68]	; (800cb2c <CDC_Transmit_FS+0x5c>)
 800cae8:	23ae      	movs	r3, #174	; 0xae
 800caea:	009b      	lsls	r3, r3, #2
 800caec:	58d3      	ldr	r3, [r2, r3]
 800caee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800caf0:	68ba      	ldr	r2, [r7, #8]
 800caf2:	2385      	movs	r3, #133	; 0x85
 800caf4:	009b      	lsls	r3, r3, #2
 800caf6:	58d3      	ldr	r3, [r2, r3]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d001      	beq.n	800cb00 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800cafc:	2301      	movs	r3, #1
 800cafe:	e010      	b.n	800cb22 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cb00:	1cbb      	adds	r3, r7, #2
 800cb02:	881a      	ldrh	r2, [r3, #0]
 800cb04:	6879      	ldr	r1, [r7, #4]
 800cb06:	4b09      	ldr	r3, [pc, #36]	; (800cb2c <CDC_Transmit_FS+0x5c>)
 800cb08:	0018      	movs	r0, r3
 800cb0a:	f7fe fc94 	bl	800b436 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cb0e:	250f      	movs	r5, #15
 800cb10:	197c      	adds	r4, r7, r5
 800cb12:	4b06      	ldr	r3, [pc, #24]	; (800cb2c <CDC_Transmit_FS+0x5c>)
 800cb14:	0018      	movs	r0, r3
 800cb16:	f7fe fcbe 	bl	800b496 <USBD_CDC_TransmitPacket>
 800cb1a:	0003      	movs	r3, r0
 800cb1c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800cb1e:	197b      	adds	r3, r7, r5
 800cb20:	781b      	ldrb	r3, [r3, #0]
}
 800cb22:	0018      	movs	r0, r3
 800cb24:	46bd      	mov	sp, r7
 800cb26:	b004      	add	sp, #16
 800cb28:	bdb0      	pop	{r4, r5, r7, pc}
 800cb2a:	46c0      	nop			; (mov r8, r8)
 800cb2c:	200006ac 	.word	0x200006ac

0800cb30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	0002      	movs	r2, r0
 800cb38:	6039      	str	r1, [r7, #0]
 800cb3a:	1dfb      	adds	r3, r7, #7
 800cb3c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	2212      	movs	r2, #18
 800cb42:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cb44:	4b02      	ldr	r3, [pc, #8]	; (800cb50 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cb46:	0018      	movs	r0, r3
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	b002      	add	sp, #8
 800cb4c:	bd80      	pop	{r7, pc}
 800cb4e:	46c0      	nop			; (mov r8, r8)
 800cb50:	20000148 	.word	0x20000148

0800cb54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	0002      	movs	r2, r0
 800cb5c:	6039      	str	r1, [r7, #0]
 800cb5e:	1dfb      	adds	r3, r7, #7
 800cb60:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	2204      	movs	r2, #4
 800cb66:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cb68:	4b02      	ldr	r3, [pc, #8]	; (800cb74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cb6a:	0018      	movs	r0, r3
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	b002      	add	sp, #8
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	46c0      	nop			; (mov r8, r8)
 800cb74:	2000015c 	.word	0x2000015c

0800cb78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	0002      	movs	r2, r0
 800cb80:	6039      	str	r1, [r7, #0]
 800cb82:	1dfb      	adds	r3, r7, #7
 800cb84:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800cb86:	1dfb      	adds	r3, r7, #7
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d106      	bne.n	800cb9c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb8e:	683a      	ldr	r2, [r7, #0]
 800cb90:	4908      	ldr	r1, [pc, #32]	; (800cbb4 <USBD_FS_ProductStrDescriptor+0x3c>)
 800cb92:	4b09      	ldr	r3, [pc, #36]	; (800cbb8 <USBD_FS_ProductStrDescriptor+0x40>)
 800cb94:	0018      	movs	r0, r3
 800cb96:	f7ff fdf4 	bl	800c782 <USBD_GetString>
 800cb9a:	e005      	b.n	800cba8 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb9c:	683a      	ldr	r2, [r7, #0]
 800cb9e:	4905      	ldr	r1, [pc, #20]	; (800cbb4 <USBD_FS_ProductStrDescriptor+0x3c>)
 800cba0:	4b05      	ldr	r3, [pc, #20]	; (800cbb8 <USBD_FS_ProductStrDescriptor+0x40>)
 800cba2:	0018      	movs	r0, r3
 800cba4:	f7ff fded 	bl	800c782 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cba8:	4b02      	ldr	r3, [pc, #8]	; (800cbb4 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800cbaa:	0018      	movs	r0, r3
 800cbac:	46bd      	mov	sp, r7
 800cbae:	b002      	add	sp, #8
 800cbb0:	bd80      	pop	{r7, pc}
 800cbb2:	46c0      	nop			; (mov r8, r8)
 800cbb4:	20001144 	.word	0x20001144
 800cbb8:	0800de18 	.word	0x0800de18

0800cbbc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	0002      	movs	r2, r0
 800cbc4:	6039      	str	r1, [r7, #0]
 800cbc6:	1dfb      	adds	r3, r7, #7
 800cbc8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cbca:	683a      	ldr	r2, [r7, #0]
 800cbcc:	4904      	ldr	r1, [pc, #16]	; (800cbe0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cbce:	4b05      	ldr	r3, [pc, #20]	; (800cbe4 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800cbd0:	0018      	movs	r0, r3
 800cbd2:	f7ff fdd6 	bl	800c782 <USBD_GetString>
  return USBD_StrDesc;
 800cbd6:	4b02      	ldr	r3, [pc, #8]	; (800cbe0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800cbd8:	0018      	movs	r0, r3
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	b002      	add	sp, #8
 800cbde:	bd80      	pop	{r7, pc}
 800cbe0:	20001144 	.word	0x20001144
 800cbe4:	0800de30 	.word	0x0800de30

0800cbe8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b082      	sub	sp, #8
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	0002      	movs	r2, r0
 800cbf0:	6039      	str	r1, [r7, #0]
 800cbf2:	1dfb      	adds	r3, r7, #7
 800cbf4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	221a      	movs	r2, #26
 800cbfa:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cbfc:	f000 f84c 	bl	800cc98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cc00:	4b02      	ldr	r3, [pc, #8]	; (800cc0c <USBD_FS_SerialStrDescriptor+0x24>)
}
 800cc02:	0018      	movs	r0, r3
 800cc04:	46bd      	mov	sp, r7
 800cc06:	b002      	add	sp, #8
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	46c0      	nop			; (mov r8, r8)
 800cc0c:	20000160 	.word	0x20000160

0800cc10 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	0002      	movs	r2, r0
 800cc18:	6039      	str	r1, [r7, #0]
 800cc1a:	1dfb      	adds	r3, r7, #7
 800cc1c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800cc1e:	1dfb      	adds	r3, r7, #7
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d106      	bne.n	800cc34 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc26:	683a      	ldr	r2, [r7, #0]
 800cc28:	4908      	ldr	r1, [pc, #32]	; (800cc4c <USBD_FS_ConfigStrDescriptor+0x3c>)
 800cc2a:	4b09      	ldr	r3, [pc, #36]	; (800cc50 <USBD_FS_ConfigStrDescriptor+0x40>)
 800cc2c:	0018      	movs	r0, r3
 800cc2e:	f7ff fda8 	bl	800c782 <USBD_GetString>
 800cc32:	e005      	b.n	800cc40 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc34:	683a      	ldr	r2, [r7, #0]
 800cc36:	4905      	ldr	r1, [pc, #20]	; (800cc4c <USBD_FS_ConfigStrDescriptor+0x3c>)
 800cc38:	4b05      	ldr	r3, [pc, #20]	; (800cc50 <USBD_FS_ConfigStrDescriptor+0x40>)
 800cc3a:	0018      	movs	r0, r3
 800cc3c:	f7ff fda1 	bl	800c782 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc40:	4b02      	ldr	r3, [pc, #8]	; (800cc4c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800cc42:	0018      	movs	r0, r3
 800cc44:	46bd      	mov	sp, r7
 800cc46:	b002      	add	sp, #8
 800cc48:	bd80      	pop	{r7, pc}
 800cc4a:	46c0      	nop			; (mov r8, r8)
 800cc4c:	20001144 	.word	0x20001144
 800cc50:	0800de44 	.word	0x0800de44

0800cc54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b082      	sub	sp, #8
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	0002      	movs	r2, r0
 800cc5c:	6039      	str	r1, [r7, #0]
 800cc5e:	1dfb      	adds	r3, r7, #7
 800cc60:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800cc62:	1dfb      	adds	r3, r7, #7
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d106      	bne.n	800cc78 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc6a:	683a      	ldr	r2, [r7, #0]
 800cc6c:	4908      	ldr	r1, [pc, #32]	; (800cc90 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800cc6e:	4b09      	ldr	r3, [pc, #36]	; (800cc94 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800cc70:	0018      	movs	r0, r3
 800cc72:	f7ff fd86 	bl	800c782 <USBD_GetString>
 800cc76:	e005      	b.n	800cc84 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cc78:	683a      	ldr	r2, [r7, #0]
 800cc7a:	4905      	ldr	r1, [pc, #20]	; (800cc90 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800cc7c:	4b05      	ldr	r3, [pc, #20]	; (800cc94 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800cc7e:	0018      	movs	r0, r3
 800cc80:	f7ff fd7f 	bl	800c782 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc84:	4b02      	ldr	r3, [pc, #8]	; (800cc90 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800cc86:	0018      	movs	r0, r3
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	b002      	add	sp, #8
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	46c0      	nop			; (mov r8, r8)
 800cc90:	20001144 	.word	0x20001144
 800cc94:	0800de50 	.word	0x0800de50

0800cc98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cc9e:	4b10      	ldr	r3, [pc, #64]	; (800cce0 <Get_SerialNum+0x48>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cca4:	4b0f      	ldr	r3, [pc, #60]	; (800cce4 <Get_SerialNum+0x4c>)
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ccaa:	4b0f      	ldr	r3, [pc, #60]	; (800cce8 <Get_SerialNum+0x50>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ccb0:	68fa      	ldr	r2, [r7, #12]
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	18d3      	adds	r3, r2, r3
 800ccb6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d00b      	beq.n	800ccd6 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ccbe:	490b      	ldr	r1, [pc, #44]	; (800ccec <Get_SerialNum+0x54>)
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2208      	movs	r2, #8
 800ccc4:	0018      	movs	r0, r3
 800ccc6:	f000 f815 	bl	800ccf4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ccca:	4909      	ldr	r1, [pc, #36]	; (800ccf0 <Get_SerialNum+0x58>)
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	2204      	movs	r2, #4
 800ccd0:	0018      	movs	r0, r3
 800ccd2:	f000 f80f 	bl	800ccf4 <IntToUnicode>
  }
}
 800ccd6:	46c0      	nop			; (mov r8, r8)
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	b004      	add	sp, #16
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	46c0      	nop			; (mov r8, r8)
 800cce0:	1ffff7ac 	.word	0x1ffff7ac
 800cce4:	1ffff7b0 	.word	0x1ffff7b0
 800cce8:	1ffff7b4 	.word	0x1ffff7b4
 800ccec:	20000162 	.word	0x20000162
 800ccf0:	20000172 	.word	0x20000172

0800ccf4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b086      	sub	sp, #24
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	60b9      	str	r1, [r7, #8]
 800ccfe:	1dfb      	adds	r3, r7, #7
 800cd00:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800cd02:	2117      	movs	r1, #23
 800cd04:	187b      	adds	r3, r7, r1
 800cd06:	2200      	movs	r2, #0
 800cd08:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800cd0a:	187b      	adds	r3, r7, r1
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	701a      	strb	r2, [r3, #0]
 800cd10:	e02f      	b.n	800cd72 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	0f1b      	lsrs	r3, r3, #28
 800cd16:	2b09      	cmp	r3, #9
 800cd18:	d80d      	bhi.n	800cd36 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	0f1b      	lsrs	r3, r3, #28
 800cd1e:	b2da      	uxtb	r2, r3
 800cd20:	2317      	movs	r3, #23
 800cd22:	18fb      	adds	r3, r7, r3
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	005b      	lsls	r3, r3, #1
 800cd28:	0019      	movs	r1, r3
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	185b      	adds	r3, r3, r1
 800cd2e:	3230      	adds	r2, #48	; 0x30
 800cd30:	b2d2      	uxtb	r2, r2
 800cd32:	701a      	strb	r2, [r3, #0]
 800cd34:	e00c      	b.n	800cd50 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	0f1b      	lsrs	r3, r3, #28
 800cd3a:	b2da      	uxtb	r2, r3
 800cd3c:	2317      	movs	r3, #23
 800cd3e:	18fb      	adds	r3, r7, r3
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	005b      	lsls	r3, r3, #1
 800cd44:	0019      	movs	r1, r3
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	185b      	adds	r3, r3, r1
 800cd4a:	3237      	adds	r2, #55	; 0x37
 800cd4c:	b2d2      	uxtb	r2, r2
 800cd4e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	011b      	lsls	r3, r3, #4
 800cd54:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cd56:	2117      	movs	r1, #23
 800cd58:	187b      	adds	r3, r7, r1
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	005b      	lsls	r3, r3, #1
 800cd5e:	3301      	adds	r3, #1
 800cd60:	68ba      	ldr	r2, [r7, #8]
 800cd62:	18d3      	adds	r3, r2, r3
 800cd64:	2200      	movs	r2, #0
 800cd66:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cd68:	187b      	adds	r3, r7, r1
 800cd6a:	781a      	ldrb	r2, [r3, #0]
 800cd6c:	187b      	adds	r3, r7, r1
 800cd6e:	3201      	adds	r2, #1
 800cd70:	701a      	strb	r2, [r3, #0]
 800cd72:	2317      	movs	r3, #23
 800cd74:	18fa      	adds	r2, r7, r3
 800cd76:	1dfb      	adds	r3, r7, #7
 800cd78:	7812      	ldrb	r2, [r2, #0]
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	429a      	cmp	r2, r3
 800cd7e:	d3c8      	bcc.n	800cd12 <IntToUnicode+0x1e>
  }
}
 800cd80:	46c0      	nop			; (mov r8, r8)
 800cd82:	46c0      	nop			; (mov r8, r8)
 800cd84:	46bd      	mov	sp, r7
 800cd86:	b006      	add	sp, #24
 800cd88:	bd80      	pop	{r7, pc}
	...

0800cd8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4a0e      	ldr	r2, [pc, #56]	; (800cdd4 <HAL_PCD_MspInit+0x48>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d115      	bne.n	800cdca <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cd9e:	4b0e      	ldr	r3, [pc, #56]	; (800cdd8 <HAL_PCD_MspInit+0x4c>)
 800cda0:	69da      	ldr	r2, [r3, #28]
 800cda2:	4b0d      	ldr	r3, [pc, #52]	; (800cdd8 <HAL_PCD_MspInit+0x4c>)
 800cda4:	2180      	movs	r1, #128	; 0x80
 800cda6:	0409      	lsls	r1, r1, #16
 800cda8:	430a      	orrs	r2, r1
 800cdaa:	61da      	str	r2, [r3, #28]
 800cdac:	4b0a      	ldr	r3, [pc, #40]	; (800cdd8 <HAL_PCD_MspInit+0x4c>)
 800cdae:	69da      	ldr	r2, [r3, #28]
 800cdb0:	2380      	movs	r3, #128	; 0x80
 800cdb2:	041b      	lsls	r3, r3, #16
 800cdb4:	4013      	ands	r3, r2
 800cdb6:	60fb      	str	r3, [r7, #12]
 800cdb8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800cdba:	2200      	movs	r2, #0
 800cdbc:	2100      	movs	r1, #0
 800cdbe:	201f      	movs	r0, #31
 800cdc0:	f7f6 ffc2 	bl	8003d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800cdc4:	201f      	movs	r0, #31
 800cdc6:	f7f6 ffd4 	bl	8003d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cdca:	46c0      	nop			; (mov r8, r8)
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	b004      	add	sp, #16
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	46c0      	nop			; (mov r8, r8)
 800cdd4:	40005c00 	.word	0x40005c00
 800cdd8:	40021000 	.word	0x40021000

0800cddc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b082      	sub	sp, #8
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cde4:	687a      	ldr	r2, [r7, #4]
 800cde6:	23bc      	movs	r3, #188	; 0xbc
 800cde8:	009b      	lsls	r3, r3, #2
 800cdea:	58d2      	ldr	r2, [r2, r3]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	21ac      	movs	r1, #172	; 0xac
 800cdf0:	0089      	lsls	r1, r1, #2
 800cdf2:	468c      	mov	ip, r1
 800cdf4:	4463      	add	r3, ip
 800cdf6:	0019      	movs	r1, r3
 800cdf8:	0010      	movs	r0, r2
 800cdfa:	f7fe fc55 	bl	800b6a8 <USBD_LL_SetupStage>
}
 800cdfe:	46c0      	nop			; (mov r8, r8)
 800ce00:	46bd      	mov	sp, r7
 800ce02:	b002      	add	sp, #8
 800ce04:	bd80      	pop	{r7, pc}

0800ce06 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce06:	b590      	push	{r4, r7, lr}
 800ce08:	b083      	sub	sp, #12
 800ce0a:	af00      	add	r7, sp, #0
 800ce0c:	6078      	str	r0, [r7, #4]
 800ce0e:	000a      	movs	r2, r1
 800ce10:	1cfb      	adds	r3, r7, #3
 800ce12:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ce14:	687a      	ldr	r2, [r7, #4]
 800ce16:	23bc      	movs	r3, #188	; 0xbc
 800ce18:	009b      	lsls	r3, r3, #2
 800ce1a:	58d4      	ldr	r4, [r2, r3]
 800ce1c:	1cfb      	adds	r3, r7, #3
 800ce1e:	781a      	ldrb	r2, [r3, #0]
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	23be      	movs	r3, #190	; 0xbe
 800ce24:	0059      	lsls	r1, r3, #1
 800ce26:	0013      	movs	r3, r2
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	189b      	adds	r3, r3, r2
 800ce2c:	00db      	lsls	r3, r3, #3
 800ce2e:	18c3      	adds	r3, r0, r3
 800ce30:	185b      	adds	r3, r3, r1
 800ce32:	681a      	ldr	r2, [r3, #0]
 800ce34:	1cfb      	adds	r3, r7, #3
 800ce36:	781b      	ldrb	r3, [r3, #0]
 800ce38:	0019      	movs	r1, r3
 800ce3a:	0020      	movs	r0, r4
 800ce3c:	f7fe fc92 	bl	800b764 <USBD_LL_DataOutStage>
}
 800ce40:	46c0      	nop			; (mov r8, r8)
 800ce42:	46bd      	mov	sp, r7
 800ce44:	b003      	add	sp, #12
 800ce46:	bd90      	pop	{r4, r7, pc}

0800ce48 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	000a      	movs	r2, r1
 800ce52:	1cfb      	adds	r3, r7, #3
 800ce54:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	23bc      	movs	r3, #188	; 0xbc
 800ce5a:	009b      	lsls	r3, r3, #2
 800ce5c:	58d0      	ldr	r0, [r2, r3]
 800ce5e:	1cfb      	adds	r3, r7, #3
 800ce60:	781a      	ldrb	r2, [r3, #0]
 800ce62:	6879      	ldr	r1, [r7, #4]
 800ce64:	0013      	movs	r3, r2
 800ce66:	009b      	lsls	r3, r3, #2
 800ce68:	189b      	adds	r3, r3, r2
 800ce6a:	00db      	lsls	r3, r3, #3
 800ce6c:	18cb      	adds	r3, r1, r3
 800ce6e:	333c      	adds	r3, #60	; 0x3c
 800ce70:	681a      	ldr	r2, [r3, #0]
 800ce72:	1cfb      	adds	r3, r7, #3
 800ce74:	781b      	ldrb	r3, [r3, #0]
 800ce76:	0019      	movs	r1, r3
 800ce78:	f7fe fcf6 	bl	800b868 <USBD_LL_DataInStage>
}
 800ce7c:	46c0      	nop			; (mov r8, r8)
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	b002      	add	sp, #8
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ce8c:	687a      	ldr	r2, [r7, #4]
 800ce8e:	23bc      	movs	r3, #188	; 0xbc
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	58d3      	ldr	r3, [r2, r3]
 800ce94:	0018      	movs	r0, r3
 800ce96:	f7fe fe2d 	bl	800baf4 <USBD_LL_SOF>
}
 800ce9a:	46c0      	nop			; (mov r8, r8)
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	b002      	add	sp, #8
 800cea0:	bd80      	pop	{r7, pc}

0800cea2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cea2:	b580      	push	{r7, lr}
 800cea4:	b084      	sub	sp, #16
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ceaa:	230f      	movs	r3, #15
 800ceac:	18fb      	adds	r3, r7, r3
 800ceae:	2201      	movs	r2, #1
 800ceb0:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	689b      	ldr	r3, [r3, #8]
 800ceb6:	2b02      	cmp	r3, #2
 800ceb8:	d001      	beq.n	800cebe <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800ceba:	f7f5 fa53 	bl	8002364 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	23bc      	movs	r3, #188	; 0xbc
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	58d2      	ldr	r2, [r2, r3]
 800cec6:	230f      	movs	r3, #15
 800cec8:	18fb      	adds	r3, r7, r3
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	0019      	movs	r1, r3
 800cece:	0010      	movs	r0, r2
 800ced0:	f7fe fdcf 	bl	800ba72 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	23bc      	movs	r3, #188	; 0xbc
 800ced8:	009b      	lsls	r3, r3, #2
 800ceda:	58d3      	ldr	r3, [r2, r3]
 800cedc:	0018      	movs	r0, r3
 800cede:	f7fe fd80 	bl	800b9e2 <USBD_LL_Reset>
}
 800cee2:	46c0      	nop			; (mov r8, r8)
 800cee4:	46bd      	mov	sp, r7
 800cee6:	b004      	add	sp, #16
 800cee8:	bd80      	pop	{r7, pc}
	...

0800ceec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	23bc      	movs	r3, #188	; 0xbc
 800cef8:	009b      	lsls	r3, r3, #2
 800cefa:	58d3      	ldr	r3, [r2, r3]
 800cefc:	0018      	movs	r0, r3
 800cefe:	f7fe fdc9 	bl	800ba94 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	699b      	ldr	r3, [r3, #24]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d005      	beq.n	800cf16 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf0a:	4b05      	ldr	r3, [pc, #20]	; (800cf20 <HAL_PCD_SuspendCallback+0x34>)
 800cf0c:	691a      	ldr	r2, [r3, #16]
 800cf0e:	4b04      	ldr	r3, [pc, #16]	; (800cf20 <HAL_PCD_SuspendCallback+0x34>)
 800cf10:	2106      	movs	r1, #6
 800cf12:	430a      	orrs	r2, r1
 800cf14:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800cf16:	46c0      	nop			; (mov r8, r8)
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	b002      	add	sp, #8
 800cf1c:	bd80      	pop	{r7, pc}
 800cf1e:	46c0      	nop			; (mov r8, r8)
 800cf20:	e000ed00 	.word	0xe000ed00

0800cf24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	699b      	ldr	r3, [r3, #24]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d007      	beq.n	800cf44 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf34:	4b09      	ldr	r3, [pc, #36]	; (800cf5c <HAL_PCD_ResumeCallback+0x38>)
 800cf36:	691a      	ldr	r2, [r3, #16]
 800cf38:	4b08      	ldr	r3, [pc, #32]	; (800cf5c <HAL_PCD_ResumeCallback+0x38>)
 800cf3a:	2106      	movs	r1, #6
 800cf3c:	438a      	bics	r2, r1
 800cf3e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800cf40:	f000 fa44 	bl	800d3cc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cf44:	687a      	ldr	r2, [r7, #4]
 800cf46:	23bc      	movs	r3, #188	; 0xbc
 800cf48:	009b      	lsls	r3, r3, #2
 800cf4a:	58d3      	ldr	r3, [r2, r3]
 800cf4c:	0018      	movs	r0, r3
 800cf4e:	f7fe fdb9 	bl	800bac4 <USBD_LL_Resume>
}
 800cf52:	46c0      	nop			; (mov r8, r8)
 800cf54:	46bd      	mov	sp, r7
 800cf56:	b002      	add	sp, #8
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	46c0      	nop			; (mov r8, r8)
 800cf5c:	e000ed00 	.word	0xe000ed00

0800cf60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b082      	sub	sp, #8
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cf68:	4a2d      	ldr	r2, [pc, #180]	; (800d020 <USBD_LL_Init+0xc0>)
 800cf6a:	23bc      	movs	r3, #188	; 0xbc
 800cf6c:	009b      	lsls	r3, r3, #2
 800cf6e:	6879      	ldr	r1, [r7, #4]
 800cf70:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	23b0      	movs	r3, #176	; 0xb0
 800cf76:	009b      	lsls	r3, r3, #2
 800cf78:	4929      	ldr	r1, [pc, #164]	; (800d020 <USBD_LL_Init+0xc0>)
 800cf7a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800cf7c:	4b28      	ldr	r3, [pc, #160]	; (800d020 <USBD_LL_Init+0xc0>)
 800cf7e:	4a29      	ldr	r2, [pc, #164]	; (800d024 <USBD_LL_Init+0xc4>)
 800cf80:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cf82:	4b27      	ldr	r3, [pc, #156]	; (800d020 <USBD_LL_Init+0xc0>)
 800cf84:	2208      	movs	r2, #8
 800cf86:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cf88:	4b25      	ldr	r3, [pc, #148]	; (800d020 <USBD_LL_Init+0xc0>)
 800cf8a:	2202      	movs	r2, #2
 800cf8c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cf8e:	4b24      	ldr	r3, [pc, #144]	; (800d020 <USBD_LL_Init+0xc0>)
 800cf90:	2202      	movs	r2, #2
 800cf92:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cf94:	4b22      	ldr	r3, [pc, #136]	; (800d020 <USBD_LL_Init+0xc0>)
 800cf96:	2200      	movs	r2, #0
 800cf98:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cf9a:	4b21      	ldr	r3, [pc, #132]	; (800d020 <USBD_LL_Init+0xc0>)
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cfa0:	4b1f      	ldr	r3, [pc, #124]	; (800d020 <USBD_LL_Init+0xc0>)
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cfa6:	4b1e      	ldr	r3, [pc, #120]	; (800d020 <USBD_LL_Init+0xc0>)
 800cfa8:	0018      	movs	r0, r3
 800cfaa:	f7f7 f967 	bl	800427c <HAL_PCD_Init>
 800cfae:	1e03      	subs	r3, r0, #0
 800cfb0:	d001      	beq.n	800cfb6 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800cfb2:	f7f5 f9d7 	bl	8002364 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cfb6:	687a      	ldr	r2, [r7, #4]
 800cfb8:	23b0      	movs	r3, #176	; 0xb0
 800cfba:	009b      	lsls	r3, r3, #2
 800cfbc:	58d0      	ldr	r0, [r2, r3]
 800cfbe:	2318      	movs	r3, #24
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	2100      	movs	r1, #0
 800cfc4:	f7f8 ff48 	bl	8005e58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cfc8:	687a      	ldr	r2, [r7, #4]
 800cfca:	23b0      	movs	r3, #176	; 0xb0
 800cfcc:	009b      	lsls	r3, r3, #2
 800cfce:	58d0      	ldr	r0, [r2, r3]
 800cfd0:	2358      	movs	r3, #88	; 0x58
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	2180      	movs	r1, #128	; 0x80
 800cfd6:	f7f8 ff3f 	bl	8005e58 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	23b0      	movs	r3, #176	; 0xb0
 800cfde:	009b      	lsls	r3, r3, #2
 800cfe0:	58d0      	ldr	r0, [r2, r3]
 800cfe2:	23c0      	movs	r3, #192	; 0xc0
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	2181      	movs	r1, #129	; 0x81
 800cfe8:	f7f8 ff36 	bl	8005e58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	23b0      	movs	r3, #176	; 0xb0
 800cff0:	009b      	lsls	r3, r3, #2
 800cff2:	58d0      	ldr	r0, [r2, r3]
 800cff4:	2388      	movs	r3, #136	; 0x88
 800cff6:	005b      	lsls	r3, r3, #1
 800cff8:	2200      	movs	r2, #0
 800cffa:	2101      	movs	r1, #1
 800cffc:	f7f8 ff2c 	bl	8005e58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d000:	687a      	ldr	r2, [r7, #4]
 800d002:	23b0      	movs	r3, #176	; 0xb0
 800d004:	009b      	lsls	r3, r3, #2
 800d006:	58d0      	ldr	r0, [r2, r3]
 800d008:	2380      	movs	r3, #128	; 0x80
 800d00a:	005b      	lsls	r3, r3, #1
 800d00c:	2200      	movs	r2, #0
 800d00e:	2182      	movs	r1, #130	; 0x82
 800d010:	f7f8 ff22 	bl	8005e58 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d014:	2300      	movs	r3, #0
}
 800d016:	0018      	movs	r0, r3
 800d018:	46bd      	mov	sp, r7
 800d01a:	b002      	add	sp, #8
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	46c0      	nop			; (mov r8, r8)
 800d020:	20001344 	.word	0x20001344
 800d024:	40005c00 	.word	0x40005c00

0800d028 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d02a:	b085      	sub	sp, #20
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d030:	210f      	movs	r1, #15
 800d032:	187b      	adds	r3, r7, r1
 800d034:	2200      	movs	r2, #0
 800d036:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d038:	260e      	movs	r6, #14
 800d03a:	19bb      	adds	r3, r7, r6
 800d03c:	2200      	movs	r2, #0
 800d03e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	23b0      	movs	r3, #176	; 0xb0
 800d044:	009b      	lsls	r3, r3, #2
 800d046:	58d3      	ldr	r3, [r2, r3]
 800d048:	000d      	movs	r5, r1
 800d04a:	187c      	adds	r4, r7, r1
 800d04c:	0018      	movs	r0, r3
 800d04e:	f7f7 fa25 	bl	800449c <HAL_PCD_Start>
 800d052:	0003      	movs	r3, r0
 800d054:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d056:	19bc      	adds	r4, r7, r6
 800d058:	197b      	adds	r3, r7, r5
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	0018      	movs	r0, r3
 800d05e:	f000 f9bc 	bl	800d3da <USBD_Get_USB_Status>
 800d062:	0003      	movs	r3, r0
 800d064:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d066:	19bb      	adds	r3, r7, r6
 800d068:	781b      	ldrb	r3, [r3, #0]
}
 800d06a:	0018      	movs	r0, r3
 800d06c:	46bd      	mov	sp, r7
 800d06e:	b005      	add	sp, #20
 800d070:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d072 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d072:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d074:	b085      	sub	sp, #20
 800d076:	af00      	add	r7, sp, #0
 800d078:	6078      	str	r0, [r7, #4]
 800d07a:	000c      	movs	r4, r1
 800d07c:	0010      	movs	r0, r2
 800d07e:	0019      	movs	r1, r3
 800d080:	1cfb      	adds	r3, r7, #3
 800d082:	1c22      	adds	r2, r4, #0
 800d084:	701a      	strb	r2, [r3, #0]
 800d086:	1cbb      	adds	r3, r7, #2
 800d088:	1c02      	adds	r2, r0, #0
 800d08a:	701a      	strb	r2, [r3, #0]
 800d08c:	003b      	movs	r3, r7
 800d08e:	1c0a      	adds	r2, r1, #0
 800d090:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d092:	260f      	movs	r6, #15
 800d094:	19bb      	adds	r3, r7, r6
 800d096:	2200      	movs	r2, #0
 800d098:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d09a:	250e      	movs	r5, #14
 800d09c:	197b      	adds	r3, r7, r5
 800d09e:	2200      	movs	r2, #0
 800d0a0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d0a2:	687a      	ldr	r2, [r7, #4]
 800d0a4:	23b0      	movs	r3, #176	; 0xb0
 800d0a6:	009b      	lsls	r3, r3, #2
 800d0a8:	58d0      	ldr	r0, [r2, r3]
 800d0aa:	19bc      	adds	r4, r7, r6
 800d0ac:	1cbb      	adds	r3, r7, #2
 800d0ae:	781d      	ldrb	r5, [r3, #0]
 800d0b0:	003b      	movs	r3, r7
 800d0b2:	881a      	ldrh	r2, [r3, #0]
 800d0b4:	1cfb      	adds	r3, r7, #3
 800d0b6:	7819      	ldrb	r1, [r3, #0]
 800d0b8:	002b      	movs	r3, r5
 800d0ba:	f7f7 fbbc 	bl	8004836 <HAL_PCD_EP_Open>
 800d0be:	0003      	movs	r3, r0
 800d0c0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0c2:	250e      	movs	r5, #14
 800d0c4:	197c      	adds	r4, r7, r5
 800d0c6:	19bb      	adds	r3, r7, r6
 800d0c8:	781b      	ldrb	r3, [r3, #0]
 800d0ca:	0018      	movs	r0, r3
 800d0cc:	f000 f985 	bl	800d3da <USBD_Get_USB_Status>
 800d0d0:	0003      	movs	r3, r0
 800d0d2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d0d4:	197b      	adds	r3, r7, r5
 800d0d6:	781b      	ldrb	r3, [r3, #0]
}
 800d0d8:	0018      	movs	r0, r3
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	b005      	add	sp, #20
 800d0de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d0e0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0e2:	b085      	sub	sp, #20
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	000a      	movs	r2, r1
 800d0ea:	1cfb      	adds	r3, r7, #3
 800d0ec:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0ee:	210f      	movs	r1, #15
 800d0f0:	187b      	adds	r3, r7, r1
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0f6:	260e      	movs	r6, #14
 800d0f8:	19bb      	adds	r3, r7, r6
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	23b0      	movs	r3, #176	; 0xb0
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	58d2      	ldr	r2, [r2, r3]
 800d106:	000d      	movs	r5, r1
 800d108:	187c      	adds	r4, r7, r1
 800d10a:	1cfb      	adds	r3, r7, #3
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	0019      	movs	r1, r3
 800d110:	0010      	movs	r0, r2
 800d112:	f7f7 fc08 	bl	8004926 <HAL_PCD_EP_Close>
 800d116:	0003      	movs	r3, r0
 800d118:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d11a:	19bc      	adds	r4, r7, r6
 800d11c:	197b      	adds	r3, r7, r5
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	0018      	movs	r0, r3
 800d122:	f000 f95a 	bl	800d3da <USBD_Get_USB_Status>
 800d126:	0003      	movs	r3, r0
 800d128:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d12a:	19bb      	adds	r3, r7, r6
 800d12c:	781b      	ldrb	r3, [r3, #0]
}
 800d12e:	0018      	movs	r0, r3
 800d130:	46bd      	mov	sp, r7
 800d132:	b005      	add	sp, #20
 800d134:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d136 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d136:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d138:	b085      	sub	sp, #20
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	6078      	str	r0, [r7, #4]
 800d13e:	000a      	movs	r2, r1
 800d140:	1cfb      	adds	r3, r7, #3
 800d142:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d144:	210f      	movs	r1, #15
 800d146:	187b      	adds	r3, r7, r1
 800d148:	2200      	movs	r2, #0
 800d14a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d14c:	260e      	movs	r6, #14
 800d14e:	19bb      	adds	r3, r7, r6
 800d150:	2200      	movs	r2, #0
 800d152:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d154:	687a      	ldr	r2, [r7, #4]
 800d156:	23b0      	movs	r3, #176	; 0xb0
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	58d2      	ldr	r2, [r2, r3]
 800d15c:	000d      	movs	r5, r1
 800d15e:	187c      	adds	r4, r7, r1
 800d160:	1cfb      	adds	r3, r7, #3
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	0019      	movs	r1, r3
 800d166:	0010      	movs	r0, r2
 800d168:	f7f7 fcd4 	bl	8004b14 <HAL_PCD_EP_SetStall>
 800d16c:	0003      	movs	r3, r0
 800d16e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d170:	19bc      	adds	r4, r7, r6
 800d172:	197b      	adds	r3, r7, r5
 800d174:	781b      	ldrb	r3, [r3, #0]
 800d176:	0018      	movs	r0, r3
 800d178:	f000 f92f 	bl	800d3da <USBD_Get_USB_Status>
 800d17c:	0003      	movs	r3, r0
 800d17e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d180:	19bb      	adds	r3, r7, r6
 800d182:	781b      	ldrb	r3, [r3, #0]
}
 800d184:	0018      	movs	r0, r3
 800d186:	46bd      	mov	sp, r7
 800d188:	b005      	add	sp, #20
 800d18a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d18c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d18e:	b085      	sub	sp, #20
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	000a      	movs	r2, r1
 800d196:	1cfb      	adds	r3, r7, #3
 800d198:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d19a:	210f      	movs	r1, #15
 800d19c:	187b      	adds	r3, r7, r1
 800d19e:	2200      	movs	r2, #0
 800d1a0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1a2:	260e      	movs	r6, #14
 800d1a4:	19bb      	adds	r3, r7, r6
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d1aa:	687a      	ldr	r2, [r7, #4]
 800d1ac:	23b0      	movs	r3, #176	; 0xb0
 800d1ae:	009b      	lsls	r3, r3, #2
 800d1b0:	58d2      	ldr	r2, [r2, r3]
 800d1b2:	000d      	movs	r5, r1
 800d1b4:	187c      	adds	r4, r7, r1
 800d1b6:	1cfb      	adds	r3, r7, #3
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	0019      	movs	r1, r3
 800d1bc:	0010      	movs	r0, r2
 800d1be:	f7f7 fd05 	bl	8004bcc <HAL_PCD_EP_ClrStall>
 800d1c2:	0003      	movs	r3, r0
 800d1c4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1c6:	19bc      	adds	r4, r7, r6
 800d1c8:	197b      	adds	r3, r7, r5
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	0018      	movs	r0, r3
 800d1ce:	f000 f904 	bl	800d3da <USBD_Get_USB_Status>
 800d1d2:	0003      	movs	r3, r0
 800d1d4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d1d6:	19bb      	adds	r3, r7, r6
 800d1d8:	781b      	ldrb	r3, [r3, #0]
}
 800d1da:	0018      	movs	r0, r3
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	b005      	add	sp, #20
 800d1e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d1e2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1e2:	b580      	push	{r7, lr}
 800d1e4:	b084      	sub	sp, #16
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
 800d1ea:	000a      	movs	r2, r1
 800d1ec:	1cfb      	adds	r3, r7, #3
 800d1ee:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d1f0:	687a      	ldr	r2, [r7, #4]
 800d1f2:	23b0      	movs	r3, #176	; 0xb0
 800d1f4:	009b      	lsls	r3, r3, #2
 800d1f6:	58d3      	ldr	r3, [r2, r3]
 800d1f8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d1fa:	1cfb      	adds	r3, r7, #3
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	b25b      	sxtb	r3, r3
 800d200:	2b00      	cmp	r3, #0
 800d202:	da0d      	bge.n	800d220 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d204:	1cfb      	adds	r3, r7, #3
 800d206:	781b      	ldrb	r3, [r3, #0]
 800d208:	227f      	movs	r2, #127	; 0x7f
 800d20a:	4013      	ands	r3, r2
 800d20c:	68f9      	ldr	r1, [r7, #12]
 800d20e:	1c5a      	adds	r2, r3, #1
 800d210:	0013      	movs	r3, r2
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	189b      	adds	r3, r3, r2
 800d216:	00db      	lsls	r3, r3, #3
 800d218:	18cb      	adds	r3, r1, r3
 800d21a:	3302      	adds	r3, #2
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	e00d      	b.n	800d23c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d220:	1cfb      	adds	r3, r7, #3
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	227f      	movs	r2, #127	; 0x7f
 800d226:	401a      	ands	r2, r3
 800d228:	68f8      	ldr	r0, [r7, #12]
 800d22a:	23b5      	movs	r3, #181	; 0xb5
 800d22c:	0059      	lsls	r1, r3, #1
 800d22e:	0013      	movs	r3, r2
 800d230:	009b      	lsls	r3, r3, #2
 800d232:	189b      	adds	r3, r3, r2
 800d234:	00db      	lsls	r3, r3, #3
 800d236:	18c3      	adds	r3, r0, r3
 800d238:	185b      	adds	r3, r3, r1
 800d23a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d23c:	0018      	movs	r0, r3
 800d23e:	46bd      	mov	sp, r7
 800d240:	b004      	add	sp, #16
 800d242:	bd80      	pop	{r7, pc}

0800d244 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d244:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d246:	b085      	sub	sp, #20
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	000a      	movs	r2, r1
 800d24e:	1cfb      	adds	r3, r7, #3
 800d250:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d252:	210f      	movs	r1, #15
 800d254:	187b      	adds	r3, r7, r1
 800d256:	2200      	movs	r2, #0
 800d258:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d25a:	260e      	movs	r6, #14
 800d25c:	19bb      	adds	r3, r7, r6
 800d25e:	2200      	movs	r2, #0
 800d260:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d262:	687a      	ldr	r2, [r7, #4]
 800d264:	23b0      	movs	r3, #176	; 0xb0
 800d266:	009b      	lsls	r3, r3, #2
 800d268:	58d2      	ldr	r2, [r2, r3]
 800d26a:	000d      	movs	r5, r1
 800d26c:	187c      	adds	r4, r7, r1
 800d26e:	1cfb      	adds	r3, r7, #3
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	0019      	movs	r1, r3
 800d274:	0010      	movs	r0, r2
 800d276:	f7f7 fab3 	bl	80047e0 <HAL_PCD_SetAddress>
 800d27a:	0003      	movs	r3, r0
 800d27c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d27e:	19bc      	adds	r4, r7, r6
 800d280:	197b      	adds	r3, r7, r5
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	0018      	movs	r0, r3
 800d286:	f000 f8a8 	bl	800d3da <USBD_Get_USB_Status>
 800d28a:	0003      	movs	r3, r0
 800d28c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d28e:	19bb      	adds	r3, r7, r6
 800d290:	781b      	ldrb	r3, [r3, #0]
}
 800d292:	0018      	movs	r0, r3
 800d294:	46bd      	mov	sp, r7
 800d296:	b005      	add	sp, #20
 800d298:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d29a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d29a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d29c:	b087      	sub	sp, #28
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	60f8      	str	r0, [r7, #12]
 800d2a2:	0008      	movs	r0, r1
 800d2a4:	607a      	str	r2, [r7, #4]
 800d2a6:	0019      	movs	r1, r3
 800d2a8:	230b      	movs	r3, #11
 800d2aa:	18fb      	adds	r3, r7, r3
 800d2ac:	1c02      	adds	r2, r0, #0
 800d2ae:	701a      	strb	r2, [r3, #0]
 800d2b0:	2408      	movs	r4, #8
 800d2b2:	193b      	adds	r3, r7, r4
 800d2b4:	1c0a      	adds	r2, r1, #0
 800d2b6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2b8:	2117      	movs	r1, #23
 800d2ba:	187b      	adds	r3, r7, r1
 800d2bc:	2200      	movs	r2, #0
 800d2be:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2c0:	2516      	movs	r5, #22
 800d2c2:	197b      	adds	r3, r7, r5
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d2c8:	68fa      	ldr	r2, [r7, #12]
 800d2ca:	23b0      	movs	r3, #176	; 0xb0
 800d2cc:	009b      	lsls	r3, r3, #2
 800d2ce:	58d0      	ldr	r0, [r2, r3]
 800d2d0:	193b      	adds	r3, r7, r4
 800d2d2:	881d      	ldrh	r5, [r3, #0]
 800d2d4:	000e      	movs	r6, r1
 800d2d6:	187c      	adds	r4, r7, r1
 800d2d8:	687a      	ldr	r2, [r7, #4]
 800d2da:	230b      	movs	r3, #11
 800d2dc:	18fb      	adds	r3, r7, r3
 800d2de:	7819      	ldrb	r1, [r3, #0]
 800d2e0:	002b      	movs	r3, r5
 800d2e2:	f7f7 fbce 	bl	8004a82 <HAL_PCD_EP_Transmit>
 800d2e6:	0003      	movs	r3, r0
 800d2e8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2ea:	2516      	movs	r5, #22
 800d2ec:	197c      	adds	r4, r7, r5
 800d2ee:	19bb      	adds	r3, r7, r6
 800d2f0:	781b      	ldrb	r3, [r3, #0]
 800d2f2:	0018      	movs	r0, r3
 800d2f4:	f000 f871 	bl	800d3da <USBD_Get_USB_Status>
 800d2f8:	0003      	movs	r3, r0
 800d2fa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d2fc:	197b      	adds	r3, r7, r5
 800d2fe:	781b      	ldrb	r3, [r3, #0]
}
 800d300:	0018      	movs	r0, r3
 800d302:	46bd      	mov	sp, r7
 800d304:	b007      	add	sp, #28
 800d306:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d308 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d30a:	b087      	sub	sp, #28
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	0008      	movs	r0, r1
 800d312:	607a      	str	r2, [r7, #4]
 800d314:	0019      	movs	r1, r3
 800d316:	230b      	movs	r3, #11
 800d318:	18fb      	adds	r3, r7, r3
 800d31a:	1c02      	adds	r2, r0, #0
 800d31c:	701a      	strb	r2, [r3, #0]
 800d31e:	2408      	movs	r4, #8
 800d320:	193b      	adds	r3, r7, r4
 800d322:	1c0a      	adds	r2, r1, #0
 800d324:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d326:	2117      	movs	r1, #23
 800d328:	187b      	adds	r3, r7, r1
 800d32a:	2200      	movs	r2, #0
 800d32c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d32e:	2516      	movs	r5, #22
 800d330:	197b      	adds	r3, r7, r5
 800d332:	2200      	movs	r2, #0
 800d334:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d336:	68fa      	ldr	r2, [r7, #12]
 800d338:	23b0      	movs	r3, #176	; 0xb0
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	58d0      	ldr	r0, [r2, r3]
 800d33e:	193b      	adds	r3, r7, r4
 800d340:	881d      	ldrh	r5, [r3, #0]
 800d342:	000e      	movs	r6, r1
 800d344:	187c      	adds	r4, r7, r1
 800d346:	687a      	ldr	r2, [r7, #4]
 800d348:	230b      	movs	r3, #11
 800d34a:	18fb      	adds	r3, r7, r3
 800d34c:	7819      	ldrb	r1, [r3, #0]
 800d34e:	002b      	movs	r3, r5
 800d350:	f7f7 fb3a 	bl	80049c8 <HAL_PCD_EP_Receive>
 800d354:	0003      	movs	r3, r0
 800d356:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d358:	2516      	movs	r5, #22
 800d35a:	197c      	adds	r4, r7, r5
 800d35c:	19bb      	adds	r3, r7, r6
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	0018      	movs	r0, r3
 800d362:	f000 f83a 	bl	800d3da <USBD_Get_USB_Status>
 800d366:	0003      	movs	r3, r0
 800d368:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d36a:	197b      	adds	r3, r7, r5
 800d36c:	781b      	ldrb	r3, [r3, #0]
}
 800d36e:	0018      	movs	r0, r3
 800d370:	46bd      	mov	sp, r7
 800d372:	b007      	add	sp, #28
 800d374:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d376 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d376:	b580      	push	{r7, lr}
 800d378:	b082      	sub	sp, #8
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
 800d37e:	000a      	movs	r2, r1
 800d380:	1cfb      	adds	r3, r7, #3
 800d382:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d384:	687a      	ldr	r2, [r7, #4]
 800d386:	23b0      	movs	r3, #176	; 0xb0
 800d388:	009b      	lsls	r3, r3, #2
 800d38a:	58d2      	ldr	r2, [r2, r3]
 800d38c:	1cfb      	adds	r3, r7, #3
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	0019      	movs	r1, r3
 800d392:	0010      	movs	r0, r2
 800d394:	f7f7 fb5c 	bl	8004a50 <HAL_PCD_EP_GetRxCount>
 800d398:	0003      	movs	r3, r0
}
 800d39a:	0018      	movs	r0, r3
 800d39c:	46bd      	mov	sp, r7
 800d39e:	b002      	add	sp, #8
 800d3a0:	bd80      	pop	{r7, pc}
	...

0800d3a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b082      	sub	sp, #8
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d3ac:	4b02      	ldr	r3, [pc, #8]	; (800d3b8 <USBD_static_malloc+0x14>)
}
 800d3ae:	0018      	movs	r0, r3
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	b002      	add	sp, #8
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	46c0      	nop			; (mov r8, r8)
 800d3b8:	20000274 	.word	0x20000274

0800d3bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]

}
 800d3c4:	46c0      	nop			; (mov r8, r8)
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	b002      	add	sp, #8
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d3d0:	f7f3 ff96 	bl	8001300 <SystemClock_Config>
}
 800d3d4:	46c0      	nop			; (mov r8, r8)
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}

0800d3da <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d3da:	b580      	push	{r7, lr}
 800d3dc:	b084      	sub	sp, #16
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	0002      	movs	r2, r0
 800d3e2:	1dfb      	adds	r3, r7, #7
 800d3e4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3e6:	230f      	movs	r3, #15
 800d3e8:	18fb      	adds	r3, r7, r3
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800d3ee:	1dfb      	adds	r3, r7, #7
 800d3f0:	781b      	ldrb	r3, [r3, #0]
 800d3f2:	2b03      	cmp	r3, #3
 800d3f4:	d017      	beq.n	800d426 <USBD_Get_USB_Status+0x4c>
 800d3f6:	dc1b      	bgt.n	800d430 <USBD_Get_USB_Status+0x56>
 800d3f8:	2b02      	cmp	r3, #2
 800d3fa:	d00f      	beq.n	800d41c <USBD_Get_USB_Status+0x42>
 800d3fc:	dc18      	bgt.n	800d430 <USBD_Get_USB_Status+0x56>
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d002      	beq.n	800d408 <USBD_Get_USB_Status+0x2e>
 800d402:	2b01      	cmp	r3, #1
 800d404:	d005      	beq.n	800d412 <USBD_Get_USB_Status+0x38>
 800d406:	e013      	b.n	800d430 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d408:	230f      	movs	r3, #15
 800d40a:	18fb      	adds	r3, r7, r3
 800d40c:	2200      	movs	r2, #0
 800d40e:	701a      	strb	r2, [r3, #0]
    break;
 800d410:	e013      	b.n	800d43a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d412:	230f      	movs	r3, #15
 800d414:	18fb      	adds	r3, r7, r3
 800d416:	2202      	movs	r2, #2
 800d418:	701a      	strb	r2, [r3, #0]
    break;
 800d41a:	e00e      	b.n	800d43a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d41c:	230f      	movs	r3, #15
 800d41e:	18fb      	adds	r3, r7, r3
 800d420:	2201      	movs	r2, #1
 800d422:	701a      	strb	r2, [r3, #0]
    break;
 800d424:	e009      	b.n	800d43a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d426:	230f      	movs	r3, #15
 800d428:	18fb      	adds	r3, r7, r3
 800d42a:	2202      	movs	r2, #2
 800d42c:	701a      	strb	r2, [r3, #0]
    break;
 800d42e:	e004      	b.n	800d43a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800d430:	230f      	movs	r3, #15
 800d432:	18fb      	adds	r3, r7, r3
 800d434:	2202      	movs	r2, #2
 800d436:	701a      	strb	r2, [r3, #0]
    break;
 800d438:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800d43a:	230f      	movs	r3, #15
 800d43c:	18fb      	adds	r3, r7, r3
 800d43e:	781b      	ldrb	r3, [r3, #0]
}
 800d440:	0018      	movs	r0, r3
 800d442:	46bd      	mov	sp, r7
 800d444:	b004      	add	sp, #16
 800d446:	bd80      	pop	{r7, pc}

0800d448 <__errno>:
 800d448:	4b01      	ldr	r3, [pc, #4]	; (800d450 <__errno+0x8>)
 800d44a:	6818      	ldr	r0, [r3, #0]
 800d44c:	4770      	bx	lr
 800d44e:	46c0      	nop			; (mov r8, r8)
 800d450:	2000017c 	.word	0x2000017c

0800d454 <__libc_init_array>:
 800d454:	b570      	push	{r4, r5, r6, lr}
 800d456:	2600      	movs	r6, #0
 800d458:	4d0c      	ldr	r5, [pc, #48]	; (800d48c <__libc_init_array+0x38>)
 800d45a:	4c0d      	ldr	r4, [pc, #52]	; (800d490 <__libc_init_array+0x3c>)
 800d45c:	1b64      	subs	r4, r4, r5
 800d45e:	10a4      	asrs	r4, r4, #2
 800d460:	42a6      	cmp	r6, r4
 800d462:	d109      	bne.n	800d478 <__libc_init_array+0x24>
 800d464:	2600      	movs	r6, #0
 800d466:	f000 fc5b 	bl	800dd20 <_init>
 800d46a:	4d0a      	ldr	r5, [pc, #40]	; (800d494 <__libc_init_array+0x40>)
 800d46c:	4c0a      	ldr	r4, [pc, #40]	; (800d498 <__libc_init_array+0x44>)
 800d46e:	1b64      	subs	r4, r4, r5
 800d470:	10a4      	asrs	r4, r4, #2
 800d472:	42a6      	cmp	r6, r4
 800d474:	d105      	bne.n	800d482 <__libc_init_array+0x2e>
 800d476:	bd70      	pop	{r4, r5, r6, pc}
 800d478:	00b3      	lsls	r3, r6, #2
 800d47a:	58eb      	ldr	r3, [r5, r3]
 800d47c:	4798      	blx	r3
 800d47e:	3601      	adds	r6, #1
 800d480:	e7ee      	b.n	800d460 <__libc_init_array+0xc>
 800d482:	00b3      	lsls	r3, r6, #2
 800d484:	58eb      	ldr	r3, [r5, r3]
 800d486:	4798      	blx	r3
 800d488:	3601      	adds	r6, #1
 800d48a:	e7f2      	b.n	800d472 <__libc_init_array+0x1e>
 800d48c:	0800e094 	.word	0x0800e094
 800d490:	0800e094 	.word	0x0800e094
 800d494:	0800e094 	.word	0x0800e094
 800d498:	0800e098 	.word	0x0800e098

0800d49c <malloc>:
 800d49c:	b510      	push	{r4, lr}
 800d49e:	4b03      	ldr	r3, [pc, #12]	; (800d4ac <malloc+0x10>)
 800d4a0:	0001      	movs	r1, r0
 800d4a2:	6818      	ldr	r0, [r3, #0]
 800d4a4:	f000 f86a 	bl	800d57c <_malloc_r>
 800d4a8:	bd10      	pop	{r4, pc}
 800d4aa:	46c0      	nop			; (mov r8, r8)
 800d4ac:	2000017c 	.word	0x2000017c

0800d4b0 <free>:
 800d4b0:	b510      	push	{r4, lr}
 800d4b2:	4b03      	ldr	r3, [pc, #12]	; (800d4c0 <free+0x10>)
 800d4b4:	0001      	movs	r1, r0
 800d4b6:	6818      	ldr	r0, [r3, #0]
 800d4b8:	f000 f816 	bl	800d4e8 <_free_r>
 800d4bc:	bd10      	pop	{r4, pc}
 800d4be:	46c0      	nop			; (mov r8, r8)
 800d4c0:	2000017c 	.word	0x2000017c

0800d4c4 <memcpy>:
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	b510      	push	{r4, lr}
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d100      	bne.n	800d4ce <memcpy+0xa>
 800d4cc:	bd10      	pop	{r4, pc}
 800d4ce:	5ccc      	ldrb	r4, [r1, r3]
 800d4d0:	54c4      	strb	r4, [r0, r3]
 800d4d2:	3301      	adds	r3, #1
 800d4d4:	e7f8      	b.n	800d4c8 <memcpy+0x4>

0800d4d6 <memset>:
 800d4d6:	0003      	movs	r3, r0
 800d4d8:	1882      	adds	r2, r0, r2
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	d100      	bne.n	800d4e0 <memset+0xa>
 800d4de:	4770      	bx	lr
 800d4e0:	7019      	strb	r1, [r3, #0]
 800d4e2:	3301      	adds	r3, #1
 800d4e4:	e7f9      	b.n	800d4da <memset+0x4>
	...

0800d4e8 <_free_r>:
 800d4e8:	b570      	push	{r4, r5, r6, lr}
 800d4ea:	0005      	movs	r5, r0
 800d4ec:	2900      	cmp	r1, #0
 800d4ee:	d010      	beq.n	800d512 <_free_r+0x2a>
 800d4f0:	1f0c      	subs	r4, r1, #4
 800d4f2:	6823      	ldr	r3, [r4, #0]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	da00      	bge.n	800d4fa <_free_r+0x12>
 800d4f8:	18e4      	adds	r4, r4, r3
 800d4fa:	0028      	movs	r0, r5
 800d4fc:	f000 f8ce 	bl	800d69c <__malloc_lock>
 800d500:	4a1d      	ldr	r2, [pc, #116]	; (800d578 <_free_r+0x90>)
 800d502:	6813      	ldr	r3, [r2, #0]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d105      	bne.n	800d514 <_free_r+0x2c>
 800d508:	6063      	str	r3, [r4, #4]
 800d50a:	6014      	str	r4, [r2, #0]
 800d50c:	0028      	movs	r0, r5
 800d50e:	f000 f8cd 	bl	800d6ac <__malloc_unlock>
 800d512:	bd70      	pop	{r4, r5, r6, pc}
 800d514:	42a3      	cmp	r3, r4
 800d516:	d908      	bls.n	800d52a <_free_r+0x42>
 800d518:	6821      	ldr	r1, [r4, #0]
 800d51a:	1860      	adds	r0, r4, r1
 800d51c:	4283      	cmp	r3, r0
 800d51e:	d1f3      	bne.n	800d508 <_free_r+0x20>
 800d520:	6818      	ldr	r0, [r3, #0]
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	1841      	adds	r1, r0, r1
 800d526:	6021      	str	r1, [r4, #0]
 800d528:	e7ee      	b.n	800d508 <_free_r+0x20>
 800d52a:	001a      	movs	r2, r3
 800d52c:	685b      	ldr	r3, [r3, #4]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d001      	beq.n	800d536 <_free_r+0x4e>
 800d532:	42a3      	cmp	r3, r4
 800d534:	d9f9      	bls.n	800d52a <_free_r+0x42>
 800d536:	6811      	ldr	r1, [r2, #0]
 800d538:	1850      	adds	r0, r2, r1
 800d53a:	42a0      	cmp	r0, r4
 800d53c:	d10b      	bne.n	800d556 <_free_r+0x6e>
 800d53e:	6820      	ldr	r0, [r4, #0]
 800d540:	1809      	adds	r1, r1, r0
 800d542:	1850      	adds	r0, r2, r1
 800d544:	6011      	str	r1, [r2, #0]
 800d546:	4283      	cmp	r3, r0
 800d548:	d1e0      	bne.n	800d50c <_free_r+0x24>
 800d54a:	6818      	ldr	r0, [r3, #0]
 800d54c:	685b      	ldr	r3, [r3, #4]
 800d54e:	1841      	adds	r1, r0, r1
 800d550:	6011      	str	r1, [r2, #0]
 800d552:	6053      	str	r3, [r2, #4]
 800d554:	e7da      	b.n	800d50c <_free_r+0x24>
 800d556:	42a0      	cmp	r0, r4
 800d558:	d902      	bls.n	800d560 <_free_r+0x78>
 800d55a:	230c      	movs	r3, #12
 800d55c:	602b      	str	r3, [r5, #0]
 800d55e:	e7d5      	b.n	800d50c <_free_r+0x24>
 800d560:	6821      	ldr	r1, [r4, #0]
 800d562:	1860      	adds	r0, r4, r1
 800d564:	4283      	cmp	r3, r0
 800d566:	d103      	bne.n	800d570 <_free_r+0x88>
 800d568:	6818      	ldr	r0, [r3, #0]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	1841      	adds	r1, r0, r1
 800d56e:	6021      	str	r1, [r4, #0]
 800d570:	6063      	str	r3, [r4, #4]
 800d572:	6054      	str	r4, [r2, #4]
 800d574:	e7ca      	b.n	800d50c <_free_r+0x24>
 800d576:	46c0      	nop			; (mov r8, r8)
 800d578:	20000494 	.word	0x20000494

0800d57c <_malloc_r>:
 800d57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d57e:	2303      	movs	r3, #3
 800d580:	1ccd      	adds	r5, r1, #3
 800d582:	439d      	bics	r5, r3
 800d584:	3508      	adds	r5, #8
 800d586:	0006      	movs	r6, r0
 800d588:	2d0c      	cmp	r5, #12
 800d58a:	d21f      	bcs.n	800d5cc <_malloc_r+0x50>
 800d58c:	250c      	movs	r5, #12
 800d58e:	42a9      	cmp	r1, r5
 800d590:	d81e      	bhi.n	800d5d0 <_malloc_r+0x54>
 800d592:	0030      	movs	r0, r6
 800d594:	f000 f882 	bl	800d69c <__malloc_lock>
 800d598:	4925      	ldr	r1, [pc, #148]	; (800d630 <_malloc_r+0xb4>)
 800d59a:	680a      	ldr	r2, [r1, #0]
 800d59c:	0014      	movs	r4, r2
 800d59e:	2c00      	cmp	r4, #0
 800d5a0:	d11a      	bne.n	800d5d8 <_malloc_r+0x5c>
 800d5a2:	4f24      	ldr	r7, [pc, #144]	; (800d634 <_malloc_r+0xb8>)
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d104      	bne.n	800d5b4 <_malloc_r+0x38>
 800d5aa:	0021      	movs	r1, r4
 800d5ac:	0030      	movs	r0, r6
 800d5ae:	f000 f843 	bl	800d638 <_sbrk_r>
 800d5b2:	6038      	str	r0, [r7, #0]
 800d5b4:	0029      	movs	r1, r5
 800d5b6:	0030      	movs	r0, r6
 800d5b8:	f000 f83e 	bl	800d638 <_sbrk_r>
 800d5bc:	1c43      	adds	r3, r0, #1
 800d5be:	d12b      	bne.n	800d618 <_malloc_r+0x9c>
 800d5c0:	230c      	movs	r3, #12
 800d5c2:	0030      	movs	r0, r6
 800d5c4:	6033      	str	r3, [r6, #0]
 800d5c6:	f000 f871 	bl	800d6ac <__malloc_unlock>
 800d5ca:	e003      	b.n	800d5d4 <_malloc_r+0x58>
 800d5cc:	2d00      	cmp	r5, #0
 800d5ce:	dade      	bge.n	800d58e <_malloc_r+0x12>
 800d5d0:	230c      	movs	r3, #12
 800d5d2:	6033      	str	r3, [r6, #0]
 800d5d4:	2000      	movs	r0, #0
 800d5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5d8:	6823      	ldr	r3, [r4, #0]
 800d5da:	1b5b      	subs	r3, r3, r5
 800d5dc:	d419      	bmi.n	800d612 <_malloc_r+0x96>
 800d5de:	2b0b      	cmp	r3, #11
 800d5e0:	d903      	bls.n	800d5ea <_malloc_r+0x6e>
 800d5e2:	6023      	str	r3, [r4, #0]
 800d5e4:	18e4      	adds	r4, r4, r3
 800d5e6:	6025      	str	r5, [r4, #0]
 800d5e8:	e003      	b.n	800d5f2 <_malloc_r+0x76>
 800d5ea:	6863      	ldr	r3, [r4, #4]
 800d5ec:	42a2      	cmp	r2, r4
 800d5ee:	d10e      	bne.n	800d60e <_malloc_r+0x92>
 800d5f0:	600b      	str	r3, [r1, #0]
 800d5f2:	0030      	movs	r0, r6
 800d5f4:	f000 f85a 	bl	800d6ac <__malloc_unlock>
 800d5f8:	0020      	movs	r0, r4
 800d5fa:	2207      	movs	r2, #7
 800d5fc:	300b      	adds	r0, #11
 800d5fe:	1d23      	adds	r3, r4, #4
 800d600:	4390      	bics	r0, r2
 800d602:	1ac2      	subs	r2, r0, r3
 800d604:	4298      	cmp	r0, r3
 800d606:	d0e6      	beq.n	800d5d6 <_malloc_r+0x5a>
 800d608:	1a1b      	subs	r3, r3, r0
 800d60a:	50a3      	str	r3, [r4, r2]
 800d60c:	e7e3      	b.n	800d5d6 <_malloc_r+0x5a>
 800d60e:	6053      	str	r3, [r2, #4]
 800d610:	e7ef      	b.n	800d5f2 <_malloc_r+0x76>
 800d612:	0022      	movs	r2, r4
 800d614:	6864      	ldr	r4, [r4, #4]
 800d616:	e7c2      	b.n	800d59e <_malloc_r+0x22>
 800d618:	2303      	movs	r3, #3
 800d61a:	1cc4      	adds	r4, r0, #3
 800d61c:	439c      	bics	r4, r3
 800d61e:	42a0      	cmp	r0, r4
 800d620:	d0e1      	beq.n	800d5e6 <_malloc_r+0x6a>
 800d622:	1a21      	subs	r1, r4, r0
 800d624:	0030      	movs	r0, r6
 800d626:	f000 f807 	bl	800d638 <_sbrk_r>
 800d62a:	1c43      	adds	r3, r0, #1
 800d62c:	d1db      	bne.n	800d5e6 <_malloc_r+0x6a>
 800d62e:	e7c7      	b.n	800d5c0 <_malloc_r+0x44>
 800d630:	20000494 	.word	0x20000494
 800d634:	20000498 	.word	0x20000498

0800d638 <_sbrk_r>:
 800d638:	2300      	movs	r3, #0
 800d63a:	b570      	push	{r4, r5, r6, lr}
 800d63c:	4d06      	ldr	r5, [pc, #24]	; (800d658 <_sbrk_r+0x20>)
 800d63e:	0004      	movs	r4, r0
 800d640:	0008      	movs	r0, r1
 800d642:	602b      	str	r3, [r5, #0]
 800d644:	f7f5 fa4a 	bl	8002adc <_sbrk>
 800d648:	1c43      	adds	r3, r0, #1
 800d64a:	d103      	bne.n	800d654 <_sbrk_r+0x1c>
 800d64c:	682b      	ldr	r3, [r5, #0]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d000      	beq.n	800d654 <_sbrk_r+0x1c>
 800d652:	6023      	str	r3, [r4, #0]
 800d654:	bd70      	pop	{r4, r5, r6, pc}
 800d656:	46c0      	nop			; (mov r8, r8)
 800d658:	20001638 	.word	0x20001638

0800d65c <siprintf>:
 800d65c:	b40e      	push	{r1, r2, r3}
 800d65e:	b500      	push	{lr}
 800d660:	490b      	ldr	r1, [pc, #44]	; (800d690 <siprintf+0x34>)
 800d662:	b09c      	sub	sp, #112	; 0x70
 800d664:	ab1d      	add	r3, sp, #116	; 0x74
 800d666:	9002      	str	r0, [sp, #8]
 800d668:	9006      	str	r0, [sp, #24]
 800d66a:	9107      	str	r1, [sp, #28]
 800d66c:	9104      	str	r1, [sp, #16]
 800d66e:	4809      	ldr	r0, [pc, #36]	; (800d694 <siprintf+0x38>)
 800d670:	4909      	ldr	r1, [pc, #36]	; (800d698 <siprintf+0x3c>)
 800d672:	cb04      	ldmia	r3!, {r2}
 800d674:	9105      	str	r1, [sp, #20]
 800d676:	6800      	ldr	r0, [r0, #0]
 800d678:	a902      	add	r1, sp, #8
 800d67a:	9301      	str	r3, [sp, #4]
 800d67c:	f000 f880 	bl	800d780 <_svfiprintf_r>
 800d680:	2300      	movs	r3, #0
 800d682:	9a02      	ldr	r2, [sp, #8]
 800d684:	7013      	strb	r3, [r2, #0]
 800d686:	b01c      	add	sp, #112	; 0x70
 800d688:	bc08      	pop	{r3}
 800d68a:	b003      	add	sp, #12
 800d68c:	4718      	bx	r3
 800d68e:	46c0      	nop			; (mov r8, r8)
 800d690:	7fffffff 	.word	0x7fffffff
 800d694:	2000017c 	.word	0x2000017c
 800d698:	ffff0208 	.word	0xffff0208

0800d69c <__malloc_lock>:
 800d69c:	b510      	push	{r4, lr}
 800d69e:	4802      	ldr	r0, [pc, #8]	; (800d6a8 <__malloc_lock+0xc>)
 800d6a0:	f000 faf0 	bl	800dc84 <__retarget_lock_acquire_recursive>
 800d6a4:	bd10      	pop	{r4, pc}
 800d6a6:	46c0      	nop			; (mov r8, r8)
 800d6a8:	20001640 	.word	0x20001640

0800d6ac <__malloc_unlock>:
 800d6ac:	b510      	push	{r4, lr}
 800d6ae:	4802      	ldr	r0, [pc, #8]	; (800d6b8 <__malloc_unlock+0xc>)
 800d6b0:	f000 fae9 	bl	800dc86 <__retarget_lock_release_recursive>
 800d6b4:	bd10      	pop	{r4, pc}
 800d6b6:	46c0      	nop			; (mov r8, r8)
 800d6b8:	20001640 	.word	0x20001640

0800d6bc <__ssputs_r>:
 800d6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6be:	688e      	ldr	r6, [r1, #8]
 800d6c0:	b085      	sub	sp, #20
 800d6c2:	0007      	movs	r7, r0
 800d6c4:	000c      	movs	r4, r1
 800d6c6:	9203      	str	r2, [sp, #12]
 800d6c8:	9301      	str	r3, [sp, #4]
 800d6ca:	429e      	cmp	r6, r3
 800d6cc:	d83c      	bhi.n	800d748 <__ssputs_r+0x8c>
 800d6ce:	2390      	movs	r3, #144	; 0x90
 800d6d0:	898a      	ldrh	r2, [r1, #12]
 800d6d2:	00db      	lsls	r3, r3, #3
 800d6d4:	421a      	tst	r2, r3
 800d6d6:	d034      	beq.n	800d742 <__ssputs_r+0x86>
 800d6d8:	2503      	movs	r5, #3
 800d6da:	6909      	ldr	r1, [r1, #16]
 800d6dc:	6823      	ldr	r3, [r4, #0]
 800d6de:	1a5b      	subs	r3, r3, r1
 800d6e0:	9302      	str	r3, [sp, #8]
 800d6e2:	6963      	ldr	r3, [r4, #20]
 800d6e4:	9802      	ldr	r0, [sp, #8]
 800d6e6:	435d      	muls	r5, r3
 800d6e8:	0feb      	lsrs	r3, r5, #31
 800d6ea:	195d      	adds	r5, r3, r5
 800d6ec:	9b01      	ldr	r3, [sp, #4]
 800d6ee:	106d      	asrs	r5, r5, #1
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	181b      	adds	r3, r3, r0
 800d6f4:	42ab      	cmp	r3, r5
 800d6f6:	d900      	bls.n	800d6fa <__ssputs_r+0x3e>
 800d6f8:	001d      	movs	r5, r3
 800d6fa:	0553      	lsls	r3, r2, #21
 800d6fc:	d532      	bpl.n	800d764 <__ssputs_r+0xa8>
 800d6fe:	0029      	movs	r1, r5
 800d700:	0038      	movs	r0, r7
 800d702:	f7ff ff3b 	bl	800d57c <_malloc_r>
 800d706:	1e06      	subs	r6, r0, #0
 800d708:	d109      	bne.n	800d71e <__ssputs_r+0x62>
 800d70a:	230c      	movs	r3, #12
 800d70c:	603b      	str	r3, [r7, #0]
 800d70e:	2340      	movs	r3, #64	; 0x40
 800d710:	2001      	movs	r0, #1
 800d712:	89a2      	ldrh	r2, [r4, #12]
 800d714:	4240      	negs	r0, r0
 800d716:	4313      	orrs	r3, r2
 800d718:	81a3      	strh	r3, [r4, #12]
 800d71a:	b005      	add	sp, #20
 800d71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d71e:	9a02      	ldr	r2, [sp, #8]
 800d720:	6921      	ldr	r1, [r4, #16]
 800d722:	f7ff fecf 	bl	800d4c4 <memcpy>
 800d726:	89a3      	ldrh	r3, [r4, #12]
 800d728:	4a14      	ldr	r2, [pc, #80]	; (800d77c <__ssputs_r+0xc0>)
 800d72a:	401a      	ands	r2, r3
 800d72c:	2380      	movs	r3, #128	; 0x80
 800d72e:	4313      	orrs	r3, r2
 800d730:	81a3      	strh	r3, [r4, #12]
 800d732:	9b02      	ldr	r3, [sp, #8]
 800d734:	6126      	str	r6, [r4, #16]
 800d736:	18f6      	adds	r6, r6, r3
 800d738:	6026      	str	r6, [r4, #0]
 800d73a:	6165      	str	r5, [r4, #20]
 800d73c:	9e01      	ldr	r6, [sp, #4]
 800d73e:	1aed      	subs	r5, r5, r3
 800d740:	60a5      	str	r5, [r4, #8]
 800d742:	9b01      	ldr	r3, [sp, #4]
 800d744:	429e      	cmp	r6, r3
 800d746:	d900      	bls.n	800d74a <__ssputs_r+0x8e>
 800d748:	9e01      	ldr	r6, [sp, #4]
 800d74a:	0032      	movs	r2, r6
 800d74c:	9903      	ldr	r1, [sp, #12]
 800d74e:	6820      	ldr	r0, [r4, #0]
 800d750:	f000 faa5 	bl	800dc9e <memmove>
 800d754:	68a3      	ldr	r3, [r4, #8]
 800d756:	2000      	movs	r0, #0
 800d758:	1b9b      	subs	r3, r3, r6
 800d75a:	60a3      	str	r3, [r4, #8]
 800d75c:	6823      	ldr	r3, [r4, #0]
 800d75e:	199e      	adds	r6, r3, r6
 800d760:	6026      	str	r6, [r4, #0]
 800d762:	e7da      	b.n	800d71a <__ssputs_r+0x5e>
 800d764:	002a      	movs	r2, r5
 800d766:	0038      	movs	r0, r7
 800d768:	f000 faac 	bl	800dcc4 <_realloc_r>
 800d76c:	1e06      	subs	r6, r0, #0
 800d76e:	d1e0      	bne.n	800d732 <__ssputs_r+0x76>
 800d770:	0038      	movs	r0, r7
 800d772:	6921      	ldr	r1, [r4, #16]
 800d774:	f7ff feb8 	bl	800d4e8 <_free_r>
 800d778:	e7c7      	b.n	800d70a <__ssputs_r+0x4e>
 800d77a:	46c0      	nop			; (mov r8, r8)
 800d77c:	fffffb7f 	.word	0xfffffb7f

0800d780 <_svfiprintf_r>:
 800d780:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d782:	b0a1      	sub	sp, #132	; 0x84
 800d784:	9003      	str	r0, [sp, #12]
 800d786:	001d      	movs	r5, r3
 800d788:	898b      	ldrh	r3, [r1, #12]
 800d78a:	000f      	movs	r7, r1
 800d78c:	0016      	movs	r6, r2
 800d78e:	061b      	lsls	r3, r3, #24
 800d790:	d511      	bpl.n	800d7b6 <_svfiprintf_r+0x36>
 800d792:	690b      	ldr	r3, [r1, #16]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d10e      	bne.n	800d7b6 <_svfiprintf_r+0x36>
 800d798:	2140      	movs	r1, #64	; 0x40
 800d79a:	f7ff feef 	bl	800d57c <_malloc_r>
 800d79e:	6038      	str	r0, [r7, #0]
 800d7a0:	6138      	str	r0, [r7, #16]
 800d7a2:	2800      	cmp	r0, #0
 800d7a4:	d105      	bne.n	800d7b2 <_svfiprintf_r+0x32>
 800d7a6:	230c      	movs	r3, #12
 800d7a8:	9a03      	ldr	r2, [sp, #12]
 800d7aa:	3801      	subs	r0, #1
 800d7ac:	6013      	str	r3, [r2, #0]
 800d7ae:	b021      	add	sp, #132	; 0x84
 800d7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7b2:	2340      	movs	r3, #64	; 0x40
 800d7b4:	617b      	str	r3, [r7, #20]
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	ac08      	add	r4, sp, #32
 800d7ba:	6163      	str	r3, [r4, #20]
 800d7bc:	3320      	adds	r3, #32
 800d7be:	7663      	strb	r3, [r4, #25]
 800d7c0:	3310      	adds	r3, #16
 800d7c2:	76a3      	strb	r3, [r4, #26]
 800d7c4:	9507      	str	r5, [sp, #28]
 800d7c6:	0035      	movs	r5, r6
 800d7c8:	782b      	ldrb	r3, [r5, #0]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d001      	beq.n	800d7d2 <_svfiprintf_r+0x52>
 800d7ce:	2b25      	cmp	r3, #37	; 0x25
 800d7d0:	d147      	bne.n	800d862 <_svfiprintf_r+0xe2>
 800d7d2:	1bab      	subs	r3, r5, r6
 800d7d4:	9305      	str	r3, [sp, #20]
 800d7d6:	42b5      	cmp	r5, r6
 800d7d8:	d00c      	beq.n	800d7f4 <_svfiprintf_r+0x74>
 800d7da:	0032      	movs	r2, r6
 800d7dc:	0039      	movs	r1, r7
 800d7de:	9803      	ldr	r0, [sp, #12]
 800d7e0:	f7ff ff6c 	bl	800d6bc <__ssputs_r>
 800d7e4:	1c43      	adds	r3, r0, #1
 800d7e6:	d100      	bne.n	800d7ea <_svfiprintf_r+0x6a>
 800d7e8:	e0ae      	b.n	800d948 <_svfiprintf_r+0x1c8>
 800d7ea:	6962      	ldr	r2, [r4, #20]
 800d7ec:	9b05      	ldr	r3, [sp, #20]
 800d7ee:	4694      	mov	ip, r2
 800d7f0:	4463      	add	r3, ip
 800d7f2:	6163      	str	r3, [r4, #20]
 800d7f4:	782b      	ldrb	r3, [r5, #0]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d100      	bne.n	800d7fc <_svfiprintf_r+0x7c>
 800d7fa:	e0a5      	b.n	800d948 <_svfiprintf_r+0x1c8>
 800d7fc:	2201      	movs	r2, #1
 800d7fe:	2300      	movs	r3, #0
 800d800:	4252      	negs	r2, r2
 800d802:	6062      	str	r2, [r4, #4]
 800d804:	a904      	add	r1, sp, #16
 800d806:	3254      	adds	r2, #84	; 0x54
 800d808:	1852      	adds	r2, r2, r1
 800d80a:	1c6e      	adds	r6, r5, #1
 800d80c:	6023      	str	r3, [r4, #0]
 800d80e:	60e3      	str	r3, [r4, #12]
 800d810:	60a3      	str	r3, [r4, #8]
 800d812:	7013      	strb	r3, [r2, #0]
 800d814:	65a3      	str	r3, [r4, #88]	; 0x58
 800d816:	2205      	movs	r2, #5
 800d818:	7831      	ldrb	r1, [r6, #0]
 800d81a:	4854      	ldr	r0, [pc, #336]	; (800d96c <_svfiprintf_r+0x1ec>)
 800d81c:	f000 fa34 	bl	800dc88 <memchr>
 800d820:	1c75      	adds	r5, r6, #1
 800d822:	2800      	cmp	r0, #0
 800d824:	d11f      	bne.n	800d866 <_svfiprintf_r+0xe6>
 800d826:	6822      	ldr	r2, [r4, #0]
 800d828:	06d3      	lsls	r3, r2, #27
 800d82a:	d504      	bpl.n	800d836 <_svfiprintf_r+0xb6>
 800d82c:	2353      	movs	r3, #83	; 0x53
 800d82e:	a904      	add	r1, sp, #16
 800d830:	185b      	adds	r3, r3, r1
 800d832:	2120      	movs	r1, #32
 800d834:	7019      	strb	r1, [r3, #0]
 800d836:	0713      	lsls	r3, r2, #28
 800d838:	d504      	bpl.n	800d844 <_svfiprintf_r+0xc4>
 800d83a:	2353      	movs	r3, #83	; 0x53
 800d83c:	a904      	add	r1, sp, #16
 800d83e:	185b      	adds	r3, r3, r1
 800d840:	212b      	movs	r1, #43	; 0x2b
 800d842:	7019      	strb	r1, [r3, #0]
 800d844:	7833      	ldrb	r3, [r6, #0]
 800d846:	2b2a      	cmp	r3, #42	; 0x2a
 800d848:	d016      	beq.n	800d878 <_svfiprintf_r+0xf8>
 800d84a:	0035      	movs	r5, r6
 800d84c:	2100      	movs	r1, #0
 800d84e:	200a      	movs	r0, #10
 800d850:	68e3      	ldr	r3, [r4, #12]
 800d852:	782a      	ldrb	r2, [r5, #0]
 800d854:	1c6e      	adds	r6, r5, #1
 800d856:	3a30      	subs	r2, #48	; 0x30
 800d858:	2a09      	cmp	r2, #9
 800d85a:	d94e      	bls.n	800d8fa <_svfiprintf_r+0x17a>
 800d85c:	2900      	cmp	r1, #0
 800d85e:	d111      	bne.n	800d884 <_svfiprintf_r+0x104>
 800d860:	e017      	b.n	800d892 <_svfiprintf_r+0x112>
 800d862:	3501      	adds	r5, #1
 800d864:	e7b0      	b.n	800d7c8 <_svfiprintf_r+0x48>
 800d866:	4b41      	ldr	r3, [pc, #260]	; (800d96c <_svfiprintf_r+0x1ec>)
 800d868:	6822      	ldr	r2, [r4, #0]
 800d86a:	1ac0      	subs	r0, r0, r3
 800d86c:	2301      	movs	r3, #1
 800d86e:	4083      	lsls	r3, r0
 800d870:	4313      	orrs	r3, r2
 800d872:	002e      	movs	r6, r5
 800d874:	6023      	str	r3, [r4, #0]
 800d876:	e7ce      	b.n	800d816 <_svfiprintf_r+0x96>
 800d878:	9b07      	ldr	r3, [sp, #28]
 800d87a:	1d19      	adds	r1, r3, #4
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	9107      	str	r1, [sp, #28]
 800d880:	2b00      	cmp	r3, #0
 800d882:	db01      	blt.n	800d888 <_svfiprintf_r+0x108>
 800d884:	930b      	str	r3, [sp, #44]	; 0x2c
 800d886:	e004      	b.n	800d892 <_svfiprintf_r+0x112>
 800d888:	425b      	negs	r3, r3
 800d88a:	60e3      	str	r3, [r4, #12]
 800d88c:	2302      	movs	r3, #2
 800d88e:	4313      	orrs	r3, r2
 800d890:	6023      	str	r3, [r4, #0]
 800d892:	782b      	ldrb	r3, [r5, #0]
 800d894:	2b2e      	cmp	r3, #46	; 0x2e
 800d896:	d10a      	bne.n	800d8ae <_svfiprintf_r+0x12e>
 800d898:	786b      	ldrb	r3, [r5, #1]
 800d89a:	2b2a      	cmp	r3, #42	; 0x2a
 800d89c:	d135      	bne.n	800d90a <_svfiprintf_r+0x18a>
 800d89e:	9b07      	ldr	r3, [sp, #28]
 800d8a0:	3502      	adds	r5, #2
 800d8a2:	1d1a      	adds	r2, r3, #4
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	9207      	str	r2, [sp, #28]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	db2b      	blt.n	800d904 <_svfiprintf_r+0x184>
 800d8ac:	9309      	str	r3, [sp, #36]	; 0x24
 800d8ae:	4e30      	ldr	r6, [pc, #192]	; (800d970 <_svfiprintf_r+0x1f0>)
 800d8b0:	2203      	movs	r2, #3
 800d8b2:	0030      	movs	r0, r6
 800d8b4:	7829      	ldrb	r1, [r5, #0]
 800d8b6:	f000 f9e7 	bl	800dc88 <memchr>
 800d8ba:	2800      	cmp	r0, #0
 800d8bc:	d006      	beq.n	800d8cc <_svfiprintf_r+0x14c>
 800d8be:	2340      	movs	r3, #64	; 0x40
 800d8c0:	1b80      	subs	r0, r0, r6
 800d8c2:	4083      	lsls	r3, r0
 800d8c4:	6822      	ldr	r2, [r4, #0]
 800d8c6:	3501      	adds	r5, #1
 800d8c8:	4313      	orrs	r3, r2
 800d8ca:	6023      	str	r3, [r4, #0]
 800d8cc:	7829      	ldrb	r1, [r5, #0]
 800d8ce:	2206      	movs	r2, #6
 800d8d0:	4828      	ldr	r0, [pc, #160]	; (800d974 <_svfiprintf_r+0x1f4>)
 800d8d2:	1c6e      	adds	r6, r5, #1
 800d8d4:	7621      	strb	r1, [r4, #24]
 800d8d6:	f000 f9d7 	bl	800dc88 <memchr>
 800d8da:	2800      	cmp	r0, #0
 800d8dc:	d03c      	beq.n	800d958 <_svfiprintf_r+0x1d8>
 800d8de:	4b26      	ldr	r3, [pc, #152]	; (800d978 <_svfiprintf_r+0x1f8>)
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d125      	bne.n	800d930 <_svfiprintf_r+0x1b0>
 800d8e4:	2207      	movs	r2, #7
 800d8e6:	9b07      	ldr	r3, [sp, #28]
 800d8e8:	3307      	adds	r3, #7
 800d8ea:	4393      	bics	r3, r2
 800d8ec:	3308      	adds	r3, #8
 800d8ee:	9307      	str	r3, [sp, #28]
 800d8f0:	6963      	ldr	r3, [r4, #20]
 800d8f2:	9a04      	ldr	r2, [sp, #16]
 800d8f4:	189b      	adds	r3, r3, r2
 800d8f6:	6163      	str	r3, [r4, #20]
 800d8f8:	e765      	b.n	800d7c6 <_svfiprintf_r+0x46>
 800d8fa:	4343      	muls	r3, r0
 800d8fc:	0035      	movs	r5, r6
 800d8fe:	2101      	movs	r1, #1
 800d900:	189b      	adds	r3, r3, r2
 800d902:	e7a6      	b.n	800d852 <_svfiprintf_r+0xd2>
 800d904:	2301      	movs	r3, #1
 800d906:	425b      	negs	r3, r3
 800d908:	e7d0      	b.n	800d8ac <_svfiprintf_r+0x12c>
 800d90a:	2300      	movs	r3, #0
 800d90c:	200a      	movs	r0, #10
 800d90e:	001a      	movs	r2, r3
 800d910:	3501      	adds	r5, #1
 800d912:	6063      	str	r3, [r4, #4]
 800d914:	7829      	ldrb	r1, [r5, #0]
 800d916:	1c6e      	adds	r6, r5, #1
 800d918:	3930      	subs	r1, #48	; 0x30
 800d91a:	2909      	cmp	r1, #9
 800d91c:	d903      	bls.n	800d926 <_svfiprintf_r+0x1a6>
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d0c5      	beq.n	800d8ae <_svfiprintf_r+0x12e>
 800d922:	9209      	str	r2, [sp, #36]	; 0x24
 800d924:	e7c3      	b.n	800d8ae <_svfiprintf_r+0x12e>
 800d926:	4342      	muls	r2, r0
 800d928:	0035      	movs	r5, r6
 800d92a:	2301      	movs	r3, #1
 800d92c:	1852      	adds	r2, r2, r1
 800d92e:	e7f1      	b.n	800d914 <_svfiprintf_r+0x194>
 800d930:	ab07      	add	r3, sp, #28
 800d932:	9300      	str	r3, [sp, #0]
 800d934:	003a      	movs	r2, r7
 800d936:	0021      	movs	r1, r4
 800d938:	4b10      	ldr	r3, [pc, #64]	; (800d97c <_svfiprintf_r+0x1fc>)
 800d93a:	9803      	ldr	r0, [sp, #12]
 800d93c:	e000      	b.n	800d940 <_svfiprintf_r+0x1c0>
 800d93e:	bf00      	nop
 800d940:	9004      	str	r0, [sp, #16]
 800d942:	9b04      	ldr	r3, [sp, #16]
 800d944:	3301      	adds	r3, #1
 800d946:	d1d3      	bne.n	800d8f0 <_svfiprintf_r+0x170>
 800d948:	89bb      	ldrh	r3, [r7, #12]
 800d94a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d94c:	065b      	lsls	r3, r3, #25
 800d94e:	d400      	bmi.n	800d952 <_svfiprintf_r+0x1d2>
 800d950:	e72d      	b.n	800d7ae <_svfiprintf_r+0x2e>
 800d952:	2001      	movs	r0, #1
 800d954:	4240      	negs	r0, r0
 800d956:	e72a      	b.n	800d7ae <_svfiprintf_r+0x2e>
 800d958:	ab07      	add	r3, sp, #28
 800d95a:	9300      	str	r3, [sp, #0]
 800d95c:	003a      	movs	r2, r7
 800d95e:	0021      	movs	r1, r4
 800d960:	4b06      	ldr	r3, [pc, #24]	; (800d97c <_svfiprintf_r+0x1fc>)
 800d962:	9803      	ldr	r0, [sp, #12]
 800d964:	f000 f87c 	bl	800da60 <_printf_i>
 800d968:	e7ea      	b.n	800d940 <_svfiprintf_r+0x1c0>
 800d96a:	46c0      	nop			; (mov r8, r8)
 800d96c:	0800e060 	.word	0x0800e060
 800d970:	0800e066 	.word	0x0800e066
 800d974:	0800e06a 	.word	0x0800e06a
 800d978:	00000000 	.word	0x00000000
 800d97c:	0800d6bd 	.word	0x0800d6bd

0800d980 <_printf_common>:
 800d980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d982:	0015      	movs	r5, r2
 800d984:	9301      	str	r3, [sp, #4]
 800d986:	688a      	ldr	r2, [r1, #8]
 800d988:	690b      	ldr	r3, [r1, #16]
 800d98a:	000c      	movs	r4, r1
 800d98c:	9000      	str	r0, [sp, #0]
 800d98e:	4293      	cmp	r3, r2
 800d990:	da00      	bge.n	800d994 <_printf_common+0x14>
 800d992:	0013      	movs	r3, r2
 800d994:	0022      	movs	r2, r4
 800d996:	602b      	str	r3, [r5, #0]
 800d998:	3243      	adds	r2, #67	; 0x43
 800d99a:	7812      	ldrb	r2, [r2, #0]
 800d99c:	2a00      	cmp	r2, #0
 800d99e:	d001      	beq.n	800d9a4 <_printf_common+0x24>
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	602b      	str	r3, [r5, #0]
 800d9a4:	6823      	ldr	r3, [r4, #0]
 800d9a6:	069b      	lsls	r3, r3, #26
 800d9a8:	d502      	bpl.n	800d9b0 <_printf_common+0x30>
 800d9aa:	682b      	ldr	r3, [r5, #0]
 800d9ac:	3302      	adds	r3, #2
 800d9ae:	602b      	str	r3, [r5, #0]
 800d9b0:	6822      	ldr	r2, [r4, #0]
 800d9b2:	2306      	movs	r3, #6
 800d9b4:	0017      	movs	r7, r2
 800d9b6:	401f      	ands	r7, r3
 800d9b8:	421a      	tst	r2, r3
 800d9ba:	d027      	beq.n	800da0c <_printf_common+0x8c>
 800d9bc:	0023      	movs	r3, r4
 800d9be:	3343      	adds	r3, #67	; 0x43
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	1e5a      	subs	r2, r3, #1
 800d9c4:	4193      	sbcs	r3, r2
 800d9c6:	6822      	ldr	r2, [r4, #0]
 800d9c8:	0692      	lsls	r2, r2, #26
 800d9ca:	d430      	bmi.n	800da2e <_printf_common+0xae>
 800d9cc:	0022      	movs	r2, r4
 800d9ce:	9901      	ldr	r1, [sp, #4]
 800d9d0:	9800      	ldr	r0, [sp, #0]
 800d9d2:	9e08      	ldr	r6, [sp, #32]
 800d9d4:	3243      	adds	r2, #67	; 0x43
 800d9d6:	47b0      	blx	r6
 800d9d8:	1c43      	adds	r3, r0, #1
 800d9da:	d025      	beq.n	800da28 <_printf_common+0xa8>
 800d9dc:	2306      	movs	r3, #6
 800d9de:	6820      	ldr	r0, [r4, #0]
 800d9e0:	682a      	ldr	r2, [r5, #0]
 800d9e2:	68e1      	ldr	r1, [r4, #12]
 800d9e4:	2500      	movs	r5, #0
 800d9e6:	4003      	ands	r3, r0
 800d9e8:	2b04      	cmp	r3, #4
 800d9ea:	d103      	bne.n	800d9f4 <_printf_common+0x74>
 800d9ec:	1a8d      	subs	r5, r1, r2
 800d9ee:	43eb      	mvns	r3, r5
 800d9f0:	17db      	asrs	r3, r3, #31
 800d9f2:	401d      	ands	r5, r3
 800d9f4:	68a3      	ldr	r3, [r4, #8]
 800d9f6:	6922      	ldr	r2, [r4, #16]
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	dd01      	ble.n	800da00 <_printf_common+0x80>
 800d9fc:	1a9b      	subs	r3, r3, r2
 800d9fe:	18ed      	adds	r5, r5, r3
 800da00:	2700      	movs	r7, #0
 800da02:	42bd      	cmp	r5, r7
 800da04:	d120      	bne.n	800da48 <_printf_common+0xc8>
 800da06:	2000      	movs	r0, #0
 800da08:	e010      	b.n	800da2c <_printf_common+0xac>
 800da0a:	3701      	adds	r7, #1
 800da0c:	68e3      	ldr	r3, [r4, #12]
 800da0e:	682a      	ldr	r2, [r5, #0]
 800da10:	1a9b      	subs	r3, r3, r2
 800da12:	42bb      	cmp	r3, r7
 800da14:	ddd2      	ble.n	800d9bc <_printf_common+0x3c>
 800da16:	0022      	movs	r2, r4
 800da18:	2301      	movs	r3, #1
 800da1a:	9901      	ldr	r1, [sp, #4]
 800da1c:	9800      	ldr	r0, [sp, #0]
 800da1e:	9e08      	ldr	r6, [sp, #32]
 800da20:	3219      	adds	r2, #25
 800da22:	47b0      	blx	r6
 800da24:	1c43      	adds	r3, r0, #1
 800da26:	d1f0      	bne.n	800da0a <_printf_common+0x8a>
 800da28:	2001      	movs	r0, #1
 800da2a:	4240      	negs	r0, r0
 800da2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800da2e:	2030      	movs	r0, #48	; 0x30
 800da30:	18e1      	adds	r1, r4, r3
 800da32:	3143      	adds	r1, #67	; 0x43
 800da34:	7008      	strb	r0, [r1, #0]
 800da36:	0021      	movs	r1, r4
 800da38:	1c5a      	adds	r2, r3, #1
 800da3a:	3145      	adds	r1, #69	; 0x45
 800da3c:	7809      	ldrb	r1, [r1, #0]
 800da3e:	18a2      	adds	r2, r4, r2
 800da40:	3243      	adds	r2, #67	; 0x43
 800da42:	3302      	adds	r3, #2
 800da44:	7011      	strb	r1, [r2, #0]
 800da46:	e7c1      	b.n	800d9cc <_printf_common+0x4c>
 800da48:	0022      	movs	r2, r4
 800da4a:	2301      	movs	r3, #1
 800da4c:	9901      	ldr	r1, [sp, #4]
 800da4e:	9800      	ldr	r0, [sp, #0]
 800da50:	9e08      	ldr	r6, [sp, #32]
 800da52:	321a      	adds	r2, #26
 800da54:	47b0      	blx	r6
 800da56:	1c43      	adds	r3, r0, #1
 800da58:	d0e6      	beq.n	800da28 <_printf_common+0xa8>
 800da5a:	3701      	adds	r7, #1
 800da5c:	e7d1      	b.n	800da02 <_printf_common+0x82>
	...

0800da60 <_printf_i>:
 800da60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da62:	b08b      	sub	sp, #44	; 0x2c
 800da64:	9206      	str	r2, [sp, #24]
 800da66:	000a      	movs	r2, r1
 800da68:	3243      	adds	r2, #67	; 0x43
 800da6a:	9307      	str	r3, [sp, #28]
 800da6c:	9005      	str	r0, [sp, #20]
 800da6e:	9204      	str	r2, [sp, #16]
 800da70:	7e0a      	ldrb	r2, [r1, #24]
 800da72:	000c      	movs	r4, r1
 800da74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800da76:	2a78      	cmp	r2, #120	; 0x78
 800da78:	d806      	bhi.n	800da88 <_printf_i+0x28>
 800da7a:	2a62      	cmp	r2, #98	; 0x62
 800da7c:	d808      	bhi.n	800da90 <_printf_i+0x30>
 800da7e:	2a00      	cmp	r2, #0
 800da80:	d100      	bne.n	800da84 <_printf_i+0x24>
 800da82:	e0c0      	b.n	800dc06 <_printf_i+0x1a6>
 800da84:	2a58      	cmp	r2, #88	; 0x58
 800da86:	d052      	beq.n	800db2e <_printf_i+0xce>
 800da88:	0026      	movs	r6, r4
 800da8a:	3642      	adds	r6, #66	; 0x42
 800da8c:	7032      	strb	r2, [r6, #0]
 800da8e:	e022      	b.n	800dad6 <_printf_i+0x76>
 800da90:	0010      	movs	r0, r2
 800da92:	3863      	subs	r0, #99	; 0x63
 800da94:	2815      	cmp	r0, #21
 800da96:	d8f7      	bhi.n	800da88 <_printf_i+0x28>
 800da98:	f7f2 fb3e 	bl	8000118 <__gnu_thumb1_case_shi>
 800da9c:	001f0016 	.word	0x001f0016
 800daa0:	fff6fff6 	.word	0xfff6fff6
 800daa4:	fff6fff6 	.word	0xfff6fff6
 800daa8:	fff6001f 	.word	0xfff6001f
 800daac:	fff6fff6 	.word	0xfff6fff6
 800dab0:	00a8fff6 	.word	0x00a8fff6
 800dab4:	009a0036 	.word	0x009a0036
 800dab8:	fff6fff6 	.word	0xfff6fff6
 800dabc:	fff600b9 	.word	0xfff600b9
 800dac0:	fff60036 	.word	0xfff60036
 800dac4:	009efff6 	.word	0x009efff6
 800dac8:	0026      	movs	r6, r4
 800daca:	681a      	ldr	r2, [r3, #0]
 800dacc:	3642      	adds	r6, #66	; 0x42
 800dace:	1d11      	adds	r1, r2, #4
 800dad0:	6019      	str	r1, [r3, #0]
 800dad2:	6813      	ldr	r3, [r2, #0]
 800dad4:	7033      	strb	r3, [r6, #0]
 800dad6:	2301      	movs	r3, #1
 800dad8:	e0a7      	b.n	800dc2a <_printf_i+0x1ca>
 800dada:	6808      	ldr	r0, [r1, #0]
 800dadc:	6819      	ldr	r1, [r3, #0]
 800dade:	1d0a      	adds	r2, r1, #4
 800dae0:	0605      	lsls	r5, r0, #24
 800dae2:	d50b      	bpl.n	800dafc <_printf_i+0x9c>
 800dae4:	680d      	ldr	r5, [r1, #0]
 800dae6:	601a      	str	r2, [r3, #0]
 800dae8:	2d00      	cmp	r5, #0
 800daea:	da03      	bge.n	800daf4 <_printf_i+0x94>
 800daec:	232d      	movs	r3, #45	; 0x2d
 800daee:	9a04      	ldr	r2, [sp, #16]
 800daf0:	426d      	negs	r5, r5
 800daf2:	7013      	strb	r3, [r2, #0]
 800daf4:	4b61      	ldr	r3, [pc, #388]	; (800dc7c <_printf_i+0x21c>)
 800daf6:	270a      	movs	r7, #10
 800daf8:	9303      	str	r3, [sp, #12]
 800dafa:	e032      	b.n	800db62 <_printf_i+0x102>
 800dafc:	680d      	ldr	r5, [r1, #0]
 800dafe:	601a      	str	r2, [r3, #0]
 800db00:	0641      	lsls	r1, r0, #25
 800db02:	d5f1      	bpl.n	800dae8 <_printf_i+0x88>
 800db04:	b22d      	sxth	r5, r5
 800db06:	e7ef      	b.n	800dae8 <_printf_i+0x88>
 800db08:	680d      	ldr	r5, [r1, #0]
 800db0a:	6819      	ldr	r1, [r3, #0]
 800db0c:	1d08      	adds	r0, r1, #4
 800db0e:	6018      	str	r0, [r3, #0]
 800db10:	062e      	lsls	r6, r5, #24
 800db12:	d501      	bpl.n	800db18 <_printf_i+0xb8>
 800db14:	680d      	ldr	r5, [r1, #0]
 800db16:	e003      	b.n	800db20 <_printf_i+0xc0>
 800db18:	066d      	lsls	r5, r5, #25
 800db1a:	d5fb      	bpl.n	800db14 <_printf_i+0xb4>
 800db1c:	680d      	ldr	r5, [r1, #0]
 800db1e:	b2ad      	uxth	r5, r5
 800db20:	4b56      	ldr	r3, [pc, #344]	; (800dc7c <_printf_i+0x21c>)
 800db22:	270a      	movs	r7, #10
 800db24:	9303      	str	r3, [sp, #12]
 800db26:	2a6f      	cmp	r2, #111	; 0x6f
 800db28:	d117      	bne.n	800db5a <_printf_i+0xfa>
 800db2a:	2708      	movs	r7, #8
 800db2c:	e015      	b.n	800db5a <_printf_i+0xfa>
 800db2e:	3145      	adds	r1, #69	; 0x45
 800db30:	700a      	strb	r2, [r1, #0]
 800db32:	4a52      	ldr	r2, [pc, #328]	; (800dc7c <_printf_i+0x21c>)
 800db34:	9203      	str	r2, [sp, #12]
 800db36:	681a      	ldr	r2, [r3, #0]
 800db38:	6821      	ldr	r1, [r4, #0]
 800db3a:	ca20      	ldmia	r2!, {r5}
 800db3c:	601a      	str	r2, [r3, #0]
 800db3e:	0608      	lsls	r0, r1, #24
 800db40:	d550      	bpl.n	800dbe4 <_printf_i+0x184>
 800db42:	07cb      	lsls	r3, r1, #31
 800db44:	d502      	bpl.n	800db4c <_printf_i+0xec>
 800db46:	2320      	movs	r3, #32
 800db48:	4319      	orrs	r1, r3
 800db4a:	6021      	str	r1, [r4, #0]
 800db4c:	2710      	movs	r7, #16
 800db4e:	2d00      	cmp	r5, #0
 800db50:	d103      	bne.n	800db5a <_printf_i+0xfa>
 800db52:	2320      	movs	r3, #32
 800db54:	6822      	ldr	r2, [r4, #0]
 800db56:	439a      	bics	r2, r3
 800db58:	6022      	str	r2, [r4, #0]
 800db5a:	0023      	movs	r3, r4
 800db5c:	2200      	movs	r2, #0
 800db5e:	3343      	adds	r3, #67	; 0x43
 800db60:	701a      	strb	r2, [r3, #0]
 800db62:	6863      	ldr	r3, [r4, #4]
 800db64:	60a3      	str	r3, [r4, #8]
 800db66:	2b00      	cmp	r3, #0
 800db68:	db03      	blt.n	800db72 <_printf_i+0x112>
 800db6a:	2204      	movs	r2, #4
 800db6c:	6821      	ldr	r1, [r4, #0]
 800db6e:	4391      	bics	r1, r2
 800db70:	6021      	str	r1, [r4, #0]
 800db72:	2d00      	cmp	r5, #0
 800db74:	d102      	bne.n	800db7c <_printf_i+0x11c>
 800db76:	9e04      	ldr	r6, [sp, #16]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d00c      	beq.n	800db96 <_printf_i+0x136>
 800db7c:	9e04      	ldr	r6, [sp, #16]
 800db7e:	0028      	movs	r0, r5
 800db80:	0039      	movs	r1, r7
 800db82:	f7f2 fb59 	bl	8000238 <__aeabi_uidivmod>
 800db86:	9b03      	ldr	r3, [sp, #12]
 800db88:	3e01      	subs	r6, #1
 800db8a:	5c5b      	ldrb	r3, [r3, r1]
 800db8c:	7033      	strb	r3, [r6, #0]
 800db8e:	002b      	movs	r3, r5
 800db90:	0005      	movs	r5, r0
 800db92:	429f      	cmp	r7, r3
 800db94:	d9f3      	bls.n	800db7e <_printf_i+0x11e>
 800db96:	2f08      	cmp	r7, #8
 800db98:	d109      	bne.n	800dbae <_printf_i+0x14e>
 800db9a:	6823      	ldr	r3, [r4, #0]
 800db9c:	07db      	lsls	r3, r3, #31
 800db9e:	d506      	bpl.n	800dbae <_printf_i+0x14e>
 800dba0:	6863      	ldr	r3, [r4, #4]
 800dba2:	6922      	ldr	r2, [r4, #16]
 800dba4:	4293      	cmp	r3, r2
 800dba6:	dc02      	bgt.n	800dbae <_printf_i+0x14e>
 800dba8:	2330      	movs	r3, #48	; 0x30
 800dbaa:	3e01      	subs	r6, #1
 800dbac:	7033      	strb	r3, [r6, #0]
 800dbae:	9b04      	ldr	r3, [sp, #16]
 800dbb0:	1b9b      	subs	r3, r3, r6
 800dbb2:	6123      	str	r3, [r4, #16]
 800dbb4:	9b07      	ldr	r3, [sp, #28]
 800dbb6:	0021      	movs	r1, r4
 800dbb8:	9300      	str	r3, [sp, #0]
 800dbba:	9805      	ldr	r0, [sp, #20]
 800dbbc:	9b06      	ldr	r3, [sp, #24]
 800dbbe:	aa09      	add	r2, sp, #36	; 0x24
 800dbc0:	f7ff fede 	bl	800d980 <_printf_common>
 800dbc4:	1c43      	adds	r3, r0, #1
 800dbc6:	d135      	bne.n	800dc34 <_printf_i+0x1d4>
 800dbc8:	2001      	movs	r0, #1
 800dbca:	4240      	negs	r0, r0
 800dbcc:	b00b      	add	sp, #44	; 0x2c
 800dbce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbd0:	2220      	movs	r2, #32
 800dbd2:	6809      	ldr	r1, [r1, #0]
 800dbd4:	430a      	orrs	r2, r1
 800dbd6:	6022      	str	r2, [r4, #0]
 800dbd8:	0022      	movs	r2, r4
 800dbda:	2178      	movs	r1, #120	; 0x78
 800dbdc:	3245      	adds	r2, #69	; 0x45
 800dbde:	7011      	strb	r1, [r2, #0]
 800dbe0:	4a27      	ldr	r2, [pc, #156]	; (800dc80 <_printf_i+0x220>)
 800dbe2:	e7a7      	b.n	800db34 <_printf_i+0xd4>
 800dbe4:	0648      	lsls	r0, r1, #25
 800dbe6:	d5ac      	bpl.n	800db42 <_printf_i+0xe2>
 800dbe8:	b2ad      	uxth	r5, r5
 800dbea:	e7aa      	b.n	800db42 <_printf_i+0xe2>
 800dbec:	681a      	ldr	r2, [r3, #0]
 800dbee:	680d      	ldr	r5, [r1, #0]
 800dbf0:	1d10      	adds	r0, r2, #4
 800dbf2:	6949      	ldr	r1, [r1, #20]
 800dbf4:	6018      	str	r0, [r3, #0]
 800dbf6:	6813      	ldr	r3, [r2, #0]
 800dbf8:	062e      	lsls	r6, r5, #24
 800dbfa:	d501      	bpl.n	800dc00 <_printf_i+0x1a0>
 800dbfc:	6019      	str	r1, [r3, #0]
 800dbfe:	e002      	b.n	800dc06 <_printf_i+0x1a6>
 800dc00:	066d      	lsls	r5, r5, #25
 800dc02:	d5fb      	bpl.n	800dbfc <_printf_i+0x19c>
 800dc04:	8019      	strh	r1, [r3, #0]
 800dc06:	2300      	movs	r3, #0
 800dc08:	9e04      	ldr	r6, [sp, #16]
 800dc0a:	6123      	str	r3, [r4, #16]
 800dc0c:	e7d2      	b.n	800dbb4 <_printf_i+0x154>
 800dc0e:	681a      	ldr	r2, [r3, #0]
 800dc10:	1d11      	adds	r1, r2, #4
 800dc12:	6019      	str	r1, [r3, #0]
 800dc14:	6816      	ldr	r6, [r2, #0]
 800dc16:	2100      	movs	r1, #0
 800dc18:	0030      	movs	r0, r6
 800dc1a:	6862      	ldr	r2, [r4, #4]
 800dc1c:	f000 f834 	bl	800dc88 <memchr>
 800dc20:	2800      	cmp	r0, #0
 800dc22:	d001      	beq.n	800dc28 <_printf_i+0x1c8>
 800dc24:	1b80      	subs	r0, r0, r6
 800dc26:	6060      	str	r0, [r4, #4]
 800dc28:	6863      	ldr	r3, [r4, #4]
 800dc2a:	6123      	str	r3, [r4, #16]
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	9a04      	ldr	r2, [sp, #16]
 800dc30:	7013      	strb	r3, [r2, #0]
 800dc32:	e7bf      	b.n	800dbb4 <_printf_i+0x154>
 800dc34:	6923      	ldr	r3, [r4, #16]
 800dc36:	0032      	movs	r2, r6
 800dc38:	9906      	ldr	r1, [sp, #24]
 800dc3a:	9805      	ldr	r0, [sp, #20]
 800dc3c:	9d07      	ldr	r5, [sp, #28]
 800dc3e:	47a8      	blx	r5
 800dc40:	1c43      	adds	r3, r0, #1
 800dc42:	d0c1      	beq.n	800dbc8 <_printf_i+0x168>
 800dc44:	6823      	ldr	r3, [r4, #0]
 800dc46:	079b      	lsls	r3, r3, #30
 800dc48:	d415      	bmi.n	800dc76 <_printf_i+0x216>
 800dc4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc4c:	68e0      	ldr	r0, [r4, #12]
 800dc4e:	4298      	cmp	r0, r3
 800dc50:	dabc      	bge.n	800dbcc <_printf_i+0x16c>
 800dc52:	0018      	movs	r0, r3
 800dc54:	e7ba      	b.n	800dbcc <_printf_i+0x16c>
 800dc56:	0022      	movs	r2, r4
 800dc58:	2301      	movs	r3, #1
 800dc5a:	9906      	ldr	r1, [sp, #24]
 800dc5c:	9805      	ldr	r0, [sp, #20]
 800dc5e:	9e07      	ldr	r6, [sp, #28]
 800dc60:	3219      	adds	r2, #25
 800dc62:	47b0      	blx	r6
 800dc64:	1c43      	adds	r3, r0, #1
 800dc66:	d0af      	beq.n	800dbc8 <_printf_i+0x168>
 800dc68:	3501      	adds	r5, #1
 800dc6a:	68e3      	ldr	r3, [r4, #12]
 800dc6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc6e:	1a9b      	subs	r3, r3, r2
 800dc70:	42ab      	cmp	r3, r5
 800dc72:	dcf0      	bgt.n	800dc56 <_printf_i+0x1f6>
 800dc74:	e7e9      	b.n	800dc4a <_printf_i+0x1ea>
 800dc76:	2500      	movs	r5, #0
 800dc78:	e7f7      	b.n	800dc6a <_printf_i+0x20a>
 800dc7a:	46c0      	nop			; (mov r8, r8)
 800dc7c:	0800e071 	.word	0x0800e071
 800dc80:	0800e082 	.word	0x0800e082

0800dc84 <__retarget_lock_acquire_recursive>:
 800dc84:	4770      	bx	lr

0800dc86 <__retarget_lock_release_recursive>:
 800dc86:	4770      	bx	lr

0800dc88 <memchr>:
 800dc88:	b2c9      	uxtb	r1, r1
 800dc8a:	1882      	adds	r2, r0, r2
 800dc8c:	4290      	cmp	r0, r2
 800dc8e:	d101      	bne.n	800dc94 <memchr+0xc>
 800dc90:	2000      	movs	r0, #0
 800dc92:	4770      	bx	lr
 800dc94:	7803      	ldrb	r3, [r0, #0]
 800dc96:	428b      	cmp	r3, r1
 800dc98:	d0fb      	beq.n	800dc92 <memchr+0xa>
 800dc9a:	3001      	adds	r0, #1
 800dc9c:	e7f6      	b.n	800dc8c <memchr+0x4>

0800dc9e <memmove>:
 800dc9e:	b510      	push	{r4, lr}
 800dca0:	4288      	cmp	r0, r1
 800dca2:	d902      	bls.n	800dcaa <memmove+0xc>
 800dca4:	188b      	adds	r3, r1, r2
 800dca6:	4298      	cmp	r0, r3
 800dca8:	d303      	bcc.n	800dcb2 <memmove+0x14>
 800dcaa:	2300      	movs	r3, #0
 800dcac:	e007      	b.n	800dcbe <memmove+0x20>
 800dcae:	5c8b      	ldrb	r3, [r1, r2]
 800dcb0:	5483      	strb	r3, [r0, r2]
 800dcb2:	3a01      	subs	r2, #1
 800dcb4:	d2fb      	bcs.n	800dcae <memmove+0x10>
 800dcb6:	bd10      	pop	{r4, pc}
 800dcb8:	5ccc      	ldrb	r4, [r1, r3]
 800dcba:	54c4      	strb	r4, [r0, r3]
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d1fa      	bne.n	800dcb8 <memmove+0x1a>
 800dcc2:	e7f8      	b.n	800dcb6 <memmove+0x18>

0800dcc4 <_realloc_r>:
 800dcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcc6:	0007      	movs	r7, r0
 800dcc8:	000d      	movs	r5, r1
 800dcca:	0016      	movs	r6, r2
 800dccc:	2900      	cmp	r1, #0
 800dcce:	d105      	bne.n	800dcdc <_realloc_r+0x18>
 800dcd0:	0011      	movs	r1, r2
 800dcd2:	f7ff fc53 	bl	800d57c <_malloc_r>
 800dcd6:	0004      	movs	r4, r0
 800dcd8:	0020      	movs	r0, r4
 800dcda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcdc:	2a00      	cmp	r2, #0
 800dcde:	d103      	bne.n	800dce8 <_realloc_r+0x24>
 800dce0:	f7ff fc02 	bl	800d4e8 <_free_r>
 800dce4:	0034      	movs	r4, r6
 800dce6:	e7f7      	b.n	800dcd8 <_realloc_r+0x14>
 800dce8:	f000 f812 	bl	800dd10 <_malloc_usable_size_r>
 800dcec:	002c      	movs	r4, r5
 800dcee:	42b0      	cmp	r0, r6
 800dcf0:	d2f2      	bcs.n	800dcd8 <_realloc_r+0x14>
 800dcf2:	0031      	movs	r1, r6
 800dcf4:	0038      	movs	r0, r7
 800dcf6:	f7ff fc41 	bl	800d57c <_malloc_r>
 800dcfa:	1e04      	subs	r4, r0, #0
 800dcfc:	d0ec      	beq.n	800dcd8 <_realloc_r+0x14>
 800dcfe:	0029      	movs	r1, r5
 800dd00:	0032      	movs	r2, r6
 800dd02:	f7ff fbdf 	bl	800d4c4 <memcpy>
 800dd06:	0029      	movs	r1, r5
 800dd08:	0038      	movs	r0, r7
 800dd0a:	f7ff fbed 	bl	800d4e8 <_free_r>
 800dd0e:	e7e3      	b.n	800dcd8 <_realloc_r+0x14>

0800dd10 <_malloc_usable_size_r>:
 800dd10:	1f0b      	subs	r3, r1, #4
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	1f18      	subs	r0, r3, #4
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	da01      	bge.n	800dd1e <_malloc_usable_size_r+0xe>
 800dd1a:	580b      	ldr	r3, [r1, r0]
 800dd1c:	18c0      	adds	r0, r0, r3
 800dd1e:	4770      	bx	lr

0800dd20 <_init>:
 800dd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd22:	46c0      	nop			; (mov r8, r8)
 800dd24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd26:	bc08      	pop	{r3}
 800dd28:	469e      	mov	lr, r3
 800dd2a:	4770      	bx	lr

0800dd2c <_fini>:
 800dd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd2e:	46c0      	nop			; (mov r8, r8)
 800dd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd32:	bc08      	pop	{r3}
 800dd34:	469e      	mov	lr, r3
 800dd36:	4770      	bx	lr
