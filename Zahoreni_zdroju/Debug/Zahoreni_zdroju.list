
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf14  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800cfd4  0800cfd4  0001cfd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d244  0800d244  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d244  0800d244  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d244  0800d244  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d244  0800d244  0001d244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d248  0800d248  0001d248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d24c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000148c  200001e0  0800d42c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000166c  0800d42c  0002166c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a3cb  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e66  00000000  00000000  0004a5d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  0004f440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001568  00000000  00000000  00050b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ffe4  00000000  00000000  000520e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fd0b  00000000  00000000  000720cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a43cb  00000000  00000000  00091dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001361a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005688  00000000  00000000  001361f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800cfbc 	.word	0x0800cfbc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800cfbc 	.word	0x0800cfbc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	0002      	movs	r2, r0
 8000420:	1dbb      	adds	r3, r7, #6
 8000422:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 8000424:	1dbb      	adds	r3, r7, #6
 8000426:	881a      	ldrh	r2, [r3, #0]
 8000428:	2380      	movs	r3, #128	; 0x80
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	429a      	cmp	r2, r3
 800042e:	d104      	bne.n	800043a <HAL_GPIO_EXTI_Callback+0x22>
	{
		flags.buttons.butt0_int = 1;
 8000430:	4b09      	ldr	r3, [pc, #36]	; (8000458 <HAL_GPIO_EXTI_Callback+0x40>)
 8000432:	791a      	ldrb	r2, [r3, #4]
 8000434:	2101      	movs	r1, #1
 8000436:	430a      	orrs	r2, r1
 8000438:	711a      	strb	r2, [r3, #4]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 800043a:	1dbb      	adds	r3, r7, #6
 800043c:	881a      	ldrh	r2, [r3, #0]
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	005b      	lsls	r3, r3, #1
 8000442:	429a      	cmp	r2, r3
 8000444:	d104      	bne.n	8000450 <HAL_GPIO_EXTI_Callback+0x38>
	{
		flags.buttons.butt1_int = 1;
 8000446:	4b04      	ldr	r3, [pc, #16]	; (8000458 <HAL_GPIO_EXTI_Callback+0x40>)
 8000448:	791a      	ldrb	r2, [r3, #4]
 800044a:	2104      	movs	r1, #4
 800044c:	430a      	orrs	r2, r1
 800044e:	711a      	strb	r2, [r3, #4]
	}
}
 8000450:	46c0      	nop			; (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	b002      	add	sp, #8
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20000618 	.word	0x20000618

0800045c <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	4b06      	ldr	r3, [pc, #24]	; (8000480 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000468:	429a      	cmp	r2, r3
 800046a:	d104      	bne.n	8000476 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		flags.time.ten_ms = 1;
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800046e:	781a      	ldrb	r2, [r3, #0]
 8000470:	2101      	movs	r1, #1
 8000472:	430a      	orrs	r2, r1
 8000474:	701a      	strb	r2, [r3, #0]
	}
}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	b002      	add	sp, #8
 800047c:	bd80      	pop	{r7, pc}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	200005d0 	.word	0x200005d0
 8000484:	20000618 	.word	0x20000618

08000488 <HAL_ADC_ConvCpltCallback>:

//_____ADC data ready callback_____//
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	flags.meas.measDataReady = 1;
 8000490:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000492:	7d1a      	ldrb	r2, [r3, #20]
 8000494:	2104      	movs	r1, #4
 8000496:	430a      	orrs	r2, r1
 8000498:	751a      	strb	r2, [r3, #20]
}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	46bd      	mov	sp, r7
 800049e:	b002      	add	sp, #8
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	20000618 	.word	0x20000618

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f001 fee6 	bl	800227c <HAL_Init>

  /* USER CODE BEGIN Init */

  //__Buffery___//
  dispBuffer = createBuffer(100);
 80004b0:	2064      	movs	r0, #100	; 0x64
 80004b2:	f001 f874 	bl	800159e <createBuffer>
 80004b6:	0002      	movs	r2, r0
 80004b8:	4b2c      	ldr	r3, [pc, #176]	; (800056c <main+0xc4>)
 80004ba:	601a      	str	r2, [r3, #0]
  regBuffer = createBuffer(100);
 80004bc:	2064      	movs	r0, #100	; 0x64
 80004be:	f001 f86e 	bl	800159e <createBuffer>
 80004c2:	0002      	movs	r2, r0
 80004c4:	4b2a      	ldr	r3, [pc, #168]	; (8000570 <main+0xc8>)
 80004c6:	601a      	str	r2, [r3, #0]
  USB_Rx_Buffer = createBuffer(500);
 80004c8:	23fa      	movs	r3, #250	; 0xfa
 80004ca:	005b      	lsls	r3, r3, #1
 80004cc:	0018      	movs	r0, r3
 80004ce:	f001 f866 	bl	800159e <createBuffer>
 80004d2:	0002      	movs	r2, r0
 80004d4:	4b27      	ldr	r3, [pc, #156]	; (8000574 <main+0xcc>)
 80004d6:	601a      	str	r2, [r3, #0]
  USB_Tx_Buffer = createBuffer(500);
 80004d8:	23fa      	movs	r3, #250	; 0xfa
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	0018      	movs	r0, r3
 80004de:	f001 f85e 	bl	800159e <createBuffer>
 80004e2:	0002      	movs	r2, r0
 80004e4:	4b24      	ldr	r3, [pc, #144]	; (8000578 <main+0xd0>)
 80004e6:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f84e 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 fab6 	bl	8000a5c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004f0:	f00b fb92 	bl	800bc18 <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 80004f4:	f000 fa94 	bl	8000a20 <MX_DMA_Init>
  MX_ADC_Init();
 80004f8:	f000 f8b2 	bl	8000660 <MX_ADC_Init>
  MX_SPI1_Init();
 80004fc:	f000 f9ce 	bl	800089c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8000500:	f000 fa5e 	bl	80009c0 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 8000504:	f000 fa10 	bl	8000928 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Inicializace displeje___//
  //dispInit();
  //writeChar('a', 1, 5);

  LOAD_MIN_OFF;
 8000508:	4b1c      	ldr	r3, [pc, #112]	; (800057c <main+0xd4>)
 800050a:	2200      	movs	r2, #0
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	0018      	movs	r0, r3
 8000510:	f002 ffad 	bl	800346e <HAL_GPIO_WritePin>
  LOAD_MAX_OFF;
 8000514:	4b19      	ldr	r3, [pc, #100]	; (800057c <main+0xd4>)
 8000516:	2200      	movs	r2, #0
 8000518:	2140      	movs	r1, #64	; 0x40
 800051a:	0018      	movs	r0, r3
 800051c:	f002 ffa7 	bl	800346e <HAL_GPIO_WritePin>

  if(regInit() != REG_OK)	//inicializace shift registrů
 8000520:	f001 f948 	bl	80017b4 <regInit>
 8000524:	1e03      	subs	r3, r0, #0
 8000526:	d004      	beq.n	8000532 <main+0x8a>
  {
	  flags.conErr = 1;
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <main+0xd8>)
 800052a:	7e1a      	ldrb	r2, [r3, #24]
 800052c:	2104      	movs	r1, #4
 800052e:	430a      	orrs	r2, r1
 8000530:	761a      	strb	r2, [r3, #24]
	  //Odešli zprávu do PC
  }

  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 8000532:	4b14      	ldr	r3, [pc, #80]	; (8000584 <main+0xdc>)
 8000534:	0018      	movs	r0, r3
 8000536:	f006 fa09 	bl	800694c <HAL_TIM_Base_Start_IT>

  flags.ui.longBeep = 1;
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <main+0xd8>)
 800053c:	7c1a      	ldrb	r2, [r3, #16]
 800053e:	2102      	movs	r1, #2
 8000540:	430a      	orrs	r2, r1
 8000542:	741a      	strb	r2, [r3, #16]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flags.time.ten_ms)	// 10 ms
 8000544:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <main+0xd8>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2201      	movs	r2, #1
 800054a:	4013      	ands	r3, r2
 800054c:	b2db      	uxtb	r3, r3
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0f8      	beq.n	8000544 <main+0x9c>
	  {
		  clkHandler();
 8000552:	f000 fb6f 	bl	8000c34 <clkHandler>
		  buttonDebounce();
 8000556:	f000 fbeb 	bl	8000d30 <buttonDebounce>
		  comHandler();
 800055a:	f000 fc69 	bl	8000e30 <comHandler>
		  UI_Handler();
 800055e:	f000 fda7 	bl	80010b0 <UI_Handler>
		  testHandler();
 8000562:	f001 fc05 	bl	8001d70 <testHandler>
		  measHandler();
 8000566:	f000 fedf 	bl	8001328 <measHandler>
	  if(flags.time.ten_ms)	// 10 ms
 800056a:	e7eb      	b.n	8000544 <main+0x9c>
 800056c:	20000488 	.word	0x20000488
 8000570:	200006c0 	.word	0x200006c0
 8000574:	20001164 	.word	0x20001164
 8000578:	20000568 	.word	0x20000568
 800057c:	48000800 	.word	0x48000800
 8000580:	20000618 	.word	0x20000618
 8000584:	200005d0 	.word	0x200005d0

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b590      	push	{r4, r7, lr}
 800058a:	b099      	sub	sp, #100	; 0x64
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	242c      	movs	r4, #44	; 0x2c
 8000590:	193b      	adds	r3, r7, r4
 8000592:	0018      	movs	r0, r3
 8000594:	2334      	movs	r3, #52	; 0x34
 8000596:	001a      	movs	r2, r3
 8000598:	2100      	movs	r1, #0
 800059a:	f00c f8e1 	bl	800c760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059e:	231c      	movs	r3, #28
 80005a0:	18fb      	adds	r3, r7, r3
 80005a2:	0018      	movs	r0, r3
 80005a4:	2310      	movs	r3, #16
 80005a6:	001a      	movs	r2, r3
 80005a8:	2100      	movs	r1, #0
 80005aa:	f00c f8d9 	bl	800c760 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ae:	003b      	movs	r3, r7
 80005b0:	0018      	movs	r0, r3
 80005b2:	231c      	movs	r3, #28
 80005b4:	001a      	movs	r2, r3
 80005b6:	2100      	movs	r1, #0
 80005b8:	f00c f8d2 	bl	800c760 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80005bc:	0021      	movs	r1, r4
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2232      	movs	r2, #50	; 0x32
 80005c2:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2201      	movs	r2, #1
 80005c8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2201      	movs	r2, #1
 80005ce:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2201      	movs	r2, #1
 80005d4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2210      	movs	r2, #16
 80005da:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2210      	movs	r2, #16
 80005e0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2202      	movs	r2, #2
 80005e6:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2280      	movs	r2, #128	; 0x80
 80005ec:	0212      	lsls	r2, r2, #8
 80005ee:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2280      	movs	r2, #128	; 0x80
 80005f4:	0352      	lsls	r2, r2, #13
 80005f6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2200      	movs	r2, #0
 80005fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	0018      	movs	r0, r3
 8000602:	f004 fdfb 	bl	80051fc <HAL_RCC_OscConfig>
 8000606:	1e03      	subs	r3, r0, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800060a:	f000 ffc3 	bl	8001594 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	211c      	movs	r1, #28
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2207      	movs	r2, #7
 8000614:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2202      	movs	r2, #2
 800061a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2101      	movs	r1, #1
 800062c:	0018      	movs	r0, r3
 800062e:	f005 f96b 	bl	8005908 <HAL_RCC_ClockConfig>
 8000632:	1e03      	subs	r3, r0, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000636:	f000 ffad 	bl	8001594 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800063a:	003b      	movs	r3, r7
 800063c:	2280      	movs	r2, #128	; 0x80
 800063e:	0292      	lsls	r2, r2, #10
 8000640:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000642:	003b      	movs	r3, r7
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000648:	003b      	movs	r3, r7
 800064a:	0018      	movs	r0, r3
 800064c:	f005 fad8 	bl	8005c00 <HAL_RCCEx_PeriphCLKConfig>
 8000650:	1e03      	subs	r3, r0, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000654:	f000 ff9e 	bl	8001594 <Error_Handler>
  }
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b019      	add	sp, #100	; 0x64
 800065e:	bd90      	pop	{r4, r7, pc}

08000660 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	0018      	movs	r0, r3
 800066a:	230c      	movs	r3, #12
 800066c:	001a      	movs	r2, r3
 800066e:	2100      	movs	r1, #0
 8000670:	f00c f876 	bl	800c760 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000674:	4b87      	ldr	r3, [pc, #540]	; (8000894 <MX_ADC_Init+0x234>)
 8000676:	4a88      	ldr	r2, [pc, #544]	; (8000898 <MX_ADC_Init+0x238>)
 8000678:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800067a:	4b86      	ldr	r3, [pc, #536]	; (8000894 <MX_ADC_Init+0x234>)
 800067c:	2200      	movs	r2, #0
 800067e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000680:	4b84      	ldr	r3, [pc, #528]	; (8000894 <MX_ADC_Init+0x234>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000686:	4b83      	ldr	r3, [pc, #524]	; (8000894 <MX_ADC_Init+0x234>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800068c:	4b81      	ldr	r3, [pc, #516]	; (8000894 <MX_ADC_Init+0x234>)
 800068e:	2201      	movs	r2, #1
 8000690:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000692:	4b80      	ldr	r3, [pc, #512]	; (8000894 <MX_ADC_Init+0x234>)
 8000694:	2204      	movs	r2, #4
 8000696:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000698:	4b7e      	ldr	r3, [pc, #504]	; (8000894 <MX_ADC_Init+0x234>)
 800069a:	2200      	movs	r2, #0
 800069c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800069e:	4b7d      	ldr	r3, [pc, #500]	; (8000894 <MX_ADC_Init+0x234>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80006a4:	4b7b      	ldr	r3, [pc, #492]	; (8000894 <MX_ADC_Init+0x234>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80006aa:	4b7a      	ldr	r3, [pc, #488]	; (8000894 <MX_ADC_Init+0x234>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b0:	4b78      	ldr	r3, [pc, #480]	; (8000894 <MX_ADC_Init+0x234>)
 80006b2:	22c2      	movs	r2, #194	; 0xc2
 80006b4:	32ff      	adds	r2, #255	; 0xff
 80006b6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b8:	4b76      	ldr	r3, [pc, #472]	; (8000894 <MX_ADC_Init+0x234>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80006be:	4b75      	ldr	r3, [pc, #468]	; (8000894 <MX_ADC_Init+0x234>)
 80006c0:	2224      	movs	r2, #36	; 0x24
 80006c2:	2100      	movs	r1, #0
 80006c4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006c6:	4b73      	ldr	r3, [pc, #460]	; (8000894 <MX_ADC_Init+0x234>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006cc:	4b71      	ldr	r3, [pc, #452]	; (8000894 <MX_ADC_Init+0x234>)
 80006ce:	0018      	movs	r0, r3
 80006d0:	f001 fe5c 	bl	800238c <HAL_ADC_Init>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d001      	beq.n	80006dc <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80006d8:	f000 ff5c 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	0152      	lsls	r2, r2, #5
 80006e8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2280      	movs	r2, #128	; 0x80
 80006ee:	0552      	lsls	r2, r2, #21
 80006f0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006f2:	1d3a      	adds	r2, r7, #4
 80006f4:	4b67      	ldr	r3, [pc, #412]	; (8000894 <MX_ADC_Init+0x234>)
 80006f6:	0011      	movs	r1, r2
 80006f8:	0018      	movs	r0, r3
 80006fa:	f002 f819 	bl	8002730 <HAL_ADC_ConfigChannel>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8000702:	f000 ff47 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2201      	movs	r2, #1
 800070a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800070c:	1d3a      	adds	r2, r7, #4
 800070e:	4b61      	ldr	r3, [pc, #388]	; (8000894 <MX_ADC_Init+0x234>)
 8000710:	0011      	movs	r1, r2
 8000712:	0018      	movs	r0, r3
 8000714:	f002 f80c 	bl	8002730 <HAL_ADC_ConfigChannel>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 800071c:	f000 ff3a 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2202      	movs	r2, #2
 8000724:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000726:	1d3a      	adds	r2, r7, #4
 8000728:	4b5a      	ldr	r3, [pc, #360]	; (8000894 <MX_ADC_Init+0x234>)
 800072a:	0011      	movs	r1, r2
 800072c:	0018      	movs	r0, r3
 800072e:	f001 ffff 	bl	8002730 <HAL_ADC_ConfigChannel>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000736:	f000 ff2d 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2203      	movs	r2, #3
 800073e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000740:	1d3a      	adds	r2, r7, #4
 8000742:	4b54      	ldr	r3, [pc, #336]	; (8000894 <MX_ADC_Init+0x234>)
 8000744:	0011      	movs	r1, r2
 8000746:	0018      	movs	r0, r3
 8000748:	f001 fff2 	bl	8002730 <HAL_ADC_ConfigChannel>
 800074c:	1e03      	subs	r3, r0, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000750:	f000 ff20 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	2204      	movs	r2, #4
 8000758:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800075a:	1d3a      	adds	r2, r7, #4
 800075c:	4b4d      	ldr	r3, [pc, #308]	; (8000894 <MX_ADC_Init+0x234>)
 800075e:	0011      	movs	r1, r2
 8000760:	0018      	movs	r0, r3
 8000762:	f001 ffe5 	bl	8002730 <HAL_ADC_ConfigChannel>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 800076a:	f000 ff13 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2205      	movs	r2, #5
 8000772:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000774:	1d3a      	adds	r2, r7, #4
 8000776:	4b47      	ldr	r3, [pc, #284]	; (8000894 <MX_ADC_Init+0x234>)
 8000778:	0011      	movs	r1, r2
 800077a:	0018      	movs	r0, r3
 800077c:	f001 ffd8 	bl	8002730 <HAL_ADC_ConfigChannel>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d001      	beq.n	8000788 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000784:	f000 ff06 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2206      	movs	r2, #6
 800078c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800078e:	1d3a      	adds	r2, r7, #4
 8000790:	4b40      	ldr	r3, [pc, #256]	; (8000894 <MX_ADC_Init+0x234>)
 8000792:	0011      	movs	r1, r2
 8000794:	0018      	movs	r0, r3
 8000796:	f001 ffcb 	bl	8002730 <HAL_ADC_ConfigChannel>
 800079a:	1e03      	subs	r3, r0, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC_Init+0x142>
  {
    Error_Handler();
 800079e:	f000 fef9 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2207      	movs	r2, #7
 80007a6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007a8:	1d3a      	adds	r2, r7, #4
 80007aa:	4b3a      	ldr	r3, [pc, #232]	; (8000894 <MX_ADC_Init+0x234>)
 80007ac:	0011      	movs	r1, r2
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 ffbe 	bl	8002730 <HAL_ADC_ConfigChannel>
 80007b4:	1e03      	subs	r3, r0, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 80007b8:	f000 feec 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2208      	movs	r2, #8
 80007c0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007c2:	1d3a      	adds	r2, r7, #4
 80007c4:	4b33      	ldr	r3, [pc, #204]	; (8000894 <MX_ADC_Init+0x234>)
 80007c6:	0011      	movs	r1, r2
 80007c8:	0018      	movs	r0, r3
 80007ca:	f001 ffb1 	bl	8002730 <HAL_ADC_ConfigChannel>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <MX_ADC_Init+0x176>
  {
    Error_Handler();
 80007d2:	f000 fedf 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2209      	movs	r2, #9
 80007da:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007dc:	1d3a      	adds	r2, r7, #4
 80007de:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <MX_ADC_Init+0x234>)
 80007e0:	0011      	movs	r1, r2
 80007e2:	0018      	movs	r0, r3
 80007e4:	f001 ffa4 	bl	8002730 <HAL_ADC_ConfigChannel>
 80007e8:	1e03      	subs	r3, r0, #0
 80007ea:	d001      	beq.n	80007f0 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 80007ec:	f000 fed2 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	220a      	movs	r2, #10
 80007f4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007f6:	1d3a      	adds	r2, r7, #4
 80007f8:	4b26      	ldr	r3, [pc, #152]	; (8000894 <MX_ADC_Init+0x234>)
 80007fa:	0011      	movs	r1, r2
 80007fc:	0018      	movs	r0, r3
 80007fe:	f001 ff97 	bl	8002730 <HAL_ADC_ConfigChannel>
 8000802:	1e03      	subs	r3, r0, #0
 8000804:	d001      	beq.n	800080a <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 8000806:	f000 fec5 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	220b      	movs	r2, #11
 800080e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000810:	1d3a      	adds	r2, r7, #4
 8000812:	4b20      	ldr	r3, [pc, #128]	; (8000894 <MX_ADC_Init+0x234>)
 8000814:	0011      	movs	r1, r2
 8000816:	0018      	movs	r0, r3
 8000818:	f001 ff8a 	bl	8002730 <HAL_ADC_ConfigChannel>
 800081c:	1e03      	subs	r3, r0, #0
 800081e:	d001      	beq.n	8000824 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 8000820:	f000 feb8 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	220c      	movs	r2, #12
 8000828:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800082a:	1d3a      	adds	r2, r7, #4
 800082c:	4b19      	ldr	r3, [pc, #100]	; (8000894 <MX_ADC_Init+0x234>)
 800082e:	0011      	movs	r1, r2
 8000830:	0018      	movs	r0, r3
 8000832:	f001 ff7d 	bl	8002730 <HAL_ADC_ConfigChannel>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 800083a:	f000 feab 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	220d      	movs	r2, #13
 8000842:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000844:	1d3a      	adds	r2, r7, #4
 8000846:	4b13      	ldr	r3, [pc, #76]	; (8000894 <MX_ADC_Init+0x234>)
 8000848:	0011      	movs	r1, r2
 800084a:	0018      	movs	r0, r3
 800084c:	f001 ff70 	bl	8002730 <HAL_ADC_ConfigChannel>
 8000850:	1e03      	subs	r3, r0, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 8000854:	f000 fe9e 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	220e      	movs	r2, #14
 800085c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800085e:	1d3a      	adds	r2, r7, #4
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_ADC_Init+0x234>)
 8000862:	0011      	movs	r1, r2
 8000864:	0018      	movs	r0, r3
 8000866:	f001 ff63 	bl	8002730 <HAL_ADC_ConfigChannel>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <MX_ADC_Init+0x212>
  {
    Error_Handler();
 800086e:	f000 fe91 	bl	8001594 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	220f      	movs	r2, #15
 8000876:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000878:	1d3a      	adds	r2, r7, #4
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_ADC_Init+0x234>)
 800087c:	0011      	movs	r1, r2
 800087e:	0018      	movs	r0, r3
 8000880:	f001 ff56 	bl	8002730 <HAL_ADC_ConfigChannel>
 8000884:	1e03      	subs	r3, r0, #0
 8000886:	d001      	beq.n	800088c <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 8000888:	f000 fe84 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800088c:	46c0      	nop			; (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b004      	add	sp, #16
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000678 	.word	0x20000678
 8000898:	40012400 	.word	0x40012400

0800089c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008a0:	4b1e      	ldr	r3, [pc, #120]	; (800091c <MX_SPI1_Init+0x80>)
 80008a2:	4a1f      	ldr	r2, [pc, #124]	; (8000920 <MX_SPI1_Init+0x84>)
 80008a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008a6:	4b1d      	ldr	r3, [pc, #116]	; (800091c <MX_SPI1_Init+0x80>)
 80008a8:	2282      	movs	r2, #130	; 0x82
 80008aa:	0052      	lsls	r2, r2, #1
 80008ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ae:	4b1b      	ldr	r3, [pc, #108]	; (800091c <MX_SPI1_Init+0x80>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b4:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_SPI1_Init+0x80>)
 80008b6:	22e0      	movs	r2, #224	; 0xe0
 80008b8:	00d2      	lsls	r2, r2, #3
 80008ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_SPI1_Init+0x80>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_SPI1_Init+0x80>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008c8:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_SPI1_Init+0x80>)
 80008ca:	2280      	movs	r2, #128	; 0x80
 80008cc:	0092      	lsls	r2, r2, #2
 80008ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_SPI1_Init+0x80>)
 80008d2:	2238      	movs	r2, #56	; 0x38
 80008d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_SPI1_Init+0x80>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_SPI1_Init+0x80>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_SPI1_Init+0x80>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_SPI1_Init+0x80>)
 80008ea:	2207      	movs	r2, #7
 80008ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_SPI1_Init+0x80>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008f4:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_SPI1_Init+0x80>)
 80008f6:	2208      	movs	r2, #8
 80008f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008fa:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_SPI1_Init+0x80>)
 80008fc:	0018      	movs	r0, r3
 80008fe:	f005 fa7d 	bl	8005dfc <HAL_SPI_Init>
 8000902:	1e03      	subs	r3, r0, #0
 8000904:	d001      	beq.n	800090a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000906:	f000 fe45 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_SPI1_Init+0x88>)
 800090c:	2201      	movs	r2, #1
 800090e:	2140      	movs	r1, #64	; 0x40
 8000910:	0018      	movs	r0, r3
 8000912:	f002 fdac 	bl	800346e <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000056c 	.word	0x2000056c
 8000920:	40013000 	.word	0x40013000
 8000924:	48000400 	.word	0x48000400

08000928 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	0018      	movs	r0, r3
 8000932:	231c      	movs	r3, #28
 8000934:	001a      	movs	r2, r3
 8000936:	2100      	movs	r1, #0
 8000938:	f00b ff12 	bl	800c760 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_TIM14_Init+0x8c>)
 800093e:	4a1e      	ldr	r2, [pc, #120]	; (80009b8 <MX_TIM14_Init+0x90>)
 8000940:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <MX_TIM14_Init+0x8c>)
 8000944:	222f      	movs	r2, #47	; 0x2f
 8000946:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_TIM14_Init+0x8c>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_TIM14_Init+0x8c>)
 8000950:	4a1a      	ldr	r2, [pc, #104]	; (80009bc <MX_TIM14_Init+0x94>)
 8000952:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_TIM14_Init+0x8c>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_TIM14_Init+0x8c>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_TIM14_Init+0x8c>)
 8000962:	0018      	movs	r0, r3
 8000964:	f005 ffa2 	bl	80068ac <HAL_TIM_Base_Init>
 8000968:	1e03      	subs	r3, r0, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 800096c:	f000 fe12 	bl	8001594 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8000970:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_TIM14_Init+0x8c>)
 8000972:	0018      	movs	r0, r3
 8000974:	f006 f83c 	bl	80069f0 <HAL_TIM_OC_Init>
 8000978:	1e03      	subs	r3, r0, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 800097c:	f000 fe0a 	bl	8001594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	2200      	movs	r2, #0
 800098a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800098c:	1d3b      	adds	r3, r7, #4
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000998:	1d39      	adds	r1, r7, #4
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_TIM14_Init+0x8c>)
 800099c:	2200      	movs	r2, #0
 800099e:	0018      	movs	r0, r3
 80009a0:	f006 f994 	bl	8006ccc <HAL_TIM_OC_ConfigChannel>
 80009a4:	1e03      	subs	r3, r0, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80009a8:	f000 fdf4 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b008      	add	sp, #32
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200005d0 	.word	0x200005d0
 80009b8:	40002000 	.word	0x40002000
 80009bc:	0000270f 	.word	0x0000270f

080009c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009c6:	4a15      	ldr	r2, [pc, #84]	; (8000a1c <MX_USART3_UART_Init+0x5c>)
 80009c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009cc:	2296      	movs	r2, #150	; 0x96
 80009ce:	0212      	lsls	r2, r2, #8
 80009d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <MX_USART3_UART_Init+0x58>)
 8000a04:	0018      	movs	r0, r3
 8000a06:	f006 fc65 	bl	80072d4 <HAL_UART_Init>
 8000a0a:	1e03      	subs	r3, r0, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a0e:	f000 fdc1 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	200004e4 	.word	0x200004e4
 8000a1c:	40004800 	.word	0x40004800

08000a20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_DMA_Init+0x38>)
 8000a28:	695a      	ldr	r2, [r3, #20]
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_DMA_Init+0x38>)
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	615a      	str	r2, [r3, #20]
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_DMA_Init+0x38>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	2201      	movs	r2, #1
 8000a38:	4013      	ands	r3, r2
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2100      	movs	r1, #0
 8000a42:	2009      	movs	r0, #9
 8000a44:	f002 f936 	bl	8002cb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a48:	2009      	movs	r0, #9
 8000a4a:	f002 f948 	bl	8002cde <HAL_NVIC_EnableIRQ>

}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b002      	add	sp, #8
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	40021000 	.word	0x40021000

08000a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b08b      	sub	sp, #44	; 0x2c
 8000a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	2414      	movs	r4, #20
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	0018      	movs	r0, r3
 8000a68:	2314      	movs	r3, #20
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f00b fe77 	bl	800c760 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a72:	4b6b      	ldr	r3, [pc, #428]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000a74:	695a      	ldr	r2, [r3, #20]
 8000a76:	4b6a      	ldr	r3, [pc, #424]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000a78:	2180      	movs	r1, #128	; 0x80
 8000a7a:	03c9      	lsls	r1, r1, #15
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	615a      	str	r2, [r3, #20]
 8000a80:	4b67      	ldr	r3, [pc, #412]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000a82:	695a      	ldr	r2, [r3, #20]
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	03db      	lsls	r3, r3, #15
 8000a88:	4013      	ands	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8e:	4b64      	ldr	r3, [pc, #400]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000a90:	695a      	ldr	r2, [r3, #20]
 8000a92:	4b63      	ldr	r3, [pc, #396]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000a94:	2180      	movs	r1, #128	; 0x80
 8000a96:	0309      	lsls	r1, r1, #12
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	615a      	str	r2, [r3, #20]
 8000a9c:	4b60      	ldr	r3, [pc, #384]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000a9e:	695a      	ldr	r2, [r3, #20]
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	031b      	lsls	r3, r3, #12
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b5d      	ldr	r3, [pc, #372]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000aac:	695a      	ldr	r2, [r3, #20]
 8000aae:	4b5c      	ldr	r3, [pc, #368]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000ab0:	2180      	movs	r1, #128	; 0x80
 8000ab2:	0289      	lsls	r1, r1, #10
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	615a      	str	r2, [r3, #20]
 8000ab8:	4b59      	ldr	r3, [pc, #356]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000aba:	695a      	ldr	r2, [r3, #20]
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	029b      	lsls	r3, r3, #10
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	4b56      	ldr	r3, [pc, #344]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000ac8:	695a      	ldr	r2, [r3, #20]
 8000aca:	4b55      	ldr	r3, [pc, #340]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000acc:	2180      	movs	r1, #128	; 0x80
 8000ace:	02c9      	lsls	r1, r1, #11
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	615a      	str	r2, [r3, #20]
 8000ad4:	4b52      	ldr	r3, [pc, #328]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000ad6:	695a      	ldr	r2, [r3, #20]
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	02db      	lsls	r3, r3, #11
 8000adc:	4013      	ands	r3, r2
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae2:	4b4f      	ldr	r3, [pc, #316]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000ae4:	695a      	ldr	r2, [r3, #20]
 8000ae6:	4b4e      	ldr	r3, [pc, #312]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000ae8:	2180      	movs	r1, #128	; 0x80
 8000aea:	0349      	lsls	r1, r1, #13
 8000aec:	430a      	orrs	r2, r1
 8000aee:	615a      	str	r2, [r3, #20]
 8000af0:	4b4b      	ldr	r3, [pc, #300]	; (8000c20 <MX_GPIO_Init+0x1c4>)
 8000af2:	695a      	ldr	r2, [r3, #20]
 8000af4:	2380      	movs	r3, #128	; 0x80
 8000af6:	035b      	lsls	r3, r3, #13
 8000af8:	4013      	ands	r3, r2
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000afe:	4949      	ldr	r1, [pc, #292]	; (8000c24 <MX_GPIO_Init+0x1c8>)
 8000b00:	4b49      	ldr	r3, [pc, #292]	; (8000c28 <MX_GPIO_Init+0x1cc>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	0018      	movs	r0, r3
 8000b06:	f002 fcb2 	bl	800346e <HAL_GPIO_WritePin>
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000b0a:	239e      	movs	r3, #158	; 0x9e
 8000b0c:	015b      	lsls	r3, r3, #5
 8000b0e:	4847      	ldr	r0, [pc, #284]	; (8000c2c <MX_GPIO_Init+0x1d0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	0019      	movs	r1, r3
 8000b14:	f002 fcab 	bl	800346e <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	0219      	lsls	r1, r3, #8
 8000b1c:	2390      	movs	r3, #144	; 0x90
 8000b1e:	05db      	lsls	r3, r3, #23
 8000b20:	2200      	movs	r2, #0
 8000b22:	0018      	movs	r0, r3
 8000b24:	f002 fca3 	bl	800346e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin DEBUG_Pin SR_CLR_Pin SR_RCLK_Pin
                           SR_OE_Pin DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin
                           BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000b28:	193b      	adds	r3, r7, r4
 8000b2a:	4a3e      	ldr	r2, [pc, #248]	; (8000c24 <MX_GPIO_Init+0x1c8>)
 8000b2c:	601a      	str	r2, [r3, #0]
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	193b      	adds	r3, r7, r4
 8000b30:	2201      	movs	r2, #1
 8000b32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	193b      	adds	r3, r7, r4
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3a:	193b      	adds	r3, r7, r4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	4a39      	ldr	r2, [pc, #228]	; (8000c28 <MX_GPIO_Init+0x1cc>)
 8000b44:	0019      	movs	r1, r3
 8000b46:	0010      	movs	r0, r2
 8000b48:	f002 fafc 	bl	8003144 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000b4c:	0021      	movs	r1, r4
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	229e      	movs	r2, #158	; 0x9e
 8000b52:	0152      	lsls	r2, r2, #5
 8000b54:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	000c      	movs	r4, r1
 8000b58:	193b      	adds	r3, r7, r4
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	193b      	adds	r3, r7, r4
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	4a2f      	ldr	r2, [pc, #188]	; (8000c2c <MX_GPIO_Init+0x1d0>)
 8000b6e:	0019      	movs	r1, r3
 8000b70:	0010      	movs	r0, r2
 8000b72:	f002 fae7 	bl	8003144 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	22c0      	movs	r2, #192	; 0xc0
 8000b7a:	0092      	lsls	r2, r2, #2
 8000b7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	2288      	movs	r2, #136	; 0x88
 8000b82:	0352      	lsls	r2, r2, #13
 8000b84:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	2202      	movs	r2, #2
 8000b8a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	193a      	adds	r2, r7, r4
 8000b8e:	2390      	movs	r3, #144	; 0x90
 8000b90:	05db      	lsls	r3, r3, #23
 8000b92:	0011      	movs	r1, r2
 8000b94:	0018      	movs	r0, r3
 8000b96:	f002 fad5 	bl	8003144 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b9a:	193b      	adds	r3, r7, r4
 8000b9c:	2280      	movs	r2, #128	; 0x80
 8000b9e:	00d2      	lsls	r2, r2, #3
 8000ba0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	193b      	adds	r3, r7, r4
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bae:	193a      	adds	r2, r7, r4
 8000bb0:	2390      	movs	r3, #144	; 0x90
 8000bb2:	05db      	lsls	r3, r3, #23
 8000bb4:	0011      	movs	r1, r2
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f002 fac4 	bl	8003144 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 8000bbc:	0021      	movs	r1, r4
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2280      	movs	r2, #128	; 0x80
 8000bc2:	0212      	lsls	r2, r2, #8
 8000bc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	000c      	movs	r4, r1
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	2201      	movs	r2, #1
 8000bcc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 8000bda:	193a      	adds	r2, r7, r4
 8000bdc:	2390      	movs	r3, #144	; 0x90
 8000bde:	05db      	lsls	r3, r3, #23
 8000be0:	0011      	movs	r1, r2
 8000be2:	0018      	movs	r0, r3
 8000be4:	f002 faae 	bl	8003144 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 8000be8:	193b      	adds	r3, r7, r4
 8000bea:	2204      	movs	r2, #4
 8000bec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	193b      	adds	r3, r7, r4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	193b      	adds	r3, r7, r4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	4a0c      	ldr	r2, [pc, #48]	; (8000c30 <MX_GPIO_Init+0x1d4>)
 8000bfe:	0019      	movs	r1, r3
 8000c00:	0010      	movs	r0, r2
 8000c02:	f002 fa9f 	bl	8003144 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2100      	movs	r1, #0
 8000c0a:	2007      	movs	r0, #7
 8000c0c:	f002 f852 	bl	8002cb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000c10:	2007      	movs	r0, #7
 8000c12:	f002 f864 	bl	8002cde <HAL_NVIC_EnableIRQ>

}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	b00b      	add	sp, #44	; 0x2c
 8000c1c:	bd90      	pop	{r4, r7, pc}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	40021000 	.word	0x40021000
 8000c24:	0000f3c4 	.word	0x0000f3c4
 8000c28:	48000400 	.word	0x48000400
 8000c2c:	48000800 	.word	0x48000800
 8000c30:	48000c00 	.word	0x48000c00

08000c34 <clkHandler>:

/* USER CODE BEGIN 4 */

void clkHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	flags.time.ten_ms = 0;
 8000c38:	4b3b      	ldr	r3, [pc, #236]	; (8000d28 <clkHandler+0xf4>)
 8000c3a:	781a      	ldrb	r2, [r3, #0]
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	438a      	bics	r2, r1
 8000c40:	701a      	strb	r2, [r3, #0]
	flags.time.sec	= 0;
 8000c42:	4b39      	ldr	r3, [pc, #228]	; (8000d28 <clkHandler+0xf4>)
 8000c44:	781a      	ldrb	r2, [r3, #0]
 8000c46:	2102      	movs	r1, #2
 8000c48:	438a      	bics	r2, r1
 8000c4a:	701a      	strb	r2, [r3, #0]
	flags.time.min	= 0;
 8000c4c:	4b36      	ldr	r3, [pc, #216]	; (8000d28 <clkHandler+0xf4>)
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	2104      	movs	r1, #4
 8000c52:	438a      	bics	r2, r1
 8000c54:	701a      	strb	r2, [r3, #0]
	flags.time.hour	= 0;
 8000c56:	4b34      	ldr	r3, [pc, #208]	; (8000d28 <clkHandler+0xf4>)
 8000c58:	781a      	ldrb	r2, [r3, #0]
 8000c5a:	2108      	movs	r1, #8
 8000c5c:	438a      	bics	r2, r1
 8000c5e:	701a      	strb	r2, [r3, #0]
	sysTime[SYSTIME_TEN_MS]++;
 8000c60:	4b32      	ldr	r3, [pc, #200]	; (8000d2c <clkHandler+0xf8>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	1c5a      	adds	r2, r3, #1
 8000c66:	4b31      	ldr	r3, [pc, #196]	; (8000d2c <clkHandler+0xf8>)
 8000c68:	601a      	str	r2, [r3, #0]
	if((sysTime[SYSTIME_TEN_MS] % 10) == 0)	//1 s
 8000c6a:	4b30      	ldr	r3, [pc, #192]	; (8000d2c <clkHandler+0xf8>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	210a      	movs	r1, #10
 8000c70:	0018      	movs	r0, r3
 8000c72:	f7ff fae1 	bl	8000238 <__aeabi_uidivmod>
 8000c76:	1e0b      	subs	r3, r1, #0
 8000c78:	d109      	bne.n	8000c8e <clkHandler+0x5a>
	{
		sysTime[SYSTIME_SEC]++;
 8000c7a:	4b2c      	ldr	r3, [pc, #176]	; (8000d2c <clkHandler+0xf8>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	1c5a      	adds	r2, r3, #1
 8000c80:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <clkHandler+0xf8>)
 8000c82:	605a      	str	r2, [r3, #4]
		flags.time.sec = 1;
 8000c84:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <clkHandler+0xf4>)
 8000c86:	781a      	ldrb	r2, [r3, #0]
 8000c88:	2102      	movs	r1, #2
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	701a      	strb	r2, [r3, #0]
	}

	if(flags.time.sec)
 8000c8e:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <clkHandler+0xf4>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2202      	movs	r2, #2
 8000c94:	4013      	ands	r3, r2
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d042      	beq.n	8000d22 <clkHandler+0xee>
	{
		if((sysTime[SYSTIME_SEC] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8000c9c:	4b23      	ldr	r3, [pc, #140]	; (8000d2c <clkHandler+0xf8>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	213c      	movs	r1, #60	; 0x3c
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f7ff fac8 	bl	8000238 <__aeabi_uidivmod>
 8000ca8:	1e0b      	subs	r3, r1, #0
 8000caa:	d110      	bne.n	8000cce <clkHandler+0x9a>
 8000cac:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <clkHandler+0xf8>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d00c      	beq.n	8000cce <clkHandler+0x9a>
		{
			sysTime[SYSTIME_SEC] = 0;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <clkHandler+0xf8>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	605a      	str	r2, [r3, #4]
			sysTime[SYSTIME_MIN]++;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <clkHandler+0xf8>)
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	1c5a      	adds	r2, r3, #1
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <clkHandler+0xf8>)
 8000cc2:	609a      	str	r2, [r3, #8]
			flags.time.min = 1;
 8000cc4:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <clkHandler+0xf4>)
 8000cc6:	781a      	ldrb	r2, [r3, #0]
 8000cc8:	2104      	movs	r1, #4
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	701a      	strb	r2, [r3, #0]
		}

		if(flags.time.min)
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <clkHandler+0xf4>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d022      	beq.n	8000d22 <clkHandler+0xee>
		{
			if((sysTime[SYSTIME_MIN] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <clkHandler+0xf8>)
 8000cde:	689b      	ldr	r3, [r3, #8]
 8000ce0:	213c      	movs	r1, #60	; 0x3c
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f7ff faa8 	bl	8000238 <__aeabi_uidivmod>
 8000ce8:	1e0b      	subs	r3, r1, #0
 8000cea:	d11a      	bne.n	8000d22 <clkHandler+0xee>
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <clkHandler+0xf8>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d016      	beq.n	8000d22 <clkHandler+0xee>
			{

				sysTime[SYSTIME_SEC] = 0;
 8000cf4:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <clkHandler+0xf8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	605a      	str	r2, [r3, #4]
				sysTime[SYSTIME_MIN] = 0;
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <clkHandler+0xf8>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
				sysTime[SYSTIME_HOUR]++;
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <clkHandler+0xf8>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	1c5a      	adds	r2, r3, #1
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <clkHandler+0xf8>)
 8000d08:	60da      	str	r2, [r3, #12]
				flags.time.hour = 1;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <clkHandler+0xf4>)
 8000d0c:	781a      	ldrb	r2, [r3, #0]
 8000d0e:	2108      	movs	r1, #8
 8000d10:	430a      	orrs	r2, r1
 8000d12:	701a      	strb	r2, [r3, #0]
				if(sysTime[SYSTIME_HOUR] >= 23)
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <clkHandler+0xf8>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	2b16      	cmp	r3, #22
 8000d1a:	d902      	bls.n	8000d22 <clkHandler+0xee>
					sysTime[SYSTIME_HOUR] = 0;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <clkHandler+0xf8>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime[SYSTIME_HOUR], sysTime[SYSTIME_MIN], sysTime[SYSTIME_SEC]);
		pushStr(USB_Tx_Buffer, timeStamp, strlen(timeStamp));	//odešli čas
	}
#endif
}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000618 	.word	0x20000618
 8000d2c:	2000023c 	.word	0x2000023c

08000d30 <buttonDebounce>:

void buttonDebounce(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	if(flags.buttons.butt0_int)
 8000d34:	4b3a      	ldr	r3, [pc, #232]	; (8000e20 <buttonDebounce+0xf0>)
 8000d36:	791b      	ldrb	r3, [r3, #4]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d031      	beq.n	8000da6 <buttonDebounce+0x76>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	009a      	lsls	r2, r3, #2
 8000d46:	2390      	movs	r3, #144	; 0x90
 8000d48:	05db      	lsls	r3, r3, #23
 8000d4a:	0011      	movs	r1, r2
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f002 fb71 	bl	8003434 <HAL_GPIO_ReadPin>
 8000d52:	0003      	movs	r3, r0
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d106      	bne.n	8000d66 <buttonDebounce+0x36>
		{
			button0_Debounce++;
 8000d58:	4b32      	ldr	r3, [pc, #200]	; (8000e24 <buttonDebounce+0xf4>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b30      	ldr	r3, [pc, #192]	; (8000e24 <buttonDebounce+0xf4>)
 8000d62:	701a      	strb	r2, [r3, #0]
 8000d64:	e007      	b.n	8000d76 <buttonDebounce+0x46>
		}
		else
		{
			button0_Debounce = 0;
 8000d66:	4b2f      	ldr	r3, [pc, #188]	; (8000e24 <buttonDebounce+0xf4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt0_int = 0;
 8000d6c:	4b2c      	ldr	r3, [pc, #176]	; (8000e20 <buttonDebounce+0xf0>)
 8000d6e:	791a      	ldrb	r2, [r3, #4]
 8000d70:	2101      	movs	r1, #1
 8000d72:	438a      	bics	r2, r1
 8000d74:	711a      	strb	r2, [r3, #4]
		}
		if(button0_Debounce >= 5)
 8000d76:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <buttonDebounce+0xf4>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	d913      	bls.n	8000da6 <buttonDebounce+0x76>
		{
			flags.buttons.butt0_ver = 1;
 8000d7e:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <buttonDebounce+0xf0>)
 8000d80:	791a      	ldrb	r2, [r3, #4]
 8000d82:	2102      	movs	r1, #2
 8000d84:	430a      	orrs	r2, r1
 8000d86:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt0_int = 0;
 8000d88:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <buttonDebounce+0xf0>)
 8000d8a:	791a      	ldrb	r2, [r3, #4]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	438a      	bics	r2, r1
 8000d90:	711a      	strb	r2, [r3, #4]
			button0_Debounce = 0;
 8000d92:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <buttonDebounce+0xf4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]

#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin);
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	4a22      	ldr	r2, [pc, #136]	; (8000e28 <buttonDebounce+0xf8>)
 8000d9e:	0019      	movs	r1, r3
 8000da0:	0010      	movs	r0, r2
 8000da2:	f002 fb81 	bl	80034a8 <HAL_GPIO_TogglePin>
			//writeChar('a', 1, 5);
#endif
		}
	}

	if(flags.buttons.butt1_int)
 8000da6:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <buttonDebounce+0xf0>)
 8000da8:	791b      	ldrb	r3, [r3, #4]
 8000daa:	2204      	movs	r2, #4
 8000dac:	4013      	ands	r3, r2
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d032      	beq.n	8000e1a <buttonDebounce+0xea>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	005a      	lsls	r2, r3, #1
 8000db8:	2390      	movs	r3, #144	; 0x90
 8000dba:	05db      	lsls	r3, r3, #23
 8000dbc:	0011      	movs	r1, r2
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f002 fb38 	bl	8003434 <HAL_GPIO_ReadPin>
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d106      	bne.n	8000dd8 <buttonDebounce+0xa8>
		{
			button1_Debounce++;
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <buttonDebounce+0xfc>)
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <buttonDebounce+0xfc>)
 8000dd4:	701a      	strb	r2, [r3, #0]
 8000dd6:	e007      	b.n	8000de8 <buttonDebounce+0xb8>
		}
		else
		{
			button1_Debounce = 0;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <buttonDebounce+0xfc>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt1_int = 0;
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <buttonDebounce+0xf0>)
 8000de0:	791a      	ldrb	r2, [r3, #4]
 8000de2:	2104      	movs	r1, #4
 8000de4:	438a      	bics	r2, r1
 8000de6:	711a      	strb	r2, [r3, #4]
		}
		if(button1_Debounce >= 5)
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <buttonDebounce+0xfc>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b04      	cmp	r3, #4
 8000dee:	d914      	bls.n	8000e1a <buttonDebounce+0xea>
		{
			flags.buttons.butt1_ver = 1;
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <buttonDebounce+0xf0>)
 8000df2:	791a      	ldrb	r2, [r3, #4]
 8000df4:	2108      	movs	r1, #8
 8000df6:	430a      	orrs	r2, r1
 8000df8:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt1_int = 0;
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <buttonDebounce+0xf0>)
 8000dfc:	791a      	ldrb	r2, [r3, #4]
 8000dfe:	2104      	movs	r1, #4
 8000e00:	438a      	bics	r2, r1
 8000e02:	711a      	strb	r2, [r3, #4]
			button1_Debounce = 0;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <buttonDebounce+0xfc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]

#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
 8000e0a:	2380      	movs	r3, #128	; 0x80
 8000e0c:	021a      	lsls	r2, r3, #8
 8000e0e:	2390      	movs	r3, #144	; 0x90
 8000e10:	05db      	lsls	r3, r3, #23
 8000e12:	0011      	movs	r1, r2
 8000e14:	0018      	movs	r0, r3
 8000e16:	f002 fb47 	bl	80034a8 <HAL_GPIO_TogglePin>
#endif
		}
	}
}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000618 	.word	0x20000618
 8000e24:	2000024c 	.word	0x2000024c
 8000e28:	48000400 	.word	0x48000400
 8000e2c:	2000024d 	.word	0x2000024d

08000e30 <comHandler>:
 *
 * Při přijmutí instrukce nedochází k zpracování, ale pouze k nastavení adekvátního flagu.
 * Vykonání instrukce musí být zařízeno v jiné části hlavního programu.
 */
void comHandler(void)
{
 8000e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e32:	b0a1      	sub	sp, #132	; 0x84
 8000e34:	af00      	add	r7, sp, #0
	//___Příjem dat___//
	if(flags.data_received)
 8000e36:	4b97      	ldr	r3, [pc, #604]	; (8001094 <comHandler+0x264>)
 8000e38:	7a1b      	ldrb	r3, [r3, #8]
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d042      	beq.n	8000eca <comHandler+0x9a>
	{
		char instruction;
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 8000e44:	e02e      	b.n	8000ea4 <comHandler+0x74>
		{
#ifdef __DEBUG_INST__
			uint8_t txt[30];
#endif

			switch(instruction)
 8000e46:	234b      	movs	r3, #75	; 0x4b
 8000e48:	2220      	movs	r2, #32
 8000e4a:	4694      	mov	ip, r2
 8000e4c:	44bc      	add	ip, r7
 8000e4e:	4463      	add	r3, ip
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b73      	cmp	r3, #115	; 0x73
 8000e54:	d008      	beq.n	8000e68 <comHandler+0x38>
 8000e56:	dc1f      	bgt.n	8000e98 <comHandler+0x68>
 8000e58:	2b70      	cmp	r3, #112	; 0x70
 8000e5a:	d011      	beq.n	8000e80 <comHandler+0x50>
 8000e5c:	dc1c      	bgt.n	8000e98 <comHandler+0x68>
 8000e5e:	2b63      	cmp	r3, #99	; 0x63
 8000e60:	d008      	beq.n	8000e74 <comHandler+0x44>
 8000e62:	2b6b      	cmp	r3, #107	; 0x6b
 8000e64:	d012      	beq.n	8000e8c <comHandler+0x5c>
 8000e66:	e017      	b.n	8000e98 <comHandler+0x68>
			{
			case 's': ;
				//___Start testu___//
				flags.instructions.startRequest = 1;
 8000e68:	4b8a      	ldr	r3, [pc, #552]	; (8001094 <comHandler+0x264>)
 8000e6a:	7b1a      	ldrb	r2, [r3, #12]
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Start\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000e72:	e017      	b.n	8000ea4 <comHandler+0x74>

			case'c': ;
				//___Ukončení___//
				flags.instructions.stopRequest = 1;
 8000e74:	4b87      	ldr	r3, [pc, #540]	; (8001094 <comHandler+0x264>)
 8000e76:	7b1a      	ldrb	r2, [r3, #12]
 8000e78:	2102      	movs	r1, #2
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Ukonceni\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000e7e:	e011      	b.n	8000ea4 <comHandler+0x74>

			case'p': ;
				//___Pauza___//
				flags.instructions.pauseRequest = 1;
 8000e80:	4b84      	ldr	r3, [pc, #528]	; (8001094 <comHandler+0x264>)
 8000e82:	7b1a      	ldrb	r2, [r3, #12]
 8000e84:	2104      	movs	r1, #4
 8000e86:	430a      	orrs	r2, r1
 8000e88:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Pauza\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000e8a:	e00b      	b.n	8000ea4 <comHandler+0x74>

			case'k': ;
				//___Kalibrace___//
				flags.instructions.calibRequest = 1;
 8000e8c:	4b81      	ldr	r3, [pc, #516]	; (8001094 <comHandler+0x264>)
 8000e8e:	7b1a      	ldrb	r2, [r3, #12]
 8000e90:	2108      	movs	r1, #8
 8000e92:	430a      	orrs	r2, r1
 8000e94:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Kalibrace\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000e96:	e005      	b.n	8000ea4 <comHandler+0x74>

			default: ;
				//___Neplatný příkaz___//
				flags.instructions.unknownInst = 1;
 8000e98:	4b7e      	ldr	r3, [pc, #504]	; (8001094 <comHandler+0x264>)
 8000e9a:	7b1a      	ldrb	r2, [r3, #12]
 8000e9c:	2110      	movs	r1, #16
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Neplatna instrukce\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000ea2:	46c0      	nop			; (mov r8, r8)
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 8000ea4:	4b7c      	ldr	r3, [pc, #496]	; (8001098 <comHandler+0x268>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	224b      	movs	r2, #75	; 0x4b
 8000eaa:	2120      	movs	r1, #32
 8000eac:	468c      	mov	ip, r1
 8000eae:	44bc      	add	ip, r7
 8000eb0:	4462      	add	r2, ip
 8000eb2:	0011      	movs	r1, r2
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f000 fc06 	bl	80016c6 <pop>
 8000eba:	0003      	movs	r3, r0
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d1c2      	bne.n	8000e46 <comHandler+0x16>
			}
		}
		flags.data_received = 0;
 8000ec0:	4b74      	ldr	r3, [pc, #464]	; (8001094 <comHandler+0x264>)
 8000ec2:	7a1a      	ldrb	r2, [r3, #8]
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	438a      	bics	r2, r1
 8000ec8:	721a      	strb	r2, [r3, #8]
	}

	if(flags.testProgress)
 8000eca:	4b72      	ldr	r3, [pc, #456]	; (8001094 <comHandler+0x264>)
 8000ecc:	7e1b      	ldrb	r3, [r3, #24]
 8000ece:	2202      	movs	r2, #2
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d01d      	beq.n	8000f14 <comHandler+0xe4>
	{
		char txt[] = {"Test progress\n"};
 8000ed8:	203c      	movs	r0, #60	; 0x3c
 8000eda:	2320      	movs	r3, #32
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	181b      	adds	r3, r3, r0
 8000ee0:	4a6e      	ldr	r2, [pc, #440]	; (800109c <comHandler+0x26c>)
 8000ee2:	ca32      	ldmia	r2!, {r1, r4, r5}
 8000ee4:	c332      	stmia	r3!, {r1, r4, r5}
 8000ee6:	8811      	ldrh	r1, [r2, #0]
 8000ee8:	8019      	strh	r1, [r3, #0]
 8000eea:	7892      	ldrb	r2, [r2, #2]
 8000eec:	709a      	strb	r2, [r3, #2]
		pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000eee:	4b6c      	ldr	r3, [pc, #432]	; (80010a0 <comHandler+0x270>)
 8000ef0:	681e      	ldr	r6, [r3, #0]
 8000ef2:	0004      	movs	r4, r0
 8000ef4:	2320      	movs	r3, #32
 8000ef6:	18fb      	adds	r3, r7, r3
 8000ef8:	181b      	adds	r3, r3, r0
 8000efa:	0018      	movs	r0, r3
 8000efc:	f7ff f904 	bl	8000108 <strlen>
 8000f00:	0003      	movs	r3, r0
 8000f02:	001a      	movs	r2, r3
 8000f04:	0020      	movs	r0, r4
 8000f06:	2320      	movs	r3, #32
 8000f08:	18fb      	adds	r3, r7, r3
 8000f0a:	181b      	adds	r3, r3, r0
 8000f0c:	0019      	movs	r1, r3
 8000f0e:	0030      	movs	r0, r6
 8000f10:	f000 fbb1 	bl	8001676 <pushStr>
	}

	if(flags.meas.measComplete)
 8000f14:	4b5f      	ldr	r3, [pc, #380]	; (8001094 <comHandler+0x264>)
 8000f16:	7d1b      	ldrb	r3, [r3, #20]
 8000f18:	2202      	movs	r2, #2
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d042      	beq.n	8000fa8 <comHandler+0x178>
	{
		char txt[] = {"Measure\n"};
 8000f22:	2130      	movs	r1, #48	; 0x30
 8000f24:	2320      	movs	r3, #32
 8000f26:	18fb      	adds	r3, r7, r3
 8000f28:	185b      	adds	r3, r3, r1
 8000f2a:	4a5e      	ldr	r2, [pc, #376]	; (80010a4 <comHandler+0x274>)
 8000f2c:	ca11      	ldmia	r2!, {r0, r4}
 8000f2e:	c311      	stmia	r3!, {r0, r4}
 8000f30:	7812      	ldrb	r2, [r2, #0]
 8000f32:	701a      	strb	r2, [r3, #0]
		pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000f34:	4b5a      	ldr	r3, [pc, #360]	; (80010a0 <comHandler+0x270>)
 8000f36:	681e      	ldr	r6, [r3, #0]
 8000f38:	000c      	movs	r4, r1
 8000f3a:	2320      	movs	r3, #32
 8000f3c:	18fb      	adds	r3, r7, r3
 8000f3e:	185b      	adds	r3, r3, r1
 8000f40:	0018      	movs	r0, r3
 8000f42:	f7ff f8e1 	bl	8000108 <strlen>
 8000f46:	0003      	movs	r3, r0
 8000f48:	001a      	movs	r2, r3
 8000f4a:	0021      	movs	r1, r4
 8000f4c:	2320      	movs	r3, #32
 8000f4e:	18fb      	adds	r3, r7, r3
 8000f50:	185b      	adds	r3, r3, r1
 8000f52:	0019      	movs	r1, r3
 8000f54:	0030      	movs	r0, r6
 8000f56:	f000 fb8e 	bl	8001676 <pushStr>

		uint8_t measResult[32];
		for(int i = 0; i < 16; i++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8000f5e:	e018      	b.n	8000f92 <comHandler+0x162>
		{
			measResult[2*i] = ADC_Results[i] & 0x00FF;
 8000f60:	4b51      	ldr	r3, [pc, #324]	; (80010a8 <comHandler+0x278>)
 8000f62:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000f64:	0092      	lsls	r2, r2, #2
 8000f66:	58d2      	ldr	r2, [r2, r3]
 8000f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	b2d1      	uxtb	r1, r2
 8000f6e:	2220      	movs	r2, #32
 8000f70:	18ba      	adds	r2, r7, r2
 8000f72:	54d1      	strb	r1, [r2, r3]
			measResult[2*i + 1] = (ADC_Results[i] & 0xFF00) >> 8;
 8000f74:	4b4c      	ldr	r3, [pc, #304]	; (80010a8 <comHandler+0x278>)
 8000f76:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000f78:	0092      	lsls	r2, r2, #2
 8000f7a:	58d3      	ldr	r3, [r2, r3]
 8000f7c:	0a1a      	lsrs	r2, r3, #8
 8000f7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	3301      	adds	r3, #1
 8000f84:	b2d1      	uxtb	r1, r2
 8000f86:	2220      	movs	r2, #32
 8000f88:	18ba      	adds	r2, r7, r2
 8000f8a:	54d1      	strb	r1, [r2, r3]
		for(int i = 0; i < 16; i++)
 8000f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f8e:	3301      	adds	r3, #1
 8000f90:	67bb      	str	r3, [r7, #120]	; 0x78
 8000f92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f94:	2b0f      	cmp	r3, #15
 8000f96:	dde3      	ble.n	8000f60 <comHandler+0x130>
		}
		pushStr(USB_Tx_Buffer, measResult, 32);
 8000f98:	4b41      	ldr	r3, [pc, #260]	; (80010a0 <comHandler+0x270>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2220      	movs	r2, #32
 8000f9e:	18b9      	adds	r1, r7, r2
 8000fa0:	2220      	movs	r2, #32
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f000 fb67 	bl	8001676 <pushStr>
	}

	//___Odesílání dat___//
	//_Ošetření plného bufferu_//
	if(USB_Tx_Buffer->status == BUFFER_FULL)
 8000fa8:	4b3d      	ldr	r3, [pc, #244]	; (80010a0 <comHandler+0x270>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	7d1b      	ldrb	r3, [r3, #20]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d118      	bne.n	8000fe4 <comHandler+0x1b4>
	{
		char msg[] = {"Buffer full\n"};
 8000fb2:	2120      	movs	r1, #32
 8000fb4:	2320      	movs	r3, #32
 8000fb6:	18fb      	adds	r3, r7, r3
 8000fb8:	185b      	adds	r3, r3, r1
 8000fba:	4a3c      	ldr	r2, [pc, #240]	; (80010ac <comHandler+0x27c>)
 8000fbc:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000fbe:	c331      	stmia	r3!, {r0, r4, r5}
 8000fc0:	7812      	ldrb	r2, [r2, #0]
 8000fc2:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(msg, strlen(msg));
 8000fc4:	000e      	movs	r6, r1
 8000fc6:	2320      	movs	r3, #32
 8000fc8:	18fb      	adds	r3, r7, r3
 8000fca:	185b      	adds	r3, r3, r1
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f7ff f89b 	bl	8000108 <strlen>
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	2320      	movs	r3, #32
 8000fd8:	18fb      	adds	r3, r7, r3
 8000fda:	199b      	adds	r3, r3, r6
 8000fdc:	0011      	movs	r1, r2
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f00a fec4 	bl	800bd6c <CDC_Transmit_FS>
	}
	//_Samotné odesílání_//
	if(USB_Tx_Buffer->filled)
 8000fe4:	4b2e      	ldr	r3, [pc, #184]	; (80010a0 <comHandler+0x270>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d04e      	beq.n	800108c <comHandler+0x25c>
	{
 8000fee:	466b      	mov	r3, sp
 8000ff0:	001e      	movs	r6, r3
		int size = USB_Tx_Buffer->filled;
 8000ff2:	4b2b      	ldr	r3, [pc, #172]	; (80010a0 <comHandler+0x270>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	677b      	str	r3, [r7, #116]	; 0x74
		char tmpStr[size+1];
 8000ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	1e5a      	subs	r2, r3, #1
 8001000:	673a      	str	r2, [r7, #112]	; 0x70
 8001002:	001a      	movs	r2, r3
 8001004:	60ba      	str	r2, [r7, #8]
 8001006:	2200      	movs	r2, #0
 8001008:	60fa      	str	r2, [r7, #12]
 800100a:	68b8      	ldr	r0, [r7, #8]
 800100c:	68f9      	ldr	r1, [r7, #12]
 800100e:	0002      	movs	r2, r0
 8001010:	0f52      	lsrs	r2, r2, #29
 8001012:	000c      	movs	r4, r1
 8001014:	00e4      	lsls	r4, r4, #3
 8001016:	61fc      	str	r4, [r7, #28]
 8001018:	69fc      	ldr	r4, [r7, #28]
 800101a:	4314      	orrs	r4, r2
 800101c:	61fc      	str	r4, [r7, #28]
 800101e:	0002      	movs	r2, r0
 8001020:	00d2      	lsls	r2, r2, #3
 8001022:	61ba      	str	r2, [r7, #24]
 8001024:	001a      	movs	r2, r3
 8001026:	603a      	str	r2, [r7, #0]
 8001028:	2200      	movs	r2, #0
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	6838      	ldr	r0, [r7, #0]
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	0002      	movs	r2, r0
 8001032:	0f52      	lsrs	r2, r2, #29
 8001034:	000c      	movs	r4, r1
 8001036:	00e4      	lsls	r4, r4, #3
 8001038:	617c      	str	r4, [r7, #20]
 800103a:	697c      	ldr	r4, [r7, #20]
 800103c:	4314      	orrs	r4, r2
 800103e:	617c      	str	r4, [r7, #20]
 8001040:	0002      	movs	r2, r0
 8001042:	00d2      	lsls	r2, r2, #3
 8001044:	613a      	str	r2, [r7, #16]
 8001046:	3307      	adds	r3, #7
 8001048:	08db      	lsrs	r3, r3, #3
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	466a      	mov	r2, sp
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	469d      	mov	sp, r3
 8001052:	466b      	mov	r3, sp
 8001054:	3300      	adds	r3, #0
 8001056:	66fb      	str	r3, [r7, #108]	; 0x6c
		for(int i = 0; i < size; i++)
 8001058:	2300      	movs	r3, #0
 800105a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800105c:	e00a      	b.n	8001074 <comHandler+0x244>
		{
			pop(USB_Tx_Buffer, &tmpStr[i]);
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <comHandler+0x270>)
 8001060:	6818      	ldr	r0, [r3, #0]
 8001062:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001064:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001066:	18d3      	adds	r3, r2, r3
 8001068:	0019      	movs	r1, r3
 800106a:	f000 fb2c 	bl	80016c6 <pop>
		for(int i = 0; i < size; i++)
 800106e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001070:	3301      	adds	r3, #1
 8001072:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001074:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001076:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001078:	429a      	cmp	r2, r3
 800107a:	dbf0      	blt.n	800105e <comHandler+0x22e>
		}
		CDC_Transmit_FS(tmpStr, size);
 800107c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800107e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001080:	b292      	uxth	r2, r2
 8001082:	0011      	movs	r1, r2
 8001084:	0018      	movs	r0, r3
 8001086:	f00a fe71 	bl	800bd6c <CDC_Transmit_FS>
 800108a:	46b5      	mov	sp, r6
	}

}
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	b021      	add	sp, #132	; 0x84
 8001092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001094:	20000618 	.word	0x20000618
 8001098:	20001164 	.word	0x20001164
 800109c:	0800cfd4 	.word	0x0800cfd4
 80010a0:	20000568 	.word	0x20000568
 80010a4:	0800cfe4 	.word	0x0800cfe4
 80010a8:	200001fc 	.word	0x200001fc
 80010ac:	0800cff0 	.word	0x0800cff0

080010b0 <UI_Handler>:

//_____Obsluha piezo + podsvícení displeje_____//
void UI_Handler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
		DONE,
	}UI_State;

	static uint32_t startTime;

	if(flags.ui.error && (UI_State != ERROR))
 80010b4:	4b95      	ldr	r3, [pc, #596]	; (800130c <UI_Handler+0x25c>)
 80010b6:	7c1b      	ldrb	r3, [r3, #16]
 80010b8:	2204      	movs	r2, #4
 80010ba:	4013      	ands	r3, r2
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00b      	beq.n	80010da <UI_Handler+0x2a>
 80010c2:	4b93      	ldr	r3, [pc, #588]	; (8001310 <UI_Handler+0x260>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d007      	beq.n	80010da <UI_Handler+0x2a>
	{
		UI_State = ERROR;
 80010ca:	4b91      	ldr	r3, [pc, #580]	; (8001310 <UI_Handler+0x260>)
 80010cc:	2203      	movs	r2, #3
 80010ce:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80010d0:	4b90      	ldr	r3, [pc, #576]	; (8001314 <UI_Handler+0x264>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b90      	ldr	r3, [pc, #576]	; (8001318 <UI_Handler+0x268>)
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	e05e      	b.n	8001198 <UI_Handler+0xe8>
	}
	else if(flags.ui.notice && (UI_State == OFF))
 80010da:	4b8c      	ldr	r3, [pc, #560]	; (800130c <UI_Handler+0x25c>)
 80010dc:	7c1b      	ldrb	r3, [r3, #16]
 80010de:	2208      	movs	r2, #8
 80010e0:	4013      	ands	r3, r2
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d010      	beq.n	800110a <UI_Handler+0x5a>
 80010e8:	4b89      	ldr	r3, [pc, #548]	; (8001310 <UI_Handler+0x260>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10c      	bne.n	800110a <UI_Handler+0x5a>
	{
		UI_State = NOTICE;
 80010f0:	4b87      	ldr	r3, [pc, #540]	; (8001310 <UI_Handler+0x260>)
 80010f2:	2204      	movs	r2, #4
 80010f4:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80010f6:	4b87      	ldr	r3, [pc, #540]	; (8001314 <UI_Handler+0x264>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	4b87      	ldr	r3, [pc, #540]	; (8001318 <UI_Handler+0x268>)
 80010fc:	601a      	str	r2, [r3, #0]
		flags.ui.notice = 0;
 80010fe:	4b83      	ldr	r3, [pc, #524]	; (800130c <UI_Handler+0x25c>)
 8001100:	7c1a      	ldrb	r2, [r3, #16]
 8001102:	2108      	movs	r1, #8
 8001104:	438a      	bics	r2, r1
 8001106:	741a      	strb	r2, [r3, #16]
 8001108:	e046      	b.n	8001198 <UI_Handler+0xe8>
	}
	else if(flags.ui.done && (UI_State == OFF))
 800110a:	4b80      	ldr	r3, [pc, #512]	; (800130c <UI_Handler+0x25c>)
 800110c:	7c1b      	ldrb	r3, [r3, #16]
 800110e:	2210      	movs	r2, #16
 8001110:	4013      	ands	r3, r2
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d010      	beq.n	800113a <UI_Handler+0x8a>
 8001118:	4b7d      	ldr	r3, [pc, #500]	; (8001310 <UI_Handler+0x260>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10c      	bne.n	800113a <UI_Handler+0x8a>
	{
		UI_State = DONE;
 8001120:	4b7b      	ldr	r3, [pc, #492]	; (8001310 <UI_Handler+0x260>)
 8001122:	2205      	movs	r2, #5
 8001124:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001126:	4b7b      	ldr	r3, [pc, #492]	; (8001314 <UI_Handler+0x264>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	4b7b      	ldr	r3, [pc, #492]	; (8001318 <UI_Handler+0x268>)
 800112c:	601a      	str	r2, [r3, #0]
		flags.ui.done = 0;
 800112e:	4b77      	ldr	r3, [pc, #476]	; (800130c <UI_Handler+0x25c>)
 8001130:	7c1a      	ldrb	r2, [r3, #16]
 8001132:	2110      	movs	r1, #16
 8001134:	438a      	bics	r2, r1
 8001136:	741a      	strb	r2, [r3, #16]
 8001138:	e02e      	b.n	8001198 <UI_Handler+0xe8>
	}
	else if(flags.ui.longBeep && (UI_State == OFF))
 800113a:	4b74      	ldr	r3, [pc, #464]	; (800130c <UI_Handler+0x25c>)
 800113c:	7c1b      	ldrb	r3, [r3, #16]
 800113e:	2202      	movs	r2, #2
 8001140:	4013      	ands	r3, r2
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	d010      	beq.n	800116a <UI_Handler+0xba>
 8001148:	4b71      	ldr	r3, [pc, #452]	; (8001310 <UI_Handler+0x260>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d10c      	bne.n	800116a <UI_Handler+0xba>
	{
		UI_State = LONG_BEEP;
 8001150:	4b6f      	ldr	r3, [pc, #444]	; (8001310 <UI_Handler+0x260>)
 8001152:	2202      	movs	r2, #2
 8001154:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001156:	4b6f      	ldr	r3, [pc, #444]	; (8001314 <UI_Handler+0x264>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4b6f      	ldr	r3, [pc, #444]	; (8001318 <UI_Handler+0x268>)
 800115c:	601a      	str	r2, [r3, #0]
		flags.ui.longBeep = 0;
 800115e:	4b6b      	ldr	r3, [pc, #428]	; (800130c <UI_Handler+0x25c>)
 8001160:	7c1a      	ldrb	r2, [r3, #16]
 8001162:	2102      	movs	r1, #2
 8001164:	438a      	bics	r2, r1
 8001166:	741a      	strb	r2, [r3, #16]
 8001168:	e016      	b.n	8001198 <UI_Handler+0xe8>
	}
	else if(flags.ui.shortBeep && (UI_State == OFF))
 800116a:	4b68      	ldr	r3, [pc, #416]	; (800130c <UI_Handler+0x25c>)
 800116c:	7c1b      	ldrb	r3, [r3, #16]
 800116e:	2201      	movs	r2, #1
 8001170:	4013      	ands	r3, r2
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d00f      	beq.n	8001198 <UI_Handler+0xe8>
 8001178:	4b65      	ldr	r3, [pc, #404]	; (8001310 <UI_Handler+0x260>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10b      	bne.n	8001198 <UI_Handler+0xe8>
	{
		UI_State = SHORT_BEEP;
 8001180:	4b63      	ldr	r3, [pc, #396]	; (8001310 <UI_Handler+0x260>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001186:	4b63      	ldr	r3, [pc, #396]	; (8001314 <UI_Handler+0x264>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4b63      	ldr	r3, [pc, #396]	; (8001318 <UI_Handler+0x268>)
 800118c:	601a      	str	r2, [r3, #0]
		flags.ui.shortBeep = 0;
 800118e:	4b5f      	ldr	r3, [pc, #380]	; (800130c <UI_Handler+0x25c>)
 8001190:	7c1a      	ldrb	r2, [r3, #16]
 8001192:	2101      	movs	r1, #1
 8001194:	438a      	bics	r2, r1
 8001196:	741a      	strb	r2, [r3, #16]
	}

	switch(UI_State)
 8001198:	4b5d      	ldr	r3, [pc, #372]	; (8001310 <UI_Handler+0x260>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b05      	cmp	r3, #5
 800119e:	d900      	bls.n	80011a2 <UI_Handler+0xf2>
 80011a0:	e0a0      	b.n	80012e4 <UI_Handler+0x234>
 80011a2:	009a      	lsls	r2, r3, #2
 80011a4:	4b5d      	ldr	r3, [pc, #372]	; (800131c <UI_Handler+0x26c>)
 80011a6:	18d3      	adds	r3, r2, r3
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	469f      	mov	pc, r3
	{
	case SHORT_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
 80011ac:	2380      	movs	r3, #128	; 0x80
 80011ae:	015b      	lsls	r3, r3, #5
 80011b0:	485b      	ldr	r0, [pc, #364]	; (8001320 <UI_Handler+0x270>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	0019      	movs	r1, r3
 80011b6:	f002 f95a 	bl	800346e <HAL_GPIO_WritePin>
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 50)
 80011ba:	4b56      	ldr	r3, [pc, #344]	; (8001314 <UI_Handler+0x264>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4b56      	ldr	r3, [pc, #344]	; (8001318 <UI_Handler+0x268>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b31      	cmp	r3, #49	; 0x31
 80011c6:	d800      	bhi.n	80011ca <UI_Handler+0x11a>
 80011c8:	e094      	b.n	80012f4 <UI_Handler+0x244>
		{
			UI_State = OFF;
 80011ca:	4b51      	ldr	r3, [pc, #324]	; (8001310 <UI_Handler+0x260>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	015b      	lsls	r3, r3, #5
 80011d4:	4852      	ldr	r0, [pc, #328]	; (8001320 <UI_Handler+0x270>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	0019      	movs	r1, r3
 80011da:	f002 f948 	bl	800346e <HAL_GPIO_WritePin>
		}
		break;
 80011de:	e089      	b.n	80012f4 <UI_Handler+0x244>

	case LONG_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	015b      	lsls	r3, r3, #5
 80011e4:	484e      	ldr	r0, [pc, #312]	; (8001320 <UI_Handler+0x270>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	0019      	movs	r1, r3
 80011ea:	f002 f940 	bl	800346e <HAL_GPIO_WritePin>
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 100)
 80011ee:	4b49      	ldr	r3, [pc, #292]	; (8001314 <UI_Handler+0x264>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b49      	ldr	r3, [pc, #292]	; (8001318 <UI_Handler+0x268>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b63      	cmp	r3, #99	; 0x63
 80011fa:	d800      	bhi.n	80011fe <UI_Handler+0x14e>
 80011fc:	e07c      	b.n	80012f8 <UI_Handler+0x248>
		{
			UI_State = OFF;
 80011fe:	4b44      	ldr	r3, [pc, #272]	; (8001310 <UI_Handler+0x260>)
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	015b      	lsls	r3, r3, #5
 8001208:	4845      	ldr	r0, [pc, #276]	; (8001320 <UI_Handler+0x270>)
 800120a:	2200      	movs	r2, #0
 800120c:	0019      	movs	r1, r3
 800120e:	f002 f92e 	bl	800346e <HAL_GPIO_WritePin>
		}
		break;
 8001212:	e071      	b.n	80012f8 <UI_Handler+0x248>

	case ERROR:
		if(!flags.ui.error)
 8001214:	4b3d      	ldr	r3, [pc, #244]	; (800130c <UI_Handler+0x25c>)
 8001216:	7c1b      	ldrb	r3, [r3, #16]
 8001218:	2204      	movs	r2, #4
 800121a:	4013      	ands	r3, r2
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d102      	bne.n	8001228 <UI_Handler+0x178>
			UI_State = OFF;
 8001222:	4b3b      	ldr	r3, [pc, #236]	; (8001310 <UI_Handler+0x260>)
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))
 8001228:	4b3a      	ldr	r3, [pc, #232]	; (8001314 <UI_Handler+0x264>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b3a      	ldr	r3, [pc, #232]	; (8001318 <UI_Handler+0x268>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	2132      	movs	r1, #50	; 0x32
 8001234:	0018      	movs	r0, r3
 8001236:	f7fe ffff 	bl	8000238 <__aeabi_uidivmod>
 800123a:	1e0b      	subs	r3, r1, #0
 800123c:	d15e      	bne.n	80012fc <UI_Handler+0x24c>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	015b      	lsls	r3, r3, #5
 8001242:	4a37      	ldr	r2, [pc, #220]	; (8001320 <UI_Handler+0x270>)
 8001244:	0019      	movs	r1, r3
 8001246:	0010      	movs	r0, r2
 8001248:	f002 f92e 	bl	80034a8 <HAL_GPIO_TogglePin>
#endif
			BACKLIGHT_RED_Toggle;
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	021a      	lsls	r2, r3, #8
 8001250:	2390      	movs	r3, #144	; 0x90
 8001252:	05db      	lsls	r3, r3, #23
 8001254:	0011      	movs	r1, r2
 8001256:	0018      	movs	r0, r3
 8001258:	f002 f926 	bl	80034a8 <HAL_GPIO_TogglePin>
		}
		break;
 800125c:	e04e      	b.n	80012fc <UI_Handler+0x24c>

	case NOTICE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 35))
 800125e:	4b2d      	ldr	r3, [pc, #180]	; (8001314 <UI_Handler+0x264>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <UI_Handler+0x268>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2123      	movs	r1, #35	; 0x23
 800126a:	0018      	movs	r0, r3
 800126c:	f7fe ffe4 	bl	8000238 <__aeabi_uidivmod>
 8001270:	1e0b      	subs	r3, r1, #0
 8001272:	d106      	bne.n	8001282 <UI_Handler+0x1d2>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 8001274:	2380      	movs	r3, #128	; 0x80
 8001276:	015b      	lsls	r3, r3, #5
 8001278:	4a29      	ldr	r2, [pc, #164]	; (8001320 <UI_Handler+0x270>)
 800127a:	0019      	movs	r1, r3
 800127c:	0010      	movs	r0, r2
 800127e:	f002 f913 	bl	80034a8 <HAL_GPIO_TogglePin>
#endif
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 209)
 8001282:	4b24      	ldr	r3, [pc, #144]	; (8001314 <UI_Handler+0x264>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4b24      	ldr	r3, [pc, #144]	; (8001318 <UI_Handler+0x268>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2bd0      	cmp	r3, #208	; 0xd0
 800128e:	d937      	bls.n	8001300 <UI_Handler+0x250>
			UI_State = OFF;
 8001290:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <UI_Handler+0x260>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
		break;
 8001296:	e033      	b.n	8001300 <UI_Handler+0x250>

	case DONE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))
 8001298:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <UI_Handler+0x264>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <UI_Handler+0x268>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	2132      	movs	r1, #50	; 0x32
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7fe ffc7 	bl	8000238 <__aeabi_uidivmod>
 80012aa:	1e0b      	subs	r3, r1, #0
 80012ac:	d10d      	bne.n	80012ca <UI_Handler+0x21a>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 80012ae:	2380      	movs	r3, #128	; 0x80
 80012b0:	015b      	lsls	r3, r3, #5
 80012b2:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <UI_Handler+0x270>)
 80012b4:	0019      	movs	r1, r3
 80012b6:	0010      	movs	r0, r2
 80012b8:	f002 f8f6 	bl	80034a8 <HAL_GPIO_TogglePin>
#endif
			BACKLIGHT_GREEN_Toggle;
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4a18      	ldr	r2, [pc, #96]	; (8001324 <UI_Handler+0x274>)
 80012c2:	0019      	movs	r1, r3
 80012c4:	0010      	movs	r0, r2
 80012c6:	f002 f8ef 	bl	80034a8 <HAL_GPIO_TogglePin>
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 299)
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <UI_Handler+0x264>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <UI_Handler+0x268>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	1ad2      	subs	r2, r2, r3
 80012d4:	2395      	movs	r3, #149	; 0x95
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	429a      	cmp	r2, r3
 80012da:	d913      	bls.n	8001304 <UI_Handler+0x254>
			UI_State = OFF;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <UI_Handler+0x260>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
		break;
 80012e2:	e00f      	b.n	8001304 <UI_Handler+0x254>

	default:	//Ošetřuje i UI_State == OFF
		BUZZER_OFF;
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	015b      	lsls	r3, r3, #5
 80012e8:	480d      	ldr	r0, [pc, #52]	; (8001320 <UI_Handler+0x270>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	0019      	movs	r1, r3
 80012ee:	f002 f8be 	bl	800346e <HAL_GPIO_WritePin>
#ifndef __DEBUG_BUTT__
		setColour(BACKLIGHT_OFF);
#endif
		break;
 80012f2:	e008      	b.n	8001306 <UI_Handler+0x256>
		break;
 80012f4:	46c0      	nop			; (mov r8, r8)
 80012f6:	e006      	b.n	8001306 <UI_Handler+0x256>
		break;
 80012f8:	46c0      	nop			; (mov r8, r8)
 80012fa:	e004      	b.n	8001306 <UI_Handler+0x256>
		break;
 80012fc:	46c0      	nop			; (mov r8, r8)
 80012fe:	e002      	b.n	8001306 <UI_Handler+0x256>
		break;
 8001300:	46c0      	nop			; (mov r8, r8)
 8001302:	e000      	b.n	8001306 <UI_Handler+0x256>
		break;
 8001304:	46c0      	nop			; (mov r8, r8)

	}
}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20000618 	.word	0x20000618
 8001310:	2000024e 	.word	0x2000024e
 8001314:	2000023c 	.word	0x2000023c
 8001318:	20000250 	.word	0x20000250
 800131c:	0800d090 	.word	0x0800d090
 8001320:	48000800 	.word	0x48000800
 8001324:	48000400 	.word	0x48000400

08001328 <measHandler>:

//_____Osluha AD převodníků_____//
void measHandler(void)
{
 8001328:	b5b0      	push	{r4, r5, r7, lr}
 800132a:	af00      	add	r7, sp, #0
		U_BAT,					//kanál 6
		PAD9, PAD15,			//kanál 4, 13
		U48V_CURRENT			//kanál 3
	}ADC_State;

	flags.meas.measComplete = 0;
 800132c:	4b6d      	ldr	r3, [pc, #436]	; (80014e4 <measHandler+0x1bc>)
 800132e:	7d1a      	ldrb	r2, [r3, #20]
 8001330:	2102      	movs	r1, #2
 8001332:	438a      	bics	r2, r1
 8001334:	751a      	strb	r2, [r3, #20]
	flags.meas.measConflict = 0;
 8001336:	4b6b      	ldr	r3, [pc, #428]	; (80014e4 <measHandler+0x1bc>)
 8001338:	7d1a      	ldrb	r2, [r3, #20]
 800133a:	2110      	movs	r1, #16
 800133c:	438a      	bics	r2, r1
 800133e:	751a      	strb	r2, [r3, #20]

	if(flags.meas.measRequest)
 8001340:	4b68      	ldr	r3, [pc, #416]	; (80014e4 <measHandler+0x1bc>)
 8001342:	7d1b      	ldrb	r3, [r3, #20]
 8001344:	2201      	movs	r2, #1
 8001346:	4013      	ands	r3, r2
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d03b      	beq.n	80013c6 <measHandler+0x9e>
	{
		if(ADC_State == WAITING)
 800134e:	4b66      	ldr	r3, [pc, #408]	; (80014e8 <measHandler+0x1c0>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d12d      	bne.n	80013b2 <measHandler+0x8a>
		{
			flags.meas.measRunning = 1;
 8001356:	4b63      	ldr	r3, [pc, #396]	; (80014e4 <measHandler+0x1bc>)
 8001358:	7d1a      	ldrb	r2, [r3, #20]
 800135a:	2108      	movs	r1, #8
 800135c:	430a      	orrs	r2, r1
 800135e:	751a      	strb	r2, [r3, #20]
			if(currentPhase() == BATTERY_TEST)	//probíhá battery test
 8001360:	f000 fcfc 	bl	8001d5c <currentPhase>
 8001364:	0003      	movs	r3, r0
 8001366:	2b05      	cmp	r3, #5
 8001368:	d111      	bne.n	800138e <measHandler+0x66>
			{
				flags.meas.onlyBattery = 1;
 800136a:	4b5e      	ldr	r3, [pc, #376]	; (80014e4 <measHandler+0x1bc>)
 800136c:	7d1a      	ldrb	r2, [r3, #20]
 800136e:	2120      	movs	r1, #32
 8001370:	430a      	orrs	r2, r1
 8001372:	751a      	strb	r2, [r3, #20]
				ADC_State = U_BAT;
 8001374:	4b5c      	ldr	r3, [pc, #368]	; (80014e8 <measHandler+0x1c0>)
 8001376:	220d      	movs	r2, #13
 8001378:	701a      	strb	r2, [r3, #0]
				changeChannel(ADC_CHANNEL_6);
 800137a:	2006      	movs	r0, #6
 800137c:	f000 f8be 	bl	80014fc <changeChannel>
				HAL_ADC_Start_DMA(&hadc, ADC_Buffer, 20);
 8001380:	495a      	ldr	r1, [pc, #360]	; (80014ec <measHandler+0x1c4>)
 8001382:	4b5b      	ldr	r3, [pc, #364]	; (80014f0 <measHandler+0x1c8>)
 8001384:	2214      	movs	r2, #20
 8001386:	0018      	movs	r0, r3
 8001388:	f001 f940 	bl	800260c <HAL_ADC_Start_DMA>
 800138c:	e016      	b.n	80013bc <measHandler+0x94>
			}
			else
			{
				flags.meas.onlyBattery = 0;
 800138e:	4b55      	ldr	r3, [pc, #340]	; (80014e4 <measHandler+0x1bc>)
 8001390:	7d1a      	ldrb	r2, [r3, #20]
 8001392:	2120      	movs	r1, #32
 8001394:	438a      	bics	r2, r1
 8001396:	751a      	strb	r2, [r3, #20]
				ADC_State = U15V;
 8001398:	4b53      	ldr	r3, [pc, #332]	; (80014e8 <measHandler+0x1c0>)
 800139a:	2201      	movs	r2, #1
 800139c:	701a      	strb	r2, [r3, #0]
				changeChannel(ADC_CHANNEL_7);
 800139e:	2007      	movs	r0, #7
 80013a0:	f000 f8ac 	bl	80014fc <changeChannel>
				HAL_ADC_Start_DMA(&hadc, ADC_Buffer, 20);
 80013a4:	4951      	ldr	r1, [pc, #324]	; (80014ec <measHandler+0x1c4>)
 80013a6:	4b52      	ldr	r3, [pc, #328]	; (80014f0 <measHandler+0x1c8>)
 80013a8:	2214      	movs	r2, #20
 80013aa:	0018      	movs	r0, r3
 80013ac:	f001 f92e 	bl	800260c <HAL_ADC_Start_DMA>
 80013b0:	e004      	b.n	80013bc <measHandler+0x94>
			}
		}
		else
		{
			flags.meas.measConflict = 1;
 80013b2:	4b4c      	ldr	r3, [pc, #304]	; (80014e4 <measHandler+0x1bc>)
 80013b4:	7d1a      	ldrb	r2, [r3, #20]
 80013b6:	2110      	movs	r1, #16
 80013b8:	430a      	orrs	r2, r1
 80013ba:	751a      	strb	r2, [r3, #20]
		}
		flags.meas.measRequest = 0;
 80013bc:	4b49      	ldr	r3, [pc, #292]	; (80014e4 <measHandler+0x1bc>)
 80013be:	7d1a      	ldrb	r2, [r3, #20]
 80013c0:	2101      	movs	r1, #1
 80013c2:	438a      	bics	r2, r1
 80013c4:	751a      	strb	r2, [r3, #20]
	}

	if(ADC_State != WAITING)
 80013c6:	4b48      	ldr	r3, [pc, #288]	; (80014e8 <measHandler+0x1c0>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d100      	bne.n	80013d0 <measHandler+0xa8>
 80013ce:	e086      	b.n	80014de <measHandler+0x1b6>
	{
		if(flags.meas.measDataReady)
 80013d0:	4b44      	ldr	r3, [pc, #272]	; (80014e4 <measHandler+0x1bc>)
 80013d2:	7d1b      	ldrb	r3, [r3, #20]
 80013d4:	2204      	movs	r2, #4
 80013d6:	4013      	ands	r3, r2
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d100      	bne.n	80013e0 <measHandler+0xb8>
 80013de:	e07e      	b.n	80014de <measHandler+0x1b6>
		{
			flags.meas.measDataReady = 0;
 80013e0:	4b40      	ldr	r3, [pc, #256]	; (80014e4 <measHandler+0x1bc>)
 80013e2:	7d1a      	ldrb	r2, [r3, #20]
 80013e4:	2104      	movs	r1, #4
 80013e6:	438a      	bics	r2, r1
 80013e8:	751a      	strb	r2, [r3, #20]

			if(ADC_State == U_BAT)	//U_BAT je vždy měřeno jako poslední
 80013ea:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <measHandler+0x1c0>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b0d      	cmp	r3, #13
 80013f0:	d116      	bne.n	8001420 <measHandler+0xf8>
			{
				ADC_Results[ADC_State-1] = ADC_dataProcessing();
 80013f2:	4b3d      	ldr	r3, [pc, #244]	; (80014e8 <measHandler+0x1c0>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	1e5c      	subs	r4, r3, #1
 80013f8:	f000 f8a8 	bl	800154c <ADC_dataProcessing>
 80013fc:	0001      	movs	r1, r0
 80013fe:	4b3d      	ldr	r3, [pc, #244]	; (80014f4 <measHandler+0x1cc>)
 8001400:	00a2      	lsls	r2, r4, #2
 8001402:	50d1      	str	r1, [r2, r3]
				flags.meas.measComplete = 1;
 8001404:	4b37      	ldr	r3, [pc, #220]	; (80014e4 <measHandler+0x1bc>)
 8001406:	7d1a      	ldrb	r2, [r3, #20]
 8001408:	2102      	movs	r1, #2
 800140a:	430a      	orrs	r2, r1
 800140c:	751a      	strb	r2, [r3, #20]
				flags.meas.measRunning = 0;
 800140e:	4b35      	ldr	r3, [pc, #212]	; (80014e4 <measHandler+0x1bc>)
 8001410:	7d1a      	ldrb	r2, [r3, #20]
 8001412:	2108      	movs	r1, #8
 8001414:	438a      	bics	r2, r1
 8001416:	751a      	strb	r2, [r3, #20]
				ADC_State = WAITING;
 8001418:	4b33      	ldr	r3, [pc, #204]	; (80014e8 <measHandler+0x1c0>)
 800141a:	2200      	movs	r2, #0
 800141c:	701a      	strb	r2, [r3, #0]

				HAL_ADC_Start_DMA(&hadc, ADC_Buffer, 20);
			}
		}
	}
}
 800141e:	e05e      	b.n	80014de <measHandler+0x1b6>
				ADC_Results[ADC_State-1] = ADC_dataProcessing();
 8001420:	4b31      	ldr	r3, [pc, #196]	; (80014e8 <measHandler+0x1c0>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	1e5c      	subs	r4, r3, #1
 8001426:	f000 f891 	bl	800154c <ADC_dataProcessing>
 800142a:	0001      	movs	r1, r0
 800142c:	4b31      	ldr	r3, [pc, #196]	; (80014f4 <measHandler+0x1cc>)
 800142e:	00a2      	lsls	r2, r4, #2
 8001430:	50d1      	str	r1, [r2, r3]
				ADC_State += 2;
 8001432:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <measHandler+0x1c0>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	3302      	adds	r3, #2
 8001438:	b2da      	uxtb	r2, r3
 800143a:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <measHandler+0x1c0>)
 800143c:	701a      	strb	r2, [r3, #0]
				switch(ADC_State)
 800143e:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <measHandler+0x1c0>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b10      	cmp	r3, #16
 8001444:	d844      	bhi.n	80014d0 <measHandler+0x1a8>
 8001446:	009a      	lsls	r2, r3, #2
 8001448:	4b2b      	ldr	r3, [pc, #172]	; (80014f8 <measHandler+0x1d0>)
 800144a:	18d3      	adds	r3, r2, r3
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	469f      	mov	pc, r3
					changeChannel(ADC_CHANNEL_7);
 8001450:	2007      	movs	r0, #7
 8001452:	f000 f853 	bl	80014fc <changeChannel>
					break;
 8001456:	e03c      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_10);
 8001458:	200a      	movs	r0, #10
 800145a:	f000 f84f 	bl	80014fc <changeChannel>
					break;
 800145e:	e038      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_14);
 8001460:	200e      	movs	r0, #14
 8001462:	f000 f84b 	bl	80014fc <changeChannel>
					break;
 8001466:	e034      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_12);
 8001468:	200c      	movs	r0, #12
 800146a:	f000 f847 	bl	80014fc <changeChannel>
					break;
 800146e:	e030      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_5);
 8001470:	2005      	movs	r0, #5
 8001472:	f000 f843 	bl	80014fc <changeChannel>
					break;
 8001476:	e02c      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_11);
 8001478:	200b      	movs	r0, #11
 800147a:	f000 f83f 	bl	80014fc <changeChannel>
					break;
 800147e:	e028      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_9);
 8001480:	2009      	movs	r0, #9
 8001482:	f000 f83b 	bl	80014fc <changeChannel>
					break;
 8001486:	e024      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_2);
 8001488:	2002      	movs	r0, #2
 800148a:	f000 f837 	bl	80014fc <changeChannel>
					break;
 800148e:	e020      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_15);
 8001490:	200f      	movs	r0, #15
 8001492:	f000 f833 	bl	80014fc <changeChannel>
					break;
 8001496:	e01c      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_0);
 8001498:	2000      	movs	r0, #0
 800149a:	f000 f82f 	bl	80014fc <changeChannel>
					break;
 800149e:	e018      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_8);
 80014a0:	2008      	movs	r0, #8
 80014a2:	f000 f82b 	bl	80014fc <changeChannel>
					break;
 80014a6:	e014      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_1);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f000 f827 	bl	80014fc <changeChannel>
					break;
 80014ae:	e010      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_6);
 80014b0:	2006      	movs	r0, #6
 80014b2:	f000 f823 	bl	80014fc <changeChannel>
					break;
 80014b6:	e00c      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_4);
 80014b8:	2004      	movs	r0, #4
 80014ba:	f000 f81f 	bl	80014fc <changeChannel>
					break;
 80014be:	e008      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_13);
 80014c0:	200d      	movs	r0, #13
 80014c2:	f000 f81b 	bl	80014fc <changeChannel>
					break;
 80014c6:	e004      	b.n	80014d2 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_3);
 80014c8:	2003      	movs	r0, #3
 80014ca:	f000 f817 	bl	80014fc <changeChannel>
					break;
 80014ce:	e000      	b.n	80014d2 <measHandler+0x1aa>
					break;
 80014d0:	46c0      	nop			; (mov r8, r8)
				HAL_ADC_Start_DMA(&hadc, ADC_Buffer, 20);
 80014d2:	4906      	ldr	r1, [pc, #24]	; (80014ec <measHandler+0x1c4>)
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <measHandler+0x1c8>)
 80014d6:	2214      	movs	r2, #20
 80014d8:	0018      	movs	r0, r3
 80014da:	f001 f897 	bl	800260c <HAL_ADC_Start_DMA>
}
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bdb0      	pop	{r4, r5, r7, pc}
 80014e4:	20000618 	.word	0x20000618
 80014e8:	20000254 	.word	0x20000254
 80014ec:	20000494 	.word	0x20000494
 80014f0:	20000678 	.word	0x20000678
 80014f4:	200001fc 	.word	0x200001fc
 80014f8:	0800d0a8 	.word	0x0800d0a8

080014fc <changeChannel>:

//_____Změna lanálu ADC_____//
static void changeChannel(unsigned int channel)
{
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b087      	sub	sp, #28
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001504:	240c      	movs	r4, #12
 8001506:	193b      	adds	r3, r7, r4
 8001508:	0018      	movs	r0, r3
 800150a:	230c      	movs	r3, #12
 800150c:	001a      	movs	r2, r3
 800150e:	2100      	movs	r1, #0
 8001510:	f00b f926 	bl	800c760 <memset>
	sConfig.Channel = channel;
 8001514:	0021      	movs	r1, r4
 8001516:	187b      	adds	r3, r7, r1
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800151c:	187b      	adds	r3, r7, r1
 800151e:	2280      	movs	r2, #128	; 0x80
 8001520:	0152      	lsls	r2, r2, #5
 8001522:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001524:	187b      	adds	r3, r7, r1
 8001526:	2280      	movs	r2, #128	; 0x80
 8001528:	0552      	lsls	r2, r2, #21
 800152a:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800152c:	187a      	adds	r2, r7, r1
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <changeChannel+0x4c>)
 8001530:	0011      	movs	r1, r2
 8001532:	0018      	movs	r0, r3
 8001534:	f001 f8fc 	bl	8002730 <HAL_ADC_ConfigChannel>
 8001538:	1e03      	subs	r3, r0, #0
 800153a:	d001      	beq.n	8001540 <changeChannel+0x44>
	{
		Error_Handler();
 800153c:	f000 f82a 	bl	8001594 <Error_Handler>
	}
}
 8001540:	46c0      	nop			; (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	b007      	add	sp, #28
 8001546:	bd90      	pop	{r4, r7, pc}
 8001548:	20000678 	.word	0x20000678

0800154c <ADC_dataProcessing>:

//_____Zpracování naměřených dat_____//
static uint32_t ADC_dataProcessing()
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
	uint32_t mean = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 20; i++)
 8001556:	2300      	movs	r3, #0
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	e009      	b.n	8001570 <ADC_dataProcessing+0x24>
	{
		mean += ADC_Buffer[i];
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <ADC_dataProcessing+0x44>)
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	0092      	lsls	r2, r2, #2
 8001562:	58d3      	ldr	r3, [r2, r3]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	18d3      	adds	r3, r2, r3
 8001568:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 20; i++)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	3301      	adds	r3, #1
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	2b13      	cmp	r3, #19
 8001574:	ddf2      	ble.n	800155c <ADC_dataProcessing+0x10>
	}
	mean = mean/20;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2114      	movs	r1, #20
 800157a:	0018      	movs	r0, r3
 800157c:	f7fe fdd6 	bl	800012c <__udivsi3>
 8001580:	0003      	movs	r3, r0
 8001582:	607b      	str	r3, [r7, #4]

	return mean;
 8001584:	687b      	ldr	r3, [r7, #4]
}
 8001586:	0018      	movs	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	b002      	add	sp, #8
 800158c:	bd80      	pop	{r7, pc}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	20000494 	.word	0x20000494

08001594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001598:	b672      	cpsid	i
}
 800159a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800159c:	e7fe      	b.n	800159c <Error_Handler+0x8>

0800159e <createBuffer>:

//_____Vytvoří buffer v dynamické paměti_____//
//Návratová hodnota - ukazatel na vytvořený buffer (NULL = chyba)
//Argument - velikost bufferu
RING_BUFFER* createBuffer(int size)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b084      	sub	sp, #16
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
	RING_BUFFER* buffer = (RING_BUFFER*) malloc(sizeof(RING_BUFFER));
 80015a6:	2018      	movs	r0, #24
 80015a8:	f00b f8c6 	bl	800c738 <malloc>
 80015ac:	0003      	movs	r3, r0
 80015ae:	60fb      	str	r3, [r7, #12]
	if(buffer == NULL)			//Nepodařilo se alokovat paměť
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <createBuffer+0x1c>
	{
		return NULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e022      	b.n	8001600 <createBuffer+0x62>
	}
	buffer->buffer = (char*) malloc(size * sizeof(char));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	0018      	movs	r0, r3
 80015be:	f00b f8bb 	bl	800c738 <malloc>
 80015c2:	0003      	movs	r3, r0
 80015c4:	001a      	movs	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	601a      	str	r2, [r3, #0]
	if(buffer->buffer == NULL)	//Nepodařilo se alokovat paměť
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d105      	bne.n	80015de <createBuffer+0x40>
	{
		free(buffer);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	0018      	movs	r0, r3
 80015d6:	f00b f8b9 	bl	800c74c <free>
		return NULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	e010      	b.n	8001600 <createBuffer+0x62>
	}

	buffer->bufferSize = size;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	605a      	str	r2, [r3, #4]
	buffer->filled = 0;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
	buffer->first = 0;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2200      	movs	r2, #0
 80015ee:	60da      	str	r2, [r3, #12]
	buffer->last = size-1;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	1e5a      	subs	r2, r3, #1
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	611a      	str	r2, [r3, #16]
	buffer->status = BUFFER_EMPTY;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2201      	movs	r2, #1
 80015fc:	751a      	strb	r2, [r3, #20]

	return buffer;
 80015fe:	68fb      	ldr	r3, [r7, #12]
}
 8001600:	0018      	movs	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	b004      	add	sp, #16
 8001606:	bd80      	pop	{r7, pc}

08001608 <push>:
	return buffer->status;
}

//_____Uloží znak do bufferu_____//
BUFFER_STATE push(RING_BUFFER* buffer, char character)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	000a      	movs	r2, r1
 8001612:	1cfb      	adds	r3, r7, #3
 8001614:	701a      	strb	r2, [r3, #0]
	if(buffer->status == BUFFER_FULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	7d1b      	ldrb	r3, [r3, #20]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d101      	bne.n	8001622 <push+0x1a>
		return BUFFER_FULL;
 800161e:	2302      	movs	r3, #2
 8001620:	e025      	b.n	800166e <push+0x66>

	buffer->last = (buffer->last + 1) % (buffer->bufferSize);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	1c5a      	adds	r2, r3, #1
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	0019      	movs	r1, r3
 800162e:	0010      	movs	r0, r2
 8001630:	f7fe feec 	bl	800040c <__aeabi_idivmod>
 8001634:	000b      	movs	r3, r1
 8001636:	001a      	movs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	611a      	str	r2, [r3, #16]
	buffer->filled++;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	609a      	str	r2, [r3, #8]
	buffer->buffer[buffer->last] = character;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	18d3      	adds	r3, r2, r3
 8001650:	1cfa      	adds	r2, r7, #3
 8001652:	7812      	ldrb	r2, [r2, #0]
 8001654:	701a      	strb	r2, [r3, #0]
	buffer->status = (buffer->filled >= buffer->bufferSize)? BUFFER_FULL : BUFFER_OK;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689a      	ldr	r2, [r3, #8]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	429a      	cmp	r2, r3
 8001660:	db01      	blt.n	8001666 <push+0x5e>
 8001662:	2202      	movs	r2, #2
 8001664:	e000      	b.n	8001668 <push+0x60>
 8001666:	2200      	movs	r2, #0
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	0018      	movs	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	b002      	add	sp, #8
 8001674:	bd80      	pop	{r7, pc}

08001676 <pushStr>:

//_____Uloží řetězec do bufferu_____//
BUFFER_STATE pushStr(RING_BUFFER* buffer, char* str, int len)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	af00      	add	r7, sp, #0
 800167c:	60f8      	str	r0, [r7, #12]
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
	if(buffer->bufferSize < (buffer->filled + len))
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	18cb      	adds	r3, r1, r3
 800168e:	429a      	cmp	r2, r3
 8001690:	da01      	bge.n	8001696 <pushStr+0x20>
		return BUFFER_FULL;
 8001692:	2302      	movs	r3, #2
 8001694:	e013      	b.n	80016be <pushStr+0x48>

	for(int i = 0; i < len; i++)
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	e00b      	b.n	80016b4 <pushStr+0x3e>
	{
		push(buffer, str[i]);
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	18d3      	adds	r3, r2, r3
 80016a2:	781a      	ldrb	r2, [r3, #0]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	0011      	movs	r1, r2
 80016a8:	0018      	movs	r0, r3
 80016aa:	f7ff ffad 	bl	8001608 <push>
	for(int i = 0; i < len; i++)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	3301      	adds	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	dbef      	blt.n	800169c <pushStr+0x26>
	}

	return BUFFER_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	0018      	movs	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b006      	add	sp, #24
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <pop>:

//_____Přečte a odstraní poslední znak z bufferu_____//
//Znak bude uložen na adresu v argumentu
BUFFER_STATE pop(RING_BUFFER* buffer, char* character)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
	if(buffer->status == BUFFER_EMPTY)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	7d1b      	ldrb	r3, [r3, #20]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d101      	bne.n	80016dc <pop+0x16>
		return BUFFER_EMPTY;
 80016d8:	2301      	movs	r3, #1
 80016da:	e023      	b.n	8001724 <pop+0x5e>

	*character = buffer->buffer[buffer->first];
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	18d3      	adds	r3, r2, r3
 80016e6:	781a      	ldrb	r2, [r3, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	701a      	strb	r2, [r3, #0]
	buffer->first = (buffer->first + 1) % (buffer->bufferSize);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	0019      	movs	r1, r3
 80016f8:	0010      	movs	r0, r2
 80016fa:	f7fe fe87 	bl	800040c <__aeabi_idivmod>
 80016fe:	000b      	movs	r3, r1
 8001700:	001a      	movs	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	60da      	str	r2, [r3, #12]
	buffer->filled--;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	1e5a      	subs	r2, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	609a      	str	r2, [r3, #8]
	buffer->status = (buffer->filled <= 0)? BUFFER_EMPTY : BUFFER_OK;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	1e5a      	subs	r2, r3, #1
 8001716:	4313      	orrs	r3, r2
 8001718:	0fdb      	lsrs	r3, r3, #31
 800171a:	b2db      	uxtb	r3, r3
 800171c:	001a      	movs	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	0018      	movs	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	b002      	add	sp, #8
 800172a:	bd80      	pop	{r7, pc}

0800172c <getCount>:



//_____Zjistí počet registrů_____//
static uint8_t getCount(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af02      	add	r7, sp, #8
	uint8_t question;
	uint8_t answer;
	regCount = 0;
 8001732:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <getCount+0x7c>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]

	do
	{
		question = 42;
 8001738:	1dfb      	adds	r3, r7, #7
 800173a:	222a      	movs	r2, #42	; 0x2a
 800173c:	701a      	strb	r2, [r3, #0]
		answer = 0;
 800173e:	1dbb      	adds	r3, r7, #6
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
		if(HAL_SPI_TransmitReceive(&hspi1, &question, &answer, 1, 100) != HAL_OK)
 8001744:	1dba      	adds	r2, r7, #6
 8001746:	1df9      	adds	r1, r7, #7
 8001748:	4818      	ldr	r0, [pc, #96]	; (80017ac <getCount+0x80>)
 800174a:	2364      	movs	r3, #100	; 0x64
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2301      	movs	r3, #1
 8001750:	f004 fd64 	bl	800621c <HAL_SPI_TransmitReceive>
 8001754:	1e03      	subs	r3, r0, #0
 8001756:	d001      	beq.n	800175c <getCount+0x30>
			return 0;
 8001758:	2300      	movs	r3, #0
 800175a:	e021      	b.n	80017a0 <getCount+0x74>
		regCount++;
 800175c:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <getCount+0x7c>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	b2da      	uxtb	r2, r3
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <getCount+0x7c>)
 8001766:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1);
 8001768:	2001      	movs	r0, #1
 800176a:	f000 fdeb 	bl	8002344 <HAL_Delay>

		if(regCount >= 100)	//Ošetření nepřipojených relé desek
 800176e:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <getCount+0x7c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b63      	cmp	r3, #99	; 0x63
 8001774:	d906      	bls.n	8001784 <getCount+0x58>
		{
			flags.conErr = 1;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <getCount+0x84>)
 8001778:	7e1a      	ldrb	r2, [r3, #24]
 800177a:	2104      	movs	r1, #4
 800177c:	430a      	orrs	r2, r1
 800177e:	761a      	strb	r2, [r3, #24]
			return 0;
 8001780:	2300      	movs	r3, #0
 8001782:	e00d      	b.n	80017a0 <getCount+0x74>
		}
	}
	while(answer != question);
 8001784:	1dbb      	adds	r3, r7, #6
 8001786:	781a      	ldrb	r2, [r3, #0]
 8001788:	1dfb      	adds	r3, r7, #7
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d1d3      	bne.n	8001738 <getCount+0xc>

	regCount--;
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <getCount+0x7c>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	3b01      	subs	r3, #1
 8001796:	b2da      	uxtb	r2, r3
 8001798:	4b03      	ldr	r3, [pc, #12]	; (80017a8 <getCount+0x7c>)
 800179a:	701a      	strb	r2, [r3, #0]

	return regCount;
 800179c:	4b02      	ldr	r3, [pc, #8]	; (80017a8 <getCount+0x7c>)
 800179e:	781b      	ldrb	r3, [r3, #0]
}
 80017a0:	0018      	movs	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b002      	add	sp, #8
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200006bd 	.word	0x200006bd
 80017ac:	2000056c 	.word	0x2000056c
 80017b0:	20000618 	.word	0x20000618

080017b4 <regInit>:

//_____Inicializuje registry_____//
REG_STATE regInit(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
	REG_CLR_ACTIVE;
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	019b      	lsls	r3, r3, #6
 80017be:	482f      	ldr	r0, [pc, #188]	; (800187c <regInit+0xc8>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	0019      	movs	r1, r3
 80017c4:	f001 fe53 	bl	800346e <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80017c8:	2005      	movs	r0, #5
 80017ca:	f000 fdbb 	bl	8002344 <HAL_Delay>
	REG_CLR_INACTIVE;
 80017ce:	2380      	movs	r3, #128	; 0x80
 80017d0:	019b      	lsls	r3, r3, #6
 80017d2:	482a      	ldr	r0, [pc, #168]	; (800187c <regInit+0xc8>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	0019      	movs	r1, r3
 80017d8:	f001 fe49 	bl	800346e <HAL_GPIO_WritePin>

	REG_DISABLE;
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	4826      	ldr	r0, [pc, #152]	; (800187c <regInit+0xc8>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	0019      	movs	r1, r3
 80017e6:	f001 fe42 	bl	800346e <HAL_GPIO_WritePin>

	if(getCount() == 0)
 80017ea:	f7ff ff9f 	bl	800172c <getCount>
 80017ee:	1e03      	subs	r3, r0, #0
 80017f0:	d101      	bne.n	80017f6 <regInit+0x42>
	{
		return REG_CON_ERR;	//Connection error
 80017f2:	2301      	movs	r3, #1
 80017f4:	e03e      	b.n	8001874 <regInit+0xc0>
	}

	regValues = (uint8_t*) malloc(regCount * sizeof(uint8_t));
 80017f6:	4b22      	ldr	r3, [pc, #136]	; (8001880 <regInit+0xcc>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	0018      	movs	r0, r3
 80017fc:	f00a ff9c 	bl	800c738 <malloc>
 8001800:	0003      	movs	r3, r0
 8001802:	001a      	movs	r2, r3
 8001804:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <regInit+0xd0>)
 8001806:	601a      	str	r2, [r3, #0]
	if(regValues == NULL)
 8001808:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <regInit+0xd0>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d104      	bne.n	800181a <regInit+0x66>
	{
		regState = REG_ERR;
 8001810:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <regInit+0xd4>)
 8001812:	2202      	movs	r2, #2
 8001814:	701a      	strb	r2, [r3, #0]
		return REG_ERR;
 8001816:	2302      	movs	r3, #2
 8001818:	e02c      	b.n	8001874 <regInit+0xc0>
	}

	for(int i = 0; i < regCount; i++)
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	e008      	b.n	8001832 <regInit+0x7e>
	{
		regValues[i] = 0;
 8001820:	4b18      	ldr	r3, [pc, #96]	; (8001884 <regInit+0xd0>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	18d3      	adds	r3, r2, r3
 8001828:	2200      	movs	r2, #0
 800182a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < regCount; i++)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3301      	adds	r3, #1
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <regInit+0xcc>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	001a      	movs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4293      	cmp	r3, r2
 800183c:	dbf0      	blt.n	8001820 <regInit+0x6c>
	}

	sendData();
 800183e:	f000 f827 	bl	8001890 <sendData>

	REG_ENABLE;
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	480d      	ldr	r0, [pc, #52]	; (800187c <regInit+0xc8>)
 8001848:	2200      	movs	r2, #0
 800184a:	0019      	movs	r1, r3
 800184c:	f001 fe0f 	bl	800346e <HAL_GPIO_WritePin>

	regState = (HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)? REG_OK : REG_ERR;
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <regInit+0xd0>)
 8001852:	6819      	ldr	r1, [r3, #0]
 8001854:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <regInit+0xcc>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	b29a      	uxth	r2, r3
 800185a:	480c      	ldr	r0, [pc, #48]	; (800188c <regInit+0xd8>)
 800185c:	2364      	movs	r3, #100	; 0x64
 800185e:	f004 fb85 	bl	8005f6c <HAL_SPI_Transmit>
 8001862:	1e03      	subs	r3, r0, #0
 8001864:	d101      	bne.n	800186a <regInit+0xb6>
 8001866:	2200      	movs	r2, #0
 8001868:	e000      	b.n	800186c <regInit+0xb8>
 800186a:	2202      	movs	r2, #2
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <regInit+0xd4>)
 800186e:	701a      	strb	r2, [r3, #0]
	return regState;
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <regInit+0xd4>)
 8001872:	781b      	ldrb	r3, [r3, #0]
}
 8001874:	0018      	movs	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	b002      	add	sp, #8
 800187a:	bd80      	pop	{r7, pc}
 800187c:	48000400 	.word	0x48000400
 8001880:	200006bd 	.word	0x200006bd
 8001884:	200006b8 	.word	0x200006b8
 8001888:	200006bc 	.word	0x200006bc
 800188c:	2000056c 	.word	0x2000056c

08001890 <sendData>:

//_____Pošle data z regValues do registrů_____//
REG_STATE sendData(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	if(HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)
 8001894:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <sendData+0x54>)
 8001896:	6819      	ldr	r1, [r3, #0]
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <sendData+0x58>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	b29a      	uxth	r2, r3
 800189e:	4813      	ldr	r0, [pc, #76]	; (80018ec <sendData+0x5c>)
 80018a0:	2364      	movs	r3, #100	; 0x64
 80018a2:	f004 fb63 	bl	8005f6c <HAL_SPI_Transmit>
 80018a6:	1e03      	subs	r3, r0, #0
 80018a8:	d114      	bne.n	80018d4 <sendData+0x44>
	{
		//vytvoř pulz na RCLK¨
		REG_RCLK_HIGH;
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	01db      	lsls	r3, r3, #7
 80018ae:	4810      	ldr	r0, [pc, #64]	; (80018f0 <sendData+0x60>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	0019      	movs	r1, r3
 80018b4:	f001 fddb 	bl	800346e <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80018b8:	2001      	movs	r0, #1
 80018ba:	f000 fd43 	bl	8002344 <HAL_Delay>
		REG_RCLK_LOW;
 80018be:	2380      	movs	r3, #128	; 0x80
 80018c0:	01db      	lsls	r3, r3, #7
 80018c2:	480b      	ldr	r0, [pc, #44]	; (80018f0 <sendData+0x60>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	0019      	movs	r1, r3
 80018c8:	f001 fdd1 	bl	800346e <HAL_GPIO_WritePin>

		regState = REG_OK;
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <sendData+0x64>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	e002      	b.n	80018da <sendData+0x4a>
	}
	else
	{
		regState = REG_ERR;
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <sendData+0x64>)
 80018d6:	2202      	movs	r2, #2
 80018d8:	701a      	strb	r2, [r3, #0]
	}

	return regState;
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <sendData+0x64>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
}
 80018de:	0018      	movs	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200006b8 	.word	0x200006b8
 80018e8:	200006bd 	.word	0x200006bd
 80018ec:	2000056c 	.word	0x2000056c
 80018f0:	48000400 	.word	0x48000400
 80018f4:	200006bc 	.word	0x200006bc

080018f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <HAL_MspInit+0x44>)
 8001900:	699a      	ldr	r2, [r3, #24]
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HAL_MspInit+0x44>)
 8001904:	2101      	movs	r1, #1
 8001906:	430a      	orrs	r2, r1
 8001908:	619a      	str	r2, [r3, #24]
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <HAL_MspInit+0x44>)
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	2201      	movs	r2, #1
 8001910:	4013      	ands	r3, r2
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_MspInit+0x44>)
 8001918:	69da      	ldr	r2, [r3, #28]
 800191a:	4b08      	ldr	r3, [pc, #32]	; (800193c <HAL_MspInit+0x44>)
 800191c:	2180      	movs	r1, #128	; 0x80
 800191e:	0549      	lsls	r1, r1, #21
 8001920:	430a      	orrs	r2, r1
 8001922:	61da      	str	r2, [r3, #28]
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_MspInit+0x44>)
 8001926:	69da      	ldr	r2, [r3, #28]
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	055b      	lsls	r3, r3, #21
 800192c:	4013      	ands	r3, r2
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	46bd      	mov	sp, r7
 8001936:	b002      	add	sp, #8
 8001938:	bd80      	pop	{r7, pc}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	40021000 	.word	0x40021000

08001940 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001940:	b590      	push	{r4, r7, lr}
 8001942:	b08d      	sub	sp, #52	; 0x34
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	241c      	movs	r4, #28
 800194a:	193b      	adds	r3, r7, r4
 800194c:	0018      	movs	r0, r3
 800194e:	2314      	movs	r3, #20
 8001950:	001a      	movs	r2, r3
 8001952:	2100      	movs	r1, #0
 8001954:	f00a ff04 	bl	800c760 <memset>
  if(hadc->Instance==ADC1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a4a      	ldr	r2, [pc, #296]	; (8001a88 <HAL_ADC_MspInit+0x148>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d000      	beq.n	8001964 <HAL_ADC_MspInit+0x24>
 8001962:	e08d      	b.n	8001a80 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001964:	4b49      	ldr	r3, [pc, #292]	; (8001a8c <HAL_ADC_MspInit+0x14c>)
 8001966:	699a      	ldr	r2, [r3, #24]
 8001968:	4b48      	ldr	r3, [pc, #288]	; (8001a8c <HAL_ADC_MspInit+0x14c>)
 800196a:	2180      	movs	r1, #128	; 0x80
 800196c:	0089      	lsls	r1, r1, #2
 800196e:	430a      	orrs	r2, r1
 8001970:	619a      	str	r2, [r3, #24]
 8001972:	4b46      	ldr	r3, [pc, #280]	; (8001a8c <HAL_ADC_MspInit+0x14c>)
 8001974:	699a      	ldr	r2, [r3, #24]
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001980:	4b42      	ldr	r3, [pc, #264]	; (8001a8c <HAL_ADC_MspInit+0x14c>)
 8001982:	695a      	ldr	r2, [r3, #20]
 8001984:	4b41      	ldr	r3, [pc, #260]	; (8001a8c <HAL_ADC_MspInit+0x14c>)
 8001986:	2180      	movs	r1, #128	; 0x80
 8001988:	0309      	lsls	r1, r1, #12
 800198a:	430a      	orrs	r2, r1
 800198c:	615a      	str	r2, [r3, #20]
 800198e:	4b3f      	ldr	r3, [pc, #252]	; (8001a8c <HAL_ADC_MspInit+0x14c>)
 8001990:	695a      	ldr	r2, [r3, #20]
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	031b      	lsls	r3, r3, #12
 8001996:	4013      	ands	r3, r2
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199c:	4b3b      	ldr	r3, [pc, #236]	; (8001a8c <HAL_ADC_MspInit+0x14c>)
 800199e:	695a      	ldr	r2, [r3, #20]
 80019a0:	4b3a      	ldr	r3, [pc, #232]	; (8001a8c <HAL_ADC_MspInit+0x14c>)
 80019a2:	2180      	movs	r1, #128	; 0x80
 80019a4:	0289      	lsls	r1, r1, #10
 80019a6:	430a      	orrs	r2, r1
 80019a8:	615a      	str	r2, [r3, #20]
 80019aa:	4b38      	ldr	r3, [pc, #224]	; (8001a8c <HAL_ADC_MspInit+0x14c>)
 80019ac:	695a      	ldr	r2, [r3, #20]
 80019ae:	2380      	movs	r3, #128	; 0x80
 80019b0:	029b      	lsls	r3, r3, #10
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b8:	4b34      	ldr	r3, [pc, #208]	; (8001a8c <HAL_ADC_MspInit+0x14c>)
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	4b33      	ldr	r3, [pc, #204]	; (8001a8c <HAL_ADC_MspInit+0x14c>)
 80019be:	2180      	movs	r1, #128	; 0x80
 80019c0:	02c9      	lsls	r1, r1, #11
 80019c2:	430a      	orrs	r2, r1
 80019c4:	615a      	str	r2, [r3, #20]
 80019c6:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <HAL_ADC_MspInit+0x14c>)
 80019c8:	695a      	ldr	r2, [r3, #20]
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	02db      	lsls	r3, r3, #11
 80019ce:	4013      	ands	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80019d4:	193b      	adds	r3, r7, r4
 80019d6:	223f      	movs	r2, #63	; 0x3f
 80019d8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019da:	193b      	adds	r3, r7, r4
 80019dc:	2203      	movs	r2, #3
 80019de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	193b      	adds	r3, r7, r4
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e6:	193b      	adds	r3, r7, r4
 80019e8:	4a29      	ldr	r2, [pc, #164]	; (8001a90 <HAL_ADC_MspInit+0x150>)
 80019ea:	0019      	movs	r1, r3
 80019ec:	0010      	movs	r0, r2
 80019ee:	f001 fba9 	bl	8003144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80019f2:	193b      	adds	r3, r7, r4
 80019f4:	22ff      	movs	r2, #255	; 0xff
 80019f6:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f8:	193b      	adds	r3, r7, r4
 80019fa:	2203      	movs	r2, #3
 80019fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	193b      	adds	r3, r7, r4
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a04:	193a      	adds	r2, r7, r4
 8001a06:	2390      	movs	r3, #144	; 0x90
 8001a08:	05db      	lsls	r3, r3, #23
 8001a0a:	0011      	movs	r1, r2
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f001 fb99 	bl	8003144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a12:	193b      	adds	r3, r7, r4
 8001a14:	2203      	movs	r2, #3
 8001a16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a18:	193b      	adds	r3, r7, r4
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	193b      	adds	r3, r7, r4
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a24:	193b      	adds	r3, r7, r4
 8001a26:	4a1b      	ldr	r2, [pc, #108]	; (8001a94 <HAL_ADC_MspInit+0x154>)
 8001a28:	0019      	movs	r1, r3
 8001a2a:	0010      	movs	r0, r2
 8001a2c:	f001 fb8a 	bl	8003144 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <HAL_ADC_MspInit+0x158>)
 8001a32:	4a1a      	ldr	r2, [pc, #104]	; (8001a9c <HAL_ADC_MspInit+0x15c>)
 8001a34:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a36:	4b18      	ldr	r3, [pc, #96]	; (8001a98 <HAL_ADC_MspInit+0x158>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <HAL_ADC_MspInit+0x158>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_ADC_MspInit+0x158>)
 8001a44:	2280      	movs	r2, #128	; 0x80
 8001a46:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <HAL_ADC_MspInit+0x158>)
 8001a4a:	2280      	movs	r2, #128	; 0x80
 8001a4c:	0052      	lsls	r2, r2, #1
 8001a4e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <HAL_ADC_MspInit+0x158>)
 8001a52:	2280      	movs	r2, #128	; 0x80
 8001a54:	00d2      	lsls	r2, r2, #3
 8001a56:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_ADC_MspInit+0x158>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <HAL_ADC_MspInit+0x158>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <HAL_ADC_MspInit+0x158>)
 8001a66:	0018      	movs	r0, r3
 8001a68:	f001 f956 	bl	8002d18 <HAL_DMA_Init>
 8001a6c:	1e03      	subs	r3, r0, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8001a70:	f7ff fd90 	bl	8001594 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a08      	ldr	r2, [pc, #32]	; (8001a98 <HAL_ADC_MspInit+0x158>)
 8001a78:	631a      	str	r2, [r3, #48]	; 0x30
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <HAL_ADC_MspInit+0x158>)
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a80:	46c0      	nop			; (mov r8, r8)
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b00d      	add	sp, #52	; 0x34
 8001a86:	bd90      	pop	{r4, r7, pc}
 8001a88:	40012400 	.word	0x40012400
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	48000800 	.word	0x48000800
 8001a94:	48000400 	.word	0x48000400
 8001a98:	20000634 	.word	0x20000634
 8001a9c:	40020008 	.word	0x40020008

08001aa0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001aa0:	b590      	push	{r4, r7, lr}
 8001aa2:	b08b      	sub	sp, #44	; 0x2c
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	2414      	movs	r4, #20
 8001aaa:	193b      	adds	r3, r7, r4
 8001aac:	0018      	movs	r0, r3
 8001aae:	2314      	movs	r3, #20
 8001ab0:	001a      	movs	r2, r3
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	f00a fe54 	bl	800c760 <memset>
  if(hspi->Instance==SPI1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a1c      	ldr	r2, [pc, #112]	; (8001b30 <HAL_SPI_MspInit+0x90>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d131      	bne.n	8001b26 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ac2:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <HAL_SPI_MspInit+0x94>)
 8001ac4:	699a      	ldr	r2, [r3, #24]
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <HAL_SPI_MspInit+0x94>)
 8001ac8:	2180      	movs	r1, #128	; 0x80
 8001aca:	0149      	lsls	r1, r1, #5
 8001acc:	430a      	orrs	r2, r1
 8001ace:	619a      	str	r2, [r3, #24]
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <HAL_SPI_MspInit+0x94>)
 8001ad2:	699a      	ldr	r2, [r3, #24]
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	015b      	lsls	r3, r3, #5
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_SPI_MspInit+0x94>)
 8001ae0:	695a      	ldr	r2, [r3, #20]
 8001ae2:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <HAL_SPI_MspInit+0x94>)
 8001ae4:	2180      	movs	r1, #128	; 0x80
 8001ae6:	02c9      	lsls	r1, r1, #11
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	615a      	str	r2, [r3, #20]
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <HAL_SPI_MspInit+0x94>)
 8001aee:	695a      	ldr	r2, [r3, #20]
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	02db      	lsls	r3, r3, #11
 8001af4:	4013      	ands	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001afa:	0021      	movs	r1, r4
 8001afc:	187b      	adds	r3, r7, r1
 8001afe:	2238      	movs	r2, #56	; 0x38
 8001b00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	2202      	movs	r2, #2
 8001b06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	2203      	movs	r2, #3
 8001b12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1a:	187b      	adds	r3, r7, r1
 8001b1c:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <HAL_SPI_MspInit+0x98>)
 8001b1e:	0019      	movs	r1, r3
 8001b20:	0010      	movs	r0, r2
 8001b22:	f001 fb0f 	bl	8003144 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b00b      	add	sp, #44	; 0x2c
 8001b2c:	bd90      	pop	{r4, r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	40013000 	.word	0x40013000
 8001b34:	40021000 	.word	0x40021000
 8001b38:	48000400 	.word	0x48000400

08001b3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <HAL_TIM_Base_MspInit+0x48>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d115      	bne.n	8001b7a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <HAL_TIM_Base_MspInit+0x4c>)
 8001b50:	69da      	ldr	r2, [r3, #28]
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <HAL_TIM_Base_MspInit+0x4c>)
 8001b54:	2180      	movs	r1, #128	; 0x80
 8001b56:	0049      	lsls	r1, r1, #1
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	61da      	str	r2, [r3, #28]
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_TIM_Base_MspInit+0x4c>)
 8001b5e:	69da      	ldr	r2, [r3, #28]
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4013      	ands	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	2013      	movs	r0, #19
 8001b70:	f001 f8a0 	bl	8002cb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001b74:	2013      	movs	r0, #19
 8001b76:	f001 f8b2 	bl	8002cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b004      	add	sp, #16
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	40002000 	.word	0x40002000
 8001b88:	40021000 	.word	0x40021000

08001b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b08b      	sub	sp, #44	; 0x2c
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	2414      	movs	r4, #20
 8001b96:	193b      	adds	r3, r7, r4
 8001b98:	0018      	movs	r0, r3
 8001b9a:	2314      	movs	r3, #20
 8001b9c:	001a      	movs	r2, r3
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	f00a fdde 	bl	800c760 <memset>
  if(huart->Instance==USART3)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a20      	ldr	r2, [pc, #128]	; (8001c2c <HAL_UART_MspInit+0xa0>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d13a      	bne.n	8001c24 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bae:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <HAL_UART_MspInit+0xa4>)
 8001bb0:	69da      	ldr	r2, [r3, #28]
 8001bb2:	4b1f      	ldr	r3, [pc, #124]	; (8001c30 <HAL_UART_MspInit+0xa4>)
 8001bb4:	2180      	movs	r1, #128	; 0x80
 8001bb6:	02c9      	lsls	r1, r1, #11
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	61da      	str	r2, [r3, #28]
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <HAL_UART_MspInit+0xa4>)
 8001bbe:	69da      	ldr	r2, [r3, #28]
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	02db      	lsls	r3, r3, #11
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bca:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_UART_MspInit+0xa4>)
 8001bcc:	695a      	ldr	r2, [r3, #20]
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_UART_MspInit+0xa4>)
 8001bd0:	2180      	movs	r1, #128	; 0x80
 8001bd2:	0309      	lsls	r1, r1, #12
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	615a      	str	r2, [r3, #20]
 8001bd8:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <HAL_UART_MspInit+0xa4>)
 8001bda:	695a      	ldr	r2, [r3, #20]
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	031b      	lsls	r3, r3, #12
 8001be0:	4013      	ands	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001be6:	193b      	adds	r3, r7, r4
 8001be8:	22c0      	movs	r2, #192	; 0xc0
 8001bea:	0112      	lsls	r2, r2, #4
 8001bec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	0021      	movs	r1, r4
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	187b      	adds	r3, r7, r1
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bfc:	187b      	adds	r3, r7, r1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8001c02:	187b      	adds	r3, r7, r1
 8001c04:	2201      	movs	r2, #1
 8001c06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c08:	187b      	adds	r3, r7, r1
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <HAL_UART_MspInit+0xa8>)
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	0010      	movs	r0, r2
 8001c10:	f001 fa98 	bl	8003144 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2100      	movs	r1, #0
 8001c18:	201d      	movs	r0, #29
 8001c1a:	f001 f84b 	bl	8002cb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8001c1e:	201d      	movs	r0, #29
 8001c20:	f001 f85d 	bl	8002cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c24:	46c0      	nop			; (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b00b      	add	sp, #44	; 0x2c
 8001c2a:	bd90      	pop	{r4, r7, pc}
 8001c2c:	40004800 	.word	0x40004800
 8001c30:	40021000 	.word	0x40021000
 8001c34:	48000800 	.word	0x48000800

08001c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <NMI_Handler+0x4>

08001c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <HardFault_Handler+0x4>

08001c44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c48:	46c0      	nop			; (mov r8, r8)
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c5c:	f000 fb56 	bl	800230c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c60:	46c0      	nop			; (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001c6a:	2380      	movs	r3, #128	; 0x80
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f001 fc36 	bl	80034e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f001 fc31 	bl	80034e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <DMA1_Channel1_IRQHandler+0x14>)
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f001 f96f 	bl	8002f6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001c90:	46c0      	nop			; (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	20000634 	.word	0x20000634

08001c9c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001ca0:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <TIM14_IRQHandler+0x14>)
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f004 fefc 	bl	8006aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001ca8:	46c0      	nop			; (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	200005d0 	.word	0x200005d0

08001cb4 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <USART3_4_IRQHandler+0x14>)
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f005 fb5e 	bl	800737c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8001cc0:	46c0      	nop			; (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	200004e4 	.word	0x200004e4

08001ccc <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <USB_IRQHandler+0x14>)
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f001 fd56 	bl	8003784 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001cd8:	46c0      	nop			; (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	20001368 	.word	0x20001368

08001ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cec:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <_sbrk+0x5c>)
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <_sbrk+0x60>)
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf8:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <_sbrk+0x64>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d00:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <_sbrk+0x64>)
 8001d02:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <_sbrk+0x68>)
 8001d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d06:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <_sbrk+0x64>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	18d3      	adds	r3, r2, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d207      	bcs.n	8001d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d14:	f00a fce6 	bl	800c6e4 <__errno>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	425b      	negs	r3, r3
 8001d22:	e009      	b.n	8001d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <_sbrk+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <_sbrk+0x64>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	18d2      	adds	r2, r2, r3
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <_sbrk+0x64>)
 8001d34:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001d36:	68fb      	ldr	r3, [r7, #12]
}
 8001d38:	0018      	movs	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	b006      	add	sp, #24
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20004000 	.word	0x20004000
 8001d44:	00000400 	.word	0x00000400
 8001d48:	20000258 	.word	0x20000258
 8001d4c:	20001670 	.word	0x20001670

08001d50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001d54:	46c0      	nop			; (mov r8, r8)
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
	...

08001d5c <currentPhase>:
static void startTest();
static void stopTest();

//_____Dotaz na aktuální fázi testu_____//
TEST_PHASE currentPhase()
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
	return testPhase;
 8001d60:	4b02      	ldr	r3, [pc, #8]	; (8001d6c <currentPhase+0x10>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
}
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	2000025c 	.word	0x2000025c

08001d70 <testHandler>:

//_____Funkce pro řízení testu_____//
void testHandler()
{
 8001d70:	b5b0      	push	{r4, r5, r7, lr}
 8001d72:	b092      	sub	sp, #72	; 0x48
 8001d74:	af02      	add	r7, sp, #8
	flags.testProgress = 0;
 8001d76:	4bdc      	ldr	r3, [pc, #880]	; (80020e8 <testHandler+0x378>)
 8001d78:	7e1a      	ldrb	r2, [r3, #24]
 8001d7a:	2102      	movs	r1, #2
 8001d7c:	438a      	bics	r2, r1
 8001d7e:	761a      	strb	r2, [r3, #24]

	if(flags.instructions.startRequest)
 8001d80:	4bd9      	ldr	r3, [pc, #868]	; (80020e8 <testHandler+0x378>)
 8001d82:	7b1b      	ldrb	r3, [r3, #12]
 8001d84:	2201      	movs	r2, #1
 8001d86:	4013      	ands	r3, r2
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d02f      	beq.n	8001dee <testHandler+0x7e>
	{
		if(testPhase == WAITING)
 8001d8e:	4bd7      	ldr	r3, [pc, #860]	; (80020ec <testHandler+0x37c>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d126      	bne.n	8001de4 <testHandler+0x74>
		{
			if(flags.conErr)
 8001d96:	4bd4      	ldr	r3, [pc, #848]	; (80020e8 <testHandler+0x378>)
 8001d98:	7e1b      	ldrb	r3, [r3, #24]
 8001d9a:	2204      	movs	r2, #4
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d01c      	beq.n	8001dde <testHandler+0x6e>
			{
				char txt[] = {"Relay PCB connection error\n"};
 8001da4:	211c      	movs	r1, #28
 8001da6:	187b      	adds	r3, r7, r1
 8001da8:	4ad1      	ldr	r2, [pc, #836]	; (80020f0 <testHandler+0x380>)
 8001daa:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001dac:	c331      	stmia	r3!, {r0, r4, r5}
 8001dae:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001db0:	c331      	stmia	r3!, {r0, r4, r5}
 8001db2:	6812      	ldr	r2, [r2, #0]
 8001db4:	601a      	str	r2, [r3, #0]
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8001db6:	4bcf      	ldr	r3, [pc, #828]	; (80020f4 <testHandler+0x384>)
 8001db8:	681c      	ldr	r4, [r3, #0]
 8001dba:	000d      	movs	r5, r1
 8001dbc:	187b      	adds	r3, r7, r1
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f7fe f9a2 	bl	8000108 <strlen>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	001a      	movs	r2, r3
 8001dc8:	197b      	adds	r3, r7, r5
 8001dca:	0019      	movs	r1, r3
 8001dcc:	0020      	movs	r0, r4
 8001dce:	f7ff fc52 	bl	8001676 <pushStr>
				flags.instructions.startRequest = 0;
 8001dd2:	4bc5      	ldr	r3, [pc, #788]	; (80020e8 <testHandler+0x378>)
 8001dd4:	7b1a      	ldrb	r2, [r3, #12]
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	438a      	bics	r2, r1
 8001dda:	731a      	strb	r2, [r3, #12]
 8001ddc:	e007      	b.n	8001dee <testHandler+0x7e>
			}
			else
			{
				startTest();
 8001dde:	f000 f99b 	bl	8002118 <startTest>
 8001de2:	e004      	b.n	8001dee <testHandler+0x7e>
			}
		}
		else
		{
			flags.startConflict = 1;
 8001de4:	4bc0      	ldr	r3, [pc, #768]	; (80020e8 <testHandler+0x378>)
 8001de6:	7e1a      	ldrb	r2, [r3, #24]
 8001de8:	2101      	movs	r1, #1
 8001dea:	430a      	orrs	r2, r1
 8001dec:	761a      	strb	r2, [r3, #24]
		}
	}
	if(flags.instructions.stopRequest)
 8001dee:	4bbe      	ldr	r3, [pc, #760]	; (80020e8 <testHandler+0x378>)
 8001df0:	7b1b      	ldrb	r3, [r3, #12]
 8001df2:	2202      	movs	r2, #2
 8001df4:	4013      	ands	r3, r2
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <testHandler+0x90>
	{
		stopTest();
 8001dfc:	f000 f9de 	bl	80021bc <stopTest>
	}

	switch(testPhase)
 8001e00:	4bba      	ldr	r3, [pc, #744]	; (80020ec <testHandler+0x37c>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b06      	cmp	r3, #6
 8001e06:	d900      	bls.n	8001e0a <testHandler+0x9a>
 8001e08:	e181      	b.n	800210e <testHandler+0x39e>
 8001e0a:	009a      	lsls	r2, r3, #2
 8001e0c:	4bba      	ldr	r3, [pc, #744]	; (80020f8 <testHandler+0x388>)
 8001e0e:	18d3      	adds	r3, r2, r3
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	469f      	mov	pc, r3
	{
	case WAITING:
		flags.testProgress = 0;
 8001e14:	4bb4      	ldr	r3, [pc, #720]	; (80020e8 <testHandler+0x378>)
 8001e16:	7e1a      	ldrb	r2, [r3, #24]
 8001e18:	2102      	movs	r1, #2
 8001e1a:	438a      	bics	r2, r1
 8001e1c:	761a      	strb	r2, [r3, #24]
		flags.meas.measRequest = 0;
 8001e1e:	4bb2      	ldr	r3, [pc, #712]	; (80020e8 <testHandler+0x378>)
 8001e20:	7d1a      	ldrb	r2, [r3, #20]
 8001e22:	2101      	movs	r1, #1
 8001e24:	438a      	bics	r2, r1
 8001e26:	751a      	strb	r2, [r3, #20]
		break;
 8001e28:	e171      	b.n	800210e <testHandler+0x39e>
	case START:

		//___Pokud je dokončeno měření napětí naprázdno...____//
		if(flags.meas.measComplete)
 8001e2a:	4baf      	ldr	r3, [pc, #700]	; (80020e8 <testHandler+0x378>)
 8001e2c:	7d1b      	ldrb	r3, [r3, #20]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	4013      	ands	r3, r2
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d100      	bne.n	8001e3a <testHandler+0xca>
 8001e38:	e14e      	b.n	80020d8 <testHandler+0x368>
		{
			testPhase++;
 8001e3a:	4bac      	ldr	r3, [pc, #688]	; (80020ec <testHandler+0x37c>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	4baa      	ldr	r3, [pc, #680]	; (80020ec <testHandler+0x37c>)
 8001e44:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001e46:	e147      	b.n	80020d8 <testHandler+0x368>
	case START_DONE:
		//___Připojení zátěže___//
		LOAD_MIN_ON;
 8001e48:	4bac      	ldr	r3, [pc, #688]	; (80020fc <testHandler+0x38c>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	2180      	movs	r1, #128	; 0x80
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f001 fb0d 	bl	800346e <HAL_GPIO_WritePin>
		LOAD_MAX_ON;
 8001e54:	4ba9      	ldr	r3, [pc, #676]	; (80020fc <testHandler+0x38c>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	2140      	movs	r1, #64	; 0x40
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	f001 fb07 	bl	800346e <HAL_GPIO_WritePin>

		testPhase++;
 8001e60:	4ba2      	ldr	r3, [pc, #648]	; (80020ec <testHandler+0x37c>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	3301      	adds	r3, #1
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	4ba0      	ldr	r3, [pc, #640]	; (80020ec <testHandler+0x37c>)
 8001e6a:	701a      	strb	r2, [r3, #0]
		flags.testProgress = 1;
 8001e6c:	4b9e      	ldr	r3, [pc, #632]	; (80020e8 <testHandler+0x378>)
 8001e6e:	7e1a      	ldrb	r2, [r3, #24]
 8001e70:	2102      	movs	r1, #2
 8001e72:	430a      	orrs	r2, r1
 8001e74:	761a      	strb	r2, [r3, #24]
		flags.ui.shortBeep = 1;
 8001e76:	4b9c      	ldr	r3, [pc, #624]	; (80020e8 <testHandler+0x378>)
 8001e78:	7c1a      	ldrb	r2, [r3, #16]
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	741a      	strb	r2, [r3, #16]

		PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//blikání druhé progress led
 8001e80:	4b9f      	ldr	r3, [pc, #636]	; (8002100 <testHandler+0x390>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	781a      	ldrb	r2, [r3, #0]
 8001e86:	4b9e      	ldr	r3, [pc, #632]	; (8002100 <testHandler+0x390>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2120      	movs	r1, #32
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	701a      	strb	r2, [r3, #0]
		sendData();
 8001e92:	f7ff fcfd 	bl	8001890 <sendData>

		//___Nulování času___//
		for(int i = 1; i < 4; i++)
 8001e96:	2301      	movs	r3, #1
 8001e98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e9a:	e007      	b.n	8001eac <testHandler+0x13c>
		{
			sysTime[i] = 0;
 8001e9c:	4b99      	ldr	r3, [pc, #612]	; (8002104 <testHandler+0x394>)
 8001e9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ea0:	0092      	lsls	r2, r2, #2
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	50d1      	str	r1, [r2, r3]
		for(int i = 1; i < 4; i++)
 8001ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eae:	2b03      	cmp	r3, #3
 8001eb0:	ddf4      	ble.n	8001e9c <testHandler+0x12c>
		}
		break;
 8001eb2:	e12c      	b.n	800210e <testHandler+0x39e>
	case MAIN_TEST:
		if(flags.time.sec)	//___Změna času___//
 8001eb4:	4b8c      	ldr	r3, [pc, #560]	; (80020e8 <testHandler+0x378>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2202      	movs	r2, #2
 8001eba:	4013      	ands	r3, r2
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d026      	beq.n	8001f10 <testHandler+0x1a0>
		{
			char time[9] = {0};
 8001ec2:	2510      	movs	r5, #16
 8001ec4:	197b      	adds	r3, r7, r5
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	3304      	adds	r3, #4
 8001ecc:	2205      	movs	r2, #5
 8001ece:	2100      	movs	r1, #0
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f00a fc45 	bl	800c760 <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 8001ed6:	4b8b      	ldr	r3, [pc, #556]	; (8002104 <testHandler+0x394>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	223c      	movs	r2, #60	; 0x3c
 8001edc:	1ad2      	subs	r2, r2, r3
 8001ede:	4b89      	ldr	r3, [pc, #548]	; (8002104 <testHandler+0x394>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	213c      	movs	r1, #60	; 0x3c
 8001ee4:	1acc      	subs	r4, r1, r3
 8001ee6:	4b87      	ldr	r3, [pc, #540]	; (8002104 <testHandler+0x394>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2103      	movs	r1, #3
 8001eec:	1acb      	subs	r3, r1, r3
 8001eee:	4986      	ldr	r1, [pc, #536]	; (8002108 <testHandler+0x398>)
 8001ef0:	1978      	adds	r0, r7, r5
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	0023      	movs	r3, r4
 8001ef6:	f00a fcf5 	bl	800c8e4 <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED2);	//blikání druhé progress led
 8001efa:	4b81      	ldr	r3, [pc, #516]	; (8002100 <testHandler+0x390>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	781a      	ldrb	r2, [r3, #0]
 8001f00:	4b7f      	ldr	r3, [pc, #508]	; (8002100 <testHandler+0x390>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2110      	movs	r1, #16
 8001f06:	404a      	eors	r2, r1
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	701a      	strb	r2, [r3, #0]
			sendData();
 8001f0c:	f7ff fcc0 	bl	8001890 <sendData>
		}
		if(!(sysTime[SYSTIME_MIN] % 10) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých deset minut___//
 8001f10:	4b7c      	ldr	r3, [pc, #496]	; (8002104 <testHandler+0x394>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	210a      	movs	r1, #10
 8001f16:	0018      	movs	r0, r3
 8001f18:	f7fe fa78 	bl	800040c <__aeabi_idivmod>
 8001f1c:	1e0b      	subs	r3, r1, #0
 8001f1e:	d10f      	bne.n	8001f40 <testHandler+0x1d0>
 8001f20:	4b78      	ldr	r3, [pc, #480]	; (8002104 <testHandler+0x394>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00b      	beq.n	8001f40 <testHandler+0x1d0>
 8001f28:	4b6f      	ldr	r3, [pc, #444]	; (80020e8 <testHandler+0x378>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2204      	movs	r2, #4
 8001f2e:	4013      	ands	r3, r2
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d004      	beq.n	8001f40 <testHandler+0x1d0>
		{
			flags.meas.measRequest = 1;
 8001f36:	4b6c      	ldr	r3, [pc, #432]	; (80020e8 <testHandler+0x378>)
 8001f38:	7d1a      	ldrb	r2, [r3, #20]
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 30)	//___Po jedné hodině je měření u konce___//
 8001f40:	4b70      	ldr	r3, [pc, #448]	; (8002104 <testHandler+0x394>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b1d      	cmp	r3, #29
 8001f46:	dc00      	bgt.n	8001f4a <testHandler+0x1da>
 8001f48:	e0c8      	b.n	80020dc <testHandler+0x36c>
#else
		if(sysTime[SYSTIME_HOUR] >= 3)	//___Po třech hodinách je měření u konce___//
#endif
		{
			testPhase++;
 8001f4a:	4b68      	ldr	r3, [pc, #416]	; (80020ec <testHandler+0x37c>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4b66      	ldr	r3, [pc, #408]	; (80020ec <testHandler+0x37c>)
 8001f54:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001f56:	e0c1      	b.n	80020dc <testHandler+0x36c>
	case MAIN_TEST_DONE:
		if(!flags.meas.measRunning)
 8001f58:	4b63      	ldr	r3, [pc, #396]	; (80020e8 <testHandler+0x378>)
 8001f5a:	7d1b      	ldrb	r3, [r3, #20]
 8001f5c:	2208      	movs	r2, #8
 8001f5e:	4013      	ands	r3, r2
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d000      	beq.n	8001f68 <testHandler+0x1f8>
 8001f66:	e0bb      	b.n	80020e0 <testHandler+0x370>
		{
			flags.ui.notice = 1;
 8001f68:	4b5f      	ldr	r3, [pc, #380]	; (80020e8 <testHandler+0x378>)
 8001f6a:	7c1a      	ldrb	r2, [r3, #16]
 8001f6c:	2108      	movs	r1, #8
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8001f72:	4b5d      	ldr	r3, [pc, #372]	; (80020e8 <testHandler+0x378>)
 8001f74:	7e1a      	ldrb	r2, [r3, #24]
 8001f76:	2102      	movs	r1, #2
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	761a      	strb	r2, [r3, #24]

			testPhase++;
 8001f7c:	4b5b      	ldr	r3, [pc, #364]	; (80020ec <testHandler+0x37c>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	3301      	adds	r3, #1
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	4b59      	ldr	r3, [pc, #356]	; (80020ec <testHandler+0x37c>)
 8001f86:	701a      	strb	r2, [r3, #0]

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED2);
 8001f88:	4b5d      	ldr	r3, [pc, #372]	; (8002100 <testHandler+0x390>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	781a      	ldrb	r2, [r3, #0]
 8001f8e:	4b5c      	ldr	r3, [pc, #368]	; (8002100 <testHandler+0x390>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2110      	movs	r1, #16
 8001f94:	430a      	orrs	r2, r1
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	701a      	strb	r2, [r3, #0]
			PWR_OFF(*sourceInTesting);
 8001f9a:	4b59      	ldr	r3, [pc, #356]	; (8002100 <testHandler+0x390>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	781a      	ldrb	r2, [r3, #0]
 8001fa0:	4b57      	ldr	r3, [pc, #348]	; (8002100 <testHandler+0x390>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	701a      	strb	r2, [r3, #0]
			sendData();
 8001fac:	f7ff fc70 	bl	8001890 <sendData>

			//___Nulování času___//
			for(int i = 1; i < 4; i++)
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fb4:	e007      	b.n	8001fc6 <testHandler+0x256>
			{
				sysTime[i] = 0;
 8001fb6:	4b53      	ldr	r3, [pc, #332]	; (8002104 <testHandler+0x394>)
 8001fb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fba:	0092      	lsls	r2, r2, #2
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	50d1      	str	r1, [r2, r3]
			for(int i = 1; i < 4; i++)
 8001fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	ddf4      	ble.n	8001fb6 <testHandler+0x246>
			}
		}
		break;
 8001fcc:	e088      	b.n	80020e0 <testHandler+0x370>
	case BATTERY_TEST:
		if(flags.time.sec)	//___Změna času___//
 8001fce:	4b46      	ldr	r3, [pc, #280]	; (80020e8 <testHandler+0x378>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d025      	beq.n	8002028 <testHandler+0x2b8>
		{
			char time[9] = {0};
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	3304      	adds	r3, #4
 8001fe4:	2205      	movs	r2, #5
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f00a fbb9 	bl	800c760 <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 8001fee:	4b45      	ldr	r3, [pc, #276]	; (8002104 <testHandler+0x394>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	223c      	movs	r2, #60	; 0x3c
 8001ff4:	1ad2      	subs	r2, r2, r3
 8001ff6:	4b43      	ldr	r3, [pc, #268]	; (8002104 <testHandler+0x394>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	213c      	movs	r1, #60	; 0x3c
 8001ffc:	1acc      	subs	r4, r1, r3
 8001ffe:	4b41      	ldr	r3, [pc, #260]	; (8002104 <testHandler+0x394>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	2103      	movs	r1, #3
 8002004:	1acb      	subs	r3, r1, r3
 8002006:	4940      	ldr	r1, [pc, #256]	; (8002108 <testHandler+0x398>)
 8002008:	1d38      	adds	r0, r7, #4
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	0023      	movs	r3, r4
 800200e:	f00a fc69 	bl	800c8e4 <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED3);	//blikání třetí progress led
 8002012:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <testHandler+0x390>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	781a      	ldrb	r2, [r3, #0]
 8002018:	4b39      	ldr	r3, [pc, #228]	; (8002100 <testHandler+0x390>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2108      	movs	r1, #8
 800201e:	404a      	eors	r2, r1
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	701a      	strb	r2, [r3, #0]
			sendData();
 8002024:	f7ff fc34 	bl	8001890 <sendData>
		}
		if(!(sysTime[SYSTIME_MIN] % 5) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých pět minut___//
 8002028:	4b36      	ldr	r3, [pc, #216]	; (8002104 <testHandler+0x394>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2105      	movs	r1, #5
 800202e:	0018      	movs	r0, r3
 8002030:	f7fe f9ec 	bl	800040c <__aeabi_idivmod>
 8002034:	1e0b      	subs	r3, r1, #0
 8002036:	d10f      	bne.n	8002058 <testHandler+0x2e8>
 8002038:	4b32      	ldr	r3, [pc, #200]	; (8002104 <testHandler+0x394>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00b      	beq.n	8002058 <testHandler+0x2e8>
 8002040:	4b29      	ldr	r3, [pc, #164]	; (80020e8 <testHandler+0x378>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2204      	movs	r2, #4
 8002046:	4013      	ands	r3, r2
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d004      	beq.n	8002058 <testHandler+0x2e8>
		{
			flags.meas.measRequest = 1;
 800204e:	4b26      	ldr	r3, [pc, #152]	; (80020e8 <testHandler+0x378>)
 8002050:	7d1a      	ldrb	r2, [r3, #20]
 8002052:	2101      	movs	r1, #1
 8002054:	430a      	orrs	r2, r1
 8002056:	751a      	strb	r2, [r3, #20]
		}
		if(sysTime[SYSTIME_MIN] >= 15)	//___Po třech hodinách je měření u konce___//
 8002058:	4b2a      	ldr	r3, [pc, #168]	; (8002104 <testHandler+0x394>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b0e      	cmp	r3, #14
 800205e:	dd41      	ble.n	80020e4 <testHandler+0x374>
		{
			testPhase++;
 8002060:	4b22      	ldr	r3, [pc, #136]	; (80020ec <testHandler+0x37c>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	3301      	adds	r3, #1
 8002066:	b2da      	uxtb	r2, r3
 8002068:	4b20      	ldr	r3, [pc, #128]	; (80020ec <testHandler+0x37c>)
 800206a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800206c:	e03a      	b.n	80020e4 <testHandler+0x374>
	case BATTERY_TEST_DONE:
		if(!flags.meas.measRunning)
 800206e:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <testHandler+0x378>)
 8002070:	7d1b      	ldrb	r3, [r3, #20]
 8002072:	2208      	movs	r2, #8
 8002074:	4013      	ands	r3, r2
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d147      	bne.n	800210c <testHandler+0x39c>
		{
			flags.ui.done = 1;
 800207c:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <testHandler+0x378>)
 800207e:	7c1a      	ldrb	r2, [r3, #16]
 8002080:	2110      	movs	r1, #16
 8002082:	430a      	orrs	r2, r1
 8002084:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8002086:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <testHandler+0x378>)
 8002088:	7e1a      	ldrb	r2, [r3, #24]
 800208a:	2102      	movs	r1, #2
 800208c:	430a      	orrs	r2, r1
 800208e:	761a      	strb	r2, [r3, #24]

			//Zobrazit text na displej

			LOAD_MIN_OFF;
 8002090:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <testHandler+0x38c>)
 8002092:	2200      	movs	r2, #0
 8002094:	2180      	movs	r1, #128	; 0x80
 8002096:	0018      	movs	r0, r3
 8002098:	f001 f9e9 	bl	800346e <HAL_GPIO_WritePin>
			LOAD_MAX_OFF;
 800209c:	4b17      	ldr	r3, [pc, #92]	; (80020fc <testHandler+0x38c>)
 800209e:	2200      	movs	r2, #0
 80020a0:	2140      	movs	r1, #64	; 0x40
 80020a2:	0018      	movs	r0, r3
 80020a4:	f001 f9e3 	bl	800346e <HAL_GPIO_WritePin>

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED3);
 80020a8:	4b15      	ldr	r3, [pc, #84]	; (8002100 <testHandler+0x390>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	781a      	ldrb	r2, [r3, #0]
 80020ae:	4b14      	ldr	r3, [pc, #80]	; (8002100 <testHandler+0x390>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2108      	movs	r1, #8
 80020b4:	430a      	orrs	r2, r1
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	701a      	strb	r2, [r3, #0]
			PWR_ON(*sourceInTesting);
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <testHandler+0x390>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	781a      	ldrb	r2, [r3, #0]
 80020c0:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <testHandler+0x390>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2101      	movs	r1, #1
 80020c6:	438a      	bics	r2, r1
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	701a      	strb	r2, [r3, #0]
			sendData();
 80020cc:	f7ff fbe0 	bl	8001890 <sendData>

			testPhase = WAITING;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <testHandler+0x37c>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80020d6:	e019      	b.n	800210c <testHandler+0x39c>
		break;
 80020d8:	46c0      	nop			; (mov r8, r8)
 80020da:	e018      	b.n	800210e <testHandler+0x39e>
		break;
 80020dc:	46c0      	nop			; (mov r8, r8)
 80020de:	e016      	b.n	800210e <testHandler+0x39e>
		break;
 80020e0:	46c0      	nop			; (mov r8, r8)
 80020e2:	e014      	b.n	800210e <testHandler+0x39e>
		break;
 80020e4:	46c0      	nop			; (mov r8, r8)
 80020e6:	e012      	b.n	800210e <testHandler+0x39e>
 80020e8:	20000618 	.word	0x20000618
 80020ec:	2000025c 	.word	0x2000025c
 80020f0:	0800d00c 	.word	0x0800d00c
 80020f4:	20000568 	.word	0x20000568
 80020f8:	0800d104 	.word	0x0800d104
 80020fc:	48000800 	.word	0x48000800
 8002100:	200006c8 	.word	0x200006c8
 8002104:	2000023c 	.word	0x2000023c
 8002108:	0800d000 	.word	0x0800d000
		break;
 800210c:	46c0      	nop			; (mov r8, r8)

	}
}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	46bd      	mov	sp, r7
 8002112:	b010      	add	sp, #64	; 0x40
 8002114:	bdb0      	pop	{r4, r5, r7, pc}
 8002116:	46c0      	nop			; (mov r8, r8)

08002118 <startTest>:

//_____Funkce pro zahájení testu_____//
static void startTest(/*ukazatel na zdroj*/)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
	flags.ui.shortBeep = 1;
 800211e:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <startTest+0x90>)
 8002120:	7c1a      	ldrb	r2, [r3, #16]
 8002122:	2101      	movs	r1, #1
 8002124:	430a      	orrs	r2, r1
 8002126:	741a      	strb	r2, [r3, #16]
	testPhase = START;
 8002128:	4b20      	ldr	r3, [pc, #128]	; (80021ac <startTest+0x94>)
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
	flags.testProgress = 1;
 800212e:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <startTest+0x90>)
 8002130:	7e1a      	ldrb	r2, [r3, #24]
 8002132:	2102      	movs	r1, #2
 8002134:	430a      	orrs	r2, r1
 8002136:	761a      	strb	r2, [r3, #24]

	sourceInTesting = &regValues[0/*ukazatel na zdroj*/];
 8002138:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <startTest+0x98>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <startTest+0x9c>)
 800213e:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < regCount; i++)
 8002140:	2300      	movs	r3, #0
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	e008      	b.n	8002158 <startTest+0x40>
	{
		regValues[i] = 0;
 8002146:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <startTest+0x98>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	18d3      	adds	r3, r2, r3
 800214e:	2200      	movs	r2, #0
 8002150:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < regCount; i++)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3301      	adds	r3, #1
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <startTest+0xa0>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	001a      	movs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4293      	cmp	r3, r2
 8002162:	dbf0      	blt.n	8002146 <startTest+0x2e>
	}
	PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//rozsvítit první ledku progress
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <startTest+0x9c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	781a      	ldrb	r2, [r3, #0]
 800216a:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <startTest+0x9c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2120      	movs	r1, #32
 8002170:	430a      	orrs	r2, r1
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	701a      	strb	r2, [r3, #0]
	RELAY_ON(*sourceInTesting);	//připojit relé
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <startTest+0x9c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	781a      	ldrb	r2, [r3, #0]
 800217c:	4b0d      	ldr	r3, [pc, #52]	; (80021b4 <startTest+0x9c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2102      	movs	r1, #2
 8002182:	430a      	orrs	r2, r1
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	701a      	strb	r2, [r3, #0]

	sendData();	//poslat konfiguraci shift registrům
 8002188:	f7ff fb82 	bl	8001890 <sendData>
	//Zobrazit text na displej
	flags.meas.measRequest = 1;	//spustit měření
 800218c:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <startTest+0x90>)
 800218e:	7d1a      	ldrb	r2, [r3, #20]
 8002190:	2101      	movs	r1, #1
 8002192:	430a      	orrs	r2, r1
 8002194:	751a      	strb	r2, [r3, #20]

	flags.instructions.startRequest = 0;
 8002196:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <startTest+0x90>)
 8002198:	7b1a      	ldrb	r2, [r3, #12]
 800219a:	2101      	movs	r1, #1
 800219c:	438a      	bics	r2, r1
 800219e:	731a      	strb	r2, [r3, #12]
}
 80021a0:	46c0      	nop			; (mov r8, r8)
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b002      	add	sp, #8
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000618 	.word	0x20000618
 80021ac:	2000025c 	.word	0x2000025c
 80021b0:	200006b8 	.word	0x200006b8
 80021b4:	200006c8 	.word	0x200006c8
 80021b8:	200006bd 	.word	0x200006bd

080021bc <stopTest>:

//_____Funkce pro ukončení testu_____//
static void stopTest()
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
	flags.ui.longBeep = 1;
 80021c0:	4b15      	ldr	r3, [pc, #84]	; (8002218 <stopTest+0x5c>)
 80021c2:	7c1a      	ldrb	r2, [r3, #16]
 80021c4:	2102      	movs	r1, #2
 80021c6:	430a      	orrs	r2, r1
 80021c8:	741a      	strb	r2, [r3, #16]
	testPhase = WAITING;
 80021ca:	4b14      	ldr	r3, [pc, #80]	; (800221c <stopTest+0x60>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]

	//Zobrazit text na displej
	LOAD_MIN_OFF;
 80021d0:	4b13      	ldr	r3, [pc, #76]	; (8002220 <stopTest+0x64>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	2180      	movs	r1, #128	; 0x80
 80021d6:	0018      	movs	r0, r3
 80021d8:	f001 f949 	bl	800346e <HAL_GPIO_WritePin>
	LOAD_MAX_OFF;
 80021dc:	4b10      	ldr	r3, [pc, #64]	; (8002220 <stopTest+0x64>)
 80021de:	2200      	movs	r2, #0
 80021e0:	2140      	movs	r1, #64	; 0x40
 80021e2:	0018      	movs	r0, r3
 80021e4:	f001 f943 	bl	800346e <HAL_GPIO_WritePin>

	*sourceInTesting = 0;
 80021e8:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <stopTest+0x68>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
	ERROR_ON(*sourceInTesting);
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <stopTest+0x68>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	781a      	ldrb	r2, [r3, #0]
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <stopTest+0x68>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2104      	movs	r1, #4
 80021fc:	430a      	orrs	r2, r1
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	701a      	strb	r2, [r3, #0]
	sendData();
 8002202:	f7ff fb45 	bl	8001890 <sendData>

	flags.instructions.stopRequest = 0;
 8002206:	4b04      	ldr	r3, [pc, #16]	; (8002218 <stopTest+0x5c>)
 8002208:	7b1a      	ldrb	r2, [r3, #12]
 800220a:	2102      	movs	r1, #2
 800220c:	438a      	bics	r2, r1
 800220e:	731a      	strb	r2, [r3, #12]
}
 8002210:	46c0      	nop			; (mov r8, r8)
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	20000618 	.word	0x20000618
 800221c:	2000025c 	.word	0x2000025c
 8002220:	48000800 	.word	0x48000800
 8002224:	200006c8 	.word	0x200006c8

08002228 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002228:	480d      	ldr	r0, [pc, #52]	; (8002260 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800222a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800222c:	480d      	ldr	r0, [pc, #52]	; (8002264 <LoopForever+0x6>)
  ldr r1, =_edata
 800222e:	490e      	ldr	r1, [pc, #56]	; (8002268 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002230:	4a0e      	ldr	r2, [pc, #56]	; (800226c <LoopForever+0xe>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002234:	e002      	b.n	800223c <LoopCopyDataInit>

08002236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223a:	3304      	adds	r3, #4

0800223c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800223c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002240:	d3f9      	bcc.n	8002236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002242:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002244:	4c0b      	ldr	r4, [pc, #44]	; (8002274 <LoopForever+0x16>)
  movs r3, #0
 8002246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002248:	e001      	b.n	800224e <LoopFillZerobss>

0800224a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800224c:	3204      	adds	r2, #4

0800224e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002250:	d3fb      	bcc.n	800224a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002252:	f7ff fd7d 	bl	8001d50 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002256:	f00a fa4b 	bl	800c6f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800225a:	f7fe f925 	bl	80004a8 <main>

0800225e <LoopForever>:

LoopForever:
    b LoopForever
 800225e:	e7fe      	b.n	800225e <LoopForever>
  ldr   r0, =_estack
 8002260:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002268:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800226c:	0800d24c 	.word	0x0800d24c
  ldr r2, =_sbss
 8002270:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002274:	2000166c 	.word	0x2000166c

08002278 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002278:	e7fe      	b.n	8002278 <ADC1_COMP_IRQHandler>
	...

0800227c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002280:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <HAL_Init+0x24>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_Init+0x24>)
 8002286:	2110      	movs	r1, #16
 8002288:	430a      	orrs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800228c:	2003      	movs	r0, #3
 800228e:	f000 f809 	bl	80022a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002292:	f7ff fb31 	bl	80018f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	0018      	movs	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	40022000 	.word	0x40022000

080022a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a4:	b590      	push	{r4, r7, lr}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022ac:	4b14      	ldr	r3, [pc, #80]	; (8002300 <HAL_InitTick+0x5c>)
 80022ae:	681c      	ldr	r4, [r3, #0]
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <HAL_InitTick+0x60>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	0019      	movs	r1, r3
 80022b6:	23fa      	movs	r3, #250	; 0xfa
 80022b8:	0098      	lsls	r0, r3, #2
 80022ba:	f7fd ff37 	bl	800012c <__udivsi3>
 80022be:	0003      	movs	r3, r0
 80022c0:	0019      	movs	r1, r3
 80022c2:	0020      	movs	r0, r4
 80022c4:	f7fd ff32 	bl	800012c <__udivsi3>
 80022c8:	0003      	movs	r3, r0
 80022ca:	0018      	movs	r0, r3
 80022cc:	f000 fd17 	bl	8002cfe <HAL_SYSTICK_Config>
 80022d0:	1e03      	subs	r3, r0, #0
 80022d2:	d001      	beq.n	80022d8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e00f      	b.n	80022f8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d80b      	bhi.n	80022f6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	2301      	movs	r3, #1
 80022e2:	425b      	negs	r3, r3
 80022e4:	2200      	movs	r2, #0
 80022e6:	0018      	movs	r0, r3
 80022e8:	f000 fce4 	bl	8002cb4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022ec:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_InitTick+0x64>)
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	e000      	b.n	80022f8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
}
 80022f8:	0018      	movs	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	b003      	add	sp, #12
 80022fe:	bd90      	pop	{r4, r7, pc}
 8002300:	20000000 	.word	0x20000000
 8002304:	20000008 	.word	0x20000008
 8002308:	20000004 	.word	0x20000004

0800230c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <HAL_IncTick+0x1c>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	001a      	movs	r2, r3
 8002316:	4b05      	ldr	r3, [pc, #20]	; (800232c <HAL_IncTick+0x20>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	18d2      	adds	r2, r2, r3
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <HAL_IncTick+0x20>)
 800231e:	601a      	str	r2, [r3, #0]
}
 8002320:	46c0      	nop			; (mov r8, r8)
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	20000008 	.word	0x20000008
 800232c:	200006cc 	.word	0x200006cc

08002330 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  return uwTick;
 8002334:	4b02      	ldr	r3, [pc, #8]	; (8002340 <HAL_GetTick+0x10>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	0018      	movs	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	200006cc 	.word	0x200006cc

08002344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800234c:	f7ff fff0 	bl	8002330 <HAL_GetTick>
 8002350:	0003      	movs	r3, r0
 8002352:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	3301      	adds	r3, #1
 800235c:	d005      	beq.n	800236a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800235e:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <HAL_Delay+0x44>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	001a      	movs	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	189b      	adds	r3, r3, r2
 8002368:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	f7ff ffe0 	bl	8002330 <HAL_GetTick>
 8002370:	0002      	movs	r2, r0
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	429a      	cmp	r2, r3
 800237a:	d8f7      	bhi.n	800236c <HAL_Delay+0x28>
  {
  }
}
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	46bd      	mov	sp, r7
 8002382:	b004      	add	sp, #16
 8002384:	bd80      	pop	{r7, pc}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	20000008 	.word	0x20000008

0800238c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002394:	230f      	movs	r3, #15
 8002396:	18fb      	adds	r3, r7, r3
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e125      	b.n	80025f6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10a      	bne.n	80023c8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2234      	movs	r2, #52	; 0x34
 80023bc:	2100      	movs	r1, #0
 80023be:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	0018      	movs	r0, r3
 80023c4:	f7ff fabc 	bl	8001940 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023cc:	2210      	movs	r2, #16
 80023ce:	4013      	ands	r3, r2
 80023d0:	d000      	beq.n	80023d4 <HAL_ADC_Init+0x48>
 80023d2:	e103      	b.n	80025dc <HAL_ADC_Init+0x250>
 80023d4:	230f      	movs	r3, #15
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d000      	beq.n	80023e0 <HAL_ADC_Init+0x54>
 80023de:	e0fd      	b.n	80025dc <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2204      	movs	r2, #4
 80023e8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80023ea:	d000      	beq.n	80023ee <HAL_ADC_Init+0x62>
 80023ec:	e0f6      	b.n	80025dc <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f2:	4a83      	ldr	r2, [pc, #524]	; (8002600 <HAL_ADC_Init+0x274>)
 80023f4:	4013      	ands	r3, r2
 80023f6:	2202      	movs	r2, #2
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2203      	movs	r2, #3
 8002406:	4013      	ands	r3, r2
 8002408:	2b01      	cmp	r3, #1
 800240a:	d112      	bne.n	8002432 <HAL_ADC_Init+0xa6>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2201      	movs	r2, #1
 8002414:	4013      	ands	r3, r2
 8002416:	2b01      	cmp	r3, #1
 8002418:	d009      	beq.n	800242e <HAL_ADC_Init+0xa2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	021b      	lsls	r3, r3, #8
 8002424:	401a      	ands	r2, r3
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	021b      	lsls	r3, r3, #8
 800242a:	429a      	cmp	r2, r3
 800242c:	d101      	bne.n	8002432 <HAL_ADC_Init+0xa6>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <HAL_ADC_Init+0xa8>
 8002432:	2300      	movs	r3, #0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d116      	bne.n	8002466 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2218      	movs	r2, #24
 8002440:	4393      	bics	r3, r2
 8002442:	0019      	movs	r1, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	430a      	orrs	r2, r1
 800244e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	0899      	lsrs	r1, r3, #2
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4964      	ldr	r1, [pc, #400]	; (8002604 <HAL_ADC_Init+0x278>)
 8002472:	400a      	ands	r2, r1
 8002474:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	7e1b      	ldrb	r3, [r3, #24]
 800247a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	7e5b      	ldrb	r3, [r3, #25]
 8002480:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002482:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	7e9b      	ldrb	r3, [r3, #26]
 8002488:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800248a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002490:	2b01      	cmp	r3, #1
 8002492:	d002      	beq.n	800249a <HAL_ADC_Init+0x10e>
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	015b      	lsls	r3, r3, #5
 8002498:	e000      	b.n	800249c <HAL_ADC_Init+0x110>
 800249a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800249c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80024a2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d101      	bne.n	80024b0 <HAL_ADC_Init+0x124>
 80024ac:	2304      	movs	r3, #4
 80024ae:	e000      	b.n	80024b2 <HAL_ADC_Init+0x126>
 80024b0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80024b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2124      	movs	r1, #36	; 0x24
 80024b8:	5c5b      	ldrb	r3, [r3, r1]
 80024ba:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80024bc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	7edb      	ldrb	r3, [r3, #27]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d115      	bne.n	80024f8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	7e9b      	ldrb	r3, [r3, #26]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d105      	bne.n	80024e0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2280      	movs	r2, #128	; 0x80
 80024d8:	0252      	lsls	r2, r2, #9
 80024da:	4313      	orrs	r3, r2
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	e00b      	b.n	80024f8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e4:	2220      	movs	r2, #32
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f0:	2201      	movs	r2, #1
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69da      	ldr	r2, [r3, #28]
 80024fc:	23c2      	movs	r3, #194	; 0xc2
 80024fe:	33ff      	adds	r3, #255	; 0xff
 8002500:	429a      	cmp	r2, r3
 8002502:	d007      	beq.n	8002514 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800250c:	4313      	orrs	r3, r2
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	4313      	orrs	r3, r2
 8002512:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68d9      	ldr	r1, [r3, #12]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	430a      	orrs	r2, r1
 8002522:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	055b      	lsls	r3, r3, #21
 800252c:	429a      	cmp	r2, r3
 800252e:	d01b      	beq.n	8002568 <HAL_ADC_Init+0x1dc>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002534:	2b01      	cmp	r3, #1
 8002536:	d017      	beq.n	8002568 <HAL_ADC_Init+0x1dc>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	2b02      	cmp	r3, #2
 800253e:	d013      	beq.n	8002568 <HAL_ADC_Init+0x1dc>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	2b03      	cmp	r3, #3
 8002546:	d00f      	beq.n	8002568 <HAL_ADC_Init+0x1dc>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	2b04      	cmp	r3, #4
 800254e:	d00b      	beq.n	8002568 <HAL_ADC_Init+0x1dc>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	2b05      	cmp	r3, #5
 8002556:	d007      	beq.n	8002568 <HAL_ADC_Init+0x1dc>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	2b06      	cmp	r3, #6
 800255e:	d003      	beq.n	8002568 <HAL_ADC_Init+0x1dc>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	2b07      	cmp	r3, #7
 8002566:	d112      	bne.n	800258e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2107      	movs	r1, #7
 8002574:	438a      	bics	r2, r1
 8002576:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6959      	ldr	r1, [r3, #20]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	2207      	movs	r2, #7
 8002584:	401a      	ands	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	4a1c      	ldr	r2, [pc, #112]	; (8002608 <HAL_ADC_Init+0x27c>)
 8002596:	4013      	ands	r3, r2
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	429a      	cmp	r2, r3
 800259c:	d10b      	bne.n	80025b6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a8:	2203      	movs	r2, #3
 80025aa:	4393      	bics	r3, r2
 80025ac:	2201      	movs	r2, #1
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80025b4:	e01c      	b.n	80025f0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ba:	2212      	movs	r2, #18
 80025bc:	4393      	bics	r3, r2
 80025be:	2210      	movs	r2, #16
 80025c0:	431a      	orrs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ca:	2201      	movs	r2, #1
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80025d2:	230f      	movs	r3, #15
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80025da:	e009      	b.n	80025f0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e0:	2210      	movs	r2, #16
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80025e8:	230f      	movs	r3, #15
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025f0:	230f      	movs	r3, #15
 80025f2:	18fb      	adds	r3, r7, r3
 80025f4:	781b      	ldrb	r3, [r3, #0]
}
 80025f6:	0018      	movs	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	b004      	add	sp, #16
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	fffffefd 	.word	0xfffffefd
 8002604:	fffe0219 	.word	0xfffe0219
 8002608:	833fffe7 	.word	0x833fffe7

0800260c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800260c:	b590      	push	{r4, r7, lr}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002618:	2317      	movs	r3, #23
 800261a:	18fb      	adds	r3, r7, r3
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2204      	movs	r2, #4
 8002628:	4013      	ands	r3, r2
 800262a:	d15e      	bne.n	80026ea <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2234      	movs	r2, #52	; 0x34
 8002630:	5c9b      	ldrb	r3, [r3, r2]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_ADC_Start_DMA+0x2e>
 8002636:	2302      	movs	r3, #2
 8002638:	e05e      	b.n	80026f8 <HAL_ADC_Start_DMA+0xec>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2234      	movs	r2, #52	; 0x34
 800263e:	2101      	movs	r1, #1
 8002640:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	7e5b      	ldrb	r3, [r3, #25]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d007      	beq.n	800265a <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800264a:	2317      	movs	r3, #23
 800264c:	18fc      	adds	r4, r7, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	0018      	movs	r0, r3
 8002652:	f000 f97b 	bl	800294c <ADC_Enable>
 8002656:	0003      	movs	r3, r0
 8002658:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800265a:	2317      	movs	r3, #23
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d146      	bne.n	80026f2 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002668:	4a25      	ldr	r2, [pc, #148]	; (8002700 <HAL_ADC_Start_DMA+0xf4>)
 800266a:	4013      	ands	r3, r2
 800266c:	2280      	movs	r2, #128	; 0x80
 800266e:	0052      	lsls	r2, r2, #1
 8002670:	431a      	orrs	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2234      	movs	r2, #52	; 0x34
 8002680:	2100      	movs	r1, #0
 8002682:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002688:	4a1e      	ldr	r2, [pc, #120]	; (8002704 <HAL_ADC_Start_DMA+0xf8>)
 800268a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	4a1d      	ldr	r2, [pc, #116]	; (8002708 <HAL_ADC_Start_DMA+0xfc>)
 8002692:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002698:	4a1c      	ldr	r2, [pc, #112]	; (800270c <HAL_ADC_Start_DMA+0x100>)
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	221c      	movs	r2, #28
 80026a2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	685a      	ldr	r2, [r3, #4]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2110      	movs	r1, #16
 80026b0:	430a      	orrs	r2, r1
 80026b2:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2101      	movs	r1, #1
 80026c0:	430a      	orrs	r2, r1
 80026c2:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	3340      	adds	r3, #64	; 0x40
 80026ce:	0019      	movs	r1, r3
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f000 fb68 	bl	8002da8 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2104      	movs	r1, #4
 80026e4:	430a      	orrs	r2, r1
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	e003      	b.n	80026f2 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026ea:	2317      	movs	r3, #23
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	2202      	movs	r2, #2
 80026f0:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80026f2:	2317      	movs	r3, #23
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	781b      	ldrb	r3, [r3, #0]
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b007      	add	sp, #28
 80026fe:	bd90      	pop	{r4, r7, pc}
 8002700:	fffff0fe 	.word	0xfffff0fe
 8002704:	08002a55 	.word	0x08002a55
 8002708:	08002b09 	.word	0x08002b09
 800270c:	08002b27 	.word	0x08002b27

08002710 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002718:	46c0      	nop			; (mov r8, r8)
 800271a:	46bd      	mov	sp, r7
 800271c:	b002      	add	sp, #8
 800271e:	bd80      	pop	{r7, pc}

08002720 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002728:	46c0      	nop			; (mov r8, r8)
 800272a:	46bd      	mov	sp, r7
 800272c:	b002      	add	sp, #8
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800273a:	230f      	movs	r3, #15
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	2200      	movs	r2, #0
 8002740:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002742:	2300      	movs	r3, #0
 8002744:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274a:	2380      	movs	r3, #128	; 0x80
 800274c:	055b      	lsls	r3, r3, #21
 800274e:	429a      	cmp	r2, r3
 8002750:	d011      	beq.n	8002776 <HAL_ADC_ConfigChannel+0x46>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002756:	2b01      	cmp	r3, #1
 8002758:	d00d      	beq.n	8002776 <HAL_ADC_ConfigChannel+0x46>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275e:	2b02      	cmp	r3, #2
 8002760:	d009      	beq.n	8002776 <HAL_ADC_ConfigChannel+0x46>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002766:	2b03      	cmp	r3, #3
 8002768:	d005      	beq.n	8002776 <HAL_ADC_ConfigChannel+0x46>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276e:	2b04      	cmp	r3, #4
 8002770:	d001      	beq.n	8002776 <HAL_ADC_ConfigChannel+0x46>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2234      	movs	r2, #52	; 0x34
 800277a:	5c9b      	ldrb	r3, [r3, r2]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x54>
 8002780:	2302      	movs	r3, #2
 8002782:	e0d0      	b.n	8002926 <HAL_ADC_ConfigChannel+0x1f6>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2234      	movs	r2, #52	; 0x34
 8002788:	2101      	movs	r1, #1
 800278a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2204      	movs	r2, #4
 8002794:	4013      	ands	r3, r2
 8002796:	d000      	beq.n	800279a <HAL_ADC_ConfigChannel+0x6a>
 8002798:	e0b4      	b.n	8002904 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	4a64      	ldr	r2, [pc, #400]	; (8002930 <HAL_ADC_ConfigChannel+0x200>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d100      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x76>
 80027a4:	e082      	b.n	80028ac <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2201      	movs	r2, #1
 80027b2:	409a      	lsls	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c0:	2380      	movs	r3, #128	; 0x80
 80027c2:	055b      	lsls	r3, r3, #21
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d037      	beq.n	8002838 <HAL_ADC_ConfigChannel+0x108>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d033      	beq.n	8002838 <HAL_ADC_ConfigChannel+0x108>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d02f      	beq.n	8002838 <HAL_ADC_ConfigChannel+0x108>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d02b      	beq.n	8002838 <HAL_ADC_ConfigChannel+0x108>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	d027      	beq.n	8002838 <HAL_ADC_ConfigChannel+0x108>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	2b05      	cmp	r3, #5
 80027ee:	d023      	beq.n	8002838 <HAL_ADC_ConfigChannel+0x108>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	2b06      	cmp	r3, #6
 80027f6:	d01f      	beq.n	8002838 <HAL_ADC_ConfigChannel+0x108>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	2b07      	cmp	r3, #7
 80027fe:	d01b      	beq.n	8002838 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	2107      	movs	r1, #7
 800280c:	400b      	ands	r3, r1
 800280e:	429a      	cmp	r2, r3
 8002810:	d012      	beq.n	8002838 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695a      	ldr	r2, [r3, #20]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2107      	movs	r1, #7
 800281e:	438a      	bics	r2, r1
 8002820:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6959      	ldr	r1, [r3, #20]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2207      	movs	r2, #7
 800282e:	401a      	ands	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b10      	cmp	r3, #16
 800283e:	d007      	beq.n	8002850 <HAL_ADC_ConfigChannel+0x120>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b11      	cmp	r3, #17
 8002846:	d003      	beq.n	8002850 <HAL_ADC_ConfigChannel+0x120>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b12      	cmp	r3, #18
 800284e:	d163      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002850:	4b38      	ldr	r3, [pc, #224]	; (8002934 <HAL_ADC_ConfigChannel+0x204>)
 8002852:	6819      	ldr	r1, [r3, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b10      	cmp	r3, #16
 800285a:	d009      	beq.n	8002870 <HAL_ADC_ConfigChannel+0x140>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b11      	cmp	r3, #17
 8002862:	d102      	bne.n	800286a <HAL_ADC_ConfigChannel+0x13a>
 8002864:	2380      	movs	r3, #128	; 0x80
 8002866:	03db      	lsls	r3, r3, #15
 8002868:	e004      	b.n	8002874 <HAL_ADC_ConfigChannel+0x144>
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	045b      	lsls	r3, r3, #17
 800286e:	e001      	b.n	8002874 <HAL_ADC_ConfigChannel+0x144>
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	041b      	lsls	r3, r3, #16
 8002874:	4a2f      	ldr	r2, [pc, #188]	; (8002934 <HAL_ADC_ConfigChannel+0x204>)
 8002876:	430b      	orrs	r3, r1
 8002878:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b10      	cmp	r3, #16
 8002880:	d14a      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002882:	4b2d      	ldr	r3, [pc, #180]	; (8002938 <HAL_ADC_ConfigChannel+0x208>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	492d      	ldr	r1, [pc, #180]	; (800293c <HAL_ADC_ConfigChannel+0x20c>)
 8002888:	0018      	movs	r0, r3
 800288a:	f7fd fc4f 	bl	800012c <__udivsi3>
 800288e:	0003      	movs	r3, r0
 8002890:	001a      	movs	r2, r3
 8002892:	0013      	movs	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	189b      	adds	r3, r3, r2
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800289c:	e002      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	3b01      	subs	r3, #1
 80028a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1f9      	bne.n	800289e <HAL_ADC_ConfigChannel+0x16e>
 80028aa:	e035      	b.n	8002918 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2101      	movs	r1, #1
 80028b8:	4099      	lsls	r1, r3
 80028ba:	000b      	movs	r3, r1
 80028bc:	43d9      	mvns	r1, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	400a      	ands	r2, r1
 80028c4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b10      	cmp	r3, #16
 80028cc:	d007      	beq.n	80028de <HAL_ADC_ConfigChannel+0x1ae>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b11      	cmp	r3, #17
 80028d4:	d003      	beq.n	80028de <HAL_ADC_ConfigChannel+0x1ae>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b12      	cmp	r3, #18
 80028dc:	d11c      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80028de:	4b15      	ldr	r3, [pc, #84]	; (8002934 <HAL_ADC_ConfigChannel+0x204>)
 80028e0:	6819      	ldr	r1, [r3, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b10      	cmp	r3, #16
 80028e8:	d007      	beq.n	80028fa <HAL_ADC_ConfigChannel+0x1ca>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b11      	cmp	r3, #17
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x1c6>
 80028f2:	4b13      	ldr	r3, [pc, #76]	; (8002940 <HAL_ADC_ConfigChannel+0x210>)
 80028f4:	e002      	b.n	80028fc <HAL_ADC_ConfigChannel+0x1cc>
 80028f6:	4b13      	ldr	r3, [pc, #76]	; (8002944 <HAL_ADC_ConfigChannel+0x214>)
 80028f8:	e000      	b.n	80028fc <HAL_ADC_ConfigChannel+0x1cc>
 80028fa:	4b13      	ldr	r3, [pc, #76]	; (8002948 <HAL_ADC_ConfigChannel+0x218>)
 80028fc:	4a0d      	ldr	r2, [pc, #52]	; (8002934 <HAL_ADC_ConfigChannel+0x204>)
 80028fe:	400b      	ands	r3, r1
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	e009      	b.n	8002918 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002908:	2220      	movs	r2, #32
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002910:	230f      	movs	r3, #15
 8002912:	18fb      	adds	r3, r7, r3
 8002914:	2201      	movs	r2, #1
 8002916:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2234      	movs	r2, #52	; 0x34
 800291c:	2100      	movs	r1, #0
 800291e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002920:	230f      	movs	r3, #15
 8002922:	18fb      	adds	r3, r7, r3
 8002924:	781b      	ldrb	r3, [r3, #0]
}
 8002926:	0018      	movs	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	b004      	add	sp, #16
 800292c:	bd80      	pop	{r7, pc}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	00001001 	.word	0x00001001
 8002934:	40012708 	.word	0x40012708
 8002938:	20000000 	.word	0x20000000
 800293c:	000f4240 	.word	0x000f4240
 8002940:	ffbfffff 	.word	0xffbfffff
 8002944:	feffffff 	.word	0xfeffffff
 8002948:	ff7fffff 	.word	0xff7fffff

0800294c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002958:	2300      	movs	r3, #0
 800295a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	2203      	movs	r2, #3
 8002964:	4013      	ands	r3, r2
 8002966:	2b01      	cmp	r3, #1
 8002968:	d112      	bne.n	8002990 <ADC_Enable+0x44>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2201      	movs	r2, #1
 8002972:	4013      	ands	r3, r2
 8002974:	2b01      	cmp	r3, #1
 8002976:	d009      	beq.n	800298c <ADC_Enable+0x40>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68da      	ldr	r2, [r3, #12]
 800297e:	2380      	movs	r3, #128	; 0x80
 8002980:	021b      	lsls	r3, r3, #8
 8002982:	401a      	ands	r2, r3
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	429a      	cmp	r2, r3
 800298a:	d101      	bne.n	8002990 <ADC_Enable+0x44>
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <ADC_Enable+0x46>
 8002990:	2300      	movs	r3, #0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d152      	bne.n	8002a3c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	4a2a      	ldr	r2, [pc, #168]	; (8002a48 <ADC_Enable+0xfc>)
 800299e:	4013      	ands	r3, r2
 80029a0:	d00d      	beq.n	80029be <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a6:	2210      	movs	r2, #16
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b2:	2201      	movs	r2, #1
 80029b4:	431a      	orrs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e03f      	b.n	8002a3e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2101      	movs	r1, #1
 80029ca:	430a      	orrs	r2, r1
 80029cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029ce:	4b1f      	ldr	r3, [pc, #124]	; (8002a4c <ADC_Enable+0x100>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	491f      	ldr	r1, [pc, #124]	; (8002a50 <ADC_Enable+0x104>)
 80029d4:	0018      	movs	r0, r3
 80029d6:	f7fd fba9 	bl	800012c <__udivsi3>
 80029da:	0003      	movs	r3, r0
 80029dc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029de:	e002      	b.n	80029e6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f9      	bne.n	80029e0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80029ec:	f7ff fca0 	bl	8002330 <HAL_GetTick>
 80029f0:	0003      	movs	r3, r0
 80029f2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029f4:	e01b      	b.n	8002a2e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029f6:	f7ff fc9b 	bl	8002330 <HAL_GetTick>
 80029fa:	0002      	movs	r2, r0
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d914      	bls.n	8002a2e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d00d      	beq.n	8002a2e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a16:	2210      	movs	r2, #16
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a22:	2201      	movs	r2, #1
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e007      	b.n	8002a3e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2201      	movs	r2, #1
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d1dc      	bne.n	80029f6 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	0018      	movs	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b004      	add	sp, #16
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	80000017 	.word	0x80000017
 8002a4c:	20000000 	.word	0x20000000
 8002a50:	000f4240 	.word	0x000f4240

08002a54 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a66:	2250      	movs	r2, #80	; 0x50
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d140      	bne.n	8002aee <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a70:	2280      	movs	r2, #128	; 0x80
 8002a72:	0092      	lsls	r2, r2, #2
 8002a74:	431a      	orrs	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	23c0      	movs	r3, #192	; 0xc0
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	4013      	ands	r3, r2
 8002a86:	d12d      	bne.n	8002ae4 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d129      	bne.n	8002ae4 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2208      	movs	r2, #8
 8002a98:	4013      	ands	r3, r2
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d122      	bne.n	8002ae4 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	2204      	movs	r2, #4
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d110      	bne.n	8002acc <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	210c      	movs	r1, #12
 8002ab6:	438a      	bics	r2, r1
 8002ab8:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abe:	4a11      	ldr	r2, [pc, #68]	; (8002b04 <ADC_DMAConvCplt+0xb0>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	639a      	str	r2, [r3, #56]	; 0x38
 8002aca:	e00b      	b.n	8002ae4 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002adc:	2201      	movs	r2, #1
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f7fd fcce 	bl	8000488 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002aec:	e005      	b.n	8002afa <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	0010      	movs	r0, r2
 8002af8:	4798      	blx	r3
}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	46bd      	mov	sp, r7
 8002afe:	b004      	add	sp, #16
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	46c0      	nop			; (mov r8, r8)
 8002b04:	fffffefe 	.word	0xfffffefe

08002b08 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f7ff fdf9 	bl	8002710 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b004      	add	sp, #16
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b084      	sub	sp, #16
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b38:	2240      	movs	r2, #64	; 0x40
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b44:	2204      	movs	r2, #4
 8002b46:	431a      	orrs	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f7ff fde6 	bl	8002720 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b54:	46c0      	nop			; (mov r8, r8)
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b004      	add	sp, #16
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	0002      	movs	r2, r0
 8002b64:	1dfb      	adds	r3, r7, #7
 8002b66:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b68:	1dfb      	adds	r3, r7, #7
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b7f      	cmp	r3, #127	; 0x7f
 8002b6e:	d809      	bhi.n	8002b84 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b70:	1dfb      	adds	r3, r7, #7
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	001a      	movs	r2, r3
 8002b76:	231f      	movs	r3, #31
 8002b78:	401a      	ands	r2, r3
 8002b7a:	4b04      	ldr	r3, [pc, #16]	; (8002b8c <__NVIC_EnableIRQ+0x30>)
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	4091      	lsls	r1, r2
 8002b80:	000a      	movs	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]
  }
}
 8002b84:	46c0      	nop			; (mov r8, r8)
 8002b86:	46bd      	mov	sp, r7
 8002b88:	b002      	add	sp, #8
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	e000e100 	.word	0xe000e100

08002b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b90:	b590      	push	{r4, r7, lr}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	0002      	movs	r2, r0
 8002b98:	6039      	str	r1, [r7, #0]
 8002b9a:	1dfb      	adds	r3, r7, #7
 8002b9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b9e:	1dfb      	adds	r3, r7, #7
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b7f      	cmp	r3, #127	; 0x7f
 8002ba4:	d828      	bhi.n	8002bf8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ba6:	4a2f      	ldr	r2, [pc, #188]	; (8002c64 <__NVIC_SetPriority+0xd4>)
 8002ba8:	1dfb      	adds	r3, r7, #7
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	b25b      	sxtb	r3, r3
 8002bae:	089b      	lsrs	r3, r3, #2
 8002bb0:	33c0      	adds	r3, #192	; 0xc0
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	589b      	ldr	r3, [r3, r2]
 8002bb6:	1dfa      	adds	r2, r7, #7
 8002bb8:	7812      	ldrb	r2, [r2, #0]
 8002bba:	0011      	movs	r1, r2
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	400a      	ands	r2, r1
 8002bc0:	00d2      	lsls	r2, r2, #3
 8002bc2:	21ff      	movs	r1, #255	; 0xff
 8002bc4:	4091      	lsls	r1, r2
 8002bc6:	000a      	movs	r2, r1
 8002bc8:	43d2      	mvns	r2, r2
 8002bca:	401a      	ands	r2, r3
 8002bcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	019b      	lsls	r3, r3, #6
 8002bd2:	22ff      	movs	r2, #255	; 0xff
 8002bd4:	401a      	ands	r2, r3
 8002bd6:	1dfb      	adds	r3, r7, #7
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	0018      	movs	r0, r3
 8002bdc:	2303      	movs	r3, #3
 8002bde:	4003      	ands	r3, r0
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002be4:	481f      	ldr	r0, [pc, #124]	; (8002c64 <__NVIC_SetPriority+0xd4>)
 8002be6:	1dfb      	adds	r3, r7, #7
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	b25b      	sxtb	r3, r3
 8002bec:	089b      	lsrs	r3, r3, #2
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	33c0      	adds	r3, #192	; 0xc0
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002bf6:	e031      	b.n	8002c5c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bf8:	4a1b      	ldr	r2, [pc, #108]	; (8002c68 <__NVIC_SetPriority+0xd8>)
 8002bfa:	1dfb      	adds	r3, r7, #7
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	0019      	movs	r1, r3
 8002c00:	230f      	movs	r3, #15
 8002c02:	400b      	ands	r3, r1
 8002c04:	3b08      	subs	r3, #8
 8002c06:	089b      	lsrs	r3, r3, #2
 8002c08:	3306      	adds	r3, #6
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	18d3      	adds	r3, r2, r3
 8002c0e:	3304      	adds	r3, #4
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	1dfa      	adds	r2, r7, #7
 8002c14:	7812      	ldrb	r2, [r2, #0]
 8002c16:	0011      	movs	r1, r2
 8002c18:	2203      	movs	r2, #3
 8002c1a:	400a      	ands	r2, r1
 8002c1c:	00d2      	lsls	r2, r2, #3
 8002c1e:	21ff      	movs	r1, #255	; 0xff
 8002c20:	4091      	lsls	r1, r2
 8002c22:	000a      	movs	r2, r1
 8002c24:	43d2      	mvns	r2, r2
 8002c26:	401a      	ands	r2, r3
 8002c28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	019b      	lsls	r3, r3, #6
 8002c2e:	22ff      	movs	r2, #255	; 0xff
 8002c30:	401a      	ands	r2, r3
 8002c32:	1dfb      	adds	r3, r7, #7
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	0018      	movs	r0, r3
 8002c38:	2303      	movs	r3, #3
 8002c3a:	4003      	ands	r3, r0
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c40:	4809      	ldr	r0, [pc, #36]	; (8002c68 <__NVIC_SetPriority+0xd8>)
 8002c42:	1dfb      	adds	r3, r7, #7
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	001c      	movs	r4, r3
 8002c48:	230f      	movs	r3, #15
 8002c4a:	4023      	ands	r3, r4
 8002c4c:	3b08      	subs	r3, #8
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	430a      	orrs	r2, r1
 8002c52:	3306      	adds	r3, #6
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	18c3      	adds	r3, r0, r3
 8002c58:	3304      	adds	r3, #4
 8002c5a:	601a      	str	r2, [r3, #0]
}
 8002c5c:	46c0      	nop			; (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b003      	add	sp, #12
 8002c62:	bd90      	pop	{r4, r7, pc}
 8002c64:	e000e100 	.word	0xe000e100
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	1e5a      	subs	r2, r3, #1
 8002c78:	2380      	movs	r3, #128	; 0x80
 8002c7a:	045b      	lsls	r3, r3, #17
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d301      	bcc.n	8002c84 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c80:	2301      	movs	r3, #1
 8002c82:	e010      	b.n	8002ca6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c84:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <SysTick_Config+0x44>)
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	3a01      	subs	r2, #1
 8002c8a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	425b      	negs	r3, r3
 8002c90:	2103      	movs	r1, #3
 8002c92:	0018      	movs	r0, r3
 8002c94:	f7ff ff7c 	bl	8002b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c98:	4b05      	ldr	r3, [pc, #20]	; (8002cb0 <SysTick_Config+0x44>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c9e:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <SysTick_Config+0x44>)
 8002ca0:	2207      	movs	r2, #7
 8002ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b002      	add	sp, #8
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	e000e010 	.word	0xe000e010

08002cb4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
 8002cbe:	210f      	movs	r1, #15
 8002cc0:	187b      	adds	r3, r7, r1
 8002cc2:	1c02      	adds	r2, r0, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	187b      	adds	r3, r7, r1
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	b25b      	sxtb	r3, r3
 8002cce:	0011      	movs	r1, r2
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f7ff ff5d 	bl	8002b90 <__NVIC_SetPriority>
}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	b004      	add	sp, #16
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	0002      	movs	r2, r0
 8002ce6:	1dfb      	adds	r3, r7, #7
 8002ce8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cea:	1dfb      	adds	r3, r7, #7
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	b25b      	sxtb	r3, r3
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	f7ff ff33 	bl	8002b5c <__NVIC_EnableIRQ>
}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	b002      	add	sp, #8
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f7ff ffaf 	bl	8002c6c <SysTick_Config>
 8002d0e:	0003      	movs	r3, r0
}
 8002d10:	0018      	movs	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	b002      	add	sp, #8
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e036      	b.n	8002d9c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2221      	movs	r2, #33	; 0x21
 8002d32:	2102      	movs	r1, #2
 8002d34:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4a18      	ldr	r2, [pc, #96]	; (8002da4 <HAL_DMA_Init+0x8c>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	69db      	ldr	r3, [r3, #28]
 8002d6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f000 f9c4 	bl	800310c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2221      	movs	r2, #33	; 0x21
 8002d8e:	2101      	movs	r1, #1
 8002d90:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2220      	movs	r2, #32
 8002d96:	2100      	movs	r1, #0
 8002d98:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}  
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b004      	add	sp, #16
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	ffffc00f 	.word	0xffffc00f

08002da8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002db6:	2317      	movs	r3, #23
 8002db8:	18fb      	adds	r3, r7, r3
 8002dba:	2200      	movs	r2, #0
 8002dbc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	5c9b      	ldrb	r3, [r3, r2]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_DMA_Start_IT+0x24>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e04f      	b.n	8002e6c <HAL_DMA_Start_IT+0xc4>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2221      	movs	r2, #33	; 0x21
 8002dd8:	5c9b      	ldrb	r3, [r3, r2]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d13a      	bne.n	8002e56 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2221      	movs	r2, #33	; 0x21
 8002de4:	2102      	movs	r1, #2
 8002de6:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2101      	movs	r1, #1
 8002dfa:	438a      	bics	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	f000 f954 	bl	80030b2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d008      	beq.n	8002e24 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	210e      	movs	r1, #14
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	e00f      	b.n	8002e44 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	210a      	movs	r1, #10
 8002e30:	430a      	orrs	r2, r1
 8002e32:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2104      	movs	r1, #4
 8002e40:	438a      	bics	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2101      	movs	r1, #1
 8002e50:	430a      	orrs	r2, r1
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	e007      	b.n	8002e66 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002e5e:	2317      	movs	r3, #23
 8002e60:	18fb      	adds	r3, r7, r3
 8002e62:	2202      	movs	r2, #2
 8002e64:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002e66:	2317      	movs	r3, #23
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	781b      	ldrb	r3, [r3, #0]
} 
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b006      	add	sp, #24
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2221      	movs	r2, #33	; 0x21
 8002e80:	5c9b      	ldrb	r3, [r3, r2]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d008      	beq.n	8002e9a <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2204      	movs	r2, #4
 8002e8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2220      	movs	r2, #32
 8002e92:	2100      	movs	r1, #0
 8002e94:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e020      	b.n	8002edc <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	210e      	movs	r1, #14
 8002ea6:	438a      	bics	r2, r1
 8002ea8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	438a      	bics	r2, r1
 8002eb8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	4091      	lsls	r1, r2
 8002ec6:	000a      	movs	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2221      	movs	r2, #33	; 0x21
 8002ece:	2101      	movs	r1, #1
 8002ed0:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	0018      	movs	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b002      	add	sp, #8
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eec:	210f      	movs	r1, #15
 8002eee:	187b      	adds	r3, r7, r1
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2221      	movs	r2, #33	; 0x21
 8002ef8:	5c9b      	ldrb	r3, [r3, r2]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d006      	beq.n	8002f0e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2204      	movs	r2, #4
 8002f04:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f06:	187b      	adds	r3, r7, r1
 8002f08:	2201      	movs	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
 8002f0c:	e028      	b.n	8002f60 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	210e      	movs	r1, #14
 8002f1a:	438a      	bics	r2, r1
 8002f1c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2101      	movs	r1, #1
 8002f2a:	438a      	bics	r2, r1
 8002f2c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f36:	2101      	movs	r1, #1
 8002f38:	4091      	lsls	r1, r2
 8002f3a:	000a      	movs	r2, r1
 8002f3c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2221      	movs	r2, #33	; 0x21
 8002f42:	2101      	movs	r1, #1
 8002f44:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d004      	beq.n	8002f60 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	0010      	movs	r0, r2
 8002f5e:	4798      	blx	r3
    } 
  }
  return status;
 8002f60:	230f      	movs	r3, #15
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	781b      	ldrb	r3, [r3, #0]
}
 8002f66:	0018      	movs	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	b004      	add	sp, #16
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	409a      	lsls	r2, r3
 8002f8e:	0013      	movs	r3, r2
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4013      	ands	r3, r2
 8002f94:	d024      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0x72>
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2204      	movs	r2, #4
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d020      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d107      	bne.n	8002fba <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2104      	movs	r1, #4
 8002fb6:	438a      	bics	r2, r1
 8002fb8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc2:	2104      	movs	r1, #4
 8002fc4:	4091      	lsls	r1, r2
 8002fc6:	000a      	movs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d100      	bne.n	8002fd4 <HAL_DMA_IRQHandler+0x66>
 8002fd2:	e06a      	b.n	80030aa <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	0010      	movs	r0, r2
 8002fdc:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002fde:	e064      	b.n	80030aa <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	0013      	movs	r3, r2
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4013      	ands	r3, r2
 8002fee:	d02b      	beq.n	8003048 <HAL_DMA_IRQHandler+0xda>
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d027      	beq.n	8003048 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2220      	movs	r2, #32
 8003000:	4013      	ands	r3, r2
 8003002:	d10b      	bne.n	800301c <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	210a      	movs	r1, #10
 8003010:	438a      	bics	r2, r1
 8003012:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2221      	movs	r2, #33	; 0x21
 8003018:	2101      	movs	r1, #1
 800301a:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003024:	2102      	movs	r1, #2
 8003026:	4091      	lsls	r1, r2
 8003028:	000a      	movs	r2, r1
 800302a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2220      	movs	r2, #32
 8003030:	2100      	movs	r1, #0
 8003032:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003038:	2b00      	cmp	r3, #0
 800303a:	d036      	beq.n	80030aa <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	0010      	movs	r0, r2
 8003044:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003046:	e030      	b.n	80030aa <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	2208      	movs	r2, #8
 800304e:	409a      	lsls	r2, r3
 8003050:	0013      	movs	r3, r2
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4013      	ands	r3, r2
 8003056:	d028      	beq.n	80030aa <HAL_DMA_IRQHandler+0x13c>
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2208      	movs	r2, #8
 800305c:	4013      	ands	r3, r2
 800305e:	d024      	beq.n	80030aa <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	210e      	movs	r1, #14
 800306c:	438a      	bics	r2, r1
 800306e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003078:	2101      	movs	r1, #1
 800307a:	4091      	lsls	r1, r2
 800307c:	000a      	movs	r2, r1
 800307e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2221      	movs	r2, #33	; 0x21
 800308a:	2101      	movs	r1, #1
 800308c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2220      	movs	r2, #32
 8003092:	2100      	movs	r1, #0
 8003094:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	2b00      	cmp	r3, #0
 800309c:	d005      	beq.n	80030aa <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	0010      	movs	r0, r2
 80030a6:	4798      	blx	r3
    }
   }
}  
 80030a8:	e7ff      	b.n	80030aa <HAL_DMA_IRQHandler+0x13c>
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	46bd      	mov	sp, r7
 80030ae:	b004      	add	sp, #16
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b084      	sub	sp, #16
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c8:	2101      	movs	r1, #1
 80030ca:	4091      	lsls	r1, r2
 80030cc:	000a      	movs	r2, r1
 80030ce:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b10      	cmp	r3, #16
 80030de:	d108      	bne.n	80030f2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030f0:	e007      	b.n	8003102 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	60da      	str	r2, [r3, #12]
}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	46bd      	mov	sp, r7
 8003106:	b004      	add	sp, #16
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a08      	ldr	r2, [pc, #32]	; (800313c <DMA_CalcBaseAndBitshift+0x30>)
 800311a:	4694      	mov	ip, r2
 800311c:	4463      	add	r3, ip
 800311e:	2114      	movs	r1, #20
 8003120:	0018      	movs	r0, r3
 8003122:	f7fd f803 	bl	800012c <__udivsi3>
 8003126:	0003      	movs	r3, r0
 8003128:	009a      	lsls	r2, r3, #2
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a03      	ldr	r2, [pc, #12]	; (8003140 <DMA_CalcBaseAndBitshift+0x34>)
 8003132:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003134:	46c0      	nop			; (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	b002      	add	sp, #8
 800313a:	bd80      	pop	{r7, pc}
 800313c:	bffdfff8 	.word	0xbffdfff8
 8003140:	40020000 	.word	0x40020000

08003144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800314e:	2300      	movs	r3, #0
 8003150:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003152:	e155      	b.n	8003400 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2101      	movs	r1, #1
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4091      	lsls	r1, r2
 800315e:	000a      	movs	r2, r1
 8003160:	4013      	ands	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d100      	bne.n	800316c <HAL_GPIO_Init+0x28>
 800316a:	e146      	b.n	80033fa <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2203      	movs	r2, #3
 8003172:	4013      	ands	r3, r2
 8003174:	2b01      	cmp	r3, #1
 8003176:	d005      	beq.n	8003184 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2203      	movs	r2, #3
 800317e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003180:	2b02      	cmp	r3, #2
 8003182:	d130      	bne.n	80031e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	2203      	movs	r2, #3
 8003190:	409a      	lsls	r2, r3
 8003192:	0013      	movs	r3, r2
 8003194:	43da      	mvns	r2, r3
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4013      	ands	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	005b      	lsls	r3, r3, #1
 80031a4:	409a      	lsls	r2, r3
 80031a6:	0013      	movs	r3, r2
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031ba:	2201      	movs	r2, #1
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	409a      	lsls	r2, r3
 80031c0:	0013      	movs	r3, r2
 80031c2:	43da      	mvns	r2, r3
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4013      	ands	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	091b      	lsrs	r3, r3, #4
 80031d0:	2201      	movs	r2, #1
 80031d2:	401a      	ands	r2, r3
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	409a      	lsls	r2, r3
 80031d8:	0013      	movs	r3, r2
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2203      	movs	r2, #3
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d017      	beq.n	8003222 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	2203      	movs	r2, #3
 80031fe:	409a      	lsls	r2, r3
 8003200:	0013      	movs	r3, r2
 8003202:	43da      	mvns	r2, r3
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4013      	ands	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	409a      	lsls	r2, r3
 8003214:	0013      	movs	r3, r2
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2203      	movs	r2, #3
 8003228:	4013      	ands	r3, r2
 800322a:	2b02      	cmp	r3, #2
 800322c:	d123      	bne.n	8003276 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	08da      	lsrs	r2, r3, #3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3208      	adds	r2, #8
 8003236:	0092      	lsls	r2, r2, #2
 8003238:	58d3      	ldr	r3, [r2, r3]
 800323a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	2207      	movs	r2, #7
 8003240:	4013      	ands	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	220f      	movs	r2, #15
 8003246:	409a      	lsls	r2, r3
 8003248:	0013      	movs	r3, r2
 800324a:	43da      	mvns	r2, r3
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4013      	ands	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2107      	movs	r1, #7
 800325a:	400b      	ands	r3, r1
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	409a      	lsls	r2, r3
 8003260:	0013      	movs	r3, r2
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	08da      	lsrs	r2, r3, #3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3208      	adds	r2, #8
 8003270:	0092      	lsls	r2, r2, #2
 8003272:	6939      	ldr	r1, [r7, #16]
 8003274:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	2203      	movs	r2, #3
 8003282:	409a      	lsls	r2, r3
 8003284:	0013      	movs	r3, r2
 8003286:	43da      	mvns	r2, r3
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	4013      	ands	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2203      	movs	r2, #3
 8003294:	401a      	ands	r2, r3
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	409a      	lsls	r2, r3
 800329c:	0013      	movs	r3, r2
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	23c0      	movs	r3, #192	; 0xc0
 80032b0:	029b      	lsls	r3, r3, #10
 80032b2:	4013      	ands	r3, r2
 80032b4:	d100      	bne.n	80032b8 <HAL_GPIO_Init+0x174>
 80032b6:	e0a0      	b.n	80033fa <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b8:	4b57      	ldr	r3, [pc, #348]	; (8003418 <HAL_GPIO_Init+0x2d4>)
 80032ba:	699a      	ldr	r2, [r3, #24]
 80032bc:	4b56      	ldr	r3, [pc, #344]	; (8003418 <HAL_GPIO_Init+0x2d4>)
 80032be:	2101      	movs	r1, #1
 80032c0:	430a      	orrs	r2, r1
 80032c2:	619a      	str	r2, [r3, #24]
 80032c4:	4b54      	ldr	r3, [pc, #336]	; (8003418 <HAL_GPIO_Init+0x2d4>)
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	2201      	movs	r2, #1
 80032ca:	4013      	ands	r3, r2
 80032cc:	60bb      	str	r3, [r7, #8]
 80032ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032d0:	4a52      	ldr	r2, [pc, #328]	; (800341c <HAL_GPIO_Init+0x2d8>)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	089b      	lsrs	r3, r3, #2
 80032d6:	3302      	adds	r3, #2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	589b      	ldr	r3, [r3, r2]
 80032dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2203      	movs	r2, #3
 80032e2:	4013      	ands	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	220f      	movs	r2, #15
 80032e8:	409a      	lsls	r2, r3
 80032ea:	0013      	movs	r3, r2
 80032ec:	43da      	mvns	r2, r3
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	2390      	movs	r3, #144	; 0x90
 80032f8:	05db      	lsls	r3, r3, #23
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d019      	beq.n	8003332 <HAL_GPIO_Init+0x1ee>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a47      	ldr	r2, [pc, #284]	; (8003420 <HAL_GPIO_Init+0x2dc>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d013      	beq.n	800332e <HAL_GPIO_Init+0x1ea>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a46      	ldr	r2, [pc, #280]	; (8003424 <HAL_GPIO_Init+0x2e0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d00d      	beq.n	800332a <HAL_GPIO_Init+0x1e6>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a45      	ldr	r2, [pc, #276]	; (8003428 <HAL_GPIO_Init+0x2e4>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d007      	beq.n	8003326 <HAL_GPIO_Init+0x1e2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a44      	ldr	r2, [pc, #272]	; (800342c <HAL_GPIO_Init+0x2e8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d101      	bne.n	8003322 <HAL_GPIO_Init+0x1de>
 800331e:	2304      	movs	r3, #4
 8003320:	e008      	b.n	8003334 <HAL_GPIO_Init+0x1f0>
 8003322:	2305      	movs	r3, #5
 8003324:	e006      	b.n	8003334 <HAL_GPIO_Init+0x1f0>
 8003326:	2303      	movs	r3, #3
 8003328:	e004      	b.n	8003334 <HAL_GPIO_Init+0x1f0>
 800332a:	2302      	movs	r3, #2
 800332c:	e002      	b.n	8003334 <HAL_GPIO_Init+0x1f0>
 800332e:	2301      	movs	r3, #1
 8003330:	e000      	b.n	8003334 <HAL_GPIO_Init+0x1f0>
 8003332:	2300      	movs	r3, #0
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	2103      	movs	r1, #3
 8003338:	400a      	ands	r2, r1
 800333a:	0092      	lsls	r2, r2, #2
 800333c:	4093      	lsls	r3, r2
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003344:	4935      	ldr	r1, [pc, #212]	; (800341c <HAL_GPIO_Init+0x2d8>)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	089b      	lsrs	r3, r3, #2
 800334a:	3302      	adds	r3, #2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003352:	4b37      	ldr	r3, [pc, #220]	; (8003430 <HAL_GPIO_Init+0x2ec>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	43da      	mvns	r2, r3
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4013      	ands	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685a      	ldr	r2, [r3, #4]
 8003366:	2380      	movs	r3, #128	; 0x80
 8003368:	025b      	lsls	r3, r3, #9
 800336a:	4013      	ands	r3, r2
 800336c:	d003      	beq.n	8003376 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003376:	4b2e      	ldr	r3, [pc, #184]	; (8003430 <HAL_GPIO_Init+0x2ec>)
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800337c:	4b2c      	ldr	r3, [pc, #176]	; (8003430 <HAL_GPIO_Init+0x2ec>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	43da      	mvns	r2, r3
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4013      	ands	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	2380      	movs	r3, #128	; 0x80
 8003392:	029b      	lsls	r3, r3, #10
 8003394:	4013      	ands	r3, r2
 8003396:	d003      	beq.n	80033a0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80033a0:	4b23      	ldr	r3, [pc, #140]	; (8003430 <HAL_GPIO_Init+0x2ec>)
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033a6:	4b22      	ldr	r3, [pc, #136]	; (8003430 <HAL_GPIO_Init+0x2ec>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	43da      	mvns	r2, r3
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4013      	ands	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	2380      	movs	r3, #128	; 0x80
 80033bc:	035b      	lsls	r3, r3, #13
 80033be:	4013      	ands	r3, r2
 80033c0:	d003      	beq.n	80033ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80033ca:	4b19      	ldr	r3, [pc, #100]	; (8003430 <HAL_GPIO_Init+0x2ec>)
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80033d0:	4b17      	ldr	r3, [pc, #92]	; (8003430 <HAL_GPIO_Init+0x2ec>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	43da      	mvns	r2, r3
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4013      	ands	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	2380      	movs	r3, #128	; 0x80
 80033e6:	039b      	lsls	r3, r3, #14
 80033e8:	4013      	ands	r3, r2
 80033ea:	d003      	beq.n	80033f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80033f4:	4b0e      	ldr	r3, [pc, #56]	; (8003430 <HAL_GPIO_Init+0x2ec>)
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	3301      	adds	r3, #1
 80033fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	40da      	lsrs	r2, r3
 8003408:	1e13      	subs	r3, r2, #0
 800340a:	d000      	beq.n	800340e <HAL_GPIO_Init+0x2ca>
 800340c:	e6a2      	b.n	8003154 <HAL_GPIO_Init+0x10>
  } 
}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	46c0      	nop			; (mov r8, r8)
 8003412:	46bd      	mov	sp, r7
 8003414:	b006      	add	sp, #24
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40021000 	.word	0x40021000
 800341c:	40010000 	.word	0x40010000
 8003420:	48000400 	.word	0x48000400
 8003424:	48000800 	.word	0x48000800
 8003428:	48000c00 	.word	0x48000c00
 800342c:	48001000 	.word	0x48001000
 8003430:	40010400 	.word	0x40010400

08003434 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	000a      	movs	r2, r1
 800343e:	1cbb      	adds	r3, r7, #2
 8003440:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	1cba      	adds	r2, r7, #2
 8003448:	8812      	ldrh	r2, [r2, #0]
 800344a:	4013      	ands	r3, r2
 800344c:	d004      	beq.n	8003458 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800344e:	230f      	movs	r3, #15
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	2201      	movs	r2, #1
 8003454:	701a      	strb	r2, [r3, #0]
 8003456:	e003      	b.n	8003460 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003458:	230f      	movs	r3, #15
 800345a:	18fb      	adds	r3, r7, r3
 800345c:	2200      	movs	r2, #0
 800345e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003460:	230f      	movs	r3, #15
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	781b      	ldrb	r3, [r3, #0]
  }
 8003466:	0018      	movs	r0, r3
 8003468:	46bd      	mov	sp, r7
 800346a:	b004      	add	sp, #16
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	0008      	movs	r0, r1
 8003478:	0011      	movs	r1, r2
 800347a:	1cbb      	adds	r3, r7, #2
 800347c:	1c02      	adds	r2, r0, #0
 800347e:	801a      	strh	r2, [r3, #0]
 8003480:	1c7b      	adds	r3, r7, #1
 8003482:	1c0a      	adds	r2, r1, #0
 8003484:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003486:	1c7b      	adds	r3, r7, #1
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d004      	beq.n	8003498 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800348e:	1cbb      	adds	r3, r7, #2
 8003490:	881a      	ldrh	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003496:	e003      	b.n	80034a0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003498:	1cbb      	adds	r3, r7, #2
 800349a:	881a      	ldrh	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034a0:	46c0      	nop			; (mov r8, r8)
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b002      	add	sp, #8
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	000a      	movs	r2, r1
 80034b2:	1cbb      	adds	r3, r7, #2
 80034b4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034bc:	1cbb      	adds	r3, r7, #2
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4013      	ands	r3, r2
 80034c4:	041a      	lsls	r2, r3, #16
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	43db      	mvns	r3, r3
 80034ca:	1cb9      	adds	r1, r7, #2
 80034cc:	8809      	ldrh	r1, [r1, #0]
 80034ce:	400b      	ands	r3, r1
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	619a      	str	r2, [r3, #24]
}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	46bd      	mov	sp, r7
 80034da:	b004      	add	sp, #16
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	0002      	movs	r2, r0
 80034e8:	1dbb      	adds	r3, r7, #6
 80034ea:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034ec:	4b09      	ldr	r3, [pc, #36]	; (8003514 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	1dba      	adds	r2, r7, #6
 80034f2:	8812      	ldrh	r2, [r2, #0]
 80034f4:	4013      	ands	r3, r2
 80034f6:	d008      	beq.n	800350a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034f8:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80034fa:	1dba      	adds	r2, r7, #6
 80034fc:	8812      	ldrh	r2, [r2, #0]
 80034fe:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003500:	1dbb      	adds	r3, r7, #6
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	0018      	movs	r0, r3
 8003506:	f7fc ff87 	bl	8000418 <HAL_GPIO_EXTI_Callback>
  }
}
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	46bd      	mov	sp, r7
 800350e:	b002      	add	sp, #8
 8003510:	bd80      	pop	{r7, pc}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	40010400 	.word	0x40010400

08003518 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800351a:	b08b      	sub	sp, #44	; 0x2c
 800351c:	af06      	add	r7, sp, #24
 800351e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e0ff      	b.n	800372a <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a81      	ldr	r2, [pc, #516]	; (8003734 <HAL_PCD_Init+0x21c>)
 800352e:	5c9b      	ldrb	r3, [r3, r2]
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d108      	bne.n	8003548 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	23aa      	movs	r3, #170	; 0xaa
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	2100      	movs	r1, #0
 800353e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	0018      	movs	r0, r3
 8003544:	f008 fd70 	bl	800c028 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a7a      	ldr	r2, [pc, #488]	; (8003734 <HAL_PCD_Init+0x21c>)
 800354c:	2103      	movs	r1, #3
 800354e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	0018      	movs	r0, r3
 8003556:	f004 fe0f 	bl	8008178 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800355a:	230f      	movs	r3, #15
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	2200      	movs	r2, #0
 8003560:	701a      	strb	r2, [r3, #0]
 8003562:	e058      	b.n	8003616 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003564:	200f      	movs	r0, #15
 8003566:	183b      	adds	r3, r7, r0
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	0013      	movs	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	189b      	adds	r3, r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	18cb      	adds	r3, r1, r3
 8003578:	3301      	adds	r3, #1
 800357a:	2201      	movs	r2, #1
 800357c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800357e:	183b      	adds	r3, r7, r0
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	0013      	movs	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	189b      	adds	r3, r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	183a      	adds	r2, r7, r0
 8003590:	7812      	ldrb	r2, [r2, #0]
 8003592:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003594:	0004      	movs	r4, r0
 8003596:	183b      	adds	r3, r7, r0
 8003598:	781a      	ldrb	r2, [r3, #0]
 800359a:	193b      	adds	r3, r7, r4
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	b298      	uxth	r0, r3
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	0013      	movs	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	189b      	adds	r3, r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	18cb      	adds	r3, r1, r3
 80035ac:	3336      	adds	r3, #54	; 0x36
 80035ae:	1c02      	adds	r2, r0, #0
 80035b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035b2:	193b      	adds	r3, r7, r4
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	0013      	movs	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	189b      	adds	r3, r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	18cb      	adds	r3, r1, r3
 80035c4:	3303      	adds	r3, #3
 80035c6:	2200      	movs	r2, #0
 80035c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035ca:	193b      	adds	r3, r7, r4
 80035cc:	781a      	ldrb	r2, [r3, #0]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	0013      	movs	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	189b      	adds	r3, r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	18cb      	adds	r3, r1, r3
 80035da:	3338      	adds	r3, #56	; 0x38
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035e0:	193b      	adds	r3, r7, r4
 80035e2:	781a      	ldrb	r2, [r3, #0]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	0013      	movs	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	189b      	adds	r3, r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	18cb      	adds	r3, r1, r3
 80035f0:	333c      	adds	r3, #60	; 0x3c
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80035f6:	193b      	adds	r3, r7, r4
 80035f8:	781a      	ldrb	r2, [r3, #0]
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	0013      	movs	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	189b      	adds	r3, r3, r2
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	18cb      	adds	r3, r1, r3
 8003606:	3340      	adds	r3, #64	; 0x40
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800360c:	193b      	adds	r3, r7, r4
 800360e:	781a      	ldrb	r2, [r3, #0]
 8003610:	193b      	adds	r3, r7, r4
 8003612:	3201      	adds	r2, #1
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	210f      	movs	r1, #15
 8003618:	187b      	adds	r3, r7, r1
 800361a:	781a      	ldrb	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	429a      	cmp	r2, r3
 8003622:	d39f      	bcc.n	8003564 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003624:	187b      	adds	r3, r7, r1
 8003626:	2200      	movs	r2, #0
 8003628:	701a      	strb	r2, [r3, #0]
 800362a:	e056      	b.n	80036da <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800362c:	240f      	movs	r4, #15
 800362e:	193b      	adds	r3, r7, r4
 8003630:	781a      	ldrb	r2, [r3, #0]
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	236a      	movs	r3, #106	; 0x6a
 8003636:	33ff      	adds	r3, #255	; 0xff
 8003638:	0019      	movs	r1, r3
 800363a:	0013      	movs	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	189b      	adds	r3, r3, r2
 8003640:	00db      	lsls	r3, r3, #3
 8003642:	18c3      	adds	r3, r0, r3
 8003644:	185b      	adds	r3, r3, r1
 8003646:	2200      	movs	r2, #0
 8003648:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800364a:	193b      	adds	r3, r7, r4
 800364c:	781a      	ldrb	r2, [r3, #0]
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	23b4      	movs	r3, #180	; 0xb4
 8003652:	0059      	lsls	r1, r3, #1
 8003654:	0013      	movs	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	189b      	adds	r3, r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	18c3      	adds	r3, r0, r3
 800365e:	185b      	adds	r3, r3, r1
 8003660:	193a      	adds	r2, r7, r4
 8003662:	7812      	ldrb	r2, [r2, #0]
 8003664:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003666:	193b      	adds	r3, r7, r4
 8003668:	781a      	ldrb	r2, [r3, #0]
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	236c      	movs	r3, #108	; 0x6c
 800366e:	33ff      	adds	r3, #255	; 0xff
 8003670:	0019      	movs	r1, r3
 8003672:	0013      	movs	r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	189b      	adds	r3, r3, r2
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	18c3      	adds	r3, r0, r3
 800367c:	185b      	adds	r3, r3, r1
 800367e:	2200      	movs	r2, #0
 8003680:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003682:	193b      	adds	r3, r7, r4
 8003684:	781a      	ldrb	r2, [r3, #0]
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	23bc      	movs	r3, #188	; 0xbc
 800368a:	0059      	lsls	r1, r3, #1
 800368c:	0013      	movs	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	189b      	adds	r3, r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	18c3      	adds	r3, r0, r3
 8003696:	185b      	adds	r3, r3, r1
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800369c:	193b      	adds	r3, r7, r4
 800369e:	781a      	ldrb	r2, [r3, #0]
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	23be      	movs	r3, #190	; 0xbe
 80036a4:	0059      	lsls	r1, r3, #1
 80036a6:	0013      	movs	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	189b      	adds	r3, r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	18c3      	adds	r3, r0, r3
 80036b0:	185b      	adds	r3, r3, r1
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036b6:	193b      	adds	r3, r7, r4
 80036b8:	781a      	ldrb	r2, [r3, #0]
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	23c0      	movs	r3, #192	; 0xc0
 80036be:	0059      	lsls	r1, r3, #1
 80036c0:	0013      	movs	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	189b      	adds	r3, r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	18c3      	adds	r3, r0, r3
 80036ca:	185b      	adds	r3, r3, r1
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036d0:	193b      	adds	r3, r7, r4
 80036d2:	781a      	ldrb	r2, [r3, #0]
 80036d4:	193b      	adds	r3, r7, r4
 80036d6:	3201      	adds	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	230f      	movs	r3, #15
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	781a      	ldrb	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d3a1      	bcc.n	800362c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6818      	ldr	r0, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	466a      	mov	r2, sp
 80036f0:	0011      	movs	r1, r2
 80036f2:	001a      	movs	r2, r3
 80036f4:	3210      	adds	r2, #16
 80036f6:	ca70      	ldmia	r2!, {r4, r5, r6}
 80036f8:	c170      	stmia	r1!, {r4, r5, r6}
 80036fa:	ca30      	ldmia	r2!, {r4, r5}
 80036fc:	c130      	stmia	r1!, {r4, r5}
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f004 fd52 	bl	80081ac <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2224      	movs	r2, #36	; 0x24
 800370c:	2100      	movs	r1, #0
 800370e:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a08      	ldr	r2, [pc, #32]	; (8003734 <HAL_PCD_Init+0x21c>)
 8003714:	2101      	movs	r1, #1
 8003716:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d103      	bne.n	8003728 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	0018      	movs	r0, r3
 8003724:	f001 fd34 	bl	8005190 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	0018      	movs	r0, r3
 800372c:	46bd      	mov	sp, r7
 800372e:	b005      	add	sp, #20
 8003730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	000002a9 	.word	0x000002a9

08003738 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	23aa      	movs	r3, #170	; 0xaa
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	5cd3      	ldrb	r3, [r2, r3]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_PCD_Start+0x18>
 800374c:	2302      	movs	r3, #2
 800374e:	e014      	b.n	800377a <HAL_PCD_Start+0x42>
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	23aa      	movs	r3, #170	; 0xaa
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	2101      	movs	r1, #1
 8003758:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	0018      	movs	r0, r3
 8003760:	f004 fcf4 	bl	800814c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	0018      	movs	r0, r3
 800376a:	f006 fc4f 	bl	800a00c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	23aa      	movs	r3, #170	; 0xaa
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	2100      	movs	r1, #0
 8003776:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	0018      	movs	r0, r3
 800377c:	46bd      	mov	sp, r7
 800377e:	b002      	add	sp, #8
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	0018      	movs	r0, r3
 8003792:	f006 fc51 	bl	800a038 <USB_ReadInterrupts>
 8003796:	0002      	movs	r2, r0
 8003798:	2380      	movs	r3, #128	; 0x80
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	401a      	ands	r2, r3
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	021b      	lsls	r3, r3, #8
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d103      	bne.n	80037ae <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	0018      	movs	r0, r3
 80037aa:	f000 fbbb 	bl	8003f24 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	0018      	movs	r0, r3
 80037b4:	f006 fc40 	bl	800a038 <USB_ReadInterrupts>
 80037b8:	0002      	movs	r2, r0
 80037ba:	2380      	movs	r3, #128	; 0x80
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	401a      	ands	r2, r3
 80037c0:	2380      	movs	r3, #128	; 0x80
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d114      	bne.n	80037f2 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2244      	movs	r2, #68	; 0x44
 80037ce:	5a9b      	ldrh	r3, [r3, r2]
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	49a2      	ldr	r1, [pc, #648]	; (8003a60 <HAL_PCD_IRQHandler+0x2dc>)
 80037d8:	400a      	ands	r2, r1
 80037da:	b291      	uxth	r1, r2
 80037dc:	2244      	movs	r2, #68	; 0x44
 80037de:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	0018      	movs	r0, r3
 80037e4:	f008 fcab 	bl	800c13e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2100      	movs	r1, #0
 80037ec:	0018      	movs	r0, r3
 80037ee:	f000 f945 	bl	8003a7c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	0018      	movs	r0, r3
 80037f8:	f006 fc1e 	bl	800a038 <USB_ReadInterrupts>
 80037fc:	0002      	movs	r2, r0
 80037fe:	2380      	movs	r3, #128	; 0x80
 8003800:	01db      	lsls	r3, r3, #7
 8003802:	401a      	ands	r2, r3
 8003804:	2380      	movs	r3, #128	; 0x80
 8003806:	01db      	lsls	r3, r3, #7
 8003808:	429a      	cmp	r2, r3
 800380a:	d10b      	bne.n	8003824 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2244      	movs	r2, #68	; 0x44
 8003812:	5a9b      	ldrh	r3, [r3, r2]
 8003814:	b29a      	uxth	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4992      	ldr	r1, [pc, #584]	; (8003a64 <HAL_PCD_IRQHandler+0x2e0>)
 800381c:	400a      	ands	r2, r1
 800381e:	b291      	uxth	r1, r2
 8003820:	2244      	movs	r2, #68	; 0x44
 8003822:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	0018      	movs	r0, r3
 800382a:	f006 fc05 	bl	800a038 <USB_ReadInterrupts>
 800382e:	0002      	movs	r2, r0
 8003830:	2380      	movs	r3, #128	; 0x80
 8003832:	019b      	lsls	r3, r3, #6
 8003834:	401a      	ands	r2, r3
 8003836:	2380      	movs	r3, #128	; 0x80
 8003838:	019b      	lsls	r3, r3, #6
 800383a:	429a      	cmp	r2, r3
 800383c:	d10b      	bne.n	8003856 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2244      	movs	r2, #68	; 0x44
 8003844:	5a9b      	ldrh	r3, [r3, r2]
 8003846:	b29a      	uxth	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4986      	ldr	r1, [pc, #536]	; (8003a68 <HAL_PCD_IRQHandler+0x2e4>)
 800384e:	400a      	ands	r2, r1
 8003850:	b291      	uxth	r1, r2
 8003852:	2244      	movs	r2, #68	; 0x44
 8003854:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	0018      	movs	r0, r3
 800385c:	f006 fbec 	bl	800a038 <USB_ReadInterrupts>
 8003860:	0002      	movs	r2, r0
 8003862:	2380      	movs	r3, #128	; 0x80
 8003864:	015b      	lsls	r3, r3, #5
 8003866:	401a      	ands	r2, r3
 8003868:	2380      	movs	r3, #128	; 0x80
 800386a:	015b      	lsls	r3, r3, #5
 800386c:	429a      	cmp	r2, r3
 800386e:	d137      	bne.n	80038e0 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2240      	movs	r2, #64	; 0x40
 8003876:	5a9b      	ldrh	r3, [r3, r2]
 8003878:	b29a      	uxth	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2104      	movs	r1, #4
 8003880:	438a      	bics	r2, r1
 8003882:	b291      	uxth	r1, r2
 8003884:	2240      	movs	r2, #64	; 0x40
 8003886:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2240      	movs	r2, #64	; 0x40
 800388e:	5a9b      	ldrh	r3, [r3, r2]
 8003890:	b29a      	uxth	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2108      	movs	r1, #8
 8003898:	438a      	bics	r2, r1
 800389a:	b291      	uxth	r1, r2
 800389c:	2240      	movs	r2, #64	; 0x40
 800389e:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	23b8      	movs	r3, #184	; 0xb8
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	5cd3      	ldrb	r3, [r2, r3]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d109      	bne.n	80038c0 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	23b8      	movs	r3, #184	; 0xb8
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	2100      	movs	r1, #0
 80038b4:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2100      	movs	r1, #0
 80038ba:	0018      	movs	r0, r3
 80038bc:	f001 fc92 	bl	80051e4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	0018      	movs	r0, r3
 80038c4:	f008 fc7c 	bl	800c1c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2244      	movs	r2, #68	; 0x44
 80038ce:	5a9b      	ldrh	r3, [r3, r2]
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4965      	ldr	r1, [pc, #404]	; (8003a6c <HAL_PCD_IRQHandler+0x2e8>)
 80038d8:	400a      	ands	r2, r1
 80038da:	b291      	uxth	r1, r2
 80038dc:	2244      	movs	r2, #68	; 0x44
 80038de:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	0018      	movs	r0, r3
 80038e6:	f006 fba7 	bl	800a038 <USB_ReadInterrupts>
 80038ea:	0002      	movs	r2, r0
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	401a      	ands	r2, r3
 80038f2:	2380      	movs	r3, #128	; 0x80
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d127      	bne.n	800394a <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2240      	movs	r2, #64	; 0x40
 8003900:	5a9b      	ldrh	r3, [r3, r2]
 8003902:	b29a      	uxth	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2108      	movs	r1, #8
 800390a:	430a      	orrs	r2, r1
 800390c:	b291      	uxth	r1, r2
 800390e:	2240      	movs	r2, #64	; 0x40
 8003910:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2244      	movs	r2, #68	; 0x44
 8003918:	5a9b      	ldrh	r3, [r3, r2]
 800391a:	b29a      	uxth	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4953      	ldr	r1, [pc, #332]	; (8003a70 <HAL_PCD_IRQHandler+0x2ec>)
 8003922:	400a      	ands	r2, r1
 8003924:	b291      	uxth	r1, r2
 8003926:	2244      	movs	r2, #68	; 0x44
 8003928:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2240      	movs	r2, #64	; 0x40
 8003930:	5a9b      	ldrh	r3, [r3, r2]
 8003932:	b29a      	uxth	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2104      	movs	r1, #4
 800393a:	430a      	orrs	r2, r1
 800393c:	b291      	uxth	r1, r2
 800393e:	2240      	movs	r2, #64	; 0x40
 8003940:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	0018      	movs	r0, r3
 8003946:	f008 fc1f 	bl	800c188 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	0018      	movs	r0, r3
 8003950:	f006 fb72 	bl	800a038 <USB_ReadInterrupts>
 8003954:	0003      	movs	r3, r0
 8003956:	2280      	movs	r2, #128	; 0x80
 8003958:	4013      	ands	r3, r2
 800395a:	2b80      	cmp	r3, #128	; 0x80
 800395c:	d145      	bne.n	80039ea <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2244      	movs	r2, #68	; 0x44
 8003964:	5a9b      	ldrh	r3, [r3, r2]
 8003966:	b29a      	uxth	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2180      	movs	r1, #128	; 0x80
 800396e:	438a      	bics	r2, r1
 8003970:	b291      	uxth	r1, r2
 8003972:	2244      	movs	r2, #68	; 0x44
 8003974:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	23b8      	movs	r3, #184	; 0xb8
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	5cd3      	ldrb	r3, [r2, r3]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d12f      	bne.n	80039e2 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2240      	movs	r2, #64	; 0x40
 8003988:	5a9b      	ldrh	r3, [r3, r2]
 800398a:	b29a      	uxth	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2104      	movs	r1, #4
 8003992:	430a      	orrs	r2, r1
 8003994:	b291      	uxth	r1, r2
 8003996:	2240      	movs	r2, #64	; 0x40
 8003998:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2240      	movs	r2, #64	; 0x40
 80039a0:	5a9b      	ldrh	r3, [r3, r2]
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2108      	movs	r1, #8
 80039aa:	430a      	orrs	r2, r1
 80039ac:	b291      	uxth	r1, r2
 80039ae:	2240      	movs	r2, #64	; 0x40
 80039b0:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	23b8      	movs	r3, #184	; 0xb8
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	2101      	movs	r1, #1
 80039ba:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2254      	movs	r2, #84	; 0x54
 80039c2:	5a9b      	ldrh	r3, [r3, r2]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	089b      	lsrs	r3, r3, #2
 80039c8:	223c      	movs	r2, #60	; 0x3c
 80039ca:	4013      	ands	r3, r2
 80039cc:	0019      	movs	r1, r3
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	23b9      	movs	r3, #185	; 0xb9
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2101      	movs	r1, #1
 80039da:	0018      	movs	r0, r3
 80039dc:	f001 fc02 	bl	80051e4 <HAL_PCDEx_LPM_Callback>
 80039e0:	e003      	b.n	80039ea <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	0018      	movs	r0, r3
 80039e6:	f008 fbcf 	bl	800c188 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	0018      	movs	r0, r3
 80039f0:	f006 fb22 	bl	800a038 <USB_ReadInterrupts>
 80039f4:	0002      	movs	r2, r0
 80039f6:	2380      	movs	r3, #128	; 0x80
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	401a      	ands	r2, r3
 80039fc:	2380      	movs	r3, #128	; 0x80
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d10f      	bne.n	8003a24 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2244      	movs	r2, #68	; 0x44
 8003a0a:	5a9b      	ldrh	r3, [r3, r2]
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4918      	ldr	r1, [pc, #96]	; (8003a74 <HAL_PCD_IRQHandler+0x2f0>)
 8003a14:	400a      	ands	r2, r1
 8003a16:	b291      	uxth	r1, r2
 8003a18:	2244      	movs	r2, #68	; 0x44
 8003a1a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f008 fb7e 	bl	800c120 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f006 fb05 	bl	800a038 <USB_ReadInterrupts>
 8003a2e:	0002      	movs	r2, r0
 8003a30:	2380      	movs	r3, #128	; 0x80
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	401a      	ands	r2, r3
 8003a36:	2380      	movs	r3, #128	; 0x80
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d10b      	bne.n	8003a56 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2244      	movs	r2, #68	; 0x44
 8003a44:	5a9b      	ldrh	r3, [r3, r2]
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	490a      	ldr	r1, [pc, #40]	; (8003a78 <HAL_PCD_IRQHandler+0x2f4>)
 8003a4e:	400a      	ands	r2, r1
 8003a50:	b291      	uxth	r1, r2
 8003a52:	2244      	movs	r2, #68	; 0x44
 8003a54:	5299      	strh	r1, [r3, r2]
  }
}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b002      	add	sp, #8
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	fffffbff 	.word	0xfffffbff
 8003a64:	ffffbfff 	.word	0xffffbfff
 8003a68:	ffffdfff 	.word	0xffffdfff
 8003a6c:	ffffefff 	.word	0xffffefff
 8003a70:	fffff7ff 	.word	0xfffff7ff
 8003a74:	fffffdff 	.word	0xfffffdff
 8003a78:	fffffeff 	.word	0xfffffeff

08003a7c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	000a      	movs	r2, r1
 8003a86:	1cfb      	adds	r3, r7, #3
 8003a88:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	23aa      	movs	r3, #170	; 0xaa
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	5cd3      	ldrb	r3, [r2, r3]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_PCD_SetAddress+0x1e>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e017      	b.n	8003aca <HAL_PCD_SetAddress+0x4e>
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	23aa      	movs	r3, #170	; 0xaa
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	1cfa      	adds	r2, r7, #3
 8003aa8:	2124      	movs	r1, #36	; 0x24
 8003aaa:	7812      	ldrb	r2, [r2, #0]
 8003aac:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	1cfb      	adds	r3, r7, #3
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	0019      	movs	r1, r3
 8003ab8:	0010      	movs	r0, r2
 8003aba:	f006 fa93 	bl	8009fe4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	23aa      	movs	r3, #170	; 0xaa
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	0018      	movs	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b002      	add	sp, #8
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ad2:	b590      	push	{r4, r7, lr}
 8003ad4:	b085      	sub	sp, #20
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	000c      	movs	r4, r1
 8003adc:	0010      	movs	r0, r2
 8003ade:	0019      	movs	r1, r3
 8003ae0:	1cfb      	adds	r3, r7, #3
 8003ae2:	1c22      	adds	r2, r4, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
 8003ae6:	003b      	movs	r3, r7
 8003ae8:	1c02      	adds	r2, r0, #0
 8003aea:	801a      	strh	r2, [r3, #0]
 8003aec:	1cbb      	adds	r3, r7, #2
 8003aee:	1c0a      	adds	r2, r1, #0
 8003af0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003af2:	230b      	movs	r3, #11
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	2200      	movs	r2, #0
 8003af8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003afa:	1cfb      	adds	r3, r7, #3
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	b25b      	sxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	da0f      	bge.n	8003b24 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b04:	1cfb      	adds	r3, r7, #3
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2207      	movs	r2, #7
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	0013      	movs	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	189b      	adds	r3, r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	18d3      	adds	r3, r2, r3
 8003b1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	705a      	strb	r2, [r3, #1]
 8003b22:	e00f      	b.n	8003b44 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b24:	1cfb      	adds	r3, r7, #3
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2207      	movs	r2, #7
 8003b2a:	401a      	ands	r2, r3
 8003b2c:	0013      	movs	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	189b      	adds	r3, r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	3369      	adds	r3, #105	; 0x69
 8003b36:	33ff      	adds	r3, #255	; 0xff
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	18d3      	adds	r3, r2, r3
 8003b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b44:	1cfb      	adds	r3, r7, #3
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2207      	movs	r2, #7
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	b2da      	uxtb	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b52:	003b      	movs	r3, r7
 8003b54:	881a      	ldrh	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	1cba      	adds	r2, r7, #2
 8003b5e:	7812      	ldrb	r2, [r2, #0]
 8003b60:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	785b      	ldrb	r3, [r3, #1]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d004      	beq.n	8003b74 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b74:	1cbb      	adds	r3, r7, #2
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d102      	bne.n	8003b82 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	23aa      	movs	r3, #170	; 0xaa
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	5cd3      	ldrb	r3, [r2, r3]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <HAL_PCD_EP_Open+0xc0>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e013      	b.n	8003bba <HAL_PCD_EP_Open+0xe8>
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	23aa      	movs	r3, #170	; 0xaa
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	2101      	movs	r1, #1
 8003b9a:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	0011      	movs	r1, r2
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f004 fb2d 	bl	8008204 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	23aa      	movs	r3, #170	; 0xaa
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	54d1      	strb	r1, [r2, r3]

  return ret;
 8003bb4:	230b      	movs	r3, #11
 8003bb6:	18fb      	adds	r3, r7, r3
 8003bb8:	781b      	ldrb	r3, [r3, #0]
}
 8003bba:	0018      	movs	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b005      	add	sp, #20
 8003bc0:	bd90      	pop	{r4, r7, pc}

08003bc2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	000a      	movs	r2, r1
 8003bcc:	1cfb      	adds	r3, r7, #3
 8003bce:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bd0:	1cfb      	adds	r3, r7, #3
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	b25b      	sxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	da0f      	bge.n	8003bfa <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bda:	1cfb      	adds	r3, r7, #3
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2207      	movs	r2, #7
 8003be0:	4013      	ands	r3, r2
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	0013      	movs	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	189b      	adds	r3, r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	18d3      	adds	r3, r2, r3
 8003bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	705a      	strb	r2, [r3, #1]
 8003bf8:	e00f      	b.n	8003c1a <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bfa:	1cfb      	adds	r3, r7, #3
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2207      	movs	r2, #7
 8003c00:	401a      	ands	r2, r3
 8003c02:	0013      	movs	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	189b      	adds	r3, r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	3369      	adds	r3, #105	; 0x69
 8003c0c:	33ff      	adds	r3, #255	; 0xff
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	18d3      	adds	r3, r2, r3
 8003c12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c1a:	1cfb      	adds	r3, r7, #3
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2207      	movs	r2, #7
 8003c20:	4013      	ands	r3, r2
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	23aa      	movs	r3, #170	; 0xaa
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	5cd3      	ldrb	r3, [r2, r3]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_PCD_EP_Close+0x76>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e011      	b.n	8003c5c <HAL_PCD_EP_Close+0x9a>
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	23aa      	movs	r3, #170	; 0xaa
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	2101      	movs	r1, #1
 8003c40:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	0011      	movs	r1, r2
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f004 fe4e 	bl	80088ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	23aa      	movs	r3, #170	; 0xaa
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	2100      	movs	r1, #0
 8003c58:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	b004      	add	sp, #16
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	607a      	str	r2, [r7, #4]
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	200b      	movs	r0, #11
 8003c72:	183b      	adds	r3, r7, r0
 8003c74:	1c0a      	adds	r2, r1, #0
 8003c76:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c78:	0001      	movs	r1, r0
 8003c7a:	187b      	adds	r3, r7, r1
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2207      	movs	r2, #7
 8003c80:	401a      	ands	r2, r3
 8003c82:	0013      	movs	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	189b      	adds	r3, r3, r2
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	3369      	adds	r3, #105	; 0x69
 8003c8c:	33ff      	adds	r3, #255	; 0xff
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	18d3      	adds	r3, r2, r3
 8003c92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cac:	187b      	adds	r3, r7, r1
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2207      	movs	r2, #7
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cba:	187b      	adds	r3, r7, r1
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2207      	movs	r2, #7
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d107      	bne.n	8003cd4 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	0011      	movs	r1, r2
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f004 ffcd 	bl	8008c6c <USB_EPStartXfer>
 8003cd2:	e006      	b.n	8003ce2 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	0011      	movs	r1, r2
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f004 ffc5 	bl	8008c6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
}
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	b006      	add	sp, #24
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	000a      	movs	r2, r1
 8003cf6:	1cfb      	adds	r3, r7, #3
 8003cf8:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003cfa:	1cfb      	adds	r3, r7, #3
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	2207      	movs	r2, #7
 8003d00:	401a      	ands	r2, r3
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	23c2      	movs	r3, #194	; 0xc2
 8003d06:	0059      	lsls	r1, r3, #1
 8003d08:	0013      	movs	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	189b      	adds	r3, r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	18c3      	adds	r3, r0, r3
 8003d12:	185b      	adds	r3, r3, r1
 8003d14:	681b      	ldr	r3, [r3, #0]
}
 8003d16:	0018      	movs	r0, r3
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b002      	add	sp, #8
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b086      	sub	sp, #24
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	607a      	str	r2, [r7, #4]
 8003d28:	603b      	str	r3, [r7, #0]
 8003d2a:	200b      	movs	r0, #11
 8003d2c:	183b      	adds	r3, r7, r0
 8003d2e:	1c0a      	adds	r2, r1, #0
 8003d30:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d32:	183b      	adds	r3, r7, r0
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2207      	movs	r2, #7
 8003d38:	4013      	ands	r3, r2
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	0013      	movs	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	189b      	adds	r3, r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	18d3      	adds	r3, r2, r3
 8003d48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2224      	movs	r2, #36	; 0x24
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2200      	movs	r2, #0
 8003d68:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d70:	183b      	adds	r3, r7, r0
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2207      	movs	r2, #7
 8003d76:	4013      	ands	r3, r2
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d7e:	183b      	adds	r3, r7, r0
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2207      	movs	r2, #7
 8003d84:	4013      	ands	r3, r2
 8003d86:	d107      	bne.n	8003d98 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	0011      	movs	r1, r2
 8003d90:	0018      	movs	r0, r3
 8003d92:	f004 ff6b 	bl	8008c6c <USB_EPStartXfer>
 8003d96:	e006      	b.n	8003da6 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	0011      	movs	r1, r2
 8003da0:	0018      	movs	r0, r3
 8003da2:	f004 ff63 	bl	8008c6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	0018      	movs	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b006      	add	sp, #24
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	000a      	movs	r2, r1
 8003dba:	1cfb      	adds	r3, r7, #3
 8003dbc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003dbe:	1cfb      	adds	r3, r7, #3
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2207      	movs	r2, #7
 8003dc4:	401a      	ands	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d901      	bls.n	8003dd2 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e046      	b.n	8003e60 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dd2:	1cfb      	adds	r3, r7, #3
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	b25b      	sxtb	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	da0f      	bge.n	8003dfc <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ddc:	1cfb      	adds	r3, r7, #3
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2207      	movs	r2, #7
 8003de2:	4013      	ands	r3, r2
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	0013      	movs	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	189b      	adds	r3, r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	18d3      	adds	r3, r2, r3
 8003df2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	705a      	strb	r2, [r3, #1]
 8003dfa:	e00d      	b.n	8003e18 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003dfc:	1cfb      	adds	r3, r7, #3
 8003dfe:	781a      	ldrb	r2, [r3, #0]
 8003e00:	0013      	movs	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	189b      	adds	r3, r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	3369      	adds	r3, #105	; 0x69
 8003e0a:	33ff      	adds	r3, #255	; 0xff
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	18d3      	adds	r3, r2, r3
 8003e10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e1e:	1cfb      	adds	r3, r7, #3
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2207      	movs	r2, #7
 8003e24:	4013      	ands	r3, r2
 8003e26:	b2da      	uxtb	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	23aa      	movs	r3, #170	; 0xaa
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	5cd3      	ldrb	r3, [r2, r3]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_PCD_EP_SetStall+0x8c>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e011      	b.n	8003e60 <HAL_PCD_EP_SetStall+0xb0>
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	23aa      	movs	r3, #170	; 0xaa
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	2101      	movs	r1, #1
 8003e44:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	0011      	movs	r1, r2
 8003e4e:	0018      	movs	r0, r3
 8003e50:	f005 ffc6 	bl	8009de0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	23aa      	movs	r3, #170	; 0xaa
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	0018      	movs	r0, r3
 8003e62:	46bd      	mov	sp, r7
 8003e64:	b004      	add	sp, #16
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	000a      	movs	r2, r1
 8003e72:	1cfb      	adds	r3, r7, #3
 8003e74:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e76:	1cfb      	adds	r3, r7, #3
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	220f      	movs	r2, #15
 8003e7c:	401a      	ands	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d901      	bls.n	8003e8a <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e048      	b.n	8003f1c <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e8a:	1cfb      	adds	r3, r7, #3
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	b25b      	sxtb	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	da0f      	bge.n	8003eb4 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e94:	1cfb      	adds	r3, r7, #3
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2207      	movs	r2, #7
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	0013      	movs	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	189b      	adds	r3, r3, r2
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	18d3      	adds	r3, r2, r3
 8003eaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	705a      	strb	r2, [r3, #1]
 8003eb2:	e00f      	b.n	8003ed4 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eb4:	1cfb      	adds	r3, r7, #3
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2207      	movs	r2, #7
 8003eba:	401a      	ands	r2, r3
 8003ebc:	0013      	movs	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	189b      	adds	r3, r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	3369      	adds	r3, #105	; 0x69
 8003ec6:	33ff      	adds	r3, #255	; 0xff
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	18d3      	adds	r3, r2, r3
 8003ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eda:	1cfb      	adds	r3, r7, #3
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2207      	movs	r2, #7
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	23aa      	movs	r3, #170	; 0xaa
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	5cd3      	ldrb	r3, [r2, r3]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d101      	bne.n	8003ef8 <HAL_PCD_EP_ClrStall+0x90>
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	e011      	b.n	8003f1c <HAL_PCD_EP_ClrStall+0xb4>
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	23aa      	movs	r3, #170	; 0xaa
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	2101      	movs	r1, #1
 8003f00:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	0011      	movs	r1, r2
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f005 ffb8 	bl	8009e80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	23aa      	movs	r3, #170	; 0xaa
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	2100      	movs	r1, #0
 8003f18:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	0018      	movs	r0, r3
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	b004      	add	sp, #16
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003f24:	b5b0      	push	{r4, r5, r7, lr}
 8003f26:	b096      	sub	sp, #88	; 0x58
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f2c:	f000 fbd8 	bl	80046e0 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	2056      	movs	r0, #86	; 0x56
 8003f36:	183b      	adds	r3, r7, r0
 8003f38:	2144      	movs	r1, #68	; 0x44
 8003f3a:	5a52      	ldrh	r2, [r2, r1]
 8003f3c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003f3e:	183b      	adds	r3, r7, r0
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	2455      	movs	r4, #85	; 0x55
 8003f46:	193b      	adds	r3, r7, r4
 8003f48:	210f      	movs	r1, #15
 8003f4a:	400a      	ands	r2, r1
 8003f4c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8003f4e:	193b      	adds	r3, r7, r4
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d000      	beq.n	8003f58 <PCD_EP_ISR_Handler+0x34>
 8003f56:	e179      	b.n	800424c <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003f58:	183b      	adds	r3, r7, r0
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	2210      	movs	r2, #16
 8003f5e:	4013      	ands	r3, r2
 8003f60:	d154      	bne.n	800400c <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	200e      	movs	r0, #14
 8003f6c:	183b      	adds	r3, r7, r0
 8003f6e:	49af      	ldr	r1, [pc, #700]	; (800422c <PCD_EP_ISR_Handler+0x308>)
 8003f70:	400a      	ands	r2, r1
 8003f72:	801a      	strh	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	183a      	adds	r2, r7, r0
 8003f7a:	8812      	ldrh	r2, [r2, #0]
 8003f7c:	49ac      	ldr	r1, [pc, #688]	; (8004230 <PCD_EP_ISR_Handler+0x30c>)
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	b292      	uxth	r2, r2
 8003f82:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3328      	adds	r3, #40	; 0x28
 8003f88:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2250      	movs	r2, #80	; 0x50
 8003f90:	5a9b      	ldrh	r3, [r3, r2]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	001a      	movs	r2, r3
 8003f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	18d2      	adds	r2, r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	18d3      	adds	r3, r2, r3
 8003fa4:	4aa3      	ldr	r2, [pc, #652]	; (8004234 <PCD_EP_ISR_Handler+0x310>)
 8003fa6:	4694      	mov	ip, r2
 8003fa8:	4463      	add	r3, ip
 8003faa:	881b      	ldrh	r3, [r3, #0]
 8003fac:	059b      	lsls	r3, r3, #22
 8003fae:	0d9a      	lsrs	r2, r3, #22
 8003fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fb2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fb6:	695a      	ldr	r2, [r3, #20]
 8003fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	18d2      	adds	r2, r2, r3
 8003fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fc0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f008 f88c 	bl	800c0e4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2224      	movs	r2, #36	; 0x24
 8003fd0:	5c9b      	ldrb	r3, [r3, r2]
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <PCD_EP_ISR_Handler+0xb8>
 8003fd8:	f000 fb82 	bl	80046e0 <PCD_EP_ISR_Handler+0x7bc>
 8003fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <PCD_EP_ISR_Handler+0xc4>
 8003fe4:	f000 fb7c 	bl	80046e0 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2224      	movs	r2, #36	; 0x24
 8003fec:	5c9b      	ldrb	r3, [r3, r2]
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2280      	movs	r2, #128	; 0x80
 8003ff2:	4252      	negs	r2, r2
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	b291      	uxth	r1, r2
 8003ffe:	224c      	movs	r2, #76	; 0x4c
 8004000:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2224      	movs	r2, #36	; 0x24
 8004006:	2100      	movs	r1, #0
 8004008:	5499      	strb	r1, [r3, r2]
 800400a:	e369      	b.n	80046e0 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3369      	adds	r3, #105	; 0x69
 8004010:	33ff      	adds	r3, #255	; 0xff
 8004012:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	2152      	movs	r1, #82	; 0x52
 800401a:	187b      	adds	r3, r7, r1
 800401c:	8812      	ldrh	r2, [r2, #0]
 800401e:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004020:	187b      	adds	r3, r7, r1
 8004022:	881a      	ldrh	r2, [r3, #0]
 8004024:	2380      	movs	r3, #128	; 0x80
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	4013      	ands	r3, r2
 800402a:	d037      	beq.n	800409c <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2250      	movs	r2, #80	; 0x50
 8004032:	5a9b      	ldrh	r3, [r3, r2]
 8004034:	b29b      	uxth	r3, r3
 8004036:	001a      	movs	r2, r3
 8004038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	00db      	lsls	r3, r3, #3
 800403e:	18d2      	adds	r2, r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	18d3      	adds	r3, r2, r3
 8004046:	4a7c      	ldr	r2, [pc, #496]	; (8004238 <PCD_EP_ISR_Handler+0x314>)
 8004048:	4694      	mov	ip, r2
 800404a:	4463      	add	r3, ip
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	059b      	lsls	r3, r3, #22
 8004050:	0d9a      	lsrs	r2, r3, #22
 8004052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004054:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6818      	ldr	r0, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	22ac      	movs	r2, #172	; 0xac
 800405e:	0092      	lsls	r2, r2, #2
 8004060:	1899      	adds	r1, r3, r2
 8004062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004064:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004068:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800406a:	b29b      	uxth	r3, r3
 800406c:	f006 f836 	bl	800a0dc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	b29a      	uxth	r2, r3
 8004078:	2010      	movs	r0, #16
 800407a:	183b      	adds	r3, r7, r0
 800407c:	496f      	ldr	r1, [pc, #444]	; (800423c <PCD_EP_ISR_Handler+0x318>)
 800407e:	400a      	ands	r2, r1
 8004080:	801a      	strh	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	183a      	adds	r2, r7, r0
 8004088:	8812      	ldrh	r2, [r2, #0]
 800408a:	2180      	movs	r1, #128	; 0x80
 800408c:	430a      	orrs	r2, r1
 800408e:	b292      	uxth	r2, r2
 8004090:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	0018      	movs	r0, r3
 8004096:	f007 ffef 	bl	800c078 <HAL_PCD_SetupStageCallback>
 800409a:	e321      	b.n	80046e0 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800409c:	2352      	movs	r3, #82	; 0x52
 800409e:	18fb      	adds	r3, r7, r3
 80040a0:	2200      	movs	r2, #0
 80040a2:	5e9b      	ldrsh	r3, [r3, r2]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	db00      	blt.n	80040aa <PCD_EP_ISR_Handler+0x186>
 80040a8:	e31a      	b.n	80046e0 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	201e      	movs	r0, #30
 80040b4:	183b      	adds	r3, r7, r0
 80040b6:	4961      	ldr	r1, [pc, #388]	; (800423c <PCD_EP_ISR_Handler+0x318>)
 80040b8:	400a      	ands	r2, r1
 80040ba:	801a      	strh	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	183a      	adds	r2, r7, r0
 80040c2:	8812      	ldrh	r2, [r2, #0]
 80040c4:	2180      	movs	r1, #128	; 0x80
 80040c6:	430a      	orrs	r2, r1
 80040c8:	b292      	uxth	r2, r2
 80040ca:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2250      	movs	r2, #80	; 0x50
 80040d2:	5a9b      	ldrh	r3, [r3, r2]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	001a      	movs	r2, r3
 80040d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	18d2      	adds	r2, r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	18d3      	adds	r3, r2, r3
 80040e6:	4a54      	ldr	r2, [pc, #336]	; (8004238 <PCD_EP_ISR_Handler+0x314>)
 80040e8:	4694      	mov	ip, r2
 80040ea:	4463      	add	r3, ip
 80040ec:	881b      	ldrh	r3, [r3, #0]
 80040ee:	059b      	lsls	r3, r3, #22
 80040f0:	0d9a      	lsrs	r2, r3, #22
 80040f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040f4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80040f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d01a      	beq.n	8004134 <PCD_EP_ISR_Handler+0x210>
 80040fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d016      	beq.n	8004134 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800410c:	6959      	ldr	r1, [r3, #20]
 800410e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004110:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004114:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004116:	b29b      	uxth	r3, r3
 8004118:	f005 ffe0 	bl	800a0dc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800411c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800411e:	695a      	ldr	r2, [r3, #20]
 8004120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	18d2      	adds	r2, r2, r3
 8004126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004128:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2100      	movs	r1, #0
 800412e:	0018      	movs	r0, r3
 8004130:	f007 ffb7 	bl	800c0a2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	b29b      	uxth	r3, r3
 800413c:	001a      	movs	r2, r3
 800413e:	2380      	movs	r3, #128	; 0x80
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	4013      	ands	r3, r2
 8004144:	d000      	beq.n	8004148 <PCD_EP_ISR_Handler+0x224>
 8004146:	e2cb      	b.n	80046e0 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	61bb      	str	r3, [r7, #24]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2250      	movs	r2, #80	; 0x50
 8004154:	5a9b      	ldrh	r3, [r3, r2]
 8004156:	b29b      	uxth	r3, r3
 8004158:	001a      	movs	r2, r3
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	189b      	adds	r3, r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	4a35      	ldr	r2, [pc, #212]	; (8004238 <PCD_EP_ISR_Handler+0x314>)
 8004164:	4694      	mov	ip, r2
 8004166:	4463      	add	r3, ip
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d110      	bne.n	8004194 <PCD_EP_ISR_Handler+0x270>
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	b29b      	uxth	r3, r3
 8004178:	4a31      	ldr	r2, [pc, #196]	; (8004240 <PCD_EP_ISR_Handler+0x31c>)
 800417a:	4013      	ands	r3, r2
 800417c:	b29a      	uxth	r2, r3
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	801a      	strh	r2, [r3, #0]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	b29b      	uxth	r3, r3
 8004188:	4a29      	ldr	r2, [pc, #164]	; (8004230 <PCD_EP_ISR_Handler+0x30c>)
 800418a:	4313      	orrs	r3, r2
 800418c:	b29a      	uxth	r2, r3
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	801a      	strh	r2, [r3, #0]
 8004192:	e02b      	b.n	80041ec <PCD_EP_ISR_Handler+0x2c8>
 8004194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	2b3e      	cmp	r3, #62	; 0x3e
 800419a:	d812      	bhi.n	80041c2 <PCD_EP_ISR_Handler+0x29e>
 800419c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	085b      	lsrs	r3, r3, #1
 80041a2:	647b      	str	r3, [r7, #68]	; 0x44
 80041a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	2201      	movs	r2, #1
 80041aa:	4013      	ands	r3, r2
 80041ac:	d002      	beq.n	80041b4 <PCD_EP_ISR_Handler+0x290>
 80041ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041b0:	3301      	adds	r3, #1
 80041b2:	647b      	str	r3, [r7, #68]	; 0x44
 80041b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	029b      	lsls	r3, r3, #10
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	801a      	strh	r2, [r3, #0]
 80041c0:	e014      	b.n	80041ec <PCD_EP_ISR_Handler+0x2c8>
 80041c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	647b      	str	r3, [r7, #68]	; 0x44
 80041ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	221f      	movs	r2, #31
 80041d0:	4013      	ands	r3, r2
 80041d2:	d102      	bne.n	80041da <PCD_EP_ISR_Handler+0x2b6>
 80041d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041d6:	3b01      	subs	r3, #1
 80041d8:	647b      	str	r3, [r7, #68]	; 0x44
 80041da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041dc:	b29b      	uxth	r3, r3
 80041de:	029b      	lsls	r3, r3, #10
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	4a13      	ldr	r2, [pc, #76]	; (8004230 <PCD_EP_ISR_Handler+0x30c>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	2012      	movs	r0, #18
 80041f6:	183b      	adds	r3, r7, r0
 80041f8:	4912      	ldr	r1, [pc, #72]	; (8004244 <PCD_EP_ISR_Handler+0x320>)
 80041fa:	400a      	ands	r2, r1
 80041fc:	801a      	strh	r2, [r3, #0]
 80041fe:	183b      	adds	r3, r7, r0
 8004200:	183a      	adds	r2, r7, r0
 8004202:	8812      	ldrh	r2, [r2, #0]
 8004204:	2180      	movs	r1, #128	; 0x80
 8004206:	0149      	lsls	r1, r1, #5
 8004208:	404a      	eors	r2, r1
 800420a:	801a      	strh	r2, [r3, #0]
 800420c:	183b      	adds	r3, r7, r0
 800420e:	183a      	adds	r2, r7, r0
 8004210:	8812      	ldrh	r2, [r2, #0]
 8004212:	2180      	movs	r1, #128	; 0x80
 8004214:	0189      	lsls	r1, r1, #6
 8004216:	404a      	eors	r2, r1
 8004218:	801a      	strh	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	183a      	adds	r2, r7, r0
 8004220:	8812      	ldrh	r2, [r2, #0]
 8004222:	4909      	ldr	r1, [pc, #36]	; (8004248 <PCD_EP_ISR_Handler+0x324>)
 8004224:	430a      	orrs	r2, r1
 8004226:	b292      	uxth	r2, r2
 8004228:	801a      	strh	r2, [r3, #0]
 800422a:	e259      	b.n	80046e0 <PCD_EP_ISR_Handler+0x7bc>
 800422c:	ffff8f0f 	.word	0xffff8f0f
 8004230:	ffff8000 	.word	0xffff8000
 8004234:	00000402 	.word	0x00000402
 8004238:	00000406 	.word	0x00000406
 800423c:	00000f8f 	.word	0x00000f8f
 8004240:	ffff83ff 	.word	0xffff83ff
 8004244:	ffffbf8f 	.word	0xffffbf8f
 8004248:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	001a      	movs	r2, r3
 8004252:	2055      	movs	r0, #85	; 0x55
 8004254:	183b      	adds	r3, r7, r0
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	18d2      	adds	r2, r2, r3
 800425c:	2152      	movs	r1, #82	; 0x52
 800425e:	187b      	adds	r3, r7, r1
 8004260:	8812      	ldrh	r2, [r2, #0]
 8004262:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004264:	187b      	adds	r3, r7, r1
 8004266:	2200      	movs	r2, #0
 8004268:	5e9b      	ldrsh	r3, [r3, r2]
 800426a:	2b00      	cmp	r3, #0
 800426c:	db00      	blt.n	8004270 <PCD_EP_ISR_Handler+0x34c>
 800426e:	e0fa      	b.n	8004466 <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	001a      	movs	r2, r3
 8004276:	183b      	adds	r3, r7, r0
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	18d3      	adds	r3, r2, r3
 800427e:	881b      	ldrh	r3, [r3, #0]
 8004280:	b29a      	uxth	r2, r3
 8004282:	2450      	movs	r4, #80	; 0x50
 8004284:	193b      	adds	r3, r7, r4
 8004286:	49cf      	ldr	r1, [pc, #828]	; (80045c4 <PCD_EP_ISR_Handler+0x6a0>)
 8004288:	400a      	ands	r2, r1
 800428a:	801a      	strh	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	001a      	movs	r2, r3
 8004292:	183b      	adds	r3, r7, r0
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	18d3      	adds	r3, r2, r3
 800429a:	193a      	adds	r2, r7, r4
 800429c:	8812      	ldrh	r2, [r2, #0]
 800429e:	2180      	movs	r1, #128	; 0x80
 80042a0:	430a      	orrs	r2, r1
 80042a2:	b292      	uxth	r2, r2
 80042a4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80042a6:	183b      	adds	r3, r7, r0
 80042a8:	781a      	ldrb	r2, [r3, #0]
 80042aa:	0013      	movs	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	189b      	adds	r3, r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	3369      	adds	r3, #105	; 0x69
 80042b4:	33ff      	adds	r3, #255	; 0xff
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	18d3      	adds	r3, r2, r3
 80042ba:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80042bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042be:	7b1b      	ldrb	r3, [r3, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d125      	bne.n	8004310 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2250      	movs	r2, #80	; 0x50
 80042ca:	5a9b      	ldrh	r3, [r3, r2]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	001a      	movs	r2, r3
 80042d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	18d2      	adds	r2, r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	18d3      	adds	r3, r2, r3
 80042de:	4aba      	ldr	r2, [pc, #744]	; (80045c8 <PCD_EP_ISR_Handler+0x6a4>)
 80042e0:	4694      	mov	ip, r2
 80042e2:	4463      	add	r3, ip
 80042e4:	881a      	ldrh	r2, [r3, #0]
 80042e6:	2448      	movs	r4, #72	; 0x48
 80042e8:	193b      	adds	r3, r7, r4
 80042ea:	0592      	lsls	r2, r2, #22
 80042ec:	0d92      	lsrs	r2, r2, #22
 80042ee:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80042f0:	193b      	adds	r3, r7, r4
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d100      	bne.n	80042fa <PCD_EP_ISR_Handler+0x3d6>
 80042f8:	e08d      	b.n	8004416 <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004300:	6959      	ldr	r1, [r3, #20]
 8004302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004304:	88da      	ldrh	r2, [r3, #6]
 8004306:	193b      	adds	r3, r7, r4
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	f005 fee7 	bl	800a0dc <USB_ReadPMA>
 800430e:	e082      	b.n	8004416 <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004312:	78db      	ldrb	r3, [r3, #3]
 8004314:	2b02      	cmp	r3, #2
 8004316:	d10c      	bne.n	8004332 <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004318:	2348      	movs	r3, #72	; 0x48
 800431a:	18fc      	adds	r4, r7, r3
 800431c:	2352      	movs	r3, #82	; 0x52
 800431e:	18fb      	adds	r3, r7, r3
 8004320:	881a      	ldrh	r2, [r3, #0]
 8004322:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	0018      	movs	r0, r3
 8004328:	f000 f9ee 	bl	8004708 <HAL_PCD_EP_DB_Receive>
 800432c:	0003      	movs	r3, r0
 800432e:	8023      	strh	r3, [r4, #0]
 8004330:	e071      	b.n	8004416 <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	001a      	movs	r2, r3
 8004338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	18d3      	adds	r3, r2, r3
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	b29a      	uxth	r2, r3
 8004344:	204a      	movs	r0, #74	; 0x4a
 8004346:	183b      	adds	r3, r7, r0
 8004348:	49a0      	ldr	r1, [pc, #640]	; (80045cc <PCD_EP_ISR_Handler+0x6a8>)
 800434a:	400a      	ands	r2, r1
 800434c:	801a      	strh	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	001a      	movs	r2, r3
 8004354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	18d3      	adds	r3, r2, r3
 800435c:	183a      	adds	r2, r7, r0
 800435e:	8812      	ldrh	r2, [r2, #0]
 8004360:	499b      	ldr	r1, [pc, #620]	; (80045d0 <PCD_EP_ISR_Handler+0x6ac>)
 8004362:	430a      	orrs	r2, r1
 8004364:	b292      	uxth	r2, r2
 8004366:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	001a      	movs	r2, r3
 800436e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	18d3      	adds	r3, r2, r3
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	b29b      	uxth	r3, r3
 800437a:	001a      	movs	r2, r3
 800437c:	2380      	movs	r3, #128	; 0x80
 800437e:	01db      	lsls	r3, r3, #7
 8004380:	4013      	ands	r3, r2
 8004382:	d024      	beq.n	80043ce <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2250      	movs	r2, #80	; 0x50
 800438a:	5a9b      	ldrh	r3, [r3, r2]
 800438c:	b29b      	uxth	r3, r3
 800438e:	001a      	movs	r2, r3
 8004390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	18d2      	adds	r2, r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	18d3      	adds	r3, r2, r3
 800439e:	4a8d      	ldr	r2, [pc, #564]	; (80045d4 <PCD_EP_ISR_Handler+0x6b0>)
 80043a0:	4694      	mov	ip, r2
 80043a2:	4463      	add	r3, ip
 80043a4:	881a      	ldrh	r2, [r3, #0]
 80043a6:	2448      	movs	r4, #72	; 0x48
 80043a8:	193b      	adds	r3, r7, r4
 80043aa:	0592      	lsls	r2, r2, #22
 80043ac:	0d92      	lsrs	r2, r2, #22
 80043ae:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80043b0:	193b      	adds	r3, r7, r4
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d02e      	beq.n	8004416 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043be:	6959      	ldr	r1, [r3, #20]
 80043c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043c2:	891a      	ldrh	r2, [r3, #8]
 80043c4:	193b      	adds	r3, r7, r4
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	f005 fe88 	bl	800a0dc <USB_ReadPMA>
 80043cc:	e023      	b.n	8004416 <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2250      	movs	r2, #80	; 0x50
 80043d4:	5a9b      	ldrh	r3, [r3, r2]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	001a      	movs	r2, r3
 80043da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	18d2      	adds	r2, r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	18d3      	adds	r3, r2, r3
 80043e8:	4a77      	ldr	r2, [pc, #476]	; (80045c8 <PCD_EP_ISR_Handler+0x6a4>)
 80043ea:	4694      	mov	ip, r2
 80043ec:	4463      	add	r3, ip
 80043ee:	881a      	ldrh	r2, [r3, #0]
 80043f0:	2448      	movs	r4, #72	; 0x48
 80043f2:	193b      	adds	r3, r7, r4
 80043f4:	0592      	lsls	r2, r2, #22
 80043f6:	0d92      	lsrs	r2, r2, #22
 80043f8:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80043fa:	193b      	adds	r3, r7, r4
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004408:	6959      	ldr	r1, [r3, #20]
 800440a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800440c:	895a      	ldrh	r2, [r3, #10]
 800440e:	193b      	adds	r3, r7, r4
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	f005 fe63 	bl	800a0dc <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004416:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004418:	69da      	ldr	r2, [r3, #28]
 800441a:	2148      	movs	r1, #72	; 0x48
 800441c:	187b      	adds	r3, r7, r1
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	18d2      	adds	r2, r2, r3
 8004422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004424:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004428:	695a      	ldr	r2, [r3, #20]
 800442a:	187b      	adds	r3, r7, r1
 800442c:	881b      	ldrh	r3, [r3, #0]
 800442e:	18d2      	adds	r2, r2, r3
 8004430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004432:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <PCD_EP_ISR_Handler+0x524>
 800443c:	187b      	adds	r3, r7, r1
 800443e:	881a      	ldrh	r2, [r3, #0]
 8004440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	429a      	cmp	r2, r3
 8004446:	d207      	bcs.n	8004458 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800444a:	781a      	ldrb	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	0011      	movs	r1, r2
 8004450:	0018      	movs	r0, r3
 8004452:	f007 fe26 	bl	800c0a2 <HAL_PCD_DataOutStageCallback>
 8004456:	e006      	b.n	8004466 <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800445e:	0011      	movs	r1, r2
 8004460:	0018      	movs	r0, r3
 8004462:	f004 fc03 	bl	8008c6c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004466:	2452      	movs	r4, #82	; 0x52
 8004468:	193b      	adds	r3, r7, r4
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	2280      	movs	r2, #128	; 0x80
 800446e:	4013      	ands	r3, r2
 8004470:	d100      	bne.n	8004474 <PCD_EP_ISR_Handler+0x550>
 8004472:	e135      	b.n	80046e0 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 8004474:	2055      	movs	r0, #85	; 0x55
 8004476:	183b      	adds	r3, r7, r0
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	0013      	movs	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	189b      	adds	r3, r3, r2
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	18d3      	adds	r3, r2, r3
 8004488:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	001a      	movs	r2, r3
 8004490:	183b      	adds	r3, r7, r0
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	18d3      	adds	r3, r2, r3
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	b29a      	uxth	r2, r3
 800449c:	2542      	movs	r5, #66	; 0x42
 800449e:	197b      	adds	r3, r7, r5
 80044a0:	494d      	ldr	r1, [pc, #308]	; (80045d8 <PCD_EP_ISR_Handler+0x6b4>)
 80044a2:	400a      	ands	r2, r1
 80044a4:	801a      	strh	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	001a      	movs	r2, r3
 80044ac:	183b      	adds	r3, r7, r0
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	18d3      	adds	r3, r2, r3
 80044b4:	197a      	adds	r2, r7, r5
 80044b6:	8812      	ldrh	r2, [r2, #0]
 80044b8:	4948      	ldr	r1, [pc, #288]	; (80045dc <PCD_EP_ISR_Handler+0x6b8>)
 80044ba:	430a      	orrs	r2, r1
 80044bc:	b292      	uxth	r2, r2
 80044be:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 80044c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c2:	78db      	ldrb	r3, [r3, #3]
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d100      	bne.n	80044ca <PCD_EP_ISR_Handler+0x5a6>
 80044c8:	e0ad      	b.n	8004626 <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 80044ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044cc:	2200      	movs	r2, #0
 80044ce:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80044d0:	193b      	adds	r3, r7, r4
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	2240      	movs	r2, #64	; 0x40
 80044d6:	4013      	ands	r3, r2
 80044d8:	d046      	beq.n	8004568 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044dc:	785b      	ldrb	r3, [r3, #1]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d125      	bne.n	800452e <PCD_EP_ISR_Handler+0x60a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2250      	movs	r2, #80	; 0x50
 80044ee:	5a9b      	ldrh	r3, [r3, r2]
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	001a      	movs	r2, r3
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	189b      	adds	r3, r3, r2
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
 80044fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	00da      	lsls	r2, r3, #3
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	18d3      	adds	r3, r2, r3
 8004504:	4a33      	ldr	r2, [pc, #204]	; (80045d4 <PCD_EP_ISR_Handler+0x6b0>)
 8004506:	4694      	mov	ip, r2
 8004508:	4463      	add	r3, ip
 800450a:	623b      	str	r3, [r7, #32]
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	b29b      	uxth	r3, r3
 8004512:	4a33      	ldr	r2, [pc, #204]	; (80045e0 <PCD_EP_ISR_Handler+0x6bc>)
 8004514:	4013      	ands	r3, r2
 8004516:	b29a      	uxth	r2, r3
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	801a      	strh	r2, [r3, #0]
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	881b      	ldrh	r3, [r3, #0]
 8004520:	b29b      	uxth	r3, r3
 8004522:	4a2e      	ldr	r2, [pc, #184]	; (80045dc <PCD_EP_ISR_Handler+0x6b8>)
 8004524:	4313      	orrs	r3, r2
 8004526:	b29a      	uxth	r2, r3
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	801a      	strh	r2, [r3, #0]
 800452c:	e073      	b.n	8004616 <PCD_EP_ISR_Handler+0x6f2>
 800452e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004530:	785b      	ldrb	r3, [r3, #1]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d16f      	bne.n	8004616 <PCD_EP_ISR_Handler+0x6f2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2250      	movs	r2, #80	; 0x50
 8004542:	5a9b      	ldrh	r3, [r3, r2]
 8004544:	b29b      	uxth	r3, r3
 8004546:	001a      	movs	r2, r3
 8004548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454a:	189b      	adds	r3, r3, r2
 800454c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800454e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	00da      	lsls	r2, r3, #3
 8004554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004556:	18d3      	adds	r3, r2, r3
 8004558:	4a1e      	ldr	r2, [pc, #120]	; (80045d4 <PCD_EP_ISR_Handler+0x6b0>)
 800455a:	4694      	mov	ip, r2
 800455c:	4463      	add	r3, ip
 800455e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004562:	2200      	movs	r2, #0
 8004564:	801a      	strh	r2, [r3, #0]
 8004566:	e056      	b.n	8004616 <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800456e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004570:	785b      	ldrb	r3, [r3, #1]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d136      	bne.n	80045e4 <PCD_EP_ISR_Handler+0x6c0>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	637b      	str	r3, [r7, #52]	; 0x34
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2250      	movs	r2, #80	; 0x50
 8004582:	5a9b      	ldrh	r3, [r3, r2]
 8004584:	b29b      	uxth	r3, r3
 8004586:	001a      	movs	r2, r3
 8004588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800458a:	189b      	adds	r3, r3, r2
 800458c:	637b      	str	r3, [r7, #52]	; 0x34
 800458e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	00da      	lsls	r2, r3, #3
 8004594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004596:	18d3      	adds	r3, r2, r3
 8004598:	4a0b      	ldr	r2, [pc, #44]	; (80045c8 <PCD_EP_ISR_Handler+0x6a4>)
 800459a:	4694      	mov	ip, r2
 800459c:	4463      	add	r3, ip
 800459e:	633b      	str	r3, [r7, #48]	; 0x30
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	881b      	ldrh	r3, [r3, #0]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	4a0e      	ldr	r2, [pc, #56]	; (80045e0 <PCD_EP_ISR_Handler+0x6bc>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	801a      	strh	r2, [r3, #0]
 80045b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	4a09      	ldr	r2, [pc, #36]	; (80045dc <PCD_EP_ISR_Handler+0x6b8>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	801a      	strh	r2, [r3, #0]
 80045c0:	e029      	b.n	8004616 <PCD_EP_ISR_Handler+0x6f2>
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	00000f8f 	.word	0x00000f8f
 80045c8:	00000406 	.word	0x00000406
 80045cc:	ffff8f8f 	.word	0xffff8f8f
 80045d0:	ffff80c0 	.word	0xffff80c0
 80045d4:	00000402 	.word	0x00000402
 80045d8:	ffff8f0f 	.word	0xffff8f0f
 80045dc:	ffff8000 	.word	0xffff8000
 80045e0:	ffff83ff 	.word	0xffff83ff
 80045e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e6:	785b      	ldrb	r3, [r3, #1]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d114      	bne.n	8004616 <PCD_EP_ISR_Handler+0x6f2>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2250      	movs	r2, #80	; 0x50
 80045f2:	5a9b      	ldrh	r3, [r3, r2]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	001a      	movs	r2, r3
 80045f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045fa:	189b      	adds	r3, r3, r2
 80045fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	00da      	lsls	r2, r3, #3
 8004604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004606:	18d3      	adds	r3, r2, r3
 8004608:	4a3d      	ldr	r2, [pc, #244]	; (8004700 <PCD_EP_ISR_Handler+0x7dc>)
 800460a:	4694      	mov	ip, r2
 800460c:	4463      	add	r3, ip
 800460e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004612:	2200      	movs	r2, #0
 8004614:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004618:	781a      	ldrb	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	0011      	movs	r1, r2
 800461e:	0018      	movs	r0, r3
 8004620:	f007 fd60 	bl	800c0e4 <HAL_PCD_DataInStageCallback>
 8004624:	e05c      	b.n	80046e0 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8004626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004628:	78db      	ldrb	r3, [r3, #3]
 800462a:	2b02      	cmp	r3, #2
 800462c:	d150      	bne.n	80046d0 <PCD_EP_ISR_Handler+0x7ac>
 800462e:	2352      	movs	r3, #82	; 0x52
 8004630:	18fb      	adds	r3, r7, r3
 8004632:	881a      	ldrh	r2, [r3, #0]
 8004634:	2380      	movs	r3, #128	; 0x80
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	4013      	ands	r3, r2
 800463a:	d149      	bne.n	80046d0 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2250      	movs	r2, #80	; 0x50
 8004642:	5a9b      	ldrh	r3, [r3, r2]
 8004644:	b29b      	uxth	r3, r3
 8004646:	001a      	movs	r2, r3
 8004648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	18d2      	adds	r2, r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	18d3      	adds	r3, r2, r3
 8004656:	4a2b      	ldr	r2, [pc, #172]	; (8004704 <PCD_EP_ISR_Handler+0x7e0>)
 8004658:	4694      	mov	ip, r2
 800465a:	4463      	add	r3, ip
 800465c:	881a      	ldrh	r2, [r3, #0]
 800465e:	2140      	movs	r1, #64	; 0x40
 8004660:	187b      	adds	r3, r7, r1
 8004662:	0592      	lsls	r2, r2, #22
 8004664:	0d92      	lsrs	r2, r2, #22
 8004666:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8004668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800466a:	699a      	ldr	r2, [r3, #24]
 800466c:	187b      	adds	r3, r7, r1
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d907      	bls.n	8004684 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8004674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004676:	699a      	ldr	r2, [r3, #24]
 8004678:	187b      	adds	r3, r7, r1
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	1ad2      	subs	r2, r2, r3
 800467e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004680:	619a      	str	r2, [r3, #24]
 8004682:	e002      	b.n	800468a <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 8004684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004686:	2200      	movs	r2, #0
 8004688:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800468a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d107      	bne.n	80046a2 <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004694:	781a      	ldrb	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	0011      	movs	r1, r2
 800469a:	0018      	movs	r0, r3
 800469c:	f007 fd22 	bl	800c0e4 <HAL_PCD_DataInStageCallback>
 80046a0:	e01e      	b.n	80046e0 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80046a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a4:	695a      	ldr	r2, [r3, #20]
 80046a6:	2140      	movs	r1, #64	; 0x40
 80046a8:	187b      	adds	r3, r7, r1
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	18d2      	adds	r2, r2, r3
 80046ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80046b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b4:	69da      	ldr	r2, [r3, #28]
 80046b6:	187b      	adds	r3, r7, r1
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	18d2      	adds	r2, r2, r3
 80046bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046be:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046c6:	0011      	movs	r1, r2
 80046c8:	0018      	movs	r0, r3
 80046ca:	f004 facf 	bl	8008c6c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80046ce:	e007      	b.n	80046e0 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80046d0:	2352      	movs	r3, #82	; 0x52
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	881a      	ldrh	r2, [r3, #0]
 80046d6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	0018      	movs	r0, r3
 80046dc:	f000 f930 	bl	8004940 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2244      	movs	r2, #68	; 0x44
 80046e6:	5a9b      	ldrh	r3, [r3, r2]
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	b21b      	sxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	da01      	bge.n	80046f4 <PCD_EP_ISR_Handler+0x7d0>
 80046f0:	f7ff fc1e 	bl	8003f30 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	0018      	movs	r0, r3
 80046f8:	46bd      	mov	sp, r7
 80046fa:	b016      	add	sp, #88	; 0x58
 80046fc:	bdb0      	pop	{r4, r5, r7, pc}
 80046fe:	46c0      	nop			; (mov r8, r8)
 8004700:	00000406 	.word	0x00000406
 8004704:	00000402 	.word	0x00000402

08004708 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004708:	b590      	push	{r4, r7, lr}
 800470a:	b089      	sub	sp, #36	; 0x24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	1dbb      	adds	r3, r7, #6
 8004714:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004716:	1dbb      	adds	r3, r7, #6
 8004718:	881a      	ldrh	r2, [r3, #0]
 800471a:	2380      	movs	r3, #128	; 0x80
 800471c:	01db      	lsls	r3, r3, #7
 800471e:	4013      	ands	r3, r2
 8004720:	d100      	bne.n	8004724 <HAL_PCD_EP_DB_Receive+0x1c>
 8004722:	e07d      	b.n	8004820 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2250      	movs	r2, #80	; 0x50
 800472a:	5a9b      	ldrh	r3, [r3, r2]
 800472c:	b29b      	uxth	r3, r3
 800472e:	001a      	movs	r2, r3
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	18d2      	adds	r2, r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	18d3      	adds	r3, r2, r3
 800473e:	4a7a      	ldr	r2, [pc, #488]	; (8004928 <HAL_PCD_EP_DB_Receive+0x220>)
 8004740:	4694      	mov	ip, r2
 8004742:	4463      	add	r3, ip
 8004744:	881a      	ldrh	r2, [r3, #0]
 8004746:	211a      	movs	r1, #26
 8004748:	187b      	adds	r3, r7, r1
 800474a:	0592      	lsls	r2, r2, #22
 800474c:	0d92      	lsrs	r2, r2, #22
 800474e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	699a      	ldr	r2, [r3, #24]
 8004754:	187b      	adds	r3, r7, r1
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	429a      	cmp	r2, r3
 800475a:	d307      	bcc.n	800476c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	699a      	ldr	r2, [r3, #24]
 8004760:	187b      	adds	r3, r7, r1
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	1ad2      	subs	r2, r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	619a      	str	r2, [r3, #24]
 800476a:	e002      	b.n	8004772 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2200      	movs	r2, #0
 8004770:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d121      	bne.n	80047be <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	001a      	movs	r2, r3
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	18d3      	adds	r3, r2, r3
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	b29a      	uxth	r2, r3
 800478c:	2018      	movs	r0, #24
 800478e:	183b      	adds	r3, r7, r0
 8004790:	4966      	ldr	r1, [pc, #408]	; (800492c <HAL_PCD_EP_DB_Receive+0x224>)
 8004792:	400a      	ands	r2, r1
 8004794:	801a      	strh	r2, [r3, #0]
 8004796:	183b      	adds	r3, r7, r0
 8004798:	183a      	adds	r2, r7, r0
 800479a:	8812      	ldrh	r2, [r2, #0]
 800479c:	2180      	movs	r1, #128	; 0x80
 800479e:	0189      	lsls	r1, r1, #6
 80047a0:	404a      	eors	r2, r1
 80047a2:	801a      	strh	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	001a      	movs	r2, r3
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	18d3      	adds	r3, r2, r3
 80047b2:	183a      	adds	r2, r7, r0
 80047b4:	8812      	ldrh	r2, [r2, #0]
 80047b6:	495e      	ldr	r1, [pc, #376]	; (8004930 <HAL_PCD_EP_DB_Receive+0x228>)
 80047b8:	430a      	orrs	r2, r1
 80047ba:	b292      	uxth	r2, r2
 80047bc:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80047be:	1dbb      	adds	r3, r7, #6
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	2240      	movs	r2, #64	; 0x40
 80047c4:	4013      	ands	r3, r2
 80047c6:	d01a      	beq.n	80047fe <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	001a      	movs	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	18d3      	adds	r3, r2, r3
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	b29a      	uxth	r2, r3
 80047da:	2016      	movs	r0, #22
 80047dc:	183b      	adds	r3, r7, r0
 80047de:	4955      	ldr	r1, [pc, #340]	; (8004934 <HAL_PCD_EP_DB_Receive+0x22c>)
 80047e0:	400a      	ands	r2, r1
 80047e2:	801a      	strh	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	001a      	movs	r2, r3
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	18d3      	adds	r3, r2, r3
 80047f2:	183a      	adds	r2, r7, r0
 80047f4:	8812      	ldrh	r2, [r2, #0]
 80047f6:	4950      	ldr	r1, [pc, #320]	; (8004938 <HAL_PCD_EP_DB_Receive+0x230>)
 80047f8:	430a      	orrs	r2, r1
 80047fa:	b292      	uxth	r2, r2
 80047fc:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80047fe:	241a      	movs	r4, #26
 8004800:	193b      	adds	r3, r7, r4
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d100      	bne.n	800480a <HAL_PCD_EP_DB_Receive+0x102>
 8004808:	e086      	b.n	8004918 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	6959      	ldr	r1, [r3, #20]
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	891a      	ldrh	r2, [r3, #8]
 8004816:	193b      	adds	r3, r7, r4
 8004818:	881b      	ldrh	r3, [r3, #0]
 800481a:	f005 fc5f 	bl	800a0dc <USB_ReadPMA>
 800481e:	e07b      	b.n	8004918 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2250      	movs	r2, #80	; 0x50
 8004826:	5a9b      	ldrh	r3, [r3, r2]
 8004828:	b29b      	uxth	r3, r3
 800482a:	001a      	movs	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	18d2      	adds	r2, r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	18d3      	adds	r3, r2, r3
 800483a:	4a40      	ldr	r2, [pc, #256]	; (800493c <HAL_PCD_EP_DB_Receive+0x234>)
 800483c:	4694      	mov	ip, r2
 800483e:	4463      	add	r3, ip
 8004840:	881a      	ldrh	r2, [r3, #0]
 8004842:	211a      	movs	r1, #26
 8004844:	187b      	adds	r3, r7, r1
 8004846:	0592      	lsls	r2, r2, #22
 8004848:	0d92      	lsrs	r2, r2, #22
 800484a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	699a      	ldr	r2, [r3, #24]
 8004850:	187b      	adds	r3, r7, r1
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	429a      	cmp	r2, r3
 8004856:	d307      	bcc.n	8004868 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	699a      	ldr	r2, [r3, #24]
 800485c:	187b      	adds	r3, r7, r1
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	1ad2      	subs	r2, r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	619a      	str	r2, [r3, #24]
 8004866:	e002      	b.n	800486e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2200      	movs	r2, #0
 800486c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d121      	bne.n	80048ba <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	001a      	movs	r2, r3
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	18d3      	adds	r3, r2, r3
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	b29a      	uxth	r2, r3
 8004888:	201e      	movs	r0, #30
 800488a:	183b      	adds	r3, r7, r0
 800488c:	4927      	ldr	r1, [pc, #156]	; (800492c <HAL_PCD_EP_DB_Receive+0x224>)
 800488e:	400a      	ands	r2, r1
 8004890:	801a      	strh	r2, [r3, #0]
 8004892:	183b      	adds	r3, r7, r0
 8004894:	183a      	adds	r2, r7, r0
 8004896:	8812      	ldrh	r2, [r2, #0]
 8004898:	2180      	movs	r1, #128	; 0x80
 800489a:	0189      	lsls	r1, r1, #6
 800489c:	404a      	eors	r2, r1
 800489e:	801a      	strh	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	001a      	movs	r2, r3
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	18d3      	adds	r3, r2, r3
 80048ae:	183a      	adds	r2, r7, r0
 80048b0:	8812      	ldrh	r2, [r2, #0]
 80048b2:	491f      	ldr	r1, [pc, #124]	; (8004930 <HAL_PCD_EP_DB_Receive+0x228>)
 80048b4:	430a      	orrs	r2, r1
 80048b6:	b292      	uxth	r2, r2
 80048b8:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80048ba:	1dbb      	adds	r3, r7, #6
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	2240      	movs	r2, #64	; 0x40
 80048c0:	4013      	ands	r3, r2
 80048c2:	d11a      	bne.n	80048fa <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	001a      	movs	r2, r3
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	18d3      	adds	r3, r2, r3
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	201c      	movs	r0, #28
 80048d8:	183b      	adds	r3, r7, r0
 80048da:	4916      	ldr	r1, [pc, #88]	; (8004934 <HAL_PCD_EP_DB_Receive+0x22c>)
 80048dc:	400a      	ands	r2, r1
 80048de:	801a      	strh	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	001a      	movs	r2, r3
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	18d3      	adds	r3, r2, r3
 80048ee:	183a      	adds	r2, r7, r0
 80048f0:	8812      	ldrh	r2, [r2, #0]
 80048f2:	4911      	ldr	r1, [pc, #68]	; (8004938 <HAL_PCD_EP_DB_Receive+0x230>)
 80048f4:	430a      	orrs	r2, r1
 80048f6:	b292      	uxth	r2, r2
 80048f8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80048fa:	241a      	movs	r4, #26
 80048fc:	193b      	adds	r3, r7, r4
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d009      	beq.n	8004918 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	6959      	ldr	r1, [r3, #20]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	895a      	ldrh	r2, [r3, #10]
 8004910:	193b      	adds	r3, r7, r4
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	f005 fbe2 	bl	800a0dc <USB_ReadPMA>
    }
  }

  return count;
 8004918:	231a      	movs	r3, #26
 800491a:	18fb      	adds	r3, r7, r3
 800491c:	881b      	ldrh	r3, [r3, #0]
}
 800491e:	0018      	movs	r0, r3
 8004920:	46bd      	mov	sp, r7
 8004922:	b009      	add	sp, #36	; 0x24
 8004924:	bd90      	pop	{r4, r7, pc}
 8004926:	46c0      	nop			; (mov r8, r8)
 8004928:	00000402 	.word	0x00000402
 800492c:	ffffbf8f 	.word	0xffffbf8f
 8004930:	ffff8080 	.word	0xffff8080
 8004934:	ffff8f8f 	.word	0xffff8f8f
 8004938:	ffff80c0 	.word	0xffff80c0
 800493c:	00000406 	.word	0x00000406

08004940 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b0a2      	sub	sp, #136	; 0x88
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	1dbb      	adds	r3, r7, #6
 800494c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800494e:	1dbb      	adds	r3, r7, #6
 8004950:	881b      	ldrh	r3, [r3, #0]
 8004952:	2240      	movs	r2, #64	; 0x40
 8004954:	4013      	ands	r3, r2
 8004956:	d100      	bne.n	800495a <HAL_PCD_EP_DB_Transmit+0x1a>
 8004958:	e1c8      	b.n	8004cec <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2250      	movs	r2, #80	; 0x50
 8004960:	5a9b      	ldrh	r3, [r3, r2]
 8004962:	b29b      	uxth	r3, r3
 8004964:	001a      	movs	r2, r3
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	18d2      	adds	r2, r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	18d3      	adds	r3, r2, r3
 8004974:	4ad7      	ldr	r2, [pc, #860]	; (8004cd4 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004976:	4694      	mov	ip, r2
 8004978:	4463      	add	r3, ip
 800497a:	881a      	ldrh	r2, [r3, #0]
 800497c:	214e      	movs	r1, #78	; 0x4e
 800497e:	187b      	adds	r3, r7, r1
 8004980:	0592      	lsls	r2, r2, #22
 8004982:	0d92      	lsrs	r2, r2, #22
 8004984:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	187b      	adds	r3, r7, r1
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d907      	bls.n	80049a2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	699a      	ldr	r2, [r3, #24]
 8004996:	187b      	adds	r3, r7, r1
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	1ad2      	subs	r2, r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	619a      	str	r2, [r3, #24]
 80049a0:	e002      	b.n	80049a8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2200      	movs	r2, #0
 80049a6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d000      	beq.n	80049b2 <HAL_PCD_EP_DB_Transmit+0x72>
 80049b0:	e0b5      	b.n	8004b1e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	785b      	ldrb	r3, [r3, #1]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d125      	bne.n	8004a06 <HAL_PCD_EP_DB_Transmit+0xc6>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	62bb      	str	r3, [r7, #40]	; 0x28
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2250      	movs	r2, #80	; 0x50
 80049c6:	5a9b      	ldrh	r3, [r3, r2]
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	001a      	movs	r2, r3
 80049cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ce:	189b      	adds	r3, r3, r2
 80049d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	00da      	lsls	r2, r3, #3
 80049d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049da:	18d3      	adds	r3, r2, r3
 80049dc:	4abd      	ldr	r2, [pc, #756]	; (8004cd4 <HAL_PCD_EP_DB_Transmit+0x394>)
 80049de:	4694      	mov	ip, r2
 80049e0:	4463      	add	r3, ip
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	4abb      	ldr	r2, [pc, #748]	; (8004cd8 <HAL_PCD_EP_DB_Transmit+0x398>)
 80049ec:	4013      	ands	r3, r2
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	801a      	strh	r2, [r3, #0]
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	4ab8      	ldr	r2, [pc, #736]	; (8004cdc <HAL_PCD_EP_DB_Transmit+0x39c>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a02:	801a      	strh	r2, [r3, #0]
 8004a04:	e01b      	b.n	8004a3e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	785b      	ldrb	r3, [r3, #1]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d117      	bne.n	8004a3e <HAL_PCD_EP_DB_Transmit+0xfe>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	633b      	str	r3, [r7, #48]	; 0x30
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2250      	movs	r2, #80	; 0x50
 8004a1a:	5a9b      	ldrh	r3, [r3, r2]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	001a      	movs	r2, r3
 8004a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a22:	189b      	adds	r3, r3, r2
 8004a24:	633b      	str	r3, [r7, #48]	; 0x30
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	00da      	lsls	r2, r3, #3
 8004a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2e:	18d3      	adds	r3, r2, r3
 8004a30:	4aa8      	ldr	r2, [pc, #672]	; (8004cd4 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004a32:	4694      	mov	ip, r2
 8004a34:	4463      	add	r3, ip
 8004a36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	623b      	str	r3, [r7, #32]
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	785b      	ldrb	r3, [r3, #1]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d125      	bne.n	8004a98 <HAL_PCD_EP_DB_Transmit+0x158>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	61bb      	str	r3, [r7, #24]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2250      	movs	r2, #80	; 0x50
 8004a58:	5a9b      	ldrh	r3, [r3, r2]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	001a      	movs	r2, r3
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	189b      	adds	r3, r3, r2
 8004a62:	61bb      	str	r3, [r7, #24]
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	00da      	lsls	r2, r3, #3
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	18d3      	adds	r3, r2, r3
 8004a6e:	4a9c      	ldr	r2, [pc, #624]	; (8004ce0 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8004a70:	4694      	mov	ip, r2
 8004a72:	4463      	add	r3, ip
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	4a96      	ldr	r2, [pc, #600]	; (8004cd8 <HAL_PCD_EP_DB_Transmit+0x398>)
 8004a7e:	4013      	ands	r3, r2
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	801a      	strh	r2, [r3, #0]
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	4a93      	ldr	r2, [pc, #588]	; (8004cdc <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	801a      	strh	r2, [r3, #0]
 8004a96:	e018      	b.n	8004aca <HAL_PCD_EP_DB_Transmit+0x18a>
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	785b      	ldrb	r3, [r3, #1]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d114      	bne.n	8004aca <HAL_PCD_EP_DB_Transmit+0x18a>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2250      	movs	r2, #80	; 0x50
 8004aa6:	5a9b      	ldrh	r3, [r3, r2]
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	001a      	movs	r2, r3
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	189b      	adds	r3, r3, r2
 8004ab0:	623b      	str	r3, [r7, #32]
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	00da      	lsls	r2, r3, #3
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	18d3      	adds	r3, r2, r3
 8004abc:	4a88      	ldr	r2, [pc, #544]	; (8004ce0 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8004abe:	4694      	mov	ip, r2
 8004ac0:	4463      	add	r3, ip
 8004ac2:	61fb      	str	r3, [r7, #28]
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	781a      	ldrb	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	0011      	movs	r1, r2
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f007 fb06 	bl	800c0e4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ad8:	1dbb      	adds	r3, r7, #6
 8004ada:	881a      	ldrh	r2, [r3, #0]
 8004adc:	2380      	movs	r3, #128	; 0x80
 8004ade:	01db      	lsls	r3, r3, #7
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	d100      	bne.n	8004ae6 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8004ae4:	e2d4      	b.n	8005090 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	001a      	movs	r2, r3
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	18d3      	adds	r3, r2, r3
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	2012      	movs	r0, #18
 8004afa:	183b      	adds	r3, r7, r0
 8004afc:	4979      	ldr	r1, [pc, #484]	; (8004ce4 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8004afe:	400a      	ands	r2, r1
 8004b00:	801a      	strh	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	001a      	movs	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	18d3      	adds	r3, r2, r3
 8004b10:	183a      	adds	r2, r7, r0
 8004b12:	8812      	ldrh	r2, [r2, #0]
 8004b14:	4974      	ldr	r1, [pc, #464]	; (8004ce8 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8004b16:	430a      	orrs	r2, r1
 8004b18:	b292      	uxth	r2, r2
 8004b1a:	801a      	strh	r2, [r3, #0]
 8004b1c:	e2b8      	b.n	8005090 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004b1e:	1dbb      	adds	r3, r7, #6
 8004b20:	881a      	ldrh	r2, [r3, #0]
 8004b22:	2380      	movs	r3, #128	; 0x80
 8004b24:	01db      	lsls	r3, r3, #7
 8004b26:	4013      	ands	r3, r2
 8004b28:	d01a      	beq.n	8004b60 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	001a      	movs	r2, r3
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	18d3      	adds	r3, r2, r3
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	2044      	movs	r0, #68	; 0x44
 8004b3e:	183b      	adds	r3, r7, r0
 8004b40:	4968      	ldr	r1, [pc, #416]	; (8004ce4 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8004b42:	400a      	ands	r2, r1
 8004b44:	801a      	strh	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	001a      	movs	r2, r3
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	18d3      	adds	r3, r2, r3
 8004b54:	183a      	adds	r2, r7, r0
 8004b56:	8812      	ldrh	r2, [r2, #0]
 8004b58:	4963      	ldr	r1, [pc, #396]	; (8004ce8 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	b292      	uxth	r2, r2
 8004b5e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2224      	movs	r2, #36	; 0x24
 8004b64:	5c9b      	ldrb	r3, [r3, r2]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d000      	beq.n	8004b6c <HAL_PCD_EP_DB_Transmit+0x22c>
 8004b6a:	e291      	b.n	8005090 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	695a      	ldr	r2, [r3, #20]
 8004b70:	214e      	movs	r1, #78	; 0x4e
 8004b72:	187b      	adds	r3, r7, r1
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	18d2      	adds	r2, r2, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	69da      	ldr	r2, [r3, #28]
 8004b80:	187b      	adds	r3, r7, r1
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	18d2      	adds	r2, r2, r3
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	6a1a      	ldr	r2, [r3, #32]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d309      	bcc.n	8004baa <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	6a1a      	ldr	r2, [r3, #32]
 8004ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ba2:	1ad2      	subs	r2, r2, r3
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	621a      	str	r2, [r3, #32]
 8004ba8:	e016      	b.n	8004bd8 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d108      	bne.n	8004bc4 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8004bb2:	234e      	movs	r3, #78	; 0x4e
 8004bb4:	18fb      	adds	r3, r7, r3
 8004bb6:	881b      	ldrh	r3, [r3, #0]
 8004bb8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2224      	movs	r2, #36	; 0x24
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	5499      	strb	r1, [r3, r2]
 8004bc2:	e009      	b.n	8004bd8 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2224      	movs	r2, #36	; 0x24
 8004bc8:	2100      	movs	r1, #0
 8004bca:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	785b      	ldrb	r3, [r3, #1]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d150      	bne.n	8004c82 <HAL_PCD_EP_DB_Transmit+0x342>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2250      	movs	r2, #80	; 0x50
 8004bec:	5a9b      	ldrh	r3, [r3, r2]
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	001a      	movs	r2, r3
 8004bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf4:	189b      	adds	r3, r3, r2
 8004bf6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	00da      	lsls	r2, r3, #3
 8004bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c00:	18d3      	adds	r3, r2, r3
 8004c02:	4a34      	ldr	r2, [pc, #208]	; (8004cd4 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004c04:	4694      	mov	ip, r2
 8004c06:	4463      	add	r3, ip
 8004c08:	637b      	str	r3, [r7, #52]	; 0x34
 8004c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d110      	bne.n	8004c32 <HAL_PCD_EP_DB_Transmit+0x2f2>
 8004c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	4a30      	ldr	r2, [pc, #192]	; (8004cd8 <HAL_PCD_EP_DB_Transmit+0x398>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1e:	801a      	strh	r2, [r3, #0]
 8004c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	4a2d      	ldr	r2, [pc, #180]	; (8004cdc <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2e:	801a      	strh	r2, [r3, #0]
 8004c30:	e044      	b.n	8004cbc <HAL_PCD_EP_DB_Transmit+0x37c>
 8004c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c34:	2b3e      	cmp	r3, #62	; 0x3e
 8004c36:	d810      	bhi.n	8004c5a <HAL_PCD_EP_DB_Transmit+0x31a>
 8004c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c3a:	085b      	lsrs	r3, r3, #1
 8004c3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c40:	2201      	movs	r2, #1
 8004c42:	4013      	ands	r3, r2
 8004c44:	d002      	beq.n	8004c4c <HAL_PCD_EP_DB_Transmit+0x30c>
 8004c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c48:	3301      	adds	r3, #1
 8004c4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	029b      	lsls	r3, r3, #10
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c56:	801a      	strh	r2, [r3, #0]
 8004c58:	e030      	b.n	8004cbc <HAL_PCD_EP_DB_Transmit+0x37c>
 8004c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c5c:	095b      	lsrs	r3, r3, #5
 8004c5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c62:	221f      	movs	r2, #31
 8004c64:	4013      	ands	r3, r2
 8004c66:	d102      	bne.n	8004c6e <HAL_PCD_EP_DB_Transmit+0x32e>
 8004c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	029b      	lsls	r3, r3, #10
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	4a19      	ldr	r2, [pc, #100]	; (8004cdc <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7e:	801a      	strh	r2, [r3, #0]
 8004c80:	e01c      	b.n	8004cbc <HAL_PCD_EP_DB_Transmit+0x37c>
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	785b      	ldrb	r3, [r3, #1]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d118      	bne.n	8004cbc <HAL_PCD_EP_DB_Transmit+0x37c>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	643b      	str	r3, [r7, #64]	; 0x40
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2250      	movs	r2, #80	; 0x50
 8004c96:	5a9b      	ldrh	r3, [r3, r2]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	001a      	movs	r2, r3
 8004c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c9e:	189b      	adds	r3, r3, r2
 8004ca0:	643b      	str	r3, [r7, #64]	; 0x40
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	00da      	lsls	r2, r3, #3
 8004ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004caa:	18d3      	adds	r3, r2, r3
 8004cac:	4a09      	ldr	r2, [pc, #36]	; (8004cd4 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004cae:	4694      	mov	ip, r2
 8004cb0:	4463      	add	r3, ip
 8004cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cba:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	6959      	ldr	r1, [r3, #20]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	891a      	ldrh	r2, [r3, #8]
 8004cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	f005 f9c2 	bl	800a054 <USB_WritePMA>
 8004cd0:	e1de      	b.n	8005090 <HAL_PCD_EP_DB_Transmit+0x750>
 8004cd2:	46c0      	nop			; (mov r8, r8)
 8004cd4:	00000402 	.word	0x00000402
 8004cd8:	ffff83ff 	.word	0xffff83ff
 8004cdc:	ffff8000 	.word	0xffff8000
 8004ce0:	00000406 	.word	0x00000406
 8004ce4:	ffff8f8f 	.word	0xffff8f8f
 8004ce8:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2250      	movs	r2, #80	; 0x50
 8004cf2:	5a9b      	ldrh	r3, [r3, r2]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	001a      	movs	r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	00db      	lsls	r3, r3, #3
 8004cfe:	18d2      	adds	r2, r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	18d3      	adds	r3, r2, r3
 8004d06:	4aca      	ldr	r2, [pc, #808]	; (8005030 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004d08:	4694      	mov	ip, r2
 8004d0a:	4463      	add	r3, ip
 8004d0c:	881a      	ldrh	r2, [r3, #0]
 8004d0e:	214e      	movs	r1, #78	; 0x4e
 8004d10:	187b      	adds	r3, r7, r1
 8004d12:	0592      	lsls	r2, r2, #22
 8004d14:	0d92      	lsrs	r2, r2, #22
 8004d16:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	699a      	ldr	r2, [r3, #24]
 8004d1c:	187b      	adds	r3, r7, r1
 8004d1e:	881b      	ldrh	r3, [r3, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d307      	bcc.n	8004d34 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	699a      	ldr	r2, [r3, #24]
 8004d28:	187b      	adds	r3, r7, r1
 8004d2a:	881b      	ldrh	r3, [r3, #0]
 8004d2c:	1ad2      	subs	r2, r2, r3
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	619a      	str	r2, [r3, #24]
 8004d32:	e002      	b.n	8004d3a <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2200      	movs	r2, #0
 8004d38:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d000      	beq.n	8004d44 <HAL_PCD_EP_DB_Transmit+0x404>
 8004d42:	e0c0      	b.n	8004ec6 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d125      	bne.n	8004d98 <HAL_PCD_EP_DB_Transmit+0x458>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2250      	movs	r2, #80	; 0x50
 8004d58:	5a9b      	ldrh	r3, [r3, r2]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	001a      	movs	r2, r3
 8004d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d60:	189b      	adds	r3, r3, r2
 8004d62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	00da      	lsls	r2, r3, #3
 8004d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d6c:	18d3      	adds	r3, r2, r3
 8004d6e:	4ab1      	ldr	r2, [pc, #708]	; (8005034 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8004d70:	4694      	mov	ip, r2
 8004d72:	4463      	add	r3, ip
 8004d74:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d78:	881b      	ldrh	r3, [r3, #0]
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	4aae      	ldr	r2, [pc, #696]	; (8005038 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004d7e:	4013      	ands	r3, r2
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d84:	801a      	strh	r2, [r3, #0]
 8004d86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	4aab      	ldr	r2, [pc, #684]	; (800503c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d94:	801a      	strh	r2, [r3, #0]
 8004d96:	e01b      	b.n	8004dd0 <HAL_PCD_EP_DB_Transmit+0x490>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	785b      	ldrb	r3, [r3, #1]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d117      	bne.n	8004dd0 <HAL_PCD_EP_DB_Transmit+0x490>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	677b      	str	r3, [r7, #116]	; 0x74
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2250      	movs	r2, #80	; 0x50
 8004dac:	5a9b      	ldrh	r3, [r3, r2]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	001a      	movs	r2, r3
 8004db2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004db4:	189b      	adds	r3, r3, r2
 8004db6:	677b      	str	r3, [r7, #116]	; 0x74
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	00da      	lsls	r2, r3, #3
 8004dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dc0:	18d3      	adds	r3, r2, r3
 8004dc2:	4a9c      	ldr	r2, [pc, #624]	; (8005034 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8004dc4:	4694      	mov	ip, r2
 8004dc6:	4463      	add	r3, ip
 8004dc8:	673b      	str	r3, [r7, #112]	; 0x70
 8004dca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dcc:	2200      	movs	r2, #0
 8004dce:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	785b      	ldrb	r3, [r3, #1]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d130      	bne.n	8004e40 <HAL_PCD_EP_DB_Transmit+0x500>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2180      	movs	r1, #128	; 0x80
 8004de4:	187a      	adds	r2, r7, r1
 8004de6:	6013      	str	r3, [r2, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2250      	movs	r2, #80	; 0x50
 8004dee:	5a9b      	ldrh	r3, [r3, r2]
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	001a      	movs	r2, r3
 8004df4:	187b      	adds	r3, r7, r1
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	189b      	adds	r3, r3, r2
 8004dfa:	187a      	adds	r2, r7, r1
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	00da      	lsls	r2, r3, #3
 8004e04:	187b      	adds	r3, r7, r1
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	18d3      	adds	r3, r2, r3
 8004e0a:	4a89      	ldr	r2, [pc, #548]	; (8005030 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004e0c:	4694      	mov	ip, r2
 8004e0e:	4463      	add	r3, ip
 8004e10:	2184      	movs	r1, #132	; 0x84
 8004e12:	187a      	adds	r2, r7, r1
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	187b      	adds	r3, r7, r1
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	4a86      	ldr	r2, [pc, #536]	; (8005038 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004e20:	4013      	ands	r3, r2
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	187b      	adds	r3, r7, r1
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	801a      	strh	r2, [r3, #0]
 8004e2a:	187b      	adds	r3, r7, r1
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	4a82      	ldr	r2, [pc, #520]	; (800503c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	187b      	adds	r3, r7, r1
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	801a      	strh	r2, [r3, #0]
 8004e3e:	e018      	b.n	8004e72 <HAL_PCD_EP_DB_Transmit+0x532>
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	785b      	ldrb	r3, [r3, #1]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d114      	bne.n	8004e72 <HAL_PCD_EP_DB_Transmit+0x532>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2250      	movs	r2, #80	; 0x50
 8004e4e:	5a9b      	ldrh	r3, [r3, r2]
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	001a      	movs	r2, r3
 8004e54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e56:	189b      	adds	r3, r3, r2
 8004e58:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	00da      	lsls	r2, r3, #3
 8004e60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e62:	18d3      	adds	r3, r2, r3
 8004e64:	4a72      	ldr	r2, [pc, #456]	; (8005030 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004e66:	4694      	mov	ip, r2
 8004e68:	4463      	add	r3, ip
 8004e6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e6e:	2200      	movs	r2, #0
 8004e70:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	781a      	ldrb	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	0011      	movs	r1, r2
 8004e7a:	0018      	movs	r0, r3
 8004e7c:	f007 f932 	bl	800c0e4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004e80:	1dbb      	adds	r3, r7, #6
 8004e82:	881a      	ldrh	r2, [r3, #0]
 8004e84:	2380      	movs	r3, #128	; 0x80
 8004e86:	01db      	lsls	r3, r3, #7
 8004e88:	4013      	ands	r3, r2
 8004e8a:	d000      	beq.n	8004e8e <HAL_PCD_EP_DB_Transmit+0x54e>
 8004e8c:	e100      	b.n	8005090 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	001a      	movs	r2, r3
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	18d3      	adds	r3, r2, r3
 8004e9c:	881b      	ldrh	r3, [r3, #0]
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	2046      	movs	r0, #70	; 0x46
 8004ea2:	183b      	adds	r3, r7, r0
 8004ea4:	4966      	ldr	r1, [pc, #408]	; (8005040 <HAL_PCD_EP_DB_Transmit+0x700>)
 8004ea6:	400a      	ands	r2, r1
 8004ea8:	801a      	strh	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	001a      	movs	r2, r3
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	18d3      	adds	r3, r2, r3
 8004eb8:	183a      	adds	r2, r7, r0
 8004eba:	8812      	ldrh	r2, [r2, #0]
 8004ebc:	4961      	ldr	r1, [pc, #388]	; (8005044 <HAL_PCD_EP_DB_Transmit+0x704>)
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	b292      	uxth	r2, r2
 8004ec2:	801a      	strh	r2, [r3, #0]
 8004ec4:	e0e4      	b.n	8005090 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004ec6:	1dbb      	adds	r3, r7, #6
 8004ec8:	881a      	ldrh	r2, [r3, #0]
 8004eca:	2380      	movs	r3, #128	; 0x80
 8004ecc:	01db      	lsls	r3, r3, #7
 8004ece:	4013      	ands	r3, r2
 8004ed0:	d11a      	bne.n	8004f08 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	001a      	movs	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	18d3      	adds	r3, r2, r3
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	204c      	movs	r0, #76	; 0x4c
 8004ee6:	183b      	adds	r3, r7, r0
 8004ee8:	4955      	ldr	r1, [pc, #340]	; (8005040 <HAL_PCD_EP_DB_Transmit+0x700>)
 8004eea:	400a      	ands	r2, r1
 8004eec:	801a      	strh	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	001a      	movs	r2, r3
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	009b      	lsls	r3, r3, #2
 8004efa:	18d3      	adds	r3, r2, r3
 8004efc:	183a      	adds	r2, r7, r0
 8004efe:	8812      	ldrh	r2, [r2, #0]
 8004f00:	4950      	ldr	r1, [pc, #320]	; (8005044 <HAL_PCD_EP_DB_Transmit+0x704>)
 8004f02:	430a      	orrs	r2, r1
 8004f04:	b292      	uxth	r2, r2
 8004f06:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2224      	movs	r2, #36	; 0x24
 8004f0c:	5c9b      	ldrb	r3, [r3, r2]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d000      	beq.n	8004f14 <HAL_PCD_EP_DB_Transmit+0x5d4>
 8004f12:	e0bd      	b.n	8005090 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	695a      	ldr	r2, [r3, #20]
 8004f18:	214e      	movs	r1, #78	; 0x4e
 8004f1a:	187b      	adds	r3, r7, r1
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	18d2      	adds	r2, r2, r3
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	69da      	ldr	r2, [r3, #28]
 8004f28:	187b      	adds	r3, r7, r1
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	18d2      	adds	r2, r2, r3
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	6a1a      	ldr	r2, [r3, #32]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d309      	bcc.n	8004f52 <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	6a1a      	ldr	r2, [r3, #32]
 8004f48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f4a:	1ad2      	subs	r2, r2, r3
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	621a      	str	r2, [r3, #32]
 8004f50:	e016      	b.n	8004f80 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d108      	bne.n	8004f6c <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8004f5a:	234e      	movs	r3, #78	; 0x4e
 8004f5c:	18fb      	adds	r3, r7, r3
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2224      	movs	r2, #36	; 0x24
 8004f66:	2100      	movs	r1, #0
 8004f68:	5499      	strb	r1, [r3, r2]
 8004f6a:	e009      	b.n	8004f80 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2200      	movs	r2, #0
 8004f76:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2224      	movs	r2, #36	; 0x24
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	667b      	str	r3, [r7, #100]	; 0x64
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	785b      	ldrb	r3, [r3, #1]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d15c      	bne.n	8005048 <HAL_PCD_EP_DB_Transmit+0x708>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2250      	movs	r2, #80	; 0x50
 8004f9a:	5a9b      	ldrh	r3, [r3, r2]
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	001a      	movs	r2, r3
 8004fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fa2:	189b      	adds	r3, r3, r2
 8004fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	00da      	lsls	r2, r3, #3
 8004fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fae:	18d3      	adds	r3, r2, r3
 8004fb0:	4a1f      	ldr	r2, [pc, #124]	; (8005030 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004fb2:	4694      	mov	ip, r2
 8004fb4:	4463      	add	r3, ip
 8004fb6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d110      	bne.n	8004fe0 <HAL_PCD_EP_DB_Transmit+0x6a0>
 8004fbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	4a1c      	ldr	r2, [pc, #112]	; (8005038 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fcc:	801a      	strh	r2, [r3, #0]
 8004fce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fd0:	881b      	ldrh	r3, [r3, #0]
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	4a19      	ldr	r2, [pc, #100]	; (800503c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fdc:	801a      	strh	r2, [r3, #0]
 8004fde:	e04d      	b.n	800507c <HAL_PCD_EP_DB_Transmit+0x73c>
 8004fe0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fe2:	2b3e      	cmp	r3, #62	; 0x3e
 8004fe4:	d810      	bhi.n	8005008 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fe8:	085b      	lsrs	r3, r3, #1
 8004fea:	657b      	str	r3, [r7, #84]	; 0x54
 8004fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fee:	2201      	movs	r2, #1
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	d002      	beq.n	8004ffa <HAL_PCD_EP_DB_Transmit+0x6ba>
 8004ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	657b      	str	r3, [r7, #84]	; 0x54
 8004ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	029b      	lsls	r3, r3, #10
 8005000:	b29a      	uxth	r2, r3
 8005002:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005004:	801a      	strh	r2, [r3, #0]
 8005006:	e039      	b.n	800507c <HAL_PCD_EP_DB_Transmit+0x73c>
 8005008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	657b      	str	r3, [r7, #84]	; 0x54
 800500e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005010:	221f      	movs	r2, #31
 8005012:	4013      	ands	r3, r2
 8005014:	d102      	bne.n	800501c <HAL_PCD_EP_DB_Transmit+0x6dc>
 8005016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005018:	3b01      	subs	r3, #1
 800501a:	657b      	str	r3, [r7, #84]	; 0x54
 800501c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800501e:	b29b      	uxth	r3, r3
 8005020:	029b      	lsls	r3, r3, #10
 8005022:	b29b      	uxth	r3, r3
 8005024:	4a05      	ldr	r2, [pc, #20]	; (800503c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005026:	4313      	orrs	r3, r2
 8005028:	b29a      	uxth	r2, r3
 800502a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800502c:	801a      	strh	r2, [r3, #0]
 800502e:	e025      	b.n	800507c <HAL_PCD_EP_DB_Transmit+0x73c>
 8005030:	00000406 	.word	0x00000406
 8005034:	00000402 	.word	0x00000402
 8005038:	ffff83ff 	.word	0xffff83ff
 800503c:	ffff8000 	.word	0xffff8000
 8005040:	ffff8f8f 	.word	0xffff8f8f
 8005044:	ffffc080 	.word	0xffffc080
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	785b      	ldrb	r3, [r3, #1]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d115      	bne.n	800507c <HAL_PCD_EP_DB_Transmit+0x73c>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2250      	movs	r2, #80	; 0x50
 8005056:	5a9b      	ldrh	r3, [r3, r2]
 8005058:	b29b      	uxth	r3, r3
 800505a:	001a      	movs	r2, r3
 800505c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800505e:	189b      	adds	r3, r3, r2
 8005060:	667b      	str	r3, [r7, #100]	; 0x64
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	00da      	lsls	r2, r3, #3
 8005068:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800506a:	18d3      	adds	r3, r2, r3
 800506c:	4a1e      	ldr	r2, [pc, #120]	; (80050e8 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 800506e:	4694      	mov	ip, r2
 8005070:	4463      	add	r3, ip
 8005072:	663b      	str	r3, [r7, #96]	; 0x60
 8005074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005076:	b29a      	uxth	r2, r3
 8005078:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800507a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6818      	ldr	r0, [r3, #0]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	6959      	ldr	r1, [r3, #20]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	895a      	ldrh	r2, [r3, #10]
 8005088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800508a:	b29b      	uxth	r3, r3
 800508c:	f004 ffe2 	bl	800a054 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	001a      	movs	r2, r3
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	18d3      	adds	r3, r2, r3
 800509e:	881b      	ldrh	r3, [r3, #0]
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	2010      	movs	r0, #16
 80050a4:	183b      	adds	r3, r7, r0
 80050a6:	4911      	ldr	r1, [pc, #68]	; (80050ec <HAL_PCD_EP_DB_Transmit+0x7ac>)
 80050a8:	400a      	ands	r2, r1
 80050aa:	801a      	strh	r2, [r3, #0]
 80050ac:	183b      	adds	r3, r7, r0
 80050ae:	183a      	adds	r2, r7, r0
 80050b0:	8812      	ldrh	r2, [r2, #0]
 80050b2:	2110      	movs	r1, #16
 80050b4:	404a      	eors	r2, r1
 80050b6:	801a      	strh	r2, [r3, #0]
 80050b8:	183b      	adds	r3, r7, r0
 80050ba:	183a      	adds	r2, r7, r0
 80050bc:	8812      	ldrh	r2, [r2, #0]
 80050be:	2120      	movs	r1, #32
 80050c0:	404a      	eors	r2, r1
 80050c2:	801a      	strh	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	001a      	movs	r2, r3
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	18d3      	adds	r3, r2, r3
 80050d2:	183a      	adds	r2, r7, r0
 80050d4:	8812      	ldrh	r2, [r2, #0]
 80050d6:	4906      	ldr	r1, [pc, #24]	; (80050f0 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 80050d8:	430a      	orrs	r2, r1
 80050da:	b292      	uxth	r2, r2
 80050dc:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	0018      	movs	r0, r3
 80050e2:	46bd      	mov	sp, r7
 80050e4:	b022      	add	sp, #136	; 0x88
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	00000406 	.word	0x00000406
 80050ec:	ffff8fbf 	.word	0xffff8fbf
 80050f0:	ffff8080 	.word	0xffff8080

080050f4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80050f4:	b590      	push	{r4, r7, lr}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	0008      	movs	r0, r1
 80050fe:	0011      	movs	r1, r2
 8005100:	607b      	str	r3, [r7, #4]
 8005102:	240a      	movs	r4, #10
 8005104:	193b      	adds	r3, r7, r4
 8005106:	1c02      	adds	r2, r0, #0
 8005108:	801a      	strh	r2, [r3, #0]
 800510a:	2308      	movs	r3, #8
 800510c:	18fb      	adds	r3, r7, r3
 800510e:	1c0a      	adds	r2, r1, #0
 8005110:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005112:	0021      	movs	r1, r4
 8005114:	187b      	adds	r3, r7, r1
 8005116:	881b      	ldrh	r3, [r3, #0]
 8005118:	2280      	movs	r2, #128	; 0x80
 800511a:	4013      	ands	r3, r2
 800511c:	b29b      	uxth	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00c      	beq.n	800513c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005122:	187b      	adds	r3, r7, r1
 8005124:	881b      	ldrh	r3, [r3, #0]
 8005126:	2207      	movs	r2, #7
 8005128:	4013      	ands	r3, r2
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	0013      	movs	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	189b      	adds	r3, r3, r2
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	18d3      	adds	r3, r2, r3
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	e00b      	b.n	8005154 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800513c:	230a      	movs	r3, #10
 800513e:	18fb      	adds	r3, r7, r3
 8005140:	881a      	ldrh	r2, [r3, #0]
 8005142:	0013      	movs	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	189b      	adds	r3, r3, r2
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	3369      	adds	r3, #105	; 0x69
 800514c:	33ff      	adds	r3, #255	; 0xff
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	18d3      	adds	r3, r2, r3
 8005152:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005154:	2308      	movs	r3, #8
 8005156:	18fb      	adds	r3, r7, r3
 8005158:	881b      	ldrh	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d107      	bne.n	800516e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	2200      	movs	r2, #0
 8005162:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	b29a      	uxth	r2, r3
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	80da      	strh	r2, [r3, #6]
 800516c:	e00b      	b.n	8005186 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2201      	movs	r2, #1
 8005172:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	b29a      	uxth	r2, r3
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	0c1b      	lsrs	r3, r3, #16
 8005180:	b29a      	uxth	r2, r3
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	0018      	movs	r0, r3
 800518a:	46bd      	mov	sp, r7
 800518c:	b007      	add	sp, #28
 800518e:	bd90      	pop	{r4, r7, pc}

08005190 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	23ba      	movs	r3, #186	; 0xba
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	2101      	movs	r1, #1
 80051a6:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	23b8      	movs	r3, #184	; 0xb8
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	2100      	movs	r1, #0
 80051b0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2254      	movs	r2, #84	; 0x54
 80051b6:	5a9b      	ldrh	r3, [r3, r2]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2201      	movs	r2, #1
 80051bc:	4313      	orrs	r3, r2
 80051be:	b299      	uxth	r1, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2254      	movs	r2, #84	; 0x54
 80051c4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2254      	movs	r2, #84	; 0x54
 80051ca:	5a9b      	ldrh	r3, [r3, r2]
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2202      	movs	r2, #2
 80051d0:	4313      	orrs	r3, r2
 80051d2:	b299      	uxth	r1, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2254      	movs	r2, #84	; 0x54
 80051d8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	0018      	movs	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	b004      	add	sp, #16
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	000a      	movs	r2, r1
 80051ee:	1cfb      	adds	r3, r7, #3
 80051f0:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80051f2:	46c0      	nop			; (mov r8, r8)
 80051f4:	46bd      	mov	sp, r7
 80051f6:	b002      	add	sp, #8
 80051f8:	bd80      	pop	{r7, pc}
	...

080051fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b088      	sub	sp, #32
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d102      	bne.n	8005210 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	f000 fb76 	bl	80058fc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2201      	movs	r2, #1
 8005216:	4013      	ands	r3, r2
 8005218:	d100      	bne.n	800521c <HAL_RCC_OscConfig+0x20>
 800521a:	e08e      	b.n	800533a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800521c:	4bc5      	ldr	r3, [pc, #788]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	220c      	movs	r2, #12
 8005222:	4013      	ands	r3, r2
 8005224:	2b04      	cmp	r3, #4
 8005226:	d00e      	beq.n	8005246 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005228:	4bc2      	ldr	r3, [pc, #776]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	220c      	movs	r2, #12
 800522e:	4013      	ands	r3, r2
 8005230:	2b08      	cmp	r3, #8
 8005232:	d117      	bne.n	8005264 <HAL_RCC_OscConfig+0x68>
 8005234:	4bbf      	ldr	r3, [pc, #764]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	23c0      	movs	r3, #192	; 0xc0
 800523a:	025b      	lsls	r3, r3, #9
 800523c:	401a      	ands	r2, r3
 800523e:	2380      	movs	r3, #128	; 0x80
 8005240:	025b      	lsls	r3, r3, #9
 8005242:	429a      	cmp	r2, r3
 8005244:	d10e      	bne.n	8005264 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005246:	4bbb      	ldr	r3, [pc, #748]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	2380      	movs	r3, #128	; 0x80
 800524c:	029b      	lsls	r3, r3, #10
 800524e:	4013      	ands	r3, r2
 8005250:	d100      	bne.n	8005254 <HAL_RCC_OscConfig+0x58>
 8005252:	e071      	b.n	8005338 <HAL_RCC_OscConfig+0x13c>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d000      	beq.n	800525e <HAL_RCC_OscConfig+0x62>
 800525c:	e06c      	b.n	8005338 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	f000 fb4c 	bl	80058fc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d107      	bne.n	800527c <HAL_RCC_OscConfig+0x80>
 800526c:	4bb1      	ldr	r3, [pc, #708]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	4bb0      	ldr	r3, [pc, #704]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 8005272:	2180      	movs	r1, #128	; 0x80
 8005274:	0249      	lsls	r1, r1, #9
 8005276:	430a      	orrs	r2, r1
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	e02f      	b.n	80052dc <HAL_RCC_OscConfig+0xe0>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10c      	bne.n	800529e <HAL_RCC_OscConfig+0xa2>
 8005284:	4bab      	ldr	r3, [pc, #684]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	4baa      	ldr	r3, [pc, #680]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 800528a:	49ab      	ldr	r1, [pc, #684]	; (8005538 <HAL_RCC_OscConfig+0x33c>)
 800528c:	400a      	ands	r2, r1
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	4ba8      	ldr	r3, [pc, #672]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	4ba7      	ldr	r3, [pc, #668]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 8005296:	49a9      	ldr	r1, [pc, #676]	; (800553c <HAL_RCC_OscConfig+0x340>)
 8005298:	400a      	ands	r2, r1
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	e01e      	b.n	80052dc <HAL_RCC_OscConfig+0xe0>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2b05      	cmp	r3, #5
 80052a4:	d10e      	bne.n	80052c4 <HAL_RCC_OscConfig+0xc8>
 80052a6:	4ba3      	ldr	r3, [pc, #652]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	4ba2      	ldr	r3, [pc, #648]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 80052ac:	2180      	movs	r1, #128	; 0x80
 80052ae:	02c9      	lsls	r1, r1, #11
 80052b0:	430a      	orrs	r2, r1
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	4b9f      	ldr	r3, [pc, #636]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	4b9e      	ldr	r3, [pc, #632]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 80052ba:	2180      	movs	r1, #128	; 0x80
 80052bc:	0249      	lsls	r1, r1, #9
 80052be:	430a      	orrs	r2, r1
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	e00b      	b.n	80052dc <HAL_RCC_OscConfig+0xe0>
 80052c4:	4b9b      	ldr	r3, [pc, #620]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	4b9a      	ldr	r3, [pc, #616]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 80052ca:	499b      	ldr	r1, [pc, #620]	; (8005538 <HAL_RCC_OscConfig+0x33c>)
 80052cc:	400a      	ands	r2, r1
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	4b98      	ldr	r3, [pc, #608]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	4b97      	ldr	r3, [pc, #604]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 80052d6:	4999      	ldr	r1, [pc, #612]	; (800553c <HAL_RCC_OscConfig+0x340>)
 80052d8:	400a      	ands	r2, r1
 80052da:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d014      	beq.n	800530e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e4:	f7fd f824 	bl	8002330 <HAL_GetTick>
 80052e8:	0003      	movs	r3, r0
 80052ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ec:	e008      	b.n	8005300 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052ee:	f7fd f81f 	bl	8002330 <HAL_GetTick>
 80052f2:	0002      	movs	r2, r0
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b64      	cmp	r3, #100	; 0x64
 80052fa:	d901      	bls.n	8005300 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e2fd      	b.n	80058fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005300:	4b8c      	ldr	r3, [pc, #560]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	2380      	movs	r3, #128	; 0x80
 8005306:	029b      	lsls	r3, r3, #10
 8005308:	4013      	ands	r3, r2
 800530a:	d0f0      	beq.n	80052ee <HAL_RCC_OscConfig+0xf2>
 800530c:	e015      	b.n	800533a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800530e:	f7fd f80f 	bl	8002330 <HAL_GetTick>
 8005312:	0003      	movs	r3, r0
 8005314:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005316:	e008      	b.n	800532a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005318:	f7fd f80a 	bl	8002330 <HAL_GetTick>
 800531c:	0002      	movs	r2, r0
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b64      	cmp	r3, #100	; 0x64
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e2e8      	b.n	80058fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800532a:	4b82      	ldr	r3, [pc, #520]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	2380      	movs	r3, #128	; 0x80
 8005330:	029b      	lsls	r3, r3, #10
 8005332:	4013      	ands	r3, r2
 8005334:	d1f0      	bne.n	8005318 <HAL_RCC_OscConfig+0x11c>
 8005336:	e000      	b.n	800533a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005338:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2202      	movs	r2, #2
 8005340:	4013      	ands	r3, r2
 8005342:	d100      	bne.n	8005346 <HAL_RCC_OscConfig+0x14a>
 8005344:	e06c      	b.n	8005420 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005346:	4b7b      	ldr	r3, [pc, #492]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	220c      	movs	r2, #12
 800534c:	4013      	ands	r3, r2
 800534e:	d00e      	beq.n	800536e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005350:	4b78      	ldr	r3, [pc, #480]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	220c      	movs	r2, #12
 8005356:	4013      	ands	r3, r2
 8005358:	2b08      	cmp	r3, #8
 800535a:	d11f      	bne.n	800539c <HAL_RCC_OscConfig+0x1a0>
 800535c:	4b75      	ldr	r3, [pc, #468]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	23c0      	movs	r3, #192	; 0xc0
 8005362:	025b      	lsls	r3, r3, #9
 8005364:	401a      	ands	r2, r3
 8005366:	2380      	movs	r3, #128	; 0x80
 8005368:	021b      	lsls	r3, r3, #8
 800536a:	429a      	cmp	r2, r3
 800536c:	d116      	bne.n	800539c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800536e:	4b71      	ldr	r3, [pc, #452]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2202      	movs	r2, #2
 8005374:	4013      	ands	r3, r2
 8005376:	d005      	beq.n	8005384 <HAL_RCC_OscConfig+0x188>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d001      	beq.n	8005384 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e2bb      	b.n	80058fc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005384:	4b6b      	ldr	r3, [pc, #428]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	22f8      	movs	r2, #248	; 0xf8
 800538a:	4393      	bics	r3, r2
 800538c:	0019      	movs	r1, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	00da      	lsls	r2, r3, #3
 8005394:	4b67      	ldr	r3, [pc, #412]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 8005396:	430a      	orrs	r2, r1
 8005398:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800539a:	e041      	b.n	8005420 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d024      	beq.n	80053ee <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053a4:	4b63      	ldr	r3, [pc, #396]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	4b62      	ldr	r3, [pc, #392]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 80053aa:	2101      	movs	r1, #1
 80053ac:	430a      	orrs	r2, r1
 80053ae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b0:	f7fc ffbe 	bl	8002330 <HAL_GetTick>
 80053b4:	0003      	movs	r3, r0
 80053b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053b8:	e008      	b.n	80053cc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053ba:	f7fc ffb9 	bl	8002330 <HAL_GetTick>
 80053be:	0002      	movs	r2, r0
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e297      	b.n	80058fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053cc:	4b59      	ldr	r3, [pc, #356]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2202      	movs	r2, #2
 80053d2:	4013      	ands	r3, r2
 80053d4:	d0f1      	beq.n	80053ba <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053d6:	4b57      	ldr	r3, [pc, #348]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	22f8      	movs	r2, #248	; 0xf8
 80053dc:	4393      	bics	r3, r2
 80053de:	0019      	movs	r1, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	00da      	lsls	r2, r3, #3
 80053e6:	4b53      	ldr	r3, [pc, #332]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 80053e8:	430a      	orrs	r2, r1
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	e018      	b.n	8005420 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ee:	4b51      	ldr	r3, [pc, #324]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	4b50      	ldr	r3, [pc, #320]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 80053f4:	2101      	movs	r1, #1
 80053f6:	438a      	bics	r2, r1
 80053f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fa:	f7fc ff99 	bl	8002330 <HAL_GetTick>
 80053fe:	0003      	movs	r3, r0
 8005400:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005404:	f7fc ff94 	bl	8002330 <HAL_GetTick>
 8005408:	0002      	movs	r2, r0
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b02      	cmp	r3, #2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e272      	b.n	80058fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005416:	4b47      	ldr	r3, [pc, #284]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2202      	movs	r2, #2
 800541c:	4013      	ands	r3, r2
 800541e:	d1f1      	bne.n	8005404 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2208      	movs	r2, #8
 8005426:	4013      	ands	r3, r2
 8005428:	d036      	beq.n	8005498 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d019      	beq.n	8005466 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005432:	4b40      	ldr	r3, [pc, #256]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 8005434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005436:	4b3f      	ldr	r3, [pc, #252]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 8005438:	2101      	movs	r1, #1
 800543a:	430a      	orrs	r2, r1
 800543c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800543e:	f7fc ff77 	bl	8002330 <HAL_GetTick>
 8005442:	0003      	movs	r3, r0
 8005444:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005448:	f7fc ff72 	bl	8002330 <HAL_GetTick>
 800544c:	0002      	movs	r2, r0
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e250      	b.n	80058fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800545a:	4b36      	ldr	r3, [pc, #216]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 800545c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545e:	2202      	movs	r2, #2
 8005460:	4013      	ands	r3, r2
 8005462:	d0f1      	beq.n	8005448 <HAL_RCC_OscConfig+0x24c>
 8005464:	e018      	b.n	8005498 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005466:	4b33      	ldr	r3, [pc, #204]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 8005468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800546a:	4b32      	ldr	r3, [pc, #200]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 800546c:	2101      	movs	r1, #1
 800546e:	438a      	bics	r2, r1
 8005470:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005472:	f7fc ff5d 	bl	8002330 <HAL_GetTick>
 8005476:	0003      	movs	r3, r0
 8005478:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800547c:	f7fc ff58 	bl	8002330 <HAL_GetTick>
 8005480:	0002      	movs	r2, r0
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e236      	b.n	80058fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800548e:	4b29      	ldr	r3, [pc, #164]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	2202      	movs	r2, #2
 8005494:	4013      	ands	r3, r2
 8005496:	d1f1      	bne.n	800547c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2204      	movs	r2, #4
 800549e:	4013      	ands	r3, r2
 80054a0:	d100      	bne.n	80054a4 <HAL_RCC_OscConfig+0x2a8>
 80054a2:	e0b5      	b.n	8005610 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054a4:	201f      	movs	r0, #31
 80054a6:	183b      	adds	r3, r7, r0
 80054a8:	2200      	movs	r2, #0
 80054aa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054ac:	4b21      	ldr	r3, [pc, #132]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 80054ae:	69da      	ldr	r2, [r3, #28]
 80054b0:	2380      	movs	r3, #128	; 0x80
 80054b2:	055b      	lsls	r3, r3, #21
 80054b4:	4013      	ands	r3, r2
 80054b6:	d110      	bne.n	80054da <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054b8:	4b1e      	ldr	r3, [pc, #120]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 80054ba:	69da      	ldr	r2, [r3, #28]
 80054bc:	4b1d      	ldr	r3, [pc, #116]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 80054be:	2180      	movs	r1, #128	; 0x80
 80054c0:	0549      	lsls	r1, r1, #21
 80054c2:	430a      	orrs	r2, r1
 80054c4:	61da      	str	r2, [r3, #28]
 80054c6:	4b1b      	ldr	r3, [pc, #108]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 80054c8:	69da      	ldr	r2, [r3, #28]
 80054ca:	2380      	movs	r3, #128	; 0x80
 80054cc:	055b      	lsls	r3, r3, #21
 80054ce:	4013      	ands	r3, r2
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80054d4:	183b      	adds	r3, r7, r0
 80054d6:	2201      	movs	r2, #1
 80054d8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054da:	4b19      	ldr	r3, [pc, #100]	; (8005540 <HAL_RCC_OscConfig+0x344>)
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	2380      	movs	r3, #128	; 0x80
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	4013      	ands	r3, r2
 80054e4:	d11a      	bne.n	800551c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054e6:	4b16      	ldr	r3, [pc, #88]	; (8005540 <HAL_RCC_OscConfig+0x344>)
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	4b15      	ldr	r3, [pc, #84]	; (8005540 <HAL_RCC_OscConfig+0x344>)
 80054ec:	2180      	movs	r1, #128	; 0x80
 80054ee:	0049      	lsls	r1, r1, #1
 80054f0:	430a      	orrs	r2, r1
 80054f2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054f4:	f7fc ff1c 	bl	8002330 <HAL_GetTick>
 80054f8:	0003      	movs	r3, r0
 80054fa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054fc:	e008      	b.n	8005510 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054fe:	f7fc ff17 	bl	8002330 <HAL_GetTick>
 8005502:	0002      	movs	r2, r0
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b64      	cmp	r3, #100	; 0x64
 800550a:	d901      	bls.n	8005510 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e1f5      	b.n	80058fc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005510:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <HAL_RCC_OscConfig+0x344>)
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	2380      	movs	r3, #128	; 0x80
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	4013      	ands	r3, r2
 800551a:	d0f0      	beq.n	80054fe <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d10f      	bne.n	8005544 <HAL_RCC_OscConfig+0x348>
 8005524:	4b03      	ldr	r3, [pc, #12]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 8005526:	6a1a      	ldr	r2, [r3, #32]
 8005528:	4b02      	ldr	r3, [pc, #8]	; (8005534 <HAL_RCC_OscConfig+0x338>)
 800552a:	2101      	movs	r1, #1
 800552c:	430a      	orrs	r2, r1
 800552e:	621a      	str	r2, [r3, #32]
 8005530:	e036      	b.n	80055a0 <HAL_RCC_OscConfig+0x3a4>
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	40021000 	.word	0x40021000
 8005538:	fffeffff 	.word	0xfffeffff
 800553c:	fffbffff 	.word	0xfffbffff
 8005540:	40007000 	.word	0x40007000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10c      	bne.n	8005566 <HAL_RCC_OscConfig+0x36a>
 800554c:	4bca      	ldr	r3, [pc, #808]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 800554e:	6a1a      	ldr	r2, [r3, #32]
 8005550:	4bc9      	ldr	r3, [pc, #804]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005552:	2101      	movs	r1, #1
 8005554:	438a      	bics	r2, r1
 8005556:	621a      	str	r2, [r3, #32]
 8005558:	4bc7      	ldr	r3, [pc, #796]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 800555a:	6a1a      	ldr	r2, [r3, #32]
 800555c:	4bc6      	ldr	r3, [pc, #792]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 800555e:	2104      	movs	r1, #4
 8005560:	438a      	bics	r2, r1
 8005562:	621a      	str	r2, [r3, #32]
 8005564:	e01c      	b.n	80055a0 <HAL_RCC_OscConfig+0x3a4>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	2b05      	cmp	r3, #5
 800556c:	d10c      	bne.n	8005588 <HAL_RCC_OscConfig+0x38c>
 800556e:	4bc2      	ldr	r3, [pc, #776]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005570:	6a1a      	ldr	r2, [r3, #32]
 8005572:	4bc1      	ldr	r3, [pc, #772]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005574:	2104      	movs	r1, #4
 8005576:	430a      	orrs	r2, r1
 8005578:	621a      	str	r2, [r3, #32]
 800557a:	4bbf      	ldr	r3, [pc, #764]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 800557c:	6a1a      	ldr	r2, [r3, #32]
 800557e:	4bbe      	ldr	r3, [pc, #760]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005580:	2101      	movs	r1, #1
 8005582:	430a      	orrs	r2, r1
 8005584:	621a      	str	r2, [r3, #32]
 8005586:	e00b      	b.n	80055a0 <HAL_RCC_OscConfig+0x3a4>
 8005588:	4bbb      	ldr	r3, [pc, #748]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 800558a:	6a1a      	ldr	r2, [r3, #32]
 800558c:	4bba      	ldr	r3, [pc, #744]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 800558e:	2101      	movs	r1, #1
 8005590:	438a      	bics	r2, r1
 8005592:	621a      	str	r2, [r3, #32]
 8005594:	4bb8      	ldr	r3, [pc, #736]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005596:	6a1a      	ldr	r2, [r3, #32]
 8005598:	4bb7      	ldr	r3, [pc, #732]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 800559a:	2104      	movs	r1, #4
 800559c:	438a      	bics	r2, r1
 800559e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d014      	beq.n	80055d2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055a8:	f7fc fec2 	bl	8002330 <HAL_GetTick>
 80055ac:	0003      	movs	r3, r0
 80055ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055b0:	e009      	b.n	80055c6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055b2:	f7fc febd 	bl	8002330 <HAL_GetTick>
 80055b6:	0002      	movs	r2, r0
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	4aaf      	ldr	r2, [pc, #700]	; (800587c <HAL_RCC_OscConfig+0x680>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e19a      	b.n	80058fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055c6:	4bac      	ldr	r3, [pc, #688]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	2202      	movs	r2, #2
 80055cc:	4013      	ands	r3, r2
 80055ce:	d0f0      	beq.n	80055b2 <HAL_RCC_OscConfig+0x3b6>
 80055d0:	e013      	b.n	80055fa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055d2:	f7fc fead 	bl	8002330 <HAL_GetTick>
 80055d6:	0003      	movs	r3, r0
 80055d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055da:	e009      	b.n	80055f0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055dc:	f7fc fea8 	bl	8002330 <HAL_GetTick>
 80055e0:	0002      	movs	r2, r0
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	4aa5      	ldr	r2, [pc, #660]	; (800587c <HAL_RCC_OscConfig+0x680>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d901      	bls.n	80055f0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e185      	b.n	80058fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055f0:	4ba1      	ldr	r3, [pc, #644]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	2202      	movs	r2, #2
 80055f6:	4013      	ands	r3, r2
 80055f8:	d1f0      	bne.n	80055dc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80055fa:	231f      	movs	r3, #31
 80055fc:	18fb      	adds	r3, r7, r3
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2b01      	cmp	r3, #1
 8005602:	d105      	bne.n	8005610 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005604:	4b9c      	ldr	r3, [pc, #624]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005606:	69da      	ldr	r2, [r3, #28]
 8005608:	4b9b      	ldr	r3, [pc, #620]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 800560a:	499d      	ldr	r1, [pc, #628]	; (8005880 <HAL_RCC_OscConfig+0x684>)
 800560c:	400a      	ands	r2, r1
 800560e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2210      	movs	r2, #16
 8005616:	4013      	ands	r3, r2
 8005618:	d063      	beq.n	80056e2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d12a      	bne.n	8005678 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005622:	4b95      	ldr	r3, [pc, #596]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005626:	4b94      	ldr	r3, [pc, #592]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005628:	2104      	movs	r1, #4
 800562a:	430a      	orrs	r2, r1
 800562c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800562e:	4b92      	ldr	r3, [pc, #584]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005632:	4b91      	ldr	r3, [pc, #580]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005634:	2101      	movs	r1, #1
 8005636:	430a      	orrs	r2, r1
 8005638:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800563a:	f7fc fe79 	bl	8002330 <HAL_GetTick>
 800563e:	0003      	movs	r3, r0
 8005640:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005642:	e008      	b.n	8005656 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005644:	f7fc fe74 	bl	8002330 <HAL_GetTick>
 8005648:	0002      	movs	r2, r0
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e152      	b.n	80058fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005656:	4b88      	ldr	r3, [pc, #544]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565a:	2202      	movs	r2, #2
 800565c:	4013      	ands	r3, r2
 800565e:	d0f1      	beq.n	8005644 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005660:	4b85      	ldr	r3, [pc, #532]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005664:	22f8      	movs	r2, #248	; 0xf8
 8005666:	4393      	bics	r3, r2
 8005668:	0019      	movs	r1, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	00da      	lsls	r2, r3, #3
 8005670:	4b81      	ldr	r3, [pc, #516]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005672:	430a      	orrs	r2, r1
 8005674:	635a      	str	r2, [r3, #52]	; 0x34
 8005676:	e034      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	3305      	adds	r3, #5
 800567e:	d111      	bne.n	80056a4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005680:	4b7d      	ldr	r3, [pc, #500]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005684:	4b7c      	ldr	r3, [pc, #496]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005686:	2104      	movs	r1, #4
 8005688:	438a      	bics	r2, r1
 800568a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800568c:	4b7a      	ldr	r3, [pc, #488]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 800568e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005690:	22f8      	movs	r2, #248	; 0xf8
 8005692:	4393      	bics	r3, r2
 8005694:	0019      	movs	r1, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	00da      	lsls	r2, r3, #3
 800569c:	4b76      	ldr	r3, [pc, #472]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 800569e:	430a      	orrs	r2, r1
 80056a0:	635a      	str	r2, [r3, #52]	; 0x34
 80056a2:	e01e      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80056a4:	4b74      	ldr	r3, [pc, #464]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 80056a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056a8:	4b73      	ldr	r3, [pc, #460]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 80056aa:	2104      	movs	r1, #4
 80056ac:	430a      	orrs	r2, r1
 80056ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80056b0:	4b71      	ldr	r3, [pc, #452]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 80056b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b4:	4b70      	ldr	r3, [pc, #448]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 80056b6:	2101      	movs	r1, #1
 80056b8:	438a      	bics	r2, r1
 80056ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056bc:	f7fc fe38 	bl	8002330 <HAL_GetTick>
 80056c0:	0003      	movs	r3, r0
 80056c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80056c6:	f7fc fe33 	bl	8002330 <HAL_GetTick>
 80056ca:	0002      	movs	r2, r0
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e111      	b.n	80058fc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80056d8:	4b67      	ldr	r3, [pc, #412]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 80056da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056dc:	2202      	movs	r2, #2
 80056de:	4013      	ands	r3, r2
 80056e0:	d1f1      	bne.n	80056c6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2220      	movs	r2, #32
 80056e8:	4013      	ands	r3, r2
 80056ea:	d05c      	beq.n	80057a6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80056ec:	4b62      	ldr	r3, [pc, #392]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	220c      	movs	r2, #12
 80056f2:	4013      	ands	r3, r2
 80056f4:	2b0c      	cmp	r3, #12
 80056f6:	d00e      	beq.n	8005716 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80056f8:	4b5f      	ldr	r3, [pc, #380]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	220c      	movs	r2, #12
 80056fe:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005700:	2b08      	cmp	r3, #8
 8005702:	d114      	bne.n	800572e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005704:	4b5c      	ldr	r3, [pc, #368]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	23c0      	movs	r3, #192	; 0xc0
 800570a:	025b      	lsls	r3, r3, #9
 800570c:	401a      	ands	r2, r3
 800570e:	23c0      	movs	r3, #192	; 0xc0
 8005710:	025b      	lsls	r3, r3, #9
 8005712:	429a      	cmp	r2, r3
 8005714:	d10b      	bne.n	800572e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005716:	4b58      	ldr	r3, [pc, #352]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800571a:	2380      	movs	r3, #128	; 0x80
 800571c:	025b      	lsls	r3, r3, #9
 800571e:	4013      	ands	r3, r2
 8005720:	d040      	beq.n	80057a4 <HAL_RCC_OscConfig+0x5a8>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d03c      	beq.n	80057a4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e0e6      	b.n	80058fc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d01b      	beq.n	800576e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005736:	4b50      	ldr	r3, [pc, #320]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800573a:	4b4f      	ldr	r3, [pc, #316]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 800573c:	2180      	movs	r1, #128	; 0x80
 800573e:	0249      	lsls	r1, r1, #9
 8005740:	430a      	orrs	r2, r1
 8005742:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005744:	f7fc fdf4 	bl	8002330 <HAL_GetTick>
 8005748:	0003      	movs	r3, r0
 800574a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800574c:	e008      	b.n	8005760 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800574e:	f7fc fdef 	bl	8002330 <HAL_GetTick>
 8005752:	0002      	movs	r2, r0
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d901      	bls.n	8005760 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e0cd      	b.n	80058fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005760:	4b45      	ldr	r3, [pc, #276]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005762:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005764:	2380      	movs	r3, #128	; 0x80
 8005766:	025b      	lsls	r3, r3, #9
 8005768:	4013      	ands	r3, r2
 800576a:	d0f0      	beq.n	800574e <HAL_RCC_OscConfig+0x552>
 800576c:	e01b      	b.n	80057a6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800576e:	4b42      	ldr	r3, [pc, #264]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005770:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005772:	4b41      	ldr	r3, [pc, #260]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005774:	4943      	ldr	r1, [pc, #268]	; (8005884 <HAL_RCC_OscConfig+0x688>)
 8005776:	400a      	ands	r2, r1
 8005778:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800577a:	f7fc fdd9 	bl	8002330 <HAL_GetTick>
 800577e:	0003      	movs	r3, r0
 8005780:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005784:	f7fc fdd4 	bl	8002330 <HAL_GetTick>
 8005788:	0002      	movs	r2, r0
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e0b2      	b.n	80058fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005796:	4b38      	ldr	r3, [pc, #224]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800579a:	2380      	movs	r3, #128	; 0x80
 800579c:	025b      	lsls	r3, r3, #9
 800579e:	4013      	ands	r3, r2
 80057a0:	d1f0      	bne.n	8005784 <HAL_RCC_OscConfig+0x588>
 80057a2:	e000      	b.n	80057a6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80057a4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d100      	bne.n	80057b0 <HAL_RCC_OscConfig+0x5b4>
 80057ae:	e0a4      	b.n	80058fa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057b0:	4b31      	ldr	r3, [pc, #196]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	220c      	movs	r2, #12
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b08      	cmp	r3, #8
 80057ba:	d100      	bne.n	80057be <HAL_RCC_OscConfig+0x5c2>
 80057bc:	e078      	b.n	80058b0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d14c      	bne.n	8005860 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c6:	4b2c      	ldr	r3, [pc, #176]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	4b2b      	ldr	r3, [pc, #172]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 80057cc:	492e      	ldr	r1, [pc, #184]	; (8005888 <HAL_RCC_OscConfig+0x68c>)
 80057ce:	400a      	ands	r2, r1
 80057d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d2:	f7fc fdad 	bl	8002330 <HAL_GetTick>
 80057d6:	0003      	movs	r3, r0
 80057d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057da:	e008      	b.n	80057ee <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057dc:	f7fc fda8 	bl	8002330 <HAL_GetTick>
 80057e0:	0002      	movs	r2, r0
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d901      	bls.n	80057ee <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e086      	b.n	80058fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80057ee:	4b22      	ldr	r3, [pc, #136]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	2380      	movs	r3, #128	; 0x80
 80057f4:	049b      	lsls	r3, r3, #18
 80057f6:	4013      	ands	r3, r2
 80057f8:	d1f0      	bne.n	80057dc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057fa:	4b1f      	ldr	r3, [pc, #124]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 80057fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fe:	220f      	movs	r2, #15
 8005800:	4393      	bics	r3, r2
 8005802:	0019      	movs	r1, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005808:	4b1b      	ldr	r3, [pc, #108]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 800580a:	430a      	orrs	r2, r1
 800580c:	62da      	str	r2, [r3, #44]	; 0x2c
 800580e:	4b1a      	ldr	r3, [pc, #104]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	4a1e      	ldr	r2, [pc, #120]	; (800588c <HAL_RCC_OscConfig+0x690>)
 8005814:	4013      	ands	r3, r2
 8005816:	0019      	movs	r1, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005820:	431a      	orrs	r2, r3
 8005822:	4b15      	ldr	r3, [pc, #84]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005824:	430a      	orrs	r2, r1
 8005826:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005828:	4b13      	ldr	r3, [pc, #76]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	4b12      	ldr	r3, [pc, #72]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 800582e:	2180      	movs	r1, #128	; 0x80
 8005830:	0449      	lsls	r1, r1, #17
 8005832:	430a      	orrs	r2, r1
 8005834:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005836:	f7fc fd7b 	bl	8002330 <HAL_GetTick>
 800583a:	0003      	movs	r3, r0
 800583c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005840:	f7fc fd76 	bl	8002330 <HAL_GetTick>
 8005844:	0002      	movs	r2, r0
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e054      	b.n	80058fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005852:	4b09      	ldr	r3, [pc, #36]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	2380      	movs	r3, #128	; 0x80
 8005858:	049b      	lsls	r3, r3, #18
 800585a:	4013      	ands	r3, r2
 800585c:	d0f0      	beq.n	8005840 <HAL_RCC_OscConfig+0x644>
 800585e:	e04c      	b.n	80058fa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005860:	4b05      	ldr	r3, [pc, #20]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	4b04      	ldr	r3, [pc, #16]	; (8005878 <HAL_RCC_OscConfig+0x67c>)
 8005866:	4908      	ldr	r1, [pc, #32]	; (8005888 <HAL_RCC_OscConfig+0x68c>)
 8005868:	400a      	ands	r2, r1
 800586a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800586c:	f7fc fd60 	bl	8002330 <HAL_GetTick>
 8005870:	0003      	movs	r3, r0
 8005872:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005874:	e015      	b.n	80058a2 <HAL_RCC_OscConfig+0x6a6>
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	40021000 	.word	0x40021000
 800587c:	00001388 	.word	0x00001388
 8005880:	efffffff 	.word	0xefffffff
 8005884:	fffeffff 	.word	0xfffeffff
 8005888:	feffffff 	.word	0xfeffffff
 800588c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005890:	f7fc fd4e 	bl	8002330 <HAL_GetTick>
 8005894:	0002      	movs	r2, r0
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e02c      	b.n	80058fc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058a2:	4b18      	ldr	r3, [pc, #96]	; (8005904 <HAL_RCC_OscConfig+0x708>)
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	2380      	movs	r3, #128	; 0x80
 80058a8:	049b      	lsls	r3, r3, #18
 80058aa:	4013      	ands	r3, r2
 80058ac:	d1f0      	bne.n	8005890 <HAL_RCC_OscConfig+0x694>
 80058ae:	e024      	b.n	80058fa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e01f      	b.n	80058fc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80058bc:	4b11      	ldr	r3, [pc, #68]	; (8005904 <HAL_RCC_OscConfig+0x708>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80058c2:	4b10      	ldr	r3, [pc, #64]	; (8005904 <HAL_RCC_OscConfig+0x708>)
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	23c0      	movs	r3, #192	; 0xc0
 80058cc:	025b      	lsls	r3, r3, #9
 80058ce:	401a      	ands	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d10e      	bne.n	80058f6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	220f      	movs	r2, #15
 80058dc:	401a      	ands	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d107      	bne.n	80058f6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	23f0      	movs	r3, #240	; 0xf0
 80058ea:	039b      	lsls	r3, r3, #14
 80058ec:	401a      	ands	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d001      	beq.n	80058fa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e000      	b.n	80058fc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	0018      	movs	r0, r3
 80058fe:	46bd      	mov	sp, r7
 8005900:	b008      	add	sp, #32
 8005902:	bd80      	pop	{r7, pc}
 8005904:	40021000 	.word	0x40021000

08005908 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e0bf      	b.n	8005a9c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800591c:	4b61      	ldr	r3, [pc, #388]	; (8005aa4 <HAL_RCC_ClockConfig+0x19c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2201      	movs	r2, #1
 8005922:	4013      	ands	r3, r2
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d911      	bls.n	800594e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800592a:	4b5e      	ldr	r3, [pc, #376]	; (8005aa4 <HAL_RCC_ClockConfig+0x19c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2201      	movs	r2, #1
 8005930:	4393      	bics	r3, r2
 8005932:	0019      	movs	r1, r3
 8005934:	4b5b      	ldr	r3, [pc, #364]	; (8005aa4 <HAL_RCC_ClockConfig+0x19c>)
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800593c:	4b59      	ldr	r3, [pc, #356]	; (8005aa4 <HAL_RCC_ClockConfig+0x19c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2201      	movs	r2, #1
 8005942:	4013      	ands	r3, r2
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d001      	beq.n	800594e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e0a6      	b.n	8005a9c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2202      	movs	r2, #2
 8005954:	4013      	ands	r3, r2
 8005956:	d015      	beq.n	8005984 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2204      	movs	r2, #4
 800595e:	4013      	ands	r3, r2
 8005960:	d006      	beq.n	8005970 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005962:	4b51      	ldr	r3, [pc, #324]	; (8005aa8 <HAL_RCC_ClockConfig+0x1a0>)
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	4b50      	ldr	r3, [pc, #320]	; (8005aa8 <HAL_RCC_ClockConfig+0x1a0>)
 8005968:	21e0      	movs	r1, #224	; 0xe0
 800596a:	00c9      	lsls	r1, r1, #3
 800596c:	430a      	orrs	r2, r1
 800596e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005970:	4b4d      	ldr	r3, [pc, #308]	; (8005aa8 <HAL_RCC_ClockConfig+0x1a0>)
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	22f0      	movs	r2, #240	; 0xf0
 8005976:	4393      	bics	r3, r2
 8005978:	0019      	movs	r1, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	4b4a      	ldr	r3, [pc, #296]	; (8005aa8 <HAL_RCC_ClockConfig+0x1a0>)
 8005980:	430a      	orrs	r2, r1
 8005982:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2201      	movs	r2, #1
 800598a:	4013      	ands	r3, r2
 800598c:	d04c      	beq.n	8005a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d107      	bne.n	80059a6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005996:	4b44      	ldr	r3, [pc, #272]	; (8005aa8 <HAL_RCC_ClockConfig+0x1a0>)
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	2380      	movs	r3, #128	; 0x80
 800599c:	029b      	lsls	r3, r3, #10
 800599e:	4013      	ands	r3, r2
 80059a0:	d120      	bne.n	80059e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e07a      	b.n	8005a9c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d107      	bne.n	80059be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059ae:	4b3e      	ldr	r3, [pc, #248]	; (8005aa8 <HAL_RCC_ClockConfig+0x1a0>)
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	2380      	movs	r3, #128	; 0x80
 80059b4:	049b      	lsls	r3, r3, #18
 80059b6:	4013      	ands	r3, r2
 80059b8:	d114      	bne.n	80059e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e06e      	b.n	8005a9c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	2b03      	cmp	r3, #3
 80059c4:	d107      	bne.n	80059d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80059c6:	4b38      	ldr	r3, [pc, #224]	; (8005aa8 <HAL_RCC_ClockConfig+0x1a0>)
 80059c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ca:	2380      	movs	r3, #128	; 0x80
 80059cc:	025b      	lsls	r3, r3, #9
 80059ce:	4013      	ands	r3, r2
 80059d0:	d108      	bne.n	80059e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e062      	b.n	8005a9c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059d6:	4b34      	ldr	r3, [pc, #208]	; (8005aa8 <HAL_RCC_ClockConfig+0x1a0>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2202      	movs	r2, #2
 80059dc:	4013      	ands	r3, r2
 80059de:	d101      	bne.n	80059e4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e05b      	b.n	8005a9c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059e4:	4b30      	ldr	r3, [pc, #192]	; (8005aa8 <HAL_RCC_ClockConfig+0x1a0>)
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	2203      	movs	r2, #3
 80059ea:	4393      	bics	r3, r2
 80059ec:	0019      	movs	r1, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	4b2d      	ldr	r3, [pc, #180]	; (8005aa8 <HAL_RCC_ClockConfig+0x1a0>)
 80059f4:	430a      	orrs	r2, r1
 80059f6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059f8:	f7fc fc9a 	bl	8002330 <HAL_GetTick>
 80059fc:	0003      	movs	r3, r0
 80059fe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a00:	e009      	b.n	8005a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a02:	f7fc fc95 	bl	8002330 <HAL_GetTick>
 8005a06:	0002      	movs	r2, r0
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	4a27      	ldr	r2, [pc, #156]	; (8005aac <HAL_RCC_ClockConfig+0x1a4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e042      	b.n	8005a9c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a16:	4b24      	ldr	r3, [pc, #144]	; (8005aa8 <HAL_RCC_ClockConfig+0x1a0>)
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	220c      	movs	r2, #12
 8005a1c:	401a      	ands	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d1ec      	bne.n	8005a02 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a28:	4b1e      	ldr	r3, [pc, #120]	; (8005aa4 <HAL_RCC_ClockConfig+0x19c>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	4013      	ands	r3, r2
 8005a30:	683a      	ldr	r2, [r7, #0]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d211      	bcs.n	8005a5a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a36:	4b1b      	ldr	r3, [pc, #108]	; (8005aa4 <HAL_RCC_ClockConfig+0x19c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	4393      	bics	r3, r2
 8005a3e:	0019      	movs	r1, r3
 8005a40:	4b18      	ldr	r3, [pc, #96]	; (8005aa4 <HAL_RCC_ClockConfig+0x19c>)
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a48:	4b16      	ldr	r3, [pc, #88]	; (8005aa4 <HAL_RCC_ClockConfig+0x19c>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	4013      	ands	r3, r2
 8005a50:	683a      	ldr	r2, [r7, #0]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d001      	beq.n	8005a5a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e020      	b.n	8005a9c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2204      	movs	r2, #4
 8005a60:	4013      	ands	r3, r2
 8005a62:	d009      	beq.n	8005a78 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005a64:	4b10      	ldr	r3, [pc, #64]	; (8005aa8 <HAL_RCC_ClockConfig+0x1a0>)
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	4a11      	ldr	r2, [pc, #68]	; (8005ab0 <HAL_RCC_ClockConfig+0x1a8>)
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	0019      	movs	r1, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68da      	ldr	r2, [r3, #12]
 8005a72:	4b0d      	ldr	r3, [pc, #52]	; (8005aa8 <HAL_RCC_ClockConfig+0x1a0>)
 8005a74:	430a      	orrs	r2, r1
 8005a76:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005a78:	f000 f820 	bl	8005abc <HAL_RCC_GetSysClockFreq>
 8005a7c:	0001      	movs	r1, r0
 8005a7e:	4b0a      	ldr	r3, [pc, #40]	; (8005aa8 <HAL_RCC_ClockConfig+0x1a0>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	091b      	lsrs	r3, r3, #4
 8005a84:	220f      	movs	r2, #15
 8005a86:	4013      	ands	r3, r2
 8005a88:	4a0a      	ldr	r2, [pc, #40]	; (8005ab4 <HAL_RCC_ClockConfig+0x1ac>)
 8005a8a:	5cd3      	ldrb	r3, [r2, r3]
 8005a8c:	000a      	movs	r2, r1
 8005a8e:	40da      	lsrs	r2, r3
 8005a90:	4b09      	ldr	r3, [pc, #36]	; (8005ab8 <HAL_RCC_ClockConfig+0x1b0>)
 8005a92:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005a94:	2003      	movs	r0, #3
 8005a96:	f7fc fc05 	bl	80022a4 <HAL_InitTick>
  
  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	b004      	add	sp, #16
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	40022000 	.word	0x40022000
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	00001388 	.word	0x00001388
 8005ab0:	fffff8ff 	.word	0xfffff8ff
 8005ab4:	0800d0ec 	.word	0x0800d0ec
 8005ab8:	20000000 	.word	0x20000000

08005abc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005abc:	b590      	push	{r4, r7, lr}
 8005abe:	b08f      	sub	sp, #60	; 0x3c
 8005ac0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005ac2:	2314      	movs	r3, #20
 8005ac4:	18fb      	adds	r3, r7, r3
 8005ac6:	4a38      	ldr	r2, [pc, #224]	; (8005ba8 <HAL_RCC_GetSysClockFreq+0xec>)
 8005ac8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005aca:	c313      	stmia	r3!, {r0, r1, r4}
 8005acc:	6812      	ldr	r2, [r2, #0]
 8005ace:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005ad0:	1d3b      	adds	r3, r7, #4
 8005ad2:	4a36      	ldr	r2, [pc, #216]	; (8005bac <HAL_RCC_GetSysClockFreq+0xf0>)
 8005ad4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005ad6:	c313      	stmia	r3!, {r0, r1, r4}
 8005ad8:	6812      	ldr	r2, [r2, #0]
 8005ada:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005adc:	2300      	movs	r3, #0
 8005ade:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ae8:	2300      	movs	r3, #0
 8005aea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005aec:	2300      	movs	r3, #0
 8005aee:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005af0:	4b2f      	ldr	r3, [pc, #188]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af8:	220c      	movs	r2, #12
 8005afa:	4013      	ands	r3, r2
 8005afc:	2b0c      	cmp	r3, #12
 8005afe:	d047      	beq.n	8005b90 <HAL_RCC_GetSysClockFreq+0xd4>
 8005b00:	d849      	bhi.n	8005b96 <HAL_RCC_GetSysClockFreq+0xda>
 8005b02:	2b04      	cmp	r3, #4
 8005b04:	d002      	beq.n	8005b0c <HAL_RCC_GetSysClockFreq+0x50>
 8005b06:	2b08      	cmp	r3, #8
 8005b08:	d003      	beq.n	8005b12 <HAL_RCC_GetSysClockFreq+0x56>
 8005b0a:	e044      	b.n	8005b96 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b0c:	4b29      	ldr	r3, [pc, #164]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b0e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b10:	e044      	b.n	8005b9c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b14:	0c9b      	lsrs	r3, r3, #18
 8005b16:	220f      	movs	r2, #15
 8005b18:	4013      	ands	r3, r2
 8005b1a:	2214      	movs	r2, #20
 8005b1c:	18ba      	adds	r2, r7, r2
 8005b1e:	5cd3      	ldrb	r3, [r2, r3]
 8005b20:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005b22:	4b23      	ldr	r3, [pc, #140]	; (8005bb0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	220f      	movs	r2, #15
 8005b28:	4013      	ands	r3, r2
 8005b2a:	1d3a      	adds	r2, r7, #4
 8005b2c:	5cd3      	ldrb	r3, [r2, r3]
 8005b2e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b32:	23c0      	movs	r3, #192	; 0xc0
 8005b34:	025b      	lsls	r3, r3, #9
 8005b36:	401a      	ands	r2, r3
 8005b38:	2380      	movs	r3, #128	; 0x80
 8005b3a:	025b      	lsls	r3, r3, #9
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d109      	bne.n	8005b54 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b42:	481c      	ldr	r0, [pc, #112]	; (8005bb4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005b44:	f7fa faf2 	bl	800012c <__udivsi3>
 8005b48:	0003      	movs	r3, r0
 8005b4a:	001a      	movs	r2, r3
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	4353      	muls	r3, r2
 8005b50:	637b      	str	r3, [r7, #52]	; 0x34
 8005b52:	e01a      	b.n	8005b8a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b56:	23c0      	movs	r3, #192	; 0xc0
 8005b58:	025b      	lsls	r3, r3, #9
 8005b5a:	401a      	ands	r2, r3
 8005b5c:	23c0      	movs	r3, #192	; 0xc0
 8005b5e:	025b      	lsls	r3, r3, #9
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d109      	bne.n	8005b78 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b66:	4814      	ldr	r0, [pc, #80]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005b68:	f7fa fae0 	bl	800012c <__udivsi3>
 8005b6c:	0003      	movs	r3, r0
 8005b6e:	001a      	movs	r2, r3
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	4353      	muls	r3, r2
 8005b74:	637b      	str	r3, [r7, #52]	; 0x34
 8005b76:	e008      	b.n	8005b8a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005b78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b7a:	4810      	ldr	r0, [pc, #64]	; (8005bbc <HAL_RCC_GetSysClockFreq+0x100>)
 8005b7c:	f7fa fad6 	bl	800012c <__udivsi3>
 8005b80:	0003      	movs	r3, r0
 8005b82:	001a      	movs	r2, r3
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	4353      	muls	r3, r2
 8005b88:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b8e:	e005      	b.n	8005b9c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005b90:	4b09      	ldr	r3, [pc, #36]	; (8005bb8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005b92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b94:	e002      	b.n	8005b9c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005b96:	4b09      	ldr	r3, [pc, #36]	; (8005bbc <HAL_RCC_GetSysClockFreq+0x100>)
 8005b98:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005b9a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005b9e:	0018      	movs	r0, r3
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	b00f      	add	sp, #60	; 0x3c
 8005ba4:	bd90      	pop	{r4, r7, pc}
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	0800d028 	.word	0x0800d028
 8005bac:	0800d038 	.word	0x0800d038
 8005bb0:	40021000 	.word	0x40021000
 8005bb4:	00f42400 	.word	0x00f42400
 8005bb8:	02dc6c00 	.word	0x02dc6c00
 8005bbc:	007a1200 	.word	0x007a1200

08005bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bc4:	4b02      	ldr	r3, [pc, #8]	; (8005bd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
}
 8005bc8:	0018      	movs	r0, r3
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	46c0      	nop			; (mov r8, r8)
 8005bd0:	20000000 	.word	0x20000000

08005bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005bd8:	f7ff fff2 	bl	8005bc0 <HAL_RCC_GetHCLKFreq>
 8005bdc:	0001      	movs	r1, r0
 8005bde:	4b06      	ldr	r3, [pc, #24]	; (8005bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	0a1b      	lsrs	r3, r3, #8
 8005be4:	2207      	movs	r2, #7
 8005be6:	4013      	ands	r3, r2
 8005be8:	4a04      	ldr	r2, [pc, #16]	; (8005bfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bea:	5cd3      	ldrb	r3, [r2, r3]
 8005bec:	40d9      	lsrs	r1, r3
 8005bee:	000b      	movs	r3, r1
}    
 8005bf0:	0018      	movs	r0, r3
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	46c0      	nop			; (mov r8, r8)
 8005bf8:	40021000 	.word	0x40021000
 8005bfc:	0800d0fc 	.word	0x0800d0fc

08005c00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	2380      	movs	r3, #128	; 0x80
 8005c16:	025b      	lsls	r3, r3, #9
 8005c18:	4013      	ands	r3, r2
 8005c1a:	d100      	bne.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005c1c:	e08e      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005c1e:	2017      	movs	r0, #23
 8005c20:	183b      	adds	r3, r7, r0
 8005c22:	2200      	movs	r2, #0
 8005c24:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c26:	4b6e      	ldr	r3, [pc, #440]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c28:	69da      	ldr	r2, [r3, #28]
 8005c2a:	2380      	movs	r3, #128	; 0x80
 8005c2c:	055b      	lsls	r3, r3, #21
 8005c2e:	4013      	ands	r3, r2
 8005c30:	d110      	bne.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c32:	4b6b      	ldr	r3, [pc, #428]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c34:	69da      	ldr	r2, [r3, #28]
 8005c36:	4b6a      	ldr	r3, [pc, #424]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c38:	2180      	movs	r1, #128	; 0x80
 8005c3a:	0549      	lsls	r1, r1, #21
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	61da      	str	r2, [r3, #28]
 8005c40:	4b67      	ldr	r3, [pc, #412]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c42:	69da      	ldr	r2, [r3, #28]
 8005c44:	2380      	movs	r3, #128	; 0x80
 8005c46:	055b      	lsls	r3, r3, #21
 8005c48:	4013      	ands	r3, r2
 8005c4a:	60bb      	str	r3, [r7, #8]
 8005c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c4e:	183b      	adds	r3, r7, r0
 8005c50:	2201      	movs	r2, #1
 8005c52:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c54:	4b63      	ldr	r3, [pc, #396]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	2380      	movs	r3, #128	; 0x80
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	d11a      	bne.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c60:	4b60      	ldr	r3, [pc, #384]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	4b5f      	ldr	r3, [pc, #380]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005c66:	2180      	movs	r1, #128	; 0x80
 8005c68:	0049      	lsls	r1, r1, #1
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c6e:	f7fc fb5f 	bl	8002330 <HAL_GetTick>
 8005c72:	0003      	movs	r3, r0
 8005c74:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c76:	e008      	b.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c78:	f7fc fb5a 	bl	8002330 <HAL_GetTick>
 8005c7c:	0002      	movs	r2, r0
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b64      	cmp	r3, #100	; 0x64
 8005c84:	d901      	bls.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e0a6      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c8a:	4b56      	ldr	r3, [pc, #344]	; (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	2380      	movs	r3, #128	; 0x80
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	4013      	ands	r3, r2
 8005c94:	d0f0      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c96:	4b52      	ldr	r3, [pc, #328]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005c98:	6a1a      	ldr	r2, [r3, #32]
 8005c9a:	23c0      	movs	r3, #192	; 0xc0
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d034      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	23c0      	movs	r3, #192	; 0xc0
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d02c      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005cb8:	4b49      	ldr	r3, [pc, #292]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	4a4a      	ldr	r2, [pc, #296]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005cc2:	4b47      	ldr	r3, [pc, #284]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005cc4:	6a1a      	ldr	r2, [r3, #32]
 8005cc6:	4b46      	ldr	r3, [pc, #280]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005cc8:	2180      	movs	r1, #128	; 0x80
 8005cca:	0249      	lsls	r1, r1, #9
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005cd0:	4b43      	ldr	r3, [pc, #268]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005cd2:	6a1a      	ldr	r2, [r3, #32]
 8005cd4:	4b42      	ldr	r3, [pc, #264]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005cd6:	4945      	ldr	r1, [pc, #276]	; (8005dec <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8005cd8:	400a      	ands	r2, r1
 8005cda:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005cdc:	4b40      	ldr	r3, [pc, #256]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	d013      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cea:	f7fc fb21 	bl	8002330 <HAL_GetTick>
 8005cee:	0003      	movs	r3, r0
 8005cf0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cf2:	e009      	b.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cf4:	f7fc fb1c 	bl	8002330 <HAL_GetTick>
 8005cf8:	0002      	movs	r2, r0
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	4a3c      	ldr	r2, [pc, #240]	; (8005df0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d901      	bls.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e067      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d08:	4b35      	ldr	r3, [pc, #212]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	2202      	movs	r2, #2
 8005d0e:	4013      	ands	r3, r2
 8005d10:	d0f0      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d12:	4b33      	ldr	r3, [pc, #204]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	4a34      	ldr	r2, [pc, #208]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	0019      	movs	r1, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	4b2f      	ldr	r3, [pc, #188]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d22:	430a      	orrs	r2, r1
 8005d24:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005d26:	2317      	movs	r3, #23
 8005d28:	18fb      	adds	r3, r7, r3
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d105      	bne.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d30:	4b2b      	ldr	r3, [pc, #172]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d32:	69da      	ldr	r2, [r3, #28]
 8005d34:	4b2a      	ldr	r3, [pc, #168]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d36:	492f      	ldr	r1, [pc, #188]	; (8005df4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005d38:	400a      	ands	r2, r1
 8005d3a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2201      	movs	r2, #1
 8005d42:	4013      	ands	r3, r2
 8005d44:	d009      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d46:	4b26      	ldr	r3, [pc, #152]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4a:	2203      	movs	r2, #3
 8005d4c:	4393      	bics	r3, r2
 8005d4e:	0019      	movs	r1, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	4b22      	ldr	r3, [pc, #136]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d56:	430a      	orrs	r2, r1
 8005d58:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	4013      	ands	r3, r2
 8005d62:	d009      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d64:	4b1e      	ldr	r3, [pc, #120]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d68:	4a23      	ldr	r2, [pc, #140]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	0019      	movs	r1, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	4b1b      	ldr	r3, [pc, #108]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d74:	430a      	orrs	r2, r1
 8005d76:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	4013      	ands	r3, r2
 8005d80:	d009      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d82:	4b17      	ldr	r3, [pc, #92]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d86:	2210      	movs	r2, #16
 8005d88:	4393      	bics	r3, r2
 8005d8a:	0019      	movs	r1, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691a      	ldr	r2, [r3, #16]
 8005d90:	4b13      	ldr	r3, [pc, #76]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005d92:	430a      	orrs	r2, r1
 8005d94:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	2380      	movs	r3, #128	; 0x80
 8005d9c:	029b      	lsls	r3, r3, #10
 8005d9e:	4013      	ands	r3, r2
 8005da0:	d009      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005da2:	4b0f      	ldr	r3, [pc, #60]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da6:	2280      	movs	r2, #128	; 0x80
 8005da8:	4393      	bics	r3, r2
 8005daa:	0019      	movs	r1, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	699a      	ldr	r2, [r3, #24]
 8005db0:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005db2:	430a      	orrs	r2, r1
 8005db4:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	2380      	movs	r3, #128	; 0x80
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	d009      	beq.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005dc2:	4b07      	ldr	r3, [pc, #28]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc6:	2240      	movs	r2, #64	; 0x40
 8005dc8:	4393      	bics	r3, r2
 8005dca:	0019      	movs	r1, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	695a      	ldr	r2, [r3, #20]
 8005dd0:	4b03      	ldr	r3, [pc, #12]	; (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	0018      	movs	r0, r3
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	b006      	add	sp, #24
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	40021000 	.word	0x40021000
 8005de4:	40007000 	.word	0x40007000
 8005de8:	fffffcff 	.word	0xfffffcff
 8005dec:	fffeffff 	.word	0xfffeffff
 8005df0:	00001388 	.word	0x00001388
 8005df4:	efffffff 	.word	0xefffffff
 8005df8:	fffcffff 	.word	0xfffcffff

08005dfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e0a8      	b.n	8005f60 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d109      	bne.n	8005e2a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685a      	ldr	r2, [r3, #4]
 8005e1a:	2382      	movs	r3, #130	; 0x82
 8005e1c:	005b      	lsls	r3, r3, #1
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d009      	beq.n	8005e36 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	61da      	str	r2, [r3, #28]
 8005e28:	e005      	b.n	8005e36 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	225d      	movs	r2, #93	; 0x5d
 8005e40:	5c9b      	ldrb	r3, [r3, r2]
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d107      	bne.n	8005e58 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	225c      	movs	r2, #92	; 0x5c
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	0018      	movs	r0, r3
 8005e54:	f7fb fe24 	bl	8001aa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	225d      	movs	r2, #93	; 0x5d
 8005e5c:	2102      	movs	r1, #2
 8005e5e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2140      	movs	r1, #64	; 0x40
 8005e6c:	438a      	bics	r2, r1
 8005e6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	23e0      	movs	r3, #224	; 0xe0
 8005e76:	00db      	lsls	r3, r3, #3
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d902      	bls.n	8005e82 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	e002      	b.n	8005e88 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e82:	2380      	movs	r3, #128	; 0x80
 8005e84:	015b      	lsls	r3, r3, #5
 8005e86:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68da      	ldr	r2, [r3, #12]
 8005e8c:	23f0      	movs	r3, #240	; 0xf0
 8005e8e:	011b      	lsls	r3, r3, #4
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d008      	beq.n	8005ea6 <HAL_SPI_Init+0xaa>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	23e0      	movs	r3, #224	; 0xe0
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d002      	beq.n	8005ea6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	2382      	movs	r3, #130	; 0x82
 8005eac:	005b      	lsls	r3, r3, #1
 8005eae:	401a      	ands	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6899      	ldr	r1, [r3, #8]
 8005eb4:	2384      	movs	r3, #132	; 0x84
 8005eb6:	021b      	lsls	r3, r3, #8
 8005eb8:	400b      	ands	r3, r1
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	2102      	movs	r1, #2
 8005ec2:	400b      	ands	r3, r1
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	2101      	movs	r1, #1
 8005ecc:	400b      	ands	r3, r1
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6999      	ldr	r1, [r3, #24]
 8005ed4:	2380      	movs	r3, #128	; 0x80
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	400b      	ands	r3, r1
 8005eda:	431a      	orrs	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	2138      	movs	r1, #56	; 0x38
 8005ee2:	400b      	ands	r3, r1
 8005ee4:	431a      	orrs	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	2180      	movs	r1, #128	; 0x80
 8005eec:	400b      	ands	r3, r1
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	0011      	movs	r1, r2
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ef6:	2380      	movs	r3, #128	; 0x80
 8005ef8:	019b      	lsls	r3, r3, #6
 8005efa:	401a      	ands	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	0c1b      	lsrs	r3, r3, #16
 8005f0a:	2204      	movs	r2, #4
 8005f0c:	401a      	ands	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	2110      	movs	r1, #16
 8005f14:	400b      	ands	r3, r1
 8005f16:	431a      	orrs	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1c:	2108      	movs	r1, #8
 8005f1e:	400b      	ands	r3, r1
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68d9      	ldr	r1, [r3, #12]
 8005f26:	23f0      	movs	r3, #240	; 0xf0
 8005f28:	011b      	lsls	r3, r3, #4
 8005f2a:	400b      	ands	r3, r1
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	0011      	movs	r1, r2
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	2380      	movs	r3, #128	; 0x80
 8005f34:	015b      	lsls	r3, r3, #5
 8005f36:	401a      	ands	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	69da      	ldr	r2, [r3, #28]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4907      	ldr	r1, [pc, #28]	; (8005f68 <HAL_SPI_Init+0x16c>)
 8005f4c:	400a      	ands	r2, r1
 8005f4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	225d      	movs	r2, #93	; 0x5d
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	0018      	movs	r0, r3
 8005f62:	46bd      	mov	sp, r7
 8005f64:	b004      	add	sp, #16
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	fffff7ff 	.word	0xfffff7ff

08005f6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	1dbb      	adds	r3, r7, #6
 8005f7a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f7c:	231f      	movs	r3, #31
 8005f7e:	18fb      	adds	r3, r7, r3
 8005f80:	2200      	movs	r2, #0
 8005f82:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	225c      	movs	r2, #92	; 0x5c
 8005f88:	5c9b      	ldrb	r3, [r3, r2]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d101      	bne.n	8005f92 <HAL_SPI_Transmit+0x26>
 8005f8e:	2302      	movs	r3, #2
 8005f90:	e140      	b.n	8006214 <HAL_SPI_Transmit+0x2a8>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	225c      	movs	r2, #92	; 0x5c
 8005f96:	2101      	movs	r1, #1
 8005f98:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f9a:	f7fc f9c9 	bl	8002330 <HAL_GetTick>
 8005f9e:	0003      	movs	r3, r0
 8005fa0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005fa2:	2316      	movs	r3, #22
 8005fa4:	18fb      	adds	r3, r7, r3
 8005fa6:	1dba      	adds	r2, r7, #6
 8005fa8:	8812      	ldrh	r2, [r2, #0]
 8005faa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	225d      	movs	r2, #93	; 0x5d
 8005fb0:	5c9b      	ldrb	r3, [r3, r2]
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d004      	beq.n	8005fc2 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005fb8:	231f      	movs	r3, #31
 8005fba:	18fb      	adds	r3, r7, r3
 8005fbc:	2202      	movs	r2, #2
 8005fbe:	701a      	strb	r2, [r3, #0]
    goto error;
 8005fc0:	e11d      	b.n	80061fe <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d003      	beq.n	8005fd0 <HAL_SPI_Transmit+0x64>
 8005fc8:	1dbb      	adds	r3, r7, #6
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d104      	bne.n	8005fda <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005fd0:	231f      	movs	r3, #31
 8005fd2:	18fb      	adds	r3, r7, r3
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	701a      	strb	r2, [r3, #0]
    goto error;
 8005fd8:	e111      	b.n	80061fe <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	225d      	movs	r2, #93	; 0x5d
 8005fde:	2103      	movs	r1, #3
 8005fe0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	1dba      	adds	r2, r7, #6
 8005ff2:	8812      	ldrh	r2, [r2, #0]
 8005ff4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	1dba      	adds	r2, r7, #6
 8005ffa:	8812      	ldrh	r2, [r2, #0]
 8005ffc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2244      	movs	r2, #68	; 0x44
 8006008:	2100      	movs	r1, #0
 800600a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2246      	movs	r2, #70	; 0x46
 8006010:	2100      	movs	r1, #0
 8006012:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	2380      	movs	r3, #128	; 0x80
 8006026:	021b      	lsls	r3, r3, #8
 8006028:	429a      	cmp	r2, r3
 800602a:	d110      	bne.n	800604e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2140      	movs	r1, #64	; 0x40
 8006038:	438a      	bics	r2, r1
 800603a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2180      	movs	r1, #128	; 0x80
 8006048:	01c9      	lsls	r1, r1, #7
 800604a:	430a      	orrs	r2, r1
 800604c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2240      	movs	r2, #64	; 0x40
 8006056:	4013      	ands	r3, r2
 8006058:	2b40      	cmp	r3, #64	; 0x40
 800605a:	d007      	beq.n	800606c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2140      	movs	r1, #64	; 0x40
 8006068:	430a      	orrs	r2, r1
 800606a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	68da      	ldr	r2, [r3, #12]
 8006070:	23e0      	movs	r3, #224	; 0xe0
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	429a      	cmp	r2, r3
 8006076:	d94e      	bls.n	8006116 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d004      	beq.n	800608a <HAL_SPI_Transmit+0x11e>
 8006080:	2316      	movs	r3, #22
 8006082:	18fb      	adds	r3, r7, r3
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d13f      	bne.n	800610a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608e:	881a      	ldrh	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609a:	1c9a      	adds	r2, r3, #2
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	3b01      	subs	r3, #1
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060ae:	e02c      	b.n	800610a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	2202      	movs	r2, #2
 80060b8:	4013      	ands	r3, r2
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d112      	bne.n	80060e4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c2:	881a      	ldrh	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ce:	1c9a      	adds	r2, r3, #2
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060e2:	e012      	b.n	800610a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060e4:	f7fc f924 	bl	8002330 <HAL_GetTick>
 80060e8:	0002      	movs	r2, r0
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d802      	bhi.n	80060fa <HAL_SPI_Transmit+0x18e>
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	3301      	adds	r3, #1
 80060f8:	d102      	bne.n	8006100 <HAL_SPI_Transmit+0x194>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d104      	bne.n	800610a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8006100:	231f      	movs	r3, #31
 8006102:	18fb      	adds	r3, r7, r3
 8006104:	2203      	movs	r2, #3
 8006106:	701a      	strb	r2, [r3, #0]
          goto error;
 8006108:	e079      	b.n	80061fe <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800610e:	b29b      	uxth	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d1cd      	bne.n	80060b0 <HAL_SPI_Transmit+0x144>
 8006114:	e04f      	b.n	80061b6 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d004      	beq.n	8006128 <HAL_SPI_Transmit+0x1bc>
 800611e:	2316      	movs	r3, #22
 8006120:	18fb      	adds	r3, r7, r3
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	2b01      	cmp	r3, #1
 8006126:	d141      	bne.n	80061ac <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	330c      	adds	r3, #12
 8006132:	7812      	ldrb	r2, [r2, #0]
 8006134:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006144:	b29b      	uxth	r3, r3
 8006146:	3b01      	subs	r3, #1
 8006148:	b29a      	uxth	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800614e:	e02d      	b.n	80061ac <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	2202      	movs	r2, #2
 8006158:	4013      	ands	r3, r2
 800615a:	2b02      	cmp	r3, #2
 800615c:	d113      	bne.n	8006186 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	330c      	adds	r3, #12
 8006168:	7812      	ldrb	r2, [r2, #0]
 800616a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800617a:	b29b      	uxth	r3, r3
 800617c:	3b01      	subs	r3, #1
 800617e:	b29a      	uxth	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006184:	e012      	b.n	80061ac <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006186:	f7fc f8d3 	bl	8002330 <HAL_GetTick>
 800618a:	0002      	movs	r2, r0
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	683a      	ldr	r2, [r7, #0]
 8006192:	429a      	cmp	r2, r3
 8006194:	d802      	bhi.n	800619c <HAL_SPI_Transmit+0x230>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	3301      	adds	r3, #1
 800619a:	d102      	bne.n	80061a2 <HAL_SPI_Transmit+0x236>
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d104      	bne.n	80061ac <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80061a2:	231f      	movs	r3, #31
 80061a4:	18fb      	adds	r3, r7, r3
 80061a6:	2203      	movs	r2, #3
 80061a8:	701a      	strb	r2, [r3, #0]
          goto error;
 80061aa:	e028      	b.n	80061fe <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1cc      	bne.n	8006150 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	6839      	ldr	r1, [r7, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	0018      	movs	r0, r3
 80061be:	f000 fb2f 	bl	8006820 <SPI_EndRxTxTransaction>
 80061c2:	1e03      	subs	r3, r0, #0
 80061c4:	d002      	beq.n	80061cc <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2220      	movs	r2, #32
 80061ca:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10a      	bne.n	80061ea <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061d4:	2300      	movs	r3, #0
 80061d6:	613b      	str	r3, [r7, #16]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	613b      	str	r3, [r7, #16]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	613b      	str	r3, [r7, #16]
 80061e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d004      	beq.n	80061fc <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80061f2:	231f      	movs	r3, #31
 80061f4:	18fb      	adds	r3, r7, r3
 80061f6:	2201      	movs	r2, #1
 80061f8:	701a      	strb	r2, [r3, #0]
 80061fa:	e000      	b.n	80061fe <HAL_SPI_Transmit+0x292>
  }

error:
 80061fc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	225d      	movs	r2, #93	; 0x5d
 8006202:	2101      	movs	r1, #1
 8006204:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	225c      	movs	r2, #92	; 0x5c
 800620a:	2100      	movs	r1, #0
 800620c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800620e:	231f      	movs	r3, #31
 8006210:	18fb      	adds	r3, r7, r3
 8006212:	781b      	ldrb	r3, [r3, #0]
}
 8006214:	0018      	movs	r0, r3
 8006216:	46bd      	mov	sp, r7
 8006218:	b008      	add	sp, #32
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b08a      	sub	sp, #40	; 0x28
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
 8006228:	001a      	movs	r2, r3
 800622a:	1cbb      	adds	r3, r7, #2
 800622c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800622e:	2301      	movs	r3, #1
 8006230:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006232:	2323      	movs	r3, #35	; 0x23
 8006234:	18fb      	adds	r3, r7, r3
 8006236:	2200      	movs	r2, #0
 8006238:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	225c      	movs	r2, #92	; 0x5c
 800623e:	5c9b      	ldrb	r3, [r3, r2]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_SPI_TransmitReceive+0x2c>
 8006244:	2302      	movs	r3, #2
 8006246:	e1b5      	b.n	80065b4 <HAL_SPI_TransmitReceive+0x398>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	225c      	movs	r2, #92	; 0x5c
 800624c:	2101      	movs	r1, #1
 800624e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006250:	f7fc f86e 	bl	8002330 <HAL_GetTick>
 8006254:	0003      	movs	r3, r0
 8006256:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006258:	201b      	movs	r0, #27
 800625a:	183b      	adds	r3, r7, r0
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	215d      	movs	r1, #93	; 0x5d
 8006260:	5c52      	ldrb	r2, [r2, r1]
 8006262:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800626a:	2312      	movs	r3, #18
 800626c:	18fb      	adds	r3, r7, r3
 800626e:	1cba      	adds	r2, r7, #2
 8006270:	8812      	ldrh	r2, [r2, #0]
 8006272:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006274:	183b      	adds	r3, r7, r0
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d011      	beq.n	80062a0 <HAL_SPI_TransmitReceive+0x84>
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	2382      	movs	r3, #130	; 0x82
 8006280:	005b      	lsls	r3, r3, #1
 8006282:	429a      	cmp	r2, r3
 8006284:	d107      	bne.n	8006296 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d103      	bne.n	8006296 <HAL_SPI_TransmitReceive+0x7a>
 800628e:	183b      	adds	r3, r7, r0
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	2b04      	cmp	r3, #4
 8006294:	d004      	beq.n	80062a0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006296:	2323      	movs	r3, #35	; 0x23
 8006298:	18fb      	adds	r3, r7, r3
 800629a:	2202      	movs	r2, #2
 800629c:	701a      	strb	r2, [r3, #0]
    goto error;
 800629e:	e17e      	b.n	800659e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d006      	beq.n	80062b4 <HAL_SPI_TransmitReceive+0x98>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d003      	beq.n	80062b4 <HAL_SPI_TransmitReceive+0x98>
 80062ac:	1cbb      	adds	r3, r7, #2
 80062ae:	881b      	ldrh	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d104      	bne.n	80062be <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80062b4:	2323      	movs	r3, #35	; 0x23
 80062b6:	18fb      	adds	r3, r7, r3
 80062b8:	2201      	movs	r2, #1
 80062ba:	701a      	strb	r2, [r3, #0]
    goto error;
 80062bc:	e16f      	b.n	800659e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	225d      	movs	r2, #93	; 0x5d
 80062c2:	5c9b      	ldrb	r3, [r3, r2]
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b04      	cmp	r3, #4
 80062c8:	d003      	beq.n	80062d2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	225d      	movs	r2, #93	; 0x5d
 80062ce:	2105      	movs	r1, #5
 80062d0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	1cba      	adds	r2, r7, #2
 80062e2:	2146      	movs	r1, #70	; 0x46
 80062e4:	8812      	ldrh	r2, [r2, #0]
 80062e6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	1cba      	adds	r2, r7, #2
 80062ec:	2144      	movs	r1, #68	; 0x44
 80062ee:	8812      	ldrh	r2, [r2, #0]
 80062f0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	1cba      	adds	r2, r7, #2
 80062fc:	8812      	ldrh	r2, [r2, #0]
 80062fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	1cba      	adds	r2, r7, #2
 8006304:	8812      	ldrh	r2, [r2, #0]
 8006306:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	68da      	ldr	r2, [r3, #12]
 8006318:	23e0      	movs	r3, #224	; 0xe0
 800631a:	00db      	lsls	r3, r3, #3
 800631c:	429a      	cmp	r2, r3
 800631e:	d908      	bls.n	8006332 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	49a4      	ldr	r1, [pc, #656]	; (80065bc <HAL_SPI_TransmitReceive+0x3a0>)
 800632c:	400a      	ands	r2, r1
 800632e:	605a      	str	r2, [r3, #4]
 8006330:	e008      	b.n	8006344 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2180      	movs	r1, #128	; 0x80
 800633e:	0149      	lsls	r1, r1, #5
 8006340:	430a      	orrs	r2, r1
 8006342:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2240      	movs	r2, #64	; 0x40
 800634c:	4013      	ands	r3, r2
 800634e:	2b40      	cmp	r3, #64	; 0x40
 8006350:	d007      	beq.n	8006362 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2140      	movs	r1, #64	; 0x40
 800635e:	430a      	orrs	r2, r1
 8006360:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	68da      	ldr	r2, [r3, #12]
 8006366:	23e0      	movs	r3, #224	; 0xe0
 8006368:	00db      	lsls	r3, r3, #3
 800636a:	429a      	cmp	r2, r3
 800636c:	d800      	bhi.n	8006370 <HAL_SPI_TransmitReceive+0x154>
 800636e:	e07f      	b.n	8006470 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d005      	beq.n	8006384 <HAL_SPI_TransmitReceive+0x168>
 8006378:	2312      	movs	r3, #18
 800637a:	18fb      	adds	r3, r7, r3
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d000      	beq.n	8006384 <HAL_SPI_TransmitReceive+0x168>
 8006382:	e069      	b.n	8006458 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006388:	881a      	ldrh	r2, [r3, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006394:	1c9a      	adds	r2, r3, #2
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800639e:	b29b      	uxth	r3, r3
 80063a0:	3b01      	subs	r3, #1
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063a8:	e056      	b.n	8006458 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	2202      	movs	r2, #2
 80063b2:	4013      	ands	r3, r2
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d11b      	bne.n	80063f0 <HAL_SPI_TransmitReceive+0x1d4>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063bc:	b29b      	uxth	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d016      	beq.n	80063f0 <HAL_SPI_TransmitReceive+0x1d4>
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d113      	bne.n	80063f0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063cc:	881a      	ldrh	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d8:	1c9a      	adds	r2, r3, #2
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	3b01      	subs	r3, #1
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	2201      	movs	r2, #1
 80063f8:	4013      	ands	r3, r2
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d11c      	bne.n	8006438 <HAL_SPI_TransmitReceive+0x21c>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2246      	movs	r2, #70	; 0x46
 8006402:	5a9b      	ldrh	r3, [r3, r2]
 8006404:	b29b      	uxth	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d016      	beq.n	8006438 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006414:	b292      	uxth	r2, r2
 8006416:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641c:	1c9a      	adds	r2, r3, #2
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2246      	movs	r2, #70	; 0x46
 8006426:	5a9b      	ldrh	r3, [r3, r2]
 8006428:	b29b      	uxth	r3, r3
 800642a:	3b01      	subs	r3, #1
 800642c:	b299      	uxth	r1, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2246      	movs	r2, #70	; 0x46
 8006432:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006434:	2301      	movs	r3, #1
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006438:	f7fb ff7a 	bl	8002330 <HAL_GetTick>
 800643c:	0002      	movs	r2, r0
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006444:	429a      	cmp	r2, r3
 8006446:	d807      	bhi.n	8006458 <HAL_SPI_TransmitReceive+0x23c>
 8006448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644a:	3301      	adds	r3, #1
 800644c:	d004      	beq.n	8006458 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800644e:	2323      	movs	r3, #35	; 0x23
 8006450:	18fb      	adds	r3, r7, r3
 8006452:	2203      	movs	r2, #3
 8006454:	701a      	strb	r2, [r3, #0]
        goto error;
 8006456:	e0a2      	b.n	800659e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800645c:	b29b      	uxth	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1a3      	bne.n	80063aa <HAL_SPI_TransmitReceive+0x18e>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2246      	movs	r2, #70	; 0x46
 8006466:	5a9b      	ldrh	r3, [r3, r2]
 8006468:	b29b      	uxth	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d19d      	bne.n	80063aa <HAL_SPI_TransmitReceive+0x18e>
 800646e:	e085      	b.n	800657c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d005      	beq.n	8006484 <HAL_SPI_TransmitReceive+0x268>
 8006478:	2312      	movs	r3, #18
 800647a:	18fb      	adds	r3, r7, r3
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d000      	beq.n	8006484 <HAL_SPI_TransmitReceive+0x268>
 8006482:	e070      	b.n	8006566 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	330c      	adds	r3, #12
 800648e:	7812      	ldrb	r2, [r2, #0]
 8006490:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006496:	1c5a      	adds	r2, r3, #1
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	3b01      	subs	r3, #1
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064aa:	e05c      	b.n	8006566 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	2202      	movs	r2, #2
 80064b4:	4013      	ands	r3, r2
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d11c      	bne.n	80064f4 <HAL_SPI_TransmitReceive+0x2d8>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064be:	b29b      	uxth	r3, r3
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d017      	beq.n	80064f4 <HAL_SPI_TransmitReceive+0x2d8>
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d114      	bne.n	80064f4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	330c      	adds	r3, #12
 80064d4:	7812      	ldrb	r2, [r2, #0]
 80064d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064dc:	1c5a      	adds	r2, r3, #1
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	3b01      	subs	r3, #1
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	2201      	movs	r2, #1
 80064fc:	4013      	ands	r3, r2
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d11e      	bne.n	8006540 <HAL_SPI_TransmitReceive+0x324>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2246      	movs	r2, #70	; 0x46
 8006506:	5a9b      	ldrh	r3, [r3, r2]
 8006508:	b29b      	uxth	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d018      	beq.n	8006540 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	330c      	adds	r3, #12
 8006514:	001a      	movs	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	7812      	ldrb	r2, [r2, #0]
 800651c:	b2d2      	uxtb	r2, r2
 800651e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006524:	1c5a      	adds	r2, r3, #1
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2246      	movs	r2, #70	; 0x46
 800652e:	5a9b      	ldrh	r3, [r3, r2]
 8006530:	b29b      	uxth	r3, r3
 8006532:	3b01      	subs	r3, #1
 8006534:	b299      	uxth	r1, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2246      	movs	r2, #70	; 0x46
 800653a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800653c:	2301      	movs	r3, #1
 800653e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006540:	f7fb fef6 	bl	8002330 <HAL_GetTick>
 8006544:	0002      	movs	r2, r0
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800654c:	429a      	cmp	r2, r3
 800654e:	d802      	bhi.n	8006556 <HAL_SPI_TransmitReceive+0x33a>
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006552:	3301      	adds	r3, #1
 8006554:	d102      	bne.n	800655c <HAL_SPI_TransmitReceive+0x340>
 8006556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006558:	2b00      	cmp	r3, #0
 800655a:	d104      	bne.n	8006566 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800655c:	2323      	movs	r3, #35	; 0x23
 800655e:	18fb      	adds	r3, r7, r3
 8006560:	2203      	movs	r2, #3
 8006562:	701a      	strb	r2, [r3, #0]
        goto error;
 8006564:	e01b      	b.n	800659e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800656a:	b29b      	uxth	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	d19d      	bne.n	80064ac <HAL_SPI_TransmitReceive+0x290>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2246      	movs	r2, #70	; 0x46
 8006574:	5a9b      	ldrh	r3, [r3, r2]
 8006576:	b29b      	uxth	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	d197      	bne.n	80064ac <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800657c:	69fa      	ldr	r2, [r7, #28]
 800657e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	0018      	movs	r0, r3
 8006584:	f000 f94c 	bl	8006820 <SPI_EndRxTxTransaction>
 8006588:	1e03      	subs	r3, r0, #0
 800658a:	d007      	beq.n	800659c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800658c:	2323      	movs	r3, #35	; 0x23
 800658e:	18fb      	adds	r3, r7, r3
 8006590:	2201      	movs	r2, #1
 8006592:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2220      	movs	r2, #32
 8006598:	661a      	str	r2, [r3, #96]	; 0x60
 800659a:	e000      	b.n	800659e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800659c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	225d      	movs	r2, #93	; 0x5d
 80065a2:	2101      	movs	r1, #1
 80065a4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	225c      	movs	r2, #92	; 0x5c
 80065aa:	2100      	movs	r1, #0
 80065ac:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80065ae:	2323      	movs	r3, #35	; 0x23
 80065b0:	18fb      	adds	r3, r7, r3
 80065b2:	781b      	ldrb	r3, [r3, #0]
}
 80065b4:	0018      	movs	r0, r3
 80065b6:	46bd      	mov	sp, r7
 80065b8:	b00a      	add	sp, #40	; 0x28
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	ffffefff 	.word	0xffffefff

080065c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b088      	sub	sp, #32
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	603b      	str	r3, [r7, #0]
 80065cc:	1dfb      	adds	r3, r7, #7
 80065ce:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065d0:	f7fb feae 	bl	8002330 <HAL_GetTick>
 80065d4:	0002      	movs	r2, r0
 80065d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d8:	1a9b      	subs	r3, r3, r2
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	18d3      	adds	r3, r2, r3
 80065de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065e0:	f7fb fea6 	bl	8002330 <HAL_GetTick>
 80065e4:	0003      	movs	r3, r0
 80065e6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065e8:	4b3a      	ldr	r3, [pc, #232]	; (80066d4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	015b      	lsls	r3, r3, #5
 80065ee:	0d1b      	lsrs	r3, r3, #20
 80065f0:	69fa      	ldr	r2, [r7, #28]
 80065f2:	4353      	muls	r3, r2
 80065f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065f6:	e058      	b.n	80066aa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	3301      	adds	r3, #1
 80065fc:	d055      	beq.n	80066aa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80065fe:	f7fb fe97 	bl	8002330 <HAL_GetTick>
 8006602:	0002      	movs	r2, r0
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	69fa      	ldr	r2, [r7, #28]
 800660a:	429a      	cmp	r2, r3
 800660c:	d902      	bls.n	8006614 <SPI_WaitFlagStateUntilTimeout+0x54>
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d142      	bne.n	800669a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685a      	ldr	r2, [r3, #4]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	21e0      	movs	r1, #224	; 0xe0
 8006620:	438a      	bics	r2, r1
 8006622:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	2382      	movs	r3, #130	; 0x82
 800662a:	005b      	lsls	r3, r3, #1
 800662c:	429a      	cmp	r2, r3
 800662e:	d113      	bne.n	8006658 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	2380      	movs	r3, #128	; 0x80
 8006636:	021b      	lsls	r3, r3, #8
 8006638:	429a      	cmp	r2, r3
 800663a:	d005      	beq.n	8006648 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	2380      	movs	r3, #128	; 0x80
 8006642:	00db      	lsls	r3, r3, #3
 8006644:	429a      	cmp	r2, r3
 8006646:	d107      	bne.n	8006658 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2140      	movs	r1, #64	; 0x40
 8006654:	438a      	bics	r2, r1
 8006656:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800665c:	2380      	movs	r3, #128	; 0x80
 800665e:	019b      	lsls	r3, r3, #6
 8006660:	429a      	cmp	r2, r3
 8006662:	d110      	bne.n	8006686 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	491a      	ldr	r1, [pc, #104]	; (80066d8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006670:	400a      	ands	r2, r1
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2180      	movs	r1, #128	; 0x80
 8006680:	0189      	lsls	r1, r1, #6
 8006682:	430a      	orrs	r2, r1
 8006684:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	225d      	movs	r2, #93	; 0x5d
 800668a:	2101      	movs	r1, #1
 800668c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	225c      	movs	r2, #92	; 0x5c
 8006692:	2100      	movs	r1, #0
 8006694:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e017      	b.n	80066ca <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80066a0:	2300      	movs	r3, #0
 80066a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	4013      	ands	r3, r2
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	425a      	negs	r2, r3
 80066ba:	4153      	adcs	r3, r2
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	001a      	movs	r2, r3
 80066c0:	1dfb      	adds	r3, r7, #7
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d197      	bne.n	80065f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	0018      	movs	r0, r3
 80066cc:	46bd      	mov	sp, r7
 80066ce:	b008      	add	sp, #32
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	46c0      	nop			; (mov r8, r8)
 80066d4:	20000000 	.word	0x20000000
 80066d8:	ffffdfff 	.word	0xffffdfff

080066dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b08a      	sub	sp, #40	; 0x28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
 80066e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80066ea:	2317      	movs	r3, #23
 80066ec:	18fb      	adds	r3, r7, r3
 80066ee:	2200      	movs	r2, #0
 80066f0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80066f2:	f7fb fe1d 	bl	8002330 <HAL_GetTick>
 80066f6:	0002      	movs	r2, r0
 80066f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fa:	1a9b      	subs	r3, r3, r2
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	18d3      	adds	r3, r2, r3
 8006700:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006702:	f7fb fe15 	bl	8002330 <HAL_GetTick>
 8006706:	0003      	movs	r3, r0
 8006708:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	330c      	adds	r3, #12
 8006710:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006712:	4b41      	ldr	r3, [pc, #260]	; (8006818 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	0013      	movs	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	189b      	adds	r3, r3, r2
 800671c:	00da      	lsls	r2, r3, #3
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	0d1b      	lsrs	r3, r3, #20
 8006722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006724:	4353      	muls	r3, r2
 8006726:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006728:	e068      	b.n	80067fc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	23c0      	movs	r3, #192	; 0xc0
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	429a      	cmp	r2, r3
 8006732:	d10a      	bne.n	800674a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d107      	bne.n	800674a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	b2da      	uxtb	r2, r3
 8006740:	2117      	movs	r1, #23
 8006742:	187b      	adds	r3, r7, r1
 8006744:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006746:	187b      	adds	r3, r7, r1
 8006748:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	3301      	adds	r3, #1
 800674e:	d055      	beq.n	80067fc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006750:	f7fb fdee 	bl	8002330 <HAL_GetTick>
 8006754:	0002      	movs	r2, r0
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800675c:	429a      	cmp	r2, r3
 800675e:	d902      	bls.n	8006766 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006762:	2b00      	cmp	r3, #0
 8006764:	d142      	bne.n	80067ec <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	21e0      	movs	r1, #224	; 0xe0
 8006772:	438a      	bics	r2, r1
 8006774:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	2382      	movs	r3, #130	; 0x82
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	429a      	cmp	r2, r3
 8006780:	d113      	bne.n	80067aa <SPI_WaitFifoStateUntilTimeout+0xce>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	689a      	ldr	r2, [r3, #8]
 8006786:	2380      	movs	r3, #128	; 0x80
 8006788:	021b      	lsls	r3, r3, #8
 800678a:	429a      	cmp	r2, r3
 800678c:	d005      	beq.n	800679a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	2380      	movs	r3, #128	; 0x80
 8006794:	00db      	lsls	r3, r3, #3
 8006796:	429a      	cmp	r2, r3
 8006798:	d107      	bne.n	80067aa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2140      	movs	r1, #64	; 0x40
 80067a6:	438a      	bics	r2, r1
 80067a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067ae:	2380      	movs	r3, #128	; 0x80
 80067b0:	019b      	lsls	r3, r3, #6
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d110      	bne.n	80067d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4916      	ldr	r1, [pc, #88]	; (800681c <SPI_WaitFifoStateUntilTimeout+0x140>)
 80067c2:	400a      	ands	r2, r1
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2180      	movs	r1, #128	; 0x80
 80067d2:	0189      	lsls	r1, r1, #6
 80067d4:	430a      	orrs	r2, r1
 80067d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	225d      	movs	r2, #93	; 0x5d
 80067dc:	2101      	movs	r1, #1
 80067de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	225c      	movs	r2, #92	; 0x5c
 80067e4:	2100      	movs	r1, #0
 80067e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e010      	b.n	800680e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	4013      	ands	r3, r2
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	429a      	cmp	r2, r3
 800680a:	d18e      	bne.n	800672a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	0018      	movs	r0, r3
 8006810:	46bd      	mov	sp, r7
 8006812:	b00a      	add	sp, #40	; 0x28
 8006814:	bd80      	pop	{r7, pc}
 8006816:	46c0      	nop			; (mov r8, r8)
 8006818:	20000000 	.word	0x20000000
 800681c:	ffffdfff 	.word	0xffffdfff

08006820 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af02      	add	r7, sp, #8
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	23c0      	movs	r3, #192	; 0xc0
 8006830:	0159      	lsls	r1, r3, #5
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	0013      	movs	r3, r2
 800683a:	2200      	movs	r2, #0
 800683c:	f7ff ff4e 	bl	80066dc <SPI_WaitFifoStateUntilTimeout>
 8006840:	1e03      	subs	r3, r0, #0
 8006842:	d007      	beq.n	8006854 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006848:	2220      	movs	r2, #32
 800684a:	431a      	orrs	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e027      	b.n	80068a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	0013      	movs	r3, r2
 800685e:	2200      	movs	r2, #0
 8006860:	2180      	movs	r1, #128	; 0x80
 8006862:	f7ff fead 	bl	80065c0 <SPI_WaitFlagStateUntilTimeout>
 8006866:	1e03      	subs	r3, r0, #0
 8006868:	d007      	beq.n	800687a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800686e:	2220      	movs	r2, #32
 8006870:	431a      	orrs	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e014      	b.n	80068a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	23c0      	movs	r3, #192	; 0xc0
 800687e:	00d9      	lsls	r1, r3, #3
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	0013      	movs	r3, r2
 8006888:	2200      	movs	r2, #0
 800688a:	f7ff ff27 	bl	80066dc <SPI_WaitFifoStateUntilTimeout>
 800688e:	1e03      	subs	r3, r0, #0
 8006890:	d007      	beq.n	80068a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006896:	2220      	movs	r2, #32
 8006898:	431a      	orrs	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e000      	b.n	80068a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	0018      	movs	r0, r3
 80068a6:	46bd      	mov	sp, r7
 80068a8:	b004      	add	sp, #16
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e042      	b.n	8006944 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	223d      	movs	r2, #61	; 0x3d
 80068c2:	5c9b      	ldrb	r3, [r3, r2]
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d107      	bne.n	80068da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	223c      	movs	r2, #60	; 0x3c
 80068ce:	2100      	movs	r1, #0
 80068d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	0018      	movs	r0, r3
 80068d6:	f7fb f931 	bl	8001b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	223d      	movs	r2, #61	; 0x3d
 80068de:	2102      	movs	r1, #2
 80068e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	3304      	adds	r3, #4
 80068ea:	0019      	movs	r1, r3
 80068ec:	0010      	movs	r0, r2
 80068ee:	f000 fa65 	bl	8006dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2246      	movs	r2, #70	; 0x46
 80068f6:	2101      	movs	r1, #1
 80068f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	223e      	movs	r2, #62	; 0x3e
 80068fe:	2101      	movs	r1, #1
 8006900:	5499      	strb	r1, [r3, r2]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	223f      	movs	r2, #63	; 0x3f
 8006906:	2101      	movs	r1, #1
 8006908:	5499      	strb	r1, [r3, r2]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2240      	movs	r2, #64	; 0x40
 800690e:	2101      	movs	r1, #1
 8006910:	5499      	strb	r1, [r3, r2]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2241      	movs	r2, #65	; 0x41
 8006916:	2101      	movs	r1, #1
 8006918:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2242      	movs	r2, #66	; 0x42
 800691e:	2101      	movs	r1, #1
 8006920:	5499      	strb	r1, [r3, r2]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2243      	movs	r2, #67	; 0x43
 8006926:	2101      	movs	r1, #1
 8006928:	5499      	strb	r1, [r3, r2]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2244      	movs	r2, #68	; 0x44
 800692e:	2101      	movs	r1, #1
 8006930:	5499      	strb	r1, [r3, r2]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2245      	movs	r2, #69	; 0x45
 8006936:	2101      	movs	r1, #1
 8006938:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	223d      	movs	r2, #61	; 0x3d
 800693e:	2101      	movs	r1, #1
 8006940:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	0018      	movs	r0, r3
 8006946:	46bd      	mov	sp, r7
 8006948:	b002      	add	sp, #8
 800694a:	bd80      	pop	{r7, pc}

0800694c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	223d      	movs	r2, #61	; 0x3d
 8006958:	5c9b      	ldrb	r3, [r3, r2]
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b01      	cmp	r3, #1
 800695e:	d001      	beq.n	8006964 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e03b      	b.n	80069dc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	223d      	movs	r2, #61	; 0x3d
 8006968:	2102      	movs	r1, #2
 800696a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68da      	ldr	r2, [r3, #12]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2101      	movs	r1, #1
 8006978:	430a      	orrs	r2, r1
 800697a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a18      	ldr	r2, [pc, #96]	; (80069e4 <HAL_TIM_Base_Start_IT+0x98>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00f      	beq.n	80069a6 <HAL_TIM_Base_Start_IT+0x5a>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	2380      	movs	r3, #128	; 0x80
 800698c:	05db      	lsls	r3, r3, #23
 800698e:	429a      	cmp	r2, r3
 8006990:	d009      	beq.n	80069a6 <HAL_TIM_Base_Start_IT+0x5a>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a14      	ldr	r2, [pc, #80]	; (80069e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d004      	beq.n	80069a6 <HAL_TIM_Base_Start_IT+0x5a>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a12      	ldr	r2, [pc, #72]	; (80069ec <HAL_TIM_Base_Start_IT+0xa0>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d111      	bne.n	80069ca <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	2207      	movs	r2, #7
 80069ae:	4013      	ands	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2b06      	cmp	r3, #6
 80069b6:	d010      	beq.n	80069da <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2101      	movs	r1, #1
 80069c4:	430a      	orrs	r2, r1
 80069c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c8:	e007      	b.n	80069da <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2101      	movs	r1, #1
 80069d6:	430a      	orrs	r2, r1
 80069d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	0018      	movs	r0, r3
 80069de:	46bd      	mov	sp, r7
 80069e0:	b004      	add	sp, #16
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	40012c00 	.word	0x40012c00
 80069e8:	40000400 	.word	0x40000400
 80069ec:	40014000 	.word	0x40014000

080069f0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e042      	b.n	8006a88 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	223d      	movs	r2, #61	; 0x3d
 8006a06:	5c9b      	ldrb	r3, [r3, r2]
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d107      	bne.n	8006a1e <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	223c      	movs	r2, #60	; 0x3c
 8006a12:	2100      	movs	r1, #0
 8006a14:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	0018      	movs	r0, r3
 8006a1a:	f000 f839 	bl	8006a90 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	223d      	movs	r2, #61	; 0x3d
 8006a22:	2102      	movs	r1, #2
 8006a24:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	0019      	movs	r1, r3
 8006a30:	0010      	movs	r0, r2
 8006a32:	f000 f9c3 	bl	8006dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2246      	movs	r2, #70	; 0x46
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	223e      	movs	r2, #62	; 0x3e
 8006a42:	2101      	movs	r1, #1
 8006a44:	5499      	strb	r1, [r3, r2]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	223f      	movs	r2, #63	; 0x3f
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	5499      	strb	r1, [r3, r2]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2240      	movs	r2, #64	; 0x40
 8006a52:	2101      	movs	r1, #1
 8006a54:	5499      	strb	r1, [r3, r2]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2241      	movs	r2, #65	; 0x41
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2242      	movs	r2, #66	; 0x42
 8006a62:	2101      	movs	r1, #1
 8006a64:	5499      	strb	r1, [r3, r2]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2243      	movs	r2, #67	; 0x43
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	5499      	strb	r1, [r3, r2]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2244      	movs	r2, #68	; 0x44
 8006a72:	2101      	movs	r1, #1
 8006a74:	5499      	strb	r1, [r3, r2]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2245      	movs	r2, #69	; 0x45
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	223d      	movs	r2, #61	; 0x3d
 8006a82:	2101      	movs	r1, #1
 8006a84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	0018      	movs	r0, r3
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	b002      	add	sp, #8
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006a98:	46c0      	nop			; (mov r8, r8)
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	b002      	add	sp, #8
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d124      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	2202      	movs	r2, #2
 8006abe:	4013      	ands	r3, r2
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d11d      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2203      	movs	r2, #3
 8006aca:	4252      	negs	r2, r2
 8006acc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	2203      	movs	r2, #3
 8006adc:	4013      	ands	r3, r2
 8006ade:	d004      	beq.n	8006aea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	0018      	movs	r0, r3
 8006ae4:	f000 f952 	bl	8006d8c <HAL_TIM_IC_CaptureCallback>
 8006ae8:	e007      	b.n	8006afa <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	0018      	movs	r0, r3
 8006aee:	f000 f945 	bl	8006d7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	0018      	movs	r0, r3
 8006af6:	f000 f951 	bl	8006d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	2204      	movs	r2, #4
 8006b08:	4013      	ands	r3, r2
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d125      	bne.n	8006b5a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	2204      	movs	r2, #4
 8006b16:	4013      	ands	r3, r2
 8006b18:	2b04      	cmp	r3, #4
 8006b1a:	d11e      	bne.n	8006b5a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2205      	movs	r2, #5
 8006b22:	4252      	negs	r2, r2
 8006b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2202      	movs	r2, #2
 8006b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	699a      	ldr	r2, [r3, #24]
 8006b32:	23c0      	movs	r3, #192	; 0xc0
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4013      	ands	r3, r2
 8006b38:	d004      	beq.n	8006b44 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	0018      	movs	r0, r3
 8006b3e:	f000 f925 	bl	8006d8c <HAL_TIM_IC_CaptureCallback>
 8006b42:	e007      	b.n	8006b54 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	0018      	movs	r0, r3
 8006b48:	f000 f918 	bl	8006d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	0018      	movs	r0, r3
 8006b50:	f000 f924 	bl	8006d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	2208      	movs	r2, #8
 8006b62:	4013      	ands	r3, r2
 8006b64:	2b08      	cmp	r3, #8
 8006b66:	d124      	bne.n	8006bb2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	2208      	movs	r2, #8
 8006b70:	4013      	ands	r3, r2
 8006b72:	2b08      	cmp	r3, #8
 8006b74:	d11d      	bne.n	8006bb2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2209      	movs	r2, #9
 8006b7c:	4252      	negs	r2, r2
 8006b7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2204      	movs	r2, #4
 8006b84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	69db      	ldr	r3, [r3, #28]
 8006b8c:	2203      	movs	r2, #3
 8006b8e:	4013      	ands	r3, r2
 8006b90:	d004      	beq.n	8006b9c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	0018      	movs	r0, r3
 8006b96:	f000 f8f9 	bl	8006d8c <HAL_TIM_IC_CaptureCallback>
 8006b9a:	e007      	b.n	8006bac <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	0018      	movs	r0, r3
 8006ba0:	f000 f8ec 	bl	8006d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	0018      	movs	r0, r3
 8006ba8:	f000 f8f8 	bl	8006d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	2210      	movs	r2, #16
 8006bba:	4013      	ands	r3, r2
 8006bbc:	2b10      	cmp	r3, #16
 8006bbe:	d125      	bne.n	8006c0c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	2210      	movs	r2, #16
 8006bc8:	4013      	ands	r3, r2
 8006bca:	2b10      	cmp	r3, #16
 8006bcc:	d11e      	bne.n	8006c0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	2211      	movs	r2, #17
 8006bd4:	4252      	negs	r2, r2
 8006bd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2208      	movs	r2, #8
 8006bdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	69da      	ldr	r2, [r3, #28]
 8006be4:	23c0      	movs	r3, #192	; 0xc0
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4013      	ands	r3, r2
 8006bea:	d004      	beq.n	8006bf6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	0018      	movs	r0, r3
 8006bf0:	f000 f8cc 	bl	8006d8c <HAL_TIM_IC_CaptureCallback>
 8006bf4:	e007      	b.n	8006c06 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	f000 f8bf 	bl	8006d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	0018      	movs	r0, r3
 8006c02:	f000 f8cb 	bl	8006d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	2201      	movs	r2, #1
 8006c14:	4013      	ands	r3, r2
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d10f      	bne.n	8006c3a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	2201      	movs	r2, #1
 8006c22:	4013      	ands	r3, r2
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d108      	bne.n	8006c3a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	4252      	negs	r2, r2
 8006c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	0018      	movs	r0, r3
 8006c36:	f7f9 fc11 	bl	800045c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	2280      	movs	r2, #128	; 0x80
 8006c42:	4013      	ands	r3, r2
 8006c44:	2b80      	cmp	r3, #128	; 0x80
 8006c46:	d10f      	bne.n	8006c68 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	2280      	movs	r2, #128	; 0x80
 8006c50:	4013      	ands	r3, r2
 8006c52:	2b80      	cmp	r3, #128	; 0x80
 8006c54:	d108      	bne.n	8006c68 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2281      	movs	r2, #129	; 0x81
 8006c5c:	4252      	negs	r2, r2
 8006c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	0018      	movs	r0, r3
 8006c64:	f000 fb2e 	bl	80072c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	2240      	movs	r2, #64	; 0x40
 8006c70:	4013      	ands	r3, r2
 8006c72:	2b40      	cmp	r3, #64	; 0x40
 8006c74:	d10f      	bne.n	8006c96 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	2240      	movs	r2, #64	; 0x40
 8006c7e:	4013      	ands	r3, r2
 8006c80:	2b40      	cmp	r3, #64	; 0x40
 8006c82:	d108      	bne.n	8006c96 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2241      	movs	r2, #65	; 0x41
 8006c8a:	4252      	negs	r2, r2
 8006c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	0018      	movs	r0, r3
 8006c92:	f000 f88b 	bl	8006dac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	2b20      	cmp	r3, #32
 8006ca2:	d10f      	bne.n	8006cc4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	2220      	movs	r2, #32
 8006cac:	4013      	ands	r3, r2
 8006cae:	2b20      	cmp	r3, #32
 8006cb0:	d108      	bne.n	8006cc4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2221      	movs	r2, #33	; 0x21
 8006cb8:	4252      	negs	r2, r2
 8006cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	f000 faf8 	bl	80072b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cc4:	46c0      	nop			; (mov r8, r8)
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	b002      	add	sp, #8
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cd8:	2317      	movs	r3, #23
 8006cda:	18fb      	adds	r3, r7, r3
 8006cdc:	2200      	movs	r2, #0
 8006cde:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	223c      	movs	r2, #60	; 0x3c
 8006ce4:	5c9b      	ldrb	r3, [r3, r2]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d101      	bne.n	8006cee <HAL_TIM_OC_ConfigChannel+0x22>
 8006cea:	2302      	movs	r3, #2
 8006cec:	e042      	b.n	8006d74 <HAL_TIM_OC_ConfigChannel+0xa8>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	223c      	movs	r2, #60	; 0x3c
 8006cf2:	2101      	movs	r1, #1
 8006cf4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b0c      	cmp	r3, #12
 8006cfa:	d027      	beq.n	8006d4c <HAL_TIM_OC_ConfigChannel+0x80>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b0c      	cmp	r3, #12
 8006d00:	d82c      	bhi.n	8006d5c <HAL_TIM_OC_ConfigChannel+0x90>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b08      	cmp	r3, #8
 8006d06:	d019      	beq.n	8006d3c <HAL_TIM_OC_ConfigChannel+0x70>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b08      	cmp	r3, #8
 8006d0c:	d826      	bhi.n	8006d5c <HAL_TIM_OC_ConfigChannel+0x90>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <HAL_TIM_OC_ConfigChannel+0x50>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b04      	cmp	r3, #4
 8006d18:	d008      	beq.n	8006d2c <HAL_TIM_OC_ConfigChannel+0x60>
 8006d1a:	e01f      	b.n	8006d5c <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	0011      	movs	r1, r2
 8006d24:	0018      	movs	r0, r3
 8006d26:	f000 f8c9 	bl	8006ebc <TIM_OC1_SetConfig>
      break;
 8006d2a:	e01c      	b.n	8006d66 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	0011      	movs	r1, r2
 8006d34:	0018      	movs	r0, r3
 8006d36:	f000 f949 	bl	8006fcc <TIM_OC2_SetConfig>
      break;
 8006d3a:	e014      	b.n	8006d66 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	0011      	movs	r1, r2
 8006d44:	0018      	movs	r0, r3
 8006d46:	f000 f9c5 	bl	80070d4 <TIM_OC3_SetConfig>
      break;
 8006d4a:	e00c      	b.n	8006d66 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	0011      	movs	r1, r2
 8006d54:	0018      	movs	r0, r3
 8006d56:	f000 fa43 	bl	80071e0 <TIM_OC4_SetConfig>
      break;
 8006d5a:	e004      	b.n	8006d66 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8006d5c:	2317      	movs	r3, #23
 8006d5e:	18fb      	adds	r3, r7, r3
 8006d60:	2201      	movs	r2, #1
 8006d62:	701a      	strb	r2, [r3, #0]
      break;
 8006d64:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	223c      	movs	r2, #60	; 0x3c
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	5499      	strb	r1, [r3, r2]

  return status;
 8006d6e:	2317      	movs	r3, #23
 8006d70:	18fb      	adds	r3, r7, r3
 8006d72:	781b      	ldrb	r3, [r3, #0]
}
 8006d74:	0018      	movs	r0, r3
 8006d76:	46bd      	mov	sp, r7
 8006d78:	b006      	add	sp, #24
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d84:	46c0      	nop			; (mov r8, r8)
 8006d86:	46bd      	mov	sp, r7
 8006d88:	b002      	add	sp, #8
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d94:	46c0      	nop			; (mov r8, r8)
 8006d96:	46bd      	mov	sp, r7
 8006d98:	b002      	add	sp, #8
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006da4:	46c0      	nop			; (mov r8, r8)
 8006da6:	46bd      	mov	sp, r7
 8006da8:	b002      	add	sp, #8
 8006daa:	bd80      	pop	{r7, pc}

08006dac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006db4:	46c0      	nop			; (mov r8, r8)
 8006db6:	46bd      	mov	sp, r7
 8006db8:	b002      	add	sp, #8
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a34      	ldr	r2, [pc, #208]	; (8006ea0 <TIM_Base_SetConfig+0xe4>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d008      	beq.n	8006de6 <TIM_Base_SetConfig+0x2a>
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	2380      	movs	r3, #128	; 0x80
 8006dd8:	05db      	lsls	r3, r3, #23
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d003      	beq.n	8006de6 <TIM_Base_SetConfig+0x2a>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a30      	ldr	r2, [pc, #192]	; (8006ea4 <TIM_Base_SetConfig+0xe8>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d108      	bne.n	8006df8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2270      	movs	r2, #112	; 0x70
 8006dea:	4393      	bics	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a29      	ldr	r2, [pc, #164]	; (8006ea0 <TIM_Base_SetConfig+0xe4>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d018      	beq.n	8006e32 <TIM_Base_SetConfig+0x76>
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	2380      	movs	r3, #128	; 0x80
 8006e04:	05db      	lsls	r3, r3, #23
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d013      	beq.n	8006e32 <TIM_Base_SetConfig+0x76>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a25      	ldr	r2, [pc, #148]	; (8006ea4 <TIM_Base_SetConfig+0xe8>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d00f      	beq.n	8006e32 <TIM_Base_SetConfig+0x76>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a24      	ldr	r2, [pc, #144]	; (8006ea8 <TIM_Base_SetConfig+0xec>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d00b      	beq.n	8006e32 <TIM_Base_SetConfig+0x76>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a23      	ldr	r2, [pc, #140]	; (8006eac <TIM_Base_SetConfig+0xf0>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d007      	beq.n	8006e32 <TIM_Base_SetConfig+0x76>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a22      	ldr	r2, [pc, #136]	; (8006eb0 <TIM_Base_SetConfig+0xf4>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d003      	beq.n	8006e32 <TIM_Base_SetConfig+0x76>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a21      	ldr	r2, [pc, #132]	; (8006eb4 <TIM_Base_SetConfig+0xf8>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d108      	bne.n	8006e44 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	4a20      	ldr	r2, [pc, #128]	; (8006eb8 <TIM_Base_SetConfig+0xfc>)
 8006e36:	4013      	ands	r3, r2
 8006e38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2280      	movs	r2, #128	; 0x80
 8006e48:	4393      	bics	r3, r2
 8006e4a:	001a      	movs	r2, r3
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	689a      	ldr	r2, [r3, #8]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a0c      	ldr	r2, [pc, #48]	; (8006ea0 <TIM_Base_SetConfig+0xe4>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00b      	beq.n	8006e8a <TIM_Base_SetConfig+0xce>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a0d      	ldr	r2, [pc, #52]	; (8006eac <TIM_Base_SetConfig+0xf0>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d007      	beq.n	8006e8a <TIM_Base_SetConfig+0xce>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a0c      	ldr	r2, [pc, #48]	; (8006eb0 <TIM_Base_SetConfig+0xf4>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d003      	beq.n	8006e8a <TIM_Base_SetConfig+0xce>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a0b      	ldr	r2, [pc, #44]	; (8006eb4 <TIM_Base_SetConfig+0xf8>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d103      	bne.n	8006e92 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	691a      	ldr	r2, [r3, #16]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	615a      	str	r2, [r3, #20]
}
 8006e98:	46c0      	nop			; (mov r8, r8)
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	b004      	add	sp, #16
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	40012c00 	.word	0x40012c00
 8006ea4:	40000400 	.word	0x40000400
 8006ea8:	40002000 	.word	0x40002000
 8006eac:	40014000 	.word	0x40014000
 8006eb0:	40014400 	.word	0x40014400
 8006eb4:	40014800 	.word	0x40014800
 8006eb8:	fffffcff 	.word	0xfffffcff

08006ebc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	4393      	bics	r3, r2
 8006ece:	001a      	movs	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a1b      	ldr	r3, [r3, #32]
 8006ed8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2270      	movs	r2, #112	; 0x70
 8006eea:	4393      	bics	r3, r2
 8006eec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2203      	movs	r2, #3
 8006ef2:	4393      	bics	r3, r2
 8006ef4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	2202      	movs	r2, #2
 8006f04:	4393      	bics	r3, r2
 8006f06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a27      	ldr	r2, [pc, #156]	; (8006fb4 <TIM_OC1_SetConfig+0xf8>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d00b      	beq.n	8006f32 <TIM_OC1_SetConfig+0x76>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a26      	ldr	r2, [pc, #152]	; (8006fb8 <TIM_OC1_SetConfig+0xfc>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d007      	beq.n	8006f32 <TIM_OC1_SetConfig+0x76>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a25      	ldr	r2, [pc, #148]	; (8006fbc <TIM_OC1_SetConfig+0x100>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d003      	beq.n	8006f32 <TIM_OC1_SetConfig+0x76>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a24      	ldr	r2, [pc, #144]	; (8006fc0 <TIM_OC1_SetConfig+0x104>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d10c      	bne.n	8006f4c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2208      	movs	r2, #8
 8006f36:	4393      	bics	r3, r2
 8006f38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	2204      	movs	r2, #4
 8006f48:	4393      	bics	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a19      	ldr	r2, [pc, #100]	; (8006fb4 <TIM_OC1_SetConfig+0xf8>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d00b      	beq.n	8006f6c <TIM_OC1_SetConfig+0xb0>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a18      	ldr	r2, [pc, #96]	; (8006fb8 <TIM_OC1_SetConfig+0xfc>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d007      	beq.n	8006f6c <TIM_OC1_SetConfig+0xb0>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a17      	ldr	r2, [pc, #92]	; (8006fbc <TIM_OC1_SetConfig+0x100>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d003      	beq.n	8006f6c <TIM_OC1_SetConfig+0xb0>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a16      	ldr	r2, [pc, #88]	; (8006fc0 <TIM_OC1_SetConfig+0x104>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d111      	bne.n	8006f90 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	4a15      	ldr	r2, [pc, #84]	; (8006fc4 <TIM_OC1_SetConfig+0x108>)
 8006f70:	4013      	ands	r3, r2
 8006f72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	4a14      	ldr	r2, [pc, #80]	; (8006fc8 <TIM_OC1_SetConfig+0x10c>)
 8006f78:	4013      	ands	r3, r2
 8006f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	621a      	str	r2, [r3, #32]
}
 8006faa:	46c0      	nop			; (mov r8, r8)
 8006fac:	46bd      	mov	sp, r7
 8006fae:	b006      	add	sp, #24
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	46c0      	nop			; (mov r8, r8)
 8006fb4:	40012c00 	.word	0x40012c00
 8006fb8:	40014000 	.word	0x40014000
 8006fbc:	40014400 	.word	0x40014400
 8006fc0:	40014800 	.word	0x40014800
 8006fc4:	fffffeff 	.word	0xfffffeff
 8006fc8:	fffffdff 	.word	0xfffffdff

08006fcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	2210      	movs	r2, #16
 8006fdc:	4393      	bics	r3, r2
 8006fde:	001a      	movs	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a1b      	ldr	r3, [r3, #32]
 8006fe8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	699b      	ldr	r3, [r3, #24]
 8006ff4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	4a2e      	ldr	r2, [pc, #184]	; (80070b4 <TIM_OC2_SetConfig+0xe8>)
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	4a2d      	ldr	r2, [pc, #180]	; (80070b8 <TIM_OC2_SetConfig+0xec>)
 8007002:	4013      	ands	r3, r2
 8007004:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	021b      	lsls	r3, r3, #8
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2220      	movs	r2, #32
 8007016:	4393      	bics	r3, r2
 8007018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	011b      	lsls	r3, r3, #4
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	4313      	orrs	r3, r2
 8007024:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a24      	ldr	r2, [pc, #144]	; (80070bc <TIM_OC2_SetConfig+0xf0>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d10d      	bne.n	800704a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2280      	movs	r2, #128	; 0x80
 8007032:	4393      	bics	r3, r2
 8007034:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	011b      	lsls	r3, r3, #4
 800703c:	697a      	ldr	r2, [r7, #20]
 800703e:	4313      	orrs	r3, r2
 8007040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	2240      	movs	r2, #64	; 0x40
 8007046:	4393      	bics	r3, r2
 8007048:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a1b      	ldr	r2, [pc, #108]	; (80070bc <TIM_OC2_SetConfig+0xf0>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d00b      	beq.n	800706a <TIM_OC2_SetConfig+0x9e>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a1a      	ldr	r2, [pc, #104]	; (80070c0 <TIM_OC2_SetConfig+0xf4>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d007      	beq.n	800706a <TIM_OC2_SetConfig+0x9e>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a19      	ldr	r2, [pc, #100]	; (80070c4 <TIM_OC2_SetConfig+0xf8>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d003      	beq.n	800706a <TIM_OC2_SetConfig+0x9e>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a18      	ldr	r2, [pc, #96]	; (80070c8 <TIM_OC2_SetConfig+0xfc>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d113      	bne.n	8007092 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	4a17      	ldr	r2, [pc, #92]	; (80070cc <TIM_OC2_SetConfig+0x100>)
 800706e:	4013      	ands	r3, r2
 8007070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	4a16      	ldr	r2, [pc, #88]	; (80070d0 <TIM_OC2_SetConfig+0x104>)
 8007076:	4013      	ands	r3, r2
 8007078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	4313      	orrs	r3, r2
 8007084:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	4313      	orrs	r3, r2
 8007090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	621a      	str	r2, [r3, #32]
}
 80070ac:	46c0      	nop			; (mov r8, r8)
 80070ae:	46bd      	mov	sp, r7
 80070b0:	b006      	add	sp, #24
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	ffff8fff 	.word	0xffff8fff
 80070b8:	fffffcff 	.word	0xfffffcff
 80070bc:	40012c00 	.word	0x40012c00
 80070c0:	40014000 	.word	0x40014000
 80070c4:	40014400 	.word	0x40014400
 80070c8:	40014800 	.word	0x40014800
 80070cc:	fffffbff 	.word	0xfffffbff
 80070d0:	fffff7ff 	.word	0xfffff7ff

080070d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	4a35      	ldr	r2, [pc, #212]	; (80071b8 <TIM_OC3_SetConfig+0xe4>)
 80070e4:	401a      	ands	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2270      	movs	r2, #112	; 0x70
 8007100:	4393      	bics	r3, r2
 8007102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2203      	movs	r2, #3
 8007108:	4393      	bics	r3, r2
 800710a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	4313      	orrs	r3, r2
 8007114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	4a28      	ldr	r2, [pc, #160]	; (80071bc <TIM_OC3_SetConfig+0xe8>)
 800711a:	4013      	ands	r3, r2
 800711c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	021b      	lsls	r3, r3, #8
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	4313      	orrs	r3, r2
 8007128:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a24      	ldr	r2, [pc, #144]	; (80071c0 <TIM_OC3_SetConfig+0xec>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d10d      	bne.n	800714e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	4a23      	ldr	r2, [pc, #140]	; (80071c4 <TIM_OC3_SetConfig+0xf0>)
 8007136:	4013      	ands	r3, r2
 8007138:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	021b      	lsls	r3, r3, #8
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	4313      	orrs	r3, r2
 8007144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	4a1f      	ldr	r2, [pc, #124]	; (80071c8 <TIM_OC3_SetConfig+0xf4>)
 800714a:	4013      	ands	r3, r2
 800714c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a1b      	ldr	r2, [pc, #108]	; (80071c0 <TIM_OC3_SetConfig+0xec>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d00b      	beq.n	800716e <TIM_OC3_SetConfig+0x9a>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a1c      	ldr	r2, [pc, #112]	; (80071cc <TIM_OC3_SetConfig+0xf8>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d007      	beq.n	800716e <TIM_OC3_SetConfig+0x9a>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a1b      	ldr	r2, [pc, #108]	; (80071d0 <TIM_OC3_SetConfig+0xfc>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d003      	beq.n	800716e <TIM_OC3_SetConfig+0x9a>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a1a      	ldr	r2, [pc, #104]	; (80071d4 <TIM_OC3_SetConfig+0x100>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d113      	bne.n	8007196 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	4a19      	ldr	r2, [pc, #100]	; (80071d8 <TIM_OC3_SetConfig+0x104>)
 8007172:	4013      	ands	r3, r2
 8007174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	4a18      	ldr	r2, [pc, #96]	; (80071dc <TIM_OC3_SetConfig+0x108>)
 800717a:	4013      	ands	r3, r2
 800717c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	011b      	lsls	r3, r3, #4
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	4313      	orrs	r3, r2
 8007188:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	011b      	lsls	r3, r3, #4
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	4313      	orrs	r3, r2
 8007194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	685a      	ldr	r2, [r3, #4]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	697a      	ldr	r2, [r7, #20]
 80071ae:	621a      	str	r2, [r3, #32]
}
 80071b0:	46c0      	nop			; (mov r8, r8)
 80071b2:	46bd      	mov	sp, r7
 80071b4:	b006      	add	sp, #24
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	fffffeff 	.word	0xfffffeff
 80071bc:	fffffdff 	.word	0xfffffdff
 80071c0:	40012c00 	.word	0x40012c00
 80071c4:	fffff7ff 	.word	0xfffff7ff
 80071c8:	fffffbff 	.word	0xfffffbff
 80071cc:	40014000 	.word	0x40014000
 80071d0:	40014400 	.word	0x40014400
 80071d4:	40014800 	.word	0x40014800
 80071d8:	ffffefff 	.word	0xffffefff
 80071dc:	ffffdfff 	.word	0xffffdfff

080071e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	4a28      	ldr	r2, [pc, #160]	; (8007290 <TIM_OC4_SetConfig+0xb0>)
 80071f0:	401a      	ands	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4a22      	ldr	r2, [pc, #136]	; (8007294 <TIM_OC4_SetConfig+0xb4>)
 800720c:	4013      	ands	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	4a21      	ldr	r2, [pc, #132]	; (8007298 <TIM_OC4_SetConfig+0xb8>)
 8007214:	4013      	ands	r3, r2
 8007216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	021b      	lsls	r3, r3, #8
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	4313      	orrs	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	4a1d      	ldr	r2, [pc, #116]	; (800729c <TIM_OC4_SetConfig+0xbc>)
 8007228:	4013      	ands	r3, r2
 800722a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	031b      	lsls	r3, r3, #12
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	4313      	orrs	r3, r2
 8007236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a19      	ldr	r2, [pc, #100]	; (80072a0 <TIM_OC4_SetConfig+0xc0>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d00b      	beq.n	8007258 <TIM_OC4_SetConfig+0x78>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a18      	ldr	r2, [pc, #96]	; (80072a4 <TIM_OC4_SetConfig+0xc4>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d007      	beq.n	8007258 <TIM_OC4_SetConfig+0x78>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a17      	ldr	r2, [pc, #92]	; (80072a8 <TIM_OC4_SetConfig+0xc8>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d003      	beq.n	8007258 <TIM_OC4_SetConfig+0x78>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a16      	ldr	r2, [pc, #88]	; (80072ac <TIM_OC4_SetConfig+0xcc>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d109      	bne.n	800726c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	4a15      	ldr	r2, [pc, #84]	; (80072b0 <TIM_OC4_SetConfig+0xd0>)
 800725c:	4013      	ands	r3, r2
 800725e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	695b      	ldr	r3, [r3, #20]
 8007264:	019b      	lsls	r3, r3, #6
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	4313      	orrs	r3, r2
 800726a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	621a      	str	r2, [r3, #32]
}
 8007286:	46c0      	nop			; (mov r8, r8)
 8007288:	46bd      	mov	sp, r7
 800728a:	b006      	add	sp, #24
 800728c:	bd80      	pop	{r7, pc}
 800728e:	46c0      	nop			; (mov r8, r8)
 8007290:	ffffefff 	.word	0xffffefff
 8007294:	ffff8fff 	.word	0xffff8fff
 8007298:	fffffcff 	.word	0xfffffcff
 800729c:	ffffdfff 	.word	0xffffdfff
 80072a0:	40012c00 	.word	0x40012c00
 80072a4:	40014000 	.word	0x40014000
 80072a8:	40014400 	.word	0x40014400
 80072ac:	40014800 	.word	0x40014800
 80072b0:	ffffbfff 	.word	0xffffbfff

080072b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072bc:	46c0      	nop			; (mov r8, r8)
 80072be:	46bd      	mov	sp, r7
 80072c0:	b002      	add	sp, #8
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072cc:	46c0      	nop			; (mov r8, r8)
 80072ce:	46bd      	mov	sp, r7
 80072d0:	b002      	add	sp, #8
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e044      	b.n	8007370 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d107      	bne.n	80072fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2274      	movs	r2, #116	; 0x74
 80072f2:	2100      	movs	r1, #0
 80072f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	0018      	movs	r0, r3
 80072fa:	f7fa fc47 	bl	8001b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2224      	movs	r2, #36	; 0x24
 8007302:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2101      	movs	r1, #1
 8007310:	438a      	bics	r2, r1
 8007312:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	0018      	movs	r0, r3
 8007318:	f000 fb24 	bl	8007964 <UART_SetConfig>
 800731c:	0003      	movs	r3, r0
 800731e:	2b01      	cmp	r3, #1
 8007320:	d101      	bne.n	8007326 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e024      	b.n	8007370 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732a:	2b00      	cmp	r3, #0
 800732c:	d003      	beq.n	8007336 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	0018      	movs	r0, r3
 8007332:	f000 fc9f 	bl	8007c74 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	490d      	ldr	r1, [pc, #52]	; (8007378 <HAL_UART_Init+0xa4>)
 8007342:	400a      	ands	r2, r1
 8007344:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	212a      	movs	r1, #42	; 0x2a
 8007352:	438a      	bics	r2, r1
 8007354:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2101      	movs	r1, #1
 8007362:	430a      	orrs	r2, r1
 8007364:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	0018      	movs	r0, r3
 800736a:	f000 fd37 	bl	8007ddc <UART_CheckIdleState>
 800736e:	0003      	movs	r3, r0
}
 8007370:	0018      	movs	r0, r3
 8007372:	46bd      	mov	sp, r7
 8007374:	b002      	add	sp, #8
 8007376:	bd80      	pop	{r7, pc}
 8007378:	ffffb7ff 	.word	0xffffb7ff

0800737c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800737c:	b590      	push	{r4, r7, lr}
 800737e:	b0ab      	sub	sp, #172	; 0xac
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	69db      	ldr	r3, [r3, #28]
 800738a:	22a4      	movs	r2, #164	; 0xa4
 800738c:	18b9      	adds	r1, r7, r2
 800738e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	20a0      	movs	r0, #160	; 0xa0
 8007398:	1839      	adds	r1, r7, r0
 800739a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	219c      	movs	r1, #156	; 0x9c
 80073a4:	1879      	adds	r1, r7, r1
 80073a6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80073a8:	0011      	movs	r1, r2
 80073aa:	18bb      	adds	r3, r7, r2
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a99      	ldr	r2, [pc, #612]	; (8007614 <HAL_UART_IRQHandler+0x298>)
 80073b0:	4013      	ands	r3, r2
 80073b2:	2298      	movs	r2, #152	; 0x98
 80073b4:	18bc      	adds	r4, r7, r2
 80073b6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80073b8:	18bb      	adds	r3, r7, r2
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d114      	bne.n	80073ea <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80073c0:	187b      	adds	r3, r7, r1
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2220      	movs	r2, #32
 80073c6:	4013      	ands	r3, r2
 80073c8:	d00f      	beq.n	80073ea <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80073ca:	183b      	adds	r3, r7, r0
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2220      	movs	r2, #32
 80073d0:	4013      	ands	r3, r2
 80073d2:	d00a      	beq.n	80073ea <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d100      	bne.n	80073de <HAL_UART_IRQHandler+0x62>
 80073dc:	e296      	b.n	800790c <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	0010      	movs	r0, r2
 80073e6:	4798      	blx	r3
      }
      return;
 80073e8:	e290      	b.n	800790c <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80073ea:	2398      	movs	r3, #152	; 0x98
 80073ec:	18fb      	adds	r3, r7, r3
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d100      	bne.n	80073f6 <HAL_UART_IRQHandler+0x7a>
 80073f4:	e114      	b.n	8007620 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80073f6:	239c      	movs	r3, #156	; 0x9c
 80073f8:	18fb      	adds	r3, r7, r3
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2201      	movs	r2, #1
 80073fe:	4013      	ands	r3, r2
 8007400:	d106      	bne.n	8007410 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007402:	23a0      	movs	r3, #160	; 0xa0
 8007404:	18fb      	adds	r3, r7, r3
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a83      	ldr	r2, [pc, #524]	; (8007618 <HAL_UART_IRQHandler+0x29c>)
 800740a:	4013      	ands	r3, r2
 800740c:	d100      	bne.n	8007410 <HAL_UART_IRQHandler+0x94>
 800740e:	e107      	b.n	8007620 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007410:	23a4      	movs	r3, #164	; 0xa4
 8007412:	18fb      	adds	r3, r7, r3
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2201      	movs	r2, #1
 8007418:	4013      	ands	r3, r2
 800741a:	d012      	beq.n	8007442 <HAL_UART_IRQHandler+0xc6>
 800741c:	23a0      	movs	r3, #160	; 0xa0
 800741e:	18fb      	adds	r3, r7, r3
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	2380      	movs	r3, #128	; 0x80
 8007424:	005b      	lsls	r3, r3, #1
 8007426:	4013      	ands	r3, r2
 8007428:	d00b      	beq.n	8007442 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2201      	movs	r2, #1
 8007430:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2280      	movs	r2, #128	; 0x80
 8007436:	589b      	ldr	r3, [r3, r2]
 8007438:	2201      	movs	r2, #1
 800743a:	431a      	orrs	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2180      	movs	r1, #128	; 0x80
 8007440:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007442:	23a4      	movs	r3, #164	; 0xa4
 8007444:	18fb      	adds	r3, r7, r3
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2202      	movs	r2, #2
 800744a:	4013      	ands	r3, r2
 800744c:	d011      	beq.n	8007472 <HAL_UART_IRQHandler+0xf6>
 800744e:	239c      	movs	r3, #156	; 0x9c
 8007450:	18fb      	adds	r3, r7, r3
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2201      	movs	r2, #1
 8007456:	4013      	ands	r3, r2
 8007458:	d00b      	beq.n	8007472 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2202      	movs	r2, #2
 8007460:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2280      	movs	r2, #128	; 0x80
 8007466:	589b      	ldr	r3, [r3, r2]
 8007468:	2204      	movs	r2, #4
 800746a:	431a      	orrs	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2180      	movs	r1, #128	; 0x80
 8007470:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007472:	23a4      	movs	r3, #164	; 0xa4
 8007474:	18fb      	adds	r3, r7, r3
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2204      	movs	r2, #4
 800747a:	4013      	ands	r3, r2
 800747c:	d011      	beq.n	80074a2 <HAL_UART_IRQHandler+0x126>
 800747e:	239c      	movs	r3, #156	; 0x9c
 8007480:	18fb      	adds	r3, r7, r3
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2201      	movs	r2, #1
 8007486:	4013      	ands	r3, r2
 8007488:	d00b      	beq.n	80074a2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2204      	movs	r2, #4
 8007490:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2280      	movs	r2, #128	; 0x80
 8007496:	589b      	ldr	r3, [r3, r2]
 8007498:	2202      	movs	r2, #2
 800749a:	431a      	orrs	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2180      	movs	r1, #128	; 0x80
 80074a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074a2:	23a4      	movs	r3, #164	; 0xa4
 80074a4:	18fb      	adds	r3, r7, r3
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2208      	movs	r2, #8
 80074aa:	4013      	ands	r3, r2
 80074ac:	d017      	beq.n	80074de <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80074ae:	23a0      	movs	r3, #160	; 0xa0
 80074b0:	18fb      	adds	r3, r7, r3
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2220      	movs	r2, #32
 80074b6:	4013      	ands	r3, r2
 80074b8:	d105      	bne.n	80074c6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80074ba:	239c      	movs	r3, #156	; 0x9c
 80074bc:	18fb      	adds	r3, r7, r3
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2201      	movs	r2, #1
 80074c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80074c4:	d00b      	beq.n	80074de <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2208      	movs	r2, #8
 80074cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2280      	movs	r2, #128	; 0x80
 80074d2:	589b      	ldr	r3, [r3, r2]
 80074d4:	2208      	movs	r2, #8
 80074d6:	431a      	orrs	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2180      	movs	r1, #128	; 0x80
 80074dc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80074de:	23a4      	movs	r3, #164	; 0xa4
 80074e0:	18fb      	adds	r3, r7, r3
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	2380      	movs	r3, #128	; 0x80
 80074e6:	011b      	lsls	r3, r3, #4
 80074e8:	4013      	ands	r3, r2
 80074ea:	d013      	beq.n	8007514 <HAL_UART_IRQHandler+0x198>
 80074ec:	23a0      	movs	r3, #160	; 0xa0
 80074ee:	18fb      	adds	r3, r7, r3
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	2380      	movs	r3, #128	; 0x80
 80074f4:	04db      	lsls	r3, r3, #19
 80074f6:	4013      	ands	r3, r2
 80074f8:	d00c      	beq.n	8007514 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2280      	movs	r2, #128	; 0x80
 8007500:	0112      	lsls	r2, r2, #4
 8007502:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2280      	movs	r2, #128	; 0x80
 8007508:	589b      	ldr	r3, [r3, r2]
 800750a:	2220      	movs	r2, #32
 800750c:	431a      	orrs	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2180      	movs	r1, #128	; 0x80
 8007512:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2280      	movs	r2, #128	; 0x80
 8007518:	589b      	ldr	r3, [r3, r2]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d100      	bne.n	8007520 <HAL_UART_IRQHandler+0x1a4>
 800751e:	e1f7      	b.n	8007910 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007520:	23a4      	movs	r3, #164	; 0xa4
 8007522:	18fb      	adds	r3, r7, r3
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2220      	movs	r2, #32
 8007528:	4013      	ands	r3, r2
 800752a:	d00e      	beq.n	800754a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800752c:	23a0      	movs	r3, #160	; 0xa0
 800752e:	18fb      	adds	r3, r7, r3
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2220      	movs	r2, #32
 8007534:	4013      	ands	r3, r2
 8007536:	d008      	beq.n	800754a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800753c:	2b00      	cmp	r3, #0
 800753e:	d004      	beq.n	800754a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	0010      	movs	r0, r2
 8007548:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2280      	movs	r2, #128	; 0x80
 800754e:	589b      	ldr	r3, [r3, r2]
 8007550:	2194      	movs	r1, #148	; 0x94
 8007552:	187a      	adds	r2, r7, r1
 8007554:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	2240      	movs	r2, #64	; 0x40
 800755e:	4013      	ands	r3, r2
 8007560:	2b40      	cmp	r3, #64	; 0x40
 8007562:	d004      	beq.n	800756e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007564:	187b      	adds	r3, r7, r1
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2228      	movs	r2, #40	; 0x28
 800756a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800756c:	d047      	beq.n	80075fe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	0018      	movs	r0, r3
 8007572:	f000 fd3f 	bl	8007ff4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	2240      	movs	r2, #64	; 0x40
 800757e:	4013      	ands	r3, r2
 8007580:	2b40      	cmp	r3, #64	; 0x40
 8007582:	d137      	bne.n	80075f4 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007584:	f3ef 8310 	mrs	r3, PRIMASK
 8007588:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800758a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800758c:	2090      	movs	r0, #144	; 0x90
 800758e:	183a      	adds	r2, r7, r0
 8007590:	6013      	str	r3, [r2, #0]
 8007592:	2301      	movs	r3, #1
 8007594:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007596:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007598:	f383 8810 	msr	PRIMASK, r3
}
 800759c:	46c0      	nop			; (mov r8, r8)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2140      	movs	r1, #64	; 0x40
 80075aa:	438a      	bics	r2, r1
 80075ac:	609a      	str	r2, [r3, #8]
 80075ae:	183b      	adds	r3, r7, r0
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075b6:	f383 8810 	msr	PRIMASK, r3
}
 80075ba:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d012      	beq.n	80075ea <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c8:	4a14      	ldr	r2, [pc, #80]	; (800761c <HAL_UART_IRQHandler+0x2a0>)
 80075ca:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d0:	0018      	movs	r0, r3
 80075d2:	f7fb fc87 	bl	8002ee4 <HAL_DMA_Abort_IT>
 80075d6:	1e03      	subs	r3, r0, #0
 80075d8:	d01a      	beq.n	8007610 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e4:	0018      	movs	r0, r3
 80075e6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e8:	e012      	b.n	8007610 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	0018      	movs	r0, r3
 80075ee:	f000 f9a5 	bl	800793c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f2:	e00d      	b.n	8007610 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	0018      	movs	r0, r3
 80075f8:	f000 f9a0 	bl	800793c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075fc:	e008      	b.n	8007610 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	0018      	movs	r0, r3
 8007602:	f000 f99b 	bl	800793c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2280      	movs	r2, #128	; 0x80
 800760a:	2100      	movs	r1, #0
 800760c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800760e:	e17f      	b.n	8007910 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007610:	46c0      	nop			; (mov r8, r8)
    return;
 8007612:	e17d      	b.n	8007910 <HAL_UART_IRQHandler+0x594>
 8007614:	0000080f 	.word	0x0000080f
 8007618:	04000120 	.word	0x04000120
 800761c:	080080b9 	.word	0x080080b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007624:	2b01      	cmp	r3, #1
 8007626:	d000      	beq.n	800762a <HAL_UART_IRQHandler+0x2ae>
 8007628:	e131      	b.n	800788e <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800762a:	23a4      	movs	r3, #164	; 0xa4
 800762c:	18fb      	adds	r3, r7, r3
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2210      	movs	r2, #16
 8007632:	4013      	ands	r3, r2
 8007634:	d100      	bne.n	8007638 <HAL_UART_IRQHandler+0x2bc>
 8007636:	e12a      	b.n	800788e <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007638:	23a0      	movs	r3, #160	; 0xa0
 800763a:	18fb      	adds	r3, r7, r3
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2210      	movs	r2, #16
 8007640:	4013      	ands	r3, r2
 8007642:	d100      	bne.n	8007646 <HAL_UART_IRQHandler+0x2ca>
 8007644:	e123      	b.n	800788e <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2210      	movs	r2, #16
 800764c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	2240      	movs	r2, #64	; 0x40
 8007656:	4013      	ands	r3, r2
 8007658:	2b40      	cmp	r3, #64	; 0x40
 800765a:	d000      	beq.n	800765e <HAL_UART_IRQHandler+0x2e2>
 800765c:	e09b      	b.n	8007796 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	217e      	movs	r1, #126	; 0x7e
 8007668:	187b      	adds	r3, r7, r1
 800766a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800766c:	187b      	adds	r3, r7, r1
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d100      	bne.n	8007676 <HAL_UART_IRQHandler+0x2fa>
 8007674:	e14e      	b.n	8007914 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2258      	movs	r2, #88	; 0x58
 800767a:	5a9b      	ldrh	r3, [r3, r2]
 800767c:	187a      	adds	r2, r7, r1
 800767e:	8812      	ldrh	r2, [r2, #0]
 8007680:	429a      	cmp	r2, r3
 8007682:	d300      	bcc.n	8007686 <HAL_UART_IRQHandler+0x30a>
 8007684:	e146      	b.n	8007914 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	187a      	adds	r2, r7, r1
 800768a:	215a      	movs	r1, #90	; 0x5a
 800768c:	8812      	ldrh	r2, [r2, #0]
 800768e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	2b20      	cmp	r3, #32
 8007698:	d06e      	beq.n	8007778 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800769a:	f3ef 8310 	mrs	r3, PRIMASK
 800769e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80076a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80076a4:	2301      	movs	r3, #1
 80076a6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076aa:	f383 8810 	msr	PRIMASK, r3
}
 80076ae:	46c0      	nop			; (mov r8, r8)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	499a      	ldr	r1, [pc, #616]	; (8007924 <HAL_UART_IRQHandler+0x5a8>)
 80076bc:	400a      	ands	r2, r1
 80076be:	601a      	str	r2, [r3, #0]
 80076c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076c2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c6:	f383 8810 	msr	PRIMASK, r3
}
 80076ca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076cc:	f3ef 8310 	mrs	r3, PRIMASK
 80076d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80076d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d4:	677b      	str	r3, [r7, #116]	; 0x74
 80076d6:	2301      	movs	r3, #1
 80076d8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076dc:	f383 8810 	msr	PRIMASK, r3
}
 80076e0:	46c0      	nop			; (mov r8, r8)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	689a      	ldr	r2, [r3, #8]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2101      	movs	r1, #1
 80076ee:	438a      	bics	r2, r1
 80076f0:	609a      	str	r2, [r3, #8]
 80076f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076f4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076f8:	f383 8810 	msr	PRIMASK, r3
}
 80076fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076fe:	f3ef 8310 	mrs	r3, PRIMASK
 8007702:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007704:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007706:	673b      	str	r3, [r7, #112]	; 0x70
 8007708:	2301      	movs	r3, #1
 800770a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800770c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800770e:	f383 8810 	msr	PRIMASK, r3
}
 8007712:	46c0      	nop			; (mov r8, r8)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	689a      	ldr	r2, [r3, #8]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2140      	movs	r1, #64	; 0x40
 8007720:	438a      	bics	r2, r1
 8007722:	609a      	str	r2, [r3, #8]
 8007724:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007726:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800772a:	f383 8810 	msr	PRIMASK, r3
}
 800772e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2220      	movs	r2, #32
 8007734:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800773c:	f3ef 8310 	mrs	r3, PRIMASK
 8007740:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007742:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007744:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007746:	2301      	movs	r3, #1
 8007748:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800774a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800774c:	f383 8810 	msr	PRIMASK, r3
}
 8007750:	46c0      	nop			; (mov r8, r8)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2110      	movs	r1, #16
 800775e:	438a      	bics	r2, r1
 8007760:	601a      	str	r2, [r3, #0]
 8007762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007764:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007768:	f383 8810 	msr	PRIMASK, r3
}
 800776c:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007772:	0018      	movs	r0, r3
 8007774:	f7fb fb7e 	bl	8002e74 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2258      	movs	r2, #88	; 0x58
 800777c:	5a9a      	ldrh	r2, [r3, r2]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	215a      	movs	r1, #90	; 0x5a
 8007782:	5a5b      	ldrh	r3, [r3, r1]
 8007784:	b29b      	uxth	r3, r3
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	b29a      	uxth	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	0011      	movs	r1, r2
 800778e:	0018      	movs	r0, r3
 8007790:	f000 f8dc 	bl	800794c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007794:	e0be      	b.n	8007914 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2258      	movs	r2, #88	; 0x58
 800779a:	5a99      	ldrh	r1, [r3, r2]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	225a      	movs	r2, #90	; 0x5a
 80077a0:	5a9b      	ldrh	r3, [r3, r2]
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	208e      	movs	r0, #142	; 0x8e
 80077a6:	183b      	adds	r3, r7, r0
 80077a8:	1a8a      	subs	r2, r1, r2
 80077aa:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	225a      	movs	r2, #90	; 0x5a
 80077b0:	5a9b      	ldrh	r3, [r3, r2]
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d100      	bne.n	80077ba <HAL_UART_IRQHandler+0x43e>
 80077b8:	e0ae      	b.n	8007918 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80077ba:	183b      	adds	r3, r7, r0
 80077bc:	881b      	ldrh	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d100      	bne.n	80077c4 <HAL_UART_IRQHandler+0x448>
 80077c2:	e0a9      	b.n	8007918 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077c4:	f3ef 8310 	mrs	r3, PRIMASK
 80077c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80077ca:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077cc:	2488      	movs	r4, #136	; 0x88
 80077ce:	193a      	adds	r2, r7, r4
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	2301      	movs	r3, #1
 80077d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	f383 8810 	msr	PRIMASK, r3
}
 80077dc:	46c0      	nop			; (mov r8, r8)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	494f      	ldr	r1, [pc, #316]	; (8007928 <HAL_UART_IRQHandler+0x5ac>)
 80077ea:	400a      	ands	r2, r1
 80077ec:	601a      	str	r2, [r3, #0]
 80077ee:	193b      	adds	r3, r7, r4
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f383 8810 	msr	PRIMASK, r3
}
 80077fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077fc:	f3ef 8310 	mrs	r3, PRIMASK
 8007800:	61bb      	str	r3, [r7, #24]
  return(result);
 8007802:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007804:	2484      	movs	r4, #132	; 0x84
 8007806:	193a      	adds	r2, r7, r4
 8007808:	6013      	str	r3, [r2, #0]
 800780a:	2301      	movs	r3, #1
 800780c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	f383 8810 	msr	PRIMASK, r3
}
 8007814:	46c0      	nop			; (mov r8, r8)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	689a      	ldr	r2, [r3, #8]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2101      	movs	r1, #1
 8007822:	438a      	bics	r2, r1
 8007824:	609a      	str	r2, [r3, #8]
 8007826:	193b      	adds	r3, r7, r4
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	f383 8810 	msr	PRIMASK, r3
}
 8007832:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2220      	movs	r2, #32
 8007838:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007846:	f3ef 8310 	mrs	r3, PRIMASK
 800784a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800784e:	2480      	movs	r4, #128	; 0x80
 8007850:	193a      	adds	r2, r7, r4
 8007852:	6013      	str	r3, [r2, #0]
 8007854:	2301      	movs	r3, #1
 8007856:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785a:	f383 8810 	msr	PRIMASK, r3
}
 800785e:	46c0      	nop			; (mov r8, r8)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2110      	movs	r1, #16
 800786c:	438a      	bics	r2, r1
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	193b      	adds	r3, r7, r4
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007878:	f383 8810 	msr	PRIMASK, r3
}
 800787c:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800787e:	183b      	adds	r3, r7, r0
 8007880:	881a      	ldrh	r2, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	0011      	movs	r1, r2
 8007886:	0018      	movs	r0, r3
 8007888:	f000 f860 	bl	800794c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800788c:	e044      	b.n	8007918 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800788e:	23a4      	movs	r3, #164	; 0xa4
 8007890:	18fb      	adds	r3, r7, r3
 8007892:	681a      	ldr	r2, [r3, #0]
 8007894:	2380      	movs	r3, #128	; 0x80
 8007896:	035b      	lsls	r3, r3, #13
 8007898:	4013      	ands	r3, r2
 800789a:	d010      	beq.n	80078be <HAL_UART_IRQHandler+0x542>
 800789c:	239c      	movs	r3, #156	; 0x9c
 800789e:	18fb      	adds	r3, r7, r3
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	2380      	movs	r3, #128	; 0x80
 80078a4:	03db      	lsls	r3, r3, #15
 80078a6:	4013      	ands	r3, r2
 80078a8:	d009      	beq.n	80078be <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2280      	movs	r2, #128	; 0x80
 80078b0:	0352      	lsls	r2, r2, #13
 80078b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	0018      	movs	r0, r3
 80078b8:	f000 fc40 	bl	800813c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078bc:	e02f      	b.n	800791e <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80078be:	23a4      	movs	r3, #164	; 0xa4
 80078c0:	18fb      	adds	r3, r7, r3
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2280      	movs	r2, #128	; 0x80
 80078c6:	4013      	ands	r3, r2
 80078c8:	d00f      	beq.n	80078ea <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80078ca:	23a0      	movs	r3, #160	; 0xa0
 80078cc:	18fb      	adds	r3, r7, r3
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2280      	movs	r2, #128	; 0x80
 80078d2:	4013      	ands	r3, r2
 80078d4:	d009      	beq.n	80078ea <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d01e      	beq.n	800791c <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	0010      	movs	r0, r2
 80078e6:	4798      	blx	r3
    }
    return;
 80078e8:	e018      	b.n	800791c <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80078ea:	23a4      	movs	r3, #164	; 0xa4
 80078ec:	18fb      	adds	r3, r7, r3
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2240      	movs	r2, #64	; 0x40
 80078f2:	4013      	ands	r3, r2
 80078f4:	d013      	beq.n	800791e <HAL_UART_IRQHandler+0x5a2>
 80078f6:	23a0      	movs	r3, #160	; 0xa0
 80078f8:	18fb      	adds	r3, r7, r3
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2240      	movs	r2, #64	; 0x40
 80078fe:	4013      	ands	r3, r2
 8007900:	d00d      	beq.n	800791e <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	0018      	movs	r0, r3
 8007906:	f000 fbee 	bl	80080e6 <UART_EndTransmit_IT>
    return;
 800790a:	e008      	b.n	800791e <HAL_UART_IRQHandler+0x5a2>
      return;
 800790c:	46c0      	nop			; (mov r8, r8)
 800790e:	e006      	b.n	800791e <HAL_UART_IRQHandler+0x5a2>
    return;
 8007910:	46c0      	nop			; (mov r8, r8)
 8007912:	e004      	b.n	800791e <HAL_UART_IRQHandler+0x5a2>
      return;
 8007914:	46c0      	nop			; (mov r8, r8)
 8007916:	e002      	b.n	800791e <HAL_UART_IRQHandler+0x5a2>
      return;
 8007918:	46c0      	nop			; (mov r8, r8)
 800791a:	e000      	b.n	800791e <HAL_UART_IRQHandler+0x5a2>
    return;
 800791c:	46c0      	nop			; (mov r8, r8)
  }

}
 800791e:	46bd      	mov	sp, r7
 8007920:	b02b      	add	sp, #172	; 0xac
 8007922:	bd90      	pop	{r4, r7, pc}
 8007924:	fffffeff 	.word	0xfffffeff
 8007928:	fffffedf 	.word	0xfffffedf

0800792c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007934:	46c0      	nop			; (mov r8, r8)
 8007936:	46bd      	mov	sp, r7
 8007938:	b002      	add	sp, #8
 800793a:	bd80      	pop	{r7, pc}

0800793c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007944:	46c0      	nop			; (mov r8, r8)
 8007946:	46bd      	mov	sp, r7
 8007948:	b002      	add	sp, #8
 800794a:	bd80      	pop	{r7, pc}

0800794c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	000a      	movs	r2, r1
 8007956:	1cbb      	adds	r3, r7, #2
 8007958:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800795a:	46c0      	nop			; (mov r8, r8)
 800795c:	46bd      	mov	sp, r7
 800795e:	b002      	add	sp, #8
 8007960:	bd80      	pop	{r7, pc}
	...

08007964 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b088      	sub	sp, #32
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800796c:	231e      	movs	r3, #30
 800796e:	18fb      	adds	r3, r7, r3
 8007970:	2200      	movs	r2, #0
 8007972:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	689a      	ldr	r2, [r3, #8]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	431a      	orrs	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	431a      	orrs	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	69db      	ldr	r3, [r3, #28]
 8007988:	4313      	orrs	r3, r2
 800798a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4aaf      	ldr	r2, [pc, #700]	; (8007c50 <UART_SetConfig+0x2ec>)
 8007994:	4013      	ands	r3, r2
 8007996:	0019      	movs	r1, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	697a      	ldr	r2, [r7, #20]
 800799e:	430a      	orrs	r2, r1
 80079a0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	4aaa      	ldr	r2, [pc, #680]	; (8007c54 <UART_SetConfig+0x2f0>)
 80079aa:	4013      	ands	r3, r2
 80079ac:	0019      	movs	r1, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	68da      	ldr	r2, [r3, #12]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a1b      	ldr	r3, [r3, #32]
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	4aa1      	ldr	r2, [pc, #644]	; (8007c58 <UART_SetConfig+0x2f4>)
 80079d2:	4013      	ands	r3, r2
 80079d4:	0019      	movs	r1, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	430a      	orrs	r2, r1
 80079de:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a9d      	ldr	r2, [pc, #628]	; (8007c5c <UART_SetConfig+0x2f8>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d127      	bne.n	8007a3a <UART_SetConfig+0xd6>
 80079ea:	4b9d      	ldr	r3, [pc, #628]	; (8007c60 <UART_SetConfig+0x2fc>)
 80079ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ee:	2203      	movs	r2, #3
 80079f0:	4013      	ands	r3, r2
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d00d      	beq.n	8007a12 <UART_SetConfig+0xae>
 80079f6:	d81b      	bhi.n	8007a30 <UART_SetConfig+0xcc>
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d014      	beq.n	8007a26 <UART_SetConfig+0xc2>
 80079fc:	d818      	bhi.n	8007a30 <UART_SetConfig+0xcc>
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d002      	beq.n	8007a08 <UART_SetConfig+0xa4>
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d00a      	beq.n	8007a1c <UART_SetConfig+0xb8>
 8007a06:	e013      	b.n	8007a30 <UART_SetConfig+0xcc>
 8007a08:	231f      	movs	r3, #31
 8007a0a:	18fb      	adds	r3, r7, r3
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	701a      	strb	r2, [r3, #0]
 8007a10:	e065      	b.n	8007ade <UART_SetConfig+0x17a>
 8007a12:	231f      	movs	r3, #31
 8007a14:	18fb      	adds	r3, r7, r3
 8007a16:	2202      	movs	r2, #2
 8007a18:	701a      	strb	r2, [r3, #0]
 8007a1a:	e060      	b.n	8007ade <UART_SetConfig+0x17a>
 8007a1c:	231f      	movs	r3, #31
 8007a1e:	18fb      	adds	r3, r7, r3
 8007a20:	2204      	movs	r2, #4
 8007a22:	701a      	strb	r2, [r3, #0]
 8007a24:	e05b      	b.n	8007ade <UART_SetConfig+0x17a>
 8007a26:	231f      	movs	r3, #31
 8007a28:	18fb      	adds	r3, r7, r3
 8007a2a:	2208      	movs	r2, #8
 8007a2c:	701a      	strb	r2, [r3, #0]
 8007a2e:	e056      	b.n	8007ade <UART_SetConfig+0x17a>
 8007a30:	231f      	movs	r3, #31
 8007a32:	18fb      	adds	r3, r7, r3
 8007a34:	2210      	movs	r2, #16
 8007a36:	701a      	strb	r2, [r3, #0]
 8007a38:	e051      	b.n	8007ade <UART_SetConfig+0x17a>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a89      	ldr	r2, [pc, #548]	; (8007c64 <UART_SetConfig+0x300>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d134      	bne.n	8007aae <UART_SetConfig+0x14a>
 8007a44:	4b86      	ldr	r3, [pc, #536]	; (8007c60 <UART_SetConfig+0x2fc>)
 8007a46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a48:	23c0      	movs	r3, #192	; 0xc0
 8007a4a:	029b      	lsls	r3, r3, #10
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	22c0      	movs	r2, #192	; 0xc0
 8007a50:	0292      	lsls	r2, r2, #10
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d017      	beq.n	8007a86 <UART_SetConfig+0x122>
 8007a56:	22c0      	movs	r2, #192	; 0xc0
 8007a58:	0292      	lsls	r2, r2, #10
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d822      	bhi.n	8007aa4 <UART_SetConfig+0x140>
 8007a5e:	2280      	movs	r2, #128	; 0x80
 8007a60:	0292      	lsls	r2, r2, #10
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d019      	beq.n	8007a9a <UART_SetConfig+0x136>
 8007a66:	2280      	movs	r2, #128	; 0x80
 8007a68:	0292      	lsls	r2, r2, #10
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d81a      	bhi.n	8007aa4 <UART_SetConfig+0x140>
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d004      	beq.n	8007a7c <UART_SetConfig+0x118>
 8007a72:	2280      	movs	r2, #128	; 0x80
 8007a74:	0252      	lsls	r2, r2, #9
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d00a      	beq.n	8007a90 <UART_SetConfig+0x12c>
 8007a7a:	e013      	b.n	8007aa4 <UART_SetConfig+0x140>
 8007a7c:	231f      	movs	r3, #31
 8007a7e:	18fb      	adds	r3, r7, r3
 8007a80:	2200      	movs	r2, #0
 8007a82:	701a      	strb	r2, [r3, #0]
 8007a84:	e02b      	b.n	8007ade <UART_SetConfig+0x17a>
 8007a86:	231f      	movs	r3, #31
 8007a88:	18fb      	adds	r3, r7, r3
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	701a      	strb	r2, [r3, #0]
 8007a8e:	e026      	b.n	8007ade <UART_SetConfig+0x17a>
 8007a90:	231f      	movs	r3, #31
 8007a92:	18fb      	adds	r3, r7, r3
 8007a94:	2204      	movs	r2, #4
 8007a96:	701a      	strb	r2, [r3, #0]
 8007a98:	e021      	b.n	8007ade <UART_SetConfig+0x17a>
 8007a9a:	231f      	movs	r3, #31
 8007a9c:	18fb      	adds	r3, r7, r3
 8007a9e:	2208      	movs	r2, #8
 8007aa0:	701a      	strb	r2, [r3, #0]
 8007aa2:	e01c      	b.n	8007ade <UART_SetConfig+0x17a>
 8007aa4:	231f      	movs	r3, #31
 8007aa6:	18fb      	adds	r3, r7, r3
 8007aa8:	2210      	movs	r2, #16
 8007aaa:	701a      	strb	r2, [r3, #0]
 8007aac:	e017      	b.n	8007ade <UART_SetConfig+0x17a>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a6d      	ldr	r2, [pc, #436]	; (8007c68 <UART_SetConfig+0x304>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d104      	bne.n	8007ac2 <UART_SetConfig+0x15e>
 8007ab8:	231f      	movs	r3, #31
 8007aba:	18fb      	adds	r3, r7, r3
 8007abc:	2200      	movs	r2, #0
 8007abe:	701a      	strb	r2, [r3, #0]
 8007ac0:	e00d      	b.n	8007ade <UART_SetConfig+0x17a>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a69      	ldr	r2, [pc, #420]	; (8007c6c <UART_SetConfig+0x308>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d104      	bne.n	8007ad6 <UART_SetConfig+0x172>
 8007acc:	231f      	movs	r3, #31
 8007ace:	18fb      	adds	r3, r7, r3
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	701a      	strb	r2, [r3, #0]
 8007ad4:	e003      	b.n	8007ade <UART_SetConfig+0x17a>
 8007ad6:	231f      	movs	r3, #31
 8007ad8:	18fb      	adds	r3, r7, r3
 8007ada:	2210      	movs	r2, #16
 8007adc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	69da      	ldr	r2, [r3, #28]
 8007ae2:	2380      	movs	r3, #128	; 0x80
 8007ae4:	021b      	lsls	r3, r3, #8
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d15d      	bne.n	8007ba6 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8007aea:	231f      	movs	r3, #31
 8007aec:	18fb      	adds	r3, r7, r3
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	d015      	beq.n	8007b20 <UART_SetConfig+0x1bc>
 8007af4:	dc18      	bgt.n	8007b28 <UART_SetConfig+0x1c4>
 8007af6:	2b04      	cmp	r3, #4
 8007af8:	d00d      	beq.n	8007b16 <UART_SetConfig+0x1b2>
 8007afa:	dc15      	bgt.n	8007b28 <UART_SetConfig+0x1c4>
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <UART_SetConfig+0x1a2>
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d005      	beq.n	8007b10 <UART_SetConfig+0x1ac>
 8007b04:	e010      	b.n	8007b28 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b06:	f7fe f865 	bl	8005bd4 <HAL_RCC_GetPCLK1Freq>
 8007b0a:	0003      	movs	r3, r0
 8007b0c:	61bb      	str	r3, [r7, #24]
        break;
 8007b0e:	e012      	b.n	8007b36 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b10:	4b57      	ldr	r3, [pc, #348]	; (8007c70 <UART_SetConfig+0x30c>)
 8007b12:	61bb      	str	r3, [r7, #24]
        break;
 8007b14:	e00f      	b.n	8007b36 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b16:	f7fd ffd1 	bl	8005abc <HAL_RCC_GetSysClockFreq>
 8007b1a:	0003      	movs	r3, r0
 8007b1c:	61bb      	str	r3, [r7, #24]
        break;
 8007b1e:	e00a      	b.n	8007b36 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b20:	2380      	movs	r3, #128	; 0x80
 8007b22:	021b      	lsls	r3, r3, #8
 8007b24:	61bb      	str	r3, [r7, #24]
        break;
 8007b26:	e006      	b.n	8007b36 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b2c:	231e      	movs	r3, #30
 8007b2e:	18fb      	adds	r3, r7, r3
 8007b30:	2201      	movs	r2, #1
 8007b32:	701a      	strb	r2, [r3, #0]
        break;
 8007b34:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d100      	bne.n	8007b3e <UART_SetConfig+0x1da>
 8007b3c:	e07b      	b.n	8007c36 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	005a      	lsls	r2, r3, #1
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	085b      	lsrs	r3, r3, #1
 8007b48:	18d2      	adds	r2, r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	0019      	movs	r1, r3
 8007b50:	0010      	movs	r0, r2
 8007b52:	f7f8 faeb 	bl	800012c <__udivsi3>
 8007b56:	0003      	movs	r3, r0
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	2b0f      	cmp	r3, #15
 8007b60:	d91c      	bls.n	8007b9c <UART_SetConfig+0x238>
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	2380      	movs	r3, #128	; 0x80
 8007b66:	025b      	lsls	r3, r3, #9
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d217      	bcs.n	8007b9c <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	200e      	movs	r0, #14
 8007b72:	183b      	adds	r3, r7, r0
 8007b74:	210f      	movs	r1, #15
 8007b76:	438a      	bics	r2, r1
 8007b78:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	085b      	lsrs	r3, r3, #1
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	2207      	movs	r2, #7
 8007b82:	4013      	ands	r3, r2
 8007b84:	b299      	uxth	r1, r3
 8007b86:	183b      	adds	r3, r7, r0
 8007b88:	183a      	adds	r2, r7, r0
 8007b8a:	8812      	ldrh	r2, [r2, #0]
 8007b8c:	430a      	orrs	r2, r1
 8007b8e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	183a      	adds	r2, r7, r0
 8007b96:	8812      	ldrh	r2, [r2, #0]
 8007b98:	60da      	str	r2, [r3, #12]
 8007b9a:	e04c      	b.n	8007c36 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8007b9c:	231e      	movs	r3, #30
 8007b9e:	18fb      	adds	r3, r7, r3
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	701a      	strb	r2, [r3, #0]
 8007ba4:	e047      	b.n	8007c36 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ba6:	231f      	movs	r3, #31
 8007ba8:	18fb      	adds	r3, r7, r3
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d015      	beq.n	8007bdc <UART_SetConfig+0x278>
 8007bb0:	dc18      	bgt.n	8007be4 <UART_SetConfig+0x280>
 8007bb2:	2b04      	cmp	r3, #4
 8007bb4:	d00d      	beq.n	8007bd2 <UART_SetConfig+0x26e>
 8007bb6:	dc15      	bgt.n	8007be4 <UART_SetConfig+0x280>
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d002      	beq.n	8007bc2 <UART_SetConfig+0x25e>
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d005      	beq.n	8007bcc <UART_SetConfig+0x268>
 8007bc0:	e010      	b.n	8007be4 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bc2:	f7fe f807 	bl	8005bd4 <HAL_RCC_GetPCLK1Freq>
 8007bc6:	0003      	movs	r3, r0
 8007bc8:	61bb      	str	r3, [r7, #24]
        break;
 8007bca:	e012      	b.n	8007bf2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bcc:	4b28      	ldr	r3, [pc, #160]	; (8007c70 <UART_SetConfig+0x30c>)
 8007bce:	61bb      	str	r3, [r7, #24]
        break;
 8007bd0:	e00f      	b.n	8007bf2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bd2:	f7fd ff73 	bl	8005abc <HAL_RCC_GetSysClockFreq>
 8007bd6:	0003      	movs	r3, r0
 8007bd8:	61bb      	str	r3, [r7, #24]
        break;
 8007bda:	e00a      	b.n	8007bf2 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bdc:	2380      	movs	r3, #128	; 0x80
 8007bde:	021b      	lsls	r3, r3, #8
 8007be0:	61bb      	str	r3, [r7, #24]
        break;
 8007be2:	e006      	b.n	8007bf2 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8007be4:	2300      	movs	r3, #0
 8007be6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007be8:	231e      	movs	r3, #30
 8007bea:	18fb      	adds	r3, r7, r3
 8007bec:	2201      	movs	r2, #1
 8007bee:	701a      	strb	r2, [r3, #0]
        break;
 8007bf0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d01e      	beq.n	8007c36 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	085a      	lsrs	r2, r3, #1
 8007bfe:	69bb      	ldr	r3, [r7, #24]
 8007c00:	18d2      	adds	r2, r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	0019      	movs	r1, r3
 8007c08:	0010      	movs	r0, r2
 8007c0a:	f7f8 fa8f 	bl	800012c <__udivsi3>
 8007c0e:	0003      	movs	r3, r0
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	2b0f      	cmp	r3, #15
 8007c18:	d909      	bls.n	8007c2e <UART_SetConfig+0x2ca>
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	2380      	movs	r3, #128	; 0x80
 8007c1e:	025b      	lsls	r3, r3, #9
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d204      	bcs.n	8007c2e <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	60da      	str	r2, [r3, #12]
 8007c2c:	e003      	b.n	8007c36 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8007c2e:	231e      	movs	r3, #30
 8007c30:	18fb      	adds	r3, r7, r3
 8007c32:	2201      	movs	r2, #1
 8007c34:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007c42:	231e      	movs	r3, #30
 8007c44:	18fb      	adds	r3, r7, r3
 8007c46:	781b      	ldrb	r3, [r3, #0]
}
 8007c48:	0018      	movs	r0, r3
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	b008      	add	sp, #32
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	efff69f3 	.word	0xefff69f3
 8007c54:	ffffcfff 	.word	0xffffcfff
 8007c58:	fffff4ff 	.word	0xfffff4ff
 8007c5c:	40013800 	.word	0x40013800
 8007c60:	40021000 	.word	0x40021000
 8007c64:	40004400 	.word	0x40004400
 8007c68:	40004800 	.word	0x40004800
 8007c6c:	40004c00 	.word	0x40004c00
 8007c70:	007a1200 	.word	0x007a1200

08007c74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c80:	2201      	movs	r2, #1
 8007c82:	4013      	ands	r3, r2
 8007c84:	d00b      	beq.n	8007c9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	4a4a      	ldr	r2, [pc, #296]	; (8007db8 <UART_AdvFeatureConfig+0x144>)
 8007c8e:	4013      	ands	r3, r2
 8007c90:	0019      	movs	r1, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	430a      	orrs	r2, r1
 8007c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca2:	2202      	movs	r2, #2
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	d00b      	beq.n	8007cc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	4a43      	ldr	r2, [pc, #268]	; (8007dbc <UART_AdvFeatureConfig+0x148>)
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	0019      	movs	r1, r3
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	430a      	orrs	r2, r1
 8007cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc4:	2204      	movs	r2, #4
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	d00b      	beq.n	8007ce2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	4a3b      	ldr	r2, [pc, #236]	; (8007dc0 <UART_AdvFeatureConfig+0x14c>)
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	0019      	movs	r1, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	430a      	orrs	r2, r1
 8007ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce6:	2208      	movs	r2, #8
 8007ce8:	4013      	ands	r3, r2
 8007cea:	d00b      	beq.n	8007d04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	4a34      	ldr	r2, [pc, #208]	; (8007dc4 <UART_AdvFeatureConfig+0x150>)
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	0019      	movs	r1, r3
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	430a      	orrs	r2, r1
 8007d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d08:	2210      	movs	r2, #16
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	d00b      	beq.n	8007d26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	4a2c      	ldr	r2, [pc, #176]	; (8007dc8 <UART_AdvFeatureConfig+0x154>)
 8007d16:	4013      	ands	r3, r2
 8007d18:	0019      	movs	r1, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	430a      	orrs	r2, r1
 8007d24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2a:	2220      	movs	r2, #32
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	d00b      	beq.n	8007d48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	4a25      	ldr	r2, [pc, #148]	; (8007dcc <UART_AdvFeatureConfig+0x158>)
 8007d38:	4013      	ands	r3, r2
 8007d3a:	0019      	movs	r1, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	430a      	orrs	r2, r1
 8007d46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4c:	2240      	movs	r2, #64	; 0x40
 8007d4e:	4013      	ands	r3, r2
 8007d50:	d01d      	beq.n	8007d8e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	4a1d      	ldr	r2, [pc, #116]	; (8007dd0 <UART_AdvFeatureConfig+0x15c>)
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	0019      	movs	r1, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	430a      	orrs	r2, r1
 8007d68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d6e:	2380      	movs	r3, #128	; 0x80
 8007d70:	035b      	lsls	r3, r3, #13
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d10b      	bne.n	8007d8e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	4a15      	ldr	r2, [pc, #84]	; (8007dd4 <UART_AdvFeatureConfig+0x160>)
 8007d7e:	4013      	ands	r3, r2
 8007d80:	0019      	movs	r1, r3
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	430a      	orrs	r2, r1
 8007d8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d92:	2280      	movs	r2, #128	; 0x80
 8007d94:	4013      	ands	r3, r2
 8007d96:	d00b      	beq.n	8007db0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	4a0e      	ldr	r2, [pc, #56]	; (8007dd8 <UART_AdvFeatureConfig+0x164>)
 8007da0:	4013      	ands	r3, r2
 8007da2:	0019      	movs	r1, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	430a      	orrs	r2, r1
 8007dae:	605a      	str	r2, [r3, #4]
  }
}
 8007db0:	46c0      	nop			; (mov r8, r8)
 8007db2:	46bd      	mov	sp, r7
 8007db4:	b002      	add	sp, #8
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	fffdffff 	.word	0xfffdffff
 8007dbc:	fffeffff 	.word	0xfffeffff
 8007dc0:	fffbffff 	.word	0xfffbffff
 8007dc4:	ffff7fff 	.word	0xffff7fff
 8007dc8:	ffffefff 	.word	0xffffefff
 8007dcc:	ffffdfff 	.word	0xffffdfff
 8007dd0:	ffefffff 	.word	0xffefffff
 8007dd4:	ff9fffff 	.word	0xff9fffff
 8007dd8:	fff7ffff 	.word	0xfff7ffff

08007ddc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af02      	add	r7, sp, #8
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2280      	movs	r2, #128	; 0x80
 8007de8:	2100      	movs	r1, #0
 8007dea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007dec:	f7fa faa0 	bl	8002330 <HAL_GetTick>
 8007df0:	0003      	movs	r3, r0
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2208      	movs	r2, #8
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	2b08      	cmp	r3, #8
 8007e00:	d10c      	bne.n	8007e1c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2280      	movs	r2, #128	; 0x80
 8007e06:	0391      	lsls	r1, r2, #14
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	4a17      	ldr	r2, [pc, #92]	; (8007e68 <UART_CheckIdleState+0x8c>)
 8007e0c:	9200      	str	r2, [sp, #0]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f000 f82c 	bl	8007e6c <UART_WaitOnFlagUntilTimeout>
 8007e14:	1e03      	subs	r3, r0, #0
 8007e16:	d001      	beq.n	8007e1c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	e021      	b.n	8007e60 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2204      	movs	r2, #4
 8007e24:	4013      	ands	r3, r2
 8007e26:	2b04      	cmp	r3, #4
 8007e28:	d10c      	bne.n	8007e44 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2280      	movs	r2, #128	; 0x80
 8007e2e:	03d1      	lsls	r1, r2, #15
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	4a0d      	ldr	r2, [pc, #52]	; (8007e68 <UART_CheckIdleState+0x8c>)
 8007e34:	9200      	str	r2, [sp, #0]
 8007e36:	2200      	movs	r2, #0
 8007e38:	f000 f818 	bl	8007e6c <UART_WaitOnFlagUntilTimeout>
 8007e3c:	1e03      	subs	r3, r0, #0
 8007e3e:	d001      	beq.n	8007e44 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e00d      	b.n	8007e60 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2220      	movs	r2, #32
 8007e48:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2220      	movs	r2, #32
 8007e4e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2274      	movs	r2, #116	; 0x74
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	0018      	movs	r0, r3
 8007e62:	46bd      	mov	sp, r7
 8007e64:	b004      	add	sp, #16
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	01ffffff 	.word	0x01ffffff

08007e6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b094      	sub	sp, #80	; 0x50
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	603b      	str	r3, [r7, #0]
 8007e78:	1dfb      	adds	r3, r7, #7
 8007e7a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e7c:	e0a3      	b.n	8007fc6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e80:	3301      	adds	r3, #1
 8007e82:	d100      	bne.n	8007e86 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007e84:	e09f      	b.n	8007fc6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e86:	f7fa fa53 	bl	8002330 <HAL_GetTick>
 8007e8a:	0002      	movs	r2, r0
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d302      	bcc.n	8007e9c <UART_WaitOnFlagUntilTimeout+0x30>
 8007e96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d13d      	bne.n	8007f18 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8007ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ea4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eac:	f383 8810 	msr	PRIMASK, r3
}
 8007eb0:	46c0      	nop			; (mov r8, r8)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	494c      	ldr	r1, [pc, #304]	; (8007ff0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007ebe:	400a      	ands	r2, r1
 8007ec0:	601a      	str	r2, [r3, #0]
 8007ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ec4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec8:	f383 8810 	msr	PRIMASK, r3
}
 8007ecc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ece:	f3ef 8310 	mrs	r3, PRIMASK
 8007ed2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ed6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ed8:	2301      	movs	r3, #1
 8007eda:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ede:	f383 8810 	msr	PRIMASK, r3
}
 8007ee2:	46c0      	nop			; (mov r8, r8)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	689a      	ldr	r2, [r3, #8]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2101      	movs	r1, #1
 8007ef0:	438a      	bics	r2, r1
 8007ef2:	609a      	str	r2, [r3, #8]
 8007ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007efa:	f383 8810 	msr	PRIMASK, r3
}
 8007efe:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2220      	movs	r2, #32
 8007f04:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2274      	movs	r2, #116	; 0x74
 8007f10:	2100      	movs	r1, #0
 8007f12:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e067      	b.n	8007fe8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2204      	movs	r2, #4
 8007f20:	4013      	ands	r3, r2
 8007f22:	d050      	beq.n	8007fc6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	69da      	ldr	r2, [r3, #28]
 8007f2a:	2380      	movs	r3, #128	; 0x80
 8007f2c:	011b      	lsls	r3, r3, #4
 8007f2e:	401a      	ands	r2, r3
 8007f30:	2380      	movs	r3, #128	; 0x80
 8007f32:	011b      	lsls	r3, r3, #4
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d146      	bne.n	8007fc6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2280      	movs	r2, #128	; 0x80
 8007f3e:	0112      	lsls	r2, r2, #4
 8007f40:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f42:	f3ef 8310 	mrs	r3, PRIMASK
 8007f46:	613b      	str	r3, [r7, #16]
  return(result);
 8007f48:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	f383 8810 	msr	PRIMASK, r3
}
 8007f56:	46c0      	nop			; (mov r8, r8)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681a      	ldr	r2, [r3, #0]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4923      	ldr	r1, [pc, #140]	; (8007ff0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007f64:	400a      	ands	r2, r1
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	f383 8810 	msr	PRIMASK, r3
}
 8007f72:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f74:	f3ef 8310 	mrs	r3, PRIMASK
 8007f78:	61fb      	str	r3, [r7, #28]
  return(result);
 8007f7a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f7e:	2301      	movs	r3, #1
 8007f80:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	f383 8810 	msr	PRIMASK, r3
}
 8007f88:	46c0      	nop			; (mov r8, r8)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	689a      	ldr	r2, [r3, #8]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2101      	movs	r1, #1
 8007f96:	438a      	bics	r2, r1
 8007f98:	609a      	str	r2, [r3, #8]
 8007f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f9c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa0:	f383 8810 	msr	PRIMASK, r3
}
 8007fa4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2220      	movs	r2, #32
 8007faa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2280      	movs	r2, #128	; 0x80
 8007fb6:	2120      	movs	r1, #32
 8007fb8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2274      	movs	r2, #116	; 0x74
 8007fbe:	2100      	movs	r1, #0
 8007fc0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e010      	b.n	8007fe8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	69db      	ldr	r3, [r3, #28]
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	4013      	ands	r3, r2
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	425a      	negs	r2, r3
 8007fd6:	4153      	adcs	r3, r2
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	001a      	movs	r2, r3
 8007fdc:	1dfb      	adds	r3, r7, #7
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d100      	bne.n	8007fe6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8007fe4:	e74b      	b.n	8007e7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	0018      	movs	r0, r3
 8007fea:	46bd      	mov	sp, r7
 8007fec:	b014      	add	sp, #80	; 0x50
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	fffffe5f 	.word	0xfffffe5f

08007ff4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b08e      	sub	sp, #56	; 0x38
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ffc:	f3ef 8310 	mrs	r3, PRIMASK
 8008000:	617b      	str	r3, [r7, #20]
  return(result);
 8008002:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008004:	637b      	str	r3, [r7, #52]	; 0x34
 8008006:	2301      	movs	r3, #1
 8008008:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	f383 8810 	msr	PRIMASK, r3
}
 8008010:	46c0      	nop			; (mov r8, r8)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4925      	ldr	r1, [pc, #148]	; (80080b4 <UART_EndRxTransfer+0xc0>)
 800801e:	400a      	ands	r2, r1
 8008020:	601a      	str	r2, [r3, #0]
 8008022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008024:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	f383 8810 	msr	PRIMASK, r3
}
 800802c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800802e:	f3ef 8310 	mrs	r3, PRIMASK
 8008032:	623b      	str	r3, [r7, #32]
  return(result);
 8008034:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008036:	633b      	str	r3, [r7, #48]	; 0x30
 8008038:	2301      	movs	r3, #1
 800803a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	f383 8810 	msr	PRIMASK, r3
}
 8008042:	46c0      	nop			; (mov r8, r8)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	689a      	ldr	r2, [r3, #8]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2101      	movs	r1, #1
 8008050:	438a      	bics	r2, r1
 8008052:	609a      	str	r2, [r3, #8]
 8008054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008056:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805a:	f383 8810 	msr	PRIMASK, r3
}
 800805e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008064:	2b01      	cmp	r3, #1
 8008066:	d118      	bne.n	800809a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008068:	f3ef 8310 	mrs	r3, PRIMASK
 800806c:	60bb      	str	r3, [r7, #8]
  return(result);
 800806e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008072:	2301      	movs	r3, #1
 8008074:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f383 8810 	msr	PRIMASK, r3
}
 800807c:	46c0      	nop			; (mov r8, r8)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2110      	movs	r1, #16
 800808a:	438a      	bics	r2, r1
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008090:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f383 8810 	msr	PRIMASK, r3
}
 8008098:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2220      	movs	r2, #32
 800809e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	665a      	str	r2, [r3, #100]	; 0x64
}
 80080ac:	46c0      	nop			; (mov r8, r8)
 80080ae:	46bd      	mov	sp, r7
 80080b0:	b00e      	add	sp, #56	; 0x38
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	fffffedf 	.word	0xfffffedf

080080b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	225a      	movs	r2, #90	; 0x5a
 80080ca:	2100      	movs	r1, #0
 80080cc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2252      	movs	r2, #82	; 0x52
 80080d2:	2100      	movs	r1, #0
 80080d4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	0018      	movs	r0, r3
 80080da:	f7ff fc2f 	bl	800793c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080de:	46c0      	nop			; (mov r8, r8)
 80080e0:	46bd      	mov	sp, r7
 80080e2:	b004      	add	sp, #16
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b086      	sub	sp, #24
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080ee:	f3ef 8310 	mrs	r3, PRIMASK
 80080f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80080f4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080f6:	617b      	str	r3, [r7, #20]
 80080f8:	2301      	movs	r3, #1
 80080fa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f383 8810 	msr	PRIMASK, r3
}
 8008102:	46c0      	nop			; (mov r8, r8)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2140      	movs	r1, #64	; 0x40
 8008110:	438a      	bics	r2, r1
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	f383 8810 	msr	PRIMASK, r3
}
 800811e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2220      	movs	r2, #32
 8008124:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	0018      	movs	r0, r3
 8008130:	f7ff fbfc 	bl	800792c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008134:	46c0      	nop			; (mov r8, r8)
 8008136:	46bd      	mov	sp, r7
 8008138:	b006      	add	sp, #24
 800813a:	bd80      	pop	{r7, pc}

0800813c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008144:	46c0      	nop			; (mov r8, r8)
 8008146:	46bd      	mov	sp, r7
 8008148:	b002      	add	sp, #8
 800814a:	bd80      	pop	{r7, pc}

0800814c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2244      	movs	r2, #68	; 0x44
 8008158:	2100      	movs	r1, #0
 800815a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800815c:	4b05      	ldr	r3, [pc, #20]	; (8008174 <USB_EnableGlobalInt+0x28>)
 800815e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	b299      	uxth	r1, r3
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2240      	movs	r2, #64	; 0x40
 8008168:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	0018      	movs	r0, r3
 800816e:	46bd      	mov	sp, r7
 8008170:	b004      	add	sp, #16
 8008172:	bd80      	pop	{r7, pc}
 8008174:	0000bf80 	.word	0x0000bf80

08008178 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008180:	4b09      	ldr	r3, [pc, #36]	; (80081a8 <USB_DisableGlobalInt+0x30>)
 8008182:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2240      	movs	r2, #64	; 0x40
 8008188:	5a9b      	ldrh	r3, [r3, r2]
 800818a:	b29b      	uxth	r3, r3
 800818c:	68fa      	ldr	r2, [r7, #12]
 800818e:	b292      	uxth	r2, r2
 8008190:	43d2      	mvns	r2, r2
 8008192:	b292      	uxth	r2, r2
 8008194:	4013      	ands	r3, r2
 8008196:	b299      	uxth	r1, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2240      	movs	r2, #64	; 0x40
 800819c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	0018      	movs	r0, r3
 80081a2:	46bd      	mov	sp, r7
 80081a4:	b004      	add	sp, #16
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	0000bf80 	.word	0x0000bf80

080081ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80081ac:	b084      	sub	sp, #16
 80081ae:	b590      	push	{r4, r7, lr}
 80081b0:	46c6      	mov	lr, r8
 80081b2:	b500      	push	{lr}
 80081b4:	b082      	sub	sp, #8
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	2004      	movs	r0, #4
 80081bc:	2410      	movs	r4, #16
 80081be:	46a4      	mov	ip, r4
 80081c0:	2408      	movs	r4, #8
 80081c2:	46a0      	mov	r8, r4
 80081c4:	44b8      	add	r8, r7
 80081c6:	44c4      	add	ip, r8
 80081c8:	4460      	add	r0, ip
 80081ca:	6001      	str	r1, [r0, #0]
 80081cc:	6042      	str	r2, [r0, #4]
 80081ce:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2240      	movs	r2, #64	; 0x40
 80081d4:	2101      	movs	r1, #1
 80081d6:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2240      	movs	r2, #64	; 0x40
 80081dc:	2100      	movs	r1, #0
 80081de:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2244      	movs	r2, #68	; 0x44
 80081e4:	2100      	movs	r1, #0
 80081e6:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2250      	movs	r2, #80	; 0x50
 80081ec:	2100      	movs	r1, #0
 80081ee:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	0018      	movs	r0, r3
 80081f4:	46bd      	mov	sp, r7
 80081f6:	b002      	add	sp, #8
 80081f8:	bc80      	pop	{r7}
 80081fa:	46b8      	mov	r8, r7
 80081fc:	bc90      	pop	{r4, r7}
 80081fe:	bc08      	pop	{r3}
 8008200:	b004      	add	sp, #16
 8008202:	4718      	bx	r3

08008204 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b09c      	sub	sp, #112	; 0x70
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800820e:	236f      	movs	r3, #111	; 0x6f
 8008210:	18fb      	adds	r3, r7, r3
 8008212:	2200      	movs	r2, #0
 8008214:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	18d3      	adds	r3, r2, r3
 8008220:	881b      	ldrh	r3, [r3, #0]
 8008222:	b29a      	uxth	r2, r3
 8008224:	236c      	movs	r3, #108	; 0x6c
 8008226:	18fb      	adds	r3, r7, r3
 8008228:	49cf      	ldr	r1, [pc, #828]	; (8008568 <USB_ActivateEndpoint+0x364>)
 800822a:	400a      	ands	r2, r1
 800822c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	78db      	ldrb	r3, [r3, #3]
 8008232:	2b03      	cmp	r3, #3
 8008234:	d017      	beq.n	8008266 <USB_ActivateEndpoint+0x62>
 8008236:	dc28      	bgt.n	800828a <USB_ActivateEndpoint+0x86>
 8008238:	2b02      	cmp	r3, #2
 800823a:	d00e      	beq.n	800825a <USB_ActivateEndpoint+0x56>
 800823c:	dc25      	bgt.n	800828a <USB_ActivateEndpoint+0x86>
 800823e:	2b00      	cmp	r3, #0
 8008240:	d002      	beq.n	8008248 <USB_ActivateEndpoint+0x44>
 8008242:	2b01      	cmp	r3, #1
 8008244:	d018      	beq.n	8008278 <USB_ActivateEndpoint+0x74>
 8008246:	e020      	b.n	800828a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008248:	226c      	movs	r2, #108	; 0x6c
 800824a:	18bb      	adds	r3, r7, r2
 800824c:	18ba      	adds	r2, r7, r2
 800824e:	8812      	ldrh	r2, [r2, #0]
 8008250:	2180      	movs	r1, #128	; 0x80
 8008252:	0089      	lsls	r1, r1, #2
 8008254:	430a      	orrs	r2, r1
 8008256:	801a      	strh	r2, [r3, #0]
      break;
 8008258:	e01c      	b.n	8008294 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800825a:	226c      	movs	r2, #108	; 0x6c
 800825c:	18bb      	adds	r3, r7, r2
 800825e:	18ba      	adds	r2, r7, r2
 8008260:	8812      	ldrh	r2, [r2, #0]
 8008262:	801a      	strh	r2, [r3, #0]
      break;
 8008264:	e016      	b.n	8008294 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008266:	226c      	movs	r2, #108	; 0x6c
 8008268:	18bb      	adds	r3, r7, r2
 800826a:	18ba      	adds	r2, r7, r2
 800826c:	8812      	ldrh	r2, [r2, #0]
 800826e:	21c0      	movs	r1, #192	; 0xc0
 8008270:	00c9      	lsls	r1, r1, #3
 8008272:	430a      	orrs	r2, r1
 8008274:	801a      	strh	r2, [r3, #0]
      break;
 8008276:	e00d      	b.n	8008294 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008278:	226c      	movs	r2, #108	; 0x6c
 800827a:	18bb      	adds	r3, r7, r2
 800827c:	18ba      	adds	r2, r7, r2
 800827e:	8812      	ldrh	r2, [r2, #0]
 8008280:	2180      	movs	r1, #128	; 0x80
 8008282:	00c9      	lsls	r1, r1, #3
 8008284:	430a      	orrs	r2, r1
 8008286:	801a      	strh	r2, [r3, #0]
      break;
 8008288:	e004      	b.n	8008294 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800828a:	236f      	movs	r3, #111	; 0x6f
 800828c:	18fb      	adds	r3, r7, r3
 800828e:	2201      	movs	r2, #1
 8008290:	701a      	strb	r2, [r3, #0]
      break;
 8008292:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	18d3      	adds	r3, r2, r3
 800829e:	226c      	movs	r2, #108	; 0x6c
 80082a0:	18ba      	adds	r2, r7, r2
 80082a2:	8812      	ldrh	r2, [r2, #0]
 80082a4:	49b1      	ldr	r1, [pc, #708]	; (800856c <USB_ActivateEndpoint+0x368>)
 80082a6:	430a      	orrs	r2, r1
 80082a8:	b292      	uxth	r2, r2
 80082aa:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	18d3      	adds	r3, r2, r3
 80082b6:	881b      	ldrh	r3, [r3, #0]
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	b21b      	sxth	r3, r3
 80082bc:	4aac      	ldr	r2, [pc, #688]	; (8008570 <USB_ActivateEndpoint+0x36c>)
 80082be:	4013      	ands	r3, r2
 80082c0:	b21a      	sxth	r2, r3
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	b21b      	sxth	r3, r3
 80082c8:	4313      	orrs	r3, r2
 80082ca:	b21a      	sxth	r2, r3
 80082cc:	2166      	movs	r1, #102	; 0x66
 80082ce:	187b      	adds	r3, r7, r1
 80082d0:	801a      	strh	r2, [r3, #0]
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	18d3      	adds	r3, r2, r3
 80082dc:	187a      	adds	r2, r7, r1
 80082de:	8812      	ldrh	r2, [r2, #0]
 80082e0:	49a2      	ldr	r1, [pc, #648]	; (800856c <USB_ActivateEndpoint+0x368>)
 80082e2:	430a      	orrs	r2, r1
 80082e4:	b292      	uxth	r2, r2
 80082e6:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	7b1b      	ldrb	r3, [r3, #12]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d000      	beq.n	80082f2 <USB_ActivateEndpoint+0xee>
 80082f0:	e150      	b.n	8008594 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	785b      	ldrb	r3, [r3, #1]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d100      	bne.n	80082fc <USB_ActivateEndpoint+0xf8>
 80082fa:	e07a      	b.n	80083f2 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	61bb      	str	r3, [r7, #24]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2250      	movs	r2, #80	; 0x50
 8008304:	5a9b      	ldrh	r3, [r3, r2]
 8008306:	b29b      	uxth	r3, r3
 8008308:	001a      	movs	r2, r3
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	189b      	adds	r3, r3, r2
 800830e:	61bb      	str	r3, [r7, #24]
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	00da      	lsls	r2, r3, #3
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	18d3      	adds	r3, r2, r3
 800831a:	2280      	movs	r2, #128	; 0x80
 800831c:	00d2      	lsls	r2, r2, #3
 800831e:	4694      	mov	ip, r2
 8008320:	4463      	add	r3, ip
 8008322:	617b      	str	r3, [r7, #20]
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	88db      	ldrh	r3, [r3, #6]
 8008328:	085b      	lsrs	r3, r3, #1
 800832a:	b29b      	uxth	r3, r3
 800832c:	18db      	adds	r3, r3, r3
 800832e:	b29a      	uxth	r2, r3
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	18d2      	adds	r2, r2, r3
 800833e:	2112      	movs	r1, #18
 8008340:	187b      	adds	r3, r7, r1
 8008342:	8812      	ldrh	r2, [r2, #0]
 8008344:	801a      	strh	r2, [r3, #0]
 8008346:	187b      	adds	r3, r7, r1
 8008348:	881b      	ldrh	r3, [r3, #0]
 800834a:	2240      	movs	r2, #64	; 0x40
 800834c:	4013      	ands	r3, r2
 800834e:	d016      	beq.n	800837e <USB_ActivateEndpoint+0x17a>
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	18d3      	adds	r3, r2, r3
 800835a:	881b      	ldrh	r3, [r3, #0]
 800835c:	b29a      	uxth	r2, r3
 800835e:	2010      	movs	r0, #16
 8008360:	183b      	adds	r3, r7, r0
 8008362:	4983      	ldr	r1, [pc, #524]	; (8008570 <USB_ActivateEndpoint+0x36c>)
 8008364:	400a      	ands	r2, r1
 8008366:	801a      	strh	r2, [r3, #0]
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	18d3      	adds	r3, r2, r3
 8008372:	183a      	adds	r2, r7, r0
 8008374:	8812      	ldrh	r2, [r2, #0]
 8008376:	497f      	ldr	r1, [pc, #508]	; (8008574 <USB_ActivateEndpoint+0x370>)
 8008378:	430a      	orrs	r2, r1
 800837a:	b292      	uxth	r2, r2
 800837c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	78db      	ldrb	r3, [r3, #3]
 8008382:	2b01      	cmp	r3, #1
 8008384:	d01d      	beq.n	80083c2 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	18d3      	adds	r3, r2, r3
 8008390:	881b      	ldrh	r3, [r3, #0]
 8008392:	b29a      	uxth	r2, r3
 8008394:	200c      	movs	r0, #12
 8008396:	183b      	adds	r3, r7, r0
 8008398:	4977      	ldr	r1, [pc, #476]	; (8008578 <USB_ActivateEndpoint+0x374>)
 800839a:	400a      	ands	r2, r1
 800839c:	801a      	strh	r2, [r3, #0]
 800839e:	183b      	adds	r3, r7, r0
 80083a0:	183a      	adds	r2, r7, r0
 80083a2:	8812      	ldrh	r2, [r2, #0]
 80083a4:	2120      	movs	r1, #32
 80083a6:	404a      	eors	r2, r1
 80083a8:	801a      	strh	r2, [r3, #0]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	18d3      	adds	r3, r2, r3
 80083b4:	183a      	adds	r2, r7, r0
 80083b6:	8812      	ldrh	r2, [r2, #0]
 80083b8:	496c      	ldr	r1, [pc, #432]	; (800856c <USB_ActivateEndpoint+0x368>)
 80083ba:	430a      	orrs	r2, r1
 80083bc:	b292      	uxth	r2, r2
 80083be:	801a      	strh	r2, [r3, #0]
 80083c0:	e27a      	b.n	80088b8 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083c2:	687a      	ldr	r2, [r7, #4]
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	18d3      	adds	r3, r2, r3
 80083cc:	881b      	ldrh	r3, [r3, #0]
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	200e      	movs	r0, #14
 80083d2:	183b      	adds	r3, r7, r0
 80083d4:	4968      	ldr	r1, [pc, #416]	; (8008578 <USB_ActivateEndpoint+0x374>)
 80083d6:	400a      	ands	r2, r1
 80083d8:	801a      	strh	r2, [r3, #0]
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	18d3      	adds	r3, r2, r3
 80083e4:	183a      	adds	r2, r7, r0
 80083e6:	8812      	ldrh	r2, [r2, #0]
 80083e8:	4960      	ldr	r1, [pc, #384]	; (800856c <USB_ActivateEndpoint+0x368>)
 80083ea:	430a      	orrs	r2, r1
 80083ec:	b292      	uxth	r2, r2
 80083ee:	801a      	strh	r2, [r3, #0]
 80083f0:	e262      	b.n	80088b8 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	633b      	str	r3, [r7, #48]	; 0x30
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2250      	movs	r2, #80	; 0x50
 80083fa:	5a9b      	ldrh	r3, [r3, r2]
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	001a      	movs	r2, r3
 8008400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008402:	189b      	adds	r3, r3, r2
 8008404:	633b      	str	r3, [r7, #48]	; 0x30
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	00da      	lsls	r2, r3, #3
 800840c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840e:	18d3      	adds	r3, r2, r3
 8008410:	4a5a      	ldr	r2, [pc, #360]	; (800857c <USB_ActivateEndpoint+0x378>)
 8008412:	4694      	mov	ip, r2
 8008414:	4463      	add	r3, ip
 8008416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	88db      	ldrh	r3, [r3, #6]
 800841c:	085b      	lsrs	r3, r3, #1
 800841e:	b29b      	uxth	r3, r3
 8008420:	18db      	adds	r3, r3, r3
 8008422:	b29a      	uxth	r2, r3
 8008424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008426:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	62bb      	str	r3, [r7, #40]	; 0x28
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2250      	movs	r2, #80	; 0x50
 8008430:	5a9b      	ldrh	r3, [r3, r2]
 8008432:	b29b      	uxth	r3, r3
 8008434:	001a      	movs	r2, r3
 8008436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008438:	189b      	adds	r3, r3, r2
 800843a:	62bb      	str	r3, [r7, #40]	; 0x28
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	00da      	lsls	r2, r3, #3
 8008442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008444:	18d3      	adds	r3, r2, r3
 8008446:	4a4e      	ldr	r2, [pc, #312]	; (8008580 <USB_ActivateEndpoint+0x37c>)
 8008448:	4694      	mov	ip, r2
 800844a:	4463      	add	r3, ip
 800844c:	627b      	str	r3, [r7, #36]	; 0x24
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d110      	bne.n	8008478 <USB_ActivateEndpoint+0x274>
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	881b      	ldrh	r3, [r3, #0]
 800845a:	b29b      	uxth	r3, r3
 800845c:	4a49      	ldr	r2, [pc, #292]	; (8008584 <USB_ActivateEndpoint+0x380>)
 800845e:	4013      	ands	r3, r2
 8008460:	b29a      	uxth	r2, r3
 8008462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008464:	801a      	strh	r2, [r3, #0]
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	b29b      	uxth	r3, r3
 800846c:	4a46      	ldr	r2, [pc, #280]	; (8008588 <USB_ActivateEndpoint+0x384>)
 800846e:	4313      	orrs	r3, r2
 8008470:	b29a      	uxth	r2, r3
 8008472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008474:	801a      	strh	r2, [r3, #0]
 8008476:	e02b      	b.n	80084d0 <USB_ActivateEndpoint+0x2cc>
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	2b3e      	cmp	r3, #62	; 0x3e
 800847e:	d812      	bhi.n	80084a6 <USB_ActivateEndpoint+0x2a2>
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	085b      	lsrs	r3, r3, #1
 8008486:	66bb      	str	r3, [r7, #104]	; 0x68
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	2201      	movs	r2, #1
 800848e:	4013      	ands	r3, r2
 8008490:	d002      	beq.n	8008498 <USB_ActivateEndpoint+0x294>
 8008492:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008494:	3301      	adds	r3, #1
 8008496:	66bb      	str	r3, [r7, #104]	; 0x68
 8008498:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800849a:	b29b      	uxth	r3, r3
 800849c:	029b      	lsls	r3, r3, #10
 800849e:	b29a      	uxth	r2, r3
 80084a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a2:	801a      	strh	r2, [r3, #0]
 80084a4:	e014      	b.n	80084d0 <USB_ActivateEndpoint+0x2cc>
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	095b      	lsrs	r3, r3, #5
 80084ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	221f      	movs	r2, #31
 80084b4:	4013      	ands	r3, r2
 80084b6:	d102      	bne.n	80084be <USB_ActivateEndpoint+0x2ba>
 80084b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084ba:	3b01      	subs	r3, #1
 80084bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80084be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	029b      	lsls	r3, r3, #10
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	4a30      	ldr	r2, [pc, #192]	; (8008588 <USB_ActivateEndpoint+0x384>)
 80084c8:	4313      	orrs	r3, r2
 80084ca:	b29a      	uxth	r2, r3
 80084cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	18d2      	adds	r2, r2, r3
 80084da:	2122      	movs	r1, #34	; 0x22
 80084dc:	187b      	adds	r3, r7, r1
 80084de:	8812      	ldrh	r2, [r2, #0]
 80084e0:	801a      	strh	r2, [r3, #0]
 80084e2:	187b      	adds	r3, r7, r1
 80084e4:	881a      	ldrh	r2, [r3, #0]
 80084e6:	2380      	movs	r3, #128	; 0x80
 80084e8:	01db      	lsls	r3, r3, #7
 80084ea:	4013      	ands	r3, r2
 80084ec:	d016      	beq.n	800851c <USB_ActivateEndpoint+0x318>
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	18d3      	adds	r3, r2, r3
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	2020      	movs	r0, #32
 80084fe:	183b      	adds	r3, r7, r0
 8008500:	491b      	ldr	r1, [pc, #108]	; (8008570 <USB_ActivateEndpoint+0x36c>)
 8008502:	400a      	ands	r2, r1
 8008504:	801a      	strh	r2, [r3, #0]
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	18d3      	adds	r3, r2, r3
 8008510:	183a      	adds	r2, r7, r0
 8008512:	8812      	ldrh	r2, [r2, #0]
 8008514:	491d      	ldr	r1, [pc, #116]	; (800858c <USB_ActivateEndpoint+0x388>)
 8008516:	430a      	orrs	r2, r1
 8008518:	b292      	uxth	r2, r2
 800851a:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	18d3      	adds	r3, r2, r3
 8008526:	881b      	ldrh	r3, [r3, #0]
 8008528:	b29a      	uxth	r2, r3
 800852a:	201e      	movs	r0, #30
 800852c:	183b      	adds	r3, r7, r0
 800852e:	4918      	ldr	r1, [pc, #96]	; (8008590 <USB_ActivateEndpoint+0x38c>)
 8008530:	400a      	ands	r2, r1
 8008532:	801a      	strh	r2, [r3, #0]
 8008534:	183b      	adds	r3, r7, r0
 8008536:	183a      	adds	r2, r7, r0
 8008538:	8812      	ldrh	r2, [r2, #0]
 800853a:	2180      	movs	r1, #128	; 0x80
 800853c:	0149      	lsls	r1, r1, #5
 800853e:	404a      	eors	r2, r1
 8008540:	801a      	strh	r2, [r3, #0]
 8008542:	183b      	adds	r3, r7, r0
 8008544:	183a      	adds	r2, r7, r0
 8008546:	8812      	ldrh	r2, [r2, #0]
 8008548:	2180      	movs	r1, #128	; 0x80
 800854a:	0189      	lsls	r1, r1, #6
 800854c:	404a      	eors	r2, r1
 800854e:	801a      	strh	r2, [r3, #0]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	18d3      	adds	r3, r2, r3
 800855a:	183a      	adds	r2, r7, r0
 800855c:	8812      	ldrh	r2, [r2, #0]
 800855e:	4903      	ldr	r1, [pc, #12]	; (800856c <USB_ActivateEndpoint+0x368>)
 8008560:	430a      	orrs	r2, r1
 8008562:	b292      	uxth	r2, r2
 8008564:	801a      	strh	r2, [r3, #0]
 8008566:	e1a7      	b.n	80088b8 <USB_ActivateEndpoint+0x6b4>
 8008568:	ffff898f 	.word	0xffff898f
 800856c:	ffff8080 	.word	0xffff8080
 8008570:	ffff8f8f 	.word	0xffff8f8f
 8008574:	ffff80c0 	.word	0xffff80c0
 8008578:	ffff8fbf 	.word	0xffff8fbf
 800857c:	00000404 	.word	0x00000404
 8008580:	00000406 	.word	0x00000406
 8008584:	ffff83ff 	.word	0xffff83ff
 8008588:	ffff8000 	.word	0xffff8000
 800858c:	ffffc080 	.word	0xffffc080
 8008590:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	78db      	ldrb	r3, [r3, #3]
 8008598:	2b02      	cmp	r3, #2
 800859a:	d117      	bne.n	80085cc <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	18d3      	adds	r3, r2, r3
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	2062      	movs	r0, #98	; 0x62
 80085ac:	183b      	adds	r3, r7, r0
 80085ae:	49c6      	ldr	r1, [pc, #792]	; (80088c8 <USB_ActivateEndpoint+0x6c4>)
 80085b0:	400a      	ands	r2, r1
 80085b2:	801a      	strh	r2, [r3, #0]
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	18d3      	adds	r3, r2, r3
 80085be:	183a      	adds	r2, r7, r0
 80085c0:	8812      	ldrh	r2, [r2, #0]
 80085c2:	49c2      	ldr	r1, [pc, #776]	; (80088cc <USB_ActivateEndpoint+0x6c8>)
 80085c4:	430a      	orrs	r2, r1
 80085c6:	b292      	uxth	r2, r2
 80085c8:	801a      	strh	r2, [r3, #0]
 80085ca:	e016      	b.n	80085fa <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	18d3      	adds	r3, r2, r3
 80085d6:	881b      	ldrh	r3, [r3, #0]
 80085d8:	b29a      	uxth	r2, r3
 80085da:	2064      	movs	r0, #100	; 0x64
 80085dc:	183b      	adds	r3, r7, r0
 80085de:	49bc      	ldr	r1, [pc, #752]	; (80088d0 <USB_ActivateEndpoint+0x6cc>)
 80085e0:	400a      	ands	r2, r1
 80085e2:	801a      	strh	r2, [r3, #0]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	18d3      	adds	r3, r2, r3
 80085ee:	183a      	adds	r2, r7, r0
 80085f0:	8812      	ldrh	r2, [r2, #0]
 80085f2:	49b8      	ldr	r1, [pc, #736]	; (80088d4 <USB_ActivateEndpoint+0x6d0>)
 80085f4:	430a      	orrs	r2, r1
 80085f6:	b292      	uxth	r2, r2
 80085f8:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2250      	movs	r2, #80	; 0x50
 8008602:	5a9b      	ldrh	r3, [r3, r2]
 8008604:	b29b      	uxth	r3, r3
 8008606:	001a      	movs	r2, r3
 8008608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800860a:	189b      	adds	r3, r3, r2
 800860c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	00da      	lsls	r2, r3, #3
 8008614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008616:	18d3      	adds	r3, r2, r3
 8008618:	2280      	movs	r2, #128	; 0x80
 800861a:	00d2      	lsls	r2, r2, #3
 800861c:	4694      	mov	ip, r2
 800861e:	4463      	add	r3, ip
 8008620:	65bb      	str	r3, [r7, #88]	; 0x58
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	891b      	ldrh	r3, [r3, #8]
 8008626:	085b      	lsrs	r3, r3, #1
 8008628:	b29b      	uxth	r3, r3
 800862a:	18db      	adds	r3, r3, r3
 800862c:	b29a      	uxth	r2, r3
 800862e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008630:	801a      	strh	r2, [r3, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	657b      	str	r3, [r7, #84]	; 0x54
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2250      	movs	r2, #80	; 0x50
 800863a:	5a9b      	ldrh	r3, [r3, r2]
 800863c:	b29b      	uxth	r3, r3
 800863e:	001a      	movs	r2, r3
 8008640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008642:	189b      	adds	r3, r3, r2
 8008644:	657b      	str	r3, [r7, #84]	; 0x54
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	00da      	lsls	r2, r3, #3
 800864c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800864e:	18d3      	adds	r3, r2, r3
 8008650:	4aa1      	ldr	r2, [pc, #644]	; (80088d8 <USB_ActivateEndpoint+0x6d4>)
 8008652:	4694      	mov	ip, r2
 8008654:	4463      	add	r3, ip
 8008656:	653b      	str	r3, [r7, #80]	; 0x50
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	895b      	ldrh	r3, [r3, #10]
 800865c:	085b      	lsrs	r3, r3, #1
 800865e:	b29b      	uxth	r3, r3
 8008660:	18db      	adds	r3, r3, r3
 8008662:	b29a      	uxth	r2, r3
 8008664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008666:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	785b      	ldrb	r3, [r3, #1]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d000      	beq.n	8008672 <USB_ActivateEndpoint+0x46e>
 8008670:	e087      	b.n	8008782 <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	18d2      	adds	r2, r2, r3
 800867c:	2140      	movs	r1, #64	; 0x40
 800867e:	187b      	adds	r3, r7, r1
 8008680:	8812      	ldrh	r2, [r2, #0]
 8008682:	801a      	strh	r2, [r3, #0]
 8008684:	187b      	adds	r3, r7, r1
 8008686:	881a      	ldrh	r2, [r3, #0]
 8008688:	2380      	movs	r3, #128	; 0x80
 800868a:	01db      	lsls	r3, r3, #7
 800868c:	4013      	ands	r3, r2
 800868e:	d016      	beq.n	80086be <USB_ActivateEndpoint+0x4ba>
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	18d3      	adds	r3, r2, r3
 800869a:	881b      	ldrh	r3, [r3, #0]
 800869c:	b29a      	uxth	r2, r3
 800869e:	203e      	movs	r0, #62	; 0x3e
 80086a0:	183b      	adds	r3, r7, r0
 80086a2:	4989      	ldr	r1, [pc, #548]	; (80088c8 <USB_ActivateEndpoint+0x6c4>)
 80086a4:	400a      	ands	r2, r1
 80086a6:	801a      	strh	r2, [r3, #0]
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	18d3      	adds	r3, r2, r3
 80086b2:	183a      	adds	r2, r7, r0
 80086b4:	8812      	ldrh	r2, [r2, #0]
 80086b6:	4989      	ldr	r1, [pc, #548]	; (80088dc <USB_ActivateEndpoint+0x6d8>)
 80086b8:	430a      	orrs	r2, r1
 80086ba:	b292      	uxth	r2, r2
 80086bc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	18d2      	adds	r2, r2, r3
 80086c8:	213c      	movs	r1, #60	; 0x3c
 80086ca:	187b      	adds	r3, r7, r1
 80086cc:	8812      	ldrh	r2, [r2, #0]
 80086ce:	801a      	strh	r2, [r3, #0]
 80086d0:	187b      	adds	r3, r7, r1
 80086d2:	881b      	ldrh	r3, [r3, #0]
 80086d4:	2240      	movs	r2, #64	; 0x40
 80086d6:	4013      	ands	r3, r2
 80086d8:	d016      	beq.n	8008708 <USB_ActivateEndpoint+0x504>
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	18d3      	adds	r3, r2, r3
 80086e4:	881b      	ldrh	r3, [r3, #0]
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	203a      	movs	r0, #58	; 0x3a
 80086ea:	183b      	adds	r3, r7, r0
 80086ec:	4976      	ldr	r1, [pc, #472]	; (80088c8 <USB_ActivateEndpoint+0x6c4>)
 80086ee:	400a      	ands	r2, r1
 80086f0:	801a      	strh	r2, [r3, #0]
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	781b      	ldrb	r3, [r3, #0]
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	18d3      	adds	r3, r2, r3
 80086fc:	183a      	adds	r2, r7, r0
 80086fe:	8812      	ldrh	r2, [r2, #0]
 8008700:	4977      	ldr	r1, [pc, #476]	; (80088e0 <USB_ActivateEndpoint+0x6dc>)
 8008702:	430a      	orrs	r2, r1
 8008704:	b292      	uxth	r2, r2
 8008706:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	18d3      	adds	r3, r2, r3
 8008712:	881b      	ldrh	r3, [r3, #0]
 8008714:	b29a      	uxth	r2, r3
 8008716:	2038      	movs	r0, #56	; 0x38
 8008718:	183b      	adds	r3, r7, r0
 800871a:	4972      	ldr	r1, [pc, #456]	; (80088e4 <USB_ActivateEndpoint+0x6e0>)
 800871c:	400a      	ands	r2, r1
 800871e:	801a      	strh	r2, [r3, #0]
 8008720:	183b      	adds	r3, r7, r0
 8008722:	183a      	adds	r2, r7, r0
 8008724:	8812      	ldrh	r2, [r2, #0]
 8008726:	2180      	movs	r1, #128	; 0x80
 8008728:	0149      	lsls	r1, r1, #5
 800872a:	404a      	eors	r2, r1
 800872c:	801a      	strh	r2, [r3, #0]
 800872e:	183b      	adds	r3, r7, r0
 8008730:	183a      	adds	r2, r7, r0
 8008732:	8812      	ldrh	r2, [r2, #0]
 8008734:	2180      	movs	r1, #128	; 0x80
 8008736:	0189      	lsls	r1, r1, #6
 8008738:	404a      	eors	r2, r1
 800873a:	801a      	strh	r2, [r3, #0]
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	18d3      	adds	r3, r2, r3
 8008746:	183a      	adds	r2, r7, r0
 8008748:	8812      	ldrh	r2, [r2, #0]
 800874a:	4962      	ldr	r1, [pc, #392]	; (80088d4 <USB_ActivateEndpoint+0x6d0>)
 800874c:	430a      	orrs	r2, r1
 800874e:	b292      	uxth	r2, r2
 8008750:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	18d3      	adds	r3, r2, r3
 800875c:	881b      	ldrh	r3, [r3, #0]
 800875e:	b29a      	uxth	r2, r3
 8008760:	2036      	movs	r0, #54	; 0x36
 8008762:	183b      	adds	r3, r7, r0
 8008764:	4960      	ldr	r1, [pc, #384]	; (80088e8 <USB_ActivateEndpoint+0x6e4>)
 8008766:	400a      	ands	r2, r1
 8008768:	801a      	strh	r2, [r3, #0]
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	18d3      	adds	r3, r2, r3
 8008774:	183a      	adds	r2, r7, r0
 8008776:	8812      	ldrh	r2, [r2, #0]
 8008778:	4956      	ldr	r1, [pc, #344]	; (80088d4 <USB_ActivateEndpoint+0x6d0>)
 800877a:	430a      	orrs	r2, r1
 800877c:	b292      	uxth	r2, r2
 800877e:	801a      	strh	r2, [r3, #0]
 8008780:	e09a      	b.n	80088b8 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	18d2      	adds	r2, r2, r3
 800878c:	214e      	movs	r1, #78	; 0x4e
 800878e:	187b      	adds	r3, r7, r1
 8008790:	8812      	ldrh	r2, [r2, #0]
 8008792:	801a      	strh	r2, [r3, #0]
 8008794:	187b      	adds	r3, r7, r1
 8008796:	881a      	ldrh	r2, [r3, #0]
 8008798:	2380      	movs	r3, #128	; 0x80
 800879a:	01db      	lsls	r3, r3, #7
 800879c:	4013      	ands	r3, r2
 800879e:	d016      	beq.n	80087ce <USB_ActivateEndpoint+0x5ca>
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	18d3      	adds	r3, r2, r3
 80087aa:	881b      	ldrh	r3, [r3, #0]
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	204c      	movs	r0, #76	; 0x4c
 80087b0:	183b      	adds	r3, r7, r0
 80087b2:	4945      	ldr	r1, [pc, #276]	; (80088c8 <USB_ActivateEndpoint+0x6c4>)
 80087b4:	400a      	ands	r2, r1
 80087b6:	801a      	strh	r2, [r3, #0]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	18d3      	adds	r3, r2, r3
 80087c2:	183a      	adds	r2, r7, r0
 80087c4:	8812      	ldrh	r2, [r2, #0]
 80087c6:	4945      	ldr	r1, [pc, #276]	; (80088dc <USB_ActivateEndpoint+0x6d8>)
 80087c8:	430a      	orrs	r2, r1
 80087ca:	b292      	uxth	r2, r2
 80087cc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	18d2      	adds	r2, r2, r3
 80087d8:	214a      	movs	r1, #74	; 0x4a
 80087da:	187b      	adds	r3, r7, r1
 80087dc:	8812      	ldrh	r2, [r2, #0]
 80087de:	801a      	strh	r2, [r3, #0]
 80087e0:	187b      	adds	r3, r7, r1
 80087e2:	881b      	ldrh	r3, [r3, #0]
 80087e4:	2240      	movs	r2, #64	; 0x40
 80087e6:	4013      	ands	r3, r2
 80087e8:	d016      	beq.n	8008818 <USB_ActivateEndpoint+0x614>
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	18d3      	adds	r3, r2, r3
 80087f4:	881b      	ldrh	r3, [r3, #0]
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	2048      	movs	r0, #72	; 0x48
 80087fa:	183b      	adds	r3, r7, r0
 80087fc:	4932      	ldr	r1, [pc, #200]	; (80088c8 <USB_ActivateEndpoint+0x6c4>)
 80087fe:	400a      	ands	r2, r1
 8008800:	801a      	strh	r2, [r3, #0]
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	18d3      	adds	r3, r2, r3
 800880c:	183a      	adds	r2, r7, r0
 800880e:	8812      	ldrh	r2, [r2, #0]
 8008810:	4933      	ldr	r1, [pc, #204]	; (80088e0 <USB_ActivateEndpoint+0x6dc>)
 8008812:	430a      	orrs	r2, r1
 8008814:	b292      	uxth	r2, r2
 8008816:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	78db      	ldrb	r3, [r3, #3]
 800881c:	2b01      	cmp	r3, #1
 800881e:	d01d      	beq.n	800885c <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	18d3      	adds	r3, r2, r3
 800882a:	881b      	ldrh	r3, [r3, #0]
 800882c:	b29a      	uxth	r2, r3
 800882e:	2044      	movs	r0, #68	; 0x44
 8008830:	183b      	adds	r3, r7, r0
 8008832:	492d      	ldr	r1, [pc, #180]	; (80088e8 <USB_ActivateEndpoint+0x6e4>)
 8008834:	400a      	ands	r2, r1
 8008836:	801a      	strh	r2, [r3, #0]
 8008838:	183b      	adds	r3, r7, r0
 800883a:	183a      	adds	r2, r7, r0
 800883c:	8812      	ldrh	r2, [r2, #0]
 800883e:	2120      	movs	r1, #32
 8008840:	404a      	eors	r2, r1
 8008842:	801a      	strh	r2, [r3, #0]
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	18d3      	adds	r3, r2, r3
 800884e:	183a      	adds	r2, r7, r0
 8008850:	8812      	ldrh	r2, [r2, #0]
 8008852:	4920      	ldr	r1, [pc, #128]	; (80088d4 <USB_ActivateEndpoint+0x6d0>)
 8008854:	430a      	orrs	r2, r1
 8008856:	b292      	uxth	r2, r2
 8008858:	801a      	strh	r2, [r3, #0]
 800885a:	e016      	b.n	800888a <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	009b      	lsls	r3, r3, #2
 8008864:	18d3      	adds	r3, r2, r3
 8008866:	881b      	ldrh	r3, [r3, #0]
 8008868:	b29a      	uxth	r2, r3
 800886a:	2046      	movs	r0, #70	; 0x46
 800886c:	183b      	adds	r3, r7, r0
 800886e:	491e      	ldr	r1, [pc, #120]	; (80088e8 <USB_ActivateEndpoint+0x6e4>)
 8008870:	400a      	ands	r2, r1
 8008872:	801a      	strh	r2, [r3, #0]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	18d3      	adds	r3, r2, r3
 800887e:	183a      	adds	r2, r7, r0
 8008880:	8812      	ldrh	r2, [r2, #0]
 8008882:	4914      	ldr	r1, [pc, #80]	; (80088d4 <USB_ActivateEndpoint+0x6d0>)
 8008884:	430a      	orrs	r2, r1
 8008886:	b292      	uxth	r2, r2
 8008888:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	18d3      	adds	r3, r2, r3
 8008894:	881b      	ldrh	r3, [r3, #0]
 8008896:	b29a      	uxth	r2, r3
 8008898:	2042      	movs	r0, #66	; 0x42
 800889a:	183b      	adds	r3, r7, r0
 800889c:	4911      	ldr	r1, [pc, #68]	; (80088e4 <USB_ActivateEndpoint+0x6e0>)
 800889e:	400a      	ands	r2, r1
 80088a0:	801a      	strh	r2, [r3, #0]
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	18d3      	adds	r3, r2, r3
 80088ac:	183a      	adds	r2, r7, r0
 80088ae:	8812      	ldrh	r2, [r2, #0]
 80088b0:	4908      	ldr	r1, [pc, #32]	; (80088d4 <USB_ActivateEndpoint+0x6d0>)
 80088b2:	430a      	orrs	r2, r1
 80088b4:	b292      	uxth	r2, r2
 80088b6:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 80088b8:	236f      	movs	r3, #111	; 0x6f
 80088ba:	18fb      	adds	r3, r7, r3
 80088bc:	781b      	ldrb	r3, [r3, #0]
}
 80088be:	0018      	movs	r0, r3
 80088c0:	46bd      	mov	sp, r7
 80088c2:	b01c      	add	sp, #112	; 0x70
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	46c0      	nop			; (mov r8, r8)
 80088c8:	ffff8f8f 	.word	0xffff8f8f
 80088cc:	ffff8180 	.word	0xffff8180
 80088d0:	ffff8e8f 	.word	0xffff8e8f
 80088d4:	ffff8080 	.word	0xffff8080
 80088d8:	00000404 	.word	0x00000404
 80088dc:	ffffc080 	.word	0xffffc080
 80088e0:	ffff80c0 	.word	0xffff80c0
 80088e4:	ffffbf8f 	.word	0xffffbf8f
 80088e8:	ffff8fbf 	.word	0xffff8fbf

080088ec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b08c      	sub	sp, #48	; 0x30
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	7b1b      	ldrb	r3, [r3, #12]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d000      	beq.n	8008900 <USB_DeactivateEndpoint+0x14>
 80088fe:	e07e      	b.n	80089fe <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	785b      	ldrb	r3, [r3, #1]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d03c      	beq.n	8008982 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	18d2      	adds	r2, r2, r3
 8008912:	210c      	movs	r1, #12
 8008914:	187b      	adds	r3, r7, r1
 8008916:	8812      	ldrh	r2, [r2, #0]
 8008918:	801a      	strh	r2, [r3, #0]
 800891a:	187b      	adds	r3, r7, r1
 800891c:	881b      	ldrh	r3, [r3, #0]
 800891e:	2240      	movs	r2, #64	; 0x40
 8008920:	4013      	ands	r3, r2
 8008922:	d016      	beq.n	8008952 <USB_DeactivateEndpoint+0x66>
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	18d3      	adds	r3, r2, r3
 800892e:	881b      	ldrh	r3, [r3, #0]
 8008930:	b29a      	uxth	r2, r3
 8008932:	200a      	movs	r0, #10
 8008934:	183b      	adds	r3, r7, r0
 8008936:	49c7      	ldr	r1, [pc, #796]	; (8008c54 <USB_DeactivateEndpoint+0x368>)
 8008938:	400a      	ands	r2, r1
 800893a:	801a      	strh	r2, [r3, #0]
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	18d3      	adds	r3, r2, r3
 8008946:	183a      	adds	r2, r7, r0
 8008948:	8812      	ldrh	r2, [r2, #0]
 800894a:	49c3      	ldr	r1, [pc, #780]	; (8008c58 <USB_DeactivateEndpoint+0x36c>)
 800894c:	430a      	orrs	r2, r1
 800894e:	b292      	uxth	r2, r2
 8008950:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	18d3      	adds	r3, r2, r3
 800895c:	881b      	ldrh	r3, [r3, #0]
 800895e:	b29a      	uxth	r2, r3
 8008960:	2008      	movs	r0, #8
 8008962:	183b      	adds	r3, r7, r0
 8008964:	49bd      	ldr	r1, [pc, #756]	; (8008c5c <USB_DeactivateEndpoint+0x370>)
 8008966:	400a      	ands	r2, r1
 8008968:	801a      	strh	r2, [r3, #0]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	18d3      	adds	r3, r2, r3
 8008974:	183a      	adds	r2, r7, r0
 8008976:	8812      	ldrh	r2, [r2, #0]
 8008978:	49b9      	ldr	r1, [pc, #740]	; (8008c60 <USB_DeactivateEndpoint+0x374>)
 800897a:	430a      	orrs	r2, r1
 800897c:	b292      	uxth	r2, r2
 800897e:	801a      	strh	r2, [r3, #0]
 8008980:	e163      	b.n	8008c4a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	18d2      	adds	r2, r2, r3
 800898c:	2112      	movs	r1, #18
 800898e:	187b      	adds	r3, r7, r1
 8008990:	8812      	ldrh	r2, [r2, #0]
 8008992:	801a      	strh	r2, [r3, #0]
 8008994:	187b      	adds	r3, r7, r1
 8008996:	881a      	ldrh	r2, [r3, #0]
 8008998:	2380      	movs	r3, #128	; 0x80
 800899a:	01db      	lsls	r3, r3, #7
 800899c:	4013      	ands	r3, r2
 800899e:	d016      	beq.n	80089ce <USB_DeactivateEndpoint+0xe2>
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	18d3      	adds	r3, r2, r3
 80089aa:	881b      	ldrh	r3, [r3, #0]
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	2010      	movs	r0, #16
 80089b0:	183b      	adds	r3, r7, r0
 80089b2:	49a8      	ldr	r1, [pc, #672]	; (8008c54 <USB_DeactivateEndpoint+0x368>)
 80089b4:	400a      	ands	r2, r1
 80089b6:	801a      	strh	r2, [r3, #0]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	18d3      	adds	r3, r2, r3
 80089c2:	183a      	adds	r2, r7, r0
 80089c4:	8812      	ldrh	r2, [r2, #0]
 80089c6:	49a7      	ldr	r1, [pc, #668]	; (8008c64 <USB_DeactivateEndpoint+0x378>)
 80089c8:	430a      	orrs	r2, r1
 80089ca:	b292      	uxth	r2, r2
 80089cc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	18d3      	adds	r3, r2, r3
 80089d8:	881b      	ldrh	r3, [r3, #0]
 80089da:	b29a      	uxth	r2, r3
 80089dc:	200e      	movs	r0, #14
 80089de:	183b      	adds	r3, r7, r0
 80089e0:	49a1      	ldr	r1, [pc, #644]	; (8008c68 <USB_DeactivateEndpoint+0x37c>)
 80089e2:	400a      	ands	r2, r1
 80089e4:	801a      	strh	r2, [r3, #0]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	18d3      	adds	r3, r2, r3
 80089f0:	183a      	adds	r2, r7, r0
 80089f2:	8812      	ldrh	r2, [r2, #0]
 80089f4:	499a      	ldr	r1, [pc, #616]	; (8008c60 <USB_DeactivateEndpoint+0x374>)
 80089f6:	430a      	orrs	r2, r1
 80089f8:	b292      	uxth	r2, r2
 80089fa:	801a      	strh	r2, [r3, #0]
 80089fc:	e125      	b.n	8008c4a <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	785b      	ldrb	r3, [r3, #1]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d000      	beq.n	8008a08 <USB_DeactivateEndpoint+0x11c>
 8008a06:	e090      	b.n	8008b2a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	18d2      	adds	r2, r2, r3
 8008a12:	2120      	movs	r1, #32
 8008a14:	187b      	adds	r3, r7, r1
 8008a16:	8812      	ldrh	r2, [r2, #0]
 8008a18:	801a      	strh	r2, [r3, #0]
 8008a1a:	187b      	adds	r3, r7, r1
 8008a1c:	881a      	ldrh	r2, [r3, #0]
 8008a1e:	2380      	movs	r3, #128	; 0x80
 8008a20:	01db      	lsls	r3, r3, #7
 8008a22:	4013      	ands	r3, r2
 8008a24:	d016      	beq.n	8008a54 <USB_DeactivateEndpoint+0x168>
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	18d3      	adds	r3, r2, r3
 8008a30:	881b      	ldrh	r3, [r3, #0]
 8008a32:	b29a      	uxth	r2, r3
 8008a34:	201e      	movs	r0, #30
 8008a36:	183b      	adds	r3, r7, r0
 8008a38:	4986      	ldr	r1, [pc, #536]	; (8008c54 <USB_DeactivateEndpoint+0x368>)
 8008a3a:	400a      	ands	r2, r1
 8008a3c:	801a      	strh	r2, [r3, #0]
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	18d3      	adds	r3, r2, r3
 8008a48:	183a      	adds	r2, r7, r0
 8008a4a:	8812      	ldrh	r2, [r2, #0]
 8008a4c:	4985      	ldr	r1, [pc, #532]	; (8008c64 <USB_DeactivateEndpoint+0x378>)
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	b292      	uxth	r2, r2
 8008a52:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	18d2      	adds	r2, r2, r3
 8008a5e:	211c      	movs	r1, #28
 8008a60:	187b      	adds	r3, r7, r1
 8008a62:	8812      	ldrh	r2, [r2, #0]
 8008a64:	801a      	strh	r2, [r3, #0]
 8008a66:	187b      	adds	r3, r7, r1
 8008a68:	881b      	ldrh	r3, [r3, #0]
 8008a6a:	2240      	movs	r2, #64	; 0x40
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	d016      	beq.n	8008a9e <USB_DeactivateEndpoint+0x1b2>
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	18d3      	adds	r3, r2, r3
 8008a7a:	881b      	ldrh	r3, [r3, #0]
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	201a      	movs	r0, #26
 8008a80:	183b      	adds	r3, r7, r0
 8008a82:	4974      	ldr	r1, [pc, #464]	; (8008c54 <USB_DeactivateEndpoint+0x368>)
 8008a84:	400a      	ands	r2, r1
 8008a86:	801a      	strh	r2, [r3, #0]
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	18d3      	adds	r3, r2, r3
 8008a92:	183a      	adds	r2, r7, r0
 8008a94:	8812      	ldrh	r2, [r2, #0]
 8008a96:	4970      	ldr	r1, [pc, #448]	; (8008c58 <USB_DeactivateEndpoint+0x36c>)
 8008a98:	430a      	orrs	r2, r1
 8008a9a:	b292      	uxth	r2, r2
 8008a9c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	18d3      	adds	r3, r2, r3
 8008aa8:	881b      	ldrh	r3, [r3, #0]
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	2018      	movs	r0, #24
 8008aae:	183b      	adds	r3, r7, r0
 8008ab0:	4968      	ldr	r1, [pc, #416]	; (8008c54 <USB_DeactivateEndpoint+0x368>)
 8008ab2:	400a      	ands	r2, r1
 8008ab4:	801a      	strh	r2, [r3, #0]
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	18d3      	adds	r3, r2, r3
 8008ac0:	183a      	adds	r2, r7, r0
 8008ac2:	8812      	ldrh	r2, [r2, #0]
 8008ac4:	4964      	ldr	r1, [pc, #400]	; (8008c58 <USB_DeactivateEndpoint+0x36c>)
 8008ac6:	430a      	orrs	r2, r1
 8008ac8:	b292      	uxth	r2, r2
 8008aca:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	18d3      	adds	r3, r2, r3
 8008ad6:	881b      	ldrh	r3, [r3, #0]
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	2016      	movs	r0, #22
 8008adc:	183b      	adds	r3, r7, r0
 8008ade:	4962      	ldr	r1, [pc, #392]	; (8008c68 <USB_DeactivateEndpoint+0x37c>)
 8008ae0:	400a      	ands	r2, r1
 8008ae2:	801a      	strh	r2, [r3, #0]
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	18d3      	adds	r3, r2, r3
 8008aee:	183a      	adds	r2, r7, r0
 8008af0:	8812      	ldrh	r2, [r2, #0]
 8008af2:	495b      	ldr	r1, [pc, #364]	; (8008c60 <USB_DeactivateEndpoint+0x374>)
 8008af4:	430a      	orrs	r2, r1
 8008af6:	b292      	uxth	r2, r2
 8008af8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	18d3      	adds	r3, r2, r3
 8008b04:	881b      	ldrh	r3, [r3, #0]
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	2014      	movs	r0, #20
 8008b0a:	183b      	adds	r3, r7, r0
 8008b0c:	4953      	ldr	r1, [pc, #332]	; (8008c5c <USB_DeactivateEndpoint+0x370>)
 8008b0e:	400a      	ands	r2, r1
 8008b10:	801a      	strh	r2, [r3, #0]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	18d3      	adds	r3, r2, r3
 8008b1c:	183a      	adds	r2, r7, r0
 8008b1e:	8812      	ldrh	r2, [r2, #0]
 8008b20:	494f      	ldr	r1, [pc, #316]	; (8008c60 <USB_DeactivateEndpoint+0x374>)
 8008b22:	430a      	orrs	r2, r1
 8008b24:	b292      	uxth	r2, r2
 8008b26:	801a      	strh	r2, [r3, #0]
 8008b28:	e08f      	b.n	8008c4a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	18d2      	adds	r2, r2, r3
 8008b34:	212e      	movs	r1, #46	; 0x2e
 8008b36:	187b      	adds	r3, r7, r1
 8008b38:	8812      	ldrh	r2, [r2, #0]
 8008b3a:	801a      	strh	r2, [r3, #0]
 8008b3c:	187b      	adds	r3, r7, r1
 8008b3e:	881a      	ldrh	r2, [r3, #0]
 8008b40:	2380      	movs	r3, #128	; 0x80
 8008b42:	01db      	lsls	r3, r3, #7
 8008b44:	4013      	ands	r3, r2
 8008b46:	d016      	beq.n	8008b76 <USB_DeactivateEndpoint+0x28a>
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	18d3      	adds	r3, r2, r3
 8008b52:	881b      	ldrh	r3, [r3, #0]
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	202c      	movs	r0, #44	; 0x2c
 8008b58:	183b      	adds	r3, r7, r0
 8008b5a:	493e      	ldr	r1, [pc, #248]	; (8008c54 <USB_DeactivateEndpoint+0x368>)
 8008b5c:	400a      	ands	r2, r1
 8008b5e:	801a      	strh	r2, [r3, #0]
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	18d3      	adds	r3, r2, r3
 8008b6a:	183a      	adds	r2, r7, r0
 8008b6c:	8812      	ldrh	r2, [r2, #0]
 8008b6e:	493d      	ldr	r1, [pc, #244]	; (8008c64 <USB_DeactivateEndpoint+0x378>)
 8008b70:	430a      	orrs	r2, r1
 8008b72:	b292      	uxth	r2, r2
 8008b74:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	18d2      	adds	r2, r2, r3
 8008b80:	212a      	movs	r1, #42	; 0x2a
 8008b82:	187b      	adds	r3, r7, r1
 8008b84:	8812      	ldrh	r2, [r2, #0]
 8008b86:	801a      	strh	r2, [r3, #0]
 8008b88:	187b      	adds	r3, r7, r1
 8008b8a:	881b      	ldrh	r3, [r3, #0]
 8008b8c:	2240      	movs	r2, #64	; 0x40
 8008b8e:	4013      	ands	r3, r2
 8008b90:	d016      	beq.n	8008bc0 <USB_DeactivateEndpoint+0x2d4>
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	18d3      	adds	r3, r2, r3
 8008b9c:	881b      	ldrh	r3, [r3, #0]
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	2028      	movs	r0, #40	; 0x28
 8008ba2:	183b      	adds	r3, r7, r0
 8008ba4:	492b      	ldr	r1, [pc, #172]	; (8008c54 <USB_DeactivateEndpoint+0x368>)
 8008ba6:	400a      	ands	r2, r1
 8008ba8:	801a      	strh	r2, [r3, #0]
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	18d3      	adds	r3, r2, r3
 8008bb4:	183a      	adds	r2, r7, r0
 8008bb6:	8812      	ldrh	r2, [r2, #0]
 8008bb8:	4927      	ldr	r1, [pc, #156]	; (8008c58 <USB_DeactivateEndpoint+0x36c>)
 8008bba:	430a      	orrs	r2, r1
 8008bbc:	b292      	uxth	r2, r2
 8008bbe:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	18d3      	adds	r3, r2, r3
 8008bca:	881b      	ldrh	r3, [r3, #0]
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	2026      	movs	r0, #38	; 0x26
 8008bd0:	183b      	adds	r3, r7, r0
 8008bd2:	4920      	ldr	r1, [pc, #128]	; (8008c54 <USB_DeactivateEndpoint+0x368>)
 8008bd4:	400a      	ands	r2, r1
 8008bd6:	801a      	strh	r2, [r3, #0]
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	18d3      	adds	r3, r2, r3
 8008be2:	183a      	adds	r2, r7, r0
 8008be4:	8812      	ldrh	r2, [r2, #0]
 8008be6:	491f      	ldr	r1, [pc, #124]	; (8008c64 <USB_DeactivateEndpoint+0x378>)
 8008be8:	430a      	orrs	r2, r1
 8008bea:	b292      	uxth	r2, r2
 8008bec:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	18d3      	adds	r3, r2, r3
 8008bf8:	881b      	ldrh	r3, [r3, #0]
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	2024      	movs	r0, #36	; 0x24
 8008bfe:	183b      	adds	r3, r7, r0
 8008c00:	4916      	ldr	r1, [pc, #88]	; (8008c5c <USB_DeactivateEndpoint+0x370>)
 8008c02:	400a      	ands	r2, r1
 8008c04:	801a      	strh	r2, [r3, #0]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	18d3      	adds	r3, r2, r3
 8008c10:	183a      	adds	r2, r7, r0
 8008c12:	8812      	ldrh	r2, [r2, #0]
 8008c14:	4912      	ldr	r1, [pc, #72]	; (8008c60 <USB_DeactivateEndpoint+0x374>)
 8008c16:	430a      	orrs	r2, r1
 8008c18:	b292      	uxth	r2, r2
 8008c1a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	781b      	ldrb	r3, [r3, #0]
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	18d3      	adds	r3, r2, r3
 8008c26:	881b      	ldrh	r3, [r3, #0]
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	2022      	movs	r0, #34	; 0x22
 8008c2c:	183b      	adds	r3, r7, r0
 8008c2e:	490e      	ldr	r1, [pc, #56]	; (8008c68 <USB_DeactivateEndpoint+0x37c>)
 8008c30:	400a      	ands	r2, r1
 8008c32:	801a      	strh	r2, [r3, #0]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	18d3      	adds	r3, r2, r3
 8008c3e:	183a      	adds	r2, r7, r0
 8008c40:	8812      	ldrh	r2, [r2, #0]
 8008c42:	4907      	ldr	r1, [pc, #28]	; (8008c60 <USB_DeactivateEndpoint+0x374>)
 8008c44:	430a      	orrs	r2, r1
 8008c46:	b292      	uxth	r2, r2
 8008c48:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8008c4a:	2300      	movs	r3, #0
}
 8008c4c:	0018      	movs	r0, r3
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	b00c      	add	sp, #48	; 0x30
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	ffff8f8f 	.word	0xffff8f8f
 8008c58:	ffff80c0 	.word	0xffff80c0
 8008c5c:	ffff8fbf 	.word	0xffff8fbf
 8008c60:	ffff8080 	.word	0xffff8080
 8008c64:	ffffc080 	.word	0xffffc080
 8008c68:	ffffbf8f 	.word	0xffffbf8f

08008c6c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c6c:	b590      	push	{r4, r7, lr}
 8008c6e:	b0c3      	sub	sp, #268	; 0x10c
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	785b      	ldrb	r3, [r3, #1]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d001      	beq.n	8008c82 <USB_EPStartXfer+0x16>
 8008c7e:	f000 fcef 	bl	8009660 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	699a      	ldr	r2, [r3, #24]
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d905      	bls.n	8008c9a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	1d7a      	adds	r2, r7, #5
 8008c94:	32ff      	adds	r2, #255	; 0xff
 8008c96:	6013      	str	r3, [r2, #0]
 8008c98:	e004      	b.n	8008ca4 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	1d7a      	adds	r2, r7, #5
 8008ca0:	32ff      	adds	r2, #255	; 0xff
 8008ca2:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	7b1b      	ldrb	r3, [r3, #12]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d125      	bne.n	8008cf8 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	6959      	ldr	r1, [r3, #20]
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	88da      	ldrh	r2, [r3, #6]
 8008cb4:	1d7b      	adds	r3, r7, #5
 8008cb6:	33ff      	adds	r3, #255	; 0xff
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f001 f9c9 	bl	800a054 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	613b      	str	r3, [r7, #16]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2250      	movs	r2, #80	; 0x50
 8008cca:	5a9b      	ldrh	r3, [r3, r2]
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	001a      	movs	r2, r3
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	189b      	adds	r3, r3, r2
 8008cd4:	613b      	str	r3, [r7, #16]
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	00da      	lsls	r2, r3, #3
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	18d3      	adds	r3, r2, r3
 8008ce0:	4acc      	ldr	r2, [pc, #816]	; (8009014 <USB_EPStartXfer+0x3a8>)
 8008ce2:	4694      	mov	ip, r2
 8008ce4:	4463      	add	r3, ip
 8008ce6:	60fb      	str	r3, [r7, #12]
 8008ce8:	1d7b      	adds	r3, r7, #5
 8008cea:	33ff      	adds	r3, #255	; 0xff
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	801a      	strh	r2, [r3, #0]
 8008cf4:	f000 fc8f 	bl	8009616 <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	78db      	ldrb	r3, [r3, #3]
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d000      	beq.n	8008d02 <USB_EPStartXfer+0x96>
 8008d00:	e33a      	b.n	8009378 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	6a1a      	ldr	r2, [r3, #32]
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d800      	bhi.n	8008d10 <USB_EPStartXfer+0xa4>
 8008d0e:	e2df      	b.n	80092d0 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	18d3      	adds	r3, r2, r3
 8008d1a:	881b      	ldrh	r3, [r3, #0]
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	2056      	movs	r0, #86	; 0x56
 8008d20:	183b      	adds	r3, r7, r0
 8008d22:	49bd      	ldr	r1, [pc, #756]	; (8009018 <USB_EPStartXfer+0x3ac>)
 8008d24:	400a      	ands	r2, r1
 8008d26:	801a      	strh	r2, [r3, #0]
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	18d3      	adds	r3, r2, r3
 8008d32:	183a      	adds	r2, r7, r0
 8008d34:	8812      	ldrh	r2, [r2, #0]
 8008d36:	49b9      	ldr	r1, [pc, #740]	; (800901c <USB_EPStartXfer+0x3b0>)
 8008d38:	430a      	orrs	r2, r1
 8008d3a:	b292      	uxth	r2, r2
 8008d3c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	6a1a      	ldr	r2, [r3, #32]
 8008d42:	1d7b      	adds	r3, r7, #5
 8008d44:	33ff      	adds	r3, #255	; 0xff
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	1ad2      	subs	r2, r2, r3
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	18d3      	adds	r3, r2, r3
 8008d58:	881b      	ldrh	r3, [r3, #0]
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	001a      	movs	r2, r3
 8008d5e:	2340      	movs	r3, #64	; 0x40
 8008d60:	4013      	ands	r3, r2
 8008d62:	d100      	bne.n	8008d66 <USB_EPStartXfer+0xfa>
 8008d64:	e162      	b.n	800902c <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	633b      	str	r3, [r7, #48]	; 0x30
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	785b      	ldrb	r3, [r3, #1]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d16a      	bne.n	8008e48 <USB_EPStartXfer+0x1dc>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2250      	movs	r2, #80	; 0x50
 8008d7a:	5a9b      	ldrh	r3, [r3, r2]
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	001a      	movs	r2, r3
 8008d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d82:	189b      	adds	r3, r3, r2
 8008d84:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	00da      	lsls	r2, r3, #3
 8008d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8e:	18d3      	adds	r3, r2, r3
 8008d90:	4aa3      	ldr	r2, [pc, #652]	; (8009020 <USB_EPStartXfer+0x3b4>)
 8008d92:	4694      	mov	ip, r2
 8008d94:	4463      	add	r3, ip
 8008d96:	627b      	str	r3, [r7, #36]	; 0x24
 8008d98:	1d7b      	adds	r3, r7, #5
 8008d9a:	33ff      	adds	r3, #255	; 0xff
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d110      	bne.n	8008dc4 <USB_EPStartXfer+0x158>
 8008da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da4:	881b      	ldrh	r3, [r3, #0]
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	4a9e      	ldr	r2, [pc, #632]	; (8009024 <USB_EPStartXfer+0x3b8>)
 8008daa:	4013      	ands	r3, r2
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	801a      	strh	r2, [r3, #0]
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	881b      	ldrh	r3, [r3, #0]
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	4a9b      	ldr	r2, [pc, #620]	; (8009028 <USB_EPStartXfer+0x3bc>)
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc0:	801a      	strh	r2, [r3, #0]
 8008dc2:	e05c      	b.n	8008e7e <USB_EPStartXfer+0x212>
 8008dc4:	1d7b      	adds	r3, r7, #5
 8008dc6:	33ff      	adds	r3, #255	; 0xff
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2b3e      	cmp	r3, #62	; 0x3e
 8008dcc:	d81c      	bhi.n	8008e08 <USB_EPStartXfer+0x19c>
 8008dce:	1d7b      	adds	r3, r7, #5
 8008dd0:	33ff      	adds	r3, #255	; 0xff
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	085b      	lsrs	r3, r3, #1
 8008dd6:	1c7a      	adds	r2, r7, #1
 8008dd8:	32ff      	adds	r2, #255	; 0xff
 8008dda:	6013      	str	r3, [r2, #0]
 8008ddc:	1d7b      	adds	r3, r7, #5
 8008dde:	33ff      	adds	r3, #255	; 0xff
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2201      	movs	r2, #1
 8008de4:	4013      	ands	r3, r2
 8008de6:	d006      	beq.n	8008df6 <USB_EPStartXfer+0x18a>
 8008de8:	1c7b      	adds	r3, r7, #1
 8008dea:	33ff      	adds	r3, #255	; 0xff
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	3301      	adds	r3, #1
 8008df0:	1c7a      	adds	r2, r7, #1
 8008df2:	32ff      	adds	r2, #255	; 0xff
 8008df4:	6013      	str	r3, [r2, #0]
 8008df6:	1c7b      	adds	r3, r7, #1
 8008df8:	33ff      	adds	r3, #255	; 0xff
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	029b      	lsls	r3, r3, #10
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e04:	801a      	strh	r2, [r3, #0]
 8008e06:	e03a      	b.n	8008e7e <USB_EPStartXfer+0x212>
 8008e08:	1d7b      	adds	r3, r7, #5
 8008e0a:	33ff      	adds	r3, #255	; 0xff
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	095b      	lsrs	r3, r3, #5
 8008e10:	1c7a      	adds	r2, r7, #1
 8008e12:	32ff      	adds	r2, #255	; 0xff
 8008e14:	6013      	str	r3, [r2, #0]
 8008e16:	1d7b      	adds	r3, r7, #5
 8008e18:	33ff      	adds	r3, #255	; 0xff
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	221f      	movs	r2, #31
 8008e1e:	4013      	ands	r3, r2
 8008e20:	d106      	bne.n	8008e30 <USB_EPStartXfer+0x1c4>
 8008e22:	1c7b      	adds	r3, r7, #1
 8008e24:	33ff      	adds	r3, #255	; 0xff
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	1c7a      	adds	r2, r7, #1
 8008e2c:	32ff      	adds	r2, #255	; 0xff
 8008e2e:	6013      	str	r3, [r2, #0]
 8008e30:	1c7b      	adds	r3, r7, #1
 8008e32:	33ff      	adds	r3, #255	; 0xff
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	029b      	lsls	r3, r3, #10
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	4a7a      	ldr	r2, [pc, #488]	; (8009028 <USB_EPStartXfer+0x3bc>)
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	801a      	strh	r2, [r3, #0]
 8008e46:	e01a      	b.n	8008e7e <USB_EPStartXfer+0x212>
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	785b      	ldrb	r3, [r3, #1]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d116      	bne.n	8008e7e <USB_EPStartXfer+0x212>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2250      	movs	r2, #80	; 0x50
 8008e54:	5a9b      	ldrh	r3, [r3, r2]
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	001a      	movs	r2, r3
 8008e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5c:	189b      	adds	r3, r3, r2
 8008e5e:	633b      	str	r3, [r7, #48]	; 0x30
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	00da      	lsls	r2, r3, #3
 8008e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e68:	18d3      	adds	r3, r2, r3
 8008e6a:	4a6d      	ldr	r2, [pc, #436]	; (8009020 <USB_EPStartXfer+0x3b4>)
 8008e6c:	4694      	mov	ip, r2
 8008e6e:	4463      	add	r3, ip
 8008e70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e72:	1d7b      	adds	r3, r7, #5
 8008e74:	33ff      	adds	r3, #255	; 0xff
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008e7e:	2076      	movs	r0, #118	; 0x76
 8008e80:	183b      	adds	r3, r7, r0
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	8952      	ldrh	r2, [r2, #10]
 8008e86:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	6959      	ldr	r1, [r3, #20]
 8008e8c:	1d7b      	adds	r3, r7, #5
 8008e8e:	33ff      	adds	r3, #255	; 0xff
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	b29c      	uxth	r4, r3
 8008e94:	183b      	adds	r3, r7, r0
 8008e96:	881a      	ldrh	r2, [r3, #0]
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	0023      	movs	r3, r4
 8008e9c:	f001 f8da 	bl	800a054 <USB_WritePMA>
            ep->xfer_buff += len;
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	695a      	ldr	r2, [r3, #20]
 8008ea4:	1d7b      	adds	r3, r7, #5
 8008ea6:	33ff      	adds	r3, #255	; 0xff
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	18d2      	adds	r2, r2, r3
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	6a1a      	ldr	r2, [r3, #32]
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d908      	bls.n	8008ece <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	6a1a      	ldr	r2, [r3, #32]
 8008ec0:	1d7b      	adds	r3, r7, #5
 8008ec2:	33ff      	adds	r3, #255	; 0xff
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	1ad2      	subs	r2, r2, r3
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	621a      	str	r2, [r3, #32]
 8008ecc:	e007      	b.n	8008ede <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	6a1b      	ldr	r3, [r3, #32]
 8008ed2:	1d7a      	adds	r2, r7, #5
 8008ed4:	32ff      	adds	r2, #255	; 0xff
 8008ed6:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	2200      	movs	r2, #0
 8008edc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	785b      	ldrb	r3, [r3, #1]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d166      	bne.n	8008fb4 <USB_EPStartXfer+0x348>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	61bb      	str	r3, [r7, #24]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2250      	movs	r2, #80	; 0x50
 8008eee:	5a9b      	ldrh	r3, [r3, r2]
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	001a      	movs	r2, r3
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	189b      	adds	r3, r3, r2
 8008ef8:	61bb      	str	r3, [r7, #24]
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	00da      	lsls	r2, r3, #3
 8008f00:	69bb      	ldr	r3, [r7, #24]
 8008f02:	18d3      	adds	r3, r2, r3
 8008f04:	4a43      	ldr	r2, [pc, #268]	; (8009014 <USB_EPStartXfer+0x3a8>)
 8008f06:	4694      	mov	ip, r2
 8008f08:	4463      	add	r3, ip
 8008f0a:	617b      	str	r3, [r7, #20]
 8008f0c:	1d7b      	adds	r3, r7, #5
 8008f0e:	33ff      	adds	r3, #255	; 0xff
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d110      	bne.n	8008f38 <USB_EPStartXfer+0x2cc>
 8008f16:	697b      	ldr	r3, [r7, #20]
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	4a41      	ldr	r2, [pc, #260]	; (8009024 <USB_EPStartXfer+0x3b8>)
 8008f1e:	4013      	ands	r3, r2
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	801a      	strh	r2, [r3, #0]
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	881b      	ldrh	r3, [r3, #0]
 8008f2a:	b29b      	uxth	r3, r3
 8008f2c:	4a3e      	ldr	r2, [pc, #248]	; (8009028 <USB_EPStartXfer+0x3bc>)
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	801a      	strh	r2, [r3, #0]
 8008f36:	e05a      	b.n	8008fee <USB_EPStartXfer+0x382>
 8008f38:	1d7b      	adds	r3, r7, #5
 8008f3a:	33ff      	adds	r3, #255	; 0xff
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	2b3e      	cmp	r3, #62	; 0x3e
 8008f40:	d81a      	bhi.n	8008f78 <USB_EPStartXfer+0x30c>
 8008f42:	1d7b      	adds	r3, r7, #5
 8008f44:	33ff      	adds	r3, #255	; 0xff
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	085b      	lsrs	r3, r3, #1
 8008f4a:	21fc      	movs	r1, #252	; 0xfc
 8008f4c:	187a      	adds	r2, r7, r1
 8008f4e:	6013      	str	r3, [r2, #0]
 8008f50:	1d7b      	adds	r3, r7, #5
 8008f52:	33ff      	adds	r3, #255	; 0xff
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2201      	movs	r2, #1
 8008f58:	4013      	ands	r3, r2
 8008f5a:	d004      	beq.n	8008f66 <USB_EPStartXfer+0x2fa>
 8008f5c:	187b      	adds	r3, r7, r1
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	3301      	adds	r3, #1
 8008f62:	187a      	adds	r2, r7, r1
 8008f64:	6013      	str	r3, [r2, #0]
 8008f66:	23fc      	movs	r3, #252	; 0xfc
 8008f68:	18fb      	adds	r3, r7, r3
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	029b      	lsls	r3, r3, #10
 8008f70:	b29a      	uxth	r2, r3
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	801a      	strh	r2, [r3, #0]
 8008f76:	e03a      	b.n	8008fee <USB_EPStartXfer+0x382>
 8008f78:	1d7b      	adds	r3, r7, #5
 8008f7a:	33ff      	adds	r3, #255	; 0xff
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	095b      	lsrs	r3, r3, #5
 8008f80:	21fc      	movs	r1, #252	; 0xfc
 8008f82:	187a      	adds	r2, r7, r1
 8008f84:	6013      	str	r3, [r2, #0]
 8008f86:	1d7b      	adds	r3, r7, #5
 8008f88:	33ff      	adds	r3, #255	; 0xff
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	221f      	movs	r2, #31
 8008f8e:	4013      	ands	r3, r2
 8008f90:	d104      	bne.n	8008f9c <USB_EPStartXfer+0x330>
 8008f92:	187b      	adds	r3, r7, r1
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	3b01      	subs	r3, #1
 8008f98:	187a      	adds	r2, r7, r1
 8008f9a:	6013      	str	r3, [r2, #0]
 8008f9c:	23fc      	movs	r3, #252	; 0xfc
 8008f9e:	18fb      	adds	r3, r7, r3
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	029b      	lsls	r3, r3, #10
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	4a1f      	ldr	r2, [pc, #124]	; (8009028 <USB_EPStartXfer+0x3bc>)
 8008faa:	4313      	orrs	r3, r2
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	801a      	strh	r2, [r3, #0]
 8008fb2:	e01c      	b.n	8008fee <USB_EPStartXfer+0x382>
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	785b      	ldrb	r3, [r3, #1]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d118      	bne.n	8008fee <USB_EPStartXfer+0x382>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	623b      	str	r3, [r7, #32]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2250      	movs	r2, #80	; 0x50
 8008fc4:	5a9b      	ldrh	r3, [r3, r2]
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	001a      	movs	r2, r3
 8008fca:	6a3b      	ldr	r3, [r7, #32]
 8008fcc:	189b      	adds	r3, r3, r2
 8008fce:	623b      	str	r3, [r7, #32]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	00da      	lsls	r2, r3, #3
 8008fd6:	6a3b      	ldr	r3, [r7, #32]
 8008fd8:	18d3      	adds	r3, r2, r3
 8008fda:	4a0e      	ldr	r2, [pc, #56]	; (8009014 <USB_EPStartXfer+0x3a8>)
 8008fdc:	4694      	mov	ip, r2
 8008fde:	4463      	add	r3, ip
 8008fe0:	61fb      	str	r3, [r7, #28]
 8008fe2:	1d7b      	adds	r3, r7, #5
 8008fe4:	33ff      	adds	r3, #255	; 0xff
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008fee:	2076      	movs	r0, #118	; 0x76
 8008ff0:	183b      	adds	r3, r7, r0
 8008ff2:	683a      	ldr	r2, [r7, #0]
 8008ff4:	8912      	ldrh	r2, [r2, #8]
 8008ff6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	6959      	ldr	r1, [r3, #20]
 8008ffc:	1d7b      	adds	r3, r7, #5
 8008ffe:	33ff      	adds	r3, #255	; 0xff
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	b29c      	uxth	r4, r3
 8009004:	183b      	adds	r3, r7, r0
 8009006:	881a      	ldrh	r2, [r3, #0]
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	0023      	movs	r3, r4
 800900c:	f001 f822 	bl	800a054 <USB_WritePMA>
 8009010:	e301      	b.n	8009616 <USB_EPStartXfer+0x9aa>
 8009012:	46c0      	nop			; (mov r8, r8)
 8009014:	00000402 	.word	0x00000402
 8009018:	ffff8f8f 	.word	0xffff8f8f
 800901c:	ffff8180 	.word	0xffff8180
 8009020:	00000406 	.word	0x00000406
 8009024:	ffff83ff 	.word	0xffff83ff
 8009028:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	785b      	ldrb	r3, [r3, #1]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d166      	bne.n	8009102 <USB_EPStartXfer+0x496>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	64bb      	str	r3, [r7, #72]	; 0x48
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2250      	movs	r2, #80	; 0x50
 800903c:	5a9b      	ldrh	r3, [r3, r2]
 800903e:	b29b      	uxth	r3, r3
 8009040:	001a      	movs	r2, r3
 8009042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009044:	189b      	adds	r3, r3, r2
 8009046:	64bb      	str	r3, [r7, #72]	; 0x48
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	00da      	lsls	r2, r3, #3
 800904e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009050:	18d3      	adds	r3, r2, r3
 8009052:	4ac3      	ldr	r2, [pc, #780]	; (8009360 <USB_EPStartXfer+0x6f4>)
 8009054:	4694      	mov	ip, r2
 8009056:	4463      	add	r3, ip
 8009058:	647b      	str	r3, [r7, #68]	; 0x44
 800905a:	1d7b      	adds	r3, r7, #5
 800905c:	33ff      	adds	r3, #255	; 0xff
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d110      	bne.n	8009086 <USB_EPStartXfer+0x41a>
 8009064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009066:	881b      	ldrh	r3, [r3, #0]
 8009068:	b29b      	uxth	r3, r3
 800906a:	4abe      	ldr	r2, [pc, #760]	; (8009364 <USB_EPStartXfer+0x6f8>)
 800906c:	4013      	ands	r3, r2
 800906e:	b29a      	uxth	r2, r3
 8009070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009072:	801a      	strh	r2, [r3, #0]
 8009074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	b29b      	uxth	r3, r3
 800907a:	4abb      	ldr	r2, [pc, #748]	; (8009368 <USB_EPStartXfer+0x6fc>)
 800907c:	4313      	orrs	r3, r2
 800907e:	b29a      	uxth	r2, r3
 8009080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009082:	801a      	strh	r2, [r3, #0]
 8009084:	e05a      	b.n	800913c <USB_EPStartXfer+0x4d0>
 8009086:	1d7b      	adds	r3, r7, #5
 8009088:	33ff      	adds	r3, #255	; 0xff
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b3e      	cmp	r3, #62	; 0x3e
 800908e:	d81a      	bhi.n	80090c6 <USB_EPStartXfer+0x45a>
 8009090:	1d7b      	adds	r3, r7, #5
 8009092:	33ff      	adds	r3, #255	; 0xff
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	085b      	lsrs	r3, r3, #1
 8009098:	21f8      	movs	r1, #248	; 0xf8
 800909a:	187a      	adds	r2, r7, r1
 800909c:	6013      	str	r3, [r2, #0]
 800909e:	1d7b      	adds	r3, r7, #5
 80090a0:	33ff      	adds	r3, #255	; 0xff
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2201      	movs	r2, #1
 80090a6:	4013      	ands	r3, r2
 80090a8:	d004      	beq.n	80090b4 <USB_EPStartXfer+0x448>
 80090aa:	187b      	adds	r3, r7, r1
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	3301      	adds	r3, #1
 80090b0:	187a      	adds	r2, r7, r1
 80090b2:	6013      	str	r3, [r2, #0]
 80090b4:	23f8      	movs	r3, #248	; 0xf8
 80090b6:	18fb      	adds	r3, r7, r3
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	029b      	lsls	r3, r3, #10
 80090be:	b29a      	uxth	r2, r3
 80090c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090c2:	801a      	strh	r2, [r3, #0]
 80090c4:	e03a      	b.n	800913c <USB_EPStartXfer+0x4d0>
 80090c6:	1d7b      	adds	r3, r7, #5
 80090c8:	33ff      	adds	r3, #255	; 0xff
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	095b      	lsrs	r3, r3, #5
 80090ce:	21f8      	movs	r1, #248	; 0xf8
 80090d0:	187a      	adds	r2, r7, r1
 80090d2:	6013      	str	r3, [r2, #0]
 80090d4:	1d7b      	adds	r3, r7, #5
 80090d6:	33ff      	adds	r3, #255	; 0xff
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	221f      	movs	r2, #31
 80090dc:	4013      	ands	r3, r2
 80090de:	d104      	bne.n	80090ea <USB_EPStartXfer+0x47e>
 80090e0:	187b      	adds	r3, r7, r1
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	3b01      	subs	r3, #1
 80090e6:	187a      	adds	r2, r7, r1
 80090e8:	6013      	str	r3, [r2, #0]
 80090ea:	23f8      	movs	r3, #248	; 0xf8
 80090ec:	18fb      	adds	r3, r7, r3
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	029b      	lsls	r3, r3, #10
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	4a9c      	ldr	r2, [pc, #624]	; (8009368 <USB_EPStartXfer+0x6fc>)
 80090f8:	4313      	orrs	r3, r2
 80090fa:	b29a      	uxth	r2, r3
 80090fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090fe:	801a      	strh	r2, [r3, #0]
 8009100:	e01c      	b.n	800913c <USB_EPStartXfer+0x4d0>
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	785b      	ldrb	r3, [r3, #1]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d118      	bne.n	800913c <USB_EPStartXfer+0x4d0>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	653b      	str	r3, [r7, #80]	; 0x50
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2250      	movs	r2, #80	; 0x50
 8009112:	5a9b      	ldrh	r3, [r3, r2]
 8009114:	b29b      	uxth	r3, r3
 8009116:	001a      	movs	r2, r3
 8009118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800911a:	189b      	adds	r3, r3, r2
 800911c:	653b      	str	r3, [r7, #80]	; 0x50
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	00da      	lsls	r2, r3, #3
 8009124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009126:	18d3      	adds	r3, r2, r3
 8009128:	4a8d      	ldr	r2, [pc, #564]	; (8009360 <USB_EPStartXfer+0x6f4>)
 800912a:	4694      	mov	ip, r2
 800912c:	4463      	add	r3, ip
 800912e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009130:	1d7b      	adds	r3, r7, #5
 8009132:	33ff      	adds	r3, #255	; 0xff
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	b29a      	uxth	r2, r3
 8009138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800913a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800913c:	2076      	movs	r0, #118	; 0x76
 800913e:	183b      	adds	r3, r7, r0
 8009140:	683a      	ldr	r2, [r7, #0]
 8009142:	8912      	ldrh	r2, [r2, #8]
 8009144:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	6959      	ldr	r1, [r3, #20]
 800914a:	1d7b      	adds	r3, r7, #5
 800914c:	33ff      	adds	r3, #255	; 0xff
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	b29c      	uxth	r4, r3
 8009152:	183b      	adds	r3, r7, r0
 8009154:	881a      	ldrh	r2, [r3, #0]
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	0023      	movs	r3, r4
 800915a:	f000 ff7b 	bl	800a054 <USB_WritePMA>
            ep->xfer_buff += len;
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	695a      	ldr	r2, [r3, #20]
 8009162:	1d7b      	adds	r3, r7, #5
 8009164:	33ff      	adds	r3, #255	; 0xff
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	18d2      	adds	r2, r2, r3
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	6a1a      	ldr	r2, [r3, #32]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	429a      	cmp	r2, r3
 8009178:	d908      	bls.n	800918c <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	6a1a      	ldr	r2, [r3, #32]
 800917e:	1d7b      	adds	r3, r7, #5
 8009180:	33ff      	adds	r3, #255	; 0xff
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	1ad2      	subs	r2, r2, r3
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	621a      	str	r2, [r3, #32]
 800918a:	e007      	b.n	800919c <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	6a1b      	ldr	r3, [r3, #32]
 8009190:	1d7a      	adds	r2, r7, #5
 8009192:	32ff      	adds	r2, #255	; 0xff
 8009194:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	2200      	movs	r2, #0
 800919a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	643b      	str	r3, [r7, #64]	; 0x40
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	785b      	ldrb	r3, [r3, #1]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d166      	bne.n	8009276 <USB_EPStartXfer+0x60a>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2250      	movs	r2, #80	; 0x50
 80091b0:	5a9b      	ldrh	r3, [r3, r2]
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	001a      	movs	r2, r3
 80091b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b8:	189b      	adds	r3, r3, r2
 80091ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	00da      	lsls	r2, r3, #3
 80091c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c4:	18d3      	adds	r3, r2, r3
 80091c6:	4a69      	ldr	r2, [pc, #420]	; (800936c <USB_EPStartXfer+0x700>)
 80091c8:	4694      	mov	ip, r2
 80091ca:	4463      	add	r3, ip
 80091cc:	637b      	str	r3, [r7, #52]	; 0x34
 80091ce:	1d7b      	adds	r3, r7, #5
 80091d0:	33ff      	adds	r3, #255	; 0xff
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d110      	bne.n	80091fa <USB_EPStartXfer+0x58e>
 80091d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091da:	881b      	ldrh	r3, [r3, #0]
 80091dc:	b29b      	uxth	r3, r3
 80091de:	4a61      	ldr	r2, [pc, #388]	; (8009364 <USB_EPStartXfer+0x6f8>)
 80091e0:	4013      	ands	r3, r2
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e6:	801a      	strh	r2, [r3, #0]
 80091e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091ea:	881b      	ldrh	r3, [r3, #0]
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	4a5e      	ldr	r2, [pc, #376]	; (8009368 <USB_EPStartXfer+0x6fc>)
 80091f0:	4313      	orrs	r3, r2
 80091f2:	b29a      	uxth	r2, r3
 80091f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f6:	801a      	strh	r2, [r3, #0]
 80091f8:	e058      	b.n	80092ac <USB_EPStartXfer+0x640>
 80091fa:	1d7b      	adds	r3, r7, #5
 80091fc:	33ff      	adds	r3, #255	; 0xff
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2b3e      	cmp	r3, #62	; 0x3e
 8009202:	d81a      	bhi.n	800923a <USB_EPStartXfer+0x5ce>
 8009204:	1d7b      	adds	r3, r7, #5
 8009206:	33ff      	adds	r3, #255	; 0xff
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	085b      	lsrs	r3, r3, #1
 800920c:	21f4      	movs	r1, #244	; 0xf4
 800920e:	187a      	adds	r2, r7, r1
 8009210:	6013      	str	r3, [r2, #0]
 8009212:	1d7b      	adds	r3, r7, #5
 8009214:	33ff      	adds	r3, #255	; 0xff
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2201      	movs	r2, #1
 800921a:	4013      	ands	r3, r2
 800921c:	d004      	beq.n	8009228 <USB_EPStartXfer+0x5bc>
 800921e:	187b      	adds	r3, r7, r1
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	3301      	adds	r3, #1
 8009224:	187a      	adds	r2, r7, r1
 8009226:	6013      	str	r3, [r2, #0]
 8009228:	23f4      	movs	r3, #244	; 0xf4
 800922a:	18fb      	adds	r3, r7, r3
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	b29b      	uxth	r3, r3
 8009230:	029b      	lsls	r3, r3, #10
 8009232:	b29a      	uxth	r2, r3
 8009234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009236:	801a      	strh	r2, [r3, #0]
 8009238:	e038      	b.n	80092ac <USB_EPStartXfer+0x640>
 800923a:	1d7b      	adds	r3, r7, #5
 800923c:	33ff      	adds	r3, #255	; 0xff
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	095b      	lsrs	r3, r3, #5
 8009242:	21f4      	movs	r1, #244	; 0xf4
 8009244:	187a      	adds	r2, r7, r1
 8009246:	6013      	str	r3, [r2, #0]
 8009248:	1d7b      	adds	r3, r7, #5
 800924a:	33ff      	adds	r3, #255	; 0xff
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	221f      	movs	r2, #31
 8009250:	4013      	ands	r3, r2
 8009252:	d104      	bne.n	800925e <USB_EPStartXfer+0x5f2>
 8009254:	187b      	adds	r3, r7, r1
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	3b01      	subs	r3, #1
 800925a:	187a      	adds	r2, r7, r1
 800925c:	6013      	str	r3, [r2, #0]
 800925e:	23f4      	movs	r3, #244	; 0xf4
 8009260:	18fb      	adds	r3, r7, r3
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	b29b      	uxth	r3, r3
 8009266:	029b      	lsls	r3, r3, #10
 8009268:	b29b      	uxth	r3, r3
 800926a:	4a3f      	ldr	r2, [pc, #252]	; (8009368 <USB_EPStartXfer+0x6fc>)
 800926c:	4313      	orrs	r3, r2
 800926e:	b29a      	uxth	r2, r3
 8009270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009272:	801a      	strh	r2, [r3, #0]
 8009274:	e01a      	b.n	80092ac <USB_EPStartXfer+0x640>
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	785b      	ldrb	r3, [r3, #1]
 800927a:	2b01      	cmp	r3, #1
 800927c:	d116      	bne.n	80092ac <USB_EPStartXfer+0x640>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2250      	movs	r2, #80	; 0x50
 8009282:	5a9b      	ldrh	r3, [r3, r2]
 8009284:	b29b      	uxth	r3, r3
 8009286:	001a      	movs	r2, r3
 8009288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800928a:	189b      	adds	r3, r3, r2
 800928c:	643b      	str	r3, [r7, #64]	; 0x40
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	00da      	lsls	r2, r3, #3
 8009294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009296:	18d3      	adds	r3, r2, r3
 8009298:	4a34      	ldr	r2, [pc, #208]	; (800936c <USB_EPStartXfer+0x700>)
 800929a:	4694      	mov	ip, r2
 800929c:	4463      	add	r3, ip
 800929e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092a0:	1d7b      	adds	r3, r7, #5
 80092a2:	33ff      	adds	r3, #255	; 0xff
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	b29a      	uxth	r2, r3
 80092a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80092ac:	2076      	movs	r0, #118	; 0x76
 80092ae:	183b      	adds	r3, r7, r0
 80092b0:	683a      	ldr	r2, [r7, #0]
 80092b2:	8952      	ldrh	r2, [r2, #10]
 80092b4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	6959      	ldr	r1, [r3, #20]
 80092ba:	1d7b      	adds	r3, r7, #5
 80092bc:	33ff      	adds	r3, #255	; 0xff
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	b29c      	uxth	r4, r3
 80092c2:	183b      	adds	r3, r7, r0
 80092c4:	881a      	ldrh	r2, [r3, #0]
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	0023      	movs	r3, r4
 80092ca:	f000 fec3 	bl	800a054 <USB_WritePMA>
 80092ce:	e1a2      	b.n	8009616 <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	6a1b      	ldr	r3, [r3, #32]
 80092d4:	1d7a      	adds	r2, r7, #5
 80092d6:	32ff      	adds	r2, #255	; 0xff
 80092d8:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	18d3      	adds	r3, r2, r3
 80092e4:	881b      	ldrh	r3, [r3, #0]
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	2062      	movs	r0, #98	; 0x62
 80092ea:	183b      	adds	r3, r7, r0
 80092ec:	4920      	ldr	r1, [pc, #128]	; (8009370 <USB_EPStartXfer+0x704>)
 80092ee:	400a      	ands	r2, r1
 80092f0:	801a      	strh	r2, [r3, #0]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	18d3      	adds	r3, r2, r3
 80092fc:	183a      	adds	r2, r7, r0
 80092fe:	8812      	ldrh	r2, [r2, #0]
 8009300:	491c      	ldr	r1, [pc, #112]	; (8009374 <USB_EPStartXfer+0x708>)
 8009302:	430a      	orrs	r2, r1
 8009304:	b292      	uxth	r2, r2
 8009306:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2250      	movs	r2, #80	; 0x50
 8009310:	5a9b      	ldrh	r3, [r3, r2]
 8009312:	b29b      	uxth	r3, r3
 8009314:	001a      	movs	r2, r3
 8009316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009318:	189b      	adds	r3, r3, r2
 800931a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	00da      	lsls	r2, r3, #3
 8009322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009324:	18d3      	adds	r3, r2, r3
 8009326:	4a0e      	ldr	r2, [pc, #56]	; (8009360 <USB_EPStartXfer+0x6f4>)
 8009328:	4694      	mov	ip, r2
 800932a:	4463      	add	r3, ip
 800932c:	65bb      	str	r3, [r7, #88]	; 0x58
 800932e:	1d7b      	adds	r3, r7, #5
 8009330:	33ff      	adds	r3, #255	; 0xff
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	b29a      	uxth	r2, r3
 8009336:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009338:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800933a:	2076      	movs	r0, #118	; 0x76
 800933c:	183b      	adds	r3, r7, r0
 800933e:	683a      	ldr	r2, [r7, #0]
 8009340:	8912      	ldrh	r2, [r2, #8]
 8009342:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	6959      	ldr	r1, [r3, #20]
 8009348:	1d7b      	adds	r3, r7, #5
 800934a:	33ff      	adds	r3, #255	; 0xff
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	b29c      	uxth	r4, r3
 8009350:	183b      	adds	r3, r7, r0
 8009352:	881a      	ldrh	r2, [r3, #0]
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	0023      	movs	r3, r4
 8009358:	f000 fe7c 	bl	800a054 <USB_WritePMA>
 800935c:	e15b      	b.n	8009616 <USB_EPStartXfer+0x9aa>
 800935e:	46c0      	nop			; (mov r8, r8)
 8009360:	00000402 	.word	0x00000402
 8009364:	ffff83ff 	.word	0xffff83ff
 8009368:	ffff8000 	.word	0xffff8000
 800936c:	00000406 	.word	0x00000406
 8009370:	ffff8e8f 	.word	0xffff8e8f
 8009374:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	6a1a      	ldr	r2, [r3, #32]
 800937c:	1d7b      	adds	r3, r7, #5
 800937e:	33ff      	adds	r3, #255	; 0xff
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	1ad2      	subs	r2, r2, r3
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	18d3      	adds	r3, r2, r3
 8009392:	881b      	ldrh	r3, [r3, #0]
 8009394:	b29b      	uxth	r3, r3
 8009396:	001a      	movs	r2, r3
 8009398:	2340      	movs	r3, #64	; 0x40
 800939a:	4013      	ands	r3, r2
 800939c:	d100      	bne.n	80093a0 <USB_EPStartXfer+0x734>
 800939e:	e099      	b.n	80094d4 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	673b      	str	r3, [r7, #112]	; 0x70
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	785b      	ldrb	r3, [r3, #1]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d166      	bne.n	800947a <USB_EPStartXfer+0x80e>
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2250      	movs	r2, #80	; 0x50
 80093b4:	5a9b      	ldrh	r3, [r3, r2]
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	001a      	movs	r2, r3
 80093ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80093bc:	189b      	adds	r3, r3, r2
 80093be:	66bb      	str	r3, [r7, #104]	; 0x68
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	00da      	lsls	r2, r3, #3
 80093c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80093c8:	18d3      	adds	r3, r2, r3
 80093ca:	4ad0      	ldr	r2, [pc, #832]	; (800970c <USB_EPStartXfer+0xaa0>)
 80093cc:	4694      	mov	ip, r2
 80093ce:	4463      	add	r3, ip
 80093d0:	667b      	str	r3, [r7, #100]	; 0x64
 80093d2:	1d7b      	adds	r3, r7, #5
 80093d4:	33ff      	adds	r3, #255	; 0xff
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d110      	bne.n	80093fe <USB_EPStartXfer+0x792>
 80093dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093de:	881b      	ldrh	r3, [r3, #0]
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	4acb      	ldr	r2, [pc, #812]	; (8009710 <USB_EPStartXfer+0xaa4>)
 80093e4:	4013      	ands	r3, r2
 80093e6:	b29a      	uxth	r2, r3
 80093e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093ea:	801a      	strh	r2, [r3, #0]
 80093ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093ee:	881b      	ldrh	r3, [r3, #0]
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	4ac8      	ldr	r2, [pc, #800]	; (8009714 <USB_EPStartXfer+0xaa8>)
 80093f4:	4313      	orrs	r3, r2
 80093f6:	b29a      	uxth	r2, r3
 80093f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093fa:	801a      	strh	r2, [r3, #0]
 80093fc:	e058      	b.n	80094b0 <USB_EPStartXfer+0x844>
 80093fe:	1d7b      	adds	r3, r7, #5
 8009400:	33ff      	adds	r3, #255	; 0xff
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b3e      	cmp	r3, #62	; 0x3e
 8009406:	d81a      	bhi.n	800943e <USB_EPStartXfer+0x7d2>
 8009408:	1d7b      	adds	r3, r7, #5
 800940a:	33ff      	adds	r3, #255	; 0xff
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	085b      	lsrs	r3, r3, #1
 8009410:	21f0      	movs	r1, #240	; 0xf0
 8009412:	187a      	adds	r2, r7, r1
 8009414:	6013      	str	r3, [r2, #0]
 8009416:	1d7b      	adds	r3, r7, #5
 8009418:	33ff      	adds	r3, #255	; 0xff
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2201      	movs	r2, #1
 800941e:	4013      	ands	r3, r2
 8009420:	d004      	beq.n	800942c <USB_EPStartXfer+0x7c0>
 8009422:	187b      	adds	r3, r7, r1
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	3301      	adds	r3, #1
 8009428:	187a      	adds	r2, r7, r1
 800942a:	6013      	str	r3, [r2, #0]
 800942c:	23f0      	movs	r3, #240	; 0xf0
 800942e:	18fb      	adds	r3, r7, r3
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	b29b      	uxth	r3, r3
 8009434:	029b      	lsls	r3, r3, #10
 8009436:	b29a      	uxth	r2, r3
 8009438:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800943a:	801a      	strh	r2, [r3, #0]
 800943c:	e038      	b.n	80094b0 <USB_EPStartXfer+0x844>
 800943e:	1d7b      	adds	r3, r7, #5
 8009440:	33ff      	adds	r3, #255	; 0xff
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	095b      	lsrs	r3, r3, #5
 8009446:	21f0      	movs	r1, #240	; 0xf0
 8009448:	187a      	adds	r2, r7, r1
 800944a:	6013      	str	r3, [r2, #0]
 800944c:	1d7b      	adds	r3, r7, #5
 800944e:	33ff      	adds	r3, #255	; 0xff
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	221f      	movs	r2, #31
 8009454:	4013      	ands	r3, r2
 8009456:	d104      	bne.n	8009462 <USB_EPStartXfer+0x7f6>
 8009458:	187b      	adds	r3, r7, r1
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	3b01      	subs	r3, #1
 800945e:	187a      	adds	r2, r7, r1
 8009460:	6013      	str	r3, [r2, #0]
 8009462:	23f0      	movs	r3, #240	; 0xf0
 8009464:	18fb      	adds	r3, r7, r3
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	b29b      	uxth	r3, r3
 800946a:	029b      	lsls	r3, r3, #10
 800946c:	b29b      	uxth	r3, r3
 800946e:	4aa9      	ldr	r2, [pc, #676]	; (8009714 <USB_EPStartXfer+0xaa8>)
 8009470:	4313      	orrs	r3, r2
 8009472:	b29a      	uxth	r2, r3
 8009474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009476:	801a      	strh	r2, [r3, #0]
 8009478:	e01a      	b.n	80094b0 <USB_EPStartXfer+0x844>
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	785b      	ldrb	r3, [r3, #1]
 800947e:	2b01      	cmp	r3, #1
 8009480:	d116      	bne.n	80094b0 <USB_EPStartXfer+0x844>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2250      	movs	r2, #80	; 0x50
 8009486:	5a9b      	ldrh	r3, [r3, r2]
 8009488:	b29b      	uxth	r3, r3
 800948a:	001a      	movs	r2, r3
 800948c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800948e:	189b      	adds	r3, r3, r2
 8009490:	673b      	str	r3, [r7, #112]	; 0x70
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	00da      	lsls	r2, r3, #3
 8009498:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800949a:	18d3      	adds	r3, r2, r3
 800949c:	4a9b      	ldr	r2, [pc, #620]	; (800970c <USB_EPStartXfer+0xaa0>)
 800949e:	4694      	mov	ip, r2
 80094a0:	4463      	add	r3, ip
 80094a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80094a4:	1d7b      	adds	r3, r7, #5
 80094a6:	33ff      	adds	r3, #255	; 0xff
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	b29a      	uxth	r2, r3
 80094ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094ae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80094b0:	2076      	movs	r0, #118	; 0x76
 80094b2:	183b      	adds	r3, r7, r0
 80094b4:	683a      	ldr	r2, [r7, #0]
 80094b6:	8952      	ldrh	r2, [r2, #10]
 80094b8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	6959      	ldr	r1, [r3, #20]
 80094be:	1d7b      	adds	r3, r7, #5
 80094c0:	33ff      	adds	r3, #255	; 0xff
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	b29c      	uxth	r4, r3
 80094c6:	183b      	adds	r3, r7, r0
 80094c8:	881a      	ldrh	r2, [r3, #0]
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	0023      	movs	r3, r4
 80094ce:	f000 fdc1 	bl	800a054 <USB_WritePMA>
 80094d2:	e0a0      	b.n	8009616 <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	785b      	ldrb	r3, [r3, #1]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d166      	bne.n	80095aa <USB_EPStartXfer+0x93e>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2250      	movs	r2, #80	; 0x50
 80094e4:	5a9b      	ldrh	r3, [r3, r2]
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	001a      	movs	r2, r3
 80094ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80094ec:	189b      	adds	r3, r3, r2
 80094ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	00da      	lsls	r2, r3, #3
 80094f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80094f8:	18d3      	adds	r3, r2, r3
 80094fa:	4a87      	ldr	r2, [pc, #540]	; (8009718 <USB_EPStartXfer+0xaac>)
 80094fc:	4694      	mov	ip, r2
 80094fe:	4463      	add	r3, ip
 8009500:	67bb      	str	r3, [r7, #120]	; 0x78
 8009502:	1d7b      	adds	r3, r7, #5
 8009504:	33ff      	adds	r3, #255	; 0xff
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d110      	bne.n	800952e <USB_EPStartXfer+0x8c2>
 800950c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800950e:	881b      	ldrh	r3, [r3, #0]
 8009510:	b29b      	uxth	r3, r3
 8009512:	4a7f      	ldr	r2, [pc, #508]	; (8009710 <USB_EPStartXfer+0xaa4>)
 8009514:	4013      	ands	r3, r2
 8009516:	b29a      	uxth	r2, r3
 8009518:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800951a:	801a      	strh	r2, [r3, #0]
 800951c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800951e:	881b      	ldrh	r3, [r3, #0]
 8009520:	b29b      	uxth	r3, r3
 8009522:	4a7c      	ldr	r2, [pc, #496]	; (8009714 <USB_EPStartXfer+0xaa8>)
 8009524:	4313      	orrs	r3, r2
 8009526:	b29a      	uxth	r2, r3
 8009528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800952a:	801a      	strh	r2, [r3, #0]
 800952c:	e062      	b.n	80095f4 <USB_EPStartXfer+0x988>
 800952e:	1d7b      	adds	r3, r7, #5
 8009530:	33ff      	adds	r3, #255	; 0xff
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2b3e      	cmp	r3, #62	; 0x3e
 8009536:	d81a      	bhi.n	800956e <USB_EPStartXfer+0x902>
 8009538:	1d7b      	adds	r3, r7, #5
 800953a:	33ff      	adds	r3, #255	; 0xff
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	085b      	lsrs	r3, r3, #1
 8009540:	21ec      	movs	r1, #236	; 0xec
 8009542:	187a      	adds	r2, r7, r1
 8009544:	6013      	str	r3, [r2, #0]
 8009546:	1d7b      	adds	r3, r7, #5
 8009548:	33ff      	adds	r3, #255	; 0xff
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2201      	movs	r2, #1
 800954e:	4013      	ands	r3, r2
 8009550:	d004      	beq.n	800955c <USB_EPStartXfer+0x8f0>
 8009552:	187b      	adds	r3, r7, r1
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	3301      	adds	r3, #1
 8009558:	187a      	adds	r2, r7, r1
 800955a:	6013      	str	r3, [r2, #0]
 800955c:	23ec      	movs	r3, #236	; 0xec
 800955e:	18fb      	adds	r3, r7, r3
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	b29b      	uxth	r3, r3
 8009564:	029b      	lsls	r3, r3, #10
 8009566:	b29a      	uxth	r2, r3
 8009568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800956a:	801a      	strh	r2, [r3, #0]
 800956c:	e042      	b.n	80095f4 <USB_EPStartXfer+0x988>
 800956e:	1d7b      	adds	r3, r7, #5
 8009570:	33ff      	adds	r3, #255	; 0xff
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	095b      	lsrs	r3, r3, #5
 8009576:	21ec      	movs	r1, #236	; 0xec
 8009578:	187a      	adds	r2, r7, r1
 800957a:	6013      	str	r3, [r2, #0]
 800957c:	1d7b      	adds	r3, r7, #5
 800957e:	33ff      	adds	r3, #255	; 0xff
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	221f      	movs	r2, #31
 8009584:	4013      	ands	r3, r2
 8009586:	d104      	bne.n	8009592 <USB_EPStartXfer+0x926>
 8009588:	187b      	adds	r3, r7, r1
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	3b01      	subs	r3, #1
 800958e:	187a      	adds	r2, r7, r1
 8009590:	6013      	str	r3, [r2, #0]
 8009592:	23ec      	movs	r3, #236	; 0xec
 8009594:	18fb      	adds	r3, r7, r3
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	b29b      	uxth	r3, r3
 800959a:	029b      	lsls	r3, r3, #10
 800959c:	b29b      	uxth	r3, r3
 800959e:	4a5d      	ldr	r2, [pc, #372]	; (8009714 <USB_EPStartXfer+0xaa8>)
 80095a0:	4313      	orrs	r3, r2
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095a6:	801a      	strh	r2, [r3, #0]
 80095a8:	e024      	b.n	80095f4 <USB_EPStartXfer+0x988>
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	785b      	ldrb	r3, [r3, #1]
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d120      	bne.n	80095f4 <USB_EPStartXfer+0x988>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2184      	movs	r1, #132	; 0x84
 80095b6:	187a      	adds	r2, r7, r1
 80095b8:	6013      	str	r3, [r2, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2250      	movs	r2, #80	; 0x50
 80095be:	5a9b      	ldrh	r3, [r3, r2]
 80095c0:	b29b      	uxth	r3, r3
 80095c2:	001a      	movs	r2, r3
 80095c4:	187b      	adds	r3, r7, r1
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	189b      	adds	r3, r3, r2
 80095ca:	187a      	adds	r2, r7, r1
 80095cc:	6013      	str	r3, [r2, #0]
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	00da      	lsls	r2, r3, #3
 80095d4:	187b      	adds	r3, r7, r1
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	18d3      	adds	r3, r2, r3
 80095da:	4a4f      	ldr	r2, [pc, #316]	; (8009718 <USB_EPStartXfer+0xaac>)
 80095dc:	4694      	mov	ip, r2
 80095de:	4463      	add	r3, ip
 80095e0:	2180      	movs	r1, #128	; 0x80
 80095e2:	187a      	adds	r2, r7, r1
 80095e4:	6013      	str	r3, [r2, #0]
 80095e6:	1d7b      	adds	r3, r7, #5
 80095e8:	33ff      	adds	r3, #255	; 0xff
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	187b      	adds	r3, r7, r1
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80095f4:	2076      	movs	r0, #118	; 0x76
 80095f6:	183b      	adds	r3, r7, r0
 80095f8:	683a      	ldr	r2, [r7, #0]
 80095fa:	8912      	ldrh	r2, [r2, #8]
 80095fc:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	6959      	ldr	r1, [r3, #20]
 8009602:	1d7b      	adds	r3, r7, #5
 8009604:	33ff      	adds	r3, #255	; 0xff
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	b29c      	uxth	r4, r3
 800960a:	183b      	adds	r3, r7, r0
 800960c:	881a      	ldrh	r2, [r3, #0]
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	0023      	movs	r3, r4
 8009612:	f000 fd1f 	bl	800a054 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	18d3      	adds	r3, r2, r3
 8009620:	881b      	ldrh	r3, [r3, #0]
 8009622:	b29a      	uxth	r2, r3
 8009624:	200a      	movs	r0, #10
 8009626:	183b      	adds	r3, r7, r0
 8009628:	493c      	ldr	r1, [pc, #240]	; (800971c <USB_EPStartXfer+0xab0>)
 800962a:	400a      	ands	r2, r1
 800962c:	801a      	strh	r2, [r3, #0]
 800962e:	183b      	adds	r3, r7, r0
 8009630:	183a      	adds	r2, r7, r0
 8009632:	8812      	ldrh	r2, [r2, #0]
 8009634:	2110      	movs	r1, #16
 8009636:	404a      	eors	r2, r1
 8009638:	801a      	strh	r2, [r3, #0]
 800963a:	183b      	adds	r3, r7, r0
 800963c:	183a      	adds	r2, r7, r0
 800963e:	8812      	ldrh	r2, [r2, #0]
 8009640:	2120      	movs	r1, #32
 8009642:	404a      	eors	r2, r1
 8009644:	801a      	strh	r2, [r3, #0]
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	781b      	ldrb	r3, [r3, #0]
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	18d3      	adds	r3, r2, r3
 8009650:	183a      	adds	r2, r7, r0
 8009652:	8812      	ldrh	r2, [r2, #0]
 8009654:	4932      	ldr	r1, [pc, #200]	; (8009720 <USB_EPStartXfer+0xab4>)
 8009656:	430a      	orrs	r2, r1
 8009658:	b292      	uxth	r2, r2
 800965a:	801a      	strh	r2, [r3, #0]
 800965c:	f000 fbaf 	bl	8009dbe <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	7b1b      	ldrb	r3, [r3, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d000      	beq.n	800966a <USB_EPStartXfer+0x9fe>
 8009668:	e09e      	b.n	80097a8 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	699a      	ldr	r2, [r3, #24]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	429a      	cmp	r2, r3
 8009674:	d90d      	bls.n	8009692 <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	1d7a      	adds	r2, r7, #5
 800967c:	32ff      	adds	r2, #255	; 0xff
 800967e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	699a      	ldr	r2, [r3, #24]
 8009684:	1d7b      	adds	r3, r7, #5
 8009686:	33ff      	adds	r3, #255	; 0xff
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	1ad2      	subs	r2, r2, r3
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	619a      	str	r2, [r3, #24]
 8009690:	e007      	b.n	80096a2 <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	699b      	ldr	r3, [r3, #24]
 8009696:	1d7a      	adds	r2, r7, #5
 8009698:	32ff      	adds	r2, #255	; 0xff
 800969a:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	2200      	movs	r2, #0
 80096a0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2190      	movs	r1, #144	; 0x90
 80096a6:	187a      	adds	r2, r7, r1
 80096a8:	6013      	str	r3, [r2, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2250      	movs	r2, #80	; 0x50
 80096ae:	5a9b      	ldrh	r3, [r3, r2]
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	001a      	movs	r2, r3
 80096b4:	187b      	adds	r3, r7, r1
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	189b      	adds	r3, r3, r2
 80096ba:	187a      	adds	r2, r7, r1
 80096bc:	6013      	str	r3, [r2, #0]
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	00da      	lsls	r2, r3, #3
 80096c4:	187b      	adds	r3, r7, r1
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	18d3      	adds	r3, r2, r3
 80096ca:	4a10      	ldr	r2, [pc, #64]	; (800970c <USB_EPStartXfer+0xaa0>)
 80096cc:	4694      	mov	ip, r2
 80096ce:	4463      	add	r3, ip
 80096d0:	218c      	movs	r1, #140	; 0x8c
 80096d2:	187a      	adds	r2, r7, r1
 80096d4:	6013      	str	r3, [r2, #0]
 80096d6:	1d7b      	adds	r3, r7, #5
 80096d8:	33ff      	adds	r3, #255	; 0xff
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d121      	bne.n	8009724 <USB_EPStartXfer+0xab8>
 80096e0:	187b      	adds	r3, r7, r1
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	881b      	ldrh	r3, [r3, #0]
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	4a09      	ldr	r2, [pc, #36]	; (8009710 <USB_EPStartXfer+0xaa4>)
 80096ea:	4013      	ands	r3, r2
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	187b      	adds	r3, r7, r1
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	801a      	strh	r2, [r3, #0]
 80096f4:	187b      	adds	r3, r7, r1
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	881b      	ldrh	r3, [r3, #0]
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	4a05      	ldr	r2, [pc, #20]	; (8009714 <USB_EPStartXfer+0xaa8>)
 80096fe:	4313      	orrs	r3, r2
 8009700:	b29a      	uxth	r2, r3
 8009702:	187b      	adds	r3, r7, r1
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	801a      	strh	r2, [r3, #0]
 8009708:	e334      	b.n	8009d74 <USB_EPStartXfer+0x1108>
 800970a:	46c0      	nop			; (mov r8, r8)
 800970c:	00000406 	.word	0x00000406
 8009710:	ffff83ff 	.word	0xffff83ff
 8009714:	ffff8000 	.word	0xffff8000
 8009718:	00000402 	.word	0x00000402
 800971c:	ffff8fbf 	.word	0xffff8fbf
 8009720:	ffff8080 	.word	0xffff8080
 8009724:	1d7b      	adds	r3, r7, #5
 8009726:	33ff      	adds	r3, #255	; 0xff
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	2b3e      	cmp	r3, #62	; 0x3e
 800972c:	d81c      	bhi.n	8009768 <USB_EPStartXfer+0xafc>
 800972e:	1d7b      	adds	r3, r7, #5
 8009730:	33ff      	adds	r3, #255	; 0xff
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	085b      	lsrs	r3, r3, #1
 8009736:	21e8      	movs	r1, #232	; 0xe8
 8009738:	187a      	adds	r2, r7, r1
 800973a:	6013      	str	r3, [r2, #0]
 800973c:	1d7b      	adds	r3, r7, #5
 800973e:	33ff      	adds	r3, #255	; 0xff
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2201      	movs	r2, #1
 8009744:	4013      	ands	r3, r2
 8009746:	d004      	beq.n	8009752 <USB_EPStartXfer+0xae6>
 8009748:	187b      	adds	r3, r7, r1
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	3301      	adds	r3, #1
 800974e:	187a      	adds	r2, r7, r1
 8009750:	6013      	str	r3, [r2, #0]
 8009752:	23e8      	movs	r3, #232	; 0xe8
 8009754:	18fb      	adds	r3, r7, r3
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	b29b      	uxth	r3, r3
 800975a:	029b      	lsls	r3, r3, #10
 800975c:	b29a      	uxth	r2, r3
 800975e:	238c      	movs	r3, #140	; 0x8c
 8009760:	18fb      	adds	r3, r7, r3
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	801a      	strh	r2, [r3, #0]
 8009766:	e305      	b.n	8009d74 <USB_EPStartXfer+0x1108>
 8009768:	1d7b      	adds	r3, r7, #5
 800976a:	33ff      	adds	r3, #255	; 0xff
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	095b      	lsrs	r3, r3, #5
 8009770:	21e8      	movs	r1, #232	; 0xe8
 8009772:	187a      	adds	r2, r7, r1
 8009774:	6013      	str	r3, [r2, #0]
 8009776:	1d7b      	adds	r3, r7, #5
 8009778:	33ff      	adds	r3, #255	; 0xff
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	221f      	movs	r2, #31
 800977e:	4013      	ands	r3, r2
 8009780:	d104      	bne.n	800978c <USB_EPStartXfer+0xb20>
 8009782:	187b      	adds	r3, r7, r1
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	3b01      	subs	r3, #1
 8009788:	187a      	adds	r2, r7, r1
 800978a:	6013      	str	r3, [r2, #0]
 800978c:	23e8      	movs	r3, #232	; 0xe8
 800978e:	18fb      	adds	r3, r7, r3
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	b29b      	uxth	r3, r3
 8009794:	029b      	lsls	r3, r3, #10
 8009796:	b29b      	uxth	r3, r3
 8009798:	4aca      	ldr	r2, [pc, #808]	; (8009ac4 <USB_EPStartXfer+0xe58>)
 800979a:	4313      	orrs	r3, r2
 800979c:	b29a      	uxth	r2, r3
 800979e:	238c      	movs	r3, #140	; 0x8c
 80097a0:	18fb      	adds	r3, r7, r3
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	801a      	strh	r2, [r3, #0]
 80097a6:	e2e5      	b.n	8009d74 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	78db      	ldrb	r3, [r3, #3]
 80097ac:	2b02      	cmp	r3, #2
 80097ae:	d000      	beq.n	80097b2 <USB_EPStartXfer+0xb46>
 80097b0:	e16f      	b.n	8009a92 <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	785b      	ldrb	r3, [r3, #1]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d16f      	bne.n	800989a <USB_EPStartXfer+0xc2e>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	21ac      	movs	r1, #172	; 0xac
 80097be:	187a      	adds	r2, r7, r1
 80097c0:	6013      	str	r3, [r2, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2250      	movs	r2, #80	; 0x50
 80097c6:	5a9b      	ldrh	r3, [r3, r2]
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	001a      	movs	r2, r3
 80097cc:	187b      	adds	r3, r7, r1
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	189b      	adds	r3, r3, r2
 80097d2:	187a      	adds	r2, r7, r1
 80097d4:	6013      	str	r3, [r2, #0]
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	00da      	lsls	r2, r3, #3
 80097dc:	187b      	adds	r3, r7, r1
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	18d3      	adds	r3, r2, r3
 80097e2:	4ab9      	ldr	r2, [pc, #740]	; (8009ac8 <USB_EPStartXfer+0xe5c>)
 80097e4:	4694      	mov	ip, r2
 80097e6:	4463      	add	r3, ip
 80097e8:	21a8      	movs	r1, #168	; 0xa8
 80097ea:	187a      	adds	r2, r7, r1
 80097ec:	6013      	str	r3, [r2, #0]
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d114      	bne.n	8009820 <USB_EPStartXfer+0xbb4>
 80097f6:	187b      	adds	r3, r7, r1
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	881b      	ldrh	r3, [r3, #0]
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	4ab3      	ldr	r2, [pc, #716]	; (8009acc <USB_EPStartXfer+0xe60>)
 8009800:	4013      	ands	r3, r2
 8009802:	b29a      	uxth	r2, r3
 8009804:	187b      	adds	r3, r7, r1
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	801a      	strh	r2, [r3, #0]
 800980a:	187b      	adds	r3, r7, r1
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	881b      	ldrh	r3, [r3, #0]
 8009810:	b29b      	uxth	r3, r3
 8009812:	4aac      	ldr	r2, [pc, #688]	; (8009ac4 <USB_EPStartXfer+0xe58>)
 8009814:	4313      	orrs	r3, r2
 8009816:	b29a      	uxth	r2, r3
 8009818:	187b      	adds	r3, r7, r1
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	801a      	strh	r2, [r3, #0]
 800981e:	e060      	b.n	80098e2 <USB_EPStartXfer+0xc76>
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	2b3e      	cmp	r3, #62	; 0x3e
 8009826:	d81a      	bhi.n	800985e <USB_EPStartXfer+0xbf2>
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	085b      	lsrs	r3, r3, #1
 800982e:	21e4      	movs	r1, #228	; 0xe4
 8009830:	187a      	adds	r2, r7, r1
 8009832:	6013      	str	r3, [r2, #0]
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	2201      	movs	r2, #1
 800983a:	4013      	ands	r3, r2
 800983c:	d004      	beq.n	8009848 <USB_EPStartXfer+0xbdc>
 800983e:	187b      	adds	r3, r7, r1
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3301      	adds	r3, #1
 8009844:	187a      	adds	r2, r7, r1
 8009846:	6013      	str	r3, [r2, #0]
 8009848:	23e4      	movs	r3, #228	; 0xe4
 800984a:	18fb      	adds	r3, r7, r3
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	b29b      	uxth	r3, r3
 8009850:	029b      	lsls	r3, r3, #10
 8009852:	b29a      	uxth	r2, r3
 8009854:	23a8      	movs	r3, #168	; 0xa8
 8009856:	18fb      	adds	r3, r7, r3
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	801a      	strh	r2, [r3, #0]
 800985c:	e041      	b.n	80098e2 <USB_EPStartXfer+0xc76>
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	095b      	lsrs	r3, r3, #5
 8009864:	21e4      	movs	r1, #228	; 0xe4
 8009866:	187a      	adds	r2, r7, r1
 8009868:	6013      	str	r3, [r2, #0]
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	221f      	movs	r2, #31
 8009870:	4013      	ands	r3, r2
 8009872:	d104      	bne.n	800987e <USB_EPStartXfer+0xc12>
 8009874:	187b      	adds	r3, r7, r1
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	3b01      	subs	r3, #1
 800987a:	187a      	adds	r2, r7, r1
 800987c:	6013      	str	r3, [r2, #0]
 800987e:	23e4      	movs	r3, #228	; 0xe4
 8009880:	18fb      	adds	r3, r7, r3
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	b29b      	uxth	r3, r3
 8009886:	029b      	lsls	r3, r3, #10
 8009888:	b29b      	uxth	r3, r3
 800988a:	4a8e      	ldr	r2, [pc, #568]	; (8009ac4 <USB_EPStartXfer+0xe58>)
 800988c:	4313      	orrs	r3, r2
 800988e:	b29a      	uxth	r2, r3
 8009890:	23a8      	movs	r3, #168	; 0xa8
 8009892:	18fb      	adds	r3, r7, r3
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	801a      	strh	r2, [r3, #0]
 8009898:	e023      	b.n	80098e2 <USB_EPStartXfer+0xc76>
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	785b      	ldrb	r3, [r3, #1]
 800989e:	2b01      	cmp	r3, #1
 80098a0:	d11f      	bne.n	80098e2 <USB_EPStartXfer+0xc76>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	21b4      	movs	r1, #180	; 0xb4
 80098a6:	187a      	adds	r2, r7, r1
 80098a8:	6013      	str	r3, [r2, #0]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2250      	movs	r2, #80	; 0x50
 80098ae:	5a9b      	ldrh	r3, [r3, r2]
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	001a      	movs	r2, r3
 80098b4:	187b      	adds	r3, r7, r1
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	189b      	adds	r3, r3, r2
 80098ba:	187a      	adds	r2, r7, r1
 80098bc:	6013      	str	r3, [r2, #0]
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	00da      	lsls	r2, r3, #3
 80098c4:	187b      	adds	r3, r7, r1
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	18d3      	adds	r3, r2, r3
 80098ca:	4a7f      	ldr	r2, [pc, #508]	; (8009ac8 <USB_EPStartXfer+0xe5c>)
 80098cc:	4694      	mov	ip, r2
 80098ce:	4463      	add	r3, ip
 80098d0:	21b0      	movs	r1, #176	; 0xb0
 80098d2:	187a      	adds	r2, r7, r1
 80098d4:	6013      	str	r3, [r2, #0]
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	b29a      	uxth	r2, r3
 80098dc:	187b      	adds	r3, r7, r1
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	801a      	strh	r2, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	22a4      	movs	r2, #164	; 0xa4
 80098e6:	18ba      	adds	r2, r7, r2
 80098e8:	6013      	str	r3, [r2, #0]
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	785b      	ldrb	r3, [r3, #1]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d16f      	bne.n	80099d2 <USB_EPStartXfer+0xd66>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	219c      	movs	r1, #156	; 0x9c
 80098f6:	187a      	adds	r2, r7, r1
 80098f8:	6013      	str	r3, [r2, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2250      	movs	r2, #80	; 0x50
 80098fe:	5a9b      	ldrh	r3, [r3, r2]
 8009900:	b29b      	uxth	r3, r3
 8009902:	001a      	movs	r2, r3
 8009904:	187b      	adds	r3, r7, r1
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	189b      	adds	r3, r3, r2
 800990a:	187a      	adds	r2, r7, r1
 800990c:	6013      	str	r3, [r2, #0]
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	00da      	lsls	r2, r3, #3
 8009914:	187b      	adds	r3, r7, r1
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	18d3      	adds	r3, r2, r3
 800991a:	4a6d      	ldr	r2, [pc, #436]	; (8009ad0 <USB_EPStartXfer+0xe64>)
 800991c:	4694      	mov	ip, r2
 800991e:	4463      	add	r3, ip
 8009920:	2198      	movs	r1, #152	; 0x98
 8009922:	187a      	adds	r2, r7, r1
 8009924:	6013      	str	r3, [r2, #0]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	691b      	ldr	r3, [r3, #16]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d114      	bne.n	8009958 <USB_EPStartXfer+0xcec>
 800992e:	187b      	adds	r3, r7, r1
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	881b      	ldrh	r3, [r3, #0]
 8009934:	b29b      	uxth	r3, r3
 8009936:	4a65      	ldr	r2, [pc, #404]	; (8009acc <USB_EPStartXfer+0xe60>)
 8009938:	4013      	ands	r3, r2
 800993a:	b29a      	uxth	r2, r3
 800993c:	187b      	adds	r3, r7, r1
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	801a      	strh	r2, [r3, #0]
 8009942:	187b      	adds	r3, r7, r1
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	b29b      	uxth	r3, r3
 800994a:	4a5e      	ldr	r2, [pc, #376]	; (8009ac4 <USB_EPStartXfer+0xe58>)
 800994c:	4313      	orrs	r3, r2
 800994e:	b29a      	uxth	r2, r3
 8009950:	187b      	adds	r3, r7, r1
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	801a      	strh	r2, [r3, #0]
 8009956:	e05d      	b.n	8009a14 <USB_EPStartXfer+0xda8>
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	2b3e      	cmp	r3, #62	; 0x3e
 800995e:	d81a      	bhi.n	8009996 <USB_EPStartXfer+0xd2a>
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	085b      	lsrs	r3, r3, #1
 8009966:	21e0      	movs	r1, #224	; 0xe0
 8009968:	187a      	adds	r2, r7, r1
 800996a:	6013      	str	r3, [r2, #0]
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	691b      	ldr	r3, [r3, #16]
 8009970:	2201      	movs	r2, #1
 8009972:	4013      	ands	r3, r2
 8009974:	d004      	beq.n	8009980 <USB_EPStartXfer+0xd14>
 8009976:	187b      	adds	r3, r7, r1
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	3301      	adds	r3, #1
 800997c:	187a      	adds	r2, r7, r1
 800997e:	6013      	str	r3, [r2, #0]
 8009980:	23e0      	movs	r3, #224	; 0xe0
 8009982:	18fb      	adds	r3, r7, r3
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	b29b      	uxth	r3, r3
 8009988:	029b      	lsls	r3, r3, #10
 800998a:	b29a      	uxth	r2, r3
 800998c:	2398      	movs	r3, #152	; 0x98
 800998e:	18fb      	adds	r3, r7, r3
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	801a      	strh	r2, [r3, #0]
 8009994:	e03e      	b.n	8009a14 <USB_EPStartXfer+0xda8>
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	691b      	ldr	r3, [r3, #16]
 800999a:	095b      	lsrs	r3, r3, #5
 800999c:	21e0      	movs	r1, #224	; 0xe0
 800999e:	187a      	adds	r2, r7, r1
 80099a0:	6013      	str	r3, [r2, #0]
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	221f      	movs	r2, #31
 80099a8:	4013      	ands	r3, r2
 80099aa:	d104      	bne.n	80099b6 <USB_EPStartXfer+0xd4a>
 80099ac:	187b      	adds	r3, r7, r1
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	3b01      	subs	r3, #1
 80099b2:	187a      	adds	r2, r7, r1
 80099b4:	6013      	str	r3, [r2, #0]
 80099b6:	23e0      	movs	r3, #224	; 0xe0
 80099b8:	18fb      	adds	r3, r7, r3
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	b29b      	uxth	r3, r3
 80099be:	029b      	lsls	r3, r3, #10
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	4a40      	ldr	r2, [pc, #256]	; (8009ac4 <USB_EPStartXfer+0xe58>)
 80099c4:	4313      	orrs	r3, r2
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	2398      	movs	r3, #152	; 0x98
 80099ca:	18fb      	adds	r3, r7, r3
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	801a      	strh	r2, [r3, #0]
 80099d0:	e020      	b.n	8009a14 <USB_EPStartXfer+0xda8>
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	785b      	ldrb	r3, [r3, #1]
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d11c      	bne.n	8009a14 <USB_EPStartXfer+0xda8>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2250      	movs	r2, #80	; 0x50
 80099de:	5a9b      	ldrh	r3, [r3, r2]
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	001a      	movs	r2, r3
 80099e4:	21a4      	movs	r1, #164	; 0xa4
 80099e6:	187b      	adds	r3, r7, r1
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	189b      	adds	r3, r3, r2
 80099ec:	187a      	adds	r2, r7, r1
 80099ee:	6013      	str	r3, [r2, #0]
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	00da      	lsls	r2, r3, #3
 80099f6:	187b      	adds	r3, r7, r1
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	18d3      	adds	r3, r2, r3
 80099fc:	4a34      	ldr	r2, [pc, #208]	; (8009ad0 <USB_EPStartXfer+0xe64>)
 80099fe:	4694      	mov	ip, r2
 8009a00:	4463      	add	r3, ip
 8009a02:	21a0      	movs	r1, #160	; 0xa0
 8009a04:	187a      	adds	r2, r7, r1
 8009a06:	6013      	str	r3, [r2, #0]
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	b29a      	uxth	r2, r3
 8009a0e:	187b      	adds	r3, r7, r1
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	69db      	ldr	r3, [r3, #28]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d100      	bne.n	8009a1e <USB_EPStartXfer+0xdb2>
 8009a1c:	e1aa      	b.n	8009d74 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	18d2      	adds	r2, r2, r3
 8009a28:	2196      	movs	r1, #150	; 0x96
 8009a2a:	187b      	adds	r3, r7, r1
 8009a2c:	8812      	ldrh	r2, [r2, #0]
 8009a2e:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009a30:	187b      	adds	r3, r7, r1
 8009a32:	881a      	ldrh	r2, [r3, #0]
 8009a34:	2380      	movs	r3, #128	; 0x80
 8009a36:	01db      	lsls	r3, r3, #7
 8009a38:	4013      	ands	r3, r2
 8009a3a:	d004      	beq.n	8009a46 <USB_EPStartXfer+0xdda>
 8009a3c:	187b      	adds	r3, r7, r1
 8009a3e:	881b      	ldrh	r3, [r3, #0]
 8009a40:	2240      	movs	r2, #64	; 0x40
 8009a42:	4013      	ands	r3, r2
 8009a44:	d10d      	bne.n	8009a62 <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009a46:	2196      	movs	r1, #150	; 0x96
 8009a48:	187b      	adds	r3, r7, r1
 8009a4a:	881a      	ldrh	r2, [r3, #0]
 8009a4c:	2380      	movs	r3, #128	; 0x80
 8009a4e:	01db      	lsls	r3, r3, #7
 8009a50:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009a52:	d000      	beq.n	8009a56 <USB_EPStartXfer+0xdea>
 8009a54:	e18e      	b.n	8009d74 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009a56:	187b      	adds	r3, r7, r1
 8009a58:	881b      	ldrh	r3, [r3, #0]
 8009a5a:	2240      	movs	r2, #64	; 0x40
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	d000      	beq.n	8009a62 <USB_EPStartXfer+0xdf6>
 8009a60:	e188      	b.n	8009d74 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	18d3      	adds	r3, r2, r3
 8009a6c:	881b      	ldrh	r3, [r3, #0]
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	2094      	movs	r0, #148	; 0x94
 8009a72:	183b      	adds	r3, r7, r0
 8009a74:	4917      	ldr	r1, [pc, #92]	; (8009ad4 <USB_EPStartXfer+0xe68>)
 8009a76:	400a      	ands	r2, r1
 8009a78:	801a      	strh	r2, [r3, #0]
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	18d3      	adds	r3, r2, r3
 8009a84:	183a      	adds	r2, r7, r0
 8009a86:	8812      	ldrh	r2, [r2, #0]
 8009a88:	4913      	ldr	r1, [pc, #76]	; (8009ad8 <USB_EPStartXfer+0xe6c>)
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	b292      	uxth	r2, r2
 8009a8e:	801a      	strh	r2, [r3, #0]
 8009a90:	e170      	b.n	8009d74 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	78db      	ldrb	r3, [r3, #3]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	d000      	beq.n	8009a9c <USB_EPStartXfer+0xe30>
 8009a9a:	e169      	b.n	8009d70 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	699a      	ldr	r2, [r3, #24]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d919      	bls.n	8009adc <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	1d7a      	adds	r2, r7, #5
 8009aae:	32ff      	adds	r2, #255	; 0xff
 8009ab0:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	699a      	ldr	r2, [r3, #24]
 8009ab6:	1d7b      	adds	r3, r7, #5
 8009ab8:	33ff      	adds	r3, #255	; 0xff
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	1ad2      	subs	r2, r2, r3
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	619a      	str	r2, [r3, #24]
 8009ac2:	e013      	b.n	8009aec <USB_EPStartXfer+0xe80>
 8009ac4:	ffff8000 	.word	0xffff8000
 8009ac8:	00000402 	.word	0x00000402
 8009acc:	ffff83ff 	.word	0xffff83ff
 8009ad0:	00000406 	.word	0x00000406
 8009ad4:	ffff8f8f 	.word	0xffff8f8f
 8009ad8:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	1d7a      	adds	r2, r7, #5
 8009ae2:	32ff      	adds	r2, #255	; 0xff
 8009ae4:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	785b      	ldrb	r3, [r3, #1]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d000      	beq.n	8009af6 <USB_EPStartXfer+0xe8a>
 8009af4:	e075      	b.n	8009be2 <USB_EPStartXfer+0xf76>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	21cc      	movs	r1, #204	; 0xcc
 8009afa:	187a      	adds	r2, r7, r1
 8009afc:	6013      	str	r3, [r2, #0]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2250      	movs	r2, #80	; 0x50
 8009b02:	5a9b      	ldrh	r3, [r3, r2]
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	001a      	movs	r2, r3
 8009b08:	187b      	adds	r3, r7, r1
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	189b      	adds	r3, r3, r2
 8009b0e:	187a      	adds	r2, r7, r1
 8009b10:	6013      	str	r3, [r2, #0]
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	00da      	lsls	r2, r3, #3
 8009b18:	187b      	adds	r3, r7, r1
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	18d3      	adds	r3, r2, r3
 8009b1e:	4aaa      	ldr	r2, [pc, #680]	; (8009dc8 <USB_EPStartXfer+0x115c>)
 8009b20:	4694      	mov	ip, r2
 8009b22:	4463      	add	r3, ip
 8009b24:	21c8      	movs	r1, #200	; 0xc8
 8009b26:	187a      	adds	r2, r7, r1
 8009b28:	6013      	str	r3, [r2, #0]
 8009b2a:	1d7b      	adds	r3, r7, #5
 8009b2c:	33ff      	adds	r3, #255	; 0xff
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d114      	bne.n	8009b5e <USB_EPStartXfer+0xef2>
 8009b34:	187b      	adds	r3, r7, r1
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	881b      	ldrh	r3, [r3, #0]
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	4aa3      	ldr	r2, [pc, #652]	; (8009dcc <USB_EPStartXfer+0x1160>)
 8009b3e:	4013      	ands	r3, r2
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	187b      	adds	r3, r7, r1
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	801a      	strh	r2, [r3, #0]
 8009b48:	187b      	adds	r3, r7, r1
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	881b      	ldrh	r3, [r3, #0]
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	4a9f      	ldr	r2, [pc, #636]	; (8009dd0 <USB_EPStartXfer+0x1164>)
 8009b52:	4313      	orrs	r3, r2
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	187b      	adds	r3, r7, r1
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	801a      	strh	r2, [r3, #0]
 8009b5c:	e066      	b.n	8009c2c <USB_EPStartXfer+0xfc0>
 8009b5e:	1d7b      	adds	r3, r7, #5
 8009b60:	33ff      	adds	r3, #255	; 0xff
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2b3e      	cmp	r3, #62	; 0x3e
 8009b66:	d81c      	bhi.n	8009ba2 <USB_EPStartXfer+0xf36>
 8009b68:	1d7b      	adds	r3, r7, #5
 8009b6a:	33ff      	adds	r3, #255	; 0xff
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	085b      	lsrs	r3, r3, #1
 8009b70:	21dc      	movs	r1, #220	; 0xdc
 8009b72:	187a      	adds	r2, r7, r1
 8009b74:	6013      	str	r3, [r2, #0]
 8009b76:	1d7b      	adds	r3, r7, #5
 8009b78:	33ff      	adds	r3, #255	; 0xff
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	4013      	ands	r3, r2
 8009b80:	d004      	beq.n	8009b8c <USB_EPStartXfer+0xf20>
 8009b82:	187b      	adds	r3, r7, r1
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	3301      	adds	r3, #1
 8009b88:	187a      	adds	r2, r7, r1
 8009b8a:	6013      	str	r3, [r2, #0]
 8009b8c:	23dc      	movs	r3, #220	; 0xdc
 8009b8e:	18fb      	adds	r3, r7, r3
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	029b      	lsls	r3, r3, #10
 8009b96:	b29a      	uxth	r2, r3
 8009b98:	23c8      	movs	r3, #200	; 0xc8
 8009b9a:	18fb      	adds	r3, r7, r3
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	801a      	strh	r2, [r3, #0]
 8009ba0:	e044      	b.n	8009c2c <USB_EPStartXfer+0xfc0>
 8009ba2:	1d7b      	adds	r3, r7, #5
 8009ba4:	33ff      	adds	r3, #255	; 0xff
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	095b      	lsrs	r3, r3, #5
 8009baa:	21dc      	movs	r1, #220	; 0xdc
 8009bac:	187a      	adds	r2, r7, r1
 8009bae:	6013      	str	r3, [r2, #0]
 8009bb0:	1d7b      	adds	r3, r7, #5
 8009bb2:	33ff      	adds	r3, #255	; 0xff
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	221f      	movs	r2, #31
 8009bb8:	4013      	ands	r3, r2
 8009bba:	d104      	bne.n	8009bc6 <USB_EPStartXfer+0xf5a>
 8009bbc:	187b      	adds	r3, r7, r1
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	187a      	adds	r2, r7, r1
 8009bc4:	6013      	str	r3, [r2, #0]
 8009bc6:	23dc      	movs	r3, #220	; 0xdc
 8009bc8:	18fb      	adds	r3, r7, r3
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	029b      	lsls	r3, r3, #10
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	4a7f      	ldr	r2, [pc, #508]	; (8009dd0 <USB_EPStartXfer+0x1164>)
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	b29a      	uxth	r2, r3
 8009bd8:	23c8      	movs	r3, #200	; 0xc8
 8009bda:	18fb      	adds	r3, r7, r3
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	801a      	strh	r2, [r3, #0]
 8009be0:	e024      	b.n	8009c2c <USB_EPStartXfer+0xfc0>
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	785b      	ldrb	r3, [r3, #1]
 8009be6:	2b01      	cmp	r3, #1
 8009be8:	d120      	bne.n	8009c2c <USB_EPStartXfer+0xfc0>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	21d4      	movs	r1, #212	; 0xd4
 8009bee:	187a      	adds	r2, r7, r1
 8009bf0:	6013      	str	r3, [r2, #0]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2250      	movs	r2, #80	; 0x50
 8009bf6:	5a9b      	ldrh	r3, [r3, r2]
 8009bf8:	b29b      	uxth	r3, r3
 8009bfa:	001a      	movs	r2, r3
 8009bfc:	187b      	adds	r3, r7, r1
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	189b      	adds	r3, r3, r2
 8009c02:	187a      	adds	r2, r7, r1
 8009c04:	6013      	str	r3, [r2, #0]
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	00da      	lsls	r2, r3, #3
 8009c0c:	187b      	adds	r3, r7, r1
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	18d3      	adds	r3, r2, r3
 8009c12:	4a6d      	ldr	r2, [pc, #436]	; (8009dc8 <USB_EPStartXfer+0x115c>)
 8009c14:	4694      	mov	ip, r2
 8009c16:	4463      	add	r3, ip
 8009c18:	21d0      	movs	r1, #208	; 0xd0
 8009c1a:	187a      	adds	r2, r7, r1
 8009c1c:	6013      	str	r3, [r2, #0]
 8009c1e:	1d7b      	adds	r3, r7, #5
 8009c20:	33ff      	adds	r3, #255	; 0xff
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	b29a      	uxth	r2, r3
 8009c26:	187b      	adds	r3, r7, r1
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	801a      	strh	r2, [r3, #0]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	22c4      	movs	r2, #196	; 0xc4
 8009c30:	18ba      	adds	r2, r7, r2
 8009c32:	6013      	str	r3, [r2, #0]
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	785b      	ldrb	r3, [r3, #1]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d000      	beq.n	8009c3e <USB_EPStartXfer+0xfd2>
 8009c3c:	e075      	b.n	8009d2a <USB_EPStartXfer+0x10be>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	21bc      	movs	r1, #188	; 0xbc
 8009c42:	187a      	adds	r2, r7, r1
 8009c44:	6013      	str	r3, [r2, #0]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2250      	movs	r2, #80	; 0x50
 8009c4a:	5a9b      	ldrh	r3, [r3, r2]
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	001a      	movs	r2, r3
 8009c50:	187b      	adds	r3, r7, r1
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	189b      	adds	r3, r3, r2
 8009c56:	187a      	adds	r2, r7, r1
 8009c58:	6013      	str	r3, [r2, #0]
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	00da      	lsls	r2, r3, #3
 8009c60:	187b      	adds	r3, r7, r1
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	18d3      	adds	r3, r2, r3
 8009c66:	4a5b      	ldr	r2, [pc, #364]	; (8009dd4 <USB_EPStartXfer+0x1168>)
 8009c68:	4694      	mov	ip, r2
 8009c6a:	4463      	add	r3, ip
 8009c6c:	21b8      	movs	r1, #184	; 0xb8
 8009c6e:	187a      	adds	r2, r7, r1
 8009c70:	6013      	str	r3, [r2, #0]
 8009c72:	1d7b      	adds	r3, r7, #5
 8009c74:	33ff      	adds	r3, #255	; 0xff
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d114      	bne.n	8009ca6 <USB_EPStartXfer+0x103a>
 8009c7c:	187b      	adds	r3, r7, r1
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	881b      	ldrh	r3, [r3, #0]
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	4a51      	ldr	r2, [pc, #324]	; (8009dcc <USB_EPStartXfer+0x1160>)
 8009c86:	4013      	ands	r3, r2
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	187b      	adds	r3, r7, r1
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	801a      	strh	r2, [r3, #0]
 8009c90:	187b      	adds	r3, r7, r1
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	881b      	ldrh	r3, [r3, #0]
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	4a4d      	ldr	r2, [pc, #308]	; (8009dd0 <USB_EPStartXfer+0x1164>)
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	187b      	adds	r3, r7, r1
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	801a      	strh	r2, [r3, #0]
 8009ca4:	e066      	b.n	8009d74 <USB_EPStartXfer+0x1108>
 8009ca6:	1d7b      	adds	r3, r7, #5
 8009ca8:	33ff      	adds	r3, #255	; 0xff
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b3e      	cmp	r3, #62	; 0x3e
 8009cae:	d81c      	bhi.n	8009cea <USB_EPStartXfer+0x107e>
 8009cb0:	1d7b      	adds	r3, r7, #5
 8009cb2:	33ff      	adds	r3, #255	; 0xff
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	085b      	lsrs	r3, r3, #1
 8009cb8:	21d8      	movs	r1, #216	; 0xd8
 8009cba:	187a      	adds	r2, r7, r1
 8009cbc:	6013      	str	r3, [r2, #0]
 8009cbe:	1d7b      	adds	r3, r7, #5
 8009cc0:	33ff      	adds	r3, #255	; 0xff
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	4013      	ands	r3, r2
 8009cc8:	d004      	beq.n	8009cd4 <USB_EPStartXfer+0x1068>
 8009cca:	187b      	adds	r3, r7, r1
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	3301      	adds	r3, #1
 8009cd0:	187a      	adds	r2, r7, r1
 8009cd2:	6013      	str	r3, [r2, #0]
 8009cd4:	23d8      	movs	r3, #216	; 0xd8
 8009cd6:	18fb      	adds	r3, r7, r3
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	029b      	lsls	r3, r3, #10
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	23b8      	movs	r3, #184	; 0xb8
 8009ce2:	18fb      	adds	r3, r7, r3
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	801a      	strh	r2, [r3, #0]
 8009ce8:	e044      	b.n	8009d74 <USB_EPStartXfer+0x1108>
 8009cea:	1d7b      	adds	r3, r7, #5
 8009cec:	33ff      	adds	r3, #255	; 0xff
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	095b      	lsrs	r3, r3, #5
 8009cf2:	21d8      	movs	r1, #216	; 0xd8
 8009cf4:	187a      	adds	r2, r7, r1
 8009cf6:	6013      	str	r3, [r2, #0]
 8009cf8:	1d7b      	adds	r3, r7, #5
 8009cfa:	33ff      	adds	r3, #255	; 0xff
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	221f      	movs	r2, #31
 8009d00:	4013      	ands	r3, r2
 8009d02:	d104      	bne.n	8009d0e <USB_EPStartXfer+0x10a2>
 8009d04:	187b      	adds	r3, r7, r1
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	187a      	adds	r2, r7, r1
 8009d0c:	6013      	str	r3, [r2, #0]
 8009d0e:	23d8      	movs	r3, #216	; 0xd8
 8009d10:	18fb      	adds	r3, r7, r3
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	b29b      	uxth	r3, r3
 8009d16:	029b      	lsls	r3, r3, #10
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	4a2d      	ldr	r2, [pc, #180]	; (8009dd0 <USB_EPStartXfer+0x1164>)
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	b29a      	uxth	r2, r3
 8009d20:	23b8      	movs	r3, #184	; 0xb8
 8009d22:	18fb      	adds	r3, r7, r3
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	801a      	strh	r2, [r3, #0]
 8009d28:	e024      	b.n	8009d74 <USB_EPStartXfer+0x1108>
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	785b      	ldrb	r3, [r3, #1]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d120      	bne.n	8009d74 <USB_EPStartXfer+0x1108>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2250      	movs	r2, #80	; 0x50
 8009d36:	5a9b      	ldrh	r3, [r3, r2]
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	001a      	movs	r2, r3
 8009d3c:	21c4      	movs	r1, #196	; 0xc4
 8009d3e:	187b      	adds	r3, r7, r1
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	189b      	adds	r3, r3, r2
 8009d44:	187a      	adds	r2, r7, r1
 8009d46:	6013      	str	r3, [r2, #0]
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	00da      	lsls	r2, r3, #3
 8009d4e:	187b      	adds	r3, r7, r1
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	18d3      	adds	r3, r2, r3
 8009d54:	4a1f      	ldr	r2, [pc, #124]	; (8009dd4 <USB_EPStartXfer+0x1168>)
 8009d56:	4694      	mov	ip, r2
 8009d58:	4463      	add	r3, ip
 8009d5a:	21c0      	movs	r1, #192	; 0xc0
 8009d5c:	187a      	adds	r2, r7, r1
 8009d5e:	6013      	str	r3, [r2, #0]
 8009d60:	1d7b      	adds	r3, r7, #5
 8009d62:	33ff      	adds	r3, #255	; 0xff
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	b29a      	uxth	r2, r3
 8009d68:	187b      	adds	r3, r7, r1
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	801a      	strh	r2, [r3, #0]
 8009d6e:	e001      	b.n	8009d74 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	e025      	b.n	8009dc0 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	18d3      	adds	r3, r2, r3
 8009d7e:	881b      	ldrh	r3, [r3, #0]
 8009d80:	b29a      	uxth	r2, r3
 8009d82:	208a      	movs	r0, #138	; 0x8a
 8009d84:	183b      	adds	r3, r7, r0
 8009d86:	4914      	ldr	r1, [pc, #80]	; (8009dd8 <USB_EPStartXfer+0x116c>)
 8009d88:	400a      	ands	r2, r1
 8009d8a:	801a      	strh	r2, [r3, #0]
 8009d8c:	183b      	adds	r3, r7, r0
 8009d8e:	183a      	adds	r2, r7, r0
 8009d90:	8812      	ldrh	r2, [r2, #0]
 8009d92:	2180      	movs	r1, #128	; 0x80
 8009d94:	0149      	lsls	r1, r1, #5
 8009d96:	404a      	eors	r2, r1
 8009d98:	801a      	strh	r2, [r3, #0]
 8009d9a:	183b      	adds	r3, r7, r0
 8009d9c:	183a      	adds	r2, r7, r0
 8009d9e:	8812      	ldrh	r2, [r2, #0]
 8009da0:	2180      	movs	r1, #128	; 0x80
 8009da2:	0189      	lsls	r1, r1, #6
 8009da4:	404a      	eors	r2, r1
 8009da6:	801a      	strh	r2, [r3, #0]
 8009da8:	687a      	ldr	r2, [r7, #4]
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	18d3      	adds	r3, r2, r3
 8009db2:	183a      	adds	r2, r7, r0
 8009db4:	8812      	ldrh	r2, [r2, #0]
 8009db6:	4909      	ldr	r1, [pc, #36]	; (8009ddc <USB_EPStartXfer+0x1170>)
 8009db8:	430a      	orrs	r2, r1
 8009dba:	b292      	uxth	r2, r2
 8009dbc:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	0018      	movs	r0, r3
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	b043      	add	sp, #268	; 0x10c
 8009dc6:	bd90      	pop	{r4, r7, pc}
 8009dc8:	00000402 	.word	0x00000402
 8009dcc:	ffff83ff 	.word	0xffff83ff
 8009dd0:	ffff8000 	.word	0xffff8000
 8009dd4:	00000406 	.word	0x00000406
 8009dd8:	ffffbf8f 	.word	0xffffbf8f
 8009ddc:	ffff8080 	.word	0xffff8080

08009de0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	785b      	ldrb	r3, [r3, #1]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d01d      	beq.n	8009e2e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	18d3      	adds	r3, r2, r3
 8009dfc:	881b      	ldrh	r3, [r3, #0]
 8009dfe:	b29a      	uxth	r2, r3
 8009e00:	200c      	movs	r0, #12
 8009e02:	183b      	adds	r3, r7, r0
 8009e04:	491b      	ldr	r1, [pc, #108]	; (8009e74 <USB_EPSetStall+0x94>)
 8009e06:	400a      	ands	r2, r1
 8009e08:	801a      	strh	r2, [r3, #0]
 8009e0a:	183b      	adds	r3, r7, r0
 8009e0c:	183a      	adds	r2, r7, r0
 8009e0e:	8812      	ldrh	r2, [r2, #0]
 8009e10:	2110      	movs	r1, #16
 8009e12:	404a      	eors	r2, r1
 8009e14:	801a      	strh	r2, [r3, #0]
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	18d3      	adds	r3, r2, r3
 8009e20:	183a      	adds	r2, r7, r0
 8009e22:	8812      	ldrh	r2, [r2, #0]
 8009e24:	4914      	ldr	r1, [pc, #80]	; (8009e78 <USB_EPSetStall+0x98>)
 8009e26:	430a      	orrs	r2, r1
 8009e28:	b292      	uxth	r2, r2
 8009e2a:	801a      	strh	r2, [r3, #0]
 8009e2c:	e01d      	b.n	8009e6a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	18d3      	adds	r3, r2, r3
 8009e38:	881b      	ldrh	r3, [r3, #0]
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	200e      	movs	r0, #14
 8009e3e:	183b      	adds	r3, r7, r0
 8009e40:	490e      	ldr	r1, [pc, #56]	; (8009e7c <USB_EPSetStall+0x9c>)
 8009e42:	400a      	ands	r2, r1
 8009e44:	801a      	strh	r2, [r3, #0]
 8009e46:	183b      	adds	r3, r7, r0
 8009e48:	183a      	adds	r2, r7, r0
 8009e4a:	8812      	ldrh	r2, [r2, #0]
 8009e4c:	2180      	movs	r1, #128	; 0x80
 8009e4e:	0149      	lsls	r1, r1, #5
 8009e50:	404a      	eors	r2, r1
 8009e52:	801a      	strh	r2, [r3, #0]
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	18d3      	adds	r3, r2, r3
 8009e5e:	183a      	adds	r2, r7, r0
 8009e60:	8812      	ldrh	r2, [r2, #0]
 8009e62:	4905      	ldr	r1, [pc, #20]	; (8009e78 <USB_EPSetStall+0x98>)
 8009e64:	430a      	orrs	r2, r1
 8009e66:	b292      	uxth	r2, r2
 8009e68:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	0018      	movs	r0, r3
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	b004      	add	sp, #16
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	ffff8fbf 	.word	0xffff8fbf
 8009e78:	ffff8080 	.word	0xffff8080
 8009e7c:	ffffbf8f 	.word	0xffffbf8f

08009e80 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b086      	sub	sp, #24
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	7b1b      	ldrb	r3, [r3, #12]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d000      	beq.n	8009e94 <USB_EPClearStall+0x14>
 8009e92:	e095      	b.n	8009fc0 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	785b      	ldrb	r3, [r3, #1]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d046      	beq.n	8009f2a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	781b      	ldrb	r3, [r3, #0]
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	18d2      	adds	r2, r2, r3
 8009ea6:	2110      	movs	r1, #16
 8009ea8:	187b      	adds	r3, r7, r1
 8009eaa:	8812      	ldrh	r2, [r2, #0]
 8009eac:	801a      	strh	r2, [r3, #0]
 8009eae:	187b      	adds	r3, r7, r1
 8009eb0:	881b      	ldrh	r3, [r3, #0]
 8009eb2:	2240      	movs	r2, #64	; 0x40
 8009eb4:	4013      	ands	r3, r2
 8009eb6:	d016      	beq.n	8009ee6 <USB_EPClearStall+0x66>
 8009eb8:	687a      	ldr	r2, [r7, #4]
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	18d3      	adds	r3, r2, r3
 8009ec2:	881b      	ldrh	r3, [r3, #0]
 8009ec4:	b29a      	uxth	r2, r3
 8009ec6:	200e      	movs	r0, #14
 8009ec8:	183b      	adds	r3, r7, r0
 8009eca:	4940      	ldr	r1, [pc, #256]	; (8009fcc <USB_EPClearStall+0x14c>)
 8009ecc:	400a      	ands	r2, r1
 8009ece:	801a      	strh	r2, [r3, #0]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	18d3      	adds	r3, r2, r3
 8009eda:	183a      	adds	r2, r7, r0
 8009edc:	8812      	ldrh	r2, [r2, #0]
 8009ede:	493c      	ldr	r1, [pc, #240]	; (8009fd0 <USB_EPClearStall+0x150>)
 8009ee0:	430a      	orrs	r2, r1
 8009ee2:	b292      	uxth	r2, r2
 8009ee4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	78db      	ldrb	r3, [r3, #3]
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d068      	beq.n	8009fc0 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	18d3      	adds	r3, r2, r3
 8009ef8:	881b      	ldrh	r3, [r3, #0]
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	200c      	movs	r0, #12
 8009efe:	183b      	adds	r3, r7, r0
 8009f00:	4934      	ldr	r1, [pc, #208]	; (8009fd4 <USB_EPClearStall+0x154>)
 8009f02:	400a      	ands	r2, r1
 8009f04:	801a      	strh	r2, [r3, #0]
 8009f06:	183b      	adds	r3, r7, r0
 8009f08:	183a      	adds	r2, r7, r0
 8009f0a:	8812      	ldrh	r2, [r2, #0]
 8009f0c:	2120      	movs	r1, #32
 8009f0e:	404a      	eors	r2, r1
 8009f10:	801a      	strh	r2, [r3, #0]
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	18d3      	adds	r3, r2, r3
 8009f1c:	183a      	adds	r2, r7, r0
 8009f1e:	8812      	ldrh	r2, [r2, #0]
 8009f20:	492d      	ldr	r1, [pc, #180]	; (8009fd8 <USB_EPClearStall+0x158>)
 8009f22:	430a      	orrs	r2, r1
 8009f24:	b292      	uxth	r2, r2
 8009f26:	801a      	strh	r2, [r3, #0]
 8009f28:	e04a      	b.n	8009fc0 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	009b      	lsls	r3, r3, #2
 8009f32:	18d2      	adds	r2, r2, r3
 8009f34:	2116      	movs	r1, #22
 8009f36:	187b      	adds	r3, r7, r1
 8009f38:	8812      	ldrh	r2, [r2, #0]
 8009f3a:	801a      	strh	r2, [r3, #0]
 8009f3c:	187b      	adds	r3, r7, r1
 8009f3e:	881a      	ldrh	r2, [r3, #0]
 8009f40:	2380      	movs	r3, #128	; 0x80
 8009f42:	01db      	lsls	r3, r3, #7
 8009f44:	4013      	ands	r3, r2
 8009f46:	d016      	beq.n	8009f76 <USB_EPClearStall+0xf6>
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	009b      	lsls	r3, r3, #2
 8009f50:	18d3      	adds	r3, r2, r3
 8009f52:	881b      	ldrh	r3, [r3, #0]
 8009f54:	b29a      	uxth	r2, r3
 8009f56:	2014      	movs	r0, #20
 8009f58:	183b      	adds	r3, r7, r0
 8009f5a:	491c      	ldr	r1, [pc, #112]	; (8009fcc <USB_EPClearStall+0x14c>)
 8009f5c:	400a      	ands	r2, r1
 8009f5e:	801a      	strh	r2, [r3, #0]
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	18d3      	adds	r3, r2, r3
 8009f6a:	183a      	adds	r2, r7, r0
 8009f6c:	8812      	ldrh	r2, [r2, #0]
 8009f6e:	491b      	ldr	r1, [pc, #108]	; (8009fdc <USB_EPClearStall+0x15c>)
 8009f70:	430a      	orrs	r2, r1
 8009f72:	b292      	uxth	r2, r2
 8009f74:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	18d3      	adds	r3, r2, r3
 8009f80:	881b      	ldrh	r3, [r3, #0]
 8009f82:	b29a      	uxth	r2, r3
 8009f84:	2012      	movs	r0, #18
 8009f86:	183b      	adds	r3, r7, r0
 8009f88:	4915      	ldr	r1, [pc, #84]	; (8009fe0 <USB_EPClearStall+0x160>)
 8009f8a:	400a      	ands	r2, r1
 8009f8c:	801a      	strh	r2, [r3, #0]
 8009f8e:	183b      	adds	r3, r7, r0
 8009f90:	183a      	adds	r2, r7, r0
 8009f92:	8812      	ldrh	r2, [r2, #0]
 8009f94:	2180      	movs	r1, #128	; 0x80
 8009f96:	0149      	lsls	r1, r1, #5
 8009f98:	404a      	eors	r2, r1
 8009f9a:	801a      	strh	r2, [r3, #0]
 8009f9c:	183b      	adds	r3, r7, r0
 8009f9e:	183a      	adds	r2, r7, r0
 8009fa0:	8812      	ldrh	r2, [r2, #0]
 8009fa2:	2180      	movs	r1, #128	; 0x80
 8009fa4:	0189      	lsls	r1, r1, #6
 8009fa6:	404a      	eors	r2, r1
 8009fa8:	801a      	strh	r2, [r3, #0]
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	18d3      	adds	r3, r2, r3
 8009fb4:	183a      	adds	r2, r7, r0
 8009fb6:	8812      	ldrh	r2, [r2, #0]
 8009fb8:	4907      	ldr	r1, [pc, #28]	; (8009fd8 <USB_EPClearStall+0x158>)
 8009fba:	430a      	orrs	r2, r1
 8009fbc:	b292      	uxth	r2, r2
 8009fbe:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	0018      	movs	r0, r3
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	b006      	add	sp, #24
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	46c0      	nop			; (mov r8, r8)
 8009fcc:	ffff8f8f 	.word	0xffff8f8f
 8009fd0:	ffff80c0 	.word	0xffff80c0
 8009fd4:	ffff8fbf 	.word	0xffff8fbf
 8009fd8:	ffff8080 	.word	0xffff8080
 8009fdc:	ffffc080 	.word	0xffffc080
 8009fe0:	ffffbf8f 	.word	0xffffbf8f

08009fe4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	000a      	movs	r2, r1
 8009fee:	1cfb      	adds	r3, r7, #3
 8009ff0:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8009ff2:	1cfb      	adds	r3, r7, #3
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d103      	bne.n	800a002 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	224c      	movs	r2, #76	; 0x4c
 8009ffe:	2180      	movs	r1, #128	; 0x80
 800a000:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	0018      	movs	r0, r3
 800a006:	46bd      	mov	sp, r7
 800a008:	b002      	add	sp, #8
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2258      	movs	r2, #88	; 0x58
 800a018:	5a9b      	ldrh	r3, [r3, r2]
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	4a05      	ldr	r2, [pc, #20]	; (800a034 <USB_DevConnect+0x28>)
 800a01e:	4313      	orrs	r3, r2
 800a020:	b299      	uxth	r1, r3
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2258      	movs	r2, #88	; 0x58
 800a026:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	0018      	movs	r0, r3
 800a02c:	46bd      	mov	sp, r7
 800a02e:	b002      	add	sp, #8
 800a030:	bd80      	pop	{r7, pc}
 800a032:	46c0      	nop			; (mov r8, r8)
 800a034:	ffff8000 	.word	0xffff8000

0800a038 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2244      	movs	r2, #68	; 0x44
 800a044:	5a9b      	ldrh	r3, [r3, r2]
 800a046:	b29b      	uxth	r3, r3
 800a048:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a04a:	68fb      	ldr	r3, [r7, #12]
}
 800a04c:	0018      	movs	r0, r3
 800a04e:	46bd      	mov	sp, r7
 800a050:	b004      	add	sp, #16
 800a052:	bd80      	pop	{r7, pc}

0800a054 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b08c      	sub	sp, #48	; 0x30
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	0019      	movs	r1, r3
 800a060:	1dbb      	adds	r3, r7, #6
 800a062:	801a      	strh	r2, [r3, #0]
 800a064:	1d3b      	adds	r3, r7, #4
 800a066:	1c0a      	adds	r2, r1, #0
 800a068:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a06a:	1d3b      	adds	r3, r7, #4
 800a06c:	881b      	ldrh	r3, [r3, #0]
 800a06e:	3301      	adds	r3, #1
 800a070:	085b      	lsrs	r3, r3, #1
 800a072:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a07c:	1dbb      	adds	r3, r7, #6
 800a07e:	881a      	ldrh	r2, [r3, #0]
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	18d3      	adds	r3, r2, r3
 800a084:	2280      	movs	r2, #128	; 0x80
 800a086:	00d2      	lsls	r2, r2, #3
 800a088:	4694      	mov	ip, r2
 800a08a:	4463      	add	r3, ip
 800a08c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a08e:	6a3b      	ldr	r3, [r7, #32]
 800a090:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a092:	e01b      	b.n	800a0cc <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09c:	3301      	adds	r3, #1
 800a09e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	021b      	lsls	r3, r3, #8
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	001a      	movs	r2, r3
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	b29a      	uxth	r2, r3
 800a0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0bc:	3302      	adds	r3, #2
 800a0be:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800a0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a0c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c8:	3b01      	subs	r3, #1
 800a0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1e0      	bne.n	800a094 <USB_WritePMA+0x40>
  }
}
 800a0d2:	46c0      	nop			; (mov r8, r8)
 800a0d4:	46c0      	nop			; (mov r8, r8)
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	b00c      	add	sp, #48	; 0x30
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b08a      	sub	sp, #40	; 0x28
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	0019      	movs	r1, r3
 800a0e8:	1dbb      	adds	r3, r7, #6
 800a0ea:	801a      	strh	r2, [r3, #0]
 800a0ec:	1d3b      	adds	r3, r7, #4
 800a0ee:	1c0a      	adds	r2, r1, #0
 800a0f0:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a0f2:	1d3b      	adds	r3, r7, #4
 800a0f4:	881b      	ldrh	r3, [r3, #0]
 800a0f6:	085b      	lsrs	r3, r3, #1
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a104:	1dbb      	adds	r3, r7, #6
 800a106:	881a      	ldrh	r2, [r3, #0]
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	18d3      	adds	r3, r2, r3
 800a10c:	2280      	movs	r2, #128	; 0x80
 800a10e:	00d2      	lsls	r2, r2, #3
 800a110:	4694      	mov	ip, r2
 800a112:	4463      	add	r3, ip
 800a114:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	627b      	str	r3, [r7, #36]	; 0x24
 800a11a:	e018      	b.n	800a14e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a11c:	6a3b      	ldr	r3, [r7, #32]
 800a11e:	881b      	ldrh	r3, [r3, #0]
 800a120:	b29b      	uxth	r3, r3
 800a122:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a124:	6a3b      	ldr	r3, [r7, #32]
 800a126:	3302      	adds	r3, #2
 800a128:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	b2da      	uxtb	r2, r3
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	3301      	adds	r3, #1
 800a136:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	0a1b      	lsrs	r3, r3, #8
 800a13c:	b2da      	uxtb	r2, r3
 800a13e:	69fb      	ldr	r3, [r7, #28]
 800a140:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	3301      	adds	r3, #1
 800a146:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800a148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14a:	3b01      	subs	r3, #1
 800a14c:	627b      	str	r3, [r7, #36]	; 0x24
 800a14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a150:	2b00      	cmp	r3, #0
 800a152:	d1e3      	bne.n	800a11c <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a154:	1d3b      	adds	r3, r7, #4
 800a156:	881b      	ldrh	r3, [r3, #0]
 800a158:	2201      	movs	r2, #1
 800a15a:	4013      	ands	r3, r2
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d007      	beq.n	800a172 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800a162:	6a3b      	ldr	r3, [r7, #32]
 800a164:	881b      	ldrh	r3, [r3, #0]
 800a166:	b29b      	uxth	r3, r3
 800a168:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	b2da      	uxtb	r2, r3
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	701a      	strb	r2, [r3, #0]
  }
}
 800a172:	46c0      	nop			; (mov r8, r8)
 800a174:	46bd      	mov	sp, r7
 800a176:	b00a      	add	sp, #40	; 0x28
 800a178:	bd80      	pop	{r7, pc}

0800a17a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b084      	sub	sp, #16
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
 800a182:	000a      	movs	r2, r1
 800a184:	1cfb      	adds	r3, r7, #3
 800a186:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800a188:	230f      	movs	r3, #15
 800a18a:	18fb      	adds	r3, r7, r3
 800a18c:	2200      	movs	r2, #0
 800a18e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	7c1b      	ldrb	r3, [r3, #16]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d116      	bne.n	800a1c6 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a198:	2380      	movs	r3, #128	; 0x80
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	2202      	movs	r2, #2
 800a1a0:	2181      	movs	r1, #129	; 0x81
 800a1a2:	f002 f8b4 	bl	800c30e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a1ac:	2380      	movs	r3, #128	; 0x80
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	2202      	movs	r2, #2
 800a1b4:	2101      	movs	r1, #1
 800a1b6:	f002 f8aa 	bl	800c30e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	23b6      	movs	r3, #182	; 0xb6
 800a1be:	005b      	lsls	r3, r3, #1
 800a1c0:	2101      	movs	r1, #1
 800a1c2:	50d1      	str	r1, [r2, r3]
 800a1c4:	e013      	b.n	800a1ee <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	2340      	movs	r3, #64	; 0x40
 800a1ca:	2202      	movs	r2, #2
 800a1cc:	2181      	movs	r1, #129	; 0x81
 800a1ce:	f002 f89e 	bl	800c30e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	2340      	movs	r3, #64	; 0x40
 800a1dc:	2202      	movs	r2, #2
 800a1de:	2101      	movs	r1, #1
 800a1e0:	f002 f895 	bl	800c30e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	23b6      	movs	r3, #182	; 0xb6
 800a1e8:	005b      	lsls	r3, r3, #1
 800a1ea:	2101      	movs	r1, #1
 800a1ec:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	2308      	movs	r3, #8
 800a1f2:	2203      	movs	r2, #3
 800a1f4:	2182      	movs	r1, #130	; 0x82
 800a1f6:	f002 f88a 	bl	800c30e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a200:	2387      	movs	r3, #135	; 0x87
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	0018      	movs	r0, r3
 800a206:	f002 fa1b 	bl	800c640 <USBD_static_malloc>
 800a20a:	0001      	movs	r1, r0
 800a20c:	687a      	ldr	r2, [r7, #4]
 800a20e:	23ae      	movs	r3, #174	; 0xae
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	23ae      	movs	r3, #174	; 0xae
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	58d3      	ldr	r3, [r2, r3]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d104      	bne.n	800a22a <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800a220:	230f      	movs	r3, #15
 800a222:	18fb      	adds	r3, r7, r3
 800a224:	2201      	movs	r2, #1
 800a226:	701a      	strb	r2, [r3, #0]
 800a228:	e02c      	b.n	800a284 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	23ae      	movs	r3, #174	; 0xae
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	58d3      	ldr	r3, [r2, r3]
 800a232:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	23af      	movs	r3, #175	; 0xaf
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	58d3      	ldr	r3, [r2, r3]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a240:	68ba      	ldr	r2, [r7, #8]
 800a242:	2385      	movs	r3, #133	; 0x85
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	2100      	movs	r1, #0
 800a248:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800a24a:	68ba      	ldr	r2, [r7, #8]
 800a24c:	2386      	movs	r3, #134	; 0x86
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	2100      	movs	r1, #0
 800a252:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	7c1b      	ldrb	r3, [r3, #16]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d10a      	bne.n	800a272 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a25c:	68ba      	ldr	r2, [r7, #8]
 800a25e:	2381      	movs	r3, #129	; 0x81
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	58d2      	ldr	r2, [r2, r3]
 800a264:	2380      	movs	r3, #128	; 0x80
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	2101      	movs	r1, #1
 800a26c:	f002 f99a 	bl	800c5a4 <USBD_LL_PrepareReceive>
 800a270:	e008      	b.n	800a284 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a272:	68ba      	ldr	r2, [r7, #8]
 800a274:	2381      	movs	r3, #129	; 0x81
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	58d2      	ldr	r2, [r2, r3]
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	2340      	movs	r3, #64	; 0x40
 800a27e:	2101      	movs	r1, #1
 800a280:	f002 f990 	bl	800c5a4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a284:	230f      	movs	r3, #15
 800a286:	18fb      	adds	r3, r7, r3
 800a288:	781b      	ldrb	r3, [r3, #0]
}
 800a28a:	0018      	movs	r0, r3
 800a28c:	46bd      	mov	sp, r7
 800a28e:	b004      	add	sp, #16
 800a290:	bd80      	pop	{r7, pc}

0800a292 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b084      	sub	sp, #16
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
 800a29a:	000a      	movs	r2, r1
 800a29c:	1cfb      	adds	r3, r7, #3
 800a29e:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800a2a0:	230f      	movs	r3, #15
 800a2a2:	18fb      	adds	r3, r7, r3
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2181      	movs	r1, #129	; 0x81
 800a2ac:	0018      	movs	r0, r3
 800a2ae:	f002 f865 	bl	800c37c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2101      	movs	r1, #1
 800a2bc:	0018      	movs	r0, r3
 800a2be:	f002 f85d 	bl	800c37c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	23b6      	movs	r3, #182	; 0xb6
 800a2c6:	005b      	lsls	r3, r3, #1
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2182      	movs	r1, #130	; 0x82
 800a2d0:	0018      	movs	r0, r3
 800a2d2:	f002 f853 	bl	800c37c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	23ae      	movs	r3, #174	; 0xae
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	58d3      	ldr	r3, [r2, r3]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d011      	beq.n	800a30c <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	23af      	movs	r3, #175	; 0xaf
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	58d3      	ldr	r3, [r2, r3]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	23ae      	movs	r3, #174	; 0xae
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	58d3      	ldr	r3, [r2, r3]
 800a2fc:	0018      	movs	r0, r3
 800a2fe:	f002 f9ab 	bl	800c658 <USBD_static_free>
    pdev->pClassData = NULL;
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	23ae      	movs	r3, #174	; 0xae
 800a306:	009b      	lsls	r3, r3, #2
 800a308:	2100      	movs	r1, #0
 800a30a:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800a30c:	230f      	movs	r3, #15
 800a30e:	18fb      	adds	r3, r7, r3
 800a310:	781b      	ldrb	r3, [r3, #0]
}
 800a312:	0018      	movs	r0, r3
 800a314:	46bd      	mov	sp, r7
 800a316:	b004      	add	sp, #16
 800a318:	bd80      	pop	{r7, pc}
	...

0800a31c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b086      	sub	sp, #24
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	23ae      	movs	r3, #174	; 0xae
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	58d3      	ldr	r3, [r2, r3]
 800a32e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a330:	230f      	movs	r3, #15
 800a332:	18fb      	adds	r3, r7, r3
 800a334:	2200      	movs	r2, #0
 800a336:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800a338:	230c      	movs	r3, #12
 800a33a:	18fb      	adds	r3, r7, r3
 800a33c:	2200      	movs	r2, #0
 800a33e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800a340:	2317      	movs	r3, #23
 800a342:	18fb      	adds	r3, r7, r3
 800a344:	2200      	movs	r2, #0
 800a346:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	001a      	movs	r2, r3
 800a34e:	2360      	movs	r3, #96	; 0x60
 800a350:	4013      	ands	r3, r2
 800a352:	d03d      	beq.n	800a3d0 <USBD_CDC_Setup+0xb4>
 800a354:	2b20      	cmp	r3, #32
 800a356:	d000      	beq.n	800a35a <USBD_CDC_Setup+0x3e>
 800a358:	e094      	b.n	800a484 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	88db      	ldrh	r3, [r3, #6]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d02b      	beq.n	800a3ba <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	b25b      	sxtb	r3, r3
 800a368:	2b00      	cmp	r3, #0
 800a36a:	da12      	bge.n	800a392 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	23af      	movs	r3, #175	; 0xaf
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	58d3      	ldr	r3, [r2, r3]
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	683a      	ldr	r2, [r7, #0]
 800a378:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a37a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	88d2      	ldrh	r2, [r2, #6]
 800a380:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a382:	6939      	ldr	r1, [r7, #16]
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	88da      	ldrh	r2, [r3, #6]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	0018      	movs	r0, r3
 800a38c:	f001 fbb2 	bl	800baf4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a390:	e083      	b.n	800a49a <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	7859      	ldrb	r1, [r3, #1]
 800a396:	693a      	ldr	r2, [r7, #16]
 800a398:	2380      	movs	r3, #128	; 0x80
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	88db      	ldrh	r3, [r3, #6]
 800a3a2:	b2d9      	uxtb	r1, r3
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	4a40      	ldr	r2, [pc, #256]	; (800a4a8 <USBD_CDC_Setup+0x18c>)
 800a3a8:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a3aa:	6939      	ldr	r1, [r7, #16]
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	88da      	ldrh	r2, [r3, #6]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	0018      	movs	r0, r3
 800a3b4:	f001 fbd1 	bl	800bb5a <USBD_CtlPrepareRx>
      break;
 800a3b8:	e06f      	b.n	800a49a <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	23af      	movs	r3, #175	; 0xaf
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	58d3      	ldr	r3, [r2, r3]
 800a3c2:	689b      	ldr	r3, [r3, #8]
 800a3c4:	683a      	ldr	r2, [r7, #0]
 800a3c6:	7850      	ldrb	r0, [r2, #1]
 800a3c8:	6839      	ldr	r1, [r7, #0]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	4798      	blx	r3
      break;
 800a3ce:	e064      	b.n	800a49a <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	785b      	ldrb	r3, [r3, #1]
 800a3d4:	2b0b      	cmp	r3, #11
 800a3d6:	d037      	beq.n	800a448 <USBD_CDC_Setup+0x12c>
 800a3d8:	dc47      	bgt.n	800a46a <USBD_CDC_Setup+0x14e>
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d002      	beq.n	800a3e4 <USBD_CDC_Setup+0xc8>
 800a3de:	2b0a      	cmp	r3, #10
 800a3e0:	d019      	beq.n	800a416 <USBD_CDC_Setup+0xfa>
 800a3e2:	e042      	b.n	800a46a <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	23a7      	movs	r3, #167	; 0xa7
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	5cd3      	ldrb	r3, [r2, r3]
 800a3ec:	2b03      	cmp	r3, #3
 800a3ee:	d107      	bne.n	800a400 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a3f0:	230c      	movs	r3, #12
 800a3f2:	18f9      	adds	r1, r7, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2202      	movs	r2, #2
 800a3f8:	0018      	movs	r0, r3
 800a3fa:	f001 fb7b 	bl	800baf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a3fe:	e040      	b.n	800a482 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800a400:	683a      	ldr	r2, [r7, #0]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	0011      	movs	r1, r2
 800a406:	0018      	movs	r0, r3
 800a408:	f001 faf6 	bl	800b9f8 <USBD_CtlError>
            ret = USBD_FAIL;
 800a40c:	2317      	movs	r3, #23
 800a40e:	18fb      	adds	r3, r7, r3
 800a410:	2202      	movs	r2, #2
 800a412:	701a      	strb	r2, [r3, #0]
          break;
 800a414:	e035      	b.n	800a482 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	23a7      	movs	r3, #167	; 0xa7
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	5cd3      	ldrb	r3, [r2, r3]
 800a41e:	2b03      	cmp	r3, #3
 800a420:	d107      	bne.n	800a432 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a422:	230f      	movs	r3, #15
 800a424:	18f9      	adds	r1, r7, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2201      	movs	r2, #1
 800a42a:	0018      	movs	r0, r3
 800a42c:	f001 fb62 	bl	800baf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a430:	e027      	b.n	800a482 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800a432:	683a      	ldr	r2, [r7, #0]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	0011      	movs	r1, r2
 800a438:	0018      	movs	r0, r3
 800a43a:	f001 fadd 	bl	800b9f8 <USBD_CtlError>
            ret = USBD_FAIL;
 800a43e:	2317      	movs	r3, #23
 800a440:	18fb      	adds	r3, r7, r3
 800a442:	2202      	movs	r2, #2
 800a444:	701a      	strb	r2, [r3, #0]
          break;
 800a446:	e01c      	b.n	800a482 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a448:	687a      	ldr	r2, [r7, #4]
 800a44a:	23a7      	movs	r3, #167	; 0xa7
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	5cd3      	ldrb	r3, [r2, r3]
 800a450:	2b03      	cmp	r3, #3
 800a452:	d015      	beq.n	800a480 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800a454:	683a      	ldr	r2, [r7, #0]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	0011      	movs	r1, r2
 800a45a:	0018      	movs	r0, r3
 800a45c:	f001 facc 	bl	800b9f8 <USBD_CtlError>
            ret = USBD_FAIL;
 800a460:	2317      	movs	r3, #23
 800a462:	18fb      	adds	r3, r7, r3
 800a464:	2202      	movs	r2, #2
 800a466:	701a      	strb	r2, [r3, #0]
          }
          break;
 800a468:	e00a      	b.n	800a480 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800a46a:	683a      	ldr	r2, [r7, #0]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	0011      	movs	r1, r2
 800a470:	0018      	movs	r0, r3
 800a472:	f001 fac1 	bl	800b9f8 <USBD_CtlError>
          ret = USBD_FAIL;
 800a476:	2317      	movs	r3, #23
 800a478:	18fb      	adds	r3, r7, r3
 800a47a:	2202      	movs	r2, #2
 800a47c:	701a      	strb	r2, [r3, #0]
          break;
 800a47e:	e000      	b.n	800a482 <USBD_CDC_Setup+0x166>
          break;
 800a480:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a482:	e00a      	b.n	800a49a <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800a484:	683a      	ldr	r2, [r7, #0]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	0011      	movs	r1, r2
 800a48a:	0018      	movs	r0, r3
 800a48c:	f001 fab4 	bl	800b9f8 <USBD_CtlError>
      ret = USBD_FAIL;
 800a490:	2317      	movs	r3, #23
 800a492:	18fb      	adds	r3, r7, r3
 800a494:	2202      	movs	r2, #2
 800a496:	701a      	strb	r2, [r3, #0]
      break;
 800a498:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800a49a:	2317      	movs	r3, #23
 800a49c:	18fb      	adds	r3, r7, r3
 800a49e:	781b      	ldrb	r3, [r3, #0]
}
 800a4a0:	0018      	movs	r0, r3
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	b006      	add	sp, #24
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	00000201 	.word	0x00000201

0800a4ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	000a      	movs	r2, r1
 800a4b6:	1cfb      	adds	r3, r7, #3
 800a4b8:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	23ae      	movs	r3, #174	; 0xae
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	58d3      	ldr	r3, [r2, r3]
 800a4c2:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	23b0      	movs	r3, #176	; 0xb0
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	58d3      	ldr	r3, [r2, r3]
 800a4cc:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	23ae      	movs	r3, #174	; 0xae
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	58d3      	ldr	r3, [r2, r3]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d03e      	beq.n	800a558 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a4da:	1cfb      	adds	r3, r7, #3
 800a4dc:	781a      	ldrb	r2, [r3, #0]
 800a4de:	6879      	ldr	r1, [r7, #4]
 800a4e0:	0013      	movs	r3, r2
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	189b      	adds	r3, r3, r2
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	18cb      	adds	r3, r1, r3
 800a4ea:	331c      	adds	r3, #28
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d02b      	beq.n	800a54a <USBD_CDC_DataIn+0x9e>
 800a4f2:	1cfb      	adds	r3, r7, #3
 800a4f4:	781a      	ldrb	r2, [r3, #0]
 800a4f6:	6879      	ldr	r1, [r7, #4]
 800a4f8:	0013      	movs	r3, r2
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	189b      	adds	r3, r3, r2
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	18cb      	adds	r3, r1, r3
 800a502:	331c      	adds	r3, #28
 800a504:	6818      	ldr	r0, [r3, #0]
 800a506:	1cfb      	adds	r3, r7, #3
 800a508:	781a      	ldrb	r2, [r3, #0]
 800a50a:	68b9      	ldr	r1, [r7, #8]
 800a50c:	0013      	movs	r3, r2
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	189b      	adds	r3, r3, r2
 800a512:	00db      	lsls	r3, r3, #3
 800a514:	18cb      	adds	r3, r1, r3
 800a516:	3338      	adds	r3, #56	; 0x38
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	0019      	movs	r1, r3
 800a51c:	f7f5 fe8c 	bl	8000238 <__aeabi_uidivmod>
 800a520:	1e0b      	subs	r3, r1, #0
 800a522:	d112      	bne.n	800a54a <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a524:	1cfb      	adds	r3, r7, #3
 800a526:	781a      	ldrb	r2, [r3, #0]
 800a528:	6879      	ldr	r1, [r7, #4]
 800a52a:	0013      	movs	r3, r2
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	189b      	adds	r3, r3, r2
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	18cb      	adds	r3, r1, r3
 800a534:	331c      	adds	r3, #28
 800a536:	2200      	movs	r2, #0
 800a538:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a53a:	1cfb      	adds	r3, r7, #3
 800a53c:	7819      	ldrb	r1, [r3, #0]
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	2300      	movs	r3, #0
 800a542:	2200      	movs	r2, #0
 800a544:	f001 fff7 	bl	800c536 <USBD_LL_Transmit>
 800a548:	e004      	b.n	800a554 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800a54a:	68fa      	ldr	r2, [r7, #12]
 800a54c:	2385      	movs	r3, #133	; 0x85
 800a54e:	009b      	lsls	r3, r3, #2
 800a550:	2100      	movs	r1, #0
 800a552:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800a554:	2300      	movs	r3, #0
 800a556:	e000      	b.n	800a55a <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800a558:	2302      	movs	r3, #2
  }
}
 800a55a:	0018      	movs	r0, r3
 800a55c:	46bd      	mov	sp, r7
 800a55e:	b004      	add	sp, #16
 800a560:	bd80      	pop	{r7, pc}

0800a562 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a562:	b580      	push	{r7, lr}
 800a564:	b084      	sub	sp, #16
 800a566:	af00      	add	r7, sp, #0
 800a568:	6078      	str	r0, [r7, #4]
 800a56a:	000a      	movs	r2, r1
 800a56c:	1cfb      	adds	r3, r7, #3
 800a56e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	23ae      	movs	r3, #174	; 0xae
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	58d3      	ldr	r3, [r2, r3]
 800a578:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a57a:	1cfb      	adds	r3, r7, #3
 800a57c:	781a      	ldrb	r2, [r3, #0]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	0011      	movs	r1, r2
 800a582:	0018      	movs	r0, r3
 800a584:	f002 f845 	bl	800c612 <USBD_LL_GetRxDataSize>
 800a588:	0001      	movs	r1, r0
 800a58a:	68fa      	ldr	r2, [r7, #12]
 800a58c:	2383      	movs	r3, #131	; 0x83
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	23ae      	movs	r3, #174	; 0xae
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	58d3      	ldr	r3, [r2, r3]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d011      	beq.n	800a5c2 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	23af      	movs	r3, #175	; 0xaf
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	58d3      	ldr	r3, [r2, r3]
 800a5a6:	68da      	ldr	r2, [r3, #12]
 800a5a8:	68f9      	ldr	r1, [r7, #12]
 800a5aa:	2381      	movs	r3, #129	; 0x81
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	58c8      	ldr	r0, [r1, r3]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2183      	movs	r1, #131	; 0x83
 800a5b4:	0089      	lsls	r1, r1, #2
 800a5b6:	468c      	mov	ip, r1
 800a5b8:	4463      	add	r3, ip
 800a5ba:	0019      	movs	r1, r3
 800a5bc:	4790      	blx	r2

    return USBD_OK;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	e000      	b.n	800a5c4 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800a5c2:	2302      	movs	r3, #2
  }
}
 800a5c4:	0018      	movs	r0, r3
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	b004      	add	sp, #16
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a5cc:	b590      	push	{r4, r7, lr}
 800a5ce:	b085      	sub	sp, #20
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	23ae      	movs	r3, #174	; 0xae
 800a5d8:	009b      	lsls	r3, r3, #2
 800a5da:	58d3      	ldr	r3, [r2, r3]
 800a5dc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	23af      	movs	r3, #175	; 0xaf
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	58d3      	ldr	r3, [r2, r3]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d019      	beq.n	800a61e <USBD_CDC_EP0_RxReady+0x52>
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	2380      	movs	r3, #128	; 0x80
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	5cd3      	ldrb	r3, [r2, r3]
 800a5f2:	2bff      	cmp	r3, #255	; 0xff
 800a5f4:	d013      	beq.n	800a61e <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	23af      	movs	r3, #175	; 0xaf
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	58d3      	ldr	r3, [r2, r3]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	68f9      	ldr	r1, [r7, #12]
 800a602:	2280      	movs	r2, #128	; 0x80
 800a604:	0092      	lsls	r2, r2, #2
 800a606:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800a608:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	4c06      	ldr	r4, [pc, #24]	; (800a628 <USBD_CDC_EP0_RxReady+0x5c>)
 800a60e:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a610:	b292      	uxth	r2, r2
 800a612:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a614:	68fa      	ldr	r2, [r7, #12]
 800a616:	2380      	movs	r3, #128	; 0x80
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	21ff      	movs	r1, #255	; 0xff
 800a61c:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800a61e:	2300      	movs	r3, #0
}
 800a620:	0018      	movs	r0, r3
 800a622:	46bd      	mov	sp, r7
 800a624:	b005      	add	sp, #20
 800a626:	bd90      	pop	{r4, r7, pc}
 800a628:	00000201 	.word	0x00000201

0800a62c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2243      	movs	r2, #67	; 0x43
 800a638:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a63a:	4b02      	ldr	r3, [pc, #8]	; (800a644 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800a63c:	0018      	movs	r0, r3
 800a63e:	46bd      	mov	sp, r7
 800a640:	b002      	add	sp, #8
 800a642:	bd80      	pop	{r7, pc}
 800a644:	20000094 	.word	0x20000094

0800a648 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2243      	movs	r2, #67	; 0x43
 800a654:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a656:	4b02      	ldr	r3, [pc, #8]	; (800a660 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800a658:	0018      	movs	r0, r3
 800a65a:	46bd      	mov	sp, r7
 800a65c:	b002      	add	sp, #8
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	20000050 	.word	0x20000050

0800a664 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b082      	sub	sp, #8
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2243      	movs	r2, #67	; 0x43
 800a670:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a672:	4b02      	ldr	r3, [pc, #8]	; (800a67c <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800a674:	0018      	movs	r0, r3
 800a676:	46bd      	mov	sp, r7
 800a678:	b002      	add	sp, #8
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	200000d8 	.word	0x200000d8

0800a680 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b082      	sub	sp, #8
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	220a      	movs	r2, #10
 800a68c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a68e:	4b02      	ldr	r3, [pc, #8]	; (800a698 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800a690:	0018      	movs	r0, r3
 800a692:	46bd      	mov	sp, r7
 800a694:	b002      	add	sp, #8
 800a696:	bd80      	pop	{r7, pc}
 800a698:	2000000c 	.word	0x2000000c

0800a69c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a6a6:	200f      	movs	r0, #15
 800a6a8:	183b      	adds	r3, r7, r0
 800a6aa:	2202      	movs	r2, #2
 800a6ac:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d007      	beq.n	800a6c4 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	23af      	movs	r3, #175	; 0xaf
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	6839      	ldr	r1, [r7, #0]
 800a6bc:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800a6be:	183b      	adds	r3, r7, r0
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800a6c4:	230f      	movs	r3, #15
 800a6c6:	18fb      	adds	r3, r7, r3
 800a6c8:	781b      	ldrb	r3, [r3, #0]
}
 800a6ca:	0018      	movs	r0, r3
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	b004      	add	sp, #16
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b086      	sub	sp, #24
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	60f8      	str	r0, [r7, #12]
 800a6da:	60b9      	str	r1, [r7, #8]
 800a6dc:	1dbb      	adds	r3, r7, #6
 800a6de:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	23ae      	movs	r3, #174	; 0xae
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	58d3      	ldr	r3, [r2, r3]
 800a6e8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a6ea:	697a      	ldr	r2, [r7, #20]
 800a6ec:	2382      	movs	r3, #130	; 0x82
 800a6ee:	009b      	lsls	r3, r3, #2
 800a6f0:	68b9      	ldr	r1, [r7, #8]
 800a6f2:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800a6f4:	1dbb      	adds	r3, r7, #6
 800a6f6:	8819      	ldrh	r1, [r3, #0]
 800a6f8:	697a      	ldr	r2, [r7, #20]
 800a6fa:	2384      	movs	r3, #132	; 0x84
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	0018      	movs	r0, r3
 800a704:	46bd      	mov	sp, r7
 800a706:	b006      	add	sp, #24
 800a708:	bd80      	pop	{r7, pc}

0800a70a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b084      	sub	sp, #16
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
 800a712:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	23ae      	movs	r3, #174	; 0xae
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	58d3      	ldr	r3, [r2, r3]
 800a71c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	2381      	movs	r3, #129	; 0x81
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	6839      	ldr	r1, [r7, #0]
 800a726:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800a728:	2300      	movs	r3, #0
}
 800a72a:	0018      	movs	r0, r3
 800a72c:	46bd      	mov	sp, r7
 800a72e:	b004      	add	sp, #16
 800a730:	bd80      	pop	{r7, pc}

0800a732 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b084      	sub	sp, #16
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	23ae      	movs	r3, #174	; 0xae
 800a73e:	009b      	lsls	r3, r3, #2
 800a740:	58d3      	ldr	r3, [r2, r3]
 800a742:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	23ae      	movs	r3, #174	; 0xae
 800a748:	009b      	lsls	r3, r3, #2
 800a74a:	58d3      	ldr	r3, [r2, r3]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d022      	beq.n	800a796 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	2385      	movs	r3, #133	; 0x85
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	58d3      	ldr	r3, [r2, r3]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d11a      	bne.n	800a792 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a75c:	68fa      	ldr	r2, [r7, #12]
 800a75e:	2385      	movs	r3, #133	; 0x85
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	2101      	movs	r1, #1
 800a764:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	2384      	movs	r3, #132	; 0x84
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	58d2      	ldr	r2, [r2, r3]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	2382      	movs	r3, #130	; 0x82
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	2384      	movs	r3, #132	; 0x84
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a782:	b29b      	uxth	r3, r3
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	000a      	movs	r2, r1
 800a788:	2181      	movs	r1, #129	; 0x81
 800a78a:	f001 fed4 	bl	800c536 <USBD_LL_Transmit>

      return USBD_OK;
 800a78e:	2300      	movs	r3, #0
 800a790:	e002      	b.n	800a798 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800a792:	2301      	movs	r3, #1
 800a794:	e000      	b.n	800a798 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800a796:	2302      	movs	r3, #2
  }
}
 800a798:	0018      	movs	r0, r3
 800a79a:	46bd      	mov	sp, r7
 800a79c:	b004      	add	sp, #16
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	23ae      	movs	r3, #174	; 0xae
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	58d3      	ldr	r3, [r2, r3]
 800a7b0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	23ae      	movs	r3, #174	; 0xae
 800a7b6:	009b      	lsls	r3, r3, #2
 800a7b8:	58d3      	ldr	r3, [r2, r3]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d019      	beq.n	800a7f2 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	7c1b      	ldrb	r3, [r3, #16]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10a      	bne.n	800a7dc <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a7c6:	68fa      	ldr	r2, [r7, #12]
 800a7c8:	2381      	movs	r3, #129	; 0x81
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	58d2      	ldr	r2, [r2, r3]
 800a7ce:	2380      	movs	r3, #128	; 0x80
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	2101      	movs	r1, #1
 800a7d6:	f001 fee5 	bl	800c5a4 <USBD_LL_PrepareReceive>
 800a7da:	e008      	b.n	800a7ee <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	2381      	movs	r3, #129	; 0x81
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	58d2      	ldr	r2, [r2, r3]
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	2340      	movs	r3, #64	; 0x40
 800a7e8:	2101      	movs	r1, #1
 800a7ea:	f001 fedb 	bl	800c5a4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	e000      	b.n	800a7f4 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800a7f2:	2302      	movs	r3, #2
  }
}
 800a7f4:	0018      	movs	r0, r3
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	b004      	add	sp, #16
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	60f8      	str	r0, [r7, #12]
 800a804:	60b9      	str	r1, [r7, #8]
 800a806:	1dfb      	adds	r3, r7, #7
 800a808:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d101      	bne.n	800a814 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a810:	2302      	movs	r3, #2
 800a812:	e020      	b.n	800a856 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a814:	68fa      	ldr	r2, [r7, #12]
 800a816:	23ad      	movs	r3, #173	; 0xad
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	58d3      	ldr	r3, [r2, r3]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d004      	beq.n	800a82a <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800a820:	68fa      	ldr	r2, [r7, #12]
 800a822:	23ad      	movs	r3, #173	; 0xad
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	2100      	movs	r1, #0
 800a828:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d004      	beq.n	800a83a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a830:	68fa      	ldr	r2, [r7, #12]
 800a832:	23ac      	movs	r3, #172	; 0xac
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	68b9      	ldr	r1, [r7, #8]
 800a838:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	23a7      	movs	r3, #167	; 0xa7
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	2101      	movs	r1, #1
 800a842:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	1dfa      	adds	r2, r7, #7
 800a848:	7812      	ldrb	r2, [r2, #0]
 800a84a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	0018      	movs	r0, r3
 800a850:	f001 fcd4 	bl	800c1fc <USBD_LL_Init>

  return USBD_OK;
 800a854:	2300      	movs	r3, #0
}
 800a856:	0018      	movs	r0, r3
 800a858:	46bd      	mov	sp, r7
 800a85a:	b004      	add	sp, #16
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b084      	sub	sp, #16
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
 800a866:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a868:	200f      	movs	r0, #15
 800a86a:	183b      	adds	r3, r7, r0
 800a86c:	2200      	movs	r2, #0
 800a86e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d008      	beq.n	800a888 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	23ad      	movs	r3, #173	; 0xad
 800a87a:	009b      	lsls	r3, r3, #2
 800a87c:	6839      	ldr	r1, [r7, #0]
 800a87e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800a880:	183b      	adds	r3, r7, r0
 800a882:	2200      	movs	r2, #0
 800a884:	701a      	strb	r2, [r3, #0]
 800a886:	e003      	b.n	800a890 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a888:	230f      	movs	r3, #15
 800a88a:	18fb      	adds	r3, r7, r3
 800a88c:	2202      	movs	r2, #2
 800a88e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800a890:	230f      	movs	r3, #15
 800a892:	18fb      	adds	r3, r7, r3
 800a894:	781b      	ldrb	r3, [r3, #0]
}
 800a896:	0018      	movs	r0, r3
 800a898:	46bd      	mov	sp, r7
 800a89a:	b004      	add	sp, #16
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b082      	sub	sp, #8
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	0018      	movs	r0, r3
 800a8aa:	f001 fd0b 	bl	800c2c4 <USBD_LL_Start>

  return USBD_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	0018      	movs	r0, r3
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	b002      	add	sp, #8
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a8c0:	2300      	movs	r3, #0
}
 800a8c2:	0018      	movs	r0, r3
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	b002      	add	sp, #8
 800a8c8:	bd80      	pop	{r7, pc}

0800a8ca <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a8ca:	b590      	push	{r4, r7, lr}
 800a8cc:	b085      	sub	sp, #20
 800a8ce:	af00      	add	r7, sp, #0
 800a8d0:	6078      	str	r0, [r7, #4]
 800a8d2:	000a      	movs	r2, r1
 800a8d4:	1cfb      	adds	r3, r7, #3
 800a8d6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a8d8:	240f      	movs	r4, #15
 800a8da:	193b      	adds	r3, r7, r4
 800a8dc:	2202      	movs	r2, #2
 800a8de:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	23ad      	movs	r3, #173	; 0xad
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	58d3      	ldr	r3, [r2, r3]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00e      	beq.n	800a90a <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	23ad      	movs	r3, #173	; 0xad
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	58d3      	ldr	r3, [r2, r3]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	1cfa      	adds	r2, r7, #3
 800a8f8:	7811      	ldrb	r1, [r2, #0]
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	0010      	movs	r0, r2
 800a8fe:	4798      	blx	r3
 800a900:	1e03      	subs	r3, r0, #0
 800a902:	d102      	bne.n	800a90a <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800a904:	193b      	adds	r3, r7, r4
 800a906:	2200      	movs	r2, #0
 800a908:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800a90a:	230f      	movs	r3, #15
 800a90c:	18fb      	adds	r3, r7, r3
 800a90e:	781b      	ldrb	r3, [r3, #0]
}
 800a910:	0018      	movs	r0, r3
 800a912:	46bd      	mov	sp, r7
 800a914:	b005      	add	sp, #20
 800a916:	bd90      	pop	{r4, r7, pc}

0800a918 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	000a      	movs	r2, r1
 800a922:	1cfb      	adds	r3, r7, #3
 800a924:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	23ad      	movs	r3, #173	; 0xad
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	58d3      	ldr	r3, [r2, r3]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	1cfa      	adds	r2, r7, #3
 800a932:	7811      	ldrb	r1, [r2, #0]
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	0010      	movs	r0, r2
 800a938:	4798      	blx	r3

  return USBD_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	0018      	movs	r0, r3
 800a93e:	46bd      	mov	sp, r7
 800a940:	b002      	add	sp, #8
 800a942:	bd80      	pop	{r7, pc}

0800a944 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	22aa      	movs	r2, #170	; 0xaa
 800a952:	0092      	lsls	r2, r2, #2
 800a954:	4694      	mov	ip, r2
 800a956:	4463      	add	r3, ip
 800a958:	683a      	ldr	r2, [r7, #0]
 800a95a:	0011      	movs	r1, r2
 800a95c:	0018      	movs	r0, r3
 800a95e:	f001 f810 	bl	800b982 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	23a5      	movs	r3, #165	; 0xa5
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	2101      	movs	r1, #1
 800a96a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4a23      	ldr	r2, [pc, #140]	; (800a9fc <USBD_LL_SetupStage+0xb8>)
 800a970:	5a9b      	ldrh	r3, [r3, r2]
 800a972:	0019      	movs	r1, r3
 800a974:	687a      	ldr	r2, [r7, #4]
 800a976:	23a6      	movs	r3, #166	; 0xa6
 800a978:	009b      	lsls	r3, r3, #2
 800a97a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	23aa      	movs	r3, #170	; 0xaa
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	5cd3      	ldrb	r3, [r2, r3]
 800a984:	001a      	movs	r2, r3
 800a986:	231f      	movs	r3, #31
 800a988:	4013      	ands	r3, r2
 800a98a:	2b02      	cmp	r3, #2
 800a98c:	d019      	beq.n	800a9c2 <USBD_LL_SetupStage+0x7e>
 800a98e:	d822      	bhi.n	800a9d6 <USBD_LL_SetupStage+0x92>
 800a990:	2b00      	cmp	r3, #0
 800a992:	d002      	beq.n	800a99a <USBD_LL_SetupStage+0x56>
 800a994:	2b01      	cmp	r3, #1
 800a996:	d00a      	beq.n	800a9ae <USBD_LL_SetupStage+0x6a>
 800a998:	e01d      	b.n	800a9d6 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	22aa      	movs	r2, #170	; 0xaa
 800a99e:	0092      	lsls	r2, r2, #2
 800a9a0:	189a      	adds	r2, r3, r2
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	0011      	movs	r1, r2
 800a9a6:	0018      	movs	r0, r3
 800a9a8:	f000 fa10 	bl	800adcc <USBD_StdDevReq>
      break;
 800a9ac:	e020      	b.n	800a9f0 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	22aa      	movs	r2, #170	; 0xaa
 800a9b2:	0092      	lsls	r2, r2, #2
 800a9b4:	189a      	adds	r2, r3, r2
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	0011      	movs	r1, r2
 800a9ba:	0018      	movs	r0, r3
 800a9bc:	f000 fa78 	bl	800aeb0 <USBD_StdItfReq>
      break;
 800a9c0:	e016      	b.n	800a9f0 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	22aa      	movs	r2, #170	; 0xaa
 800a9c6:	0092      	lsls	r2, r2, #2
 800a9c8:	189a      	adds	r2, r3, r2
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	0011      	movs	r1, r2
 800a9ce:	0018      	movs	r0, r3
 800a9d0:	f000 fac5 	bl	800af5e <USBD_StdEPReq>
      break;
 800a9d4:	e00c      	b.n	800a9f0 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	23aa      	movs	r3, #170	; 0xaa
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	5cd3      	ldrb	r3, [r2, r3]
 800a9de:	227f      	movs	r2, #127	; 0x7f
 800a9e0:	4393      	bics	r3, r2
 800a9e2:	b2da      	uxtb	r2, r3
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	0011      	movs	r1, r2
 800a9e8:	0018      	movs	r0, r3
 800a9ea:	f001 fcf2 	bl	800c3d2 <USBD_LL_StallEP>
      break;
 800a9ee:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	0018      	movs	r0, r3
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	b002      	add	sp, #8
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	46c0      	nop			; (mov r8, r8)
 800a9fc:	000002ae 	.word	0x000002ae

0800aa00 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b086      	sub	sp, #24
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	607a      	str	r2, [r7, #4]
 800aa0a:	200b      	movs	r0, #11
 800aa0c:	183b      	adds	r3, r7, r0
 800aa0e:	1c0a      	adds	r2, r1, #0
 800aa10:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800aa12:	183b      	adds	r3, r7, r0
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d154      	bne.n	800aac4 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	3355      	adds	r3, #85	; 0x55
 800aa1e:	33ff      	adds	r3, #255	; 0xff
 800aa20:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	23a5      	movs	r3, #165	; 0xa5
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	58d3      	ldr	r3, [r2, r3]
 800aa2a:	2b03      	cmp	r3, #3
 800aa2c:	d139      	bne.n	800aaa2 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	68da      	ldr	r2, [r3, #12]
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d919      	bls.n	800aa6e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	68da      	ldr	r2, [r3, #12]
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	1ad2      	subs	r2, r2, r3
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	68da      	ldr	r2, [r3, #12]
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d203      	bcs.n	800aa5c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800aa58:	b29b      	uxth	r3, r3
 800aa5a:	e002      	b.n	800aa62 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	6879      	ldr	r1, [r7, #4]
 800aa64:	68f8      	ldr	r0, [r7, #12]
 800aa66:	001a      	movs	r2, r3
 800aa68:	f001 f89b 	bl	800bba2 <USBD_CtlContinueRx>
 800aa6c:	e045      	b.n	800aafa <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	23ad      	movs	r3, #173	; 0xad
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	58d3      	ldr	r3, [r2, r3]
 800aa76:	691b      	ldr	r3, [r3, #16]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d00d      	beq.n	800aa98 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aa7c:	68fa      	ldr	r2, [r7, #12]
 800aa7e:	23a7      	movs	r3, #167	; 0xa7
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800aa84:	2b03      	cmp	r3, #3
 800aa86:	d107      	bne.n	800aa98 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800aa88:	68fa      	ldr	r2, [r7, #12]
 800aa8a:	23ad      	movs	r3, #173	; 0xad
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	58d3      	ldr	r3, [r2, r3]
 800aa90:	691b      	ldr	r3, [r3, #16]
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	0010      	movs	r0, r2
 800aa96:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	0018      	movs	r0, r3
 800aa9c:	f001 f894 	bl	800bbc8 <USBD_CtlSendStatus>
 800aaa0:	e02b      	b.n	800aafa <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	23a5      	movs	r3, #165	; 0xa5
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	58d3      	ldr	r3, [r2, r3]
 800aaaa:	2b05      	cmp	r3, #5
 800aaac:	d125      	bne.n	800aafa <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	23a5      	movs	r3, #165	; 0xa5
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	2100      	movs	r1, #0
 800aab6:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2100      	movs	r1, #0
 800aabc:	0018      	movs	r0, r3
 800aabe:	f001 fc88 	bl	800c3d2 <USBD_LL_StallEP>
 800aac2:	e01a      	b.n	800aafa <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	23ad      	movs	r3, #173	; 0xad
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	58d3      	ldr	r3, [r2, r3]
 800aacc:	699b      	ldr	r3, [r3, #24]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d011      	beq.n	800aaf6 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	23a7      	movs	r3, #167	; 0xa7
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800aada:	2b03      	cmp	r3, #3
 800aadc:	d10b      	bne.n	800aaf6 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800aade:	68fa      	ldr	r2, [r7, #12]
 800aae0:	23ad      	movs	r3, #173	; 0xad
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	58d3      	ldr	r3, [r2, r3]
 800aae6:	699b      	ldr	r3, [r3, #24]
 800aae8:	220b      	movs	r2, #11
 800aaea:	18ba      	adds	r2, r7, r2
 800aaec:	7811      	ldrb	r1, [r2, #0]
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	0010      	movs	r0, r2
 800aaf2:	4798      	blx	r3
 800aaf4:	e001      	b.n	800aafa <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800aaf6:	2302      	movs	r3, #2
 800aaf8:	e000      	b.n	800aafc <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800aafa:	2300      	movs	r3, #0
}
 800aafc:	0018      	movs	r0, r3
 800aafe:	46bd      	mov	sp, r7
 800ab00:	b006      	add	sp, #24
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b086      	sub	sp, #24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	607a      	str	r2, [r7, #4]
 800ab0e:	200b      	movs	r0, #11
 800ab10:	183b      	adds	r3, r7, r0
 800ab12:	1c0a      	adds	r2, r1, #0
 800ab14:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800ab16:	183b      	adds	r3, r7, r0
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d000      	beq.n	800ab20 <USBD_LL_DataInStage+0x1c>
 800ab1e:	e08e      	b.n	800ac3e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	3314      	adds	r3, #20
 800ab24:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	23a5      	movs	r3, #165	; 0xa5
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	58d3      	ldr	r3, [r2, r3]
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	d164      	bne.n	800abfc <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	68da      	ldr	r2, [r3, #12]
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d915      	bls.n	800ab6a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	68da      	ldr	r2, [r3, #12]
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	691b      	ldr	r3, [r3, #16]
 800ab46:	1ad2      	subs	r2, r2, r3
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	68db      	ldr	r3, [r3, #12]
 800ab50:	b29a      	uxth	r2, r3
 800ab52:	6879      	ldr	r1, [r7, #4]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	0018      	movs	r0, r3
 800ab58:	f000 ffec 	bl	800bb34 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab5c:	68f8      	ldr	r0, [r7, #12]
 800ab5e:	2300      	movs	r3, #0
 800ab60:	2200      	movs	r2, #0
 800ab62:	2100      	movs	r1, #0
 800ab64:	f001 fd1e 	bl	800c5a4 <USBD_LL_PrepareReceive>
 800ab68:	e059      	b.n	800ac1e <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	689a      	ldr	r2, [r3, #8]
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	691b      	ldr	r3, [r3, #16]
 800ab72:	0019      	movs	r1, r3
 800ab74:	0010      	movs	r0, r2
 800ab76:	f7f5 fb5f 	bl	8000238 <__aeabi_uidivmod>
 800ab7a:	1e0b      	subs	r3, r1, #0
 800ab7c:	d11f      	bne.n	800abbe <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	689a      	ldr	r2, [r3, #8]
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d319      	bcc.n	800abbe <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	689a      	ldr	r2, [r3, #8]
 800ab8e:	68f9      	ldr	r1, [r7, #12]
 800ab90:	23a6      	movs	r3, #166	; 0xa6
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d211      	bcs.n	800abbe <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	2100      	movs	r1, #0
 800aba0:	0018      	movs	r0, r3
 800aba2:	f000 ffc7 	bl	800bb34 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	23a6      	movs	r3, #166	; 0xa6
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	2100      	movs	r1, #0
 800abae:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800abb0:	68f8      	ldr	r0, [r7, #12]
 800abb2:	2300      	movs	r3, #0
 800abb4:	2200      	movs	r2, #0
 800abb6:	2100      	movs	r1, #0
 800abb8:	f001 fcf4 	bl	800c5a4 <USBD_LL_PrepareReceive>
 800abbc:	e02f      	b.n	800ac1e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800abbe:	68fa      	ldr	r2, [r7, #12]
 800abc0:	23ad      	movs	r3, #173	; 0xad
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	58d3      	ldr	r3, [r2, r3]
 800abc6:	68db      	ldr	r3, [r3, #12]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d00d      	beq.n	800abe8 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	23a7      	movs	r3, #167	; 0xa7
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800abd4:	2b03      	cmp	r3, #3
 800abd6:	d107      	bne.n	800abe8 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	23ad      	movs	r3, #173	; 0xad
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	58d3      	ldr	r3, [r2, r3]
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	68fa      	ldr	r2, [r7, #12]
 800abe4:	0010      	movs	r0, r2
 800abe6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2180      	movs	r1, #128	; 0x80
 800abec:	0018      	movs	r0, r3
 800abee:	f001 fbf0 	bl	800c3d2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	0018      	movs	r0, r3
 800abf6:	f000 fffb 	bl	800bbf0 <USBD_CtlReceiveStatus>
 800abfa:	e010      	b.n	800ac1e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	23a5      	movs	r3, #165	; 0xa5
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	58d3      	ldr	r3, [r2, r3]
 800ac04:	2b04      	cmp	r3, #4
 800ac06:	d005      	beq.n	800ac14 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	23a5      	movs	r3, #165	; 0xa5
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d104      	bne.n	800ac1e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2180      	movs	r1, #128	; 0x80
 800ac18:	0018      	movs	r0, r3
 800ac1a:	f001 fbda 	bl	800c3d2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ac1e:	68fa      	ldr	r2, [r7, #12]
 800ac20:	23a8      	movs	r3, #168	; 0xa8
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	5cd3      	ldrb	r3, [r2, r3]
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d124      	bne.n	800ac74 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	0018      	movs	r0, r3
 800ac2e:	f7ff fe43 	bl	800a8b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ac32:	68fa      	ldr	r2, [r7, #12]
 800ac34:	23a8      	movs	r3, #168	; 0xa8
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	2100      	movs	r1, #0
 800ac3a:	54d1      	strb	r1, [r2, r3]
 800ac3c:	e01a      	b.n	800ac74 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	23ad      	movs	r3, #173	; 0xad
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	58d3      	ldr	r3, [r2, r3]
 800ac46:	695b      	ldr	r3, [r3, #20]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d011      	beq.n	800ac70 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ac4c:	68fa      	ldr	r2, [r7, #12]
 800ac4e:	23a7      	movs	r3, #167	; 0xa7
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800ac54:	2b03      	cmp	r3, #3
 800ac56:	d10b      	bne.n	800ac70 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	23ad      	movs	r3, #173	; 0xad
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	58d3      	ldr	r3, [r2, r3]
 800ac60:	695b      	ldr	r3, [r3, #20]
 800ac62:	220b      	movs	r2, #11
 800ac64:	18ba      	adds	r2, r7, r2
 800ac66:	7811      	ldrb	r1, [r2, #0]
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	0010      	movs	r0, r2
 800ac6c:	4798      	blx	r3
 800ac6e:	e001      	b.n	800ac74 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ac70:	2302      	movs	r3, #2
 800ac72:	e000      	b.n	800ac76 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	0018      	movs	r0, r3
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	b006      	add	sp, #24
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b082      	sub	sp, #8
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	2340      	movs	r3, #64	; 0x40
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	2100      	movs	r1, #0
 800ac8e:	f001 fb3e 	bl	800c30e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	23ac      	movs	r3, #172	; 0xac
 800ac96:	005b      	lsls	r3, r3, #1
 800ac98:	2101      	movs	r1, #1
 800ac9a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	23b2      	movs	r3, #178	; 0xb2
 800aca0:	005b      	lsls	r3, r3, #1
 800aca2:	2140      	movs	r1, #64	; 0x40
 800aca4:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	2340      	movs	r3, #64	; 0x40
 800acaa:	2200      	movs	r2, #0
 800acac:	2180      	movs	r1, #128	; 0x80
 800acae:	f001 fb2e 	bl	800c30e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2201      	movs	r2, #1
 800acb6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2240      	movs	r2, #64	; 0x40
 800acbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	23a7      	movs	r3, #167	; 0xa7
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	2101      	movs	r1, #1
 800acc6:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	23a5      	movs	r3, #165	; 0xa5
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	2100      	movs	r1, #0
 800acd0:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	23a9      	movs	r3, #169	; 0xa9
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	2100      	movs	r1, #0
 800ace0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	23ae      	movs	r3, #174	; 0xae
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	58d3      	ldr	r3, [r2, r3]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d00a      	beq.n	800ad04 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	23ad      	movs	r3, #173	; 0xad
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	58d3      	ldr	r3, [r2, r3]
 800acf6:	685a      	ldr	r2, [r3, #4]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	b2d9      	uxtb	r1, r3
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	0018      	movs	r0, r3
 800ad02:	4790      	blx	r2
  }

  return USBD_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	0018      	movs	r0, r3
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	b002      	add	sp, #8
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b082      	sub	sp, #8
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	000a      	movs	r2, r1
 800ad18:	1cfb      	adds	r3, r7, #3
 800ad1a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	1cfa      	adds	r2, r7, #3
 800ad20:	7812      	ldrb	r2, [r2, #0]
 800ad22:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	0018      	movs	r0, r3
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	b002      	add	sp, #8
 800ad2c:	bd80      	pop	{r7, pc}
	...

0800ad30 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ad38:	687a      	ldr	r2, [r7, #4]
 800ad3a:	23a7      	movs	r3, #167	; 0xa7
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	5cd1      	ldrb	r1, [r2, r3]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4a06      	ldr	r2, [pc, #24]	; (800ad5c <USBD_LL_Suspend+0x2c>)
 800ad44:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	23a7      	movs	r3, #167	; 0xa7
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	2104      	movs	r1, #4
 800ad4e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800ad50:	2300      	movs	r3, #0
}
 800ad52:	0018      	movs	r0, r3
 800ad54:	46bd      	mov	sp, r7
 800ad56:	b002      	add	sp, #8
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	46c0      	nop			; (mov r8, r8)
 800ad5c:	0000029d 	.word	0x0000029d

0800ad60 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	23a7      	movs	r3, #167	; 0xa7
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	5cd3      	ldrb	r3, [r2, r3]
 800ad70:	2b04      	cmp	r3, #4
 800ad72:	d106      	bne.n	800ad82 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4a05      	ldr	r2, [pc, #20]	; (800ad8c <USBD_LL_Resume+0x2c>)
 800ad78:	5c99      	ldrb	r1, [r3, r2]
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	23a7      	movs	r3, #167	; 0xa7
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800ad82:	2300      	movs	r3, #0
}
 800ad84:	0018      	movs	r0, r3
 800ad86:	46bd      	mov	sp, r7
 800ad88:	b002      	add	sp, #8
 800ad8a:	bd80      	pop	{r7, pc}
 800ad8c:	0000029d 	.word	0x0000029d

0800ad90 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	23a7      	movs	r3, #167	; 0xa7
 800ad9c:	009b      	lsls	r3, r3, #2
 800ad9e:	5cd3      	ldrb	r3, [r2, r3]
 800ada0:	2b03      	cmp	r3, #3
 800ada2:	d10e      	bne.n	800adc2 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	23ad      	movs	r3, #173	; 0xad
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	58d3      	ldr	r3, [r2, r3]
 800adac:	69db      	ldr	r3, [r3, #28]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d007      	beq.n	800adc2 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	23ad      	movs	r3, #173	; 0xad
 800adb6:	009b      	lsls	r3, r3, #2
 800adb8:	58d3      	ldr	r3, [r2, r3]
 800adba:	69db      	ldr	r3, [r3, #28]
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	0010      	movs	r0, r2
 800adc0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800adc2:	2300      	movs	r3, #0
}
 800adc4:	0018      	movs	r0, r3
 800adc6:	46bd      	mov	sp, r7
 800adc8:	b002      	add	sp, #8
 800adca:	bd80      	pop	{r7, pc}

0800adcc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800add6:	230f      	movs	r3, #15
 800add8:	18fb      	adds	r3, r7, r3
 800adda:	2200      	movs	r2, #0
 800addc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	001a      	movs	r2, r3
 800ade4:	2360      	movs	r3, #96	; 0x60
 800ade6:	4013      	ands	r3, r2
 800ade8:	2b40      	cmp	r3, #64	; 0x40
 800adea:	d004      	beq.n	800adf6 <USBD_StdDevReq+0x2a>
 800adec:	d84f      	bhi.n	800ae8e <USBD_StdDevReq+0xc2>
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d00b      	beq.n	800ae0a <USBD_StdDevReq+0x3e>
 800adf2:	2b20      	cmp	r3, #32
 800adf4:	d14b      	bne.n	800ae8e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	23ad      	movs	r3, #173	; 0xad
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	58d3      	ldr	r3, [r2, r3]
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	6839      	ldr	r1, [r7, #0]
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	0010      	movs	r0, r2
 800ae06:	4798      	blx	r3
      break;
 800ae08:	e048      	b.n	800ae9c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	785b      	ldrb	r3, [r3, #1]
 800ae0e:	2b09      	cmp	r3, #9
 800ae10:	d835      	bhi.n	800ae7e <USBD_StdDevReq+0xb2>
 800ae12:	009a      	lsls	r2, r3, #2
 800ae14:	4b25      	ldr	r3, [pc, #148]	; (800aeac <USBD_StdDevReq+0xe0>)
 800ae16:	18d3      	adds	r3, r2, r3
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ae1c:	683a      	ldr	r2, [r7, #0]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	0011      	movs	r1, r2
 800ae22:	0018      	movs	r0, r3
 800ae24:	f000 fa52 	bl	800b2cc <USBD_GetDescriptor>
          break;
 800ae28:	e030      	b.n	800ae8c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ae2a:	683a      	ldr	r2, [r7, #0]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	0011      	movs	r1, r2
 800ae30:	0018      	movs	r0, r3
 800ae32:	f000 fbfd 	bl	800b630 <USBD_SetAddress>
          break;
 800ae36:	e029      	b.n	800ae8c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800ae38:	683a      	ldr	r2, [r7, #0]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	0011      	movs	r1, r2
 800ae3e:	0018      	movs	r0, r3
 800ae40:	f000 fc4a 	bl	800b6d8 <USBD_SetConfig>
          break;
 800ae44:	e022      	b.n	800ae8c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ae46:	683a      	ldr	r2, [r7, #0]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	0011      	movs	r1, r2
 800ae4c:	0018      	movs	r0, r3
 800ae4e:	f000 fce7 	bl	800b820 <USBD_GetConfig>
          break;
 800ae52:	e01b      	b.n	800ae8c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ae54:	683a      	ldr	r2, [r7, #0]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	0011      	movs	r1, r2
 800ae5a:	0018      	movs	r0, r3
 800ae5c:	f000 fd1b 	bl	800b896 <USBD_GetStatus>
          break;
 800ae60:	e014      	b.n	800ae8c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ae62:	683a      	ldr	r2, [r7, #0]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	0011      	movs	r1, r2
 800ae68:	0018      	movs	r0, r3
 800ae6a:	f000 fd4e 	bl	800b90a <USBD_SetFeature>
          break;
 800ae6e:	e00d      	b.n	800ae8c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ae70:	683a      	ldr	r2, [r7, #0]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	0011      	movs	r1, r2
 800ae76:	0018      	movs	r0, r3
 800ae78:	f000 fd5d 	bl	800b936 <USBD_ClrFeature>
          break;
 800ae7c:	e006      	b.n	800ae8c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	0011      	movs	r1, r2
 800ae84:	0018      	movs	r0, r3
 800ae86:	f000 fdb7 	bl	800b9f8 <USBD_CtlError>
          break;
 800ae8a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800ae8c:	e006      	b.n	800ae9c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ae8e:	683a      	ldr	r2, [r7, #0]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	0011      	movs	r1, r2
 800ae94:	0018      	movs	r0, r3
 800ae96:	f000 fdaf 	bl	800b9f8 <USBD_CtlError>
      break;
 800ae9a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800ae9c:	230f      	movs	r3, #15
 800ae9e:	18fb      	adds	r3, r7, r3
 800aea0:	781b      	ldrb	r3, [r3, #0]
}
 800aea2:	0018      	movs	r0, r3
 800aea4:	46bd      	mov	sp, r7
 800aea6:	b004      	add	sp, #16
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	46c0      	nop			; (mov r8, r8)
 800aeac:	0800d120 	.word	0x0800d120

0800aeb0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800aeb0:	b5b0      	push	{r4, r5, r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aeba:	230f      	movs	r3, #15
 800aebc:	18fb      	adds	r3, r7, r3
 800aebe:	2200      	movs	r2, #0
 800aec0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	001a      	movs	r2, r3
 800aec8:	2360      	movs	r3, #96	; 0x60
 800aeca:	4013      	ands	r3, r2
 800aecc:	2b40      	cmp	r3, #64	; 0x40
 800aece:	d004      	beq.n	800aeda <USBD_StdItfReq+0x2a>
 800aed0:	d839      	bhi.n	800af46 <USBD_StdItfReq+0x96>
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d001      	beq.n	800aeda <USBD_StdItfReq+0x2a>
 800aed6:	2b20      	cmp	r3, #32
 800aed8:	d135      	bne.n	800af46 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	23a7      	movs	r3, #167	; 0xa7
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	5cd3      	ldrb	r3, [r2, r3]
 800aee2:	3b01      	subs	r3, #1
 800aee4:	2b02      	cmp	r3, #2
 800aee6:	d825      	bhi.n	800af34 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	889b      	ldrh	r3, [r3, #4]
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d819      	bhi.n	800af26 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	23ad      	movs	r3, #173	; 0xad
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	58d3      	ldr	r3, [r2, r3]
 800aefa:	689b      	ldr	r3, [r3, #8]
 800aefc:	250f      	movs	r5, #15
 800aefe:	197c      	adds	r4, r7, r5
 800af00:	6839      	ldr	r1, [r7, #0]
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	0010      	movs	r0, r2
 800af06:	4798      	blx	r3
 800af08:	0003      	movs	r3, r0
 800af0a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	88db      	ldrh	r3, [r3, #6]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d116      	bne.n	800af42 <USBD_StdItfReq+0x92>
 800af14:	197b      	adds	r3, r7, r5
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d112      	bne.n	800af42 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	0018      	movs	r0, r3
 800af20:	f000 fe52 	bl	800bbc8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800af24:	e00d      	b.n	800af42 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800af26:	683a      	ldr	r2, [r7, #0]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	0011      	movs	r1, r2
 800af2c:	0018      	movs	r0, r3
 800af2e:	f000 fd63 	bl	800b9f8 <USBD_CtlError>
          break;
 800af32:	e006      	b.n	800af42 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800af34:	683a      	ldr	r2, [r7, #0]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	0011      	movs	r1, r2
 800af3a:	0018      	movs	r0, r3
 800af3c:	f000 fd5c 	bl	800b9f8 <USBD_CtlError>
          break;
 800af40:	e000      	b.n	800af44 <USBD_StdItfReq+0x94>
          break;
 800af42:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800af44:	e006      	b.n	800af54 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800af46:	683a      	ldr	r2, [r7, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	0011      	movs	r1, r2
 800af4c:	0018      	movs	r0, r3
 800af4e:	f000 fd53 	bl	800b9f8 <USBD_CtlError>
      break;
 800af52:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800af54:	2300      	movs	r3, #0
}
 800af56:	0018      	movs	r0, r3
 800af58:	46bd      	mov	sp, r7
 800af5a:	b004      	add	sp, #16
 800af5c:	bdb0      	pop	{r4, r5, r7, pc}

0800af5e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800af5e:	b5b0      	push	{r4, r5, r7, lr}
 800af60:	b084      	sub	sp, #16
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
 800af66:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800af68:	230f      	movs	r3, #15
 800af6a:	18fb      	adds	r3, r7, r3
 800af6c:	2200      	movs	r2, #0
 800af6e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	889a      	ldrh	r2, [r3, #4]
 800af74:	230e      	movs	r3, #14
 800af76:	18fb      	adds	r3, r7, r3
 800af78:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	001a      	movs	r2, r3
 800af80:	2360      	movs	r3, #96	; 0x60
 800af82:	4013      	ands	r3, r2
 800af84:	2b40      	cmp	r3, #64	; 0x40
 800af86:	d006      	beq.n	800af96 <USBD_StdEPReq+0x38>
 800af88:	d900      	bls.n	800af8c <USBD_StdEPReq+0x2e>
 800af8a:	e190      	b.n	800b2ae <USBD_StdEPReq+0x350>
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00c      	beq.n	800afaa <USBD_StdEPReq+0x4c>
 800af90:	2b20      	cmp	r3, #32
 800af92:	d000      	beq.n	800af96 <USBD_StdEPReq+0x38>
 800af94:	e18b      	b.n	800b2ae <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	23ad      	movs	r3, #173	; 0xad
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	58d3      	ldr	r3, [r2, r3]
 800af9e:	689b      	ldr	r3, [r3, #8]
 800afa0:	6839      	ldr	r1, [r7, #0]
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	0010      	movs	r0, r2
 800afa6:	4798      	blx	r3
      break;
 800afa8:	e188      	b.n	800b2bc <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	001a      	movs	r2, r3
 800afb0:	2360      	movs	r3, #96	; 0x60
 800afb2:	4013      	ands	r3, r2
 800afb4:	2b20      	cmp	r3, #32
 800afb6:	d10f      	bne.n	800afd8 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	23ad      	movs	r3, #173	; 0xad
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	58d3      	ldr	r3, [r2, r3]
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	250f      	movs	r5, #15
 800afc4:	197c      	adds	r4, r7, r5
 800afc6:	6839      	ldr	r1, [r7, #0]
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	0010      	movs	r0, r2
 800afcc:	4798      	blx	r3
 800afce:	0003      	movs	r3, r0
 800afd0:	7023      	strb	r3, [r4, #0]

        return ret;
 800afd2:	197b      	adds	r3, r7, r5
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	e174      	b.n	800b2c2 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	785b      	ldrb	r3, [r3, #1]
 800afdc:	2b03      	cmp	r3, #3
 800afde:	d007      	beq.n	800aff0 <USBD_StdEPReq+0x92>
 800afe0:	dd00      	ble.n	800afe4 <USBD_StdEPReq+0x86>
 800afe2:	e15c      	b.n	800b29e <USBD_StdEPReq+0x340>
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d100      	bne.n	800afea <USBD_StdEPReq+0x8c>
 800afe8:	e092      	b.n	800b110 <USBD_StdEPReq+0x1b2>
 800afea:	2b01      	cmp	r3, #1
 800afec:	d04b      	beq.n	800b086 <USBD_StdEPReq+0x128>
 800afee:	e156      	b.n	800b29e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	23a7      	movs	r3, #167	; 0xa7
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	5cd3      	ldrb	r3, [r2, r3]
 800aff8:	2b02      	cmp	r3, #2
 800affa:	d002      	beq.n	800b002 <USBD_StdEPReq+0xa4>
 800affc:	2b03      	cmp	r3, #3
 800affe:	d01d      	beq.n	800b03c <USBD_StdEPReq+0xde>
 800b000:	e039      	b.n	800b076 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b002:	220e      	movs	r2, #14
 800b004:	18bb      	adds	r3, r7, r2
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d010      	beq.n	800b02e <USBD_StdEPReq+0xd0>
 800b00c:	18bb      	adds	r3, r7, r2
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	2b80      	cmp	r3, #128	; 0x80
 800b012:	d00c      	beq.n	800b02e <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b014:	18bb      	adds	r3, r7, r2
 800b016:	781a      	ldrb	r2, [r3, #0]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	0011      	movs	r1, r2
 800b01c:	0018      	movs	r0, r3
 800b01e:	f001 f9d8 	bl	800c3d2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2180      	movs	r1, #128	; 0x80
 800b026:	0018      	movs	r0, r3
 800b028:	f001 f9d3 	bl	800c3d2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b02c:	e02a      	b.n	800b084 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800b02e:	683a      	ldr	r2, [r7, #0]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	0011      	movs	r1, r2
 800b034:	0018      	movs	r0, r3
 800b036:	f000 fcdf 	bl	800b9f8 <USBD_CtlError>
              break;
 800b03a:	e023      	b.n	800b084 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	885b      	ldrh	r3, [r3, #2]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d113      	bne.n	800b06c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800b044:	220e      	movs	r2, #14
 800b046:	18bb      	adds	r3, r7, r2
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d00e      	beq.n	800b06c <USBD_StdEPReq+0x10e>
 800b04e:	18bb      	adds	r3, r7, r2
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	2b80      	cmp	r3, #128	; 0x80
 800b054:	d00a      	beq.n	800b06c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	88db      	ldrh	r3, [r3, #6]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d106      	bne.n	800b06c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b05e:	18bb      	adds	r3, r7, r2
 800b060:	781a      	ldrb	r2, [r3, #0]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	0011      	movs	r1, r2
 800b066:	0018      	movs	r0, r3
 800b068:	f001 f9b3 	bl	800c3d2 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	0018      	movs	r0, r3
 800b070:	f000 fdaa 	bl	800bbc8 <USBD_CtlSendStatus>

              break;
 800b074:	e006      	b.n	800b084 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800b076:	683a      	ldr	r2, [r7, #0]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	0011      	movs	r1, r2
 800b07c:	0018      	movs	r0, r3
 800b07e:	f000 fcbb 	bl	800b9f8 <USBD_CtlError>
              break;
 800b082:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b084:	e112      	b.n	800b2ac <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	23a7      	movs	r3, #167	; 0xa7
 800b08a:	009b      	lsls	r3, r3, #2
 800b08c:	5cd3      	ldrb	r3, [r2, r3]
 800b08e:	2b02      	cmp	r3, #2
 800b090:	d002      	beq.n	800b098 <USBD_StdEPReq+0x13a>
 800b092:	2b03      	cmp	r3, #3
 800b094:	d01d      	beq.n	800b0d2 <USBD_StdEPReq+0x174>
 800b096:	e032      	b.n	800b0fe <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b098:	220e      	movs	r2, #14
 800b09a:	18bb      	adds	r3, r7, r2
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d010      	beq.n	800b0c4 <USBD_StdEPReq+0x166>
 800b0a2:	18bb      	adds	r3, r7, r2
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	2b80      	cmp	r3, #128	; 0x80
 800b0a8:	d00c      	beq.n	800b0c4 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b0aa:	18bb      	adds	r3, r7, r2
 800b0ac:	781a      	ldrb	r2, [r3, #0]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	0011      	movs	r1, r2
 800b0b2:	0018      	movs	r0, r3
 800b0b4:	f001 f98d 	bl	800c3d2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2180      	movs	r1, #128	; 0x80
 800b0bc:	0018      	movs	r0, r3
 800b0be:	f001 f988 	bl	800c3d2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0c2:	e024      	b.n	800b10e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800b0c4:	683a      	ldr	r2, [r7, #0]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	0011      	movs	r1, r2
 800b0ca:	0018      	movs	r0, r3
 800b0cc:	f000 fc94 	bl	800b9f8 <USBD_CtlError>
              break;
 800b0d0:	e01d      	b.n	800b10e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	885b      	ldrh	r3, [r3, #2]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d118      	bne.n	800b10c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b0da:	210e      	movs	r1, #14
 800b0dc:	187b      	adds	r3, r7, r1
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	227f      	movs	r2, #127	; 0x7f
 800b0e2:	4013      	ands	r3, r2
 800b0e4:	d006      	beq.n	800b0f4 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b0e6:	187b      	adds	r3, r7, r1
 800b0e8:	781a      	ldrb	r2, [r3, #0]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	0011      	movs	r1, r2
 800b0ee:	0018      	movs	r0, r3
 800b0f0:	f001 f99a 	bl	800c428 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	0018      	movs	r0, r3
 800b0f8:	f000 fd66 	bl	800bbc8 <USBD_CtlSendStatus>
              }
              break;
 800b0fc:	e006      	b.n	800b10c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800b0fe:	683a      	ldr	r2, [r7, #0]
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	0011      	movs	r1, r2
 800b104:	0018      	movs	r0, r3
 800b106:	f000 fc77 	bl	800b9f8 <USBD_CtlError>
              break;
 800b10a:	e000      	b.n	800b10e <USBD_StdEPReq+0x1b0>
              break;
 800b10c:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b10e:	e0cd      	b.n	800b2ac <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	23a7      	movs	r3, #167	; 0xa7
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	5cd3      	ldrb	r3, [r2, r3]
 800b118:	2b02      	cmp	r3, #2
 800b11a:	d002      	beq.n	800b122 <USBD_StdEPReq+0x1c4>
 800b11c:	2b03      	cmp	r3, #3
 800b11e:	d03c      	beq.n	800b19a <USBD_StdEPReq+0x23c>
 800b120:	e0b5      	b.n	800b28e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b122:	220e      	movs	r2, #14
 800b124:	18bb      	adds	r3, r7, r2
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d00a      	beq.n	800b142 <USBD_StdEPReq+0x1e4>
 800b12c:	18bb      	adds	r3, r7, r2
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	2b80      	cmp	r3, #128	; 0x80
 800b132:	d006      	beq.n	800b142 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800b134:	683a      	ldr	r2, [r7, #0]
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	0011      	movs	r1, r2
 800b13a:	0018      	movs	r0, r3
 800b13c:	f000 fc5c 	bl	800b9f8 <USBD_CtlError>
                break;
 800b140:	e0ac      	b.n	800b29c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b142:	220e      	movs	r2, #14
 800b144:	18bb      	adds	r3, r7, r2
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	b25b      	sxtb	r3, r3
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	da0c      	bge.n	800b168 <USBD_StdEPReq+0x20a>
 800b14e:	18bb      	adds	r3, r7, r2
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	227f      	movs	r2, #127	; 0x7f
 800b154:	401a      	ands	r2, r3
 800b156:	0013      	movs	r3, r2
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	189b      	adds	r3, r3, r2
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	3310      	adds	r3, #16
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	18d3      	adds	r3, r2, r3
 800b164:	3304      	adds	r3, #4
 800b166:	e00d      	b.n	800b184 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b168:	230e      	movs	r3, #14
 800b16a:	18fb      	adds	r3, r7, r3
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	227f      	movs	r2, #127	; 0x7f
 800b170:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b172:	0013      	movs	r3, r2
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	189b      	adds	r3, r3, r2
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	3351      	adds	r3, #81	; 0x51
 800b17c:	33ff      	adds	r3, #255	; 0xff
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	18d3      	adds	r3, r2, r3
 800b182:	3304      	adds	r3, #4
 800b184:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	2200      	movs	r2, #0
 800b18a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b18c:	68b9      	ldr	r1, [r7, #8]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2202      	movs	r2, #2
 800b192:	0018      	movs	r0, r3
 800b194:	f000 fcae 	bl	800baf4 <USBD_CtlSendData>
              break;
 800b198:	e080      	b.n	800b29c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b19a:	220e      	movs	r2, #14
 800b19c:	18bb      	adds	r3, r7, r2
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	b25b      	sxtb	r3, r3
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	da14      	bge.n	800b1d0 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b1a6:	18bb      	adds	r3, r7, r2
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	220f      	movs	r2, #15
 800b1ac:	401a      	ands	r2, r3
 800b1ae:	6879      	ldr	r1, [r7, #4]
 800b1b0:	0013      	movs	r3, r2
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	189b      	adds	r3, r3, r2
 800b1b6:	009b      	lsls	r3, r3, #2
 800b1b8:	18cb      	adds	r3, r1, r3
 800b1ba:	3318      	adds	r3, #24
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d11e      	bne.n	800b200 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800b1c2:	683a      	ldr	r2, [r7, #0]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	0011      	movs	r1, r2
 800b1c8:	0018      	movs	r0, r3
 800b1ca:	f000 fc15 	bl	800b9f8 <USBD_CtlError>
                  break;
 800b1ce:	e065      	b.n	800b29c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b1d0:	230e      	movs	r3, #14
 800b1d2:	18fb      	adds	r3, r7, r3
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	220f      	movs	r2, #15
 800b1d8:	401a      	ands	r2, r3
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	23ac      	movs	r3, #172	; 0xac
 800b1de:	0059      	lsls	r1, r3, #1
 800b1e0:	0013      	movs	r3, r2
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	189b      	adds	r3, r3, r2
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	18c3      	adds	r3, r0, r3
 800b1ea:	185b      	adds	r3, r3, r1
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d106      	bne.n	800b200 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800b1f2:	683a      	ldr	r2, [r7, #0]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	0011      	movs	r1, r2
 800b1f8:	0018      	movs	r0, r3
 800b1fa:	f000 fbfd 	bl	800b9f8 <USBD_CtlError>
                  break;
 800b1fe:	e04d      	b.n	800b29c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b200:	220e      	movs	r2, #14
 800b202:	18bb      	adds	r3, r7, r2
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	b25b      	sxtb	r3, r3
 800b208:	2b00      	cmp	r3, #0
 800b20a:	da0c      	bge.n	800b226 <USBD_StdEPReq+0x2c8>
 800b20c:	18bb      	adds	r3, r7, r2
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	227f      	movs	r2, #127	; 0x7f
 800b212:	401a      	ands	r2, r3
 800b214:	0013      	movs	r3, r2
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	189b      	adds	r3, r3, r2
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	3310      	adds	r3, #16
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	18d3      	adds	r3, r2, r3
 800b222:	3304      	adds	r3, #4
 800b224:	e00d      	b.n	800b242 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b226:	230e      	movs	r3, #14
 800b228:	18fb      	adds	r3, r7, r3
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	227f      	movs	r2, #127	; 0x7f
 800b22e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b230:	0013      	movs	r3, r2
 800b232:	009b      	lsls	r3, r3, #2
 800b234:	189b      	adds	r3, r3, r2
 800b236:	009b      	lsls	r3, r3, #2
 800b238:	3351      	adds	r3, #81	; 0x51
 800b23a:	33ff      	adds	r3, #255	; 0xff
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	18d3      	adds	r3, r2, r3
 800b240:	3304      	adds	r3, #4
 800b242:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b244:	220e      	movs	r2, #14
 800b246:	18bb      	adds	r3, r7, r2
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d003      	beq.n	800b256 <USBD_StdEPReq+0x2f8>
 800b24e:	18bb      	adds	r3, r7, r2
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	2b80      	cmp	r3, #128	; 0x80
 800b254:	d103      	bne.n	800b25e <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	2200      	movs	r2, #0
 800b25a:	601a      	str	r2, [r3, #0]
 800b25c:	e010      	b.n	800b280 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b25e:	230e      	movs	r3, #14
 800b260:	18fb      	adds	r3, r7, r3
 800b262:	781a      	ldrb	r2, [r3, #0]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	0011      	movs	r1, r2
 800b268:	0018      	movs	r0, r3
 800b26a:	f001 f908 	bl	800c47e <USBD_LL_IsStallEP>
 800b26e:	1e03      	subs	r3, r0, #0
 800b270:	d003      	beq.n	800b27a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	2201      	movs	r2, #1
 800b276:	601a      	str	r2, [r3, #0]
 800b278:	e002      	b.n	800b280 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	2200      	movs	r2, #0
 800b27e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b280:	68b9      	ldr	r1, [r7, #8]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2202      	movs	r2, #2
 800b286:	0018      	movs	r0, r3
 800b288:	f000 fc34 	bl	800baf4 <USBD_CtlSendData>
              break;
 800b28c:	e006      	b.n	800b29c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800b28e:	683a      	ldr	r2, [r7, #0]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	0011      	movs	r1, r2
 800b294:	0018      	movs	r0, r3
 800b296:	f000 fbaf 	bl	800b9f8 <USBD_CtlError>
              break;
 800b29a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b29c:	e006      	b.n	800b2ac <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800b29e:	683a      	ldr	r2, [r7, #0]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	0011      	movs	r1, r2
 800b2a4:	0018      	movs	r0, r3
 800b2a6:	f000 fba7 	bl	800b9f8 <USBD_CtlError>
          break;
 800b2aa:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b2ac:	e006      	b.n	800b2bc <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800b2ae:	683a      	ldr	r2, [r7, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	0011      	movs	r1, r2
 800b2b4:	0018      	movs	r0, r3
 800b2b6:	f000 fb9f 	bl	800b9f8 <USBD_CtlError>
      break;
 800b2ba:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800b2bc:	230f      	movs	r3, #15
 800b2be:	18fb      	adds	r3, r7, r3
 800b2c0:	781b      	ldrb	r3, [r3, #0]
}
 800b2c2:	0018      	movs	r0, r3
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	b004      	add	sp, #16
 800b2c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b2cc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
 800b2d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b2d6:	2308      	movs	r3, #8
 800b2d8:	18fb      	adds	r3, r7, r3
 800b2da:	2200      	movs	r2, #0
 800b2dc:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b2e2:	230b      	movs	r3, #11
 800b2e4:	18fb      	adds	r3, r7, r3
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	885b      	ldrh	r3, [r3, #2]
 800b2ee:	0a1b      	lsrs	r3, r3, #8
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	2b07      	cmp	r3, #7
 800b2f4:	d900      	bls.n	800b2f8 <USBD_GetDescriptor+0x2c>
 800b2f6:	e159      	b.n	800b5ac <USBD_GetDescriptor+0x2e0>
 800b2f8:	009a      	lsls	r2, r3, #2
 800b2fa:	4bcb      	ldr	r3, [pc, #812]	; (800b628 <USBD_GetDescriptor+0x35c>)
 800b2fc:	18d3      	adds	r3, r2, r3
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	23ac      	movs	r3, #172	; 0xac
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	58d3      	ldr	r3, [r2, r3]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	7c12      	ldrb	r2, [r2, #16]
 800b310:	2108      	movs	r1, #8
 800b312:	1879      	adds	r1, r7, r1
 800b314:	0010      	movs	r0, r2
 800b316:	4798      	blx	r3
 800b318:	0003      	movs	r3, r0
 800b31a:	60fb      	str	r3, [r7, #12]
      break;
 800b31c:	e153      	b.n	800b5c6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	7c1b      	ldrb	r3, [r3, #16]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d10f      	bne.n	800b346 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	23ad      	movs	r3, #173	; 0xad
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	58d3      	ldr	r3, [r2, r3]
 800b32e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b330:	2208      	movs	r2, #8
 800b332:	18ba      	adds	r2, r7, r2
 800b334:	0010      	movs	r0, r2
 800b336:	4798      	blx	r3
 800b338:	0003      	movs	r3, r0
 800b33a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	3301      	adds	r3, #1
 800b340:	2202      	movs	r2, #2
 800b342:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b344:	e13f      	b.n	800b5c6 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	23ad      	movs	r3, #173	; 0xad
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	58d3      	ldr	r3, [r2, r3]
 800b34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b350:	2208      	movs	r2, #8
 800b352:	18ba      	adds	r2, r7, r2
 800b354:	0010      	movs	r0, r2
 800b356:	4798      	blx	r3
 800b358:	0003      	movs	r3, r0
 800b35a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	3301      	adds	r3, #1
 800b360:	2202      	movs	r2, #2
 800b362:	701a      	strb	r2, [r3, #0]
      break;
 800b364:	e12f      	b.n	800b5c6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	885b      	ldrh	r3, [r3, #2]
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	2b05      	cmp	r3, #5
 800b36e:	d900      	bls.n	800b372 <USBD_GetDescriptor+0xa6>
 800b370:	e0d0      	b.n	800b514 <USBD_GetDescriptor+0x248>
 800b372:	009a      	lsls	r2, r3, #2
 800b374:	4bad      	ldr	r3, [pc, #692]	; (800b62c <USBD_GetDescriptor+0x360>)
 800b376:	18d3      	adds	r3, r2, r3
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	23ac      	movs	r3, #172	; 0xac
 800b380:	009b      	lsls	r3, r3, #2
 800b382:	58d3      	ldr	r3, [r2, r3]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d00d      	beq.n	800b3a6 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b38a:	687a      	ldr	r2, [r7, #4]
 800b38c:	23ac      	movs	r3, #172	; 0xac
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	58d3      	ldr	r3, [r2, r3]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	7c12      	ldrb	r2, [r2, #16]
 800b398:	2108      	movs	r1, #8
 800b39a:	1879      	adds	r1, r7, r1
 800b39c:	0010      	movs	r0, r2
 800b39e:	4798      	blx	r3
 800b3a0:	0003      	movs	r3, r0
 800b3a2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3a4:	e0c3      	b.n	800b52e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b3a6:	683a      	ldr	r2, [r7, #0]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	0011      	movs	r1, r2
 800b3ac:	0018      	movs	r0, r3
 800b3ae:	f000 fb23 	bl	800b9f8 <USBD_CtlError>
            err++;
 800b3b2:	210b      	movs	r1, #11
 800b3b4:	187b      	adds	r3, r7, r1
 800b3b6:	781a      	ldrb	r2, [r3, #0]
 800b3b8:	187b      	adds	r3, r7, r1
 800b3ba:	3201      	adds	r2, #1
 800b3bc:	701a      	strb	r2, [r3, #0]
          break;
 800b3be:	e0b6      	b.n	800b52e <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	23ac      	movs	r3, #172	; 0xac
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	58d3      	ldr	r3, [r2, r3]
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d00d      	beq.n	800b3ea <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b3ce:	687a      	ldr	r2, [r7, #4]
 800b3d0:	23ac      	movs	r3, #172	; 0xac
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	58d3      	ldr	r3, [r2, r3]
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	7c12      	ldrb	r2, [r2, #16]
 800b3dc:	2108      	movs	r1, #8
 800b3de:	1879      	adds	r1, r7, r1
 800b3e0:	0010      	movs	r0, r2
 800b3e2:	4798      	blx	r3
 800b3e4:	0003      	movs	r3, r0
 800b3e6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3e8:	e0a1      	b.n	800b52e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b3ea:	683a      	ldr	r2, [r7, #0]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	0011      	movs	r1, r2
 800b3f0:	0018      	movs	r0, r3
 800b3f2:	f000 fb01 	bl	800b9f8 <USBD_CtlError>
            err++;
 800b3f6:	210b      	movs	r1, #11
 800b3f8:	187b      	adds	r3, r7, r1
 800b3fa:	781a      	ldrb	r2, [r3, #0]
 800b3fc:	187b      	adds	r3, r7, r1
 800b3fe:	3201      	adds	r2, #1
 800b400:	701a      	strb	r2, [r3, #0]
          break;
 800b402:	e094      	b.n	800b52e <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b404:	687a      	ldr	r2, [r7, #4]
 800b406:	23ac      	movs	r3, #172	; 0xac
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	58d3      	ldr	r3, [r2, r3]
 800b40c:	68db      	ldr	r3, [r3, #12]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d00d      	beq.n	800b42e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b412:	687a      	ldr	r2, [r7, #4]
 800b414:	23ac      	movs	r3, #172	; 0xac
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	58d3      	ldr	r3, [r2, r3]
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	7c12      	ldrb	r2, [r2, #16]
 800b420:	2108      	movs	r1, #8
 800b422:	1879      	adds	r1, r7, r1
 800b424:	0010      	movs	r0, r2
 800b426:	4798      	blx	r3
 800b428:	0003      	movs	r3, r0
 800b42a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b42c:	e07f      	b.n	800b52e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b42e:	683a      	ldr	r2, [r7, #0]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	0011      	movs	r1, r2
 800b434:	0018      	movs	r0, r3
 800b436:	f000 fadf 	bl	800b9f8 <USBD_CtlError>
            err++;
 800b43a:	210b      	movs	r1, #11
 800b43c:	187b      	adds	r3, r7, r1
 800b43e:	781a      	ldrb	r2, [r3, #0]
 800b440:	187b      	adds	r3, r7, r1
 800b442:	3201      	adds	r2, #1
 800b444:	701a      	strb	r2, [r3, #0]
          break;
 800b446:	e072      	b.n	800b52e <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	23ac      	movs	r3, #172	; 0xac
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	58d3      	ldr	r3, [r2, r3]
 800b450:	691b      	ldr	r3, [r3, #16]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d00d      	beq.n	800b472 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	23ac      	movs	r3, #172	; 0xac
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	58d3      	ldr	r3, [r2, r3]
 800b45e:	691b      	ldr	r3, [r3, #16]
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	7c12      	ldrb	r2, [r2, #16]
 800b464:	2108      	movs	r1, #8
 800b466:	1879      	adds	r1, r7, r1
 800b468:	0010      	movs	r0, r2
 800b46a:	4798      	blx	r3
 800b46c:	0003      	movs	r3, r0
 800b46e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b470:	e05d      	b.n	800b52e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b472:	683a      	ldr	r2, [r7, #0]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	0011      	movs	r1, r2
 800b478:	0018      	movs	r0, r3
 800b47a:	f000 fabd 	bl	800b9f8 <USBD_CtlError>
            err++;
 800b47e:	210b      	movs	r1, #11
 800b480:	187b      	adds	r3, r7, r1
 800b482:	781a      	ldrb	r2, [r3, #0]
 800b484:	187b      	adds	r3, r7, r1
 800b486:	3201      	adds	r2, #1
 800b488:	701a      	strb	r2, [r3, #0]
          break;
 800b48a:	e050      	b.n	800b52e <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	23ac      	movs	r3, #172	; 0xac
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	58d3      	ldr	r3, [r2, r3]
 800b494:	695b      	ldr	r3, [r3, #20]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d00d      	beq.n	800b4b6 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b49a:	687a      	ldr	r2, [r7, #4]
 800b49c:	23ac      	movs	r3, #172	; 0xac
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	58d3      	ldr	r3, [r2, r3]
 800b4a2:	695b      	ldr	r3, [r3, #20]
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	7c12      	ldrb	r2, [r2, #16]
 800b4a8:	2108      	movs	r1, #8
 800b4aa:	1879      	adds	r1, r7, r1
 800b4ac:	0010      	movs	r0, r2
 800b4ae:	4798      	blx	r3
 800b4b0:	0003      	movs	r3, r0
 800b4b2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4b4:	e03b      	b.n	800b52e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b4b6:	683a      	ldr	r2, [r7, #0]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	0011      	movs	r1, r2
 800b4bc:	0018      	movs	r0, r3
 800b4be:	f000 fa9b 	bl	800b9f8 <USBD_CtlError>
            err++;
 800b4c2:	210b      	movs	r1, #11
 800b4c4:	187b      	adds	r3, r7, r1
 800b4c6:	781a      	ldrb	r2, [r3, #0]
 800b4c8:	187b      	adds	r3, r7, r1
 800b4ca:	3201      	adds	r2, #1
 800b4cc:	701a      	strb	r2, [r3, #0]
          break;
 800b4ce:	e02e      	b.n	800b52e <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	23ac      	movs	r3, #172	; 0xac
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	58d3      	ldr	r3, [r2, r3]
 800b4d8:	699b      	ldr	r3, [r3, #24]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d00d      	beq.n	800b4fa <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	23ac      	movs	r3, #172	; 0xac
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	58d3      	ldr	r3, [r2, r3]
 800b4e6:	699b      	ldr	r3, [r3, #24]
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	7c12      	ldrb	r2, [r2, #16]
 800b4ec:	2108      	movs	r1, #8
 800b4ee:	1879      	adds	r1, r7, r1
 800b4f0:	0010      	movs	r0, r2
 800b4f2:	4798      	blx	r3
 800b4f4:	0003      	movs	r3, r0
 800b4f6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4f8:	e019      	b.n	800b52e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b4fa:	683a      	ldr	r2, [r7, #0]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	0011      	movs	r1, r2
 800b500:	0018      	movs	r0, r3
 800b502:	f000 fa79 	bl	800b9f8 <USBD_CtlError>
            err++;
 800b506:	210b      	movs	r1, #11
 800b508:	187b      	adds	r3, r7, r1
 800b50a:	781a      	ldrb	r2, [r3, #0]
 800b50c:	187b      	adds	r3, r7, r1
 800b50e:	3201      	adds	r2, #1
 800b510:	701a      	strb	r2, [r3, #0]
          break;
 800b512:	e00c      	b.n	800b52e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	0011      	movs	r1, r2
 800b51a:	0018      	movs	r0, r3
 800b51c:	f000 fa6c 	bl	800b9f8 <USBD_CtlError>
          err++;
 800b520:	210b      	movs	r1, #11
 800b522:	187b      	adds	r3, r7, r1
 800b524:	781a      	ldrb	r2, [r3, #0]
 800b526:	187b      	adds	r3, r7, r1
 800b528:	3201      	adds	r2, #1
 800b52a:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800b52c:	e04b      	b.n	800b5c6 <USBD_GetDescriptor+0x2fa>
 800b52e:	e04a      	b.n	800b5c6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	7c1b      	ldrb	r3, [r3, #16]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d10b      	bne.n	800b550 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b538:	687a      	ldr	r2, [r7, #4]
 800b53a:	23ad      	movs	r3, #173	; 0xad
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	58d3      	ldr	r3, [r2, r3]
 800b540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b542:	2208      	movs	r2, #8
 800b544:	18ba      	adds	r2, r7, r2
 800b546:	0010      	movs	r0, r2
 800b548:	4798      	blx	r3
 800b54a:	0003      	movs	r3, r0
 800b54c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b54e:	e03a      	b.n	800b5c6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800b550:	683a      	ldr	r2, [r7, #0]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	0011      	movs	r1, r2
 800b556:	0018      	movs	r0, r3
 800b558:	f000 fa4e 	bl	800b9f8 <USBD_CtlError>
        err++;
 800b55c:	210b      	movs	r1, #11
 800b55e:	187b      	adds	r3, r7, r1
 800b560:	781a      	ldrb	r2, [r3, #0]
 800b562:	187b      	adds	r3, r7, r1
 800b564:	3201      	adds	r2, #1
 800b566:	701a      	strb	r2, [r3, #0]
      break;
 800b568:	e02d      	b.n	800b5c6 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	7c1b      	ldrb	r3, [r3, #16]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d10f      	bne.n	800b592 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	23ad      	movs	r3, #173	; 0xad
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	58d3      	ldr	r3, [r2, r3]
 800b57a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b57c:	2208      	movs	r2, #8
 800b57e:	18ba      	adds	r2, r7, r2
 800b580:	0010      	movs	r0, r2
 800b582:	4798      	blx	r3
 800b584:	0003      	movs	r3, r0
 800b586:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	3301      	adds	r3, #1
 800b58c:	2207      	movs	r2, #7
 800b58e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b590:	e019      	b.n	800b5c6 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800b592:	683a      	ldr	r2, [r7, #0]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	0011      	movs	r1, r2
 800b598:	0018      	movs	r0, r3
 800b59a:	f000 fa2d 	bl	800b9f8 <USBD_CtlError>
        err++;
 800b59e:	210b      	movs	r1, #11
 800b5a0:	187b      	adds	r3, r7, r1
 800b5a2:	781a      	ldrb	r2, [r3, #0]
 800b5a4:	187b      	adds	r3, r7, r1
 800b5a6:	3201      	adds	r2, #1
 800b5a8:	701a      	strb	r2, [r3, #0]
      break;
 800b5aa:	e00c      	b.n	800b5c6 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800b5ac:	683a      	ldr	r2, [r7, #0]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	0011      	movs	r1, r2
 800b5b2:	0018      	movs	r0, r3
 800b5b4:	f000 fa20 	bl	800b9f8 <USBD_CtlError>
      err++;
 800b5b8:	210b      	movs	r1, #11
 800b5ba:	187b      	adds	r3, r7, r1
 800b5bc:	781a      	ldrb	r2, [r3, #0]
 800b5be:	187b      	adds	r3, r7, r1
 800b5c0:	3201      	adds	r2, #1
 800b5c2:	701a      	strb	r2, [r3, #0]
      break;
 800b5c4:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800b5c6:	230b      	movs	r3, #11
 800b5c8:	18fb      	adds	r3, r7, r3
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d127      	bne.n	800b620 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b5d0:	2108      	movs	r1, #8
 800b5d2:	187b      	adds	r3, r7, r1
 800b5d4:	881b      	ldrh	r3, [r3, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d019      	beq.n	800b60e <USBD_GetDescriptor+0x342>
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	88db      	ldrh	r3, [r3, #6]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d015      	beq.n	800b60e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	88da      	ldrh	r2, [r3, #6]
 800b5e6:	187b      	adds	r3, r7, r1
 800b5e8:	881b      	ldrh	r3, [r3, #0]
 800b5ea:	1c18      	adds	r0, r3, #0
 800b5ec:	1c11      	adds	r1, r2, #0
 800b5ee:	b28a      	uxth	r2, r1
 800b5f0:	b283      	uxth	r3, r0
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d900      	bls.n	800b5f8 <USBD_GetDescriptor+0x32c>
 800b5f6:	1c01      	adds	r1, r0, #0
 800b5f8:	b28a      	uxth	r2, r1
 800b5fa:	2108      	movs	r1, #8
 800b5fc:	187b      	adds	r3, r7, r1
 800b5fe:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b600:	187b      	adds	r3, r7, r1
 800b602:	881a      	ldrh	r2, [r3, #0]
 800b604:	68f9      	ldr	r1, [r7, #12]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	0018      	movs	r0, r3
 800b60a:	f000 fa73 	bl	800baf4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	88db      	ldrh	r3, [r3, #6]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d105      	bne.n	800b622 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	0018      	movs	r0, r3
 800b61a:	f000 fad5 	bl	800bbc8 <USBD_CtlSendStatus>
 800b61e:	e000      	b.n	800b622 <USBD_GetDescriptor+0x356>
    return;
 800b620:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800b622:	46bd      	mov	sp, r7
 800b624:	b004      	add	sp, #16
 800b626:	bd80      	pop	{r7, pc}
 800b628:	0800d148 	.word	0x0800d148
 800b62c:	0800d168 	.word	0x0800d168

0800b630 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b630:	b590      	push	{r4, r7, lr}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	889b      	ldrh	r3, [r3, #4]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d13d      	bne.n	800b6be <USBD_SetAddress+0x8e>
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	88db      	ldrh	r3, [r3, #6]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d139      	bne.n	800b6be <USBD_SetAddress+0x8e>
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	885b      	ldrh	r3, [r3, #2]
 800b64e:	2b7f      	cmp	r3, #127	; 0x7f
 800b650:	d835      	bhi.n	800b6be <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	885b      	ldrh	r3, [r3, #2]
 800b656:	b2da      	uxtb	r2, r3
 800b658:	230f      	movs	r3, #15
 800b65a:	18fb      	adds	r3, r7, r3
 800b65c:	217f      	movs	r1, #127	; 0x7f
 800b65e:	400a      	ands	r2, r1
 800b660:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b662:	687a      	ldr	r2, [r7, #4]
 800b664:	23a7      	movs	r3, #167	; 0xa7
 800b666:	009b      	lsls	r3, r3, #2
 800b668:	5cd3      	ldrb	r3, [r2, r3]
 800b66a:	2b03      	cmp	r3, #3
 800b66c:	d106      	bne.n	800b67c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800b66e:	683a      	ldr	r2, [r7, #0]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	0011      	movs	r1, r2
 800b674:	0018      	movs	r0, r3
 800b676:	f000 f9bf 	bl	800b9f8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b67a:	e027      	b.n	800b6cc <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	240f      	movs	r4, #15
 800b680:	193a      	adds	r2, r7, r4
 800b682:	4914      	ldr	r1, [pc, #80]	; (800b6d4 <USBD_SetAddress+0xa4>)
 800b684:	7812      	ldrb	r2, [r2, #0]
 800b686:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b688:	193b      	adds	r3, r7, r4
 800b68a:	781a      	ldrb	r2, [r3, #0]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	0011      	movs	r1, r2
 800b690:	0018      	movs	r0, r3
 800b692:	f000 ff25 	bl	800c4e0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	0018      	movs	r0, r3
 800b69a:	f000 fa95 	bl	800bbc8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b69e:	193b      	adds	r3, r7, r4
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d005      	beq.n	800b6b2 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	23a7      	movs	r3, #167	; 0xa7
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	2102      	movs	r1, #2
 800b6ae:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6b0:	e00c      	b.n	800b6cc <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	23a7      	movs	r3, #167	; 0xa7
 800b6b6:	009b      	lsls	r3, r3, #2
 800b6b8:	2101      	movs	r1, #1
 800b6ba:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6bc:	e006      	b.n	800b6cc <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	0011      	movs	r1, r2
 800b6c4:	0018      	movs	r0, r3
 800b6c6:	f000 f997 	bl	800b9f8 <USBD_CtlError>
  }
}
 800b6ca:	46c0      	nop			; (mov r8, r8)
 800b6cc:	46c0      	nop			; (mov r8, r8)
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	b005      	add	sp, #20
 800b6d2:	bd90      	pop	{r4, r7, pc}
 800b6d4:	0000029e 	.word	0x0000029e

0800b6d8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	885b      	ldrh	r3, [r3, #2]
 800b6e6:	b2da      	uxtb	r2, r3
 800b6e8:	4b4c      	ldr	r3, [pc, #304]	; (800b81c <USBD_SetConfig+0x144>)
 800b6ea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b6ec:	4b4b      	ldr	r3, [pc, #300]	; (800b81c <USBD_SetConfig+0x144>)
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d906      	bls.n	800b702 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800b6f4:	683a      	ldr	r2, [r7, #0]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	0011      	movs	r1, r2
 800b6fa:	0018      	movs	r0, r3
 800b6fc:	f000 f97c 	bl	800b9f8 <USBD_CtlError>
 800b700:	e088      	b.n	800b814 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	23a7      	movs	r3, #167	; 0xa7
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	5cd3      	ldrb	r3, [r2, r3]
 800b70a:	2b02      	cmp	r3, #2
 800b70c:	d002      	beq.n	800b714 <USBD_SetConfig+0x3c>
 800b70e:	2b03      	cmp	r3, #3
 800b710:	d029      	beq.n	800b766 <USBD_SetConfig+0x8e>
 800b712:	e071      	b.n	800b7f8 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b714:	4b41      	ldr	r3, [pc, #260]	; (800b81c <USBD_SetConfig+0x144>)
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d01f      	beq.n	800b75c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800b71c:	4b3f      	ldr	r3, [pc, #252]	; (800b81c <USBD_SetConfig+0x144>)
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	001a      	movs	r2, r3
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	23a7      	movs	r3, #167	; 0xa7
 800b72a:	009b      	lsls	r3, r3, #2
 800b72c:	2103      	movs	r1, #3
 800b72e:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b730:	4b3a      	ldr	r3, [pc, #232]	; (800b81c <USBD_SetConfig+0x144>)
 800b732:	781a      	ldrb	r2, [r3, #0]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	0011      	movs	r1, r2
 800b738:	0018      	movs	r0, r3
 800b73a:	f7ff f8c6 	bl	800a8ca <USBD_SetClassConfig>
 800b73e:	0003      	movs	r3, r0
 800b740:	2b02      	cmp	r3, #2
 800b742:	d106      	bne.n	800b752 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800b744:	683a      	ldr	r2, [r7, #0]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	0011      	movs	r1, r2
 800b74a:	0018      	movs	r0, r3
 800b74c:	f000 f954 	bl	800b9f8 <USBD_CtlError>
            return;
 800b750:	e060      	b.n	800b814 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	0018      	movs	r0, r3
 800b756:	f000 fa37 	bl	800bbc8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b75a:	e05b      	b.n	800b814 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	0018      	movs	r0, r3
 800b760:	f000 fa32 	bl	800bbc8 <USBD_CtlSendStatus>
        break;
 800b764:	e056      	b.n	800b814 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b766:	4b2d      	ldr	r3, [pc, #180]	; (800b81c <USBD_SetConfig+0x144>)
 800b768:	781b      	ldrb	r3, [r3, #0]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d115      	bne.n	800b79a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	23a7      	movs	r3, #167	; 0xa7
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	2102      	movs	r1, #2
 800b776:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800b778:	4b28      	ldr	r3, [pc, #160]	; (800b81c <USBD_SetConfig+0x144>)
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	001a      	movs	r2, r3
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b782:	4b26      	ldr	r3, [pc, #152]	; (800b81c <USBD_SetConfig+0x144>)
 800b784:	781a      	ldrb	r2, [r3, #0]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	0011      	movs	r1, r2
 800b78a:	0018      	movs	r0, r3
 800b78c:	f7ff f8c4 	bl	800a918 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	0018      	movs	r0, r3
 800b794:	f000 fa18 	bl	800bbc8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b798:	e03c      	b.n	800b814 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800b79a:	4b20      	ldr	r3, [pc, #128]	; (800b81c <USBD_SetConfig+0x144>)
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	001a      	movs	r2, r3
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d022      	beq.n	800b7ee <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	b2da      	uxtb	r2, r3
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	0011      	movs	r1, r2
 800b7b2:	0018      	movs	r0, r3
 800b7b4:	f7ff f8b0 	bl	800a918 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b7b8:	4b18      	ldr	r3, [pc, #96]	; (800b81c <USBD_SetConfig+0x144>)
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	001a      	movs	r2, r3
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b7c2:	4b16      	ldr	r3, [pc, #88]	; (800b81c <USBD_SetConfig+0x144>)
 800b7c4:	781a      	ldrb	r2, [r3, #0]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	0011      	movs	r1, r2
 800b7ca:	0018      	movs	r0, r3
 800b7cc:	f7ff f87d 	bl	800a8ca <USBD_SetClassConfig>
 800b7d0:	0003      	movs	r3, r0
 800b7d2:	2b02      	cmp	r3, #2
 800b7d4:	d106      	bne.n	800b7e4 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800b7d6:	683a      	ldr	r2, [r7, #0]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	0011      	movs	r1, r2
 800b7dc:	0018      	movs	r0, r3
 800b7de:	f000 f90b 	bl	800b9f8 <USBD_CtlError>
            return;
 800b7e2:	e017      	b.n	800b814 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	0018      	movs	r0, r3
 800b7e8:	f000 f9ee 	bl	800bbc8 <USBD_CtlSendStatus>
        break;
 800b7ec:	e012      	b.n	800b814 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	0018      	movs	r0, r3
 800b7f2:	f000 f9e9 	bl	800bbc8 <USBD_CtlSendStatus>
        break;
 800b7f6:	e00d      	b.n	800b814 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800b7f8:	683a      	ldr	r2, [r7, #0]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	0011      	movs	r1, r2
 800b7fe:	0018      	movs	r0, r3
 800b800:	f000 f8fa 	bl	800b9f8 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b804:	4b05      	ldr	r3, [pc, #20]	; (800b81c <USBD_SetConfig+0x144>)
 800b806:	781a      	ldrb	r2, [r3, #0]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	0011      	movs	r1, r2
 800b80c:	0018      	movs	r0, r3
 800b80e:	f7ff f883 	bl	800a918 <USBD_ClrClassConfig>
        break;
 800b812:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800b814:	46bd      	mov	sp, r7
 800b816:	b002      	add	sp, #8
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	46c0      	nop			; (mov r8, r8)
 800b81c:	2000025d 	.word	0x2000025d

0800b820 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	88db      	ldrh	r3, [r3, #6]
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d006      	beq.n	800b840 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800b832:	683a      	ldr	r2, [r7, #0]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	0011      	movs	r1, r2
 800b838:	0018      	movs	r0, r3
 800b83a:	f000 f8dd 	bl	800b9f8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b83e:	e026      	b.n	800b88e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800b840:	687a      	ldr	r2, [r7, #4]
 800b842:	23a7      	movs	r3, #167	; 0xa7
 800b844:	009b      	lsls	r3, r3, #2
 800b846:	5cd3      	ldrb	r3, [r2, r3]
 800b848:	2b02      	cmp	r3, #2
 800b84a:	dc02      	bgt.n	800b852 <USBD_GetConfig+0x32>
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	dc03      	bgt.n	800b858 <USBD_GetConfig+0x38>
 800b850:	e016      	b.n	800b880 <USBD_GetConfig+0x60>
 800b852:	2b03      	cmp	r3, #3
 800b854:	d00c      	beq.n	800b870 <USBD_GetConfig+0x50>
 800b856:	e013      	b.n	800b880 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2200      	movs	r2, #0
 800b85c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	3308      	adds	r3, #8
 800b862:	0019      	movs	r1, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2201      	movs	r2, #1
 800b868:	0018      	movs	r0, r3
 800b86a:	f000 f943 	bl	800baf4 <USBD_CtlSendData>
        break;
 800b86e:	e00e      	b.n	800b88e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	1d19      	adds	r1, r3, #4
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2201      	movs	r2, #1
 800b878:	0018      	movs	r0, r3
 800b87a:	f000 f93b 	bl	800baf4 <USBD_CtlSendData>
        break;
 800b87e:	e006      	b.n	800b88e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800b880:	683a      	ldr	r2, [r7, #0]
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	0011      	movs	r1, r2
 800b886:	0018      	movs	r0, r3
 800b888:	f000 f8b6 	bl	800b9f8 <USBD_CtlError>
        break;
 800b88c:	46c0      	nop			; (mov r8, r8)
}
 800b88e:	46c0      	nop			; (mov r8, r8)
 800b890:	46bd      	mov	sp, r7
 800b892:	b002      	add	sp, #8
 800b894:	bd80      	pop	{r7, pc}

0800b896 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b082      	sub	sp, #8
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
 800b89e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	23a7      	movs	r3, #167	; 0xa7
 800b8a4:	009b      	lsls	r3, r3, #2
 800b8a6:	5cd3      	ldrb	r3, [r2, r3]
 800b8a8:	3b01      	subs	r3, #1
 800b8aa:	2b02      	cmp	r3, #2
 800b8ac:	d822      	bhi.n	800b8f4 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	88db      	ldrh	r3, [r3, #6]
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	d006      	beq.n	800b8c4 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800b8b6:	683a      	ldr	r2, [r7, #0]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	0011      	movs	r1, r2
 800b8bc:	0018      	movs	r0, r3
 800b8be:	f000 f89b 	bl	800b9f8 <USBD_CtlError>
        break;
 800b8c2:	e01e      	b.n	800b902 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	23a9      	movs	r3, #169	; 0xa9
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	58d3      	ldr	r3, [r2, r3]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d005      	beq.n	800b8e2 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	2202      	movs	r2, #2
 800b8dc:	431a      	orrs	r2, r3
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	330c      	adds	r3, #12
 800b8e6:	0019      	movs	r1, r3
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2202      	movs	r2, #2
 800b8ec:	0018      	movs	r0, r3
 800b8ee:	f000 f901 	bl	800baf4 <USBD_CtlSendData>
      break;
 800b8f2:	e006      	b.n	800b902 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800b8f4:	683a      	ldr	r2, [r7, #0]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	0011      	movs	r1, r2
 800b8fa:	0018      	movs	r0, r3
 800b8fc:	f000 f87c 	bl	800b9f8 <USBD_CtlError>
      break;
 800b900:	46c0      	nop			; (mov r8, r8)
  }
}
 800b902:	46c0      	nop			; (mov r8, r8)
 800b904:	46bd      	mov	sp, r7
 800b906:	b002      	add	sp, #8
 800b908:	bd80      	pop	{r7, pc}

0800b90a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b082      	sub	sp, #8
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
 800b912:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	885b      	ldrh	r3, [r3, #2]
 800b918:	2b01      	cmp	r3, #1
 800b91a:	d108      	bne.n	800b92e <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	23a9      	movs	r3, #169	; 0xa9
 800b920:	009b      	lsls	r3, r3, #2
 800b922:	2101      	movs	r1, #1
 800b924:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	0018      	movs	r0, r3
 800b92a:	f000 f94d 	bl	800bbc8 <USBD_CtlSendStatus>
  }
}
 800b92e:	46c0      	nop			; (mov r8, r8)
 800b930:	46bd      	mov	sp, r7
 800b932:	b002      	add	sp, #8
 800b934:	bd80      	pop	{r7, pc}

0800b936 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b936:	b580      	push	{r7, lr}
 800b938:	b082      	sub	sp, #8
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
 800b93e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	23a7      	movs	r3, #167	; 0xa7
 800b944:	009b      	lsls	r3, r3, #2
 800b946:	5cd3      	ldrb	r3, [r2, r3]
 800b948:	3b01      	subs	r3, #1
 800b94a:	2b02      	cmp	r3, #2
 800b94c:	d80d      	bhi.n	800b96a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	885b      	ldrh	r3, [r3, #2]
 800b952:	2b01      	cmp	r3, #1
 800b954:	d110      	bne.n	800b978 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	23a9      	movs	r3, #169	; 0xa9
 800b95a:	009b      	lsls	r3, r3, #2
 800b95c:	2100      	movs	r1, #0
 800b95e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	0018      	movs	r0, r3
 800b964:	f000 f930 	bl	800bbc8 <USBD_CtlSendStatus>
      }
      break;
 800b968:	e006      	b.n	800b978 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800b96a:	683a      	ldr	r2, [r7, #0]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	0011      	movs	r1, r2
 800b970:	0018      	movs	r0, r3
 800b972:	f000 f841 	bl	800b9f8 <USBD_CtlError>
      break;
 800b976:	e000      	b.n	800b97a <USBD_ClrFeature+0x44>
      break;
 800b978:	46c0      	nop			; (mov r8, r8)
  }
}
 800b97a:	46c0      	nop			; (mov r8, r8)
 800b97c:	46bd      	mov	sp, r7
 800b97e:	b002      	add	sp, #8
 800b980:	bd80      	pop	{r7, pc}

0800b982 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b982:	b580      	push	{r7, lr}
 800b984:	b082      	sub	sp, #8
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	781a      	ldrb	r2, [r3, #0]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	785a      	ldrb	r2, [r3, #1]
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	3302      	adds	r3, #2
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	b29a      	uxth	r2, r3
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	3303      	adds	r3, #3
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	b29b      	uxth	r3, r3
 800b9ac:	021b      	lsls	r3, r3, #8
 800b9ae:	b29b      	uxth	r3, r3
 800b9b0:	18d3      	adds	r3, r2, r3
 800b9b2:	b29a      	uxth	r2, r3
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	3304      	adds	r3, #4
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	3305      	adds	r3, #5
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	021b      	lsls	r3, r3, #8
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	18d3      	adds	r3, r2, r3
 800b9ce:	b29a      	uxth	r2, r3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	3306      	adds	r3, #6
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	b29a      	uxth	r2, r3
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	3307      	adds	r3, #7
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	021b      	lsls	r3, r3, #8
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	18d3      	adds	r3, r2, r3
 800b9ea:	b29a      	uxth	r2, r3
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	80da      	strh	r2, [r3, #6]

}
 800b9f0:	46c0      	nop			; (mov r8, r8)
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	b002      	add	sp, #8
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2180      	movs	r1, #128	; 0x80
 800ba06:	0018      	movs	r0, r3
 800ba08:	f000 fce3 	bl	800c3d2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2100      	movs	r1, #0
 800ba10:	0018      	movs	r0, r3
 800ba12:	f000 fcde 	bl	800c3d2 <USBD_LL_StallEP>
}
 800ba16:	46c0      	nop			; (mov r8, r8)
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	b002      	add	sp, #8
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ba1e:	b590      	push	{r4, r7, lr}
 800ba20:	b087      	sub	sp, #28
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	60f8      	str	r0, [r7, #12]
 800ba26:	60b9      	str	r1, [r7, #8]
 800ba28:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ba2a:	2417      	movs	r4, #23
 800ba2c:	193b      	adds	r3, r7, r4
 800ba2e:	2200      	movs	r2, #0
 800ba30:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d03c      	beq.n	800bab2 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	0018      	movs	r0, r3
 800ba3c:	f000 f83d 	bl	800baba <USBD_GetLen>
 800ba40:	0003      	movs	r3, r0
 800ba42:	3301      	adds	r3, #1
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	18db      	adds	r3, r3, r3
 800ba48:	b29a      	uxth	r2, r3
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ba4e:	193b      	adds	r3, r7, r4
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	193a      	adds	r2, r7, r4
 800ba54:	1c59      	adds	r1, r3, #1
 800ba56:	7011      	strb	r1, [r2, #0]
 800ba58:	001a      	movs	r2, r3
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	189b      	adds	r3, r3, r2
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	7812      	ldrb	r2, [r2, #0]
 800ba62:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ba64:	193b      	adds	r3, r7, r4
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	193a      	adds	r2, r7, r4
 800ba6a:	1c59      	adds	r1, r3, #1
 800ba6c:	7011      	strb	r1, [r2, #0]
 800ba6e:	001a      	movs	r2, r3
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	189b      	adds	r3, r3, r2
 800ba74:	2203      	movs	r2, #3
 800ba76:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ba78:	e017      	b.n	800baaa <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	1c5a      	adds	r2, r3, #1
 800ba7e:	60fa      	str	r2, [r7, #12]
 800ba80:	2417      	movs	r4, #23
 800ba82:	193a      	adds	r2, r7, r4
 800ba84:	7812      	ldrb	r2, [r2, #0]
 800ba86:	1939      	adds	r1, r7, r4
 800ba88:	1c50      	adds	r0, r2, #1
 800ba8a:	7008      	strb	r0, [r1, #0]
 800ba8c:	0011      	movs	r1, r2
 800ba8e:	68ba      	ldr	r2, [r7, #8]
 800ba90:	1852      	adds	r2, r2, r1
 800ba92:	781b      	ldrb	r3, [r3, #0]
 800ba94:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ba96:	193b      	adds	r3, r7, r4
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	193a      	adds	r2, r7, r4
 800ba9c:	1c59      	adds	r1, r3, #1
 800ba9e:	7011      	strb	r1, [r2, #0]
 800baa0:	001a      	movs	r2, r3
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	189b      	adds	r3, r3, r2
 800baa6:	2200      	movs	r2, #0
 800baa8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d1e3      	bne.n	800ba7a <USBD_GetString+0x5c>
    }
  }
}
 800bab2:	46c0      	nop			; (mov r8, r8)
 800bab4:	46bd      	mov	sp, r7
 800bab6:	b007      	add	sp, #28
 800bab8:	bd90      	pop	{r4, r7, pc}

0800baba <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b084      	sub	sp, #16
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bac2:	230f      	movs	r3, #15
 800bac4:	18fb      	adds	r3, r7, r3
 800bac6:	2200      	movs	r2, #0
 800bac8:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800baca:	e008      	b.n	800bade <USBD_GetLen+0x24>
  {
    len++;
 800bacc:	210f      	movs	r1, #15
 800bace:	187b      	adds	r3, r7, r1
 800bad0:	781a      	ldrb	r2, [r3, #0]
 800bad2:	187b      	adds	r3, r7, r1
 800bad4:	3201      	adds	r2, #1
 800bad6:	701a      	strb	r2, [r3, #0]
    buf++;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	3301      	adds	r3, #1
 800badc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1f2      	bne.n	800bacc <USBD_GetLen+0x12>
  }

  return len;
 800bae6:	230f      	movs	r3, #15
 800bae8:	18fb      	adds	r3, r7, r3
 800baea:	781b      	ldrb	r3, [r3, #0]
}
 800baec:	0018      	movs	r0, r3
 800baee:	46bd      	mov	sp, r7
 800baf0:	b004      	add	sp, #16
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	1dbb      	adds	r3, r7, #6
 800bb00:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bb02:	68fa      	ldr	r2, [r7, #12]
 800bb04:	23a5      	movs	r3, #165	; 0xa5
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	2102      	movs	r1, #2
 800bb0a:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800bb0c:	1dbb      	adds	r3, r7, #6
 800bb0e:	881a      	ldrh	r2, [r3, #0]
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bb14:	1dbb      	adds	r3, r7, #6
 800bb16:	881a      	ldrh	r2, [r3, #0]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb1c:	1dbb      	adds	r3, r7, #6
 800bb1e:	881b      	ldrh	r3, [r3, #0]
 800bb20:	68ba      	ldr	r2, [r7, #8]
 800bb22:	68f8      	ldr	r0, [r7, #12]
 800bb24:	2100      	movs	r1, #0
 800bb26:	f000 fd06 	bl	800c536 <USBD_LL_Transmit>

  return USBD_OK;
 800bb2a:	2300      	movs	r3, #0
}
 800bb2c:	0018      	movs	r0, r3
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	b004      	add	sp, #16
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	1dbb      	adds	r3, r7, #6
 800bb40:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bb42:	1dbb      	adds	r3, r7, #6
 800bb44:	881b      	ldrh	r3, [r3, #0]
 800bb46:	68ba      	ldr	r2, [r7, #8]
 800bb48:	68f8      	ldr	r0, [r7, #12]
 800bb4a:	2100      	movs	r1, #0
 800bb4c:	f000 fcf3 	bl	800c536 <USBD_LL_Transmit>

  return USBD_OK;
 800bb50:	2300      	movs	r3, #0
}
 800bb52:	0018      	movs	r0, r3
 800bb54:	46bd      	mov	sp, r7
 800bb56:	b004      	add	sp, #16
 800bb58:	bd80      	pop	{r7, pc}

0800bb5a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b084      	sub	sp, #16
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	60f8      	str	r0, [r7, #12]
 800bb62:	60b9      	str	r1, [r7, #8]
 800bb64:	1dbb      	adds	r3, r7, #6
 800bb66:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bb68:	68fa      	ldr	r2, [r7, #12]
 800bb6a:	23a5      	movs	r3, #165	; 0xa5
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	2103      	movs	r1, #3
 800bb70:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800bb72:	1dbb      	adds	r3, r7, #6
 800bb74:	8819      	ldrh	r1, [r3, #0]
 800bb76:	68fa      	ldr	r2, [r7, #12]
 800bb78:	23ae      	movs	r3, #174	; 0xae
 800bb7a:	005b      	lsls	r3, r3, #1
 800bb7c:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800bb7e:	1dbb      	adds	r3, r7, #6
 800bb80:	8819      	ldrh	r1, [r3, #0]
 800bb82:	68fa      	ldr	r2, [r7, #12]
 800bb84:	23b0      	movs	r3, #176	; 0xb0
 800bb86:	005b      	lsls	r3, r3, #1
 800bb88:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb8a:	1dbb      	adds	r3, r7, #6
 800bb8c:	881b      	ldrh	r3, [r3, #0]
 800bb8e:	68ba      	ldr	r2, [r7, #8]
 800bb90:	68f8      	ldr	r0, [r7, #12]
 800bb92:	2100      	movs	r1, #0
 800bb94:	f000 fd06 	bl	800c5a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	0018      	movs	r0, r3
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	b004      	add	sp, #16
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b084      	sub	sp, #16
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	60f8      	str	r0, [r7, #12]
 800bbaa:	60b9      	str	r1, [r7, #8]
 800bbac:	1dbb      	adds	r3, r7, #6
 800bbae:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bbb0:	1dbb      	adds	r3, r7, #6
 800bbb2:	881b      	ldrh	r3, [r3, #0]
 800bbb4:	68ba      	ldr	r2, [r7, #8]
 800bbb6:	68f8      	ldr	r0, [r7, #12]
 800bbb8:	2100      	movs	r1, #0
 800bbba:	f000 fcf3 	bl	800c5a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bbbe:	2300      	movs	r3, #0
}
 800bbc0:	0018      	movs	r0, r3
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	b004      	add	sp, #16
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	23a5      	movs	r3, #165	; 0xa5
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	2104      	movs	r1, #4
 800bbd8:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	2300      	movs	r3, #0
 800bbde:	2200      	movs	r2, #0
 800bbe0:	2100      	movs	r1, #0
 800bbe2:	f000 fca8 	bl	800c536 <USBD_LL_Transmit>

  return USBD_OK;
 800bbe6:	2300      	movs	r3, #0
}
 800bbe8:	0018      	movs	r0, r3
 800bbea:	46bd      	mov	sp, r7
 800bbec:	b002      	add	sp, #8
 800bbee:	bd80      	pop	{r7, pc}

0800bbf0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	23a5      	movs	r3, #165	; 0xa5
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	2105      	movs	r1, #5
 800bc00:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	2300      	movs	r3, #0
 800bc06:	2200      	movs	r2, #0
 800bc08:	2100      	movs	r1, #0
 800bc0a:	f000 fccb 	bl	800c5a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc0e:	2300      	movs	r3, #0
}
 800bc10:	0018      	movs	r0, r3
 800bc12:	46bd      	mov	sp, r7
 800bc14:	b002      	add	sp, #8
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bc1c:	4914      	ldr	r1, [pc, #80]	; (800bc70 <MX_USB_DEVICE_Init+0x58>)
 800bc1e:	4b15      	ldr	r3, [pc, #84]	; (800bc74 <MX_USB_DEVICE_Init+0x5c>)
 800bc20:	2200      	movs	r2, #0
 800bc22:	0018      	movs	r0, r3
 800bc24:	f7fe fdea 	bl	800a7fc <USBD_Init>
 800bc28:	1e03      	subs	r3, r0, #0
 800bc2a:	d001      	beq.n	800bc30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bc2c:	f7f5 fcb2 	bl	8001594 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bc30:	4a11      	ldr	r2, [pc, #68]	; (800bc78 <MX_USB_DEVICE_Init+0x60>)
 800bc32:	4b10      	ldr	r3, [pc, #64]	; (800bc74 <MX_USB_DEVICE_Init+0x5c>)
 800bc34:	0011      	movs	r1, r2
 800bc36:	0018      	movs	r0, r3
 800bc38:	f7fe fe11 	bl	800a85e <USBD_RegisterClass>
 800bc3c:	1e03      	subs	r3, r0, #0
 800bc3e:	d001      	beq.n	800bc44 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800bc40:	f7f5 fca8 	bl	8001594 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bc44:	4a0d      	ldr	r2, [pc, #52]	; (800bc7c <MX_USB_DEVICE_Init+0x64>)
 800bc46:	4b0b      	ldr	r3, [pc, #44]	; (800bc74 <MX_USB_DEVICE_Init+0x5c>)
 800bc48:	0011      	movs	r1, r2
 800bc4a:	0018      	movs	r0, r3
 800bc4c:	f7fe fd26 	bl	800a69c <USBD_CDC_RegisterInterface>
 800bc50:	1e03      	subs	r3, r0, #0
 800bc52:	d001      	beq.n	800bc58 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800bc54:	f7f5 fc9e 	bl	8001594 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bc58:	4b06      	ldr	r3, [pc, #24]	; (800bc74 <MX_USB_DEVICE_Init+0x5c>)
 800bc5a:	0018      	movs	r0, r3
 800bc5c:	f7fe fe1f 	bl	800a89e <USBD_Start>
 800bc60:	1e03      	subs	r3, r0, #0
 800bc62:	d001      	beq.n	800bc68 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800bc64:	f7f5 fc96 	bl	8001594 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bc68:	46c0      	nop			; (mov r8, r8)
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	46c0      	nop			; (mov r8, r8)
 800bc70:	2000012c 	.word	0x2000012c
 800bc74:	200006d0 	.word	0x200006d0
 800bc78:	20000018 	.word	0x20000018
 800bc7c:	2000011c 	.word	0x2000011c

0800bc80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bc84:	4907      	ldr	r1, [pc, #28]	; (800bca4 <CDC_Init_FS+0x24>)
 800bc86:	4b08      	ldr	r3, [pc, #32]	; (800bca8 <CDC_Init_FS+0x28>)
 800bc88:	2200      	movs	r2, #0
 800bc8a:	0018      	movs	r0, r3
 800bc8c:	f7fe fd21 	bl	800a6d2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bc90:	4a06      	ldr	r2, [pc, #24]	; (800bcac <CDC_Init_FS+0x2c>)
 800bc92:	4b05      	ldr	r3, [pc, #20]	; (800bca8 <CDC_Init_FS+0x28>)
 800bc94:	0011      	movs	r1, r2
 800bc96:	0018      	movs	r0, r3
 800bc98:	f7fe fd37 	bl	800a70a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bc9c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bc9e:	0018      	movs	r0, r3
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	20000d7c 	.word	0x20000d7c
 800bca8:	200006d0 	.word	0x200006d0
 800bcac:	20000994 	.word	0x20000994

0800bcb0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bcb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bcb6:	0018      	movs	r0, r3
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6039      	str	r1, [r7, #0]
 800bcc4:	0011      	movs	r1, r2
 800bcc6:	1dfb      	adds	r3, r7, #7
 800bcc8:	1c02      	adds	r2, r0, #0
 800bcca:	701a      	strb	r2, [r3, #0]
 800bccc:	1d3b      	adds	r3, r7, #4
 800bcce:	1c0a      	adds	r2, r1, #0
 800bcd0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bcd2:	1dfb      	adds	r3, r7, #7
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	2b23      	cmp	r3, #35	; 0x23
 800bcd8:	d804      	bhi.n	800bce4 <CDC_Control_FS+0x28>
 800bcda:	009a      	lsls	r2, r3, #2
 800bcdc:	4b04      	ldr	r3, [pc, #16]	; (800bcf0 <CDC_Control_FS+0x34>)
 800bcde:	18d3      	adds	r3, r2, r3
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bce4:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800bce6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bce8:	0018      	movs	r0, r3
 800bcea:	46bd      	mov	sp, r7
 800bcec:	b002      	add	sp, #8
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	0800d180 	.word	0x0800d180

0800bcf4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bcf4:	b590      	push	{r4, r7, lr}
 800bcf6:	b085      	sub	sp, #20
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
 800bcfc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  flags.data_received = 1;
 800bcfe:	4b18      	ldr	r3, [pc, #96]	; (800bd60 <CDC_Receive_FS+0x6c>)
 800bd00:	7a1a      	ldrb	r2, [r3, #8]
 800bd02:	2101      	movs	r1, #1
 800bd04:	430a      	orrs	r2, r1
 800bd06:	721a      	strb	r2, [r3, #8]

  for(uint8_t i = 0; i < *Len; i++)
 800bd08:	230f      	movs	r3, #15
 800bd0a:	18fb      	adds	r3, r7, r3
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	701a      	strb	r2, [r3, #0]
 800bd10:	e00f      	b.n	800bd32 <CDC_Receive_FS+0x3e>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800bd12:	4b14      	ldr	r3, [pc, #80]	; (800bd64 <CDC_Receive_FS+0x70>)
 800bd14:	6818      	ldr	r0, [r3, #0]
 800bd16:	240f      	movs	r4, #15
 800bd18:	193b      	adds	r3, r7, r4
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	18d3      	adds	r3, r2, r3
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	0019      	movs	r1, r3
 800bd24:	f7f5 fc70 	bl	8001608 <push>
  for(uint8_t i = 0; i < *Len; i++)
 800bd28:	193b      	adds	r3, r7, r4
 800bd2a:	781a      	ldrb	r2, [r3, #0]
 800bd2c:	193b      	adds	r3, r7, r4
 800bd2e:	3201      	adds	r2, #1
 800bd30:	701a      	strb	r2, [r3, #0]
 800bd32:	230f      	movs	r3, #15
 800bd34:	18fb      	adds	r3, r7, r3
 800bd36:	781a      	ldrb	r2, [r3, #0]
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d3e8      	bcc.n	800bd12 <CDC_Receive_FS+0x1e>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bd40:	687a      	ldr	r2, [r7, #4]
 800bd42:	4b09      	ldr	r3, [pc, #36]	; (800bd68 <CDC_Receive_FS+0x74>)
 800bd44:	0011      	movs	r1, r2
 800bd46:	0018      	movs	r0, r3
 800bd48:	f7fe fcdf 	bl	800a70a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bd4c:	4b06      	ldr	r3, [pc, #24]	; (800bd68 <CDC_Receive_FS+0x74>)
 800bd4e:	0018      	movs	r0, r3
 800bd50:	f7fe fd26 	bl	800a7a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bd54:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bd56:	0018      	movs	r0, r3
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	b005      	add	sp, #20
 800bd5c:	bd90      	pop	{r4, r7, pc}
 800bd5e:	46c0      	nop			; (mov r8, r8)
 800bd60:	20000618 	.word	0x20000618
 800bd64:	20001164 	.word	0x20001164
 800bd68:	200006d0 	.word	0x200006d0

0800bd6c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bd6c:	b5b0      	push	{r4, r5, r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	000a      	movs	r2, r1
 800bd76:	1cbb      	adds	r3, r7, #2
 800bd78:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800bd7a:	230f      	movs	r3, #15
 800bd7c:	18fb      	adds	r3, r7, r3
 800bd7e:	2200      	movs	r2, #0
 800bd80:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bd82:	4a11      	ldr	r2, [pc, #68]	; (800bdc8 <CDC_Transmit_FS+0x5c>)
 800bd84:	23ae      	movs	r3, #174	; 0xae
 800bd86:	009b      	lsls	r3, r3, #2
 800bd88:	58d3      	ldr	r3, [r2, r3]
 800bd8a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bd8c:	68ba      	ldr	r2, [r7, #8]
 800bd8e:	2385      	movs	r3, #133	; 0x85
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	58d3      	ldr	r3, [r2, r3]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d001      	beq.n	800bd9c <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800bd98:	2301      	movs	r3, #1
 800bd9a:	e010      	b.n	800bdbe <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bd9c:	1cbb      	adds	r3, r7, #2
 800bd9e:	881a      	ldrh	r2, [r3, #0]
 800bda0:	6879      	ldr	r1, [r7, #4]
 800bda2:	4b09      	ldr	r3, [pc, #36]	; (800bdc8 <CDC_Transmit_FS+0x5c>)
 800bda4:	0018      	movs	r0, r3
 800bda6:	f7fe fc94 	bl	800a6d2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bdaa:	250f      	movs	r5, #15
 800bdac:	197c      	adds	r4, r7, r5
 800bdae:	4b06      	ldr	r3, [pc, #24]	; (800bdc8 <CDC_Transmit_FS+0x5c>)
 800bdb0:	0018      	movs	r0, r3
 800bdb2:	f7fe fcbe 	bl	800a732 <USBD_CDC_TransmitPacket>
 800bdb6:	0003      	movs	r3, r0
 800bdb8:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800bdba:	197b      	adds	r3, r7, r5
 800bdbc:	781b      	ldrb	r3, [r3, #0]
}
 800bdbe:	0018      	movs	r0, r3
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	b004      	add	sp, #16
 800bdc4:	bdb0      	pop	{r4, r5, r7, pc}
 800bdc6:	46c0      	nop			; (mov r8, r8)
 800bdc8:	200006d0 	.word	0x200006d0

0800bdcc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	0002      	movs	r2, r0
 800bdd4:	6039      	str	r1, [r7, #0]
 800bdd6:	1dfb      	adds	r3, r7, #7
 800bdd8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	2212      	movs	r2, #18
 800bdde:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bde0:	4b02      	ldr	r3, [pc, #8]	; (800bdec <USBD_FS_DeviceDescriptor+0x20>)
}
 800bde2:	0018      	movs	r0, r3
 800bde4:	46bd      	mov	sp, r7
 800bde6:	b002      	add	sp, #8
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	46c0      	nop			; (mov r8, r8)
 800bdec:	20000148 	.word	0x20000148

0800bdf0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	0002      	movs	r2, r0
 800bdf8:	6039      	str	r1, [r7, #0]
 800bdfa:	1dfb      	adds	r3, r7, #7
 800bdfc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	2204      	movs	r2, #4
 800be02:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800be04:	4b02      	ldr	r3, [pc, #8]	; (800be10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800be06:	0018      	movs	r0, r3
 800be08:	46bd      	mov	sp, r7
 800be0a:	b002      	add	sp, #8
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	46c0      	nop			; (mov r8, r8)
 800be10:	2000015c 	.word	0x2000015c

0800be14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
 800be1a:	0002      	movs	r2, r0
 800be1c:	6039      	str	r1, [r7, #0]
 800be1e:	1dfb      	adds	r3, r7, #7
 800be20:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800be22:	1dfb      	adds	r3, r7, #7
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d106      	bne.n	800be38 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be2a:	683a      	ldr	r2, [r7, #0]
 800be2c:	4908      	ldr	r1, [pc, #32]	; (800be50 <USBD_FS_ProductStrDescriptor+0x3c>)
 800be2e:	4b09      	ldr	r3, [pc, #36]	; (800be54 <USBD_FS_ProductStrDescriptor+0x40>)
 800be30:	0018      	movs	r0, r3
 800be32:	f7ff fdf4 	bl	800ba1e <USBD_GetString>
 800be36:	e005      	b.n	800be44 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be38:	683a      	ldr	r2, [r7, #0]
 800be3a:	4905      	ldr	r1, [pc, #20]	; (800be50 <USBD_FS_ProductStrDescriptor+0x3c>)
 800be3c:	4b05      	ldr	r3, [pc, #20]	; (800be54 <USBD_FS_ProductStrDescriptor+0x40>)
 800be3e:	0018      	movs	r0, r3
 800be40:	f7ff fded 	bl	800ba1e <USBD_GetString>
  }
  return USBD_StrDesc;
 800be44:	4b02      	ldr	r3, [pc, #8]	; (800be50 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800be46:	0018      	movs	r0, r3
 800be48:	46bd      	mov	sp, r7
 800be4a:	b002      	add	sp, #8
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	46c0      	nop			; (mov r8, r8)
 800be50:	20001168 	.word	0x20001168
 800be54:	0800d048 	.word	0x0800d048

0800be58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	0002      	movs	r2, r0
 800be60:	6039      	str	r1, [r7, #0]
 800be62:	1dfb      	adds	r3, r7, #7
 800be64:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be66:	683a      	ldr	r2, [r7, #0]
 800be68:	4904      	ldr	r1, [pc, #16]	; (800be7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800be6a:	4b05      	ldr	r3, [pc, #20]	; (800be80 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800be6c:	0018      	movs	r0, r3
 800be6e:	f7ff fdd6 	bl	800ba1e <USBD_GetString>
  return USBD_StrDesc;
 800be72:	4b02      	ldr	r3, [pc, #8]	; (800be7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800be74:	0018      	movs	r0, r3
 800be76:	46bd      	mov	sp, r7
 800be78:	b002      	add	sp, #8
 800be7a:	bd80      	pop	{r7, pc}
 800be7c:	20001168 	.word	0x20001168
 800be80:	0800d060 	.word	0x0800d060

0800be84 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b082      	sub	sp, #8
 800be88:	af00      	add	r7, sp, #0
 800be8a:	0002      	movs	r2, r0
 800be8c:	6039      	str	r1, [r7, #0]
 800be8e:	1dfb      	adds	r3, r7, #7
 800be90:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	221a      	movs	r2, #26
 800be96:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800be98:	f000 f84c 	bl	800bf34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800be9c:	4b02      	ldr	r3, [pc, #8]	; (800bea8 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800be9e:	0018      	movs	r0, r3
 800bea0:	46bd      	mov	sp, r7
 800bea2:	b002      	add	sp, #8
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	46c0      	nop			; (mov r8, r8)
 800bea8:	20000160 	.word	0x20000160

0800beac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	0002      	movs	r2, r0
 800beb4:	6039      	str	r1, [r7, #0]
 800beb6:	1dfb      	adds	r3, r7, #7
 800beb8:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800beba:	1dfb      	adds	r3, r7, #7
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d106      	bne.n	800bed0 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bec2:	683a      	ldr	r2, [r7, #0]
 800bec4:	4908      	ldr	r1, [pc, #32]	; (800bee8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800bec6:	4b09      	ldr	r3, [pc, #36]	; (800beec <USBD_FS_ConfigStrDescriptor+0x40>)
 800bec8:	0018      	movs	r0, r3
 800beca:	f7ff fda8 	bl	800ba1e <USBD_GetString>
 800bece:	e005      	b.n	800bedc <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bed0:	683a      	ldr	r2, [r7, #0]
 800bed2:	4905      	ldr	r1, [pc, #20]	; (800bee8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800bed4:	4b05      	ldr	r3, [pc, #20]	; (800beec <USBD_FS_ConfigStrDescriptor+0x40>)
 800bed6:	0018      	movs	r0, r3
 800bed8:	f7ff fda1 	bl	800ba1e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bedc:	4b02      	ldr	r3, [pc, #8]	; (800bee8 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800bede:	0018      	movs	r0, r3
 800bee0:	46bd      	mov	sp, r7
 800bee2:	b002      	add	sp, #8
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	46c0      	nop			; (mov r8, r8)
 800bee8:	20001168 	.word	0x20001168
 800beec:	0800d074 	.word	0x0800d074

0800bef0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	0002      	movs	r2, r0
 800bef8:	6039      	str	r1, [r7, #0]
 800befa:	1dfb      	adds	r3, r7, #7
 800befc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800befe:	1dfb      	adds	r3, r7, #7
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d106      	bne.n	800bf14 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf06:	683a      	ldr	r2, [r7, #0]
 800bf08:	4908      	ldr	r1, [pc, #32]	; (800bf2c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800bf0a:	4b09      	ldr	r3, [pc, #36]	; (800bf30 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800bf0c:	0018      	movs	r0, r3
 800bf0e:	f7ff fd86 	bl	800ba1e <USBD_GetString>
 800bf12:	e005      	b.n	800bf20 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bf14:	683a      	ldr	r2, [r7, #0]
 800bf16:	4905      	ldr	r1, [pc, #20]	; (800bf2c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800bf18:	4b05      	ldr	r3, [pc, #20]	; (800bf30 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800bf1a:	0018      	movs	r0, r3
 800bf1c:	f7ff fd7f 	bl	800ba1e <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf20:	4b02      	ldr	r3, [pc, #8]	; (800bf2c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800bf22:	0018      	movs	r0, r3
 800bf24:	46bd      	mov	sp, r7
 800bf26:	b002      	add	sp, #8
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	46c0      	nop			; (mov r8, r8)
 800bf2c:	20001168 	.word	0x20001168
 800bf30:	0800d080 	.word	0x0800d080

0800bf34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bf3a:	4b10      	ldr	r3, [pc, #64]	; (800bf7c <Get_SerialNum+0x48>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bf40:	4b0f      	ldr	r3, [pc, #60]	; (800bf80 <Get_SerialNum+0x4c>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bf46:	4b0f      	ldr	r3, [pc, #60]	; (800bf84 <Get_SerialNum+0x50>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	18d3      	adds	r3, r2, r3
 800bf52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d00b      	beq.n	800bf72 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf5a:	490b      	ldr	r1, [pc, #44]	; (800bf88 <Get_SerialNum+0x54>)
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2208      	movs	r2, #8
 800bf60:	0018      	movs	r0, r3
 800bf62:	f000 f815 	bl	800bf90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf66:	4909      	ldr	r1, [pc, #36]	; (800bf8c <Get_SerialNum+0x58>)
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	2204      	movs	r2, #4
 800bf6c:	0018      	movs	r0, r3
 800bf6e:	f000 f80f 	bl	800bf90 <IntToUnicode>
  }
}
 800bf72:	46c0      	nop			; (mov r8, r8)
 800bf74:	46bd      	mov	sp, r7
 800bf76:	b004      	add	sp, #16
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	46c0      	nop			; (mov r8, r8)
 800bf7c:	1ffff7ac 	.word	0x1ffff7ac
 800bf80:	1ffff7b0 	.word	0x1ffff7b0
 800bf84:	1ffff7b4 	.word	0x1ffff7b4
 800bf88:	20000162 	.word	0x20000162
 800bf8c:	20000172 	.word	0x20000172

0800bf90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b086      	sub	sp, #24
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	60f8      	str	r0, [r7, #12]
 800bf98:	60b9      	str	r1, [r7, #8]
 800bf9a:	1dfb      	adds	r3, r7, #7
 800bf9c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800bf9e:	2117      	movs	r1, #23
 800bfa0:	187b      	adds	r3, r7, r1
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800bfa6:	187b      	adds	r3, r7, r1
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	701a      	strb	r2, [r3, #0]
 800bfac:	e02f      	b.n	800c00e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	0f1b      	lsrs	r3, r3, #28
 800bfb2:	2b09      	cmp	r3, #9
 800bfb4:	d80d      	bhi.n	800bfd2 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	0f1b      	lsrs	r3, r3, #28
 800bfba:	b2da      	uxtb	r2, r3
 800bfbc:	2317      	movs	r3, #23
 800bfbe:	18fb      	adds	r3, r7, r3
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	005b      	lsls	r3, r3, #1
 800bfc4:	0019      	movs	r1, r3
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	185b      	adds	r3, r3, r1
 800bfca:	3230      	adds	r2, #48	; 0x30
 800bfcc:	b2d2      	uxtb	r2, r2
 800bfce:	701a      	strb	r2, [r3, #0]
 800bfd0:	e00c      	b.n	800bfec <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	0f1b      	lsrs	r3, r3, #28
 800bfd6:	b2da      	uxtb	r2, r3
 800bfd8:	2317      	movs	r3, #23
 800bfda:	18fb      	adds	r3, r7, r3
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	005b      	lsls	r3, r3, #1
 800bfe0:	0019      	movs	r1, r3
 800bfe2:	68bb      	ldr	r3, [r7, #8]
 800bfe4:	185b      	adds	r3, r3, r1
 800bfe6:	3237      	adds	r2, #55	; 0x37
 800bfe8:	b2d2      	uxtb	r2, r2
 800bfea:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	011b      	lsls	r3, r3, #4
 800bff0:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bff2:	2117      	movs	r1, #23
 800bff4:	187b      	adds	r3, r7, r1
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	005b      	lsls	r3, r3, #1
 800bffa:	3301      	adds	r3, #1
 800bffc:	68ba      	ldr	r2, [r7, #8]
 800bffe:	18d3      	adds	r3, r2, r3
 800c000:	2200      	movs	r2, #0
 800c002:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c004:	187b      	adds	r3, r7, r1
 800c006:	781a      	ldrb	r2, [r3, #0]
 800c008:	187b      	adds	r3, r7, r1
 800c00a:	3201      	adds	r2, #1
 800c00c:	701a      	strb	r2, [r3, #0]
 800c00e:	2317      	movs	r3, #23
 800c010:	18fa      	adds	r2, r7, r3
 800c012:	1dfb      	adds	r3, r7, #7
 800c014:	7812      	ldrb	r2, [r2, #0]
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	429a      	cmp	r2, r3
 800c01a:	d3c8      	bcc.n	800bfae <IntToUnicode+0x1e>
  }
}
 800c01c:	46c0      	nop			; (mov r8, r8)
 800c01e:	46c0      	nop			; (mov r8, r8)
 800c020:	46bd      	mov	sp, r7
 800c022:	b006      	add	sp, #24
 800c024:	bd80      	pop	{r7, pc}
	...

0800c028 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4a0e      	ldr	r2, [pc, #56]	; (800c070 <HAL_PCD_MspInit+0x48>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d115      	bne.n	800c066 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c03a:	4b0e      	ldr	r3, [pc, #56]	; (800c074 <HAL_PCD_MspInit+0x4c>)
 800c03c:	69da      	ldr	r2, [r3, #28]
 800c03e:	4b0d      	ldr	r3, [pc, #52]	; (800c074 <HAL_PCD_MspInit+0x4c>)
 800c040:	2180      	movs	r1, #128	; 0x80
 800c042:	0409      	lsls	r1, r1, #16
 800c044:	430a      	orrs	r2, r1
 800c046:	61da      	str	r2, [r3, #28]
 800c048:	4b0a      	ldr	r3, [pc, #40]	; (800c074 <HAL_PCD_MspInit+0x4c>)
 800c04a:	69da      	ldr	r2, [r3, #28]
 800c04c:	2380      	movs	r3, #128	; 0x80
 800c04e:	041b      	lsls	r3, r3, #16
 800c050:	4013      	ands	r3, r2
 800c052:	60fb      	str	r3, [r7, #12]
 800c054:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c056:	2200      	movs	r2, #0
 800c058:	2100      	movs	r1, #0
 800c05a:	201f      	movs	r0, #31
 800c05c:	f7f6 fe2a 	bl	8002cb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c060:	201f      	movs	r0, #31
 800c062:	f7f6 fe3c 	bl	8002cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c066:	46c0      	nop			; (mov r8, r8)
 800c068:	46bd      	mov	sp, r7
 800c06a:	b004      	add	sp, #16
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	46c0      	nop			; (mov r8, r8)
 800c070:	40005c00 	.word	0x40005c00
 800c074:	40021000 	.word	0x40021000

0800c078 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b082      	sub	sp, #8
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	23bc      	movs	r3, #188	; 0xbc
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	58d2      	ldr	r2, [r2, r3]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	21ac      	movs	r1, #172	; 0xac
 800c08c:	0089      	lsls	r1, r1, #2
 800c08e:	468c      	mov	ip, r1
 800c090:	4463      	add	r3, ip
 800c092:	0019      	movs	r1, r3
 800c094:	0010      	movs	r0, r2
 800c096:	f7fe fc55 	bl	800a944 <USBD_LL_SetupStage>
}
 800c09a:	46c0      	nop			; (mov r8, r8)
 800c09c:	46bd      	mov	sp, r7
 800c09e:	b002      	add	sp, #8
 800c0a0:	bd80      	pop	{r7, pc}

0800c0a2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0a2:	b590      	push	{r4, r7, lr}
 800c0a4:	b083      	sub	sp, #12
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
 800c0aa:	000a      	movs	r2, r1
 800c0ac:	1cfb      	adds	r3, r7, #3
 800c0ae:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	23bc      	movs	r3, #188	; 0xbc
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	58d4      	ldr	r4, [r2, r3]
 800c0b8:	1cfb      	adds	r3, r7, #3
 800c0ba:	781a      	ldrb	r2, [r3, #0]
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	23be      	movs	r3, #190	; 0xbe
 800c0c0:	0059      	lsls	r1, r3, #1
 800c0c2:	0013      	movs	r3, r2
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	189b      	adds	r3, r3, r2
 800c0c8:	00db      	lsls	r3, r3, #3
 800c0ca:	18c3      	adds	r3, r0, r3
 800c0cc:	185b      	adds	r3, r3, r1
 800c0ce:	681a      	ldr	r2, [r3, #0]
 800c0d0:	1cfb      	adds	r3, r7, #3
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	0019      	movs	r1, r3
 800c0d6:	0020      	movs	r0, r4
 800c0d8:	f7fe fc92 	bl	800aa00 <USBD_LL_DataOutStage>
}
 800c0dc:	46c0      	nop			; (mov r8, r8)
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	b003      	add	sp, #12
 800c0e2:	bd90      	pop	{r4, r7, pc}

0800c0e4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	000a      	movs	r2, r1
 800c0ee:	1cfb      	adds	r3, r7, #3
 800c0f0:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c0f2:	687a      	ldr	r2, [r7, #4]
 800c0f4:	23bc      	movs	r3, #188	; 0xbc
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	58d0      	ldr	r0, [r2, r3]
 800c0fa:	1cfb      	adds	r3, r7, #3
 800c0fc:	781a      	ldrb	r2, [r3, #0]
 800c0fe:	6879      	ldr	r1, [r7, #4]
 800c100:	0013      	movs	r3, r2
 800c102:	009b      	lsls	r3, r3, #2
 800c104:	189b      	adds	r3, r3, r2
 800c106:	00db      	lsls	r3, r3, #3
 800c108:	18cb      	adds	r3, r1, r3
 800c10a:	333c      	adds	r3, #60	; 0x3c
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	1cfb      	adds	r3, r7, #3
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	0019      	movs	r1, r3
 800c114:	f7fe fcf6 	bl	800ab04 <USBD_LL_DataInStage>
}
 800c118:	46c0      	nop			; (mov r8, r8)
 800c11a:	46bd      	mov	sp, r7
 800c11c:	b002      	add	sp, #8
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	23bc      	movs	r3, #188	; 0xbc
 800c12c:	009b      	lsls	r3, r3, #2
 800c12e:	58d3      	ldr	r3, [r2, r3]
 800c130:	0018      	movs	r0, r3
 800c132:	f7fe fe2d 	bl	800ad90 <USBD_LL_SOF>
}
 800c136:	46c0      	nop			; (mov r8, r8)
 800c138:	46bd      	mov	sp, r7
 800c13a:	b002      	add	sp, #8
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c13e:	b580      	push	{r7, lr}
 800c140:	b084      	sub	sp, #16
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c146:	230f      	movs	r3, #15
 800c148:	18fb      	adds	r3, r7, r3
 800c14a:	2201      	movs	r2, #1
 800c14c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	689b      	ldr	r3, [r3, #8]
 800c152:	2b02      	cmp	r3, #2
 800c154:	d001      	beq.n	800c15a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800c156:	f7f5 fa1d 	bl	8001594 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	23bc      	movs	r3, #188	; 0xbc
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	58d2      	ldr	r2, [r2, r3]
 800c162:	230f      	movs	r3, #15
 800c164:	18fb      	adds	r3, r7, r3
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	0019      	movs	r1, r3
 800c16a:	0010      	movs	r0, r2
 800c16c:	f7fe fdcf 	bl	800ad0e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c170:	687a      	ldr	r2, [r7, #4]
 800c172:	23bc      	movs	r3, #188	; 0xbc
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	58d3      	ldr	r3, [r2, r3]
 800c178:	0018      	movs	r0, r3
 800c17a:	f7fe fd80 	bl	800ac7e <USBD_LL_Reset>
}
 800c17e:	46c0      	nop			; (mov r8, r8)
 800c180:	46bd      	mov	sp, r7
 800c182:	b004      	add	sp, #16
 800c184:	bd80      	pop	{r7, pc}
	...

0800c188 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	23bc      	movs	r3, #188	; 0xbc
 800c194:	009b      	lsls	r3, r3, #2
 800c196:	58d3      	ldr	r3, [r2, r3]
 800c198:	0018      	movs	r0, r3
 800c19a:	f7fe fdc9 	bl	800ad30 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	699b      	ldr	r3, [r3, #24]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d005      	beq.n	800c1b2 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1a6:	4b05      	ldr	r3, [pc, #20]	; (800c1bc <HAL_PCD_SuspendCallback+0x34>)
 800c1a8:	691a      	ldr	r2, [r3, #16]
 800c1aa:	4b04      	ldr	r3, [pc, #16]	; (800c1bc <HAL_PCD_SuspendCallback+0x34>)
 800c1ac:	2106      	movs	r1, #6
 800c1ae:	430a      	orrs	r2, r1
 800c1b0:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800c1b2:	46c0      	nop			; (mov r8, r8)
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	b002      	add	sp, #8
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	46c0      	nop			; (mov r8, r8)
 800c1bc:	e000ed00 	.word	0xe000ed00

0800c1c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b082      	sub	sp, #8
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	699b      	ldr	r3, [r3, #24]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d007      	beq.n	800c1e0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1d0:	4b09      	ldr	r3, [pc, #36]	; (800c1f8 <HAL_PCD_ResumeCallback+0x38>)
 800c1d2:	691a      	ldr	r2, [r3, #16]
 800c1d4:	4b08      	ldr	r3, [pc, #32]	; (800c1f8 <HAL_PCD_ResumeCallback+0x38>)
 800c1d6:	2106      	movs	r1, #6
 800c1d8:	438a      	bics	r2, r1
 800c1da:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800c1dc:	f000 fa44 	bl	800c668 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	23bc      	movs	r3, #188	; 0xbc
 800c1e4:	009b      	lsls	r3, r3, #2
 800c1e6:	58d3      	ldr	r3, [r2, r3]
 800c1e8:	0018      	movs	r0, r3
 800c1ea:	f7fe fdb9 	bl	800ad60 <USBD_LL_Resume>
}
 800c1ee:	46c0      	nop			; (mov r8, r8)
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	b002      	add	sp, #8
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	46c0      	nop			; (mov r8, r8)
 800c1f8:	e000ed00 	.word	0xe000ed00

0800c1fc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c204:	4a2d      	ldr	r2, [pc, #180]	; (800c2bc <USBD_LL_Init+0xc0>)
 800c206:	23bc      	movs	r3, #188	; 0xbc
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	6879      	ldr	r1, [r7, #4]
 800c20c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	23b0      	movs	r3, #176	; 0xb0
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	4929      	ldr	r1, [pc, #164]	; (800c2bc <USBD_LL_Init+0xc0>)
 800c216:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800c218:	4b28      	ldr	r3, [pc, #160]	; (800c2bc <USBD_LL_Init+0xc0>)
 800c21a:	4a29      	ldr	r2, [pc, #164]	; (800c2c0 <USBD_LL_Init+0xc4>)
 800c21c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c21e:	4b27      	ldr	r3, [pc, #156]	; (800c2bc <USBD_LL_Init+0xc0>)
 800c220:	2208      	movs	r2, #8
 800c222:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c224:	4b25      	ldr	r3, [pc, #148]	; (800c2bc <USBD_LL_Init+0xc0>)
 800c226:	2202      	movs	r2, #2
 800c228:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c22a:	4b24      	ldr	r3, [pc, #144]	; (800c2bc <USBD_LL_Init+0xc0>)
 800c22c:	2202      	movs	r2, #2
 800c22e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c230:	4b22      	ldr	r3, [pc, #136]	; (800c2bc <USBD_LL_Init+0xc0>)
 800c232:	2200      	movs	r2, #0
 800c234:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c236:	4b21      	ldr	r3, [pc, #132]	; (800c2bc <USBD_LL_Init+0xc0>)
 800c238:	2200      	movs	r2, #0
 800c23a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c23c:	4b1f      	ldr	r3, [pc, #124]	; (800c2bc <USBD_LL_Init+0xc0>)
 800c23e:	2200      	movs	r2, #0
 800c240:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c242:	4b1e      	ldr	r3, [pc, #120]	; (800c2bc <USBD_LL_Init+0xc0>)
 800c244:	0018      	movs	r0, r3
 800c246:	f7f7 f967 	bl	8003518 <HAL_PCD_Init>
 800c24a:	1e03      	subs	r3, r0, #0
 800c24c:	d001      	beq.n	800c252 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800c24e:	f7f5 f9a1 	bl	8001594 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c252:	687a      	ldr	r2, [r7, #4]
 800c254:	23b0      	movs	r3, #176	; 0xb0
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	58d0      	ldr	r0, [r2, r3]
 800c25a:	2318      	movs	r3, #24
 800c25c:	2200      	movs	r2, #0
 800c25e:	2100      	movs	r1, #0
 800c260:	f7f8 ff48 	bl	80050f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c264:	687a      	ldr	r2, [r7, #4]
 800c266:	23b0      	movs	r3, #176	; 0xb0
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	58d0      	ldr	r0, [r2, r3]
 800c26c:	2358      	movs	r3, #88	; 0x58
 800c26e:	2200      	movs	r2, #0
 800c270:	2180      	movs	r1, #128	; 0x80
 800c272:	f7f8 ff3f 	bl	80050f4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	23b0      	movs	r3, #176	; 0xb0
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	58d0      	ldr	r0, [r2, r3]
 800c27e:	23c0      	movs	r3, #192	; 0xc0
 800c280:	2200      	movs	r2, #0
 800c282:	2181      	movs	r1, #129	; 0x81
 800c284:	f7f8 ff36 	bl	80050f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	23b0      	movs	r3, #176	; 0xb0
 800c28c:	009b      	lsls	r3, r3, #2
 800c28e:	58d0      	ldr	r0, [r2, r3]
 800c290:	2388      	movs	r3, #136	; 0x88
 800c292:	005b      	lsls	r3, r3, #1
 800c294:	2200      	movs	r2, #0
 800c296:	2101      	movs	r1, #1
 800c298:	f7f8 ff2c 	bl	80050f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	23b0      	movs	r3, #176	; 0xb0
 800c2a0:	009b      	lsls	r3, r3, #2
 800c2a2:	58d0      	ldr	r0, [r2, r3]
 800c2a4:	2380      	movs	r3, #128	; 0x80
 800c2a6:	005b      	lsls	r3, r3, #1
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	2182      	movs	r1, #130	; 0x82
 800c2ac:	f7f8 ff22 	bl	80050f4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c2b0:	2300      	movs	r3, #0
}
 800c2b2:	0018      	movs	r0, r3
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	b002      	add	sp, #8
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	46c0      	nop			; (mov r8, r8)
 800c2bc:	20001368 	.word	0x20001368
 800c2c0:	40005c00 	.word	0x40005c00

0800c2c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2c6:	b085      	sub	sp, #20
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2cc:	210f      	movs	r1, #15
 800c2ce:	187b      	adds	r3, r7, r1
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2d4:	260e      	movs	r6, #14
 800c2d6:	19bb      	adds	r3, r7, r6
 800c2d8:	2200      	movs	r2, #0
 800c2da:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	23b0      	movs	r3, #176	; 0xb0
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	58d3      	ldr	r3, [r2, r3]
 800c2e4:	000d      	movs	r5, r1
 800c2e6:	187c      	adds	r4, r7, r1
 800c2e8:	0018      	movs	r0, r3
 800c2ea:	f7f7 fa25 	bl	8003738 <HAL_PCD_Start>
 800c2ee:	0003      	movs	r3, r0
 800c2f0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2f2:	19bc      	adds	r4, r7, r6
 800c2f4:	197b      	adds	r3, r7, r5
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	0018      	movs	r0, r3
 800c2fa:	f000 f9bc 	bl	800c676 <USBD_Get_USB_Status>
 800c2fe:	0003      	movs	r3, r0
 800c300:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c302:	19bb      	adds	r3, r7, r6
 800c304:	781b      	ldrb	r3, [r3, #0]
}
 800c306:	0018      	movs	r0, r3
 800c308:	46bd      	mov	sp, r7
 800c30a:	b005      	add	sp, #20
 800c30c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c30e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c30e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c310:	b085      	sub	sp, #20
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
 800c316:	000c      	movs	r4, r1
 800c318:	0010      	movs	r0, r2
 800c31a:	0019      	movs	r1, r3
 800c31c:	1cfb      	adds	r3, r7, #3
 800c31e:	1c22      	adds	r2, r4, #0
 800c320:	701a      	strb	r2, [r3, #0]
 800c322:	1cbb      	adds	r3, r7, #2
 800c324:	1c02      	adds	r2, r0, #0
 800c326:	701a      	strb	r2, [r3, #0]
 800c328:	003b      	movs	r3, r7
 800c32a:	1c0a      	adds	r2, r1, #0
 800c32c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c32e:	260f      	movs	r6, #15
 800c330:	19bb      	adds	r3, r7, r6
 800c332:	2200      	movs	r2, #0
 800c334:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c336:	250e      	movs	r5, #14
 800c338:	197b      	adds	r3, r7, r5
 800c33a:	2200      	movs	r2, #0
 800c33c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	23b0      	movs	r3, #176	; 0xb0
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	58d0      	ldr	r0, [r2, r3]
 800c346:	19bc      	adds	r4, r7, r6
 800c348:	1cbb      	adds	r3, r7, #2
 800c34a:	781d      	ldrb	r5, [r3, #0]
 800c34c:	003b      	movs	r3, r7
 800c34e:	881a      	ldrh	r2, [r3, #0]
 800c350:	1cfb      	adds	r3, r7, #3
 800c352:	7819      	ldrb	r1, [r3, #0]
 800c354:	002b      	movs	r3, r5
 800c356:	f7f7 fbbc 	bl	8003ad2 <HAL_PCD_EP_Open>
 800c35a:	0003      	movs	r3, r0
 800c35c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c35e:	250e      	movs	r5, #14
 800c360:	197c      	adds	r4, r7, r5
 800c362:	19bb      	adds	r3, r7, r6
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	0018      	movs	r0, r3
 800c368:	f000 f985 	bl	800c676 <USBD_Get_USB_Status>
 800c36c:	0003      	movs	r3, r0
 800c36e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c370:	197b      	adds	r3, r7, r5
 800c372:	781b      	ldrb	r3, [r3, #0]
}
 800c374:	0018      	movs	r0, r3
 800c376:	46bd      	mov	sp, r7
 800c378:	b005      	add	sp, #20
 800c37a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c37c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c37c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c37e:	b085      	sub	sp, #20
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	000a      	movs	r2, r1
 800c386:	1cfb      	adds	r3, r7, #3
 800c388:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c38a:	210f      	movs	r1, #15
 800c38c:	187b      	adds	r3, r7, r1
 800c38e:	2200      	movs	r2, #0
 800c390:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c392:	260e      	movs	r6, #14
 800c394:	19bb      	adds	r3, r7, r6
 800c396:	2200      	movs	r2, #0
 800c398:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c39a:	687a      	ldr	r2, [r7, #4]
 800c39c:	23b0      	movs	r3, #176	; 0xb0
 800c39e:	009b      	lsls	r3, r3, #2
 800c3a0:	58d2      	ldr	r2, [r2, r3]
 800c3a2:	000d      	movs	r5, r1
 800c3a4:	187c      	adds	r4, r7, r1
 800c3a6:	1cfb      	adds	r3, r7, #3
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	0019      	movs	r1, r3
 800c3ac:	0010      	movs	r0, r2
 800c3ae:	f7f7 fc08 	bl	8003bc2 <HAL_PCD_EP_Close>
 800c3b2:	0003      	movs	r3, r0
 800c3b4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3b6:	19bc      	adds	r4, r7, r6
 800c3b8:	197b      	adds	r3, r7, r5
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	0018      	movs	r0, r3
 800c3be:	f000 f95a 	bl	800c676 <USBD_Get_USB_Status>
 800c3c2:	0003      	movs	r3, r0
 800c3c4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c3c6:	19bb      	adds	r3, r7, r6
 800c3c8:	781b      	ldrb	r3, [r3, #0]
}
 800c3ca:	0018      	movs	r0, r3
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	b005      	add	sp, #20
 800c3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c3d2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3d4:	b085      	sub	sp, #20
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
 800c3da:	000a      	movs	r2, r1
 800c3dc:	1cfb      	adds	r3, r7, #3
 800c3de:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3e0:	210f      	movs	r1, #15
 800c3e2:	187b      	adds	r3, r7, r1
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3e8:	260e      	movs	r6, #14
 800c3ea:	19bb      	adds	r3, r7, r6
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c3f0:	687a      	ldr	r2, [r7, #4]
 800c3f2:	23b0      	movs	r3, #176	; 0xb0
 800c3f4:	009b      	lsls	r3, r3, #2
 800c3f6:	58d2      	ldr	r2, [r2, r3]
 800c3f8:	000d      	movs	r5, r1
 800c3fa:	187c      	adds	r4, r7, r1
 800c3fc:	1cfb      	adds	r3, r7, #3
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	0019      	movs	r1, r3
 800c402:	0010      	movs	r0, r2
 800c404:	f7f7 fcd4 	bl	8003db0 <HAL_PCD_EP_SetStall>
 800c408:	0003      	movs	r3, r0
 800c40a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c40c:	19bc      	adds	r4, r7, r6
 800c40e:	197b      	adds	r3, r7, r5
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	0018      	movs	r0, r3
 800c414:	f000 f92f 	bl	800c676 <USBD_Get_USB_Status>
 800c418:	0003      	movs	r3, r0
 800c41a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c41c:	19bb      	adds	r3, r7, r6
 800c41e:	781b      	ldrb	r3, [r3, #0]
}
 800c420:	0018      	movs	r0, r3
 800c422:	46bd      	mov	sp, r7
 800c424:	b005      	add	sp, #20
 800c426:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c428 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c42a:	b085      	sub	sp, #20
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	000a      	movs	r2, r1
 800c432:	1cfb      	adds	r3, r7, #3
 800c434:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c436:	210f      	movs	r1, #15
 800c438:	187b      	adds	r3, r7, r1
 800c43a:	2200      	movs	r2, #0
 800c43c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c43e:	260e      	movs	r6, #14
 800c440:	19bb      	adds	r3, r7, r6
 800c442:	2200      	movs	r2, #0
 800c444:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	23b0      	movs	r3, #176	; 0xb0
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	58d2      	ldr	r2, [r2, r3]
 800c44e:	000d      	movs	r5, r1
 800c450:	187c      	adds	r4, r7, r1
 800c452:	1cfb      	adds	r3, r7, #3
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	0019      	movs	r1, r3
 800c458:	0010      	movs	r0, r2
 800c45a:	f7f7 fd05 	bl	8003e68 <HAL_PCD_EP_ClrStall>
 800c45e:	0003      	movs	r3, r0
 800c460:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c462:	19bc      	adds	r4, r7, r6
 800c464:	197b      	adds	r3, r7, r5
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	0018      	movs	r0, r3
 800c46a:	f000 f904 	bl	800c676 <USBD_Get_USB_Status>
 800c46e:	0003      	movs	r3, r0
 800c470:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c472:	19bb      	adds	r3, r7, r6
 800c474:	781b      	ldrb	r3, [r3, #0]
}
 800c476:	0018      	movs	r0, r3
 800c478:	46bd      	mov	sp, r7
 800c47a:	b005      	add	sp, #20
 800c47c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c47e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c47e:	b580      	push	{r7, lr}
 800c480:	b084      	sub	sp, #16
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
 800c486:	000a      	movs	r2, r1
 800c488:	1cfb      	adds	r3, r7, #3
 800c48a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	23b0      	movs	r3, #176	; 0xb0
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	58d3      	ldr	r3, [r2, r3]
 800c494:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c496:	1cfb      	adds	r3, r7, #3
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	b25b      	sxtb	r3, r3
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	da0d      	bge.n	800c4bc <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c4a0:	1cfb      	adds	r3, r7, #3
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	227f      	movs	r2, #127	; 0x7f
 800c4a6:	4013      	ands	r3, r2
 800c4a8:	68f9      	ldr	r1, [r7, #12]
 800c4aa:	1c5a      	adds	r2, r3, #1
 800c4ac:	0013      	movs	r3, r2
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	189b      	adds	r3, r3, r2
 800c4b2:	00db      	lsls	r3, r3, #3
 800c4b4:	18cb      	adds	r3, r1, r3
 800c4b6:	3302      	adds	r3, #2
 800c4b8:	781b      	ldrb	r3, [r3, #0]
 800c4ba:	e00d      	b.n	800c4d8 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c4bc:	1cfb      	adds	r3, r7, #3
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	227f      	movs	r2, #127	; 0x7f
 800c4c2:	401a      	ands	r2, r3
 800c4c4:	68f8      	ldr	r0, [r7, #12]
 800c4c6:	23b5      	movs	r3, #181	; 0xb5
 800c4c8:	0059      	lsls	r1, r3, #1
 800c4ca:	0013      	movs	r3, r2
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	189b      	adds	r3, r3, r2
 800c4d0:	00db      	lsls	r3, r3, #3
 800c4d2:	18c3      	adds	r3, r0, r3
 800c4d4:	185b      	adds	r3, r3, r1
 800c4d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c4d8:	0018      	movs	r0, r3
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	b004      	add	sp, #16
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4e2:	b085      	sub	sp, #20
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	000a      	movs	r2, r1
 800c4ea:	1cfb      	adds	r3, r7, #3
 800c4ec:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4ee:	210f      	movs	r1, #15
 800c4f0:	187b      	adds	r3, r7, r1
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4f6:	260e      	movs	r6, #14
 800c4f8:	19bb      	adds	r3, r7, r6
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	23b0      	movs	r3, #176	; 0xb0
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	58d2      	ldr	r2, [r2, r3]
 800c506:	000d      	movs	r5, r1
 800c508:	187c      	adds	r4, r7, r1
 800c50a:	1cfb      	adds	r3, r7, #3
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	0019      	movs	r1, r3
 800c510:	0010      	movs	r0, r2
 800c512:	f7f7 fab3 	bl	8003a7c <HAL_PCD_SetAddress>
 800c516:	0003      	movs	r3, r0
 800c518:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c51a:	19bc      	adds	r4, r7, r6
 800c51c:	197b      	adds	r3, r7, r5
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	0018      	movs	r0, r3
 800c522:	f000 f8a8 	bl	800c676 <USBD_Get_USB_Status>
 800c526:	0003      	movs	r3, r0
 800c528:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c52a:	19bb      	adds	r3, r7, r6
 800c52c:	781b      	ldrb	r3, [r3, #0]
}
 800c52e:	0018      	movs	r0, r3
 800c530:	46bd      	mov	sp, r7
 800c532:	b005      	add	sp, #20
 800c534:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c536 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c536:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c538:	b087      	sub	sp, #28
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	60f8      	str	r0, [r7, #12]
 800c53e:	0008      	movs	r0, r1
 800c540:	607a      	str	r2, [r7, #4]
 800c542:	0019      	movs	r1, r3
 800c544:	230b      	movs	r3, #11
 800c546:	18fb      	adds	r3, r7, r3
 800c548:	1c02      	adds	r2, r0, #0
 800c54a:	701a      	strb	r2, [r3, #0]
 800c54c:	2408      	movs	r4, #8
 800c54e:	193b      	adds	r3, r7, r4
 800c550:	1c0a      	adds	r2, r1, #0
 800c552:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c554:	2117      	movs	r1, #23
 800c556:	187b      	adds	r3, r7, r1
 800c558:	2200      	movs	r2, #0
 800c55a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c55c:	2516      	movs	r5, #22
 800c55e:	197b      	adds	r3, r7, r5
 800c560:	2200      	movs	r2, #0
 800c562:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c564:	68fa      	ldr	r2, [r7, #12]
 800c566:	23b0      	movs	r3, #176	; 0xb0
 800c568:	009b      	lsls	r3, r3, #2
 800c56a:	58d0      	ldr	r0, [r2, r3]
 800c56c:	193b      	adds	r3, r7, r4
 800c56e:	881d      	ldrh	r5, [r3, #0]
 800c570:	000e      	movs	r6, r1
 800c572:	187c      	adds	r4, r7, r1
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	230b      	movs	r3, #11
 800c578:	18fb      	adds	r3, r7, r3
 800c57a:	7819      	ldrb	r1, [r3, #0]
 800c57c:	002b      	movs	r3, r5
 800c57e:	f7f7 fbce 	bl	8003d1e <HAL_PCD_EP_Transmit>
 800c582:	0003      	movs	r3, r0
 800c584:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c586:	2516      	movs	r5, #22
 800c588:	197c      	adds	r4, r7, r5
 800c58a:	19bb      	adds	r3, r7, r6
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	0018      	movs	r0, r3
 800c590:	f000 f871 	bl	800c676 <USBD_Get_USB_Status>
 800c594:	0003      	movs	r3, r0
 800c596:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c598:	197b      	adds	r3, r7, r5
 800c59a:	781b      	ldrb	r3, [r3, #0]
}
 800c59c:	0018      	movs	r0, r3
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	b007      	add	sp, #28
 800c5a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c5a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5a6:	b087      	sub	sp, #28
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	0008      	movs	r0, r1
 800c5ae:	607a      	str	r2, [r7, #4]
 800c5b0:	0019      	movs	r1, r3
 800c5b2:	230b      	movs	r3, #11
 800c5b4:	18fb      	adds	r3, r7, r3
 800c5b6:	1c02      	adds	r2, r0, #0
 800c5b8:	701a      	strb	r2, [r3, #0]
 800c5ba:	2408      	movs	r4, #8
 800c5bc:	193b      	adds	r3, r7, r4
 800c5be:	1c0a      	adds	r2, r1, #0
 800c5c0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5c2:	2117      	movs	r1, #23
 800c5c4:	187b      	adds	r3, r7, r1
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5ca:	2516      	movs	r5, #22
 800c5cc:	197b      	adds	r3, r7, r5
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c5d2:	68fa      	ldr	r2, [r7, #12]
 800c5d4:	23b0      	movs	r3, #176	; 0xb0
 800c5d6:	009b      	lsls	r3, r3, #2
 800c5d8:	58d0      	ldr	r0, [r2, r3]
 800c5da:	193b      	adds	r3, r7, r4
 800c5dc:	881d      	ldrh	r5, [r3, #0]
 800c5de:	000e      	movs	r6, r1
 800c5e0:	187c      	adds	r4, r7, r1
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	230b      	movs	r3, #11
 800c5e6:	18fb      	adds	r3, r7, r3
 800c5e8:	7819      	ldrb	r1, [r3, #0]
 800c5ea:	002b      	movs	r3, r5
 800c5ec:	f7f7 fb3a 	bl	8003c64 <HAL_PCD_EP_Receive>
 800c5f0:	0003      	movs	r3, r0
 800c5f2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5f4:	2516      	movs	r5, #22
 800c5f6:	197c      	adds	r4, r7, r5
 800c5f8:	19bb      	adds	r3, r7, r6
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	0018      	movs	r0, r3
 800c5fe:	f000 f83a 	bl	800c676 <USBD_Get_USB_Status>
 800c602:	0003      	movs	r3, r0
 800c604:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c606:	197b      	adds	r3, r7, r5
 800c608:	781b      	ldrb	r3, [r3, #0]
}
 800c60a:	0018      	movs	r0, r3
 800c60c:	46bd      	mov	sp, r7
 800c60e:	b007      	add	sp, #28
 800c610:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c612 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c612:	b580      	push	{r7, lr}
 800c614:	b082      	sub	sp, #8
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
 800c61a:	000a      	movs	r2, r1
 800c61c:	1cfb      	adds	r3, r7, #3
 800c61e:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	23b0      	movs	r3, #176	; 0xb0
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	58d2      	ldr	r2, [r2, r3]
 800c628:	1cfb      	adds	r3, r7, #3
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	0019      	movs	r1, r3
 800c62e:	0010      	movs	r0, r2
 800c630:	f7f7 fb5c 	bl	8003cec <HAL_PCD_EP_GetRxCount>
 800c634:	0003      	movs	r3, r0
}
 800c636:	0018      	movs	r0, r3
 800c638:	46bd      	mov	sp, r7
 800c63a:	b002      	add	sp, #8
 800c63c:	bd80      	pop	{r7, pc}
	...

0800c640 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c648:	4b02      	ldr	r3, [pc, #8]	; (800c654 <USBD_static_malloc+0x14>)
}
 800c64a:	0018      	movs	r0, r3
 800c64c:	46bd      	mov	sp, r7
 800c64e:	b002      	add	sp, #8
 800c650:	bd80      	pop	{r7, pc}
 800c652:	46c0      	nop			; (mov r8, r8)
 800c654:	20000260 	.word	0x20000260

0800c658 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]

}
 800c660:	46c0      	nop			; (mov r8, r8)
 800c662:	46bd      	mov	sp, r7
 800c664:	b002      	add	sp, #8
 800c666:	bd80      	pop	{r7, pc}

0800c668 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c66c:	f7f3 ff8c 	bl	8000588 <SystemClock_Config>
}
 800c670:	46c0      	nop			; (mov r8, r8)
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}

0800c676 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c676:	b580      	push	{r7, lr}
 800c678:	b084      	sub	sp, #16
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	0002      	movs	r2, r0
 800c67e:	1dfb      	adds	r3, r7, #7
 800c680:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c682:	230f      	movs	r3, #15
 800c684:	18fb      	adds	r3, r7, r3
 800c686:	2200      	movs	r2, #0
 800c688:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800c68a:	1dfb      	adds	r3, r7, #7
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	2b03      	cmp	r3, #3
 800c690:	d017      	beq.n	800c6c2 <USBD_Get_USB_Status+0x4c>
 800c692:	dc1b      	bgt.n	800c6cc <USBD_Get_USB_Status+0x56>
 800c694:	2b02      	cmp	r3, #2
 800c696:	d00f      	beq.n	800c6b8 <USBD_Get_USB_Status+0x42>
 800c698:	dc18      	bgt.n	800c6cc <USBD_Get_USB_Status+0x56>
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d002      	beq.n	800c6a4 <USBD_Get_USB_Status+0x2e>
 800c69e:	2b01      	cmp	r3, #1
 800c6a0:	d005      	beq.n	800c6ae <USBD_Get_USB_Status+0x38>
 800c6a2:	e013      	b.n	800c6cc <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c6a4:	230f      	movs	r3, #15
 800c6a6:	18fb      	adds	r3, r7, r3
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	701a      	strb	r2, [r3, #0]
    break;
 800c6ac:	e013      	b.n	800c6d6 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c6ae:	230f      	movs	r3, #15
 800c6b0:	18fb      	adds	r3, r7, r3
 800c6b2:	2202      	movs	r2, #2
 800c6b4:	701a      	strb	r2, [r3, #0]
    break;
 800c6b6:	e00e      	b.n	800c6d6 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c6b8:	230f      	movs	r3, #15
 800c6ba:	18fb      	adds	r3, r7, r3
 800c6bc:	2201      	movs	r2, #1
 800c6be:	701a      	strb	r2, [r3, #0]
    break;
 800c6c0:	e009      	b.n	800c6d6 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c6c2:	230f      	movs	r3, #15
 800c6c4:	18fb      	adds	r3, r7, r3
 800c6c6:	2202      	movs	r2, #2
 800c6c8:	701a      	strb	r2, [r3, #0]
    break;
 800c6ca:	e004      	b.n	800c6d6 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800c6cc:	230f      	movs	r3, #15
 800c6ce:	18fb      	adds	r3, r7, r3
 800c6d0:	2202      	movs	r2, #2
 800c6d2:	701a      	strb	r2, [r3, #0]
    break;
 800c6d4:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800c6d6:	230f      	movs	r3, #15
 800c6d8:	18fb      	adds	r3, r7, r3
 800c6da:	781b      	ldrb	r3, [r3, #0]
}
 800c6dc:	0018      	movs	r0, r3
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	b004      	add	sp, #16
 800c6e2:	bd80      	pop	{r7, pc}

0800c6e4 <__errno>:
 800c6e4:	4b01      	ldr	r3, [pc, #4]	; (800c6ec <__errno+0x8>)
 800c6e6:	6818      	ldr	r0, [r3, #0]
 800c6e8:	4770      	bx	lr
 800c6ea:	46c0      	nop			; (mov r8, r8)
 800c6ec:	2000017c 	.word	0x2000017c

0800c6f0 <__libc_init_array>:
 800c6f0:	b570      	push	{r4, r5, r6, lr}
 800c6f2:	2600      	movs	r6, #0
 800c6f4:	4d0c      	ldr	r5, [pc, #48]	; (800c728 <__libc_init_array+0x38>)
 800c6f6:	4c0d      	ldr	r4, [pc, #52]	; (800c72c <__libc_init_array+0x3c>)
 800c6f8:	1b64      	subs	r4, r4, r5
 800c6fa:	10a4      	asrs	r4, r4, #2
 800c6fc:	42a6      	cmp	r6, r4
 800c6fe:	d109      	bne.n	800c714 <__libc_init_array+0x24>
 800c700:	2600      	movs	r6, #0
 800c702:	f000 fc5b 	bl	800cfbc <_init>
 800c706:	4d0a      	ldr	r5, [pc, #40]	; (800c730 <__libc_init_array+0x40>)
 800c708:	4c0a      	ldr	r4, [pc, #40]	; (800c734 <__libc_init_array+0x44>)
 800c70a:	1b64      	subs	r4, r4, r5
 800c70c:	10a4      	asrs	r4, r4, #2
 800c70e:	42a6      	cmp	r6, r4
 800c710:	d105      	bne.n	800c71e <__libc_init_array+0x2e>
 800c712:	bd70      	pop	{r4, r5, r6, pc}
 800c714:	00b3      	lsls	r3, r6, #2
 800c716:	58eb      	ldr	r3, [r5, r3]
 800c718:	4798      	blx	r3
 800c71a:	3601      	adds	r6, #1
 800c71c:	e7ee      	b.n	800c6fc <__libc_init_array+0xc>
 800c71e:	00b3      	lsls	r3, r6, #2
 800c720:	58eb      	ldr	r3, [r5, r3]
 800c722:	4798      	blx	r3
 800c724:	3601      	adds	r6, #1
 800c726:	e7f2      	b.n	800c70e <__libc_init_array+0x1e>
 800c728:	0800d244 	.word	0x0800d244
 800c72c:	0800d244 	.word	0x0800d244
 800c730:	0800d244 	.word	0x0800d244
 800c734:	0800d248 	.word	0x0800d248

0800c738 <malloc>:
 800c738:	b510      	push	{r4, lr}
 800c73a:	4b03      	ldr	r3, [pc, #12]	; (800c748 <malloc+0x10>)
 800c73c:	0001      	movs	r1, r0
 800c73e:	6818      	ldr	r0, [r3, #0]
 800c740:	f000 f860 	bl	800c804 <_malloc_r>
 800c744:	bd10      	pop	{r4, pc}
 800c746:	46c0      	nop			; (mov r8, r8)
 800c748:	2000017c 	.word	0x2000017c

0800c74c <free>:
 800c74c:	b510      	push	{r4, lr}
 800c74e:	4b03      	ldr	r3, [pc, #12]	; (800c75c <free+0x10>)
 800c750:	0001      	movs	r1, r0
 800c752:	6818      	ldr	r0, [r3, #0]
 800c754:	f000 f80c 	bl	800c770 <_free_r>
 800c758:	bd10      	pop	{r4, pc}
 800c75a:	46c0      	nop			; (mov r8, r8)
 800c75c:	2000017c 	.word	0x2000017c

0800c760 <memset>:
 800c760:	0003      	movs	r3, r0
 800c762:	1882      	adds	r2, r0, r2
 800c764:	4293      	cmp	r3, r2
 800c766:	d100      	bne.n	800c76a <memset+0xa>
 800c768:	4770      	bx	lr
 800c76a:	7019      	strb	r1, [r3, #0]
 800c76c:	3301      	adds	r3, #1
 800c76e:	e7f9      	b.n	800c764 <memset+0x4>

0800c770 <_free_r>:
 800c770:	b570      	push	{r4, r5, r6, lr}
 800c772:	0005      	movs	r5, r0
 800c774:	2900      	cmp	r1, #0
 800c776:	d010      	beq.n	800c79a <_free_r+0x2a>
 800c778:	1f0c      	subs	r4, r1, #4
 800c77a:	6823      	ldr	r3, [r4, #0]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	da00      	bge.n	800c782 <_free_r+0x12>
 800c780:	18e4      	adds	r4, r4, r3
 800c782:	0028      	movs	r0, r5
 800c784:	f000 f8ce 	bl	800c924 <__malloc_lock>
 800c788:	4a1d      	ldr	r2, [pc, #116]	; (800c800 <_free_r+0x90>)
 800c78a:	6813      	ldr	r3, [r2, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d105      	bne.n	800c79c <_free_r+0x2c>
 800c790:	6063      	str	r3, [r4, #4]
 800c792:	6014      	str	r4, [r2, #0]
 800c794:	0028      	movs	r0, r5
 800c796:	f000 f8cd 	bl	800c934 <__malloc_unlock>
 800c79a:	bd70      	pop	{r4, r5, r6, pc}
 800c79c:	42a3      	cmp	r3, r4
 800c79e:	d908      	bls.n	800c7b2 <_free_r+0x42>
 800c7a0:	6821      	ldr	r1, [r4, #0]
 800c7a2:	1860      	adds	r0, r4, r1
 800c7a4:	4283      	cmp	r3, r0
 800c7a6:	d1f3      	bne.n	800c790 <_free_r+0x20>
 800c7a8:	6818      	ldr	r0, [r3, #0]
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	1841      	adds	r1, r0, r1
 800c7ae:	6021      	str	r1, [r4, #0]
 800c7b0:	e7ee      	b.n	800c790 <_free_r+0x20>
 800c7b2:	001a      	movs	r2, r3
 800c7b4:	685b      	ldr	r3, [r3, #4]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d001      	beq.n	800c7be <_free_r+0x4e>
 800c7ba:	42a3      	cmp	r3, r4
 800c7bc:	d9f9      	bls.n	800c7b2 <_free_r+0x42>
 800c7be:	6811      	ldr	r1, [r2, #0]
 800c7c0:	1850      	adds	r0, r2, r1
 800c7c2:	42a0      	cmp	r0, r4
 800c7c4:	d10b      	bne.n	800c7de <_free_r+0x6e>
 800c7c6:	6820      	ldr	r0, [r4, #0]
 800c7c8:	1809      	adds	r1, r1, r0
 800c7ca:	1850      	adds	r0, r2, r1
 800c7cc:	6011      	str	r1, [r2, #0]
 800c7ce:	4283      	cmp	r3, r0
 800c7d0:	d1e0      	bne.n	800c794 <_free_r+0x24>
 800c7d2:	6818      	ldr	r0, [r3, #0]
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	1841      	adds	r1, r0, r1
 800c7d8:	6011      	str	r1, [r2, #0]
 800c7da:	6053      	str	r3, [r2, #4]
 800c7dc:	e7da      	b.n	800c794 <_free_r+0x24>
 800c7de:	42a0      	cmp	r0, r4
 800c7e0:	d902      	bls.n	800c7e8 <_free_r+0x78>
 800c7e2:	230c      	movs	r3, #12
 800c7e4:	602b      	str	r3, [r5, #0]
 800c7e6:	e7d5      	b.n	800c794 <_free_r+0x24>
 800c7e8:	6821      	ldr	r1, [r4, #0]
 800c7ea:	1860      	adds	r0, r4, r1
 800c7ec:	4283      	cmp	r3, r0
 800c7ee:	d103      	bne.n	800c7f8 <_free_r+0x88>
 800c7f0:	6818      	ldr	r0, [r3, #0]
 800c7f2:	685b      	ldr	r3, [r3, #4]
 800c7f4:	1841      	adds	r1, r0, r1
 800c7f6:	6021      	str	r1, [r4, #0]
 800c7f8:	6063      	str	r3, [r4, #4]
 800c7fa:	6054      	str	r4, [r2, #4]
 800c7fc:	e7ca      	b.n	800c794 <_free_r+0x24>
 800c7fe:	46c0      	nop			; (mov r8, r8)
 800c800:	20000480 	.word	0x20000480

0800c804 <_malloc_r>:
 800c804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c806:	2303      	movs	r3, #3
 800c808:	1ccd      	adds	r5, r1, #3
 800c80a:	439d      	bics	r5, r3
 800c80c:	3508      	adds	r5, #8
 800c80e:	0006      	movs	r6, r0
 800c810:	2d0c      	cmp	r5, #12
 800c812:	d21f      	bcs.n	800c854 <_malloc_r+0x50>
 800c814:	250c      	movs	r5, #12
 800c816:	42a9      	cmp	r1, r5
 800c818:	d81e      	bhi.n	800c858 <_malloc_r+0x54>
 800c81a:	0030      	movs	r0, r6
 800c81c:	f000 f882 	bl	800c924 <__malloc_lock>
 800c820:	4925      	ldr	r1, [pc, #148]	; (800c8b8 <_malloc_r+0xb4>)
 800c822:	680a      	ldr	r2, [r1, #0]
 800c824:	0014      	movs	r4, r2
 800c826:	2c00      	cmp	r4, #0
 800c828:	d11a      	bne.n	800c860 <_malloc_r+0x5c>
 800c82a:	4f24      	ldr	r7, [pc, #144]	; (800c8bc <_malloc_r+0xb8>)
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d104      	bne.n	800c83c <_malloc_r+0x38>
 800c832:	0021      	movs	r1, r4
 800c834:	0030      	movs	r0, r6
 800c836:	f000 f843 	bl	800c8c0 <_sbrk_r>
 800c83a:	6038      	str	r0, [r7, #0]
 800c83c:	0029      	movs	r1, r5
 800c83e:	0030      	movs	r0, r6
 800c840:	f000 f83e 	bl	800c8c0 <_sbrk_r>
 800c844:	1c43      	adds	r3, r0, #1
 800c846:	d12b      	bne.n	800c8a0 <_malloc_r+0x9c>
 800c848:	230c      	movs	r3, #12
 800c84a:	0030      	movs	r0, r6
 800c84c:	6033      	str	r3, [r6, #0]
 800c84e:	f000 f871 	bl	800c934 <__malloc_unlock>
 800c852:	e003      	b.n	800c85c <_malloc_r+0x58>
 800c854:	2d00      	cmp	r5, #0
 800c856:	dade      	bge.n	800c816 <_malloc_r+0x12>
 800c858:	230c      	movs	r3, #12
 800c85a:	6033      	str	r3, [r6, #0]
 800c85c:	2000      	movs	r0, #0
 800c85e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c860:	6823      	ldr	r3, [r4, #0]
 800c862:	1b5b      	subs	r3, r3, r5
 800c864:	d419      	bmi.n	800c89a <_malloc_r+0x96>
 800c866:	2b0b      	cmp	r3, #11
 800c868:	d903      	bls.n	800c872 <_malloc_r+0x6e>
 800c86a:	6023      	str	r3, [r4, #0]
 800c86c:	18e4      	adds	r4, r4, r3
 800c86e:	6025      	str	r5, [r4, #0]
 800c870:	e003      	b.n	800c87a <_malloc_r+0x76>
 800c872:	6863      	ldr	r3, [r4, #4]
 800c874:	42a2      	cmp	r2, r4
 800c876:	d10e      	bne.n	800c896 <_malloc_r+0x92>
 800c878:	600b      	str	r3, [r1, #0]
 800c87a:	0030      	movs	r0, r6
 800c87c:	f000 f85a 	bl	800c934 <__malloc_unlock>
 800c880:	0020      	movs	r0, r4
 800c882:	2207      	movs	r2, #7
 800c884:	300b      	adds	r0, #11
 800c886:	1d23      	adds	r3, r4, #4
 800c888:	4390      	bics	r0, r2
 800c88a:	1ac2      	subs	r2, r0, r3
 800c88c:	4298      	cmp	r0, r3
 800c88e:	d0e6      	beq.n	800c85e <_malloc_r+0x5a>
 800c890:	1a1b      	subs	r3, r3, r0
 800c892:	50a3      	str	r3, [r4, r2]
 800c894:	e7e3      	b.n	800c85e <_malloc_r+0x5a>
 800c896:	6053      	str	r3, [r2, #4]
 800c898:	e7ef      	b.n	800c87a <_malloc_r+0x76>
 800c89a:	0022      	movs	r2, r4
 800c89c:	6864      	ldr	r4, [r4, #4]
 800c89e:	e7c2      	b.n	800c826 <_malloc_r+0x22>
 800c8a0:	2303      	movs	r3, #3
 800c8a2:	1cc4      	adds	r4, r0, #3
 800c8a4:	439c      	bics	r4, r3
 800c8a6:	42a0      	cmp	r0, r4
 800c8a8:	d0e1      	beq.n	800c86e <_malloc_r+0x6a>
 800c8aa:	1a21      	subs	r1, r4, r0
 800c8ac:	0030      	movs	r0, r6
 800c8ae:	f000 f807 	bl	800c8c0 <_sbrk_r>
 800c8b2:	1c43      	adds	r3, r0, #1
 800c8b4:	d1db      	bne.n	800c86e <_malloc_r+0x6a>
 800c8b6:	e7c7      	b.n	800c848 <_malloc_r+0x44>
 800c8b8:	20000480 	.word	0x20000480
 800c8bc:	20000484 	.word	0x20000484

0800c8c0 <_sbrk_r>:
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	b570      	push	{r4, r5, r6, lr}
 800c8c4:	4d06      	ldr	r5, [pc, #24]	; (800c8e0 <_sbrk_r+0x20>)
 800c8c6:	0004      	movs	r4, r0
 800c8c8:	0008      	movs	r0, r1
 800c8ca:	602b      	str	r3, [r5, #0]
 800c8cc:	f7f5 fa0a 	bl	8001ce4 <_sbrk>
 800c8d0:	1c43      	adds	r3, r0, #1
 800c8d2:	d103      	bne.n	800c8dc <_sbrk_r+0x1c>
 800c8d4:	682b      	ldr	r3, [r5, #0]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d000      	beq.n	800c8dc <_sbrk_r+0x1c>
 800c8da:	6023      	str	r3, [r4, #0]
 800c8dc:	bd70      	pop	{r4, r5, r6, pc}
 800c8de:	46c0      	nop			; (mov r8, r8)
 800c8e0:	2000165c 	.word	0x2000165c

0800c8e4 <siprintf>:
 800c8e4:	b40e      	push	{r1, r2, r3}
 800c8e6:	b500      	push	{lr}
 800c8e8:	490b      	ldr	r1, [pc, #44]	; (800c918 <siprintf+0x34>)
 800c8ea:	b09c      	sub	sp, #112	; 0x70
 800c8ec:	ab1d      	add	r3, sp, #116	; 0x74
 800c8ee:	9002      	str	r0, [sp, #8]
 800c8f0:	9006      	str	r0, [sp, #24]
 800c8f2:	9107      	str	r1, [sp, #28]
 800c8f4:	9104      	str	r1, [sp, #16]
 800c8f6:	4809      	ldr	r0, [pc, #36]	; (800c91c <siprintf+0x38>)
 800c8f8:	4909      	ldr	r1, [pc, #36]	; (800c920 <siprintf+0x3c>)
 800c8fa:	cb04      	ldmia	r3!, {r2}
 800c8fc:	9105      	str	r1, [sp, #20]
 800c8fe:	6800      	ldr	r0, [r0, #0]
 800c900:	a902      	add	r1, sp, #8
 800c902:	9301      	str	r3, [sp, #4]
 800c904:	f000 f880 	bl	800ca08 <_svfiprintf_r>
 800c908:	2300      	movs	r3, #0
 800c90a:	9a02      	ldr	r2, [sp, #8]
 800c90c:	7013      	strb	r3, [r2, #0]
 800c90e:	b01c      	add	sp, #112	; 0x70
 800c910:	bc08      	pop	{r3}
 800c912:	b003      	add	sp, #12
 800c914:	4718      	bx	r3
 800c916:	46c0      	nop			; (mov r8, r8)
 800c918:	7fffffff 	.word	0x7fffffff
 800c91c:	2000017c 	.word	0x2000017c
 800c920:	ffff0208 	.word	0xffff0208

0800c924 <__malloc_lock>:
 800c924:	b510      	push	{r4, lr}
 800c926:	4802      	ldr	r0, [pc, #8]	; (800c930 <__malloc_lock+0xc>)
 800c928:	f000 faf0 	bl	800cf0c <__retarget_lock_acquire_recursive>
 800c92c:	bd10      	pop	{r4, pc}
 800c92e:	46c0      	nop			; (mov r8, r8)
 800c930:	20001664 	.word	0x20001664

0800c934 <__malloc_unlock>:
 800c934:	b510      	push	{r4, lr}
 800c936:	4802      	ldr	r0, [pc, #8]	; (800c940 <__malloc_unlock+0xc>)
 800c938:	f000 fae9 	bl	800cf0e <__retarget_lock_release_recursive>
 800c93c:	bd10      	pop	{r4, pc}
 800c93e:	46c0      	nop			; (mov r8, r8)
 800c940:	20001664 	.word	0x20001664

0800c944 <__ssputs_r>:
 800c944:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c946:	688e      	ldr	r6, [r1, #8]
 800c948:	b085      	sub	sp, #20
 800c94a:	0007      	movs	r7, r0
 800c94c:	000c      	movs	r4, r1
 800c94e:	9203      	str	r2, [sp, #12]
 800c950:	9301      	str	r3, [sp, #4]
 800c952:	429e      	cmp	r6, r3
 800c954:	d83c      	bhi.n	800c9d0 <__ssputs_r+0x8c>
 800c956:	2390      	movs	r3, #144	; 0x90
 800c958:	898a      	ldrh	r2, [r1, #12]
 800c95a:	00db      	lsls	r3, r3, #3
 800c95c:	421a      	tst	r2, r3
 800c95e:	d034      	beq.n	800c9ca <__ssputs_r+0x86>
 800c960:	2503      	movs	r5, #3
 800c962:	6909      	ldr	r1, [r1, #16]
 800c964:	6823      	ldr	r3, [r4, #0]
 800c966:	1a5b      	subs	r3, r3, r1
 800c968:	9302      	str	r3, [sp, #8]
 800c96a:	6963      	ldr	r3, [r4, #20]
 800c96c:	9802      	ldr	r0, [sp, #8]
 800c96e:	435d      	muls	r5, r3
 800c970:	0feb      	lsrs	r3, r5, #31
 800c972:	195d      	adds	r5, r3, r5
 800c974:	9b01      	ldr	r3, [sp, #4]
 800c976:	106d      	asrs	r5, r5, #1
 800c978:	3301      	adds	r3, #1
 800c97a:	181b      	adds	r3, r3, r0
 800c97c:	42ab      	cmp	r3, r5
 800c97e:	d900      	bls.n	800c982 <__ssputs_r+0x3e>
 800c980:	001d      	movs	r5, r3
 800c982:	0553      	lsls	r3, r2, #21
 800c984:	d532      	bpl.n	800c9ec <__ssputs_r+0xa8>
 800c986:	0029      	movs	r1, r5
 800c988:	0038      	movs	r0, r7
 800c98a:	f7ff ff3b 	bl	800c804 <_malloc_r>
 800c98e:	1e06      	subs	r6, r0, #0
 800c990:	d109      	bne.n	800c9a6 <__ssputs_r+0x62>
 800c992:	230c      	movs	r3, #12
 800c994:	603b      	str	r3, [r7, #0]
 800c996:	2340      	movs	r3, #64	; 0x40
 800c998:	2001      	movs	r0, #1
 800c99a:	89a2      	ldrh	r2, [r4, #12]
 800c99c:	4240      	negs	r0, r0
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	81a3      	strh	r3, [r4, #12]
 800c9a2:	b005      	add	sp, #20
 800c9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9a6:	9a02      	ldr	r2, [sp, #8]
 800c9a8:	6921      	ldr	r1, [r4, #16]
 800c9aa:	f000 fabc 	bl	800cf26 <memcpy>
 800c9ae:	89a3      	ldrh	r3, [r4, #12]
 800c9b0:	4a14      	ldr	r2, [pc, #80]	; (800ca04 <__ssputs_r+0xc0>)
 800c9b2:	401a      	ands	r2, r3
 800c9b4:	2380      	movs	r3, #128	; 0x80
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	81a3      	strh	r3, [r4, #12]
 800c9ba:	9b02      	ldr	r3, [sp, #8]
 800c9bc:	6126      	str	r6, [r4, #16]
 800c9be:	18f6      	adds	r6, r6, r3
 800c9c0:	6026      	str	r6, [r4, #0]
 800c9c2:	6165      	str	r5, [r4, #20]
 800c9c4:	9e01      	ldr	r6, [sp, #4]
 800c9c6:	1aed      	subs	r5, r5, r3
 800c9c8:	60a5      	str	r5, [r4, #8]
 800c9ca:	9b01      	ldr	r3, [sp, #4]
 800c9cc:	429e      	cmp	r6, r3
 800c9ce:	d900      	bls.n	800c9d2 <__ssputs_r+0x8e>
 800c9d0:	9e01      	ldr	r6, [sp, #4]
 800c9d2:	0032      	movs	r2, r6
 800c9d4:	9903      	ldr	r1, [sp, #12]
 800c9d6:	6820      	ldr	r0, [r4, #0]
 800c9d8:	f000 faae 	bl	800cf38 <memmove>
 800c9dc:	68a3      	ldr	r3, [r4, #8]
 800c9de:	2000      	movs	r0, #0
 800c9e0:	1b9b      	subs	r3, r3, r6
 800c9e2:	60a3      	str	r3, [r4, #8]
 800c9e4:	6823      	ldr	r3, [r4, #0]
 800c9e6:	199e      	adds	r6, r3, r6
 800c9e8:	6026      	str	r6, [r4, #0]
 800c9ea:	e7da      	b.n	800c9a2 <__ssputs_r+0x5e>
 800c9ec:	002a      	movs	r2, r5
 800c9ee:	0038      	movs	r0, r7
 800c9f0:	f000 fab5 	bl	800cf5e <_realloc_r>
 800c9f4:	1e06      	subs	r6, r0, #0
 800c9f6:	d1e0      	bne.n	800c9ba <__ssputs_r+0x76>
 800c9f8:	0038      	movs	r0, r7
 800c9fa:	6921      	ldr	r1, [r4, #16]
 800c9fc:	f7ff feb8 	bl	800c770 <_free_r>
 800ca00:	e7c7      	b.n	800c992 <__ssputs_r+0x4e>
 800ca02:	46c0      	nop			; (mov r8, r8)
 800ca04:	fffffb7f 	.word	0xfffffb7f

0800ca08 <_svfiprintf_r>:
 800ca08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca0a:	b0a1      	sub	sp, #132	; 0x84
 800ca0c:	9003      	str	r0, [sp, #12]
 800ca0e:	001d      	movs	r5, r3
 800ca10:	898b      	ldrh	r3, [r1, #12]
 800ca12:	000f      	movs	r7, r1
 800ca14:	0016      	movs	r6, r2
 800ca16:	061b      	lsls	r3, r3, #24
 800ca18:	d511      	bpl.n	800ca3e <_svfiprintf_r+0x36>
 800ca1a:	690b      	ldr	r3, [r1, #16]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d10e      	bne.n	800ca3e <_svfiprintf_r+0x36>
 800ca20:	2140      	movs	r1, #64	; 0x40
 800ca22:	f7ff feef 	bl	800c804 <_malloc_r>
 800ca26:	6038      	str	r0, [r7, #0]
 800ca28:	6138      	str	r0, [r7, #16]
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	d105      	bne.n	800ca3a <_svfiprintf_r+0x32>
 800ca2e:	230c      	movs	r3, #12
 800ca30:	9a03      	ldr	r2, [sp, #12]
 800ca32:	3801      	subs	r0, #1
 800ca34:	6013      	str	r3, [r2, #0]
 800ca36:	b021      	add	sp, #132	; 0x84
 800ca38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca3a:	2340      	movs	r3, #64	; 0x40
 800ca3c:	617b      	str	r3, [r7, #20]
 800ca3e:	2300      	movs	r3, #0
 800ca40:	ac08      	add	r4, sp, #32
 800ca42:	6163      	str	r3, [r4, #20]
 800ca44:	3320      	adds	r3, #32
 800ca46:	7663      	strb	r3, [r4, #25]
 800ca48:	3310      	adds	r3, #16
 800ca4a:	76a3      	strb	r3, [r4, #26]
 800ca4c:	9507      	str	r5, [sp, #28]
 800ca4e:	0035      	movs	r5, r6
 800ca50:	782b      	ldrb	r3, [r5, #0]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d001      	beq.n	800ca5a <_svfiprintf_r+0x52>
 800ca56:	2b25      	cmp	r3, #37	; 0x25
 800ca58:	d147      	bne.n	800caea <_svfiprintf_r+0xe2>
 800ca5a:	1bab      	subs	r3, r5, r6
 800ca5c:	9305      	str	r3, [sp, #20]
 800ca5e:	42b5      	cmp	r5, r6
 800ca60:	d00c      	beq.n	800ca7c <_svfiprintf_r+0x74>
 800ca62:	0032      	movs	r2, r6
 800ca64:	0039      	movs	r1, r7
 800ca66:	9803      	ldr	r0, [sp, #12]
 800ca68:	f7ff ff6c 	bl	800c944 <__ssputs_r>
 800ca6c:	1c43      	adds	r3, r0, #1
 800ca6e:	d100      	bne.n	800ca72 <_svfiprintf_r+0x6a>
 800ca70:	e0ae      	b.n	800cbd0 <_svfiprintf_r+0x1c8>
 800ca72:	6962      	ldr	r2, [r4, #20]
 800ca74:	9b05      	ldr	r3, [sp, #20]
 800ca76:	4694      	mov	ip, r2
 800ca78:	4463      	add	r3, ip
 800ca7a:	6163      	str	r3, [r4, #20]
 800ca7c:	782b      	ldrb	r3, [r5, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d100      	bne.n	800ca84 <_svfiprintf_r+0x7c>
 800ca82:	e0a5      	b.n	800cbd0 <_svfiprintf_r+0x1c8>
 800ca84:	2201      	movs	r2, #1
 800ca86:	2300      	movs	r3, #0
 800ca88:	4252      	negs	r2, r2
 800ca8a:	6062      	str	r2, [r4, #4]
 800ca8c:	a904      	add	r1, sp, #16
 800ca8e:	3254      	adds	r2, #84	; 0x54
 800ca90:	1852      	adds	r2, r2, r1
 800ca92:	1c6e      	adds	r6, r5, #1
 800ca94:	6023      	str	r3, [r4, #0]
 800ca96:	60e3      	str	r3, [r4, #12]
 800ca98:	60a3      	str	r3, [r4, #8]
 800ca9a:	7013      	strb	r3, [r2, #0]
 800ca9c:	65a3      	str	r3, [r4, #88]	; 0x58
 800ca9e:	2205      	movs	r2, #5
 800caa0:	7831      	ldrb	r1, [r6, #0]
 800caa2:	4854      	ldr	r0, [pc, #336]	; (800cbf4 <_svfiprintf_r+0x1ec>)
 800caa4:	f000 fa34 	bl	800cf10 <memchr>
 800caa8:	1c75      	adds	r5, r6, #1
 800caaa:	2800      	cmp	r0, #0
 800caac:	d11f      	bne.n	800caee <_svfiprintf_r+0xe6>
 800caae:	6822      	ldr	r2, [r4, #0]
 800cab0:	06d3      	lsls	r3, r2, #27
 800cab2:	d504      	bpl.n	800cabe <_svfiprintf_r+0xb6>
 800cab4:	2353      	movs	r3, #83	; 0x53
 800cab6:	a904      	add	r1, sp, #16
 800cab8:	185b      	adds	r3, r3, r1
 800caba:	2120      	movs	r1, #32
 800cabc:	7019      	strb	r1, [r3, #0]
 800cabe:	0713      	lsls	r3, r2, #28
 800cac0:	d504      	bpl.n	800cacc <_svfiprintf_r+0xc4>
 800cac2:	2353      	movs	r3, #83	; 0x53
 800cac4:	a904      	add	r1, sp, #16
 800cac6:	185b      	adds	r3, r3, r1
 800cac8:	212b      	movs	r1, #43	; 0x2b
 800caca:	7019      	strb	r1, [r3, #0]
 800cacc:	7833      	ldrb	r3, [r6, #0]
 800cace:	2b2a      	cmp	r3, #42	; 0x2a
 800cad0:	d016      	beq.n	800cb00 <_svfiprintf_r+0xf8>
 800cad2:	0035      	movs	r5, r6
 800cad4:	2100      	movs	r1, #0
 800cad6:	200a      	movs	r0, #10
 800cad8:	68e3      	ldr	r3, [r4, #12]
 800cada:	782a      	ldrb	r2, [r5, #0]
 800cadc:	1c6e      	adds	r6, r5, #1
 800cade:	3a30      	subs	r2, #48	; 0x30
 800cae0:	2a09      	cmp	r2, #9
 800cae2:	d94e      	bls.n	800cb82 <_svfiprintf_r+0x17a>
 800cae4:	2900      	cmp	r1, #0
 800cae6:	d111      	bne.n	800cb0c <_svfiprintf_r+0x104>
 800cae8:	e017      	b.n	800cb1a <_svfiprintf_r+0x112>
 800caea:	3501      	adds	r5, #1
 800caec:	e7b0      	b.n	800ca50 <_svfiprintf_r+0x48>
 800caee:	4b41      	ldr	r3, [pc, #260]	; (800cbf4 <_svfiprintf_r+0x1ec>)
 800caf0:	6822      	ldr	r2, [r4, #0]
 800caf2:	1ac0      	subs	r0, r0, r3
 800caf4:	2301      	movs	r3, #1
 800caf6:	4083      	lsls	r3, r0
 800caf8:	4313      	orrs	r3, r2
 800cafa:	002e      	movs	r6, r5
 800cafc:	6023      	str	r3, [r4, #0]
 800cafe:	e7ce      	b.n	800ca9e <_svfiprintf_r+0x96>
 800cb00:	9b07      	ldr	r3, [sp, #28]
 800cb02:	1d19      	adds	r1, r3, #4
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	9107      	str	r1, [sp, #28]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	db01      	blt.n	800cb10 <_svfiprintf_r+0x108>
 800cb0c:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb0e:	e004      	b.n	800cb1a <_svfiprintf_r+0x112>
 800cb10:	425b      	negs	r3, r3
 800cb12:	60e3      	str	r3, [r4, #12]
 800cb14:	2302      	movs	r3, #2
 800cb16:	4313      	orrs	r3, r2
 800cb18:	6023      	str	r3, [r4, #0]
 800cb1a:	782b      	ldrb	r3, [r5, #0]
 800cb1c:	2b2e      	cmp	r3, #46	; 0x2e
 800cb1e:	d10a      	bne.n	800cb36 <_svfiprintf_r+0x12e>
 800cb20:	786b      	ldrb	r3, [r5, #1]
 800cb22:	2b2a      	cmp	r3, #42	; 0x2a
 800cb24:	d135      	bne.n	800cb92 <_svfiprintf_r+0x18a>
 800cb26:	9b07      	ldr	r3, [sp, #28]
 800cb28:	3502      	adds	r5, #2
 800cb2a:	1d1a      	adds	r2, r3, #4
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	9207      	str	r2, [sp, #28]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	db2b      	blt.n	800cb8c <_svfiprintf_r+0x184>
 800cb34:	9309      	str	r3, [sp, #36]	; 0x24
 800cb36:	4e30      	ldr	r6, [pc, #192]	; (800cbf8 <_svfiprintf_r+0x1f0>)
 800cb38:	2203      	movs	r2, #3
 800cb3a:	0030      	movs	r0, r6
 800cb3c:	7829      	ldrb	r1, [r5, #0]
 800cb3e:	f000 f9e7 	bl	800cf10 <memchr>
 800cb42:	2800      	cmp	r0, #0
 800cb44:	d006      	beq.n	800cb54 <_svfiprintf_r+0x14c>
 800cb46:	2340      	movs	r3, #64	; 0x40
 800cb48:	1b80      	subs	r0, r0, r6
 800cb4a:	4083      	lsls	r3, r0
 800cb4c:	6822      	ldr	r2, [r4, #0]
 800cb4e:	3501      	adds	r5, #1
 800cb50:	4313      	orrs	r3, r2
 800cb52:	6023      	str	r3, [r4, #0]
 800cb54:	7829      	ldrb	r1, [r5, #0]
 800cb56:	2206      	movs	r2, #6
 800cb58:	4828      	ldr	r0, [pc, #160]	; (800cbfc <_svfiprintf_r+0x1f4>)
 800cb5a:	1c6e      	adds	r6, r5, #1
 800cb5c:	7621      	strb	r1, [r4, #24]
 800cb5e:	f000 f9d7 	bl	800cf10 <memchr>
 800cb62:	2800      	cmp	r0, #0
 800cb64:	d03c      	beq.n	800cbe0 <_svfiprintf_r+0x1d8>
 800cb66:	4b26      	ldr	r3, [pc, #152]	; (800cc00 <_svfiprintf_r+0x1f8>)
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d125      	bne.n	800cbb8 <_svfiprintf_r+0x1b0>
 800cb6c:	2207      	movs	r2, #7
 800cb6e:	9b07      	ldr	r3, [sp, #28]
 800cb70:	3307      	adds	r3, #7
 800cb72:	4393      	bics	r3, r2
 800cb74:	3308      	adds	r3, #8
 800cb76:	9307      	str	r3, [sp, #28]
 800cb78:	6963      	ldr	r3, [r4, #20]
 800cb7a:	9a04      	ldr	r2, [sp, #16]
 800cb7c:	189b      	adds	r3, r3, r2
 800cb7e:	6163      	str	r3, [r4, #20]
 800cb80:	e765      	b.n	800ca4e <_svfiprintf_r+0x46>
 800cb82:	4343      	muls	r3, r0
 800cb84:	0035      	movs	r5, r6
 800cb86:	2101      	movs	r1, #1
 800cb88:	189b      	adds	r3, r3, r2
 800cb8a:	e7a6      	b.n	800cada <_svfiprintf_r+0xd2>
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	425b      	negs	r3, r3
 800cb90:	e7d0      	b.n	800cb34 <_svfiprintf_r+0x12c>
 800cb92:	2300      	movs	r3, #0
 800cb94:	200a      	movs	r0, #10
 800cb96:	001a      	movs	r2, r3
 800cb98:	3501      	adds	r5, #1
 800cb9a:	6063      	str	r3, [r4, #4]
 800cb9c:	7829      	ldrb	r1, [r5, #0]
 800cb9e:	1c6e      	adds	r6, r5, #1
 800cba0:	3930      	subs	r1, #48	; 0x30
 800cba2:	2909      	cmp	r1, #9
 800cba4:	d903      	bls.n	800cbae <_svfiprintf_r+0x1a6>
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d0c5      	beq.n	800cb36 <_svfiprintf_r+0x12e>
 800cbaa:	9209      	str	r2, [sp, #36]	; 0x24
 800cbac:	e7c3      	b.n	800cb36 <_svfiprintf_r+0x12e>
 800cbae:	4342      	muls	r2, r0
 800cbb0:	0035      	movs	r5, r6
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	1852      	adds	r2, r2, r1
 800cbb6:	e7f1      	b.n	800cb9c <_svfiprintf_r+0x194>
 800cbb8:	ab07      	add	r3, sp, #28
 800cbba:	9300      	str	r3, [sp, #0]
 800cbbc:	003a      	movs	r2, r7
 800cbbe:	0021      	movs	r1, r4
 800cbc0:	4b10      	ldr	r3, [pc, #64]	; (800cc04 <_svfiprintf_r+0x1fc>)
 800cbc2:	9803      	ldr	r0, [sp, #12]
 800cbc4:	e000      	b.n	800cbc8 <_svfiprintf_r+0x1c0>
 800cbc6:	bf00      	nop
 800cbc8:	9004      	str	r0, [sp, #16]
 800cbca:	9b04      	ldr	r3, [sp, #16]
 800cbcc:	3301      	adds	r3, #1
 800cbce:	d1d3      	bne.n	800cb78 <_svfiprintf_r+0x170>
 800cbd0:	89bb      	ldrh	r3, [r7, #12]
 800cbd2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cbd4:	065b      	lsls	r3, r3, #25
 800cbd6:	d400      	bmi.n	800cbda <_svfiprintf_r+0x1d2>
 800cbd8:	e72d      	b.n	800ca36 <_svfiprintf_r+0x2e>
 800cbda:	2001      	movs	r0, #1
 800cbdc:	4240      	negs	r0, r0
 800cbde:	e72a      	b.n	800ca36 <_svfiprintf_r+0x2e>
 800cbe0:	ab07      	add	r3, sp, #28
 800cbe2:	9300      	str	r3, [sp, #0]
 800cbe4:	003a      	movs	r2, r7
 800cbe6:	0021      	movs	r1, r4
 800cbe8:	4b06      	ldr	r3, [pc, #24]	; (800cc04 <_svfiprintf_r+0x1fc>)
 800cbea:	9803      	ldr	r0, [sp, #12]
 800cbec:	f000 f87c 	bl	800cce8 <_printf_i>
 800cbf0:	e7ea      	b.n	800cbc8 <_svfiprintf_r+0x1c0>
 800cbf2:	46c0      	nop			; (mov r8, r8)
 800cbf4:	0800d210 	.word	0x0800d210
 800cbf8:	0800d216 	.word	0x0800d216
 800cbfc:	0800d21a 	.word	0x0800d21a
 800cc00:	00000000 	.word	0x00000000
 800cc04:	0800c945 	.word	0x0800c945

0800cc08 <_printf_common>:
 800cc08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc0a:	0015      	movs	r5, r2
 800cc0c:	9301      	str	r3, [sp, #4]
 800cc0e:	688a      	ldr	r2, [r1, #8]
 800cc10:	690b      	ldr	r3, [r1, #16]
 800cc12:	000c      	movs	r4, r1
 800cc14:	9000      	str	r0, [sp, #0]
 800cc16:	4293      	cmp	r3, r2
 800cc18:	da00      	bge.n	800cc1c <_printf_common+0x14>
 800cc1a:	0013      	movs	r3, r2
 800cc1c:	0022      	movs	r2, r4
 800cc1e:	602b      	str	r3, [r5, #0]
 800cc20:	3243      	adds	r2, #67	; 0x43
 800cc22:	7812      	ldrb	r2, [r2, #0]
 800cc24:	2a00      	cmp	r2, #0
 800cc26:	d001      	beq.n	800cc2c <_printf_common+0x24>
 800cc28:	3301      	adds	r3, #1
 800cc2a:	602b      	str	r3, [r5, #0]
 800cc2c:	6823      	ldr	r3, [r4, #0]
 800cc2e:	069b      	lsls	r3, r3, #26
 800cc30:	d502      	bpl.n	800cc38 <_printf_common+0x30>
 800cc32:	682b      	ldr	r3, [r5, #0]
 800cc34:	3302      	adds	r3, #2
 800cc36:	602b      	str	r3, [r5, #0]
 800cc38:	6822      	ldr	r2, [r4, #0]
 800cc3a:	2306      	movs	r3, #6
 800cc3c:	0017      	movs	r7, r2
 800cc3e:	401f      	ands	r7, r3
 800cc40:	421a      	tst	r2, r3
 800cc42:	d027      	beq.n	800cc94 <_printf_common+0x8c>
 800cc44:	0023      	movs	r3, r4
 800cc46:	3343      	adds	r3, #67	; 0x43
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	1e5a      	subs	r2, r3, #1
 800cc4c:	4193      	sbcs	r3, r2
 800cc4e:	6822      	ldr	r2, [r4, #0]
 800cc50:	0692      	lsls	r2, r2, #26
 800cc52:	d430      	bmi.n	800ccb6 <_printf_common+0xae>
 800cc54:	0022      	movs	r2, r4
 800cc56:	9901      	ldr	r1, [sp, #4]
 800cc58:	9800      	ldr	r0, [sp, #0]
 800cc5a:	9e08      	ldr	r6, [sp, #32]
 800cc5c:	3243      	adds	r2, #67	; 0x43
 800cc5e:	47b0      	blx	r6
 800cc60:	1c43      	adds	r3, r0, #1
 800cc62:	d025      	beq.n	800ccb0 <_printf_common+0xa8>
 800cc64:	2306      	movs	r3, #6
 800cc66:	6820      	ldr	r0, [r4, #0]
 800cc68:	682a      	ldr	r2, [r5, #0]
 800cc6a:	68e1      	ldr	r1, [r4, #12]
 800cc6c:	2500      	movs	r5, #0
 800cc6e:	4003      	ands	r3, r0
 800cc70:	2b04      	cmp	r3, #4
 800cc72:	d103      	bne.n	800cc7c <_printf_common+0x74>
 800cc74:	1a8d      	subs	r5, r1, r2
 800cc76:	43eb      	mvns	r3, r5
 800cc78:	17db      	asrs	r3, r3, #31
 800cc7a:	401d      	ands	r5, r3
 800cc7c:	68a3      	ldr	r3, [r4, #8]
 800cc7e:	6922      	ldr	r2, [r4, #16]
 800cc80:	4293      	cmp	r3, r2
 800cc82:	dd01      	ble.n	800cc88 <_printf_common+0x80>
 800cc84:	1a9b      	subs	r3, r3, r2
 800cc86:	18ed      	adds	r5, r5, r3
 800cc88:	2700      	movs	r7, #0
 800cc8a:	42bd      	cmp	r5, r7
 800cc8c:	d120      	bne.n	800ccd0 <_printf_common+0xc8>
 800cc8e:	2000      	movs	r0, #0
 800cc90:	e010      	b.n	800ccb4 <_printf_common+0xac>
 800cc92:	3701      	adds	r7, #1
 800cc94:	68e3      	ldr	r3, [r4, #12]
 800cc96:	682a      	ldr	r2, [r5, #0]
 800cc98:	1a9b      	subs	r3, r3, r2
 800cc9a:	42bb      	cmp	r3, r7
 800cc9c:	ddd2      	ble.n	800cc44 <_printf_common+0x3c>
 800cc9e:	0022      	movs	r2, r4
 800cca0:	2301      	movs	r3, #1
 800cca2:	9901      	ldr	r1, [sp, #4]
 800cca4:	9800      	ldr	r0, [sp, #0]
 800cca6:	9e08      	ldr	r6, [sp, #32]
 800cca8:	3219      	adds	r2, #25
 800ccaa:	47b0      	blx	r6
 800ccac:	1c43      	adds	r3, r0, #1
 800ccae:	d1f0      	bne.n	800cc92 <_printf_common+0x8a>
 800ccb0:	2001      	movs	r0, #1
 800ccb2:	4240      	negs	r0, r0
 800ccb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ccb6:	2030      	movs	r0, #48	; 0x30
 800ccb8:	18e1      	adds	r1, r4, r3
 800ccba:	3143      	adds	r1, #67	; 0x43
 800ccbc:	7008      	strb	r0, [r1, #0]
 800ccbe:	0021      	movs	r1, r4
 800ccc0:	1c5a      	adds	r2, r3, #1
 800ccc2:	3145      	adds	r1, #69	; 0x45
 800ccc4:	7809      	ldrb	r1, [r1, #0]
 800ccc6:	18a2      	adds	r2, r4, r2
 800ccc8:	3243      	adds	r2, #67	; 0x43
 800ccca:	3302      	adds	r3, #2
 800cccc:	7011      	strb	r1, [r2, #0]
 800ccce:	e7c1      	b.n	800cc54 <_printf_common+0x4c>
 800ccd0:	0022      	movs	r2, r4
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	9901      	ldr	r1, [sp, #4]
 800ccd6:	9800      	ldr	r0, [sp, #0]
 800ccd8:	9e08      	ldr	r6, [sp, #32]
 800ccda:	321a      	adds	r2, #26
 800ccdc:	47b0      	blx	r6
 800ccde:	1c43      	adds	r3, r0, #1
 800cce0:	d0e6      	beq.n	800ccb0 <_printf_common+0xa8>
 800cce2:	3701      	adds	r7, #1
 800cce4:	e7d1      	b.n	800cc8a <_printf_common+0x82>
	...

0800cce8 <_printf_i>:
 800cce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccea:	b08b      	sub	sp, #44	; 0x2c
 800ccec:	9206      	str	r2, [sp, #24]
 800ccee:	000a      	movs	r2, r1
 800ccf0:	3243      	adds	r2, #67	; 0x43
 800ccf2:	9307      	str	r3, [sp, #28]
 800ccf4:	9005      	str	r0, [sp, #20]
 800ccf6:	9204      	str	r2, [sp, #16]
 800ccf8:	7e0a      	ldrb	r2, [r1, #24]
 800ccfa:	000c      	movs	r4, r1
 800ccfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ccfe:	2a78      	cmp	r2, #120	; 0x78
 800cd00:	d806      	bhi.n	800cd10 <_printf_i+0x28>
 800cd02:	2a62      	cmp	r2, #98	; 0x62
 800cd04:	d808      	bhi.n	800cd18 <_printf_i+0x30>
 800cd06:	2a00      	cmp	r2, #0
 800cd08:	d100      	bne.n	800cd0c <_printf_i+0x24>
 800cd0a:	e0c0      	b.n	800ce8e <_printf_i+0x1a6>
 800cd0c:	2a58      	cmp	r2, #88	; 0x58
 800cd0e:	d052      	beq.n	800cdb6 <_printf_i+0xce>
 800cd10:	0026      	movs	r6, r4
 800cd12:	3642      	adds	r6, #66	; 0x42
 800cd14:	7032      	strb	r2, [r6, #0]
 800cd16:	e022      	b.n	800cd5e <_printf_i+0x76>
 800cd18:	0010      	movs	r0, r2
 800cd1a:	3863      	subs	r0, #99	; 0x63
 800cd1c:	2815      	cmp	r0, #21
 800cd1e:	d8f7      	bhi.n	800cd10 <_printf_i+0x28>
 800cd20:	f7f3 f9fa 	bl	8000118 <__gnu_thumb1_case_shi>
 800cd24:	001f0016 	.word	0x001f0016
 800cd28:	fff6fff6 	.word	0xfff6fff6
 800cd2c:	fff6fff6 	.word	0xfff6fff6
 800cd30:	fff6001f 	.word	0xfff6001f
 800cd34:	fff6fff6 	.word	0xfff6fff6
 800cd38:	00a8fff6 	.word	0x00a8fff6
 800cd3c:	009a0036 	.word	0x009a0036
 800cd40:	fff6fff6 	.word	0xfff6fff6
 800cd44:	fff600b9 	.word	0xfff600b9
 800cd48:	fff60036 	.word	0xfff60036
 800cd4c:	009efff6 	.word	0x009efff6
 800cd50:	0026      	movs	r6, r4
 800cd52:	681a      	ldr	r2, [r3, #0]
 800cd54:	3642      	adds	r6, #66	; 0x42
 800cd56:	1d11      	adds	r1, r2, #4
 800cd58:	6019      	str	r1, [r3, #0]
 800cd5a:	6813      	ldr	r3, [r2, #0]
 800cd5c:	7033      	strb	r3, [r6, #0]
 800cd5e:	2301      	movs	r3, #1
 800cd60:	e0a7      	b.n	800ceb2 <_printf_i+0x1ca>
 800cd62:	6808      	ldr	r0, [r1, #0]
 800cd64:	6819      	ldr	r1, [r3, #0]
 800cd66:	1d0a      	adds	r2, r1, #4
 800cd68:	0605      	lsls	r5, r0, #24
 800cd6a:	d50b      	bpl.n	800cd84 <_printf_i+0x9c>
 800cd6c:	680d      	ldr	r5, [r1, #0]
 800cd6e:	601a      	str	r2, [r3, #0]
 800cd70:	2d00      	cmp	r5, #0
 800cd72:	da03      	bge.n	800cd7c <_printf_i+0x94>
 800cd74:	232d      	movs	r3, #45	; 0x2d
 800cd76:	9a04      	ldr	r2, [sp, #16]
 800cd78:	426d      	negs	r5, r5
 800cd7a:	7013      	strb	r3, [r2, #0]
 800cd7c:	4b61      	ldr	r3, [pc, #388]	; (800cf04 <_printf_i+0x21c>)
 800cd7e:	270a      	movs	r7, #10
 800cd80:	9303      	str	r3, [sp, #12]
 800cd82:	e032      	b.n	800cdea <_printf_i+0x102>
 800cd84:	680d      	ldr	r5, [r1, #0]
 800cd86:	601a      	str	r2, [r3, #0]
 800cd88:	0641      	lsls	r1, r0, #25
 800cd8a:	d5f1      	bpl.n	800cd70 <_printf_i+0x88>
 800cd8c:	b22d      	sxth	r5, r5
 800cd8e:	e7ef      	b.n	800cd70 <_printf_i+0x88>
 800cd90:	680d      	ldr	r5, [r1, #0]
 800cd92:	6819      	ldr	r1, [r3, #0]
 800cd94:	1d08      	adds	r0, r1, #4
 800cd96:	6018      	str	r0, [r3, #0]
 800cd98:	062e      	lsls	r6, r5, #24
 800cd9a:	d501      	bpl.n	800cda0 <_printf_i+0xb8>
 800cd9c:	680d      	ldr	r5, [r1, #0]
 800cd9e:	e003      	b.n	800cda8 <_printf_i+0xc0>
 800cda0:	066d      	lsls	r5, r5, #25
 800cda2:	d5fb      	bpl.n	800cd9c <_printf_i+0xb4>
 800cda4:	680d      	ldr	r5, [r1, #0]
 800cda6:	b2ad      	uxth	r5, r5
 800cda8:	4b56      	ldr	r3, [pc, #344]	; (800cf04 <_printf_i+0x21c>)
 800cdaa:	270a      	movs	r7, #10
 800cdac:	9303      	str	r3, [sp, #12]
 800cdae:	2a6f      	cmp	r2, #111	; 0x6f
 800cdb0:	d117      	bne.n	800cde2 <_printf_i+0xfa>
 800cdb2:	2708      	movs	r7, #8
 800cdb4:	e015      	b.n	800cde2 <_printf_i+0xfa>
 800cdb6:	3145      	adds	r1, #69	; 0x45
 800cdb8:	700a      	strb	r2, [r1, #0]
 800cdba:	4a52      	ldr	r2, [pc, #328]	; (800cf04 <_printf_i+0x21c>)
 800cdbc:	9203      	str	r2, [sp, #12]
 800cdbe:	681a      	ldr	r2, [r3, #0]
 800cdc0:	6821      	ldr	r1, [r4, #0]
 800cdc2:	ca20      	ldmia	r2!, {r5}
 800cdc4:	601a      	str	r2, [r3, #0]
 800cdc6:	0608      	lsls	r0, r1, #24
 800cdc8:	d550      	bpl.n	800ce6c <_printf_i+0x184>
 800cdca:	07cb      	lsls	r3, r1, #31
 800cdcc:	d502      	bpl.n	800cdd4 <_printf_i+0xec>
 800cdce:	2320      	movs	r3, #32
 800cdd0:	4319      	orrs	r1, r3
 800cdd2:	6021      	str	r1, [r4, #0]
 800cdd4:	2710      	movs	r7, #16
 800cdd6:	2d00      	cmp	r5, #0
 800cdd8:	d103      	bne.n	800cde2 <_printf_i+0xfa>
 800cdda:	2320      	movs	r3, #32
 800cddc:	6822      	ldr	r2, [r4, #0]
 800cdde:	439a      	bics	r2, r3
 800cde0:	6022      	str	r2, [r4, #0]
 800cde2:	0023      	movs	r3, r4
 800cde4:	2200      	movs	r2, #0
 800cde6:	3343      	adds	r3, #67	; 0x43
 800cde8:	701a      	strb	r2, [r3, #0]
 800cdea:	6863      	ldr	r3, [r4, #4]
 800cdec:	60a3      	str	r3, [r4, #8]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	db03      	blt.n	800cdfa <_printf_i+0x112>
 800cdf2:	2204      	movs	r2, #4
 800cdf4:	6821      	ldr	r1, [r4, #0]
 800cdf6:	4391      	bics	r1, r2
 800cdf8:	6021      	str	r1, [r4, #0]
 800cdfa:	2d00      	cmp	r5, #0
 800cdfc:	d102      	bne.n	800ce04 <_printf_i+0x11c>
 800cdfe:	9e04      	ldr	r6, [sp, #16]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d00c      	beq.n	800ce1e <_printf_i+0x136>
 800ce04:	9e04      	ldr	r6, [sp, #16]
 800ce06:	0028      	movs	r0, r5
 800ce08:	0039      	movs	r1, r7
 800ce0a:	f7f3 fa15 	bl	8000238 <__aeabi_uidivmod>
 800ce0e:	9b03      	ldr	r3, [sp, #12]
 800ce10:	3e01      	subs	r6, #1
 800ce12:	5c5b      	ldrb	r3, [r3, r1]
 800ce14:	7033      	strb	r3, [r6, #0]
 800ce16:	002b      	movs	r3, r5
 800ce18:	0005      	movs	r5, r0
 800ce1a:	429f      	cmp	r7, r3
 800ce1c:	d9f3      	bls.n	800ce06 <_printf_i+0x11e>
 800ce1e:	2f08      	cmp	r7, #8
 800ce20:	d109      	bne.n	800ce36 <_printf_i+0x14e>
 800ce22:	6823      	ldr	r3, [r4, #0]
 800ce24:	07db      	lsls	r3, r3, #31
 800ce26:	d506      	bpl.n	800ce36 <_printf_i+0x14e>
 800ce28:	6863      	ldr	r3, [r4, #4]
 800ce2a:	6922      	ldr	r2, [r4, #16]
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	dc02      	bgt.n	800ce36 <_printf_i+0x14e>
 800ce30:	2330      	movs	r3, #48	; 0x30
 800ce32:	3e01      	subs	r6, #1
 800ce34:	7033      	strb	r3, [r6, #0]
 800ce36:	9b04      	ldr	r3, [sp, #16]
 800ce38:	1b9b      	subs	r3, r3, r6
 800ce3a:	6123      	str	r3, [r4, #16]
 800ce3c:	9b07      	ldr	r3, [sp, #28]
 800ce3e:	0021      	movs	r1, r4
 800ce40:	9300      	str	r3, [sp, #0]
 800ce42:	9805      	ldr	r0, [sp, #20]
 800ce44:	9b06      	ldr	r3, [sp, #24]
 800ce46:	aa09      	add	r2, sp, #36	; 0x24
 800ce48:	f7ff fede 	bl	800cc08 <_printf_common>
 800ce4c:	1c43      	adds	r3, r0, #1
 800ce4e:	d135      	bne.n	800cebc <_printf_i+0x1d4>
 800ce50:	2001      	movs	r0, #1
 800ce52:	4240      	negs	r0, r0
 800ce54:	b00b      	add	sp, #44	; 0x2c
 800ce56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce58:	2220      	movs	r2, #32
 800ce5a:	6809      	ldr	r1, [r1, #0]
 800ce5c:	430a      	orrs	r2, r1
 800ce5e:	6022      	str	r2, [r4, #0]
 800ce60:	0022      	movs	r2, r4
 800ce62:	2178      	movs	r1, #120	; 0x78
 800ce64:	3245      	adds	r2, #69	; 0x45
 800ce66:	7011      	strb	r1, [r2, #0]
 800ce68:	4a27      	ldr	r2, [pc, #156]	; (800cf08 <_printf_i+0x220>)
 800ce6a:	e7a7      	b.n	800cdbc <_printf_i+0xd4>
 800ce6c:	0648      	lsls	r0, r1, #25
 800ce6e:	d5ac      	bpl.n	800cdca <_printf_i+0xe2>
 800ce70:	b2ad      	uxth	r5, r5
 800ce72:	e7aa      	b.n	800cdca <_printf_i+0xe2>
 800ce74:	681a      	ldr	r2, [r3, #0]
 800ce76:	680d      	ldr	r5, [r1, #0]
 800ce78:	1d10      	adds	r0, r2, #4
 800ce7a:	6949      	ldr	r1, [r1, #20]
 800ce7c:	6018      	str	r0, [r3, #0]
 800ce7e:	6813      	ldr	r3, [r2, #0]
 800ce80:	062e      	lsls	r6, r5, #24
 800ce82:	d501      	bpl.n	800ce88 <_printf_i+0x1a0>
 800ce84:	6019      	str	r1, [r3, #0]
 800ce86:	e002      	b.n	800ce8e <_printf_i+0x1a6>
 800ce88:	066d      	lsls	r5, r5, #25
 800ce8a:	d5fb      	bpl.n	800ce84 <_printf_i+0x19c>
 800ce8c:	8019      	strh	r1, [r3, #0]
 800ce8e:	2300      	movs	r3, #0
 800ce90:	9e04      	ldr	r6, [sp, #16]
 800ce92:	6123      	str	r3, [r4, #16]
 800ce94:	e7d2      	b.n	800ce3c <_printf_i+0x154>
 800ce96:	681a      	ldr	r2, [r3, #0]
 800ce98:	1d11      	adds	r1, r2, #4
 800ce9a:	6019      	str	r1, [r3, #0]
 800ce9c:	6816      	ldr	r6, [r2, #0]
 800ce9e:	2100      	movs	r1, #0
 800cea0:	0030      	movs	r0, r6
 800cea2:	6862      	ldr	r2, [r4, #4]
 800cea4:	f000 f834 	bl	800cf10 <memchr>
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	d001      	beq.n	800ceb0 <_printf_i+0x1c8>
 800ceac:	1b80      	subs	r0, r0, r6
 800ceae:	6060      	str	r0, [r4, #4]
 800ceb0:	6863      	ldr	r3, [r4, #4]
 800ceb2:	6123      	str	r3, [r4, #16]
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	9a04      	ldr	r2, [sp, #16]
 800ceb8:	7013      	strb	r3, [r2, #0]
 800ceba:	e7bf      	b.n	800ce3c <_printf_i+0x154>
 800cebc:	6923      	ldr	r3, [r4, #16]
 800cebe:	0032      	movs	r2, r6
 800cec0:	9906      	ldr	r1, [sp, #24]
 800cec2:	9805      	ldr	r0, [sp, #20]
 800cec4:	9d07      	ldr	r5, [sp, #28]
 800cec6:	47a8      	blx	r5
 800cec8:	1c43      	adds	r3, r0, #1
 800ceca:	d0c1      	beq.n	800ce50 <_printf_i+0x168>
 800cecc:	6823      	ldr	r3, [r4, #0]
 800cece:	079b      	lsls	r3, r3, #30
 800ced0:	d415      	bmi.n	800cefe <_printf_i+0x216>
 800ced2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ced4:	68e0      	ldr	r0, [r4, #12]
 800ced6:	4298      	cmp	r0, r3
 800ced8:	dabc      	bge.n	800ce54 <_printf_i+0x16c>
 800ceda:	0018      	movs	r0, r3
 800cedc:	e7ba      	b.n	800ce54 <_printf_i+0x16c>
 800cede:	0022      	movs	r2, r4
 800cee0:	2301      	movs	r3, #1
 800cee2:	9906      	ldr	r1, [sp, #24]
 800cee4:	9805      	ldr	r0, [sp, #20]
 800cee6:	9e07      	ldr	r6, [sp, #28]
 800cee8:	3219      	adds	r2, #25
 800ceea:	47b0      	blx	r6
 800ceec:	1c43      	adds	r3, r0, #1
 800ceee:	d0af      	beq.n	800ce50 <_printf_i+0x168>
 800cef0:	3501      	adds	r5, #1
 800cef2:	68e3      	ldr	r3, [r4, #12]
 800cef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cef6:	1a9b      	subs	r3, r3, r2
 800cef8:	42ab      	cmp	r3, r5
 800cefa:	dcf0      	bgt.n	800cede <_printf_i+0x1f6>
 800cefc:	e7e9      	b.n	800ced2 <_printf_i+0x1ea>
 800cefe:	2500      	movs	r5, #0
 800cf00:	e7f7      	b.n	800cef2 <_printf_i+0x20a>
 800cf02:	46c0      	nop			; (mov r8, r8)
 800cf04:	0800d221 	.word	0x0800d221
 800cf08:	0800d232 	.word	0x0800d232

0800cf0c <__retarget_lock_acquire_recursive>:
 800cf0c:	4770      	bx	lr

0800cf0e <__retarget_lock_release_recursive>:
 800cf0e:	4770      	bx	lr

0800cf10 <memchr>:
 800cf10:	b2c9      	uxtb	r1, r1
 800cf12:	1882      	adds	r2, r0, r2
 800cf14:	4290      	cmp	r0, r2
 800cf16:	d101      	bne.n	800cf1c <memchr+0xc>
 800cf18:	2000      	movs	r0, #0
 800cf1a:	4770      	bx	lr
 800cf1c:	7803      	ldrb	r3, [r0, #0]
 800cf1e:	428b      	cmp	r3, r1
 800cf20:	d0fb      	beq.n	800cf1a <memchr+0xa>
 800cf22:	3001      	adds	r0, #1
 800cf24:	e7f6      	b.n	800cf14 <memchr+0x4>

0800cf26 <memcpy>:
 800cf26:	2300      	movs	r3, #0
 800cf28:	b510      	push	{r4, lr}
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d100      	bne.n	800cf30 <memcpy+0xa>
 800cf2e:	bd10      	pop	{r4, pc}
 800cf30:	5ccc      	ldrb	r4, [r1, r3]
 800cf32:	54c4      	strb	r4, [r0, r3]
 800cf34:	3301      	adds	r3, #1
 800cf36:	e7f8      	b.n	800cf2a <memcpy+0x4>

0800cf38 <memmove>:
 800cf38:	b510      	push	{r4, lr}
 800cf3a:	4288      	cmp	r0, r1
 800cf3c:	d902      	bls.n	800cf44 <memmove+0xc>
 800cf3e:	188b      	adds	r3, r1, r2
 800cf40:	4298      	cmp	r0, r3
 800cf42:	d303      	bcc.n	800cf4c <memmove+0x14>
 800cf44:	2300      	movs	r3, #0
 800cf46:	e007      	b.n	800cf58 <memmove+0x20>
 800cf48:	5c8b      	ldrb	r3, [r1, r2]
 800cf4a:	5483      	strb	r3, [r0, r2]
 800cf4c:	3a01      	subs	r2, #1
 800cf4e:	d2fb      	bcs.n	800cf48 <memmove+0x10>
 800cf50:	bd10      	pop	{r4, pc}
 800cf52:	5ccc      	ldrb	r4, [r1, r3]
 800cf54:	54c4      	strb	r4, [r0, r3]
 800cf56:	3301      	adds	r3, #1
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d1fa      	bne.n	800cf52 <memmove+0x1a>
 800cf5c:	e7f8      	b.n	800cf50 <memmove+0x18>

0800cf5e <_realloc_r>:
 800cf5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf60:	0007      	movs	r7, r0
 800cf62:	000d      	movs	r5, r1
 800cf64:	0016      	movs	r6, r2
 800cf66:	2900      	cmp	r1, #0
 800cf68:	d105      	bne.n	800cf76 <_realloc_r+0x18>
 800cf6a:	0011      	movs	r1, r2
 800cf6c:	f7ff fc4a 	bl	800c804 <_malloc_r>
 800cf70:	0004      	movs	r4, r0
 800cf72:	0020      	movs	r0, r4
 800cf74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf76:	2a00      	cmp	r2, #0
 800cf78:	d103      	bne.n	800cf82 <_realloc_r+0x24>
 800cf7a:	f7ff fbf9 	bl	800c770 <_free_r>
 800cf7e:	0034      	movs	r4, r6
 800cf80:	e7f7      	b.n	800cf72 <_realloc_r+0x14>
 800cf82:	f000 f812 	bl	800cfaa <_malloc_usable_size_r>
 800cf86:	002c      	movs	r4, r5
 800cf88:	42b0      	cmp	r0, r6
 800cf8a:	d2f2      	bcs.n	800cf72 <_realloc_r+0x14>
 800cf8c:	0031      	movs	r1, r6
 800cf8e:	0038      	movs	r0, r7
 800cf90:	f7ff fc38 	bl	800c804 <_malloc_r>
 800cf94:	1e04      	subs	r4, r0, #0
 800cf96:	d0ec      	beq.n	800cf72 <_realloc_r+0x14>
 800cf98:	0029      	movs	r1, r5
 800cf9a:	0032      	movs	r2, r6
 800cf9c:	f7ff ffc3 	bl	800cf26 <memcpy>
 800cfa0:	0029      	movs	r1, r5
 800cfa2:	0038      	movs	r0, r7
 800cfa4:	f7ff fbe4 	bl	800c770 <_free_r>
 800cfa8:	e7e3      	b.n	800cf72 <_realloc_r+0x14>

0800cfaa <_malloc_usable_size_r>:
 800cfaa:	1f0b      	subs	r3, r1, #4
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	1f18      	subs	r0, r3, #4
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	da01      	bge.n	800cfb8 <_malloc_usable_size_r+0xe>
 800cfb4:	580b      	ldr	r3, [r1, r0]
 800cfb6:	18c0      	adds	r0, r0, r3
 800cfb8:	4770      	bx	lr
	...

0800cfbc <_init>:
 800cfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfbe:	46c0      	nop			; (mov r8, r8)
 800cfc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfc2:	bc08      	pop	{r3}
 800cfc4:	469e      	mov	lr, r3
 800cfc6:	4770      	bx	lr

0800cfc8 <_fini>:
 800cfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfca:	46c0      	nop			; (mov r8, r8)
 800cfcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfce:	bc08      	pop	{r3}
 800cfd0:	469e      	mov	lr, r3
 800cfd2:	4770      	bx	lr
