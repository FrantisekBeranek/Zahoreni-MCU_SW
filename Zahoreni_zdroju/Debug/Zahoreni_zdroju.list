
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d790  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  0800d850  0800d850  0001d850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dac0  0800dac0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800dac0  0800dac0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dac0  0800dac0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dac0  0800dac0  0001dac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dac4  0800dac4  0001dac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800dac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000145c  200001e0  0800dca8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000163c  0800dca8  0002163c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bf00  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005159  00000000  00000000  0004c108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  00051268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001590  00000000  00000000  000529e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020725  00000000  00000000  00053f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020b3b  00000000  00000000  00074695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4737  00000000  00000000  000951d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00139907  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005728  00000000  00000000  0013995c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d838 	.word	0x0800d838

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800d838 	.word	0x0800d838

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <comHandler>:
 *
 * Při přijmutí instrukce nedochází k zpracování, ale pouze k nastavení adekvátního flagu.
 * Vykonání instrukce musí být zařízeno v jiné části hlavního programu.
 */
void comHandler(void)
{
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	46c6      	mov	lr, r8
 800041c:	b500      	push	{lr}
 800041e:	b0a4      	sub	sp, #144	; 0x90
 8000420:	af00      	add	r7, sp, #0
	//___Ošetření plného bufferu___//
	if(USB_Rx_Buffer->status == BUFFER_FULL)
 8000422:	4bbd      	ldr	r3, [pc, #756]	; (8000718 <comHandler+0x300>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	7d1b      	ldrb	r3, [r3, #20]
 8000428:	2b02      	cmp	r3, #2
 800042a:	d109      	bne.n	8000440 <comHandler+0x28>
	{
		flags.data_received = 0;
 800042c:	4bbb      	ldr	r3, [pc, #748]	; (800071c <comHandler+0x304>)
 800042e:	7a1a      	ldrb	r2, [r3, #8]
 8000430:	2101      	movs	r1, #1
 8000432:	438a      	bics	r2, r1
 8000434:	721a      	strb	r2, [r3, #8]
		clearBuffer(USB_Rx_Buffer);
 8000436:	4bb8      	ldr	r3, [pc, #736]	; (8000718 <comHandler+0x300>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	0018      	movs	r0, r3
 800043c:	f001 fd60 	bl	8001f00 <clearBuffer>
	}

	//___Příjem dat___//
	if(flags.data_received)
 8000440:	4bb6      	ldr	r3, [pc, #728]	; (800071c <comHandler+0x304>)
 8000442:	7a1b      	ldrb	r3, [r3, #8]
 8000444:	2201      	movs	r2, #1
 8000446:	4013      	ands	r3, r2
 8000448:	b2db      	uxtb	r3, r3
 800044a:	2b00      	cmp	r3, #0
 800044c:	d100      	bne.n	8000450 <comHandler+0x38>
 800044e:	e0d0      	b.n	80005f2 <comHandler+0x1da>
	{
		int start = 0;	//flag o nalezení počátku paketu
 8000450:	2300      	movs	r3, #0
 8000452:	67fb      	str	r3, [r7, #124]	; 0x7c

		for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 8000454:	2300      	movs	r3, #0
 8000456:	2280      	movs	r2, #128	; 0x80
 8000458:	18ba      	adds	r2, r7, r2
 800045a:	6013      	str	r3, [r2, #0]
 800045c:	e04b      	b.n	80004f6 <comHandler+0xde>
		{
			//Přečti znaky na pozici i a i+1
			char tmp1, tmp2;
			at(USB_Rx_Buffer, i, &tmp1);
 800045e:	4bae      	ldr	r3, [pc, #696]	; (8000718 <comHandler+0x300>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	264b      	movs	r6, #75	; 0x4b
 8000464:	2218      	movs	r2, #24
 8000466:	18b9      	adds	r1, r7, r2
 8000468:	198a      	adds	r2, r1, r6
 800046a:	2180      	movs	r1, #128	; 0x80
 800046c:	1878      	adds	r0, r7, r1
 800046e:	6801      	ldr	r1, [r0, #0]
 8000470:	0018      	movs	r0, r3
 8000472:	f001 fded 	bl	8002050 <at>
			at(USB_Rx_Buffer, i+1, &tmp2);
 8000476:	4ba8      	ldr	r3, [pc, #672]	; (8000718 <comHandler+0x300>)
 8000478:	6818      	ldr	r0, [r3, #0]
 800047a:	2380      	movs	r3, #128	; 0x80
 800047c:	18fb      	adds	r3, r7, r3
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	3301      	adds	r3, #1
 8000482:	224a      	movs	r2, #74	; 0x4a
 8000484:	2118      	movs	r1, #24
 8000486:	468c      	mov	ip, r1
 8000488:	44bc      	add	ip, r7
 800048a:	4462      	add	r2, ip
 800048c:	0019      	movs	r1, r3
 800048e:	f001 fddf 	bl	8002050 <at>

			if(tmp1 == '>' && tmp1 == '>')	//začátek paketu
 8000492:	2218      	movs	r2, #24
 8000494:	18bb      	adds	r3, r7, r2
 8000496:	199b      	adds	r3, r3, r6
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b3e      	cmp	r3, #62	; 0x3e
 800049c:	d125      	bne.n	80004ea <comHandler+0xd2>
 800049e:	18bb      	adds	r3, r7, r2
 80004a0:	199b      	adds	r3, r3, r6
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b3e      	cmp	r3, #62	; 0x3e
 80004a6:	d120      	bne.n	80004ea <comHandler+0xd2>
			{
				for(int y = 0; y < i; y++)	//vymazání obsahu buuferu před začátkem paketu (neplatná data)
 80004a8:	2300      	movs	r3, #0
 80004aa:	2284      	movs	r2, #132	; 0x84
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	6013      	str	r3, [r2, #0]
 80004b0:	e010      	b.n	80004d4 <comHandler+0xbc>
				{
					char tmp;
					pop(USB_Rx_Buffer, &tmp);
 80004b2:	4b99      	ldr	r3, [pc, #612]	; (8000718 <comHandler+0x300>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2249      	movs	r2, #73	; 0x49
 80004b8:	2118      	movs	r1, #24
 80004ba:	468c      	mov	ip, r1
 80004bc:	44bc      	add	ip, r7
 80004be:	4462      	add	r2, ip
 80004c0:	0011      	movs	r1, r2
 80004c2:	0018      	movs	r0, r3
 80004c4:	f001 fd91 	bl	8001fea <pop>
				for(int y = 0; y < i; y++)	//vymazání obsahu buuferu před začátkem paketu (neplatná data)
 80004c8:	2284      	movs	r2, #132	; 0x84
 80004ca:	18bb      	adds	r3, r7, r2
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	3301      	adds	r3, #1
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	6013      	str	r3, [r2, #0]
 80004d4:	2384      	movs	r3, #132	; 0x84
 80004d6:	18fb      	adds	r3, r7, r3
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	2380      	movs	r3, #128	; 0x80
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	dbe6      	blt.n	80004b2 <comHandler+0x9a>
				}
				start = 1;	//nastav flag o nalezení počátku
 80004e4:	2301      	movs	r3, #1
 80004e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80004e8:	e00d      	b.n	8000506 <comHandler+0xee>
		for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	18bb      	adds	r3, r7, r2
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	3301      	adds	r3, #1
 80004f2:	18ba      	adds	r2, r7, r2
 80004f4:	6013      	str	r3, [r2, #0]
 80004f6:	4b88      	ldr	r3, [pc, #544]	; (8000718 <comHandler+0x300>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	2280      	movs	r2, #128	; 0x80
 80004fe:	18ba      	adds	r2, r7, r2
 8000500:	6812      	ldr	r2, [r2, #0]
 8000502:	429a      	cmp	r2, r3
 8000504:	dbab      	blt.n	800045e <comHandler+0x46>
				break;
			}
		}

		if(start)	//počátek byl nalezen
 8000506:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000508:	2b00      	cmp	r3, #0
 800050a:	d06d      	beq.n	80005e8 <comHandler+0x1d0>
		{
			for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 800050c:	2300      	movs	r3, #0
 800050e:	2288      	movs	r2, #136	; 0x88
 8000510:	18ba      	adds	r2, r7, r2
 8000512:	6013      	str	r3, [r2, #0]
 8000514:	e060      	b.n	80005d8 <comHandler+0x1c0>
			{
				//Přečti znaky na pozici i a i+1
				char tmp1, tmp2;
				at(USB_Rx_Buffer, i, &tmp1);
 8000516:	4b80      	ldr	r3, [pc, #512]	; (8000718 <comHandler+0x300>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2648      	movs	r6, #72	; 0x48
 800051c:	2218      	movs	r2, #24
 800051e:	18b9      	adds	r1, r7, r2
 8000520:	198a      	adds	r2, r1, r6
 8000522:	2188      	movs	r1, #136	; 0x88
 8000524:	1878      	adds	r0, r7, r1
 8000526:	6801      	ldr	r1, [r0, #0]
 8000528:	0018      	movs	r0, r3
 800052a:	f001 fd91 	bl	8002050 <at>
				at(USB_Rx_Buffer, i+1, &tmp2);
 800052e:	4b7a      	ldr	r3, [pc, #488]	; (8000718 <comHandler+0x300>)
 8000530:	6818      	ldr	r0, [r3, #0]
 8000532:	2388      	movs	r3, #136	; 0x88
 8000534:	18f9      	adds	r1, r7, r3
 8000536:	680b      	ldr	r3, [r1, #0]
 8000538:	3301      	adds	r3, #1
 800053a:	2247      	movs	r2, #71	; 0x47
 800053c:	2118      	movs	r1, #24
 800053e:	468c      	mov	ip, r1
 8000540:	44bc      	add	ip, r7
 8000542:	4462      	add	r2, ip
 8000544:	0019      	movs	r1, r3
 8000546:	f001 fd83 	bl	8002050 <at>

				if(tmp1 == '<' && tmp1 == '<')	//konec paketu
 800054a:	2218      	movs	r2, #24
 800054c:	18b9      	adds	r1, r7, r2
 800054e:	198b      	adds	r3, r1, r6
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	2b3c      	cmp	r3, #60	; 0x3c
 8000554:	d13a      	bne.n	80005cc <comHandler+0x1b4>
 8000556:	18ba      	adds	r2, r7, r2
 8000558:	1993      	adds	r3, r2, r6
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b3c      	cmp	r3, #60	; 0x3c
 800055e:	d135      	bne.n	80005cc <comHandler+0x1b4>
				{
					uint8_t* tmp = (uint8_t*)malloc((i+2)*sizeof(uint8_t));
 8000560:	2388      	movs	r3, #136	; 0x88
 8000562:	18fb      	adds	r3, r7, r3
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	3302      	adds	r3, #2
 8000568:	0018      	movs	r0, r3
 800056a:	f00c fd23 	bl	800cfb4 <malloc>
 800056e:	0003      	movs	r3, r0
 8000570:	677b      	str	r3, [r7, #116]	; 0x74
					for(int y = 0; y < i+2; y++)	//překopírování zprávy
 8000572:	2300      	movs	r3, #0
 8000574:	228c      	movs	r2, #140	; 0x8c
 8000576:	18ba      	adds	r2, r7, r2
 8000578:	6013      	str	r3, [r2, #0]
 800057a:	e00f      	b.n	800059c <comHandler+0x184>
					{
						pop(USB_Rx_Buffer, &tmp[y]);
 800057c:	4b66      	ldr	r3, [pc, #408]	; (8000718 <comHandler+0x300>)
 800057e:	6818      	ldr	r0, [r3, #0]
 8000580:	268c      	movs	r6, #140	; 0x8c
 8000582:	19bb      	adds	r3, r7, r6
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000588:	18d3      	adds	r3, r2, r3
 800058a:	0019      	movs	r1, r3
 800058c:	f001 fd2d 	bl	8001fea <pop>
					for(int y = 0; y < i+2; y++)	//překopírování zprávy
 8000590:	0032      	movs	r2, r6
 8000592:	18bb      	adds	r3, r7, r2
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	3301      	adds	r3, #1
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	2188      	movs	r1, #136	; 0x88
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	3301      	adds	r3, #1
 80005a4:	228c      	movs	r2, #140	; 0x8c
 80005a6:	18ba      	adds	r2, r7, r2
 80005a8:	6812      	ldr	r2, [r2, #0]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	dde6      	ble.n	800057c <comHandler+0x164>
					}

					decodePaket(tmp, i+2);
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	3302      	adds	r3, #2
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005ba:	0011      	movs	r1, r2
 80005bc:	0018      	movs	r0, r3
 80005be:	f000 fa8d 	bl	8000adc <decodePaket>
					free(tmp);
 80005c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80005c4:	0018      	movs	r0, r3
 80005c6:	f00c fcff 	bl	800cfc8 <free>
					break;
 80005ca:	e00d      	b.n	80005e8 <comHandler+0x1d0>
			for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 80005cc:	2288      	movs	r2, #136	; 0x88
 80005ce:	18bb      	adds	r3, r7, r2
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	3301      	adds	r3, #1
 80005d4:	18ba      	adds	r2, r7, r2
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b4f      	ldr	r3, [pc, #316]	; (8000718 <comHandler+0x300>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	2288      	movs	r2, #136	; 0x88
 80005e0:	18ba      	adds	r2, r7, r2
 80005e2:	6812      	ldr	r2, [r2, #0]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	db96      	blt.n	8000516 <comHandler+0xfe>
				}
			}
		}

		flags.data_received = 0;
 80005e8:	4b4c      	ldr	r3, [pc, #304]	; (800071c <comHandler+0x304>)
 80005ea:	7a1a      	ldrb	r2, [r3, #8]
 80005ec:	2101      	movs	r1, #1
 80005ee:	438a      	bics	r2, r1
 80005f0:	721a      	strb	r2, [r3, #8]
	}

	if(flags.testProgress)	//Pokud test pokročil...
 80005f2:	4b4a      	ldr	r3, [pc, #296]	; (800071c <comHandler+0x304>)
 80005f4:	7e1b      	ldrb	r3, [r3, #24]
 80005f6:	2202      	movs	r2, #2
 80005f8:	4013      	ands	r3, r2
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d055      	beq.n	80006ac <comHandler+0x294>
	{
		//...zjisti v jaké je fázi...
		char testPhaseChr;
		switch(currentPhase())
 8000600:	f002 f83c 	bl	800267c <currentPhase>
 8000604:	0003      	movs	r3, r0
 8000606:	2b06      	cmp	r3, #6
 8000608:	d834      	bhi.n	8000674 <comHandler+0x25c>
 800060a:	009a      	lsls	r2, r3, #2
 800060c:	4b44      	ldr	r3, [pc, #272]	; (8000720 <comHandler+0x308>)
 800060e:	18d3      	adds	r3, r2, r3
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	469f      	mov	pc, r3
		{
		case START:
			testPhaseChr = 's';
 8000614:	2346      	movs	r3, #70	; 0x46
 8000616:	2218      	movs	r2, #24
 8000618:	4694      	mov	ip, r2
 800061a:	44bc      	add	ip, r7
 800061c:	4463      	add	r3, ip
 800061e:	2273      	movs	r2, #115	; 0x73
 8000620:	701a      	strb	r2, [r3, #0]
			break;
 8000622:	e02f      	b.n	8000684 <comHandler+0x26c>
		case START_DONE:
			testPhaseChr = 's';
 8000624:	2346      	movs	r3, #70	; 0x46
 8000626:	2218      	movs	r2, #24
 8000628:	4694      	mov	ip, r2
 800062a:	44bc      	add	ip, r7
 800062c:	4463      	add	r3, ip
 800062e:	2273      	movs	r2, #115	; 0x73
 8000630:	701a      	strb	r2, [r3, #0]
			break;
 8000632:	e027      	b.n	8000684 <comHandler+0x26c>
		case MAIN_TEST:
			testPhaseChr = 'm';
 8000634:	2346      	movs	r3, #70	; 0x46
 8000636:	2218      	movs	r2, #24
 8000638:	4694      	mov	ip, r2
 800063a:	44bc      	add	ip, r7
 800063c:	4463      	add	r3, ip
 800063e:	226d      	movs	r2, #109	; 0x6d
 8000640:	701a      	strb	r2, [r3, #0]
			break;
 8000642:	e01f      	b.n	8000684 <comHandler+0x26c>
		case MAIN_TEST_DONE:
			testPhaseChr = 'm';
 8000644:	2346      	movs	r3, #70	; 0x46
 8000646:	2218      	movs	r2, #24
 8000648:	4694      	mov	ip, r2
 800064a:	44bc      	add	ip, r7
 800064c:	4463      	add	r3, ip
 800064e:	226d      	movs	r2, #109	; 0x6d
 8000650:	701a      	strb	r2, [r3, #0]
			break;
 8000652:	e017      	b.n	8000684 <comHandler+0x26c>
		case BATTERY_TEST:
			testPhaseChr = 'b';
 8000654:	2346      	movs	r3, #70	; 0x46
 8000656:	2218      	movs	r2, #24
 8000658:	4694      	mov	ip, r2
 800065a:	44bc      	add	ip, r7
 800065c:	4463      	add	r3, ip
 800065e:	2262      	movs	r2, #98	; 0x62
 8000660:	701a      	strb	r2, [r3, #0]
			break;
 8000662:	e00f      	b.n	8000684 <comHandler+0x26c>
		case BATTERY_TEST_DONE:
			testPhaseChr = 'M';
 8000664:	2346      	movs	r3, #70	; 0x46
 8000666:	2218      	movs	r2, #24
 8000668:	4694      	mov	ip, r2
 800066a:	44bc      	add	ip, r7
 800066c:	4463      	add	r3, ip
 800066e:	224d      	movs	r2, #77	; 0x4d
 8000670:	701a      	strb	r2, [r3, #0]
			break;
 8000672:	e007      	b.n	8000684 <comHandler+0x26c>
		default:
			testPhaseChr = 'e';
 8000674:	2346      	movs	r3, #70	; 0x46
 8000676:	2218      	movs	r2, #24
 8000678:	4694      	mov	ip, r2
 800067a:	44bc      	add	ip, r7
 800067c:	4463      	add	r3, ip
 800067e:	2265      	movs	r2, #101	; 0x65
 8000680:	701a      	strb	r2, [r3, #0]
			break;
 8000682:	46c0      	nop			; (mov r8, r8)
		}

		//...a upozorni na to PC
		Paket paket;
		fillPaket(&paket, TEST_PHASE_PAKET, &testPhaseChr, 1);
 8000684:	2346      	movs	r3, #70	; 0x46
 8000686:	2118      	movs	r1, #24
 8000688:	187a      	adds	r2, r7, r1
 800068a:	18d2      	adds	r2, r2, r3
 800068c:	2638      	movs	r6, #56	; 0x38
 800068e:	187b      	adds	r3, r7, r1
 8000690:	1998      	adds	r0, r3, r6
 8000692:	2301      	movs	r3, #1
 8000694:	2104      	movs	r1, #4
 8000696:	f000 f925 	bl	80008e4 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 800069a:	4b22      	ldr	r3, [pc, #136]	; (8000724 <comHandler+0x30c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2118      	movs	r1, #24
 80006a0:	187a      	adds	r2, r7, r1
 80006a2:	1992      	adds	r2, r2, r6
 80006a4:	0011      	movs	r1, r2
 80006a6:	0018      	movs	r0, r3
 80006a8:	f000 f95c 	bl	8000964 <pushPaket>
	}

	if(flags.meas.measComplete)	//Jsou připravena data k odeslání
 80006ac:	4b1b      	ldr	r3, [pc, #108]	; (800071c <comHandler+0x304>)
 80006ae:	7d1b      	ldrb	r3, [r3, #20]
 80006b0:	2202      	movs	r2, #2
 80006b2:	4013      	ands	r3, r2
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d051      	beq.n	800075e <comHandler+0x346>
	{
		if(!flags.meas.calibMeas)
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <comHandler+0x304>)
 80006bc:	7d1b      	ldrb	r3, [r3, #20]
 80006be:	2240      	movs	r2, #64	; 0x40
 80006c0:	4013      	ands	r3, r2
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d117      	bne.n	80006f8 <comHandler+0x2e0>
		{
			//Nejde o kalibrační data -> pošli číslo dat
			Paket paket;
			fillPaket(&paket, TEST_NUM_PAKET, &testNum, 1);
 80006c8:	4a17      	ldr	r2, [pc, #92]	; (8000728 <comHandler+0x310>)
 80006ca:	2620      	movs	r6, #32
 80006cc:	2318      	movs	r3, #24
 80006ce:	18f9      	adds	r1, r7, r3
 80006d0:	1988      	adds	r0, r1, r6
 80006d2:	2301      	movs	r3, #1
 80006d4:	2103      	movs	r1, #3
 80006d6:	f000 f905 	bl	80008e4 <fillPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <comHandler+0x30c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	2218      	movs	r2, #24
 80006e0:	18ba      	adds	r2, r7, r2
 80006e2:	1992      	adds	r2, r2, r6
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 f93c 	bl	8000964 <pushPaket>
			testNum++;
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <comHandler+0x310>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	1c5a      	adds	r2, r3, #1
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <comHandler+0x310>)
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	e004      	b.n	8000702 <comHandler+0x2ea>
		}
		else
		{
			flags.meas.calibMeas = 0;
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <comHandler+0x304>)
 80006fa:	7d1a      	ldrb	r2, [r3, #20]
 80006fc:	2140      	movs	r1, #64	; 0x40
 80006fe:	438a      	bics	r2, r1
 8000700:	751a      	strb	r2, [r3, #20]
		}

		//___Připrav a odešli paket___//
		makeByteArray();
 8000702:	f000 f8c3 	bl	800088c <makeByteArray>
		Paket paket;
		outPaketType type = (flags.meas.onlyBattery)? DATA_BAT_PAKET : DATA_PAKET;
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <comHandler+0x304>)
 8000708:	7d1b      	ldrb	r3, [r3, #20]
 800070a:	2220      	movs	r2, #32
 800070c:	4013      	ands	r3, r2
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d00b      	beq.n	800072c <comHandler+0x314>
 8000714:	2202      	movs	r2, #2
 8000716:	e00a      	b.n	800072e <comHandler+0x316>
 8000718:	20001134 	.word	0x20001134
 800071c:	20000630 	.word	0x20000630
 8000720:	0800d8f4 	.word	0x0800d8f4
 8000724:	20000490 	.word	0x20000490
 8000728:	20000260 	.word	0x20000260
 800072c:	2201      	movs	r2, #1
 800072e:	215b      	movs	r1, #91	; 0x5b
 8000730:	2018      	movs	r0, #24
 8000732:	183b      	adds	r3, r7, r0
 8000734:	185b      	adds	r3, r3, r1
 8000736:	701a      	strb	r2, [r3, #0]
		fillPaket(&paket, type, data, 14);
 8000738:	4a50      	ldr	r2, [pc, #320]	; (800087c <comHandler+0x464>)
 800073a:	183b      	adds	r3, r7, r0
 800073c:	185b      	adds	r3, r3, r1
 800073e:	7819      	ldrb	r1, [r3, #0]
 8000740:	262c      	movs	r6, #44	; 0x2c
 8000742:	183b      	adds	r3, r7, r0
 8000744:	1998      	adds	r0, r3, r6
 8000746:	230e      	movs	r3, #14
 8000748:	f000 f8cc 	bl	80008e4 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 800074c:	4b4c      	ldr	r3, [pc, #304]	; (8000880 <comHandler+0x468>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2018      	movs	r0, #24
 8000752:	183a      	adds	r2, r7, r0
 8000754:	1992      	adds	r2, r2, r6
 8000756:	0011      	movs	r1, r2
 8000758:	0018      	movs	r0, r3
 800075a:	f000 f903 	bl	8000964 <pushPaket>
	}

#ifdef __APP_COMPATIBILITY__
	//___Odesílání refresh zprávy___//
	if(flags.time.sec)
 800075e:	4b49      	ldr	r3, [pc, #292]	; (8000884 <comHandler+0x46c>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2202      	movs	r2, #2
 8000764:	4013      	ands	r3, r2
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	d011      	beq.n	8000790 <comHandler+0x378>
	{
		Paket paket;
		fillPaket(&paket, REFRESH_PAKET, NULL, 0);
 800076c:	2614      	movs	r6, #20
 800076e:	2218      	movs	r2, #24
 8000770:	18bb      	adds	r3, r7, r2
 8000772:	1998      	adds	r0, r3, r6
 8000774:	2300      	movs	r3, #0
 8000776:	2200      	movs	r2, #0
 8000778:	2106      	movs	r1, #6
 800077a:	f000 f8b3 	bl	80008e4 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 800077e:	4b40      	ldr	r3, [pc, #256]	; (8000880 <comHandler+0x468>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2218      	movs	r2, #24
 8000784:	18ba      	adds	r2, r7, r2
 8000786:	1992      	adds	r2, r2, r6
 8000788:	0011      	movs	r1, r2
 800078a:	0018      	movs	r0, r3
 800078c:	f000 f8ea 	bl	8000964 <pushPaket>
	}
#endif

	//___Odesílání dat___//
	//_Ošetření plného bufferu_//
	if(USB_Tx_Buffer->status == BUFFER_FULL)
 8000790:	4b3b      	ldr	r3, [pc, #236]	; (8000880 <comHandler+0x468>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	7d1b      	ldrb	r3, [r3, #20]
 8000796:	2b02      	cmp	r3, #2
 8000798:	d11b      	bne.n	80007d2 <comHandler+0x3ba>
	{
		flags.ui.shortBeep = 1;
 800079a:	4b3a      	ldr	r3, [pc, #232]	; (8000884 <comHandler+0x46c>)
 800079c:	7c1a      	ldrb	r2, [r3, #16]
 800079e:	2101      	movs	r1, #1
 80007a0:	430a      	orrs	r2, r1
 80007a2:	741a      	strb	r2, [r3, #16]
		char msg[] = {"Buffer full\n"};
 80007a4:	261c      	movs	r6, #28
 80007a6:	19bb      	adds	r3, r7, r6
 80007a8:	4a37      	ldr	r2, [pc, #220]	; (8000888 <comHandler+0x470>)
 80007aa:	ca43      	ldmia	r2!, {r0, r1, r6}
 80007ac:	c343      	stmia	r3!, {r0, r1, r6}
 80007ae:	7812      	ldrb	r2, [r2, #0]
 80007b0:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(msg, strlen(msg));
 80007b2:	261c      	movs	r6, #28
 80007b4:	19bb      	adds	r3, r7, r6
 80007b6:	0018      	movs	r0, r3
 80007b8:	f7ff fca6 	bl	8000108 <strlen>
 80007bc:	0002      	movs	r2, r0
 80007be:	19bb      	adds	r3, r7, r6
 80007c0:	0011      	movs	r1, r2
 80007c2:	0018      	movs	r0, r3
 80007c4:	f00b ff10 	bl	800c5e8 <CDC_Transmit_FS>
		clearBuffer(USB_Tx_Buffer);
 80007c8:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <comHandler+0x468>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	0018      	movs	r0, r3
 80007ce:	f001 fb97 	bl	8001f00 <clearBuffer>
	}
	//_Samotné odesílání_//
	if(USB_Tx_Buffer->filled)
 80007d2:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <comHandler+0x468>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d048      	beq.n	800086e <comHandler+0x456>
	{
 80007dc:	466b      	mov	r3, sp
 80007de:	4698      	mov	r8, r3
		int size = USB_Tx_Buffer->filled;
 80007e0:	4b27      	ldr	r3, [pc, #156]	; (8000880 <comHandler+0x468>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	689b      	ldr	r3, [r3, #8]
 80007e6:	66fb      	str	r3, [r7, #108]	; 0x6c
		char tmpStr[size];
 80007e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007ea:	1e5a      	subs	r2, r3, #1
 80007ec:	66ba      	str	r2, [r7, #104]	; 0x68
 80007ee:	001a      	movs	r2, r3
 80007f0:	60ba      	str	r2, [r7, #8]
 80007f2:	2200      	movs	r2, #0
 80007f4:	60fa      	str	r2, [r7, #12]
 80007f6:	68b8      	ldr	r0, [r7, #8]
 80007f8:	68f9      	ldr	r1, [r7, #12]
 80007fa:	0002      	movs	r2, r0
 80007fc:	0f52      	lsrs	r2, r2, #29
 80007fe:	000e      	movs	r6, r1
 8000800:	00f6      	lsls	r6, r6, #3
 8000802:	617e      	str	r6, [r7, #20]
 8000804:	697e      	ldr	r6, [r7, #20]
 8000806:	4316      	orrs	r6, r2
 8000808:	617e      	str	r6, [r7, #20]
 800080a:	0002      	movs	r2, r0
 800080c:	00d2      	lsls	r2, r2, #3
 800080e:	613a      	str	r2, [r7, #16]
 8000810:	001a      	movs	r2, r3
 8000812:	603a      	str	r2, [r7, #0]
 8000814:	2200      	movs	r2, #0
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	6838      	ldr	r0, [r7, #0]
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	0002      	movs	r2, r0
 800081e:	0f52      	lsrs	r2, r2, #29
 8000820:	000e      	movs	r6, r1
 8000822:	00f5      	lsls	r5, r6, #3
 8000824:	4315      	orrs	r5, r2
 8000826:	0002      	movs	r2, r0
 8000828:	00d4      	lsls	r4, r2, #3
 800082a:	3307      	adds	r3, #7
 800082c:	08db      	lsrs	r3, r3, #3
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	466a      	mov	r2, sp
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	469d      	mov	sp, r3
 8000836:	466b      	mov	r3, sp
 8000838:	3300      	adds	r3, #0
 800083a:	667b      	str	r3, [r7, #100]	; 0x64
		for(int i = 0; i < size; i++)
 800083c:	2300      	movs	r3, #0
 800083e:	67bb      	str	r3, [r7, #120]	; 0x78
 8000840:	e00a      	b.n	8000858 <comHandler+0x440>
		{
			pop(USB_Tx_Buffer, &tmpStr[i]);
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <comHandler+0x468>)
 8000844:	6818      	ldr	r0, [r3, #0]
 8000846:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000848:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800084a:	18d3      	adds	r3, r2, r3
 800084c:	0019      	movs	r1, r3
 800084e:	f001 fbcc 	bl	8001fea <pop>
		for(int i = 0; i < size; i++)
 8000852:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000854:	3301      	adds	r3, #1
 8000856:	67bb      	str	r3, [r7, #120]	; 0x78
 8000858:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800085a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800085c:	429a      	cmp	r2, r3
 800085e:	dbf0      	blt.n	8000842 <comHandler+0x42a>
		}
		CDC_Transmit_FS(tmpStr, size);
 8000860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000862:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000864:	0011      	movs	r1, r2
 8000866:	0018      	movs	r0, r3
 8000868:	f00b febe 	bl	800c5e8 <CDC_Transmit_FS>
 800086c:	46c5      	mov	sp, r8
	}

}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b024      	add	sp, #144	; 0x90
 8000874:	bc80      	pop	{r7}
 8000876:	46b8      	mov	r8, r7
 8000878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	20000494 	.word	0x20000494
 8000880:	20000490 	.word	0x20000490
 8000884:	20000630 	.word	0x20000630
 8000888:	0800d850 	.word	0x0800d850

0800088c <makeByteArray>:

//_____Zpracuje ADC_Results do pole data_____//
static void makeByteArray()
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
	for(int i = 0; i < 7; i++)
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	e018      	b.n	80008ca <makeByteArray+0x3e>
	{
		data[2*i] = MaskByte(ADC_Results[2*i], 1);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	005a      	lsls	r2, r3, #1
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <makeByteArray+0x50>)
 800089e:	0092      	lsls	r2, r2, #2
 80008a0:	58d3      	ldr	r3, [r2, r3]
 80008a2:	0a1a      	lsrs	r2, r3, #8
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	b2d1      	uxtb	r1, r2
 80008aa:	4a0d      	ldr	r2, [pc, #52]	; (80008e0 <makeByteArray+0x54>)
 80008ac:	54d1      	strb	r1, [r2, r3]
		data[2*i+1] = MaskByte(ADC_Results[2*i], 0);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	005a      	lsls	r2, r3, #1
 80008b2:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <makeByteArray+0x50>)
 80008b4:	0092      	lsls	r2, r2, #2
 80008b6:	58d2      	ldr	r2, [r2, r3]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	3301      	adds	r3, #1
 80008be:	b2d1      	uxtb	r1, r2
 80008c0:	4a07      	ldr	r2, [pc, #28]	; (80008e0 <makeByteArray+0x54>)
 80008c2:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 7; i++)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3301      	adds	r3, #1
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2b06      	cmp	r3, #6
 80008ce:	dde3      	ble.n	8000898 <makeByteArray+0xc>
	}
}
 80008d0:	46c0      	nop			; (mov r8, r8)
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b002      	add	sp, #8
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	200001fc 	.word	0x200001fc
 80008e0:	20000494 	.word	0x20000494

080008e4 <fillPaket>:

//_____Vytvoří strukturu Paket z dat v argumentech_____//
static void fillPaket(Paket* paket, outPaketType type, uint8_t* data, uint8_t dataLength)
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b087      	sub	sp, #28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	0008      	movs	r0, r1
 80008ee:	607a      	str	r2, [r7, #4]
 80008f0:	0019      	movs	r1, r3
 80008f2:	240b      	movs	r4, #11
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	1c02      	adds	r2, r0, #0
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	200a      	movs	r0, #10
 80008fc:	183b      	adds	r3, r7, r0
 80008fe:	1c0a      	adds	r2, r1, #0
 8000900:	701a      	strb	r2, [r3, #0]
	paket->type = type;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	0021      	movs	r1, r4
 8000906:	187a      	adds	r2, r7, r1
 8000908:	7812      	ldrb	r2, [r2, #0]
 800090a:	701a      	strb	r2, [r3, #0]
	paket->data = data;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	605a      	str	r2, [r3, #4]
	paket->dataLength = dataLength;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	183a      	adds	r2, r7, r0
 8000916:	7812      	ldrb	r2, [r2, #0]
 8000918:	721a      	strb	r2, [r3, #8]
	uint8_t CA = type;
 800091a:	2317      	movs	r3, #23
 800091c:	18fb      	adds	r3, r7, r3
 800091e:	187a      	adds	r2, r7, r1
 8000920:	7812      	ldrb	r2, [r2, #0]
 8000922:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataLength; i++)
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	e00c      	b.n	8000944 <fillPaket+0x60>
		CA += data[i];
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	18d3      	adds	r3, r2, r3
 8000930:	7819      	ldrb	r1, [r3, #0]
 8000932:	2217      	movs	r2, #23
 8000934:	18bb      	adds	r3, r7, r2
 8000936:	18ba      	adds	r2, r7, r2
 8000938:	7812      	ldrb	r2, [r2, #0]
 800093a:	188a      	adds	r2, r1, r2
 800093c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataLength; i++)
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	3301      	adds	r3, #1
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	230a      	movs	r3, #10
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	429a      	cmp	r2, r3
 800094e:	dbec      	blt.n	800092a <fillPaket+0x46>
	paket->CA_value = CA;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	2217      	movs	r2, #23
 8000954:	18ba      	adds	r2, r7, r2
 8000956:	7812      	ldrb	r2, [r2, #0]
 8000958:	725a      	strb	r2, [r3, #9]
}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b007      	add	sp, #28
 8000960:	bd90      	pop	{r4, r7, pc}
	...

08000964 <pushPaket>:

//_____Vloží do bufferu řetězec odpovídající sestavenému paketu_____//
static void pushPaket(RING_BUFFER* buffer, Paket* paket)
{
 8000964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000966:	46c6      	mov	lr, r8
 8000968:	b500      	push	{lr}
 800096a:	b096      	sub	sp, #88	; 0x58
 800096c:	af00      	add	r7, sp, #0
 800096e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000970:	63b9      	str	r1, [r7, #56]	; 0x38
 8000972:	466b      	mov	r3, sp
 8000974:	4698      	mov	r8, r3
	uint8_t msg[paket->dataLength + 2];
 8000976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000978:	7a1b      	ldrb	r3, [r3, #8]
 800097a:	1c9a      	adds	r2, r3, #2
 800097c:	1e53      	subs	r3, r2, #1
 800097e:	657b      	str	r3, [r7, #84]	; 0x54
 8000980:	0013      	movs	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
 8000988:	69b8      	ldr	r0, [r7, #24]
 800098a:	69f9      	ldr	r1, [r7, #28]
 800098c:	0003      	movs	r3, r0
 800098e:	0f5b      	lsrs	r3, r3, #29
 8000990:	000e      	movs	r6, r1
 8000992:	00f5      	lsls	r5, r6, #3
 8000994:	431d      	orrs	r5, r3
 8000996:	0003      	movs	r3, r0
 8000998:	00dc      	lsls	r4, r3, #3
 800099a:	0013      	movs	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
 80009a2:	6938      	ldr	r0, [r7, #16]
 80009a4:	6979      	ldr	r1, [r7, #20]
 80009a6:	0003      	movs	r3, r0
 80009a8:	0f5b      	lsrs	r3, r3, #29
 80009aa:	000c      	movs	r4, r1
 80009ac:	00e4      	lsls	r4, r4, #3
 80009ae:	637c      	str	r4, [r7, #52]	; 0x34
 80009b0:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80009b2:	431c      	orrs	r4, r3
 80009b4:	637c      	str	r4, [r7, #52]	; 0x34
 80009b6:	0003      	movs	r3, r0
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	633b      	str	r3, [r7, #48]	; 0x30
 80009bc:	0013      	movs	r3, r2
 80009be:	3307      	adds	r3, #7
 80009c0:	08db      	lsrs	r3, r3, #3
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	466a      	mov	r2, sp
 80009c6:	1ad3      	subs	r3, r2, r3
 80009c8:	469d      	mov	sp, r3
 80009ca:	466b      	mov	r3, sp
 80009cc:	3300      	adds	r3, #0
 80009ce:	653b      	str	r3, [r7, #80]	; 0x50
	msg[0] = paket->type;
 80009d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009d2:	781a      	ldrb	r2, [r3, #0]
 80009d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009d6:	701a      	strb	r2, [r3, #0]
	memcpy(msg+1, paket->data, paket->dataLength);
 80009d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009da:	1c58      	adds	r0, r3, #1
 80009dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009de:	6859      	ldr	r1, [r3, #4]
 80009e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009e2:	7a1b      	ldrb	r3, [r3, #8]
 80009e4:	001a      	movs	r2, r3
 80009e6:	f00c faf9 	bl	800cfdc <memcpy>
	msg[paket->dataLength+1] = paket->CA_value;
 80009ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009ec:	7a1b      	ldrb	r3, [r3, #8]
 80009ee:	3301      	adds	r3, #1
 80009f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80009f2:	7a51      	ldrb	r1, [r2, #9]
 80009f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80009f6:	54d1      	strb	r1, [r2, r3]
	//msg[paket->dataLength+2] = 0U;

	uint8_t str[] = {">>"};
 80009f8:	200c      	movs	r0, #12
 80009fa:	2638      	movs	r6, #56	; 0x38
 80009fc:	19bb      	adds	r3, r7, r6
 80009fe:	181b      	adds	r3, r3, r0
 8000a00:	4a34      	ldr	r2, [pc, #208]	; (8000ad4 <pushPaket+0x170>)
 8000a02:	8811      	ldrh	r1, [r2, #0]
 8000a04:	8019      	strh	r1, [r3, #0]
 8000a06:	7892      	ldrb	r2, [r2, #2]
 8000a08:	709a      	strb	r2, [r3, #2]
	uint8_t end[] = {"<<\n"};
 8000a0a:	2508      	movs	r5, #8
 8000a0c:	19bb      	adds	r3, r7, r6
 8000a0e:	195b      	adds	r3, r3, r5
 8000a10:	4a31      	ldr	r2, [pc, #196]	; (8000ad8 <pushPaket+0x174>)
 8000a12:	601a      	str	r2, [r3, #0]

	uint8_t toSend[6+paket->dataLength + 2];
 8000a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a16:	7a1b      	ldrb	r3, [r3, #8]
 8000a18:	3308      	adds	r3, #8
 8000a1a:	001c      	movs	r4, r3
 8000a1c:	1e63      	subs	r3, r4, #1
 8000a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a20:	0023      	movs	r3, r4
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68b9      	ldr	r1, [r7, #8]
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	000b      	movs	r3, r1
 8000a2e:	0f5b      	lsrs	r3, r3, #29
 8000a30:	0016      	movs	r6, r2
 8000a32:	00f6      	lsls	r6, r6, #3
 8000a34:	62fe      	str	r6, [r7, #44]	; 0x2c
 8000a36:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8000a38:	431e      	orrs	r6, r3
 8000a3a:	62fe      	str	r6, [r7, #44]	; 0x2c
 8000a3c:	000b      	movs	r3, r1
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a42:	0023      	movs	r3, r4
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	6839      	ldr	r1, [r7, #0]
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	000b      	movs	r3, r1
 8000a50:	0f5b      	lsrs	r3, r3, #29
 8000a52:	0016      	movs	r6, r2
 8000a54:	00f6      	lsls	r6, r6, #3
 8000a56:	627e      	str	r6, [r7, #36]	; 0x24
 8000a58:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8000a5a:	431e      	orrs	r6, r3
 8000a5c:	627e      	str	r6, [r7, #36]	; 0x24
 8000a5e:	000b      	movs	r3, r1
 8000a60:	00db      	lsls	r3, r3, #3
 8000a62:	623b      	str	r3, [r7, #32]
 8000a64:	0023      	movs	r3, r4
 8000a66:	3307      	adds	r3, #7
 8000a68:	08db      	lsrs	r3, r3, #3
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	466a      	mov	r2, sp
 8000a6e:	1ad3      	subs	r3, r2, r3
 8000a70:	469d      	mov	sp, r3
 8000a72:	466b      	mov	r3, sp
 8000a74:	3300      	adds	r3, #0
 8000a76:	64bb      	str	r3, [r7, #72]	; 0x48
	//sprintf(toSend, "%s%s%s\n", str, msg, end);	//pro testNum = 0 se vytiskne jen paket->type, jelikož sprintf pak narazí na nulu
	memcpy(toSend, str, 2);
 8000a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a7a:	2638      	movs	r6, #56	; 0x38
 8000a7c:	19ba      	adds	r2, r7, r6
 8000a7e:	1811      	adds	r1, r2, r0
 8000a80:	2202      	movs	r2, #2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f00c faaa 	bl	800cfdc <memcpy>
	memcpy(toSend+2, msg, paket->dataLength + 2);
 8000a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000a8a:	1c98      	adds	r0, r3, #2
 8000a8c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a90:	7a1b      	ldrb	r3, [r3, #8]
 8000a92:	3302      	adds	r3, #2
 8000a94:	001a      	movs	r2, r3
 8000a96:	f00c faa1 	bl	800cfdc <memcpy>
	memcpy(toSend+2+paket->dataLength + 2, end, 4);
 8000a9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a9e:	7a1b      	ldrb	r3, [r3, #8]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	18d2      	adds	r2, r2, r3
 8000aa4:	19bb      	adds	r3, r7, r6
 8000aa6:	195b      	adds	r3, r3, r5
 8000aa8:	0010      	movs	r0, r2
 8000aaa:	0019      	movs	r1, r3
 8000aac:	2304      	movs	r3, #4
 8000aae:	001a      	movs	r2, r3
 8000ab0:	f00c fa94 	bl	800cfdc <memcpy>
	pushStr(buffer, toSend, sizeof(toSend)-1);
 8000ab4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000ab6:	0023      	movs	r3, r4
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	001a      	movs	r2, r3
 8000abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f001 fa6b 	bl	8001f9a <pushStr>
 8000ac4:	46c5      	mov	sp, r8
}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b016      	add	sp, #88	; 0x58
 8000acc:	bc80      	pop	{r7}
 8000ace:	46b8      	mov	r8, r7
 8000ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	0800d860 	.word	0x0800d860
 8000ad8:	000a3c3c 	.word	0x000a3c3c

08000adc <decodePaket>:

//_____Příchozí řetězec přepracuje do struktury typu paket (pokud to lze)_____//
static uint8_t decodePaket(/*Paket* paket,*/ uint8_t* data, uint8_t dataLenght)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	000a      	movs	r2, r1
 8000ae6:	1cfb      	adds	r3, r7, #3
 8000ae8:	701a      	strb	r2, [r3, #0]
	int sum = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
	for(int i = 2; i < dataLenght - 3; i++)
 8000aee:	2302      	movs	r3, #2
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	e00a      	b.n	8000b0a <decodePaket+0x2e>
	{
		sum += data[i];
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	18d3      	adds	r3, r2, r3
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	001a      	movs	r2, r3
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	189b      	adds	r3, r3, r2
 8000b02:	60fb      	str	r3, [r7, #12]
	for(int i = 2; i < dataLenght - 3; i++)
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	3301      	adds	r3, #1
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	1cfb      	adds	r3, r7, #3
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	3b03      	subs	r3, #3
 8000b10:	68ba      	ldr	r2, [r7, #8]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	dbee      	blt.n	8000af4 <decodePaket+0x18>
	}
	if(sum == data[dataLenght - 3])	//kontorlní součet odpovídá
 8000b16:	1cfb      	adds	r3, r7, #3
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	3b03      	subs	r3, #3
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	18d3      	adds	r3, r2, r3
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	001a      	movs	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d13b      	bne.n	8000ba2 <decodePaket+0xc6>
	{
		switch(data[2])	//Na třetím místě je instrukce
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b73      	cmp	r3, #115	; 0x73
 8000b32:	d008      	beq.n	8000b46 <decodePaket+0x6a>
 8000b34:	dc2f      	bgt.n	8000b96 <decodePaket+0xba>
 8000b36:	2b70      	cmp	r3, #112	; 0x70
 8000b38:	d019      	beq.n	8000b6e <decodePaket+0x92>
 8000b3a:	dc2c      	bgt.n	8000b96 <decodePaket+0xba>
 8000b3c:	2b63      	cmp	r3, #99	; 0x63
 8000b3e:	d00c      	beq.n	8000b5a <decodePaket+0x7e>
 8000b40:	2b6b      	cmp	r3, #107	; 0x6b
 8000b42:	d01e      	beq.n	8000b82 <decodePaket+0xa6>
 8000b44:	e027      	b.n	8000b96 <decodePaket+0xba>
		{
		case 's': ;
			//___Start testu___//
			if(dataLenght == 7)
 8000b46:	1cfb      	adds	r3, r7, #3
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b07      	cmp	r3, #7
 8000b4c:	d12b      	bne.n	8000ba6 <decodePaket+0xca>
			{
				flags.instructions.startRequest = 1;
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <decodePaket+0xe4>)
 8000b50:	7b1a      	ldrb	r2, [r3, #12]
 8000b52:	2101      	movs	r1, #1
 8000b54:	430a      	orrs	r2, r1
 8000b56:	731a      	strb	r2, [r3, #12]
				sprintf(txt, "Start\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				//Na pozici data je ukazatel na testovaný zdroj
			}
			break;
 8000b58:	e025      	b.n	8000ba6 <decodePaket+0xca>

		case'c': ;
			//___Ukončení___//
		if(dataLenght == 7)
 8000b5a:	1cfb      	adds	r3, r7, #3
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b07      	cmp	r3, #7
 8000b60:	d123      	bne.n	8000baa <decodePaket+0xce>
		{
			flags.instructions.stopRequest = 1;
 8000b62:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <decodePaket+0xe4>)
 8000b64:	7b1a      	ldrb	r2, [r3, #12]
 8000b66:	2102      	movs	r1, #2
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Ukonceni\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000b6c:	e01d      	b.n	8000baa <decodePaket+0xce>

		case'p': ;
			//___Pauza___//
		if(dataLenght == 7)
 8000b6e:	1cfb      	adds	r3, r7, #3
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b07      	cmp	r3, #7
 8000b74:	d11b      	bne.n	8000bae <decodePaket+0xd2>
		{
			flags.instructions.pauseRequest = 1;
 8000b76:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <decodePaket+0xe4>)
 8000b78:	7b1a      	ldrb	r2, [r3, #12]
 8000b7a:	2104      	movs	r1, #4
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Pauza\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000b80:	e015      	b.n	8000bae <decodePaket+0xd2>

		case'k': ;
			//___Kalibrace___//
		if(dataLenght == 7)
 8000b82:	1cfb      	adds	r3, r7, #3
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b07      	cmp	r3, #7
 8000b88:	d113      	bne.n	8000bb2 <decodePaket+0xd6>
		{
			flags.instructions.calibRequest = 1;
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <decodePaket+0xe4>)
 8000b8c:	7b1a      	ldrb	r2, [r3, #12]
 8000b8e:	2108      	movs	r1, #8
 8000b90:	430a      	orrs	r2, r1
 8000b92:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Kalibrace\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000b94:	e00d      	b.n	8000bb2 <decodePaket+0xd6>

		default: ;
			//___Neplatný příkaz___//
			flags.instructions.unknownInst = 1;
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <decodePaket+0xe4>)
 8000b98:	7b1a      	ldrb	r2, [r3, #12]
 8000b9a:	2110      	movs	r1, #16
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
			sprintf(txt, "Neplatna instrukce\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			break;
 8000ba0:	e008      	b.n	8000bb4 <decodePaket+0xd8>
		}
	}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	e006      	b.n	8000bb4 <decodePaket+0xd8>
			break;
 8000ba6:	46c0      	nop			; (mov r8, r8)
 8000ba8:	e004      	b.n	8000bb4 <decodePaket+0xd8>
			break;
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	e002      	b.n	8000bb4 <decodePaket+0xd8>
			break;
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	e000      	b.n	8000bb4 <decodePaket+0xd8>
			break;
 8000bb2:	46c0      	nop			; (mov r8, r8)
	return 1;
 8000bb4:	2301      	movs	r3, #1
}
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b004      	add	sp, #16
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	20000630 	.word	0x20000630

08000bc4 <setColour>:
#include "lcd.h"

//_____Rozvítí podsvícení dané argumentem_____//
//-> argument: Barva podsvícení
void setColour(BACKLIGHT colour)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	0002      	movs	r2, r0
 8000bcc:	1dfb      	adds	r3, r7, #7
 8000bce:	701a      	strb	r2, [r3, #0]
	switch(colour)
 8000bd0:	1dfb      	adds	r3, r7, #7
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d033      	beq.n	8000c40 <setColour+0x7c>
 8000bd8:	dc49      	bgt.n	8000c6e <setColour+0xaa>
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d002      	beq.n	8000be4 <setColour+0x20>
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d017      	beq.n	8000c12 <setColour+0x4e>
 8000be2:	e044      	b.n	8000c6e <setColour+0xaa>
	{
	case BACKLIGHT_WHITE:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_SET);
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	482e      	ldr	r0, [pc, #184]	; (8000ca4 <setColour+0xe0>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	0019      	movs	r1, r3
 8000bee:	f003 f87c 	bl	8003cea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000bf2:	2380      	movs	r3, #128	; 0x80
 8000bf4:	0219      	lsls	r1, r3, #8
 8000bf6:	2390      	movs	r3, #144	; 0x90
 8000bf8:	05db      	lsls	r3, r3, #23
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f003 f874 	bl	8003cea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	4827      	ldr	r0, [pc, #156]	; (8000ca4 <setColour+0xe0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	0019      	movs	r1, r3
 8000c0c:	f003 f86d 	bl	8003cea <HAL_GPIO_WritePin>
		break;
 8000c10:	e044      	b.n	8000c9c <setColour+0xd8>

	case BACKLIGHT_GREEN:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	4823      	ldr	r0, [pc, #140]	; (8000ca4 <setColour+0xe0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	0019      	movs	r1, r3
 8000c1c:	f003 f865 	bl	8003cea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	0219      	lsls	r1, r3, #8
 8000c24:	2390      	movs	r3, #144	; 0x90
 8000c26:	05db      	lsls	r3, r3, #23
 8000c28:	2200      	movs	r2, #0
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f003 f85d 	bl	8003cea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_SET);
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	481b      	ldr	r0, [pc, #108]	; (8000ca4 <setColour+0xe0>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	0019      	movs	r1, r3
 8000c3a:	f003 f856 	bl	8003cea <HAL_GPIO_WritePin>
		break;
 8000c3e:	e02d      	b.n	8000c9c <setColour+0xd8>

	case BACKLIGHT_RED:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	4817      	ldr	r0, [pc, #92]	; (8000ca4 <setColour+0xe0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	0019      	movs	r1, r3
 8000c4a:	f003 f84e 	bl	8003cea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_SET);
 8000c4e:	2380      	movs	r3, #128	; 0x80
 8000c50:	0219      	lsls	r1, r3, #8
 8000c52:	2390      	movs	r3, #144	; 0x90
 8000c54:	05db      	lsls	r3, r3, #23
 8000c56:	2201      	movs	r2, #1
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f003 f846 	bl	8003cea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	4810      	ldr	r0, [pc, #64]	; (8000ca4 <setColour+0xe0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	0019      	movs	r1, r3
 8000c68:	f003 f83f 	bl	8003cea <HAL_GPIO_WritePin>
		break;
 8000c6c:	e016      	b.n	8000c9c <setColour+0xd8>

	default:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <setColour+0xe0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	0019      	movs	r1, r3
 8000c78:	f003 f837 	bl	8003cea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	0219      	lsls	r1, r3, #8
 8000c80:	2390      	movs	r3, #144	; 0x90
 8000c82:	05db      	lsls	r3, r3, #23
 8000c84:	2200      	movs	r2, #0
 8000c86:	0018      	movs	r0, r3
 8000c88:	f003 f82f 	bl	8003cea <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000c8c:	2380      	movs	r3, #128	; 0x80
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	4804      	ldr	r0, [pc, #16]	; (8000ca4 <setColour+0xe0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	0019      	movs	r1, r3
 8000c96:	f003 f828 	bl	8003cea <HAL_GPIO_WritePin>
		break;
 8000c9a:	46c0      	nop			; (mov r8, r8)
	}
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b002      	add	sp, #8
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	48000400 	.word	0x48000400

08000ca8 <sendByte>:

//_____Pošle byte dat_____//
//-> argumenty: char - posílaný byte, Start_byte definuje zda jde o instrukci nebo data
// !!! Pracuje v blokujícím módu !!!
static DISP_STATE sendByte(char byte, START_BYTE type)
{
 8000ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	0002      	movs	r2, r0
 8000cb0:	1dfb      	adds	r3, r7, #7
 8000cb2:	701a      	strb	r2, [r3, #0]
 8000cb4:	1dbb      	adds	r3, r7, #6
 8000cb6:	1c0a      	adds	r2, r1, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
		{
			return SPI_ERR;
		}
	}*/
	uint8_t buffer[3];
	switch(type)
 8000cba:	1dbb      	adds	r3, r7, #6
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d002      	beq.n	8000cc8 <sendByte+0x20>
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d005      	beq.n	8000cd2 <sendByte+0x2a>
 8000cc6:	e009      	b.n	8000cdc <sendByte+0x34>
	{
		case INSTRUCTION:
			buffer[0] = 0xF8;
 8000cc8:	2308      	movs	r3, #8
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	22f8      	movs	r2, #248	; 0xf8
 8000cce:	701a      	strb	r2, [r3, #0]
			break;
 8000cd0:	e006      	b.n	8000ce0 <sendByte+0x38>
		case DATA:
			buffer[0] = 0xFA;
 8000cd2:	2308      	movs	r3, #8
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	22fa      	movs	r2, #250	; 0xfa
 8000cd8:	701a      	strb	r2, [r3, #0]
			break;
 8000cda:	e001      	b.n	8000ce0 <sendByte+0x38>
		default:	//neošetřené možnosti
			return SPI_ERR;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	e077      	b.n	8000dd0 <sendByte+0x128>
			break;
	}
	uint8_t tmp1 = 0U, tmp2 = 0U;
 8000ce0:	230f      	movs	r3, #15
 8000ce2:	18fb      	adds	r3, r7, r3
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
 8000ce8:	230e      	movs	r3, #14
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8000cf0:	230d      	movs	r3, #13
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
 8000cf8:	e03a      	b.n	8000d70 <sendByte+0xc8>
	{
		if(MaskBit(byte, i))
 8000cfa:	1dfb      	adds	r3, r7, #7
 8000cfc:	781a      	ldrb	r2, [r3, #0]
 8000cfe:	210d      	movs	r1, #13
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	411a      	asrs	r2, r3
 8000d06:	0013      	movs	r3, r2
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	d00f      	beq.n	8000d2e <sendByte+0x86>
		{
			SetBit(tmp1, (7-i));
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2207      	movs	r2, #7
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	2201      	movs	r2, #1
 8000d18:	409a      	lsls	r2, r3
 8000d1a:	0013      	movs	r3, r2
 8000d1c:	b25a      	sxtb	r2, r3
 8000d1e:	210f      	movs	r1, #15
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	b25b      	sxtb	r3, r3
 8000d26:	4313      	orrs	r3, r2
 8000d28:	b25a      	sxtb	r2, r3
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	701a      	strb	r2, [r3, #0]
		}
		if(MaskBit(byte, (i+4)))
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	781a      	ldrb	r2, [r3, #0]
 8000d32:	210d      	movs	r1, #13
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	411a      	asrs	r2, r3
 8000d3c:	0013      	movs	r3, r2
 8000d3e:	2201      	movs	r2, #1
 8000d40:	4013      	ands	r3, r2
 8000d42:	d00f      	beq.n	8000d64 <sendByte+0xbc>
		{
			SetBit(tmp2, (7-i));
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2207      	movs	r2, #7
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	409a      	lsls	r2, r3
 8000d50:	0013      	movs	r3, r2
 8000d52:	b25a      	sxtb	r2, r3
 8000d54:	210e      	movs	r1, #14
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	b25b      	sxtb	r3, r3
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	b25a      	sxtb	r2, r3
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8000d64:	210d      	movs	r1, #13
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	781a      	ldrb	r2, [r3, #0]
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	3201      	adds	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
 8000d70:	230d      	movs	r3, #13
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d9bf      	bls.n	8000cfa <sendByte+0x52>
		}
	}
	buffer[1] = tmp1;
 8000d7a:	2508      	movs	r5, #8
 8000d7c:	197b      	adds	r3, r7, r5
 8000d7e:	220f      	movs	r2, #15
 8000d80:	18ba      	adds	r2, r7, r2
 8000d82:	7812      	ldrb	r2, [r2, #0]
 8000d84:	705a      	strb	r2, [r3, #1]
	buffer[2] = tmp2;
 8000d86:	197b      	adds	r3, r7, r5
 8000d88:	220e      	movs	r2, #14
 8000d8a:	18ba      	adds	r2, r7, r2
 8000d8c:	7812      	ldrb	r2, [r2, #0]
 8000d8e:	709a      	strb	r2, [r3, #2]

	DISP_CS_ON;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <sendByte+0x130>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	2140      	movs	r1, #64	; 0x40
 8000d96:	0018      	movs	r0, r3
 8000d98:	f002 ffa7 	bl	8003cea <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, buffer, 3, 100);
 8000d9c:	260c      	movs	r6, #12
 8000d9e:	19bc      	adds	r4, r7, r6
 8000da0:	1979      	adds	r1, r7, r5
 8000da2:	480e      	ldr	r0, [pc, #56]	; (8000ddc <sendByte+0x134>)
 8000da4:	2364      	movs	r3, #100	; 0x64
 8000da6:	2203      	movs	r2, #3
 8000da8:	f005 fd1e 	bl	80067e8 <HAL_SPI_Transmit>
 8000dac:	0003      	movs	r3, r0
 8000dae:	7023      	strb	r3, [r4, #0]
	DISP_CS_OFF;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <sendByte+0x130>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	2140      	movs	r1, #64	; 0x40
 8000db6:	0018      	movs	r0, r3
 8000db8:	f002 ff97 	bl	8003cea <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f001 ff5f 	bl	8002c80 <HAL_Delay>
	if(ret == HAL_OK)
 8000dc2:	19bb      	adds	r3, r7, r6
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <sendByte+0x126>
		return DISP_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e000      	b.n	8000dd0 <sendByte+0x128>
	else
		return SPI_ERR;
 8000dce:	2302      	movs	r3, #2
}
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b005      	add	sp, #20
 8000dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dd8:	48000400 	.word	0x48000400
 8000ddc:	20000584 	.word	0x20000584

08000de0 <dispInit>:
}

//_____Provede reset displeje a defaultní nastavení_____//
// !!! Pracuje v blokujícím módu !!!
void dispInit(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	//_____Reset displeje po startu_____//
	HAL_Delay(20);
 8000de4:	2014      	movs	r0, #20
 8000de6:	f001 ff4b 	bl	8002c80 <HAL_Delay>
	HAL_GPIO_WritePin(DISP_RST_GPIO_Port,DISP_RST_Pin, GPIO_PIN_RESET);
 8000dea:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <dispInit+0x74>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	2180      	movs	r1, #128	; 0x80
 8000df0:	0018      	movs	r0, r3
 8000df2:	f002 ff7a 	bl	8003cea <HAL_GPIO_WritePin>
	HAL_Delay(30);
 8000df6:	201e      	movs	r0, #30
 8000df8:	f001 ff42 	bl	8002c80 <HAL_Delay>
	HAL_GPIO_WritePin(DISP_RST_GPIO_Port,DISP_RST_Pin, GPIO_PIN_SET);
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <dispInit+0x74>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	0018      	movs	r0, r3
 8000e04:	f002 ff71 	bl	8003cea <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000e08:	2005      	movs	r0, #5
 8000e0a:	f001 ff39 	bl	8002c80 <HAL_Delay>

	//_____Nastavit parametry_____//
	sendByte(0x31, INSTRUCTION);	//Function set
 8000e0e:	2101      	movs	r1, #1
 8000e10:	2031      	movs	r0, #49	; 0x31
 8000e12:	f7ff ff49 	bl	8000ca8 <sendByte>
	sendByte(0x01, INSTRUCTION);	//Clear display
 8000e16:	2101      	movs	r1, #1
 8000e18:	2001      	movs	r0, #1
 8000e1a:	f7ff ff45 	bl	8000ca8 <sendByte>
	sendByte(0x13, INSTRUCTION);	//Oscilator
 8000e1e:	2101      	movs	r1, #1
 8000e20:	2013      	movs	r0, #19
 8000e22:	f7ff ff41 	bl	8000ca8 <sendByte>
	sendByte(0x70, INSTRUCTION);	//Contrast
 8000e26:	2101      	movs	r1, #1
 8000e28:	2070      	movs	r0, #112	; 0x70
 8000e2a:	f7ff ff3d 	bl	8000ca8 <sendByte>
	sendByte(0x5C, INSTRUCTION);	//Power/Icon/Contrast
 8000e2e:	2101      	movs	r1, #1
 8000e30:	205c      	movs	r0, #92	; 0x5c
 8000e32:	f7ff ff39 	bl	8000ca8 <sendByte>
	sendByte(0x6B, INSTRUCTION);	//Follower control
 8000e36:	2101      	movs	r1, #1
 8000e38:	206b      	movs	r0, #107	; 0x6b
 8000e3a:	f7ff ff35 	bl	8000ca8 <sendByte>
	sendByte(0x0F, INSTRUCTION);	//Display on
 8000e3e:	2101      	movs	r1, #1
 8000e40:	200f      	movs	r0, #15
 8000e42:	f7ff ff31 	bl	8000ca8 <sendByte>

	//_____Zapnout podsvícení_____//
	setColour(BACKLIGHT_WHITE);
 8000e46:	2000      	movs	r0, #0
 8000e48:	f7ff febc 	bl	8000bc4 <setColour>
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	48000400 	.word	0x48000400

08000e58 <setCursor>:
//_____Nastaví kurzor_____//
//pozice počítána od nuly//
//-> argumenty: řádek, sloupec
// !!! Pracuje v blokujícím módu !!!
DISP_STATE setCursor(uint8_t row, uint8_t col)
{
 8000e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	0002      	movs	r2, r0
 8000e60:	1dfb      	adds	r3, r7, #7
 8000e62:	701a      	strb	r2, [r3, #0]
 8000e64:	1dbb      	adds	r3, r7, #6
 8000e66:	1c0a      	adds	r2, r1, #0
 8000e68:	701a      	strb	r2, [r3, #0]
	uint8_t addres = 0x80;	//DDRAM adresa
 8000e6a:	230f      	movs	r3, #15
 8000e6c:	18fb      	adds	r3, r7, r3
 8000e6e:	2280      	movs	r2, #128	; 0x80
 8000e70:	701a      	strb	r2, [r3, #0]
	if(row > 3 || col > 15)	//displej 4x16
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b03      	cmp	r3, #3
 8000e78:	d803      	bhi.n	8000e82 <setCursor+0x2a>
 8000e7a:	1dbb      	adds	r3, r7, #6
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b0f      	cmp	r3, #15
 8000e80:	d901      	bls.n	8000e86 <setCursor+0x2e>
		return DISP_ERR;
 8000e82:	2304      	movs	r3, #4
 8000e84:	e026      	b.n	8000ed4 <setCursor+0x7c>
	addres += row*0x20;
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	015b      	lsls	r3, r3, #5
 8000e8c:	b2d9      	uxtb	r1, r3
 8000e8e:	250f      	movs	r5, #15
 8000e90:	197b      	adds	r3, r7, r5
 8000e92:	197a      	adds	r2, r7, r5
 8000e94:	7812      	ldrb	r2, [r2, #0]
 8000e96:	188a      	adds	r2, r1, r2
 8000e98:	701a      	strb	r2, [r3, #0]
	addres += col;
 8000e9a:	197b      	adds	r3, r7, r5
 8000e9c:	1979      	adds	r1, r7, r5
 8000e9e:	1dba      	adds	r2, r7, #6
 8000ea0:	7809      	ldrb	r1, [r1, #0]
 8000ea2:	7812      	ldrb	r2, [r2, #0]
 8000ea4:	188a      	adds	r2, r1, r2
 8000ea6:	701a      	strb	r2, [r3, #0]

	sendByte(0x38, INSTRUCTION);	//Function set RE = 0
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	2038      	movs	r0, #56	; 0x38
 8000eac:	f7ff fefc 	bl	8000ca8 <sendByte>
	HAL_Delay(5);
 8000eb0:	2005      	movs	r0, #5
 8000eb2:	f001 fee5 	bl	8002c80 <HAL_Delay>
	DISP_STATE ret = sendByte(addres, INSTRUCTION);
 8000eb6:	260e      	movs	r6, #14
 8000eb8:	19bc      	adds	r4, r7, r6
 8000eba:	197b      	adds	r3, r7, r5
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f7ff fef1 	bl	8000ca8 <sendByte>
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	7023      	strb	r3, [r4, #0]
	HAL_Delay(5);
 8000eca:	2005      	movs	r0, #5
 8000ecc:	f001 fed8 	bl	8002c80 <HAL_Delay>
	return ret;
 8000ed0:	19bb      	adds	r3, r7, r6
 8000ed2:	781b      	ldrb	r3, [r3, #0]
}
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b005      	add	sp, #20
 8000eda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000edc <writeChar>:

//_____Zapiš znak na dané souřadnice_____//
//-> argumenty: znak k zobrazení, řádek, sloupec
// !!! Pracuje v blokujícím módu !!!
DISP_STATE writeChar(char character, uint8_t row, uint8_t col)
{
 8000edc:	b5b0      	push	{r4, r5, r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	0004      	movs	r4, r0
 8000ee4:	0008      	movs	r0, r1
 8000ee6:	0011      	movs	r1, r2
 8000ee8:	1dfb      	adds	r3, r7, #7
 8000eea:	1c22      	adds	r2, r4, #0
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	1dbb      	adds	r3, r7, #6
 8000ef0:	1c02      	adds	r2, r0, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
 8000ef4:	1d7b      	adds	r3, r7, #5
 8000ef6:	1c0a      	adds	r2, r1, #0
 8000ef8:	701a      	strb	r2, [r3, #0]
	DISP_STATE ret = setCursor(row, col);
 8000efa:	250f      	movs	r5, #15
 8000efc:	197c      	adds	r4, r7, r5
 8000efe:	1d7b      	adds	r3, r7, #5
 8000f00:	781a      	ldrb	r2, [r3, #0]
 8000f02:	1dbb      	adds	r3, r7, #6
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	0011      	movs	r1, r2
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff ffa5 	bl	8000e58 <setCursor>
 8000f0e:	0003      	movs	r3, r0
 8000f10:	7023      	strb	r3, [r4, #0]
	HAL_Delay(5);
 8000f12:	2005      	movs	r0, #5
 8000f14:	f001 feb4 	bl	8002c80 <HAL_Delay>
	if(ret == DISP_OK)
 8000f18:	197b      	adds	r3, r7, r5
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d10e      	bne.n	8000f3e <writeChar+0x62>
	{
		//doplnit úpravu dat podle převodní tabulky displeje
		ret = sendByte(character, DATA);
 8000f20:	197c      	adds	r4, r7, r5
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2102      	movs	r1, #2
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f7ff febd 	bl	8000ca8 <sendByte>
 8000f2e:	0003      	movs	r3, r0
 8000f30:	7023      	strb	r3, [r4, #0]
		HAL_Delay(5);
 8000f32:	2005      	movs	r0, #5
 8000f34:	f001 fea4 	bl	8002c80 <HAL_Delay>
		return ret;
 8000f38:	197b      	adds	r3, r7, r5
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	e002      	b.n	8000f44 <writeChar+0x68>
	}
	else
		return ret;
 8000f3e:	230f      	movs	r3, #15
 8000f40:	18fb      	adds	r3, r7, r3
 8000f42:	781b      	ldrb	r3, [r3, #0]
}
 8000f44:	0018      	movs	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b004      	add	sp, #16
 8000f4a:	bdb0      	pop	{r4, r5, r7, pc}

08000f4c <writeRow>:
//_____Zapiš řetězec na daný řádek_____//
//znaky přečnívající znaky budou smazány//
//-> argumenty: pole znaků, délka řetězce, řádek, zarovnání
// !!! Pracuje v blokujícím módu !!!
DISP_STATE writeRow(char* string, uint8_t lenght, uint8_t row, ALIGN align)
{
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	000c      	movs	r4, r1
 8000f56:	0010      	movs	r0, r2
 8000f58:	0019      	movs	r1, r3
 8000f5a:	1cfb      	adds	r3, r7, #3
 8000f5c:	1c22      	adds	r2, r4, #0
 8000f5e:	701a      	strb	r2, [r3, #0]
 8000f60:	1cbb      	adds	r3, r7, #2
 8000f62:	1c02      	adds	r2, r0, #0
 8000f64:	701a      	strb	r2, [r3, #0]
 8000f66:	1c7b      	adds	r3, r7, #1
 8000f68:	1c0a      	adds	r2, r1, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
	if(lenght > 16)	//neplatná délka řetězce
 8000f6c:	1cfb      	adds	r3, r7, #3
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b10      	cmp	r3, #16
 8000f72:	d901      	bls.n	8000f78 <writeRow+0x2c>
		return DISP_ERR;
 8000f74:	2304      	movs	r3, #4
 8000f76:	e07c      	b.n	8001072 <writeRow+0x126>
	uint8_t col;
	char newString[16];
	for(uint8_t i = 0; i < 16; i++)
 8000f78:	231e      	movs	r3, #30
 8000f7a:	18fb      	adds	r3, r7, r3
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	701a      	strb	r2, [r3, #0]
 8000f80:	e00b      	b.n	8000f9a <writeRow+0x4e>
	{
		newString[i] = ' ';
 8000f82:	201e      	movs	r0, #30
 8000f84:	183b      	adds	r3, r7, r0
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	220c      	movs	r2, #12
 8000f8a:	18ba      	adds	r2, r7, r2
 8000f8c:	2120      	movs	r1, #32
 8000f8e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 16; i++)
 8000f90:	183b      	adds	r3, r7, r0
 8000f92:	781a      	ldrb	r2, [r3, #0]
 8000f94:	183b      	adds	r3, r7, r0
 8000f96:	3201      	adds	r2, #1
 8000f98:	701a      	strb	r2, [r3, #0]
 8000f9a:	231e      	movs	r3, #30
 8000f9c:	18fb      	adds	r3, r7, r3
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d9ee      	bls.n	8000f82 <writeRow+0x36>
	}
	switch(align)
 8000fa4:	1c7b      	adds	r3, r7, #1
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d012      	beq.n	8000fd2 <writeRow+0x86>
 8000fac:	dc1e      	bgt.n	8000fec <writeRow+0xa0>
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d002      	beq.n	8000fb8 <writeRow+0x6c>
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d005      	beq.n	8000fc2 <writeRow+0x76>
			break;
		case CENTER:
			col = (15 - lenght)/2 + 1;
			break;
		default:
			break;
 8000fb6:	e019      	b.n	8000fec <writeRow+0xa0>
			col = 0;
 8000fb8:	231f      	movs	r3, #31
 8000fba:	18fb      	adds	r3, r7, r3
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
			break;
 8000fc0:	e015      	b.n	8000fee <writeRow+0xa2>
			col = 15 - lenght;
 8000fc2:	231f      	movs	r3, #31
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	1cfa      	adds	r2, r7, #3
 8000fc8:	7812      	ldrb	r2, [r2, #0]
 8000fca:	210f      	movs	r1, #15
 8000fcc:	1a8a      	subs	r2, r1, r2
 8000fce:	701a      	strb	r2, [r3, #0]
			break;
 8000fd0:	e00d      	b.n	8000fee <writeRow+0xa2>
			col = (15 - lenght)/2 + 1;
 8000fd2:	1cfb      	adds	r3, r7, #3
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	d500      	bpl.n	8000fde <writeRow+0x92>
 8000fdc:	3301      	adds	r3, #1
 8000fde:	105b      	asrs	r3, r3, #1
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	231f      	movs	r3, #31
 8000fe4:	18fb      	adds	r3, r7, r3
 8000fe6:	3201      	adds	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
			break;
 8000fea:	e000      	b.n	8000fee <writeRow+0xa2>
			break;
 8000fec:	46c0      	nop			; (mov r8, r8)
	}
	for(uint8_t i = 0; i < lenght; i++)
 8000fee:	231d      	movs	r3, #29
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
 8000ff6:	e013      	b.n	8001020 <writeRow+0xd4>
	{
		newString[col + i] = string[i];
 8000ff8:	201d      	movs	r0, #29
 8000ffa:	183b      	adds	r3, r7, r0
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	18d2      	adds	r2, r2, r3
 8001002:	231f      	movs	r3, #31
 8001004:	18fb      	adds	r3, r7, r3
 8001006:	7819      	ldrb	r1, [r3, #0]
 8001008:	183b      	adds	r3, r7, r0
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	18cb      	adds	r3, r1, r3
 800100e:	7811      	ldrb	r1, [r2, #0]
 8001010:	220c      	movs	r2, #12
 8001012:	18ba      	adds	r2, r7, r2
 8001014:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < lenght; i++)
 8001016:	183b      	adds	r3, r7, r0
 8001018:	781a      	ldrb	r2, [r3, #0]
 800101a:	183b      	adds	r3, r7, r0
 800101c:	3201      	adds	r2, #1
 800101e:	701a      	strb	r2, [r3, #0]
 8001020:	231d      	movs	r3, #29
 8001022:	18fa      	adds	r2, r7, r3
 8001024:	1cfb      	adds	r3, r7, #3
 8001026:	7812      	ldrb	r2, [r2, #0]
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	429a      	cmp	r2, r3
 800102c:	d3e4      	bcc.n	8000ff8 <writeRow+0xac>
	}
	for(uint8_t i = 0; i < 16; i++)
 800102e:	231c      	movs	r3, #28
 8001030:	18fb      	adds	r3, r7, r3
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
 8001036:	e016      	b.n	8001066 <writeRow+0x11a>
	{
		if(writeChar(newString[i], row, i) != DISP_OK)
 8001038:	211c      	movs	r1, #28
 800103a:	187b      	adds	r3, r7, r1
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	220c      	movs	r2, #12
 8001040:	18ba      	adds	r2, r7, r2
 8001042:	5cd0      	ldrb	r0, [r2, r3]
 8001044:	187b      	adds	r3, r7, r1
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	1cbb      	adds	r3, r7, #2
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	0019      	movs	r1, r3
 800104e:	f7ff ff45 	bl	8000edc <writeChar>
 8001052:	1e03      	subs	r3, r0, #0
 8001054:	d001      	beq.n	800105a <writeRow+0x10e>
					return SPI_ERR;
 8001056:	2302      	movs	r3, #2
 8001058:	e00b      	b.n	8001072 <writeRow+0x126>
	for(uint8_t i = 0; i < 16; i++)
 800105a:	211c      	movs	r1, #28
 800105c:	187b      	adds	r3, r7, r1
 800105e:	781a      	ldrb	r2, [r3, #0]
 8001060:	187b      	adds	r3, r7, r1
 8001062:	3201      	adds	r2, #1
 8001064:	701a      	strb	r2, [r3, #0]
 8001066:	231c      	movs	r3, #28
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b0f      	cmp	r3, #15
 800106e:	d9e3      	bls.n	8001038 <writeRow+0xec>
	}
	return DISP_OK;
 8001070:	2300      	movs	r3, #0
}
 8001072:	0018      	movs	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	b009      	add	sp, #36	; 0x24
 8001078:	bd90      	pop	{r4, r7, pc}
	...

0800107c <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	0002      	movs	r2, r0
 8001084:	1dbb      	adds	r3, r7, #6
 8001086:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 8001088:	1dbb      	adds	r3, r7, #6
 800108a:	881a      	ldrh	r2, [r3, #0]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	429a      	cmp	r2, r3
 8001092:	d104      	bne.n	800109e <HAL_GPIO_EXTI_Callback+0x22>
	{
		flags.buttons.butt0_int = 1;
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_GPIO_EXTI_Callback+0x40>)
 8001096:	791a      	ldrb	r2, [r3, #4]
 8001098:	2101      	movs	r1, #1
 800109a:	430a      	orrs	r2, r1
 800109c:	711a      	strb	r2, [r3, #4]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 800109e:	1dbb      	adds	r3, r7, #6
 80010a0:	881a      	ldrh	r2, [r3, #0]
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d104      	bne.n	80010b4 <HAL_GPIO_EXTI_Callback+0x38>
	{
		flags.buttons.butt1_int = 1;
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <HAL_GPIO_EXTI_Callback+0x40>)
 80010ac:	791a      	ldrb	r2, [r3, #4]
 80010ae:	2104      	movs	r1, #4
 80010b0:	430a      	orrs	r2, r1
 80010b2:	711a      	strb	r2, [r3, #4]
	}
}
 80010b4:	46c0      	nop			; (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b002      	add	sp, #8
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000630 	.word	0x20000630

080010c0 <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d104      	bne.n	80010da <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		flags.time.ten_ms = 1;
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80010d2:	781a      	ldrb	r2, [r3, #0]
 80010d4:	2101      	movs	r1, #1
 80010d6:	430a      	orrs	r2, r1
 80010d8:	701a      	strb	r2, [r3, #0]
	}
}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b002      	add	sp, #8
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	200005e8 	.word	0x200005e8
 80010e8:	20000630 	.word	0x20000630

080010ec <HAL_ADC_ConvCpltCallback>:

//_____ADC data ready callback_____//
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_IT(&hadc);
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	0018      	movs	r0, r3
 80010f8:	f001 ff98 	bl	800302c <HAL_ADC_Stop_IT>
	flags.meas.measDataReady = 1;
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <HAL_ADC_ConvCpltCallback+0x24>)
 80010fe:	7d1a      	ldrb	r2, [r3, #20]
 8001100:	2104      	movs	r1, #4
 8001102:	430a      	orrs	r2, r1
 8001104:	751a      	strb	r2, [r3, #20]
}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	46bd      	mov	sp, r7
 800110a:	b002      	add	sp, #8
 800110c:	bd80      	pop	{r7, pc}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	20000630 	.word	0x20000630

08001114 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001118:	f001 fd4e 	bl	8002bb8 <HAL_Init>

  /* USER CODE BEGIN Init */

  //__Buffery___//
  dispBuffer = createBuffer(100);
 800111c:	2064      	movs	r0, #100	; 0x64
 800111e:	f000 feba 	bl	8001e96 <createBuffer>
 8001122:	0002      	movs	r2, r0
 8001124:	4b3d      	ldr	r3, [pc, #244]	; (800121c <main+0x108>)
 8001126:	601a      	str	r2, [r3, #0]
  regBuffer = createBuffer(100);
 8001128:	2064      	movs	r0, #100	; 0x64
 800112a:	f000 feb4 	bl	8001e96 <createBuffer>
 800112e:	0002      	movs	r2, r0
 8001130:	4b3b      	ldr	r3, [pc, #236]	; (8001220 <main+0x10c>)
 8001132:	601a      	str	r2, [r3, #0]
  USB_Rx_Buffer = createBuffer(500);
 8001134:	23fa      	movs	r3, #250	; 0xfa
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	0018      	movs	r0, r3
 800113a:	f000 feac 	bl	8001e96 <createBuffer>
 800113e:	0002      	movs	r2, r0
 8001140:	4b38      	ldr	r3, [pc, #224]	; (8001224 <main+0x110>)
 8001142:	601a      	str	r2, [r3, #0]
  USB_Tx_Buffer = createBuffer(500);
 8001144:	23fa      	movs	r3, #250	; 0xfa
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	0018      	movs	r0, r3
 800114a:	f000 fea4 	bl	8001e96 <createBuffer>
 800114e:	0002      	movs	r2, r0
 8001150:	4b35      	ldr	r3, [pc, #212]	; (8001228 <main+0x114>)
 8001152:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001154:	f000 f874 	bl	8001240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001158:	f000 fabe 	bl	80016d8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800115c:	f00b f99a 	bl	800c494 <MX_USB_DEVICE_Init>
  MX_ADC_Init();
 8001160:	f000 f8da 	bl	8001318 <MX_ADC_Init>
  MX_SPI1_Init();
 8001164:	f000 f9f6 	bl	8001554 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001168:	f000 fa86 	bl	8001678 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 800116c:	f000 fa38 	bl	80015e0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Inicializace displeje___//
  dispInit();
 8001170:	f7ff fe36 	bl	8000de0 <dispInit>
  writeRow('Zahoreni', 8, 1, CENTER);
 8001174:	482d      	ldr	r0, [pc, #180]	; (800122c <main+0x118>)
 8001176:	2302      	movs	r3, #2
 8001178:	2201      	movs	r2, #1
 800117a:	2108      	movs	r1, #8
 800117c:	f7ff fee6 	bl	8000f4c <writeRow>
  writeRow('zdroju', 6, 2, CENTER);
 8001180:	482b      	ldr	r0, [pc, #172]	; (8001230 <main+0x11c>)
 8001182:	2302      	movs	r3, #2
 8001184:	2202      	movs	r2, #2
 8001186:	2106      	movs	r1, #6
 8001188:	f7ff fee0 	bl	8000f4c <writeRow>

  LOAD_MIN_OFF;
 800118c:	4b29      	ldr	r3, [pc, #164]	; (8001234 <main+0x120>)
 800118e:	2200      	movs	r2, #0
 8001190:	2180      	movs	r1, #128	; 0x80
 8001192:	0018      	movs	r0, r3
 8001194:	f002 fda9 	bl	8003cea <HAL_GPIO_WritePin>
  LOAD_MAX_OFF;
 8001198:	4b26      	ldr	r3, [pc, #152]	; (8001234 <main+0x120>)
 800119a:	2200      	movs	r2, #0
 800119c:	2140      	movs	r1, #64	; 0x40
 800119e:	0018      	movs	r0, r3
 80011a0:	f002 fda3 	bl	8003cea <HAL_GPIO_WritePin>

  if(regInit() != REG_OK)	//inicializace shift registrů
 80011a4:	f000 ffc4 	bl	8002130 <regInit>
 80011a8:	1e03      	subs	r3, r0, #0
 80011aa:	d004      	beq.n	80011b6 <main+0xa2>
  {
	  flags.conErr = 1;
 80011ac:	4b22      	ldr	r3, [pc, #136]	; (8001238 <main+0x124>)
 80011ae:	7e1a      	ldrb	r2, [r3, #24]
 80011b0:	2104      	movs	r1, #4
 80011b2:	430a      	orrs	r2, r1
 80011b4:	761a      	strb	r2, [r3, #24]
	  //Odešli zprávu do PC
  }

  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <main+0x128>)
 80011b8:	0018      	movs	r0, r3
 80011ba:	f006 f805 	bl	80071c8 <HAL_TIM_Base_Start_IT>

  flags.ui.longBeep = 1;
 80011be:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <main+0x124>)
 80011c0:	7c1a      	ldrb	r2, [r3, #16]
 80011c2:	2102      	movs	r1, #2
 80011c4:	430a      	orrs	r2, r1
 80011c6:	741a      	strb	r2, [r3, #16]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flags.time.ten_ms)	// 10 ms
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <main+0x124>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	07db      	lsls	r3, r3, #31
 80011ce:	0fdb      	lsrs	r3, r3, #31
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f8      	beq.n	80011c8 <main+0xb4>
	  {
		  clkHandler();
 80011d6:	f000 fb6b 	bl	80018b0 <clkHandler>
		  buttonDebounce();
 80011da:	f000 fbe7 	bl	80019ac <buttonDebounce>
		  comHandler();
 80011de:	f7ff f91b 	bl	8000418 <comHandler>
		  if(flags.instructions.calibRequest)
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <main+0x124>)
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	071b      	lsls	r3, r3, #28
 80011e8:	0fdb      	lsrs	r3, r3, #31
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d00e      	beq.n	800120e <main+0xfa>
		  {
			  flags.meas.measRequest = 1;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <main+0x124>)
 80011f2:	7d1a      	ldrb	r2, [r3, #20]
 80011f4:	2101      	movs	r1, #1
 80011f6:	430a      	orrs	r2, r1
 80011f8:	751a      	strb	r2, [r3, #20]
			  flags.meas.calibMeas = 1;
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <main+0x124>)
 80011fc:	7d1a      	ldrb	r2, [r3, #20]
 80011fe:	2140      	movs	r1, #64	; 0x40
 8001200:	430a      	orrs	r2, r1
 8001202:	751a      	strb	r2, [r3, #20]
			  flags.instructions.calibRequest = 0;
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <main+0x124>)
 8001206:	7b1a      	ldrb	r2, [r3, #12]
 8001208:	2108      	movs	r1, #8
 800120a:	438a      	bics	r2, r1
 800120c:	731a      	strb	r2, [r3, #12]
		  }
		  UI_Handler();
 800120e:	f000 fc4b 	bl	8001aa8 <UI_Handler>
		  testHandler();
 8001212:	f001 fa3d 	bl	8002690 <testHandler>
		  measHandler();
 8001216:	f000 fd87 	bl	8001d28 <measHandler>
	  if(flags.time.ten_ms)	// 10 ms
 800121a:	e7d5      	b.n	80011c8 <main+0xb4>
 800121c:	200004a4 	.word	0x200004a4
 8001220:	20000694 	.word	0x20000694
 8001224:	20001134 	.word	0x20001134
 8001228:	20000490 	.word	0x20000490
 800122c:	72656e69 	.word	0x72656e69
 8001230:	726f6a75 	.word	0x726f6a75
 8001234:	48000800 	.word	0x48000800
 8001238:	20000630 	.word	0x20000630
 800123c:	200005e8 	.word	0x200005e8

08001240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b099      	sub	sp, #100	; 0x64
 8001244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001246:	242c      	movs	r4, #44	; 0x2c
 8001248:	193b      	adds	r3, r7, r4
 800124a:	0018      	movs	r0, r3
 800124c:	2334      	movs	r3, #52	; 0x34
 800124e:	001a      	movs	r2, r3
 8001250:	2100      	movs	r1, #0
 8001252:	f00b fecc 	bl	800cfee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001256:	231c      	movs	r3, #28
 8001258:	18fb      	adds	r3, r7, r3
 800125a:	0018      	movs	r0, r3
 800125c:	2310      	movs	r3, #16
 800125e:	001a      	movs	r2, r3
 8001260:	2100      	movs	r1, #0
 8001262:	f00b fec4 	bl	800cfee <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001266:	003b      	movs	r3, r7
 8001268:	0018      	movs	r0, r3
 800126a:	231c      	movs	r3, #28
 800126c:	001a      	movs	r2, r3
 800126e:	2100      	movs	r1, #0
 8001270:	f00b febd 	bl	800cfee <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8001274:	0021      	movs	r1, r4
 8001276:	187b      	adds	r3, r7, r1
 8001278:	2232      	movs	r2, #50	; 0x32
 800127a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800127c:	187b      	adds	r3, r7, r1
 800127e:	2201      	movs	r2, #1
 8001280:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001282:	187b      	adds	r3, r7, r1
 8001284:	2201      	movs	r2, #1
 8001286:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001288:	187b      	adds	r3, r7, r1
 800128a:	2201      	movs	r2, #1
 800128c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800128e:	187b      	adds	r3, r7, r1
 8001290:	2210      	movs	r2, #16
 8001292:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001294:	187b      	adds	r3, r7, r1
 8001296:	2210      	movs	r2, #16
 8001298:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129a:	187b      	adds	r3, r7, r1
 800129c:	2202      	movs	r2, #2
 800129e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	2280      	movs	r2, #128	; 0x80
 80012a4:	0212      	lsls	r2, r2, #8
 80012a6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80012a8:	187b      	adds	r3, r7, r1
 80012aa:	2200      	movs	r2, #0
 80012ac:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80012ae:	187b      	adds	r3, r7, r1
 80012b0:	2200      	movs	r2, #0
 80012b2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b4:	187b      	adds	r3, r7, r1
 80012b6:	0018      	movs	r0, r3
 80012b8:	f004 fbde 	bl	8005a78 <HAL_RCC_OscConfig>
 80012bc:	1e03      	subs	r3, r0, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80012c0:	f000 fde4 	bl	8001e8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c4:	211c      	movs	r1, #28
 80012c6:	187b      	adds	r3, r7, r1
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012cc:	187b      	adds	r3, r7, r1
 80012ce:	2202      	movs	r2, #2
 80012d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d2:	187b      	adds	r3, r7, r1
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012de:	187b      	adds	r3, r7, r1
 80012e0:	2100      	movs	r1, #0
 80012e2:	0018      	movs	r0, r3
 80012e4:	f004 ff4e 	bl	8006184 <HAL_RCC_ClockConfig>
 80012e8:	1e03      	subs	r3, r0, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80012ec:	f000 fdce 	bl	8001e8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012f0:	003b      	movs	r3, r7
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	0292      	lsls	r2, r2, #10
 80012f6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80012f8:	003b      	movs	r3, r7
 80012fa:	2200      	movs	r2, #0
 80012fc:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012fe:	003b      	movs	r3, r7
 8001300:	0018      	movs	r0, r3
 8001302:	f005 f8bb 	bl	800647c <HAL_RCCEx_PeriphCLKConfig>
 8001306:	1e03      	subs	r3, r0, #0
 8001308:	d001      	beq.n	800130e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800130a:	f000 fdbf 	bl	8001e8c <Error_Handler>
  }
}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	46bd      	mov	sp, r7
 8001312:	b019      	add	sp, #100	; 0x64
 8001314:	bd90      	pop	{r4, r7, pc}
	...

08001318 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	0018      	movs	r0, r3
 8001322:	230c      	movs	r3, #12
 8001324:	001a      	movs	r2, r3
 8001326:	2100      	movs	r1, #0
 8001328:	f00b fe61 	bl	800cfee <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800132c:	4b87      	ldr	r3, [pc, #540]	; (800154c <MX_ADC_Init+0x234>)
 800132e:	4a88      	ldr	r2, [pc, #544]	; (8001550 <MX_ADC_Init+0x238>)
 8001330:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001332:	4b86      	ldr	r3, [pc, #536]	; (800154c <MX_ADC_Init+0x234>)
 8001334:	2200      	movs	r2, #0
 8001336:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001338:	4b84      	ldr	r3, [pc, #528]	; (800154c <MX_ADC_Init+0x234>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800133e:	4b83      	ldr	r3, [pc, #524]	; (800154c <MX_ADC_Init+0x234>)
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001344:	4b81      	ldr	r3, [pc, #516]	; (800154c <MX_ADC_Init+0x234>)
 8001346:	2201      	movs	r2, #1
 8001348:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800134a:	4b80      	ldr	r3, [pc, #512]	; (800154c <MX_ADC_Init+0x234>)
 800134c:	2204      	movs	r2, #4
 800134e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001350:	4b7e      	ldr	r3, [pc, #504]	; (800154c <MX_ADC_Init+0x234>)
 8001352:	2200      	movs	r2, #0
 8001354:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001356:	4b7d      	ldr	r3, [pc, #500]	; (800154c <MX_ADC_Init+0x234>)
 8001358:	2200      	movs	r2, #0
 800135a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800135c:	4b7b      	ldr	r3, [pc, #492]	; (800154c <MX_ADC_Init+0x234>)
 800135e:	2200      	movs	r2, #0
 8001360:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001362:	4b7a      	ldr	r3, [pc, #488]	; (800154c <MX_ADC_Init+0x234>)
 8001364:	2200      	movs	r2, #0
 8001366:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001368:	4b78      	ldr	r3, [pc, #480]	; (800154c <MX_ADC_Init+0x234>)
 800136a:	22c2      	movs	r2, #194	; 0xc2
 800136c:	32ff      	adds	r2, #255	; 0xff
 800136e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001370:	4b76      	ldr	r3, [pc, #472]	; (800154c <MX_ADC_Init+0x234>)
 8001372:	2200      	movs	r2, #0
 8001374:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001376:	4b75      	ldr	r3, [pc, #468]	; (800154c <MX_ADC_Init+0x234>)
 8001378:	2224      	movs	r2, #36	; 0x24
 800137a:	2100      	movs	r1, #0
 800137c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800137e:	4b73      	ldr	r3, [pc, #460]	; (800154c <MX_ADC_Init+0x234>)
 8001380:	2201      	movs	r2, #1
 8001382:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001384:	4b71      	ldr	r3, [pc, #452]	; (800154c <MX_ADC_Init+0x234>)
 8001386:	0018      	movs	r0, r3
 8001388:	f001 fc9e 	bl	8002cc8 <HAL_ADC_Init>
 800138c:	1e03      	subs	r3, r0, #0
 800138e:	d001      	beq.n	8001394 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001390:	f000 fd7c 	bl	8001e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2280      	movs	r2, #128	; 0x80
 800139e:	0152      	lsls	r2, r2, #5
 80013a0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2205      	movs	r2, #5
 80013a6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80013a8:	1d3a      	adds	r2, r7, #4
 80013aa:	4b68      	ldr	r3, [pc, #416]	; (800154c <MX_ADC_Init+0x234>)
 80013ac:	0011      	movs	r1, r2
 80013ae:	0018      	movs	r0, r3
 80013b0:	f001 ff5a 	bl	8003268 <HAL_ADC_ConfigChannel>
 80013b4:	1e03      	subs	r3, r0, #0
 80013b6:	d001      	beq.n	80013bc <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80013b8:	f000 fd68 	bl	8001e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80013c2:	1d3a      	adds	r2, r7, #4
 80013c4:	4b61      	ldr	r3, [pc, #388]	; (800154c <MX_ADC_Init+0x234>)
 80013c6:	0011      	movs	r1, r2
 80013c8:	0018      	movs	r0, r3
 80013ca:	f001 ff4d 	bl	8003268 <HAL_ADC_ConfigChannel>
 80013ce:	1e03      	subs	r3, r0, #0
 80013d0:	d001      	beq.n	80013d6 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80013d2:	f000 fd5b 	bl	8001e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2202      	movs	r2, #2
 80013da:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80013dc:	1d3a      	adds	r2, r7, #4
 80013de:	4b5b      	ldr	r3, [pc, #364]	; (800154c <MX_ADC_Init+0x234>)
 80013e0:	0011      	movs	r1, r2
 80013e2:	0018      	movs	r0, r3
 80013e4:	f001 ff40 	bl	8003268 <HAL_ADC_ConfigChannel>
 80013e8:	1e03      	subs	r3, r0, #0
 80013ea:	d001      	beq.n	80013f0 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 80013ec:	f000 fd4e 	bl	8001e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2203      	movs	r2, #3
 80013f4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80013f6:	1d3a      	adds	r2, r7, #4
 80013f8:	4b54      	ldr	r3, [pc, #336]	; (800154c <MX_ADC_Init+0x234>)
 80013fa:	0011      	movs	r1, r2
 80013fc:	0018      	movs	r0, r3
 80013fe:	f001 ff33 	bl	8003268 <HAL_ADC_ConfigChannel>
 8001402:	1e03      	subs	r3, r0, #0
 8001404:	d001      	beq.n	800140a <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8001406:	f000 fd41 	bl	8001e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2204      	movs	r2, #4
 800140e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001410:	1d3a      	adds	r2, r7, #4
 8001412:	4b4e      	ldr	r3, [pc, #312]	; (800154c <MX_ADC_Init+0x234>)
 8001414:	0011      	movs	r1, r2
 8001416:	0018      	movs	r0, r3
 8001418:	f001 ff26 	bl	8003268 <HAL_ADC_ConfigChannel>
 800141c:	1e03      	subs	r3, r0, #0
 800141e:	d001      	beq.n	8001424 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8001420:	f000 fd34 	bl	8001e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2205      	movs	r2, #5
 8001428:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800142a:	1d3a      	adds	r2, r7, #4
 800142c:	4b47      	ldr	r3, [pc, #284]	; (800154c <MX_ADC_Init+0x234>)
 800142e:	0011      	movs	r1, r2
 8001430:	0018      	movs	r0, r3
 8001432:	f001 ff19 	bl	8003268 <HAL_ADC_ConfigChannel>
 8001436:	1e03      	subs	r3, r0, #0
 8001438:	d001      	beq.n	800143e <MX_ADC_Init+0x126>
  {
    Error_Handler();
 800143a:	f000 fd27 	bl	8001e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2206      	movs	r2, #6
 8001442:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001444:	1d3a      	adds	r2, r7, #4
 8001446:	4b41      	ldr	r3, [pc, #260]	; (800154c <MX_ADC_Init+0x234>)
 8001448:	0011      	movs	r1, r2
 800144a:	0018      	movs	r0, r3
 800144c:	f001 ff0c 	bl	8003268 <HAL_ADC_ConfigChannel>
 8001450:	1e03      	subs	r3, r0, #0
 8001452:	d001      	beq.n	8001458 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8001454:	f000 fd1a 	bl	8001e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	2207      	movs	r2, #7
 800145c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800145e:	1d3a      	adds	r2, r7, #4
 8001460:	4b3a      	ldr	r3, [pc, #232]	; (800154c <MX_ADC_Init+0x234>)
 8001462:	0011      	movs	r1, r2
 8001464:	0018      	movs	r0, r3
 8001466:	f001 feff 	bl	8003268 <HAL_ADC_ConfigChannel>
 800146a:	1e03      	subs	r3, r0, #0
 800146c:	d001      	beq.n	8001472 <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 800146e:	f000 fd0d 	bl	8001e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	2208      	movs	r2, #8
 8001476:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001478:	1d3a      	adds	r2, r7, #4
 800147a:	4b34      	ldr	r3, [pc, #208]	; (800154c <MX_ADC_Init+0x234>)
 800147c:	0011      	movs	r1, r2
 800147e:	0018      	movs	r0, r3
 8001480:	f001 fef2 	bl	8003268 <HAL_ADC_ConfigChannel>
 8001484:	1e03      	subs	r3, r0, #0
 8001486:	d001      	beq.n	800148c <MX_ADC_Init+0x174>
  {
    Error_Handler();
 8001488:	f000 fd00 	bl	8001e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2209      	movs	r2, #9
 8001490:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001492:	1d3a      	adds	r2, r7, #4
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <MX_ADC_Init+0x234>)
 8001496:	0011      	movs	r1, r2
 8001498:	0018      	movs	r0, r3
 800149a:	f001 fee5 	bl	8003268 <HAL_ADC_ConfigChannel>
 800149e:	1e03      	subs	r3, r0, #0
 80014a0:	d001      	beq.n	80014a6 <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 80014a2:	f000 fcf3 	bl	8001e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	220a      	movs	r2, #10
 80014aa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014ac:	1d3a      	adds	r2, r7, #4
 80014ae:	4b27      	ldr	r3, [pc, #156]	; (800154c <MX_ADC_Init+0x234>)
 80014b0:	0011      	movs	r1, r2
 80014b2:	0018      	movs	r0, r3
 80014b4:	f001 fed8 	bl	8003268 <HAL_ADC_ConfigChannel>
 80014b8:	1e03      	subs	r3, r0, #0
 80014ba:	d001      	beq.n	80014c0 <MX_ADC_Init+0x1a8>
  {
    Error_Handler();
 80014bc:	f000 fce6 	bl	8001e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	220b      	movs	r2, #11
 80014c4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014c6:	1d3a      	adds	r2, r7, #4
 80014c8:	4b20      	ldr	r3, [pc, #128]	; (800154c <MX_ADC_Init+0x234>)
 80014ca:	0011      	movs	r1, r2
 80014cc:	0018      	movs	r0, r3
 80014ce:	f001 fecb 	bl	8003268 <HAL_ADC_ConfigChannel>
 80014d2:	1e03      	subs	r3, r0, #0
 80014d4:	d001      	beq.n	80014da <MX_ADC_Init+0x1c2>
  {
    Error_Handler();
 80014d6:	f000 fcd9 	bl	8001e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	220c      	movs	r2, #12
 80014de:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014e0:	1d3a      	adds	r2, r7, #4
 80014e2:	4b1a      	ldr	r3, [pc, #104]	; (800154c <MX_ADC_Init+0x234>)
 80014e4:	0011      	movs	r1, r2
 80014e6:	0018      	movs	r0, r3
 80014e8:	f001 febe 	bl	8003268 <HAL_ADC_ConfigChannel>
 80014ec:	1e03      	subs	r3, r0, #0
 80014ee:	d001      	beq.n	80014f4 <MX_ADC_Init+0x1dc>
  {
    Error_Handler();
 80014f0:	f000 fccc 	bl	8001e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	220d      	movs	r2, #13
 80014f8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014fa:	1d3a      	adds	r2, r7, #4
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <MX_ADC_Init+0x234>)
 80014fe:	0011      	movs	r1, r2
 8001500:	0018      	movs	r0, r3
 8001502:	f001 feb1 	bl	8003268 <HAL_ADC_ConfigChannel>
 8001506:	1e03      	subs	r3, r0, #0
 8001508:	d001      	beq.n	800150e <MX_ADC_Init+0x1f6>
  {
    Error_Handler();
 800150a:	f000 fcbf 	bl	8001e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800150e:	1d3b      	adds	r3, r7, #4
 8001510:	220e      	movs	r2, #14
 8001512:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001514:	1d3a      	adds	r2, r7, #4
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <MX_ADC_Init+0x234>)
 8001518:	0011      	movs	r1, r2
 800151a:	0018      	movs	r0, r3
 800151c:	f001 fea4 	bl	8003268 <HAL_ADC_ConfigChannel>
 8001520:	1e03      	subs	r3, r0, #0
 8001522:	d001      	beq.n	8001528 <MX_ADC_Init+0x210>
  {
    Error_Handler();
 8001524:	f000 fcb2 	bl	8001e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	220f      	movs	r2, #15
 800152c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800152e:	1d3a      	adds	r2, r7, #4
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_ADC_Init+0x234>)
 8001532:	0011      	movs	r1, r2
 8001534:	0018      	movs	r0, r3
 8001536:	f001 fe97 	bl	8003268 <HAL_ADC_ConfigChannel>
 800153a:	1e03      	subs	r3, r0, #0
 800153c:	d001      	beq.n	8001542 <MX_ADC_Init+0x22a>
  {
    Error_Handler();
 800153e:	f000 fca5 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	46bd      	mov	sp, r7
 8001546:	b004      	add	sp, #16
 8001548:	bd80      	pop	{r7, pc}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	2000064c 	.word	0x2000064c
 8001550:	40012400 	.word	0x40012400

08001554 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001558:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <MX_SPI1_Init+0x80>)
 800155a:	4a1f      	ldr	r2, [pc, #124]	; (80015d8 <MX_SPI1_Init+0x84>)
 800155c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <MX_SPI1_Init+0x80>)
 8001560:	2282      	movs	r2, #130	; 0x82
 8001562:	0052      	lsls	r2, r2, #1
 8001564:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <MX_SPI1_Init+0x80>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <MX_SPI1_Init+0x80>)
 800156e:	22e0      	movs	r2, #224	; 0xe0
 8001570:	00d2      	lsls	r2, r2, #3
 8001572:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001574:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <MX_SPI1_Init+0x80>)
 8001576:	2202      	movs	r2, #2
 8001578:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800157a:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <MX_SPI1_Init+0x80>)
 800157c:	2201      	movs	r2, #1
 800157e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <MX_SPI1_Init+0x80>)
 8001582:	2280      	movs	r2, #128	; 0x80
 8001584:	0092      	lsls	r2, r2, #2
 8001586:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <MX_SPI1_Init+0x80>)
 800158a:	2238      	movs	r2, #56	; 0x38
 800158c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_SPI1_Init+0x80>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <MX_SPI1_Init+0x80>)
 8001596:	2200      	movs	r2, #0
 8001598:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_SPI1_Init+0x80>)
 800159c:	2200      	movs	r2, #0
 800159e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_SPI1_Init+0x80>)
 80015a2:	2207      	movs	r2, #7
 80015a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <MX_SPI1_Init+0x80>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_SPI1_Init+0x80>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <MX_SPI1_Init+0x80>)
 80015b4:	0018      	movs	r0, r3
 80015b6:	f005 f85f 	bl	8006678 <HAL_SPI_Init>
 80015ba:	1e03      	subs	r3, r0, #0
 80015bc:	d001      	beq.n	80015c2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015be:	f000 fc65 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_SPI1_Init+0x88>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	2140      	movs	r1, #64	; 0x40
 80015c8:	0018      	movs	r0, r3
 80015ca:	f002 fb8e 	bl	8003cea <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000584 	.word	0x20000584
 80015d8:	40013000 	.word	0x40013000
 80015dc:	48000400 	.word	0x48000400

080015e0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	0018      	movs	r0, r3
 80015ea:	231c      	movs	r3, #28
 80015ec:	001a      	movs	r2, r3
 80015ee:	2100      	movs	r1, #0
 80015f0:	f00b fcfd 	bl	800cfee <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80015f4:	4b1d      	ldr	r3, [pc, #116]	; (800166c <MX_TIM14_Init+0x8c>)
 80015f6:	4a1e      	ldr	r2, [pc, #120]	; (8001670 <MX_TIM14_Init+0x90>)
 80015f8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16-1;
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <MX_TIM14_Init+0x8c>)
 80015fc:	220f      	movs	r2, #15
 80015fe:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <MX_TIM14_Init+0x8c>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <MX_TIM14_Init+0x8c>)
 8001608:	4a1a      	ldr	r2, [pc, #104]	; (8001674 <MX_TIM14_Init+0x94>)
 800160a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <MX_TIM14_Init+0x8c>)
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001612:	4b16      	ldr	r3, [pc, #88]	; (800166c <MX_TIM14_Init+0x8c>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <MX_TIM14_Init+0x8c>)
 800161a:	0018      	movs	r0, r3
 800161c:	f005 fd84 	bl	8007128 <HAL_TIM_Base_Init>
 8001620:	1e03      	subs	r3, r0, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8001624:	f000 fc32 	bl	8001e8c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8001628:	4b10      	ldr	r3, [pc, #64]	; (800166c <MX_TIM14_Init+0x8c>)
 800162a:	0018      	movs	r0, r3
 800162c:	f005 fe1e 	bl	800726c <HAL_TIM_OC_Init>
 8001630:	1e03      	subs	r3, r0, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8001634:	f000 fc2a 	bl	8001e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2200      	movs	r2, #0
 8001642:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001650:	1d39      	adds	r1, r7, #4
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_TIM14_Init+0x8c>)
 8001654:	2200      	movs	r2, #0
 8001656:	0018      	movs	r0, r3
 8001658:	f005 ff76 	bl	8007548 <HAL_TIM_OC_ConfigChannel>
 800165c:	1e03      	subs	r3, r0, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001660:	f000 fc14 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b008      	add	sp, #32
 800166a:	bd80      	pop	{r7, pc}
 800166c:	200005e8 	.word	0x200005e8
 8001670:	40002000 	.word	0x40002000
 8001674:	0000270f 	.word	0x0000270f

08001678 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_USART3_UART_Init+0x58>)
 800167e:	4a15      	ldr	r2, [pc, #84]	; (80016d4 <MX_USART3_UART_Init+0x5c>)
 8001680:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <MX_USART3_UART_Init+0x58>)
 8001684:	2296      	movs	r2, #150	; 0x96
 8001686:	0212      	lsls	r2, r2, #8
 8001688:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_USART3_UART_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_USART3_UART_Init+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_USART3_UART_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_USART3_UART_Init+0x58>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_USART3_UART_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_USART3_UART_Init+0x58>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_USART3_UART_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_USART3_UART_Init+0x58>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <MX_USART3_UART_Init+0x58>)
 80016bc:	0018      	movs	r0, r3
 80016be:	f006 fa47 	bl	8007b50 <HAL_UART_Init>
 80016c2:	1e03      	subs	r3, r0, #0
 80016c4:	d001      	beq.n	80016ca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80016c6:	f000 fbe1 	bl	8001e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000500 	.word	0x20000500
 80016d4:	40004800 	.word	0x40004800

080016d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b08b      	sub	sp, #44	; 0x2c
 80016dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016de:	2414      	movs	r4, #20
 80016e0:	193b      	adds	r3, r7, r4
 80016e2:	0018      	movs	r0, r3
 80016e4:	2314      	movs	r3, #20
 80016e6:	001a      	movs	r2, r3
 80016e8:	2100      	movs	r1, #0
 80016ea:	f00b fc80 	bl	800cfee <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ee:	4b6b      	ldr	r3, [pc, #428]	; (800189c <MX_GPIO_Init+0x1c4>)
 80016f0:	695a      	ldr	r2, [r3, #20]
 80016f2:	4b6a      	ldr	r3, [pc, #424]	; (800189c <MX_GPIO_Init+0x1c4>)
 80016f4:	2180      	movs	r1, #128	; 0x80
 80016f6:	03c9      	lsls	r1, r1, #15
 80016f8:	430a      	orrs	r2, r1
 80016fa:	615a      	str	r2, [r3, #20]
 80016fc:	4b67      	ldr	r3, [pc, #412]	; (800189c <MX_GPIO_Init+0x1c4>)
 80016fe:	695a      	ldr	r2, [r3, #20]
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	03db      	lsls	r3, r3, #15
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800170a:	4b64      	ldr	r3, [pc, #400]	; (800189c <MX_GPIO_Init+0x1c4>)
 800170c:	695a      	ldr	r2, [r3, #20]
 800170e:	4b63      	ldr	r3, [pc, #396]	; (800189c <MX_GPIO_Init+0x1c4>)
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	0309      	lsls	r1, r1, #12
 8001714:	430a      	orrs	r2, r1
 8001716:	615a      	str	r2, [r3, #20]
 8001718:	4b60      	ldr	r3, [pc, #384]	; (800189c <MX_GPIO_Init+0x1c4>)
 800171a:	695a      	ldr	r2, [r3, #20]
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	031b      	lsls	r3, r3, #12
 8001720:	4013      	ands	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	4b5d      	ldr	r3, [pc, #372]	; (800189c <MX_GPIO_Init+0x1c4>)
 8001728:	695a      	ldr	r2, [r3, #20]
 800172a:	4b5c      	ldr	r3, [pc, #368]	; (800189c <MX_GPIO_Init+0x1c4>)
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	0289      	lsls	r1, r1, #10
 8001730:	430a      	orrs	r2, r1
 8001732:	615a      	str	r2, [r3, #20]
 8001734:	4b59      	ldr	r3, [pc, #356]	; (800189c <MX_GPIO_Init+0x1c4>)
 8001736:	695a      	ldr	r2, [r3, #20]
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	029b      	lsls	r3, r3, #10
 800173c:	4013      	ands	r3, r2
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	4b56      	ldr	r3, [pc, #344]	; (800189c <MX_GPIO_Init+0x1c4>)
 8001744:	695a      	ldr	r2, [r3, #20]
 8001746:	4b55      	ldr	r3, [pc, #340]	; (800189c <MX_GPIO_Init+0x1c4>)
 8001748:	2180      	movs	r1, #128	; 0x80
 800174a:	02c9      	lsls	r1, r1, #11
 800174c:	430a      	orrs	r2, r1
 800174e:	615a      	str	r2, [r3, #20]
 8001750:	4b52      	ldr	r3, [pc, #328]	; (800189c <MX_GPIO_Init+0x1c4>)
 8001752:	695a      	ldr	r2, [r3, #20]
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	02db      	lsls	r3, r3, #11
 8001758:	4013      	ands	r3, r2
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800175e:	4b4f      	ldr	r3, [pc, #316]	; (800189c <MX_GPIO_Init+0x1c4>)
 8001760:	695a      	ldr	r2, [r3, #20]
 8001762:	4b4e      	ldr	r3, [pc, #312]	; (800189c <MX_GPIO_Init+0x1c4>)
 8001764:	2180      	movs	r1, #128	; 0x80
 8001766:	0349      	lsls	r1, r1, #13
 8001768:	430a      	orrs	r2, r1
 800176a:	615a      	str	r2, [r3, #20]
 800176c:	4b4b      	ldr	r3, [pc, #300]	; (800189c <MX_GPIO_Init+0x1c4>)
 800176e:	695a      	ldr	r2, [r3, #20]
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	035b      	lsls	r3, r3, #13
 8001774:	4013      	ands	r3, r2
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 800177a:	4949      	ldr	r1, [pc, #292]	; (80018a0 <MX_GPIO_Init+0x1c8>)
 800177c:	4b49      	ldr	r3, [pc, #292]	; (80018a4 <MX_GPIO_Init+0x1cc>)
 800177e:	2200      	movs	r2, #0
 8001780:	0018      	movs	r0, r3
 8001782:	f002 fab2 	bl	8003cea <HAL_GPIO_WritePin>
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8001786:	239e      	movs	r3, #158	; 0x9e
 8001788:	015b      	lsls	r3, r3, #5
 800178a:	4847      	ldr	r0, [pc, #284]	; (80018a8 <MX_GPIO_Init+0x1d0>)
 800178c:	2200      	movs	r2, #0
 800178e:	0019      	movs	r1, r3
 8001790:	f002 faab 	bl	8003cea <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8001794:	2380      	movs	r3, #128	; 0x80
 8001796:	0219      	lsls	r1, r3, #8
 8001798:	2390      	movs	r3, #144	; 0x90
 800179a:	05db      	lsls	r3, r3, #23
 800179c:	2200      	movs	r2, #0
 800179e:	0018      	movs	r0, r3
 80017a0:	f002 faa3 	bl	8003cea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin DEBUG_Pin SR_CLR_Pin SR_RCLK_Pin
                           SR_OE_Pin DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin
                           BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 80017a4:	193b      	adds	r3, r7, r4
 80017a6:	4a3e      	ldr	r2, [pc, #248]	; (80018a0 <MX_GPIO_Init+0x1c8>)
 80017a8:	601a      	str	r2, [r3, #0]
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017aa:	193b      	adds	r3, r7, r4
 80017ac:	2201      	movs	r2, #1
 80017ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	193b      	adds	r3, r7, r4
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	193b      	adds	r3, r7, r4
 80017b8:	2200      	movs	r2, #0
 80017ba:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017bc:	193b      	adds	r3, r7, r4
 80017be:	4a39      	ldr	r2, [pc, #228]	; (80018a4 <MX_GPIO_Init+0x1cc>)
 80017c0:	0019      	movs	r1, r3
 80017c2:	0010      	movs	r0, r2
 80017c4:	f002 f8fc 	bl	80039c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 80017c8:	0021      	movs	r1, r4
 80017ca:	187b      	adds	r3, r7, r1
 80017cc:	229e      	movs	r2, #158	; 0x9e
 80017ce:	0152      	lsls	r2, r2, #5
 80017d0:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	000c      	movs	r4, r1
 80017d4:	193b      	adds	r3, r7, r4
 80017d6:	2201      	movs	r2, #1
 80017d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	193b      	adds	r3, r7, r4
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	193b      	adds	r3, r7, r4
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e6:	193b      	adds	r3, r7, r4
 80017e8:	4a2f      	ldr	r2, [pc, #188]	; (80018a8 <MX_GPIO_Init+0x1d0>)
 80017ea:	0019      	movs	r1, r3
 80017ec:	0010      	movs	r0, r2
 80017ee:	f002 f8e7 	bl	80039c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 80017f2:	193b      	adds	r3, r7, r4
 80017f4:	22c0      	movs	r2, #192	; 0xc0
 80017f6:	0092      	lsls	r2, r2, #2
 80017f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017fa:	193b      	adds	r3, r7, r4
 80017fc:	2288      	movs	r2, #136	; 0x88
 80017fe:	0352      	lsls	r2, r2, #13
 8001800:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001802:	193b      	adds	r3, r7, r4
 8001804:	2202      	movs	r2, #2
 8001806:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	193a      	adds	r2, r7, r4
 800180a:	2390      	movs	r3, #144	; 0x90
 800180c:	05db      	lsls	r3, r3, #23
 800180e:	0011      	movs	r1, r2
 8001810:	0018      	movs	r0, r3
 8001812:	f002 f8d5 	bl	80039c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001816:	193b      	adds	r3, r7, r4
 8001818:	2280      	movs	r2, #128	; 0x80
 800181a:	00d2      	lsls	r2, r2, #3
 800181c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181e:	193b      	adds	r3, r7, r4
 8001820:	2200      	movs	r2, #0
 8001822:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	193b      	adds	r3, r7, r4
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800182a:	193a      	adds	r2, r7, r4
 800182c:	2390      	movs	r3, #144	; 0x90
 800182e:	05db      	lsls	r3, r3, #23
 8001830:	0011      	movs	r1, r2
 8001832:	0018      	movs	r0, r3
 8001834:	f002 f8c4 	bl	80039c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 8001838:	0021      	movs	r1, r4
 800183a:	187b      	adds	r3, r7, r1
 800183c:	2280      	movs	r2, #128	; 0x80
 800183e:	0212      	lsls	r2, r2, #8
 8001840:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001842:	000c      	movs	r4, r1
 8001844:	193b      	adds	r3, r7, r4
 8001846:	2201      	movs	r2, #1
 8001848:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	193b      	adds	r3, r7, r4
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	193b      	adds	r3, r7, r4
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 8001856:	193a      	adds	r2, r7, r4
 8001858:	2390      	movs	r3, #144	; 0x90
 800185a:	05db      	lsls	r3, r3, #23
 800185c:	0011      	movs	r1, r2
 800185e:	0018      	movs	r0, r3
 8001860:	f002 f8ae 	bl	80039c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 8001864:	193b      	adds	r3, r7, r4
 8001866:	2204      	movs	r2, #4
 8001868:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186a:	193b      	adds	r3, r7, r4
 800186c:	2200      	movs	r2, #0
 800186e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	193b      	adds	r3, r7, r4
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 8001876:	193b      	adds	r3, r7, r4
 8001878:	4a0c      	ldr	r2, [pc, #48]	; (80018ac <MX_GPIO_Init+0x1d4>)
 800187a:	0019      	movs	r1, r3
 800187c:	0010      	movs	r0, r2
 800187e:	f002 f89f 	bl	80039c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	2007      	movs	r0, #7
 8001888:	f001 ffea 	bl	8003860 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800188c:	2007      	movs	r0, #7
 800188e:	f001 fffc 	bl	800388a <HAL_NVIC_EnableIRQ>

}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	b00b      	add	sp, #44	; 0x2c
 8001898:	bd90      	pop	{r4, r7, pc}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	40021000 	.word	0x40021000
 80018a0:	0000f3c4 	.word	0x0000f3c4
 80018a4:	48000400 	.word	0x48000400
 80018a8:	48000800 	.word	0x48000800
 80018ac:	48000c00 	.word	0x48000c00

080018b0 <clkHandler>:

/* USER CODE BEGIN 4 */

//_____Hodiny_____//
void clkHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	//___nulování všech flagů___//
	flags.time.ten_ms = 0;
 80018b4:	4b3b      	ldr	r3, [pc, #236]	; (80019a4 <clkHandler+0xf4>)
 80018b6:	781a      	ldrb	r2, [r3, #0]
 80018b8:	2101      	movs	r1, #1
 80018ba:	438a      	bics	r2, r1
 80018bc:	701a      	strb	r2, [r3, #0]
	flags.time.sec	= 0;
 80018be:	4b39      	ldr	r3, [pc, #228]	; (80019a4 <clkHandler+0xf4>)
 80018c0:	781a      	ldrb	r2, [r3, #0]
 80018c2:	2102      	movs	r1, #2
 80018c4:	438a      	bics	r2, r1
 80018c6:	701a      	strb	r2, [r3, #0]
	flags.time.min	= 0;
 80018c8:	4b36      	ldr	r3, [pc, #216]	; (80019a4 <clkHandler+0xf4>)
 80018ca:	781a      	ldrb	r2, [r3, #0]
 80018cc:	2104      	movs	r1, #4
 80018ce:	438a      	bics	r2, r1
 80018d0:	701a      	strb	r2, [r3, #0]
	flags.time.hour	= 0;
 80018d2:	4b34      	ldr	r3, [pc, #208]	; (80019a4 <clkHandler+0xf4>)
 80018d4:	781a      	ldrb	r2, [r3, #0]
 80018d6:	2108      	movs	r1, #8
 80018d8:	438a      	bics	r2, r1
 80018da:	701a      	strb	r2, [r3, #0]

	sysTime[SYSTIME_TEN_MS]++;	//uplynulo dalších 10 ms
 80018dc:	4b32      	ldr	r3, [pc, #200]	; (80019a8 <clkHandler+0xf8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	4b31      	ldr	r3, [pc, #196]	; (80019a8 <clkHandler+0xf8>)
 80018e4:	601a      	str	r2, [r3, #0]

#ifdef __DEBUG_FAST__
	if((sysTime[SYSTIME_TEN_MS] % 10) == 0)	//0,1 s
#else
	if((sysTime[SYSTIME_TEN_MS] % 100) == 0)	//1 s
 80018e6:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <clkHandler+0xf8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2164      	movs	r1, #100	; 0x64
 80018ec:	0018      	movs	r0, r3
 80018ee:	f7fe fca3 	bl	8000238 <__aeabi_uidivmod>
 80018f2:	1e0b      	subs	r3, r1, #0
 80018f4:	d109      	bne.n	800190a <clkHandler+0x5a>
#endif
	{
		sysTime[SYSTIME_SEC]++;
 80018f6:	4b2c      	ldr	r3, [pc, #176]	; (80019a8 <clkHandler+0xf8>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <clkHandler+0xf8>)
 80018fe:	605a      	str	r2, [r3, #4]
		flags.time.sec = 1;
 8001900:	4b28      	ldr	r3, [pc, #160]	; (80019a4 <clkHandler+0xf4>)
 8001902:	781a      	ldrb	r2, [r3, #0]
 8001904:	2102      	movs	r1, #2
 8001906:	430a      	orrs	r2, r1
 8001908:	701a      	strb	r2, [r3, #0]
	}

	if(flags.time.sec)	//Uplynula 1 s
 800190a:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <clkHandler+0xf4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	079b      	lsls	r3, r3, #30
 8001910:	0fdb      	lsrs	r3, r3, #31
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b00      	cmp	r3, #0
 8001916:	d042      	beq.n	800199e <clkHandler+0xee>
	{
		if((sysTime[SYSTIME_SEC] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8001918:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <clkHandler+0xf8>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	213c      	movs	r1, #60	; 0x3c
 800191e:	0018      	movs	r0, r3
 8001920:	f7fe fc8a 	bl	8000238 <__aeabi_uidivmod>
 8001924:	1e0b      	subs	r3, r1, #0
 8001926:	d110      	bne.n	800194a <clkHandler+0x9a>
 8001928:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <clkHandler+0xf8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d00c      	beq.n	800194a <clkHandler+0x9a>
		{
			sysTime[SYSTIME_SEC] = 0;
 8001930:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <clkHandler+0xf8>)
 8001932:	2200      	movs	r2, #0
 8001934:	605a      	str	r2, [r3, #4]
			sysTime[SYSTIME_MIN]++;
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <clkHandler+0xf8>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	1c5a      	adds	r2, r3, #1
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <clkHandler+0xf8>)
 800193e:	609a      	str	r2, [r3, #8]
			flags.time.min = 1;
 8001940:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <clkHandler+0xf4>)
 8001942:	781a      	ldrb	r2, [r3, #0]
 8001944:	2104      	movs	r1, #4
 8001946:	430a      	orrs	r2, r1
 8001948:	701a      	strb	r2, [r3, #0]
		}

		if(flags.time.min)	//Uplynula 1 min
 800194a:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <clkHandler+0xf4>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	075b      	lsls	r3, r3, #29
 8001950:	0fdb      	lsrs	r3, r3, #31
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d022      	beq.n	800199e <clkHandler+0xee>
		{
			if((sysTime[SYSTIME_MIN] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8001958:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <clkHandler+0xf8>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	213c      	movs	r1, #60	; 0x3c
 800195e:	0018      	movs	r0, r3
 8001960:	f7fe fc6a 	bl	8000238 <__aeabi_uidivmod>
 8001964:	1e0b      	subs	r3, r1, #0
 8001966:	d11a      	bne.n	800199e <clkHandler+0xee>
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <clkHandler+0xf8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d016      	beq.n	800199e <clkHandler+0xee>
			{

				sysTime[SYSTIME_SEC] = 0;
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <clkHandler+0xf8>)
 8001972:	2200      	movs	r2, #0
 8001974:	605a      	str	r2, [r3, #4]
				sysTime[SYSTIME_MIN] = 0;
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <clkHandler+0xf8>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
				sysTime[SYSTIME_HOUR]++;
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <clkHandler+0xf8>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <clkHandler+0xf8>)
 8001984:	60da      	str	r2, [r3, #12]
				flags.time.hour = 1;
 8001986:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <clkHandler+0xf4>)
 8001988:	781a      	ldrb	r2, [r3, #0]
 800198a:	2108      	movs	r1, #8
 800198c:	430a      	orrs	r2, r1
 800198e:	701a      	strb	r2, [r3, #0]
				if(sysTime[SYSTIME_HOUR] >= 23)
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <clkHandler+0xf8>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	2b16      	cmp	r3, #22
 8001996:	d902      	bls.n	800199e <clkHandler+0xee>
					sysTime[SYSTIME_HOUR] = 0;
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <clkHandler+0xf8>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime[SYSTIME_HOUR], sysTime[SYSTIME_MIN], sysTime[SYSTIME_SEC]);
		pushStr(USB_Tx_Buffer, timeStamp, strlen(timeStamp));	//odešli čas
	}
#endif
}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000630 	.word	0x20000630
 80019a8:	2000023c 	.word	0x2000023c

080019ac <buttonDebounce>:

//_____Debounce tlačítek_____//
void buttonDebounce(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
	//___nulování flagů___//
	flags.buttons.butt0_ver = 0;
 80019b0:	4b3a      	ldr	r3, [pc, #232]	; (8001a9c <buttonDebounce+0xf0>)
 80019b2:	791a      	ldrb	r2, [r3, #4]
 80019b4:	2102      	movs	r1, #2
 80019b6:	438a      	bics	r2, r1
 80019b8:	711a      	strb	r2, [r3, #4]
	flags.buttons.butt1_ver = 0;
 80019ba:	4b38      	ldr	r3, [pc, #224]	; (8001a9c <buttonDebounce+0xf0>)
 80019bc:	791a      	ldrb	r2, [r3, #4]
 80019be:	2108      	movs	r1, #8
 80019c0:	438a      	bics	r2, r1
 80019c2:	711a      	strb	r2, [r3, #4]

	if(flags.buttons.butt0_int)	//interrupt tlačítka 0
 80019c4:	4b35      	ldr	r3, [pc, #212]	; (8001a9c <buttonDebounce+0xf0>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	07db      	lsls	r3, r3, #31
 80019ca:	0fdb      	lsrs	r3, r3, #31
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d02c      	beq.n	8001a2c <buttonDebounce+0x80>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 80019d2:	2380      	movs	r3, #128	; 0x80
 80019d4:	009a      	lsls	r2, r3, #2
 80019d6:	2390      	movs	r3, #144	; 0x90
 80019d8:	05db      	lsls	r3, r3, #23
 80019da:	0011      	movs	r1, r2
 80019dc:	0018      	movs	r0, r3
 80019de:	f002 f967 	bl	8003cb0 <HAL_GPIO_ReadPin>
 80019e2:	0003      	movs	r3, r0
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d107      	bne.n	80019f8 <buttonDebounce+0x4c>
		{
			button0_Debounce++;
 80019e8:	4b2d      	ldr	r3, [pc, #180]	; (8001aa0 <buttonDebounce+0xf4>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	3301      	adds	r3, #1
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <buttonDebounce+0xf4>)
 80019f4:	701a      	strb	r2, [r3, #0]
 80019f6:	e007      	b.n	8001a08 <buttonDebounce+0x5c>
		}
		else	//pin tlačítka na Low -> šlo o zákmit
		{
			button0_Debounce = 0;
 80019f8:	4b29      	ldr	r3, [pc, #164]	; (8001aa0 <buttonDebounce+0xf4>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt0_int = 0;
 80019fe:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <buttonDebounce+0xf0>)
 8001a00:	791a      	ldrb	r2, [r3, #4]
 8001a02:	2101      	movs	r1, #1
 8001a04:	438a      	bics	r2, r1
 8001a06:	711a      	strb	r2, [r3, #4]
		}
		if(button0_Debounce >= 5)	//pin tlačítka na High 5*10 ms -> ustálený stisk
 8001a08:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <buttonDebounce+0xf4>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d90c      	bls.n	8001a2c <buttonDebounce+0x80>
		{
			flags.buttons.butt0_ver = 1;
 8001a12:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <buttonDebounce+0xf0>)
 8001a14:	791a      	ldrb	r2, [r3, #4]
 8001a16:	2102      	movs	r1, #2
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt0_int = 0;
 8001a1c:	4b1f      	ldr	r3, [pc, #124]	; (8001a9c <buttonDebounce+0xf0>)
 8001a1e:	791a      	ldrb	r2, [r3, #4]
 8001a20:	2101      	movs	r1, #1
 8001a22:	438a      	bics	r2, r1
 8001a24:	711a      	strb	r2, [r3, #4]
			button0_Debounce = 0;
 8001a26:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <buttonDebounce+0xf4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
			//writeChar('a', 1, 5);
#endif
		}
	}

	if(flags.buttons.butt1_int)	//interrupt tlačítka 1
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <buttonDebounce+0xf0>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	075b      	lsls	r3, r3, #29
 8001a32:	0fdb      	lsrs	r3, r3, #31
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d02c      	beq.n	8001a94 <buttonDebounce+0xe8>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	005a      	lsls	r2, r3, #1
 8001a3e:	2390      	movs	r3, #144	; 0x90
 8001a40:	05db      	lsls	r3, r3, #23
 8001a42:	0011      	movs	r1, r2
 8001a44:	0018      	movs	r0, r3
 8001a46:	f002 f933 	bl	8003cb0 <HAL_GPIO_ReadPin>
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d107      	bne.n	8001a60 <buttonDebounce+0xb4>
		{
			button1_Debounce++;
 8001a50:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <buttonDebounce+0xf8>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	3301      	adds	r3, #1
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <buttonDebounce+0xf8>)
 8001a5c:	701a      	strb	r2, [r3, #0]
 8001a5e:	e007      	b.n	8001a70 <buttonDebounce+0xc4>
		}
		else	//pin tlačítka na Low -> šlo o zákmit
		{
			button1_Debounce = 0;
 8001a60:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <buttonDebounce+0xf8>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt1_int = 0;
 8001a66:	4b0d      	ldr	r3, [pc, #52]	; (8001a9c <buttonDebounce+0xf0>)
 8001a68:	791a      	ldrb	r2, [r3, #4]
 8001a6a:	2104      	movs	r1, #4
 8001a6c:	438a      	bics	r2, r1
 8001a6e:	711a      	strb	r2, [r3, #4]
		}
		if(button1_Debounce >= 5)	//pin tlačítka na High 5*10 ms -> ustálený stisk
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <buttonDebounce+0xf8>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d90c      	bls.n	8001a94 <buttonDebounce+0xe8>
		{
			flags.buttons.butt1_ver = 1;
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <buttonDebounce+0xf0>)
 8001a7c:	791a      	ldrb	r2, [r3, #4]
 8001a7e:	2108      	movs	r1, #8
 8001a80:	430a      	orrs	r2, r1
 8001a82:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt1_int = 0;
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <buttonDebounce+0xf0>)
 8001a86:	791a      	ldrb	r2, [r3, #4]
 8001a88:	2104      	movs	r1, #4
 8001a8a:	438a      	bics	r2, r1
 8001a8c:	711a      	strb	r2, [r3, #4]
			button1_Debounce = 0;
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <buttonDebounce+0xf8>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
#endif
		}
	}
}
 8001a94:	46c0      	nop			; (mov r8, r8)
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			; (mov r8, r8)
 8001a9c:	20000630 	.word	0x20000630
 8001aa0:	2000024c 	.word	0x2000024c
 8001aa4:	2000024d 	.word	0x2000024d

08001aa8 <UI_Handler>:

//_____Obsluha piezo + podsvícení displeje_____//
void UI_Handler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0

	static uint32_t startTime;	//proměnná pro časování dějů

	//___Nastavení stavu podle požadavků___//
	//___Stavy výše mají vyšší prioritu (error nejvyšší)___//
	if(flags.ui.error && (UI_State != ERROR))
 8001aac:	4b97      	ldr	r3, [pc, #604]	; (8001d0c <UI_Handler+0x264>)
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	075b      	lsls	r3, r3, #29
 8001ab2:	0fdb      	lsrs	r3, r3, #31
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d00b      	beq.n	8001ad2 <UI_Handler+0x2a>
 8001aba:	4b95      	ldr	r3, [pc, #596]	; (8001d10 <UI_Handler+0x268>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d007      	beq.n	8001ad2 <UI_Handler+0x2a>
	{
		UI_State = ERROR;
 8001ac2:	4b93      	ldr	r3, [pc, #588]	; (8001d10 <UI_Handler+0x268>)
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001ac8:	4b92      	ldr	r3, [pc, #584]	; (8001d14 <UI_Handler+0x26c>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b92      	ldr	r3, [pc, #584]	; (8001d18 <UI_Handler+0x270>)
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	e05e      	b.n	8001b90 <UI_Handler+0xe8>
	}
	else if(flags.ui.notice && (UI_State == OFF))
 8001ad2:	4b8e      	ldr	r3, [pc, #568]	; (8001d0c <UI_Handler+0x264>)
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	071b      	lsls	r3, r3, #28
 8001ad8:	0fdb      	lsrs	r3, r3, #31
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d010      	beq.n	8001b02 <UI_Handler+0x5a>
 8001ae0:	4b8b      	ldr	r3, [pc, #556]	; (8001d10 <UI_Handler+0x268>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10c      	bne.n	8001b02 <UI_Handler+0x5a>
	{
		UI_State = NOTICE;
 8001ae8:	4b89      	ldr	r3, [pc, #548]	; (8001d10 <UI_Handler+0x268>)
 8001aea:	2204      	movs	r2, #4
 8001aec:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001aee:	4b89      	ldr	r3, [pc, #548]	; (8001d14 <UI_Handler+0x26c>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4b89      	ldr	r3, [pc, #548]	; (8001d18 <UI_Handler+0x270>)
 8001af4:	601a      	str	r2, [r3, #0]
		flags.ui.notice = 0;
 8001af6:	4b85      	ldr	r3, [pc, #532]	; (8001d0c <UI_Handler+0x264>)
 8001af8:	7c1a      	ldrb	r2, [r3, #16]
 8001afa:	2108      	movs	r1, #8
 8001afc:	438a      	bics	r2, r1
 8001afe:	741a      	strb	r2, [r3, #16]
 8001b00:	e046      	b.n	8001b90 <UI_Handler+0xe8>
	}
	else if(flags.ui.done && (UI_State == OFF))
 8001b02:	4b82      	ldr	r3, [pc, #520]	; (8001d0c <UI_Handler+0x264>)
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	06db      	lsls	r3, r3, #27
 8001b08:	0fdb      	lsrs	r3, r3, #31
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d010      	beq.n	8001b32 <UI_Handler+0x8a>
 8001b10:	4b7f      	ldr	r3, [pc, #508]	; (8001d10 <UI_Handler+0x268>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10c      	bne.n	8001b32 <UI_Handler+0x8a>
	{
		UI_State = DONE;
 8001b18:	4b7d      	ldr	r3, [pc, #500]	; (8001d10 <UI_Handler+0x268>)
 8001b1a:	2205      	movs	r2, #5
 8001b1c:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001b1e:	4b7d      	ldr	r3, [pc, #500]	; (8001d14 <UI_Handler+0x26c>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	4b7d      	ldr	r3, [pc, #500]	; (8001d18 <UI_Handler+0x270>)
 8001b24:	601a      	str	r2, [r3, #0]
		flags.ui.done = 0;
 8001b26:	4b79      	ldr	r3, [pc, #484]	; (8001d0c <UI_Handler+0x264>)
 8001b28:	7c1a      	ldrb	r2, [r3, #16]
 8001b2a:	2110      	movs	r1, #16
 8001b2c:	438a      	bics	r2, r1
 8001b2e:	741a      	strb	r2, [r3, #16]
 8001b30:	e02e      	b.n	8001b90 <UI_Handler+0xe8>
	}
	else if(flags.ui.longBeep && (UI_State == OFF))
 8001b32:	4b76      	ldr	r3, [pc, #472]	; (8001d0c <UI_Handler+0x264>)
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	079b      	lsls	r3, r3, #30
 8001b38:	0fdb      	lsrs	r3, r3, #31
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d010      	beq.n	8001b62 <UI_Handler+0xba>
 8001b40:	4b73      	ldr	r3, [pc, #460]	; (8001d10 <UI_Handler+0x268>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10c      	bne.n	8001b62 <UI_Handler+0xba>
	{
		UI_State = LONG_BEEP;
 8001b48:	4b71      	ldr	r3, [pc, #452]	; (8001d10 <UI_Handler+0x268>)
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001b4e:	4b71      	ldr	r3, [pc, #452]	; (8001d14 <UI_Handler+0x26c>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4b71      	ldr	r3, [pc, #452]	; (8001d18 <UI_Handler+0x270>)
 8001b54:	601a      	str	r2, [r3, #0]
		flags.ui.longBeep = 0;
 8001b56:	4b6d      	ldr	r3, [pc, #436]	; (8001d0c <UI_Handler+0x264>)
 8001b58:	7c1a      	ldrb	r2, [r3, #16]
 8001b5a:	2102      	movs	r1, #2
 8001b5c:	438a      	bics	r2, r1
 8001b5e:	741a      	strb	r2, [r3, #16]
 8001b60:	e016      	b.n	8001b90 <UI_Handler+0xe8>
	}
	else if(flags.ui.shortBeep && (UI_State == OFF))
 8001b62:	4b6a      	ldr	r3, [pc, #424]	; (8001d0c <UI_Handler+0x264>)
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	07db      	lsls	r3, r3, #31
 8001b68:	0fdb      	lsrs	r3, r3, #31
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d00f      	beq.n	8001b90 <UI_Handler+0xe8>
 8001b70:	4b67      	ldr	r3, [pc, #412]	; (8001d10 <UI_Handler+0x268>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10b      	bne.n	8001b90 <UI_Handler+0xe8>
	{
		UI_State = SHORT_BEEP;
 8001b78:	4b65      	ldr	r3, [pc, #404]	; (8001d10 <UI_Handler+0x268>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001b7e:	4b65      	ldr	r3, [pc, #404]	; (8001d14 <UI_Handler+0x26c>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	4b65      	ldr	r3, [pc, #404]	; (8001d18 <UI_Handler+0x270>)
 8001b84:	601a      	str	r2, [r3, #0]
		flags.ui.shortBeep = 0;
 8001b86:	4b61      	ldr	r3, [pc, #388]	; (8001d0c <UI_Handler+0x264>)
 8001b88:	7c1a      	ldrb	r2, [r3, #16]
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	438a      	bics	r2, r1
 8001b8e:	741a      	strb	r2, [r3, #16]
	}

	switch(UI_State)
 8001b90:	4b5f      	ldr	r3, [pc, #380]	; (8001d10 <UI_Handler+0x268>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b05      	cmp	r3, #5
 8001b96:	d900      	bls.n	8001b9a <UI_Handler+0xf2>
 8001b98:	e0a0      	b.n	8001cdc <UI_Handler+0x234>
 8001b9a:	009a      	lsls	r2, r3, #2
 8001b9c:	4b5f      	ldr	r3, [pc, #380]	; (8001d1c <UI_Handler+0x274>)
 8001b9e:	18d3      	adds	r3, r2, r3
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	469f      	mov	pc, r3
	{
	case SHORT_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
 8001ba4:	2380      	movs	r3, #128	; 0x80
 8001ba6:	015b      	lsls	r3, r3, #5
 8001ba8:	485d      	ldr	r0, [pc, #372]	; (8001d20 <UI_Handler+0x278>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	0019      	movs	r1, r3
 8001bae:	f002 f89c 	bl	8003cea <HAL_GPIO_WritePin>
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 50)		//0,5s
 8001bb2:	4b58      	ldr	r3, [pc, #352]	; (8001d14 <UI_Handler+0x26c>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	4b58      	ldr	r3, [pc, #352]	; (8001d18 <UI_Handler+0x270>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b31      	cmp	r3, #49	; 0x31
 8001bbe:	d800      	bhi.n	8001bc2 <UI_Handler+0x11a>
 8001bc0:	e097      	b.n	8001cf2 <UI_Handler+0x24a>
		{
			UI_State = OFF;
 8001bc2:	4b53      	ldr	r3, [pc, #332]	; (8001d10 <UI_Handler+0x268>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	015b      	lsls	r3, r3, #5
 8001bcc:	4854      	ldr	r0, [pc, #336]	; (8001d20 <UI_Handler+0x278>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	0019      	movs	r1, r3
 8001bd2:	f002 f88a 	bl	8003cea <HAL_GPIO_WritePin>
		}
		break;
 8001bd6:	e08c      	b.n	8001cf2 <UI_Handler+0x24a>

	case LONG_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	015b      	lsls	r3, r3, #5
 8001bdc:	4850      	ldr	r0, [pc, #320]	; (8001d20 <UI_Handler+0x278>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	0019      	movs	r1, r3
 8001be2:	f002 f882 	bl	8003cea <HAL_GPIO_WritePin>
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 100)	//1s
 8001be6:	4b4b      	ldr	r3, [pc, #300]	; (8001d14 <UI_Handler+0x26c>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	4b4b      	ldr	r3, [pc, #300]	; (8001d18 <UI_Handler+0x270>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b63      	cmp	r3, #99	; 0x63
 8001bf2:	d800      	bhi.n	8001bf6 <UI_Handler+0x14e>
 8001bf4:	e07f      	b.n	8001cf6 <UI_Handler+0x24e>
		{
			UI_State = OFF;
 8001bf6:	4b46      	ldr	r3, [pc, #280]	; (8001d10 <UI_Handler+0x268>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	015b      	lsls	r3, r3, #5
 8001c00:	4847      	ldr	r0, [pc, #284]	; (8001d20 <UI_Handler+0x278>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	0019      	movs	r1, r3
 8001c06:	f002 f870 	bl	8003cea <HAL_GPIO_WritePin>
		}
		break;
 8001c0a:	e074      	b.n	8001cf6 <UI_Handler+0x24e>

	case ERROR:
		if(!flags.ui.error)	//dokud není požadavek zrušen provádí se error
 8001c0c:	4b3f      	ldr	r3, [pc, #252]	; (8001d0c <UI_Handler+0x264>)
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	075b      	lsls	r3, r3, #29
 8001c12:	0fdb      	lsrs	r3, r3, #31
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d102      	bne.n	8001c20 <UI_Handler+0x178>
			UI_State = OFF;
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	; (8001d10 <UI_Handler+0x268>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))	//každých 0,5s
 8001c20:	4b3c      	ldr	r3, [pc, #240]	; (8001d14 <UI_Handler+0x26c>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b3c      	ldr	r3, [pc, #240]	; (8001d18 <UI_Handler+0x270>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2132      	movs	r1, #50	; 0x32
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f7fe fb03 	bl	8000238 <__aeabi_uidivmod>
 8001c32:	1e0b      	subs	r3, r1, #0
 8001c34:	d161      	bne.n	8001cfa <UI_Handler+0x252>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	015b      	lsls	r3, r3, #5
 8001c3a:	4a39      	ldr	r2, [pc, #228]	; (8001d20 <UI_Handler+0x278>)
 8001c3c:	0019      	movs	r1, r3
 8001c3e:	0010      	movs	r0, r2
 8001c40:	f002 f870 	bl	8003d24 <HAL_GPIO_TogglePin>
#endif
			BACKLIGHT_RED_Toggle;
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	021a      	lsls	r2, r3, #8
 8001c48:	2390      	movs	r3, #144	; 0x90
 8001c4a:	05db      	lsls	r3, r3, #23
 8001c4c:	0011      	movs	r1, r2
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f002 f868 	bl	8003d24 <HAL_GPIO_TogglePin>
		}
		break;
 8001c54:	e051      	b.n	8001cfa <UI_Handler+0x252>

	case NOTICE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 35))	//každých 0,35s
 8001c56:	4b2f      	ldr	r3, [pc, #188]	; (8001d14 <UI_Handler+0x26c>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	4b2f      	ldr	r3, [pc, #188]	; (8001d18 <UI_Handler+0x270>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2123      	movs	r1, #35	; 0x23
 8001c62:	0018      	movs	r0, r3
 8001c64:	f7fe fae8 	bl	8000238 <__aeabi_uidivmod>
 8001c68:	1e0b      	subs	r3, r1, #0
 8001c6a:	d106      	bne.n	8001c7a <UI_Handler+0x1d2>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	015b      	lsls	r3, r3, #5
 8001c70:	4a2b      	ldr	r2, [pc, #172]	; (8001d20 <UI_Handler+0x278>)
 8001c72:	0019      	movs	r1, r3
 8001c74:	0010      	movs	r0, r2
 8001c76:	f002 f855 	bl	8003d24 <HAL_GPIO_TogglePin>
#endif
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 209)	//Po 2,1s ukonči
 8001c7a:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <UI_Handler+0x26c>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4b26      	ldr	r3, [pc, #152]	; (8001d18 <UI_Handler+0x270>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2bd0      	cmp	r3, #208	; 0xd0
 8001c86:	d93a      	bls.n	8001cfe <UI_Handler+0x256>
			UI_State = OFF;
 8001c88:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <UI_Handler+0x268>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
		break;
 8001c8e:	e036      	b.n	8001cfe <UI_Handler+0x256>

	case DONE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))	//každých 0,5s
 8001c90:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <UI_Handler+0x26c>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b20      	ldr	r3, [pc, #128]	; (8001d18 <UI_Handler+0x270>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2132      	movs	r1, #50	; 0x32
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f7fe facb 	bl	8000238 <__aeabi_uidivmod>
 8001ca2:	1e0b      	subs	r3, r1, #0
 8001ca4:	d10d      	bne.n	8001cc2 <UI_Handler+0x21a>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 8001ca6:	2380      	movs	r3, #128	; 0x80
 8001ca8:	015b      	lsls	r3, r3, #5
 8001caa:	4a1d      	ldr	r2, [pc, #116]	; (8001d20 <UI_Handler+0x278>)
 8001cac:	0019      	movs	r1, r3
 8001cae:	0010      	movs	r0, r2
 8001cb0:	f002 f838 	bl	8003d24 <HAL_GPIO_TogglePin>
#endif
			BACKLIGHT_GREEN_Toggle;
 8001cb4:	2380      	movs	r3, #128	; 0x80
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4a1a      	ldr	r2, [pc, #104]	; (8001d24 <UI_Handler+0x27c>)
 8001cba:	0019      	movs	r1, r3
 8001cbc:	0010      	movs	r0, r2
 8001cbe:	f002 f831 	bl	8003d24 <HAL_GPIO_TogglePin>
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 299)	//Po 3s ukonči
 8001cc2:	4b14      	ldr	r3, [pc, #80]	; (8001d14 <UI_Handler+0x26c>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <UI_Handler+0x270>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	1ad2      	subs	r2, r2, r3
 8001ccc:	2395      	movs	r3, #149	; 0x95
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d916      	bls.n	8001d02 <UI_Handler+0x25a>
			UI_State = OFF;
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <UI_Handler+0x268>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
		break;
 8001cda:	e012      	b.n	8001d02 <UI_Handler+0x25a>

	default:	//Ošetřuje i UI_State == OFF
		BUZZER_OFF;
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	015b      	lsls	r3, r3, #5
 8001ce0:	480f      	ldr	r0, [pc, #60]	; (8001d20 <UI_Handler+0x278>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	0019      	movs	r1, r3
 8001ce6:	f002 f800 	bl	8003cea <HAL_GPIO_WritePin>
#ifndef __DEBUG_BUTT__
		setColour(BACKLIGHT_OFF);
 8001cea:	2003      	movs	r0, #3
 8001cec:	f7fe ff6a 	bl	8000bc4 <setColour>
#endif
		break;
 8001cf0:	e008      	b.n	8001d04 <UI_Handler+0x25c>
		break;
 8001cf2:	46c0      	nop			; (mov r8, r8)
 8001cf4:	e006      	b.n	8001d04 <UI_Handler+0x25c>
		break;
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	e004      	b.n	8001d04 <UI_Handler+0x25c>
		break;
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	e002      	b.n	8001d04 <UI_Handler+0x25c>
		break;
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	e000      	b.n	8001d04 <UI_Handler+0x25c>
		break;
 8001d02:	46c0      	nop			; (mov r8, r8)

	}
}
 8001d04:	46c0      	nop			; (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	20000630 	.word	0x20000630
 8001d10:	2000024e 	.word	0x2000024e
 8001d14:	2000023c 	.word	0x2000023c
 8001d18:	20000250 	.word	0x20000250
 8001d1c:	0800d950 	.word	0x0800d950
 8001d20:	48000800 	.word	0x48000800
 8001d24:	48000400 	.word	0x48000400

08001d28 <measHandler>:

//_____Osluha AD převodníků_____//
void measHandler(void)
{
 8001d28:	b5b0      	push	{r4, r5, r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
	static ADC_State_Type ADC_State;

	//___Nulování flagů___//
	flags.meas.measComplete = 0;
 8001d2c:	4b51      	ldr	r3, [pc, #324]	; (8001e74 <measHandler+0x14c>)
 8001d2e:	7d1a      	ldrb	r2, [r3, #20]
 8001d30:	2102      	movs	r1, #2
 8001d32:	438a      	bics	r2, r1
 8001d34:	751a      	strb	r2, [r3, #20]
	flags.meas.measConflict = 0;
 8001d36:	4b4f      	ldr	r3, [pc, #316]	; (8001e74 <measHandler+0x14c>)
 8001d38:	7d1a      	ldrb	r2, [r3, #20]
 8001d3a:	2110      	movs	r1, #16
 8001d3c:	438a      	bics	r2, r1
 8001d3e:	751a      	strb	r2, [r3, #20]

	if(flags.meas.measRequest)
 8001d40:	4b4c      	ldr	r3, [pc, #304]	; (8001e74 <measHandler+0x14c>)
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	07db      	lsls	r3, r3, #31
 8001d46:	0fdb      	lsrs	r3, r3, #31
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d045      	beq.n	8001dda <measHandler+0xb2>
	{
		if(!flags.meas.measRunning)
 8001d4e:	4b49      	ldr	r3, [pc, #292]	; (8001e74 <measHandler+0x14c>)
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	071b      	lsls	r3, r3, #28
 8001d54:	0fdb      	lsrs	r3, r3, #31
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d134      	bne.n	8001dc6 <measHandler+0x9e>
		{
			flags.meas.measRunning = 1;
 8001d5c:	4b45      	ldr	r3, [pc, #276]	; (8001e74 <measHandler+0x14c>)
 8001d5e:	7d1a      	ldrb	r2, [r3, #20]
 8001d60:	2108      	movs	r1, #8
 8001d62:	430a      	orrs	r2, r1
 8001d64:	751a      	strb	r2, [r3, #20]
			if(currentPhase() == BATTERY_TEST || currentPhase() == BATTERY_TEST_DONE)	//probíhá battery test
 8001d66:	f000 fc89 	bl	800267c <currentPhase>
 8001d6a:	0003      	movs	r3, r0
 8001d6c:	2b05      	cmp	r3, #5
 8001d6e:	d004      	beq.n	8001d7a <measHandler+0x52>
 8001d70:	f000 fc84 	bl	800267c <currentPhase>
 8001d74:	0003      	movs	r3, r0
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d110      	bne.n	8001d9c <measHandler+0x74>
			{
				flags.meas.onlyBattery = 1;
 8001d7a:	4b3e      	ldr	r3, [pc, #248]	; (8001e74 <measHandler+0x14c>)
 8001d7c:	7d1a      	ldrb	r2, [r3, #20]
 8001d7e:	2120      	movs	r1, #32
 8001d80:	430a      	orrs	r2, r1
 8001d82:	751a      	strb	r2, [r3, #20]
				ADC_State = U_BAT;
 8001d84:	4b3c      	ldr	r3, [pc, #240]	; (8001e78 <measHandler+0x150>)
 8001d86:	220d      	movs	r2, #13
 8001d88:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 8001d8a:	4b3b      	ldr	r3, [pc, #236]	; (8001e78 <measHandler+0x150>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	1e59      	subs	r1, r3, #1
 8001d90:	4b3a      	ldr	r3, [pc, #232]	; (8001e7c <measHandler+0x154>)
 8001d92:	4a3b      	ldr	r2, [pc, #236]	; (8001e80 <measHandler+0x158>)
 8001d94:	0089      	lsls	r1, r1, #2
 8001d96:	588a      	ldr	r2, [r1, r2]
 8001d98:	629a      	str	r2, [r3, #40]	; 0x28
 8001d9a:	e00f      	b.n	8001dbc <measHandler+0x94>
			}
			else
			{
				flags.meas.onlyBattery = 0;
 8001d9c:	4b35      	ldr	r3, [pc, #212]	; (8001e74 <measHandler+0x14c>)
 8001d9e:	7d1a      	ldrb	r2, [r3, #20]
 8001da0:	2120      	movs	r1, #32
 8001da2:	438a      	bics	r2, r1
 8001da4:	751a      	strb	r2, [r3, #20]
				ADC_State = U15V;
 8001da6:	4b34      	ldr	r3, [pc, #208]	; (8001e78 <measHandler+0x150>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 8001dac:	4b32      	ldr	r3, [pc, #200]	; (8001e78 <measHandler+0x150>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	1e59      	subs	r1, r3, #1
 8001db2:	4b32      	ldr	r3, [pc, #200]	; (8001e7c <measHandler+0x154>)
 8001db4:	4a32      	ldr	r2, [pc, #200]	; (8001e80 <measHandler+0x158>)
 8001db6:	0089      	lsls	r1, r1, #2
 8001db8:	588a      	ldr	r2, [r1, r2]
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
			}
			HAL_ADC_Start_IT(&hadc);
 8001dbc:	4b31      	ldr	r3, [pc, #196]	; (8001e84 <measHandler+0x15c>)
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f001 f8c2 	bl	8002f48 <HAL_ADC_Start_IT>
 8001dc4:	e004      	b.n	8001dd0 <measHandler+0xa8>
		}
		else
		{
			flags.meas.measConflict = 1;
 8001dc6:	4b2b      	ldr	r3, [pc, #172]	; (8001e74 <measHandler+0x14c>)
 8001dc8:	7d1a      	ldrb	r2, [r3, #20]
 8001dca:	2110      	movs	r1, #16
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	751a      	strb	r2, [r3, #20]
		}
		flags.meas.measRequest = 0;
 8001dd0:	4b28      	ldr	r3, [pc, #160]	; (8001e74 <measHandler+0x14c>)
 8001dd2:	7d1a      	ldrb	r2, [r3, #20]
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	438a      	bics	r2, r1
 8001dd8:	751a      	strb	r2, [r3, #20]
	}

	if(ADC_State != ADC_WAITING)
 8001dda:	4b27      	ldr	r3, [pc, #156]	; (8001e78 <measHandler+0x150>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d045      	beq.n	8001e6e <measHandler+0x146>
	{
		if(flags.meas.measDataReady)
 8001de2:	4b24      	ldr	r3, [pc, #144]	; (8001e74 <measHandler+0x14c>)
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	075b      	lsls	r3, r3, #29
 8001de8:	0fdb      	lsrs	r3, r3, #31
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d03e      	beq.n	8001e6e <measHandler+0x146>
		{
			flags.meas.measDataReady = 0;
 8001df0:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <measHandler+0x14c>)
 8001df2:	7d1a      	ldrb	r2, [r3, #20]
 8001df4:	2104      	movs	r1, #4
 8001df6:	438a      	bics	r2, r1
 8001df8:	751a      	strb	r2, [r3, #20]

			if(ADC_State == U_BAT)	//U_BAT je vždy měřeno jako poslední
 8001dfa:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <measHandler+0x150>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b0d      	cmp	r3, #13
 8001e00:	d118      	bne.n	8001e34 <measHandler+0x10c>
			{
				ADC_Results[ADC_State-1] = HAL_ADC_GetValue(&hadc);
 8001e02:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <measHandler+0x150>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	1e5c      	subs	r4, r3, #1
 8001e08:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <measHandler+0x15c>)
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f001 f958 	bl	80030c0 <HAL_ADC_GetValue>
 8001e10:	0001      	movs	r1, r0
 8001e12:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <measHandler+0x160>)
 8001e14:	00a2      	lsls	r2, r4, #2
 8001e16:	50d1      	str	r1, [r2, r3]
				flags.meas.measComplete = 1;
 8001e18:	4b16      	ldr	r3, [pc, #88]	; (8001e74 <measHandler+0x14c>)
 8001e1a:	7d1a      	ldrb	r2, [r3, #20]
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	751a      	strb	r2, [r3, #20]
				flags.meas.measRunning = 0;
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <measHandler+0x14c>)
 8001e24:	7d1a      	ldrb	r2, [r3, #20]
 8001e26:	2108      	movs	r1, #8
 8001e28:	438a      	bics	r2, r1
 8001e2a:	751a      	strb	r2, [r3, #20]
				ADC_State = ADC_WAITING;
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <measHandler+0x150>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]

				HAL_ADC_Start_IT(&hadc);
			}
		}
	}
}
 8001e32:	e01c      	b.n	8001e6e <measHandler+0x146>
				ADC_Results[ADC_State-1] = HAL_ADC_GetValue(&hadc);
 8001e34:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <measHandler+0x150>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	1e5c      	subs	r4, r3, #1
 8001e3a:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <measHandler+0x15c>)
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f001 f93f 	bl	80030c0 <HAL_ADC_GetValue>
 8001e42:	0001      	movs	r1, r0
 8001e44:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <measHandler+0x160>)
 8001e46:	00a2      	lsls	r2, r4, #2
 8001e48:	50d1      	str	r1, [r2, r3]
				ADC_State += 2;	//Měř další kanál (měření proudů se přeskakuje)
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <measHandler+0x150>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	3302      	adds	r3, #2
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <measHandler+0x150>)
 8001e54:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];	//Nastav měřený kanál
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <measHandler+0x150>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	1e59      	subs	r1, r3, #1
 8001e5c:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <measHandler+0x154>)
 8001e5e:	4a08      	ldr	r2, [pc, #32]	; (8001e80 <measHandler+0x158>)
 8001e60:	0089      	lsls	r1, r1, #2
 8001e62:	588a      	ldr	r2, [r1, r2]
 8001e64:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_ADC_Start_IT(&hadc);
 8001e66:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <measHandler+0x15c>)
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f001 f86d 	bl	8002f48 <HAL_ADC_Start_IT>
}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bdb0      	pop	{r4, r5, r7, pc}
 8001e74:	20000630 	.word	0x20000630
 8001e78:	20000254 	.word	0x20000254
 8001e7c:	40012400 	.word	0x40012400
 8001e80:	0800d910 	.word	0x0800d910
 8001e84:	2000064c 	.word	0x2000064c
 8001e88:	200001fc 	.word	0x200001fc

08001e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e90:	b672      	cpsid	i
}
 8001e92:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <Error_Handler+0x8>

08001e96 <createBuffer>:

//_____Vytvoří buffer v dynamické paměti_____//
//Návratová hodnota - ukazatel na vytvořený buffer (NULL = chyba)
//Argument - velikost bufferu
RING_BUFFER* createBuffer(int size)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
	RING_BUFFER* buffer = (RING_BUFFER*) malloc(sizeof(RING_BUFFER));
 8001e9e:	2018      	movs	r0, #24
 8001ea0:	f00b f888 	bl	800cfb4 <malloc>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	60fb      	str	r3, [r7, #12]
	if(buffer == NULL)			//Nepodařilo se alokovat paměť
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <createBuffer+0x1c>
	{
		return NULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e022      	b.n	8001ef8 <createBuffer+0x62>
	}
	buffer->buffer = (char*) malloc(size * sizeof(char));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	f00b f87d 	bl	800cfb4 <malloc>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	001a      	movs	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	601a      	str	r2, [r3, #0]
	if(buffer->buffer == NULL)	//Nepodařilo se alokovat paměť
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d105      	bne.n	8001ed6 <createBuffer+0x40>
	{
		free(buffer);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f00b f87b 	bl	800cfc8 <free>
		return NULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e010      	b.n	8001ef8 <createBuffer+0x62>
	}

	buffer->bufferSize = size;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	605a      	str	r2, [r3, #4]
	buffer->filled = 0;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
	buffer->first = 0;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	60da      	str	r2, [r3, #12]
	buffer->last = size-1;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	1e5a      	subs	r2, r3, #1
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	611a      	str	r2, [r3, #16]
	buffer->status = BUFFER_EMPTY;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	751a      	strb	r2, [r3, #20]

	return buffer;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
}
 8001ef8:	0018      	movs	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	b004      	add	sp, #16
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <clearBuffer>:
	free(buffer);
}

//_____Uvede buffer do výchzího stavu_____//
void clearBuffer(RING_BUFFER* buffer)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	buffer->filled = 0;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
	buffer->first = 0;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	60da      	str	r2, [r3, #12]
	buffer->last = buffer->bufferSize-1;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	1e5a      	subs	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	611a      	str	r2, [r3, #16]
	buffer->status = BUFFER_EMPTY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	751a      	strb	r2, [r3, #20]
}
 8001f24:	46c0      	nop			; (mov r8, r8)
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b002      	add	sp, #8
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <push>:
	return buffer->status;
}

//_____Uloží znak do bufferu_____//
BUFFER_STATE push(RING_BUFFER* buffer, char character)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	000a      	movs	r2, r1
 8001f36:	1cfb      	adds	r3, r7, #3
 8001f38:	701a      	strb	r2, [r3, #0]
	if(buffer->status == BUFFER_FULL)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	7d1b      	ldrb	r3, [r3, #20]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d101      	bne.n	8001f46 <push+0x1a>
		return BUFFER_FULL;
 8001f42:	2302      	movs	r3, #2
 8001f44:	e025      	b.n	8001f92 <push+0x66>

	buffer->last = (buffer->last + 1) % (buffer->bufferSize);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	0019      	movs	r1, r3
 8001f52:	0010      	movs	r0, r2
 8001f54:	f7fe fa5a 	bl	800040c <__aeabi_idivmod>
 8001f58:	000b      	movs	r3, r1
 8001f5a:	001a      	movs	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	611a      	str	r2, [r3, #16]
	buffer->filled++;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	609a      	str	r2, [r3, #8]
	buffer->buffer[buffer->last] = character;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	18d3      	adds	r3, r2, r3
 8001f74:	1cfa      	adds	r2, r7, #3
 8001f76:	7812      	ldrb	r2, [r2, #0]
 8001f78:	701a      	strb	r2, [r3, #0]
	buffer->status = (buffer->filled >= buffer->bufferSize)? BUFFER_FULL : BUFFER_OK;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	db01      	blt.n	8001f8a <push+0x5e>
 8001f86:	2202      	movs	r2, #2
 8001f88:	e000      	b.n	8001f8c <push+0x60>
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	0018      	movs	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b002      	add	sp, #8
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <pushStr>:

//_____Uloží řetězec do bufferu_____//
BUFFER_STATE pushStr(RING_BUFFER* buffer, char* str, int len)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b086      	sub	sp, #24
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
	if(buffer->bufferSize < (buffer->filled + len))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6899      	ldr	r1, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	18cb      	adds	r3, r1, r3
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	da01      	bge.n	8001fba <pushStr+0x20>
		return BUFFER_FULL;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e013      	b.n	8001fe2 <pushStr+0x48>

	for(int i = 0; i < len; i++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	e00b      	b.n	8001fd8 <pushStr+0x3e>
	{
		push(buffer, str[i]);
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	18d3      	adds	r3, r2, r3
 8001fc6:	781a      	ldrb	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	0011      	movs	r1, r2
 8001fcc:	0018      	movs	r0, r3
 8001fce:	f7ff ffad 	bl	8001f2c <push>
	for(int i = 0; i < len; i++)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	697a      	ldr	r2, [r7, #20]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	dbef      	blt.n	8001fc0 <pushStr+0x26>
	}

	return BUFFER_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b006      	add	sp, #24
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <pop>:

//_____Přečte a odstraní poslední znak z bufferu_____//
//Znak bude uložen na adresu v argumentu
BUFFER_STATE pop(RING_BUFFER* buffer, char* character)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	6039      	str	r1, [r7, #0]
	if(buffer->status == BUFFER_EMPTY)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	7d1b      	ldrb	r3, [r3, #20]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <pop+0x16>
		return BUFFER_EMPTY;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e023      	b.n	8002048 <pop+0x5e>

	*character = buffer->buffer[buffer->first];
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	18d3      	adds	r3, r2, r3
 800200a:	781a      	ldrb	r2, [r3, #0]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	701a      	strb	r2, [r3, #0]
	buffer->first = (buffer->first + 1) % (buffer->bufferSize);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	0019      	movs	r1, r3
 800201c:	0010      	movs	r0, r2
 800201e:	f7fe f9f5 	bl	800040c <__aeabi_idivmod>
 8002022:	000b      	movs	r3, r1
 8002024:	001a      	movs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	60da      	str	r2, [r3, #12]
	buffer->filled--;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	1e5a      	subs	r2, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	609a      	str	r2, [r3, #8]
	buffer->status = (buffer->filled <= 0)? BUFFER_EMPTY : BUFFER_OK;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	1e5a      	subs	r2, r3, #1
 800203a:	4313      	orrs	r3, r2
 800203c:	0fdb      	lsrs	r3, r3, #31
 800203e:	b2db      	uxtb	r3, r3
 8002040:	001a      	movs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	b002      	add	sp, #8
 800204e:	bd80      	pop	{r7, pc}

08002050 <at>:

//_____Přečte a zachová hodnotu na dané pozici od prvního uloženého znaku_____//
BUFFER_STATE at(RING_BUFFER* buffer, int index, char* character)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
	if(buffer->status == BUFFER_EMPTY)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	7d1b      	ldrb	r3, [r3, #20]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d101      	bne.n	8002068 <at+0x18>
		return BUFFER_EMPTY;
 8002064:	2301      	movs	r3, #1
 8002066:	e01a      	b.n	800209e <at+0x4e>

	 if((index + 1) > buffer->filled)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	68ba      	ldr	r2, [r7, #8]
 800206e:	429a      	cmp	r2, r3
 8002070:	db01      	blt.n	8002076 <at+0x26>
		 return BUFFER_ERR;
 8002072:	2303      	movs	r3, #3
 8002074:	e013      	b.n	800209e <at+0x4e>

	 int tmp = (buffer->first + index) % (buffer->bufferSize);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	18d2      	adds	r2, r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	0019      	movs	r1, r3
 8002084:	0010      	movs	r0, r2
 8002086:	f7fe f9c1 	bl	800040c <__aeabi_idivmod>
 800208a:	000b      	movs	r3, r1
 800208c:	617b      	str	r3, [r7, #20]
	 *character = buffer->buffer[tmp];
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	18d3      	adds	r3, r2, r3
 8002096:	781a      	ldrb	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	701a      	strb	r2, [r3, #0]

	 return BUFFER_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	0018      	movs	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b006      	add	sp, #24
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <getCount>:



//_____Zjistí počet registrů_____//
static uint8_t getCount(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af02      	add	r7, sp, #8
	uint8_t question;
	uint8_t answer;
	regCount = 0;
 80020ae:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <getCount+0x7c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]

	do
	{
		question = 42;
 80020b4:	1dfb      	adds	r3, r7, #7
 80020b6:	222a      	movs	r2, #42	; 0x2a
 80020b8:	701a      	strb	r2, [r3, #0]
		answer = 0;
 80020ba:	1dbb      	adds	r3, r7, #6
 80020bc:	2200      	movs	r2, #0
 80020be:	701a      	strb	r2, [r3, #0]
		if(HAL_SPI_TransmitReceive(&hspi1, &question, &answer, 1, 100) != HAL_OK)
 80020c0:	1dba      	adds	r2, r7, #6
 80020c2:	1df9      	adds	r1, r7, #7
 80020c4:	4818      	ldr	r0, [pc, #96]	; (8002128 <getCount+0x80>)
 80020c6:	2364      	movs	r3, #100	; 0x64
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	2301      	movs	r3, #1
 80020cc:	f004 fce4 	bl	8006a98 <HAL_SPI_TransmitReceive>
 80020d0:	1e03      	subs	r3, r0, #0
 80020d2:	d001      	beq.n	80020d8 <getCount+0x30>
			return 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	e021      	b.n	800211c <getCount+0x74>
		regCount++;
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <getCount+0x7c>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	3301      	adds	r3, #1
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	4b10      	ldr	r3, [pc, #64]	; (8002124 <getCount+0x7c>)
 80020e2:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1);
 80020e4:	2001      	movs	r0, #1
 80020e6:	f000 fdcb 	bl	8002c80 <HAL_Delay>

		if(regCount >= 100)	//Ošetření nepřipojených relé desek
 80020ea:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <getCount+0x7c>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b63      	cmp	r3, #99	; 0x63
 80020f0:	d906      	bls.n	8002100 <getCount+0x58>
		{
			flags.conErr = 1;
 80020f2:	4b0e      	ldr	r3, [pc, #56]	; (800212c <getCount+0x84>)
 80020f4:	7e1a      	ldrb	r2, [r3, #24]
 80020f6:	2104      	movs	r1, #4
 80020f8:	430a      	orrs	r2, r1
 80020fa:	761a      	strb	r2, [r3, #24]
			return 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	e00d      	b.n	800211c <getCount+0x74>
		}
	}
	while(answer != question);
 8002100:	1dbb      	adds	r3, r7, #6
 8002102:	781a      	ldrb	r2, [r3, #0]
 8002104:	1dfb      	adds	r3, r7, #7
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d1d3      	bne.n	80020b4 <getCount+0xc>

	regCount--;
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <getCount+0x7c>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	3b01      	subs	r3, #1
 8002112:	b2da      	uxtb	r2, r3
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <getCount+0x7c>)
 8002116:	701a      	strb	r2, [r3, #0]

	return regCount;
 8002118:	4b02      	ldr	r3, [pc, #8]	; (8002124 <getCount+0x7c>)
 800211a:	781b      	ldrb	r3, [r3, #0]
}
 800211c:	0018      	movs	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	b002      	add	sp, #8
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000691 	.word	0x20000691
 8002128:	20000584 	.word	0x20000584
 800212c:	20000630 	.word	0x20000630

08002130 <regInit>:

//_____Inicializuje registry_____//
REG_STATE regInit(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
	//___Clear registrů___//
	REG_CLR_ACTIVE;
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	019b      	lsls	r3, r3, #6
 800213a:	4827      	ldr	r0, [pc, #156]	; (80021d8 <regInit+0xa8>)
 800213c:	2200      	movs	r2, #0
 800213e:	0019      	movs	r1, r3
 8002140:	f001 fdd3 	bl	8003cea <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002144:	2005      	movs	r0, #5
 8002146:	f000 fd9b 	bl	8002c80 <HAL_Delay>
	REG_CLR_INACTIVE;
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	019b      	lsls	r3, r3, #6
 800214e:	4822      	ldr	r0, [pc, #136]	; (80021d8 <regInit+0xa8>)
 8002150:	2201      	movs	r2, #1
 8002152:	0019      	movs	r1, r3
 8002154:	f001 fdc9 	bl	8003cea <HAL_GPIO_WritePin>

	REG_DISABLE;
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	481e      	ldr	r0, [pc, #120]	; (80021d8 <regInit+0xa8>)
 800215e:	2201      	movs	r2, #1
 8002160:	0019      	movs	r1, r3
 8002162:	f001 fdc2 	bl	8003cea <HAL_GPIO_WritePin>

		if(getCount() == 0)
 8002166:	f7ff ff9f 	bl	80020a8 <getCount>
 800216a:	1e03      	subs	r3, r0, #0
 800216c:	d101      	bne.n	8002172 <regInit+0x42>
		{
			return REG_CON_ERR;	//Connection error
 800216e:	2301      	movs	r3, #1
 8002170:	e02e      	b.n	80021d0 <regInit+0xa0>
		}

		regValues = (uint8_t*) malloc(regCount * sizeof(uint8_t));
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <regInit+0xac>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	0018      	movs	r0, r3
 8002178:	f00a ff1c 	bl	800cfb4 <malloc>
 800217c:	0003      	movs	r3, r0
 800217e:	001a      	movs	r2, r3
 8002180:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <regInit+0xb0>)
 8002182:	601a      	str	r2, [r3, #0]
		if(regValues == NULL)
 8002184:	4b16      	ldr	r3, [pc, #88]	; (80021e0 <regInit+0xb0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d104      	bne.n	8002196 <regInit+0x66>
		{
			regState = REG_ERR;
 800218c:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <regInit+0xb4>)
 800218e:	2202      	movs	r2, #2
 8002190:	701a      	strb	r2, [r3, #0]
			return REG_ERR;
 8002192:	2302      	movs	r3, #2
 8002194:	e01c      	b.n	80021d0 <regInit+0xa0>
		}

		for(int i = 0; i < regCount; i++)
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	e008      	b.n	80021ae <regInit+0x7e>
		{
			regValues[i] = 0;
 800219c:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <regInit+0xb0>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	18d3      	adds	r3, r2, r3
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < regCount; i++)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3301      	adds	r3, #1
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <regInit+0xac>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	001a      	movs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4293      	cmp	r3, r2
 80021b8:	dbf0      	blt.n	800219c <regInit+0x6c>
		}

		sendData();
 80021ba:	f000 f815 	bl	80021e8 <sendData>

	REG_ENABLE;
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	4805      	ldr	r0, [pc, #20]	; (80021d8 <regInit+0xa8>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	0019      	movs	r1, r3
 80021c8:	f001 fd8f 	bl	8003cea <HAL_GPIO_WritePin>

	return regState;
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <regInit+0xb4>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
}
 80021d0:	0018      	movs	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	b002      	add	sp, #8
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	48000400 	.word	0x48000400
 80021dc:	20000691 	.word	0x20000691
 80021e0:	2000068c 	.word	0x2000068c
 80021e4:	20000690 	.word	0x20000690

080021e8 <sendData>:

//_____Pošle data z regValues do registrů_____//
REG_STATE sendData(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
	if(HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)
 80021ec:	4b17      	ldr	r3, [pc, #92]	; (800224c <sendData+0x64>)
 80021ee:	6819      	ldr	r1, [r3, #0]
 80021f0:	4b17      	ldr	r3, [pc, #92]	; (8002250 <sendData+0x68>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	4817      	ldr	r0, [pc, #92]	; (8002254 <sendData+0x6c>)
 80021f8:	2364      	movs	r3, #100	; 0x64
 80021fa:	f004 faf5 	bl	80067e8 <HAL_SPI_Transmit>
 80021fe:	1e03      	subs	r3, r0, #0
 8002200:	d114      	bne.n	800222c <sendData+0x44>
	{
		//vytvoř pulz na RCLK¨
		REG_RCLK_HIGH;
 8002202:	2380      	movs	r3, #128	; 0x80
 8002204:	01db      	lsls	r3, r3, #7
 8002206:	4814      	ldr	r0, [pc, #80]	; (8002258 <sendData+0x70>)
 8002208:	2201      	movs	r2, #1
 800220a:	0019      	movs	r1, r3
 800220c:	f001 fd6d 	bl	8003cea <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8002210:	2001      	movs	r0, #1
 8002212:	f000 fd35 	bl	8002c80 <HAL_Delay>
		REG_RCLK_LOW;
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	01db      	lsls	r3, r3, #7
 800221a:	480f      	ldr	r0, [pc, #60]	; (8002258 <sendData+0x70>)
 800221c:	2200      	movs	r2, #0
 800221e:	0019      	movs	r1, r3
 8002220:	f001 fd63 	bl	8003cea <HAL_GPIO_WritePin>

		regState = REG_OK;
 8002224:	4b0d      	ldr	r3, [pc, #52]	; (800225c <sendData+0x74>)
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]
 800222a:	e009      	b.n	8002240 <sendData+0x58>
	}
	else
	{
		regState = REG_ERR;
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <sendData+0x74>)
 800222e:	2202      	movs	r2, #2
 8002230:	701a      	strb	r2, [r3, #0]

		REG_DISABLE;	//výstup ve stavu vysoké impedance (zabrání nechtěnému nastavení relé)
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	021b      	lsls	r3, r3, #8
 8002236:	4808      	ldr	r0, [pc, #32]	; (8002258 <sendData+0x70>)
 8002238:	2201      	movs	r2, #1
 800223a:	0019      	movs	r1, r3
 800223c:	f001 fd55 	bl	8003cea <HAL_GPIO_WritePin>
	}

	return regState;
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <sendData+0x74>)
 8002242:	781b      	ldrb	r3, [r3, #0]
}
 8002244:	0018      	movs	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	2000068c 	.word	0x2000068c
 8002250:	20000691 	.word	0x20000691
 8002254:	20000584 	.word	0x20000584
 8002258:	48000400 	.word	0x48000400
 800225c:	20000690 	.word	0x20000690

08002260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <HAL_MspInit+0x44>)
 8002268:	699a      	ldr	r2, [r3, #24]
 800226a:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <HAL_MspInit+0x44>)
 800226c:	2101      	movs	r1, #1
 800226e:	430a      	orrs	r2, r1
 8002270:	619a      	str	r2, [r3, #24]
 8002272:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <HAL_MspInit+0x44>)
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	2201      	movs	r2, #1
 8002278:	4013      	ands	r3, r2
 800227a:	607b      	str	r3, [r7, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <HAL_MspInit+0x44>)
 8002280:	69da      	ldr	r2, [r3, #28]
 8002282:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <HAL_MspInit+0x44>)
 8002284:	2180      	movs	r1, #128	; 0x80
 8002286:	0549      	lsls	r1, r1, #21
 8002288:	430a      	orrs	r2, r1
 800228a:	61da      	str	r2, [r3, #28]
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <HAL_MspInit+0x44>)
 800228e:	69da      	ldr	r2, [r3, #28]
 8002290:	2380      	movs	r3, #128	; 0x80
 8002292:	055b      	lsls	r3, r3, #21
 8002294:	4013      	ands	r3, r2
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	46bd      	mov	sp, r7
 800229e:	b002      	add	sp, #8
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	40021000 	.word	0x40021000

080022a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	b08d      	sub	sp, #52	; 0x34
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b0:	241c      	movs	r4, #28
 80022b2:	193b      	adds	r3, r7, r4
 80022b4:	0018      	movs	r0, r3
 80022b6:	2314      	movs	r3, #20
 80022b8:	001a      	movs	r2, r3
 80022ba:	2100      	movs	r1, #0
 80022bc:	f00a fe97 	bl	800cfee <memset>
  if(hadc->Instance==ADC1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a3a      	ldr	r2, [pc, #232]	; (80023b0 <HAL_ADC_MspInit+0x108>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d16d      	bne.n	80023a6 <HAL_ADC_MspInit+0xfe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022ca:	4b3a      	ldr	r3, [pc, #232]	; (80023b4 <HAL_ADC_MspInit+0x10c>)
 80022cc:	699a      	ldr	r2, [r3, #24]
 80022ce:	4b39      	ldr	r3, [pc, #228]	; (80023b4 <HAL_ADC_MspInit+0x10c>)
 80022d0:	2180      	movs	r1, #128	; 0x80
 80022d2:	0089      	lsls	r1, r1, #2
 80022d4:	430a      	orrs	r2, r1
 80022d6:	619a      	str	r2, [r3, #24]
 80022d8:	4b36      	ldr	r3, [pc, #216]	; (80023b4 <HAL_ADC_MspInit+0x10c>)
 80022da:	699a      	ldr	r2, [r3, #24]
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
 80022e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e6:	4b33      	ldr	r3, [pc, #204]	; (80023b4 <HAL_ADC_MspInit+0x10c>)
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	4b32      	ldr	r3, [pc, #200]	; (80023b4 <HAL_ADC_MspInit+0x10c>)
 80022ec:	2180      	movs	r1, #128	; 0x80
 80022ee:	0309      	lsls	r1, r1, #12
 80022f0:	430a      	orrs	r2, r1
 80022f2:	615a      	str	r2, [r3, #20]
 80022f4:	4b2f      	ldr	r3, [pc, #188]	; (80023b4 <HAL_ADC_MspInit+0x10c>)
 80022f6:	695a      	ldr	r2, [r3, #20]
 80022f8:	2380      	movs	r3, #128	; 0x80
 80022fa:	031b      	lsls	r3, r3, #12
 80022fc:	4013      	ands	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002302:	4b2c      	ldr	r3, [pc, #176]	; (80023b4 <HAL_ADC_MspInit+0x10c>)
 8002304:	695a      	ldr	r2, [r3, #20]
 8002306:	4b2b      	ldr	r3, [pc, #172]	; (80023b4 <HAL_ADC_MspInit+0x10c>)
 8002308:	2180      	movs	r1, #128	; 0x80
 800230a:	0289      	lsls	r1, r1, #10
 800230c:	430a      	orrs	r2, r1
 800230e:	615a      	str	r2, [r3, #20]
 8002310:	4b28      	ldr	r3, [pc, #160]	; (80023b4 <HAL_ADC_MspInit+0x10c>)
 8002312:	695a      	ldr	r2, [r3, #20]
 8002314:	2380      	movs	r3, #128	; 0x80
 8002316:	029b      	lsls	r3, r3, #10
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800231e:	4b25      	ldr	r3, [pc, #148]	; (80023b4 <HAL_ADC_MspInit+0x10c>)
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <HAL_ADC_MspInit+0x10c>)
 8002324:	2180      	movs	r1, #128	; 0x80
 8002326:	02c9      	lsls	r1, r1, #11
 8002328:	430a      	orrs	r2, r1
 800232a:	615a      	str	r2, [r3, #20]
 800232c:	4b21      	ldr	r3, [pc, #132]	; (80023b4 <HAL_ADC_MspInit+0x10c>)
 800232e:	695a      	ldr	r2, [r3, #20]
 8002330:	2380      	movs	r3, #128	; 0x80
 8002332:	02db      	lsls	r3, r3, #11
 8002334:	4013      	ands	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800233a:	193b      	adds	r3, r7, r4
 800233c:	223f      	movs	r2, #63	; 0x3f
 800233e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002340:	193b      	adds	r3, r7, r4
 8002342:	2203      	movs	r2, #3
 8002344:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	193b      	adds	r3, r7, r4
 8002348:	2200      	movs	r2, #0
 800234a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800234c:	193b      	adds	r3, r7, r4
 800234e:	4a1a      	ldr	r2, [pc, #104]	; (80023b8 <HAL_ADC_MspInit+0x110>)
 8002350:	0019      	movs	r1, r3
 8002352:	0010      	movs	r0, r2
 8002354:	f001 fb34 	bl	80039c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002358:	193b      	adds	r3, r7, r4
 800235a:	22ff      	movs	r2, #255	; 0xff
 800235c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800235e:	193b      	adds	r3, r7, r4
 8002360:	2203      	movs	r2, #3
 8002362:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	193b      	adds	r3, r7, r4
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236a:	193a      	adds	r2, r7, r4
 800236c:	2390      	movs	r3, #144	; 0x90
 800236e:	05db      	lsls	r3, r3, #23
 8002370:	0011      	movs	r1, r2
 8002372:	0018      	movs	r0, r3
 8002374:	f001 fb24 	bl	80039c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002378:	193b      	adds	r3, r7, r4
 800237a:	2203      	movs	r2, #3
 800237c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800237e:	193b      	adds	r3, r7, r4
 8002380:	2203      	movs	r2, #3
 8002382:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	193b      	adds	r3, r7, r4
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238a:	193b      	adds	r3, r7, r4
 800238c:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <HAL_ADC_MspInit+0x114>)
 800238e:	0019      	movs	r1, r3
 8002390:	0010      	movs	r0, r2
 8002392:	f001 fb15 	bl	80039c0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8002396:	2200      	movs	r2, #0
 8002398:	2100      	movs	r1, #0
 800239a:	200c      	movs	r0, #12
 800239c:	f001 fa60 	bl	8003860 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 80023a0:	200c      	movs	r0, #12
 80023a2:	f001 fa72 	bl	800388a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b00d      	add	sp, #52	; 0x34
 80023ac:	bd90      	pop	{r4, r7, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	40012400 	.word	0x40012400
 80023b4:	40021000 	.word	0x40021000
 80023b8:	48000800 	.word	0x48000800
 80023bc:	48000400 	.word	0x48000400

080023c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b08b      	sub	sp, #44	; 0x2c
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	2414      	movs	r4, #20
 80023ca:	193b      	adds	r3, r7, r4
 80023cc:	0018      	movs	r0, r3
 80023ce:	2314      	movs	r3, #20
 80023d0:	001a      	movs	r2, r3
 80023d2:	2100      	movs	r1, #0
 80023d4:	f00a fe0b 	bl	800cfee <memset>
  if(hspi->Instance==SPI1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a1c      	ldr	r2, [pc, #112]	; (8002450 <HAL_SPI_MspInit+0x90>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d131      	bne.n	8002446 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023e2:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <HAL_SPI_MspInit+0x94>)
 80023e4:	699a      	ldr	r2, [r3, #24]
 80023e6:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <HAL_SPI_MspInit+0x94>)
 80023e8:	2180      	movs	r1, #128	; 0x80
 80023ea:	0149      	lsls	r1, r1, #5
 80023ec:	430a      	orrs	r2, r1
 80023ee:	619a      	str	r2, [r3, #24]
 80023f0:	4b18      	ldr	r3, [pc, #96]	; (8002454 <HAL_SPI_MspInit+0x94>)
 80023f2:	699a      	ldr	r2, [r3, #24]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	015b      	lsls	r3, r3, #5
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023fe:	4b15      	ldr	r3, [pc, #84]	; (8002454 <HAL_SPI_MspInit+0x94>)
 8002400:	695a      	ldr	r2, [r3, #20]
 8002402:	4b14      	ldr	r3, [pc, #80]	; (8002454 <HAL_SPI_MspInit+0x94>)
 8002404:	2180      	movs	r1, #128	; 0x80
 8002406:	02c9      	lsls	r1, r1, #11
 8002408:	430a      	orrs	r2, r1
 800240a:	615a      	str	r2, [r3, #20]
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <HAL_SPI_MspInit+0x94>)
 800240e:	695a      	ldr	r2, [r3, #20]
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	02db      	lsls	r3, r3, #11
 8002414:	4013      	ands	r3, r2
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800241a:	0021      	movs	r1, r4
 800241c:	187b      	adds	r3, r7, r1
 800241e:	2238      	movs	r2, #56	; 0x38
 8002420:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	187b      	adds	r3, r7, r1
 8002424:	2202      	movs	r2, #2
 8002426:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	187b      	adds	r3, r7, r1
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800242e:	187b      	adds	r3, r7, r1
 8002430:	2203      	movs	r2, #3
 8002432:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002434:	187b      	adds	r3, r7, r1
 8002436:	2200      	movs	r2, #0
 8002438:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243a:	187b      	adds	r3, r7, r1
 800243c:	4a06      	ldr	r2, [pc, #24]	; (8002458 <HAL_SPI_MspInit+0x98>)
 800243e:	0019      	movs	r1, r3
 8002440:	0010      	movs	r0, r2
 8002442:	f001 fabd 	bl	80039c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	46bd      	mov	sp, r7
 800244a:	b00b      	add	sp, #44	; 0x2c
 800244c:	bd90      	pop	{r4, r7, pc}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	40013000 	.word	0x40013000
 8002454:	40021000 	.word	0x40021000
 8002458:	48000400 	.word	0x48000400

0800245c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0e      	ldr	r2, [pc, #56]	; (80024a4 <HAL_TIM_Base_MspInit+0x48>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d115      	bne.n	800249a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800246e:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <HAL_TIM_Base_MspInit+0x4c>)
 8002470:	69da      	ldr	r2, [r3, #28]
 8002472:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <HAL_TIM_Base_MspInit+0x4c>)
 8002474:	2180      	movs	r1, #128	; 0x80
 8002476:	0049      	lsls	r1, r1, #1
 8002478:	430a      	orrs	r2, r1
 800247a:	61da      	str	r2, [r3, #28]
 800247c:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <HAL_TIM_Base_MspInit+0x4c>)
 800247e:	69da      	ldr	r2, [r3, #28]
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4013      	ands	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800248a:	2200      	movs	r2, #0
 800248c:	2100      	movs	r1, #0
 800248e:	2013      	movs	r0, #19
 8002490:	f001 f9e6 	bl	8003860 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002494:	2013      	movs	r0, #19
 8002496:	f001 f9f8 	bl	800388a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800249a:	46c0      	nop			; (mov r8, r8)
 800249c:	46bd      	mov	sp, r7
 800249e:	b004      	add	sp, #16
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	40002000 	.word	0x40002000
 80024a8:	40021000 	.word	0x40021000

080024ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b08b      	sub	sp, #44	; 0x2c
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	2414      	movs	r4, #20
 80024b6:	193b      	adds	r3, r7, r4
 80024b8:	0018      	movs	r0, r3
 80024ba:	2314      	movs	r3, #20
 80024bc:	001a      	movs	r2, r3
 80024be:	2100      	movs	r1, #0
 80024c0:	f00a fd95 	bl	800cfee <memset>
  if(huart->Instance==USART3)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a20      	ldr	r2, [pc, #128]	; (800254c <HAL_UART_MspInit+0xa0>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d13a      	bne.n	8002544 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80024ce:	4b20      	ldr	r3, [pc, #128]	; (8002550 <HAL_UART_MspInit+0xa4>)
 80024d0:	69da      	ldr	r2, [r3, #28]
 80024d2:	4b1f      	ldr	r3, [pc, #124]	; (8002550 <HAL_UART_MspInit+0xa4>)
 80024d4:	2180      	movs	r1, #128	; 0x80
 80024d6:	02c9      	lsls	r1, r1, #11
 80024d8:	430a      	orrs	r2, r1
 80024da:	61da      	str	r2, [r3, #28]
 80024dc:	4b1c      	ldr	r3, [pc, #112]	; (8002550 <HAL_UART_MspInit+0xa4>)
 80024de:	69da      	ldr	r2, [r3, #28]
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	02db      	lsls	r3, r3, #11
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ea:	4b19      	ldr	r3, [pc, #100]	; (8002550 <HAL_UART_MspInit+0xa4>)
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	4b18      	ldr	r3, [pc, #96]	; (8002550 <HAL_UART_MspInit+0xa4>)
 80024f0:	2180      	movs	r1, #128	; 0x80
 80024f2:	0309      	lsls	r1, r1, #12
 80024f4:	430a      	orrs	r2, r1
 80024f6:	615a      	str	r2, [r3, #20]
 80024f8:	4b15      	ldr	r3, [pc, #84]	; (8002550 <HAL_UART_MspInit+0xa4>)
 80024fa:	695a      	ldr	r2, [r3, #20]
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	031b      	lsls	r3, r3, #12
 8002500:	4013      	ands	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002506:	193b      	adds	r3, r7, r4
 8002508:	22c0      	movs	r2, #192	; 0xc0
 800250a:	0112      	lsls	r2, r2, #4
 800250c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250e:	0021      	movs	r1, r4
 8002510:	187b      	adds	r3, r7, r1
 8002512:	2202      	movs	r2, #2
 8002514:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	187b      	adds	r3, r7, r1
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800251c:	187b      	adds	r3, r7, r1
 800251e:	2203      	movs	r2, #3
 8002520:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8002522:	187b      	adds	r3, r7, r1
 8002524:	2201      	movs	r2, #1
 8002526:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002528:	187b      	adds	r3, r7, r1
 800252a:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <HAL_UART_MspInit+0xa8>)
 800252c:	0019      	movs	r1, r3
 800252e:	0010      	movs	r0, r2
 8002530:	f001 fa46 	bl	80039c0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8002534:	2200      	movs	r2, #0
 8002536:	2100      	movs	r1, #0
 8002538:	201d      	movs	r0, #29
 800253a:	f001 f991 	bl	8003860 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 800253e:	201d      	movs	r0, #29
 8002540:	f001 f9a3 	bl	800388a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002544:	46c0      	nop			; (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	b00b      	add	sp, #44	; 0x2c
 800254a:	bd90      	pop	{r4, r7, pc}
 800254c:	40004800 	.word	0x40004800
 8002550:	40021000 	.word	0x40021000
 8002554:	48000800 	.word	0x48000800

08002558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800255c:	e7fe      	b.n	800255c <NMI_Handler+0x4>

0800255e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002562:	e7fe      	b.n	8002562 <HardFault_Handler+0x4>

08002564 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002568:	46c0      	nop			; (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002572:	46c0      	nop			; (mov r8, r8)
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800257c:	f000 fb64 	bl	8002c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002580:	46c0      	nop			; (mov r8, r8)
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	0018      	movs	r0, r3
 8002590:	f001 fbe4 	bl	8003d5c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	0018      	movs	r0, r3
 800259a:	f001 fbdf 	bl	8003d5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80025a8:	4b03      	ldr	r3, [pc, #12]	; (80025b8 <ADC1_COMP_IRQHandler+0x14>)
 80025aa:	0018      	movs	r0, r3
 80025ac:	f000 fd94 	bl	80030d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	2000064c 	.word	0x2000064c

080025bc <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80025c0:	4b03      	ldr	r3, [pc, #12]	; (80025d0 <TIM14_IRQHandler+0x14>)
 80025c2:	0018      	movs	r0, r3
 80025c4:	f004 feaa 	bl	800731c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80025c8:	46c0      	nop			; (mov r8, r8)
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	200005e8 	.word	0x200005e8

080025d4 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <USART3_4_IRQHandler+0x14>)
 80025da:	0018      	movs	r0, r3
 80025dc:	f005 fb0c 	bl	8007bf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	20000500 	.word	0x20000500

080025ec <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80025f0:	4b03      	ldr	r3, [pc, #12]	; (8002600 <USB_IRQHandler+0x14>)
 80025f2:	0018      	movs	r0, r3
 80025f4:	f001 fd04 	bl	8004000 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80025f8:	46c0      	nop			; (mov r8, r8)
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	20001338 	.word	0x20001338

08002604 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800260c:	4a14      	ldr	r2, [pc, #80]	; (8002660 <_sbrk+0x5c>)
 800260e:	4b15      	ldr	r3, [pc, #84]	; (8002664 <_sbrk+0x60>)
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002618:	4b13      	ldr	r3, [pc, #76]	; (8002668 <_sbrk+0x64>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d102      	bne.n	8002626 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002620:	4b11      	ldr	r3, [pc, #68]	; (8002668 <_sbrk+0x64>)
 8002622:	4a12      	ldr	r2, [pc, #72]	; (800266c <_sbrk+0x68>)
 8002624:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <_sbrk+0x64>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	18d3      	adds	r3, r2, r3
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	429a      	cmp	r2, r3
 8002632:	d207      	bcs.n	8002644 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002634:	f00a fc94 	bl	800cf60 <__errno>
 8002638:	0003      	movs	r3, r0
 800263a:	220c      	movs	r2, #12
 800263c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800263e:	2301      	movs	r3, #1
 8002640:	425b      	negs	r3, r3
 8002642:	e009      	b.n	8002658 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002644:	4b08      	ldr	r3, [pc, #32]	; (8002668 <_sbrk+0x64>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <_sbrk+0x64>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	18d2      	adds	r2, r2, r3
 8002652:	4b05      	ldr	r3, [pc, #20]	; (8002668 <_sbrk+0x64>)
 8002654:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002656:	68fb      	ldr	r3, [r7, #12]
}
 8002658:	0018      	movs	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	b006      	add	sp, #24
 800265e:	bd80      	pop	{r7, pc}
 8002660:	20004000 	.word	0x20004000
 8002664:	00000400 	.word	0x00000400
 8002668:	20000258 	.word	0x20000258
 800266c:	20001640 	.word	0x20001640

08002670 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002674:	46c0      	nop			; (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <currentPhase>:
static void startTest();
static void stopTest();

//_____Dotaz na aktuální fázi testu_____//
TEST_PHASE currentPhase()
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
	return testPhase;
 8002680:	4b02      	ldr	r3, [pc, #8]	; (800268c <currentPhase+0x10>)
 8002682:	781b      	ldrb	r3, [r3, #0]
}
 8002684:	0018      	movs	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	2000025c 	.word	0x2000025c

08002690 <testHandler>:

//_____Funkce pro řízení testu_____//
void testHandler()
{
 8002690:	b5b0      	push	{r4, r5, r7, lr}
 8002692:	b092      	sub	sp, #72	; 0x48
 8002694:	af02      	add	r7, sp, #8
	flags.testProgress = 0;
 8002696:	4bdb      	ldr	r3, [pc, #876]	; (8002a04 <testHandler+0x374>)
 8002698:	7e1a      	ldrb	r2, [r3, #24]
 800269a:	2102      	movs	r1, #2
 800269c:	438a      	bics	r2, r1
 800269e:	761a      	strb	r2, [r3, #24]

	if(flags.instructions.startRequest)
 80026a0:	4bd8      	ldr	r3, [pc, #864]	; (8002a04 <testHandler+0x374>)
 80026a2:	7b1b      	ldrb	r3, [r3, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	4013      	ands	r3, r2
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d034      	beq.n	8002718 <testHandler+0x88>
	{
		if(testPhase == WAITING)
 80026ae:	4bd6      	ldr	r3, [pc, #856]	; (8002a08 <testHandler+0x378>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d126      	bne.n	8002704 <testHandler+0x74>
		{
			if(flags.conErr)
 80026b6:	4bd3      	ldr	r3, [pc, #844]	; (8002a04 <testHandler+0x374>)
 80026b8:	7e1b      	ldrb	r3, [r3, #24]
 80026ba:	2204      	movs	r2, #4
 80026bc:	4013      	ands	r3, r2
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d01c      	beq.n	80026fe <testHandler+0x6e>
			{
				char txt[] = {"Relay PCB connection error\n"};
 80026c4:	211c      	movs	r1, #28
 80026c6:	187b      	adds	r3, r7, r1
 80026c8:	4ad0      	ldr	r2, [pc, #832]	; (8002a0c <testHandler+0x37c>)
 80026ca:	ca31      	ldmia	r2!, {r0, r4, r5}
 80026cc:	c331      	stmia	r3!, {r0, r4, r5}
 80026ce:	ca31      	ldmia	r2!, {r0, r4, r5}
 80026d0:	c331      	stmia	r3!, {r0, r4, r5}
 80026d2:	6812      	ldr	r2, [r2, #0]
 80026d4:	601a      	str	r2, [r3, #0]
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 80026d6:	4bce      	ldr	r3, [pc, #824]	; (8002a10 <testHandler+0x380>)
 80026d8:	681c      	ldr	r4, [r3, #0]
 80026da:	000d      	movs	r5, r1
 80026dc:	187b      	adds	r3, r7, r1
 80026de:	0018      	movs	r0, r3
 80026e0:	f7fd fd12 	bl	8000108 <strlen>
 80026e4:	0003      	movs	r3, r0
 80026e6:	001a      	movs	r2, r3
 80026e8:	197b      	adds	r3, r7, r5
 80026ea:	0019      	movs	r1, r3
 80026ec:	0020      	movs	r0, r4
 80026ee:	f7ff fc54 	bl	8001f9a <pushStr>
				flags.instructions.startRequest = 0;
 80026f2:	4bc4      	ldr	r3, [pc, #784]	; (8002a04 <testHandler+0x374>)
 80026f4:	7b1a      	ldrb	r2, [r3, #12]
 80026f6:	2101      	movs	r1, #1
 80026f8:	438a      	bics	r2, r1
 80026fa:	731a      	strb	r2, [r3, #12]
 80026fc:	e00c      	b.n	8002718 <testHandler+0x88>
			}
			else
			{
				startTest();
 80026fe:	f000 f999 	bl	8002a34 <startTest>
 8002702:	e009      	b.n	8002718 <testHandler+0x88>
			}
		}
		else
		{
			flags.startConflict = 1;
 8002704:	4bbf      	ldr	r3, [pc, #764]	; (8002a04 <testHandler+0x374>)
 8002706:	7e1a      	ldrb	r2, [r3, #24]
 8002708:	2101      	movs	r1, #1
 800270a:	430a      	orrs	r2, r1
 800270c:	761a      	strb	r2, [r3, #24]
			flags.instructions.startRequest = 0;
 800270e:	4bbd      	ldr	r3, [pc, #756]	; (8002a04 <testHandler+0x374>)
 8002710:	7b1a      	ldrb	r2, [r3, #12]
 8002712:	2101      	movs	r1, #1
 8002714:	438a      	bics	r2, r1
 8002716:	731a      	strb	r2, [r3, #12]
		}
	}
	if(flags.instructions.stopRequest)
 8002718:	4bba      	ldr	r3, [pc, #744]	; (8002a04 <testHandler+0x374>)
 800271a:	7b1b      	ldrb	r3, [r3, #12]
 800271c:	2202      	movs	r2, #2
 800271e:	4013      	ands	r3, r2
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <testHandler+0x9a>
	{
		stopTest();
 8002726:	f000 f9e7 	bl	8002af8 <stopTest>
	}

	switch(testPhase)
 800272a:	4bb7      	ldr	r3, [pc, #732]	; (8002a08 <testHandler+0x378>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b06      	cmp	r3, #6
 8002730:	d900      	bls.n	8002734 <testHandler+0xa4>
 8002732:	e17a      	b.n	8002a2a <testHandler+0x39a>
 8002734:	009a      	lsls	r2, r3, #2
 8002736:	4bb7      	ldr	r3, [pc, #732]	; (8002a14 <testHandler+0x384>)
 8002738:	18d3      	adds	r3, r2, r3
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	469f      	mov	pc, r3
	{
	case WAITING:
		flags.testProgress = 0;
 800273e:	4bb1      	ldr	r3, [pc, #708]	; (8002a04 <testHandler+0x374>)
 8002740:	7e1a      	ldrb	r2, [r3, #24]
 8002742:	2102      	movs	r1, #2
 8002744:	438a      	bics	r2, r1
 8002746:	761a      	strb	r2, [r3, #24]
		//flags.meas.measRequest = 0;
		break;
 8002748:	e16f      	b.n	8002a2a <testHandler+0x39a>
	case START:

		//___Pokud je dokončeno měření napětí naprázdno...____//
		if(flags.meas.measComplete)
 800274a:	4bae      	ldr	r3, [pc, #696]	; (8002a04 <testHandler+0x374>)
 800274c:	7d1b      	ldrb	r3, [r3, #20]
 800274e:	2202      	movs	r2, #2
 8002750:	4013      	ands	r3, r2
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d006      	beq.n	8002766 <testHandler+0xd6>
		{
			testPhase++;
 8002758:	4bab      	ldr	r3, [pc, #684]	; (8002a08 <testHandler+0x378>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	3301      	adds	r3, #1
 800275e:	b2da      	uxtb	r2, r3
 8002760:	4ba9      	ldr	r3, [pc, #676]	; (8002a08 <testHandler+0x378>)
 8002762:	701a      	strb	r2, [r3, #0]
		}
		else if(sysTime[SYSTIME_SEC] == 1)	//Pauza pro ustálení po sepnutí relé
		{
			flags.meas.measRequest = 1;
		}
		break;
 8002764:	e146      	b.n	80029f4 <testHandler+0x364>
		else if(sysTime[SYSTIME_SEC] == 1)	//Pauza pro ustálení po sepnutí relé
 8002766:	4bac      	ldr	r3, [pc, #688]	; (8002a18 <testHandler+0x388>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d000      	beq.n	8002770 <testHandler+0xe0>
 800276e:	e141      	b.n	80029f4 <testHandler+0x364>
			flags.meas.measRequest = 1;
 8002770:	4ba4      	ldr	r3, [pc, #656]	; (8002a04 <testHandler+0x374>)
 8002772:	7d1a      	ldrb	r2, [r3, #20]
 8002774:	2101      	movs	r1, #1
 8002776:	430a      	orrs	r2, r1
 8002778:	751a      	strb	r2, [r3, #20]
		break;
 800277a:	e13b      	b.n	80029f4 <testHandler+0x364>
	case START_DONE:
		//___Připojení zátěže___//
		LOAD_MIN_ON;
 800277c:	4ba7      	ldr	r3, [pc, #668]	; (8002a1c <testHandler+0x38c>)
 800277e:	2201      	movs	r2, #1
 8002780:	2180      	movs	r1, #128	; 0x80
 8002782:	0018      	movs	r0, r3
 8002784:	f001 fab1 	bl	8003cea <HAL_GPIO_WritePin>
		LOAD_MAX_ON;
 8002788:	4ba4      	ldr	r3, [pc, #656]	; (8002a1c <testHandler+0x38c>)
 800278a:	2201      	movs	r2, #1
 800278c:	2140      	movs	r1, #64	; 0x40
 800278e:	0018      	movs	r0, r3
 8002790:	f001 faab 	bl	8003cea <HAL_GPIO_WritePin>

		testPhase++;
 8002794:	4b9c      	ldr	r3, [pc, #624]	; (8002a08 <testHandler+0x378>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	3301      	adds	r3, #1
 800279a:	b2da      	uxtb	r2, r3
 800279c:	4b9a      	ldr	r3, [pc, #616]	; (8002a08 <testHandler+0x378>)
 800279e:	701a      	strb	r2, [r3, #0]
		flags.testProgress = 1;
 80027a0:	4b98      	ldr	r3, [pc, #608]	; (8002a04 <testHandler+0x374>)
 80027a2:	7e1a      	ldrb	r2, [r3, #24]
 80027a4:	2102      	movs	r1, #2
 80027a6:	430a      	orrs	r2, r1
 80027a8:	761a      	strb	r2, [r3, #24]
		//flags.ui.shortBeep = 1;

		PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//blikání druhé progress led
 80027aa:	4b9d      	ldr	r3, [pc, #628]	; (8002a20 <testHandler+0x390>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	781a      	ldrb	r2, [r3, #0]
 80027b0:	4b9b      	ldr	r3, [pc, #620]	; (8002a20 <testHandler+0x390>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2120      	movs	r1, #32
 80027b6:	430a      	orrs	r2, r1
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	701a      	strb	r2, [r3, #0]
		sendData();
 80027bc:	f7ff fd14 	bl	80021e8 <sendData>

		//___Nulování času___//
		for(int i = 1; i < 4; i++)
 80027c0:	2301      	movs	r3, #1
 80027c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027c4:	e007      	b.n	80027d6 <testHandler+0x146>
		{
			sysTime[i] = 0;
 80027c6:	4b94      	ldr	r3, [pc, #592]	; (8002a18 <testHandler+0x388>)
 80027c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027ca:	0092      	lsls	r2, r2, #2
 80027cc:	2100      	movs	r1, #0
 80027ce:	50d1      	str	r1, [r2, r3]
		for(int i = 1; i < 4; i++)
 80027d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027d2:	3301      	adds	r3, #1
 80027d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027d8:	2b03      	cmp	r3, #3
 80027da:	ddf4      	ble.n	80027c6 <testHandler+0x136>
		}
		break;
 80027dc:	e125      	b.n	8002a2a <testHandler+0x39a>
	case MAIN_TEST:
		if(flags.time.sec)	//___Změna času___//
 80027de:	4b89      	ldr	r3, [pc, #548]	; (8002a04 <testHandler+0x374>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2202      	movs	r2, #2
 80027e4:	4013      	ands	r3, r2
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d026      	beq.n	800283a <testHandler+0x1aa>
		{
			//___Zobrazení času na displej___//
			char time[9] = {0};
 80027ec:	2510      	movs	r5, #16
 80027ee:	197b      	adds	r3, r7, r5
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	3304      	adds	r3, #4
 80027f6:	2205      	movs	r2, #5
 80027f8:	2100      	movs	r1, #0
 80027fa:	0018      	movs	r0, r3
 80027fc:	f00a fbf7 	bl	800cfee <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 8002800:	4b85      	ldr	r3, [pc, #532]	; (8002a18 <testHandler+0x388>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	223c      	movs	r2, #60	; 0x3c
 8002806:	1ad2      	subs	r2, r2, r3
 8002808:	4b83      	ldr	r3, [pc, #524]	; (8002a18 <testHandler+0x388>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	213c      	movs	r1, #60	; 0x3c
 800280e:	1acc      	subs	r4, r1, r3
 8002810:	4b81      	ldr	r3, [pc, #516]	; (8002a18 <testHandler+0x388>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	2103      	movs	r1, #3
 8002816:	1acb      	subs	r3, r1, r3
 8002818:	4982      	ldr	r1, [pc, #520]	; (8002a24 <testHandler+0x394>)
 800281a:	1978      	adds	r0, r7, r5
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	0023      	movs	r3, r4
 8002820:	f00a fca8 	bl	800d174 <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED2);	//blikání druhé progress led
 8002824:	4b7e      	ldr	r3, [pc, #504]	; (8002a20 <testHandler+0x390>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	781a      	ldrb	r2, [r3, #0]
 800282a:	4b7d      	ldr	r3, [pc, #500]	; (8002a20 <testHandler+0x390>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2110      	movs	r1, #16
 8002830:	404a      	eors	r2, r1
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	701a      	strb	r2, [r3, #0]
			sendData();
 8002836:	f7ff fcd7 	bl	80021e8 <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
 800283a:	4b77      	ldr	r3, [pc, #476]	; (8002a18 <testHandler+0x388>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00b      	beq.n	800285a <testHandler+0x1ca>
 8002842:	4b70      	ldr	r3, [pc, #448]	; (8002a04 <testHandler+0x374>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2204      	movs	r2, #4
 8002848:	4013      	ands	r3, r2
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d004      	beq.n	800285a <testHandler+0x1ca>
#else
		if(!(sysTime[SYSTIME_MIN] % 10) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých deset minut___//
#endif
		{
			flags.meas.measRequest = 1;
 8002850:	4b6c      	ldr	r3, [pc, #432]	; (8002a04 <testHandler+0x374>)
 8002852:	7d1a      	ldrb	r2, [r3, #20]
 8002854:	2101      	movs	r1, #1
 8002856:	430a      	orrs	r2, r1
 8002858:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 10)	//___Po deseti minutách je měření u konce___//
 800285a:	4b6f      	ldr	r3, [pc, #444]	; (8002a18 <testHandler+0x388>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	2b09      	cmp	r3, #9
 8002860:	dc00      	bgt.n	8002864 <testHandler+0x1d4>
 8002862:	e0c9      	b.n	80029f8 <testHandler+0x368>
#else
		if(sysTime[SYSTIME_HOUR] >= 3)	//___Po třech hodinách je měření u konce___//
#endif
		{
			testPhase++;
 8002864:	4b68      	ldr	r3, [pc, #416]	; (8002a08 <testHandler+0x378>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	3301      	adds	r3, #1
 800286a:	b2da      	uxtb	r2, r3
 800286c:	4b66      	ldr	r3, [pc, #408]	; (8002a08 <testHandler+0x378>)
 800286e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002870:	e0c2      	b.n	80029f8 <testHandler+0x368>
	case MAIN_TEST_DONE:
		if(!flags.meas.measRunning)
 8002872:	4b64      	ldr	r3, [pc, #400]	; (8002a04 <testHandler+0x374>)
 8002874:	7d1b      	ldrb	r3, [r3, #20]
 8002876:	2208      	movs	r2, #8
 8002878:	4013      	ands	r3, r2
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d000      	beq.n	8002882 <testHandler+0x1f2>
 8002880:	e0bc      	b.n	80029fc <testHandler+0x36c>
		{
			flags.ui.notice = 1;
 8002882:	4b60      	ldr	r3, [pc, #384]	; (8002a04 <testHandler+0x374>)
 8002884:	7c1a      	ldrb	r2, [r3, #16]
 8002886:	2108      	movs	r1, #8
 8002888:	430a      	orrs	r2, r1
 800288a:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 800288c:	4b5d      	ldr	r3, [pc, #372]	; (8002a04 <testHandler+0x374>)
 800288e:	7e1a      	ldrb	r2, [r3, #24]
 8002890:	2102      	movs	r1, #2
 8002892:	430a      	orrs	r2, r1
 8002894:	761a      	strb	r2, [r3, #24]

			testPhase++;
 8002896:	4b5c      	ldr	r3, [pc, #368]	; (8002a08 <testHandler+0x378>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	3301      	adds	r3, #1
 800289c:	b2da      	uxtb	r2, r3
 800289e:	4b5a      	ldr	r3, [pc, #360]	; (8002a08 <testHandler+0x378>)
 80028a0:	701a      	strb	r2, [r3, #0]

			LOAD_MIN_OFF;
 80028a2:	4b5e      	ldr	r3, [pc, #376]	; (8002a1c <testHandler+0x38c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	2180      	movs	r1, #128	; 0x80
 80028a8:	0018      	movs	r0, r3
 80028aa:	f001 fa1e 	bl	8003cea <HAL_GPIO_WritePin>
			LOAD_MAX_OFF;
 80028ae:	4b5b      	ldr	r3, [pc, #364]	; (8002a1c <testHandler+0x38c>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	2140      	movs	r1, #64	; 0x40
 80028b4:	0018      	movs	r0, r3
 80028b6:	f001 fa18 	bl	8003cea <HAL_GPIO_WritePin>

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED2);
 80028ba:	4b59      	ldr	r3, [pc, #356]	; (8002a20 <testHandler+0x390>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	781a      	ldrb	r2, [r3, #0]
 80028c0:	4b57      	ldr	r3, [pc, #348]	; (8002a20 <testHandler+0x390>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2110      	movs	r1, #16
 80028c6:	430a      	orrs	r2, r1
 80028c8:	b2d2      	uxtb	r2, r2
 80028ca:	701a      	strb	r2, [r3, #0]
			PWR_OFF(*sourceInTesting);
 80028cc:	4b54      	ldr	r3, [pc, #336]	; (8002a20 <testHandler+0x390>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	781a      	ldrb	r2, [r3, #0]
 80028d2:	4b53      	ldr	r3, [pc, #332]	; (8002a20 <testHandler+0x390>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2101      	movs	r1, #1
 80028d8:	430a      	orrs	r2, r1
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]
			sendData();
 80028de:	f7ff fc83 	bl	80021e8 <sendData>

			//___Nulování času___//
			for(int i = 1; i < 4; i++)
 80028e2:	2301      	movs	r3, #1
 80028e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80028e6:	e007      	b.n	80028f8 <testHandler+0x268>
			{
				sysTime[i] = 0;
 80028e8:	4b4b      	ldr	r3, [pc, #300]	; (8002a18 <testHandler+0x388>)
 80028ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028ec:	0092      	lsls	r2, r2, #2
 80028ee:	2100      	movs	r1, #0
 80028f0:	50d1      	str	r1, [r2, r3]
			for(int i = 1; i < 4; i++)
 80028f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f4:	3301      	adds	r3, #1
 80028f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80028f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	ddf4      	ble.n	80028e8 <testHandler+0x258>
			}
		}
		break;
 80028fe:	e07d      	b.n	80029fc <testHandler+0x36c>
	case BATTERY_TEST:
		if(flags.time.sec)	//___Změna času___//
 8002900:	4b40      	ldr	r3, [pc, #256]	; (8002a04 <testHandler+0x374>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2202      	movs	r2, #2
 8002906:	4013      	ands	r3, r2
 8002908:	b2db      	uxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d025      	beq.n	800295a <testHandler+0x2ca>
		{
			char time[9] = {0};
 800290e:	1d3b      	adds	r3, r7, #4
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	3304      	adds	r3, #4
 8002916:	2205      	movs	r2, #5
 8002918:	2100      	movs	r1, #0
 800291a:	0018      	movs	r0, r3
 800291c:	f00a fb67 	bl	800cfee <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 8002920:	4b3d      	ldr	r3, [pc, #244]	; (8002a18 <testHandler+0x388>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	223c      	movs	r2, #60	; 0x3c
 8002926:	1ad2      	subs	r2, r2, r3
 8002928:	4b3b      	ldr	r3, [pc, #236]	; (8002a18 <testHandler+0x388>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	213c      	movs	r1, #60	; 0x3c
 800292e:	1acc      	subs	r4, r1, r3
 8002930:	4b39      	ldr	r3, [pc, #228]	; (8002a18 <testHandler+0x388>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2103      	movs	r1, #3
 8002936:	1acb      	subs	r3, r1, r3
 8002938:	493a      	ldr	r1, [pc, #232]	; (8002a24 <testHandler+0x394>)
 800293a:	1d38      	adds	r0, r7, #4
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	0023      	movs	r3, r4
 8002940:	f00a fc18 	bl	800d174 <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED3);	//blikání třetí progress led
 8002944:	4b36      	ldr	r3, [pc, #216]	; (8002a20 <testHandler+0x390>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	781a      	ldrb	r2, [r3, #0]
 800294a:	4b35      	ldr	r3, [pc, #212]	; (8002a20 <testHandler+0x390>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2108      	movs	r1, #8
 8002950:	404a      	eors	r2, r1
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]
			sendData();
 8002956:	f7ff fc47 	bl	80021e8 <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
 800295a:	4b2f      	ldr	r3, [pc, #188]	; (8002a18 <testHandler+0x388>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00b      	beq.n	800297a <testHandler+0x2ea>
 8002962:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <testHandler+0x374>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2204      	movs	r2, #4
 8002968:	4013      	ands	r3, r2
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d004      	beq.n	800297a <testHandler+0x2ea>
#else
		if(!(sysTime[SYSTIME_MIN] % 5) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých pět minut___//
#endif
		{
			flags.meas.measRequest = 1;
 8002970:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <testHandler+0x374>)
 8002972:	7d1a      	ldrb	r2, [r3, #20]
 8002974:	2101      	movs	r1, #1
 8002976:	430a      	orrs	r2, r1
 8002978:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 3)	//___Po třech minutách je měření u konce___//
 800297a:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <testHandler+0x388>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b02      	cmp	r3, #2
 8002980:	dd3e      	ble.n	8002a00 <testHandler+0x370>
#else
		if(sysTime[SYSTIME_MIN] >= 15)	//___Po patnácti minutách je měření u konce___//
#endif
		{
			testPhase++;
 8002982:	4b21      	ldr	r3, [pc, #132]	; (8002a08 <testHandler+0x378>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	3301      	adds	r3, #1
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4b1f      	ldr	r3, [pc, #124]	; (8002a08 <testHandler+0x378>)
 800298c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800298e:	e037      	b.n	8002a00 <testHandler+0x370>
	case BATTERY_TEST_DONE:
		if(!flags.meas.measRunning)
 8002990:	4b1c      	ldr	r3, [pc, #112]	; (8002a04 <testHandler+0x374>)
 8002992:	7d1b      	ldrb	r3, [r3, #20]
 8002994:	2208      	movs	r2, #8
 8002996:	4013      	ands	r3, r2
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d144      	bne.n	8002a28 <testHandler+0x398>
		{
			flags.ui.done = 1;
 800299e:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <testHandler+0x374>)
 80029a0:	7c1a      	ldrb	r2, [r3, #16]
 80029a2:	2110      	movs	r1, #16
 80029a4:	430a      	orrs	r2, r1
 80029a6:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 80029a8:	4b16      	ldr	r3, [pc, #88]	; (8002a04 <testHandler+0x374>)
 80029aa:	7e1a      	ldrb	r2, [r3, #24]
 80029ac:	2102      	movs	r1, #2
 80029ae:	430a      	orrs	r2, r1
 80029b0:	761a      	strb	r2, [r3, #24]

			//Zobrazit text na displej

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED3);
 80029b2:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <testHandler+0x390>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	781a      	ldrb	r2, [r3, #0]
 80029b8:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <testHandler+0x390>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2108      	movs	r1, #8
 80029be:	430a      	orrs	r2, r1
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	701a      	strb	r2, [r3, #0]
			RELAY_OFF(*sourceInTesting);
 80029c4:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <testHandler+0x390>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	781a      	ldrb	r2, [r3, #0]
 80029ca:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <testHandler+0x390>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2102      	movs	r1, #2
 80029d0:	438a      	bics	r2, r1
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]
			PWR_ON(*sourceInTesting);
 80029d6:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <testHandler+0x390>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	781a      	ldrb	r2, [r3, #0]
 80029dc:	4b10      	ldr	r3, [pc, #64]	; (8002a20 <testHandler+0x390>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2101      	movs	r1, #1
 80029e2:	438a      	bics	r2, r1
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	701a      	strb	r2, [r3, #0]
			sendData();
 80029e8:	f7ff fbfe 	bl	80021e8 <sendData>

			testPhase = WAITING;
 80029ec:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <testHandler+0x378>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80029f2:	e019      	b.n	8002a28 <testHandler+0x398>
		break;
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	e018      	b.n	8002a2a <testHandler+0x39a>
		break;
 80029f8:	46c0      	nop			; (mov r8, r8)
 80029fa:	e016      	b.n	8002a2a <testHandler+0x39a>
		break;
 80029fc:	46c0      	nop			; (mov r8, r8)
 80029fe:	e014      	b.n	8002a2a <testHandler+0x39a>
		break;
 8002a00:	46c0      	nop			; (mov r8, r8)
 8002a02:	e012      	b.n	8002a2a <testHandler+0x39a>
 8002a04:	20000630 	.word	0x20000630
 8002a08:	2000025c 	.word	0x2000025c
 8002a0c:	0800d870 	.word	0x0800d870
 8002a10:	20000490 	.word	0x20000490
 8002a14:	0800d980 	.word	0x0800d980
 8002a18:	2000023c 	.word	0x2000023c
 8002a1c:	48000800 	.word	0x48000800
 8002a20:	20000698 	.word	0x20000698
 8002a24:	0800d864 	.word	0x0800d864
		break;
 8002a28:	46c0      	nop			; (mov r8, r8)

	}
}
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	b010      	add	sp, #64	; 0x40
 8002a30:	bdb0      	pop	{r4, r5, r7, pc}
 8002a32:	46c0      	nop			; (mov r8, r8)

08002a34 <startTest>:

//_____Funkce pro zahájení testu_____//
static void startTest(/*ukazatel na zdroj*/)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
	flags.ui.shortBeep = 1;
 8002a3a:	4b28      	ldr	r3, [pc, #160]	; (8002adc <startTest+0xa8>)
 8002a3c:	7c1a      	ldrb	r2, [r3, #16]
 8002a3e:	2101      	movs	r1, #1
 8002a40:	430a      	orrs	r2, r1
 8002a42:	741a      	strb	r2, [r3, #16]
	testPhase = START;
 8002a44:	4b26      	ldr	r3, [pc, #152]	; (8002ae0 <startTest+0xac>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	701a      	strb	r2, [r3, #0]
	testNum = 0;
 8002a4a:	4b26      	ldr	r3, [pc, #152]	; (8002ae4 <startTest+0xb0>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
	flags.testProgress = 1;
 8002a50:	4b22      	ldr	r3, [pc, #136]	; (8002adc <startTest+0xa8>)
 8002a52:	7e1a      	ldrb	r2, [r3, #24]
 8002a54:	2102      	movs	r1, #2
 8002a56:	430a      	orrs	r2, r1
 8002a58:	761a      	strb	r2, [r3, #24]

	sourceInTesting = &regValues[0/*ukazatel na zdroj*/];
 8002a5a:	4b23      	ldr	r3, [pc, #140]	; (8002ae8 <startTest+0xb4>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	4b23      	ldr	r3, [pc, #140]	; (8002aec <startTest+0xb8>)
 8002a60:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < regCount; i++)
 8002a62:	2300      	movs	r3, #0
 8002a64:	607b      	str	r3, [r7, #4]
 8002a66:	e008      	b.n	8002a7a <startTest+0x46>
	{
		regValues[i] = 0;
 8002a68:	4b1f      	ldr	r3, [pc, #124]	; (8002ae8 <startTest+0xb4>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	18d3      	adds	r3, r2, r3
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < regCount; i++)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3301      	adds	r3, #1
 8002a78:	607b      	str	r3, [r7, #4]
 8002a7a:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <startTest+0xbc>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	001a      	movs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4293      	cmp	r3, r2
 8002a84:	dbf0      	blt.n	8002a68 <startTest+0x34>
	}
	PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//rozsvítit první ledku progress
 8002a86:	4b19      	ldr	r3, [pc, #100]	; (8002aec <startTest+0xb8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	781a      	ldrb	r2, [r3, #0]
 8002a8c:	4b17      	ldr	r3, [pc, #92]	; (8002aec <startTest+0xb8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2120      	movs	r1, #32
 8002a92:	430a      	orrs	r2, r1
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	701a      	strb	r2, [r3, #0]
	RELAY_ON(*sourceInTesting);	//připojit relé
 8002a98:	4b14      	ldr	r3, [pc, #80]	; (8002aec <startTest+0xb8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	781a      	ldrb	r2, [r3, #0]
 8002a9e:	4b13      	ldr	r3, [pc, #76]	; (8002aec <startTest+0xb8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2102      	movs	r1, #2
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]

	sendData();	//poslat konfiguraci shift registrům
 8002aaa:	f7ff fb9d 	bl	80021e8 <sendData>
	//Zobrazit text na displej

	//___Nulování času___//
	for(int i = 1; i < 4; i++)
 8002aae:	2301      	movs	r3, #1
 8002ab0:	603b      	str	r3, [r7, #0]
 8002ab2:	e007      	b.n	8002ac4 <startTest+0x90>
	{
		sysTime[i] = 0;
 8002ab4:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <startTest+0xc0>)
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	0092      	lsls	r2, r2, #2
 8002aba:	2100      	movs	r1, #0
 8002abc:	50d1      	str	r1, [r2, r3]
	for(int i = 1; i < 4; i++)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	603b      	str	r3, [r7, #0]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	ddf4      	ble.n	8002ab4 <startTest+0x80>
	}

	flags.instructions.startRequest = 0;
 8002aca:	4b04      	ldr	r3, [pc, #16]	; (8002adc <startTest+0xa8>)
 8002acc:	7b1a      	ldrb	r2, [r3, #12]
 8002ace:	2101      	movs	r1, #1
 8002ad0:	438a      	bics	r2, r1
 8002ad2:	731a      	strb	r2, [r3, #12]
}
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b002      	add	sp, #8
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20000630 	.word	0x20000630
 8002ae0:	2000025c 	.word	0x2000025c
 8002ae4:	20000260 	.word	0x20000260
 8002ae8:	2000068c 	.word	0x2000068c
 8002aec:	20000698 	.word	0x20000698
 8002af0:	20000691 	.word	0x20000691
 8002af4:	2000023c 	.word	0x2000023c

08002af8 <stopTest>:

//_____Funkce pro ukončení testu_____//
static void stopTest()
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
	flags.ui.longBeep = 1;
 8002afc:	4b15      	ldr	r3, [pc, #84]	; (8002b54 <stopTest+0x5c>)
 8002afe:	7c1a      	ldrb	r2, [r3, #16]
 8002b00:	2102      	movs	r1, #2
 8002b02:	430a      	orrs	r2, r1
 8002b04:	741a      	strb	r2, [r3, #16]
	testPhase = WAITING;
 8002b06:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <stopTest+0x60>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]

	//Zobrazit text na displej
	LOAD_MIN_OFF;
 8002b0c:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <stopTest+0x64>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2180      	movs	r1, #128	; 0x80
 8002b12:	0018      	movs	r0, r3
 8002b14:	f001 f8e9 	bl	8003cea <HAL_GPIO_WritePin>
	LOAD_MAX_OFF;
 8002b18:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <stopTest+0x64>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	2140      	movs	r1, #64	; 0x40
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f001 f8e3 	bl	8003cea <HAL_GPIO_WritePin>

	*sourceInTesting = 0;
 8002b24:	4b0e      	ldr	r3, [pc, #56]	; (8002b60 <stopTest+0x68>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	701a      	strb	r2, [r3, #0]
	ERROR_ON(*sourceInTesting);
 8002b2c:	4b0c      	ldr	r3, [pc, #48]	; (8002b60 <stopTest+0x68>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	781a      	ldrb	r2, [r3, #0]
 8002b32:	4b0b      	ldr	r3, [pc, #44]	; (8002b60 <stopTest+0x68>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2104      	movs	r1, #4
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	701a      	strb	r2, [r3, #0]
	sendData();
 8002b3e:	f7ff fb53 	bl	80021e8 <sendData>

	flags.instructions.stopRequest = 0;
 8002b42:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <stopTest+0x5c>)
 8002b44:	7b1a      	ldrb	r2, [r3, #12]
 8002b46:	2102      	movs	r1, #2
 8002b48:	438a      	bics	r2, r1
 8002b4a:	731a      	strb	r2, [r3, #12]
}
 8002b4c:	46c0      	nop			; (mov r8, r8)
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	20000630 	.word	0x20000630
 8002b58:	2000025c 	.word	0x2000025c
 8002b5c:	48000800 	.word	0x48000800
 8002b60:	20000698 	.word	0x20000698

08002b64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b64:	480d      	ldr	r0, [pc, #52]	; (8002b9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b66:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b68:	480d      	ldr	r0, [pc, #52]	; (8002ba0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b6a:	490e      	ldr	r1, [pc, #56]	; (8002ba4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b6c:	4a0e      	ldr	r2, [pc, #56]	; (8002ba8 <LoopForever+0xe>)
  movs r3, #0
 8002b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b70:	e002      	b.n	8002b78 <LoopCopyDataInit>

08002b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b76:	3304      	adds	r3, #4

08002b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b7c:	d3f9      	bcc.n	8002b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b7e:	4a0b      	ldr	r2, [pc, #44]	; (8002bac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b80:	4c0b      	ldr	r4, [pc, #44]	; (8002bb0 <LoopForever+0x16>)
  movs r3, #0
 8002b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b84:	e001      	b.n	8002b8a <LoopFillZerobss>

08002b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b88:	3204      	adds	r2, #4

08002b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b8c:	d3fb      	bcc.n	8002b86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002b8e:	f7ff fd6f 	bl	8002670 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002b92:	f00a f9eb 	bl	800cf6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b96:	f7fe fabd 	bl	8001114 <main>

08002b9a <LoopForever>:

LoopForever:
    b LoopForever
 8002b9a:	e7fe      	b.n	8002b9a <LoopForever>
  ldr   r0, =_estack
 8002b9c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ba4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002ba8:	0800dac8 	.word	0x0800dac8
  ldr r2, =_sbss
 8002bac:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002bb0:	2000163c 	.word	0x2000163c

08002bb4 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bb4:	e7fe      	b.n	8002bb4 <CEC_CAN_IRQHandler>
	...

08002bb8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bbc:	4b07      	ldr	r3, [pc, #28]	; (8002bdc <HAL_Init+0x24>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_Init+0x24>)
 8002bc2:	2110      	movs	r1, #16
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002bc8:	2003      	movs	r0, #3
 8002bca:	f000 f809 	bl	8002be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bce:	f7ff fb47 	bl	8002260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	40022000 	.word	0x40022000

08002be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002be8:	4b14      	ldr	r3, [pc, #80]	; (8002c3c <HAL_InitTick+0x5c>)
 8002bea:	681c      	ldr	r4, [r3, #0]
 8002bec:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <HAL_InitTick+0x60>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	23fa      	movs	r3, #250	; 0xfa
 8002bf4:	0098      	lsls	r0, r3, #2
 8002bf6:	f7fd fa99 	bl	800012c <__udivsi3>
 8002bfa:	0003      	movs	r3, r0
 8002bfc:	0019      	movs	r1, r3
 8002bfe:	0020      	movs	r0, r4
 8002c00:	f7fd fa94 	bl	800012c <__udivsi3>
 8002c04:	0003      	movs	r3, r0
 8002c06:	0018      	movs	r0, r3
 8002c08:	f000 fe4f 	bl	80038aa <HAL_SYSTICK_Config>
 8002c0c:	1e03      	subs	r3, r0, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e00f      	b.n	8002c34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d80b      	bhi.n	8002c32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	425b      	negs	r3, r3
 8002c20:	2200      	movs	r2, #0
 8002c22:	0018      	movs	r0, r3
 8002c24:	f000 fe1c 	bl	8003860 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_InitTick+0x64>)
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e000      	b.n	8002c34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
}
 8002c34:	0018      	movs	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b003      	add	sp, #12
 8002c3a:	bd90      	pop	{r4, r7, pc}
 8002c3c:	20000000 	.word	0x20000000
 8002c40:	20000008 	.word	0x20000008
 8002c44:	20000004 	.word	0x20000004

08002c48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_IncTick+0x1c>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	001a      	movs	r2, r3
 8002c52:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <HAL_IncTick+0x20>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	18d2      	adds	r2, r2, r3
 8002c58:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <HAL_IncTick+0x20>)
 8002c5a:	601a      	str	r2, [r3, #0]
}
 8002c5c:	46c0      	nop			; (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	20000008 	.word	0x20000008
 8002c68:	2000069c 	.word	0x2000069c

08002c6c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c70:	4b02      	ldr	r3, [pc, #8]	; (8002c7c <HAL_GetTick+0x10>)
 8002c72:	681b      	ldr	r3, [r3, #0]
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	2000069c 	.word	0x2000069c

08002c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c88:	f7ff fff0 	bl	8002c6c <HAL_GetTick>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	3301      	adds	r3, #1
 8002c98:	d005      	beq.n	8002ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <HAL_Delay+0x44>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	001a      	movs	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	189b      	adds	r3, r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	f7ff ffe0 	bl	8002c6c <HAL_GetTick>
 8002cac:	0002      	movs	r2, r0
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d8f7      	bhi.n	8002ca8 <HAL_Delay+0x28>
  {
  }
}
 8002cb8:	46c0      	nop			; (mov r8, r8)
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	b004      	add	sp, #16
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	20000008 	.word	0x20000008

08002cc8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cd0:	230f      	movs	r3, #15
 8002cd2:	18fb      	adds	r3, r7, r3
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e125      	b.n	8002f32 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10a      	bne.n	8002d04 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2234      	movs	r2, #52	; 0x34
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f7ff fad2 	bl	80022a8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d08:	2210      	movs	r2, #16
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d000      	beq.n	8002d10 <HAL_ADC_Init+0x48>
 8002d0e:	e103      	b.n	8002f18 <HAL_ADC_Init+0x250>
 8002d10:	230f      	movs	r3, #15
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d000      	beq.n	8002d1c <HAL_ADC_Init+0x54>
 8002d1a:	e0fd      	b.n	8002f18 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2204      	movs	r2, #4
 8002d24:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002d26:	d000      	beq.n	8002d2a <HAL_ADC_Init+0x62>
 8002d28:	e0f6      	b.n	8002f18 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2e:	4a83      	ldr	r2, [pc, #524]	; (8002f3c <HAL_ADC_Init+0x274>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	2202      	movs	r2, #2
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2203      	movs	r2, #3
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d112      	bne.n	8002d6e <HAL_ADC_Init+0xa6>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d009      	beq.n	8002d6a <HAL_ADC_Init+0xa2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	2380      	movs	r3, #128	; 0x80
 8002d5e:	021b      	lsls	r3, r3, #8
 8002d60:	401a      	ands	r2, r3
 8002d62:	2380      	movs	r3, #128	; 0x80
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d101      	bne.n	8002d6e <HAL_ADC_Init+0xa6>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_ADC_Init+0xa8>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d116      	bne.n	8002da2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	2218      	movs	r2, #24
 8002d7c:	4393      	bics	r3, r2
 8002d7e:	0019      	movs	r1, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	0899      	lsrs	r1, r3, #2
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4964      	ldr	r1, [pc, #400]	; (8002f40 <HAL_ADC_Init+0x278>)
 8002dae:	400a      	ands	r2, r1
 8002db0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	7e1b      	ldrb	r3, [r3, #24]
 8002db6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	7e5b      	ldrb	r3, [r3, #25]
 8002dbc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dbe:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	7e9b      	ldrb	r3, [r3, #26]
 8002dc4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002dc6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d002      	beq.n	8002dd6 <HAL_ADC_Init+0x10e>
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	015b      	lsls	r3, r3, #5
 8002dd4:	e000      	b.n	8002dd8 <HAL_ADC_Init+0x110>
 8002dd6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002dd8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002dde:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d101      	bne.n	8002dec <HAL_ADC_Init+0x124>
 8002de8:	2304      	movs	r3, #4
 8002dea:	e000      	b.n	8002dee <HAL_ADC_Init+0x126>
 8002dec:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002dee:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2124      	movs	r1, #36	; 0x24
 8002df4:	5c5b      	ldrb	r3, [r3, r1]
 8002df6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002df8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	7edb      	ldrb	r3, [r3, #27]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d115      	bne.n	8002e34 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	7e9b      	ldrb	r3, [r3, #26]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d105      	bne.n	8002e1c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2280      	movs	r2, #128	; 0x80
 8002e14:	0252      	lsls	r2, r2, #9
 8002e16:	4313      	orrs	r3, r2
 8002e18:	60bb      	str	r3, [r7, #8]
 8002e1a:	e00b      	b.n	8002e34 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	2220      	movs	r2, #32
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69da      	ldr	r2, [r3, #28]
 8002e38:	23c2      	movs	r3, #194	; 0xc2
 8002e3a:	33ff      	adds	r3, #255	; 0xff
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d007      	beq.n	8002e50 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68d9      	ldr	r1, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e64:	2380      	movs	r3, #128	; 0x80
 8002e66:	055b      	lsls	r3, r3, #21
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d01b      	beq.n	8002ea4 <HAL_ADC_Init+0x1dc>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d017      	beq.n	8002ea4 <HAL_ADC_Init+0x1dc>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d013      	beq.n	8002ea4 <HAL_ADC_Init+0x1dc>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	d00f      	beq.n	8002ea4 <HAL_ADC_Init+0x1dc>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d00b      	beq.n	8002ea4 <HAL_ADC_Init+0x1dc>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	2b05      	cmp	r3, #5
 8002e92:	d007      	beq.n	8002ea4 <HAL_ADC_Init+0x1dc>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	2b06      	cmp	r3, #6
 8002e9a:	d003      	beq.n	8002ea4 <HAL_ADC_Init+0x1dc>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea0:	2b07      	cmp	r3, #7
 8002ea2:	d112      	bne.n	8002eca <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695a      	ldr	r2, [r3, #20]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2107      	movs	r1, #7
 8002eb0:	438a      	bics	r2, r1
 8002eb2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6959      	ldr	r1, [r3, #20]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebe:	2207      	movs	r2, #7
 8002ec0:	401a      	ands	r2, r3
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4a1c      	ldr	r2, [pc, #112]	; (8002f44 <HAL_ADC_Init+0x27c>)
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d10b      	bne.n	8002ef2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	2203      	movs	r2, #3
 8002ee6:	4393      	bics	r3, r2
 8002ee8:	2201      	movs	r2, #1
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002ef0:	e01c      	b.n	8002f2c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef6:	2212      	movs	r2, #18
 8002ef8:	4393      	bics	r3, r2
 8002efa:	2210      	movs	r2, #16
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f06:	2201      	movs	r2, #1
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002f0e:	230f      	movs	r3, #15
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002f16:	e009      	b.n	8002f2c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	2210      	movs	r2, #16
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002f24:	230f      	movs	r3, #15
 8002f26:	18fb      	adds	r3, r7, r3
 8002f28:	2201      	movs	r2, #1
 8002f2a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f2c:	230f      	movs	r3, #15
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	781b      	ldrb	r3, [r3, #0]
}
 8002f32:	0018      	movs	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	b004      	add	sp, #16
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	fffffefd 	.word	0xfffffefd
 8002f40:	fffe0219 	.word	0xfffe0219
 8002f44:	833fffe7 	.word	0x833fffe7

08002f48 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002f48:	b590      	push	{r4, r7, lr}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f50:	230f      	movs	r3, #15
 8002f52:	18fb      	adds	r3, r7, r3
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2204      	movs	r2, #4
 8002f60:	4013      	ands	r3, r2
 8002f62:	d156      	bne.n	8003012 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2234      	movs	r2, #52	; 0x34
 8002f68:	5c9b      	ldrb	r3, [r3, r2]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d101      	bne.n	8002f72 <HAL_ADC_Start_IT+0x2a>
 8002f6e:	2302      	movs	r3, #2
 8002f70:	e056      	b.n	8003020 <HAL_ADC_Start_IT+0xd8>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2234      	movs	r2, #52	; 0x34
 8002f76:	2101      	movs	r1, #1
 8002f78:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	7e5b      	ldrb	r3, [r3, #25]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d007      	beq.n	8002f92 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002f82:	230f      	movs	r3, #15
 8002f84:	18fc      	adds	r4, r7, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f000 fa7b 	bl	8003484 <ADC_Enable>
 8002f8e:	0003      	movs	r3, r0
 8002f90:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f92:	230f      	movs	r3, #15
 8002f94:	18fb      	adds	r3, r7, r3
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d13e      	bne.n	800301a <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa0:	4a21      	ldr	r2, [pc, #132]	; (8003028 <HAL_ADC_Start_IT+0xe0>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2280      	movs	r2, #128	; 0x80
 8002fa6:	0052      	lsls	r2, r2, #1
 8002fa8:	431a      	orrs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2234      	movs	r2, #52	; 0x34
 8002fb8:	2100      	movs	r1, #0
 8002fba:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	221c      	movs	r2, #28
 8002fc2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	2b08      	cmp	r3, #8
 8002fca:	d110      	bne.n	8002fee <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2104      	movs	r1, #4
 8002fd8:	438a      	bics	r2, r1
 8002fda:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2118      	movs	r1, #24
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	605a      	str	r2, [r3, #4]
          break;
 8002fec:	e008      	b.n	8003000 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	211c      	movs	r1, #28
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	605a      	str	r2, [r3, #4]
          break;
 8002ffe:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2104      	movs	r1, #4
 800300c:	430a      	orrs	r2, r1
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	e003      	b.n	800301a <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003012:	230f      	movs	r3, #15
 8003014:	18fb      	adds	r3, r7, r3
 8003016:	2202      	movs	r2, #2
 8003018:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 800301a:	230f      	movs	r3, #15
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	781b      	ldrb	r3, [r3, #0]
}
 8003020:	0018      	movs	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	b005      	add	sp, #20
 8003026:	bd90      	pop	{r4, r7, pc}
 8003028:	fffff0fe 	.word	0xfffff0fe

0800302c <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 800302c:	b5b0      	push	{r4, r5, r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003034:	230f      	movs	r3, #15
 8003036:	18fb      	adds	r3, r7, r3
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2234      	movs	r2, #52	; 0x34
 8003040:	5c9b      	ldrb	r3, [r3, r2]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_ADC_Stop_IT+0x1e>
 8003046:	2302      	movs	r3, #2
 8003048:	e033      	b.n	80030b2 <HAL_ADC_Stop_IT+0x86>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2234      	movs	r2, #52	; 0x34
 800304e:	2101      	movs	r1, #1
 8003050:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003052:	250f      	movs	r5, #15
 8003054:	197c      	adds	r4, r7, r5
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	0018      	movs	r0, r3
 800305a:	f000 fb08 	bl	800366e <ADC_ConversionStop>
 800305e:	0003      	movs	r3, r0
 8003060:	7023      	strb	r3, [r4, #0]
   
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003062:	0028      	movs	r0, r5
 8003064:	183b      	adds	r3, r7, r0
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d11b      	bne.n	80030a4 <HAL_ADC_Stop_IT+0x78>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	211c      	movs	r1, #28
 8003078:	438a      	bics	r2, r1
 800307a:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800307c:	0005      	movs	r5, r0
 800307e:	183c      	adds	r4, r7, r0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	0018      	movs	r0, r3
 8003084:	f000 fa82 	bl	800358c <ADC_Disable>
 8003088:	0003      	movs	r3, r0
 800308a:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800308c:	197b      	adds	r3, r7, r5
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d107      	bne.n	80030a4 <HAL_ADC_Stop_IT+0x78>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003098:	4a08      	ldr	r2, [pc, #32]	; (80030bc <HAL_ADC_Stop_IT+0x90>)
 800309a:	4013      	ands	r3, r2
 800309c:	2201      	movs	r2, #1
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2234      	movs	r2, #52	; 0x34
 80030a8:	2100      	movs	r1, #0
 80030aa:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80030ac:	230f      	movs	r3, #15
 80030ae:	18fb      	adds	r3, r7, r3
 80030b0:	781b      	ldrb	r3, [r3, #0]
}
 80030b2:	0018      	movs	r0, r3
 80030b4:	46bd      	mov	sp, r7
 80030b6:	b004      	add	sp, #16
 80030b8:	bdb0      	pop	{r4, r5, r7, pc}
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	fffffefe 	.word	0xfffffefe

080030c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80030ce:	0018      	movs	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b002      	add	sp, #8
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2204      	movs	r2, #4
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d106      	bne.n	80030fc <HAL_ADC_IRQHandler+0x24>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2204      	movs	r2, #4
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b04      	cmp	r3, #4
 80030fa:	d00d      	beq.n	8003118 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2208      	movs	r2, #8
 8003104:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003106:	2b08      	cmp	r3, #8
 8003108:	d14f      	bne.n	80031aa <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2208      	movs	r2, #8
 8003112:	4013      	ands	r3, r2
 8003114:	2b08      	cmp	r3, #8
 8003116:	d148      	bne.n	80031aa <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311c:	2210      	movs	r2, #16
 800311e:	4013      	ands	r3, r2
 8003120:	d106      	bne.n	8003130 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	2280      	movs	r2, #128	; 0x80
 8003128:	0092      	lsls	r2, r2, #2
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	23c0      	movs	r3, #192	; 0xc0
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	4013      	ands	r3, r2
 800313c:	d12d      	bne.n	800319a <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003142:	2b00      	cmp	r3, #0
 8003144:	d129      	bne.n	800319a <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2208      	movs	r2, #8
 800314e:	4013      	ands	r3, r2
 8003150:	2b08      	cmp	r3, #8
 8003152:	d122      	bne.n	800319a <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2204      	movs	r2, #4
 800315c:	4013      	ands	r3, r2
 800315e:	d110      	bne.n	8003182 <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	210c      	movs	r1, #12
 800316c:	438a      	bics	r2, r1
 800316e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	4a33      	ldr	r2, [pc, #204]	; (8003244 <HAL_ADC_IRQHandler+0x16c>)
 8003176:	4013      	ands	r3, r2
 8003178:	2201      	movs	r2, #1
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	639a      	str	r2, [r3, #56]	; 0x38
 8003180:	e00b      	b.n	800319a <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	2220      	movs	r2, #32
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003192:	2201      	movs	r2, #1
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	0018      	movs	r0, r3
 800319e:	f7fd ffa5 	bl	80010ec <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	220c      	movs	r2, #12
 80031a8:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2280      	movs	r2, #128	; 0x80
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b80      	cmp	r3, #128	; 0x80
 80031b6:	d115      	bne.n	80031e4 <HAL_ADC_IRQHandler+0x10c>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2280      	movs	r2, #128	; 0x80
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b80      	cmp	r3, #128	; 0x80
 80031c4:	d10e      	bne.n	80031e4 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ca:	2280      	movs	r2, #128	; 0x80
 80031cc:	0252      	lsls	r2, r2, #9
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	0018      	movs	r0, r3
 80031d8:	f000 f836 	bl	8003248 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2280      	movs	r2, #128	; 0x80
 80031e2:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2210      	movs	r2, #16
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b10      	cmp	r3, #16
 80031f0:	d123      	bne.n	800323a <HAL_ADC_IRQHandler+0x162>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2210      	movs	r2, #16
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b10      	cmp	r3, #16
 80031fe:	d11c      	bne.n	800323a <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003204:	2b01      	cmp	r3, #1
 8003206:	d006      	beq.n	8003216 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	2201      	movs	r2, #1
 8003210:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003212:	2b01      	cmp	r3, #1
 8003214:	d10d      	bne.n	8003232 <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321a:	2202      	movs	r2, #2
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2210      	movs	r2, #16
 8003228:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	0018      	movs	r0, r3
 800322e:	f000 f813 	bl	8003258 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2210      	movs	r2, #16
 8003238:	601a      	str	r2, [r3, #0]
  }

}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	46bd      	mov	sp, r7
 800323e:	b002      	add	sp, #8
 8003240:	bd80      	pop	{r7, pc}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	fffffefe 	.word	0xfffffefe

08003248 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003250:	46c0      	nop			; (mov r8, r8)
 8003252:	46bd      	mov	sp, r7
 8003254:	b002      	add	sp, #8
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003260:	46c0      	nop			; (mov r8, r8)
 8003262:	46bd      	mov	sp, r7
 8003264:	b002      	add	sp, #8
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003272:	230f      	movs	r3, #15
 8003274:	18fb      	adds	r3, r7, r3
 8003276:	2200      	movs	r2, #0
 8003278:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800327a:	2300      	movs	r3, #0
 800327c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003282:	2380      	movs	r3, #128	; 0x80
 8003284:	055b      	lsls	r3, r3, #21
 8003286:	429a      	cmp	r2, r3
 8003288:	d011      	beq.n	80032ae <HAL_ADC_ConfigChannel+0x46>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328e:	2b01      	cmp	r3, #1
 8003290:	d00d      	beq.n	80032ae <HAL_ADC_ConfigChannel+0x46>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003296:	2b02      	cmp	r3, #2
 8003298:	d009      	beq.n	80032ae <HAL_ADC_ConfigChannel+0x46>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d005      	beq.n	80032ae <HAL_ADC_ConfigChannel+0x46>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d001      	beq.n	80032ae <HAL_ADC_ConfigChannel+0x46>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2234      	movs	r2, #52	; 0x34
 80032b2:	5c9b      	ldrb	r3, [r3, r2]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x54>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e0d0      	b.n	800345e <HAL_ADC_ConfigChannel+0x1f6>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2234      	movs	r2, #52	; 0x34
 80032c0:	2101      	movs	r1, #1
 80032c2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2204      	movs	r2, #4
 80032cc:	4013      	ands	r3, r2
 80032ce:	d000      	beq.n	80032d2 <HAL_ADC_ConfigChannel+0x6a>
 80032d0:	e0b4      	b.n	800343c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	4a64      	ldr	r2, [pc, #400]	; (8003468 <HAL_ADC_ConfigChannel+0x200>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d100      	bne.n	80032de <HAL_ADC_ConfigChannel+0x76>
 80032dc:	e082      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2201      	movs	r2, #1
 80032ea:	409a      	lsls	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032f8:	2380      	movs	r3, #128	; 0x80
 80032fa:	055b      	lsls	r3, r3, #21
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d037      	beq.n	8003370 <HAL_ADC_ConfigChannel+0x108>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	2b01      	cmp	r3, #1
 8003306:	d033      	beq.n	8003370 <HAL_ADC_ConfigChannel+0x108>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	2b02      	cmp	r3, #2
 800330e:	d02f      	beq.n	8003370 <HAL_ADC_ConfigChannel+0x108>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	2b03      	cmp	r3, #3
 8003316:	d02b      	beq.n	8003370 <HAL_ADC_ConfigChannel+0x108>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331c:	2b04      	cmp	r3, #4
 800331e:	d027      	beq.n	8003370 <HAL_ADC_ConfigChannel+0x108>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	2b05      	cmp	r3, #5
 8003326:	d023      	beq.n	8003370 <HAL_ADC_ConfigChannel+0x108>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	2b06      	cmp	r3, #6
 800332e:	d01f      	beq.n	8003370 <HAL_ADC_ConfigChannel+0x108>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	2b07      	cmp	r3, #7
 8003336:	d01b      	beq.n	8003370 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	2107      	movs	r1, #7
 8003344:	400b      	ands	r3, r1
 8003346:	429a      	cmp	r2, r3
 8003348:	d012      	beq.n	8003370 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2107      	movs	r1, #7
 8003356:	438a      	bics	r2, r1
 8003358:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6959      	ldr	r1, [r3, #20]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	2207      	movs	r2, #7
 8003366:	401a      	ands	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b10      	cmp	r3, #16
 8003376:	d007      	beq.n	8003388 <HAL_ADC_ConfigChannel+0x120>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b11      	cmp	r3, #17
 800337e:	d003      	beq.n	8003388 <HAL_ADC_ConfigChannel+0x120>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b12      	cmp	r3, #18
 8003386:	d163      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003388:	4b38      	ldr	r3, [pc, #224]	; (800346c <HAL_ADC_ConfigChannel+0x204>)
 800338a:	6819      	ldr	r1, [r3, #0]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2b10      	cmp	r3, #16
 8003392:	d009      	beq.n	80033a8 <HAL_ADC_ConfigChannel+0x140>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b11      	cmp	r3, #17
 800339a:	d102      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0x13a>
 800339c:	2380      	movs	r3, #128	; 0x80
 800339e:	03db      	lsls	r3, r3, #15
 80033a0:	e004      	b.n	80033ac <HAL_ADC_ConfigChannel+0x144>
 80033a2:	2380      	movs	r3, #128	; 0x80
 80033a4:	045b      	lsls	r3, r3, #17
 80033a6:	e001      	b.n	80033ac <HAL_ADC_ConfigChannel+0x144>
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	041b      	lsls	r3, r3, #16
 80033ac:	4a2f      	ldr	r2, [pc, #188]	; (800346c <HAL_ADC_ConfigChannel+0x204>)
 80033ae:	430b      	orrs	r3, r1
 80033b0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b10      	cmp	r3, #16
 80033b8:	d14a      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033ba:	4b2d      	ldr	r3, [pc, #180]	; (8003470 <HAL_ADC_ConfigChannel+0x208>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	492d      	ldr	r1, [pc, #180]	; (8003474 <HAL_ADC_ConfigChannel+0x20c>)
 80033c0:	0018      	movs	r0, r3
 80033c2:	f7fc feb3 	bl	800012c <__udivsi3>
 80033c6:	0003      	movs	r3, r0
 80033c8:	001a      	movs	r2, r3
 80033ca:	0013      	movs	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	189b      	adds	r3, r3, r2
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033d4:	e002      	b.n	80033dc <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	3b01      	subs	r3, #1
 80033da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f9      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x16e>
 80033e2:	e035      	b.n	8003450 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2101      	movs	r1, #1
 80033f0:	4099      	lsls	r1, r3
 80033f2:	000b      	movs	r3, r1
 80033f4:	43d9      	mvns	r1, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	400a      	ands	r2, r1
 80033fc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b10      	cmp	r3, #16
 8003404:	d007      	beq.n	8003416 <HAL_ADC_ConfigChannel+0x1ae>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b11      	cmp	r3, #17
 800340c:	d003      	beq.n	8003416 <HAL_ADC_ConfigChannel+0x1ae>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b12      	cmp	r3, #18
 8003414:	d11c      	bne.n	8003450 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003416:	4b15      	ldr	r3, [pc, #84]	; (800346c <HAL_ADC_ConfigChannel+0x204>)
 8003418:	6819      	ldr	r1, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b10      	cmp	r3, #16
 8003420:	d007      	beq.n	8003432 <HAL_ADC_ConfigChannel+0x1ca>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b11      	cmp	r3, #17
 8003428:	d101      	bne.n	800342e <HAL_ADC_ConfigChannel+0x1c6>
 800342a:	4b13      	ldr	r3, [pc, #76]	; (8003478 <HAL_ADC_ConfigChannel+0x210>)
 800342c:	e002      	b.n	8003434 <HAL_ADC_ConfigChannel+0x1cc>
 800342e:	4b13      	ldr	r3, [pc, #76]	; (800347c <HAL_ADC_ConfigChannel+0x214>)
 8003430:	e000      	b.n	8003434 <HAL_ADC_ConfigChannel+0x1cc>
 8003432:	4b13      	ldr	r3, [pc, #76]	; (8003480 <HAL_ADC_ConfigChannel+0x218>)
 8003434:	4a0d      	ldr	r2, [pc, #52]	; (800346c <HAL_ADC_ConfigChannel+0x204>)
 8003436:	400b      	ands	r3, r1
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	e009      	b.n	8003450 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	2220      	movs	r2, #32
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003448:	230f      	movs	r3, #15
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	2201      	movs	r2, #1
 800344e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2234      	movs	r2, #52	; 0x34
 8003454:	2100      	movs	r1, #0
 8003456:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003458:	230f      	movs	r3, #15
 800345a:	18fb      	adds	r3, r7, r3
 800345c:	781b      	ldrb	r3, [r3, #0]
}
 800345e:	0018      	movs	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	b004      	add	sp, #16
 8003464:	bd80      	pop	{r7, pc}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	00001001 	.word	0x00001001
 800346c:	40012708 	.word	0x40012708
 8003470:	20000000 	.word	0x20000000
 8003474:	000f4240 	.word	0x000f4240
 8003478:	ffbfffff 	.word	0xffbfffff
 800347c:	feffffff 	.word	0xfeffffff
 8003480:	ff7fffff 	.word	0xff7fffff

08003484 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	2203      	movs	r2, #3
 800349c:	4013      	ands	r3, r2
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d112      	bne.n	80034c8 <ADC_Enable+0x44>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2201      	movs	r2, #1
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d009      	beq.n	80034c4 <ADC_Enable+0x40>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	2380      	movs	r3, #128	; 0x80
 80034b8:	021b      	lsls	r3, r3, #8
 80034ba:	401a      	ands	r2, r3
 80034bc:	2380      	movs	r3, #128	; 0x80
 80034be:	021b      	lsls	r3, r3, #8
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d101      	bne.n	80034c8 <ADC_Enable+0x44>
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <ADC_Enable+0x46>
 80034c8:	2300      	movs	r3, #0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d152      	bne.n	8003574 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	4a2a      	ldr	r2, [pc, #168]	; (8003580 <ADC_Enable+0xfc>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	d00d      	beq.n	80034f6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034de:	2210      	movs	r2, #16
 80034e0:	431a      	orrs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ea:	2201      	movs	r2, #1
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e03f      	b.n	8003576 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2101      	movs	r1, #1
 8003502:	430a      	orrs	r2, r1
 8003504:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003506:	4b1f      	ldr	r3, [pc, #124]	; (8003584 <ADC_Enable+0x100>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	491f      	ldr	r1, [pc, #124]	; (8003588 <ADC_Enable+0x104>)
 800350c:	0018      	movs	r0, r3
 800350e:	f7fc fe0d 	bl	800012c <__udivsi3>
 8003512:	0003      	movs	r3, r0
 8003514:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003516:	e002      	b.n	800351e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	3b01      	subs	r3, #1
 800351c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1f9      	bne.n	8003518 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003524:	f7ff fba2 	bl	8002c6c <HAL_GetTick>
 8003528:	0003      	movs	r3, r0
 800352a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800352c:	e01b      	b.n	8003566 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800352e:	f7ff fb9d 	bl	8002c6c <HAL_GetTick>
 8003532:	0002      	movs	r2, r0
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d914      	bls.n	8003566 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2201      	movs	r2, #1
 8003544:	4013      	ands	r3, r2
 8003546:	2b01      	cmp	r3, #1
 8003548:	d00d      	beq.n	8003566 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	2210      	movs	r2, #16
 8003550:	431a      	orrs	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355a:	2201      	movs	r2, #1
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e007      	b.n	8003576 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2201      	movs	r2, #1
 800356e:	4013      	ands	r3, r2
 8003570:	2b01      	cmp	r3, #1
 8003572:	d1dc      	bne.n	800352e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	0018      	movs	r0, r3
 8003578:	46bd      	mov	sp, r7
 800357a:	b004      	add	sp, #16
 800357c:	bd80      	pop	{r7, pc}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	80000017 	.word	0x80000017
 8003584:	20000000 	.word	0x20000000
 8003588:	000f4240 	.word	0x000f4240

0800358c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2203      	movs	r2, #3
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d112      	bne.n	80035cc <ADC_Disable+0x40>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2201      	movs	r2, #1
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d009      	beq.n	80035c8 <ADC_Disable+0x3c>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	2380      	movs	r3, #128	; 0x80
 80035bc:	021b      	lsls	r3, r3, #8
 80035be:	401a      	ands	r2, r3
 80035c0:	2380      	movs	r3, #128	; 0x80
 80035c2:	021b      	lsls	r3, r3, #8
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d101      	bne.n	80035cc <ADC_Disable+0x40>
 80035c8:	2301      	movs	r3, #1
 80035ca:	e000      	b.n	80035ce <ADC_Disable+0x42>
 80035cc:	2300      	movs	r3, #0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d048      	beq.n	8003664 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	2205      	movs	r2, #5
 80035da:	4013      	ands	r3, r2
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d110      	bne.n	8003602 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2102      	movs	r1, #2
 80035ec:	430a      	orrs	r2, r1
 80035ee:	609a      	str	r2, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2203      	movs	r2, #3
 80035f6:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035f8:	f7ff fb38 	bl	8002c6c <HAL_GetTick>
 80035fc:	0003      	movs	r3, r0
 80035fe:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003600:	e029      	b.n	8003656 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	2210      	movs	r2, #16
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003612:	2201      	movs	r2, #1
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e023      	b.n	8003666 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800361e:	f7ff fb25 	bl	8002c6c <HAL_GetTick>
 8003622:	0002      	movs	r2, r0
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d914      	bls.n	8003656 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2201      	movs	r2, #1
 8003634:	4013      	ands	r3, r2
 8003636:	2b01      	cmp	r3, #1
 8003638:	d10d      	bne.n	8003656 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363e:	2210      	movs	r2, #16
 8003640:	431a      	orrs	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364a:	2201      	movs	r2, #1
 800364c:	431a      	orrs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e007      	b.n	8003666 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	2201      	movs	r2, #1
 800365e:	4013      	ands	r3, r2
 8003660:	2b01      	cmp	r3, #1
 8003662:	d0dc      	beq.n	800361e <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	0018      	movs	r0, r3
 8003668:	46bd      	mov	sp, r7
 800366a:	b004      	add	sp, #16
 800366c:	bd80      	pop	{r7, pc}

0800366e <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b084      	sub	sp, #16
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2204      	movs	r2, #4
 8003682:	4013      	ands	r3, r2
 8003684:	d03a      	beq.n	80036fc <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2204      	movs	r2, #4
 800368e:	4013      	ands	r3, r2
 8003690:	2b04      	cmp	r3, #4
 8003692:	d10d      	bne.n	80036b0 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2202      	movs	r2, #2
 800369c:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800369e:	d107      	bne.n	80036b0 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2110      	movs	r1, #16
 80036ac:	430a      	orrs	r2, r1
 80036ae:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036b0:	f7ff fadc 	bl	8002c6c <HAL_GetTick>
 80036b4:	0003      	movs	r3, r0
 80036b6:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80036b8:	e01a      	b.n	80036f0 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80036ba:	f7ff fad7 	bl	8002c6c <HAL_GetTick>
 80036be:	0002      	movs	r2, r0
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d913      	bls.n	80036f0 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	2204      	movs	r2, #4
 80036d0:	4013      	ands	r3, r2
 80036d2:	d00d      	beq.n	80036f0 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d8:	2210      	movs	r2, #16
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036e4:	2201      	movs	r2, #1
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e006      	b.n	80036fe <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2204      	movs	r2, #4
 80036f8:	4013      	ands	r3, r2
 80036fa:	d1de      	bne.n	80036ba <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	0018      	movs	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	b004      	add	sp, #16
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	0002      	movs	r2, r0
 8003710:	1dfb      	adds	r3, r7, #7
 8003712:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003714:	1dfb      	adds	r3, r7, #7
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b7f      	cmp	r3, #127	; 0x7f
 800371a:	d809      	bhi.n	8003730 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800371c:	1dfb      	adds	r3, r7, #7
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	001a      	movs	r2, r3
 8003722:	231f      	movs	r3, #31
 8003724:	401a      	ands	r2, r3
 8003726:	4b04      	ldr	r3, [pc, #16]	; (8003738 <__NVIC_EnableIRQ+0x30>)
 8003728:	2101      	movs	r1, #1
 800372a:	4091      	lsls	r1, r2
 800372c:	000a      	movs	r2, r1
 800372e:	601a      	str	r2, [r3, #0]
  }
}
 8003730:	46c0      	nop			; (mov r8, r8)
 8003732:	46bd      	mov	sp, r7
 8003734:	b002      	add	sp, #8
 8003736:	bd80      	pop	{r7, pc}
 8003738:	e000e100 	.word	0xe000e100

0800373c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800373c:	b590      	push	{r4, r7, lr}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	0002      	movs	r2, r0
 8003744:	6039      	str	r1, [r7, #0]
 8003746:	1dfb      	adds	r3, r7, #7
 8003748:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800374a:	1dfb      	adds	r3, r7, #7
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b7f      	cmp	r3, #127	; 0x7f
 8003750:	d828      	bhi.n	80037a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003752:	4a2f      	ldr	r2, [pc, #188]	; (8003810 <__NVIC_SetPriority+0xd4>)
 8003754:	1dfb      	adds	r3, r7, #7
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	b25b      	sxtb	r3, r3
 800375a:	089b      	lsrs	r3, r3, #2
 800375c:	33c0      	adds	r3, #192	; 0xc0
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	589b      	ldr	r3, [r3, r2]
 8003762:	1dfa      	adds	r2, r7, #7
 8003764:	7812      	ldrb	r2, [r2, #0]
 8003766:	0011      	movs	r1, r2
 8003768:	2203      	movs	r2, #3
 800376a:	400a      	ands	r2, r1
 800376c:	00d2      	lsls	r2, r2, #3
 800376e:	21ff      	movs	r1, #255	; 0xff
 8003770:	4091      	lsls	r1, r2
 8003772:	000a      	movs	r2, r1
 8003774:	43d2      	mvns	r2, r2
 8003776:	401a      	ands	r2, r3
 8003778:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	019b      	lsls	r3, r3, #6
 800377e:	22ff      	movs	r2, #255	; 0xff
 8003780:	401a      	ands	r2, r3
 8003782:	1dfb      	adds	r3, r7, #7
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	0018      	movs	r0, r3
 8003788:	2303      	movs	r3, #3
 800378a:	4003      	ands	r3, r0
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003790:	481f      	ldr	r0, [pc, #124]	; (8003810 <__NVIC_SetPriority+0xd4>)
 8003792:	1dfb      	adds	r3, r7, #7
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	b25b      	sxtb	r3, r3
 8003798:	089b      	lsrs	r3, r3, #2
 800379a:	430a      	orrs	r2, r1
 800379c:	33c0      	adds	r3, #192	; 0xc0
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80037a2:	e031      	b.n	8003808 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037a4:	4a1b      	ldr	r2, [pc, #108]	; (8003814 <__NVIC_SetPriority+0xd8>)
 80037a6:	1dfb      	adds	r3, r7, #7
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	0019      	movs	r1, r3
 80037ac:	230f      	movs	r3, #15
 80037ae:	400b      	ands	r3, r1
 80037b0:	3b08      	subs	r3, #8
 80037b2:	089b      	lsrs	r3, r3, #2
 80037b4:	3306      	adds	r3, #6
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	18d3      	adds	r3, r2, r3
 80037ba:	3304      	adds	r3, #4
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	1dfa      	adds	r2, r7, #7
 80037c0:	7812      	ldrb	r2, [r2, #0]
 80037c2:	0011      	movs	r1, r2
 80037c4:	2203      	movs	r2, #3
 80037c6:	400a      	ands	r2, r1
 80037c8:	00d2      	lsls	r2, r2, #3
 80037ca:	21ff      	movs	r1, #255	; 0xff
 80037cc:	4091      	lsls	r1, r2
 80037ce:	000a      	movs	r2, r1
 80037d0:	43d2      	mvns	r2, r2
 80037d2:	401a      	ands	r2, r3
 80037d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	019b      	lsls	r3, r3, #6
 80037da:	22ff      	movs	r2, #255	; 0xff
 80037dc:	401a      	ands	r2, r3
 80037de:	1dfb      	adds	r3, r7, #7
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	0018      	movs	r0, r3
 80037e4:	2303      	movs	r3, #3
 80037e6:	4003      	ands	r3, r0
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80037ec:	4809      	ldr	r0, [pc, #36]	; (8003814 <__NVIC_SetPriority+0xd8>)
 80037ee:	1dfb      	adds	r3, r7, #7
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	001c      	movs	r4, r3
 80037f4:	230f      	movs	r3, #15
 80037f6:	4023      	ands	r3, r4
 80037f8:	3b08      	subs	r3, #8
 80037fa:	089b      	lsrs	r3, r3, #2
 80037fc:	430a      	orrs	r2, r1
 80037fe:	3306      	adds	r3, #6
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	18c3      	adds	r3, r0, r3
 8003804:	3304      	adds	r3, #4
 8003806:	601a      	str	r2, [r3, #0]
}
 8003808:	46c0      	nop			; (mov r8, r8)
 800380a:	46bd      	mov	sp, r7
 800380c:	b003      	add	sp, #12
 800380e:	bd90      	pop	{r4, r7, pc}
 8003810:	e000e100 	.word	0xe000e100
 8003814:	e000ed00 	.word	0xe000ed00

08003818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	1e5a      	subs	r2, r3, #1
 8003824:	2380      	movs	r3, #128	; 0x80
 8003826:	045b      	lsls	r3, r3, #17
 8003828:	429a      	cmp	r2, r3
 800382a:	d301      	bcc.n	8003830 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800382c:	2301      	movs	r3, #1
 800382e:	e010      	b.n	8003852 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003830:	4b0a      	ldr	r3, [pc, #40]	; (800385c <SysTick_Config+0x44>)
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	3a01      	subs	r2, #1
 8003836:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003838:	2301      	movs	r3, #1
 800383a:	425b      	negs	r3, r3
 800383c:	2103      	movs	r1, #3
 800383e:	0018      	movs	r0, r3
 8003840:	f7ff ff7c 	bl	800373c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <SysTick_Config+0x44>)
 8003846:	2200      	movs	r2, #0
 8003848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800384a:	4b04      	ldr	r3, [pc, #16]	; (800385c <SysTick_Config+0x44>)
 800384c:	2207      	movs	r2, #7
 800384e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003850:	2300      	movs	r3, #0
}
 8003852:	0018      	movs	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	b002      	add	sp, #8
 8003858:	bd80      	pop	{r7, pc}
 800385a:	46c0      	nop			; (mov r8, r8)
 800385c:	e000e010 	.word	0xe000e010

08003860 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	607a      	str	r2, [r7, #4]
 800386a:	210f      	movs	r1, #15
 800386c:	187b      	adds	r3, r7, r1
 800386e:	1c02      	adds	r2, r0, #0
 8003870:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	187b      	adds	r3, r7, r1
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	b25b      	sxtb	r3, r3
 800387a:	0011      	movs	r1, r2
 800387c:	0018      	movs	r0, r3
 800387e:	f7ff ff5d 	bl	800373c <__NVIC_SetPriority>
}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	46bd      	mov	sp, r7
 8003886:	b004      	add	sp, #16
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b082      	sub	sp, #8
 800388e:	af00      	add	r7, sp, #0
 8003890:	0002      	movs	r2, r0
 8003892:	1dfb      	adds	r3, r7, #7
 8003894:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003896:	1dfb      	adds	r3, r7, #7
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	b25b      	sxtb	r3, r3
 800389c:	0018      	movs	r0, r3
 800389e:	f7ff ff33 	bl	8003708 <__NVIC_EnableIRQ>
}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	46bd      	mov	sp, r7
 80038a6:	b002      	add	sp, #8
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b082      	sub	sp, #8
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	0018      	movs	r0, r3
 80038b6:	f7ff ffaf 	bl	8003818 <SysTick_Config>
 80038ba:	0003      	movs	r3, r0
}
 80038bc:	0018      	movs	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	b002      	add	sp, #8
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2221      	movs	r2, #33	; 0x21
 80038d0:	5c9b      	ldrb	r3, [r3, r2]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d008      	beq.n	80038ea <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2204      	movs	r2, #4
 80038dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	2100      	movs	r1, #0
 80038e4:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e020      	b.n	800392c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	210e      	movs	r1, #14
 80038f6:	438a      	bics	r2, r1
 80038f8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2101      	movs	r1, #1
 8003906:	438a      	bics	r2, r1
 8003908:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003912:	2101      	movs	r1, #1
 8003914:	4091      	lsls	r1, r2
 8003916:	000a      	movs	r2, r1
 8003918:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2221      	movs	r2, #33	; 0x21
 800391e:	2101      	movs	r1, #1
 8003920:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2220      	movs	r2, #32
 8003926:	2100      	movs	r1, #0
 8003928:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	0018      	movs	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	b002      	add	sp, #8
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800393c:	210f      	movs	r1, #15
 800393e:	187b      	adds	r3, r7, r1
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2221      	movs	r2, #33	; 0x21
 8003948:	5c9b      	ldrb	r3, [r3, r2]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d006      	beq.n	800395e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2204      	movs	r2, #4
 8003954:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003956:	187b      	adds	r3, r7, r1
 8003958:	2201      	movs	r2, #1
 800395a:	701a      	strb	r2, [r3, #0]
 800395c:	e028      	b.n	80039b0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	210e      	movs	r1, #14
 800396a:	438a      	bics	r2, r1
 800396c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2101      	movs	r1, #1
 800397a:	438a      	bics	r2, r1
 800397c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003986:	2101      	movs	r1, #1
 8003988:	4091      	lsls	r1, r2
 800398a:	000a      	movs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2221      	movs	r2, #33	; 0x21
 8003992:	2101      	movs	r1, #1
 8003994:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2220      	movs	r2, #32
 800399a:	2100      	movs	r1, #0
 800399c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d004      	beq.n	80039b0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	0010      	movs	r0, r2
 80039ae:	4798      	blx	r3
    } 
  }
  return status;
 80039b0:	230f      	movs	r3, #15
 80039b2:	18fb      	adds	r3, r7, r3
 80039b4:	781b      	ldrb	r3, [r3, #0]
}
 80039b6:	0018      	movs	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	b004      	add	sp, #16
 80039bc:	bd80      	pop	{r7, pc}
	...

080039c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039ce:	e155      	b.n	8003c7c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2101      	movs	r1, #1
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	4091      	lsls	r1, r2
 80039da:	000a      	movs	r2, r1
 80039dc:	4013      	ands	r3, r2
 80039de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d100      	bne.n	80039e8 <HAL_GPIO_Init+0x28>
 80039e6:	e146      	b.n	8003c76 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2203      	movs	r2, #3
 80039ee:	4013      	ands	r3, r2
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d005      	beq.n	8003a00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	2203      	movs	r2, #3
 80039fa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d130      	bne.n	8003a62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	2203      	movs	r2, #3
 8003a0c:	409a      	lsls	r2, r3
 8003a0e:	0013      	movs	r3, r2
 8003a10:	43da      	mvns	r2, r3
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	4013      	ands	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	68da      	ldr	r2, [r3, #12]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	409a      	lsls	r2, r3
 8003a22:	0013      	movs	r3, r2
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a36:	2201      	movs	r2, #1
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	0013      	movs	r3, r2
 8003a3e:	43da      	mvns	r2, r3
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4013      	ands	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	091b      	lsrs	r3, r3, #4
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	401a      	ands	r2, r3
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	409a      	lsls	r2, r3
 8003a54:	0013      	movs	r3, r2
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2203      	movs	r2, #3
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d017      	beq.n	8003a9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	2203      	movs	r2, #3
 8003a7a:	409a      	lsls	r2, r3
 8003a7c:	0013      	movs	r3, r2
 8003a7e:	43da      	mvns	r2, r3
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4013      	ands	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	409a      	lsls	r2, r3
 8003a90:	0013      	movs	r3, r2
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d123      	bne.n	8003af2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	08da      	lsrs	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3208      	adds	r2, #8
 8003ab2:	0092      	lsls	r2, r2, #2
 8003ab4:	58d3      	ldr	r3, [r2, r3]
 8003ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2207      	movs	r2, #7
 8003abc:	4013      	ands	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	220f      	movs	r2, #15
 8003ac2:	409a      	lsls	r2, r3
 8003ac4:	0013      	movs	r3, r2
 8003ac6:	43da      	mvns	r2, r3
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4013      	ands	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2107      	movs	r1, #7
 8003ad6:	400b      	ands	r3, r1
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	409a      	lsls	r2, r3
 8003adc:	0013      	movs	r3, r2
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	08da      	lsrs	r2, r3, #3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3208      	adds	r2, #8
 8003aec:	0092      	lsls	r2, r2, #2
 8003aee:	6939      	ldr	r1, [r7, #16]
 8003af0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	2203      	movs	r2, #3
 8003afe:	409a      	lsls	r2, r3
 8003b00:	0013      	movs	r3, r2
 8003b02:	43da      	mvns	r2, r3
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4013      	ands	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2203      	movs	r2, #3
 8003b10:	401a      	ands	r2, r3
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	409a      	lsls	r2, r3
 8003b18:	0013      	movs	r3, r2
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	23c0      	movs	r3, #192	; 0xc0
 8003b2c:	029b      	lsls	r3, r3, #10
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d100      	bne.n	8003b34 <HAL_GPIO_Init+0x174>
 8003b32:	e0a0      	b.n	8003c76 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b34:	4b57      	ldr	r3, [pc, #348]	; (8003c94 <HAL_GPIO_Init+0x2d4>)
 8003b36:	699a      	ldr	r2, [r3, #24]
 8003b38:	4b56      	ldr	r3, [pc, #344]	; (8003c94 <HAL_GPIO_Init+0x2d4>)
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	619a      	str	r2, [r3, #24]
 8003b40:	4b54      	ldr	r3, [pc, #336]	; (8003c94 <HAL_GPIO_Init+0x2d4>)
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2201      	movs	r2, #1
 8003b46:	4013      	ands	r3, r2
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b4c:	4a52      	ldr	r2, [pc, #328]	; (8003c98 <HAL_GPIO_Init+0x2d8>)
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	089b      	lsrs	r3, r3, #2
 8003b52:	3302      	adds	r3, #2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	589b      	ldr	r3, [r3, r2]
 8003b58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2203      	movs	r2, #3
 8003b5e:	4013      	ands	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	220f      	movs	r2, #15
 8003b64:	409a      	lsls	r2, r3
 8003b66:	0013      	movs	r3, r2
 8003b68:	43da      	mvns	r2, r3
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	2390      	movs	r3, #144	; 0x90
 8003b74:	05db      	lsls	r3, r3, #23
 8003b76:	429a      	cmp	r2, r3
 8003b78:	d019      	beq.n	8003bae <HAL_GPIO_Init+0x1ee>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a47      	ldr	r2, [pc, #284]	; (8003c9c <HAL_GPIO_Init+0x2dc>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d013      	beq.n	8003baa <HAL_GPIO_Init+0x1ea>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a46      	ldr	r2, [pc, #280]	; (8003ca0 <HAL_GPIO_Init+0x2e0>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00d      	beq.n	8003ba6 <HAL_GPIO_Init+0x1e6>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a45      	ldr	r2, [pc, #276]	; (8003ca4 <HAL_GPIO_Init+0x2e4>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d007      	beq.n	8003ba2 <HAL_GPIO_Init+0x1e2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a44      	ldr	r2, [pc, #272]	; (8003ca8 <HAL_GPIO_Init+0x2e8>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d101      	bne.n	8003b9e <HAL_GPIO_Init+0x1de>
 8003b9a:	2304      	movs	r3, #4
 8003b9c:	e008      	b.n	8003bb0 <HAL_GPIO_Init+0x1f0>
 8003b9e:	2305      	movs	r3, #5
 8003ba0:	e006      	b.n	8003bb0 <HAL_GPIO_Init+0x1f0>
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e004      	b.n	8003bb0 <HAL_GPIO_Init+0x1f0>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e002      	b.n	8003bb0 <HAL_GPIO_Init+0x1f0>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <HAL_GPIO_Init+0x1f0>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	2103      	movs	r1, #3
 8003bb4:	400a      	ands	r2, r1
 8003bb6:	0092      	lsls	r2, r2, #2
 8003bb8:	4093      	lsls	r3, r2
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bc0:	4935      	ldr	r1, [pc, #212]	; (8003c98 <HAL_GPIO_Init+0x2d8>)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	089b      	lsrs	r3, r3, #2
 8003bc6:	3302      	adds	r3, #2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bce:	4b37      	ldr	r3, [pc, #220]	; (8003cac <HAL_GPIO_Init+0x2ec>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	43da      	mvns	r2, r3
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	2380      	movs	r3, #128	; 0x80
 8003be4:	025b      	lsls	r3, r3, #9
 8003be6:	4013      	ands	r3, r2
 8003be8:	d003      	beq.n	8003bf2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003bf2:	4b2e      	ldr	r3, [pc, #184]	; (8003cac <HAL_GPIO_Init+0x2ec>)
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003bf8:	4b2c      	ldr	r3, [pc, #176]	; (8003cac <HAL_GPIO_Init+0x2ec>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	43da      	mvns	r2, r3
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4013      	ands	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	2380      	movs	r3, #128	; 0x80
 8003c0e:	029b      	lsls	r3, r3, #10
 8003c10:	4013      	ands	r3, r2
 8003c12:	d003      	beq.n	8003c1c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003c1c:	4b23      	ldr	r3, [pc, #140]	; (8003cac <HAL_GPIO_Init+0x2ec>)
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c22:	4b22      	ldr	r3, [pc, #136]	; (8003cac <HAL_GPIO_Init+0x2ec>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	43da      	mvns	r2, r3
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	2380      	movs	r3, #128	; 0x80
 8003c38:	035b      	lsls	r3, r3, #13
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d003      	beq.n	8003c46 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003c46:	4b19      	ldr	r3, [pc, #100]	; (8003cac <HAL_GPIO_Init+0x2ec>)
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003c4c:	4b17      	ldr	r3, [pc, #92]	; (8003cac <HAL_GPIO_Init+0x2ec>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	43da      	mvns	r2, r3
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	4013      	ands	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685a      	ldr	r2, [r3, #4]
 8003c60:	2380      	movs	r3, #128	; 0x80
 8003c62:	039b      	lsls	r3, r3, #14
 8003c64:	4013      	ands	r3, r2
 8003c66:	d003      	beq.n	8003c70 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003c70:	4b0e      	ldr	r3, [pc, #56]	; (8003cac <HAL_GPIO_Init+0x2ec>)
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	40da      	lsrs	r2, r3
 8003c84:	1e13      	subs	r3, r2, #0
 8003c86:	d000      	beq.n	8003c8a <HAL_GPIO_Init+0x2ca>
 8003c88:	e6a2      	b.n	80039d0 <HAL_GPIO_Init+0x10>
  } 
}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	46c0      	nop			; (mov r8, r8)
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	b006      	add	sp, #24
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40021000 	.word	0x40021000
 8003c98:	40010000 	.word	0x40010000
 8003c9c:	48000400 	.word	0x48000400
 8003ca0:	48000800 	.word	0x48000800
 8003ca4:	48000c00 	.word	0x48000c00
 8003ca8:	48001000 	.word	0x48001000
 8003cac:	40010400 	.word	0x40010400

08003cb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	000a      	movs	r2, r1
 8003cba:	1cbb      	adds	r3, r7, #2
 8003cbc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	1cba      	adds	r2, r7, #2
 8003cc4:	8812      	ldrh	r2, [r2, #0]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d004      	beq.n	8003cd4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003cca:	230f      	movs	r3, #15
 8003ccc:	18fb      	adds	r3, r7, r3
 8003cce:	2201      	movs	r2, #1
 8003cd0:	701a      	strb	r2, [r3, #0]
 8003cd2:	e003      	b.n	8003cdc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cd4:	230f      	movs	r3, #15
 8003cd6:	18fb      	adds	r3, r7, r3
 8003cd8:	2200      	movs	r2, #0
 8003cda:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003cdc:	230f      	movs	r3, #15
 8003cde:	18fb      	adds	r3, r7, r3
 8003ce0:	781b      	ldrb	r3, [r3, #0]
  }
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b004      	add	sp, #16
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	0008      	movs	r0, r1
 8003cf4:	0011      	movs	r1, r2
 8003cf6:	1cbb      	adds	r3, r7, #2
 8003cf8:	1c02      	adds	r2, r0, #0
 8003cfa:	801a      	strh	r2, [r3, #0]
 8003cfc:	1c7b      	adds	r3, r7, #1
 8003cfe:	1c0a      	adds	r2, r1, #0
 8003d00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d02:	1c7b      	adds	r3, r7, #1
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d004      	beq.n	8003d14 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d0a:	1cbb      	adds	r3, r7, #2
 8003d0c:	881a      	ldrh	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d12:	e003      	b.n	8003d1c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d14:	1cbb      	adds	r3, r7, #2
 8003d16:	881a      	ldrh	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d1c:	46c0      	nop			; (mov r8, r8)
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b002      	add	sp, #8
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	000a      	movs	r2, r1
 8003d2e:	1cbb      	adds	r3, r7, #2
 8003d30:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d38:	1cbb      	adds	r3, r7, #2
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	041a      	lsls	r2, r3, #16
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	43db      	mvns	r3, r3
 8003d46:	1cb9      	adds	r1, r7, #2
 8003d48:	8809      	ldrh	r1, [r1, #0]
 8003d4a:	400b      	ands	r3, r1
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	619a      	str	r2, [r3, #24]
}
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	46bd      	mov	sp, r7
 8003d56:	b004      	add	sp, #16
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	0002      	movs	r2, r0
 8003d64:	1dbb      	adds	r3, r7, #6
 8003d66:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d68:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	1dba      	adds	r2, r7, #6
 8003d6e:	8812      	ldrh	r2, [r2, #0]
 8003d70:	4013      	ands	r3, r2
 8003d72:	d008      	beq.n	8003d86 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d74:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003d76:	1dba      	adds	r2, r7, #6
 8003d78:	8812      	ldrh	r2, [r2, #0]
 8003d7a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d7c:	1dbb      	adds	r3, r7, #6
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	0018      	movs	r0, r3
 8003d82:	f7fd f97b 	bl	800107c <HAL_GPIO_EXTI_Callback>
  }
}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b002      	add	sp, #8
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	46c0      	nop			; (mov r8, r8)
 8003d90:	40010400 	.word	0x40010400

08003d94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d96:	b08b      	sub	sp, #44	; 0x2c
 8003d98:	af06      	add	r7, sp, #24
 8003d9a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e0ff      	b.n	8003fa6 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a81      	ldr	r2, [pc, #516]	; (8003fb0 <HAL_PCD_Init+0x21c>)
 8003daa:	5c9b      	ldrb	r3, [r3, r2]
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d108      	bne.n	8003dc4 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	23aa      	movs	r3, #170	; 0xaa
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	2100      	movs	r1, #0
 8003dba:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f008 fd70 	bl	800c8a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a7a      	ldr	r2, [pc, #488]	; (8003fb0 <HAL_PCD_Init+0x21c>)
 8003dc8:	2103      	movs	r1, #3
 8003dca:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	f004 fe0f 	bl	80089f4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dd6:	230f      	movs	r3, #15
 8003dd8:	18fb      	adds	r3, r7, r3
 8003dda:	2200      	movs	r2, #0
 8003ddc:	701a      	strb	r2, [r3, #0]
 8003dde:	e058      	b.n	8003e92 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003de0:	200f      	movs	r0, #15
 8003de2:	183b      	adds	r3, r7, r0
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	0013      	movs	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	189b      	adds	r3, r3, r2
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	18cb      	adds	r3, r1, r3
 8003df4:	3301      	adds	r3, #1
 8003df6:	2201      	movs	r2, #1
 8003df8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003dfa:	183b      	adds	r3, r7, r0
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	0013      	movs	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	189b      	adds	r3, r3, r2
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	183a      	adds	r2, r7, r0
 8003e0c:	7812      	ldrb	r2, [r2, #0]
 8003e0e:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e10:	0004      	movs	r4, r0
 8003e12:	183b      	adds	r3, r7, r0
 8003e14:	781a      	ldrb	r2, [r3, #0]
 8003e16:	193b      	adds	r3, r7, r4
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	b298      	uxth	r0, r3
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	0013      	movs	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	189b      	adds	r3, r3, r2
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	18cb      	adds	r3, r1, r3
 8003e28:	3336      	adds	r3, #54	; 0x36
 8003e2a:	1c02      	adds	r2, r0, #0
 8003e2c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e2e:	193b      	adds	r3, r7, r4
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	0013      	movs	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	189b      	adds	r3, r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	18cb      	adds	r3, r1, r3
 8003e40:	3303      	adds	r3, #3
 8003e42:	2200      	movs	r2, #0
 8003e44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e46:	193b      	adds	r3, r7, r4
 8003e48:	781a      	ldrb	r2, [r3, #0]
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	0013      	movs	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	189b      	adds	r3, r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	18cb      	adds	r3, r1, r3
 8003e56:	3338      	adds	r3, #56	; 0x38
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e5c:	193b      	adds	r3, r7, r4
 8003e5e:	781a      	ldrb	r2, [r3, #0]
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	0013      	movs	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	189b      	adds	r3, r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	18cb      	adds	r3, r1, r3
 8003e6c:	333c      	adds	r3, #60	; 0x3c
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e72:	193b      	adds	r3, r7, r4
 8003e74:	781a      	ldrb	r2, [r3, #0]
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	0013      	movs	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	189b      	adds	r3, r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	18cb      	adds	r3, r1, r3
 8003e82:	3340      	adds	r3, #64	; 0x40
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e88:	193b      	adds	r3, r7, r4
 8003e8a:	781a      	ldrb	r2, [r3, #0]
 8003e8c:	193b      	adds	r3, r7, r4
 8003e8e:	3201      	adds	r2, #1
 8003e90:	701a      	strb	r2, [r3, #0]
 8003e92:	210f      	movs	r1, #15
 8003e94:	187b      	adds	r3, r7, r1
 8003e96:	781a      	ldrb	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d39f      	bcc.n	8003de0 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ea0:	187b      	adds	r3, r7, r1
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	701a      	strb	r2, [r3, #0]
 8003ea6:	e056      	b.n	8003f56 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ea8:	240f      	movs	r4, #15
 8003eaa:	193b      	adds	r3, r7, r4
 8003eac:	781a      	ldrb	r2, [r3, #0]
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	236a      	movs	r3, #106	; 0x6a
 8003eb2:	33ff      	adds	r3, #255	; 0xff
 8003eb4:	0019      	movs	r1, r3
 8003eb6:	0013      	movs	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	189b      	adds	r3, r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	18c3      	adds	r3, r0, r3
 8003ec0:	185b      	adds	r3, r3, r1
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ec6:	193b      	adds	r3, r7, r4
 8003ec8:	781a      	ldrb	r2, [r3, #0]
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	23b4      	movs	r3, #180	; 0xb4
 8003ece:	0059      	lsls	r1, r3, #1
 8003ed0:	0013      	movs	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	189b      	adds	r3, r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	18c3      	adds	r3, r0, r3
 8003eda:	185b      	adds	r3, r3, r1
 8003edc:	193a      	adds	r2, r7, r4
 8003ede:	7812      	ldrb	r2, [r2, #0]
 8003ee0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ee2:	193b      	adds	r3, r7, r4
 8003ee4:	781a      	ldrb	r2, [r3, #0]
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	236c      	movs	r3, #108	; 0x6c
 8003eea:	33ff      	adds	r3, #255	; 0xff
 8003eec:	0019      	movs	r1, r3
 8003eee:	0013      	movs	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	189b      	adds	r3, r3, r2
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	18c3      	adds	r3, r0, r3
 8003ef8:	185b      	adds	r3, r3, r1
 8003efa:	2200      	movs	r2, #0
 8003efc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003efe:	193b      	adds	r3, r7, r4
 8003f00:	781a      	ldrb	r2, [r3, #0]
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	23bc      	movs	r3, #188	; 0xbc
 8003f06:	0059      	lsls	r1, r3, #1
 8003f08:	0013      	movs	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	189b      	adds	r3, r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	18c3      	adds	r3, r0, r3
 8003f12:	185b      	adds	r3, r3, r1
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f18:	193b      	adds	r3, r7, r4
 8003f1a:	781a      	ldrb	r2, [r3, #0]
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	23be      	movs	r3, #190	; 0xbe
 8003f20:	0059      	lsls	r1, r3, #1
 8003f22:	0013      	movs	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	189b      	adds	r3, r3, r2
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	18c3      	adds	r3, r0, r3
 8003f2c:	185b      	adds	r3, r3, r1
 8003f2e:	2200      	movs	r2, #0
 8003f30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f32:	193b      	adds	r3, r7, r4
 8003f34:	781a      	ldrb	r2, [r3, #0]
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	23c0      	movs	r3, #192	; 0xc0
 8003f3a:	0059      	lsls	r1, r3, #1
 8003f3c:	0013      	movs	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	189b      	adds	r3, r3, r2
 8003f42:	00db      	lsls	r3, r3, #3
 8003f44:	18c3      	adds	r3, r0, r3
 8003f46:	185b      	adds	r3, r3, r1
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f4c:	193b      	adds	r3, r7, r4
 8003f4e:	781a      	ldrb	r2, [r3, #0]
 8003f50:	193b      	adds	r3, r7, r4
 8003f52:	3201      	adds	r2, #1
 8003f54:	701a      	strb	r2, [r3, #0]
 8003f56:	230f      	movs	r3, #15
 8003f58:	18fb      	adds	r3, r7, r3
 8003f5a:	781a      	ldrb	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d3a1      	bcc.n	8003ea8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6818      	ldr	r0, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	466a      	mov	r2, sp
 8003f6c:	0011      	movs	r1, r2
 8003f6e:	001a      	movs	r2, r3
 8003f70:	3210      	adds	r2, #16
 8003f72:	ca70      	ldmia	r2!, {r4, r5, r6}
 8003f74:	c170      	stmia	r1!, {r4, r5, r6}
 8003f76:	ca30      	ldmia	r2!, {r4, r5}
 8003f78:	c130      	stmia	r1!, {r4, r5}
 8003f7a:	6859      	ldr	r1, [r3, #4]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f004 fd52 	bl	8008a28 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2224      	movs	r2, #36	; 0x24
 8003f88:	2100      	movs	r1, #0
 8003f8a:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a08      	ldr	r2, [pc, #32]	; (8003fb0 <HAL_PCD_Init+0x21c>)
 8003f90:	2101      	movs	r1, #1
 8003f92:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	69db      	ldr	r3, [r3, #28]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d103      	bne.n	8003fa4 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f001 fd34 	bl	8005a0c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	b005      	add	sp, #20
 8003fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	000002a9 	.word	0x000002a9

08003fb4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	23aa      	movs	r3, #170	; 0xaa
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	5cd3      	ldrb	r3, [r2, r3]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_PCD_Start+0x18>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e014      	b.n	8003ff6 <HAL_PCD_Start+0x42>
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	23aa      	movs	r3, #170	; 0xaa
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f004 fcf4 	bl	80089c8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f006 fc4f 	bl	800a888 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	23aa      	movs	r3, #170	; 0xaa
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	b002      	add	sp, #8
 8003ffc:	bd80      	pop	{r7, pc}
	...

08004000 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	0018      	movs	r0, r3
 800400e:	f006 fc51 	bl	800a8b4 <USB_ReadInterrupts>
 8004012:	0002      	movs	r2, r0
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	021b      	lsls	r3, r3, #8
 8004018:	401a      	ands	r2, r3
 800401a:	2380      	movs	r3, #128	; 0x80
 800401c:	021b      	lsls	r3, r3, #8
 800401e:	429a      	cmp	r2, r3
 8004020:	d103      	bne.n	800402a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	0018      	movs	r0, r3
 8004026:	f000 fbbb 	bl	80047a0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	0018      	movs	r0, r3
 8004030:	f006 fc40 	bl	800a8b4 <USB_ReadInterrupts>
 8004034:	0002      	movs	r2, r0
 8004036:	2380      	movs	r3, #128	; 0x80
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	401a      	ands	r2, r3
 800403c:	2380      	movs	r3, #128	; 0x80
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	429a      	cmp	r2, r3
 8004042:	d114      	bne.n	800406e <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2244      	movs	r2, #68	; 0x44
 800404a:	5a9b      	ldrh	r3, [r3, r2]
 800404c:	b29a      	uxth	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	49a2      	ldr	r1, [pc, #648]	; (80042dc <HAL_PCD_IRQHandler+0x2dc>)
 8004054:	400a      	ands	r2, r1
 8004056:	b291      	uxth	r1, r2
 8004058:	2244      	movs	r2, #68	; 0x44
 800405a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	0018      	movs	r0, r3
 8004060:	f008 fcab 	bl	800c9ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2100      	movs	r1, #0
 8004068:	0018      	movs	r0, r3
 800406a:	f000 f945 	bl	80042f8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	0018      	movs	r0, r3
 8004074:	f006 fc1e 	bl	800a8b4 <USB_ReadInterrupts>
 8004078:	0002      	movs	r2, r0
 800407a:	2380      	movs	r3, #128	; 0x80
 800407c:	01db      	lsls	r3, r3, #7
 800407e:	401a      	ands	r2, r3
 8004080:	2380      	movs	r3, #128	; 0x80
 8004082:	01db      	lsls	r3, r3, #7
 8004084:	429a      	cmp	r2, r3
 8004086:	d10b      	bne.n	80040a0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2244      	movs	r2, #68	; 0x44
 800408e:	5a9b      	ldrh	r3, [r3, r2]
 8004090:	b29a      	uxth	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4992      	ldr	r1, [pc, #584]	; (80042e0 <HAL_PCD_IRQHandler+0x2e0>)
 8004098:	400a      	ands	r2, r1
 800409a:	b291      	uxth	r1, r2
 800409c:	2244      	movs	r2, #68	; 0x44
 800409e:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	0018      	movs	r0, r3
 80040a6:	f006 fc05 	bl	800a8b4 <USB_ReadInterrupts>
 80040aa:	0002      	movs	r2, r0
 80040ac:	2380      	movs	r3, #128	; 0x80
 80040ae:	019b      	lsls	r3, r3, #6
 80040b0:	401a      	ands	r2, r3
 80040b2:	2380      	movs	r3, #128	; 0x80
 80040b4:	019b      	lsls	r3, r3, #6
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d10b      	bne.n	80040d2 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2244      	movs	r2, #68	; 0x44
 80040c0:	5a9b      	ldrh	r3, [r3, r2]
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4986      	ldr	r1, [pc, #536]	; (80042e4 <HAL_PCD_IRQHandler+0x2e4>)
 80040ca:	400a      	ands	r2, r1
 80040cc:	b291      	uxth	r1, r2
 80040ce:	2244      	movs	r2, #68	; 0x44
 80040d0:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	0018      	movs	r0, r3
 80040d8:	f006 fbec 	bl	800a8b4 <USB_ReadInterrupts>
 80040dc:	0002      	movs	r2, r0
 80040de:	2380      	movs	r3, #128	; 0x80
 80040e0:	015b      	lsls	r3, r3, #5
 80040e2:	401a      	ands	r2, r3
 80040e4:	2380      	movs	r3, #128	; 0x80
 80040e6:	015b      	lsls	r3, r3, #5
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d137      	bne.n	800415c <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2240      	movs	r2, #64	; 0x40
 80040f2:	5a9b      	ldrh	r3, [r3, r2]
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2104      	movs	r1, #4
 80040fc:	438a      	bics	r2, r1
 80040fe:	b291      	uxth	r1, r2
 8004100:	2240      	movs	r2, #64	; 0x40
 8004102:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2240      	movs	r2, #64	; 0x40
 800410a:	5a9b      	ldrh	r3, [r3, r2]
 800410c:	b29a      	uxth	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2108      	movs	r1, #8
 8004114:	438a      	bics	r2, r1
 8004116:	b291      	uxth	r1, r2
 8004118:	2240      	movs	r2, #64	; 0x40
 800411a:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	23b8      	movs	r3, #184	; 0xb8
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	5cd3      	ldrb	r3, [r2, r3]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d109      	bne.n	800413c <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	23b8      	movs	r3, #184	; 0xb8
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	2100      	movs	r1, #0
 8004130:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2100      	movs	r1, #0
 8004136:	0018      	movs	r0, r3
 8004138:	f001 fc92 	bl	8005a60 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	0018      	movs	r0, r3
 8004140:	f008 fc7c 	bl	800ca3c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2244      	movs	r2, #68	; 0x44
 800414a:	5a9b      	ldrh	r3, [r3, r2]
 800414c:	b29a      	uxth	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4965      	ldr	r1, [pc, #404]	; (80042e8 <HAL_PCD_IRQHandler+0x2e8>)
 8004154:	400a      	ands	r2, r1
 8004156:	b291      	uxth	r1, r2
 8004158:	2244      	movs	r2, #68	; 0x44
 800415a:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	0018      	movs	r0, r3
 8004162:	f006 fba7 	bl	800a8b4 <USB_ReadInterrupts>
 8004166:	0002      	movs	r2, r0
 8004168:	2380      	movs	r3, #128	; 0x80
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	401a      	ands	r2, r3
 800416e:	2380      	movs	r3, #128	; 0x80
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	429a      	cmp	r2, r3
 8004174:	d127      	bne.n	80041c6 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2240      	movs	r2, #64	; 0x40
 800417c:	5a9b      	ldrh	r3, [r3, r2]
 800417e:	b29a      	uxth	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2108      	movs	r1, #8
 8004186:	430a      	orrs	r2, r1
 8004188:	b291      	uxth	r1, r2
 800418a:	2240      	movs	r2, #64	; 0x40
 800418c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2244      	movs	r2, #68	; 0x44
 8004194:	5a9b      	ldrh	r3, [r3, r2]
 8004196:	b29a      	uxth	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4953      	ldr	r1, [pc, #332]	; (80042ec <HAL_PCD_IRQHandler+0x2ec>)
 800419e:	400a      	ands	r2, r1
 80041a0:	b291      	uxth	r1, r2
 80041a2:	2244      	movs	r2, #68	; 0x44
 80041a4:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2240      	movs	r2, #64	; 0x40
 80041ac:	5a9b      	ldrh	r3, [r3, r2]
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2104      	movs	r1, #4
 80041b6:	430a      	orrs	r2, r1
 80041b8:	b291      	uxth	r1, r2
 80041ba:	2240      	movs	r2, #64	; 0x40
 80041bc:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	0018      	movs	r0, r3
 80041c2:	f008 fc1f 	bl	800ca04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	0018      	movs	r0, r3
 80041cc:	f006 fb72 	bl	800a8b4 <USB_ReadInterrupts>
 80041d0:	0003      	movs	r3, r0
 80041d2:	2280      	movs	r2, #128	; 0x80
 80041d4:	4013      	ands	r3, r2
 80041d6:	2b80      	cmp	r3, #128	; 0x80
 80041d8:	d145      	bne.n	8004266 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2244      	movs	r2, #68	; 0x44
 80041e0:	5a9b      	ldrh	r3, [r3, r2]
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2180      	movs	r1, #128	; 0x80
 80041ea:	438a      	bics	r2, r1
 80041ec:	b291      	uxth	r1, r2
 80041ee:	2244      	movs	r2, #68	; 0x44
 80041f0:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	23b8      	movs	r3, #184	; 0xb8
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	5cd3      	ldrb	r3, [r2, r3]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d12f      	bne.n	800425e <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2240      	movs	r2, #64	; 0x40
 8004204:	5a9b      	ldrh	r3, [r3, r2]
 8004206:	b29a      	uxth	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2104      	movs	r1, #4
 800420e:	430a      	orrs	r2, r1
 8004210:	b291      	uxth	r1, r2
 8004212:	2240      	movs	r2, #64	; 0x40
 8004214:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2240      	movs	r2, #64	; 0x40
 800421c:	5a9b      	ldrh	r3, [r3, r2]
 800421e:	b29a      	uxth	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2108      	movs	r1, #8
 8004226:	430a      	orrs	r2, r1
 8004228:	b291      	uxth	r1, r2
 800422a:	2240      	movs	r2, #64	; 0x40
 800422c:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	23b8      	movs	r3, #184	; 0xb8
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	2101      	movs	r1, #1
 8004236:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2254      	movs	r2, #84	; 0x54
 800423e:	5a9b      	ldrh	r3, [r3, r2]
 8004240:	b29b      	uxth	r3, r3
 8004242:	089b      	lsrs	r3, r3, #2
 8004244:	223c      	movs	r2, #60	; 0x3c
 8004246:	4013      	ands	r3, r2
 8004248:	0019      	movs	r1, r3
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	23b9      	movs	r3, #185	; 0xb9
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2101      	movs	r1, #1
 8004256:	0018      	movs	r0, r3
 8004258:	f001 fc02 	bl	8005a60 <HAL_PCDEx_LPM_Callback>
 800425c:	e003      	b.n	8004266 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	0018      	movs	r0, r3
 8004262:	f008 fbcf 	bl	800ca04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	0018      	movs	r0, r3
 800426c:	f006 fb22 	bl	800a8b4 <USB_ReadInterrupts>
 8004270:	0002      	movs	r2, r0
 8004272:	2380      	movs	r3, #128	; 0x80
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	401a      	ands	r2, r3
 8004278:	2380      	movs	r3, #128	; 0x80
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	429a      	cmp	r2, r3
 800427e:	d10f      	bne.n	80042a0 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2244      	movs	r2, #68	; 0x44
 8004286:	5a9b      	ldrh	r3, [r3, r2]
 8004288:	b29a      	uxth	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4918      	ldr	r1, [pc, #96]	; (80042f0 <HAL_PCD_IRQHandler+0x2f0>)
 8004290:	400a      	ands	r2, r1
 8004292:	b291      	uxth	r1, r2
 8004294:	2244      	movs	r2, #68	; 0x44
 8004296:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	0018      	movs	r0, r3
 800429c:	f008 fb7e 	bl	800c99c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	0018      	movs	r0, r3
 80042a6:	f006 fb05 	bl	800a8b4 <USB_ReadInterrupts>
 80042aa:	0002      	movs	r2, r0
 80042ac:	2380      	movs	r3, #128	; 0x80
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	401a      	ands	r2, r3
 80042b2:	2380      	movs	r3, #128	; 0x80
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d10b      	bne.n	80042d2 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2244      	movs	r2, #68	; 0x44
 80042c0:	5a9b      	ldrh	r3, [r3, r2]
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	490a      	ldr	r1, [pc, #40]	; (80042f4 <HAL_PCD_IRQHandler+0x2f4>)
 80042ca:	400a      	ands	r2, r1
 80042cc:	b291      	uxth	r1, r2
 80042ce:	2244      	movs	r2, #68	; 0x44
 80042d0:	5299      	strh	r1, [r3, r2]
  }
}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b002      	add	sp, #8
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	fffffbff 	.word	0xfffffbff
 80042e0:	ffffbfff 	.word	0xffffbfff
 80042e4:	ffffdfff 	.word	0xffffdfff
 80042e8:	ffffefff 	.word	0xffffefff
 80042ec:	fffff7ff 	.word	0xfffff7ff
 80042f0:	fffffdff 	.word	0xfffffdff
 80042f4:	fffffeff 	.word	0xfffffeff

080042f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	000a      	movs	r2, r1
 8004302:	1cfb      	adds	r3, r7, #3
 8004304:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	23aa      	movs	r3, #170	; 0xaa
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	5cd3      	ldrb	r3, [r2, r3]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d101      	bne.n	8004316 <HAL_PCD_SetAddress+0x1e>
 8004312:	2302      	movs	r3, #2
 8004314:	e017      	b.n	8004346 <HAL_PCD_SetAddress+0x4e>
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	23aa      	movs	r3, #170	; 0xaa
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	2101      	movs	r1, #1
 800431e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	1cfa      	adds	r2, r7, #3
 8004324:	2124      	movs	r1, #36	; 0x24
 8004326:	7812      	ldrb	r2, [r2, #0]
 8004328:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	1cfb      	adds	r3, r7, #3
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	0019      	movs	r1, r3
 8004334:	0010      	movs	r0, r2
 8004336:	f006 fa93 	bl	800a860 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	23aa      	movs	r3, #170	; 0xaa
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	2100      	movs	r1, #0
 8004342:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	0018      	movs	r0, r3
 8004348:	46bd      	mov	sp, r7
 800434a:	b002      	add	sp, #8
 800434c:	bd80      	pop	{r7, pc}

0800434e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800434e:	b590      	push	{r4, r7, lr}
 8004350:	b085      	sub	sp, #20
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
 8004356:	000c      	movs	r4, r1
 8004358:	0010      	movs	r0, r2
 800435a:	0019      	movs	r1, r3
 800435c:	1cfb      	adds	r3, r7, #3
 800435e:	1c22      	adds	r2, r4, #0
 8004360:	701a      	strb	r2, [r3, #0]
 8004362:	003b      	movs	r3, r7
 8004364:	1c02      	adds	r2, r0, #0
 8004366:	801a      	strh	r2, [r3, #0]
 8004368:	1cbb      	adds	r3, r7, #2
 800436a:	1c0a      	adds	r2, r1, #0
 800436c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800436e:	230b      	movs	r3, #11
 8004370:	18fb      	adds	r3, r7, r3
 8004372:	2200      	movs	r2, #0
 8004374:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004376:	1cfb      	adds	r3, r7, #3
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	b25b      	sxtb	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	da0f      	bge.n	80043a0 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004380:	1cfb      	adds	r3, r7, #3
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2207      	movs	r2, #7
 8004386:	4013      	ands	r3, r2
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	0013      	movs	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	189b      	adds	r3, r3, r2
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	18d3      	adds	r3, r2, r3
 8004396:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2201      	movs	r2, #1
 800439c:	705a      	strb	r2, [r3, #1]
 800439e:	e00f      	b.n	80043c0 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043a0:	1cfb      	adds	r3, r7, #3
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2207      	movs	r2, #7
 80043a6:	401a      	ands	r2, r3
 80043a8:	0013      	movs	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	189b      	adds	r3, r3, r2
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	3369      	adds	r3, #105	; 0x69
 80043b2:	33ff      	adds	r3, #255	; 0xff
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	18d3      	adds	r3, r2, r3
 80043b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80043c0:	1cfb      	adds	r3, r7, #3
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2207      	movs	r2, #7
 80043c6:	4013      	ands	r3, r2
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80043ce:	003b      	movs	r3, r7
 80043d0:	881a      	ldrh	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1cba      	adds	r2, r7, #2
 80043da:	7812      	ldrb	r2, [r2, #0]
 80043dc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	785b      	ldrb	r3, [r3, #1]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d004      	beq.n	80043f0 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80043f0:	1cbb      	adds	r3, r7, #2
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d102      	bne.n	80043fe <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	23aa      	movs	r3, #170	; 0xaa
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	5cd3      	ldrb	r3, [r2, r3]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_PCD_EP_Open+0xc0>
 800440a:	2302      	movs	r3, #2
 800440c:	e013      	b.n	8004436 <HAL_PCD_EP_Open+0xe8>
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	23aa      	movs	r3, #170	; 0xaa
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	2101      	movs	r1, #1
 8004416:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	0011      	movs	r1, r2
 8004420:	0018      	movs	r0, r3
 8004422:	f004 fb2d 	bl	8008a80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	23aa      	movs	r3, #170	; 0xaa
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	2100      	movs	r1, #0
 800442e:	54d1      	strb	r1, [r2, r3]

  return ret;
 8004430:	230b      	movs	r3, #11
 8004432:	18fb      	adds	r3, r7, r3
 8004434:	781b      	ldrb	r3, [r3, #0]
}
 8004436:	0018      	movs	r0, r3
 8004438:	46bd      	mov	sp, r7
 800443a:	b005      	add	sp, #20
 800443c:	bd90      	pop	{r4, r7, pc}

0800443e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b084      	sub	sp, #16
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
 8004446:	000a      	movs	r2, r1
 8004448:	1cfb      	adds	r3, r7, #3
 800444a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800444c:	1cfb      	adds	r3, r7, #3
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	b25b      	sxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	da0f      	bge.n	8004476 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004456:	1cfb      	adds	r3, r7, #3
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	2207      	movs	r2, #7
 800445c:	4013      	ands	r3, r2
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	0013      	movs	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	189b      	adds	r3, r3, r2
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	18d3      	adds	r3, r2, r3
 800446c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	705a      	strb	r2, [r3, #1]
 8004474:	e00f      	b.n	8004496 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004476:	1cfb      	adds	r3, r7, #3
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2207      	movs	r2, #7
 800447c:	401a      	ands	r2, r3
 800447e:	0013      	movs	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	189b      	adds	r3, r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	3369      	adds	r3, #105	; 0x69
 8004488:	33ff      	adds	r3, #255	; 0xff
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	18d3      	adds	r3, r2, r3
 800448e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004496:	1cfb      	adds	r3, r7, #3
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2207      	movs	r2, #7
 800449c:	4013      	ands	r3, r2
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	23aa      	movs	r3, #170	; 0xaa
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	5cd3      	ldrb	r3, [r2, r3]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_PCD_EP_Close+0x76>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e011      	b.n	80044d8 <HAL_PCD_EP_Close+0x9a>
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	23aa      	movs	r3, #170	; 0xaa
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	2101      	movs	r1, #1
 80044bc:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	0011      	movs	r1, r2
 80044c6:	0018      	movs	r0, r3
 80044c8:	f004 fe4e 	bl	8009168 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	23aa      	movs	r3, #170	; 0xaa
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	2100      	movs	r1, #0
 80044d4:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	0018      	movs	r0, r3
 80044da:	46bd      	mov	sp, r7
 80044dc:	b004      	add	sp, #16
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	607a      	str	r2, [r7, #4]
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	200b      	movs	r0, #11
 80044ee:	183b      	adds	r3, r7, r0
 80044f0:	1c0a      	adds	r2, r1, #0
 80044f2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044f4:	0001      	movs	r1, r0
 80044f6:	187b      	adds	r3, r7, r1
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	2207      	movs	r2, #7
 80044fc:	401a      	ands	r2, r3
 80044fe:	0013      	movs	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	189b      	adds	r3, r3, r2
 8004504:	00db      	lsls	r3, r3, #3
 8004506:	3369      	adds	r3, #105	; 0x69
 8004508:	33ff      	adds	r3, #255	; 0xff
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	18d3      	adds	r3, r2, r3
 800450e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	2200      	movs	r2, #0
 8004520:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2200      	movs	r2, #0
 8004526:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004528:	187b      	adds	r3, r7, r1
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2207      	movs	r2, #7
 800452e:	4013      	ands	r3, r2
 8004530:	b2da      	uxtb	r2, r3
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004536:	187b      	adds	r3, r7, r1
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2207      	movs	r2, #7
 800453c:	4013      	ands	r3, r2
 800453e:	d107      	bne.n	8004550 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	0011      	movs	r1, r2
 8004548:	0018      	movs	r0, r3
 800454a:	f004 ffcd 	bl	80094e8 <USB_EPStartXfer>
 800454e:	e006      	b.n	800455e <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	0011      	movs	r1, r2
 8004558:	0018      	movs	r0, r3
 800455a:	f004 ffc5 	bl	80094e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	0018      	movs	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	b006      	add	sp, #24
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	000a      	movs	r2, r1
 8004572:	1cfb      	adds	r3, r7, #3
 8004574:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004576:	1cfb      	adds	r3, r7, #3
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2207      	movs	r2, #7
 800457c:	401a      	ands	r2, r3
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	23c2      	movs	r3, #194	; 0xc2
 8004582:	0059      	lsls	r1, r3, #1
 8004584:	0013      	movs	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	189b      	adds	r3, r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	18c3      	adds	r3, r0, r3
 800458e:	185b      	adds	r3, r3, r1
 8004590:	681b      	ldr	r3, [r3, #0]
}
 8004592:	0018      	movs	r0, r3
 8004594:	46bd      	mov	sp, r7
 8004596:	b002      	add	sp, #8
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b086      	sub	sp, #24
 800459e:	af00      	add	r7, sp, #0
 80045a0:	60f8      	str	r0, [r7, #12]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
 80045a6:	200b      	movs	r0, #11
 80045a8:	183b      	adds	r3, r7, r0
 80045aa:	1c0a      	adds	r2, r1, #0
 80045ac:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045ae:	183b      	adds	r3, r7, r0
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	2207      	movs	r2, #7
 80045b4:	4013      	ands	r3, r2
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	0013      	movs	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	189b      	adds	r3, r3, r2
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	18d3      	adds	r3, r2, r3
 80045c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	2224      	movs	r2, #36	; 0x24
 80045d6:	2101      	movs	r1, #1
 80045d8:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	2200      	movs	r2, #0
 80045e4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	2201      	movs	r2, #1
 80045ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80045ec:	183b      	adds	r3, r7, r0
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2207      	movs	r2, #7
 80045f2:	4013      	ands	r3, r2
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045fa:	183b      	adds	r3, r7, r0
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2207      	movs	r2, #7
 8004600:	4013      	ands	r3, r2
 8004602:	d107      	bne.n	8004614 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	0011      	movs	r1, r2
 800460c:	0018      	movs	r0, r3
 800460e:	f004 ff6b 	bl	80094e8 <USB_EPStartXfer>
 8004612:	e006      	b.n	8004622 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	0011      	movs	r1, r2
 800461c:	0018      	movs	r0, r3
 800461e:	f004 ff63 	bl	80094e8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	0018      	movs	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	b006      	add	sp, #24
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	000a      	movs	r2, r1
 8004636:	1cfb      	adds	r3, r7, #3
 8004638:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800463a:	1cfb      	adds	r3, r7, #3
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2207      	movs	r2, #7
 8004640:	401a      	ands	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	429a      	cmp	r2, r3
 8004648:	d901      	bls.n	800464e <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e046      	b.n	80046dc <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800464e:	1cfb      	adds	r3, r7, #3
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	b25b      	sxtb	r3, r3
 8004654:	2b00      	cmp	r3, #0
 8004656:	da0f      	bge.n	8004678 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004658:	1cfb      	adds	r3, r7, #3
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2207      	movs	r2, #7
 800465e:	4013      	ands	r3, r2
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	0013      	movs	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	189b      	adds	r3, r3, r2
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	18d3      	adds	r3, r2, r3
 800466e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2201      	movs	r2, #1
 8004674:	705a      	strb	r2, [r3, #1]
 8004676:	e00d      	b.n	8004694 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004678:	1cfb      	adds	r3, r7, #3
 800467a:	781a      	ldrb	r2, [r3, #0]
 800467c:	0013      	movs	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	189b      	adds	r3, r3, r2
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	3369      	adds	r3, #105	; 0x69
 8004686:	33ff      	adds	r3, #255	; 0xff
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	18d3      	adds	r3, r2, r3
 800468c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2201      	movs	r2, #1
 8004698:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800469a:	1cfb      	adds	r3, r7, #3
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	2207      	movs	r2, #7
 80046a0:	4013      	ands	r3, r2
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	23aa      	movs	r3, #170	; 0xaa
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	5cd3      	ldrb	r3, [r2, r3]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <HAL_PCD_EP_SetStall+0x8c>
 80046b4:	2302      	movs	r3, #2
 80046b6:	e011      	b.n	80046dc <HAL_PCD_EP_SetStall+0xb0>
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	23aa      	movs	r3, #170	; 0xaa
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	2101      	movs	r1, #1
 80046c0:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	0011      	movs	r1, r2
 80046ca:	0018      	movs	r0, r3
 80046cc:	f005 ffc6 	bl	800a65c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	23aa      	movs	r3, #170	; 0xaa
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	2100      	movs	r1, #0
 80046d8:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	0018      	movs	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	b004      	add	sp, #16
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	000a      	movs	r2, r1
 80046ee:	1cfb      	adds	r3, r7, #3
 80046f0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80046f2:	1cfb      	adds	r3, r7, #3
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	220f      	movs	r2, #15
 80046f8:	401a      	ands	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d901      	bls.n	8004706 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e048      	b.n	8004798 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004706:	1cfb      	adds	r3, r7, #3
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	b25b      	sxtb	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	da0f      	bge.n	8004730 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004710:	1cfb      	adds	r3, r7, #3
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2207      	movs	r2, #7
 8004716:	4013      	ands	r3, r2
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	0013      	movs	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	189b      	adds	r3, r3, r2
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	18d3      	adds	r3, r2, r3
 8004726:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2201      	movs	r2, #1
 800472c:	705a      	strb	r2, [r3, #1]
 800472e:	e00f      	b.n	8004750 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004730:	1cfb      	adds	r3, r7, #3
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2207      	movs	r2, #7
 8004736:	401a      	ands	r2, r3
 8004738:	0013      	movs	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	189b      	adds	r3, r3, r2
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	3369      	adds	r3, #105	; 0x69
 8004742:	33ff      	adds	r3, #255	; 0xff
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	18d3      	adds	r3, r2, r3
 8004748:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004756:	1cfb      	adds	r3, r7, #3
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2207      	movs	r2, #7
 800475c:	4013      	ands	r3, r2
 800475e:	b2da      	uxtb	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	23aa      	movs	r3, #170	; 0xaa
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	5cd3      	ldrb	r3, [r2, r3]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <HAL_PCD_EP_ClrStall+0x90>
 8004770:	2302      	movs	r3, #2
 8004772:	e011      	b.n	8004798 <HAL_PCD_EP_ClrStall+0xb4>
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	23aa      	movs	r3, #170	; 0xaa
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	2101      	movs	r1, #1
 800477c:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	0011      	movs	r1, r2
 8004786:	0018      	movs	r0, r3
 8004788:	f005 ffb8 	bl	800a6fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	23aa      	movs	r3, #170	; 0xaa
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	2100      	movs	r1, #0
 8004794:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	0018      	movs	r0, r3
 800479a:	46bd      	mov	sp, r7
 800479c:	b004      	add	sp, #16
 800479e:	bd80      	pop	{r7, pc}

080047a0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80047a0:	b5b0      	push	{r4, r5, r7, lr}
 80047a2:	b096      	sub	sp, #88	; 0x58
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80047a8:	f000 fbd8 	bl	8004f5c <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	2056      	movs	r0, #86	; 0x56
 80047b2:	183b      	adds	r3, r7, r0
 80047b4:	2144      	movs	r1, #68	; 0x44
 80047b6:	5a52      	ldrh	r2, [r2, r1]
 80047b8:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80047ba:	183b      	adds	r3, r7, r0
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	2455      	movs	r4, #85	; 0x55
 80047c2:	193b      	adds	r3, r7, r4
 80047c4:	210f      	movs	r1, #15
 80047c6:	400a      	ands	r2, r1
 80047c8:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80047ca:	193b      	adds	r3, r7, r4
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d000      	beq.n	80047d4 <PCD_EP_ISR_Handler+0x34>
 80047d2:	e179      	b.n	8004ac8 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80047d4:	183b      	adds	r3, r7, r0
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	2210      	movs	r2, #16
 80047da:	4013      	ands	r3, r2
 80047dc:	d154      	bne.n	8004888 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	200e      	movs	r0, #14
 80047e8:	183b      	adds	r3, r7, r0
 80047ea:	49af      	ldr	r1, [pc, #700]	; (8004aa8 <PCD_EP_ISR_Handler+0x308>)
 80047ec:	400a      	ands	r2, r1
 80047ee:	801a      	strh	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	183a      	adds	r2, r7, r0
 80047f6:	8812      	ldrh	r2, [r2, #0]
 80047f8:	49ac      	ldr	r1, [pc, #688]	; (8004aac <PCD_EP_ISR_Handler+0x30c>)
 80047fa:	430a      	orrs	r2, r1
 80047fc:	b292      	uxth	r2, r2
 80047fe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3328      	adds	r3, #40	; 0x28
 8004804:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2250      	movs	r2, #80	; 0x50
 800480c:	5a9b      	ldrh	r3, [r3, r2]
 800480e:	b29b      	uxth	r3, r3
 8004810:	001a      	movs	r2, r3
 8004812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	18d2      	adds	r2, r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	18d3      	adds	r3, r2, r3
 8004820:	4aa3      	ldr	r2, [pc, #652]	; (8004ab0 <PCD_EP_ISR_Handler+0x310>)
 8004822:	4694      	mov	ip, r2
 8004824:	4463      	add	r3, ip
 8004826:	881b      	ldrh	r3, [r3, #0]
 8004828:	059b      	lsls	r3, r3, #22
 800482a:	0d9a      	lsrs	r2, r3, #22
 800482c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800482e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004832:	695a      	ldr	r2, [r3, #20]
 8004834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	18d2      	adds	r2, r2, r3
 800483a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800483c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2100      	movs	r1, #0
 8004842:	0018      	movs	r0, r3
 8004844:	f008 f88c 	bl	800c960 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2224      	movs	r2, #36	; 0x24
 800484c:	5c9b      	ldrb	r3, [r3, r2]
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <PCD_EP_ISR_Handler+0xb8>
 8004854:	f000 fb82 	bl	8004f5c <PCD_EP_ISR_Handler+0x7bc>
 8004858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <PCD_EP_ISR_Handler+0xc4>
 8004860:	f000 fb7c 	bl	8004f5c <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2224      	movs	r2, #36	; 0x24
 8004868:	5c9b      	ldrb	r3, [r3, r2]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2280      	movs	r2, #128	; 0x80
 800486e:	4252      	negs	r2, r2
 8004870:	4313      	orrs	r3, r2
 8004872:	b2da      	uxtb	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	b291      	uxth	r1, r2
 800487a:	224c      	movs	r2, #76	; 0x4c
 800487c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2224      	movs	r2, #36	; 0x24
 8004882:	2100      	movs	r1, #0
 8004884:	5499      	strb	r1, [r3, r2]
 8004886:	e369      	b.n	8004f5c <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3369      	adds	r3, #105	; 0x69
 800488c:	33ff      	adds	r3, #255	; 0xff
 800488e:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	2152      	movs	r1, #82	; 0x52
 8004896:	187b      	adds	r3, r7, r1
 8004898:	8812      	ldrh	r2, [r2, #0]
 800489a:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800489c:	187b      	adds	r3, r7, r1
 800489e:	881a      	ldrh	r2, [r3, #0]
 80048a0:	2380      	movs	r3, #128	; 0x80
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	4013      	ands	r3, r2
 80048a6:	d037      	beq.n	8004918 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2250      	movs	r2, #80	; 0x50
 80048ae:	5a9b      	ldrh	r3, [r3, r2]
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	001a      	movs	r2, r3
 80048b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	18d2      	adds	r2, r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	18d3      	adds	r3, r2, r3
 80048c2:	4a7c      	ldr	r2, [pc, #496]	; (8004ab4 <PCD_EP_ISR_Handler+0x314>)
 80048c4:	4694      	mov	ip, r2
 80048c6:	4463      	add	r3, ip
 80048c8:	881b      	ldrh	r3, [r3, #0]
 80048ca:	059b      	lsls	r3, r3, #22
 80048cc:	0d9a      	lsrs	r2, r3, #22
 80048ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048d0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6818      	ldr	r0, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	22ac      	movs	r2, #172	; 0xac
 80048da:	0092      	lsls	r2, r2, #2
 80048dc:	1899      	adds	r1, r3, r2
 80048de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80048e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	f006 f836 	bl	800a958 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	2010      	movs	r0, #16
 80048f6:	183b      	adds	r3, r7, r0
 80048f8:	496f      	ldr	r1, [pc, #444]	; (8004ab8 <PCD_EP_ISR_Handler+0x318>)
 80048fa:	400a      	ands	r2, r1
 80048fc:	801a      	strh	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	183a      	adds	r2, r7, r0
 8004904:	8812      	ldrh	r2, [r2, #0]
 8004906:	2180      	movs	r1, #128	; 0x80
 8004908:	430a      	orrs	r2, r1
 800490a:	b292      	uxth	r2, r2
 800490c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	0018      	movs	r0, r3
 8004912:	f007 ffef 	bl	800c8f4 <HAL_PCD_SetupStageCallback>
 8004916:	e321      	b.n	8004f5c <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004918:	2352      	movs	r3, #82	; 0x52
 800491a:	18fb      	adds	r3, r7, r3
 800491c:	2200      	movs	r2, #0
 800491e:	5e9b      	ldrsh	r3, [r3, r2]
 8004920:	2b00      	cmp	r3, #0
 8004922:	db00      	blt.n	8004926 <PCD_EP_ISR_Handler+0x186>
 8004924:	e31a      	b.n	8004f5c <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	881b      	ldrh	r3, [r3, #0]
 800492c:	b29a      	uxth	r2, r3
 800492e:	201e      	movs	r0, #30
 8004930:	183b      	adds	r3, r7, r0
 8004932:	4961      	ldr	r1, [pc, #388]	; (8004ab8 <PCD_EP_ISR_Handler+0x318>)
 8004934:	400a      	ands	r2, r1
 8004936:	801a      	strh	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	183a      	adds	r2, r7, r0
 800493e:	8812      	ldrh	r2, [r2, #0]
 8004940:	2180      	movs	r1, #128	; 0x80
 8004942:	430a      	orrs	r2, r1
 8004944:	b292      	uxth	r2, r2
 8004946:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2250      	movs	r2, #80	; 0x50
 800494e:	5a9b      	ldrh	r3, [r3, r2]
 8004950:	b29b      	uxth	r3, r3
 8004952:	001a      	movs	r2, r3
 8004954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	18d2      	adds	r2, r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	18d3      	adds	r3, r2, r3
 8004962:	4a54      	ldr	r2, [pc, #336]	; (8004ab4 <PCD_EP_ISR_Handler+0x314>)
 8004964:	4694      	mov	ip, r2
 8004966:	4463      	add	r3, ip
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	059b      	lsls	r3, r3, #22
 800496c:	0d9a      	lsrs	r2, r3, #22
 800496e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004970:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d01a      	beq.n	80049b0 <PCD_EP_ISR_Handler+0x210>
 800497a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d016      	beq.n	80049b0 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6818      	ldr	r0, [r3, #0]
 8004986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004988:	6959      	ldr	r1, [r3, #20]
 800498a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800498c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800498e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004990:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004992:	b29b      	uxth	r3, r3
 8004994:	f005 ffe0 	bl	800a958 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800499a:	695a      	ldr	r2, [r3, #20]
 800499c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	18d2      	adds	r2, r2, r3
 80049a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049a4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2100      	movs	r1, #0
 80049aa:	0018      	movs	r0, r3
 80049ac:	f007 ffb7 	bl	800c91e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	001a      	movs	r2, r3
 80049ba:	2380      	movs	r3, #128	; 0x80
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	4013      	ands	r3, r2
 80049c0:	d000      	beq.n	80049c4 <PCD_EP_ISR_Handler+0x224>
 80049c2:	e2cb      	b.n	8004f5c <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	61bb      	str	r3, [r7, #24]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2250      	movs	r2, #80	; 0x50
 80049d0:	5a9b      	ldrh	r3, [r3, r2]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	001a      	movs	r2, r3
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	189b      	adds	r3, r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	4a35      	ldr	r2, [pc, #212]	; (8004ab4 <PCD_EP_ISR_Handler+0x314>)
 80049e0:	4694      	mov	ip, r2
 80049e2:	4463      	add	r3, ip
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d110      	bne.n	8004a10 <PCD_EP_ISR_Handler+0x270>
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	4a31      	ldr	r2, [pc, #196]	; (8004abc <PCD_EP_ISR_Handler+0x31c>)
 80049f6:	4013      	ands	r3, r2
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	801a      	strh	r2, [r3, #0]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	4a29      	ldr	r2, [pc, #164]	; (8004aac <PCD_EP_ISR_Handler+0x30c>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	801a      	strh	r2, [r3, #0]
 8004a0e:	e02b      	b.n	8004a68 <PCD_EP_ISR_Handler+0x2c8>
 8004a10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	2b3e      	cmp	r3, #62	; 0x3e
 8004a16:	d812      	bhi.n	8004a3e <PCD_EP_ISR_Handler+0x29e>
 8004a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	085b      	lsrs	r3, r3, #1
 8004a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	2201      	movs	r2, #1
 8004a26:	4013      	ands	r3, r2
 8004a28:	d002      	beq.n	8004a30 <PCD_EP_ISR_Handler+0x290>
 8004a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	029b      	lsls	r3, r3, #10
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	801a      	strh	r2, [r3, #0]
 8004a3c:	e014      	b.n	8004a68 <PCD_EP_ISR_Handler+0x2c8>
 8004a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	647b      	str	r3, [r7, #68]	; 0x44
 8004a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	221f      	movs	r2, #31
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	d102      	bne.n	8004a56 <PCD_EP_ISR_Handler+0x2b6>
 8004a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a52:	3b01      	subs	r3, #1
 8004a54:	647b      	str	r3, [r7, #68]	; 0x44
 8004a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	029b      	lsls	r3, r3, #10
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	4a13      	ldr	r2, [pc, #76]	; (8004aac <PCD_EP_ISR_Handler+0x30c>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	2012      	movs	r0, #18
 8004a72:	183b      	adds	r3, r7, r0
 8004a74:	4912      	ldr	r1, [pc, #72]	; (8004ac0 <PCD_EP_ISR_Handler+0x320>)
 8004a76:	400a      	ands	r2, r1
 8004a78:	801a      	strh	r2, [r3, #0]
 8004a7a:	183b      	adds	r3, r7, r0
 8004a7c:	183a      	adds	r2, r7, r0
 8004a7e:	8812      	ldrh	r2, [r2, #0]
 8004a80:	2180      	movs	r1, #128	; 0x80
 8004a82:	0149      	lsls	r1, r1, #5
 8004a84:	404a      	eors	r2, r1
 8004a86:	801a      	strh	r2, [r3, #0]
 8004a88:	183b      	adds	r3, r7, r0
 8004a8a:	183a      	adds	r2, r7, r0
 8004a8c:	8812      	ldrh	r2, [r2, #0]
 8004a8e:	2180      	movs	r1, #128	; 0x80
 8004a90:	0189      	lsls	r1, r1, #6
 8004a92:	404a      	eors	r2, r1
 8004a94:	801a      	strh	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	183a      	adds	r2, r7, r0
 8004a9c:	8812      	ldrh	r2, [r2, #0]
 8004a9e:	4909      	ldr	r1, [pc, #36]	; (8004ac4 <PCD_EP_ISR_Handler+0x324>)
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	b292      	uxth	r2, r2
 8004aa4:	801a      	strh	r2, [r3, #0]
 8004aa6:	e259      	b.n	8004f5c <PCD_EP_ISR_Handler+0x7bc>
 8004aa8:	ffff8f0f 	.word	0xffff8f0f
 8004aac:	ffff8000 	.word	0xffff8000
 8004ab0:	00000402 	.word	0x00000402
 8004ab4:	00000406 	.word	0x00000406
 8004ab8:	00000f8f 	.word	0x00000f8f
 8004abc:	ffff83ff 	.word	0xffff83ff
 8004ac0:	ffffbf8f 	.word	0xffffbf8f
 8004ac4:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	001a      	movs	r2, r3
 8004ace:	2055      	movs	r0, #85	; 0x55
 8004ad0:	183b      	adds	r3, r7, r0
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	18d2      	adds	r2, r2, r3
 8004ad8:	2152      	movs	r1, #82	; 0x52
 8004ada:	187b      	adds	r3, r7, r1
 8004adc:	8812      	ldrh	r2, [r2, #0]
 8004ade:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004ae0:	187b      	adds	r3, r7, r1
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	5e9b      	ldrsh	r3, [r3, r2]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	db00      	blt.n	8004aec <PCD_EP_ISR_Handler+0x34c>
 8004aea:	e0fa      	b.n	8004ce2 <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	001a      	movs	r2, r3
 8004af2:	183b      	adds	r3, r7, r0
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	18d3      	adds	r3, r2, r3
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	2450      	movs	r4, #80	; 0x50
 8004b00:	193b      	adds	r3, r7, r4
 8004b02:	49cf      	ldr	r1, [pc, #828]	; (8004e40 <PCD_EP_ISR_Handler+0x6a0>)
 8004b04:	400a      	ands	r2, r1
 8004b06:	801a      	strh	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	001a      	movs	r2, r3
 8004b0e:	183b      	adds	r3, r7, r0
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	18d3      	adds	r3, r2, r3
 8004b16:	193a      	adds	r2, r7, r4
 8004b18:	8812      	ldrh	r2, [r2, #0]
 8004b1a:	2180      	movs	r1, #128	; 0x80
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	b292      	uxth	r2, r2
 8004b20:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004b22:	183b      	adds	r3, r7, r0
 8004b24:	781a      	ldrb	r2, [r3, #0]
 8004b26:	0013      	movs	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	189b      	adds	r3, r3, r2
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	3369      	adds	r3, #105	; 0x69
 8004b30:	33ff      	adds	r3, #255	; 0xff
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	18d3      	adds	r3, r2, r3
 8004b36:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b3a:	7b1b      	ldrb	r3, [r3, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d125      	bne.n	8004b8c <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2250      	movs	r2, #80	; 0x50
 8004b46:	5a9b      	ldrh	r3, [r3, r2]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	001a      	movs	r2, r3
 8004b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	18d2      	adds	r2, r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	18d3      	adds	r3, r2, r3
 8004b5a:	4aba      	ldr	r2, [pc, #744]	; (8004e44 <PCD_EP_ISR_Handler+0x6a4>)
 8004b5c:	4694      	mov	ip, r2
 8004b5e:	4463      	add	r3, ip
 8004b60:	881a      	ldrh	r2, [r3, #0]
 8004b62:	2448      	movs	r4, #72	; 0x48
 8004b64:	193b      	adds	r3, r7, r4
 8004b66:	0592      	lsls	r2, r2, #22
 8004b68:	0d92      	lsrs	r2, r2, #22
 8004b6a:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8004b6c:	193b      	adds	r3, r7, r4
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d100      	bne.n	8004b76 <PCD_EP_ISR_Handler+0x3d6>
 8004b74:	e08d      	b.n	8004c92 <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6818      	ldr	r0, [r3, #0]
 8004b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b7c:	6959      	ldr	r1, [r3, #20]
 8004b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b80:	88da      	ldrh	r2, [r3, #6]
 8004b82:	193b      	adds	r3, r7, r4
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	f005 fee7 	bl	800a958 <USB_ReadPMA>
 8004b8a:	e082      	b.n	8004c92 <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b8e:	78db      	ldrb	r3, [r3, #3]
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d10c      	bne.n	8004bae <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004b94:	2348      	movs	r3, #72	; 0x48
 8004b96:	18fc      	adds	r4, r7, r3
 8004b98:	2352      	movs	r3, #82	; 0x52
 8004b9a:	18fb      	adds	r3, r7, r3
 8004b9c:	881a      	ldrh	r2, [r3, #0]
 8004b9e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f000 f9ee 	bl	8004f84 <HAL_PCD_EP_DB_Receive>
 8004ba8:	0003      	movs	r3, r0
 8004baa:	8023      	strh	r3, [r4, #0]
 8004bac:	e071      	b.n	8004c92 <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	001a      	movs	r2, r3
 8004bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	18d3      	adds	r3, r2, r3
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	204a      	movs	r0, #74	; 0x4a
 8004bc2:	183b      	adds	r3, r7, r0
 8004bc4:	49a0      	ldr	r1, [pc, #640]	; (8004e48 <PCD_EP_ISR_Handler+0x6a8>)
 8004bc6:	400a      	ands	r2, r1
 8004bc8:	801a      	strh	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	001a      	movs	r2, r3
 8004bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	18d3      	adds	r3, r2, r3
 8004bd8:	183a      	adds	r2, r7, r0
 8004bda:	8812      	ldrh	r2, [r2, #0]
 8004bdc:	499b      	ldr	r1, [pc, #620]	; (8004e4c <PCD_EP_ISR_Handler+0x6ac>)
 8004bde:	430a      	orrs	r2, r1
 8004be0:	b292      	uxth	r2, r2
 8004be2:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	001a      	movs	r2, r3
 8004bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	18d3      	adds	r3, r2, r3
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	001a      	movs	r2, r3
 8004bf8:	2380      	movs	r3, #128	; 0x80
 8004bfa:	01db      	lsls	r3, r3, #7
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d024      	beq.n	8004c4a <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2250      	movs	r2, #80	; 0x50
 8004c06:	5a9b      	ldrh	r3, [r3, r2]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	001a      	movs	r2, r3
 8004c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	18d2      	adds	r2, r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	18d3      	adds	r3, r2, r3
 8004c1a:	4a8d      	ldr	r2, [pc, #564]	; (8004e50 <PCD_EP_ISR_Handler+0x6b0>)
 8004c1c:	4694      	mov	ip, r2
 8004c1e:	4463      	add	r3, ip
 8004c20:	881a      	ldrh	r2, [r3, #0]
 8004c22:	2448      	movs	r4, #72	; 0x48
 8004c24:	193b      	adds	r3, r7, r4
 8004c26:	0592      	lsls	r2, r2, #22
 8004c28:	0d92      	lsrs	r2, r2, #22
 8004c2a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8004c2c:	193b      	adds	r3, r7, r4
 8004c2e:	881b      	ldrh	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d02e      	beq.n	8004c92 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6818      	ldr	r0, [r3, #0]
 8004c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c3a:	6959      	ldr	r1, [r3, #20]
 8004c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c3e:	891a      	ldrh	r2, [r3, #8]
 8004c40:	193b      	adds	r3, r7, r4
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	f005 fe88 	bl	800a958 <USB_ReadPMA>
 8004c48:	e023      	b.n	8004c92 <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2250      	movs	r2, #80	; 0x50
 8004c50:	5a9b      	ldrh	r3, [r3, r2]
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	001a      	movs	r2, r3
 8004c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	00db      	lsls	r3, r3, #3
 8004c5c:	18d2      	adds	r2, r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	18d3      	adds	r3, r2, r3
 8004c64:	4a77      	ldr	r2, [pc, #476]	; (8004e44 <PCD_EP_ISR_Handler+0x6a4>)
 8004c66:	4694      	mov	ip, r2
 8004c68:	4463      	add	r3, ip
 8004c6a:	881a      	ldrh	r2, [r3, #0]
 8004c6c:	2448      	movs	r4, #72	; 0x48
 8004c6e:	193b      	adds	r3, r7, r4
 8004c70:	0592      	lsls	r2, r2, #22
 8004c72:	0d92      	lsrs	r2, r2, #22
 8004c74:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8004c76:	193b      	adds	r3, r7, r4
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d009      	beq.n	8004c92 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6818      	ldr	r0, [r3, #0]
 8004c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c84:	6959      	ldr	r1, [r3, #20]
 8004c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c88:	895a      	ldrh	r2, [r3, #10]
 8004c8a:	193b      	adds	r3, r7, r4
 8004c8c:	881b      	ldrh	r3, [r3, #0]
 8004c8e:	f005 fe63 	bl	800a958 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c94:	69da      	ldr	r2, [r3, #28]
 8004c96:	2148      	movs	r1, #72	; 0x48
 8004c98:	187b      	adds	r3, r7, r1
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	18d2      	adds	r2, r2, r3
 8004c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca4:	695a      	ldr	r2, [r3, #20]
 8004ca6:	187b      	adds	r3, r7, r1
 8004ca8:	881b      	ldrh	r3, [r3, #0]
 8004caa:	18d2      	adds	r2, r2, r3
 8004cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cae:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d005      	beq.n	8004cc4 <PCD_EP_ISR_Handler+0x524>
 8004cb8:	187b      	adds	r3, r7, r1
 8004cba:	881a      	ldrh	r2, [r3, #0]
 8004cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d207      	bcs.n	8004cd4 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc6:	781a      	ldrb	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	0011      	movs	r1, r2
 8004ccc:	0018      	movs	r0, r3
 8004cce:	f007 fe26 	bl	800c91e <HAL_PCD_DataOutStageCallback>
 8004cd2:	e006      	b.n	8004ce2 <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cda:	0011      	movs	r1, r2
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f004 fc03 	bl	80094e8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004ce2:	2452      	movs	r4, #82	; 0x52
 8004ce4:	193b      	adds	r3, r7, r4
 8004ce6:	881b      	ldrh	r3, [r3, #0]
 8004ce8:	2280      	movs	r2, #128	; 0x80
 8004cea:	4013      	ands	r3, r2
 8004cec:	d100      	bne.n	8004cf0 <PCD_EP_ISR_Handler+0x550>
 8004cee:	e135      	b.n	8004f5c <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 8004cf0:	2055      	movs	r0, #85	; 0x55
 8004cf2:	183b      	adds	r3, r7, r0
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	0013      	movs	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	189b      	adds	r3, r3, r2
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	18d3      	adds	r3, r2, r3
 8004d04:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	001a      	movs	r2, r3
 8004d0c:	183b      	adds	r3, r7, r0
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	18d3      	adds	r3, r2, r3
 8004d14:	881b      	ldrh	r3, [r3, #0]
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	2542      	movs	r5, #66	; 0x42
 8004d1a:	197b      	adds	r3, r7, r5
 8004d1c:	494d      	ldr	r1, [pc, #308]	; (8004e54 <PCD_EP_ISR_Handler+0x6b4>)
 8004d1e:	400a      	ands	r2, r1
 8004d20:	801a      	strh	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	001a      	movs	r2, r3
 8004d28:	183b      	adds	r3, r7, r0
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	18d3      	adds	r3, r2, r3
 8004d30:	197a      	adds	r2, r7, r5
 8004d32:	8812      	ldrh	r2, [r2, #0]
 8004d34:	4948      	ldr	r1, [pc, #288]	; (8004e58 <PCD_EP_ISR_Handler+0x6b8>)
 8004d36:	430a      	orrs	r2, r1
 8004d38:	b292      	uxth	r2, r2
 8004d3a:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 8004d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d3e:	78db      	ldrb	r3, [r3, #3]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d100      	bne.n	8004d46 <PCD_EP_ISR_Handler+0x5a6>
 8004d44:	e0ad      	b.n	8004ea2 <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 8004d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d48:	2200      	movs	r2, #0
 8004d4a:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d4c:	193b      	adds	r3, r7, r4
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	2240      	movs	r2, #64	; 0x40
 8004d52:	4013      	ands	r3, r2
 8004d54:	d046      	beq.n	8004de4 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d58:	785b      	ldrb	r3, [r3, #1]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d125      	bne.n	8004daa <PCD_EP_ISR_Handler+0x60a>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	627b      	str	r3, [r7, #36]	; 0x24
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2250      	movs	r2, #80	; 0x50
 8004d6a:	5a9b      	ldrh	r3, [r3, r2]
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	001a      	movs	r2, r3
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	189b      	adds	r3, r3, r2
 8004d74:	627b      	str	r3, [r7, #36]	; 0x24
 8004d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	00da      	lsls	r2, r3, #3
 8004d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7e:	18d3      	adds	r3, r2, r3
 8004d80:	4a33      	ldr	r2, [pc, #204]	; (8004e50 <PCD_EP_ISR_Handler+0x6b0>)
 8004d82:	4694      	mov	ip, r2
 8004d84:	4463      	add	r3, ip
 8004d86:	623b      	str	r3, [r7, #32]
 8004d88:	6a3b      	ldr	r3, [r7, #32]
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	4a33      	ldr	r2, [pc, #204]	; (8004e5c <PCD_EP_ISR_Handler+0x6bc>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	801a      	strh	r2, [r3, #0]
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	4a2e      	ldr	r2, [pc, #184]	; (8004e58 <PCD_EP_ISR_Handler+0x6b8>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	801a      	strh	r2, [r3, #0]
 8004da8:	e073      	b.n	8004e92 <PCD_EP_ISR_Handler+0x6f2>
 8004daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dac:	785b      	ldrb	r3, [r3, #1]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d16f      	bne.n	8004e92 <PCD_EP_ISR_Handler+0x6f2>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2250      	movs	r2, #80	; 0x50
 8004dbe:	5a9b      	ldrh	r3, [r3, r2]
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	001a      	movs	r2, r3
 8004dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc6:	189b      	adds	r3, r3, r2
 8004dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	00da      	lsls	r2, r3, #3
 8004dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd2:	18d3      	adds	r3, r2, r3
 8004dd4:	4a1e      	ldr	r2, [pc, #120]	; (8004e50 <PCD_EP_ISR_Handler+0x6b0>)
 8004dd6:	4694      	mov	ip, r2
 8004dd8:	4463      	add	r3, ip
 8004dda:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	2200      	movs	r2, #0
 8004de0:	801a      	strh	r2, [r3, #0]
 8004de2:	e056      	b.n	8004e92 <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dec:	785b      	ldrb	r3, [r3, #1]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d136      	bne.n	8004e60 <PCD_EP_ISR_Handler+0x6c0>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	637b      	str	r3, [r7, #52]	; 0x34
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2250      	movs	r2, #80	; 0x50
 8004dfe:	5a9b      	ldrh	r3, [r3, r2]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	001a      	movs	r2, r3
 8004e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e06:	189b      	adds	r3, r3, r2
 8004e08:	637b      	str	r3, [r7, #52]	; 0x34
 8004e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	00da      	lsls	r2, r3, #3
 8004e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e12:	18d3      	adds	r3, r2, r3
 8004e14:	4a0b      	ldr	r2, [pc, #44]	; (8004e44 <PCD_EP_ISR_Handler+0x6a4>)
 8004e16:	4694      	mov	ip, r2
 8004e18:	4463      	add	r3, ip
 8004e1a:	633b      	str	r3, [r7, #48]	; 0x30
 8004e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	4a0e      	ldr	r2, [pc, #56]	; (8004e5c <PCD_EP_ISR_Handler+0x6bc>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2a:	801a      	strh	r2, [r3, #0]
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2e:	881b      	ldrh	r3, [r3, #0]
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	4a09      	ldr	r2, [pc, #36]	; (8004e58 <PCD_EP_ISR_Handler+0x6b8>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3a:	801a      	strh	r2, [r3, #0]
 8004e3c:	e029      	b.n	8004e92 <PCD_EP_ISR_Handler+0x6f2>
 8004e3e:	46c0      	nop			; (mov r8, r8)
 8004e40:	00000f8f 	.word	0x00000f8f
 8004e44:	00000406 	.word	0x00000406
 8004e48:	ffff8f8f 	.word	0xffff8f8f
 8004e4c:	ffff80c0 	.word	0xffff80c0
 8004e50:	00000402 	.word	0x00000402
 8004e54:	ffff8f0f 	.word	0xffff8f0f
 8004e58:	ffff8000 	.word	0xffff8000
 8004e5c:	ffff83ff 	.word	0xffff83ff
 8004e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e62:	785b      	ldrb	r3, [r3, #1]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d114      	bne.n	8004e92 <PCD_EP_ISR_Handler+0x6f2>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2250      	movs	r2, #80	; 0x50
 8004e6e:	5a9b      	ldrh	r3, [r3, r2]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	001a      	movs	r2, r3
 8004e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e76:	189b      	adds	r3, r3, r2
 8004e78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	00da      	lsls	r2, r3, #3
 8004e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e82:	18d3      	adds	r3, r2, r3
 8004e84:	4a3d      	ldr	r2, [pc, #244]	; (8004f7c <PCD_EP_ISR_Handler+0x7dc>)
 8004e86:	4694      	mov	ip, r2
 8004e88:	4463      	add	r3, ip
 8004e8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8e:	2200      	movs	r2, #0
 8004e90:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e94:	781a      	ldrb	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	0011      	movs	r1, r2
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	f007 fd60 	bl	800c960 <HAL_PCD_DataInStageCallback>
 8004ea0:	e05c      	b.n	8004f5c <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8004ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ea4:	78db      	ldrb	r3, [r3, #3]
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d150      	bne.n	8004f4c <PCD_EP_ISR_Handler+0x7ac>
 8004eaa:	2352      	movs	r3, #82	; 0x52
 8004eac:	18fb      	adds	r3, r7, r3
 8004eae:	881a      	ldrh	r2, [r3, #0]
 8004eb0:	2380      	movs	r3, #128	; 0x80
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	d149      	bne.n	8004f4c <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2250      	movs	r2, #80	; 0x50
 8004ebe:	5a9b      	ldrh	r3, [r3, r2]
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	001a      	movs	r2, r3
 8004ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	00db      	lsls	r3, r3, #3
 8004eca:	18d2      	adds	r2, r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	18d3      	adds	r3, r2, r3
 8004ed2:	4a2b      	ldr	r2, [pc, #172]	; (8004f80 <PCD_EP_ISR_Handler+0x7e0>)
 8004ed4:	4694      	mov	ip, r2
 8004ed6:	4463      	add	r3, ip
 8004ed8:	881a      	ldrh	r2, [r3, #0]
 8004eda:	2140      	movs	r1, #64	; 0x40
 8004edc:	187b      	adds	r3, r7, r1
 8004ede:	0592      	lsls	r2, r2, #22
 8004ee0:	0d92      	lsrs	r2, r2, #22
 8004ee2:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8004ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ee6:	699a      	ldr	r2, [r3, #24]
 8004ee8:	187b      	adds	r3, r7, r1
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d907      	bls.n	8004f00 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8004ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ef2:	699a      	ldr	r2, [r3, #24]
 8004ef4:	187b      	adds	r3, r7, r1
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	1ad2      	subs	r2, r2, r3
 8004efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004efc:	619a      	str	r2, [r3, #24]
 8004efe:	e002      	b.n	8004f06 <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 8004f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f02:	2200      	movs	r2, #0
 8004f04:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8004f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d107      	bne.n	8004f1e <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f10:	781a      	ldrb	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	0011      	movs	r1, r2
 8004f16:	0018      	movs	r0, r3
 8004f18:	f007 fd22 	bl	800c960 <HAL_PCD_DataInStageCallback>
 8004f1c:	e01e      	b.n	8004f5c <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8004f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f20:	695a      	ldr	r2, [r3, #20]
 8004f22:	2140      	movs	r1, #64	; 0x40
 8004f24:	187b      	adds	r3, r7, r1
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	18d2      	adds	r2, r2, r3
 8004f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f2c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8004f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f30:	69da      	ldr	r2, [r3, #28]
 8004f32:	187b      	adds	r3, r7, r1
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	18d2      	adds	r2, r2, r3
 8004f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f3a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f42:	0011      	movs	r1, r2
 8004f44:	0018      	movs	r0, r3
 8004f46:	f004 facf 	bl	80094e8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8004f4a:	e007      	b.n	8004f5c <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004f4c:	2352      	movs	r3, #82	; 0x52
 8004f4e:	18fb      	adds	r3, r7, r3
 8004f50:	881a      	ldrh	r2, [r3, #0]
 8004f52:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	0018      	movs	r0, r3
 8004f58:	f000 f930 	bl	80051bc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2244      	movs	r2, #68	; 0x44
 8004f62:	5a9b      	ldrh	r3, [r3, r2]
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	b21b      	sxth	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	da01      	bge.n	8004f70 <PCD_EP_ISR_Handler+0x7d0>
 8004f6c:	f7ff fc1e 	bl	80047ac <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	0018      	movs	r0, r3
 8004f74:	46bd      	mov	sp, r7
 8004f76:	b016      	add	sp, #88	; 0x58
 8004f78:	bdb0      	pop	{r4, r5, r7, pc}
 8004f7a:	46c0      	nop			; (mov r8, r8)
 8004f7c:	00000406 	.word	0x00000406
 8004f80:	00000402 	.word	0x00000402

08004f84 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004f84:	b590      	push	{r4, r7, lr}
 8004f86:	b089      	sub	sp, #36	; 0x24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	1dbb      	adds	r3, r7, #6
 8004f90:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f92:	1dbb      	adds	r3, r7, #6
 8004f94:	881a      	ldrh	r2, [r3, #0]
 8004f96:	2380      	movs	r3, #128	; 0x80
 8004f98:	01db      	lsls	r3, r3, #7
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d100      	bne.n	8004fa0 <HAL_PCD_EP_DB_Receive+0x1c>
 8004f9e:	e07d      	b.n	800509c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2250      	movs	r2, #80	; 0x50
 8004fa6:	5a9b      	ldrh	r3, [r3, r2]
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	001a      	movs	r2, r3
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	18d2      	adds	r2, r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	18d3      	adds	r3, r2, r3
 8004fba:	4a7a      	ldr	r2, [pc, #488]	; (80051a4 <HAL_PCD_EP_DB_Receive+0x220>)
 8004fbc:	4694      	mov	ip, r2
 8004fbe:	4463      	add	r3, ip
 8004fc0:	881a      	ldrh	r2, [r3, #0]
 8004fc2:	211a      	movs	r1, #26
 8004fc4:	187b      	adds	r3, r7, r1
 8004fc6:	0592      	lsls	r2, r2, #22
 8004fc8:	0d92      	lsrs	r2, r2, #22
 8004fca:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	699a      	ldr	r2, [r3, #24]
 8004fd0:	187b      	adds	r3, r7, r1
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d307      	bcc.n	8004fe8 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	699a      	ldr	r2, [r3, #24]
 8004fdc:	187b      	adds	r3, r7, r1
 8004fde:	881b      	ldrh	r3, [r3, #0]
 8004fe0:	1ad2      	subs	r2, r2, r3
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	619a      	str	r2, [r3, #24]
 8004fe6:	e002      	b.n	8004fee <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2200      	movs	r2, #0
 8004fec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d121      	bne.n	800503a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	001a      	movs	r2, r3
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	18d3      	adds	r3, r2, r3
 8005004:	881b      	ldrh	r3, [r3, #0]
 8005006:	b29a      	uxth	r2, r3
 8005008:	2018      	movs	r0, #24
 800500a:	183b      	adds	r3, r7, r0
 800500c:	4966      	ldr	r1, [pc, #408]	; (80051a8 <HAL_PCD_EP_DB_Receive+0x224>)
 800500e:	400a      	ands	r2, r1
 8005010:	801a      	strh	r2, [r3, #0]
 8005012:	183b      	adds	r3, r7, r0
 8005014:	183a      	adds	r2, r7, r0
 8005016:	8812      	ldrh	r2, [r2, #0]
 8005018:	2180      	movs	r1, #128	; 0x80
 800501a:	0189      	lsls	r1, r1, #6
 800501c:	404a      	eors	r2, r1
 800501e:	801a      	strh	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	001a      	movs	r2, r3
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	18d3      	adds	r3, r2, r3
 800502e:	183a      	adds	r2, r7, r0
 8005030:	8812      	ldrh	r2, [r2, #0]
 8005032:	495e      	ldr	r1, [pc, #376]	; (80051ac <HAL_PCD_EP_DB_Receive+0x228>)
 8005034:	430a      	orrs	r2, r1
 8005036:	b292      	uxth	r2, r2
 8005038:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800503a:	1dbb      	adds	r3, r7, #6
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	2240      	movs	r2, #64	; 0x40
 8005040:	4013      	ands	r3, r2
 8005042:	d01a      	beq.n	800507a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	001a      	movs	r2, r3
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	18d3      	adds	r3, r2, r3
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	b29a      	uxth	r2, r3
 8005056:	2016      	movs	r0, #22
 8005058:	183b      	adds	r3, r7, r0
 800505a:	4955      	ldr	r1, [pc, #340]	; (80051b0 <HAL_PCD_EP_DB_Receive+0x22c>)
 800505c:	400a      	ands	r2, r1
 800505e:	801a      	strh	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	001a      	movs	r2, r3
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	18d3      	adds	r3, r2, r3
 800506e:	183a      	adds	r2, r7, r0
 8005070:	8812      	ldrh	r2, [r2, #0]
 8005072:	4950      	ldr	r1, [pc, #320]	; (80051b4 <HAL_PCD_EP_DB_Receive+0x230>)
 8005074:	430a      	orrs	r2, r1
 8005076:	b292      	uxth	r2, r2
 8005078:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800507a:	241a      	movs	r4, #26
 800507c:	193b      	adds	r3, r7, r4
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d100      	bne.n	8005086 <HAL_PCD_EP_DB_Receive+0x102>
 8005084:	e086      	b.n	8005194 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	6959      	ldr	r1, [r3, #20]
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	891a      	ldrh	r2, [r3, #8]
 8005092:	193b      	adds	r3, r7, r4
 8005094:	881b      	ldrh	r3, [r3, #0]
 8005096:	f005 fc5f 	bl	800a958 <USB_ReadPMA>
 800509a:	e07b      	b.n	8005194 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2250      	movs	r2, #80	; 0x50
 80050a2:	5a9b      	ldrh	r3, [r3, r2]
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	001a      	movs	r2, r3
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	18d2      	adds	r2, r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	18d3      	adds	r3, r2, r3
 80050b6:	4a40      	ldr	r2, [pc, #256]	; (80051b8 <HAL_PCD_EP_DB_Receive+0x234>)
 80050b8:	4694      	mov	ip, r2
 80050ba:	4463      	add	r3, ip
 80050bc:	881a      	ldrh	r2, [r3, #0]
 80050be:	211a      	movs	r1, #26
 80050c0:	187b      	adds	r3, r7, r1
 80050c2:	0592      	lsls	r2, r2, #22
 80050c4:	0d92      	lsrs	r2, r2, #22
 80050c6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	699a      	ldr	r2, [r3, #24]
 80050cc:	187b      	adds	r3, r7, r1
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d307      	bcc.n	80050e4 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	699a      	ldr	r2, [r3, #24]
 80050d8:	187b      	adds	r3, r7, r1
 80050da:	881b      	ldrh	r3, [r3, #0]
 80050dc:	1ad2      	subs	r2, r2, r3
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	619a      	str	r2, [r3, #24]
 80050e2:	e002      	b.n	80050ea <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2200      	movs	r2, #0
 80050e8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d121      	bne.n	8005136 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	001a      	movs	r2, r3
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	18d3      	adds	r3, r2, r3
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	b29a      	uxth	r2, r3
 8005104:	201e      	movs	r0, #30
 8005106:	183b      	adds	r3, r7, r0
 8005108:	4927      	ldr	r1, [pc, #156]	; (80051a8 <HAL_PCD_EP_DB_Receive+0x224>)
 800510a:	400a      	ands	r2, r1
 800510c:	801a      	strh	r2, [r3, #0]
 800510e:	183b      	adds	r3, r7, r0
 8005110:	183a      	adds	r2, r7, r0
 8005112:	8812      	ldrh	r2, [r2, #0]
 8005114:	2180      	movs	r1, #128	; 0x80
 8005116:	0189      	lsls	r1, r1, #6
 8005118:	404a      	eors	r2, r1
 800511a:	801a      	strh	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	001a      	movs	r2, r3
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	18d3      	adds	r3, r2, r3
 800512a:	183a      	adds	r2, r7, r0
 800512c:	8812      	ldrh	r2, [r2, #0]
 800512e:	491f      	ldr	r1, [pc, #124]	; (80051ac <HAL_PCD_EP_DB_Receive+0x228>)
 8005130:	430a      	orrs	r2, r1
 8005132:	b292      	uxth	r2, r2
 8005134:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005136:	1dbb      	adds	r3, r7, #6
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	2240      	movs	r2, #64	; 0x40
 800513c:	4013      	ands	r3, r2
 800513e:	d11a      	bne.n	8005176 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	001a      	movs	r2, r3
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	18d3      	adds	r3, r2, r3
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	b29a      	uxth	r2, r3
 8005152:	201c      	movs	r0, #28
 8005154:	183b      	adds	r3, r7, r0
 8005156:	4916      	ldr	r1, [pc, #88]	; (80051b0 <HAL_PCD_EP_DB_Receive+0x22c>)
 8005158:	400a      	ands	r2, r1
 800515a:	801a      	strh	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	001a      	movs	r2, r3
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	18d3      	adds	r3, r2, r3
 800516a:	183a      	adds	r2, r7, r0
 800516c:	8812      	ldrh	r2, [r2, #0]
 800516e:	4911      	ldr	r1, [pc, #68]	; (80051b4 <HAL_PCD_EP_DB_Receive+0x230>)
 8005170:	430a      	orrs	r2, r1
 8005172:	b292      	uxth	r2, r2
 8005174:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8005176:	241a      	movs	r4, #26
 8005178:	193b      	adds	r3, r7, r4
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d009      	beq.n	8005194 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6818      	ldr	r0, [r3, #0]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	6959      	ldr	r1, [r3, #20]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	895a      	ldrh	r2, [r3, #10]
 800518c:	193b      	adds	r3, r7, r4
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	f005 fbe2 	bl	800a958 <USB_ReadPMA>
    }
  }

  return count;
 8005194:	231a      	movs	r3, #26
 8005196:	18fb      	adds	r3, r7, r3
 8005198:	881b      	ldrh	r3, [r3, #0]
}
 800519a:	0018      	movs	r0, r3
 800519c:	46bd      	mov	sp, r7
 800519e:	b009      	add	sp, #36	; 0x24
 80051a0:	bd90      	pop	{r4, r7, pc}
 80051a2:	46c0      	nop			; (mov r8, r8)
 80051a4:	00000402 	.word	0x00000402
 80051a8:	ffffbf8f 	.word	0xffffbf8f
 80051ac:	ffff8080 	.word	0xffff8080
 80051b0:	ffff8f8f 	.word	0xffff8f8f
 80051b4:	ffff80c0 	.word	0xffff80c0
 80051b8:	00000406 	.word	0x00000406

080051bc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b0a2      	sub	sp, #136	; 0x88
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	1dbb      	adds	r3, r7, #6
 80051c8:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80051ca:	1dbb      	adds	r3, r7, #6
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	2240      	movs	r2, #64	; 0x40
 80051d0:	4013      	ands	r3, r2
 80051d2:	d100      	bne.n	80051d6 <HAL_PCD_EP_DB_Transmit+0x1a>
 80051d4:	e1c8      	b.n	8005568 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2250      	movs	r2, #80	; 0x50
 80051dc:	5a9b      	ldrh	r3, [r3, r2]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	001a      	movs	r2, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	18d2      	adds	r2, r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	18d3      	adds	r3, r2, r3
 80051f0:	4ad7      	ldr	r2, [pc, #860]	; (8005550 <HAL_PCD_EP_DB_Transmit+0x394>)
 80051f2:	4694      	mov	ip, r2
 80051f4:	4463      	add	r3, ip
 80051f6:	881a      	ldrh	r2, [r3, #0]
 80051f8:	214e      	movs	r1, #78	; 0x4e
 80051fa:	187b      	adds	r3, r7, r1
 80051fc:	0592      	lsls	r2, r2, #22
 80051fe:	0d92      	lsrs	r2, r2, #22
 8005200:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	187b      	adds	r3, r7, r1
 8005208:	881b      	ldrh	r3, [r3, #0]
 800520a:	429a      	cmp	r2, r3
 800520c:	d907      	bls.n	800521e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	187b      	adds	r3, r7, r1
 8005214:	881b      	ldrh	r3, [r3, #0]
 8005216:	1ad2      	subs	r2, r2, r3
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	619a      	str	r2, [r3, #24]
 800521c:	e002      	b.n	8005224 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2200      	movs	r2, #0
 8005222:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d000      	beq.n	800522e <HAL_PCD_EP_DB_Transmit+0x72>
 800522c:	e0b5      	b.n	800539a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	785b      	ldrb	r3, [r3, #1]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d125      	bne.n	8005282 <HAL_PCD_EP_DB_Transmit+0xc6>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	62bb      	str	r3, [r7, #40]	; 0x28
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2250      	movs	r2, #80	; 0x50
 8005242:	5a9b      	ldrh	r3, [r3, r2]
 8005244:	b29b      	uxth	r3, r3
 8005246:	001a      	movs	r2, r3
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	189b      	adds	r3, r3, r2
 800524c:	62bb      	str	r3, [r7, #40]	; 0x28
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	00da      	lsls	r2, r3, #3
 8005254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005256:	18d3      	adds	r3, r2, r3
 8005258:	4abd      	ldr	r2, [pc, #756]	; (8005550 <HAL_PCD_EP_DB_Transmit+0x394>)
 800525a:	4694      	mov	ip, r2
 800525c:	4463      	add	r3, ip
 800525e:	627b      	str	r3, [r7, #36]	; 0x24
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	b29b      	uxth	r3, r3
 8005266:	4abb      	ldr	r2, [pc, #748]	; (8005554 <HAL_PCD_EP_DB_Transmit+0x398>)
 8005268:	4013      	ands	r3, r2
 800526a:	b29a      	uxth	r2, r3
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	801a      	strh	r2, [r3, #0]
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	b29b      	uxth	r3, r3
 8005276:	4ab8      	ldr	r2, [pc, #736]	; (8005558 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005278:	4313      	orrs	r3, r2
 800527a:	b29a      	uxth	r2, r3
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	801a      	strh	r2, [r3, #0]
 8005280:	e01b      	b.n	80052ba <HAL_PCD_EP_DB_Transmit+0xfe>
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	785b      	ldrb	r3, [r3, #1]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d117      	bne.n	80052ba <HAL_PCD_EP_DB_Transmit+0xfe>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	633b      	str	r3, [r7, #48]	; 0x30
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2250      	movs	r2, #80	; 0x50
 8005296:	5a9b      	ldrh	r3, [r3, r2]
 8005298:	b29b      	uxth	r3, r3
 800529a:	001a      	movs	r2, r3
 800529c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529e:	189b      	adds	r3, r3, r2
 80052a0:	633b      	str	r3, [r7, #48]	; 0x30
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	00da      	lsls	r2, r3, #3
 80052a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052aa:	18d3      	adds	r3, r2, r3
 80052ac:	4aa8      	ldr	r2, [pc, #672]	; (8005550 <HAL_PCD_EP_DB_Transmit+0x394>)
 80052ae:	4694      	mov	ip, r2
 80052b0:	4463      	add	r3, ip
 80052b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b6:	2200      	movs	r2, #0
 80052b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	623b      	str	r3, [r7, #32]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	785b      	ldrb	r3, [r3, #1]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d125      	bne.n	8005314 <HAL_PCD_EP_DB_Transmit+0x158>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	61bb      	str	r3, [r7, #24]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2250      	movs	r2, #80	; 0x50
 80052d4:	5a9b      	ldrh	r3, [r3, r2]
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	001a      	movs	r2, r3
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	189b      	adds	r3, r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	00da      	lsls	r2, r3, #3
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	18d3      	adds	r3, r2, r3
 80052ea:	4a9c      	ldr	r2, [pc, #624]	; (800555c <HAL_PCD_EP_DB_Transmit+0x3a0>)
 80052ec:	4694      	mov	ip, r2
 80052ee:	4463      	add	r3, ip
 80052f0:	617b      	str	r3, [r7, #20]
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	4a96      	ldr	r2, [pc, #600]	; (8005554 <HAL_PCD_EP_DB_Transmit+0x398>)
 80052fa:	4013      	ands	r3, r2
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	801a      	strh	r2, [r3, #0]
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	881b      	ldrh	r3, [r3, #0]
 8005306:	b29b      	uxth	r3, r3
 8005308:	4a93      	ldr	r2, [pc, #588]	; (8005558 <HAL_PCD_EP_DB_Transmit+0x39c>)
 800530a:	4313      	orrs	r3, r2
 800530c:	b29a      	uxth	r2, r3
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	801a      	strh	r2, [r3, #0]
 8005312:	e018      	b.n	8005346 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	785b      	ldrb	r3, [r3, #1]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d114      	bne.n	8005346 <HAL_PCD_EP_DB_Transmit+0x18a>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2250      	movs	r2, #80	; 0x50
 8005322:	5a9b      	ldrh	r3, [r3, r2]
 8005324:	b29b      	uxth	r3, r3
 8005326:	001a      	movs	r2, r3
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	189b      	adds	r3, r3, r2
 800532c:	623b      	str	r3, [r7, #32]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	00da      	lsls	r2, r3, #3
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	18d3      	adds	r3, r2, r3
 8005338:	4a88      	ldr	r2, [pc, #544]	; (800555c <HAL_PCD_EP_DB_Transmit+0x3a0>)
 800533a:	4694      	mov	ip, r2
 800533c:	4463      	add	r3, ip
 800533e:	61fb      	str	r3, [r7, #28]
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	2200      	movs	r2, #0
 8005344:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	781a      	ldrb	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	0011      	movs	r1, r2
 800534e:	0018      	movs	r0, r3
 8005350:	f007 fb06 	bl	800c960 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005354:	1dbb      	adds	r3, r7, #6
 8005356:	881a      	ldrh	r2, [r3, #0]
 8005358:	2380      	movs	r3, #128	; 0x80
 800535a:	01db      	lsls	r3, r3, #7
 800535c:	4013      	ands	r3, r2
 800535e:	d100      	bne.n	8005362 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8005360:	e2d4      	b.n	800590c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	001a      	movs	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	18d3      	adds	r3, r2, r3
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b29a      	uxth	r2, r3
 8005374:	2012      	movs	r0, #18
 8005376:	183b      	adds	r3, r7, r0
 8005378:	4979      	ldr	r1, [pc, #484]	; (8005560 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 800537a:	400a      	ands	r2, r1
 800537c:	801a      	strh	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	001a      	movs	r2, r3
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	18d3      	adds	r3, r2, r3
 800538c:	183a      	adds	r2, r7, r0
 800538e:	8812      	ldrh	r2, [r2, #0]
 8005390:	4974      	ldr	r1, [pc, #464]	; (8005564 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8005392:	430a      	orrs	r2, r1
 8005394:	b292      	uxth	r2, r2
 8005396:	801a      	strh	r2, [r3, #0]
 8005398:	e2b8      	b.n	800590c <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800539a:	1dbb      	adds	r3, r7, #6
 800539c:	881a      	ldrh	r2, [r3, #0]
 800539e:	2380      	movs	r3, #128	; 0x80
 80053a0:	01db      	lsls	r3, r3, #7
 80053a2:	4013      	ands	r3, r2
 80053a4:	d01a      	beq.n	80053dc <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	001a      	movs	r2, r3
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	18d3      	adds	r3, r2, r3
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	2044      	movs	r0, #68	; 0x44
 80053ba:	183b      	adds	r3, r7, r0
 80053bc:	4968      	ldr	r1, [pc, #416]	; (8005560 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 80053be:	400a      	ands	r2, r1
 80053c0:	801a      	strh	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	001a      	movs	r2, r3
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	18d3      	adds	r3, r2, r3
 80053d0:	183a      	adds	r2, r7, r0
 80053d2:	8812      	ldrh	r2, [r2, #0]
 80053d4:	4963      	ldr	r1, [pc, #396]	; (8005564 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 80053d6:	430a      	orrs	r2, r1
 80053d8:	b292      	uxth	r2, r2
 80053da:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2224      	movs	r2, #36	; 0x24
 80053e0:	5c9b      	ldrb	r3, [r3, r2]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d000      	beq.n	80053e8 <HAL_PCD_EP_DB_Transmit+0x22c>
 80053e6:	e291      	b.n	800590c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	695a      	ldr	r2, [r3, #20]
 80053ec:	214e      	movs	r1, #78	; 0x4e
 80053ee:	187b      	adds	r3, r7, r1
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	18d2      	adds	r2, r2, r3
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	69da      	ldr	r2, [r3, #28]
 80053fc:	187b      	adds	r3, r7, r1
 80053fe:	881b      	ldrh	r3, [r3, #0]
 8005400:	18d2      	adds	r2, r2, r3
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	6a1a      	ldr	r2, [r3, #32]
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	429a      	cmp	r2, r3
 8005410:	d309      	bcc.n	8005426 <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	6a1a      	ldr	r2, [r3, #32]
 800541c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800541e:	1ad2      	subs	r2, r2, r3
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	621a      	str	r2, [r3, #32]
 8005424:	e016      	b.n	8005454 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d108      	bne.n	8005440 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 800542e:	234e      	movs	r3, #78	; 0x4e
 8005430:	18fb      	adds	r3, r7, r3
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2224      	movs	r2, #36	; 0x24
 800543a:	2100      	movs	r1, #0
 800543c:	5499      	strb	r1, [r3, r2]
 800543e:	e009      	b.n	8005454 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2224      	movs	r2, #36	; 0x24
 8005444:	2100      	movs	r1, #0
 8005446:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2200      	movs	r2, #0
 8005452:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d150      	bne.n	80054fe <HAL_PCD_EP_DB_Transmit+0x342>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	63bb      	str	r3, [r7, #56]	; 0x38
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2250      	movs	r2, #80	; 0x50
 8005468:	5a9b      	ldrh	r3, [r3, r2]
 800546a:	b29b      	uxth	r3, r3
 800546c:	001a      	movs	r2, r3
 800546e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005470:	189b      	adds	r3, r3, r2
 8005472:	63bb      	str	r3, [r7, #56]	; 0x38
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	00da      	lsls	r2, r3, #3
 800547a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547c:	18d3      	adds	r3, r2, r3
 800547e:	4a34      	ldr	r2, [pc, #208]	; (8005550 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005480:	4694      	mov	ip, r2
 8005482:	4463      	add	r3, ip
 8005484:	637b      	str	r3, [r7, #52]	; 0x34
 8005486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005488:	2b00      	cmp	r3, #0
 800548a:	d110      	bne.n	80054ae <HAL_PCD_EP_DB_Transmit+0x2f2>
 800548c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548e:	881b      	ldrh	r3, [r3, #0]
 8005490:	b29b      	uxth	r3, r3
 8005492:	4a30      	ldr	r2, [pc, #192]	; (8005554 <HAL_PCD_EP_DB_Transmit+0x398>)
 8005494:	4013      	ands	r3, r2
 8005496:	b29a      	uxth	r2, r3
 8005498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549a:	801a      	strh	r2, [r3, #0]
 800549c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	4a2d      	ldr	r2, [pc, #180]	; (8005558 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054aa:	801a      	strh	r2, [r3, #0]
 80054ac:	e044      	b.n	8005538 <HAL_PCD_EP_DB_Transmit+0x37c>
 80054ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b0:	2b3e      	cmp	r3, #62	; 0x3e
 80054b2:	d810      	bhi.n	80054d6 <HAL_PCD_EP_DB_Transmit+0x31a>
 80054b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b6:	085b      	lsrs	r3, r3, #1
 80054b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80054ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054bc:	2201      	movs	r2, #1
 80054be:	4013      	ands	r3, r2
 80054c0:	d002      	beq.n	80054c8 <HAL_PCD_EP_DB_Transmit+0x30c>
 80054c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c4:	3301      	adds	r3, #1
 80054c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80054c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	029b      	lsls	r3, r3, #10
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d2:	801a      	strh	r2, [r3, #0]
 80054d4:	e030      	b.n	8005538 <HAL_PCD_EP_DB_Transmit+0x37c>
 80054d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054d8:	095b      	lsrs	r3, r3, #5
 80054da:	64bb      	str	r3, [r7, #72]	; 0x48
 80054dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054de:	221f      	movs	r2, #31
 80054e0:	4013      	ands	r3, r2
 80054e2:	d102      	bne.n	80054ea <HAL_PCD_EP_DB_Transmit+0x32e>
 80054e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054e6:	3b01      	subs	r3, #1
 80054e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80054ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	029b      	lsls	r3, r3, #10
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	4a19      	ldr	r2, [pc, #100]	; (8005558 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	b29a      	uxth	r2, r3
 80054f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fa:	801a      	strh	r2, [r3, #0]
 80054fc:	e01c      	b.n	8005538 <HAL_PCD_EP_DB_Transmit+0x37c>
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	785b      	ldrb	r3, [r3, #1]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d118      	bne.n	8005538 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	643b      	str	r3, [r7, #64]	; 0x40
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2250      	movs	r2, #80	; 0x50
 8005512:	5a9b      	ldrh	r3, [r3, r2]
 8005514:	b29b      	uxth	r3, r3
 8005516:	001a      	movs	r2, r3
 8005518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800551a:	189b      	adds	r3, r3, r2
 800551c:	643b      	str	r3, [r7, #64]	; 0x40
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	00da      	lsls	r2, r3, #3
 8005524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005526:	18d3      	adds	r3, r2, r3
 8005528:	4a09      	ldr	r2, [pc, #36]	; (8005550 <HAL_PCD_EP_DB_Transmit+0x394>)
 800552a:	4694      	mov	ip, r2
 800552c:	4463      	add	r3, ip
 800552e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005532:	b29a      	uxth	r2, r3
 8005534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005536:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6818      	ldr	r0, [r3, #0]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	6959      	ldr	r1, [r3, #20]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	891a      	ldrh	r2, [r3, #8]
 8005544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005546:	b29b      	uxth	r3, r3
 8005548:	f005 f9c2 	bl	800a8d0 <USB_WritePMA>
 800554c:	e1de      	b.n	800590c <HAL_PCD_EP_DB_Transmit+0x750>
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	00000402 	.word	0x00000402
 8005554:	ffff83ff 	.word	0xffff83ff
 8005558:	ffff8000 	.word	0xffff8000
 800555c:	00000406 	.word	0x00000406
 8005560:	ffff8f8f 	.word	0xffff8f8f
 8005564:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2250      	movs	r2, #80	; 0x50
 800556e:	5a9b      	ldrh	r3, [r3, r2]
 8005570:	b29b      	uxth	r3, r3
 8005572:	001a      	movs	r2, r3
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	00db      	lsls	r3, r3, #3
 800557a:	18d2      	adds	r2, r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	18d3      	adds	r3, r2, r3
 8005582:	4aca      	ldr	r2, [pc, #808]	; (80058ac <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005584:	4694      	mov	ip, r2
 8005586:	4463      	add	r3, ip
 8005588:	881a      	ldrh	r2, [r3, #0]
 800558a:	214e      	movs	r1, #78	; 0x4e
 800558c:	187b      	adds	r3, r7, r1
 800558e:	0592      	lsls	r2, r2, #22
 8005590:	0d92      	lsrs	r2, r2, #22
 8005592:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	699a      	ldr	r2, [r3, #24]
 8005598:	187b      	adds	r3, r7, r1
 800559a:	881b      	ldrh	r3, [r3, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d307      	bcc.n	80055b0 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	699a      	ldr	r2, [r3, #24]
 80055a4:	187b      	adds	r3, r7, r1
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	1ad2      	subs	r2, r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	619a      	str	r2, [r3, #24]
 80055ae:	e002      	b.n	80055b6 <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2200      	movs	r2, #0
 80055b4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d000      	beq.n	80055c0 <HAL_PCD_EP_DB_Transmit+0x404>
 80055be:	e0c0      	b.n	8005742 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	785b      	ldrb	r3, [r3, #1]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d125      	bne.n	8005614 <HAL_PCD_EP_DB_Transmit+0x458>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2250      	movs	r2, #80	; 0x50
 80055d4:	5a9b      	ldrh	r3, [r3, r2]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	001a      	movs	r2, r3
 80055da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055dc:	189b      	adds	r3, r3, r2
 80055de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	00da      	lsls	r2, r3, #3
 80055e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e8:	18d3      	adds	r3, r2, r3
 80055ea:	4ab1      	ldr	r2, [pc, #708]	; (80058b0 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80055ec:	4694      	mov	ip, r2
 80055ee:	4463      	add	r3, ip
 80055f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80055f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	4aae      	ldr	r2, [pc, #696]	; (80058b4 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80055fa:	4013      	ands	r3, r2
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005600:	801a      	strh	r2, [r3, #0]
 8005602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	b29b      	uxth	r3, r3
 8005608:	4aab      	ldr	r2, [pc, #684]	; (80058b8 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800560a:	4313      	orrs	r3, r2
 800560c:	b29a      	uxth	r2, r3
 800560e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005610:	801a      	strh	r2, [r3, #0]
 8005612:	e01b      	b.n	800564c <HAL_PCD_EP_DB_Transmit+0x490>
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	785b      	ldrb	r3, [r3, #1]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d117      	bne.n	800564c <HAL_PCD_EP_DB_Transmit+0x490>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	677b      	str	r3, [r7, #116]	; 0x74
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2250      	movs	r2, #80	; 0x50
 8005628:	5a9b      	ldrh	r3, [r3, r2]
 800562a:	b29b      	uxth	r3, r3
 800562c:	001a      	movs	r2, r3
 800562e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005630:	189b      	adds	r3, r3, r2
 8005632:	677b      	str	r3, [r7, #116]	; 0x74
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	00da      	lsls	r2, r3, #3
 800563a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800563c:	18d3      	adds	r3, r2, r3
 800563e:	4a9c      	ldr	r2, [pc, #624]	; (80058b0 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8005640:	4694      	mov	ip, r2
 8005642:	4463      	add	r3, ip
 8005644:	673b      	str	r3, [r7, #112]	; 0x70
 8005646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005648:	2200      	movs	r2, #0
 800564a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	67bb      	str	r3, [r7, #120]	; 0x78
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	785b      	ldrb	r3, [r3, #1]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d130      	bne.n	80056bc <HAL_PCD_EP_DB_Transmit+0x500>
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2180      	movs	r1, #128	; 0x80
 8005660:	187a      	adds	r2, r7, r1
 8005662:	6013      	str	r3, [r2, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2250      	movs	r2, #80	; 0x50
 800566a:	5a9b      	ldrh	r3, [r3, r2]
 800566c:	b29b      	uxth	r3, r3
 800566e:	001a      	movs	r2, r3
 8005670:	187b      	adds	r3, r7, r1
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	189b      	adds	r3, r3, r2
 8005676:	187a      	adds	r2, r7, r1
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	00da      	lsls	r2, r3, #3
 8005680:	187b      	adds	r3, r7, r1
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	18d3      	adds	r3, r2, r3
 8005686:	4a89      	ldr	r2, [pc, #548]	; (80058ac <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005688:	4694      	mov	ip, r2
 800568a:	4463      	add	r3, ip
 800568c:	2184      	movs	r1, #132	; 0x84
 800568e:	187a      	adds	r2, r7, r1
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	187b      	adds	r3, r7, r1
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	881b      	ldrh	r3, [r3, #0]
 8005698:	b29b      	uxth	r3, r3
 800569a:	4a86      	ldr	r2, [pc, #536]	; (80058b4 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 800569c:	4013      	ands	r3, r2
 800569e:	b29a      	uxth	r2, r3
 80056a0:	187b      	adds	r3, r7, r1
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	801a      	strh	r2, [r3, #0]
 80056a6:	187b      	adds	r3, r7, r1
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	881b      	ldrh	r3, [r3, #0]
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	4a82      	ldr	r2, [pc, #520]	; (80058b8 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	b29a      	uxth	r2, r3
 80056b4:	187b      	adds	r3, r7, r1
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	801a      	strh	r2, [r3, #0]
 80056ba:	e018      	b.n	80056ee <HAL_PCD_EP_DB_Transmit+0x532>
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	785b      	ldrb	r3, [r3, #1]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d114      	bne.n	80056ee <HAL_PCD_EP_DB_Transmit+0x532>
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2250      	movs	r2, #80	; 0x50
 80056ca:	5a9b      	ldrh	r3, [r3, r2]
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	001a      	movs	r2, r3
 80056d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056d2:	189b      	adds	r3, r3, r2
 80056d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	00da      	lsls	r2, r3, #3
 80056dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056de:	18d3      	adds	r3, r2, r3
 80056e0:	4a72      	ldr	r2, [pc, #456]	; (80058ac <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80056e2:	4694      	mov	ip, r2
 80056e4:	4463      	add	r3, ip
 80056e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056ea:	2200      	movs	r2, #0
 80056ec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	781a      	ldrb	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	0011      	movs	r1, r2
 80056f6:	0018      	movs	r0, r3
 80056f8:	f007 f932 	bl	800c960 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80056fc:	1dbb      	adds	r3, r7, #6
 80056fe:	881a      	ldrh	r2, [r3, #0]
 8005700:	2380      	movs	r3, #128	; 0x80
 8005702:	01db      	lsls	r3, r3, #7
 8005704:	4013      	ands	r3, r2
 8005706:	d000      	beq.n	800570a <HAL_PCD_EP_DB_Transmit+0x54e>
 8005708:	e100      	b.n	800590c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	001a      	movs	r2, r3
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	18d3      	adds	r3, r2, r3
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	b29a      	uxth	r2, r3
 800571c:	2046      	movs	r0, #70	; 0x46
 800571e:	183b      	adds	r3, r7, r0
 8005720:	4966      	ldr	r1, [pc, #408]	; (80058bc <HAL_PCD_EP_DB_Transmit+0x700>)
 8005722:	400a      	ands	r2, r1
 8005724:	801a      	strh	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	001a      	movs	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	18d3      	adds	r3, r2, r3
 8005734:	183a      	adds	r2, r7, r0
 8005736:	8812      	ldrh	r2, [r2, #0]
 8005738:	4961      	ldr	r1, [pc, #388]	; (80058c0 <HAL_PCD_EP_DB_Transmit+0x704>)
 800573a:	430a      	orrs	r2, r1
 800573c:	b292      	uxth	r2, r2
 800573e:	801a      	strh	r2, [r3, #0]
 8005740:	e0e4      	b.n	800590c <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005742:	1dbb      	adds	r3, r7, #6
 8005744:	881a      	ldrh	r2, [r3, #0]
 8005746:	2380      	movs	r3, #128	; 0x80
 8005748:	01db      	lsls	r3, r3, #7
 800574a:	4013      	ands	r3, r2
 800574c:	d11a      	bne.n	8005784 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	001a      	movs	r2, r3
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	18d3      	adds	r3, r2, r3
 800575c:	881b      	ldrh	r3, [r3, #0]
 800575e:	b29a      	uxth	r2, r3
 8005760:	204c      	movs	r0, #76	; 0x4c
 8005762:	183b      	adds	r3, r7, r0
 8005764:	4955      	ldr	r1, [pc, #340]	; (80058bc <HAL_PCD_EP_DB_Transmit+0x700>)
 8005766:	400a      	ands	r2, r1
 8005768:	801a      	strh	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	001a      	movs	r2, r3
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	18d3      	adds	r3, r2, r3
 8005778:	183a      	adds	r2, r7, r0
 800577a:	8812      	ldrh	r2, [r2, #0]
 800577c:	4950      	ldr	r1, [pc, #320]	; (80058c0 <HAL_PCD_EP_DB_Transmit+0x704>)
 800577e:	430a      	orrs	r2, r1
 8005780:	b292      	uxth	r2, r2
 8005782:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2224      	movs	r2, #36	; 0x24
 8005788:	5c9b      	ldrb	r3, [r3, r2]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d000      	beq.n	8005790 <HAL_PCD_EP_DB_Transmit+0x5d4>
 800578e:	e0bd      	b.n	800590c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	695a      	ldr	r2, [r3, #20]
 8005794:	214e      	movs	r1, #78	; 0x4e
 8005796:	187b      	adds	r3, r7, r1
 8005798:	881b      	ldrh	r3, [r3, #0]
 800579a:	18d2      	adds	r2, r2, r3
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	69da      	ldr	r2, [r3, #28]
 80057a4:	187b      	adds	r3, r7, r1
 80057a6:	881b      	ldrh	r3, [r3, #0]
 80057a8:	18d2      	adds	r2, r2, r3
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	6a1a      	ldr	r2, [r3, #32]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d309      	bcc.n	80057ce <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	6a1a      	ldr	r2, [r3, #32]
 80057c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057c6:	1ad2      	subs	r2, r2, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	621a      	str	r2, [r3, #32]
 80057cc:	e016      	b.n	80057fc <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d108      	bne.n	80057e8 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 80057d6:	234e      	movs	r3, #78	; 0x4e
 80057d8:	18fb      	adds	r3, r7, r3
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2224      	movs	r2, #36	; 0x24
 80057e2:	2100      	movs	r1, #0
 80057e4:	5499      	strb	r1, [r3, r2]
 80057e6:	e009      	b.n	80057fc <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	6a1b      	ldr	r3, [r3, #32]
 80057ec:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2200      	movs	r2, #0
 80057f2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2224      	movs	r2, #36	; 0x24
 80057f8:	2100      	movs	r1, #0
 80057fa:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	667b      	str	r3, [r7, #100]	; 0x64
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	785b      	ldrb	r3, [r3, #1]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d15c      	bne.n	80058c4 <HAL_PCD_EP_DB_Transmit+0x708>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2250      	movs	r2, #80	; 0x50
 8005816:	5a9b      	ldrh	r3, [r3, r2]
 8005818:	b29b      	uxth	r3, r3
 800581a:	001a      	movs	r2, r3
 800581c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800581e:	189b      	adds	r3, r3, r2
 8005820:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	00da      	lsls	r2, r3, #3
 8005828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800582a:	18d3      	adds	r3, r2, r3
 800582c:	4a1f      	ldr	r2, [pc, #124]	; (80058ac <HAL_PCD_EP_DB_Transmit+0x6f0>)
 800582e:	4694      	mov	ip, r2
 8005830:	4463      	add	r3, ip
 8005832:	65bb      	str	r3, [r7, #88]	; 0x58
 8005834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005836:	2b00      	cmp	r3, #0
 8005838:	d110      	bne.n	800585c <HAL_PCD_EP_DB_Transmit+0x6a0>
 800583a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	b29b      	uxth	r3, r3
 8005840:	4a1c      	ldr	r2, [pc, #112]	; (80058b4 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8005842:	4013      	ands	r3, r2
 8005844:	b29a      	uxth	r2, r3
 8005846:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005848:	801a      	strh	r2, [r3, #0]
 800584a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800584c:	881b      	ldrh	r3, [r3, #0]
 800584e:	b29b      	uxth	r3, r3
 8005850:	4a19      	ldr	r2, [pc, #100]	; (80058b8 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005852:	4313      	orrs	r3, r2
 8005854:	b29a      	uxth	r2, r3
 8005856:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005858:	801a      	strh	r2, [r3, #0]
 800585a:	e04d      	b.n	80058f8 <HAL_PCD_EP_DB_Transmit+0x73c>
 800585c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800585e:	2b3e      	cmp	r3, #62	; 0x3e
 8005860:	d810      	bhi.n	8005884 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005864:	085b      	lsrs	r3, r3, #1
 8005866:	657b      	str	r3, [r7, #84]	; 0x54
 8005868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800586a:	2201      	movs	r2, #1
 800586c:	4013      	ands	r3, r2
 800586e:	d002      	beq.n	8005876 <HAL_PCD_EP_DB_Transmit+0x6ba>
 8005870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005872:	3301      	adds	r3, #1
 8005874:	657b      	str	r3, [r7, #84]	; 0x54
 8005876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005878:	b29b      	uxth	r3, r3
 800587a:	029b      	lsls	r3, r3, #10
 800587c:	b29a      	uxth	r2, r3
 800587e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005880:	801a      	strh	r2, [r3, #0]
 8005882:	e039      	b.n	80058f8 <HAL_PCD_EP_DB_Transmit+0x73c>
 8005884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005886:	095b      	lsrs	r3, r3, #5
 8005888:	657b      	str	r3, [r7, #84]	; 0x54
 800588a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800588c:	221f      	movs	r2, #31
 800588e:	4013      	ands	r3, r2
 8005890:	d102      	bne.n	8005898 <HAL_PCD_EP_DB_Transmit+0x6dc>
 8005892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005894:	3b01      	subs	r3, #1
 8005896:	657b      	str	r3, [r7, #84]	; 0x54
 8005898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800589a:	b29b      	uxth	r3, r3
 800589c:	029b      	lsls	r3, r3, #10
 800589e:	b29b      	uxth	r3, r3
 80058a0:	4a05      	ldr	r2, [pc, #20]	; (80058b8 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058a8:	801a      	strh	r2, [r3, #0]
 80058aa:	e025      	b.n	80058f8 <HAL_PCD_EP_DB_Transmit+0x73c>
 80058ac:	00000406 	.word	0x00000406
 80058b0:	00000402 	.word	0x00000402
 80058b4:	ffff83ff 	.word	0xffff83ff
 80058b8:	ffff8000 	.word	0xffff8000
 80058bc:	ffff8f8f 	.word	0xffff8f8f
 80058c0:	ffffc080 	.word	0xffffc080
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	785b      	ldrb	r3, [r3, #1]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d115      	bne.n	80058f8 <HAL_PCD_EP_DB_Transmit+0x73c>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2250      	movs	r2, #80	; 0x50
 80058d2:	5a9b      	ldrh	r3, [r3, r2]
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	001a      	movs	r2, r3
 80058d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058da:	189b      	adds	r3, r3, r2
 80058dc:	667b      	str	r3, [r7, #100]	; 0x64
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	00da      	lsls	r2, r3, #3
 80058e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058e6:	18d3      	adds	r3, r2, r3
 80058e8:	4a1e      	ldr	r2, [pc, #120]	; (8005964 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 80058ea:	4694      	mov	ip, r2
 80058ec:	4463      	add	r3, ip
 80058ee:	663b      	str	r3, [r7, #96]	; 0x60
 80058f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058f2:	b29a      	uxth	r2, r3
 80058f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058f6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6818      	ldr	r0, [r3, #0]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	6959      	ldr	r1, [r3, #20]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	895a      	ldrh	r2, [r3, #10]
 8005904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005906:	b29b      	uxth	r3, r3
 8005908:	f004 ffe2 	bl	800a8d0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	001a      	movs	r2, r3
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	18d3      	adds	r3, r2, r3
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	b29a      	uxth	r2, r3
 800591e:	2010      	movs	r0, #16
 8005920:	183b      	adds	r3, r7, r0
 8005922:	4911      	ldr	r1, [pc, #68]	; (8005968 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8005924:	400a      	ands	r2, r1
 8005926:	801a      	strh	r2, [r3, #0]
 8005928:	183b      	adds	r3, r7, r0
 800592a:	183a      	adds	r2, r7, r0
 800592c:	8812      	ldrh	r2, [r2, #0]
 800592e:	2110      	movs	r1, #16
 8005930:	404a      	eors	r2, r1
 8005932:	801a      	strh	r2, [r3, #0]
 8005934:	183b      	adds	r3, r7, r0
 8005936:	183a      	adds	r2, r7, r0
 8005938:	8812      	ldrh	r2, [r2, #0]
 800593a:	2120      	movs	r1, #32
 800593c:	404a      	eors	r2, r1
 800593e:	801a      	strh	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	001a      	movs	r2, r3
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	18d3      	adds	r3, r2, r3
 800594e:	183a      	adds	r2, r7, r0
 8005950:	8812      	ldrh	r2, [r2, #0]
 8005952:	4906      	ldr	r1, [pc, #24]	; (800596c <HAL_PCD_EP_DB_Transmit+0x7b0>)
 8005954:	430a      	orrs	r2, r1
 8005956:	b292      	uxth	r2, r2
 8005958:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	0018      	movs	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	b022      	add	sp, #136	; 0x88
 8005962:	bd80      	pop	{r7, pc}
 8005964:	00000406 	.word	0x00000406
 8005968:	ffff8fbf 	.word	0xffff8fbf
 800596c:	ffff8080 	.word	0xffff8080

08005970 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005970:	b590      	push	{r4, r7, lr}
 8005972:	b087      	sub	sp, #28
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	0008      	movs	r0, r1
 800597a:	0011      	movs	r1, r2
 800597c:	607b      	str	r3, [r7, #4]
 800597e:	240a      	movs	r4, #10
 8005980:	193b      	adds	r3, r7, r4
 8005982:	1c02      	adds	r2, r0, #0
 8005984:	801a      	strh	r2, [r3, #0]
 8005986:	2308      	movs	r3, #8
 8005988:	18fb      	adds	r3, r7, r3
 800598a:	1c0a      	adds	r2, r1, #0
 800598c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800598e:	0021      	movs	r1, r4
 8005990:	187b      	adds	r3, r7, r1
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	2280      	movs	r2, #128	; 0x80
 8005996:	4013      	ands	r3, r2
 8005998:	b29b      	uxth	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00c      	beq.n	80059b8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800599e:	187b      	adds	r3, r7, r1
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	2207      	movs	r2, #7
 80059a4:	4013      	ands	r3, r2
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	0013      	movs	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	189b      	adds	r3, r3, r2
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	18d3      	adds	r3, r2, r3
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	e00b      	b.n	80059d0 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80059b8:	230a      	movs	r3, #10
 80059ba:	18fb      	adds	r3, r7, r3
 80059bc:	881a      	ldrh	r2, [r3, #0]
 80059be:	0013      	movs	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	189b      	adds	r3, r3, r2
 80059c4:	00db      	lsls	r3, r3, #3
 80059c6:	3369      	adds	r3, #105	; 0x69
 80059c8:	33ff      	adds	r3, #255	; 0xff
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	18d3      	adds	r3, r2, r3
 80059ce:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80059d0:	2308      	movs	r3, #8
 80059d2:	18fb      	adds	r3, r7, r3
 80059d4:	881b      	ldrh	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d107      	bne.n	80059ea <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2200      	movs	r2, #0
 80059de:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	80da      	strh	r2, [r3, #6]
 80059e8:	e00b      	b.n	8005a02 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2201      	movs	r2, #1
 80059ee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	0c1b      	lsrs	r3, r3, #16
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	0018      	movs	r0, r3
 8005a06:	46bd      	mov	sp, r7
 8005a08:	b007      	add	sp, #28
 8005a0a:	bd90      	pop	{r4, r7, pc}

08005a0c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	23ba      	movs	r3, #186	; 0xba
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	2101      	movs	r1, #1
 8005a22:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	23b8      	movs	r3, #184	; 0xb8
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	2100      	movs	r1, #0
 8005a2c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2254      	movs	r2, #84	; 0x54
 8005a32:	5a9b      	ldrh	r3, [r3, r2]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	2201      	movs	r2, #1
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	b299      	uxth	r1, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2254      	movs	r2, #84	; 0x54
 8005a40:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2254      	movs	r2, #84	; 0x54
 8005a46:	5a9b      	ldrh	r3, [r3, r2]
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	b299      	uxth	r1, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2254      	movs	r2, #84	; 0x54
 8005a54:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	0018      	movs	r0, r3
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	b004      	add	sp, #16
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	000a      	movs	r2, r1
 8005a6a:	1cfb      	adds	r3, r7, #3
 8005a6c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005a6e:	46c0      	nop			; (mov r8, r8)
 8005a70:	46bd      	mov	sp, r7
 8005a72:	b002      	add	sp, #8
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b088      	sub	sp, #32
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d102      	bne.n	8005a8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	f000 fb76 	bl	8006178 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2201      	movs	r2, #1
 8005a92:	4013      	ands	r3, r2
 8005a94:	d100      	bne.n	8005a98 <HAL_RCC_OscConfig+0x20>
 8005a96:	e08e      	b.n	8005bb6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005a98:	4bc5      	ldr	r3, [pc, #788]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	220c      	movs	r2, #12
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	2b04      	cmp	r3, #4
 8005aa2:	d00e      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005aa4:	4bc2      	ldr	r3, [pc, #776]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	220c      	movs	r2, #12
 8005aaa:	4013      	ands	r3, r2
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	d117      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x68>
 8005ab0:	4bbf      	ldr	r3, [pc, #764]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	23c0      	movs	r3, #192	; 0xc0
 8005ab6:	025b      	lsls	r3, r3, #9
 8005ab8:	401a      	ands	r2, r3
 8005aba:	2380      	movs	r3, #128	; 0x80
 8005abc:	025b      	lsls	r3, r3, #9
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d10e      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ac2:	4bbb      	ldr	r3, [pc, #748]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	2380      	movs	r3, #128	; 0x80
 8005ac8:	029b      	lsls	r3, r3, #10
 8005aca:	4013      	ands	r3, r2
 8005acc:	d100      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x58>
 8005ace:	e071      	b.n	8005bb4 <HAL_RCC_OscConfig+0x13c>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d000      	beq.n	8005ada <HAL_RCC_OscConfig+0x62>
 8005ad8:	e06c      	b.n	8005bb4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	f000 fb4c 	bl	8006178 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d107      	bne.n	8005af8 <HAL_RCC_OscConfig+0x80>
 8005ae8:	4bb1      	ldr	r3, [pc, #708]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	4bb0      	ldr	r3, [pc, #704]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005aee:	2180      	movs	r1, #128	; 0x80
 8005af0:	0249      	lsls	r1, r1, #9
 8005af2:	430a      	orrs	r2, r1
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	e02f      	b.n	8005b58 <HAL_RCC_OscConfig+0xe0>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10c      	bne.n	8005b1a <HAL_RCC_OscConfig+0xa2>
 8005b00:	4bab      	ldr	r3, [pc, #684]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	4baa      	ldr	r3, [pc, #680]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005b06:	49ab      	ldr	r1, [pc, #684]	; (8005db4 <HAL_RCC_OscConfig+0x33c>)
 8005b08:	400a      	ands	r2, r1
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	4ba8      	ldr	r3, [pc, #672]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	4ba7      	ldr	r3, [pc, #668]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005b12:	49a9      	ldr	r1, [pc, #676]	; (8005db8 <HAL_RCC_OscConfig+0x340>)
 8005b14:	400a      	ands	r2, r1
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	e01e      	b.n	8005b58 <HAL_RCC_OscConfig+0xe0>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	2b05      	cmp	r3, #5
 8005b20:	d10e      	bne.n	8005b40 <HAL_RCC_OscConfig+0xc8>
 8005b22:	4ba3      	ldr	r3, [pc, #652]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	4ba2      	ldr	r3, [pc, #648]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005b28:	2180      	movs	r1, #128	; 0x80
 8005b2a:	02c9      	lsls	r1, r1, #11
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	601a      	str	r2, [r3, #0]
 8005b30:	4b9f      	ldr	r3, [pc, #636]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	4b9e      	ldr	r3, [pc, #632]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005b36:	2180      	movs	r1, #128	; 0x80
 8005b38:	0249      	lsls	r1, r1, #9
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	e00b      	b.n	8005b58 <HAL_RCC_OscConfig+0xe0>
 8005b40:	4b9b      	ldr	r3, [pc, #620]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	4b9a      	ldr	r3, [pc, #616]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005b46:	499b      	ldr	r1, [pc, #620]	; (8005db4 <HAL_RCC_OscConfig+0x33c>)
 8005b48:	400a      	ands	r2, r1
 8005b4a:	601a      	str	r2, [r3, #0]
 8005b4c:	4b98      	ldr	r3, [pc, #608]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	4b97      	ldr	r3, [pc, #604]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005b52:	4999      	ldr	r1, [pc, #612]	; (8005db8 <HAL_RCC_OscConfig+0x340>)
 8005b54:	400a      	ands	r2, r1
 8005b56:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d014      	beq.n	8005b8a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b60:	f7fd f884 	bl	8002c6c <HAL_GetTick>
 8005b64:	0003      	movs	r3, r0
 8005b66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b68:	e008      	b.n	8005b7c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b6a:	f7fd f87f 	bl	8002c6c <HAL_GetTick>
 8005b6e:	0002      	movs	r2, r0
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	2b64      	cmp	r3, #100	; 0x64
 8005b76:	d901      	bls.n	8005b7c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e2fd      	b.n	8006178 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b7c:	4b8c      	ldr	r3, [pc, #560]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	2380      	movs	r3, #128	; 0x80
 8005b82:	029b      	lsls	r3, r3, #10
 8005b84:	4013      	ands	r3, r2
 8005b86:	d0f0      	beq.n	8005b6a <HAL_RCC_OscConfig+0xf2>
 8005b88:	e015      	b.n	8005bb6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b8a:	f7fd f86f 	bl	8002c6c <HAL_GetTick>
 8005b8e:	0003      	movs	r3, r0
 8005b90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b92:	e008      	b.n	8005ba6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b94:	f7fd f86a 	bl	8002c6c <HAL_GetTick>
 8005b98:	0002      	movs	r2, r0
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b64      	cmp	r3, #100	; 0x64
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e2e8      	b.n	8006178 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ba6:	4b82      	ldr	r3, [pc, #520]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	2380      	movs	r3, #128	; 0x80
 8005bac:	029b      	lsls	r3, r3, #10
 8005bae:	4013      	ands	r3, r2
 8005bb0:	d1f0      	bne.n	8005b94 <HAL_RCC_OscConfig+0x11c>
 8005bb2:	e000      	b.n	8005bb6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	d100      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x14a>
 8005bc0:	e06c      	b.n	8005c9c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005bc2:	4b7b      	ldr	r3, [pc, #492]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	220c      	movs	r2, #12
 8005bc8:	4013      	ands	r3, r2
 8005bca:	d00e      	beq.n	8005bea <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005bcc:	4b78      	ldr	r3, [pc, #480]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	220c      	movs	r2, #12
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	d11f      	bne.n	8005c18 <HAL_RCC_OscConfig+0x1a0>
 8005bd8:	4b75      	ldr	r3, [pc, #468]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	23c0      	movs	r3, #192	; 0xc0
 8005bde:	025b      	lsls	r3, r3, #9
 8005be0:	401a      	ands	r2, r3
 8005be2:	2380      	movs	r3, #128	; 0x80
 8005be4:	021b      	lsls	r3, r3, #8
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d116      	bne.n	8005c18 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bea:	4b71      	ldr	r3, [pc, #452]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	d005      	beq.n	8005c00 <HAL_RCC_OscConfig+0x188>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d001      	beq.n	8005c00 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e2bb      	b.n	8006178 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c00:	4b6b      	ldr	r3, [pc, #428]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	22f8      	movs	r2, #248	; 0xf8
 8005c06:	4393      	bics	r3, r2
 8005c08:	0019      	movs	r1, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	00da      	lsls	r2, r3, #3
 8005c10:	4b67      	ldr	r3, [pc, #412]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005c12:	430a      	orrs	r2, r1
 8005c14:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c16:	e041      	b.n	8005c9c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d024      	beq.n	8005c6a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c20:	4b63      	ldr	r3, [pc, #396]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	4b62      	ldr	r3, [pc, #392]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005c26:	2101      	movs	r1, #1
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c2c:	f7fd f81e 	bl	8002c6c <HAL_GetTick>
 8005c30:	0003      	movs	r3, r0
 8005c32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c34:	e008      	b.n	8005c48 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c36:	f7fd f819 	bl	8002c6c <HAL_GetTick>
 8005c3a:	0002      	movs	r2, r0
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d901      	bls.n	8005c48 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e297      	b.n	8006178 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c48:	4b59      	ldr	r3, [pc, #356]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	4013      	ands	r3, r2
 8005c50:	d0f1      	beq.n	8005c36 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c52:	4b57      	ldr	r3, [pc, #348]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	22f8      	movs	r2, #248	; 0xf8
 8005c58:	4393      	bics	r3, r2
 8005c5a:	0019      	movs	r1, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	00da      	lsls	r2, r3, #3
 8005c62:	4b53      	ldr	r3, [pc, #332]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005c64:	430a      	orrs	r2, r1
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	e018      	b.n	8005c9c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c6a:	4b51      	ldr	r3, [pc, #324]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	4b50      	ldr	r3, [pc, #320]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005c70:	2101      	movs	r1, #1
 8005c72:	438a      	bics	r2, r1
 8005c74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c76:	f7fc fff9 	bl	8002c6c <HAL_GetTick>
 8005c7a:	0003      	movs	r3, r0
 8005c7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c7e:	e008      	b.n	8005c92 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c80:	f7fc fff4 	bl	8002c6c <HAL_GetTick>
 8005c84:	0002      	movs	r2, r0
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e272      	b.n	8006178 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c92:	4b47      	ldr	r3, [pc, #284]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2202      	movs	r2, #2
 8005c98:	4013      	ands	r3, r2
 8005c9a:	d1f1      	bne.n	8005c80 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	d036      	beq.n	8005d14 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d019      	beq.n	8005ce2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cae:	4b40      	ldr	r3, [pc, #256]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005cb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cb2:	4b3f      	ldr	r3, [pc, #252]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cba:	f7fc ffd7 	bl	8002c6c <HAL_GetTick>
 8005cbe:	0003      	movs	r3, r0
 8005cc0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cc4:	f7fc ffd2 	bl	8002c6c <HAL_GetTick>
 8005cc8:	0002      	movs	r2, r0
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e250      	b.n	8006178 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cd6:	4b36      	ldr	r3, [pc, #216]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	2202      	movs	r2, #2
 8005cdc:	4013      	ands	r3, r2
 8005cde:	d0f1      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x24c>
 8005ce0:	e018      	b.n	8005d14 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ce2:	4b33      	ldr	r3, [pc, #204]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005ce4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ce6:	4b32      	ldr	r3, [pc, #200]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005ce8:	2101      	movs	r1, #1
 8005cea:	438a      	bics	r2, r1
 8005cec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cee:	f7fc ffbd 	bl	8002c6c <HAL_GetTick>
 8005cf2:	0003      	movs	r3, r0
 8005cf4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cf6:	e008      	b.n	8005d0a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cf8:	f7fc ffb8 	bl	8002c6c <HAL_GetTick>
 8005cfc:	0002      	movs	r2, r0
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e236      	b.n	8006178 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d0a:	4b29      	ldr	r3, [pc, #164]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0e:	2202      	movs	r2, #2
 8005d10:	4013      	ands	r3, r2
 8005d12:	d1f1      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2204      	movs	r2, #4
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	d100      	bne.n	8005d20 <HAL_RCC_OscConfig+0x2a8>
 8005d1e:	e0b5      	b.n	8005e8c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d20:	201f      	movs	r0, #31
 8005d22:	183b      	adds	r3, r7, r0
 8005d24:	2200      	movs	r2, #0
 8005d26:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d28:	4b21      	ldr	r3, [pc, #132]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005d2a:	69da      	ldr	r2, [r3, #28]
 8005d2c:	2380      	movs	r3, #128	; 0x80
 8005d2e:	055b      	lsls	r3, r3, #21
 8005d30:	4013      	ands	r3, r2
 8005d32:	d110      	bne.n	8005d56 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d34:	4b1e      	ldr	r3, [pc, #120]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005d36:	69da      	ldr	r2, [r3, #28]
 8005d38:	4b1d      	ldr	r3, [pc, #116]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005d3a:	2180      	movs	r1, #128	; 0x80
 8005d3c:	0549      	lsls	r1, r1, #21
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	61da      	str	r2, [r3, #28]
 8005d42:	4b1b      	ldr	r3, [pc, #108]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005d44:	69da      	ldr	r2, [r3, #28]
 8005d46:	2380      	movs	r3, #128	; 0x80
 8005d48:	055b      	lsls	r3, r3, #21
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005d50:	183b      	adds	r3, r7, r0
 8005d52:	2201      	movs	r2, #1
 8005d54:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d56:	4b19      	ldr	r3, [pc, #100]	; (8005dbc <HAL_RCC_OscConfig+0x344>)
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	2380      	movs	r3, #128	; 0x80
 8005d5c:	005b      	lsls	r3, r3, #1
 8005d5e:	4013      	ands	r3, r2
 8005d60:	d11a      	bne.n	8005d98 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d62:	4b16      	ldr	r3, [pc, #88]	; (8005dbc <HAL_RCC_OscConfig+0x344>)
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	4b15      	ldr	r3, [pc, #84]	; (8005dbc <HAL_RCC_OscConfig+0x344>)
 8005d68:	2180      	movs	r1, #128	; 0x80
 8005d6a:	0049      	lsls	r1, r1, #1
 8005d6c:	430a      	orrs	r2, r1
 8005d6e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d70:	f7fc ff7c 	bl	8002c6c <HAL_GetTick>
 8005d74:	0003      	movs	r3, r0
 8005d76:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d78:	e008      	b.n	8005d8c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d7a:	f7fc ff77 	bl	8002c6c <HAL_GetTick>
 8005d7e:	0002      	movs	r2, r0
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	2b64      	cmp	r3, #100	; 0x64
 8005d86:	d901      	bls.n	8005d8c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e1f5      	b.n	8006178 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d8c:	4b0b      	ldr	r3, [pc, #44]	; (8005dbc <HAL_RCC_OscConfig+0x344>)
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	2380      	movs	r3, #128	; 0x80
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	4013      	ands	r3, r2
 8005d96:	d0f0      	beq.n	8005d7a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d10f      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x348>
 8005da0:	4b03      	ldr	r3, [pc, #12]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005da2:	6a1a      	ldr	r2, [r3, #32]
 8005da4:	4b02      	ldr	r3, [pc, #8]	; (8005db0 <HAL_RCC_OscConfig+0x338>)
 8005da6:	2101      	movs	r1, #1
 8005da8:	430a      	orrs	r2, r1
 8005daa:	621a      	str	r2, [r3, #32]
 8005dac:	e036      	b.n	8005e1c <HAL_RCC_OscConfig+0x3a4>
 8005dae:	46c0      	nop			; (mov r8, r8)
 8005db0:	40021000 	.word	0x40021000
 8005db4:	fffeffff 	.word	0xfffeffff
 8005db8:	fffbffff 	.word	0xfffbffff
 8005dbc:	40007000 	.word	0x40007000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10c      	bne.n	8005de2 <HAL_RCC_OscConfig+0x36a>
 8005dc8:	4bca      	ldr	r3, [pc, #808]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005dca:	6a1a      	ldr	r2, [r3, #32]
 8005dcc:	4bc9      	ldr	r3, [pc, #804]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005dce:	2101      	movs	r1, #1
 8005dd0:	438a      	bics	r2, r1
 8005dd2:	621a      	str	r2, [r3, #32]
 8005dd4:	4bc7      	ldr	r3, [pc, #796]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005dd6:	6a1a      	ldr	r2, [r3, #32]
 8005dd8:	4bc6      	ldr	r3, [pc, #792]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005dda:	2104      	movs	r1, #4
 8005ddc:	438a      	bics	r2, r1
 8005dde:	621a      	str	r2, [r3, #32]
 8005de0:	e01c      	b.n	8005e1c <HAL_RCC_OscConfig+0x3a4>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2b05      	cmp	r3, #5
 8005de8:	d10c      	bne.n	8005e04 <HAL_RCC_OscConfig+0x38c>
 8005dea:	4bc2      	ldr	r3, [pc, #776]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005dec:	6a1a      	ldr	r2, [r3, #32]
 8005dee:	4bc1      	ldr	r3, [pc, #772]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005df0:	2104      	movs	r1, #4
 8005df2:	430a      	orrs	r2, r1
 8005df4:	621a      	str	r2, [r3, #32]
 8005df6:	4bbf      	ldr	r3, [pc, #764]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005df8:	6a1a      	ldr	r2, [r3, #32]
 8005dfa:	4bbe      	ldr	r3, [pc, #760]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	621a      	str	r2, [r3, #32]
 8005e02:	e00b      	b.n	8005e1c <HAL_RCC_OscConfig+0x3a4>
 8005e04:	4bbb      	ldr	r3, [pc, #748]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005e06:	6a1a      	ldr	r2, [r3, #32]
 8005e08:	4bba      	ldr	r3, [pc, #744]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	438a      	bics	r2, r1
 8005e0e:	621a      	str	r2, [r3, #32]
 8005e10:	4bb8      	ldr	r3, [pc, #736]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005e12:	6a1a      	ldr	r2, [r3, #32]
 8005e14:	4bb7      	ldr	r3, [pc, #732]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005e16:	2104      	movs	r1, #4
 8005e18:	438a      	bics	r2, r1
 8005e1a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d014      	beq.n	8005e4e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e24:	f7fc ff22 	bl	8002c6c <HAL_GetTick>
 8005e28:	0003      	movs	r3, r0
 8005e2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e2c:	e009      	b.n	8005e42 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e2e:	f7fc ff1d 	bl	8002c6c <HAL_GetTick>
 8005e32:	0002      	movs	r2, r0
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	4aaf      	ldr	r2, [pc, #700]	; (80060f8 <HAL_RCC_OscConfig+0x680>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e19a      	b.n	8006178 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e42:	4bac      	ldr	r3, [pc, #688]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	2202      	movs	r2, #2
 8005e48:	4013      	ands	r3, r2
 8005e4a:	d0f0      	beq.n	8005e2e <HAL_RCC_OscConfig+0x3b6>
 8005e4c:	e013      	b.n	8005e76 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e4e:	f7fc ff0d 	bl	8002c6c <HAL_GetTick>
 8005e52:	0003      	movs	r3, r0
 8005e54:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e56:	e009      	b.n	8005e6c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e58:	f7fc ff08 	bl	8002c6c <HAL_GetTick>
 8005e5c:	0002      	movs	r2, r0
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	4aa5      	ldr	r2, [pc, #660]	; (80060f8 <HAL_RCC_OscConfig+0x680>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d901      	bls.n	8005e6c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e185      	b.n	8006178 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e6c:	4ba1      	ldr	r3, [pc, #644]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	2202      	movs	r2, #2
 8005e72:	4013      	ands	r3, r2
 8005e74:	d1f0      	bne.n	8005e58 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005e76:	231f      	movs	r3, #31
 8005e78:	18fb      	adds	r3, r7, r3
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d105      	bne.n	8005e8c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e80:	4b9c      	ldr	r3, [pc, #624]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005e82:	69da      	ldr	r2, [r3, #28]
 8005e84:	4b9b      	ldr	r3, [pc, #620]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005e86:	499d      	ldr	r1, [pc, #628]	; (80060fc <HAL_RCC_OscConfig+0x684>)
 8005e88:	400a      	ands	r2, r1
 8005e8a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2210      	movs	r2, #16
 8005e92:	4013      	ands	r3, r2
 8005e94:	d063      	beq.n	8005f5e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d12a      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005e9e:	4b95      	ldr	r3, [pc, #596]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ea2:	4b94      	ldr	r3, [pc, #592]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005ea4:	2104      	movs	r1, #4
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005eaa:	4b92      	ldr	r3, [pc, #584]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eae:	4b91      	ldr	r3, [pc, #580]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005eb6:	f7fc fed9 	bl	8002c6c <HAL_GetTick>
 8005eba:	0003      	movs	r3, r0
 8005ebc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005ec0:	f7fc fed4 	bl	8002c6c <HAL_GetTick>
 8005ec4:	0002      	movs	r2, r0
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e152      	b.n	8006178 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005ed2:	4b88      	ldr	r3, [pc, #544]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	4013      	ands	r3, r2
 8005eda:	d0f1      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005edc:	4b85      	ldr	r3, [pc, #532]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee0:	22f8      	movs	r2, #248	; 0xf8
 8005ee2:	4393      	bics	r3, r2
 8005ee4:	0019      	movs	r1, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	00da      	lsls	r2, r3, #3
 8005eec:	4b81      	ldr	r3, [pc, #516]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	635a      	str	r2, [r3, #52]	; 0x34
 8005ef2:	e034      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	3305      	adds	r3, #5
 8005efa:	d111      	bne.n	8005f20 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005efc:	4b7d      	ldr	r3, [pc, #500]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005efe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f00:	4b7c      	ldr	r3, [pc, #496]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005f02:	2104      	movs	r1, #4
 8005f04:	438a      	bics	r2, r1
 8005f06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005f08:	4b7a      	ldr	r3, [pc, #488]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0c:	22f8      	movs	r2, #248	; 0xf8
 8005f0e:	4393      	bics	r3, r2
 8005f10:	0019      	movs	r1, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	00da      	lsls	r2, r3, #3
 8005f18:	4b76      	ldr	r3, [pc, #472]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	635a      	str	r2, [r3, #52]	; 0x34
 8005f1e:	e01e      	b.n	8005f5e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005f20:	4b74      	ldr	r3, [pc, #464]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f24:	4b73      	ldr	r3, [pc, #460]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005f26:	2104      	movs	r1, #4
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005f2c:	4b71      	ldr	r3, [pc, #452]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f30:	4b70      	ldr	r3, [pc, #448]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005f32:	2101      	movs	r1, #1
 8005f34:	438a      	bics	r2, r1
 8005f36:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f38:	f7fc fe98 	bl	8002c6c <HAL_GetTick>
 8005f3c:	0003      	movs	r3, r0
 8005f3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005f42:	f7fc fe93 	bl	8002c6c <HAL_GetTick>
 8005f46:	0002      	movs	r2, r0
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e111      	b.n	8006178 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005f54:	4b67      	ldr	r3, [pc, #412]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f58:	2202      	movs	r2, #2
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	d1f1      	bne.n	8005f42 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2220      	movs	r2, #32
 8005f64:	4013      	ands	r3, r2
 8005f66:	d05c      	beq.n	8006022 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005f68:	4b62      	ldr	r3, [pc, #392]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	220c      	movs	r2, #12
 8005f6e:	4013      	ands	r3, r2
 8005f70:	2b0c      	cmp	r3, #12
 8005f72:	d00e      	beq.n	8005f92 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005f74:	4b5f      	ldr	r3, [pc, #380]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	220c      	movs	r2, #12
 8005f7a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d114      	bne.n	8005faa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005f80:	4b5c      	ldr	r3, [pc, #368]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	23c0      	movs	r3, #192	; 0xc0
 8005f86:	025b      	lsls	r3, r3, #9
 8005f88:	401a      	ands	r2, r3
 8005f8a:	23c0      	movs	r3, #192	; 0xc0
 8005f8c:	025b      	lsls	r3, r3, #9
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d10b      	bne.n	8005faa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005f92:	4b58      	ldr	r3, [pc, #352]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f96:	2380      	movs	r3, #128	; 0x80
 8005f98:	025b      	lsls	r3, r3, #9
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	d040      	beq.n	8006020 <HAL_RCC_OscConfig+0x5a8>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d03c      	beq.n	8006020 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e0e6      	b.n	8006178 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d01b      	beq.n	8005fea <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005fb2:	4b50      	ldr	r3, [pc, #320]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fb6:	4b4f      	ldr	r3, [pc, #316]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005fb8:	2180      	movs	r1, #128	; 0x80
 8005fba:	0249      	lsls	r1, r1, #9
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fc0:	f7fc fe54 	bl	8002c6c <HAL_GetTick>
 8005fc4:	0003      	movs	r3, r0
 8005fc6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005fc8:	e008      	b.n	8005fdc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fca:	f7fc fe4f 	bl	8002c6c <HAL_GetTick>
 8005fce:	0002      	movs	r2, r0
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d901      	bls.n	8005fdc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e0cd      	b.n	8006178 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005fdc:	4b45      	ldr	r3, [pc, #276]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005fde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fe0:	2380      	movs	r3, #128	; 0x80
 8005fe2:	025b      	lsls	r3, r3, #9
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	d0f0      	beq.n	8005fca <HAL_RCC_OscConfig+0x552>
 8005fe8:	e01b      	b.n	8006022 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005fea:	4b42      	ldr	r3, [pc, #264]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fee:	4b41      	ldr	r3, [pc, #260]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8005ff0:	4943      	ldr	r1, [pc, #268]	; (8006100 <HAL_RCC_OscConfig+0x688>)
 8005ff2:	400a      	ands	r2, r1
 8005ff4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff6:	f7fc fe39 	bl	8002c6c <HAL_GetTick>
 8005ffa:	0003      	movs	r3, r0
 8005ffc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006000:	f7fc fe34 	bl	8002c6c <HAL_GetTick>
 8006004:	0002      	movs	r2, r0
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e0b2      	b.n	8006178 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8006012:	4b38      	ldr	r3, [pc, #224]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8006014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006016:	2380      	movs	r3, #128	; 0x80
 8006018:	025b      	lsls	r3, r3, #9
 800601a:	4013      	ands	r3, r2
 800601c:	d1f0      	bne.n	8006000 <HAL_RCC_OscConfig+0x588>
 800601e:	e000      	b.n	8006022 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8006020:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	2b00      	cmp	r3, #0
 8006028:	d100      	bne.n	800602c <HAL_RCC_OscConfig+0x5b4>
 800602a:	e0a4      	b.n	8006176 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800602c:	4b31      	ldr	r3, [pc, #196]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	220c      	movs	r2, #12
 8006032:	4013      	ands	r3, r2
 8006034:	2b08      	cmp	r3, #8
 8006036:	d100      	bne.n	800603a <HAL_RCC_OscConfig+0x5c2>
 8006038:	e078      	b.n	800612c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	2b02      	cmp	r3, #2
 8006040:	d14c      	bne.n	80060dc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006042:	4b2c      	ldr	r3, [pc, #176]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	4b2b      	ldr	r3, [pc, #172]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8006048:	492e      	ldr	r1, [pc, #184]	; (8006104 <HAL_RCC_OscConfig+0x68c>)
 800604a:	400a      	ands	r2, r1
 800604c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800604e:	f7fc fe0d 	bl	8002c6c <HAL_GetTick>
 8006052:	0003      	movs	r3, r0
 8006054:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006056:	e008      	b.n	800606a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006058:	f7fc fe08 	bl	8002c6c <HAL_GetTick>
 800605c:	0002      	movs	r2, r0
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b02      	cmp	r3, #2
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e086      	b.n	8006178 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800606a:	4b22      	ldr	r3, [pc, #136]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	2380      	movs	r3, #128	; 0x80
 8006070:	049b      	lsls	r3, r3, #18
 8006072:	4013      	ands	r3, r2
 8006074:	d1f0      	bne.n	8006058 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006076:	4b1f      	ldr	r3, [pc, #124]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8006078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607a:	220f      	movs	r2, #15
 800607c:	4393      	bics	r3, r2
 800607e:	0019      	movs	r1, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006084:	4b1b      	ldr	r3, [pc, #108]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 8006086:	430a      	orrs	r2, r1
 8006088:	62da      	str	r2, [r3, #44]	; 0x2c
 800608a:	4b1a      	ldr	r3, [pc, #104]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	4a1e      	ldr	r2, [pc, #120]	; (8006108 <HAL_RCC_OscConfig+0x690>)
 8006090:	4013      	ands	r3, r2
 8006092:	0019      	movs	r1, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609c:	431a      	orrs	r2, r3
 800609e:	4b15      	ldr	r3, [pc, #84]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 80060a0:	430a      	orrs	r2, r1
 80060a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060a4:	4b13      	ldr	r3, [pc, #76]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	4b12      	ldr	r3, [pc, #72]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 80060aa:	2180      	movs	r1, #128	; 0x80
 80060ac:	0449      	lsls	r1, r1, #17
 80060ae:	430a      	orrs	r2, r1
 80060b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b2:	f7fc fddb 	bl	8002c6c <HAL_GetTick>
 80060b6:	0003      	movs	r3, r0
 80060b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060ba:	e008      	b.n	80060ce <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060bc:	f7fc fdd6 	bl	8002c6c <HAL_GetTick>
 80060c0:	0002      	movs	r2, r0
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d901      	bls.n	80060ce <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e054      	b.n	8006178 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060ce:	4b09      	ldr	r3, [pc, #36]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	2380      	movs	r3, #128	; 0x80
 80060d4:	049b      	lsls	r3, r3, #18
 80060d6:	4013      	ands	r3, r2
 80060d8:	d0f0      	beq.n	80060bc <HAL_RCC_OscConfig+0x644>
 80060da:	e04c      	b.n	8006176 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060dc:	4b05      	ldr	r3, [pc, #20]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	4b04      	ldr	r3, [pc, #16]	; (80060f4 <HAL_RCC_OscConfig+0x67c>)
 80060e2:	4908      	ldr	r1, [pc, #32]	; (8006104 <HAL_RCC_OscConfig+0x68c>)
 80060e4:	400a      	ands	r2, r1
 80060e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e8:	f7fc fdc0 	bl	8002c6c <HAL_GetTick>
 80060ec:	0003      	movs	r3, r0
 80060ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060f0:	e015      	b.n	800611e <HAL_RCC_OscConfig+0x6a6>
 80060f2:	46c0      	nop			; (mov r8, r8)
 80060f4:	40021000 	.word	0x40021000
 80060f8:	00001388 	.word	0x00001388
 80060fc:	efffffff 	.word	0xefffffff
 8006100:	fffeffff 	.word	0xfffeffff
 8006104:	feffffff 	.word	0xfeffffff
 8006108:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800610c:	f7fc fdae 	bl	8002c6c <HAL_GetTick>
 8006110:	0002      	movs	r2, r0
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b02      	cmp	r3, #2
 8006118:	d901      	bls.n	800611e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e02c      	b.n	8006178 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800611e:	4b18      	ldr	r3, [pc, #96]	; (8006180 <HAL_RCC_OscConfig+0x708>)
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	2380      	movs	r3, #128	; 0x80
 8006124:	049b      	lsls	r3, r3, #18
 8006126:	4013      	ands	r3, r2
 8006128:	d1f0      	bne.n	800610c <HAL_RCC_OscConfig+0x694>
 800612a:	e024      	b.n	8006176 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	2b01      	cmp	r3, #1
 8006132:	d101      	bne.n	8006138 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e01f      	b.n	8006178 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006138:	4b11      	ldr	r3, [pc, #68]	; (8006180 <HAL_RCC_OscConfig+0x708>)
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800613e:	4b10      	ldr	r3, [pc, #64]	; (8006180 <HAL_RCC_OscConfig+0x708>)
 8006140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006142:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006144:	697a      	ldr	r2, [r7, #20]
 8006146:	23c0      	movs	r3, #192	; 0xc0
 8006148:	025b      	lsls	r3, r3, #9
 800614a:	401a      	ands	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006150:	429a      	cmp	r2, r3
 8006152:	d10e      	bne.n	8006172 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	220f      	movs	r2, #15
 8006158:	401a      	ands	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800615e:	429a      	cmp	r2, r3
 8006160:	d107      	bne.n	8006172 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	23f0      	movs	r3, #240	; 0xf0
 8006166:	039b      	lsls	r3, r3, #14
 8006168:	401a      	ands	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800616e:	429a      	cmp	r2, r3
 8006170:	d001      	beq.n	8006176 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e000      	b.n	8006178 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	0018      	movs	r0, r3
 800617a:	46bd      	mov	sp, r7
 800617c:	b008      	add	sp, #32
 800617e:	bd80      	pop	{r7, pc}
 8006180:	40021000 	.word	0x40021000

08006184 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d101      	bne.n	8006198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e0bf      	b.n	8006318 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006198:	4b61      	ldr	r3, [pc, #388]	; (8006320 <HAL_RCC_ClockConfig+0x19c>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2201      	movs	r2, #1
 800619e:	4013      	ands	r3, r2
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d911      	bls.n	80061ca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061a6:	4b5e      	ldr	r3, [pc, #376]	; (8006320 <HAL_RCC_ClockConfig+0x19c>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2201      	movs	r2, #1
 80061ac:	4393      	bics	r3, r2
 80061ae:	0019      	movs	r1, r3
 80061b0:	4b5b      	ldr	r3, [pc, #364]	; (8006320 <HAL_RCC_ClockConfig+0x19c>)
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	430a      	orrs	r2, r1
 80061b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061b8:	4b59      	ldr	r3, [pc, #356]	; (8006320 <HAL_RCC_ClockConfig+0x19c>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2201      	movs	r2, #1
 80061be:	4013      	ands	r3, r2
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d001      	beq.n	80061ca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e0a6      	b.n	8006318 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2202      	movs	r2, #2
 80061d0:	4013      	ands	r3, r2
 80061d2:	d015      	beq.n	8006200 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2204      	movs	r2, #4
 80061da:	4013      	ands	r3, r2
 80061dc:	d006      	beq.n	80061ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80061de:	4b51      	ldr	r3, [pc, #324]	; (8006324 <HAL_RCC_ClockConfig+0x1a0>)
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	4b50      	ldr	r3, [pc, #320]	; (8006324 <HAL_RCC_ClockConfig+0x1a0>)
 80061e4:	21e0      	movs	r1, #224	; 0xe0
 80061e6:	00c9      	lsls	r1, r1, #3
 80061e8:	430a      	orrs	r2, r1
 80061ea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061ec:	4b4d      	ldr	r3, [pc, #308]	; (8006324 <HAL_RCC_ClockConfig+0x1a0>)
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	22f0      	movs	r2, #240	; 0xf0
 80061f2:	4393      	bics	r3, r2
 80061f4:	0019      	movs	r1, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	689a      	ldr	r2, [r3, #8]
 80061fa:	4b4a      	ldr	r3, [pc, #296]	; (8006324 <HAL_RCC_ClockConfig+0x1a0>)
 80061fc:	430a      	orrs	r2, r1
 80061fe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2201      	movs	r2, #1
 8006206:	4013      	ands	r3, r2
 8006208:	d04c      	beq.n	80062a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d107      	bne.n	8006222 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006212:	4b44      	ldr	r3, [pc, #272]	; (8006324 <HAL_RCC_ClockConfig+0x1a0>)
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	2380      	movs	r3, #128	; 0x80
 8006218:	029b      	lsls	r3, r3, #10
 800621a:	4013      	ands	r3, r2
 800621c:	d120      	bne.n	8006260 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e07a      	b.n	8006318 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	2b02      	cmp	r3, #2
 8006228:	d107      	bne.n	800623a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800622a:	4b3e      	ldr	r3, [pc, #248]	; (8006324 <HAL_RCC_ClockConfig+0x1a0>)
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	2380      	movs	r3, #128	; 0x80
 8006230:	049b      	lsls	r3, r3, #18
 8006232:	4013      	ands	r3, r2
 8006234:	d114      	bne.n	8006260 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e06e      	b.n	8006318 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	2b03      	cmp	r3, #3
 8006240:	d107      	bne.n	8006252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006242:	4b38      	ldr	r3, [pc, #224]	; (8006324 <HAL_RCC_ClockConfig+0x1a0>)
 8006244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006246:	2380      	movs	r3, #128	; 0x80
 8006248:	025b      	lsls	r3, r3, #9
 800624a:	4013      	ands	r3, r2
 800624c:	d108      	bne.n	8006260 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e062      	b.n	8006318 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006252:	4b34      	ldr	r3, [pc, #208]	; (8006324 <HAL_RCC_ClockConfig+0x1a0>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2202      	movs	r2, #2
 8006258:	4013      	ands	r3, r2
 800625a:	d101      	bne.n	8006260 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e05b      	b.n	8006318 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006260:	4b30      	ldr	r3, [pc, #192]	; (8006324 <HAL_RCC_ClockConfig+0x1a0>)
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2203      	movs	r2, #3
 8006266:	4393      	bics	r3, r2
 8006268:	0019      	movs	r1, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	4b2d      	ldr	r3, [pc, #180]	; (8006324 <HAL_RCC_ClockConfig+0x1a0>)
 8006270:	430a      	orrs	r2, r1
 8006272:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006274:	f7fc fcfa 	bl	8002c6c <HAL_GetTick>
 8006278:	0003      	movs	r3, r0
 800627a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800627c:	e009      	b.n	8006292 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800627e:	f7fc fcf5 	bl	8002c6c <HAL_GetTick>
 8006282:	0002      	movs	r2, r0
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	4a27      	ldr	r2, [pc, #156]	; (8006328 <HAL_RCC_ClockConfig+0x1a4>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d901      	bls.n	8006292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e042      	b.n	8006318 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006292:	4b24      	ldr	r3, [pc, #144]	; (8006324 <HAL_RCC_ClockConfig+0x1a0>)
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	220c      	movs	r2, #12
 8006298:	401a      	ands	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d1ec      	bne.n	800627e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062a4:	4b1e      	ldr	r3, [pc, #120]	; (8006320 <HAL_RCC_ClockConfig+0x19c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2201      	movs	r2, #1
 80062aa:	4013      	ands	r3, r2
 80062ac:	683a      	ldr	r2, [r7, #0]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d211      	bcs.n	80062d6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062b2:	4b1b      	ldr	r3, [pc, #108]	; (8006320 <HAL_RCC_ClockConfig+0x19c>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2201      	movs	r2, #1
 80062b8:	4393      	bics	r3, r2
 80062ba:	0019      	movs	r1, r3
 80062bc:	4b18      	ldr	r3, [pc, #96]	; (8006320 <HAL_RCC_ClockConfig+0x19c>)
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062c4:	4b16      	ldr	r3, [pc, #88]	; (8006320 <HAL_RCC_ClockConfig+0x19c>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2201      	movs	r2, #1
 80062ca:	4013      	ands	r3, r2
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d001      	beq.n	80062d6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e020      	b.n	8006318 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2204      	movs	r2, #4
 80062dc:	4013      	ands	r3, r2
 80062de:	d009      	beq.n	80062f4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80062e0:	4b10      	ldr	r3, [pc, #64]	; (8006324 <HAL_RCC_ClockConfig+0x1a0>)
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	4a11      	ldr	r2, [pc, #68]	; (800632c <HAL_RCC_ClockConfig+0x1a8>)
 80062e6:	4013      	ands	r3, r2
 80062e8:	0019      	movs	r1, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68da      	ldr	r2, [r3, #12]
 80062ee:	4b0d      	ldr	r3, [pc, #52]	; (8006324 <HAL_RCC_ClockConfig+0x1a0>)
 80062f0:	430a      	orrs	r2, r1
 80062f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80062f4:	f000 f820 	bl	8006338 <HAL_RCC_GetSysClockFreq>
 80062f8:	0001      	movs	r1, r0
 80062fa:	4b0a      	ldr	r3, [pc, #40]	; (8006324 <HAL_RCC_ClockConfig+0x1a0>)
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	091b      	lsrs	r3, r3, #4
 8006300:	220f      	movs	r2, #15
 8006302:	4013      	ands	r3, r2
 8006304:	4a0a      	ldr	r2, [pc, #40]	; (8006330 <HAL_RCC_ClockConfig+0x1ac>)
 8006306:	5cd3      	ldrb	r3, [r2, r3]
 8006308:	000a      	movs	r2, r1
 800630a:	40da      	lsrs	r2, r3
 800630c:	4b09      	ldr	r3, [pc, #36]	; (8006334 <HAL_RCC_ClockConfig+0x1b0>)
 800630e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006310:	2003      	movs	r0, #3
 8006312:	f7fc fc65 	bl	8002be0 <HAL_InitTick>
  
  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	0018      	movs	r0, r3
 800631a:	46bd      	mov	sp, r7
 800631c:	b004      	add	sp, #16
 800631e:	bd80      	pop	{r7, pc}
 8006320:	40022000 	.word	0x40022000
 8006324:	40021000 	.word	0x40021000
 8006328:	00001388 	.word	0x00001388
 800632c:	fffff8ff 	.word	0xfffff8ff
 8006330:	0800d968 	.word	0x0800d968
 8006334:	20000000 	.word	0x20000000

08006338 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006338:	b590      	push	{r4, r7, lr}
 800633a:	b08f      	sub	sp, #60	; 0x3c
 800633c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800633e:	2314      	movs	r3, #20
 8006340:	18fb      	adds	r3, r7, r3
 8006342:	4a38      	ldr	r2, [pc, #224]	; (8006424 <HAL_RCC_GetSysClockFreq+0xec>)
 8006344:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006346:	c313      	stmia	r3!, {r0, r1, r4}
 8006348:	6812      	ldr	r2, [r2, #0]
 800634a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800634c:	1d3b      	adds	r3, r7, #4
 800634e:	4a36      	ldr	r2, [pc, #216]	; (8006428 <HAL_RCC_GetSysClockFreq+0xf0>)
 8006350:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006352:	c313      	stmia	r3!, {r0, r1, r4}
 8006354:	6812      	ldr	r2, [r2, #0]
 8006356:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800635c:	2300      	movs	r3, #0
 800635e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006360:	2300      	movs	r3, #0
 8006362:	637b      	str	r3, [r7, #52]	; 0x34
 8006364:	2300      	movs	r3, #0
 8006366:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800636c:	4b2f      	ldr	r3, [pc, #188]	; (800642c <HAL_RCC_GetSysClockFreq+0xf4>)
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006374:	220c      	movs	r2, #12
 8006376:	4013      	ands	r3, r2
 8006378:	2b0c      	cmp	r3, #12
 800637a:	d047      	beq.n	800640c <HAL_RCC_GetSysClockFreq+0xd4>
 800637c:	d849      	bhi.n	8006412 <HAL_RCC_GetSysClockFreq+0xda>
 800637e:	2b04      	cmp	r3, #4
 8006380:	d002      	beq.n	8006388 <HAL_RCC_GetSysClockFreq+0x50>
 8006382:	2b08      	cmp	r3, #8
 8006384:	d003      	beq.n	800638e <HAL_RCC_GetSysClockFreq+0x56>
 8006386:	e044      	b.n	8006412 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006388:	4b29      	ldr	r3, [pc, #164]	; (8006430 <HAL_RCC_GetSysClockFreq+0xf8>)
 800638a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800638c:	e044      	b.n	8006418 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800638e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006390:	0c9b      	lsrs	r3, r3, #18
 8006392:	220f      	movs	r2, #15
 8006394:	4013      	ands	r3, r2
 8006396:	2214      	movs	r2, #20
 8006398:	18ba      	adds	r2, r7, r2
 800639a:	5cd3      	ldrb	r3, [r2, r3]
 800639c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800639e:	4b23      	ldr	r3, [pc, #140]	; (800642c <HAL_RCC_GetSysClockFreq+0xf4>)
 80063a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a2:	220f      	movs	r2, #15
 80063a4:	4013      	ands	r3, r2
 80063a6:	1d3a      	adds	r2, r7, #4
 80063a8:	5cd3      	ldrb	r3, [r2, r3]
 80063aa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80063ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063ae:	23c0      	movs	r3, #192	; 0xc0
 80063b0:	025b      	lsls	r3, r3, #9
 80063b2:	401a      	ands	r2, r3
 80063b4:	2380      	movs	r3, #128	; 0x80
 80063b6:	025b      	lsls	r3, r3, #9
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d109      	bne.n	80063d0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80063bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063be:	481c      	ldr	r0, [pc, #112]	; (8006430 <HAL_RCC_GetSysClockFreq+0xf8>)
 80063c0:	f7f9 feb4 	bl	800012c <__udivsi3>
 80063c4:	0003      	movs	r3, r0
 80063c6:	001a      	movs	r2, r3
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	4353      	muls	r3, r2
 80063cc:	637b      	str	r3, [r7, #52]	; 0x34
 80063ce:	e01a      	b.n	8006406 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80063d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063d2:	23c0      	movs	r3, #192	; 0xc0
 80063d4:	025b      	lsls	r3, r3, #9
 80063d6:	401a      	ands	r2, r3
 80063d8:	23c0      	movs	r3, #192	; 0xc0
 80063da:	025b      	lsls	r3, r3, #9
 80063dc:	429a      	cmp	r2, r3
 80063de:	d109      	bne.n	80063f4 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80063e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063e2:	4814      	ldr	r0, [pc, #80]	; (8006434 <HAL_RCC_GetSysClockFreq+0xfc>)
 80063e4:	f7f9 fea2 	bl	800012c <__udivsi3>
 80063e8:	0003      	movs	r3, r0
 80063ea:	001a      	movs	r2, r3
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	4353      	muls	r3, r2
 80063f0:	637b      	str	r3, [r7, #52]	; 0x34
 80063f2:	e008      	b.n	8006406 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80063f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063f6:	4810      	ldr	r0, [pc, #64]	; (8006438 <HAL_RCC_GetSysClockFreq+0x100>)
 80063f8:	f7f9 fe98 	bl	800012c <__udivsi3>
 80063fc:	0003      	movs	r3, r0
 80063fe:	001a      	movs	r2, r3
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	4353      	muls	r3, r2
 8006404:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006408:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800640a:	e005      	b.n	8006418 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800640c:	4b09      	ldr	r3, [pc, #36]	; (8006434 <HAL_RCC_GetSysClockFreq+0xfc>)
 800640e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006410:	e002      	b.n	8006418 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006412:	4b09      	ldr	r3, [pc, #36]	; (8006438 <HAL_RCC_GetSysClockFreq+0x100>)
 8006414:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006416:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800641a:	0018      	movs	r0, r3
 800641c:	46bd      	mov	sp, r7
 800641e:	b00f      	add	sp, #60	; 0x3c
 8006420:	bd90      	pop	{r4, r7, pc}
 8006422:	46c0      	nop			; (mov r8, r8)
 8006424:	0800d88c 	.word	0x0800d88c
 8006428:	0800d89c 	.word	0x0800d89c
 800642c:	40021000 	.word	0x40021000
 8006430:	00f42400 	.word	0x00f42400
 8006434:	02dc6c00 	.word	0x02dc6c00
 8006438:	007a1200 	.word	0x007a1200

0800643c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006440:	4b02      	ldr	r3, [pc, #8]	; (800644c <HAL_RCC_GetHCLKFreq+0x10>)
 8006442:	681b      	ldr	r3, [r3, #0]
}
 8006444:	0018      	movs	r0, r3
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}
 800644a:	46c0      	nop			; (mov r8, r8)
 800644c:	20000000 	.word	0x20000000

08006450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006454:	f7ff fff2 	bl	800643c <HAL_RCC_GetHCLKFreq>
 8006458:	0001      	movs	r1, r0
 800645a:	4b06      	ldr	r3, [pc, #24]	; (8006474 <HAL_RCC_GetPCLK1Freq+0x24>)
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	0a1b      	lsrs	r3, r3, #8
 8006460:	2207      	movs	r2, #7
 8006462:	4013      	ands	r3, r2
 8006464:	4a04      	ldr	r2, [pc, #16]	; (8006478 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006466:	5cd3      	ldrb	r3, [r2, r3]
 8006468:	40d9      	lsrs	r1, r3
 800646a:	000b      	movs	r3, r1
}    
 800646c:	0018      	movs	r0, r3
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	46c0      	nop			; (mov r8, r8)
 8006474:	40021000 	.word	0x40021000
 8006478:	0800d978 	.word	0x0800d978

0800647c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006484:	2300      	movs	r3, #0
 8006486:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006488:	2300      	movs	r3, #0
 800648a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	2380      	movs	r3, #128	; 0x80
 8006492:	025b      	lsls	r3, r3, #9
 8006494:	4013      	ands	r3, r2
 8006496:	d100      	bne.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006498:	e08e      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800649a:	2017      	movs	r0, #23
 800649c:	183b      	adds	r3, r7, r0
 800649e:	2200      	movs	r2, #0
 80064a0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064a2:	4b6e      	ldr	r3, [pc, #440]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80064a4:	69da      	ldr	r2, [r3, #28]
 80064a6:	2380      	movs	r3, #128	; 0x80
 80064a8:	055b      	lsls	r3, r3, #21
 80064aa:	4013      	ands	r3, r2
 80064ac:	d110      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80064ae:	4b6b      	ldr	r3, [pc, #428]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80064b0:	69da      	ldr	r2, [r3, #28]
 80064b2:	4b6a      	ldr	r3, [pc, #424]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80064b4:	2180      	movs	r1, #128	; 0x80
 80064b6:	0549      	lsls	r1, r1, #21
 80064b8:	430a      	orrs	r2, r1
 80064ba:	61da      	str	r2, [r3, #28]
 80064bc:	4b67      	ldr	r3, [pc, #412]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80064be:	69da      	ldr	r2, [r3, #28]
 80064c0:	2380      	movs	r3, #128	; 0x80
 80064c2:	055b      	lsls	r3, r3, #21
 80064c4:	4013      	ands	r3, r2
 80064c6:	60bb      	str	r3, [r7, #8]
 80064c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064ca:	183b      	adds	r3, r7, r0
 80064cc:	2201      	movs	r2, #1
 80064ce:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064d0:	4b63      	ldr	r3, [pc, #396]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	2380      	movs	r3, #128	; 0x80
 80064d6:	005b      	lsls	r3, r3, #1
 80064d8:	4013      	ands	r3, r2
 80064da:	d11a      	bne.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064dc:	4b60      	ldr	r3, [pc, #384]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	4b5f      	ldr	r3, [pc, #380]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80064e2:	2180      	movs	r1, #128	; 0x80
 80064e4:	0049      	lsls	r1, r1, #1
 80064e6:	430a      	orrs	r2, r1
 80064e8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ea:	f7fc fbbf 	bl	8002c6c <HAL_GetTick>
 80064ee:	0003      	movs	r3, r0
 80064f0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064f2:	e008      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064f4:	f7fc fbba 	bl	8002c6c <HAL_GetTick>
 80064f8:	0002      	movs	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b64      	cmp	r3, #100	; 0x64
 8006500:	d901      	bls.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e0a6      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006506:	4b56      	ldr	r3, [pc, #344]	; (8006660 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	2380      	movs	r3, #128	; 0x80
 800650c:	005b      	lsls	r3, r3, #1
 800650e:	4013      	ands	r3, r2
 8006510:	d0f0      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006512:	4b52      	ldr	r3, [pc, #328]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006514:	6a1a      	ldr	r2, [r3, #32]
 8006516:	23c0      	movs	r3, #192	; 0xc0
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4013      	ands	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d034      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	23c0      	movs	r3, #192	; 0xc0
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4013      	ands	r3, r2
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	429a      	cmp	r2, r3
 8006532:	d02c      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006534:	4b49      	ldr	r3, [pc, #292]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	4a4a      	ldr	r2, [pc, #296]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800653a:	4013      	ands	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800653e:	4b47      	ldr	r3, [pc, #284]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006540:	6a1a      	ldr	r2, [r3, #32]
 8006542:	4b46      	ldr	r3, [pc, #280]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006544:	2180      	movs	r1, #128	; 0x80
 8006546:	0249      	lsls	r1, r1, #9
 8006548:	430a      	orrs	r2, r1
 800654a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800654c:	4b43      	ldr	r3, [pc, #268]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800654e:	6a1a      	ldr	r2, [r3, #32]
 8006550:	4b42      	ldr	r3, [pc, #264]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006552:	4945      	ldr	r1, [pc, #276]	; (8006668 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006554:	400a      	ands	r2, r1
 8006556:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006558:	4b40      	ldr	r3, [pc, #256]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2201      	movs	r2, #1
 8006562:	4013      	ands	r3, r2
 8006564:	d013      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006566:	f7fc fb81 	bl	8002c6c <HAL_GetTick>
 800656a:	0003      	movs	r3, r0
 800656c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800656e:	e009      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006570:	f7fc fb7c 	bl	8002c6c <HAL_GetTick>
 8006574:	0002      	movs	r2, r0
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	4a3c      	ldr	r2, [pc, #240]	; (800666c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d901      	bls.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e067      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006584:	4b35      	ldr	r3, [pc, #212]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	2202      	movs	r2, #2
 800658a:	4013      	ands	r3, r2
 800658c:	d0f0      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800658e:	4b33      	ldr	r3, [pc, #204]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	4a34      	ldr	r2, [pc, #208]	; (8006664 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006594:	4013      	ands	r3, r2
 8006596:	0019      	movs	r1, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	4b2f      	ldr	r3, [pc, #188]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800659e:	430a      	orrs	r2, r1
 80065a0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80065a2:	2317      	movs	r3, #23
 80065a4:	18fb      	adds	r3, r7, r3
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d105      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065ac:	4b2b      	ldr	r3, [pc, #172]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80065ae:	69da      	ldr	r2, [r3, #28]
 80065b0:	4b2a      	ldr	r3, [pc, #168]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80065b2:	492f      	ldr	r1, [pc, #188]	; (8006670 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80065b4:	400a      	ands	r2, r1
 80065b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2201      	movs	r2, #1
 80065be:	4013      	ands	r3, r2
 80065c0:	d009      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80065c2:	4b26      	ldr	r3, [pc, #152]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80065c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c6:	2203      	movs	r2, #3
 80065c8:	4393      	bics	r3, r2
 80065ca:	0019      	movs	r1, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	4b22      	ldr	r3, [pc, #136]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80065d2:	430a      	orrs	r2, r1
 80065d4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2202      	movs	r2, #2
 80065dc:	4013      	ands	r3, r2
 80065de:	d009      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80065e0:	4b1e      	ldr	r3, [pc, #120]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80065e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e4:	4a23      	ldr	r2, [pc, #140]	; (8006674 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80065e6:	4013      	ands	r3, r2
 80065e8:	0019      	movs	r1, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68da      	ldr	r2, [r3, #12]
 80065ee:	4b1b      	ldr	r3, [pc, #108]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80065f0:	430a      	orrs	r2, r1
 80065f2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2220      	movs	r2, #32
 80065fa:	4013      	ands	r3, r2
 80065fc:	d009      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065fe:	4b17      	ldr	r3, [pc, #92]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006602:	2210      	movs	r2, #16
 8006604:	4393      	bics	r3, r2
 8006606:	0019      	movs	r1, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	691a      	ldr	r2, [r3, #16]
 800660c:	4b13      	ldr	r3, [pc, #76]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800660e:	430a      	orrs	r2, r1
 8006610:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	2380      	movs	r3, #128	; 0x80
 8006618:	029b      	lsls	r3, r3, #10
 800661a:	4013      	ands	r3, r2
 800661c:	d009      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800661e:	4b0f      	ldr	r3, [pc, #60]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006622:	2280      	movs	r2, #128	; 0x80
 8006624:	4393      	bics	r3, r2
 8006626:	0019      	movs	r1, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	699a      	ldr	r2, [r3, #24]
 800662c:	4b0b      	ldr	r3, [pc, #44]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800662e:	430a      	orrs	r2, r1
 8006630:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	2380      	movs	r3, #128	; 0x80
 8006638:	00db      	lsls	r3, r3, #3
 800663a:	4013      	ands	r3, r2
 800663c:	d009      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800663e:	4b07      	ldr	r3, [pc, #28]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006642:	2240      	movs	r2, #64	; 0x40
 8006644:	4393      	bics	r3, r2
 8006646:	0019      	movs	r1, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	695a      	ldr	r2, [r3, #20]
 800664c:	4b03      	ldr	r3, [pc, #12]	; (800665c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800664e:	430a      	orrs	r2, r1
 8006650:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	0018      	movs	r0, r3
 8006656:	46bd      	mov	sp, r7
 8006658:	b006      	add	sp, #24
 800665a:	bd80      	pop	{r7, pc}
 800665c:	40021000 	.word	0x40021000
 8006660:	40007000 	.word	0x40007000
 8006664:	fffffcff 	.word	0xfffffcff
 8006668:	fffeffff 	.word	0xfffeffff
 800666c:	00001388 	.word	0x00001388
 8006670:	efffffff 	.word	0xefffffff
 8006674:	fffcffff 	.word	0xfffcffff

08006678 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b084      	sub	sp, #16
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e0a8      	b.n	80067dc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668e:	2b00      	cmp	r3, #0
 8006690:	d109      	bne.n	80066a6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	2382      	movs	r3, #130	; 0x82
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	429a      	cmp	r2, r3
 800669c:	d009      	beq.n	80066b2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2200      	movs	r2, #0
 80066a2:	61da      	str	r2, [r3, #28]
 80066a4:	e005      	b.n	80066b2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	225d      	movs	r2, #93	; 0x5d
 80066bc:	5c9b      	ldrb	r3, [r3, r2]
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d107      	bne.n	80066d4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	225c      	movs	r2, #92	; 0x5c
 80066c8:	2100      	movs	r1, #0
 80066ca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	0018      	movs	r0, r3
 80066d0:	f7fb fe76 	bl	80023c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	225d      	movs	r2, #93	; 0x5d
 80066d8:	2102      	movs	r1, #2
 80066da:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2140      	movs	r1, #64	; 0x40
 80066e8:	438a      	bics	r2, r1
 80066ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68da      	ldr	r2, [r3, #12]
 80066f0:	23e0      	movs	r3, #224	; 0xe0
 80066f2:	00db      	lsls	r3, r3, #3
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d902      	bls.n	80066fe <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80066f8:	2300      	movs	r3, #0
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	e002      	b.n	8006704 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80066fe:	2380      	movs	r3, #128	; 0x80
 8006700:	015b      	lsls	r3, r3, #5
 8006702:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68da      	ldr	r2, [r3, #12]
 8006708:	23f0      	movs	r3, #240	; 0xf0
 800670a:	011b      	lsls	r3, r3, #4
 800670c:	429a      	cmp	r2, r3
 800670e:	d008      	beq.n	8006722 <HAL_SPI_Init+0xaa>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	23e0      	movs	r3, #224	; 0xe0
 8006716:	00db      	lsls	r3, r3, #3
 8006718:	429a      	cmp	r2, r3
 800671a:	d002      	beq.n	8006722 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	2382      	movs	r3, #130	; 0x82
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	401a      	ands	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6899      	ldr	r1, [r3, #8]
 8006730:	2384      	movs	r3, #132	; 0x84
 8006732:	021b      	lsls	r3, r3, #8
 8006734:	400b      	ands	r3, r1
 8006736:	431a      	orrs	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	2102      	movs	r1, #2
 800673e:	400b      	ands	r3, r1
 8006740:	431a      	orrs	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	2101      	movs	r1, #1
 8006748:	400b      	ands	r3, r1
 800674a:	431a      	orrs	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6999      	ldr	r1, [r3, #24]
 8006750:	2380      	movs	r3, #128	; 0x80
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	400b      	ands	r3, r1
 8006756:	431a      	orrs	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	69db      	ldr	r3, [r3, #28]
 800675c:	2138      	movs	r1, #56	; 0x38
 800675e:	400b      	ands	r3, r1
 8006760:	431a      	orrs	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	2180      	movs	r1, #128	; 0x80
 8006768:	400b      	ands	r3, r1
 800676a:	431a      	orrs	r2, r3
 800676c:	0011      	movs	r1, r2
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006772:	2380      	movs	r3, #128	; 0x80
 8006774:	019b      	lsls	r3, r3, #6
 8006776:	401a      	ands	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	699b      	ldr	r3, [r3, #24]
 8006784:	0c1b      	lsrs	r3, r3, #16
 8006786:	2204      	movs	r2, #4
 8006788:	401a      	ands	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678e:	2110      	movs	r1, #16
 8006790:	400b      	ands	r3, r1
 8006792:	431a      	orrs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006798:	2108      	movs	r1, #8
 800679a:	400b      	ands	r3, r1
 800679c:	431a      	orrs	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68d9      	ldr	r1, [r3, #12]
 80067a2:	23f0      	movs	r3, #240	; 0xf0
 80067a4:	011b      	lsls	r3, r3, #4
 80067a6:	400b      	ands	r3, r1
 80067a8:	431a      	orrs	r2, r3
 80067aa:	0011      	movs	r1, r2
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	2380      	movs	r3, #128	; 0x80
 80067b0:	015b      	lsls	r3, r3, #5
 80067b2:	401a      	ands	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	69da      	ldr	r2, [r3, #28]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4907      	ldr	r1, [pc, #28]	; (80067e4 <HAL_SPI_Init+0x16c>)
 80067c8:	400a      	ands	r2, r1
 80067ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	225d      	movs	r2, #93	; 0x5d
 80067d6:	2101      	movs	r1, #1
 80067d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	0018      	movs	r0, r3
 80067de:	46bd      	mov	sp, r7
 80067e0:	b004      	add	sp, #16
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	fffff7ff 	.word	0xfffff7ff

080067e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b088      	sub	sp, #32
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	603b      	str	r3, [r7, #0]
 80067f4:	1dbb      	adds	r3, r7, #6
 80067f6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067f8:	231f      	movs	r3, #31
 80067fa:	18fb      	adds	r3, r7, r3
 80067fc:	2200      	movs	r2, #0
 80067fe:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	225c      	movs	r2, #92	; 0x5c
 8006804:	5c9b      	ldrb	r3, [r3, r2]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_SPI_Transmit+0x26>
 800680a:	2302      	movs	r3, #2
 800680c:	e140      	b.n	8006a90 <HAL_SPI_Transmit+0x2a8>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	225c      	movs	r2, #92	; 0x5c
 8006812:	2101      	movs	r1, #1
 8006814:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006816:	f7fc fa29 	bl	8002c6c <HAL_GetTick>
 800681a:	0003      	movs	r3, r0
 800681c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800681e:	2316      	movs	r3, #22
 8006820:	18fb      	adds	r3, r7, r3
 8006822:	1dba      	adds	r2, r7, #6
 8006824:	8812      	ldrh	r2, [r2, #0]
 8006826:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	225d      	movs	r2, #93	; 0x5d
 800682c:	5c9b      	ldrb	r3, [r3, r2]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b01      	cmp	r3, #1
 8006832:	d004      	beq.n	800683e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006834:	231f      	movs	r3, #31
 8006836:	18fb      	adds	r3, r7, r3
 8006838:	2202      	movs	r2, #2
 800683a:	701a      	strb	r2, [r3, #0]
    goto error;
 800683c:	e11d      	b.n	8006a7a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <HAL_SPI_Transmit+0x64>
 8006844:	1dbb      	adds	r3, r7, #6
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d104      	bne.n	8006856 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800684c:	231f      	movs	r3, #31
 800684e:	18fb      	adds	r3, r7, r3
 8006850:	2201      	movs	r2, #1
 8006852:	701a      	strb	r2, [r3, #0]
    goto error;
 8006854:	e111      	b.n	8006a7a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	225d      	movs	r2, #93	; 0x5d
 800685a:	2103      	movs	r1, #3
 800685c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	1dba      	adds	r2, r7, #6
 800686e:	8812      	ldrh	r2, [r2, #0]
 8006870:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	1dba      	adds	r2, r7, #6
 8006876:	8812      	ldrh	r2, [r2, #0]
 8006878:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2244      	movs	r2, #68	; 0x44
 8006884:	2100      	movs	r1, #0
 8006886:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2246      	movs	r2, #70	; 0x46
 800688c:	2100      	movs	r1, #0
 800688e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	689a      	ldr	r2, [r3, #8]
 80068a0:	2380      	movs	r3, #128	; 0x80
 80068a2:	021b      	lsls	r3, r3, #8
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d110      	bne.n	80068ca <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2140      	movs	r1, #64	; 0x40
 80068b4:	438a      	bics	r2, r1
 80068b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2180      	movs	r1, #128	; 0x80
 80068c4:	01c9      	lsls	r1, r1, #7
 80068c6:	430a      	orrs	r2, r1
 80068c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2240      	movs	r2, #64	; 0x40
 80068d2:	4013      	ands	r3, r2
 80068d4:	2b40      	cmp	r3, #64	; 0x40
 80068d6:	d007      	beq.n	80068e8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2140      	movs	r1, #64	; 0x40
 80068e4:	430a      	orrs	r2, r1
 80068e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	68da      	ldr	r2, [r3, #12]
 80068ec:	23e0      	movs	r3, #224	; 0xe0
 80068ee:	00db      	lsls	r3, r3, #3
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d94e      	bls.n	8006992 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d004      	beq.n	8006906 <HAL_SPI_Transmit+0x11e>
 80068fc:	2316      	movs	r3, #22
 80068fe:	18fb      	adds	r3, r7, r3
 8006900:	881b      	ldrh	r3, [r3, #0]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d13f      	bne.n	8006986 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800690a:	881a      	ldrh	r2, [r3, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006916:	1c9a      	adds	r2, r3, #2
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006920:	b29b      	uxth	r3, r3
 8006922:	3b01      	subs	r3, #1
 8006924:	b29a      	uxth	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800692a:	e02c      	b.n	8006986 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	2202      	movs	r2, #2
 8006934:	4013      	ands	r3, r2
 8006936:	2b02      	cmp	r3, #2
 8006938:	d112      	bne.n	8006960 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693e:	881a      	ldrh	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694a:	1c9a      	adds	r2, r3, #2
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006954:	b29b      	uxth	r3, r3
 8006956:	3b01      	subs	r3, #1
 8006958:	b29a      	uxth	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800695e:	e012      	b.n	8006986 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006960:	f7fc f984 	bl	8002c6c <HAL_GetTick>
 8006964:	0002      	movs	r2, r0
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	429a      	cmp	r2, r3
 800696e:	d802      	bhi.n	8006976 <HAL_SPI_Transmit+0x18e>
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	3301      	adds	r3, #1
 8006974:	d102      	bne.n	800697c <HAL_SPI_Transmit+0x194>
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d104      	bne.n	8006986 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800697c:	231f      	movs	r3, #31
 800697e:	18fb      	adds	r3, r7, r3
 8006980:	2203      	movs	r2, #3
 8006982:	701a      	strb	r2, [r3, #0]
          goto error;
 8006984:	e079      	b.n	8006a7a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800698a:	b29b      	uxth	r3, r3
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1cd      	bne.n	800692c <HAL_SPI_Transmit+0x144>
 8006990:	e04f      	b.n	8006a32 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d004      	beq.n	80069a4 <HAL_SPI_Transmit+0x1bc>
 800699a:	2316      	movs	r3, #22
 800699c:	18fb      	adds	r3, r7, r3
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d141      	bne.n	8006a28 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	330c      	adds	r3, #12
 80069ae:	7812      	ldrb	r2, [r2, #0]
 80069b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	3b01      	subs	r3, #1
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80069ca:	e02d      	b.n	8006a28 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	2202      	movs	r2, #2
 80069d4:	4013      	ands	r3, r2
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d113      	bne.n	8006a02 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	330c      	adds	r3, #12
 80069e4:	7812      	ldrb	r2, [r2, #0]
 80069e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ec:	1c5a      	adds	r2, r3, #1
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	3b01      	subs	r3, #1
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a00:	e012      	b.n	8006a28 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a02:	f7fc f933 	bl	8002c6c <HAL_GetTick>
 8006a06:	0002      	movs	r2, r0
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d802      	bhi.n	8006a18 <HAL_SPI_Transmit+0x230>
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	3301      	adds	r3, #1
 8006a16:	d102      	bne.n	8006a1e <HAL_SPI_Transmit+0x236>
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d104      	bne.n	8006a28 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8006a1e:	231f      	movs	r3, #31
 8006a20:	18fb      	adds	r3, r7, r3
 8006a22:	2203      	movs	r2, #3
 8006a24:	701a      	strb	r2, [r3, #0]
          goto error;
 8006a26:	e028      	b.n	8006a7a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1cc      	bne.n	80069cc <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	6839      	ldr	r1, [r7, #0]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	0018      	movs	r0, r3
 8006a3a:	f000 fb2f 	bl	800709c <SPI_EndRxTxTransaction>
 8006a3e:	1e03      	subs	r3, r0, #0
 8006a40:	d002      	beq.n	8006a48 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2220      	movs	r2, #32
 8006a46:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10a      	bne.n	8006a66 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a50:	2300      	movs	r3, #0
 8006a52:	613b      	str	r3, [r7, #16]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	613b      	str	r3, [r7, #16]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	613b      	str	r3, [r7, #16]
 8006a64:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d004      	beq.n	8006a78 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006a6e:	231f      	movs	r3, #31
 8006a70:	18fb      	adds	r3, r7, r3
 8006a72:	2201      	movs	r2, #1
 8006a74:	701a      	strb	r2, [r3, #0]
 8006a76:	e000      	b.n	8006a7a <HAL_SPI_Transmit+0x292>
  }

error:
 8006a78:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	225d      	movs	r2, #93	; 0x5d
 8006a7e:	2101      	movs	r1, #1
 8006a80:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	225c      	movs	r2, #92	; 0x5c
 8006a86:	2100      	movs	r1, #0
 8006a88:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006a8a:	231f      	movs	r3, #31
 8006a8c:	18fb      	adds	r3, r7, r3
 8006a8e:	781b      	ldrb	r3, [r3, #0]
}
 8006a90:	0018      	movs	r0, r3
 8006a92:	46bd      	mov	sp, r7
 8006a94:	b008      	add	sp, #32
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08a      	sub	sp, #40	; 0x28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
 8006aa4:	001a      	movs	r2, r3
 8006aa6:	1cbb      	adds	r3, r7, #2
 8006aa8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006aae:	2323      	movs	r3, #35	; 0x23
 8006ab0:	18fb      	adds	r3, r7, r3
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	225c      	movs	r2, #92	; 0x5c
 8006aba:	5c9b      	ldrb	r3, [r3, r2]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d101      	bne.n	8006ac4 <HAL_SPI_TransmitReceive+0x2c>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	e1b5      	b.n	8006e30 <HAL_SPI_TransmitReceive+0x398>
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	225c      	movs	r2, #92	; 0x5c
 8006ac8:	2101      	movs	r1, #1
 8006aca:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006acc:	f7fc f8ce 	bl	8002c6c <HAL_GetTick>
 8006ad0:	0003      	movs	r3, r0
 8006ad2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ad4:	201b      	movs	r0, #27
 8006ad6:	183b      	adds	r3, r7, r0
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	215d      	movs	r1, #93	; 0x5d
 8006adc:	5c52      	ldrb	r2, [r2, r1]
 8006ade:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006ae6:	2312      	movs	r3, #18
 8006ae8:	18fb      	adds	r3, r7, r3
 8006aea:	1cba      	adds	r2, r7, #2
 8006aec:	8812      	ldrh	r2, [r2, #0]
 8006aee:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006af0:	183b      	adds	r3, r7, r0
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d011      	beq.n	8006b1c <HAL_SPI_TransmitReceive+0x84>
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	2382      	movs	r3, #130	; 0x82
 8006afc:	005b      	lsls	r3, r3, #1
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d107      	bne.n	8006b12 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d103      	bne.n	8006b12 <HAL_SPI_TransmitReceive+0x7a>
 8006b0a:	183b      	adds	r3, r7, r0
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	2b04      	cmp	r3, #4
 8006b10:	d004      	beq.n	8006b1c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8006b12:	2323      	movs	r3, #35	; 0x23
 8006b14:	18fb      	adds	r3, r7, r3
 8006b16:	2202      	movs	r2, #2
 8006b18:	701a      	strb	r2, [r3, #0]
    goto error;
 8006b1a:	e17e      	b.n	8006e1a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d006      	beq.n	8006b30 <HAL_SPI_TransmitReceive+0x98>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d003      	beq.n	8006b30 <HAL_SPI_TransmitReceive+0x98>
 8006b28:	1cbb      	adds	r3, r7, #2
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d104      	bne.n	8006b3a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006b30:	2323      	movs	r3, #35	; 0x23
 8006b32:	18fb      	adds	r3, r7, r3
 8006b34:	2201      	movs	r2, #1
 8006b36:	701a      	strb	r2, [r3, #0]
    goto error;
 8006b38:	e16f      	b.n	8006e1a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	225d      	movs	r2, #93	; 0x5d
 8006b3e:	5c9b      	ldrb	r3, [r3, r2]
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	d003      	beq.n	8006b4e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	225d      	movs	r2, #93	; 0x5d
 8006b4a:	2105      	movs	r1, #5
 8006b4c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	1cba      	adds	r2, r7, #2
 8006b5e:	2146      	movs	r1, #70	; 0x46
 8006b60:	8812      	ldrh	r2, [r2, #0]
 8006b62:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	1cba      	adds	r2, r7, #2
 8006b68:	2144      	movs	r1, #68	; 0x44
 8006b6a:	8812      	ldrh	r2, [r2, #0]
 8006b6c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	1cba      	adds	r2, r7, #2
 8006b78:	8812      	ldrh	r2, [r2, #0]
 8006b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	1cba      	adds	r2, r7, #2
 8006b80:	8812      	ldrh	r2, [r2, #0]
 8006b82:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	68da      	ldr	r2, [r3, #12]
 8006b94:	23e0      	movs	r3, #224	; 0xe0
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d908      	bls.n	8006bae <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	49a4      	ldr	r1, [pc, #656]	; (8006e38 <HAL_SPI_TransmitReceive+0x3a0>)
 8006ba8:	400a      	ands	r2, r1
 8006baa:	605a      	str	r2, [r3, #4]
 8006bac:	e008      	b.n	8006bc0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2180      	movs	r1, #128	; 0x80
 8006bba:	0149      	lsls	r1, r1, #5
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2240      	movs	r2, #64	; 0x40
 8006bc8:	4013      	ands	r3, r2
 8006bca:	2b40      	cmp	r3, #64	; 0x40
 8006bcc:	d007      	beq.n	8006bde <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2140      	movs	r1, #64	; 0x40
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	68da      	ldr	r2, [r3, #12]
 8006be2:	23e0      	movs	r3, #224	; 0xe0
 8006be4:	00db      	lsls	r3, r3, #3
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d800      	bhi.n	8006bec <HAL_SPI_TransmitReceive+0x154>
 8006bea:	e07f      	b.n	8006cec <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d005      	beq.n	8006c00 <HAL_SPI_TransmitReceive+0x168>
 8006bf4:	2312      	movs	r3, #18
 8006bf6:	18fb      	adds	r3, r7, r3
 8006bf8:	881b      	ldrh	r3, [r3, #0]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d000      	beq.n	8006c00 <HAL_SPI_TransmitReceive+0x168>
 8006bfe:	e069      	b.n	8006cd4 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c04:	881a      	ldrh	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c10:	1c9a      	adds	r2, r3, #2
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c24:	e056      	b.n	8006cd4 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	4013      	ands	r3, r2
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d11b      	bne.n	8006c6c <HAL_SPI_TransmitReceive+0x1d4>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d016      	beq.n	8006c6c <HAL_SPI_TransmitReceive+0x1d4>
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d113      	bne.n	8006c6c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c48:	881a      	ldrh	r2, [r3, #0]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c54:	1c9a      	adds	r2, r3, #2
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	3b01      	subs	r3, #1
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	2201      	movs	r2, #1
 8006c74:	4013      	ands	r3, r2
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d11c      	bne.n	8006cb4 <HAL_SPI_TransmitReceive+0x21c>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2246      	movs	r2, #70	; 0x46
 8006c7e:	5a9b      	ldrh	r3, [r3, r2]
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d016      	beq.n	8006cb4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68da      	ldr	r2, [r3, #12]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c90:	b292      	uxth	r2, r2
 8006c92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c98:	1c9a      	adds	r2, r3, #2
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2246      	movs	r2, #70	; 0x46
 8006ca2:	5a9b      	ldrh	r3, [r3, r2]
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	b299      	uxth	r1, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2246      	movs	r2, #70	; 0x46
 8006cae:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006cb4:	f7fb ffda 	bl	8002c6c <HAL_GetTick>
 8006cb8:	0002      	movs	r2, r0
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d807      	bhi.n	8006cd4 <HAL_SPI_TransmitReceive+0x23c>
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	d004      	beq.n	8006cd4 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006cca:	2323      	movs	r3, #35	; 0x23
 8006ccc:	18fb      	adds	r3, r7, r3
 8006cce:	2203      	movs	r2, #3
 8006cd0:	701a      	strb	r2, [r3, #0]
        goto error;
 8006cd2:	e0a2      	b.n	8006e1a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d1a3      	bne.n	8006c26 <HAL_SPI_TransmitReceive+0x18e>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2246      	movs	r2, #70	; 0x46
 8006ce2:	5a9b      	ldrh	r3, [r3, r2]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d19d      	bne.n	8006c26 <HAL_SPI_TransmitReceive+0x18e>
 8006cea:	e085      	b.n	8006df8 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d005      	beq.n	8006d00 <HAL_SPI_TransmitReceive+0x268>
 8006cf4:	2312      	movs	r3, #18
 8006cf6:	18fb      	adds	r3, r7, r3
 8006cf8:	881b      	ldrh	r3, [r3, #0]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d000      	beq.n	8006d00 <HAL_SPI_TransmitReceive+0x268>
 8006cfe:	e070      	b.n	8006de2 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	330c      	adds	r3, #12
 8006d0a:	7812      	ldrb	r2, [r2, #0]
 8006d0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d12:	1c5a      	adds	r2, r3, #1
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d26:	e05c      	b.n	8006de2 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	2202      	movs	r2, #2
 8006d30:	4013      	ands	r3, r2
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d11c      	bne.n	8006d70 <HAL_SPI_TransmitReceive+0x2d8>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d017      	beq.n	8006d70 <HAL_SPI_TransmitReceive+0x2d8>
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d114      	bne.n	8006d70 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	330c      	adds	r3, #12
 8006d50:	7812      	ldrb	r2, [r2, #0]
 8006d52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	3b01      	subs	r3, #1
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	2201      	movs	r2, #1
 8006d78:	4013      	ands	r3, r2
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d11e      	bne.n	8006dbc <HAL_SPI_TransmitReceive+0x324>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2246      	movs	r2, #70	; 0x46
 8006d82:	5a9b      	ldrh	r3, [r3, r2]
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d018      	beq.n	8006dbc <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	330c      	adds	r3, #12
 8006d90:	001a      	movs	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d96:	7812      	ldrb	r2, [r2, #0]
 8006d98:	b2d2      	uxtb	r2, r2
 8006d9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2246      	movs	r2, #70	; 0x46
 8006daa:	5a9b      	ldrh	r3, [r3, r2]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	3b01      	subs	r3, #1
 8006db0:	b299      	uxth	r1, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2246      	movs	r2, #70	; 0x46
 8006db6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006db8:	2301      	movs	r3, #1
 8006dba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006dbc:	f7fb ff56 	bl	8002c6c <HAL_GetTick>
 8006dc0:	0002      	movs	r2, r0
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d802      	bhi.n	8006dd2 <HAL_SPI_TransmitReceive+0x33a>
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dce:	3301      	adds	r3, #1
 8006dd0:	d102      	bne.n	8006dd8 <HAL_SPI_TransmitReceive+0x340>
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d104      	bne.n	8006de2 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006dd8:	2323      	movs	r3, #35	; 0x23
 8006dda:	18fb      	adds	r3, r7, r3
 8006ddc:	2203      	movs	r2, #3
 8006dde:	701a      	strb	r2, [r3, #0]
        goto error;
 8006de0:	e01b      	b.n	8006e1a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d19d      	bne.n	8006d28 <HAL_SPI_TransmitReceive+0x290>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2246      	movs	r2, #70	; 0x46
 8006df0:	5a9b      	ldrh	r3, [r3, r2]
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d197      	bne.n	8006d28 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006df8:	69fa      	ldr	r2, [r7, #28]
 8006dfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	0018      	movs	r0, r3
 8006e00:	f000 f94c 	bl	800709c <SPI_EndRxTxTransaction>
 8006e04:	1e03      	subs	r3, r0, #0
 8006e06:	d007      	beq.n	8006e18 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006e08:	2323      	movs	r3, #35	; 0x23
 8006e0a:	18fb      	adds	r3, r7, r3
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2220      	movs	r2, #32
 8006e14:	661a      	str	r2, [r3, #96]	; 0x60
 8006e16:	e000      	b.n	8006e1a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8006e18:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	225d      	movs	r2, #93	; 0x5d
 8006e1e:	2101      	movs	r1, #1
 8006e20:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	225c      	movs	r2, #92	; 0x5c
 8006e26:	2100      	movs	r1, #0
 8006e28:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006e2a:	2323      	movs	r3, #35	; 0x23
 8006e2c:	18fb      	adds	r3, r7, r3
 8006e2e:	781b      	ldrb	r3, [r3, #0]
}
 8006e30:	0018      	movs	r0, r3
 8006e32:	46bd      	mov	sp, r7
 8006e34:	b00a      	add	sp, #40	; 0x28
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	ffffefff 	.word	0xffffefff

08006e3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	603b      	str	r3, [r7, #0]
 8006e48:	1dfb      	adds	r3, r7, #7
 8006e4a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e4c:	f7fb ff0e 	bl	8002c6c <HAL_GetTick>
 8006e50:	0002      	movs	r2, r0
 8006e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e54:	1a9b      	subs	r3, r3, r2
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	18d3      	adds	r3, r2, r3
 8006e5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e5c:	f7fb ff06 	bl	8002c6c <HAL_GetTick>
 8006e60:	0003      	movs	r3, r0
 8006e62:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e64:	4b3a      	ldr	r3, [pc, #232]	; (8006f50 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	015b      	lsls	r3, r3, #5
 8006e6a:	0d1b      	lsrs	r3, r3, #20
 8006e6c:	69fa      	ldr	r2, [r7, #28]
 8006e6e:	4353      	muls	r3, r2
 8006e70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e72:	e058      	b.n	8006f26 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	3301      	adds	r3, #1
 8006e78:	d055      	beq.n	8006f26 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e7a:	f7fb fef7 	bl	8002c6c <HAL_GetTick>
 8006e7e:	0002      	movs	r2, r0
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	69fa      	ldr	r2, [r7, #28]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d902      	bls.n	8006e90 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d142      	bne.n	8006f16 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	21e0      	movs	r1, #224	; 0xe0
 8006e9c:	438a      	bics	r2, r1
 8006e9e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	685a      	ldr	r2, [r3, #4]
 8006ea4:	2382      	movs	r3, #130	; 0x82
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d113      	bne.n	8006ed4 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	2380      	movs	r3, #128	; 0x80
 8006eb2:	021b      	lsls	r3, r3, #8
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d005      	beq.n	8006ec4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	689a      	ldr	r2, [r3, #8]
 8006ebc:	2380      	movs	r3, #128	; 0x80
 8006ebe:	00db      	lsls	r3, r3, #3
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d107      	bne.n	8006ed4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2140      	movs	r1, #64	; 0x40
 8006ed0:	438a      	bics	r2, r1
 8006ed2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ed8:	2380      	movs	r3, #128	; 0x80
 8006eda:	019b      	lsls	r3, r3, #6
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d110      	bne.n	8006f02 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	491a      	ldr	r1, [pc, #104]	; (8006f54 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006eec:	400a      	ands	r2, r1
 8006eee:	601a      	str	r2, [r3, #0]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2180      	movs	r1, #128	; 0x80
 8006efc:	0189      	lsls	r1, r1, #6
 8006efe:	430a      	orrs	r2, r1
 8006f00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	225d      	movs	r2, #93	; 0x5d
 8006f06:	2101      	movs	r1, #1
 8006f08:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	225c      	movs	r2, #92	; 0x5c
 8006f0e:	2100      	movs	r1, #0
 8006f10:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e017      	b.n	8006f46 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d101      	bne.n	8006f20 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	3b01      	subs	r3, #1
 8006f24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	4013      	ands	r3, r2
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	1ad3      	subs	r3, r2, r3
 8006f34:	425a      	negs	r2, r3
 8006f36:	4153      	adcs	r3, r2
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	001a      	movs	r2, r3
 8006f3c:	1dfb      	adds	r3, r7, #7
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d197      	bne.n	8006e74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	0018      	movs	r0, r3
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	b008      	add	sp, #32
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	46c0      	nop			; (mov r8, r8)
 8006f50:	20000000 	.word	0x20000000
 8006f54:	ffffdfff 	.word	0xffffdfff

08006f58 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b08a      	sub	sp, #40	; 0x28
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
 8006f64:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006f66:	2317      	movs	r3, #23
 8006f68:	18fb      	adds	r3, r7, r3
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006f6e:	f7fb fe7d 	bl	8002c6c <HAL_GetTick>
 8006f72:	0002      	movs	r2, r0
 8006f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f76:	1a9b      	subs	r3, r3, r2
 8006f78:	683a      	ldr	r2, [r7, #0]
 8006f7a:	18d3      	adds	r3, r2, r3
 8006f7c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006f7e:	f7fb fe75 	bl	8002c6c <HAL_GetTick>
 8006f82:	0003      	movs	r3, r0
 8006f84:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	330c      	adds	r3, #12
 8006f8c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006f8e:	4b41      	ldr	r3, [pc, #260]	; (8007094 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	0013      	movs	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	189b      	adds	r3, r3, r2
 8006f98:	00da      	lsls	r2, r3, #3
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	0d1b      	lsrs	r3, r3, #20
 8006f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa0:	4353      	muls	r3, r2
 8006fa2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006fa4:	e068      	b.n	8007078 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	23c0      	movs	r3, #192	; 0xc0
 8006faa:	00db      	lsls	r3, r3, #3
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d10a      	bne.n	8006fc6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d107      	bne.n	8006fc6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	2117      	movs	r1, #23
 8006fbe:	187b      	adds	r3, r7, r1
 8006fc0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006fc2:	187b      	adds	r3, r7, r1
 8006fc4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	d055      	beq.n	8007078 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fcc:	f7fb fe4e 	bl	8002c6c <HAL_GetTick>
 8006fd0:	0002      	movs	r2, r0
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d902      	bls.n	8006fe2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d142      	bne.n	8007068 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	21e0      	movs	r1, #224	; 0xe0
 8006fee:	438a      	bics	r2, r1
 8006ff0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	2382      	movs	r3, #130	; 0x82
 8006ff8:	005b      	lsls	r3, r3, #1
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d113      	bne.n	8007026 <SPI_WaitFifoStateUntilTimeout+0xce>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	689a      	ldr	r2, [r3, #8]
 8007002:	2380      	movs	r3, #128	; 0x80
 8007004:	021b      	lsls	r3, r3, #8
 8007006:	429a      	cmp	r2, r3
 8007008:	d005      	beq.n	8007016 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	689a      	ldr	r2, [r3, #8]
 800700e:	2380      	movs	r3, #128	; 0x80
 8007010:	00db      	lsls	r3, r3, #3
 8007012:	429a      	cmp	r2, r3
 8007014:	d107      	bne.n	8007026 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2140      	movs	r1, #64	; 0x40
 8007022:	438a      	bics	r2, r1
 8007024:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800702a:	2380      	movs	r3, #128	; 0x80
 800702c:	019b      	lsls	r3, r3, #6
 800702e:	429a      	cmp	r2, r3
 8007030:	d110      	bne.n	8007054 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4916      	ldr	r1, [pc, #88]	; (8007098 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800703e:	400a      	ands	r2, r1
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2180      	movs	r1, #128	; 0x80
 800704e:	0189      	lsls	r1, r1, #6
 8007050:	430a      	orrs	r2, r1
 8007052:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	225d      	movs	r2, #93	; 0x5d
 8007058:	2101      	movs	r1, #1
 800705a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	225c      	movs	r2, #92	; 0x5c
 8007060:	2100      	movs	r1, #0
 8007062:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e010      	b.n	800708a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d101      	bne.n	8007072 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	3b01      	subs	r3, #1
 8007076:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	68ba      	ldr	r2, [r7, #8]
 8007080:	4013      	ands	r3, r2
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	429a      	cmp	r2, r3
 8007086:	d18e      	bne.n	8006fa6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	0018      	movs	r0, r3
 800708c:	46bd      	mov	sp, r7
 800708e:	b00a      	add	sp, #40	; 0x28
 8007090:	bd80      	pop	{r7, pc}
 8007092:	46c0      	nop			; (mov r8, r8)
 8007094:	20000000 	.word	0x20000000
 8007098:	ffffdfff 	.word	0xffffdfff

0800709c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af02      	add	r7, sp, #8
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	23c0      	movs	r3, #192	; 0xc0
 80070ac:	0159      	lsls	r1, r3, #5
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	0013      	movs	r3, r2
 80070b6:	2200      	movs	r2, #0
 80070b8:	f7ff ff4e 	bl	8006f58 <SPI_WaitFifoStateUntilTimeout>
 80070bc:	1e03      	subs	r3, r0, #0
 80070be:	d007      	beq.n	80070d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070c4:	2220      	movs	r2, #32
 80070c6:	431a      	orrs	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e027      	b.n	8007120 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	0013      	movs	r3, r2
 80070da:	2200      	movs	r2, #0
 80070dc:	2180      	movs	r1, #128	; 0x80
 80070de:	f7ff fead 	bl	8006e3c <SPI_WaitFlagStateUntilTimeout>
 80070e2:	1e03      	subs	r3, r0, #0
 80070e4:	d007      	beq.n	80070f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ea:	2220      	movs	r2, #32
 80070ec:	431a      	orrs	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e014      	b.n	8007120 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	23c0      	movs	r3, #192	; 0xc0
 80070fa:	00d9      	lsls	r1, r3, #3
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	0013      	movs	r3, r2
 8007104:	2200      	movs	r2, #0
 8007106:	f7ff ff27 	bl	8006f58 <SPI_WaitFifoStateUntilTimeout>
 800710a:	1e03      	subs	r3, r0, #0
 800710c:	d007      	beq.n	800711e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007112:	2220      	movs	r2, #32
 8007114:	431a      	orrs	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e000      	b.n	8007120 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	0018      	movs	r0, r3
 8007122:	46bd      	mov	sp, r7
 8007124:	b004      	add	sp, #16
 8007126:	bd80      	pop	{r7, pc}

08007128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e042      	b.n	80071c0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	223d      	movs	r2, #61	; 0x3d
 800713e:	5c9b      	ldrb	r3, [r3, r2]
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d107      	bne.n	8007156 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	223c      	movs	r2, #60	; 0x3c
 800714a:	2100      	movs	r1, #0
 800714c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	0018      	movs	r0, r3
 8007152:	f7fb f983 	bl	800245c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	223d      	movs	r2, #61	; 0x3d
 800715a:	2102      	movs	r1, #2
 800715c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	3304      	adds	r3, #4
 8007166:	0019      	movs	r1, r3
 8007168:	0010      	movs	r0, r2
 800716a:	f000 fa65 	bl	8007638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2246      	movs	r2, #70	; 0x46
 8007172:	2101      	movs	r1, #1
 8007174:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	223e      	movs	r2, #62	; 0x3e
 800717a:	2101      	movs	r1, #1
 800717c:	5499      	strb	r1, [r3, r2]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	223f      	movs	r2, #63	; 0x3f
 8007182:	2101      	movs	r1, #1
 8007184:	5499      	strb	r1, [r3, r2]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2240      	movs	r2, #64	; 0x40
 800718a:	2101      	movs	r1, #1
 800718c:	5499      	strb	r1, [r3, r2]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2241      	movs	r2, #65	; 0x41
 8007192:	2101      	movs	r1, #1
 8007194:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2242      	movs	r2, #66	; 0x42
 800719a:	2101      	movs	r1, #1
 800719c:	5499      	strb	r1, [r3, r2]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2243      	movs	r2, #67	; 0x43
 80071a2:	2101      	movs	r1, #1
 80071a4:	5499      	strb	r1, [r3, r2]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2244      	movs	r2, #68	; 0x44
 80071aa:	2101      	movs	r1, #1
 80071ac:	5499      	strb	r1, [r3, r2]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2245      	movs	r2, #69	; 0x45
 80071b2:	2101      	movs	r1, #1
 80071b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	223d      	movs	r2, #61	; 0x3d
 80071ba:	2101      	movs	r1, #1
 80071bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	0018      	movs	r0, r3
 80071c2:	46bd      	mov	sp, r7
 80071c4:	b002      	add	sp, #8
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	223d      	movs	r2, #61	; 0x3d
 80071d4:	5c9b      	ldrb	r3, [r3, r2]
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d001      	beq.n	80071e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e03b      	b.n	8007258 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	223d      	movs	r2, #61	; 0x3d
 80071e4:	2102      	movs	r1, #2
 80071e6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68da      	ldr	r2, [r3, #12]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2101      	movs	r1, #1
 80071f4:	430a      	orrs	r2, r1
 80071f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a18      	ldr	r2, [pc, #96]	; (8007260 <HAL_TIM_Base_Start_IT+0x98>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d00f      	beq.n	8007222 <HAL_TIM_Base_Start_IT+0x5a>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	2380      	movs	r3, #128	; 0x80
 8007208:	05db      	lsls	r3, r3, #23
 800720a:	429a      	cmp	r2, r3
 800720c:	d009      	beq.n	8007222 <HAL_TIM_Base_Start_IT+0x5a>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a14      	ldr	r2, [pc, #80]	; (8007264 <HAL_TIM_Base_Start_IT+0x9c>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d004      	beq.n	8007222 <HAL_TIM_Base_Start_IT+0x5a>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a12      	ldr	r2, [pc, #72]	; (8007268 <HAL_TIM_Base_Start_IT+0xa0>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d111      	bne.n	8007246 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	2207      	movs	r2, #7
 800722a:	4013      	ands	r3, r2
 800722c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2b06      	cmp	r3, #6
 8007232:	d010      	beq.n	8007256 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2101      	movs	r1, #1
 8007240:	430a      	orrs	r2, r1
 8007242:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007244:	e007      	b.n	8007256 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2101      	movs	r1, #1
 8007252:	430a      	orrs	r2, r1
 8007254:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007256:	2300      	movs	r3, #0
}
 8007258:	0018      	movs	r0, r3
 800725a:	46bd      	mov	sp, r7
 800725c:	b004      	add	sp, #16
 800725e:	bd80      	pop	{r7, pc}
 8007260:	40012c00 	.word	0x40012c00
 8007264:	40000400 	.word	0x40000400
 8007268:	40014000 	.word	0x40014000

0800726c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b082      	sub	sp, #8
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e042      	b.n	8007304 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	223d      	movs	r2, #61	; 0x3d
 8007282:	5c9b      	ldrb	r3, [r3, r2]
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d107      	bne.n	800729a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	223c      	movs	r2, #60	; 0x3c
 800728e:	2100      	movs	r1, #0
 8007290:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	0018      	movs	r0, r3
 8007296:	f000 f839 	bl	800730c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	223d      	movs	r2, #61	; 0x3d
 800729e:	2102      	movs	r1, #2
 80072a0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	3304      	adds	r3, #4
 80072aa:	0019      	movs	r1, r3
 80072ac:	0010      	movs	r0, r2
 80072ae:	f000 f9c3 	bl	8007638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2246      	movs	r2, #70	; 0x46
 80072b6:	2101      	movs	r1, #1
 80072b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	223e      	movs	r2, #62	; 0x3e
 80072be:	2101      	movs	r1, #1
 80072c0:	5499      	strb	r1, [r3, r2]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	223f      	movs	r2, #63	; 0x3f
 80072c6:	2101      	movs	r1, #1
 80072c8:	5499      	strb	r1, [r3, r2]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2240      	movs	r2, #64	; 0x40
 80072ce:	2101      	movs	r1, #1
 80072d0:	5499      	strb	r1, [r3, r2]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2241      	movs	r2, #65	; 0x41
 80072d6:	2101      	movs	r1, #1
 80072d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2242      	movs	r2, #66	; 0x42
 80072de:	2101      	movs	r1, #1
 80072e0:	5499      	strb	r1, [r3, r2]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2243      	movs	r2, #67	; 0x43
 80072e6:	2101      	movs	r1, #1
 80072e8:	5499      	strb	r1, [r3, r2]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2244      	movs	r2, #68	; 0x44
 80072ee:	2101      	movs	r1, #1
 80072f0:	5499      	strb	r1, [r3, r2]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2245      	movs	r2, #69	; 0x45
 80072f6:	2101      	movs	r1, #1
 80072f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	223d      	movs	r2, #61	; 0x3d
 80072fe:	2101      	movs	r1, #1
 8007300:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	0018      	movs	r0, r3
 8007306:	46bd      	mov	sp, r7
 8007308:	b002      	add	sp, #8
 800730a:	bd80      	pop	{r7, pc}

0800730c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007314:	46c0      	nop			; (mov r8, r8)
 8007316:	46bd      	mov	sp, r7
 8007318:	b002      	add	sp, #8
 800731a:	bd80      	pop	{r7, pc}

0800731c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	2202      	movs	r2, #2
 800732c:	4013      	ands	r3, r2
 800732e:	2b02      	cmp	r3, #2
 8007330:	d124      	bne.n	800737c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	2202      	movs	r2, #2
 800733a:	4013      	ands	r3, r2
 800733c:	2b02      	cmp	r3, #2
 800733e:	d11d      	bne.n	800737c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2203      	movs	r2, #3
 8007346:	4252      	negs	r2, r2
 8007348:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	2203      	movs	r2, #3
 8007358:	4013      	ands	r3, r2
 800735a:	d004      	beq.n	8007366 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	0018      	movs	r0, r3
 8007360:	f000 f952 	bl	8007608 <HAL_TIM_IC_CaptureCallback>
 8007364:	e007      	b.n	8007376 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	0018      	movs	r0, r3
 800736a:	f000 f945 	bl	80075f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	0018      	movs	r0, r3
 8007372:	f000 f951 	bl	8007618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	2204      	movs	r2, #4
 8007384:	4013      	ands	r3, r2
 8007386:	2b04      	cmp	r3, #4
 8007388:	d125      	bne.n	80073d6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	2204      	movs	r2, #4
 8007392:	4013      	ands	r3, r2
 8007394:	2b04      	cmp	r3, #4
 8007396:	d11e      	bne.n	80073d6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2205      	movs	r2, #5
 800739e:	4252      	negs	r2, r2
 80073a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2202      	movs	r2, #2
 80073a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	699a      	ldr	r2, [r3, #24]
 80073ae:	23c0      	movs	r3, #192	; 0xc0
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	4013      	ands	r3, r2
 80073b4:	d004      	beq.n	80073c0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	0018      	movs	r0, r3
 80073ba:	f000 f925 	bl	8007608 <HAL_TIM_IC_CaptureCallback>
 80073be:	e007      	b.n	80073d0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	0018      	movs	r0, r3
 80073c4:	f000 f918 	bl	80075f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	0018      	movs	r0, r3
 80073cc:	f000 f924 	bl	8007618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	2208      	movs	r2, #8
 80073de:	4013      	ands	r3, r2
 80073e0:	2b08      	cmp	r3, #8
 80073e2:	d124      	bne.n	800742e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	2208      	movs	r2, #8
 80073ec:	4013      	ands	r3, r2
 80073ee:	2b08      	cmp	r3, #8
 80073f0:	d11d      	bne.n	800742e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2209      	movs	r2, #9
 80073f8:	4252      	negs	r2, r2
 80073fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2204      	movs	r2, #4
 8007400:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	2203      	movs	r2, #3
 800740a:	4013      	ands	r3, r2
 800740c:	d004      	beq.n	8007418 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	0018      	movs	r0, r3
 8007412:	f000 f8f9 	bl	8007608 <HAL_TIM_IC_CaptureCallback>
 8007416:	e007      	b.n	8007428 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	0018      	movs	r0, r3
 800741c:	f000 f8ec 	bl	80075f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	0018      	movs	r0, r3
 8007424:	f000 f8f8 	bl	8007618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	2210      	movs	r2, #16
 8007436:	4013      	ands	r3, r2
 8007438:	2b10      	cmp	r3, #16
 800743a:	d125      	bne.n	8007488 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	2210      	movs	r2, #16
 8007444:	4013      	ands	r3, r2
 8007446:	2b10      	cmp	r3, #16
 8007448:	d11e      	bne.n	8007488 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2211      	movs	r2, #17
 8007450:	4252      	negs	r2, r2
 8007452:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2208      	movs	r2, #8
 8007458:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	69da      	ldr	r2, [r3, #28]
 8007460:	23c0      	movs	r3, #192	; 0xc0
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4013      	ands	r3, r2
 8007466:	d004      	beq.n	8007472 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	0018      	movs	r0, r3
 800746c:	f000 f8cc 	bl	8007608 <HAL_TIM_IC_CaptureCallback>
 8007470:	e007      	b.n	8007482 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	0018      	movs	r0, r3
 8007476:	f000 f8bf 	bl	80075f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	0018      	movs	r0, r3
 800747e:	f000 f8cb 	bl	8007618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	2201      	movs	r2, #1
 8007490:	4013      	ands	r3, r2
 8007492:	2b01      	cmp	r3, #1
 8007494:	d10f      	bne.n	80074b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	2201      	movs	r2, #1
 800749e:	4013      	ands	r3, r2
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d108      	bne.n	80074b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2202      	movs	r2, #2
 80074aa:	4252      	negs	r2, r2
 80074ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	0018      	movs	r0, r3
 80074b2:	f7f9 fe05 	bl	80010c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	2280      	movs	r2, #128	; 0x80
 80074be:	4013      	ands	r3, r2
 80074c0:	2b80      	cmp	r3, #128	; 0x80
 80074c2:	d10f      	bne.n	80074e4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	2280      	movs	r2, #128	; 0x80
 80074cc:	4013      	ands	r3, r2
 80074ce:	2b80      	cmp	r3, #128	; 0x80
 80074d0:	d108      	bne.n	80074e4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2281      	movs	r2, #129	; 0x81
 80074d8:	4252      	negs	r2, r2
 80074da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	0018      	movs	r0, r3
 80074e0:	f000 fb2e 	bl	8007b40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	2240      	movs	r2, #64	; 0x40
 80074ec:	4013      	ands	r3, r2
 80074ee:	2b40      	cmp	r3, #64	; 0x40
 80074f0:	d10f      	bne.n	8007512 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	2240      	movs	r2, #64	; 0x40
 80074fa:	4013      	ands	r3, r2
 80074fc:	2b40      	cmp	r3, #64	; 0x40
 80074fe:	d108      	bne.n	8007512 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2241      	movs	r2, #65	; 0x41
 8007506:	4252      	negs	r2, r2
 8007508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	0018      	movs	r0, r3
 800750e:	f000 f88b 	bl	8007628 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	2220      	movs	r2, #32
 800751a:	4013      	ands	r3, r2
 800751c:	2b20      	cmp	r3, #32
 800751e:	d10f      	bne.n	8007540 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	2220      	movs	r2, #32
 8007528:	4013      	ands	r3, r2
 800752a:	2b20      	cmp	r3, #32
 800752c:	d108      	bne.n	8007540 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2221      	movs	r2, #33	; 0x21
 8007534:	4252      	negs	r2, r2
 8007536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	0018      	movs	r0, r3
 800753c:	f000 faf8 	bl	8007b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007540:	46c0      	nop			; (mov r8, r8)
 8007542:	46bd      	mov	sp, r7
 8007544:	b002      	add	sp, #8
 8007546:	bd80      	pop	{r7, pc}

08007548 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007554:	2317      	movs	r3, #23
 8007556:	18fb      	adds	r3, r7, r3
 8007558:	2200      	movs	r2, #0
 800755a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	223c      	movs	r2, #60	; 0x3c
 8007560:	5c9b      	ldrb	r3, [r3, r2]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d101      	bne.n	800756a <HAL_TIM_OC_ConfigChannel+0x22>
 8007566:	2302      	movs	r3, #2
 8007568:	e042      	b.n	80075f0 <HAL_TIM_OC_ConfigChannel+0xa8>
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	223c      	movs	r2, #60	; 0x3c
 800756e:	2101      	movs	r1, #1
 8007570:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b0c      	cmp	r3, #12
 8007576:	d027      	beq.n	80075c8 <HAL_TIM_OC_ConfigChannel+0x80>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b0c      	cmp	r3, #12
 800757c:	d82c      	bhi.n	80075d8 <HAL_TIM_OC_ConfigChannel+0x90>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2b08      	cmp	r3, #8
 8007582:	d019      	beq.n	80075b8 <HAL_TIM_OC_ConfigChannel+0x70>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2b08      	cmp	r3, #8
 8007588:	d826      	bhi.n	80075d8 <HAL_TIM_OC_ConfigChannel+0x90>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <HAL_TIM_OC_ConfigChannel+0x50>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b04      	cmp	r3, #4
 8007594:	d008      	beq.n	80075a8 <HAL_TIM_OC_ConfigChannel+0x60>
 8007596:	e01f      	b.n	80075d8 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	0011      	movs	r1, r2
 80075a0:	0018      	movs	r0, r3
 80075a2:	f000 f8c9 	bl	8007738 <TIM_OC1_SetConfig>
      break;
 80075a6:	e01c      	b.n	80075e2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	0011      	movs	r1, r2
 80075b0:	0018      	movs	r0, r3
 80075b2:	f000 f949 	bl	8007848 <TIM_OC2_SetConfig>
      break;
 80075b6:	e014      	b.n	80075e2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	0011      	movs	r1, r2
 80075c0:	0018      	movs	r0, r3
 80075c2:	f000 f9c5 	bl	8007950 <TIM_OC3_SetConfig>
      break;
 80075c6:	e00c      	b.n	80075e2 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	0011      	movs	r1, r2
 80075d0:	0018      	movs	r0, r3
 80075d2:	f000 fa43 	bl	8007a5c <TIM_OC4_SetConfig>
      break;
 80075d6:	e004      	b.n	80075e2 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 80075d8:	2317      	movs	r3, #23
 80075da:	18fb      	adds	r3, r7, r3
 80075dc:	2201      	movs	r2, #1
 80075de:	701a      	strb	r2, [r3, #0]
      break;
 80075e0:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	223c      	movs	r2, #60	; 0x3c
 80075e6:	2100      	movs	r1, #0
 80075e8:	5499      	strb	r1, [r3, r2]

  return status;
 80075ea:	2317      	movs	r3, #23
 80075ec:	18fb      	adds	r3, r7, r3
 80075ee:	781b      	ldrb	r3, [r3, #0]
}
 80075f0:	0018      	movs	r0, r3
 80075f2:	46bd      	mov	sp, r7
 80075f4:	b006      	add	sp, #24
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007600:	46c0      	nop			; (mov r8, r8)
 8007602:	46bd      	mov	sp, r7
 8007604:	b002      	add	sp, #8
 8007606:	bd80      	pop	{r7, pc}

08007608 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007610:	46c0      	nop			; (mov r8, r8)
 8007612:	46bd      	mov	sp, r7
 8007614:	b002      	add	sp, #8
 8007616:	bd80      	pop	{r7, pc}

08007618 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007620:	46c0      	nop			; (mov r8, r8)
 8007622:	46bd      	mov	sp, r7
 8007624:	b002      	add	sp, #8
 8007626:	bd80      	pop	{r7, pc}

08007628 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007630:	46c0      	nop			; (mov r8, r8)
 8007632:	46bd      	mov	sp, r7
 8007634:	b002      	add	sp, #8
 8007636:	bd80      	pop	{r7, pc}

08007638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a34      	ldr	r2, [pc, #208]	; (800771c <TIM_Base_SetConfig+0xe4>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d008      	beq.n	8007662 <TIM_Base_SetConfig+0x2a>
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	2380      	movs	r3, #128	; 0x80
 8007654:	05db      	lsls	r3, r3, #23
 8007656:	429a      	cmp	r2, r3
 8007658:	d003      	beq.n	8007662 <TIM_Base_SetConfig+0x2a>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a30      	ldr	r2, [pc, #192]	; (8007720 <TIM_Base_SetConfig+0xe8>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d108      	bne.n	8007674 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2270      	movs	r2, #112	; 0x70
 8007666:	4393      	bics	r3, r2
 8007668:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	4313      	orrs	r3, r2
 8007672:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	4a29      	ldr	r2, [pc, #164]	; (800771c <TIM_Base_SetConfig+0xe4>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d018      	beq.n	80076ae <TIM_Base_SetConfig+0x76>
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	2380      	movs	r3, #128	; 0x80
 8007680:	05db      	lsls	r3, r3, #23
 8007682:	429a      	cmp	r2, r3
 8007684:	d013      	beq.n	80076ae <TIM_Base_SetConfig+0x76>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a25      	ldr	r2, [pc, #148]	; (8007720 <TIM_Base_SetConfig+0xe8>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d00f      	beq.n	80076ae <TIM_Base_SetConfig+0x76>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a24      	ldr	r2, [pc, #144]	; (8007724 <TIM_Base_SetConfig+0xec>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d00b      	beq.n	80076ae <TIM_Base_SetConfig+0x76>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a23      	ldr	r2, [pc, #140]	; (8007728 <TIM_Base_SetConfig+0xf0>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d007      	beq.n	80076ae <TIM_Base_SetConfig+0x76>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a22      	ldr	r2, [pc, #136]	; (800772c <TIM_Base_SetConfig+0xf4>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d003      	beq.n	80076ae <TIM_Base_SetConfig+0x76>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a21      	ldr	r2, [pc, #132]	; (8007730 <TIM_Base_SetConfig+0xf8>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d108      	bne.n	80076c0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	4a20      	ldr	r2, [pc, #128]	; (8007734 <TIM_Base_SetConfig+0xfc>)
 80076b2:	4013      	ands	r3, r2
 80076b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	4313      	orrs	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2280      	movs	r2, #128	; 0x80
 80076c4:	4393      	bics	r3, r2
 80076c6:	001a      	movs	r2, r3
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	689a      	ldr	r2, [r3, #8]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a0c      	ldr	r2, [pc, #48]	; (800771c <TIM_Base_SetConfig+0xe4>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d00b      	beq.n	8007706 <TIM_Base_SetConfig+0xce>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a0d      	ldr	r2, [pc, #52]	; (8007728 <TIM_Base_SetConfig+0xf0>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d007      	beq.n	8007706 <TIM_Base_SetConfig+0xce>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4a0c      	ldr	r2, [pc, #48]	; (800772c <TIM_Base_SetConfig+0xf4>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d003      	beq.n	8007706 <TIM_Base_SetConfig+0xce>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a0b      	ldr	r2, [pc, #44]	; (8007730 <TIM_Base_SetConfig+0xf8>)
 8007702:	4293      	cmp	r3, r2
 8007704:	d103      	bne.n	800770e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	691a      	ldr	r2, [r3, #16]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	615a      	str	r2, [r3, #20]
}
 8007714:	46c0      	nop			; (mov r8, r8)
 8007716:	46bd      	mov	sp, r7
 8007718:	b004      	add	sp, #16
 800771a:	bd80      	pop	{r7, pc}
 800771c:	40012c00 	.word	0x40012c00
 8007720:	40000400 	.word	0x40000400
 8007724:	40002000 	.word	0x40002000
 8007728:	40014000 	.word	0x40014000
 800772c:	40014400 	.word	0x40014400
 8007730:	40014800 	.word	0x40014800
 8007734:	fffffcff 	.word	0xfffffcff

08007738 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a1b      	ldr	r3, [r3, #32]
 8007746:	2201      	movs	r2, #1
 8007748:	4393      	bics	r3, r2
 800774a:	001a      	movs	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a1b      	ldr	r3, [r3, #32]
 8007754:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2270      	movs	r2, #112	; 0x70
 8007766:	4393      	bics	r3, r2
 8007768:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2203      	movs	r2, #3
 800776e:	4393      	bics	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	4313      	orrs	r3, r2
 800777a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	2202      	movs	r2, #2
 8007780:	4393      	bics	r3, r2
 8007782:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	697a      	ldr	r2, [r7, #20]
 800778a:	4313      	orrs	r3, r2
 800778c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a27      	ldr	r2, [pc, #156]	; (8007830 <TIM_OC1_SetConfig+0xf8>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d00b      	beq.n	80077ae <TIM_OC1_SetConfig+0x76>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a26      	ldr	r2, [pc, #152]	; (8007834 <TIM_OC1_SetConfig+0xfc>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d007      	beq.n	80077ae <TIM_OC1_SetConfig+0x76>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a25      	ldr	r2, [pc, #148]	; (8007838 <TIM_OC1_SetConfig+0x100>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d003      	beq.n	80077ae <TIM_OC1_SetConfig+0x76>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a24      	ldr	r2, [pc, #144]	; (800783c <TIM_OC1_SetConfig+0x104>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d10c      	bne.n	80077c8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	2208      	movs	r2, #8
 80077b2:	4393      	bics	r3, r2
 80077b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	4313      	orrs	r3, r2
 80077be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	2204      	movs	r2, #4
 80077c4:	4393      	bics	r3, r2
 80077c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a19      	ldr	r2, [pc, #100]	; (8007830 <TIM_OC1_SetConfig+0xf8>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d00b      	beq.n	80077e8 <TIM_OC1_SetConfig+0xb0>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a18      	ldr	r2, [pc, #96]	; (8007834 <TIM_OC1_SetConfig+0xfc>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d007      	beq.n	80077e8 <TIM_OC1_SetConfig+0xb0>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a17      	ldr	r2, [pc, #92]	; (8007838 <TIM_OC1_SetConfig+0x100>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d003      	beq.n	80077e8 <TIM_OC1_SetConfig+0xb0>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a16      	ldr	r2, [pc, #88]	; (800783c <TIM_OC1_SetConfig+0x104>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d111      	bne.n	800780c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	4a15      	ldr	r2, [pc, #84]	; (8007840 <TIM_OC1_SetConfig+0x108>)
 80077ec:	4013      	ands	r3, r2
 80077ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	4a14      	ldr	r2, [pc, #80]	; (8007844 <TIM_OC1_SetConfig+0x10c>)
 80077f4:	4013      	ands	r3, r2
 80077f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	695b      	ldr	r3, [r3, #20]
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	4313      	orrs	r3, r2
 8007800:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	699b      	ldr	r3, [r3, #24]
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	4313      	orrs	r3, r2
 800780a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	621a      	str	r2, [r3, #32]
}
 8007826:	46c0      	nop			; (mov r8, r8)
 8007828:	46bd      	mov	sp, r7
 800782a:	b006      	add	sp, #24
 800782c:	bd80      	pop	{r7, pc}
 800782e:	46c0      	nop			; (mov r8, r8)
 8007830:	40012c00 	.word	0x40012c00
 8007834:	40014000 	.word	0x40014000
 8007838:	40014400 	.word	0x40014400
 800783c:	40014800 	.word	0x40014800
 8007840:	fffffeff 	.word	0xfffffeff
 8007844:	fffffdff 	.word	0xfffffdff

08007848 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b086      	sub	sp, #24
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	2210      	movs	r2, #16
 8007858:	4393      	bics	r3, r2
 800785a:	001a      	movs	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a1b      	ldr	r3, [r3, #32]
 8007864:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	4a2e      	ldr	r2, [pc, #184]	; (8007930 <TIM_OC2_SetConfig+0xe8>)
 8007876:	4013      	ands	r3, r2
 8007878:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	4a2d      	ldr	r2, [pc, #180]	; (8007934 <TIM_OC2_SetConfig+0xec>)
 800787e:	4013      	ands	r3, r2
 8007880:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	021b      	lsls	r3, r3, #8
 8007888:	68fa      	ldr	r2, [r7, #12]
 800788a:	4313      	orrs	r3, r2
 800788c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	2220      	movs	r2, #32
 8007892:	4393      	bics	r3, r2
 8007894:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	011b      	lsls	r3, r3, #4
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	4313      	orrs	r3, r2
 80078a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a24      	ldr	r2, [pc, #144]	; (8007938 <TIM_OC2_SetConfig+0xf0>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d10d      	bne.n	80078c6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	2280      	movs	r2, #128	; 0x80
 80078ae:	4393      	bics	r3, r2
 80078b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	011b      	lsls	r3, r3, #4
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	2240      	movs	r2, #64	; 0x40
 80078c2:	4393      	bics	r3, r2
 80078c4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a1b      	ldr	r2, [pc, #108]	; (8007938 <TIM_OC2_SetConfig+0xf0>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d00b      	beq.n	80078e6 <TIM_OC2_SetConfig+0x9e>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a1a      	ldr	r2, [pc, #104]	; (800793c <TIM_OC2_SetConfig+0xf4>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d007      	beq.n	80078e6 <TIM_OC2_SetConfig+0x9e>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a19      	ldr	r2, [pc, #100]	; (8007940 <TIM_OC2_SetConfig+0xf8>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d003      	beq.n	80078e6 <TIM_OC2_SetConfig+0x9e>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a18      	ldr	r2, [pc, #96]	; (8007944 <TIM_OC2_SetConfig+0xfc>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d113      	bne.n	800790e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	4a17      	ldr	r2, [pc, #92]	; (8007948 <TIM_OC2_SetConfig+0x100>)
 80078ea:	4013      	ands	r3, r2
 80078ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	4a16      	ldr	r2, [pc, #88]	; (800794c <TIM_OC2_SetConfig+0x104>)
 80078f2:	4013      	ands	r3, r2
 80078f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	4313      	orrs	r3, r2
 8007900:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	699b      	ldr	r3, [r3, #24]
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	693a      	ldr	r2, [r7, #16]
 800790a:	4313      	orrs	r3, r2
 800790c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	621a      	str	r2, [r3, #32]
}
 8007928:	46c0      	nop			; (mov r8, r8)
 800792a:	46bd      	mov	sp, r7
 800792c:	b006      	add	sp, #24
 800792e:	bd80      	pop	{r7, pc}
 8007930:	ffff8fff 	.word	0xffff8fff
 8007934:	fffffcff 	.word	0xfffffcff
 8007938:	40012c00 	.word	0x40012c00
 800793c:	40014000 	.word	0x40014000
 8007940:	40014400 	.word	0x40014400
 8007944:	40014800 	.word	0x40014800
 8007948:	fffffbff 	.word	0xfffffbff
 800794c:	fffff7ff 	.word	0xfffff7ff

08007950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	4a35      	ldr	r2, [pc, #212]	; (8007a34 <TIM_OC3_SetConfig+0xe4>)
 8007960:	401a      	ands	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	69db      	ldr	r3, [r3, #28]
 8007976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2270      	movs	r2, #112	; 0x70
 800797c:	4393      	bics	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2203      	movs	r2, #3
 8007984:	4393      	bics	r3, r2
 8007986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	4313      	orrs	r3, r2
 8007990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	4a28      	ldr	r2, [pc, #160]	; (8007a38 <TIM_OC3_SetConfig+0xe8>)
 8007996:	4013      	ands	r3, r2
 8007998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	021b      	lsls	r3, r3, #8
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a24      	ldr	r2, [pc, #144]	; (8007a3c <TIM_OC3_SetConfig+0xec>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d10d      	bne.n	80079ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	4a23      	ldr	r2, [pc, #140]	; (8007a40 <TIM_OC3_SetConfig+0xf0>)
 80079b2:	4013      	ands	r3, r2
 80079b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	021b      	lsls	r3, r3, #8
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	4313      	orrs	r3, r2
 80079c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	4a1f      	ldr	r2, [pc, #124]	; (8007a44 <TIM_OC3_SetConfig+0xf4>)
 80079c6:	4013      	ands	r3, r2
 80079c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a1b      	ldr	r2, [pc, #108]	; (8007a3c <TIM_OC3_SetConfig+0xec>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d00b      	beq.n	80079ea <TIM_OC3_SetConfig+0x9a>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a1c      	ldr	r2, [pc, #112]	; (8007a48 <TIM_OC3_SetConfig+0xf8>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d007      	beq.n	80079ea <TIM_OC3_SetConfig+0x9a>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a1b      	ldr	r2, [pc, #108]	; (8007a4c <TIM_OC3_SetConfig+0xfc>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d003      	beq.n	80079ea <TIM_OC3_SetConfig+0x9a>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a1a      	ldr	r2, [pc, #104]	; (8007a50 <TIM_OC3_SetConfig+0x100>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d113      	bne.n	8007a12 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	4a19      	ldr	r2, [pc, #100]	; (8007a54 <TIM_OC3_SetConfig+0x104>)
 80079ee:	4013      	ands	r3, r2
 80079f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	4a18      	ldr	r2, [pc, #96]	; (8007a58 <TIM_OC3_SetConfig+0x108>)
 80079f6:	4013      	ands	r3, r2
 80079f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	011b      	lsls	r3, r3, #4
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	011b      	lsls	r3, r3, #4
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	621a      	str	r2, [r3, #32]
}
 8007a2c:	46c0      	nop			; (mov r8, r8)
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	b006      	add	sp, #24
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	fffffeff 	.word	0xfffffeff
 8007a38:	fffffdff 	.word	0xfffffdff
 8007a3c:	40012c00 	.word	0x40012c00
 8007a40:	fffff7ff 	.word	0xfffff7ff
 8007a44:	fffffbff 	.word	0xfffffbff
 8007a48:	40014000 	.word	0x40014000
 8007a4c:	40014400 	.word	0x40014400
 8007a50:	40014800 	.word	0x40014800
 8007a54:	ffffefff 	.word	0xffffefff
 8007a58:	ffffdfff 	.word	0xffffdfff

08007a5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	4a28      	ldr	r2, [pc, #160]	; (8007b0c <TIM_OC4_SetConfig+0xb0>)
 8007a6c:	401a      	ands	r2, r3
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a1b      	ldr	r3, [r3, #32]
 8007a76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	69db      	ldr	r3, [r3, #28]
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4a22      	ldr	r2, [pc, #136]	; (8007b10 <TIM_OC4_SetConfig+0xb4>)
 8007a88:	4013      	ands	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	4a21      	ldr	r2, [pc, #132]	; (8007b14 <TIM_OC4_SetConfig+0xb8>)
 8007a90:	4013      	ands	r3, r2
 8007a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	021b      	lsls	r3, r3, #8
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	4a1d      	ldr	r2, [pc, #116]	; (8007b18 <TIM_OC4_SetConfig+0xbc>)
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	031b      	lsls	r3, r3, #12
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a19      	ldr	r2, [pc, #100]	; (8007b1c <TIM_OC4_SetConfig+0xc0>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d00b      	beq.n	8007ad4 <TIM_OC4_SetConfig+0x78>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a18      	ldr	r2, [pc, #96]	; (8007b20 <TIM_OC4_SetConfig+0xc4>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d007      	beq.n	8007ad4 <TIM_OC4_SetConfig+0x78>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a17      	ldr	r2, [pc, #92]	; (8007b24 <TIM_OC4_SetConfig+0xc8>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d003      	beq.n	8007ad4 <TIM_OC4_SetConfig+0x78>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a16      	ldr	r2, [pc, #88]	; (8007b28 <TIM_OC4_SetConfig+0xcc>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d109      	bne.n	8007ae8 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	4a15      	ldr	r2, [pc, #84]	; (8007b2c <TIM_OC4_SetConfig+0xd0>)
 8007ad8:	4013      	ands	r3, r2
 8007ada:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	695b      	ldr	r3, [r3, #20]
 8007ae0:	019b      	lsls	r3, r3, #6
 8007ae2:	697a      	ldr	r2, [r7, #20]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	621a      	str	r2, [r3, #32]
}
 8007b02:	46c0      	nop			; (mov r8, r8)
 8007b04:	46bd      	mov	sp, r7
 8007b06:	b006      	add	sp, #24
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	46c0      	nop			; (mov r8, r8)
 8007b0c:	ffffefff 	.word	0xffffefff
 8007b10:	ffff8fff 	.word	0xffff8fff
 8007b14:	fffffcff 	.word	0xfffffcff
 8007b18:	ffffdfff 	.word	0xffffdfff
 8007b1c:	40012c00 	.word	0x40012c00
 8007b20:	40014000 	.word	0x40014000
 8007b24:	40014400 	.word	0x40014400
 8007b28:	40014800 	.word	0x40014800
 8007b2c:	ffffbfff 	.word	0xffffbfff

08007b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b38:	46c0      	nop			; (mov r8, r8)
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	b002      	add	sp, #8
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b48:	46c0      	nop			; (mov r8, r8)
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	b002      	add	sp, #8
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d101      	bne.n	8007b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e044      	b.n	8007bec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d107      	bne.n	8007b7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2274      	movs	r2, #116	; 0x74
 8007b6e:	2100      	movs	r1, #0
 8007b70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	0018      	movs	r0, r3
 8007b76:	f7fa fc99 	bl	80024ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2224      	movs	r2, #36	; 0x24
 8007b7e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	438a      	bics	r2, r1
 8007b8e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	0018      	movs	r0, r3
 8007b94:	f000 fb24 	bl	80081e0 <UART_SetConfig>
 8007b98:	0003      	movs	r3, r0
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d101      	bne.n	8007ba2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e024      	b.n	8007bec <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	0018      	movs	r0, r3
 8007bae:	f000 fc9f 	bl	80084f0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	685a      	ldr	r2, [r3, #4]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	490d      	ldr	r1, [pc, #52]	; (8007bf4 <HAL_UART_Init+0xa4>)
 8007bbe:	400a      	ands	r2, r1
 8007bc0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	689a      	ldr	r2, [r3, #8]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	212a      	movs	r1, #42	; 0x2a
 8007bce:	438a      	bics	r2, r1
 8007bd0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2101      	movs	r1, #1
 8007bde:	430a      	orrs	r2, r1
 8007be0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	0018      	movs	r0, r3
 8007be6:	f000 fd37 	bl	8008658 <UART_CheckIdleState>
 8007bea:	0003      	movs	r3, r0
}
 8007bec:	0018      	movs	r0, r3
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	b002      	add	sp, #8
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	ffffb7ff 	.word	0xffffb7ff

08007bf8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007bf8:	b590      	push	{r4, r7, lr}
 8007bfa:	b0ab      	sub	sp, #172	; 0xac
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	69db      	ldr	r3, [r3, #28]
 8007c06:	22a4      	movs	r2, #164	; 0xa4
 8007c08:	18b9      	adds	r1, r7, r2
 8007c0a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	20a0      	movs	r0, #160	; 0xa0
 8007c14:	1839      	adds	r1, r7, r0
 8007c16:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	219c      	movs	r1, #156	; 0x9c
 8007c20:	1879      	adds	r1, r7, r1
 8007c22:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007c24:	0011      	movs	r1, r2
 8007c26:	18bb      	adds	r3, r7, r2
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a99      	ldr	r2, [pc, #612]	; (8007e90 <HAL_UART_IRQHandler+0x298>)
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	2298      	movs	r2, #152	; 0x98
 8007c30:	18bc      	adds	r4, r7, r2
 8007c32:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8007c34:	18bb      	adds	r3, r7, r2
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d114      	bne.n	8007c66 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007c3c:	187b      	adds	r3, r7, r1
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2220      	movs	r2, #32
 8007c42:	4013      	ands	r3, r2
 8007c44:	d00f      	beq.n	8007c66 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007c46:	183b      	adds	r3, r7, r0
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	d00a      	beq.n	8007c66 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d100      	bne.n	8007c5a <HAL_UART_IRQHandler+0x62>
 8007c58:	e296      	b.n	8008188 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	0010      	movs	r0, r2
 8007c62:	4798      	blx	r3
      }
      return;
 8007c64:	e290      	b.n	8008188 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007c66:	2398      	movs	r3, #152	; 0x98
 8007c68:	18fb      	adds	r3, r7, r3
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d100      	bne.n	8007c72 <HAL_UART_IRQHandler+0x7a>
 8007c70:	e114      	b.n	8007e9c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007c72:	239c      	movs	r3, #156	; 0x9c
 8007c74:	18fb      	adds	r3, r7, r3
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	d106      	bne.n	8007c8c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007c7e:	23a0      	movs	r3, #160	; 0xa0
 8007c80:	18fb      	adds	r3, r7, r3
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a83      	ldr	r2, [pc, #524]	; (8007e94 <HAL_UART_IRQHandler+0x29c>)
 8007c86:	4013      	ands	r3, r2
 8007c88:	d100      	bne.n	8007c8c <HAL_UART_IRQHandler+0x94>
 8007c8a:	e107      	b.n	8007e9c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c8c:	23a4      	movs	r3, #164	; 0xa4
 8007c8e:	18fb      	adds	r3, r7, r3
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2201      	movs	r2, #1
 8007c94:	4013      	ands	r3, r2
 8007c96:	d012      	beq.n	8007cbe <HAL_UART_IRQHandler+0xc6>
 8007c98:	23a0      	movs	r3, #160	; 0xa0
 8007c9a:	18fb      	adds	r3, r7, r3
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	2380      	movs	r3, #128	; 0x80
 8007ca0:	005b      	lsls	r3, r3, #1
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	d00b      	beq.n	8007cbe <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2201      	movs	r2, #1
 8007cac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2280      	movs	r2, #128	; 0x80
 8007cb2:	589b      	ldr	r3, [r3, r2]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	431a      	orrs	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2180      	movs	r1, #128	; 0x80
 8007cbc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cbe:	23a4      	movs	r3, #164	; 0xa4
 8007cc0:	18fb      	adds	r3, r7, r3
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	d011      	beq.n	8007cee <HAL_UART_IRQHandler+0xf6>
 8007cca:	239c      	movs	r3, #156	; 0x9c
 8007ccc:	18fb      	adds	r3, r7, r3
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	d00b      	beq.n	8007cee <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2280      	movs	r2, #128	; 0x80
 8007ce2:	589b      	ldr	r3, [r3, r2]
 8007ce4:	2204      	movs	r2, #4
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2180      	movs	r1, #128	; 0x80
 8007cec:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cee:	23a4      	movs	r3, #164	; 0xa4
 8007cf0:	18fb      	adds	r3, r7, r3
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2204      	movs	r2, #4
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	d011      	beq.n	8007d1e <HAL_UART_IRQHandler+0x126>
 8007cfa:	239c      	movs	r3, #156	; 0x9c
 8007cfc:	18fb      	adds	r3, r7, r3
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2201      	movs	r2, #1
 8007d02:	4013      	ands	r3, r2
 8007d04:	d00b      	beq.n	8007d1e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2204      	movs	r2, #4
 8007d0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2280      	movs	r2, #128	; 0x80
 8007d12:	589b      	ldr	r3, [r3, r2]
 8007d14:	2202      	movs	r2, #2
 8007d16:	431a      	orrs	r2, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2180      	movs	r1, #128	; 0x80
 8007d1c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007d1e:	23a4      	movs	r3, #164	; 0xa4
 8007d20:	18fb      	adds	r3, r7, r3
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2208      	movs	r2, #8
 8007d26:	4013      	ands	r3, r2
 8007d28:	d017      	beq.n	8007d5a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007d2a:	23a0      	movs	r3, #160	; 0xa0
 8007d2c:	18fb      	adds	r3, r7, r3
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2220      	movs	r2, #32
 8007d32:	4013      	ands	r3, r2
 8007d34:	d105      	bne.n	8007d42 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007d36:	239c      	movs	r3, #156	; 0x9c
 8007d38:	18fb      	adds	r3, r7, r3
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007d40:	d00b      	beq.n	8007d5a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2208      	movs	r2, #8
 8007d48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2280      	movs	r2, #128	; 0x80
 8007d4e:	589b      	ldr	r3, [r3, r2]
 8007d50:	2208      	movs	r2, #8
 8007d52:	431a      	orrs	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2180      	movs	r1, #128	; 0x80
 8007d58:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007d5a:	23a4      	movs	r3, #164	; 0xa4
 8007d5c:	18fb      	adds	r3, r7, r3
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	2380      	movs	r3, #128	; 0x80
 8007d62:	011b      	lsls	r3, r3, #4
 8007d64:	4013      	ands	r3, r2
 8007d66:	d013      	beq.n	8007d90 <HAL_UART_IRQHandler+0x198>
 8007d68:	23a0      	movs	r3, #160	; 0xa0
 8007d6a:	18fb      	adds	r3, r7, r3
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	2380      	movs	r3, #128	; 0x80
 8007d70:	04db      	lsls	r3, r3, #19
 8007d72:	4013      	ands	r3, r2
 8007d74:	d00c      	beq.n	8007d90 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2280      	movs	r2, #128	; 0x80
 8007d7c:	0112      	lsls	r2, r2, #4
 8007d7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2280      	movs	r2, #128	; 0x80
 8007d84:	589b      	ldr	r3, [r3, r2]
 8007d86:	2220      	movs	r2, #32
 8007d88:	431a      	orrs	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2180      	movs	r1, #128	; 0x80
 8007d8e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2280      	movs	r2, #128	; 0x80
 8007d94:	589b      	ldr	r3, [r3, r2]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d100      	bne.n	8007d9c <HAL_UART_IRQHandler+0x1a4>
 8007d9a:	e1f7      	b.n	800818c <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007d9c:	23a4      	movs	r3, #164	; 0xa4
 8007d9e:	18fb      	adds	r3, r7, r3
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2220      	movs	r2, #32
 8007da4:	4013      	ands	r3, r2
 8007da6:	d00e      	beq.n	8007dc6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007da8:	23a0      	movs	r3, #160	; 0xa0
 8007daa:	18fb      	adds	r3, r7, r3
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2220      	movs	r2, #32
 8007db0:	4013      	ands	r3, r2
 8007db2:	d008      	beq.n	8007dc6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d004      	beq.n	8007dc6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	0010      	movs	r0, r2
 8007dc4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2280      	movs	r2, #128	; 0x80
 8007dca:	589b      	ldr	r3, [r3, r2]
 8007dcc:	2194      	movs	r1, #148	; 0x94
 8007dce:	187a      	adds	r2, r7, r1
 8007dd0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	2240      	movs	r2, #64	; 0x40
 8007dda:	4013      	ands	r3, r2
 8007ddc:	2b40      	cmp	r3, #64	; 0x40
 8007dde:	d004      	beq.n	8007dea <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007de0:	187b      	adds	r3, r7, r1
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2228      	movs	r2, #40	; 0x28
 8007de6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007de8:	d047      	beq.n	8007e7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	0018      	movs	r0, r3
 8007dee:	f000 fd3f 	bl	8008870 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	2240      	movs	r2, #64	; 0x40
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	2b40      	cmp	r3, #64	; 0x40
 8007dfe:	d137      	bne.n	8007e70 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e00:	f3ef 8310 	mrs	r3, PRIMASK
 8007e04:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007e06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e08:	2090      	movs	r0, #144	; 0x90
 8007e0a:	183a      	adds	r2, r7, r0
 8007e0c:	6013      	str	r3, [r2, #0]
 8007e0e:	2301      	movs	r3, #1
 8007e10:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e14:	f383 8810 	msr	PRIMASK, r3
}
 8007e18:	46c0      	nop			; (mov r8, r8)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	689a      	ldr	r2, [r3, #8]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2140      	movs	r1, #64	; 0x40
 8007e26:	438a      	bics	r2, r1
 8007e28:	609a      	str	r2, [r3, #8]
 8007e2a:	183b      	adds	r3, r7, r0
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e32:	f383 8810 	msr	PRIMASK, r3
}
 8007e36:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d012      	beq.n	8007e66 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e44:	4a14      	ldr	r2, [pc, #80]	; (8007e98 <HAL_UART_IRQHandler+0x2a0>)
 8007e46:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e4c:	0018      	movs	r0, r3
 8007e4e:	f7fb fd71 	bl	8003934 <HAL_DMA_Abort_IT>
 8007e52:	1e03      	subs	r3, r0, #0
 8007e54:	d01a      	beq.n	8007e8c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e60:	0018      	movs	r0, r3
 8007e62:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e64:	e012      	b.n	8007e8c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	0018      	movs	r0, r3
 8007e6a:	f000 f9a5 	bl	80081b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e6e:	e00d      	b.n	8007e8c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	0018      	movs	r0, r3
 8007e74:	f000 f9a0 	bl	80081b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e78:	e008      	b.n	8007e8c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	0018      	movs	r0, r3
 8007e7e:	f000 f99b 	bl	80081b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2280      	movs	r2, #128	; 0x80
 8007e86:	2100      	movs	r1, #0
 8007e88:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007e8a:	e17f      	b.n	800818c <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e8c:	46c0      	nop			; (mov r8, r8)
    return;
 8007e8e:	e17d      	b.n	800818c <HAL_UART_IRQHandler+0x594>
 8007e90:	0000080f 	.word	0x0000080f
 8007e94:	04000120 	.word	0x04000120
 8007e98:	08008935 	.word	0x08008935

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d000      	beq.n	8007ea6 <HAL_UART_IRQHandler+0x2ae>
 8007ea4:	e131      	b.n	800810a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007ea6:	23a4      	movs	r3, #164	; 0xa4
 8007ea8:	18fb      	adds	r3, r7, r3
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	2210      	movs	r2, #16
 8007eae:	4013      	ands	r3, r2
 8007eb0:	d100      	bne.n	8007eb4 <HAL_UART_IRQHandler+0x2bc>
 8007eb2:	e12a      	b.n	800810a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007eb4:	23a0      	movs	r3, #160	; 0xa0
 8007eb6:	18fb      	adds	r3, r7, r3
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2210      	movs	r2, #16
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	d100      	bne.n	8007ec2 <HAL_UART_IRQHandler+0x2ca>
 8007ec0:	e123      	b.n	800810a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2210      	movs	r2, #16
 8007ec8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	2240      	movs	r2, #64	; 0x40
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	2b40      	cmp	r3, #64	; 0x40
 8007ed6:	d000      	beq.n	8007eda <HAL_UART_IRQHandler+0x2e2>
 8007ed8:	e09b      	b.n	8008012 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	685a      	ldr	r2, [r3, #4]
 8007ee2:	217e      	movs	r1, #126	; 0x7e
 8007ee4:	187b      	adds	r3, r7, r1
 8007ee6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007ee8:	187b      	adds	r3, r7, r1
 8007eea:	881b      	ldrh	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d100      	bne.n	8007ef2 <HAL_UART_IRQHandler+0x2fa>
 8007ef0:	e14e      	b.n	8008190 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2258      	movs	r2, #88	; 0x58
 8007ef6:	5a9b      	ldrh	r3, [r3, r2]
 8007ef8:	187a      	adds	r2, r7, r1
 8007efa:	8812      	ldrh	r2, [r2, #0]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d300      	bcc.n	8007f02 <HAL_UART_IRQHandler+0x30a>
 8007f00:	e146      	b.n	8008190 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	187a      	adds	r2, r7, r1
 8007f06:	215a      	movs	r1, #90	; 0x5a
 8007f08:	8812      	ldrh	r2, [r2, #0]
 8007f0a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	2b20      	cmp	r3, #32
 8007f14:	d06e      	beq.n	8007ff4 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f16:	f3ef 8310 	mrs	r3, PRIMASK
 8007f1a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f20:	2301      	movs	r3, #1
 8007f22:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f26:	f383 8810 	msr	PRIMASK, r3
}
 8007f2a:	46c0      	nop			; (mov r8, r8)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	499a      	ldr	r1, [pc, #616]	; (80081a0 <HAL_UART_IRQHandler+0x5a8>)
 8007f38:	400a      	ands	r2, r1
 8007f3a:	601a      	str	r2, [r3, #0]
 8007f3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f3e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f42:	f383 8810 	msr	PRIMASK, r3
}
 8007f46:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f48:	f3ef 8310 	mrs	r3, PRIMASK
 8007f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f50:	677b      	str	r3, [r7, #116]	; 0x74
 8007f52:	2301      	movs	r3, #1
 8007f54:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f58:	f383 8810 	msr	PRIMASK, r3
}
 8007f5c:	46c0      	nop			; (mov r8, r8)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	689a      	ldr	r2, [r3, #8]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2101      	movs	r1, #1
 8007f6a:	438a      	bics	r2, r1
 8007f6c:	609a      	str	r2, [r3, #8]
 8007f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f70:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f74:	f383 8810 	msr	PRIMASK, r3
}
 8007f78:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f7a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f7e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007f80:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f82:	673b      	str	r3, [r7, #112]	; 0x70
 8007f84:	2301      	movs	r3, #1
 8007f86:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f8a:	f383 8810 	msr	PRIMASK, r3
}
 8007f8e:	46c0      	nop			; (mov r8, r8)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	689a      	ldr	r2, [r3, #8]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2140      	movs	r1, #64	; 0x40
 8007f9c:	438a      	bics	r2, r1
 8007f9e:	609a      	str	r2, [r3, #8]
 8007fa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fa2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fa6:	f383 8810 	msr	PRIMASK, r3
}
 8007faa:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8007fbc:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007fbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fc0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fc8:	f383 8810 	msr	PRIMASK, r3
}
 8007fcc:	46c0      	nop			; (mov r8, r8)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2110      	movs	r1, #16
 8007fda:	438a      	bics	r2, r1
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fe4:	f383 8810 	msr	PRIMASK, r3
}
 8007fe8:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fee:	0018      	movs	r0, r3
 8007ff0:	f7fb fc68 	bl	80038c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2258      	movs	r2, #88	; 0x58
 8007ff8:	5a9a      	ldrh	r2, [r3, r2]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	215a      	movs	r1, #90	; 0x5a
 8007ffe:	5a5b      	ldrh	r3, [r3, r1]
 8008000:	b29b      	uxth	r3, r3
 8008002:	1ad3      	subs	r3, r2, r3
 8008004:	b29a      	uxth	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	0011      	movs	r1, r2
 800800a:	0018      	movs	r0, r3
 800800c:	f000 f8dc 	bl	80081c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008010:	e0be      	b.n	8008190 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2258      	movs	r2, #88	; 0x58
 8008016:	5a99      	ldrh	r1, [r3, r2]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	225a      	movs	r2, #90	; 0x5a
 800801c:	5a9b      	ldrh	r3, [r3, r2]
 800801e:	b29a      	uxth	r2, r3
 8008020:	208e      	movs	r0, #142	; 0x8e
 8008022:	183b      	adds	r3, r7, r0
 8008024:	1a8a      	subs	r2, r1, r2
 8008026:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	225a      	movs	r2, #90	; 0x5a
 800802c:	5a9b      	ldrh	r3, [r3, r2]
 800802e:	b29b      	uxth	r3, r3
 8008030:	2b00      	cmp	r3, #0
 8008032:	d100      	bne.n	8008036 <HAL_UART_IRQHandler+0x43e>
 8008034:	e0ae      	b.n	8008194 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8008036:	183b      	adds	r3, r7, r0
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d100      	bne.n	8008040 <HAL_UART_IRQHandler+0x448>
 800803e:	e0a9      	b.n	8008194 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008040:	f3ef 8310 	mrs	r3, PRIMASK
 8008044:	60fb      	str	r3, [r7, #12]
  return(result);
 8008046:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008048:	2488      	movs	r4, #136	; 0x88
 800804a:	193a      	adds	r2, r7, r4
 800804c:	6013      	str	r3, [r2, #0]
 800804e:	2301      	movs	r3, #1
 8008050:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	f383 8810 	msr	PRIMASK, r3
}
 8008058:	46c0      	nop			; (mov r8, r8)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	494f      	ldr	r1, [pc, #316]	; (80081a4 <HAL_UART_IRQHandler+0x5ac>)
 8008066:	400a      	ands	r2, r1
 8008068:	601a      	str	r2, [r3, #0]
 800806a:	193b      	adds	r3, r7, r4
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	f383 8810 	msr	PRIMASK, r3
}
 8008076:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008078:	f3ef 8310 	mrs	r3, PRIMASK
 800807c:	61bb      	str	r3, [r7, #24]
  return(result);
 800807e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008080:	2484      	movs	r4, #132	; 0x84
 8008082:	193a      	adds	r2, r7, r4
 8008084:	6013      	str	r3, [r2, #0]
 8008086:	2301      	movs	r3, #1
 8008088:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	f383 8810 	msr	PRIMASK, r3
}
 8008090:	46c0      	nop			; (mov r8, r8)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	689a      	ldr	r2, [r3, #8]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2101      	movs	r1, #1
 800809e:	438a      	bics	r2, r1
 80080a0:	609a      	str	r2, [r3, #8]
 80080a2:	193b      	adds	r3, r7, r4
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	f383 8810 	msr	PRIMASK, r3
}
 80080ae:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2220      	movs	r2, #32
 80080b4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080c2:	f3ef 8310 	mrs	r3, PRIMASK
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080ca:	2480      	movs	r4, #128	; 0x80
 80080cc:	193a      	adds	r2, r7, r4
 80080ce:	6013      	str	r3, [r2, #0]
 80080d0:	2301      	movs	r3, #1
 80080d2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d6:	f383 8810 	msr	PRIMASK, r3
}
 80080da:	46c0      	nop			; (mov r8, r8)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2110      	movs	r1, #16
 80080e8:	438a      	bics	r2, r1
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	193b      	adds	r3, r7, r4
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f4:	f383 8810 	msr	PRIMASK, r3
}
 80080f8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80080fa:	183b      	adds	r3, r7, r0
 80080fc:	881a      	ldrh	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	0011      	movs	r1, r2
 8008102:	0018      	movs	r0, r3
 8008104:	f000 f860 	bl	80081c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008108:	e044      	b.n	8008194 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800810a:	23a4      	movs	r3, #164	; 0xa4
 800810c:	18fb      	adds	r3, r7, r3
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	2380      	movs	r3, #128	; 0x80
 8008112:	035b      	lsls	r3, r3, #13
 8008114:	4013      	ands	r3, r2
 8008116:	d010      	beq.n	800813a <HAL_UART_IRQHandler+0x542>
 8008118:	239c      	movs	r3, #156	; 0x9c
 800811a:	18fb      	adds	r3, r7, r3
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	2380      	movs	r3, #128	; 0x80
 8008120:	03db      	lsls	r3, r3, #15
 8008122:	4013      	ands	r3, r2
 8008124:	d009      	beq.n	800813a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2280      	movs	r2, #128	; 0x80
 800812c:	0352      	lsls	r2, r2, #13
 800812e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	0018      	movs	r0, r3
 8008134:	f000 fc40 	bl	80089b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008138:	e02f      	b.n	800819a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800813a:	23a4      	movs	r3, #164	; 0xa4
 800813c:	18fb      	adds	r3, r7, r3
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2280      	movs	r2, #128	; 0x80
 8008142:	4013      	ands	r3, r2
 8008144:	d00f      	beq.n	8008166 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008146:	23a0      	movs	r3, #160	; 0xa0
 8008148:	18fb      	adds	r3, r7, r3
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2280      	movs	r2, #128	; 0x80
 800814e:	4013      	ands	r3, r2
 8008150:	d009      	beq.n	8008166 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008156:	2b00      	cmp	r3, #0
 8008158:	d01e      	beq.n	8008198 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	0010      	movs	r0, r2
 8008162:	4798      	blx	r3
    }
    return;
 8008164:	e018      	b.n	8008198 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008166:	23a4      	movs	r3, #164	; 0xa4
 8008168:	18fb      	adds	r3, r7, r3
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2240      	movs	r2, #64	; 0x40
 800816e:	4013      	ands	r3, r2
 8008170:	d013      	beq.n	800819a <HAL_UART_IRQHandler+0x5a2>
 8008172:	23a0      	movs	r3, #160	; 0xa0
 8008174:	18fb      	adds	r3, r7, r3
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2240      	movs	r2, #64	; 0x40
 800817a:	4013      	ands	r3, r2
 800817c:	d00d      	beq.n	800819a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	0018      	movs	r0, r3
 8008182:	f000 fbee 	bl	8008962 <UART_EndTransmit_IT>
    return;
 8008186:	e008      	b.n	800819a <HAL_UART_IRQHandler+0x5a2>
      return;
 8008188:	46c0      	nop			; (mov r8, r8)
 800818a:	e006      	b.n	800819a <HAL_UART_IRQHandler+0x5a2>
    return;
 800818c:	46c0      	nop			; (mov r8, r8)
 800818e:	e004      	b.n	800819a <HAL_UART_IRQHandler+0x5a2>
      return;
 8008190:	46c0      	nop			; (mov r8, r8)
 8008192:	e002      	b.n	800819a <HAL_UART_IRQHandler+0x5a2>
      return;
 8008194:	46c0      	nop			; (mov r8, r8)
 8008196:	e000      	b.n	800819a <HAL_UART_IRQHandler+0x5a2>
    return;
 8008198:	46c0      	nop			; (mov r8, r8)
  }

}
 800819a:	46bd      	mov	sp, r7
 800819c:	b02b      	add	sp, #172	; 0xac
 800819e:	bd90      	pop	{r4, r7, pc}
 80081a0:	fffffeff 	.word	0xfffffeff
 80081a4:	fffffedf 	.word	0xfffffedf

080081a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80081b0:	46c0      	nop			; (mov r8, r8)
 80081b2:	46bd      	mov	sp, r7
 80081b4:	b002      	add	sp, #8
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80081c0:	46c0      	nop			; (mov r8, r8)
 80081c2:	46bd      	mov	sp, r7
 80081c4:	b002      	add	sp, #8
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	000a      	movs	r2, r1
 80081d2:	1cbb      	adds	r3, r7, #2
 80081d4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081d6:	46c0      	nop			; (mov r8, r8)
 80081d8:	46bd      	mov	sp, r7
 80081da:	b002      	add	sp, #8
 80081dc:	bd80      	pop	{r7, pc}
	...

080081e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081e8:	231e      	movs	r3, #30
 80081ea:	18fb      	adds	r3, r7, r3
 80081ec:	2200      	movs	r2, #0
 80081ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	689a      	ldr	r2, [r3, #8]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	431a      	orrs	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	431a      	orrs	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	69db      	ldr	r3, [r3, #28]
 8008204:	4313      	orrs	r3, r2
 8008206:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4aaf      	ldr	r2, [pc, #700]	; (80084cc <UART_SetConfig+0x2ec>)
 8008210:	4013      	ands	r3, r2
 8008212:	0019      	movs	r1, r3
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	697a      	ldr	r2, [r7, #20]
 800821a:	430a      	orrs	r2, r1
 800821c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	4aaa      	ldr	r2, [pc, #680]	; (80084d0 <UART_SetConfig+0x2f0>)
 8008226:	4013      	ands	r3, r2
 8008228:	0019      	movs	r1, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	68da      	ldr	r2, [r3, #12]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	430a      	orrs	r2, r1
 8008234:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a1b      	ldr	r3, [r3, #32]
 8008240:	697a      	ldr	r2, [r7, #20]
 8008242:	4313      	orrs	r3, r2
 8008244:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	4aa1      	ldr	r2, [pc, #644]	; (80084d4 <UART_SetConfig+0x2f4>)
 800824e:	4013      	ands	r3, r2
 8008250:	0019      	movs	r1, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	430a      	orrs	r2, r1
 800825a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a9d      	ldr	r2, [pc, #628]	; (80084d8 <UART_SetConfig+0x2f8>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d127      	bne.n	80082b6 <UART_SetConfig+0xd6>
 8008266:	4b9d      	ldr	r3, [pc, #628]	; (80084dc <UART_SetConfig+0x2fc>)
 8008268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826a:	2203      	movs	r2, #3
 800826c:	4013      	ands	r3, r2
 800826e:	2b03      	cmp	r3, #3
 8008270:	d00d      	beq.n	800828e <UART_SetConfig+0xae>
 8008272:	d81b      	bhi.n	80082ac <UART_SetConfig+0xcc>
 8008274:	2b02      	cmp	r3, #2
 8008276:	d014      	beq.n	80082a2 <UART_SetConfig+0xc2>
 8008278:	d818      	bhi.n	80082ac <UART_SetConfig+0xcc>
 800827a:	2b00      	cmp	r3, #0
 800827c:	d002      	beq.n	8008284 <UART_SetConfig+0xa4>
 800827e:	2b01      	cmp	r3, #1
 8008280:	d00a      	beq.n	8008298 <UART_SetConfig+0xb8>
 8008282:	e013      	b.n	80082ac <UART_SetConfig+0xcc>
 8008284:	231f      	movs	r3, #31
 8008286:	18fb      	adds	r3, r7, r3
 8008288:	2200      	movs	r2, #0
 800828a:	701a      	strb	r2, [r3, #0]
 800828c:	e065      	b.n	800835a <UART_SetConfig+0x17a>
 800828e:	231f      	movs	r3, #31
 8008290:	18fb      	adds	r3, r7, r3
 8008292:	2202      	movs	r2, #2
 8008294:	701a      	strb	r2, [r3, #0]
 8008296:	e060      	b.n	800835a <UART_SetConfig+0x17a>
 8008298:	231f      	movs	r3, #31
 800829a:	18fb      	adds	r3, r7, r3
 800829c:	2204      	movs	r2, #4
 800829e:	701a      	strb	r2, [r3, #0]
 80082a0:	e05b      	b.n	800835a <UART_SetConfig+0x17a>
 80082a2:	231f      	movs	r3, #31
 80082a4:	18fb      	adds	r3, r7, r3
 80082a6:	2208      	movs	r2, #8
 80082a8:	701a      	strb	r2, [r3, #0]
 80082aa:	e056      	b.n	800835a <UART_SetConfig+0x17a>
 80082ac:	231f      	movs	r3, #31
 80082ae:	18fb      	adds	r3, r7, r3
 80082b0:	2210      	movs	r2, #16
 80082b2:	701a      	strb	r2, [r3, #0]
 80082b4:	e051      	b.n	800835a <UART_SetConfig+0x17a>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a89      	ldr	r2, [pc, #548]	; (80084e0 <UART_SetConfig+0x300>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d134      	bne.n	800832a <UART_SetConfig+0x14a>
 80082c0:	4b86      	ldr	r3, [pc, #536]	; (80084dc <UART_SetConfig+0x2fc>)
 80082c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082c4:	23c0      	movs	r3, #192	; 0xc0
 80082c6:	029b      	lsls	r3, r3, #10
 80082c8:	4013      	ands	r3, r2
 80082ca:	22c0      	movs	r2, #192	; 0xc0
 80082cc:	0292      	lsls	r2, r2, #10
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d017      	beq.n	8008302 <UART_SetConfig+0x122>
 80082d2:	22c0      	movs	r2, #192	; 0xc0
 80082d4:	0292      	lsls	r2, r2, #10
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d822      	bhi.n	8008320 <UART_SetConfig+0x140>
 80082da:	2280      	movs	r2, #128	; 0x80
 80082dc:	0292      	lsls	r2, r2, #10
 80082de:	4293      	cmp	r3, r2
 80082e0:	d019      	beq.n	8008316 <UART_SetConfig+0x136>
 80082e2:	2280      	movs	r2, #128	; 0x80
 80082e4:	0292      	lsls	r2, r2, #10
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d81a      	bhi.n	8008320 <UART_SetConfig+0x140>
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d004      	beq.n	80082f8 <UART_SetConfig+0x118>
 80082ee:	2280      	movs	r2, #128	; 0x80
 80082f0:	0252      	lsls	r2, r2, #9
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d00a      	beq.n	800830c <UART_SetConfig+0x12c>
 80082f6:	e013      	b.n	8008320 <UART_SetConfig+0x140>
 80082f8:	231f      	movs	r3, #31
 80082fa:	18fb      	adds	r3, r7, r3
 80082fc:	2200      	movs	r2, #0
 80082fe:	701a      	strb	r2, [r3, #0]
 8008300:	e02b      	b.n	800835a <UART_SetConfig+0x17a>
 8008302:	231f      	movs	r3, #31
 8008304:	18fb      	adds	r3, r7, r3
 8008306:	2202      	movs	r2, #2
 8008308:	701a      	strb	r2, [r3, #0]
 800830a:	e026      	b.n	800835a <UART_SetConfig+0x17a>
 800830c:	231f      	movs	r3, #31
 800830e:	18fb      	adds	r3, r7, r3
 8008310:	2204      	movs	r2, #4
 8008312:	701a      	strb	r2, [r3, #0]
 8008314:	e021      	b.n	800835a <UART_SetConfig+0x17a>
 8008316:	231f      	movs	r3, #31
 8008318:	18fb      	adds	r3, r7, r3
 800831a:	2208      	movs	r2, #8
 800831c:	701a      	strb	r2, [r3, #0]
 800831e:	e01c      	b.n	800835a <UART_SetConfig+0x17a>
 8008320:	231f      	movs	r3, #31
 8008322:	18fb      	adds	r3, r7, r3
 8008324:	2210      	movs	r2, #16
 8008326:	701a      	strb	r2, [r3, #0]
 8008328:	e017      	b.n	800835a <UART_SetConfig+0x17a>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a6d      	ldr	r2, [pc, #436]	; (80084e4 <UART_SetConfig+0x304>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d104      	bne.n	800833e <UART_SetConfig+0x15e>
 8008334:	231f      	movs	r3, #31
 8008336:	18fb      	adds	r3, r7, r3
 8008338:	2200      	movs	r2, #0
 800833a:	701a      	strb	r2, [r3, #0]
 800833c:	e00d      	b.n	800835a <UART_SetConfig+0x17a>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a69      	ldr	r2, [pc, #420]	; (80084e8 <UART_SetConfig+0x308>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d104      	bne.n	8008352 <UART_SetConfig+0x172>
 8008348:	231f      	movs	r3, #31
 800834a:	18fb      	adds	r3, r7, r3
 800834c:	2200      	movs	r2, #0
 800834e:	701a      	strb	r2, [r3, #0]
 8008350:	e003      	b.n	800835a <UART_SetConfig+0x17a>
 8008352:	231f      	movs	r3, #31
 8008354:	18fb      	adds	r3, r7, r3
 8008356:	2210      	movs	r2, #16
 8008358:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	69da      	ldr	r2, [r3, #28]
 800835e:	2380      	movs	r3, #128	; 0x80
 8008360:	021b      	lsls	r3, r3, #8
 8008362:	429a      	cmp	r2, r3
 8008364:	d15d      	bne.n	8008422 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8008366:	231f      	movs	r3, #31
 8008368:	18fb      	adds	r3, r7, r3
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	2b08      	cmp	r3, #8
 800836e:	d015      	beq.n	800839c <UART_SetConfig+0x1bc>
 8008370:	dc18      	bgt.n	80083a4 <UART_SetConfig+0x1c4>
 8008372:	2b04      	cmp	r3, #4
 8008374:	d00d      	beq.n	8008392 <UART_SetConfig+0x1b2>
 8008376:	dc15      	bgt.n	80083a4 <UART_SetConfig+0x1c4>
 8008378:	2b00      	cmp	r3, #0
 800837a:	d002      	beq.n	8008382 <UART_SetConfig+0x1a2>
 800837c:	2b02      	cmp	r3, #2
 800837e:	d005      	beq.n	800838c <UART_SetConfig+0x1ac>
 8008380:	e010      	b.n	80083a4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008382:	f7fe f865 	bl	8006450 <HAL_RCC_GetPCLK1Freq>
 8008386:	0003      	movs	r3, r0
 8008388:	61bb      	str	r3, [r7, #24]
        break;
 800838a:	e012      	b.n	80083b2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800838c:	4b57      	ldr	r3, [pc, #348]	; (80084ec <UART_SetConfig+0x30c>)
 800838e:	61bb      	str	r3, [r7, #24]
        break;
 8008390:	e00f      	b.n	80083b2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008392:	f7fd ffd1 	bl	8006338 <HAL_RCC_GetSysClockFreq>
 8008396:	0003      	movs	r3, r0
 8008398:	61bb      	str	r3, [r7, #24]
        break;
 800839a:	e00a      	b.n	80083b2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800839c:	2380      	movs	r3, #128	; 0x80
 800839e:	021b      	lsls	r3, r3, #8
 80083a0:	61bb      	str	r3, [r7, #24]
        break;
 80083a2:	e006      	b.n	80083b2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80083a4:	2300      	movs	r3, #0
 80083a6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80083a8:	231e      	movs	r3, #30
 80083aa:	18fb      	adds	r3, r7, r3
 80083ac:	2201      	movs	r2, #1
 80083ae:	701a      	strb	r2, [r3, #0]
        break;
 80083b0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d100      	bne.n	80083ba <UART_SetConfig+0x1da>
 80083b8:	e07b      	b.n	80084b2 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	005a      	lsls	r2, r3, #1
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	085b      	lsrs	r3, r3, #1
 80083c4:	18d2      	adds	r2, r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	0019      	movs	r1, r3
 80083cc:	0010      	movs	r0, r2
 80083ce:	f7f7 fead 	bl	800012c <__udivsi3>
 80083d2:	0003      	movs	r3, r0
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	2b0f      	cmp	r3, #15
 80083dc:	d91c      	bls.n	8008418 <UART_SetConfig+0x238>
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	2380      	movs	r3, #128	; 0x80
 80083e2:	025b      	lsls	r3, r3, #9
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d217      	bcs.n	8008418 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	200e      	movs	r0, #14
 80083ee:	183b      	adds	r3, r7, r0
 80083f0:	210f      	movs	r1, #15
 80083f2:	438a      	bics	r2, r1
 80083f4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	085b      	lsrs	r3, r3, #1
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	2207      	movs	r2, #7
 80083fe:	4013      	ands	r3, r2
 8008400:	b299      	uxth	r1, r3
 8008402:	183b      	adds	r3, r7, r0
 8008404:	183a      	adds	r2, r7, r0
 8008406:	8812      	ldrh	r2, [r2, #0]
 8008408:	430a      	orrs	r2, r1
 800840a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	183a      	adds	r2, r7, r0
 8008412:	8812      	ldrh	r2, [r2, #0]
 8008414:	60da      	str	r2, [r3, #12]
 8008416:	e04c      	b.n	80084b2 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8008418:	231e      	movs	r3, #30
 800841a:	18fb      	adds	r3, r7, r3
 800841c:	2201      	movs	r2, #1
 800841e:	701a      	strb	r2, [r3, #0]
 8008420:	e047      	b.n	80084b2 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008422:	231f      	movs	r3, #31
 8008424:	18fb      	adds	r3, r7, r3
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	2b08      	cmp	r3, #8
 800842a:	d015      	beq.n	8008458 <UART_SetConfig+0x278>
 800842c:	dc18      	bgt.n	8008460 <UART_SetConfig+0x280>
 800842e:	2b04      	cmp	r3, #4
 8008430:	d00d      	beq.n	800844e <UART_SetConfig+0x26e>
 8008432:	dc15      	bgt.n	8008460 <UART_SetConfig+0x280>
 8008434:	2b00      	cmp	r3, #0
 8008436:	d002      	beq.n	800843e <UART_SetConfig+0x25e>
 8008438:	2b02      	cmp	r3, #2
 800843a:	d005      	beq.n	8008448 <UART_SetConfig+0x268>
 800843c:	e010      	b.n	8008460 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800843e:	f7fe f807 	bl	8006450 <HAL_RCC_GetPCLK1Freq>
 8008442:	0003      	movs	r3, r0
 8008444:	61bb      	str	r3, [r7, #24]
        break;
 8008446:	e012      	b.n	800846e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008448:	4b28      	ldr	r3, [pc, #160]	; (80084ec <UART_SetConfig+0x30c>)
 800844a:	61bb      	str	r3, [r7, #24]
        break;
 800844c:	e00f      	b.n	800846e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800844e:	f7fd ff73 	bl	8006338 <HAL_RCC_GetSysClockFreq>
 8008452:	0003      	movs	r3, r0
 8008454:	61bb      	str	r3, [r7, #24]
        break;
 8008456:	e00a      	b.n	800846e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008458:	2380      	movs	r3, #128	; 0x80
 800845a:	021b      	lsls	r3, r3, #8
 800845c:	61bb      	str	r3, [r7, #24]
        break;
 800845e:	e006      	b.n	800846e <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8008460:	2300      	movs	r3, #0
 8008462:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008464:	231e      	movs	r3, #30
 8008466:	18fb      	adds	r3, r7, r3
 8008468:	2201      	movs	r2, #1
 800846a:	701a      	strb	r2, [r3, #0]
        break;
 800846c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800846e:	69bb      	ldr	r3, [r7, #24]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d01e      	beq.n	80084b2 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	085a      	lsrs	r2, r3, #1
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	18d2      	adds	r2, r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	0019      	movs	r1, r3
 8008484:	0010      	movs	r0, r2
 8008486:	f7f7 fe51 	bl	800012c <__udivsi3>
 800848a:	0003      	movs	r3, r0
 800848c:	b29b      	uxth	r3, r3
 800848e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	2b0f      	cmp	r3, #15
 8008494:	d909      	bls.n	80084aa <UART_SetConfig+0x2ca>
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	2380      	movs	r3, #128	; 0x80
 800849a:	025b      	lsls	r3, r3, #9
 800849c:	429a      	cmp	r2, r3
 800849e:	d204      	bcs.n	80084aa <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	60da      	str	r2, [r3, #12]
 80084a8:	e003      	b.n	80084b2 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80084aa:	231e      	movs	r3, #30
 80084ac:	18fb      	adds	r3, r7, r3
 80084ae:	2201      	movs	r2, #1
 80084b0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80084be:	231e      	movs	r3, #30
 80084c0:	18fb      	adds	r3, r7, r3
 80084c2:	781b      	ldrb	r3, [r3, #0]
}
 80084c4:	0018      	movs	r0, r3
 80084c6:	46bd      	mov	sp, r7
 80084c8:	b008      	add	sp, #32
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	efff69f3 	.word	0xefff69f3
 80084d0:	ffffcfff 	.word	0xffffcfff
 80084d4:	fffff4ff 	.word	0xfffff4ff
 80084d8:	40013800 	.word	0x40013800
 80084dc:	40021000 	.word	0x40021000
 80084e0:	40004400 	.word	0x40004400
 80084e4:	40004800 	.word	0x40004800
 80084e8:	40004c00 	.word	0x40004c00
 80084ec:	007a1200 	.word	0x007a1200

080084f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fc:	2201      	movs	r2, #1
 80084fe:	4013      	ands	r3, r2
 8008500:	d00b      	beq.n	800851a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	4a4a      	ldr	r2, [pc, #296]	; (8008634 <UART_AdvFeatureConfig+0x144>)
 800850a:	4013      	ands	r3, r2
 800850c:	0019      	movs	r1, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	430a      	orrs	r2, r1
 8008518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851e:	2202      	movs	r2, #2
 8008520:	4013      	ands	r3, r2
 8008522:	d00b      	beq.n	800853c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	4a43      	ldr	r2, [pc, #268]	; (8008638 <UART_AdvFeatureConfig+0x148>)
 800852c:	4013      	ands	r3, r2
 800852e:	0019      	movs	r1, r3
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	430a      	orrs	r2, r1
 800853a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008540:	2204      	movs	r2, #4
 8008542:	4013      	ands	r3, r2
 8008544:	d00b      	beq.n	800855e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	4a3b      	ldr	r2, [pc, #236]	; (800863c <UART_AdvFeatureConfig+0x14c>)
 800854e:	4013      	ands	r3, r2
 8008550:	0019      	movs	r1, r3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	430a      	orrs	r2, r1
 800855c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008562:	2208      	movs	r2, #8
 8008564:	4013      	ands	r3, r2
 8008566:	d00b      	beq.n	8008580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	4a34      	ldr	r2, [pc, #208]	; (8008640 <UART_AdvFeatureConfig+0x150>)
 8008570:	4013      	ands	r3, r2
 8008572:	0019      	movs	r1, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	430a      	orrs	r2, r1
 800857e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008584:	2210      	movs	r2, #16
 8008586:	4013      	ands	r3, r2
 8008588:	d00b      	beq.n	80085a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	4a2c      	ldr	r2, [pc, #176]	; (8008644 <UART_AdvFeatureConfig+0x154>)
 8008592:	4013      	ands	r3, r2
 8008594:	0019      	movs	r1, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	430a      	orrs	r2, r1
 80085a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a6:	2220      	movs	r2, #32
 80085a8:	4013      	ands	r3, r2
 80085aa:	d00b      	beq.n	80085c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	4a25      	ldr	r2, [pc, #148]	; (8008648 <UART_AdvFeatureConfig+0x158>)
 80085b4:	4013      	ands	r3, r2
 80085b6:	0019      	movs	r1, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	430a      	orrs	r2, r1
 80085c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c8:	2240      	movs	r2, #64	; 0x40
 80085ca:	4013      	ands	r3, r2
 80085cc:	d01d      	beq.n	800860a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	4a1d      	ldr	r2, [pc, #116]	; (800864c <UART_AdvFeatureConfig+0x15c>)
 80085d6:	4013      	ands	r3, r2
 80085d8:	0019      	movs	r1, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	430a      	orrs	r2, r1
 80085e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085ea:	2380      	movs	r3, #128	; 0x80
 80085ec:	035b      	lsls	r3, r3, #13
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d10b      	bne.n	800860a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	4a15      	ldr	r2, [pc, #84]	; (8008650 <UART_AdvFeatureConfig+0x160>)
 80085fa:	4013      	ands	r3, r2
 80085fc:	0019      	movs	r1, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	430a      	orrs	r2, r1
 8008608:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860e:	2280      	movs	r2, #128	; 0x80
 8008610:	4013      	ands	r3, r2
 8008612:	d00b      	beq.n	800862c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	4a0e      	ldr	r2, [pc, #56]	; (8008654 <UART_AdvFeatureConfig+0x164>)
 800861c:	4013      	ands	r3, r2
 800861e:	0019      	movs	r1, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	430a      	orrs	r2, r1
 800862a:	605a      	str	r2, [r3, #4]
  }
}
 800862c:	46c0      	nop			; (mov r8, r8)
 800862e:	46bd      	mov	sp, r7
 8008630:	b002      	add	sp, #8
 8008632:	bd80      	pop	{r7, pc}
 8008634:	fffdffff 	.word	0xfffdffff
 8008638:	fffeffff 	.word	0xfffeffff
 800863c:	fffbffff 	.word	0xfffbffff
 8008640:	ffff7fff 	.word	0xffff7fff
 8008644:	ffffefff 	.word	0xffffefff
 8008648:	ffffdfff 	.word	0xffffdfff
 800864c:	ffefffff 	.word	0xffefffff
 8008650:	ff9fffff 	.word	0xff9fffff
 8008654:	fff7ffff 	.word	0xfff7ffff

08008658 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b086      	sub	sp, #24
 800865c:	af02      	add	r7, sp, #8
 800865e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2280      	movs	r2, #128	; 0x80
 8008664:	2100      	movs	r1, #0
 8008666:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008668:	f7fa fb00 	bl	8002c6c <HAL_GetTick>
 800866c:	0003      	movs	r3, r0
 800866e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2208      	movs	r2, #8
 8008678:	4013      	ands	r3, r2
 800867a:	2b08      	cmp	r3, #8
 800867c:	d10c      	bne.n	8008698 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2280      	movs	r2, #128	; 0x80
 8008682:	0391      	lsls	r1, r2, #14
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	4a17      	ldr	r2, [pc, #92]	; (80086e4 <UART_CheckIdleState+0x8c>)
 8008688:	9200      	str	r2, [sp, #0]
 800868a:	2200      	movs	r2, #0
 800868c:	f000 f82c 	bl	80086e8 <UART_WaitOnFlagUntilTimeout>
 8008690:	1e03      	subs	r3, r0, #0
 8008692:	d001      	beq.n	8008698 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	e021      	b.n	80086dc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2204      	movs	r2, #4
 80086a0:	4013      	ands	r3, r2
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	d10c      	bne.n	80086c0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2280      	movs	r2, #128	; 0x80
 80086aa:	03d1      	lsls	r1, r2, #15
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	4a0d      	ldr	r2, [pc, #52]	; (80086e4 <UART_CheckIdleState+0x8c>)
 80086b0:	9200      	str	r2, [sp, #0]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f000 f818 	bl	80086e8 <UART_WaitOnFlagUntilTimeout>
 80086b8:	1e03      	subs	r3, r0, #0
 80086ba:	d001      	beq.n	80086c0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	e00d      	b.n	80086dc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2220      	movs	r2, #32
 80086c4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2220      	movs	r2, #32
 80086ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2274      	movs	r2, #116	; 0x74
 80086d6:	2100      	movs	r1, #0
 80086d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	0018      	movs	r0, r3
 80086de:	46bd      	mov	sp, r7
 80086e0:	b004      	add	sp, #16
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	01ffffff 	.word	0x01ffffff

080086e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b094      	sub	sp, #80	; 0x50
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	603b      	str	r3, [r7, #0]
 80086f4:	1dfb      	adds	r3, r7, #7
 80086f6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086f8:	e0a3      	b.n	8008842 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086fc:	3301      	adds	r3, #1
 80086fe:	d100      	bne.n	8008702 <UART_WaitOnFlagUntilTimeout+0x1a>
 8008700:	e09f      	b.n	8008842 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008702:	f7fa fab3 	bl	8002c6c <HAL_GetTick>
 8008706:	0002      	movs	r2, r0
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800870e:	429a      	cmp	r2, r3
 8008710:	d302      	bcc.n	8008718 <UART_WaitOnFlagUntilTimeout+0x30>
 8008712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008714:	2b00      	cmp	r3, #0
 8008716:	d13d      	bne.n	8008794 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008718:	f3ef 8310 	mrs	r3, PRIMASK
 800871c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800871e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008720:	647b      	str	r3, [r7, #68]	; 0x44
 8008722:	2301      	movs	r3, #1
 8008724:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008728:	f383 8810 	msr	PRIMASK, r3
}
 800872c:	46c0      	nop			; (mov r8, r8)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	494c      	ldr	r1, [pc, #304]	; (800886c <UART_WaitOnFlagUntilTimeout+0x184>)
 800873a:	400a      	ands	r2, r1
 800873c:	601a      	str	r2, [r3, #0]
 800873e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008740:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008744:	f383 8810 	msr	PRIMASK, r3
}
 8008748:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800874a:	f3ef 8310 	mrs	r3, PRIMASK
 800874e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008752:	643b      	str	r3, [r7, #64]	; 0x40
 8008754:	2301      	movs	r3, #1
 8008756:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875a:	f383 8810 	msr	PRIMASK, r3
}
 800875e:	46c0      	nop			; (mov r8, r8)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	689a      	ldr	r2, [r3, #8]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2101      	movs	r1, #1
 800876c:	438a      	bics	r2, r1
 800876e:	609a      	str	r2, [r3, #8]
 8008770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008772:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008776:	f383 8810 	msr	PRIMASK, r3
}
 800877a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2220      	movs	r2, #32
 8008780:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2220      	movs	r2, #32
 8008786:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2274      	movs	r2, #116	; 0x74
 800878c:	2100      	movs	r1, #0
 800878e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e067      	b.n	8008864 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2204      	movs	r2, #4
 800879c:	4013      	ands	r3, r2
 800879e:	d050      	beq.n	8008842 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	69da      	ldr	r2, [r3, #28]
 80087a6:	2380      	movs	r3, #128	; 0x80
 80087a8:	011b      	lsls	r3, r3, #4
 80087aa:	401a      	ands	r2, r3
 80087ac:	2380      	movs	r3, #128	; 0x80
 80087ae:	011b      	lsls	r3, r3, #4
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d146      	bne.n	8008842 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2280      	movs	r2, #128	; 0x80
 80087ba:	0112      	lsls	r2, r2, #4
 80087bc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087be:	f3ef 8310 	mrs	r3, PRIMASK
 80087c2:	613b      	str	r3, [r7, #16]
  return(result);
 80087c4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80087c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087c8:	2301      	movs	r3, #1
 80087ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	f383 8810 	msr	PRIMASK, r3
}
 80087d2:	46c0      	nop			; (mov r8, r8)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4923      	ldr	r1, [pc, #140]	; (800886c <UART_WaitOnFlagUntilTimeout+0x184>)
 80087e0:	400a      	ands	r2, r1
 80087e2:	601a      	str	r2, [r3, #0]
 80087e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087e6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	f383 8810 	msr	PRIMASK, r3
}
 80087ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087f0:	f3ef 8310 	mrs	r3, PRIMASK
 80087f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80087f6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80087fa:	2301      	movs	r3, #1
 80087fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087fe:	6a3b      	ldr	r3, [r7, #32]
 8008800:	f383 8810 	msr	PRIMASK, r3
}
 8008804:	46c0      	nop			; (mov r8, r8)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	689a      	ldr	r2, [r3, #8]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2101      	movs	r1, #1
 8008812:	438a      	bics	r2, r1
 8008814:	609a      	str	r2, [r3, #8]
 8008816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008818:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	f383 8810 	msr	PRIMASK, r3
}
 8008820:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2220      	movs	r2, #32
 8008826:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2220      	movs	r2, #32
 800882c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2280      	movs	r2, #128	; 0x80
 8008832:	2120      	movs	r1, #32
 8008834:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2274      	movs	r2, #116	; 0x74
 800883a:	2100      	movs	r1, #0
 800883c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e010      	b.n	8008864 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	69db      	ldr	r3, [r3, #28]
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	4013      	ands	r3, r2
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	425a      	negs	r2, r3
 8008852:	4153      	adcs	r3, r2
 8008854:	b2db      	uxtb	r3, r3
 8008856:	001a      	movs	r2, r3
 8008858:	1dfb      	adds	r3, r7, #7
 800885a:	781b      	ldrb	r3, [r3, #0]
 800885c:	429a      	cmp	r2, r3
 800885e:	d100      	bne.n	8008862 <UART_WaitOnFlagUntilTimeout+0x17a>
 8008860:	e74b      	b.n	80086fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	0018      	movs	r0, r3
 8008866:	46bd      	mov	sp, r7
 8008868:	b014      	add	sp, #80	; 0x50
 800886a:	bd80      	pop	{r7, pc}
 800886c:	fffffe5f 	.word	0xfffffe5f

08008870 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b08e      	sub	sp, #56	; 0x38
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008878:	f3ef 8310 	mrs	r3, PRIMASK
 800887c:	617b      	str	r3, [r7, #20]
  return(result);
 800887e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008880:	637b      	str	r3, [r7, #52]	; 0x34
 8008882:	2301      	movs	r3, #1
 8008884:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	f383 8810 	msr	PRIMASK, r3
}
 800888c:	46c0      	nop			; (mov r8, r8)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4925      	ldr	r1, [pc, #148]	; (8008930 <UART_EndRxTransfer+0xc0>)
 800889a:	400a      	ands	r2, r1
 800889c:	601a      	str	r2, [r3, #0]
 800889e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	f383 8810 	msr	PRIMASK, r3
}
 80088a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088aa:	f3ef 8310 	mrs	r3, PRIMASK
 80088ae:	623b      	str	r3, [r7, #32]
  return(result);
 80088b0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b2:	633b      	str	r3, [r7, #48]	; 0x30
 80088b4:	2301      	movs	r3, #1
 80088b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ba:	f383 8810 	msr	PRIMASK, r3
}
 80088be:	46c0      	nop			; (mov r8, r8)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	689a      	ldr	r2, [r3, #8]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2101      	movs	r1, #1
 80088cc:	438a      	bics	r2, r1
 80088ce:	609a      	str	r2, [r3, #8]
 80088d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d6:	f383 8810 	msr	PRIMASK, r3
}
 80088da:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d118      	bne.n	8008916 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088e4:	f3ef 8310 	mrs	r3, PRIMASK
 80088e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80088ea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088ee:	2301      	movs	r3, #1
 80088f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f383 8810 	msr	PRIMASK, r3
}
 80088f8:	46c0      	nop			; (mov r8, r8)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2110      	movs	r1, #16
 8008906:	438a      	bics	r2, r1
 8008908:	601a      	str	r2, [r3, #0]
 800890a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	f383 8810 	msr	PRIMASK, r3
}
 8008914:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2220      	movs	r2, #32
 800891a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008928:	46c0      	nop			; (mov r8, r8)
 800892a:	46bd      	mov	sp, r7
 800892c:	b00e      	add	sp, #56	; 0x38
 800892e:	bd80      	pop	{r7, pc}
 8008930:	fffffedf 	.word	0xfffffedf

08008934 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008940:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	225a      	movs	r2, #90	; 0x5a
 8008946:	2100      	movs	r1, #0
 8008948:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2252      	movs	r2, #82	; 0x52
 800894e:	2100      	movs	r1, #0
 8008950:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	0018      	movs	r0, r3
 8008956:	f7ff fc2f 	bl	80081b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800895a:	46c0      	nop			; (mov r8, r8)
 800895c:	46bd      	mov	sp, r7
 800895e:	b004      	add	sp, #16
 8008960:	bd80      	pop	{r7, pc}

08008962 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b086      	sub	sp, #24
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800896a:	f3ef 8310 	mrs	r3, PRIMASK
 800896e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008970:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008972:	617b      	str	r3, [r7, #20]
 8008974:	2301      	movs	r3, #1
 8008976:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f383 8810 	msr	PRIMASK, r3
}
 800897e:	46c0      	nop			; (mov r8, r8)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2140      	movs	r1, #64	; 0x40
 800898c:	438a      	bics	r2, r1
 800898e:	601a      	str	r2, [r3, #0]
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	f383 8810 	msr	PRIMASK, r3
}
 800899a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2220      	movs	r2, #32
 80089a0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	0018      	movs	r0, r3
 80089ac:	f7ff fbfc 	bl	80081a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089b0:	46c0      	nop			; (mov r8, r8)
 80089b2:	46bd      	mov	sp, r7
 80089b4:	b006      	add	sp, #24
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80089c0:	46c0      	nop			; (mov r8, r8)
 80089c2:	46bd      	mov	sp, r7
 80089c4:	b002      	add	sp, #8
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2244      	movs	r2, #68	; 0x44
 80089d4:	2100      	movs	r1, #0
 80089d6:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80089d8:	4b05      	ldr	r3, [pc, #20]	; (80089f0 <USB_EnableGlobalInt+0x28>)
 80089da:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	b299      	uxth	r1, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2240      	movs	r2, #64	; 0x40
 80089e4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	0018      	movs	r0, r3
 80089ea:	46bd      	mov	sp, r7
 80089ec:	b004      	add	sp, #16
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	0000bf80 	.word	0x0000bf80

080089f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80089fc:	4b09      	ldr	r3, [pc, #36]	; (8008a24 <USB_DisableGlobalInt+0x30>)
 80089fe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2240      	movs	r2, #64	; 0x40
 8008a04:	5a9b      	ldrh	r3, [r3, r2]
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	b292      	uxth	r2, r2
 8008a0c:	43d2      	mvns	r2, r2
 8008a0e:	b292      	uxth	r2, r2
 8008a10:	4013      	ands	r3, r2
 8008a12:	b299      	uxth	r1, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2240      	movs	r2, #64	; 0x40
 8008a18:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	0018      	movs	r0, r3
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	b004      	add	sp, #16
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	0000bf80 	.word	0x0000bf80

08008a28 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008a28:	b084      	sub	sp, #16
 8008a2a:	b590      	push	{r4, r7, lr}
 8008a2c:	46c6      	mov	lr, r8
 8008a2e:	b500      	push	{lr}
 8008a30:	b082      	sub	sp, #8
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	2004      	movs	r0, #4
 8008a38:	2410      	movs	r4, #16
 8008a3a:	46a4      	mov	ip, r4
 8008a3c:	2408      	movs	r4, #8
 8008a3e:	46a0      	mov	r8, r4
 8008a40:	44b8      	add	r8, r7
 8008a42:	44c4      	add	ip, r8
 8008a44:	4460      	add	r0, ip
 8008a46:	6001      	str	r1, [r0, #0]
 8008a48:	6042      	str	r2, [r0, #4]
 8008a4a:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2240      	movs	r2, #64	; 0x40
 8008a50:	2101      	movs	r1, #1
 8008a52:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2240      	movs	r2, #64	; 0x40
 8008a58:	2100      	movs	r1, #0
 8008a5a:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2244      	movs	r2, #68	; 0x44
 8008a60:	2100      	movs	r1, #0
 8008a62:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2250      	movs	r2, #80	; 0x50
 8008a68:	2100      	movs	r1, #0
 8008a6a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	0018      	movs	r0, r3
 8008a70:	46bd      	mov	sp, r7
 8008a72:	b002      	add	sp, #8
 8008a74:	bc80      	pop	{r7}
 8008a76:	46b8      	mov	r8, r7
 8008a78:	bc90      	pop	{r4, r7}
 8008a7a:	bc08      	pop	{r3}
 8008a7c:	b004      	add	sp, #16
 8008a7e:	4718      	bx	r3

08008a80 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b09c      	sub	sp, #112	; 0x70
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a8a:	236f      	movs	r3, #111	; 0x6f
 8008a8c:	18fb      	adds	r3, r7, r3
 8008a8e:	2200      	movs	r2, #0
 8008a90:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	18d3      	adds	r3, r2, r3
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	b29a      	uxth	r2, r3
 8008aa0:	236c      	movs	r3, #108	; 0x6c
 8008aa2:	18fb      	adds	r3, r7, r3
 8008aa4:	49cf      	ldr	r1, [pc, #828]	; (8008de4 <USB_ActivateEndpoint+0x364>)
 8008aa6:	400a      	ands	r2, r1
 8008aa8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	78db      	ldrb	r3, [r3, #3]
 8008aae:	2b03      	cmp	r3, #3
 8008ab0:	d017      	beq.n	8008ae2 <USB_ActivateEndpoint+0x62>
 8008ab2:	dc28      	bgt.n	8008b06 <USB_ActivateEndpoint+0x86>
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d00e      	beq.n	8008ad6 <USB_ActivateEndpoint+0x56>
 8008ab8:	dc25      	bgt.n	8008b06 <USB_ActivateEndpoint+0x86>
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d002      	beq.n	8008ac4 <USB_ActivateEndpoint+0x44>
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d018      	beq.n	8008af4 <USB_ActivateEndpoint+0x74>
 8008ac2:	e020      	b.n	8008b06 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008ac4:	226c      	movs	r2, #108	; 0x6c
 8008ac6:	18bb      	adds	r3, r7, r2
 8008ac8:	18ba      	adds	r2, r7, r2
 8008aca:	8812      	ldrh	r2, [r2, #0]
 8008acc:	2180      	movs	r1, #128	; 0x80
 8008ace:	0089      	lsls	r1, r1, #2
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	801a      	strh	r2, [r3, #0]
      break;
 8008ad4:	e01c      	b.n	8008b10 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8008ad6:	226c      	movs	r2, #108	; 0x6c
 8008ad8:	18bb      	adds	r3, r7, r2
 8008ada:	18ba      	adds	r2, r7, r2
 8008adc:	8812      	ldrh	r2, [r2, #0]
 8008ade:	801a      	strh	r2, [r3, #0]
      break;
 8008ae0:	e016      	b.n	8008b10 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008ae2:	226c      	movs	r2, #108	; 0x6c
 8008ae4:	18bb      	adds	r3, r7, r2
 8008ae6:	18ba      	adds	r2, r7, r2
 8008ae8:	8812      	ldrh	r2, [r2, #0]
 8008aea:	21c0      	movs	r1, #192	; 0xc0
 8008aec:	00c9      	lsls	r1, r1, #3
 8008aee:	430a      	orrs	r2, r1
 8008af0:	801a      	strh	r2, [r3, #0]
      break;
 8008af2:	e00d      	b.n	8008b10 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008af4:	226c      	movs	r2, #108	; 0x6c
 8008af6:	18bb      	adds	r3, r7, r2
 8008af8:	18ba      	adds	r2, r7, r2
 8008afa:	8812      	ldrh	r2, [r2, #0]
 8008afc:	2180      	movs	r1, #128	; 0x80
 8008afe:	00c9      	lsls	r1, r1, #3
 8008b00:	430a      	orrs	r2, r1
 8008b02:	801a      	strh	r2, [r3, #0]
      break;
 8008b04:	e004      	b.n	8008b10 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8008b06:	236f      	movs	r3, #111	; 0x6f
 8008b08:	18fb      	adds	r3, r7, r3
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	701a      	strb	r2, [r3, #0]
      break;
 8008b0e:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008b10:	687a      	ldr	r2, [r7, #4]
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	18d3      	adds	r3, r2, r3
 8008b1a:	226c      	movs	r2, #108	; 0x6c
 8008b1c:	18ba      	adds	r2, r7, r2
 8008b1e:	8812      	ldrh	r2, [r2, #0]
 8008b20:	49b1      	ldr	r1, [pc, #708]	; (8008de8 <USB_ActivateEndpoint+0x368>)
 8008b22:	430a      	orrs	r2, r1
 8008b24:	b292      	uxth	r2, r2
 8008b26:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	18d3      	adds	r3, r2, r3
 8008b32:	881b      	ldrh	r3, [r3, #0]
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	b21b      	sxth	r3, r3
 8008b38:	4aac      	ldr	r2, [pc, #688]	; (8008dec <USB_ActivateEndpoint+0x36c>)
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	b21a      	sxth	r2, r3
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	b21b      	sxth	r3, r3
 8008b44:	4313      	orrs	r3, r2
 8008b46:	b21a      	sxth	r2, r3
 8008b48:	2166      	movs	r1, #102	; 0x66
 8008b4a:	187b      	adds	r3, r7, r1
 8008b4c:	801a      	strh	r2, [r3, #0]
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	18d3      	adds	r3, r2, r3
 8008b58:	187a      	adds	r2, r7, r1
 8008b5a:	8812      	ldrh	r2, [r2, #0]
 8008b5c:	49a2      	ldr	r1, [pc, #648]	; (8008de8 <USB_ActivateEndpoint+0x368>)
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	b292      	uxth	r2, r2
 8008b62:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	7b1b      	ldrb	r3, [r3, #12]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d000      	beq.n	8008b6e <USB_ActivateEndpoint+0xee>
 8008b6c:	e150      	b.n	8008e10 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	785b      	ldrb	r3, [r3, #1]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d100      	bne.n	8008b78 <USB_ActivateEndpoint+0xf8>
 8008b76:	e07a      	b.n	8008c6e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	61bb      	str	r3, [r7, #24]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2250      	movs	r2, #80	; 0x50
 8008b80:	5a9b      	ldrh	r3, [r3, r2]
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	001a      	movs	r2, r3
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	189b      	adds	r3, r3, r2
 8008b8a:	61bb      	str	r3, [r7, #24]
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	00da      	lsls	r2, r3, #3
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	18d3      	adds	r3, r2, r3
 8008b96:	2280      	movs	r2, #128	; 0x80
 8008b98:	00d2      	lsls	r2, r2, #3
 8008b9a:	4694      	mov	ip, r2
 8008b9c:	4463      	add	r3, ip
 8008b9e:	617b      	str	r3, [r7, #20]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	88db      	ldrh	r3, [r3, #6]
 8008ba4:	085b      	lsrs	r3, r3, #1
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	18db      	adds	r3, r3, r3
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	18d2      	adds	r2, r2, r3
 8008bba:	2112      	movs	r1, #18
 8008bbc:	187b      	adds	r3, r7, r1
 8008bbe:	8812      	ldrh	r2, [r2, #0]
 8008bc0:	801a      	strh	r2, [r3, #0]
 8008bc2:	187b      	adds	r3, r7, r1
 8008bc4:	881b      	ldrh	r3, [r3, #0]
 8008bc6:	2240      	movs	r2, #64	; 0x40
 8008bc8:	4013      	ands	r3, r2
 8008bca:	d016      	beq.n	8008bfa <USB_ActivateEndpoint+0x17a>
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	18d3      	adds	r3, r2, r3
 8008bd6:	881b      	ldrh	r3, [r3, #0]
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	2010      	movs	r0, #16
 8008bdc:	183b      	adds	r3, r7, r0
 8008bde:	4983      	ldr	r1, [pc, #524]	; (8008dec <USB_ActivateEndpoint+0x36c>)
 8008be0:	400a      	ands	r2, r1
 8008be2:	801a      	strh	r2, [r3, #0]
 8008be4:	687a      	ldr	r2, [r7, #4]
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	18d3      	adds	r3, r2, r3
 8008bee:	183a      	adds	r2, r7, r0
 8008bf0:	8812      	ldrh	r2, [r2, #0]
 8008bf2:	497f      	ldr	r1, [pc, #508]	; (8008df0 <USB_ActivateEndpoint+0x370>)
 8008bf4:	430a      	orrs	r2, r1
 8008bf6:	b292      	uxth	r2, r2
 8008bf8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	78db      	ldrb	r3, [r3, #3]
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d01d      	beq.n	8008c3e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	18d3      	adds	r3, r2, r3
 8008c0c:	881b      	ldrh	r3, [r3, #0]
 8008c0e:	b29a      	uxth	r2, r3
 8008c10:	200c      	movs	r0, #12
 8008c12:	183b      	adds	r3, r7, r0
 8008c14:	4977      	ldr	r1, [pc, #476]	; (8008df4 <USB_ActivateEndpoint+0x374>)
 8008c16:	400a      	ands	r2, r1
 8008c18:	801a      	strh	r2, [r3, #0]
 8008c1a:	183b      	adds	r3, r7, r0
 8008c1c:	183a      	adds	r2, r7, r0
 8008c1e:	8812      	ldrh	r2, [r2, #0]
 8008c20:	2120      	movs	r1, #32
 8008c22:	404a      	eors	r2, r1
 8008c24:	801a      	strh	r2, [r3, #0]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	18d3      	adds	r3, r2, r3
 8008c30:	183a      	adds	r2, r7, r0
 8008c32:	8812      	ldrh	r2, [r2, #0]
 8008c34:	496c      	ldr	r1, [pc, #432]	; (8008de8 <USB_ActivateEndpoint+0x368>)
 8008c36:	430a      	orrs	r2, r1
 8008c38:	b292      	uxth	r2, r2
 8008c3a:	801a      	strh	r2, [r3, #0]
 8008c3c:	e27a      	b.n	8009134 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	18d3      	adds	r3, r2, r3
 8008c48:	881b      	ldrh	r3, [r3, #0]
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	200e      	movs	r0, #14
 8008c4e:	183b      	adds	r3, r7, r0
 8008c50:	4968      	ldr	r1, [pc, #416]	; (8008df4 <USB_ActivateEndpoint+0x374>)
 8008c52:	400a      	ands	r2, r1
 8008c54:	801a      	strh	r2, [r3, #0]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	18d3      	adds	r3, r2, r3
 8008c60:	183a      	adds	r2, r7, r0
 8008c62:	8812      	ldrh	r2, [r2, #0]
 8008c64:	4960      	ldr	r1, [pc, #384]	; (8008de8 <USB_ActivateEndpoint+0x368>)
 8008c66:	430a      	orrs	r2, r1
 8008c68:	b292      	uxth	r2, r2
 8008c6a:	801a      	strh	r2, [r3, #0]
 8008c6c:	e262      	b.n	8009134 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	633b      	str	r3, [r7, #48]	; 0x30
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2250      	movs	r2, #80	; 0x50
 8008c76:	5a9b      	ldrh	r3, [r3, r2]
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	001a      	movs	r2, r3
 8008c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7e:	189b      	adds	r3, r3, r2
 8008c80:	633b      	str	r3, [r7, #48]	; 0x30
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	00da      	lsls	r2, r3, #3
 8008c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8a:	18d3      	adds	r3, r2, r3
 8008c8c:	4a5a      	ldr	r2, [pc, #360]	; (8008df8 <USB_ActivateEndpoint+0x378>)
 8008c8e:	4694      	mov	ip, r2
 8008c90:	4463      	add	r3, ip
 8008c92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	88db      	ldrh	r3, [r3, #6]
 8008c98:	085b      	lsrs	r3, r3, #1
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	18db      	adds	r3, r3, r3
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2250      	movs	r2, #80	; 0x50
 8008cac:	5a9b      	ldrh	r3, [r3, r2]
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	001a      	movs	r2, r3
 8008cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb4:	189b      	adds	r3, r3, r2
 8008cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	00da      	lsls	r2, r3, #3
 8008cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc0:	18d3      	adds	r3, r2, r3
 8008cc2:	4a4e      	ldr	r2, [pc, #312]	; (8008dfc <USB_ActivateEndpoint+0x37c>)
 8008cc4:	4694      	mov	ip, r2
 8008cc6:	4463      	add	r3, ip
 8008cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d110      	bne.n	8008cf4 <USB_ActivateEndpoint+0x274>
 8008cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	4a49      	ldr	r2, [pc, #292]	; (8008e00 <USB_ActivateEndpoint+0x380>)
 8008cda:	4013      	ands	r3, r2
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce0:	801a      	strh	r2, [r3, #0]
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	881b      	ldrh	r3, [r3, #0]
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	4a46      	ldr	r2, [pc, #280]	; (8008e04 <USB_ActivateEndpoint+0x384>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf0:	801a      	strh	r2, [r3, #0]
 8008cf2:	e02b      	b.n	8008d4c <USB_ActivateEndpoint+0x2cc>
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	2b3e      	cmp	r3, #62	; 0x3e
 8008cfa:	d812      	bhi.n	8008d22 <USB_ActivateEndpoint+0x2a2>
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	085b      	lsrs	r3, r3, #1
 8008d02:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	d002      	beq.n	8008d14 <USB_ActivateEndpoint+0x294>
 8008d0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d10:	3301      	adds	r3, #1
 8008d12:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	029b      	lsls	r3, r3, #10
 8008d1a:	b29a      	uxth	r2, r3
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1e:	801a      	strh	r2, [r3, #0]
 8008d20:	e014      	b.n	8008d4c <USB_ActivateEndpoint+0x2cc>
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	095b      	lsrs	r3, r3, #5
 8008d28:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	221f      	movs	r2, #31
 8008d30:	4013      	ands	r3, r2
 8008d32:	d102      	bne.n	8008d3a <USB_ActivateEndpoint+0x2ba>
 8008d34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d36:	3b01      	subs	r3, #1
 8008d38:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	029b      	lsls	r3, r3, #10
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	4a30      	ldr	r2, [pc, #192]	; (8008e04 <USB_ActivateEndpoint+0x384>)
 8008d44:	4313      	orrs	r3, r2
 8008d46:	b29a      	uxth	r2, r3
 8008d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	18d2      	adds	r2, r2, r3
 8008d56:	2122      	movs	r1, #34	; 0x22
 8008d58:	187b      	adds	r3, r7, r1
 8008d5a:	8812      	ldrh	r2, [r2, #0]
 8008d5c:	801a      	strh	r2, [r3, #0]
 8008d5e:	187b      	adds	r3, r7, r1
 8008d60:	881a      	ldrh	r2, [r3, #0]
 8008d62:	2380      	movs	r3, #128	; 0x80
 8008d64:	01db      	lsls	r3, r3, #7
 8008d66:	4013      	ands	r3, r2
 8008d68:	d016      	beq.n	8008d98 <USB_ActivateEndpoint+0x318>
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	18d3      	adds	r3, r2, r3
 8008d74:	881b      	ldrh	r3, [r3, #0]
 8008d76:	b29a      	uxth	r2, r3
 8008d78:	2020      	movs	r0, #32
 8008d7a:	183b      	adds	r3, r7, r0
 8008d7c:	491b      	ldr	r1, [pc, #108]	; (8008dec <USB_ActivateEndpoint+0x36c>)
 8008d7e:	400a      	ands	r2, r1
 8008d80:	801a      	strh	r2, [r3, #0]
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	18d3      	adds	r3, r2, r3
 8008d8c:	183a      	adds	r2, r7, r0
 8008d8e:	8812      	ldrh	r2, [r2, #0]
 8008d90:	491d      	ldr	r1, [pc, #116]	; (8008e08 <USB_ActivateEndpoint+0x388>)
 8008d92:	430a      	orrs	r2, r1
 8008d94:	b292      	uxth	r2, r2
 8008d96:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	18d3      	adds	r3, r2, r3
 8008da2:	881b      	ldrh	r3, [r3, #0]
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	201e      	movs	r0, #30
 8008da8:	183b      	adds	r3, r7, r0
 8008daa:	4918      	ldr	r1, [pc, #96]	; (8008e0c <USB_ActivateEndpoint+0x38c>)
 8008dac:	400a      	ands	r2, r1
 8008dae:	801a      	strh	r2, [r3, #0]
 8008db0:	183b      	adds	r3, r7, r0
 8008db2:	183a      	adds	r2, r7, r0
 8008db4:	8812      	ldrh	r2, [r2, #0]
 8008db6:	2180      	movs	r1, #128	; 0x80
 8008db8:	0149      	lsls	r1, r1, #5
 8008dba:	404a      	eors	r2, r1
 8008dbc:	801a      	strh	r2, [r3, #0]
 8008dbe:	183b      	adds	r3, r7, r0
 8008dc0:	183a      	adds	r2, r7, r0
 8008dc2:	8812      	ldrh	r2, [r2, #0]
 8008dc4:	2180      	movs	r1, #128	; 0x80
 8008dc6:	0189      	lsls	r1, r1, #6
 8008dc8:	404a      	eors	r2, r1
 8008dca:	801a      	strh	r2, [r3, #0]
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	18d3      	adds	r3, r2, r3
 8008dd6:	183a      	adds	r2, r7, r0
 8008dd8:	8812      	ldrh	r2, [r2, #0]
 8008dda:	4903      	ldr	r1, [pc, #12]	; (8008de8 <USB_ActivateEndpoint+0x368>)
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	b292      	uxth	r2, r2
 8008de0:	801a      	strh	r2, [r3, #0]
 8008de2:	e1a7      	b.n	8009134 <USB_ActivateEndpoint+0x6b4>
 8008de4:	ffff898f 	.word	0xffff898f
 8008de8:	ffff8080 	.word	0xffff8080
 8008dec:	ffff8f8f 	.word	0xffff8f8f
 8008df0:	ffff80c0 	.word	0xffff80c0
 8008df4:	ffff8fbf 	.word	0xffff8fbf
 8008df8:	00000404 	.word	0x00000404
 8008dfc:	00000406 	.word	0x00000406
 8008e00:	ffff83ff 	.word	0xffff83ff
 8008e04:	ffff8000 	.word	0xffff8000
 8008e08:	ffffc080 	.word	0xffffc080
 8008e0c:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	78db      	ldrb	r3, [r3, #3]
 8008e14:	2b02      	cmp	r3, #2
 8008e16:	d117      	bne.n	8008e48 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	18d3      	adds	r3, r2, r3
 8008e22:	881b      	ldrh	r3, [r3, #0]
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	2062      	movs	r0, #98	; 0x62
 8008e28:	183b      	adds	r3, r7, r0
 8008e2a:	49c6      	ldr	r1, [pc, #792]	; (8009144 <USB_ActivateEndpoint+0x6c4>)
 8008e2c:	400a      	ands	r2, r1
 8008e2e:	801a      	strh	r2, [r3, #0]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	18d3      	adds	r3, r2, r3
 8008e3a:	183a      	adds	r2, r7, r0
 8008e3c:	8812      	ldrh	r2, [r2, #0]
 8008e3e:	49c2      	ldr	r1, [pc, #776]	; (8009148 <USB_ActivateEndpoint+0x6c8>)
 8008e40:	430a      	orrs	r2, r1
 8008e42:	b292      	uxth	r2, r2
 8008e44:	801a      	strh	r2, [r3, #0]
 8008e46:	e016      	b.n	8008e76 <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	18d3      	adds	r3, r2, r3
 8008e52:	881b      	ldrh	r3, [r3, #0]
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	2064      	movs	r0, #100	; 0x64
 8008e58:	183b      	adds	r3, r7, r0
 8008e5a:	49bc      	ldr	r1, [pc, #752]	; (800914c <USB_ActivateEndpoint+0x6cc>)
 8008e5c:	400a      	ands	r2, r1
 8008e5e:	801a      	strh	r2, [r3, #0]
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	18d3      	adds	r3, r2, r3
 8008e6a:	183a      	adds	r2, r7, r0
 8008e6c:	8812      	ldrh	r2, [r2, #0]
 8008e6e:	49b8      	ldr	r1, [pc, #736]	; (8009150 <USB_ActivateEndpoint+0x6d0>)
 8008e70:	430a      	orrs	r2, r1
 8008e72:	b292      	uxth	r2, r2
 8008e74:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2250      	movs	r2, #80	; 0x50
 8008e7e:	5a9b      	ldrh	r3, [r3, r2]
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	001a      	movs	r2, r3
 8008e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e86:	189b      	adds	r3, r3, r2
 8008e88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	00da      	lsls	r2, r3, #3
 8008e90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e92:	18d3      	adds	r3, r2, r3
 8008e94:	2280      	movs	r2, #128	; 0x80
 8008e96:	00d2      	lsls	r2, r2, #3
 8008e98:	4694      	mov	ip, r2
 8008e9a:	4463      	add	r3, ip
 8008e9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	891b      	ldrh	r3, [r3, #8]
 8008ea2:	085b      	lsrs	r3, r3, #1
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	18db      	adds	r3, r3, r3
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008eac:	801a      	strh	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	657b      	str	r3, [r7, #84]	; 0x54
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2250      	movs	r2, #80	; 0x50
 8008eb6:	5a9b      	ldrh	r3, [r3, r2]
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	001a      	movs	r2, r3
 8008ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ebe:	189b      	adds	r3, r3, r2
 8008ec0:	657b      	str	r3, [r7, #84]	; 0x54
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	00da      	lsls	r2, r3, #3
 8008ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008eca:	18d3      	adds	r3, r2, r3
 8008ecc:	4aa1      	ldr	r2, [pc, #644]	; (8009154 <USB_ActivateEndpoint+0x6d4>)
 8008ece:	4694      	mov	ip, r2
 8008ed0:	4463      	add	r3, ip
 8008ed2:	653b      	str	r3, [r7, #80]	; 0x50
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	895b      	ldrh	r3, [r3, #10]
 8008ed8:	085b      	lsrs	r3, r3, #1
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	18db      	adds	r3, r3, r3
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ee2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	785b      	ldrb	r3, [r3, #1]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d000      	beq.n	8008eee <USB_ActivateEndpoint+0x46e>
 8008eec:	e087      	b.n	8008ffe <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	18d2      	adds	r2, r2, r3
 8008ef8:	2140      	movs	r1, #64	; 0x40
 8008efa:	187b      	adds	r3, r7, r1
 8008efc:	8812      	ldrh	r2, [r2, #0]
 8008efe:	801a      	strh	r2, [r3, #0]
 8008f00:	187b      	adds	r3, r7, r1
 8008f02:	881a      	ldrh	r2, [r3, #0]
 8008f04:	2380      	movs	r3, #128	; 0x80
 8008f06:	01db      	lsls	r3, r3, #7
 8008f08:	4013      	ands	r3, r2
 8008f0a:	d016      	beq.n	8008f3a <USB_ActivateEndpoint+0x4ba>
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	18d3      	adds	r3, r2, r3
 8008f16:	881b      	ldrh	r3, [r3, #0]
 8008f18:	b29a      	uxth	r2, r3
 8008f1a:	203e      	movs	r0, #62	; 0x3e
 8008f1c:	183b      	adds	r3, r7, r0
 8008f1e:	4989      	ldr	r1, [pc, #548]	; (8009144 <USB_ActivateEndpoint+0x6c4>)
 8008f20:	400a      	ands	r2, r1
 8008f22:	801a      	strh	r2, [r3, #0]
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	18d3      	adds	r3, r2, r3
 8008f2e:	183a      	adds	r2, r7, r0
 8008f30:	8812      	ldrh	r2, [r2, #0]
 8008f32:	4989      	ldr	r1, [pc, #548]	; (8009158 <USB_ActivateEndpoint+0x6d8>)
 8008f34:	430a      	orrs	r2, r1
 8008f36:	b292      	uxth	r2, r2
 8008f38:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	18d2      	adds	r2, r2, r3
 8008f44:	213c      	movs	r1, #60	; 0x3c
 8008f46:	187b      	adds	r3, r7, r1
 8008f48:	8812      	ldrh	r2, [r2, #0]
 8008f4a:	801a      	strh	r2, [r3, #0]
 8008f4c:	187b      	adds	r3, r7, r1
 8008f4e:	881b      	ldrh	r3, [r3, #0]
 8008f50:	2240      	movs	r2, #64	; 0x40
 8008f52:	4013      	ands	r3, r2
 8008f54:	d016      	beq.n	8008f84 <USB_ActivateEndpoint+0x504>
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	18d3      	adds	r3, r2, r3
 8008f60:	881b      	ldrh	r3, [r3, #0]
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	203a      	movs	r0, #58	; 0x3a
 8008f66:	183b      	adds	r3, r7, r0
 8008f68:	4976      	ldr	r1, [pc, #472]	; (8009144 <USB_ActivateEndpoint+0x6c4>)
 8008f6a:	400a      	ands	r2, r1
 8008f6c:	801a      	strh	r2, [r3, #0]
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	18d3      	adds	r3, r2, r3
 8008f78:	183a      	adds	r2, r7, r0
 8008f7a:	8812      	ldrh	r2, [r2, #0]
 8008f7c:	4977      	ldr	r1, [pc, #476]	; (800915c <USB_ActivateEndpoint+0x6dc>)
 8008f7e:	430a      	orrs	r2, r1
 8008f80:	b292      	uxth	r2, r2
 8008f82:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	18d3      	adds	r3, r2, r3
 8008f8e:	881b      	ldrh	r3, [r3, #0]
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	2038      	movs	r0, #56	; 0x38
 8008f94:	183b      	adds	r3, r7, r0
 8008f96:	4972      	ldr	r1, [pc, #456]	; (8009160 <USB_ActivateEndpoint+0x6e0>)
 8008f98:	400a      	ands	r2, r1
 8008f9a:	801a      	strh	r2, [r3, #0]
 8008f9c:	183b      	adds	r3, r7, r0
 8008f9e:	183a      	adds	r2, r7, r0
 8008fa0:	8812      	ldrh	r2, [r2, #0]
 8008fa2:	2180      	movs	r1, #128	; 0x80
 8008fa4:	0149      	lsls	r1, r1, #5
 8008fa6:	404a      	eors	r2, r1
 8008fa8:	801a      	strh	r2, [r3, #0]
 8008faa:	183b      	adds	r3, r7, r0
 8008fac:	183a      	adds	r2, r7, r0
 8008fae:	8812      	ldrh	r2, [r2, #0]
 8008fb0:	2180      	movs	r1, #128	; 0x80
 8008fb2:	0189      	lsls	r1, r1, #6
 8008fb4:	404a      	eors	r2, r1
 8008fb6:	801a      	strh	r2, [r3, #0]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	18d3      	adds	r3, r2, r3
 8008fc2:	183a      	adds	r2, r7, r0
 8008fc4:	8812      	ldrh	r2, [r2, #0]
 8008fc6:	4962      	ldr	r1, [pc, #392]	; (8009150 <USB_ActivateEndpoint+0x6d0>)
 8008fc8:	430a      	orrs	r2, r1
 8008fca:	b292      	uxth	r2, r2
 8008fcc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	18d3      	adds	r3, r2, r3
 8008fd8:	881b      	ldrh	r3, [r3, #0]
 8008fda:	b29a      	uxth	r2, r3
 8008fdc:	2036      	movs	r0, #54	; 0x36
 8008fde:	183b      	adds	r3, r7, r0
 8008fe0:	4960      	ldr	r1, [pc, #384]	; (8009164 <USB_ActivateEndpoint+0x6e4>)
 8008fe2:	400a      	ands	r2, r1
 8008fe4:	801a      	strh	r2, [r3, #0]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	18d3      	adds	r3, r2, r3
 8008ff0:	183a      	adds	r2, r7, r0
 8008ff2:	8812      	ldrh	r2, [r2, #0]
 8008ff4:	4956      	ldr	r1, [pc, #344]	; (8009150 <USB_ActivateEndpoint+0x6d0>)
 8008ff6:	430a      	orrs	r2, r1
 8008ff8:	b292      	uxth	r2, r2
 8008ffa:	801a      	strh	r2, [r3, #0]
 8008ffc:	e09a      	b.n	8009134 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	18d2      	adds	r2, r2, r3
 8009008:	214e      	movs	r1, #78	; 0x4e
 800900a:	187b      	adds	r3, r7, r1
 800900c:	8812      	ldrh	r2, [r2, #0]
 800900e:	801a      	strh	r2, [r3, #0]
 8009010:	187b      	adds	r3, r7, r1
 8009012:	881a      	ldrh	r2, [r3, #0]
 8009014:	2380      	movs	r3, #128	; 0x80
 8009016:	01db      	lsls	r3, r3, #7
 8009018:	4013      	ands	r3, r2
 800901a:	d016      	beq.n	800904a <USB_ActivateEndpoint+0x5ca>
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	18d3      	adds	r3, r2, r3
 8009026:	881b      	ldrh	r3, [r3, #0]
 8009028:	b29a      	uxth	r2, r3
 800902a:	204c      	movs	r0, #76	; 0x4c
 800902c:	183b      	adds	r3, r7, r0
 800902e:	4945      	ldr	r1, [pc, #276]	; (8009144 <USB_ActivateEndpoint+0x6c4>)
 8009030:	400a      	ands	r2, r1
 8009032:	801a      	strh	r2, [r3, #0]
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	18d3      	adds	r3, r2, r3
 800903e:	183a      	adds	r2, r7, r0
 8009040:	8812      	ldrh	r2, [r2, #0]
 8009042:	4945      	ldr	r1, [pc, #276]	; (8009158 <USB_ActivateEndpoint+0x6d8>)
 8009044:	430a      	orrs	r2, r1
 8009046:	b292      	uxth	r2, r2
 8009048:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	18d2      	adds	r2, r2, r3
 8009054:	214a      	movs	r1, #74	; 0x4a
 8009056:	187b      	adds	r3, r7, r1
 8009058:	8812      	ldrh	r2, [r2, #0]
 800905a:	801a      	strh	r2, [r3, #0]
 800905c:	187b      	adds	r3, r7, r1
 800905e:	881b      	ldrh	r3, [r3, #0]
 8009060:	2240      	movs	r2, #64	; 0x40
 8009062:	4013      	ands	r3, r2
 8009064:	d016      	beq.n	8009094 <USB_ActivateEndpoint+0x614>
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	18d3      	adds	r3, r2, r3
 8009070:	881b      	ldrh	r3, [r3, #0]
 8009072:	b29a      	uxth	r2, r3
 8009074:	2048      	movs	r0, #72	; 0x48
 8009076:	183b      	adds	r3, r7, r0
 8009078:	4932      	ldr	r1, [pc, #200]	; (8009144 <USB_ActivateEndpoint+0x6c4>)
 800907a:	400a      	ands	r2, r1
 800907c:	801a      	strh	r2, [r3, #0]
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	18d3      	adds	r3, r2, r3
 8009088:	183a      	adds	r2, r7, r0
 800908a:	8812      	ldrh	r2, [r2, #0]
 800908c:	4933      	ldr	r1, [pc, #204]	; (800915c <USB_ActivateEndpoint+0x6dc>)
 800908e:	430a      	orrs	r2, r1
 8009090:	b292      	uxth	r2, r2
 8009092:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	78db      	ldrb	r3, [r3, #3]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d01d      	beq.n	80090d8 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	18d3      	adds	r3, r2, r3
 80090a6:	881b      	ldrh	r3, [r3, #0]
 80090a8:	b29a      	uxth	r2, r3
 80090aa:	2044      	movs	r0, #68	; 0x44
 80090ac:	183b      	adds	r3, r7, r0
 80090ae:	492d      	ldr	r1, [pc, #180]	; (8009164 <USB_ActivateEndpoint+0x6e4>)
 80090b0:	400a      	ands	r2, r1
 80090b2:	801a      	strh	r2, [r3, #0]
 80090b4:	183b      	adds	r3, r7, r0
 80090b6:	183a      	adds	r2, r7, r0
 80090b8:	8812      	ldrh	r2, [r2, #0]
 80090ba:	2120      	movs	r1, #32
 80090bc:	404a      	eors	r2, r1
 80090be:	801a      	strh	r2, [r3, #0]
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	18d3      	adds	r3, r2, r3
 80090ca:	183a      	adds	r2, r7, r0
 80090cc:	8812      	ldrh	r2, [r2, #0]
 80090ce:	4920      	ldr	r1, [pc, #128]	; (8009150 <USB_ActivateEndpoint+0x6d0>)
 80090d0:	430a      	orrs	r2, r1
 80090d2:	b292      	uxth	r2, r2
 80090d4:	801a      	strh	r2, [r3, #0]
 80090d6:	e016      	b.n	8009106 <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	18d3      	adds	r3, r2, r3
 80090e2:	881b      	ldrh	r3, [r3, #0]
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	2046      	movs	r0, #70	; 0x46
 80090e8:	183b      	adds	r3, r7, r0
 80090ea:	491e      	ldr	r1, [pc, #120]	; (8009164 <USB_ActivateEndpoint+0x6e4>)
 80090ec:	400a      	ands	r2, r1
 80090ee:	801a      	strh	r2, [r3, #0]
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	18d3      	adds	r3, r2, r3
 80090fa:	183a      	adds	r2, r7, r0
 80090fc:	8812      	ldrh	r2, [r2, #0]
 80090fe:	4914      	ldr	r1, [pc, #80]	; (8009150 <USB_ActivateEndpoint+0x6d0>)
 8009100:	430a      	orrs	r2, r1
 8009102:	b292      	uxth	r2, r2
 8009104:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	18d3      	adds	r3, r2, r3
 8009110:	881b      	ldrh	r3, [r3, #0]
 8009112:	b29a      	uxth	r2, r3
 8009114:	2042      	movs	r0, #66	; 0x42
 8009116:	183b      	adds	r3, r7, r0
 8009118:	4911      	ldr	r1, [pc, #68]	; (8009160 <USB_ActivateEndpoint+0x6e0>)
 800911a:	400a      	ands	r2, r1
 800911c:	801a      	strh	r2, [r3, #0]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	18d3      	adds	r3, r2, r3
 8009128:	183a      	adds	r2, r7, r0
 800912a:	8812      	ldrh	r2, [r2, #0]
 800912c:	4908      	ldr	r1, [pc, #32]	; (8009150 <USB_ActivateEndpoint+0x6d0>)
 800912e:	430a      	orrs	r2, r1
 8009130:	b292      	uxth	r2, r2
 8009132:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8009134:	236f      	movs	r3, #111	; 0x6f
 8009136:	18fb      	adds	r3, r7, r3
 8009138:	781b      	ldrb	r3, [r3, #0]
}
 800913a:	0018      	movs	r0, r3
 800913c:	46bd      	mov	sp, r7
 800913e:	b01c      	add	sp, #112	; 0x70
 8009140:	bd80      	pop	{r7, pc}
 8009142:	46c0      	nop			; (mov r8, r8)
 8009144:	ffff8f8f 	.word	0xffff8f8f
 8009148:	ffff8180 	.word	0xffff8180
 800914c:	ffff8e8f 	.word	0xffff8e8f
 8009150:	ffff8080 	.word	0xffff8080
 8009154:	00000404 	.word	0x00000404
 8009158:	ffffc080 	.word	0xffffc080
 800915c:	ffff80c0 	.word	0xffff80c0
 8009160:	ffffbf8f 	.word	0xffffbf8f
 8009164:	ffff8fbf 	.word	0xffff8fbf

08009168 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b08c      	sub	sp, #48	; 0x30
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	7b1b      	ldrb	r3, [r3, #12]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d000      	beq.n	800917c <USB_DeactivateEndpoint+0x14>
 800917a:	e07e      	b.n	800927a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	785b      	ldrb	r3, [r3, #1]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d03c      	beq.n	80091fe <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	18d2      	adds	r2, r2, r3
 800918e:	210c      	movs	r1, #12
 8009190:	187b      	adds	r3, r7, r1
 8009192:	8812      	ldrh	r2, [r2, #0]
 8009194:	801a      	strh	r2, [r3, #0]
 8009196:	187b      	adds	r3, r7, r1
 8009198:	881b      	ldrh	r3, [r3, #0]
 800919a:	2240      	movs	r2, #64	; 0x40
 800919c:	4013      	ands	r3, r2
 800919e:	d016      	beq.n	80091ce <USB_DeactivateEndpoint+0x66>
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	18d3      	adds	r3, r2, r3
 80091aa:	881b      	ldrh	r3, [r3, #0]
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	200a      	movs	r0, #10
 80091b0:	183b      	adds	r3, r7, r0
 80091b2:	49c7      	ldr	r1, [pc, #796]	; (80094d0 <USB_DeactivateEndpoint+0x368>)
 80091b4:	400a      	ands	r2, r1
 80091b6:	801a      	strh	r2, [r3, #0]
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	18d3      	adds	r3, r2, r3
 80091c2:	183a      	adds	r2, r7, r0
 80091c4:	8812      	ldrh	r2, [r2, #0]
 80091c6:	49c3      	ldr	r1, [pc, #780]	; (80094d4 <USB_DeactivateEndpoint+0x36c>)
 80091c8:	430a      	orrs	r2, r1
 80091ca:	b292      	uxth	r2, r2
 80091cc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	18d3      	adds	r3, r2, r3
 80091d8:	881b      	ldrh	r3, [r3, #0]
 80091da:	b29a      	uxth	r2, r3
 80091dc:	2008      	movs	r0, #8
 80091de:	183b      	adds	r3, r7, r0
 80091e0:	49bd      	ldr	r1, [pc, #756]	; (80094d8 <USB_DeactivateEndpoint+0x370>)
 80091e2:	400a      	ands	r2, r1
 80091e4:	801a      	strh	r2, [r3, #0]
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	18d3      	adds	r3, r2, r3
 80091f0:	183a      	adds	r2, r7, r0
 80091f2:	8812      	ldrh	r2, [r2, #0]
 80091f4:	49b9      	ldr	r1, [pc, #740]	; (80094dc <USB_DeactivateEndpoint+0x374>)
 80091f6:	430a      	orrs	r2, r1
 80091f8:	b292      	uxth	r2, r2
 80091fa:	801a      	strh	r2, [r3, #0]
 80091fc:	e163      	b.n	80094c6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	18d2      	adds	r2, r2, r3
 8009208:	2112      	movs	r1, #18
 800920a:	187b      	adds	r3, r7, r1
 800920c:	8812      	ldrh	r2, [r2, #0]
 800920e:	801a      	strh	r2, [r3, #0]
 8009210:	187b      	adds	r3, r7, r1
 8009212:	881a      	ldrh	r2, [r3, #0]
 8009214:	2380      	movs	r3, #128	; 0x80
 8009216:	01db      	lsls	r3, r3, #7
 8009218:	4013      	ands	r3, r2
 800921a:	d016      	beq.n	800924a <USB_DeactivateEndpoint+0xe2>
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	18d3      	adds	r3, r2, r3
 8009226:	881b      	ldrh	r3, [r3, #0]
 8009228:	b29a      	uxth	r2, r3
 800922a:	2010      	movs	r0, #16
 800922c:	183b      	adds	r3, r7, r0
 800922e:	49a8      	ldr	r1, [pc, #672]	; (80094d0 <USB_DeactivateEndpoint+0x368>)
 8009230:	400a      	ands	r2, r1
 8009232:	801a      	strh	r2, [r3, #0]
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	18d3      	adds	r3, r2, r3
 800923e:	183a      	adds	r2, r7, r0
 8009240:	8812      	ldrh	r2, [r2, #0]
 8009242:	49a7      	ldr	r1, [pc, #668]	; (80094e0 <USB_DeactivateEndpoint+0x378>)
 8009244:	430a      	orrs	r2, r1
 8009246:	b292      	uxth	r2, r2
 8009248:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	18d3      	adds	r3, r2, r3
 8009254:	881b      	ldrh	r3, [r3, #0]
 8009256:	b29a      	uxth	r2, r3
 8009258:	200e      	movs	r0, #14
 800925a:	183b      	adds	r3, r7, r0
 800925c:	49a1      	ldr	r1, [pc, #644]	; (80094e4 <USB_DeactivateEndpoint+0x37c>)
 800925e:	400a      	ands	r2, r1
 8009260:	801a      	strh	r2, [r3, #0]
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	18d3      	adds	r3, r2, r3
 800926c:	183a      	adds	r2, r7, r0
 800926e:	8812      	ldrh	r2, [r2, #0]
 8009270:	499a      	ldr	r1, [pc, #616]	; (80094dc <USB_DeactivateEndpoint+0x374>)
 8009272:	430a      	orrs	r2, r1
 8009274:	b292      	uxth	r2, r2
 8009276:	801a      	strh	r2, [r3, #0]
 8009278:	e125      	b.n	80094c6 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	785b      	ldrb	r3, [r3, #1]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d000      	beq.n	8009284 <USB_DeactivateEndpoint+0x11c>
 8009282:	e090      	b.n	80093a6 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	18d2      	adds	r2, r2, r3
 800928e:	2120      	movs	r1, #32
 8009290:	187b      	adds	r3, r7, r1
 8009292:	8812      	ldrh	r2, [r2, #0]
 8009294:	801a      	strh	r2, [r3, #0]
 8009296:	187b      	adds	r3, r7, r1
 8009298:	881a      	ldrh	r2, [r3, #0]
 800929a:	2380      	movs	r3, #128	; 0x80
 800929c:	01db      	lsls	r3, r3, #7
 800929e:	4013      	ands	r3, r2
 80092a0:	d016      	beq.n	80092d0 <USB_DeactivateEndpoint+0x168>
 80092a2:	687a      	ldr	r2, [r7, #4]
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	18d3      	adds	r3, r2, r3
 80092ac:	881b      	ldrh	r3, [r3, #0]
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	201e      	movs	r0, #30
 80092b2:	183b      	adds	r3, r7, r0
 80092b4:	4986      	ldr	r1, [pc, #536]	; (80094d0 <USB_DeactivateEndpoint+0x368>)
 80092b6:	400a      	ands	r2, r1
 80092b8:	801a      	strh	r2, [r3, #0]
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	18d3      	adds	r3, r2, r3
 80092c4:	183a      	adds	r2, r7, r0
 80092c6:	8812      	ldrh	r2, [r2, #0]
 80092c8:	4985      	ldr	r1, [pc, #532]	; (80094e0 <USB_DeactivateEndpoint+0x378>)
 80092ca:	430a      	orrs	r2, r1
 80092cc:	b292      	uxth	r2, r2
 80092ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	18d2      	adds	r2, r2, r3
 80092da:	211c      	movs	r1, #28
 80092dc:	187b      	adds	r3, r7, r1
 80092de:	8812      	ldrh	r2, [r2, #0]
 80092e0:	801a      	strh	r2, [r3, #0]
 80092e2:	187b      	adds	r3, r7, r1
 80092e4:	881b      	ldrh	r3, [r3, #0]
 80092e6:	2240      	movs	r2, #64	; 0x40
 80092e8:	4013      	ands	r3, r2
 80092ea:	d016      	beq.n	800931a <USB_DeactivateEndpoint+0x1b2>
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	18d3      	adds	r3, r2, r3
 80092f6:	881b      	ldrh	r3, [r3, #0]
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	201a      	movs	r0, #26
 80092fc:	183b      	adds	r3, r7, r0
 80092fe:	4974      	ldr	r1, [pc, #464]	; (80094d0 <USB_DeactivateEndpoint+0x368>)
 8009300:	400a      	ands	r2, r1
 8009302:	801a      	strh	r2, [r3, #0]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	18d3      	adds	r3, r2, r3
 800930e:	183a      	adds	r2, r7, r0
 8009310:	8812      	ldrh	r2, [r2, #0]
 8009312:	4970      	ldr	r1, [pc, #448]	; (80094d4 <USB_DeactivateEndpoint+0x36c>)
 8009314:	430a      	orrs	r2, r1
 8009316:	b292      	uxth	r2, r2
 8009318:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	18d3      	adds	r3, r2, r3
 8009324:	881b      	ldrh	r3, [r3, #0]
 8009326:	b29a      	uxth	r2, r3
 8009328:	2018      	movs	r0, #24
 800932a:	183b      	adds	r3, r7, r0
 800932c:	4968      	ldr	r1, [pc, #416]	; (80094d0 <USB_DeactivateEndpoint+0x368>)
 800932e:	400a      	ands	r2, r1
 8009330:	801a      	strh	r2, [r3, #0]
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	18d3      	adds	r3, r2, r3
 800933c:	183a      	adds	r2, r7, r0
 800933e:	8812      	ldrh	r2, [r2, #0]
 8009340:	4964      	ldr	r1, [pc, #400]	; (80094d4 <USB_DeactivateEndpoint+0x36c>)
 8009342:	430a      	orrs	r2, r1
 8009344:	b292      	uxth	r2, r2
 8009346:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	18d3      	adds	r3, r2, r3
 8009352:	881b      	ldrh	r3, [r3, #0]
 8009354:	b29a      	uxth	r2, r3
 8009356:	2016      	movs	r0, #22
 8009358:	183b      	adds	r3, r7, r0
 800935a:	4962      	ldr	r1, [pc, #392]	; (80094e4 <USB_DeactivateEndpoint+0x37c>)
 800935c:	400a      	ands	r2, r1
 800935e:	801a      	strh	r2, [r3, #0]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	18d3      	adds	r3, r2, r3
 800936a:	183a      	adds	r2, r7, r0
 800936c:	8812      	ldrh	r2, [r2, #0]
 800936e:	495b      	ldr	r1, [pc, #364]	; (80094dc <USB_DeactivateEndpoint+0x374>)
 8009370:	430a      	orrs	r2, r1
 8009372:	b292      	uxth	r2, r2
 8009374:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	18d3      	adds	r3, r2, r3
 8009380:	881b      	ldrh	r3, [r3, #0]
 8009382:	b29a      	uxth	r2, r3
 8009384:	2014      	movs	r0, #20
 8009386:	183b      	adds	r3, r7, r0
 8009388:	4953      	ldr	r1, [pc, #332]	; (80094d8 <USB_DeactivateEndpoint+0x370>)
 800938a:	400a      	ands	r2, r1
 800938c:	801a      	strh	r2, [r3, #0]
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	18d3      	adds	r3, r2, r3
 8009398:	183a      	adds	r2, r7, r0
 800939a:	8812      	ldrh	r2, [r2, #0]
 800939c:	494f      	ldr	r1, [pc, #316]	; (80094dc <USB_DeactivateEndpoint+0x374>)
 800939e:	430a      	orrs	r2, r1
 80093a0:	b292      	uxth	r2, r2
 80093a2:	801a      	strh	r2, [r3, #0]
 80093a4:	e08f      	b.n	80094c6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	18d2      	adds	r2, r2, r3
 80093b0:	212e      	movs	r1, #46	; 0x2e
 80093b2:	187b      	adds	r3, r7, r1
 80093b4:	8812      	ldrh	r2, [r2, #0]
 80093b6:	801a      	strh	r2, [r3, #0]
 80093b8:	187b      	adds	r3, r7, r1
 80093ba:	881a      	ldrh	r2, [r3, #0]
 80093bc:	2380      	movs	r3, #128	; 0x80
 80093be:	01db      	lsls	r3, r3, #7
 80093c0:	4013      	ands	r3, r2
 80093c2:	d016      	beq.n	80093f2 <USB_DeactivateEndpoint+0x28a>
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	18d3      	adds	r3, r2, r3
 80093ce:	881b      	ldrh	r3, [r3, #0]
 80093d0:	b29a      	uxth	r2, r3
 80093d2:	202c      	movs	r0, #44	; 0x2c
 80093d4:	183b      	adds	r3, r7, r0
 80093d6:	493e      	ldr	r1, [pc, #248]	; (80094d0 <USB_DeactivateEndpoint+0x368>)
 80093d8:	400a      	ands	r2, r1
 80093da:	801a      	strh	r2, [r3, #0]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	18d3      	adds	r3, r2, r3
 80093e6:	183a      	adds	r2, r7, r0
 80093e8:	8812      	ldrh	r2, [r2, #0]
 80093ea:	493d      	ldr	r1, [pc, #244]	; (80094e0 <USB_DeactivateEndpoint+0x378>)
 80093ec:	430a      	orrs	r2, r1
 80093ee:	b292      	uxth	r2, r2
 80093f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	009b      	lsls	r3, r3, #2
 80093fa:	18d2      	adds	r2, r2, r3
 80093fc:	212a      	movs	r1, #42	; 0x2a
 80093fe:	187b      	adds	r3, r7, r1
 8009400:	8812      	ldrh	r2, [r2, #0]
 8009402:	801a      	strh	r2, [r3, #0]
 8009404:	187b      	adds	r3, r7, r1
 8009406:	881b      	ldrh	r3, [r3, #0]
 8009408:	2240      	movs	r2, #64	; 0x40
 800940a:	4013      	ands	r3, r2
 800940c:	d016      	beq.n	800943c <USB_DeactivateEndpoint+0x2d4>
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	18d3      	adds	r3, r2, r3
 8009418:	881b      	ldrh	r3, [r3, #0]
 800941a:	b29a      	uxth	r2, r3
 800941c:	2028      	movs	r0, #40	; 0x28
 800941e:	183b      	adds	r3, r7, r0
 8009420:	492b      	ldr	r1, [pc, #172]	; (80094d0 <USB_DeactivateEndpoint+0x368>)
 8009422:	400a      	ands	r2, r1
 8009424:	801a      	strh	r2, [r3, #0]
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	18d3      	adds	r3, r2, r3
 8009430:	183a      	adds	r2, r7, r0
 8009432:	8812      	ldrh	r2, [r2, #0]
 8009434:	4927      	ldr	r1, [pc, #156]	; (80094d4 <USB_DeactivateEndpoint+0x36c>)
 8009436:	430a      	orrs	r2, r1
 8009438:	b292      	uxth	r2, r2
 800943a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	18d3      	adds	r3, r2, r3
 8009446:	881b      	ldrh	r3, [r3, #0]
 8009448:	b29a      	uxth	r2, r3
 800944a:	2026      	movs	r0, #38	; 0x26
 800944c:	183b      	adds	r3, r7, r0
 800944e:	4920      	ldr	r1, [pc, #128]	; (80094d0 <USB_DeactivateEndpoint+0x368>)
 8009450:	400a      	ands	r2, r1
 8009452:	801a      	strh	r2, [r3, #0]
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	18d3      	adds	r3, r2, r3
 800945e:	183a      	adds	r2, r7, r0
 8009460:	8812      	ldrh	r2, [r2, #0]
 8009462:	491f      	ldr	r1, [pc, #124]	; (80094e0 <USB_DeactivateEndpoint+0x378>)
 8009464:	430a      	orrs	r2, r1
 8009466:	b292      	uxth	r2, r2
 8009468:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	18d3      	adds	r3, r2, r3
 8009474:	881b      	ldrh	r3, [r3, #0]
 8009476:	b29a      	uxth	r2, r3
 8009478:	2024      	movs	r0, #36	; 0x24
 800947a:	183b      	adds	r3, r7, r0
 800947c:	4916      	ldr	r1, [pc, #88]	; (80094d8 <USB_DeactivateEndpoint+0x370>)
 800947e:	400a      	ands	r2, r1
 8009480:	801a      	strh	r2, [r3, #0]
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	18d3      	adds	r3, r2, r3
 800948c:	183a      	adds	r2, r7, r0
 800948e:	8812      	ldrh	r2, [r2, #0]
 8009490:	4912      	ldr	r1, [pc, #72]	; (80094dc <USB_DeactivateEndpoint+0x374>)
 8009492:	430a      	orrs	r2, r1
 8009494:	b292      	uxth	r2, r2
 8009496:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	18d3      	adds	r3, r2, r3
 80094a2:	881b      	ldrh	r3, [r3, #0]
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	2022      	movs	r0, #34	; 0x22
 80094a8:	183b      	adds	r3, r7, r0
 80094aa:	490e      	ldr	r1, [pc, #56]	; (80094e4 <USB_DeactivateEndpoint+0x37c>)
 80094ac:	400a      	ands	r2, r1
 80094ae:	801a      	strh	r2, [r3, #0]
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	18d3      	adds	r3, r2, r3
 80094ba:	183a      	adds	r2, r7, r0
 80094bc:	8812      	ldrh	r2, [r2, #0]
 80094be:	4907      	ldr	r1, [pc, #28]	; (80094dc <USB_DeactivateEndpoint+0x374>)
 80094c0:	430a      	orrs	r2, r1
 80094c2:	b292      	uxth	r2, r2
 80094c4:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	0018      	movs	r0, r3
 80094ca:	46bd      	mov	sp, r7
 80094cc:	b00c      	add	sp, #48	; 0x30
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	ffff8f8f 	.word	0xffff8f8f
 80094d4:	ffff80c0 	.word	0xffff80c0
 80094d8:	ffff8fbf 	.word	0xffff8fbf
 80094dc:	ffff8080 	.word	0xffff8080
 80094e0:	ffffc080 	.word	0xffffc080
 80094e4:	ffffbf8f 	.word	0xffffbf8f

080094e8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80094e8:	b590      	push	{r4, r7, lr}
 80094ea:	b0c3      	sub	sp, #268	; 0x10c
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	785b      	ldrb	r3, [r3, #1]
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	d001      	beq.n	80094fe <USB_EPStartXfer+0x16>
 80094fa:	f000 fcef 	bl	8009edc <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	699a      	ldr	r2, [r3, #24]
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	691b      	ldr	r3, [r3, #16]
 8009506:	429a      	cmp	r2, r3
 8009508:	d905      	bls.n	8009516 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	691b      	ldr	r3, [r3, #16]
 800950e:	1d7a      	adds	r2, r7, #5
 8009510:	32ff      	adds	r2, #255	; 0xff
 8009512:	6013      	str	r3, [r2, #0]
 8009514:	e004      	b.n	8009520 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	699b      	ldr	r3, [r3, #24]
 800951a:	1d7a      	adds	r2, r7, #5
 800951c:	32ff      	adds	r2, #255	; 0xff
 800951e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	7b1b      	ldrb	r3, [r3, #12]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d125      	bne.n	8009574 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	6959      	ldr	r1, [r3, #20]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	88da      	ldrh	r2, [r3, #6]
 8009530:	1d7b      	adds	r3, r7, #5
 8009532:	33ff      	adds	r3, #255	; 0xff
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	b29b      	uxth	r3, r3
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f001 f9c9 	bl	800a8d0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	613b      	str	r3, [r7, #16]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2250      	movs	r2, #80	; 0x50
 8009546:	5a9b      	ldrh	r3, [r3, r2]
 8009548:	b29b      	uxth	r3, r3
 800954a:	001a      	movs	r2, r3
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	189b      	adds	r3, r3, r2
 8009550:	613b      	str	r3, [r7, #16]
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	781b      	ldrb	r3, [r3, #0]
 8009556:	00da      	lsls	r2, r3, #3
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	18d3      	adds	r3, r2, r3
 800955c:	4acc      	ldr	r2, [pc, #816]	; (8009890 <USB_EPStartXfer+0x3a8>)
 800955e:	4694      	mov	ip, r2
 8009560:	4463      	add	r3, ip
 8009562:	60fb      	str	r3, [r7, #12]
 8009564:	1d7b      	adds	r3, r7, #5
 8009566:	33ff      	adds	r3, #255	; 0xff
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	b29a      	uxth	r2, r3
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	801a      	strh	r2, [r3, #0]
 8009570:	f000 fc8f 	bl	8009e92 <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	78db      	ldrb	r3, [r3, #3]
 8009578:	2b02      	cmp	r3, #2
 800957a:	d000      	beq.n	800957e <USB_EPStartXfer+0x96>
 800957c:	e33a      	b.n	8009bf4 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	6a1a      	ldr	r2, [r3, #32]
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	691b      	ldr	r3, [r3, #16]
 8009586:	429a      	cmp	r2, r3
 8009588:	d800      	bhi.n	800958c <USB_EPStartXfer+0xa4>
 800958a:	e2df      	b.n	8009b4c <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	18d3      	adds	r3, r2, r3
 8009596:	881b      	ldrh	r3, [r3, #0]
 8009598:	b29a      	uxth	r2, r3
 800959a:	2056      	movs	r0, #86	; 0x56
 800959c:	183b      	adds	r3, r7, r0
 800959e:	49bd      	ldr	r1, [pc, #756]	; (8009894 <USB_EPStartXfer+0x3ac>)
 80095a0:	400a      	ands	r2, r1
 80095a2:	801a      	strh	r2, [r3, #0]
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	18d3      	adds	r3, r2, r3
 80095ae:	183a      	adds	r2, r7, r0
 80095b0:	8812      	ldrh	r2, [r2, #0]
 80095b2:	49b9      	ldr	r1, [pc, #740]	; (8009898 <USB_EPStartXfer+0x3b0>)
 80095b4:	430a      	orrs	r2, r1
 80095b6:	b292      	uxth	r2, r2
 80095b8:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	6a1a      	ldr	r2, [r3, #32]
 80095be:	1d7b      	adds	r3, r7, #5
 80095c0:	33ff      	adds	r3, #255	; 0xff
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	1ad2      	subs	r2, r2, r3
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	18d3      	adds	r3, r2, r3
 80095d4:	881b      	ldrh	r3, [r3, #0]
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	001a      	movs	r2, r3
 80095da:	2340      	movs	r3, #64	; 0x40
 80095dc:	4013      	ands	r3, r2
 80095de:	d100      	bne.n	80095e2 <USB_EPStartXfer+0xfa>
 80095e0:	e162      	b.n	80098a8 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	633b      	str	r3, [r7, #48]	; 0x30
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	785b      	ldrb	r3, [r3, #1]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d16a      	bne.n	80096c4 <USB_EPStartXfer+0x1dc>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2250      	movs	r2, #80	; 0x50
 80095f6:	5a9b      	ldrh	r3, [r3, r2]
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	001a      	movs	r2, r3
 80095fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fe:	189b      	adds	r3, r3, r2
 8009600:	62bb      	str	r3, [r7, #40]	; 0x28
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	00da      	lsls	r2, r3, #3
 8009608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960a:	18d3      	adds	r3, r2, r3
 800960c:	4aa3      	ldr	r2, [pc, #652]	; (800989c <USB_EPStartXfer+0x3b4>)
 800960e:	4694      	mov	ip, r2
 8009610:	4463      	add	r3, ip
 8009612:	627b      	str	r3, [r7, #36]	; 0x24
 8009614:	1d7b      	adds	r3, r7, #5
 8009616:	33ff      	adds	r3, #255	; 0xff
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d110      	bne.n	8009640 <USB_EPStartXfer+0x158>
 800961e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009620:	881b      	ldrh	r3, [r3, #0]
 8009622:	b29b      	uxth	r3, r3
 8009624:	4a9e      	ldr	r2, [pc, #632]	; (80098a0 <USB_EPStartXfer+0x3b8>)
 8009626:	4013      	ands	r3, r2
 8009628:	b29a      	uxth	r2, r3
 800962a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962c:	801a      	strh	r2, [r3, #0]
 800962e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009630:	881b      	ldrh	r3, [r3, #0]
 8009632:	b29b      	uxth	r3, r3
 8009634:	4a9b      	ldr	r2, [pc, #620]	; (80098a4 <USB_EPStartXfer+0x3bc>)
 8009636:	4313      	orrs	r3, r2
 8009638:	b29a      	uxth	r2, r3
 800963a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963c:	801a      	strh	r2, [r3, #0]
 800963e:	e05c      	b.n	80096fa <USB_EPStartXfer+0x212>
 8009640:	1d7b      	adds	r3, r7, #5
 8009642:	33ff      	adds	r3, #255	; 0xff
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2b3e      	cmp	r3, #62	; 0x3e
 8009648:	d81c      	bhi.n	8009684 <USB_EPStartXfer+0x19c>
 800964a:	1d7b      	adds	r3, r7, #5
 800964c:	33ff      	adds	r3, #255	; 0xff
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	085b      	lsrs	r3, r3, #1
 8009652:	1c7a      	adds	r2, r7, #1
 8009654:	32ff      	adds	r2, #255	; 0xff
 8009656:	6013      	str	r3, [r2, #0]
 8009658:	1d7b      	adds	r3, r7, #5
 800965a:	33ff      	adds	r3, #255	; 0xff
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	2201      	movs	r2, #1
 8009660:	4013      	ands	r3, r2
 8009662:	d006      	beq.n	8009672 <USB_EPStartXfer+0x18a>
 8009664:	1c7b      	adds	r3, r7, #1
 8009666:	33ff      	adds	r3, #255	; 0xff
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	3301      	adds	r3, #1
 800966c:	1c7a      	adds	r2, r7, #1
 800966e:	32ff      	adds	r2, #255	; 0xff
 8009670:	6013      	str	r3, [r2, #0]
 8009672:	1c7b      	adds	r3, r7, #1
 8009674:	33ff      	adds	r3, #255	; 0xff
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	b29b      	uxth	r3, r3
 800967a:	029b      	lsls	r3, r3, #10
 800967c:	b29a      	uxth	r2, r3
 800967e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009680:	801a      	strh	r2, [r3, #0]
 8009682:	e03a      	b.n	80096fa <USB_EPStartXfer+0x212>
 8009684:	1d7b      	adds	r3, r7, #5
 8009686:	33ff      	adds	r3, #255	; 0xff
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	095b      	lsrs	r3, r3, #5
 800968c:	1c7a      	adds	r2, r7, #1
 800968e:	32ff      	adds	r2, #255	; 0xff
 8009690:	6013      	str	r3, [r2, #0]
 8009692:	1d7b      	adds	r3, r7, #5
 8009694:	33ff      	adds	r3, #255	; 0xff
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	221f      	movs	r2, #31
 800969a:	4013      	ands	r3, r2
 800969c:	d106      	bne.n	80096ac <USB_EPStartXfer+0x1c4>
 800969e:	1c7b      	adds	r3, r7, #1
 80096a0:	33ff      	adds	r3, #255	; 0xff
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3b01      	subs	r3, #1
 80096a6:	1c7a      	adds	r2, r7, #1
 80096a8:	32ff      	adds	r2, #255	; 0xff
 80096aa:	6013      	str	r3, [r2, #0]
 80096ac:	1c7b      	adds	r3, r7, #1
 80096ae:	33ff      	adds	r3, #255	; 0xff
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	029b      	lsls	r3, r3, #10
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	4a7a      	ldr	r2, [pc, #488]	; (80098a4 <USB_EPStartXfer+0x3bc>)
 80096ba:	4313      	orrs	r3, r2
 80096bc:	b29a      	uxth	r2, r3
 80096be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c0:	801a      	strh	r2, [r3, #0]
 80096c2:	e01a      	b.n	80096fa <USB_EPStartXfer+0x212>
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	785b      	ldrb	r3, [r3, #1]
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d116      	bne.n	80096fa <USB_EPStartXfer+0x212>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2250      	movs	r2, #80	; 0x50
 80096d0:	5a9b      	ldrh	r3, [r3, r2]
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	001a      	movs	r2, r3
 80096d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d8:	189b      	adds	r3, r3, r2
 80096da:	633b      	str	r3, [r7, #48]	; 0x30
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	00da      	lsls	r2, r3, #3
 80096e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e4:	18d3      	adds	r3, r2, r3
 80096e6:	4a6d      	ldr	r2, [pc, #436]	; (800989c <USB_EPStartXfer+0x3b4>)
 80096e8:	4694      	mov	ip, r2
 80096ea:	4463      	add	r3, ip
 80096ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096ee:	1d7b      	adds	r3, r7, #5
 80096f0:	33ff      	adds	r3, #255	; 0xff
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	b29a      	uxth	r2, r3
 80096f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80096fa:	2076      	movs	r0, #118	; 0x76
 80096fc:	183b      	adds	r3, r7, r0
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	8952      	ldrh	r2, [r2, #10]
 8009702:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	6959      	ldr	r1, [r3, #20]
 8009708:	1d7b      	adds	r3, r7, #5
 800970a:	33ff      	adds	r3, #255	; 0xff
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	b29c      	uxth	r4, r3
 8009710:	183b      	adds	r3, r7, r0
 8009712:	881a      	ldrh	r2, [r3, #0]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	0023      	movs	r3, r4
 8009718:	f001 f8da 	bl	800a8d0 <USB_WritePMA>
            ep->xfer_buff += len;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	695a      	ldr	r2, [r3, #20]
 8009720:	1d7b      	adds	r3, r7, #5
 8009722:	33ff      	adds	r3, #255	; 0xff
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	18d2      	adds	r2, r2, r3
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	6a1a      	ldr	r2, [r3, #32]
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	691b      	ldr	r3, [r3, #16]
 8009734:	429a      	cmp	r2, r3
 8009736:	d908      	bls.n	800974a <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	6a1a      	ldr	r2, [r3, #32]
 800973c:	1d7b      	adds	r3, r7, #5
 800973e:	33ff      	adds	r3, #255	; 0xff
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	1ad2      	subs	r2, r2, r3
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	621a      	str	r2, [r3, #32]
 8009748:	e007      	b.n	800975a <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	6a1b      	ldr	r3, [r3, #32]
 800974e:	1d7a      	adds	r2, r7, #5
 8009750:	32ff      	adds	r2, #255	; 0xff
 8009752:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	2200      	movs	r2, #0
 8009758:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	785b      	ldrb	r3, [r3, #1]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d166      	bne.n	8009830 <USB_EPStartXfer+0x348>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	61bb      	str	r3, [r7, #24]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2250      	movs	r2, #80	; 0x50
 800976a:	5a9b      	ldrh	r3, [r3, r2]
 800976c:	b29b      	uxth	r3, r3
 800976e:	001a      	movs	r2, r3
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	189b      	adds	r3, r3, r2
 8009774:	61bb      	str	r3, [r7, #24]
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	00da      	lsls	r2, r3, #3
 800977c:	69bb      	ldr	r3, [r7, #24]
 800977e:	18d3      	adds	r3, r2, r3
 8009780:	4a43      	ldr	r2, [pc, #268]	; (8009890 <USB_EPStartXfer+0x3a8>)
 8009782:	4694      	mov	ip, r2
 8009784:	4463      	add	r3, ip
 8009786:	617b      	str	r3, [r7, #20]
 8009788:	1d7b      	adds	r3, r7, #5
 800978a:	33ff      	adds	r3, #255	; 0xff
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d110      	bne.n	80097b4 <USB_EPStartXfer+0x2cc>
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	881b      	ldrh	r3, [r3, #0]
 8009796:	b29b      	uxth	r3, r3
 8009798:	4a41      	ldr	r2, [pc, #260]	; (80098a0 <USB_EPStartXfer+0x3b8>)
 800979a:	4013      	ands	r3, r2
 800979c:	b29a      	uxth	r2, r3
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	801a      	strh	r2, [r3, #0]
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	881b      	ldrh	r3, [r3, #0]
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	4a3e      	ldr	r2, [pc, #248]	; (80098a4 <USB_EPStartXfer+0x3bc>)
 80097aa:	4313      	orrs	r3, r2
 80097ac:	b29a      	uxth	r2, r3
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	801a      	strh	r2, [r3, #0]
 80097b2:	e05a      	b.n	800986a <USB_EPStartXfer+0x382>
 80097b4:	1d7b      	adds	r3, r7, #5
 80097b6:	33ff      	adds	r3, #255	; 0xff
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2b3e      	cmp	r3, #62	; 0x3e
 80097bc:	d81a      	bhi.n	80097f4 <USB_EPStartXfer+0x30c>
 80097be:	1d7b      	adds	r3, r7, #5
 80097c0:	33ff      	adds	r3, #255	; 0xff
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	085b      	lsrs	r3, r3, #1
 80097c6:	21fc      	movs	r1, #252	; 0xfc
 80097c8:	187a      	adds	r2, r7, r1
 80097ca:	6013      	str	r3, [r2, #0]
 80097cc:	1d7b      	adds	r3, r7, #5
 80097ce:	33ff      	adds	r3, #255	; 0xff
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2201      	movs	r2, #1
 80097d4:	4013      	ands	r3, r2
 80097d6:	d004      	beq.n	80097e2 <USB_EPStartXfer+0x2fa>
 80097d8:	187b      	adds	r3, r7, r1
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	3301      	adds	r3, #1
 80097de:	187a      	adds	r2, r7, r1
 80097e0:	6013      	str	r3, [r2, #0]
 80097e2:	23fc      	movs	r3, #252	; 0xfc
 80097e4:	18fb      	adds	r3, r7, r3
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	029b      	lsls	r3, r3, #10
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	801a      	strh	r2, [r3, #0]
 80097f2:	e03a      	b.n	800986a <USB_EPStartXfer+0x382>
 80097f4:	1d7b      	adds	r3, r7, #5
 80097f6:	33ff      	adds	r3, #255	; 0xff
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	095b      	lsrs	r3, r3, #5
 80097fc:	21fc      	movs	r1, #252	; 0xfc
 80097fe:	187a      	adds	r2, r7, r1
 8009800:	6013      	str	r3, [r2, #0]
 8009802:	1d7b      	adds	r3, r7, #5
 8009804:	33ff      	adds	r3, #255	; 0xff
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	221f      	movs	r2, #31
 800980a:	4013      	ands	r3, r2
 800980c:	d104      	bne.n	8009818 <USB_EPStartXfer+0x330>
 800980e:	187b      	adds	r3, r7, r1
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	3b01      	subs	r3, #1
 8009814:	187a      	adds	r2, r7, r1
 8009816:	6013      	str	r3, [r2, #0]
 8009818:	23fc      	movs	r3, #252	; 0xfc
 800981a:	18fb      	adds	r3, r7, r3
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	b29b      	uxth	r3, r3
 8009820:	029b      	lsls	r3, r3, #10
 8009822:	b29b      	uxth	r3, r3
 8009824:	4a1f      	ldr	r2, [pc, #124]	; (80098a4 <USB_EPStartXfer+0x3bc>)
 8009826:	4313      	orrs	r3, r2
 8009828:	b29a      	uxth	r2, r3
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	801a      	strh	r2, [r3, #0]
 800982e:	e01c      	b.n	800986a <USB_EPStartXfer+0x382>
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	785b      	ldrb	r3, [r3, #1]
 8009834:	2b01      	cmp	r3, #1
 8009836:	d118      	bne.n	800986a <USB_EPStartXfer+0x382>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	623b      	str	r3, [r7, #32]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2250      	movs	r2, #80	; 0x50
 8009840:	5a9b      	ldrh	r3, [r3, r2]
 8009842:	b29b      	uxth	r3, r3
 8009844:	001a      	movs	r2, r3
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	189b      	adds	r3, r3, r2
 800984a:	623b      	str	r3, [r7, #32]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	00da      	lsls	r2, r3, #3
 8009852:	6a3b      	ldr	r3, [r7, #32]
 8009854:	18d3      	adds	r3, r2, r3
 8009856:	4a0e      	ldr	r2, [pc, #56]	; (8009890 <USB_EPStartXfer+0x3a8>)
 8009858:	4694      	mov	ip, r2
 800985a:	4463      	add	r3, ip
 800985c:	61fb      	str	r3, [r7, #28]
 800985e:	1d7b      	adds	r3, r7, #5
 8009860:	33ff      	adds	r3, #255	; 0xff
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	b29a      	uxth	r2, r3
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800986a:	2076      	movs	r0, #118	; 0x76
 800986c:	183b      	adds	r3, r7, r0
 800986e:	683a      	ldr	r2, [r7, #0]
 8009870:	8912      	ldrh	r2, [r2, #8]
 8009872:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	6959      	ldr	r1, [r3, #20]
 8009878:	1d7b      	adds	r3, r7, #5
 800987a:	33ff      	adds	r3, #255	; 0xff
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	b29c      	uxth	r4, r3
 8009880:	183b      	adds	r3, r7, r0
 8009882:	881a      	ldrh	r2, [r3, #0]
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	0023      	movs	r3, r4
 8009888:	f001 f822 	bl	800a8d0 <USB_WritePMA>
 800988c:	e301      	b.n	8009e92 <USB_EPStartXfer+0x9aa>
 800988e:	46c0      	nop			; (mov r8, r8)
 8009890:	00000402 	.word	0x00000402
 8009894:	ffff8f8f 	.word	0xffff8f8f
 8009898:	ffff8180 	.word	0xffff8180
 800989c:	00000406 	.word	0x00000406
 80098a0:	ffff83ff 	.word	0xffff83ff
 80098a4:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	785b      	ldrb	r3, [r3, #1]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d166      	bne.n	800997e <USB_EPStartXfer+0x496>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2250      	movs	r2, #80	; 0x50
 80098b8:	5a9b      	ldrh	r3, [r3, r2]
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	001a      	movs	r2, r3
 80098be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098c0:	189b      	adds	r3, r3, r2
 80098c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	00da      	lsls	r2, r3, #3
 80098ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098cc:	18d3      	adds	r3, r2, r3
 80098ce:	4ac3      	ldr	r2, [pc, #780]	; (8009bdc <USB_EPStartXfer+0x6f4>)
 80098d0:	4694      	mov	ip, r2
 80098d2:	4463      	add	r3, ip
 80098d4:	647b      	str	r3, [r7, #68]	; 0x44
 80098d6:	1d7b      	adds	r3, r7, #5
 80098d8:	33ff      	adds	r3, #255	; 0xff
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d110      	bne.n	8009902 <USB_EPStartXfer+0x41a>
 80098e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098e2:	881b      	ldrh	r3, [r3, #0]
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	4abe      	ldr	r2, [pc, #760]	; (8009be0 <USB_EPStartXfer+0x6f8>)
 80098e8:	4013      	ands	r3, r2
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098ee:	801a      	strh	r2, [r3, #0]
 80098f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098f2:	881b      	ldrh	r3, [r3, #0]
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	4abb      	ldr	r2, [pc, #748]	; (8009be4 <USB_EPStartXfer+0x6fc>)
 80098f8:	4313      	orrs	r3, r2
 80098fa:	b29a      	uxth	r2, r3
 80098fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098fe:	801a      	strh	r2, [r3, #0]
 8009900:	e05a      	b.n	80099b8 <USB_EPStartXfer+0x4d0>
 8009902:	1d7b      	adds	r3, r7, #5
 8009904:	33ff      	adds	r3, #255	; 0xff
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	2b3e      	cmp	r3, #62	; 0x3e
 800990a:	d81a      	bhi.n	8009942 <USB_EPStartXfer+0x45a>
 800990c:	1d7b      	adds	r3, r7, #5
 800990e:	33ff      	adds	r3, #255	; 0xff
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	085b      	lsrs	r3, r3, #1
 8009914:	21f8      	movs	r1, #248	; 0xf8
 8009916:	187a      	adds	r2, r7, r1
 8009918:	6013      	str	r3, [r2, #0]
 800991a:	1d7b      	adds	r3, r7, #5
 800991c:	33ff      	adds	r3, #255	; 0xff
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2201      	movs	r2, #1
 8009922:	4013      	ands	r3, r2
 8009924:	d004      	beq.n	8009930 <USB_EPStartXfer+0x448>
 8009926:	187b      	adds	r3, r7, r1
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	3301      	adds	r3, #1
 800992c:	187a      	adds	r2, r7, r1
 800992e:	6013      	str	r3, [r2, #0]
 8009930:	23f8      	movs	r3, #248	; 0xf8
 8009932:	18fb      	adds	r3, r7, r3
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	b29b      	uxth	r3, r3
 8009938:	029b      	lsls	r3, r3, #10
 800993a:	b29a      	uxth	r2, r3
 800993c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800993e:	801a      	strh	r2, [r3, #0]
 8009940:	e03a      	b.n	80099b8 <USB_EPStartXfer+0x4d0>
 8009942:	1d7b      	adds	r3, r7, #5
 8009944:	33ff      	adds	r3, #255	; 0xff
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	095b      	lsrs	r3, r3, #5
 800994a:	21f8      	movs	r1, #248	; 0xf8
 800994c:	187a      	adds	r2, r7, r1
 800994e:	6013      	str	r3, [r2, #0]
 8009950:	1d7b      	adds	r3, r7, #5
 8009952:	33ff      	adds	r3, #255	; 0xff
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	221f      	movs	r2, #31
 8009958:	4013      	ands	r3, r2
 800995a:	d104      	bne.n	8009966 <USB_EPStartXfer+0x47e>
 800995c:	187b      	adds	r3, r7, r1
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	3b01      	subs	r3, #1
 8009962:	187a      	adds	r2, r7, r1
 8009964:	6013      	str	r3, [r2, #0]
 8009966:	23f8      	movs	r3, #248	; 0xf8
 8009968:	18fb      	adds	r3, r7, r3
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	b29b      	uxth	r3, r3
 800996e:	029b      	lsls	r3, r3, #10
 8009970:	b29b      	uxth	r3, r3
 8009972:	4a9c      	ldr	r2, [pc, #624]	; (8009be4 <USB_EPStartXfer+0x6fc>)
 8009974:	4313      	orrs	r3, r2
 8009976:	b29a      	uxth	r2, r3
 8009978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800997a:	801a      	strh	r2, [r3, #0]
 800997c:	e01c      	b.n	80099b8 <USB_EPStartXfer+0x4d0>
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	785b      	ldrb	r3, [r3, #1]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d118      	bne.n	80099b8 <USB_EPStartXfer+0x4d0>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	653b      	str	r3, [r7, #80]	; 0x50
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2250      	movs	r2, #80	; 0x50
 800998e:	5a9b      	ldrh	r3, [r3, r2]
 8009990:	b29b      	uxth	r3, r3
 8009992:	001a      	movs	r2, r3
 8009994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009996:	189b      	adds	r3, r3, r2
 8009998:	653b      	str	r3, [r7, #80]	; 0x50
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	00da      	lsls	r2, r3, #3
 80099a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099a2:	18d3      	adds	r3, r2, r3
 80099a4:	4a8d      	ldr	r2, [pc, #564]	; (8009bdc <USB_EPStartXfer+0x6f4>)
 80099a6:	4694      	mov	ip, r2
 80099a8:	4463      	add	r3, ip
 80099aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099ac:	1d7b      	adds	r3, r7, #5
 80099ae:	33ff      	adds	r3, #255	; 0xff
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80099b8:	2076      	movs	r0, #118	; 0x76
 80099ba:	183b      	adds	r3, r7, r0
 80099bc:	683a      	ldr	r2, [r7, #0]
 80099be:	8912      	ldrh	r2, [r2, #8]
 80099c0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	6959      	ldr	r1, [r3, #20]
 80099c6:	1d7b      	adds	r3, r7, #5
 80099c8:	33ff      	adds	r3, #255	; 0xff
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	b29c      	uxth	r4, r3
 80099ce:	183b      	adds	r3, r7, r0
 80099d0:	881a      	ldrh	r2, [r3, #0]
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	0023      	movs	r3, r4
 80099d6:	f000 ff7b 	bl	800a8d0 <USB_WritePMA>
            ep->xfer_buff += len;
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	695a      	ldr	r2, [r3, #20]
 80099de:	1d7b      	adds	r3, r7, #5
 80099e0:	33ff      	adds	r3, #255	; 0xff
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	18d2      	adds	r2, r2, r3
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	6a1a      	ldr	r2, [r3, #32]
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d908      	bls.n	8009a08 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	6a1a      	ldr	r2, [r3, #32]
 80099fa:	1d7b      	adds	r3, r7, #5
 80099fc:	33ff      	adds	r3, #255	; 0xff
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	1ad2      	subs	r2, r2, r3
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	621a      	str	r2, [r3, #32]
 8009a06:	e007      	b.n	8009a18 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	6a1b      	ldr	r3, [r3, #32]
 8009a0c:	1d7a      	adds	r2, r7, #5
 8009a0e:	32ff      	adds	r2, #255	; 0xff
 8009a10:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	2200      	movs	r2, #0
 8009a16:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	643b      	str	r3, [r7, #64]	; 0x40
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	785b      	ldrb	r3, [r3, #1]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d166      	bne.n	8009af2 <USB_EPStartXfer+0x60a>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2250      	movs	r2, #80	; 0x50
 8009a2c:	5a9b      	ldrh	r3, [r3, r2]
 8009a2e:	b29b      	uxth	r3, r3
 8009a30:	001a      	movs	r2, r3
 8009a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a34:	189b      	adds	r3, r3, r2
 8009a36:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	00da      	lsls	r2, r3, #3
 8009a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a40:	18d3      	adds	r3, r2, r3
 8009a42:	4a69      	ldr	r2, [pc, #420]	; (8009be8 <USB_EPStartXfer+0x700>)
 8009a44:	4694      	mov	ip, r2
 8009a46:	4463      	add	r3, ip
 8009a48:	637b      	str	r3, [r7, #52]	; 0x34
 8009a4a:	1d7b      	adds	r3, r7, #5
 8009a4c:	33ff      	adds	r3, #255	; 0xff
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d110      	bne.n	8009a76 <USB_EPStartXfer+0x58e>
 8009a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a56:	881b      	ldrh	r3, [r3, #0]
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	4a61      	ldr	r2, [pc, #388]	; (8009be0 <USB_EPStartXfer+0x6f8>)
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a62:	801a      	strh	r2, [r3, #0]
 8009a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a66:	881b      	ldrh	r3, [r3, #0]
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	4a5e      	ldr	r2, [pc, #376]	; (8009be4 <USB_EPStartXfer+0x6fc>)
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a72:	801a      	strh	r2, [r3, #0]
 8009a74:	e058      	b.n	8009b28 <USB_EPStartXfer+0x640>
 8009a76:	1d7b      	adds	r3, r7, #5
 8009a78:	33ff      	adds	r3, #255	; 0xff
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b3e      	cmp	r3, #62	; 0x3e
 8009a7e:	d81a      	bhi.n	8009ab6 <USB_EPStartXfer+0x5ce>
 8009a80:	1d7b      	adds	r3, r7, #5
 8009a82:	33ff      	adds	r3, #255	; 0xff
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	085b      	lsrs	r3, r3, #1
 8009a88:	21f4      	movs	r1, #244	; 0xf4
 8009a8a:	187a      	adds	r2, r7, r1
 8009a8c:	6013      	str	r3, [r2, #0]
 8009a8e:	1d7b      	adds	r3, r7, #5
 8009a90:	33ff      	adds	r3, #255	; 0xff
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2201      	movs	r2, #1
 8009a96:	4013      	ands	r3, r2
 8009a98:	d004      	beq.n	8009aa4 <USB_EPStartXfer+0x5bc>
 8009a9a:	187b      	adds	r3, r7, r1
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	187a      	adds	r2, r7, r1
 8009aa2:	6013      	str	r3, [r2, #0]
 8009aa4:	23f4      	movs	r3, #244	; 0xf4
 8009aa6:	18fb      	adds	r3, r7, r3
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	029b      	lsls	r3, r3, #10
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ab2:	801a      	strh	r2, [r3, #0]
 8009ab4:	e038      	b.n	8009b28 <USB_EPStartXfer+0x640>
 8009ab6:	1d7b      	adds	r3, r7, #5
 8009ab8:	33ff      	adds	r3, #255	; 0xff
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	095b      	lsrs	r3, r3, #5
 8009abe:	21f4      	movs	r1, #244	; 0xf4
 8009ac0:	187a      	adds	r2, r7, r1
 8009ac2:	6013      	str	r3, [r2, #0]
 8009ac4:	1d7b      	adds	r3, r7, #5
 8009ac6:	33ff      	adds	r3, #255	; 0xff
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	221f      	movs	r2, #31
 8009acc:	4013      	ands	r3, r2
 8009ace:	d104      	bne.n	8009ada <USB_EPStartXfer+0x5f2>
 8009ad0:	187b      	adds	r3, r7, r1
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	187a      	adds	r2, r7, r1
 8009ad8:	6013      	str	r3, [r2, #0]
 8009ada:	23f4      	movs	r3, #244	; 0xf4
 8009adc:	18fb      	adds	r3, r7, r3
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	029b      	lsls	r3, r3, #10
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	4a3f      	ldr	r2, [pc, #252]	; (8009be4 <USB_EPStartXfer+0x6fc>)
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aee:	801a      	strh	r2, [r3, #0]
 8009af0:	e01a      	b.n	8009b28 <USB_EPStartXfer+0x640>
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	785b      	ldrb	r3, [r3, #1]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d116      	bne.n	8009b28 <USB_EPStartXfer+0x640>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2250      	movs	r2, #80	; 0x50
 8009afe:	5a9b      	ldrh	r3, [r3, r2]
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	001a      	movs	r2, r3
 8009b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b06:	189b      	adds	r3, r3, r2
 8009b08:	643b      	str	r3, [r7, #64]	; 0x40
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	00da      	lsls	r2, r3, #3
 8009b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b12:	18d3      	adds	r3, r2, r3
 8009b14:	4a34      	ldr	r2, [pc, #208]	; (8009be8 <USB_EPStartXfer+0x700>)
 8009b16:	4694      	mov	ip, r2
 8009b18:	4463      	add	r3, ip
 8009b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b1c:	1d7b      	adds	r3, r7, #5
 8009b1e:	33ff      	adds	r3, #255	; 0xff
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	b29a      	uxth	r2, r3
 8009b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b26:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009b28:	2076      	movs	r0, #118	; 0x76
 8009b2a:	183b      	adds	r3, r7, r0
 8009b2c:	683a      	ldr	r2, [r7, #0]
 8009b2e:	8952      	ldrh	r2, [r2, #10]
 8009b30:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	6959      	ldr	r1, [r3, #20]
 8009b36:	1d7b      	adds	r3, r7, #5
 8009b38:	33ff      	adds	r3, #255	; 0xff
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	b29c      	uxth	r4, r3
 8009b3e:	183b      	adds	r3, r7, r0
 8009b40:	881a      	ldrh	r2, [r3, #0]
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	0023      	movs	r3, r4
 8009b46:	f000 fec3 	bl	800a8d0 <USB_WritePMA>
 8009b4a:	e1a2      	b.n	8009e92 <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	6a1b      	ldr	r3, [r3, #32]
 8009b50:	1d7a      	adds	r2, r7, #5
 8009b52:	32ff      	adds	r2, #255	; 0xff
 8009b54:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	18d3      	adds	r3, r2, r3
 8009b60:	881b      	ldrh	r3, [r3, #0]
 8009b62:	b29a      	uxth	r2, r3
 8009b64:	2062      	movs	r0, #98	; 0x62
 8009b66:	183b      	adds	r3, r7, r0
 8009b68:	4920      	ldr	r1, [pc, #128]	; (8009bec <USB_EPStartXfer+0x704>)
 8009b6a:	400a      	ands	r2, r1
 8009b6c:	801a      	strh	r2, [r3, #0]
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	18d3      	adds	r3, r2, r3
 8009b78:	183a      	adds	r2, r7, r0
 8009b7a:	8812      	ldrh	r2, [r2, #0]
 8009b7c:	491c      	ldr	r1, [pc, #112]	; (8009bf0 <USB_EPStartXfer+0x708>)
 8009b7e:	430a      	orrs	r2, r1
 8009b80:	b292      	uxth	r2, r2
 8009b82:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2250      	movs	r2, #80	; 0x50
 8009b8c:	5a9b      	ldrh	r3, [r3, r2]
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	001a      	movs	r2, r3
 8009b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b94:	189b      	adds	r3, r3, r2
 8009b96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	00da      	lsls	r2, r3, #3
 8009b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ba0:	18d3      	adds	r3, r2, r3
 8009ba2:	4a0e      	ldr	r2, [pc, #56]	; (8009bdc <USB_EPStartXfer+0x6f4>)
 8009ba4:	4694      	mov	ip, r2
 8009ba6:	4463      	add	r3, ip
 8009ba8:	65bb      	str	r3, [r7, #88]	; 0x58
 8009baa:	1d7b      	adds	r3, r7, #5
 8009bac:	33ff      	adds	r3, #255	; 0xff
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	b29a      	uxth	r2, r3
 8009bb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bb4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009bb6:	2076      	movs	r0, #118	; 0x76
 8009bb8:	183b      	adds	r3, r7, r0
 8009bba:	683a      	ldr	r2, [r7, #0]
 8009bbc:	8912      	ldrh	r2, [r2, #8]
 8009bbe:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	6959      	ldr	r1, [r3, #20]
 8009bc4:	1d7b      	adds	r3, r7, #5
 8009bc6:	33ff      	adds	r3, #255	; 0xff
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	b29c      	uxth	r4, r3
 8009bcc:	183b      	adds	r3, r7, r0
 8009bce:	881a      	ldrh	r2, [r3, #0]
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	0023      	movs	r3, r4
 8009bd4:	f000 fe7c 	bl	800a8d0 <USB_WritePMA>
 8009bd8:	e15b      	b.n	8009e92 <USB_EPStartXfer+0x9aa>
 8009bda:	46c0      	nop			; (mov r8, r8)
 8009bdc:	00000402 	.word	0x00000402
 8009be0:	ffff83ff 	.word	0xffff83ff
 8009be4:	ffff8000 	.word	0xffff8000
 8009be8:	00000406 	.word	0x00000406
 8009bec:	ffff8e8f 	.word	0xffff8e8f
 8009bf0:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	6a1a      	ldr	r2, [r3, #32]
 8009bf8:	1d7b      	adds	r3, r7, #5
 8009bfa:	33ff      	adds	r3, #255	; 0xff
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	1ad2      	subs	r2, r2, r3
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	18d3      	adds	r3, r2, r3
 8009c0e:	881b      	ldrh	r3, [r3, #0]
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	001a      	movs	r2, r3
 8009c14:	2340      	movs	r3, #64	; 0x40
 8009c16:	4013      	ands	r3, r2
 8009c18:	d100      	bne.n	8009c1c <USB_EPStartXfer+0x734>
 8009c1a:	e099      	b.n	8009d50 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	673b      	str	r3, [r7, #112]	; 0x70
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	785b      	ldrb	r3, [r3, #1]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d166      	bne.n	8009cf6 <USB_EPStartXfer+0x80e>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2250      	movs	r2, #80	; 0x50
 8009c30:	5a9b      	ldrh	r3, [r3, r2]
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	001a      	movs	r2, r3
 8009c36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c38:	189b      	adds	r3, r3, r2
 8009c3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	00da      	lsls	r2, r3, #3
 8009c42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c44:	18d3      	adds	r3, r2, r3
 8009c46:	4ad0      	ldr	r2, [pc, #832]	; (8009f88 <USB_EPStartXfer+0xaa0>)
 8009c48:	4694      	mov	ip, r2
 8009c4a:	4463      	add	r3, ip
 8009c4c:	667b      	str	r3, [r7, #100]	; 0x64
 8009c4e:	1d7b      	adds	r3, r7, #5
 8009c50:	33ff      	adds	r3, #255	; 0xff
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d110      	bne.n	8009c7a <USB_EPStartXfer+0x792>
 8009c58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c5a:	881b      	ldrh	r3, [r3, #0]
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	4acb      	ldr	r2, [pc, #812]	; (8009f8c <USB_EPStartXfer+0xaa4>)
 8009c60:	4013      	ands	r3, r2
 8009c62:	b29a      	uxth	r2, r3
 8009c64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c66:	801a      	strh	r2, [r3, #0]
 8009c68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c6a:	881b      	ldrh	r3, [r3, #0]
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	4ac8      	ldr	r2, [pc, #800]	; (8009f90 <USB_EPStartXfer+0xaa8>)
 8009c70:	4313      	orrs	r3, r2
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c76:	801a      	strh	r2, [r3, #0]
 8009c78:	e058      	b.n	8009d2c <USB_EPStartXfer+0x844>
 8009c7a:	1d7b      	adds	r3, r7, #5
 8009c7c:	33ff      	adds	r3, #255	; 0xff
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2b3e      	cmp	r3, #62	; 0x3e
 8009c82:	d81a      	bhi.n	8009cba <USB_EPStartXfer+0x7d2>
 8009c84:	1d7b      	adds	r3, r7, #5
 8009c86:	33ff      	adds	r3, #255	; 0xff
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	085b      	lsrs	r3, r3, #1
 8009c8c:	21f0      	movs	r1, #240	; 0xf0
 8009c8e:	187a      	adds	r2, r7, r1
 8009c90:	6013      	str	r3, [r2, #0]
 8009c92:	1d7b      	adds	r3, r7, #5
 8009c94:	33ff      	adds	r3, #255	; 0xff
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	4013      	ands	r3, r2
 8009c9c:	d004      	beq.n	8009ca8 <USB_EPStartXfer+0x7c0>
 8009c9e:	187b      	adds	r3, r7, r1
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	187a      	adds	r2, r7, r1
 8009ca6:	6013      	str	r3, [r2, #0]
 8009ca8:	23f0      	movs	r3, #240	; 0xf0
 8009caa:	18fb      	adds	r3, r7, r3
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	029b      	lsls	r3, r3, #10
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cb6:	801a      	strh	r2, [r3, #0]
 8009cb8:	e038      	b.n	8009d2c <USB_EPStartXfer+0x844>
 8009cba:	1d7b      	adds	r3, r7, #5
 8009cbc:	33ff      	adds	r3, #255	; 0xff
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	095b      	lsrs	r3, r3, #5
 8009cc2:	21f0      	movs	r1, #240	; 0xf0
 8009cc4:	187a      	adds	r2, r7, r1
 8009cc6:	6013      	str	r3, [r2, #0]
 8009cc8:	1d7b      	adds	r3, r7, #5
 8009cca:	33ff      	adds	r3, #255	; 0xff
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	221f      	movs	r2, #31
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	d104      	bne.n	8009cde <USB_EPStartXfer+0x7f6>
 8009cd4:	187b      	adds	r3, r7, r1
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	3b01      	subs	r3, #1
 8009cda:	187a      	adds	r2, r7, r1
 8009cdc:	6013      	str	r3, [r2, #0]
 8009cde:	23f0      	movs	r3, #240	; 0xf0
 8009ce0:	18fb      	adds	r3, r7, r3
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	029b      	lsls	r3, r3, #10
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	4aa9      	ldr	r2, [pc, #676]	; (8009f90 <USB_EPStartXfer+0xaa8>)
 8009cec:	4313      	orrs	r3, r2
 8009cee:	b29a      	uxth	r2, r3
 8009cf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cf2:	801a      	strh	r2, [r3, #0]
 8009cf4:	e01a      	b.n	8009d2c <USB_EPStartXfer+0x844>
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	785b      	ldrb	r3, [r3, #1]
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d116      	bne.n	8009d2c <USB_EPStartXfer+0x844>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2250      	movs	r2, #80	; 0x50
 8009d02:	5a9b      	ldrh	r3, [r3, r2]
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	001a      	movs	r2, r3
 8009d08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d0a:	189b      	adds	r3, r3, r2
 8009d0c:	673b      	str	r3, [r7, #112]	; 0x70
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	00da      	lsls	r2, r3, #3
 8009d14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d16:	18d3      	adds	r3, r2, r3
 8009d18:	4a9b      	ldr	r2, [pc, #620]	; (8009f88 <USB_EPStartXfer+0xaa0>)
 8009d1a:	4694      	mov	ip, r2
 8009d1c:	4463      	add	r3, ip
 8009d1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d20:	1d7b      	adds	r3, r7, #5
 8009d22:	33ff      	adds	r3, #255	; 0xff
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d2a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009d2c:	2076      	movs	r0, #118	; 0x76
 8009d2e:	183b      	adds	r3, r7, r0
 8009d30:	683a      	ldr	r2, [r7, #0]
 8009d32:	8952      	ldrh	r2, [r2, #10]
 8009d34:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	6959      	ldr	r1, [r3, #20]
 8009d3a:	1d7b      	adds	r3, r7, #5
 8009d3c:	33ff      	adds	r3, #255	; 0xff
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	b29c      	uxth	r4, r3
 8009d42:	183b      	adds	r3, r7, r0
 8009d44:	881a      	ldrh	r2, [r3, #0]
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	0023      	movs	r3, r4
 8009d4a:	f000 fdc1 	bl	800a8d0 <USB_WritePMA>
 8009d4e:	e0a0      	b.n	8009e92 <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	785b      	ldrb	r3, [r3, #1]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d166      	bne.n	8009e26 <USB_EPStartXfer+0x93e>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2250      	movs	r2, #80	; 0x50
 8009d60:	5a9b      	ldrh	r3, [r3, r2]
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	001a      	movs	r2, r3
 8009d66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d68:	189b      	adds	r3, r3, r2
 8009d6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	00da      	lsls	r2, r3, #3
 8009d72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009d74:	18d3      	adds	r3, r2, r3
 8009d76:	4a87      	ldr	r2, [pc, #540]	; (8009f94 <USB_EPStartXfer+0xaac>)
 8009d78:	4694      	mov	ip, r2
 8009d7a:	4463      	add	r3, ip
 8009d7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009d7e:	1d7b      	adds	r3, r7, #5
 8009d80:	33ff      	adds	r3, #255	; 0xff
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d110      	bne.n	8009daa <USB_EPStartXfer+0x8c2>
 8009d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d8a:	881b      	ldrh	r3, [r3, #0]
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	4a7f      	ldr	r2, [pc, #508]	; (8009f8c <USB_EPStartXfer+0xaa4>)
 8009d90:	4013      	ands	r3, r2
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d96:	801a      	strh	r2, [r3, #0]
 8009d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d9a:	881b      	ldrh	r3, [r3, #0]
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	4a7c      	ldr	r2, [pc, #496]	; (8009f90 <USB_EPStartXfer+0xaa8>)
 8009da0:	4313      	orrs	r3, r2
 8009da2:	b29a      	uxth	r2, r3
 8009da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009da6:	801a      	strh	r2, [r3, #0]
 8009da8:	e062      	b.n	8009e70 <USB_EPStartXfer+0x988>
 8009daa:	1d7b      	adds	r3, r7, #5
 8009dac:	33ff      	adds	r3, #255	; 0xff
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2b3e      	cmp	r3, #62	; 0x3e
 8009db2:	d81a      	bhi.n	8009dea <USB_EPStartXfer+0x902>
 8009db4:	1d7b      	adds	r3, r7, #5
 8009db6:	33ff      	adds	r3, #255	; 0xff
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	085b      	lsrs	r3, r3, #1
 8009dbc:	21ec      	movs	r1, #236	; 0xec
 8009dbe:	187a      	adds	r2, r7, r1
 8009dc0:	6013      	str	r3, [r2, #0]
 8009dc2:	1d7b      	adds	r3, r7, #5
 8009dc4:	33ff      	adds	r3, #255	; 0xff
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	4013      	ands	r3, r2
 8009dcc:	d004      	beq.n	8009dd8 <USB_EPStartXfer+0x8f0>
 8009dce:	187b      	adds	r3, r7, r1
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	187a      	adds	r2, r7, r1
 8009dd6:	6013      	str	r3, [r2, #0]
 8009dd8:	23ec      	movs	r3, #236	; 0xec
 8009dda:	18fb      	adds	r3, r7, r3
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	029b      	lsls	r3, r3, #10
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009de6:	801a      	strh	r2, [r3, #0]
 8009de8:	e042      	b.n	8009e70 <USB_EPStartXfer+0x988>
 8009dea:	1d7b      	adds	r3, r7, #5
 8009dec:	33ff      	adds	r3, #255	; 0xff
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	095b      	lsrs	r3, r3, #5
 8009df2:	21ec      	movs	r1, #236	; 0xec
 8009df4:	187a      	adds	r2, r7, r1
 8009df6:	6013      	str	r3, [r2, #0]
 8009df8:	1d7b      	adds	r3, r7, #5
 8009dfa:	33ff      	adds	r3, #255	; 0xff
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	221f      	movs	r2, #31
 8009e00:	4013      	ands	r3, r2
 8009e02:	d104      	bne.n	8009e0e <USB_EPStartXfer+0x926>
 8009e04:	187b      	adds	r3, r7, r1
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	187a      	adds	r2, r7, r1
 8009e0c:	6013      	str	r3, [r2, #0]
 8009e0e:	23ec      	movs	r3, #236	; 0xec
 8009e10:	18fb      	adds	r3, r7, r3
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	029b      	lsls	r3, r3, #10
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	4a5d      	ldr	r2, [pc, #372]	; (8009f90 <USB_EPStartXfer+0xaa8>)
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e22:	801a      	strh	r2, [r3, #0]
 8009e24:	e024      	b.n	8009e70 <USB_EPStartXfer+0x988>
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	785b      	ldrb	r3, [r3, #1]
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d120      	bne.n	8009e70 <USB_EPStartXfer+0x988>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2184      	movs	r1, #132	; 0x84
 8009e32:	187a      	adds	r2, r7, r1
 8009e34:	6013      	str	r3, [r2, #0]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2250      	movs	r2, #80	; 0x50
 8009e3a:	5a9b      	ldrh	r3, [r3, r2]
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	001a      	movs	r2, r3
 8009e40:	187b      	adds	r3, r7, r1
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	189b      	adds	r3, r3, r2
 8009e46:	187a      	adds	r2, r7, r1
 8009e48:	6013      	str	r3, [r2, #0]
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	00da      	lsls	r2, r3, #3
 8009e50:	187b      	adds	r3, r7, r1
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	18d3      	adds	r3, r2, r3
 8009e56:	4a4f      	ldr	r2, [pc, #316]	; (8009f94 <USB_EPStartXfer+0xaac>)
 8009e58:	4694      	mov	ip, r2
 8009e5a:	4463      	add	r3, ip
 8009e5c:	2180      	movs	r1, #128	; 0x80
 8009e5e:	187a      	adds	r2, r7, r1
 8009e60:	6013      	str	r3, [r2, #0]
 8009e62:	1d7b      	adds	r3, r7, #5
 8009e64:	33ff      	adds	r3, #255	; 0xff
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	b29a      	uxth	r2, r3
 8009e6a:	187b      	adds	r3, r7, r1
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009e70:	2076      	movs	r0, #118	; 0x76
 8009e72:	183b      	adds	r3, r7, r0
 8009e74:	683a      	ldr	r2, [r7, #0]
 8009e76:	8912      	ldrh	r2, [r2, #8]
 8009e78:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	6959      	ldr	r1, [r3, #20]
 8009e7e:	1d7b      	adds	r3, r7, #5
 8009e80:	33ff      	adds	r3, #255	; 0xff
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	b29c      	uxth	r4, r3
 8009e86:	183b      	adds	r3, r7, r0
 8009e88:	881a      	ldrh	r2, [r3, #0]
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	0023      	movs	r3, r4
 8009e8e:	f000 fd1f 	bl	800a8d0 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	781b      	ldrb	r3, [r3, #0]
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	18d3      	adds	r3, r2, r3
 8009e9c:	881b      	ldrh	r3, [r3, #0]
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	200a      	movs	r0, #10
 8009ea2:	183b      	adds	r3, r7, r0
 8009ea4:	493c      	ldr	r1, [pc, #240]	; (8009f98 <USB_EPStartXfer+0xab0>)
 8009ea6:	400a      	ands	r2, r1
 8009ea8:	801a      	strh	r2, [r3, #0]
 8009eaa:	183b      	adds	r3, r7, r0
 8009eac:	183a      	adds	r2, r7, r0
 8009eae:	8812      	ldrh	r2, [r2, #0]
 8009eb0:	2110      	movs	r1, #16
 8009eb2:	404a      	eors	r2, r1
 8009eb4:	801a      	strh	r2, [r3, #0]
 8009eb6:	183b      	adds	r3, r7, r0
 8009eb8:	183a      	adds	r2, r7, r0
 8009eba:	8812      	ldrh	r2, [r2, #0]
 8009ebc:	2120      	movs	r1, #32
 8009ebe:	404a      	eors	r2, r1
 8009ec0:	801a      	strh	r2, [r3, #0]
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	18d3      	adds	r3, r2, r3
 8009ecc:	183a      	adds	r2, r7, r0
 8009ece:	8812      	ldrh	r2, [r2, #0]
 8009ed0:	4932      	ldr	r1, [pc, #200]	; (8009f9c <USB_EPStartXfer+0xab4>)
 8009ed2:	430a      	orrs	r2, r1
 8009ed4:	b292      	uxth	r2, r2
 8009ed6:	801a      	strh	r2, [r3, #0]
 8009ed8:	f000 fbaf 	bl	800a63a <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	7b1b      	ldrb	r3, [r3, #12]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d000      	beq.n	8009ee6 <USB_EPStartXfer+0x9fe>
 8009ee4:	e09e      	b.n	800a024 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	699a      	ldr	r2, [r3, #24]
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d90d      	bls.n	8009f0e <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	1d7a      	adds	r2, r7, #5
 8009ef8:	32ff      	adds	r2, #255	; 0xff
 8009efa:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	699a      	ldr	r2, [r3, #24]
 8009f00:	1d7b      	adds	r3, r7, #5
 8009f02:	33ff      	adds	r3, #255	; 0xff
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	1ad2      	subs	r2, r2, r3
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	619a      	str	r2, [r3, #24]
 8009f0c:	e007      	b.n	8009f1e <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	699b      	ldr	r3, [r3, #24]
 8009f12:	1d7a      	adds	r2, r7, #5
 8009f14:	32ff      	adds	r2, #255	; 0xff
 8009f16:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2190      	movs	r1, #144	; 0x90
 8009f22:	187a      	adds	r2, r7, r1
 8009f24:	6013      	str	r3, [r2, #0]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2250      	movs	r2, #80	; 0x50
 8009f2a:	5a9b      	ldrh	r3, [r3, r2]
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	001a      	movs	r2, r3
 8009f30:	187b      	adds	r3, r7, r1
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	189b      	adds	r3, r3, r2
 8009f36:	187a      	adds	r2, r7, r1
 8009f38:	6013      	str	r3, [r2, #0]
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	00da      	lsls	r2, r3, #3
 8009f40:	187b      	adds	r3, r7, r1
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	18d3      	adds	r3, r2, r3
 8009f46:	4a10      	ldr	r2, [pc, #64]	; (8009f88 <USB_EPStartXfer+0xaa0>)
 8009f48:	4694      	mov	ip, r2
 8009f4a:	4463      	add	r3, ip
 8009f4c:	218c      	movs	r1, #140	; 0x8c
 8009f4e:	187a      	adds	r2, r7, r1
 8009f50:	6013      	str	r3, [r2, #0]
 8009f52:	1d7b      	adds	r3, r7, #5
 8009f54:	33ff      	adds	r3, #255	; 0xff
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d121      	bne.n	8009fa0 <USB_EPStartXfer+0xab8>
 8009f5c:	187b      	adds	r3, r7, r1
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	881b      	ldrh	r3, [r3, #0]
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	4a09      	ldr	r2, [pc, #36]	; (8009f8c <USB_EPStartXfer+0xaa4>)
 8009f66:	4013      	ands	r3, r2
 8009f68:	b29a      	uxth	r2, r3
 8009f6a:	187b      	adds	r3, r7, r1
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	801a      	strh	r2, [r3, #0]
 8009f70:	187b      	adds	r3, r7, r1
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	881b      	ldrh	r3, [r3, #0]
 8009f76:	b29b      	uxth	r3, r3
 8009f78:	4a05      	ldr	r2, [pc, #20]	; (8009f90 <USB_EPStartXfer+0xaa8>)
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	b29a      	uxth	r2, r3
 8009f7e:	187b      	adds	r3, r7, r1
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	801a      	strh	r2, [r3, #0]
 8009f84:	e334      	b.n	800a5f0 <USB_EPStartXfer+0x1108>
 8009f86:	46c0      	nop			; (mov r8, r8)
 8009f88:	00000406 	.word	0x00000406
 8009f8c:	ffff83ff 	.word	0xffff83ff
 8009f90:	ffff8000 	.word	0xffff8000
 8009f94:	00000402 	.word	0x00000402
 8009f98:	ffff8fbf 	.word	0xffff8fbf
 8009f9c:	ffff8080 	.word	0xffff8080
 8009fa0:	1d7b      	adds	r3, r7, #5
 8009fa2:	33ff      	adds	r3, #255	; 0xff
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2b3e      	cmp	r3, #62	; 0x3e
 8009fa8:	d81c      	bhi.n	8009fe4 <USB_EPStartXfer+0xafc>
 8009faa:	1d7b      	adds	r3, r7, #5
 8009fac:	33ff      	adds	r3, #255	; 0xff
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	085b      	lsrs	r3, r3, #1
 8009fb2:	21e8      	movs	r1, #232	; 0xe8
 8009fb4:	187a      	adds	r2, r7, r1
 8009fb6:	6013      	str	r3, [r2, #0]
 8009fb8:	1d7b      	adds	r3, r7, #5
 8009fba:	33ff      	adds	r3, #255	; 0xff
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	d004      	beq.n	8009fce <USB_EPStartXfer+0xae6>
 8009fc4:	187b      	adds	r3, r7, r1
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	187a      	adds	r2, r7, r1
 8009fcc:	6013      	str	r3, [r2, #0]
 8009fce:	23e8      	movs	r3, #232	; 0xe8
 8009fd0:	18fb      	adds	r3, r7, r3
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	029b      	lsls	r3, r3, #10
 8009fd8:	b29a      	uxth	r2, r3
 8009fda:	238c      	movs	r3, #140	; 0x8c
 8009fdc:	18fb      	adds	r3, r7, r3
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	801a      	strh	r2, [r3, #0]
 8009fe2:	e305      	b.n	800a5f0 <USB_EPStartXfer+0x1108>
 8009fe4:	1d7b      	adds	r3, r7, #5
 8009fe6:	33ff      	adds	r3, #255	; 0xff
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	095b      	lsrs	r3, r3, #5
 8009fec:	21e8      	movs	r1, #232	; 0xe8
 8009fee:	187a      	adds	r2, r7, r1
 8009ff0:	6013      	str	r3, [r2, #0]
 8009ff2:	1d7b      	adds	r3, r7, #5
 8009ff4:	33ff      	adds	r3, #255	; 0xff
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	221f      	movs	r2, #31
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	d104      	bne.n	800a008 <USB_EPStartXfer+0xb20>
 8009ffe:	187b      	adds	r3, r7, r1
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	3b01      	subs	r3, #1
 800a004:	187a      	adds	r2, r7, r1
 800a006:	6013      	str	r3, [r2, #0]
 800a008:	23e8      	movs	r3, #232	; 0xe8
 800a00a:	18fb      	adds	r3, r7, r3
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	b29b      	uxth	r3, r3
 800a010:	029b      	lsls	r3, r3, #10
 800a012:	b29b      	uxth	r3, r3
 800a014:	4aca      	ldr	r2, [pc, #808]	; (800a340 <USB_EPStartXfer+0xe58>)
 800a016:	4313      	orrs	r3, r2
 800a018:	b29a      	uxth	r2, r3
 800a01a:	238c      	movs	r3, #140	; 0x8c
 800a01c:	18fb      	adds	r3, r7, r3
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	801a      	strh	r2, [r3, #0]
 800a022:	e2e5      	b.n	800a5f0 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	78db      	ldrb	r3, [r3, #3]
 800a028:	2b02      	cmp	r3, #2
 800a02a:	d000      	beq.n	800a02e <USB_EPStartXfer+0xb46>
 800a02c:	e16f      	b.n	800a30e <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	785b      	ldrb	r3, [r3, #1]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d16f      	bne.n	800a116 <USB_EPStartXfer+0xc2e>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	21ac      	movs	r1, #172	; 0xac
 800a03a:	187a      	adds	r2, r7, r1
 800a03c:	6013      	str	r3, [r2, #0]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2250      	movs	r2, #80	; 0x50
 800a042:	5a9b      	ldrh	r3, [r3, r2]
 800a044:	b29b      	uxth	r3, r3
 800a046:	001a      	movs	r2, r3
 800a048:	187b      	adds	r3, r7, r1
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	189b      	adds	r3, r3, r2
 800a04e:	187a      	adds	r2, r7, r1
 800a050:	6013      	str	r3, [r2, #0]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	00da      	lsls	r2, r3, #3
 800a058:	187b      	adds	r3, r7, r1
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	18d3      	adds	r3, r2, r3
 800a05e:	4ab9      	ldr	r2, [pc, #740]	; (800a344 <USB_EPStartXfer+0xe5c>)
 800a060:	4694      	mov	ip, r2
 800a062:	4463      	add	r3, ip
 800a064:	21a8      	movs	r1, #168	; 0xa8
 800a066:	187a      	adds	r2, r7, r1
 800a068:	6013      	str	r3, [r2, #0]
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	691b      	ldr	r3, [r3, #16]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d114      	bne.n	800a09c <USB_EPStartXfer+0xbb4>
 800a072:	187b      	adds	r3, r7, r1
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	881b      	ldrh	r3, [r3, #0]
 800a078:	b29b      	uxth	r3, r3
 800a07a:	4ab3      	ldr	r2, [pc, #716]	; (800a348 <USB_EPStartXfer+0xe60>)
 800a07c:	4013      	ands	r3, r2
 800a07e:	b29a      	uxth	r2, r3
 800a080:	187b      	adds	r3, r7, r1
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	801a      	strh	r2, [r3, #0]
 800a086:	187b      	adds	r3, r7, r1
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	881b      	ldrh	r3, [r3, #0]
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	4aac      	ldr	r2, [pc, #688]	; (800a340 <USB_EPStartXfer+0xe58>)
 800a090:	4313      	orrs	r3, r2
 800a092:	b29a      	uxth	r2, r3
 800a094:	187b      	adds	r3, r7, r1
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	801a      	strh	r2, [r3, #0]
 800a09a:	e060      	b.n	800a15e <USB_EPStartXfer+0xc76>
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	2b3e      	cmp	r3, #62	; 0x3e
 800a0a2:	d81a      	bhi.n	800a0da <USB_EPStartXfer+0xbf2>
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	085b      	lsrs	r3, r3, #1
 800a0aa:	21e4      	movs	r1, #228	; 0xe4
 800a0ac:	187a      	adds	r2, r7, r1
 800a0ae:	6013      	str	r3, [r2, #0]
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	691b      	ldr	r3, [r3, #16]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	d004      	beq.n	800a0c4 <USB_EPStartXfer+0xbdc>
 800a0ba:	187b      	adds	r3, r7, r1
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	187a      	adds	r2, r7, r1
 800a0c2:	6013      	str	r3, [r2, #0]
 800a0c4:	23e4      	movs	r3, #228	; 0xe4
 800a0c6:	18fb      	adds	r3, r7, r3
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	029b      	lsls	r3, r3, #10
 800a0ce:	b29a      	uxth	r2, r3
 800a0d0:	23a8      	movs	r3, #168	; 0xa8
 800a0d2:	18fb      	adds	r3, r7, r3
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	801a      	strh	r2, [r3, #0]
 800a0d8:	e041      	b.n	800a15e <USB_EPStartXfer+0xc76>
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	095b      	lsrs	r3, r3, #5
 800a0e0:	21e4      	movs	r1, #228	; 0xe4
 800a0e2:	187a      	adds	r2, r7, r1
 800a0e4:	6013      	str	r3, [r2, #0]
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	221f      	movs	r2, #31
 800a0ec:	4013      	ands	r3, r2
 800a0ee:	d104      	bne.n	800a0fa <USB_EPStartXfer+0xc12>
 800a0f0:	187b      	adds	r3, r7, r1
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	187a      	adds	r2, r7, r1
 800a0f8:	6013      	str	r3, [r2, #0]
 800a0fa:	23e4      	movs	r3, #228	; 0xe4
 800a0fc:	18fb      	adds	r3, r7, r3
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	b29b      	uxth	r3, r3
 800a102:	029b      	lsls	r3, r3, #10
 800a104:	b29b      	uxth	r3, r3
 800a106:	4a8e      	ldr	r2, [pc, #568]	; (800a340 <USB_EPStartXfer+0xe58>)
 800a108:	4313      	orrs	r3, r2
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	23a8      	movs	r3, #168	; 0xa8
 800a10e:	18fb      	adds	r3, r7, r3
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	801a      	strh	r2, [r3, #0]
 800a114:	e023      	b.n	800a15e <USB_EPStartXfer+0xc76>
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	785b      	ldrb	r3, [r3, #1]
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d11f      	bne.n	800a15e <USB_EPStartXfer+0xc76>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	21b4      	movs	r1, #180	; 0xb4
 800a122:	187a      	adds	r2, r7, r1
 800a124:	6013      	str	r3, [r2, #0]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2250      	movs	r2, #80	; 0x50
 800a12a:	5a9b      	ldrh	r3, [r3, r2]
 800a12c:	b29b      	uxth	r3, r3
 800a12e:	001a      	movs	r2, r3
 800a130:	187b      	adds	r3, r7, r1
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	189b      	adds	r3, r3, r2
 800a136:	187a      	adds	r2, r7, r1
 800a138:	6013      	str	r3, [r2, #0]
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	00da      	lsls	r2, r3, #3
 800a140:	187b      	adds	r3, r7, r1
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	18d3      	adds	r3, r2, r3
 800a146:	4a7f      	ldr	r2, [pc, #508]	; (800a344 <USB_EPStartXfer+0xe5c>)
 800a148:	4694      	mov	ip, r2
 800a14a:	4463      	add	r3, ip
 800a14c:	21b0      	movs	r1, #176	; 0xb0
 800a14e:	187a      	adds	r2, r7, r1
 800a150:	6013      	str	r3, [r2, #0]
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	b29a      	uxth	r2, r3
 800a158:	187b      	adds	r3, r7, r1
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	801a      	strh	r2, [r3, #0]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	22a4      	movs	r2, #164	; 0xa4
 800a162:	18ba      	adds	r2, r7, r2
 800a164:	6013      	str	r3, [r2, #0]
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	785b      	ldrb	r3, [r3, #1]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d16f      	bne.n	800a24e <USB_EPStartXfer+0xd66>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	219c      	movs	r1, #156	; 0x9c
 800a172:	187a      	adds	r2, r7, r1
 800a174:	6013      	str	r3, [r2, #0]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2250      	movs	r2, #80	; 0x50
 800a17a:	5a9b      	ldrh	r3, [r3, r2]
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	001a      	movs	r2, r3
 800a180:	187b      	adds	r3, r7, r1
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	189b      	adds	r3, r3, r2
 800a186:	187a      	adds	r2, r7, r1
 800a188:	6013      	str	r3, [r2, #0]
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	00da      	lsls	r2, r3, #3
 800a190:	187b      	adds	r3, r7, r1
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	18d3      	adds	r3, r2, r3
 800a196:	4a6d      	ldr	r2, [pc, #436]	; (800a34c <USB_EPStartXfer+0xe64>)
 800a198:	4694      	mov	ip, r2
 800a19a:	4463      	add	r3, ip
 800a19c:	2198      	movs	r1, #152	; 0x98
 800a19e:	187a      	adds	r2, r7, r1
 800a1a0:	6013      	str	r3, [r2, #0]
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	691b      	ldr	r3, [r3, #16]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d114      	bne.n	800a1d4 <USB_EPStartXfer+0xcec>
 800a1aa:	187b      	adds	r3, r7, r1
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	881b      	ldrh	r3, [r3, #0]
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	4a65      	ldr	r2, [pc, #404]	; (800a348 <USB_EPStartXfer+0xe60>)
 800a1b4:	4013      	ands	r3, r2
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	187b      	adds	r3, r7, r1
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	801a      	strh	r2, [r3, #0]
 800a1be:	187b      	adds	r3, r7, r1
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	881b      	ldrh	r3, [r3, #0]
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	4a5e      	ldr	r2, [pc, #376]	; (800a340 <USB_EPStartXfer+0xe58>)
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	187b      	adds	r3, r7, r1
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	801a      	strh	r2, [r3, #0]
 800a1d2:	e05d      	b.n	800a290 <USB_EPStartXfer+0xda8>
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	2b3e      	cmp	r3, #62	; 0x3e
 800a1da:	d81a      	bhi.n	800a212 <USB_EPStartXfer+0xd2a>
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	085b      	lsrs	r3, r3, #1
 800a1e2:	21e0      	movs	r1, #224	; 0xe0
 800a1e4:	187a      	adds	r2, r7, r1
 800a1e6:	6013      	str	r3, [r2, #0]
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	4013      	ands	r3, r2
 800a1f0:	d004      	beq.n	800a1fc <USB_EPStartXfer+0xd14>
 800a1f2:	187b      	adds	r3, r7, r1
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	187a      	adds	r2, r7, r1
 800a1fa:	6013      	str	r3, [r2, #0]
 800a1fc:	23e0      	movs	r3, #224	; 0xe0
 800a1fe:	18fb      	adds	r3, r7, r3
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	b29b      	uxth	r3, r3
 800a204:	029b      	lsls	r3, r3, #10
 800a206:	b29a      	uxth	r2, r3
 800a208:	2398      	movs	r3, #152	; 0x98
 800a20a:	18fb      	adds	r3, r7, r3
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	801a      	strh	r2, [r3, #0]
 800a210:	e03e      	b.n	800a290 <USB_EPStartXfer+0xda8>
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	691b      	ldr	r3, [r3, #16]
 800a216:	095b      	lsrs	r3, r3, #5
 800a218:	21e0      	movs	r1, #224	; 0xe0
 800a21a:	187a      	adds	r2, r7, r1
 800a21c:	6013      	str	r3, [r2, #0]
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	691b      	ldr	r3, [r3, #16]
 800a222:	221f      	movs	r2, #31
 800a224:	4013      	ands	r3, r2
 800a226:	d104      	bne.n	800a232 <USB_EPStartXfer+0xd4a>
 800a228:	187b      	adds	r3, r7, r1
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	3b01      	subs	r3, #1
 800a22e:	187a      	adds	r2, r7, r1
 800a230:	6013      	str	r3, [r2, #0]
 800a232:	23e0      	movs	r3, #224	; 0xe0
 800a234:	18fb      	adds	r3, r7, r3
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	b29b      	uxth	r3, r3
 800a23a:	029b      	lsls	r3, r3, #10
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	4a40      	ldr	r2, [pc, #256]	; (800a340 <USB_EPStartXfer+0xe58>)
 800a240:	4313      	orrs	r3, r2
 800a242:	b29a      	uxth	r2, r3
 800a244:	2398      	movs	r3, #152	; 0x98
 800a246:	18fb      	adds	r3, r7, r3
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	801a      	strh	r2, [r3, #0]
 800a24c:	e020      	b.n	800a290 <USB_EPStartXfer+0xda8>
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	785b      	ldrb	r3, [r3, #1]
 800a252:	2b01      	cmp	r3, #1
 800a254:	d11c      	bne.n	800a290 <USB_EPStartXfer+0xda8>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2250      	movs	r2, #80	; 0x50
 800a25a:	5a9b      	ldrh	r3, [r3, r2]
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	001a      	movs	r2, r3
 800a260:	21a4      	movs	r1, #164	; 0xa4
 800a262:	187b      	adds	r3, r7, r1
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	189b      	adds	r3, r3, r2
 800a268:	187a      	adds	r2, r7, r1
 800a26a:	6013      	str	r3, [r2, #0]
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	00da      	lsls	r2, r3, #3
 800a272:	187b      	adds	r3, r7, r1
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	18d3      	adds	r3, r2, r3
 800a278:	4a34      	ldr	r2, [pc, #208]	; (800a34c <USB_EPStartXfer+0xe64>)
 800a27a:	4694      	mov	ip, r2
 800a27c:	4463      	add	r3, ip
 800a27e:	21a0      	movs	r1, #160	; 0xa0
 800a280:	187a      	adds	r2, r7, r1
 800a282:	6013      	str	r3, [r2, #0]
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	691b      	ldr	r3, [r3, #16]
 800a288:	b29a      	uxth	r2, r3
 800a28a:	187b      	adds	r3, r7, r1
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	69db      	ldr	r3, [r3, #28]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d100      	bne.n	800a29a <USB_EPStartXfer+0xdb2>
 800a298:	e1aa      	b.n	800a5f0 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	18d2      	adds	r2, r2, r3
 800a2a4:	2196      	movs	r1, #150	; 0x96
 800a2a6:	187b      	adds	r3, r7, r1
 800a2a8:	8812      	ldrh	r2, [r2, #0]
 800a2aa:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a2ac:	187b      	adds	r3, r7, r1
 800a2ae:	881a      	ldrh	r2, [r3, #0]
 800a2b0:	2380      	movs	r3, #128	; 0x80
 800a2b2:	01db      	lsls	r3, r3, #7
 800a2b4:	4013      	ands	r3, r2
 800a2b6:	d004      	beq.n	800a2c2 <USB_EPStartXfer+0xdda>
 800a2b8:	187b      	adds	r3, r7, r1
 800a2ba:	881b      	ldrh	r3, [r3, #0]
 800a2bc:	2240      	movs	r2, #64	; 0x40
 800a2be:	4013      	ands	r3, r2
 800a2c0:	d10d      	bne.n	800a2de <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a2c2:	2196      	movs	r1, #150	; 0x96
 800a2c4:	187b      	adds	r3, r7, r1
 800a2c6:	881a      	ldrh	r2, [r3, #0]
 800a2c8:	2380      	movs	r3, #128	; 0x80
 800a2ca:	01db      	lsls	r3, r3, #7
 800a2cc:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a2ce:	d000      	beq.n	800a2d2 <USB_EPStartXfer+0xdea>
 800a2d0:	e18e      	b.n	800a5f0 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a2d2:	187b      	adds	r3, r7, r1
 800a2d4:	881b      	ldrh	r3, [r3, #0]
 800a2d6:	2240      	movs	r2, #64	; 0x40
 800a2d8:	4013      	ands	r3, r2
 800a2da:	d000      	beq.n	800a2de <USB_EPStartXfer+0xdf6>
 800a2dc:	e188      	b.n	800a5f0 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	18d3      	adds	r3, r2, r3
 800a2e8:	881b      	ldrh	r3, [r3, #0]
 800a2ea:	b29a      	uxth	r2, r3
 800a2ec:	2094      	movs	r0, #148	; 0x94
 800a2ee:	183b      	adds	r3, r7, r0
 800a2f0:	4917      	ldr	r1, [pc, #92]	; (800a350 <USB_EPStartXfer+0xe68>)
 800a2f2:	400a      	ands	r2, r1
 800a2f4:	801a      	strh	r2, [r3, #0]
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	781b      	ldrb	r3, [r3, #0]
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	18d3      	adds	r3, r2, r3
 800a300:	183a      	adds	r2, r7, r0
 800a302:	8812      	ldrh	r2, [r2, #0]
 800a304:	4913      	ldr	r1, [pc, #76]	; (800a354 <USB_EPStartXfer+0xe6c>)
 800a306:	430a      	orrs	r2, r1
 800a308:	b292      	uxth	r2, r2
 800a30a:	801a      	strh	r2, [r3, #0]
 800a30c:	e170      	b.n	800a5f0 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	78db      	ldrb	r3, [r3, #3]
 800a312:	2b01      	cmp	r3, #1
 800a314:	d000      	beq.n	800a318 <USB_EPStartXfer+0xe30>
 800a316:	e169      	b.n	800a5ec <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	699a      	ldr	r2, [r3, #24]
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	429a      	cmp	r2, r3
 800a322:	d919      	bls.n	800a358 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	691b      	ldr	r3, [r3, #16]
 800a328:	1d7a      	adds	r2, r7, #5
 800a32a:	32ff      	adds	r2, #255	; 0xff
 800a32c:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	699a      	ldr	r2, [r3, #24]
 800a332:	1d7b      	adds	r3, r7, #5
 800a334:	33ff      	adds	r3, #255	; 0xff
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	1ad2      	subs	r2, r2, r3
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	619a      	str	r2, [r3, #24]
 800a33e:	e013      	b.n	800a368 <USB_EPStartXfer+0xe80>
 800a340:	ffff8000 	.word	0xffff8000
 800a344:	00000402 	.word	0x00000402
 800a348:	ffff83ff 	.word	0xffff83ff
 800a34c:	00000406 	.word	0x00000406
 800a350:	ffff8f8f 	.word	0xffff8f8f
 800a354:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	699b      	ldr	r3, [r3, #24]
 800a35c:	1d7a      	adds	r2, r7, #5
 800a35e:	32ff      	adds	r2, #255	; 0xff
 800a360:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	2200      	movs	r2, #0
 800a366:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	785b      	ldrb	r3, [r3, #1]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d000      	beq.n	800a372 <USB_EPStartXfer+0xe8a>
 800a370:	e075      	b.n	800a45e <USB_EPStartXfer+0xf76>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	21cc      	movs	r1, #204	; 0xcc
 800a376:	187a      	adds	r2, r7, r1
 800a378:	6013      	str	r3, [r2, #0]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2250      	movs	r2, #80	; 0x50
 800a37e:	5a9b      	ldrh	r3, [r3, r2]
 800a380:	b29b      	uxth	r3, r3
 800a382:	001a      	movs	r2, r3
 800a384:	187b      	adds	r3, r7, r1
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	189b      	adds	r3, r3, r2
 800a38a:	187a      	adds	r2, r7, r1
 800a38c:	6013      	str	r3, [r2, #0]
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	00da      	lsls	r2, r3, #3
 800a394:	187b      	adds	r3, r7, r1
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	18d3      	adds	r3, r2, r3
 800a39a:	4aaa      	ldr	r2, [pc, #680]	; (800a644 <USB_EPStartXfer+0x115c>)
 800a39c:	4694      	mov	ip, r2
 800a39e:	4463      	add	r3, ip
 800a3a0:	21c8      	movs	r1, #200	; 0xc8
 800a3a2:	187a      	adds	r2, r7, r1
 800a3a4:	6013      	str	r3, [r2, #0]
 800a3a6:	1d7b      	adds	r3, r7, #5
 800a3a8:	33ff      	adds	r3, #255	; 0xff
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d114      	bne.n	800a3da <USB_EPStartXfer+0xef2>
 800a3b0:	187b      	adds	r3, r7, r1
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	881b      	ldrh	r3, [r3, #0]
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	4aa3      	ldr	r2, [pc, #652]	; (800a648 <USB_EPStartXfer+0x1160>)
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	b29a      	uxth	r2, r3
 800a3be:	187b      	adds	r3, r7, r1
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	801a      	strh	r2, [r3, #0]
 800a3c4:	187b      	adds	r3, r7, r1
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	881b      	ldrh	r3, [r3, #0]
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	4a9f      	ldr	r2, [pc, #636]	; (800a64c <USB_EPStartXfer+0x1164>)
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	b29a      	uxth	r2, r3
 800a3d2:	187b      	adds	r3, r7, r1
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	801a      	strh	r2, [r3, #0]
 800a3d8:	e066      	b.n	800a4a8 <USB_EPStartXfer+0xfc0>
 800a3da:	1d7b      	adds	r3, r7, #5
 800a3dc:	33ff      	adds	r3, #255	; 0xff
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	2b3e      	cmp	r3, #62	; 0x3e
 800a3e2:	d81c      	bhi.n	800a41e <USB_EPStartXfer+0xf36>
 800a3e4:	1d7b      	adds	r3, r7, #5
 800a3e6:	33ff      	adds	r3, #255	; 0xff
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	085b      	lsrs	r3, r3, #1
 800a3ec:	21dc      	movs	r1, #220	; 0xdc
 800a3ee:	187a      	adds	r2, r7, r1
 800a3f0:	6013      	str	r3, [r2, #0]
 800a3f2:	1d7b      	adds	r3, r7, #5
 800a3f4:	33ff      	adds	r3, #255	; 0xff
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	4013      	ands	r3, r2
 800a3fc:	d004      	beq.n	800a408 <USB_EPStartXfer+0xf20>
 800a3fe:	187b      	adds	r3, r7, r1
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3301      	adds	r3, #1
 800a404:	187a      	adds	r2, r7, r1
 800a406:	6013      	str	r3, [r2, #0]
 800a408:	23dc      	movs	r3, #220	; 0xdc
 800a40a:	18fb      	adds	r3, r7, r3
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	b29b      	uxth	r3, r3
 800a410:	029b      	lsls	r3, r3, #10
 800a412:	b29a      	uxth	r2, r3
 800a414:	23c8      	movs	r3, #200	; 0xc8
 800a416:	18fb      	adds	r3, r7, r3
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	801a      	strh	r2, [r3, #0]
 800a41c:	e044      	b.n	800a4a8 <USB_EPStartXfer+0xfc0>
 800a41e:	1d7b      	adds	r3, r7, #5
 800a420:	33ff      	adds	r3, #255	; 0xff
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	095b      	lsrs	r3, r3, #5
 800a426:	21dc      	movs	r1, #220	; 0xdc
 800a428:	187a      	adds	r2, r7, r1
 800a42a:	6013      	str	r3, [r2, #0]
 800a42c:	1d7b      	adds	r3, r7, #5
 800a42e:	33ff      	adds	r3, #255	; 0xff
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	221f      	movs	r2, #31
 800a434:	4013      	ands	r3, r2
 800a436:	d104      	bne.n	800a442 <USB_EPStartXfer+0xf5a>
 800a438:	187b      	adds	r3, r7, r1
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	3b01      	subs	r3, #1
 800a43e:	187a      	adds	r2, r7, r1
 800a440:	6013      	str	r3, [r2, #0]
 800a442:	23dc      	movs	r3, #220	; 0xdc
 800a444:	18fb      	adds	r3, r7, r3
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	b29b      	uxth	r3, r3
 800a44a:	029b      	lsls	r3, r3, #10
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	4a7f      	ldr	r2, [pc, #508]	; (800a64c <USB_EPStartXfer+0x1164>)
 800a450:	4313      	orrs	r3, r2
 800a452:	b29a      	uxth	r2, r3
 800a454:	23c8      	movs	r3, #200	; 0xc8
 800a456:	18fb      	adds	r3, r7, r3
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	801a      	strh	r2, [r3, #0]
 800a45c:	e024      	b.n	800a4a8 <USB_EPStartXfer+0xfc0>
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	785b      	ldrb	r3, [r3, #1]
 800a462:	2b01      	cmp	r3, #1
 800a464:	d120      	bne.n	800a4a8 <USB_EPStartXfer+0xfc0>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	21d4      	movs	r1, #212	; 0xd4
 800a46a:	187a      	adds	r2, r7, r1
 800a46c:	6013      	str	r3, [r2, #0]
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2250      	movs	r2, #80	; 0x50
 800a472:	5a9b      	ldrh	r3, [r3, r2]
 800a474:	b29b      	uxth	r3, r3
 800a476:	001a      	movs	r2, r3
 800a478:	187b      	adds	r3, r7, r1
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	189b      	adds	r3, r3, r2
 800a47e:	187a      	adds	r2, r7, r1
 800a480:	6013      	str	r3, [r2, #0]
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	00da      	lsls	r2, r3, #3
 800a488:	187b      	adds	r3, r7, r1
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	18d3      	adds	r3, r2, r3
 800a48e:	4a6d      	ldr	r2, [pc, #436]	; (800a644 <USB_EPStartXfer+0x115c>)
 800a490:	4694      	mov	ip, r2
 800a492:	4463      	add	r3, ip
 800a494:	21d0      	movs	r1, #208	; 0xd0
 800a496:	187a      	adds	r2, r7, r1
 800a498:	6013      	str	r3, [r2, #0]
 800a49a:	1d7b      	adds	r3, r7, #5
 800a49c:	33ff      	adds	r3, #255	; 0xff
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	187b      	adds	r3, r7, r1
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	801a      	strh	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	22c4      	movs	r2, #196	; 0xc4
 800a4ac:	18ba      	adds	r2, r7, r2
 800a4ae:	6013      	str	r3, [r2, #0]
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	785b      	ldrb	r3, [r3, #1]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d000      	beq.n	800a4ba <USB_EPStartXfer+0xfd2>
 800a4b8:	e075      	b.n	800a5a6 <USB_EPStartXfer+0x10be>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	21bc      	movs	r1, #188	; 0xbc
 800a4be:	187a      	adds	r2, r7, r1
 800a4c0:	6013      	str	r3, [r2, #0]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2250      	movs	r2, #80	; 0x50
 800a4c6:	5a9b      	ldrh	r3, [r3, r2]
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	001a      	movs	r2, r3
 800a4cc:	187b      	adds	r3, r7, r1
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	189b      	adds	r3, r3, r2
 800a4d2:	187a      	adds	r2, r7, r1
 800a4d4:	6013      	str	r3, [r2, #0]
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	00da      	lsls	r2, r3, #3
 800a4dc:	187b      	adds	r3, r7, r1
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	18d3      	adds	r3, r2, r3
 800a4e2:	4a5b      	ldr	r2, [pc, #364]	; (800a650 <USB_EPStartXfer+0x1168>)
 800a4e4:	4694      	mov	ip, r2
 800a4e6:	4463      	add	r3, ip
 800a4e8:	21b8      	movs	r1, #184	; 0xb8
 800a4ea:	187a      	adds	r2, r7, r1
 800a4ec:	6013      	str	r3, [r2, #0]
 800a4ee:	1d7b      	adds	r3, r7, #5
 800a4f0:	33ff      	adds	r3, #255	; 0xff
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d114      	bne.n	800a522 <USB_EPStartXfer+0x103a>
 800a4f8:	187b      	adds	r3, r7, r1
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	881b      	ldrh	r3, [r3, #0]
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	4a51      	ldr	r2, [pc, #324]	; (800a648 <USB_EPStartXfer+0x1160>)
 800a502:	4013      	ands	r3, r2
 800a504:	b29a      	uxth	r2, r3
 800a506:	187b      	adds	r3, r7, r1
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	801a      	strh	r2, [r3, #0]
 800a50c:	187b      	adds	r3, r7, r1
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	881b      	ldrh	r3, [r3, #0]
 800a512:	b29b      	uxth	r3, r3
 800a514:	4a4d      	ldr	r2, [pc, #308]	; (800a64c <USB_EPStartXfer+0x1164>)
 800a516:	4313      	orrs	r3, r2
 800a518:	b29a      	uxth	r2, r3
 800a51a:	187b      	adds	r3, r7, r1
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	801a      	strh	r2, [r3, #0]
 800a520:	e066      	b.n	800a5f0 <USB_EPStartXfer+0x1108>
 800a522:	1d7b      	adds	r3, r7, #5
 800a524:	33ff      	adds	r3, #255	; 0xff
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2b3e      	cmp	r3, #62	; 0x3e
 800a52a:	d81c      	bhi.n	800a566 <USB_EPStartXfer+0x107e>
 800a52c:	1d7b      	adds	r3, r7, #5
 800a52e:	33ff      	adds	r3, #255	; 0xff
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	085b      	lsrs	r3, r3, #1
 800a534:	21d8      	movs	r1, #216	; 0xd8
 800a536:	187a      	adds	r2, r7, r1
 800a538:	6013      	str	r3, [r2, #0]
 800a53a:	1d7b      	adds	r3, r7, #5
 800a53c:	33ff      	adds	r3, #255	; 0xff
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2201      	movs	r2, #1
 800a542:	4013      	ands	r3, r2
 800a544:	d004      	beq.n	800a550 <USB_EPStartXfer+0x1068>
 800a546:	187b      	adds	r3, r7, r1
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	3301      	adds	r3, #1
 800a54c:	187a      	adds	r2, r7, r1
 800a54e:	6013      	str	r3, [r2, #0]
 800a550:	23d8      	movs	r3, #216	; 0xd8
 800a552:	18fb      	adds	r3, r7, r3
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	b29b      	uxth	r3, r3
 800a558:	029b      	lsls	r3, r3, #10
 800a55a:	b29a      	uxth	r2, r3
 800a55c:	23b8      	movs	r3, #184	; 0xb8
 800a55e:	18fb      	adds	r3, r7, r3
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	801a      	strh	r2, [r3, #0]
 800a564:	e044      	b.n	800a5f0 <USB_EPStartXfer+0x1108>
 800a566:	1d7b      	adds	r3, r7, #5
 800a568:	33ff      	adds	r3, #255	; 0xff
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	095b      	lsrs	r3, r3, #5
 800a56e:	21d8      	movs	r1, #216	; 0xd8
 800a570:	187a      	adds	r2, r7, r1
 800a572:	6013      	str	r3, [r2, #0]
 800a574:	1d7b      	adds	r3, r7, #5
 800a576:	33ff      	adds	r3, #255	; 0xff
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	221f      	movs	r2, #31
 800a57c:	4013      	ands	r3, r2
 800a57e:	d104      	bne.n	800a58a <USB_EPStartXfer+0x10a2>
 800a580:	187b      	adds	r3, r7, r1
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	3b01      	subs	r3, #1
 800a586:	187a      	adds	r2, r7, r1
 800a588:	6013      	str	r3, [r2, #0]
 800a58a:	23d8      	movs	r3, #216	; 0xd8
 800a58c:	18fb      	adds	r3, r7, r3
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	b29b      	uxth	r3, r3
 800a592:	029b      	lsls	r3, r3, #10
 800a594:	b29b      	uxth	r3, r3
 800a596:	4a2d      	ldr	r2, [pc, #180]	; (800a64c <USB_EPStartXfer+0x1164>)
 800a598:	4313      	orrs	r3, r2
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	23b8      	movs	r3, #184	; 0xb8
 800a59e:	18fb      	adds	r3, r7, r3
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	801a      	strh	r2, [r3, #0]
 800a5a4:	e024      	b.n	800a5f0 <USB_EPStartXfer+0x1108>
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	785b      	ldrb	r3, [r3, #1]
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d120      	bne.n	800a5f0 <USB_EPStartXfer+0x1108>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2250      	movs	r2, #80	; 0x50
 800a5b2:	5a9b      	ldrh	r3, [r3, r2]
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	001a      	movs	r2, r3
 800a5b8:	21c4      	movs	r1, #196	; 0xc4
 800a5ba:	187b      	adds	r3, r7, r1
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	189b      	adds	r3, r3, r2
 800a5c0:	187a      	adds	r2, r7, r1
 800a5c2:	6013      	str	r3, [r2, #0]
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	00da      	lsls	r2, r3, #3
 800a5ca:	187b      	adds	r3, r7, r1
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	18d3      	adds	r3, r2, r3
 800a5d0:	4a1f      	ldr	r2, [pc, #124]	; (800a650 <USB_EPStartXfer+0x1168>)
 800a5d2:	4694      	mov	ip, r2
 800a5d4:	4463      	add	r3, ip
 800a5d6:	21c0      	movs	r1, #192	; 0xc0
 800a5d8:	187a      	adds	r2, r7, r1
 800a5da:	6013      	str	r3, [r2, #0]
 800a5dc:	1d7b      	adds	r3, r7, #5
 800a5de:	33ff      	adds	r3, #255	; 0xff
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	b29a      	uxth	r2, r3
 800a5e4:	187b      	adds	r3, r7, r1
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	801a      	strh	r2, [r3, #0]
 800a5ea:	e001      	b.n	800a5f0 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e025      	b.n	800a63c <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	18d3      	adds	r3, r2, r3
 800a5fa:	881b      	ldrh	r3, [r3, #0]
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	208a      	movs	r0, #138	; 0x8a
 800a600:	183b      	adds	r3, r7, r0
 800a602:	4914      	ldr	r1, [pc, #80]	; (800a654 <USB_EPStartXfer+0x116c>)
 800a604:	400a      	ands	r2, r1
 800a606:	801a      	strh	r2, [r3, #0]
 800a608:	183b      	adds	r3, r7, r0
 800a60a:	183a      	adds	r2, r7, r0
 800a60c:	8812      	ldrh	r2, [r2, #0]
 800a60e:	2180      	movs	r1, #128	; 0x80
 800a610:	0149      	lsls	r1, r1, #5
 800a612:	404a      	eors	r2, r1
 800a614:	801a      	strh	r2, [r3, #0]
 800a616:	183b      	adds	r3, r7, r0
 800a618:	183a      	adds	r2, r7, r0
 800a61a:	8812      	ldrh	r2, [r2, #0]
 800a61c:	2180      	movs	r1, #128	; 0x80
 800a61e:	0189      	lsls	r1, r1, #6
 800a620:	404a      	eors	r2, r1
 800a622:	801a      	strh	r2, [r3, #0]
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	18d3      	adds	r3, r2, r3
 800a62e:	183a      	adds	r2, r7, r0
 800a630:	8812      	ldrh	r2, [r2, #0]
 800a632:	4909      	ldr	r1, [pc, #36]	; (800a658 <USB_EPStartXfer+0x1170>)
 800a634:	430a      	orrs	r2, r1
 800a636:	b292      	uxth	r2, r2
 800a638:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	0018      	movs	r0, r3
 800a63e:	46bd      	mov	sp, r7
 800a640:	b043      	add	sp, #268	; 0x10c
 800a642:	bd90      	pop	{r4, r7, pc}
 800a644:	00000402 	.word	0x00000402
 800a648:	ffff83ff 	.word	0xffff83ff
 800a64c:	ffff8000 	.word	0xffff8000
 800a650:	00000406 	.word	0x00000406
 800a654:	ffffbf8f 	.word	0xffffbf8f
 800a658:	ffff8080 	.word	0xffff8080

0800a65c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	785b      	ldrb	r3, [r3, #1]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d01d      	beq.n	800a6aa <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	18d3      	adds	r3, r2, r3
 800a678:	881b      	ldrh	r3, [r3, #0]
 800a67a:	b29a      	uxth	r2, r3
 800a67c:	200c      	movs	r0, #12
 800a67e:	183b      	adds	r3, r7, r0
 800a680:	491b      	ldr	r1, [pc, #108]	; (800a6f0 <USB_EPSetStall+0x94>)
 800a682:	400a      	ands	r2, r1
 800a684:	801a      	strh	r2, [r3, #0]
 800a686:	183b      	adds	r3, r7, r0
 800a688:	183a      	adds	r2, r7, r0
 800a68a:	8812      	ldrh	r2, [r2, #0]
 800a68c:	2110      	movs	r1, #16
 800a68e:	404a      	eors	r2, r1
 800a690:	801a      	strh	r2, [r3, #0]
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	18d3      	adds	r3, r2, r3
 800a69c:	183a      	adds	r2, r7, r0
 800a69e:	8812      	ldrh	r2, [r2, #0]
 800a6a0:	4914      	ldr	r1, [pc, #80]	; (800a6f4 <USB_EPSetStall+0x98>)
 800a6a2:	430a      	orrs	r2, r1
 800a6a4:	b292      	uxth	r2, r2
 800a6a6:	801a      	strh	r2, [r3, #0]
 800a6a8:	e01d      	b.n	800a6e6 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	18d3      	adds	r3, r2, r3
 800a6b4:	881b      	ldrh	r3, [r3, #0]
 800a6b6:	b29a      	uxth	r2, r3
 800a6b8:	200e      	movs	r0, #14
 800a6ba:	183b      	adds	r3, r7, r0
 800a6bc:	490e      	ldr	r1, [pc, #56]	; (800a6f8 <USB_EPSetStall+0x9c>)
 800a6be:	400a      	ands	r2, r1
 800a6c0:	801a      	strh	r2, [r3, #0]
 800a6c2:	183b      	adds	r3, r7, r0
 800a6c4:	183a      	adds	r2, r7, r0
 800a6c6:	8812      	ldrh	r2, [r2, #0]
 800a6c8:	2180      	movs	r1, #128	; 0x80
 800a6ca:	0149      	lsls	r1, r1, #5
 800a6cc:	404a      	eors	r2, r1
 800a6ce:	801a      	strh	r2, [r3, #0]
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	18d3      	adds	r3, r2, r3
 800a6da:	183a      	adds	r2, r7, r0
 800a6dc:	8812      	ldrh	r2, [r2, #0]
 800a6de:	4905      	ldr	r1, [pc, #20]	; (800a6f4 <USB_EPSetStall+0x98>)
 800a6e0:	430a      	orrs	r2, r1
 800a6e2:	b292      	uxth	r2, r2
 800a6e4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	0018      	movs	r0, r3
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	b004      	add	sp, #16
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	ffff8fbf 	.word	0xffff8fbf
 800a6f4:	ffff8080 	.word	0xffff8080
 800a6f8:	ffffbf8f 	.word	0xffffbf8f

0800a6fc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b086      	sub	sp, #24
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	7b1b      	ldrb	r3, [r3, #12]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d000      	beq.n	800a710 <USB_EPClearStall+0x14>
 800a70e:	e095      	b.n	800a83c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	785b      	ldrb	r3, [r3, #1]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d046      	beq.n	800a7a6 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	18d2      	adds	r2, r2, r3
 800a722:	2110      	movs	r1, #16
 800a724:	187b      	adds	r3, r7, r1
 800a726:	8812      	ldrh	r2, [r2, #0]
 800a728:	801a      	strh	r2, [r3, #0]
 800a72a:	187b      	adds	r3, r7, r1
 800a72c:	881b      	ldrh	r3, [r3, #0]
 800a72e:	2240      	movs	r2, #64	; 0x40
 800a730:	4013      	ands	r3, r2
 800a732:	d016      	beq.n	800a762 <USB_EPClearStall+0x66>
 800a734:	687a      	ldr	r2, [r7, #4]
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	009b      	lsls	r3, r3, #2
 800a73c:	18d3      	adds	r3, r2, r3
 800a73e:	881b      	ldrh	r3, [r3, #0]
 800a740:	b29a      	uxth	r2, r3
 800a742:	200e      	movs	r0, #14
 800a744:	183b      	adds	r3, r7, r0
 800a746:	4940      	ldr	r1, [pc, #256]	; (800a848 <USB_EPClearStall+0x14c>)
 800a748:	400a      	ands	r2, r1
 800a74a:	801a      	strh	r2, [r3, #0]
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	18d3      	adds	r3, r2, r3
 800a756:	183a      	adds	r2, r7, r0
 800a758:	8812      	ldrh	r2, [r2, #0]
 800a75a:	493c      	ldr	r1, [pc, #240]	; (800a84c <USB_EPClearStall+0x150>)
 800a75c:	430a      	orrs	r2, r1
 800a75e:	b292      	uxth	r2, r2
 800a760:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	78db      	ldrb	r3, [r3, #3]
 800a766:	2b01      	cmp	r3, #1
 800a768:	d068      	beq.n	800a83c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	18d3      	adds	r3, r2, r3
 800a774:	881b      	ldrh	r3, [r3, #0]
 800a776:	b29a      	uxth	r2, r3
 800a778:	200c      	movs	r0, #12
 800a77a:	183b      	adds	r3, r7, r0
 800a77c:	4934      	ldr	r1, [pc, #208]	; (800a850 <USB_EPClearStall+0x154>)
 800a77e:	400a      	ands	r2, r1
 800a780:	801a      	strh	r2, [r3, #0]
 800a782:	183b      	adds	r3, r7, r0
 800a784:	183a      	adds	r2, r7, r0
 800a786:	8812      	ldrh	r2, [r2, #0]
 800a788:	2120      	movs	r1, #32
 800a78a:	404a      	eors	r2, r1
 800a78c:	801a      	strh	r2, [r3, #0]
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	18d3      	adds	r3, r2, r3
 800a798:	183a      	adds	r2, r7, r0
 800a79a:	8812      	ldrh	r2, [r2, #0]
 800a79c:	492d      	ldr	r1, [pc, #180]	; (800a854 <USB_EPClearStall+0x158>)
 800a79e:	430a      	orrs	r2, r1
 800a7a0:	b292      	uxth	r2, r2
 800a7a2:	801a      	strh	r2, [r3, #0]
 800a7a4:	e04a      	b.n	800a83c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	18d2      	adds	r2, r2, r3
 800a7b0:	2116      	movs	r1, #22
 800a7b2:	187b      	adds	r3, r7, r1
 800a7b4:	8812      	ldrh	r2, [r2, #0]
 800a7b6:	801a      	strh	r2, [r3, #0]
 800a7b8:	187b      	adds	r3, r7, r1
 800a7ba:	881a      	ldrh	r2, [r3, #0]
 800a7bc:	2380      	movs	r3, #128	; 0x80
 800a7be:	01db      	lsls	r3, r3, #7
 800a7c0:	4013      	ands	r3, r2
 800a7c2:	d016      	beq.n	800a7f2 <USB_EPClearStall+0xf6>
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	781b      	ldrb	r3, [r3, #0]
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	18d3      	adds	r3, r2, r3
 800a7ce:	881b      	ldrh	r3, [r3, #0]
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	2014      	movs	r0, #20
 800a7d4:	183b      	adds	r3, r7, r0
 800a7d6:	491c      	ldr	r1, [pc, #112]	; (800a848 <USB_EPClearStall+0x14c>)
 800a7d8:	400a      	ands	r2, r1
 800a7da:	801a      	strh	r2, [r3, #0]
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	009b      	lsls	r3, r3, #2
 800a7e4:	18d3      	adds	r3, r2, r3
 800a7e6:	183a      	adds	r2, r7, r0
 800a7e8:	8812      	ldrh	r2, [r2, #0]
 800a7ea:	491b      	ldr	r1, [pc, #108]	; (800a858 <USB_EPClearStall+0x15c>)
 800a7ec:	430a      	orrs	r2, r1
 800a7ee:	b292      	uxth	r2, r2
 800a7f0:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	18d3      	adds	r3, r2, r3
 800a7fc:	881b      	ldrh	r3, [r3, #0]
 800a7fe:	b29a      	uxth	r2, r3
 800a800:	2012      	movs	r0, #18
 800a802:	183b      	adds	r3, r7, r0
 800a804:	4915      	ldr	r1, [pc, #84]	; (800a85c <USB_EPClearStall+0x160>)
 800a806:	400a      	ands	r2, r1
 800a808:	801a      	strh	r2, [r3, #0]
 800a80a:	183b      	adds	r3, r7, r0
 800a80c:	183a      	adds	r2, r7, r0
 800a80e:	8812      	ldrh	r2, [r2, #0]
 800a810:	2180      	movs	r1, #128	; 0x80
 800a812:	0149      	lsls	r1, r1, #5
 800a814:	404a      	eors	r2, r1
 800a816:	801a      	strh	r2, [r3, #0]
 800a818:	183b      	adds	r3, r7, r0
 800a81a:	183a      	adds	r2, r7, r0
 800a81c:	8812      	ldrh	r2, [r2, #0]
 800a81e:	2180      	movs	r1, #128	; 0x80
 800a820:	0189      	lsls	r1, r1, #6
 800a822:	404a      	eors	r2, r1
 800a824:	801a      	strh	r2, [r3, #0]
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	18d3      	adds	r3, r2, r3
 800a830:	183a      	adds	r2, r7, r0
 800a832:	8812      	ldrh	r2, [r2, #0]
 800a834:	4907      	ldr	r1, [pc, #28]	; (800a854 <USB_EPClearStall+0x158>)
 800a836:	430a      	orrs	r2, r1
 800a838:	b292      	uxth	r2, r2
 800a83a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	0018      	movs	r0, r3
 800a840:	46bd      	mov	sp, r7
 800a842:	b006      	add	sp, #24
 800a844:	bd80      	pop	{r7, pc}
 800a846:	46c0      	nop			; (mov r8, r8)
 800a848:	ffff8f8f 	.word	0xffff8f8f
 800a84c:	ffff80c0 	.word	0xffff80c0
 800a850:	ffff8fbf 	.word	0xffff8fbf
 800a854:	ffff8080 	.word	0xffff8080
 800a858:	ffffc080 	.word	0xffffc080
 800a85c:	ffffbf8f 	.word	0xffffbf8f

0800a860 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	000a      	movs	r2, r1
 800a86a:	1cfb      	adds	r3, r7, #3
 800a86c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800a86e:	1cfb      	adds	r3, r7, #3
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d103      	bne.n	800a87e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	224c      	movs	r2, #76	; 0x4c
 800a87a:	2180      	movs	r1, #128	; 0x80
 800a87c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	0018      	movs	r0, r3
 800a882:	46bd      	mov	sp, r7
 800a884:	b002      	add	sp, #8
 800a886:	bd80      	pop	{r7, pc}

0800a888 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2258      	movs	r2, #88	; 0x58
 800a894:	5a9b      	ldrh	r3, [r3, r2]
 800a896:	b29b      	uxth	r3, r3
 800a898:	4a05      	ldr	r2, [pc, #20]	; (800a8b0 <USB_DevConnect+0x28>)
 800a89a:	4313      	orrs	r3, r2
 800a89c:	b299      	uxth	r1, r3
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2258      	movs	r2, #88	; 0x58
 800a8a2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	0018      	movs	r0, r3
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	b002      	add	sp, #8
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	46c0      	nop			; (mov r8, r8)
 800a8b0:	ffff8000 	.word	0xffff8000

0800a8b4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2244      	movs	r2, #68	; 0x44
 800a8c0:	5a9b      	ldrh	r3, [r3, r2]
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
}
 800a8c8:	0018      	movs	r0, r3
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	b004      	add	sp, #16
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b08c      	sub	sp, #48	; 0x30
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	60b9      	str	r1, [r7, #8]
 800a8da:	0019      	movs	r1, r3
 800a8dc:	1dbb      	adds	r3, r7, #6
 800a8de:	801a      	strh	r2, [r3, #0]
 800a8e0:	1d3b      	adds	r3, r7, #4
 800a8e2:	1c0a      	adds	r2, r1, #0
 800a8e4:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a8e6:	1d3b      	adds	r3, r7, #4
 800a8e8:	881b      	ldrh	r3, [r3, #0]
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	085b      	lsrs	r3, r3, #1
 800a8ee:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a8f8:	1dbb      	adds	r3, r7, #6
 800a8fa:	881a      	ldrh	r2, [r3, #0]
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	18d3      	adds	r3, r2, r3
 800a900:	2280      	movs	r2, #128	; 0x80
 800a902:	00d2      	lsls	r2, r2, #3
 800a904:	4694      	mov	ip, r2
 800a906:	4463      	add	r3, ip
 800a908:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800a90a:	6a3b      	ldr	r3, [r7, #32]
 800a90c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a90e:	e01b      	b.n	800a948 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800a910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800a916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a918:	3301      	adds	r3, #1
 800a91a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800a91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	b29b      	uxth	r3, r3
 800a922:	021b      	lsls	r3, r3, #8
 800a924:	b29b      	uxth	r3, r3
 800a926:	001a      	movs	r2, r3
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	4313      	orrs	r3, r2
 800a92c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	b29a      	uxth	r2, r3
 800a932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a934:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a938:	3302      	adds	r3, #2
 800a93a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800a93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93e:	3301      	adds	r3, #1
 800a940:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800a942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a944:	3b01      	subs	r3, #1
 800a946:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d1e0      	bne.n	800a910 <USB_WritePMA+0x40>
  }
}
 800a94e:	46c0      	nop			; (mov r8, r8)
 800a950:	46c0      	nop			; (mov r8, r8)
 800a952:	46bd      	mov	sp, r7
 800a954:	b00c      	add	sp, #48	; 0x30
 800a956:	bd80      	pop	{r7, pc}

0800a958 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b08a      	sub	sp, #40	; 0x28
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	0019      	movs	r1, r3
 800a964:	1dbb      	adds	r3, r7, #6
 800a966:	801a      	strh	r2, [r3, #0]
 800a968:	1d3b      	adds	r3, r7, #4
 800a96a:	1c0a      	adds	r2, r1, #0
 800a96c:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a96e:	1d3b      	adds	r3, r7, #4
 800a970:	881b      	ldrh	r3, [r3, #0]
 800a972:	085b      	lsrs	r3, r3, #1
 800a974:	b29b      	uxth	r3, r3
 800a976:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a980:	1dbb      	adds	r3, r7, #6
 800a982:	881a      	ldrh	r2, [r3, #0]
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	18d3      	adds	r3, r2, r3
 800a988:	2280      	movs	r2, #128	; 0x80
 800a98a:	00d2      	lsls	r2, r2, #3
 800a98c:	4694      	mov	ip, r2
 800a98e:	4463      	add	r3, ip
 800a990:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	627b      	str	r3, [r7, #36]	; 0x24
 800a996:	e018      	b.n	800a9ca <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800a998:	6a3b      	ldr	r3, [r7, #32]
 800a99a:	881b      	ldrh	r3, [r3, #0]
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a9a0:	6a3b      	ldr	r3, [r7, #32]
 800a9a2:	3302      	adds	r3, #2
 800a9a4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	b2da      	uxtb	r2, r3
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a9ae:	69fb      	ldr	r3, [r7, #28]
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	0a1b      	lsrs	r3, r3, #8
 800a9b8:	b2da      	uxtb	r2, r3
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a9be:	69fb      	ldr	r3, [r7, #28]
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	627b      	str	r3, [r7, #36]	; 0x24
 800a9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d1e3      	bne.n	800a998 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800a9d0:	1d3b      	adds	r3, r7, #4
 800a9d2:	881b      	ldrh	r3, [r3, #0]
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	4013      	ands	r3, r2
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d007      	beq.n	800a9ee <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800a9de:	6a3b      	ldr	r3, [r7, #32]
 800a9e0:	881b      	ldrh	r3, [r3, #0]
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	b2da      	uxtb	r2, r3
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	701a      	strb	r2, [r3, #0]
  }
}
 800a9ee:	46c0      	nop			; (mov r8, r8)
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	b00a      	add	sp, #40	; 0x28
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b084      	sub	sp, #16
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
 800a9fe:	000a      	movs	r2, r1
 800aa00:	1cfb      	adds	r3, r7, #3
 800aa02:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800aa04:	230f      	movs	r3, #15
 800aa06:	18fb      	adds	r3, r7, r3
 800aa08:	2200      	movs	r2, #0
 800aa0a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	7c1b      	ldrb	r3, [r3, #16]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d116      	bne.n	800aa42 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aa14:	2380      	movs	r3, #128	; 0x80
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	2202      	movs	r2, #2
 800aa1c:	2181      	movs	r1, #129	; 0x81
 800aa1e:	f002 f8b4 	bl	800cb8a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2201      	movs	r2, #1
 800aa26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aa28:	2380      	movs	r3, #128	; 0x80
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	2202      	movs	r2, #2
 800aa30:	2101      	movs	r1, #1
 800aa32:	f002 f8aa 	bl	800cb8a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aa36:	687a      	ldr	r2, [r7, #4]
 800aa38:	23b6      	movs	r3, #182	; 0xb6
 800aa3a:	005b      	lsls	r3, r3, #1
 800aa3c:	2101      	movs	r1, #1
 800aa3e:	50d1      	str	r1, [r2, r3]
 800aa40:	e013      	b.n	800aa6a <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	2340      	movs	r3, #64	; 0x40
 800aa46:	2202      	movs	r2, #2
 800aa48:	2181      	movs	r1, #129	; 0x81
 800aa4a:	f002 f89e 	bl	800cb8a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2201      	movs	r2, #1
 800aa52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	2340      	movs	r3, #64	; 0x40
 800aa58:	2202      	movs	r2, #2
 800aa5a:	2101      	movs	r1, #1
 800aa5c:	f002 f895 	bl	800cb8a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	23b6      	movs	r3, #182	; 0xb6
 800aa64:	005b      	lsls	r3, r3, #1
 800aa66:	2101      	movs	r1, #1
 800aa68:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	2308      	movs	r3, #8
 800aa6e:	2203      	movs	r2, #3
 800aa70:	2182      	movs	r1, #130	; 0x82
 800aa72:	f002 f88a 	bl	800cb8a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aa7c:	2387      	movs	r3, #135	; 0x87
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	0018      	movs	r0, r3
 800aa82:	f002 fa1b 	bl	800cebc <USBD_static_malloc>
 800aa86:	0001      	movs	r1, r0
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	23ae      	movs	r3, #174	; 0xae
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	23ae      	movs	r3, #174	; 0xae
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	58d3      	ldr	r3, [r2, r3]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d104      	bne.n	800aaa6 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800aa9c:	230f      	movs	r3, #15
 800aa9e:	18fb      	adds	r3, r7, r3
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	701a      	strb	r2, [r3, #0]
 800aaa4:	e02c      	b.n	800ab00 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	23ae      	movs	r3, #174	; 0xae
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	58d3      	ldr	r3, [r2, r3]
 800aaae:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	23af      	movs	r3, #175	; 0xaf
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	58d3      	ldr	r3, [r2, r3]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800aabc:	68ba      	ldr	r2, [r7, #8]
 800aabe:	2385      	movs	r3, #133	; 0x85
 800aac0:	009b      	lsls	r3, r3, #2
 800aac2:	2100      	movs	r1, #0
 800aac4:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800aac6:	68ba      	ldr	r2, [r7, #8]
 800aac8:	2386      	movs	r3, #134	; 0x86
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	2100      	movs	r1, #0
 800aace:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	7c1b      	ldrb	r3, [r3, #16]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d10a      	bne.n	800aaee <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aad8:	68ba      	ldr	r2, [r7, #8]
 800aada:	2381      	movs	r3, #129	; 0x81
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	58d2      	ldr	r2, [r2, r3]
 800aae0:	2380      	movs	r3, #128	; 0x80
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	2101      	movs	r1, #1
 800aae8:	f002 f99a 	bl	800ce20 <USBD_LL_PrepareReceive>
 800aaec:	e008      	b.n	800ab00 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aaee:	68ba      	ldr	r2, [r7, #8]
 800aaf0:	2381      	movs	r3, #129	; 0x81
 800aaf2:	009b      	lsls	r3, r3, #2
 800aaf4:	58d2      	ldr	r2, [r2, r3]
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	2340      	movs	r3, #64	; 0x40
 800aafa:	2101      	movs	r1, #1
 800aafc:	f002 f990 	bl	800ce20 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800ab00:	230f      	movs	r3, #15
 800ab02:	18fb      	adds	r3, r7, r3
 800ab04:	781b      	ldrb	r3, [r3, #0]
}
 800ab06:	0018      	movs	r0, r3
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	b004      	add	sp, #16
 800ab0c:	bd80      	pop	{r7, pc}

0800ab0e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab0e:	b580      	push	{r7, lr}
 800ab10:	b084      	sub	sp, #16
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
 800ab16:	000a      	movs	r2, r1
 800ab18:	1cfb      	adds	r3, r7, #3
 800ab1a:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800ab1c:	230f      	movs	r3, #15
 800ab1e:	18fb      	adds	r3, r7, r3
 800ab20:	2200      	movs	r2, #0
 800ab22:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2181      	movs	r1, #129	; 0x81
 800ab28:	0018      	movs	r0, r3
 800ab2a:	f002 f865 	bl	800cbf8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2101      	movs	r1, #1
 800ab38:	0018      	movs	r0, r3
 800ab3a:	f002 f85d 	bl	800cbf8 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	23b6      	movs	r3, #182	; 0xb6
 800ab42:	005b      	lsls	r3, r3, #1
 800ab44:	2100      	movs	r1, #0
 800ab46:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2182      	movs	r1, #130	; 0x82
 800ab4c:	0018      	movs	r0, r3
 800ab4e:	f002 f853 	bl	800cbf8 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2200      	movs	r2, #0
 800ab56:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	23ae      	movs	r3, #174	; 0xae
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	58d3      	ldr	r3, [r2, r3]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d011      	beq.n	800ab88 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	23af      	movs	r3, #175	; 0xaf
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	58d3      	ldr	r3, [r2, r3]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	23ae      	movs	r3, #174	; 0xae
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	58d3      	ldr	r3, [r2, r3]
 800ab78:	0018      	movs	r0, r3
 800ab7a:	f002 f9ab 	bl	800ced4 <USBD_static_free>
    pdev->pClassData = NULL;
 800ab7e:	687a      	ldr	r2, [r7, #4]
 800ab80:	23ae      	movs	r3, #174	; 0xae
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	2100      	movs	r1, #0
 800ab86:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800ab88:	230f      	movs	r3, #15
 800ab8a:	18fb      	adds	r3, r7, r3
 800ab8c:	781b      	ldrb	r3, [r3, #0]
}
 800ab8e:	0018      	movs	r0, r3
 800ab90:	46bd      	mov	sp, r7
 800ab92:	b004      	add	sp, #16
 800ab94:	bd80      	pop	{r7, pc}
	...

0800ab98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b086      	sub	sp, #24
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	23ae      	movs	r3, #174	; 0xae
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	58d3      	ldr	r3, [r2, r3]
 800abaa:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800abac:	230f      	movs	r3, #15
 800abae:	18fb      	adds	r3, r7, r3
 800abb0:	2200      	movs	r2, #0
 800abb2:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800abb4:	230c      	movs	r3, #12
 800abb6:	18fb      	adds	r3, r7, r3
 800abb8:	2200      	movs	r2, #0
 800abba:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800abbc:	2317      	movs	r3, #23
 800abbe:	18fb      	adds	r3, r7, r3
 800abc0:	2200      	movs	r2, #0
 800abc2:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	001a      	movs	r2, r3
 800abca:	2360      	movs	r3, #96	; 0x60
 800abcc:	4013      	ands	r3, r2
 800abce:	d03d      	beq.n	800ac4c <USBD_CDC_Setup+0xb4>
 800abd0:	2b20      	cmp	r3, #32
 800abd2:	d000      	beq.n	800abd6 <USBD_CDC_Setup+0x3e>
 800abd4:	e094      	b.n	800ad00 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	88db      	ldrh	r3, [r3, #6]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d02b      	beq.n	800ac36 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	b25b      	sxtb	r3, r3
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	da12      	bge.n	800ac0e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	23af      	movs	r3, #175	; 0xaf
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	58d3      	ldr	r3, [r2, r3]
 800abf0:	689b      	ldr	r3, [r3, #8]
 800abf2:	683a      	ldr	r2, [r7, #0]
 800abf4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800abf6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800abf8:	683a      	ldr	r2, [r7, #0]
 800abfa:	88d2      	ldrh	r2, [r2, #6]
 800abfc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800abfe:	6939      	ldr	r1, [r7, #16]
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	88da      	ldrh	r2, [r3, #6]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	0018      	movs	r0, r3
 800ac08:	f001 fbb2 	bl	800c370 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800ac0c:	e083      	b.n	800ad16 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	7859      	ldrb	r1, [r3, #1]
 800ac12:	693a      	ldr	r2, [r7, #16]
 800ac14:	2380      	movs	r3, #128	; 0x80
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	88db      	ldrh	r3, [r3, #6]
 800ac1e:	b2d9      	uxtb	r1, r3
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	4a40      	ldr	r2, [pc, #256]	; (800ad24 <USBD_CDC_Setup+0x18c>)
 800ac24:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800ac26:	6939      	ldr	r1, [r7, #16]
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	88da      	ldrh	r2, [r3, #6]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	0018      	movs	r0, r3
 800ac30:	f001 fbd1 	bl	800c3d6 <USBD_CtlPrepareRx>
      break;
 800ac34:	e06f      	b.n	800ad16 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	23af      	movs	r3, #175	; 0xaf
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	58d3      	ldr	r3, [r2, r3]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	683a      	ldr	r2, [r7, #0]
 800ac42:	7850      	ldrb	r0, [r2, #1]
 800ac44:	6839      	ldr	r1, [r7, #0]
 800ac46:	2200      	movs	r2, #0
 800ac48:	4798      	blx	r3
      break;
 800ac4a:	e064      	b.n	800ad16 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	785b      	ldrb	r3, [r3, #1]
 800ac50:	2b0b      	cmp	r3, #11
 800ac52:	d037      	beq.n	800acc4 <USBD_CDC_Setup+0x12c>
 800ac54:	dc47      	bgt.n	800ace6 <USBD_CDC_Setup+0x14e>
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d002      	beq.n	800ac60 <USBD_CDC_Setup+0xc8>
 800ac5a:	2b0a      	cmp	r3, #10
 800ac5c:	d019      	beq.n	800ac92 <USBD_CDC_Setup+0xfa>
 800ac5e:	e042      	b.n	800ace6 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	23a7      	movs	r3, #167	; 0xa7
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	5cd3      	ldrb	r3, [r2, r3]
 800ac68:	2b03      	cmp	r3, #3
 800ac6a:	d107      	bne.n	800ac7c <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800ac6c:	230c      	movs	r3, #12
 800ac6e:	18f9      	adds	r1, r7, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2202      	movs	r2, #2
 800ac74:	0018      	movs	r0, r3
 800ac76:	f001 fb7b 	bl	800c370 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac7a:	e040      	b.n	800acfe <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800ac7c:	683a      	ldr	r2, [r7, #0]
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	0011      	movs	r1, r2
 800ac82:	0018      	movs	r0, r3
 800ac84:	f001 faf6 	bl	800c274 <USBD_CtlError>
            ret = USBD_FAIL;
 800ac88:	2317      	movs	r3, #23
 800ac8a:	18fb      	adds	r3, r7, r3
 800ac8c:	2202      	movs	r2, #2
 800ac8e:	701a      	strb	r2, [r3, #0]
          break;
 800ac90:	e035      	b.n	800acfe <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	23a7      	movs	r3, #167	; 0xa7
 800ac96:	009b      	lsls	r3, r3, #2
 800ac98:	5cd3      	ldrb	r3, [r2, r3]
 800ac9a:	2b03      	cmp	r3, #3
 800ac9c:	d107      	bne.n	800acae <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800ac9e:	230f      	movs	r3, #15
 800aca0:	18f9      	adds	r1, r7, r3
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2201      	movs	r2, #1
 800aca6:	0018      	movs	r0, r3
 800aca8:	f001 fb62 	bl	800c370 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800acac:	e027      	b.n	800acfe <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800acae:	683a      	ldr	r2, [r7, #0]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	0011      	movs	r1, r2
 800acb4:	0018      	movs	r0, r3
 800acb6:	f001 fadd 	bl	800c274 <USBD_CtlError>
            ret = USBD_FAIL;
 800acba:	2317      	movs	r3, #23
 800acbc:	18fb      	adds	r3, r7, r3
 800acbe:	2202      	movs	r2, #2
 800acc0:	701a      	strb	r2, [r3, #0]
          break;
 800acc2:	e01c      	b.n	800acfe <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	23a7      	movs	r3, #167	; 0xa7
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	5cd3      	ldrb	r3, [r2, r3]
 800accc:	2b03      	cmp	r3, #3
 800acce:	d015      	beq.n	800acfc <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800acd0:	683a      	ldr	r2, [r7, #0]
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	0011      	movs	r1, r2
 800acd6:	0018      	movs	r0, r3
 800acd8:	f001 facc 	bl	800c274 <USBD_CtlError>
            ret = USBD_FAIL;
 800acdc:	2317      	movs	r3, #23
 800acde:	18fb      	adds	r3, r7, r3
 800ace0:	2202      	movs	r2, #2
 800ace2:	701a      	strb	r2, [r3, #0]
          }
          break;
 800ace4:	e00a      	b.n	800acfc <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	0011      	movs	r1, r2
 800acec:	0018      	movs	r0, r3
 800acee:	f001 fac1 	bl	800c274 <USBD_CtlError>
          ret = USBD_FAIL;
 800acf2:	2317      	movs	r3, #23
 800acf4:	18fb      	adds	r3, r7, r3
 800acf6:	2202      	movs	r2, #2
 800acf8:	701a      	strb	r2, [r3, #0]
          break;
 800acfa:	e000      	b.n	800acfe <USBD_CDC_Setup+0x166>
          break;
 800acfc:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800acfe:	e00a      	b.n	800ad16 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800ad00:	683a      	ldr	r2, [r7, #0]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	0011      	movs	r1, r2
 800ad06:	0018      	movs	r0, r3
 800ad08:	f001 fab4 	bl	800c274 <USBD_CtlError>
      ret = USBD_FAIL;
 800ad0c:	2317      	movs	r3, #23
 800ad0e:	18fb      	adds	r3, r7, r3
 800ad10:	2202      	movs	r2, #2
 800ad12:	701a      	strb	r2, [r3, #0]
      break;
 800ad14:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800ad16:	2317      	movs	r3, #23
 800ad18:	18fb      	adds	r3, r7, r3
 800ad1a:	781b      	ldrb	r3, [r3, #0]
}
 800ad1c:	0018      	movs	r0, r3
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	b006      	add	sp, #24
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	00000201 	.word	0x00000201

0800ad28 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	000a      	movs	r2, r1
 800ad32:	1cfb      	adds	r3, r7, #3
 800ad34:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	23ae      	movs	r3, #174	; 0xae
 800ad3a:	009b      	lsls	r3, r3, #2
 800ad3c:	58d3      	ldr	r3, [r2, r3]
 800ad3e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	23b0      	movs	r3, #176	; 0xb0
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	58d3      	ldr	r3, [r2, r3]
 800ad48:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	23ae      	movs	r3, #174	; 0xae
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	58d3      	ldr	r3, [r2, r3]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d03e      	beq.n	800add4 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ad56:	1cfb      	adds	r3, r7, #3
 800ad58:	781a      	ldrb	r2, [r3, #0]
 800ad5a:	6879      	ldr	r1, [r7, #4]
 800ad5c:	0013      	movs	r3, r2
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	189b      	adds	r3, r3, r2
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	18cb      	adds	r3, r1, r3
 800ad66:	331c      	adds	r3, #28
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d02b      	beq.n	800adc6 <USBD_CDC_DataIn+0x9e>
 800ad6e:	1cfb      	adds	r3, r7, #3
 800ad70:	781a      	ldrb	r2, [r3, #0]
 800ad72:	6879      	ldr	r1, [r7, #4]
 800ad74:	0013      	movs	r3, r2
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	189b      	adds	r3, r3, r2
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	18cb      	adds	r3, r1, r3
 800ad7e:	331c      	adds	r3, #28
 800ad80:	6818      	ldr	r0, [r3, #0]
 800ad82:	1cfb      	adds	r3, r7, #3
 800ad84:	781a      	ldrb	r2, [r3, #0]
 800ad86:	68b9      	ldr	r1, [r7, #8]
 800ad88:	0013      	movs	r3, r2
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	189b      	adds	r3, r3, r2
 800ad8e:	00db      	lsls	r3, r3, #3
 800ad90:	18cb      	adds	r3, r1, r3
 800ad92:	3338      	adds	r3, #56	; 0x38
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	0019      	movs	r1, r3
 800ad98:	f7f5 fa4e 	bl	8000238 <__aeabi_uidivmod>
 800ad9c:	1e0b      	subs	r3, r1, #0
 800ad9e:	d112      	bne.n	800adc6 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800ada0:	1cfb      	adds	r3, r7, #3
 800ada2:	781a      	ldrb	r2, [r3, #0]
 800ada4:	6879      	ldr	r1, [r7, #4]
 800ada6:	0013      	movs	r3, r2
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	189b      	adds	r3, r3, r2
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	18cb      	adds	r3, r1, r3
 800adb0:	331c      	adds	r3, #28
 800adb2:	2200      	movs	r2, #0
 800adb4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800adb6:	1cfb      	adds	r3, r7, #3
 800adb8:	7819      	ldrb	r1, [r3, #0]
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	2300      	movs	r3, #0
 800adbe:	2200      	movs	r2, #0
 800adc0:	f001 fff7 	bl	800cdb2 <USBD_LL_Transmit>
 800adc4:	e004      	b.n	800add0 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	2385      	movs	r3, #133	; 0x85
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	2100      	movs	r1, #0
 800adce:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800add0:	2300      	movs	r3, #0
 800add2:	e000      	b.n	800add6 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800add4:	2302      	movs	r3, #2
  }
}
 800add6:	0018      	movs	r0, r3
 800add8:	46bd      	mov	sp, r7
 800adda:	b004      	add	sp, #16
 800addc:	bd80      	pop	{r7, pc}

0800adde <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b084      	sub	sp, #16
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
 800ade6:	000a      	movs	r2, r1
 800ade8:	1cfb      	adds	r3, r7, #3
 800adea:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	23ae      	movs	r3, #174	; 0xae
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	58d3      	ldr	r3, [r2, r3]
 800adf4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800adf6:	1cfb      	adds	r3, r7, #3
 800adf8:	781a      	ldrb	r2, [r3, #0]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	0011      	movs	r1, r2
 800adfe:	0018      	movs	r0, r3
 800ae00:	f002 f845 	bl	800ce8e <USBD_LL_GetRxDataSize>
 800ae04:	0001      	movs	r1, r0
 800ae06:	68fa      	ldr	r2, [r7, #12]
 800ae08:	2383      	movs	r3, #131	; 0x83
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	23ae      	movs	r3, #174	; 0xae
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	58d3      	ldr	r3, [r2, r3]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d011      	beq.n	800ae3e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	23af      	movs	r3, #175	; 0xaf
 800ae1e:	009b      	lsls	r3, r3, #2
 800ae20:	58d3      	ldr	r3, [r2, r3]
 800ae22:	68da      	ldr	r2, [r3, #12]
 800ae24:	68f9      	ldr	r1, [r7, #12]
 800ae26:	2381      	movs	r3, #129	; 0x81
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	58c8      	ldr	r0, [r1, r3]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2183      	movs	r1, #131	; 0x83
 800ae30:	0089      	lsls	r1, r1, #2
 800ae32:	468c      	mov	ip, r1
 800ae34:	4463      	add	r3, ip
 800ae36:	0019      	movs	r1, r3
 800ae38:	4790      	blx	r2

    return USBD_OK;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	e000      	b.n	800ae40 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800ae3e:	2302      	movs	r3, #2
  }
}
 800ae40:	0018      	movs	r0, r3
 800ae42:	46bd      	mov	sp, r7
 800ae44:	b004      	add	sp, #16
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ae48:	b590      	push	{r4, r7, lr}
 800ae4a:	b085      	sub	sp, #20
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	23ae      	movs	r3, #174	; 0xae
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	58d3      	ldr	r3, [r2, r3]
 800ae58:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	23af      	movs	r3, #175	; 0xaf
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	58d3      	ldr	r3, [r2, r3]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d019      	beq.n	800ae9a <USBD_CDC_EP0_RxReady+0x52>
 800ae66:	68fa      	ldr	r2, [r7, #12]
 800ae68:	2380      	movs	r3, #128	; 0x80
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	5cd3      	ldrb	r3, [r2, r3]
 800ae6e:	2bff      	cmp	r3, #255	; 0xff
 800ae70:	d013      	beq.n	800ae9a <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	23af      	movs	r3, #175	; 0xaf
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	58d3      	ldr	r3, [r2, r3]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	68f9      	ldr	r1, [r7, #12]
 800ae7e:	2280      	movs	r2, #128	; 0x80
 800ae80:	0092      	lsls	r2, r2, #2
 800ae82:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800ae84:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	4c06      	ldr	r4, [pc, #24]	; (800aea4 <USBD_CDC_EP0_RxReady+0x5c>)
 800ae8a:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ae8c:	b292      	uxth	r2, r2
 800ae8e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	2380      	movs	r3, #128	; 0x80
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	21ff      	movs	r1, #255	; 0xff
 800ae98:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	0018      	movs	r0, r3
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	b005      	add	sp, #20
 800aea2:	bd90      	pop	{r4, r7, pc}
 800aea4:	00000201 	.word	0x00000201

0800aea8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2243      	movs	r2, #67	; 0x43
 800aeb4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800aeb6:	4b02      	ldr	r3, [pc, #8]	; (800aec0 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800aeb8:	0018      	movs	r0, r3
 800aeba:	46bd      	mov	sp, r7
 800aebc:	b002      	add	sp, #8
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	20000094 	.word	0x20000094

0800aec4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2243      	movs	r2, #67	; 0x43
 800aed0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800aed2:	4b02      	ldr	r3, [pc, #8]	; (800aedc <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800aed4:	0018      	movs	r0, r3
 800aed6:	46bd      	mov	sp, r7
 800aed8:	b002      	add	sp, #8
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	20000050 	.word	0x20000050

0800aee0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2243      	movs	r2, #67	; 0x43
 800aeec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800aeee:	4b02      	ldr	r3, [pc, #8]	; (800aef8 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800aef0:	0018      	movs	r0, r3
 800aef2:	46bd      	mov	sp, r7
 800aef4:	b002      	add	sp, #8
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	200000d8 	.word	0x200000d8

0800aefc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	220a      	movs	r2, #10
 800af08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800af0a:	4b02      	ldr	r3, [pc, #8]	; (800af14 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800af0c:	0018      	movs	r0, r3
 800af0e:	46bd      	mov	sp, r7
 800af10:	b002      	add	sp, #8
 800af12:	bd80      	pop	{r7, pc}
 800af14:	2000000c 	.word	0x2000000c

0800af18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800af22:	200f      	movs	r0, #15
 800af24:	183b      	adds	r3, r7, r0
 800af26:	2202      	movs	r2, #2
 800af28:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d007      	beq.n	800af40 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	23af      	movs	r3, #175	; 0xaf
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	6839      	ldr	r1, [r7, #0]
 800af38:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800af3a:	183b      	adds	r3, r7, r0
 800af3c:	2200      	movs	r2, #0
 800af3e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800af40:	230f      	movs	r3, #15
 800af42:	18fb      	adds	r3, r7, r3
 800af44:	781b      	ldrb	r3, [r3, #0]
}
 800af46:	0018      	movs	r0, r3
 800af48:	46bd      	mov	sp, r7
 800af4a:	b004      	add	sp, #16
 800af4c:	bd80      	pop	{r7, pc}

0800af4e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b086      	sub	sp, #24
 800af52:	af00      	add	r7, sp, #0
 800af54:	60f8      	str	r0, [r7, #12]
 800af56:	60b9      	str	r1, [r7, #8]
 800af58:	1dbb      	adds	r3, r7, #6
 800af5a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af5c:	68fa      	ldr	r2, [r7, #12]
 800af5e:	23ae      	movs	r3, #174	; 0xae
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	58d3      	ldr	r3, [r2, r3]
 800af64:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800af66:	697a      	ldr	r2, [r7, #20]
 800af68:	2382      	movs	r3, #130	; 0x82
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	68b9      	ldr	r1, [r7, #8]
 800af6e:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800af70:	1dbb      	adds	r3, r7, #6
 800af72:	8819      	ldrh	r1, [r3, #0]
 800af74:	697a      	ldr	r2, [r7, #20]
 800af76:	2384      	movs	r3, #132	; 0x84
 800af78:	009b      	lsls	r3, r3, #2
 800af7a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800af7c:	2300      	movs	r3, #0
}
 800af7e:	0018      	movs	r0, r3
 800af80:	46bd      	mov	sp, r7
 800af82:	b006      	add	sp, #24
 800af84:	bd80      	pop	{r7, pc}

0800af86 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800af86:	b580      	push	{r7, lr}
 800af88:	b084      	sub	sp, #16
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	6078      	str	r0, [r7, #4]
 800af8e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	23ae      	movs	r3, #174	; 0xae
 800af94:	009b      	lsls	r3, r3, #2
 800af96:	58d3      	ldr	r3, [r2, r3]
 800af98:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800af9a:	68fa      	ldr	r2, [r7, #12]
 800af9c:	2381      	movs	r3, #129	; 0x81
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	6839      	ldr	r1, [r7, #0]
 800afa2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	0018      	movs	r0, r3
 800afa8:	46bd      	mov	sp, r7
 800afaa:	b004      	add	sp, #16
 800afac:	bd80      	pop	{r7, pc}

0800afae <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b084      	sub	sp, #16
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800afb6:	687a      	ldr	r2, [r7, #4]
 800afb8:	23ae      	movs	r3, #174	; 0xae
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	58d3      	ldr	r3, [r2, r3]
 800afbe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	23ae      	movs	r3, #174	; 0xae
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	58d3      	ldr	r3, [r2, r3]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d022      	beq.n	800b012 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800afcc:	68fa      	ldr	r2, [r7, #12]
 800afce:	2385      	movs	r3, #133	; 0x85
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	58d3      	ldr	r3, [r2, r3]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d11a      	bne.n	800b00e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800afd8:	68fa      	ldr	r2, [r7, #12]
 800afda:	2385      	movs	r3, #133	; 0x85
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	2101      	movs	r1, #1
 800afe0:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800afe2:	68fa      	ldr	r2, [r7, #12]
 800afe4:	2384      	movs	r3, #132	; 0x84
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	58d2      	ldr	r2, [r2, r3]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800afee:	68fa      	ldr	r2, [r7, #12]
 800aff0:	2382      	movs	r3, #130	; 0x82
 800aff2:	009b      	lsls	r3, r3, #2
 800aff4:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800aff6:	68fa      	ldr	r2, [r7, #12]
 800aff8:	2384      	movs	r3, #132	; 0x84
 800affa:	009b      	lsls	r3, r3, #2
 800affc:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800affe:	b29b      	uxth	r3, r3
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	000a      	movs	r2, r1
 800b004:	2181      	movs	r1, #129	; 0x81
 800b006:	f001 fed4 	bl	800cdb2 <USBD_LL_Transmit>

      return USBD_OK;
 800b00a:	2300      	movs	r3, #0
 800b00c:	e002      	b.n	800b014 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800b00e:	2301      	movs	r3, #1
 800b010:	e000      	b.n	800b014 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800b012:	2302      	movs	r3, #2
  }
}
 800b014:	0018      	movs	r0, r3
 800b016:	46bd      	mov	sp, r7
 800b018:	b004      	add	sp, #16
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	23ae      	movs	r3, #174	; 0xae
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	58d3      	ldr	r3, [r2, r3]
 800b02c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	23ae      	movs	r3, #174	; 0xae
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	58d3      	ldr	r3, [r2, r3]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d019      	beq.n	800b06e <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	7c1b      	ldrb	r3, [r3, #16]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d10a      	bne.n	800b058 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	2381      	movs	r3, #129	; 0x81
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	58d2      	ldr	r2, [r2, r3]
 800b04a:	2380      	movs	r3, #128	; 0x80
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	2101      	movs	r1, #1
 800b052:	f001 fee5 	bl	800ce20 <USBD_LL_PrepareReceive>
 800b056:	e008      	b.n	800b06a <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b058:	68fa      	ldr	r2, [r7, #12]
 800b05a:	2381      	movs	r3, #129	; 0x81
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	58d2      	ldr	r2, [r2, r3]
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	2340      	movs	r3, #64	; 0x40
 800b064:	2101      	movs	r1, #1
 800b066:	f001 fedb 	bl	800ce20 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b06a:	2300      	movs	r3, #0
 800b06c:	e000      	b.n	800b070 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800b06e:	2302      	movs	r3, #2
  }
}
 800b070:	0018      	movs	r0, r3
 800b072:	46bd      	mov	sp, r7
 800b074:	b004      	add	sp, #16
 800b076:	bd80      	pop	{r7, pc}

0800b078 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	60f8      	str	r0, [r7, #12]
 800b080:	60b9      	str	r1, [r7, #8]
 800b082:	1dfb      	adds	r3, r7, #7
 800b084:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d101      	bne.n	800b090 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b08c:	2302      	movs	r3, #2
 800b08e:	e020      	b.n	800b0d2 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b090:	68fa      	ldr	r2, [r7, #12]
 800b092:	23ad      	movs	r3, #173	; 0xad
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	58d3      	ldr	r3, [r2, r3]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d004      	beq.n	800b0a6 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800b09c:	68fa      	ldr	r2, [r7, #12]
 800b09e:	23ad      	movs	r3, #173	; 0xad
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	2100      	movs	r1, #0
 800b0a4:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d004      	beq.n	800b0b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b0ac:	68fa      	ldr	r2, [r7, #12]
 800b0ae:	23ac      	movs	r3, #172	; 0xac
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	68b9      	ldr	r1, [r7, #8]
 800b0b4:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0b6:	68fa      	ldr	r2, [r7, #12]
 800b0b8:	23a7      	movs	r3, #167	; 0xa7
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	2101      	movs	r1, #1
 800b0be:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	1dfa      	adds	r2, r7, #7
 800b0c4:	7812      	ldrb	r2, [r2, #0]
 800b0c6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	0018      	movs	r0, r3
 800b0cc:	f001 fcd4 	bl	800ca78 <USBD_LL_Init>

  return USBD_OK;
 800b0d0:	2300      	movs	r3, #0
}
 800b0d2:	0018      	movs	r0, r3
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	b004      	add	sp, #16
 800b0d8:	bd80      	pop	{r7, pc}

0800b0da <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b084      	sub	sp, #16
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
 800b0e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b0e4:	200f      	movs	r0, #15
 800b0e6:	183b      	adds	r3, r7, r0
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d008      	beq.n	800b104 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	23ad      	movs	r3, #173	; 0xad
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	6839      	ldr	r1, [r7, #0]
 800b0fa:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800b0fc:	183b      	adds	r3, r7, r0
 800b0fe:	2200      	movs	r2, #0
 800b100:	701a      	strb	r2, [r3, #0]
 800b102:	e003      	b.n	800b10c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b104:	230f      	movs	r3, #15
 800b106:	18fb      	adds	r3, r7, r3
 800b108:	2202      	movs	r2, #2
 800b10a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800b10c:	230f      	movs	r3, #15
 800b10e:	18fb      	adds	r3, r7, r3
 800b110:	781b      	ldrb	r3, [r3, #0]
}
 800b112:	0018      	movs	r0, r3
 800b114:	46bd      	mov	sp, r7
 800b116:	b004      	add	sp, #16
 800b118:	bd80      	pop	{r7, pc}

0800b11a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b11a:	b580      	push	{r7, lr}
 800b11c:	b082      	sub	sp, #8
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	0018      	movs	r0, r3
 800b126:	f001 fd0b 	bl	800cb40 <USBD_LL_Start>

  return USBD_OK;
 800b12a:	2300      	movs	r3, #0
}
 800b12c:	0018      	movs	r0, r3
 800b12e:	46bd      	mov	sp, r7
 800b130:	b002      	add	sp, #8
 800b132:	bd80      	pop	{r7, pc}

0800b134 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b082      	sub	sp, #8
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b13c:	2300      	movs	r3, #0
}
 800b13e:	0018      	movs	r0, r3
 800b140:	46bd      	mov	sp, r7
 800b142:	b002      	add	sp, #8
 800b144:	bd80      	pop	{r7, pc}

0800b146 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b146:	b590      	push	{r4, r7, lr}
 800b148:	b085      	sub	sp, #20
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
 800b14e:	000a      	movs	r2, r1
 800b150:	1cfb      	adds	r3, r7, #3
 800b152:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b154:	240f      	movs	r4, #15
 800b156:	193b      	adds	r3, r7, r4
 800b158:	2202      	movs	r2, #2
 800b15a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	23ad      	movs	r3, #173	; 0xad
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	58d3      	ldr	r3, [r2, r3]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d00e      	beq.n	800b186 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b168:	687a      	ldr	r2, [r7, #4]
 800b16a:	23ad      	movs	r3, #173	; 0xad
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	58d3      	ldr	r3, [r2, r3]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	1cfa      	adds	r2, r7, #3
 800b174:	7811      	ldrb	r1, [r2, #0]
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	0010      	movs	r0, r2
 800b17a:	4798      	blx	r3
 800b17c:	1e03      	subs	r3, r0, #0
 800b17e:	d102      	bne.n	800b186 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800b180:	193b      	adds	r3, r7, r4
 800b182:	2200      	movs	r2, #0
 800b184:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800b186:	230f      	movs	r3, #15
 800b188:	18fb      	adds	r3, r7, r3
 800b18a:	781b      	ldrb	r3, [r3, #0]
}
 800b18c:	0018      	movs	r0, r3
 800b18e:	46bd      	mov	sp, r7
 800b190:	b005      	add	sp, #20
 800b192:	bd90      	pop	{r4, r7, pc}

0800b194 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	000a      	movs	r2, r1
 800b19e:	1cfb      	adds	r3, r7, #3
 800b1a0:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	23ad      	movs	r3, #173	; 0xad
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	58d3      	ldr	r3, [r2, r3]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	1cfa      	adds	r2, r7, #3
 800b1ae:	7811      	ldrb	r1, [r2, #0]
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	0010      	movs	r0, r2
 800b1b4:	4798      	blx	r3

  return USBD_OK;
 800b1b6:	2300      	movs	r3, #0
}
 800b1b8:	0018      	movs	r0, r3
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	b002      	add	sp, #8
 800b1be:	bd80      	pop	{r7, pc}

0800b1c0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	22aa      	movs	r2, #170	; 0xaa
 800b1ce:	0092      	lsls	r2, r2, #2
 800b1d0:	4694      	mov	ip, r2
 800b1d2:	4463      	add	r3, ip
 800b1d4:	683a      	ldr	r2, [r7, #0]
 800b1d6:	0011      	movs	r1, r2
 800b1d8:	0018      	movs	r0, r3
 800b1da:	f001 f810 	bl	800c1fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	23a5      	movs	r3, #165	; 0xa5
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	2101      	movs	r1, #1
 800b1e6:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4a23      	ldr	r2, [pc, #140]	; (800b278 <USBD_LL_SetupStage+0xb8>)
 800b1ec:	5a9b      	ldrh	r3, [r3, r2]
 800b1ee:	0019      	movs	r1, r3
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	23a6      	movs	r3, #166	; 0xa6
 800b1f4:	009b      	lsls	r3, r3, #2
 800b1f6:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	23aa      	movs	r3, #170	; 0xaa
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	5cd3      	ldrb	r3, [r2, r3]
 800b200:	001a      	movs	r2, r3
 800b202:	231f      	movs	r3, #31
 800b204:	4013      	ands	r3, r2
 800b206:	2b02      	cmp	r3, #2
 800b208:	d019      	beq.n	800b23e <USBD_LL_SetupStage+0x7e>
 800b20a:	d822      	bhi.n	800b252 <USBD_LL_SetupStage+0x92>
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d002      	beq.n	800b216 <USBD_LL_SetupStage+0x56>
 800b210:	2b01      	cmp	r3, #1
 800b212:	d00a      	beq.n	800b22a <USBD_LL_SetupStage+0x6a>
 800b214:	e01d      	b.n	800b252 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	22aa      	movs	r2, #170	; 0xaa
 800b21a:	0092      	lsls	r2, r2, #2
 800b21c:	189a      	adds	r2, r3, r2
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	0011      	movs	r1, r2
 800b222:	0018      	movs	r0, r3
 800b224:	f000 fa10 	bl	800b648 <USBD_StdDevReq>
      break;
 800b228:	e020      	b.n	800b26c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	22aa      	movs	r2, #170	; 0xaa
 800b22e:	0092      	lsls	r2, r2, #2
 800b230:	189a      	adds	r2, r3, r2
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	0011      	movs	r1, r2
 800b236:	0018      	movs	r0, r3
 800b238:	f000 fa78 	bl	800b72c <USBD_StdItfReq>
      break;
 800b23c:	e016      	b.n	800b26c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	22aa      	movs	r2, #170	; 0xaa
 800b242:	0092      	lsls	r2, r2, #2
 800b244:	189a      	adds	r2, r3, r2
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	0011      	movs	r1, r2
 800b24a:	0018      	movs	r0, r3
 800b24c:	f000 fac5 	bl	800b7da <USBD_StdEPReq>
      break;
 800b250:	e00c      	b.n	800b26c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	23aa      	movs	r3, #170	; 0xaa
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	5cd3      	ldrb	r3, [r2, r3]
 800b25a:	227f      	movs	r2, #127	; 0x7f
 800b25c:	4393      	bics	r3, r2
 800b25e:	b2da      	uxtb	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	0011      	movs	r1, r2
 800b264:	0018      	movs	r0, r3
 800b266:	f001 fcf2 	bl	800cc4e <USBD_LL_StallEP>
      break;
 800b26a:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	0018      	movs	r0, r3
 800b270:	46bd      	mov	sp, r7
 800b272:	b002      	add	sp, #8
 800b274:	bd80      	pop	{r7, pc}
 800b276:	46c0      	nop			; (mov r8, r8)
 800b278:	000002ae 	.word	0x000002ae

0800b27c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b086      	sub	sp, #24
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	607a      	str	r2, [r7, #4]
 800b286:	200b      	movs	r0, #11
 800b288:	183b      	adds	r3, r7, r0
 800b28a:	1c0a      	adds	r2, r1, #0
 800b28c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b28e:	183b      	adds	r3, r7, r0
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d154      	bne.n	800b340 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	3355      	adds	r3, #85	; 0x55
 800b29a:	33ff      	adds	r3, #255	; 0xff
 800b29c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b29e:	68fa      	ldr	r2, [r7, #12]
 800b2a0:	23a5      	movs	r3, #165	; 0xa5
 800b2a2:	009b      	lsls	r3, r3, #2
 800b2a4:	58d3      	ldr	r3, [r2, r3]
 800b2a6:	2b03      	cmp	r3, #3
 800b2a8:	d139      	bne.n	800b31e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	68da      	ldr	r2, [r3, #12]
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	691b      	ldr	r3, [r3, #16]
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d919      	bls.n	800b2ea <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	68da      	ldr	r2, [r3, #12]
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	1ad2      	subs	r2, r2, r3
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	68da      	ldr	r2, [r3, #12]
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d203      	bcs.n	800b2d8 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	e002      	b.n	800b2de <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	6879      	ldr	r1, [r7, #4]
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	001a      	movs	r2, r3
 800b2e4:	f001 f89b 	bl	800c41e <USBD_CtlContinueRx>
 800b2e8:	e045      	b.n	800b376 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b2ea:	68fa      	ldr	r2, [r7, #12]
 800b2ec:	23ad      	movs	r3, #173	; 0xad
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	58d3      	ldr	r3, [r2, r3]
 800b2f2:	691b      	ldr	r3, [r3, #16]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d00d      	beq.n	800b314 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	23a7      	movs	r3, #167	; 0xa7
 800b2fc:	009b      	lsls	r3, r3, #2
 800b2fe:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b300:	2b03      	cmp	r3, #3
 800b302:	d107      	bne.n	800b314 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b304:	68fa      	ldr	r2, [r7, #12]
 800b306:	23ad      	movs	r3, #173	; 0xad
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	58d3      	ldr	r3, [r2, r3]
 800b30c:	691b      	ldr	r3, [r3, #16]
 800b30e:	68fa      	ldr	r2, [r7, #12]
 800b310:	0010      	movs	r0, r2
 800b312:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	0018      	movs	r0, r3
 800b318:	f001 f894 	bl	800c444 <USBD_CtlSendStatus>
 800b31c:	e02b      	b.n	800b376 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	23a5      	movs	r3, #165	; 0xa5
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	58d3      	ldr	r3, [r2, r3]
 800b326:	2b05      	cmp	r3, #5
 800b328:	d125      	bne.n	800b376 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b32a:	68fa      	ldr	r2, [r7, #12]
 800b32c:	23a5      	movs	r3, #165	; 0xa5
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	2100      	movs	r1, #0
 800b332:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2100      	movs	r1, #0
 800b338:	0018      	movs	r0, r3
 800b33a:	f001 fc88 	bl	800cc4e <USBD_LL_StallEP>
 800b33e:	e01a      	b.n	800b376 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b340:	68fa      	ldr	r2, [r7, #12]
 800b342:	23ad      	movs	r3, #173	; 0xad
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	58d3      	ldr	r3, [r2, r3]
 800b348:	699b      	ldr	r3, [r3, #24]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d011      	beq.n	800b372 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b34e:	68fa      	ldr	r2, [r7, #12]
 800b350:	23a7      	movs	r3, #167	; 0xa7
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800b356:	2b03      	cmp	r3, #3
 800b358:	d10b      	bne.n	800b372 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b35a:	68fa      	ldr	r2, [r7, #12]
 800b35c:	23ad      	movs	r3, #173	; 0xad
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	58d3      	ldr	r3, [r2, r3]
 800b362:	699b      	ldr	r3, [r3, #24]
 800b364:	220b      	movs	r2, #11
 800b366:	18ba      	adds	r2, r7, r2
 800b368:	7811      	ldrb	r1, [r2, #0]
 800b36a:	68fa      	ldr	r2, [r7, #12]
 800b36c:	0010      	movs	r0, r2
 800b36e:	4798      	blx	r3
 800b370:	e001      	b.n	800b376 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b372:	2302      	movs	r3, #2
 800b374:	e000      	b.n	800b378 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800b376:	2300      	movs	r3, #0
}
 800b378:	0018      	movs	r0, r3
 800b37a:	46bd      	mov	sp, r7
 800b37c:	b006      	add	sp, #24
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b086      	sub	sp, #24
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	607a      	str	r2, [r7, #4]
 800b38a:	200b      	movs	r0, #11
 800b38c:	183b      	adds	r3, r7, r0
 800b38e:	1c0a      	adds	r2, r1, #0
 800b390:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b392:	183b      	adds	r3, r7, r0
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d000      	beq.n	800b39c <USBD_LL_DataInStage+0x1c>
 800b39a:	e08e      	b.n	800b4ba <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	3314      	adds	r3, #20
 800b3a0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b3a2:	68fa      	ldr	r2, [r7, #12]
 800b3a4:	23a5      	movs	r3, #165	; 0xa5
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	58d3      	ldr	r3, [r2, r3]
 800b3aa:	2b02      	cmp	r3, #2
 800b3ac:	d164      	bne.n	800b478 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	68da      	ldr	r2, [r3, #12]
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	691b      	ldr	r3, [r3, #16]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d915      	bls.n	800b3e6 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	68da      	ldr	r2, [r3, #12]
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	691b      	ldr	r3, [r3, #16]
 800b3c2:	1ad2      	subs	r2, r2, r3
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	b29a      	uxth	r2, r3
 800b3ce:	6879      	ldr	r1, [r7, #4]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	0018      	movs	r0, r3
 800b3d4:	f000 ffec 	bl	800c3b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3d8:	68f8      	ldr	r0, [r7, #12]
 800b3da:	2300      	movs	r3, #0
 800b3dc:	2200      	movs	r2, #0
 800b3de:	2100      	movs	r1, #0
 800b3e0:	f001 fd1e 	bl	800ce20 <USBD_LL_PrepareReceive>
 800b3e4:	e059      	b.n	800b49a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	689a      	ldr	r2, [r3, #8]
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	691b      	ldr	r3, [r3, #16]
 800b3ee:	0019      	movs	r1, r3
 800b3f0:	0010      	movs	r0, r2
 800b3f2:	f7f4 ff21 	bl	8000238 <__aeabi_uidivmod>
 800b3f6:	1e0b      	subs	r3, r1, #0
 800b3f8:	d11f      	bne.n	800b43a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	689a      	ldr	r2, [r3, #8]
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b402:	429a      	cmp	r2, r3
 800b404:	d319      	bcc.n	800b43a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	689a      	ldr	r2, [r3, #8]
 800b40a:	68f9      	ldr	r1, [r7, #12]
 800b40c:	23a6      	movs	r3, #166	; 0xa6
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800b412:	429a      	cmp	r2, r3
 800b414:	d211      	bcs.n	800b43a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2200      	movs	r2, #0
 800b41a:	2100      	movs	r1, #0
 800b41c:	0018      	movs	r0, r3
 800b41e:	f000 ffc7 	bl	800c3b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	23a6      	movs	r3, #166	; 0xa6
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	2100      	movs	r1, #0
 800b42a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b42c:	68f8      	ldr	r0, [r7, #12]
 800b42e:	2300      	movs	r3, #0
 800b430:	2200      	movs	r2, #0
 800b432:	2100      	movs	r1, #0
 800b434:	f001 fcf4 	bl	800ce20 <USBD_LL_PrepareReceive>
 800b438:	e02f      	b.n	800b49a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b43a:	68fa      	ldr	r2, [r7, #12]
 800b43c:	23ad      	movs	r3, #173	; 0xad
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	58d3      	ldr	r3, [r2, r3]
 800b442:	68db      	ldr	r3, [r3, #12]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d00d      	beq.n	800b464 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	23a7      	movs	r3, #167	; 0xa7
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b450:	2b03      	cmp	r3, #3
 800b452:	d107      	bne.n	800b464 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b454:	68fa      	ldr	r2, [r7, #12]
 800b456:	23ad      	movs	r3, #173	; 0xad
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	58d3      	ldr	r3, [r2, r3]
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	68fa      	ldr	r2, [r7, #12]
 800b460:	0010      	movs	r0, r2
 800b462:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2180      	movs	r1, #128	; 0x80
 800b468:	0018      	movs	r0, r3
 800b46a:	f001 fbf0 	bl	800cc4e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	0018      	movs	r0, r3
 800b472:	f000 fffb 	bl	800c46c <USBD_CtlReceiveStatus>
 800b476:	e010      	b.n	800b49a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b478:	68fa      	ldr	r2, [r7, #12]
 800b47a:	23a5      	movs	r3, #165	; 0xa5
 800b47c:	009b      	lsls	r3, r3, #2
 800b47e:	58d3      	ldr	r3, [r2, r3]
 800b480:	2b04      	cmp	r3, #4
 800b482:	d005      	beq.n	800b490 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b484:	68fa      	ldr	r2, [r7, #12]
 800b486:	23a5      	movs	r3, #165	; 0xa5
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d104      	bne.n	800b49a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2180      	movs	r1, #128	; 0x80
 800b494:	0018      	movs	r0, r3
 800b496:	f001 fbda 	bl	800cc4e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b49a:	68fa      	ldr	r2, [r7, #12]
 800b49c:	23a8      	movs	r3, #168	; 0xa8
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	5cd3      	ldrb	r3, [r2, r3]
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d124      	bne.n	800b4f0 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	0018      	movs	r0, r3
 800b4aa:	f7ff fe43 	bl	800b134 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b4ae:	68fa      	ldr	r2, [r7, #12]
 800b4b0:	23a8      	movs	r3, #168	; 0xa8
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	2100      	movs	r1, #0
 800b4b6:	54d1      	strb	r1, [r2, r3]
 800b4b8:	e01a      	b.n	800b4f0 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b4ba:	68fa      	ldr	r2, [r7, #12]
 800b4bc:	23ad      	movs	r3, #173	; 0xad
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	58d3      	ldr	r3, [r2, r3]
 800b4c2:	695b      	ldr	r3, [r3, #20]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d011      	beq.n	800b4ec <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	23a7      	movs	r3, #167	; 0xa7
 800b4cc:	009b      	lsls	r3, r3, #2
 800b4ce:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800b4d0:	2b03      	cmp	r3, #3
 800b4d2:	d10b      	bne.n	800b4ec <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	23ad      	movs	r3, #173	; 0xad
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	58d3      	ldr	r3, [r2, r3]
 800b4dc:	695b      	ldr	r3, [r3, #20]
 800b4de:	220b      	movs	r2, #11
 800b4e0:	18ba      	adds	r2, r7, r2
 800b4e2:	7811      	ldrb	r1, [r2, #0]
 800b4e4:	68fa      	ldr	r2, [r7, #12]
 800b4e6:	0010      	movs	r0, r2
 800b4e8:	4798      	blx	r3
 800b4ea:	e001      	b.n	800b4f0 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b4ec:	2302      	movs	r3, #2
 800b4ee:	e000      	b.n	800b4f2 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	0018      	movs	r0, r3
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	b006      	add	sp, #24
 800b4f8:	bd80      	pop	{r7, pc}

0800b4fa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b4fa:	b580      	push	{r7, lr}
 800b4fc:	b082      	sub	sp, #8
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	2340      	movs	r3, #64	; 0x40
 800b506:	2200      	movs	r2, #0
 800b508:	2100      	movs	r1, #0
 800b50a:	f001 fb3e 	bl	800cb8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	23ac      	movs	r3, #172	; 0xac
 800b512:	005b      	lsls	r3, r3, #1
 800b514:	2101      	movs	r1, #1
 800b516:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b518:	687a      	ldr	r2, [r7, #4]
 800b51a:	23b2      	movs	r3, #178	; 0xb2
 800b51c:	005b      	lsls	r3, r3, #1
 800b51e:	2140      	movs	r1, #64	; 0x40
 800b520:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	2340      	movs	r3, #64	; 0x40
 800b526:	2200      	movs	r2, #0
 800b528:	2180      	movs	r1, #128	; 0x80
 800b52a:	f001 fb2e 	bl	800cb8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2201      	movs	r2, #1
 800b532:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2240      	movs	r2, #64	; 0x40
 800b538:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	23a7      	movs	r3, #167	; 0xa7
 800b53e:	009b      	lsls	r3, r3, #2
 800b540:	2101      	movs	r1, #1
 800b542:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	23a5      	movs	r3, #165	; 0xa5
 800b548:	009b      	lsls	r3, r3, #2
 800b54a:	2100      	movs	r1, #0
 800b54c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	23a9      	movs	r3, #169	; 0xa9
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	2100      	movs	r1, #0
 800b55c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	23ae      	movs	r3, #174	; 0xae
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	58d3      	ldr	r3, [r2, r3]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d00a      	beq.n	800b580 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	23ad      	movs	r3, #173	; 0xad
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	58d3      	ldr	r3, [r2, r3]
 800b572:	685a      	ldr	r2, [r3, #4]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	b2d9      	uxtb	r1, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	0018      	movs	r0, r3
 800b57e:	4790      	blx	r2
  }

  return USBD_OK;
 800b580:	2300      	movs	r3, #0
}
 800b582:	0018      	movs	r0, r3
 800b584:	46bd      	mov	sp, r7
 800b586:	b002      	add	sp, #8
 800b588:	bd80      	pop	{r7, pc}

0800b58a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b082      	sub	sp, #8
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
 800b592:	000a      	movs	r2, r1
 800b594:	1cfb      	adds	r3, r7, #3
 800b596:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	1cfa      	adds	r2, r7, #3
 800b59c:	7812      	ldrb	r2, [r2, #0]
 800b59e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b5a0:	2300      	movs	r3, #0
}
 800b5a2:	0018      	movs	r0, r3
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	b002      	add	sp, #8
 800b5a8:	bd80      	pop	{r7, pc}
	...

0800b5ac <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	23a7      	movs	r3, #167	; 0xa7
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	5cd1      	ldrb	r1, [r2, r3]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	4a06      	ldr	r2, [pc, #24]	; (800b5d8 <USBD_LL_Suspend+0x2c>)
 800b5c0:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	23a7      	movs	r3, #167	; 0xa7
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	2104      	movs	r1, #4
 800b5ca:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800b5cc:	2300      	movs	r3, #0
}
 800b5ce:	0018      	movs	r0, r3
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	b002      	add	sp, #8
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	46c0      	nop			; (mov r8, r8)
 800b5d8:	0000029d 	.word	0x0000029d

0800b5dc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	23a7      	movs	r3, #167	; 0xa7
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	5cd3      	ldrb	r3, [r2, r3]
 800b5ec:	2b04      	cmp	r3, #4
 800b5ee:	d106      	bne.n	800b5fe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4a05      	ldr	r2, [pc, #20]	; (800b608 <USBD_LL_Resume+0x2c>)
 800b5f4:	5c99      	ldrb	r1, [r3, r2]
 800b5f6:	687a      	ldr	r2, [r7, #4]
 800b5f8:	23a7      	movs	r3, #167	; 0xa7
 800b5fa:	009b      	lsls	r3, r3, #2
 800b5fc:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800b5fe:	2300      	movs	r3, #0
}
 800b600:	0018      	movs	r0, r3
 800b602:	46bd      	mov	sp, r7
 800b604:	b002      	add	sp, #8
 800b606:	bd80      	pop	{r7, pc}
 800b608:	0000029d 	.word	0x0000029d

0800b60c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	23a7      	movs	r3, #167	; 0xa7
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	5cd3      	ldrb	r3, [r2, r3]
 800b61c:	2b03      	cmp	r3, #3
 800b61e:	d10e      	bne.n	800b63e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	23ad      	movs	r3, #173	; 0xad
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	58d3      	ldr	r3, [r2, r3]
 800b628:	69db      	ldr	r3, [r3, #28]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d007      	beq.n	800b63e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	23ad      	movs	r3, #173	; 0xad
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	58d3      	ldr	r3, [r2, r3]
 800b636:	69db      	ldr	r3, [r3, #28]
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	0010      	movs	r0, r2
 800b63c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b63e:	2300      	movs	r3, #0
}
 800b640:	0018      	movs	r0, r3
 800b642:	46bd      	mov	sp, r7
 800b644:	b002      	add	sp, #8
 800b646:	bd80      	pop	{r7, pc}

0800b648 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b652:	230f      	movs	r3, #15
 800b654:	18fb      	adds	r3, r7, r3
 800b656:	2200      	movs	r2, #0
 800b658:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	001a      	movs	r2, r3
 800b660:	2360      	movs	r3, #96	; 0x60
 800b662:	4013      	ands	r3, r2
 800b664:	2b40      	cmp	r3, #64	; 0x40
 800b666:	d004      	beq.n	800b672 <USBD_StdDevReq+0x2a>
 800b668:	d84f      	bhi.n	800b70a <USBD_StdDevReq+0xc2>
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d00b      	beq.n	800b686 <USBD_StdDevReq+0x3e>
 800b66e:	2b20      	cmp	r3, #32
 800b670:	d14b      	bne.n	800b70a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	23ad      	movs	r3, #173	; 0xad
 800b676:	009b      	lsls	r3, r3, #2
 800b678:	58d3      	ldr	r3, [r2, r3]
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	6839      	ldr	r1, [r7, #0]
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	0010      	movs	r0, r2
 800b682:	4798      	blx	r3
      break;
 800b684:	e048      	b.n	800b718 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	785b      	ldrb	r3, [r3, #1]
 800b68a:	2b09      	cmp	r3, #9
 800b68c:	d835      	bhi.n	800b6fa <USBD_StdDevReq+0xb2>
 800b68e:	009a      	lsls	r2, r3, #2
 800b690:	4b25      	ldr	r3, [pc, #148]	; (800b728 <USBD_StdDevReq+0xe0>)
 800b692:	18d3      	adds	r3, r2, r3
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b698:	683a      	ldr	r2, [r7, #0]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	0011      	movs	r1, r2
 800b69e:	0018      	movs	r0, r3
 800b6a0:	f000 fa52 	bl	800bb48 <USBD_GetDescriptor>
          break;
 800b6a4:	e030      	b.n	800b708 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b6a6:	683a      	ldr	r2, [r7, #0]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	0011      	movs	r1, r2
 800b6ac:	0018      	movs	r0, r3
 800b6ae:	f000 fbfd 	bl	800beac <USBD_SetAddress>
          break;
 800b6b2:	e029      	b.n	800b708 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800b6b4:	683a      	ldr	r2, [r7, #0]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	0011      	movs	r1, r2
 800b6ba:	0018      	movs	r0, r3
 800b6bc:	f000 fc4a 	bl	800bf54 <USBD_SetConfig>
          break;
 800b6c0:	e022      	b.n	800b708 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b6c2:	683a      	ldr	r2, [r7, #0]
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	0011      	movs	r1, r2
 800b6c8:	0018      	movs	r0, r3
 800b6ca:	f000 fce7 	bl	800c09c <USBD_GetConfig>
          break;
 800b6ce:	e01b      	b.n	800b708 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b6d0:	683a      	ldr	r2, [r7, #0]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	0011      	movs	r1, r2
 800b6d6:	0018      	movs	r0, r3
 800b6d8:	f000 fd1b 	bl	800c112 <USBD_GetStatus>
          break;
 800b6dc:	e014      	b.n	800b708 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b6de:	683a      	ldr	r2, [r7, #0]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	0011      	movs	r1, r2
 800b6e4:	0018      	movs	r0, r3
 800b6e6:	f000 fd4e 	bl	800c186 <USBD_SetFeature>
          break;
 800b6ea:	e00d      	b.n	800b708 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b6ec:	683a      	ldr	r2, [r7, #0]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	0011      	movs	r1, r2
 800b6f2:	0018      	movs	r0, r3
 800b6f4:	f000 fd5d 	bl	800c1b2 <USBD_ClrFeature>
          break;
 800b6f8:	e006      	b.n	800b708 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b6fa:	683a      	ldr	r2, [r7, #0]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	0011      	movs	r1, r2
 800b700:	0018      	movs	r0, r3
 800b702:	f000 fdb7 	bl	800c274 <USBD_CtlError>
          break;
 800b706:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b708:	e006      	b.n	800b718 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b70a:	683a      	ldr	r2, [r7, #0]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	0011      	movs	r1, r2
 800b710:	0018      	movs	r0, r3
 800b712:	f000 fdaf 	bl	800c274 <USBD_CtlError>
      break;
 800b716:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800b718:	230f      	movs	r3, #15
 800b71a:	18fb      	adds	r3, r7, r3
 800b71c:	781b      	ldrb	r3, [r3, #0]
}
 800b71e:	0018      	movs	r0, r3
 800b720:	46bd      	mov	sp, r7
 800b722:	b004      	add	sp, #16
 800b724:	bd80      	pop	{r7, pc}
 800b726:	46c0      	nop			; (mov r8, r8)
 800b728:	0800d99c 	.word	0x0800d99c

0800b72c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800b72c:	b5b0      	push	{r4, r5, r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b736:	230f      	movs	r3, #15
 800b738:	18fb      	adds	r3, r7, r3
 800b73a:	2200      	movs	r2, #0
 800b73c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	001a      	movs	r2, r3
 800b744:	2360      	movs	r3, #96	; 0x60
 800b746:	4013      	ands	r3, r2
 800b748:	2b40      	cmp	r3, #64	; 0x40
 800b74a:	d004      	beq.n	800b756 <USBD_StdItfReq+0x2a>
 800b74c:	d839      	bhi.n	800b7c2 <USBD_StdItfReq+0x96>
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d001      	beq.n	800b756 <USBD_StdItfReq+0x2a>
 800b752:	2b20      	cmp	r3, #32
 800b754:	d135      	bne.n	800b7c2 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	23a7      	movs	r3, #167	; 0xa7
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	5cd3      	ldrb	r3, [r2, r3]
 800b75e:	3b01      	subs	r3, #1
 800b760:	2b02      	cmp	r3, #2
 800b762:	d825      	bhi.n	800b7b0 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	889b      	ldrh	r3, [r3, #4]
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d819      	bhi.n	800b7a2 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	23ad      	movs	r3, #173	; 0xad
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	58d3      	ldr	r3, [r2, r3]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	250f      	movs	r5, #15
 800b77a:	197c      	adds	r4, r7, r5
 800b77c:	6839      	ldr	r1, [r7, #0]
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	0010      	movs	r0, r2
 800b782:	4798      	blx	r3
 800b784:	0003      	movs	r3, r0
 800b786:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	88db      	ldrh	r3, [r3, #6]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d116      	bne.n	800b7be <USBD_StdItfReq+0x92>
 800b790:	197b      	adds	r3, r7, r5
 800b792:	781b      	ldrb	r3, [r3, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d112      	bne.n	800b7be <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	0018      	movs	r0, r3
 800b79c:	f000 fe52 	bl	800c444 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b7a0:	e00d      	b.n	800b7be <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800b7a2:	683a      	ldr	r2, [r7, #0]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	0011      	movs	r1, r2
 800b7a8:	0018      	movs	r0, r3
 800b7aa:	f000 fd63 	bl	800c274 <USBD_CtlError>
          break;
 800b7ae:	e006      	b.n	800b7be <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800b7b0:	683a      	ldr	r2, [r7, #0]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	0011      	movs	r1, r2
 800b7b6:	0018      	movs	r0, r3
 800b7b8:	f000 fd5c 	bl	800c274 <USBD_CtlError>
          break;
 800b7bc:	e000      	b.n	800b7c0 <USBD_StdItfReq+0x94>
          break;
 800b7be:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b7c0:	e006      	b.n	800b7d0 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800b7c2:	683a      	ldr	r2, [r7, #0]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	0011      	movs	r1, r2
 800b7c8:	0018      	movs	r0, r3
 800b7ca:	f000 fd53 	bl	800c274 <USBD_CtlError>
      break;
 800b7ce:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800b7d0:	2300      	movs	r3, #0
}
 800b7d2:	0018      	movs	r0, r3
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	b004      	add	sp, #16
 800b7d8:	bdb0      	pop	{r4, r5, r7, pc}

0800b7da <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b7da:	b5b0      	push	{r4, r5, r7, lr}
 800b7dc:	b084      	sub	sp, #16
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
 800b7e2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b7e4:	230f      	movs	r3, #15
 800b7e6:	18fb      	adds	r3, r7, r3
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	889a      	ldrh	r2, [r3, #4]
 800b7f0:	230e      	movs	r3, #14
 800b7f2:	18fb      	adds	r3, r7, r3
 800b7f4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	001a      	movs	r2, r3
 800b7fc:	2360      	movs	r3, #96	; 0x60
 800b7fe:	4013      	ands	r3, r2
 800b800:	2b40      	cmp	r3, #64	; 0x40
 800b802:	d006      	beq.n	800b812 <USBD_StdEPReq+0x38>
 800b804:	d900      	bls.n	800b808 <USBD_StdEPReq+0x2e>
 800b806:	e190      	b.n	800bb2a <USBD_StdEPReq+0x350>
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d00c      	beq.n	800b826 <USBD_StdEPReq+0x4c>
 800b80c:	2b20      	cmp	r3, #32
 800b80e:	d000      	beq.n	800b812 <USBD_StdEPReq+0x38>
 800b810:	e18b      	b.n	800bb2a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	23ad      	movs	r3, #173	; 0xad
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	58d3      	ldr	r3, [r2, r3]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	6839      	ldr	r1, [r7, #0]
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	0010      	movs	r0, r2
 800b822:	4798      	blx	r3
      break;
 800b824:	e188      	b.n	800bb38 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	001a      	movs	r2, r3
 800b82c:	2360      	movs	r3, #96	; 0x60
 800b82e:	4013      	ands	r3, r2
 800b830:	2b20      	cmp	r3, #32
 800b832:	d10f      	bne.n	800b854 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b834:	687a      	ldr	r2, [r7, #4]
 800b836:	23ad      	movs	r3, #173	; 0xad
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	58d3      	ldr	r3, [r2, r3]
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	250f      	movs	r5, #15
 800b840:	197c      	adds	r4, r7, r5
 800b842:	6839      	ldr	r1, [r7, #0]
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	0010      	movs	r0, r2
 800b848:	4798      	blx	r3
 800b84a:	0003      	movs	r3, r0
 800b84c:	7023      	strb	r3, [r4, #0]

        return ret;
 800b84e:	197b      	adds	r3, r7, r5
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	e174      	b.n	800bb3e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	785b      	ldrb	r3, [r3, #1]
 800b858:	2b03      	cmp	r3, #3
 800b85a:	d007      	beq.n	800b86c <USBD_StdEPReq+0x92>
 800b85c:	dd00      	ble.n	800b860 <USBD_StdEPReq+0x86>
 800b85e:	e15c      	b.n	800bb1a <USBD_StdEPReq+0x340>
 800b860:	2b00      	cmp	r3, #0
 800b862:	d100      	bne.n	800b866 <USBD_StdEPReq+0x8c>
 800b864:	e092      	b.n	800b98c <USBD_StdEPReq+0x1b2>
 800b866:	2b01      	cmp	r3, #1
 800b868:	d04b      	beq.n	800b902 <USBD_StdEPReq+0x128>
 800b86a:	e156      	b.n	800bb1a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	23a7      	movs	r3, #167	; 0xa7
 800b870:	009b      	lsls	r3, r3, #2
 800b872:	5cd3      	ldrb	r3, [r2, r3]
 800b874:	2b02      	cmp	r3, #2
 800b876:	d002      	beq.n	800b87e <USBD_StdEPReq+0xa4>
 800b878:	2b03      	cmp	r3, #3
 800b87a:	d01d      	beq.n	800b8b8 <USBD_StdEPReq+0xde>
 800b87c:	e039      	b.n	800b8f2 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b87e:	220e      	movs	r2, #14
 800b880:	18bb      	adds	r3, r7, r2
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d010      	beq.n	800b8aa <USBD_StdEPReq+0xd0>
 800b888:	18bb      	adds	r3, r7, r2
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	2b80      	cmp	r3, #128	; 0x80
 800b88e:	d00c      	beq.n	800b8aa <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b890:	18bb      	adds	r3, r7, r2
 800b892:	781a      	ldrb	r2, [r3, #0]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	0011      	movs	r1, r2
 800b898:	0018      	movs	r0, r3
 800b89a:	f001 f9d8 	bl	800cc4e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2180      	movs	r1, #128	; 0x80
 800b8a2:	0018      	movs	r0, r3
 800b8a4:	f001 f9d3 	bl	800cc4e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b8a8:	e02a      	b.n	800b900 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800b8aa:	683a      	ldr	r2, [r7, #0]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	0011      	movs	r1, r2
 800b8b0:	0018      	movs	r0, r3
 800b8b2:	f000 fcdf 	bl	800c274 <USBD_CtlError>
              break;
 800b8b6:	e023      	b.n	800b900 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	885b      	ldrh	r3, [r3, #2]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d113      	bne.n	800b8e8 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800b8c0:	220e      	movs	r2, #14
 800b8c2:	18bb      	adds	r3, r7, r2
 800b8c4:	781b      	ldrb	r3, [r3, #0]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00e      	beq.n	800b8e8 <USBD_StdEPReq+0x10e>
 800b8ca:	18bb      	adds	r3, r7, r2
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	2b80      	cmp	r3, #128	; 0x80
 800b8d0:	d00a      	beq.n	800b8e8 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	88db      	ldrh	r3, [r3, #6]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d106      	bne.n	800b8e8 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b8da:	18bb      	adds	r3, r7, r2
 800b8dc:	781a      	ldrb	r2, [r3, #0]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	0011      	movs	r1, r2
 800b8e2:	0018      	movs	r0, r3
 800b8e4:	f001 f9b3 	bl	800cc4e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	0018      	movs	r0, r3
 800b8ec:	f000 fdaa 	bl	800c444 <USBD_CtlSendStatus>

              break;
 800b8f0:	e006      	b.n	800b900 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800b8f2:	683a      	ldr	r2, [r7, #0]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	0011      	movs	r1, r2
 800b8f8:	0018      	movs	r0, r3
 800b8fa:	f000 fcbb 	bl	800c274 <USBD_CtlError>
              break;
 800b8fe:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b900:	e112      	b.n	800bb28 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	23a7      	movs	r3, #167	; 0xa7
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	5cd3      	ldrb	r3, [r2, r3]
 800b90a:	2b02      	cmp	r3, #2
 800b90c:	d002      	beq.n	800b914 <USBD_StdEPReq+0x13a>
 800b90e:	2b03      	cmp	r3, #3
 800b910:	d01d      	beq.n	800b94e <USBD_StdEPReq+0x174>
 800b912:	e032      	b.n	800b97a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b914:	220e      	movs	r2, #14
 800b916:	18bb      	adds	r3, r7, r2
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d010      	beq.n	800b940 <USBD_StdEPReq+0x166>
 800b91e:	18bb      	adds	r3, r7, r2
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	2b80      	cmp	r3, #128	; 0x80
 800b924:	d00c      	beq.n	800b940 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b926:	18bb      	adds	r3, r7, r2
 800b928:	781a      	ldrb	r2, [r3, #0]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	0011      	movs	r1, r2
 800b92e:	0018      	movs	r0, r3
 800b930:	f001 f98d 	bl	800cc4e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2180      	movs	r1, #128	; 0x80
 800b938:	0018      	movs	r0, r3
 800b93a:	f001 f988 	bl	800cc4e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b93e:	e024      	b.n	800b98a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800b940:	683a      	ldr	r2, [r7, #0]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	0011      	movs	r1, r2
 800b946:	0018      	movs	r0, r3
 800b948:	f000 fc94 	bl	800c274 <USBD_CtlError>
              break;
 800b94c:	e01d      	b.n	800b98a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	885b      	ldrh	r3, [r3, #2]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d118      	bne.n	800b988 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b956:	210e      	movs	r1, #14
 800b958:	187b      	adds	r3, r7, r1
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	227f      	movs	r2, #127	; 0x7f
 800b95e:	4013      	ands	r3, r2
 800b960:	d006      	beq.n	800b970 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b962:	187b      	adds	r3, r7, r1
 800b964:	781a      	ldrb	r2, [r3, #0]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	0011      	movs	r1, r2
 800b96a:	0018      	movs	r0, r3
 800b96c:	f001 f99a 	bl	800cca4 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	0018      	movs	r0, r3
 800b974:	f000 fd66 	bl	800c444 <USBD_CtlSendStatus>
              }
              break;
 800b978:	e006      	b.n	800b988 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800b97a:	683a      	ldr	r2, [r7, #0]
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	0011      	movs	r1, r2
 800b980:	0018      	movs	r0, r3
 800b982:	f000 fc77 	bl	800c274 <USBD_CtlError>
              break;
 800b986:	e000      	b.n	800b98a <USBD_StdEPReq+0x1b0>
              break;
 800b988:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b98a:	e0cd      	b.n	800bb28 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	23a7      	movs	r3, #167	; 0xa7
 800b990:	009b      	lsls	r3, r3, #2
 800b992:	5cd3      	ldrb	r3, [r2, r3]
 800b994:	2b02      	cmp	r3, #2
 800b996:	d002      	beq.n	800b99e <USBD_StdEPReq+0x1c4>
 800b998:	2b03      	cmp	r3, #3
 800b99a:	d03c      	beq.n	800ba16 <USBD_StdEPReq+0x23c>
 800b99c:	e0b5      	b.n	800bb0a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b99e:	220e      	movs	r2, #14
 800b9a0:	18bb      	adds	r3, r7, r2
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d00a      	beq.n	800b9be <USBD_StdEPReq+0x1e4>
 800b9a8:	18bb      	adds	r3, r7, r2
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	2b80      	cmp	r3, #128	; 0x80
 800b9ae:	d006      	beq.n	800b9be <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800b9b0:	683a      	ldr	r2, [r7, #0]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	0011      	movs	r1, r2
 800b9b6:	0018      	movs	r0, r3
 800b9b8:	f000 fc5c 	bl	800c274 <USBD_CtlError>
                break;
 800b9bc:	e0ac      	b.n	800bb18 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9be:	220e      	movs	r2, #14
 800b9c0:	18bb      	adds	r3, r7, r2
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	b25b      	sxtb	r3, r3
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	da0c      	bge.n	800b9e4 <USBD_StdEPReq+0x20a>
 800b9ca:	18bb      	adds	r3, r7, r2
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	227f      	movs	r2, #127	; 0x7f
 800b9d0:	401a      	ands	r2, r3
 800b9d2:	0013      	movs	r3, r2
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	189b      	adds	r3, r3, r2
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	3310      	adds	r3, #16
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	18d3      	adds	r3, r2, r3
 800b9e0:	3304      	adds	r3, #4
 800b9e2:	e00d      	b.n	800ba00 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b9e4:	230e      	movs	r3, #14
 800b9e6:	18fb      	adds	r3, r7, r3
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	227f      	movs	r2, #127	; 0x7f
 800b9ec:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b9ee:	0013      	movs	r3, r2
 800b9f0:	009b      	lsls	r3, r3, #2
 800b9f2:	189b      	adds	r3, r3, r2
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	3351      	adds	r3, #81	; 0x51
 800b9f8:	33ff      	adds	r3, #255	; 0xff
 800b9fa:	687a      	ldr	r2, [r7, #4]
 800b9fc:	18d3      	adds	r3, r2, r3
 800b9fe:	3304      	adds	r3, #4
 800ba00:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	2200      	movs	r2, #0
 800ba06:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ba08:	68b9      	ldr	r1, [r7, #8]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2202      	movs	r2, #2
 800ba0e:	0018      	movs	r0, r3
 800ba10:	f000 fcae 	bl	800c370 <USBD_CtlSendData>
              break;
 800ba14:	e080      	b.n	800bb18 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ba16:	220e      	movs	r2, #14
 800ba18:	18bb      	adds	r3, r7, r2
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	b25b      	sxtb	r3, r3
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	da14      	bge.n	800ba4c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ba22:	18bb      	adds	r3, r7, r2
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	220f      	movs	r2, #15
 800ba28:	401a      	ands	r2, r3
 800ba2a:	6879      	ldr	r1, [r7, #4]
 800ba2c:	0013      	movs	r3, r2
 800ba2e:	009b      	lsls	r3, r3, #2
 800ba30:	189b      	adds	r3, r3, r2
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	18cb      	adds	r3, r1, r3
 800ba36:	3318      	adds	r3, #24
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d11e      	bne.n	800ba7c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800ba3e:	683a      	ldr	r2, [r7, #0]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	0011      	movs	r1, r2
 800ba44:	0018      	movs	r0, r3
 800ba46:	f000 fc15 	bl	800c274 <USBD_CtlError>
                  break;
 800ba4a:	e065      	b.n	800bb18 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ba4c:	230e      	movs	r3, #14
 800ba4e:	18fb      	adds	r3, r7, r3
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	220f      	movs	r2, #15
 800ba54:	401a      	ands	r2, r3
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	23ac      	movs	r3, #172	; 0xac
 800ba5a:	0059      	lsls	r1, r3, #1
 800ba5c:	0013      	movs	r3, r2
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	189b      	adds	r3, r3, r2
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	18c3      	adds	r3, r0, r3
 800ba66:	185b      	adds	r3, r3, r1
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d106      	bne.n	800ba7c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800ba6e:	683a      	ldr	r2, [r7, #0]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	0011      	movs	r1, r2
 800ba74:	0018      	movs	r0, r3
 800ba76:	f000 fbfd 	bl	800c274 <USBD_CtlError>
                  break;
 800ba7a:	e04d      	b.n	800bb18 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ba7c:	220e      	movs	r2, #14
 800ba7e:	18bb      	adds	r3, r7, r2
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	b25b      	sxtb	r3, r3
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	da0c      	bge.n	800baa2 <USBD_StdEPReq+0x2c8>
 800ba88:	18bb      	adds	r3, r7, r2
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	227f      	movs	r2, #127	; 0x7f
 800ba8e:	401a      	ands	r2, r3
 800ba90:	0013      	movs	r3, r2
 800ba92:	009b      	lsls	r3, r3, #2
 800ba94:	189b      	adds	r3, r3, r2
 800ba96:	009b      	lsls	r3, r3, #2
 800ba98:	3310      	adds	r3, #16
 800ba9a:	687a      	ldr	r2, [r7, #4]
 800ba9c:	18d3      	adds	r3, r2, r3
 800ba9e:	3304      	adds	r3, #4
 800baa0:	e00d      	b.n	800babe <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800baa2:	230e      	movs	r3, #14
 800baa4:	18fb      	adds	r3, r7, r3
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	227f      	movs	r2, #127	; 0x7f
 800baaa:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800baac:	0013      	movs	r3, r2
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	189b      	adds	r3, r3, r2
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	3351      	adds	r3, #81	; 0x51
 800bab6:	33ff      	adds	r3, #255	; 0xff
 800bab8:	687a      	ldr	r2, [r7, #4]
 800baba:	18d3      	adds	r3, r2, r3
 800babc:	3304      	adds	r3, #4
 800babe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bac0:	220e      	movs	r2, #14
 800bac2:	18bb      	adds	r3, r7, r2
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d003      	beq.n	800bad2 <USBD_StdEPReq+0x2f8>
 800baca:	18bb      	adds	r3, r7, r2
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	2b80      	cmp	r3, #128	; 0x80
 800bad0:	d103      	bne.n	800bada <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	2200      	movs	r2, #0
 800bad6:	601a      	str	r2, [r3, #0]
 800bad8:	e010      	b.n	800bafc <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800bada:	230e      	movs	r3, #14
 800badc:	18fb      	adds	r3, r7, r3
 800bade:	781a      	ldrb	r2, [r3, #0]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	0011      	movs	r1, r2
 800bae4:	0018      	movs	r0, r3
 800bae6:	f001 f908 	bl	800ccfa <USBD_LL_IsStallEP>
 800baea:	1e03      	subs	r3, r0, #0
 800baec:	d003      	beq.n	800baf6 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	2201      	movs	r2, #1
 800baf2:	601a      	str	r2, [r3, #0]
 800baf4:	e002      	b.n	800bafc <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	2200      	movs	r2, #0
 800bafa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800bafc:	68b9      	ldr	r1, [r7, #8]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2202      	movs	r2, #2
 800bb02:	0018      	movs	r0, r3
 800bb04:	f000 fc34 	bl	800c370 <USBD_CtlSendData>
              break;
 800bb08:	e006      	b.n	800bb18 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800bb0a:	683a      	ldr	r2, [r7, #0]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	0011      	movs	r1, r2
 800bb10:	0018      	movs	r0, r3
 800bb12:	f000 fbaf 	bl	800c274 <USBD_CtlError>
              break;
 800bb16:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800bb18:	e006      	b.n	800bb28 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800bb1a:	683a      	ldr	r2, [r7, #0]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	0011      	movs	r1, r2
 800bb20:	0018      	movs	r0, r3
 800bb22:	f000 fba7 	bl	800c274 <USBD_CtlError>
          break;
 800bb26:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800bb28:	e006      	b.n	800bb38 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800bb2a:	683a      	ldr	r2, [r7, #0]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	0011      	movs	r1, r2
 800bb30:	0018      	movs	r0, r3
 800bb32:	f000 fb9f 	bl	800c274 <USBD_CtlError>
      break;
 800bb36:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800bb38:	230f      	movs	r3, #15
 800bb3a:	18fb      	adds	r3, r7, r3
 800bb3c:	781b      	ldrb	r3, [r3, #0]
}
 800bb3e:	0018      	movs	r0, r3
 800bb40:	46bd      	mov	sp, r7
 800bb42:	b004      	add	sp, #16
 800bb44:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800bb48 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b084      	sub	sp, #16
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb52:	2308      	movs	r3, #8
 800bb54:	18fb      	adds	r3, r7, r3
 800bb56:	2200      	movs	r2, #0
 800bb58:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bb5e:	230b      	movs	r3, #11
 800bb60:	18fb      	adds	r3, r7, r3
 800bb62:	2200      	movs	r2, #0
 800bb64:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	885b      	ldrh	r3, [r3, #2]
 800bb6a:	0a1b      	lsrs	r3, r3, #8
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	2b07      	cmp	r3, #7
 800bb70:	d900      	bls.n	800bb74 <USBD_GetDescriptor+0x2c>
 800bb72:	e159      	b.n	800be28 <USBD_GetDescriptor+0x2e0>
 800bb74:	009a      	lsls	r2, r3, #2
 800bb76:	4bcb      	ldr	r3, [pc, #812]	; (800bea4 <USBD_GetDescriptor+0x35c>)
 800bb78:	18d3      	adds	r3, r2, r3
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	23ac      	movs	r3, #172	; 0xac
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	58d3      	ldr	r3, [r2, r3]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	7c12      	ldrb	r2, [r2, #16]
 800bb8c:	2108      	movs	r1, #8
 800bb8e:	1879      	adds	r1, r7, r1
 800bb90:	0010      	movs	r0, r2
 800bb92:	4798      	blx	r3
 800bb94:	0003      	movs	r3, r0
 800bb96:	60fb      	str	r3, [r7, #12]
      break;
 800bb98:	e153      	b.n	800be42 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	7c1b      	ldrb	r3, [r3, #16]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d10f      	bne.n	800bbc2 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	23ad      	movs	r3, #173	; 0xad
 800bba6:	009b      	lsls	r3, r3, #2
 800bba8:	58d3      	ldr	r3, [r2, r3]
 800bbaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbac:	2208      	movs	r2, #8
 800bbae:	18ba      	adds	r2, r7, r2
 800bbb0:	0010      	movs	r0, r2
 800bbb2:	4798      	blx	r3
 800bbb4:	0003      	movs	r3, r0
 800bbb6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	3301      	adds	r3, #1
 800bbbc:	2202      	movs	r2, #2
 800bbbe:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bbc0:	e13f      	b.n	800be42 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	23ad      	movs	r3, #173	; 0xad
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	58d3      	ldr	r3, [r2, r3]
 800bbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbcc:	2208      	movs	r2, #8
 800bbce:	18ba      	adds	r2, r7, r2
 800bbd0:	0010      	movs	r0, r2
 800bbd2:	4798      	blx	r3
 800bbd4:	0003      	movs	r3, r0
 800bbd6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	2202      	movs	r2, #2
 800bbde:	701a      	strb	r2, [r3, #0]
      break;
 800bbe0:	e12f      	b.n	800be42 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	885b      	ldrh	r3, [r3, #2]
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	2b05      	cmp	r3, #5
 800bbea:	d900      	bls.n	800bbee <USBD_GetDescriptor+0xa6>
 800bbec:	e0d0      	b.n	800bd90 <USBD_GetDescriptor+0x248>
 800bbee:	009a      	lsls	r2, r3, #2
 800bbf0:	4bad      	ldr	r3, [pc, #692]	; (800bea8 <USBD_GetDescriptor+0x360>)
 800bbf2:	18d3      	adds	r3, r2, r3
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	23ac      	movs	r3, #172	; 0xac
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	58d3      	ldr	r3, [r2, r3]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d00d      	beq.n	800bc22 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	23ac      	movs	r3, #172	; 0xac
 800bc0a:	009b      	lsls	r3, r3, #2
 800bc0c:	58d3      	ldr	r3, [r2, r3]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	7c12      	ldrb	r2, [r2, #16]
 800bc14:	2108      	movs	r1, #8
 800bc16:	1879      	adds	r1, r7, r1
 800bc18:	0010      	movs	r0, r2
 800bc1a:	4798      	blx	r3
 800bc1c:	0003      	movs	r3, r0
 800bc1e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc20:	e0c3      	b.n	800bdaa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bc22:	683a      	ldr	r2, [r7, #0]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	0011      	movs	r1, r2
 800bc28:	0018      	movs	r0, r3
 800bc2a:	f000 fb23 	bl	800c274 <USBD_CtlError>
            err++;
 800bc2e:	210b      	movs	r1, #11
 800bc30:	187b      	adds	r3, r7, r1
 800bc32:	781a      	ldrb	r2, [r3, #0]
 800bc34:	187b      	adds	r3, r7, r1
 800bc36:	3201      	adds	r2, #1
 800bc38:	701a      	strb	r2, [r3, #0]
          break;
 800bc3a:	e0b6      	b.n	800bdaa <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	23ac      	movs	r3, #172	; 0xac
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	58d3      	ldr	r3, [r2, r3]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d00d      	beq.n	800bc66 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	23ac      	movs	r3, #172	; 0xac
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	58d3      	ldr	r3, [r2, r3]
 800bc52:	689b      	ldr	r3, [r3, #8]
 800bc54:	687a      	ldr	r2, [r7, #4]
 800bc56:	7c12      	ldrb	r2, [r2, #16]
 800bc58:	2108      	movs	r1, #8
 800bc5a:	1879      	adds	r1, r7, r1
 800bc5c:	0010      	movs	r0, r2
 800bc5e:	4798      	blx	r3
 800bc60:	0003      	movs	r3, r0
 800bc62:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bc64:	e0a1      	b.n	800bdaa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bc66:	683a      	ldr	r2, [r7, #0]
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	0011      	movs	r1, r2
 800bc6c:	0018      	movs	r0, r3
 800bc6e:	f000 fb01 	bl	800c274 <USBD_CtlError>
            err++;
 800bc72:	210b      	movs	r1, #11
 800bc74:	187b      	adds	r3, r7, r1
 800bc76:	781a      	ldrb	r2, [r3, #0]
 800bc78:	187b      	adds	r3, r7, r1
 800bc7a:	3201      	adds	r2, #1
 800bc7c:	701a      	strb	r2, [r3, #0]
          break;
 800bc7e:	e094      	b.n	800bdaa <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	23ac      	movs	r3, #172	; 0xac
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	58d3      	ldr	r3, [r2, r3]
 800bc88:	68db      	ldr	r3, [r3, #12]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d00d      	beq.n	800bcaa <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	23ac      	movs	r3, #172	; 0xac
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	58d3      	ldr	r3, [r2, r3]
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	687a      	ldr	r2, [r7, #4]
 800bc9a:	7c12      	ldrb	r2, [r2, #16]
 800bc9c:	2108      	movs	r1, #8
 800bc9e:	1879      	adds	r1, r7, r1
 800bca0:	0010      	movs	r0, r2
 800bca2:	4798      	blx	r3
 800bca4:	0003      	movs	r3, r0
 800bca6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bca8:	e07f      	b.n	800bdaa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bcaa:	683a      	ldr	r2, [r7, #0]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	0011      	movs	r1, r2
 800bcb0:	0018      	movs	r0, r3
 800bcb2:	f000 fadf 	bl	800c274 <USBD_CtlError>
            err++;
 800bcb6:	210b      	movs	r1, #11
 800bcb8:	187b      	adds	r3, r7, r1
 800bcba:	781a      	ldrb	r2, [r3, #0]
 800bcbc:	187b      	adds	r3, r7, r1
 800bcbe:	3201      	adds	r2, #1
 800bcc0:	701a      	strb	r2, [r3, #0]
          break;
 800bcc2:	e072      	b.n	800bdaa <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	23ac      	movs	r3, #172	; 0xac
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	58d3      	ldr	r3, [r2, r3]
 800bccc:	691b      	ldr	r3, [r3, #16]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d00d      	beq.n	800bcee <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	23ac      	movs	r3, #172	; 0xac
 800bcd6:	009b      	lsls	r3, r3, #2
 800bcd8:	58d3      	ldr	r3, [r2, r3]
 800bcda:	691b      	ldr	r3, [r3, #16]
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	7c12      	ldrb	r2, [r2, #16]
 800bce0:	2108      	movs	r1, #8
 800bce2:	1879      	adds	r1, r7, r1
 800bce4:	0010      	movs	r0, r2
 800bce6:	4798      	blx	r3
 800bce8:	0003      	movs	r3, r0
 800bcea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bcec:	e05d      	b.n	800bdaa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bcee:	683a      	ldr	r2, [r7, #0]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	0011      	movs	r1, r2
 800bcf4:	0018      	movs	r0, r3
 800bcf6:	f000 fabd 	bl	800c274 <USBD_CtlError>
            err++;
 800bcfa:	210b      	movs	r1, #11
 800bcfc:	187b      	adds	r3, r7, r1
 800bcfe:	781a      	ldrb	r2, [r3, #0]
 800bd00:	187b      	adds	r3, r7, r1
 800bd02:	3201      	adds	r2, #1
 800bd04:	701a      	strb	r2, [r3, #0]
          break;
 800bd06:	e050      	b.n	800bdaa <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	23ac      	movs	r3, #172	; 0xac
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	58d3      	ldr	r3, [r2, r3]
 800bd10:	695b      	ldr	r3, [r3, #20]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d00d      	beq.n	800bd32 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bd16:	687a      	ldr	r2, [r7, #4]
 800bd18:	23ac      	movs	r3, #172	; 0xac
 800bd1a:	009b      	lsls	r3, r3, #2
 800bd1c:	58d3      	ldr	r3, [r2, r3]
 800bd1e:	695b      	ldr	r3, [r3, #20]
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	7c12      	ldrb	r2, [r2, #16]
 800bd24:	2108      	movs	r1, #8
 800bd26:	1879      	adds	r1, r7, r1
 800bd28:	0010      	movs	r0, r2
 800bd2a:	4798      	blx	r3
 800bd2c:	0003      	movs	r3, r0
 800bd2e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd30:	e03b      	b.n	800bdaa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bd32:	683a      	ldr	r2, [r7, #0]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	0011      	movs	r1, r2
 800bd38:	0018      	movs	r0, r3
 800bd3a:	f000 fa9b 	bl	800c274 <USBD_CtlError>
            err++;
 800bd3e:	210b      	movs	r1, #11
 800bd40:	187b      	adds	r3, r7, r1
 800bd42:	781a      	ldrb	r2, [r3, #0]
 800bd44:	187b      	adds	r3, r7, r1
 800bd46:	3201      	adds	r2, #1
 800bd48:	701a      	strb	r2, [r3, #0]
          break;
 800bd4a:	e02e      	b.n	800bdaa <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	23ac      	movs	r3, #172	; 0xac
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	58d3      	ldr	r3, [r2, r3]
 800bd54:	699b      	ldr	r3, [r3, #24]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d00d      	beq.n	800bd76 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	23ac      	movs	r3, #172	; 0xac
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	58d3      	ldr	r3, [r2, r3]
 800bd62:	699b      	ldr	r3, [r3, #24]
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	7c12      	ldrb	r2, [r2, #16]
 800bd68:	2108      	movs	r1, #8
 800bd6a:	1879      	adds	r1, r7, r1
 800bd6c:	0010      	movs	r0, r2
 800bd6e:	4798      	blx	r3
 800bd70:	0003      	movs	r3, r0
 800bd72:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd74:	e019      	b.n	800bdaa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800bd76:	683a      	ldr	r2, [r7, #0]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	0011      	movs	r1, r2
 800bd7c:	0018      	movs	r0, r3
 800bd7e:	f000 fa79 	bl	800c274 <USBD_CtlError>
            err++;
 800bd82:	210b      	movs	r1, #11
 800bd84:	187b      	adds	r3, r7, r1
 800bd86:	781a      	ldrb	r2, [r3, #0]
 800bd88:	187b      	adds	r3, r7, r1
 800bd8a:	3201      	adds	r2, #1
 800bd8c:	701a      	strb	r2, [r3, #0]
          break;
 800bd8e:	e00c      	b.n	800bdaa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800bd90:	683a      	ldr	r2, [r7, #0]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	0011      	movs	r1, r2
 800bd96:	0018      	movs	r0, r3
 800bd98:	f000 fa6c 	bl	800c274 <USBD_CtlError>
          err++;
 800bd9c:	210b      	movs	r1, #11
 800bd9e:	187b      	adds	r3, r7, r1
 800bda0:	781a      	ldrb	r2, [r3, #0]
 800bda2:	187b      	adds	r3, r7, r1
 800bda4:	3201      	adds	r2, #1
 800bda6:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800bda8:	e04b      	b.n	800be42 <USBD_GetDescriptor+0x2fa>
 800bdaa:	e04a      	b.n	800be42 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	7c1b      	ldrb	r3, [r3, #16]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d10b      	bne.n	800bdcc <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	23ad      	movs	r3, #173	; 0xad
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	58d3      	ldr	r3, [r2, r3]
 800bdbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdbe:	2208      	movs	r2, #8
 800bdc0:	18ba      	adds	r2, r7, r2
 800bdc2:	0010      	movs	r0, r2
 800bdc4:	4798      	blx	r3
 800bdc6:	0003      	movs	r3, r0
 800bdc8:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bdca:	e03a      	b.n	800be42 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800bdcc:	683a      	ldr	r2, [r7, #0]
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	0011      	movs	r1, r2
 800bdd2:	0018      	movs	r0, r3
 800bdd4:	f000 fa4e 	bl	800c274 <USBD_CtlError>
        err++;
 800bdd8:	210b      	movs	r1, #11
 800bdda:	187b      	adds	r3, r7, r1
 800bddc:	781a      	ldrb	r2, [r3, #0]
 800bdde:	187b      	adds	r3, r7, r1
 800bde0:	3201      	adds	r2, #1
 800bde2:	701a      	strb	r2, [r3, #0]
      break;
 800bde4:	e02d      	b.n	800be42 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	7c1b      	ldrb	r3, [r3, #16]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d10f      	bne.n	800be0e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	23ad      	movs	r3, #173	; 0xad
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	58d3      	ldr	r3, [r2, r3]
 800bdf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf8:	2208      	movs	r2, #8
 800bdfa:	18ba      	adds	r2, r7, r2
 800bdfc:	0010      	movs	r0, r2
 800bdfe:	4798      	blx	r3
 800be00:	0003      	movs	r3, r0
 800be02:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	3301      	adds	r3, #1
 800be08:	2207      	movs	r2, #7
 800be0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be0c:	e019      	b.n	800be42 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800be0e:	683a      	ldr	r2, [r7, #0]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	0011      	movs	r1, r2
 800be14:	0018      	movs	r0, r3
 800be16:	f000 fa2d 	bl	800c274 <USBD_CtlError>
        err++;
 800be1a:	210b      	movs	r1, #11
 800be1c:	187b      	adds	r3, r7, r1
 800be1e:	781a      	ldrb	r2, [r3, #0]
 800be20:	187b      	adds	r3, r7, r1
 800be22:	3201      	adds	r2, #1
 800be24:	701a      	strb	r2, [r3, #0]
      break;
 800be26:	e00c      	b.n	800be42 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800be28:	683a      	ldr	r2, [r7, #0]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	0011      	movs	r1, r2
 800be2e:	0018      	movs	r0, r3
 800be30:	f000 fa20 	bl	800c274 <USBD_CtlError>
      err++;
 800be34:	210b      	movs	r1, #11
 800be36:	187b      	adds	r3, r7, r1
 800be38:	781a      	ldrb	r2, [r3, #0]
 800be3a:	187b      	adds	r3, r7, r1
 800be3c:	3201      	adds	r2, #1
 800be3e:	701a      	strb	r2, [r3, #0]
      break;
 800be40:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800be42:	230b      	movs	r3, #11
 800be44:	18fb      	adds	r3, r7, r3
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d127      	bne.n	800be9c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800be4c:	2108      	movs	r1, #8
 800be4e:	187b      	adds	r3, r7, r1
 800be50:	881b      	ldrh	r3, [r3, #0]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d019      	beq.n	800be8a <USBD_GetDescriptor+0x342>
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	88db      	ldrh	r3, [r3, #6]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d015      	beq.n	800be8a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	88da      	ldrh	r2, [r3, #6]
 800be62:	187b      	adds	r3, r7, r1
 800be64:	881b      	ldrh	r3, [r3, #0]
 800be66:	1c18      	adds	r0, r3, #0
 800be68:	1c11      	adds	r1, r2, #0
 800be6a:	b28a      	uxth	r2, r1
 800be6c:	b283      	uxth	r3, r0
 800be6e:	429a      	cmp	r2, r3
 800be70:	d900      	bls.n	800be74 <USBD_GetDescriptor+0x32c>
 800be72:	1c01      	adds	r1, r0, #0
 800be74:	b28a      	uxth	r2, r1
 800be76:	2108      	movs	r1, #8
 800be78:	187b      	adds	r3, r7, r1
 800be7a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800be7c:	187b      	adds	r3, r7, r1
 800be7e:	881a      	ldrh	r2, [r3, #0]
 800be80:	68f9      	ldr	r1, [r7, #12]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	0018      	movs	r0, r3
 800be86:	f000 fa73 	bl	800c370 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	88db      	ldrh	r3, [r3, #6]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d105      	bne.n	800be9e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	0018      	movs	r0, r3
 800be96:	f000 fad5 	bl	800c444 <USBD_CtlSendStatus>
 800be9a:	e000      	b.n	800be9e <USBD_GetDescriptor+0x356>
    return;
 800be9c:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800be9e:	46bd      	mov	sp, r7
 800bea0:	b004      	add	sp, #16
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	0800d9c4 	.word	0x0800d9c4
 800bea8:	0800d9e4 	.word	0x0800d9e4

0800beac <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800beac:	b590      	push	{r4, r7, lr}
 800beae:	b085      	sub	sp, #20
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	889b      	ldrh	r3, [r3, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d13d      	bne.n	800bf3a <USBD_SetAddress+0x8e>
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	88db      	ldrh	r3, [r3, #6]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d139      	bne.n	800bf3a <USBD_SetAddress+0x8e>
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	885b      	ldrh	r3, [r3, #2]
 800beca:	2b7f      	cmp	r3, #127	; 0x7f
 800becc:	d835      	bhi.n	800bf3a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	885b      	ldrh	r3, [r3, #2]
 800bed2:	b2da      	uxtb	r2, r3
 800bed4:	230f      	movs	r3, #15
 800bed6:	18fb      	adds	r3, r7, r3
 800bed8:	217f      	movs	r1, #127	; 0x7f
 800beda:	400a      	ands	r2, r1
 800bedc:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	23a7      	movs	r3, #167	; 0xa7
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	5cd3      	ldrb	r3, [r2, r3]
 800bee6:	2b03      	cmp	r3, #3
 800bee8:	d106      	bne.n	800bef8 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800beea:	683a      	ldr	r2, [r7, #0]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	0011      	movs	r1, r2
 800bef0:	0018      	movs	r0, r3
 800bef2:	f000 f9bf 	bl	800c274 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bef6:	e027      	b.n	800bf48 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	240f      	movs	r4, #15
 800befc:	193a      	adds	r2, r7, r4
 800befe:	4914      	ldr	r1, [pc, #80]	; (800bf50 <USBD_SetAddress+0xa4>)
 800bf00:	7812      	ldrb	r2, [r2, #0]
 800bf02:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bf04:	193b      	adds	r3, r7, r4
 800bf06:	781a      	ldrb	r2, [r3, #0]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	0011      	movs	r1, r2
 800bf0c:	0018      	movs	r0, r3
 800bf0e:	f000 ff25 	bl	800cd5c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	0018      	movs	r0, r3
 800bf16:	f000 fa95 	bl	800c444 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bf1a:	193b      	adds	r3, r7, r4
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d005      	beq.n	800bf2e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	23a7      	movs	r3, #167	; 0xa7
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	2102      	movs	r1, #2
 800bf2a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf2c:	e00c      	b.n	800bf48 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	23a7      	movs	r3, #167	; 0xa7
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	2101      	movs	r1, #1
 800bf36:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf38:	e006      	b.n	800bf48 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bf3a:	683a      	ldr	r2, [r7, #0]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	0011      	movs	r1, r2
 800bf40:	0018      	movs	r0, r3
 800bf42:	f000 f997 	bl	800c274 <USBD_CtlError>
  }
}
 800bf46:	46c0      	nop			; (mov r8, r8)
 800bf48:	46c0      	nop			; (mov r8, r8)
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	b005      	add	sp, #20
 800bf4e:	bd90      	pop	{r4, r7, pc}
 800bf50:	0000029e 	.word	0x0000029e

0800bf54 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	885b      	ldrh	r3, [r3, #2]
 800bf62:	b2da      	uxtb	r2, r3
 800bf64:	4b4c      	ldr	r3, [pc, #304]	; (800c098 <USBD_SetConfig+0x144>)
 800bf66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bf68:	4b4b      	ldr	r3, [pc, #300]	; (800c098 <USBD_SetConfig+0x144>)
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d906      	bls.n	800bf7e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800bf70:	683a      	ldr	r2, [r7, #0]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	0011      	movs	r1, r2
 800bf76:	0018      	movs	r0, r3
 800bf78:	f000 f97c 	bl	800c274 <USBD_CtlError>
 800bf7c:	e088      	b.n	800c090 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800bf7e:	687a      	ldr	r2, [r7, #4]
 800bf80:	23a7      	movs	r3, #167	; 0xa7
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	5cd3      	ldrb	r3, [r2, r3]
 800bf86:	2b02      	cmp	r3, #2
 800bf88:	d002      	beq.n	800bf90 <USBD_SetConfig+0x3c>
 800bf8a:	2b03      	cmp	r3, #3
 800bf8c:	d029      	beq.n	800bfe2 <USBD_SetConfig+0x8e>
 800bf8e:	e071      	b.n	800c074 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800bf90:	4b41      	ldr	r3, [pc, #260]	; (800c098 <USBD_SetConfig+0x144>)
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d01f      	beq.n	800bfd8 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800bf98:	4b3f      	ldr	r3, [pc, #252]	; (800c098 <USBD_SetConfig+0x144>)
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	001a      	movs	r2, r3
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	23a7      	movs	r3, #167	; 0xa7
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	2103      	movs	r1, #3
 800bfaa:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800bfac:	4b3a      	ldr	r3, [pc, #232]	; (800c098 <USBD_SetConfig+0x144>)
 800bfae:	781a      	ldrb	r2, [r3, #0]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	0011      	movs	r1, r2
 800bfb4:	0018      	movs	r0, r3
 800bfb6:	f7ff f8c6 	bl	800b146 <USBD_SetClassConfig>
 800bfba:	0003      	movs	r3, r0
 800bfbc:	2b02      	cmp	r3, #2
 800bfbe:	d106      	bne.n	800bfce <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800bfc0:	683a      	ldr	r2, [r7, #0]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	0011      	movs	r1, r2
 800bfc6:	0018      	movs	r0, r3
 800bfc8:	f000 f954 	bl	800c274 <USBD_CtlError>
            return;
 800bfcc:	e060      	b.n	800c090 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	0018      	movs	r0, r3
 800bfd2:	f000 fa37 	bl	800c444 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800bfd6:	e05b      	b.n	800c090 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	0018      	movs	r0, r3
 800bfdc:	f000 fa32 	bl	800c444 <USBD_CtlSendStatus>
        break;
 800bfe0:	e056      	b.n	800c090 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800bfe2:	4b2d      	ldr	r3, [pc, #180]	; (800c098 <USBD_SetConfig+0x144>)
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d115      	bne.n	800c016 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	23a7      	movs	r3, #167	; 0xa7
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	2102      	movs	r1, #2
 800bff2:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800bff4:	4b28      	ldr	r3, [pc, #160]	; (800c098 <USBD_SetConfig+0x144>)
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	001a      	movs	r2, r3
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800bffe:	4b26      	ldr	r3, [pc, #152]	; (800c098 <USBD_SetConfig+0x144>)
 800c000:	781a      	ldrb	r2, [r3, #0]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	0011      	movs	r1, r2
 800c006:	0018      	movs	r0, r3
 800c008:	f7ff f8c4 	bl	800b194 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	0018      	movs	r0, r3
 800c010:	f000 fa18 	bl	800c444 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c014:	e03c      	b.n	800c090 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800c016:	4b20      	ldr	r3, [pc, #128]	; (800c098 <USBD_SetConfig+0x144>)
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	001a      	movs	r2, r3
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	429a      	cmp	r2, r3
 800c022:	d022      	beq.n	800c06a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	b2da      	uxtb	r2, r3
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	0011      	movs	r1, r2
 800c02e:	0018      	movs	r0, r3
 800c030:	f7ff f8b0 	bl	800b194 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c034:	4b18      	ldr	r3, [pc, #96]	; (800c098 <USBD_SetConfig+0x144>)
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	001a      	movs	r2, r3
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c03e:	4b16      	ldr	r3, [pc, #88]	; (800c098 <USBD_SetConfig+0x144>)
 800c040:	781a      	ldrb	r2, [r3, #0]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	0011      	movs	r1, r2
 800c046:	0018      	movs	r0, r3
 800c048:	f7ff f87d 	bl	800b146 <USBD_SetClassConfig>
 800c04c:	0003      	movs	r3, r0
 800c04e:	2b02      	cmp	r3, #2
 800c050:	d106      	bne.n	800c060 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800c052:	683a      	ldr	r2, [r7, #0]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	0011      	movs	r1, r2
 800c058:	0018      	movs	r0, r3
 800c05a:	f000 f90b 	bl	800c274 <USBD_CtlError>
            return;
 800c05e:	e017      	b.n	800c090 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	0018      	movs	r0, r3
 800c064:	f000 f9ee 	bl	800c444 <USBD_CtlSendStatus>
        break;
 800c068:	e012      	b.n	800c090 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	0018      	movs	r0, r3
 800c06e:	f000 f9e9 	bl	800c444 <USBD_CtlSendStatus>
        break;
 800c072:	e00d      	b.n	800c090 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800c074:	683a      	ldr	r2, [r7, #0]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	0011      	movs	r1, r2
 800c07a:	0018      	movs	r0, r3
 800c07c:	f000 f8fa 	bl	800c274 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c080:	4b05      	ldr	r3, [pc, #20]	; (800c098 <USBD_SetConfig+0x144>)
 800c082:	781a      	ldrb	r2, [r3, #0]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	0011      	movs	r1, r2
 800c088:	0018      	movs	r0, r3
 800c08a:	f7ff f883 	bl	800b194 <USBD_ClrClassConfig>
        break;
 800c08e:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800c090:	46bd      	mov	sp, r7
 800c092:	b002      	add	sp, #8
 800c094:	bd80      	pop	{r7, pc}
 800c096:	46c0      	nop			; (mov r8, r8)
 800c098:	20000264 	.word	0x20000264

0800c09c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b082      	sub	sp, #8
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	88db      	ldrh	r3, [r3, #6]
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	d006      	beq.n	800c0bc <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800c0ae:	683a      	ldr	r2, [r7, #0]
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	0011      	movs	r1, r2
 800c0b4:	0018      	movs	r0, r3
 800c0b6:	f000 f8dd 	bl	800c274 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c0ba:	e026      	b.n	800c10a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	23a7      	movs	r3, #167	; 0xa7
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	5cd3      	ldrb	r3, [r2, r3]
 800c0c4:	2b02      	cmp	r3, #2
 800c0c6:	dc02      	bgt.n	800c0ce <USBD_GetConfig+0x32>
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	dc03      	bgt.n	800c0d4 <USBD_GetConfig+0x38>
 800c0cc:	e016      	b.n	800c0fc <USBD_GetConfig+0x60>
 800c0ce:	2b03      	cmp	r3, #3
 800c0d0:	d00c      	beq.n	800c0ec <USBD_GetConfig+0x50>
 800c0d2:	e013      	b.n	800c0fc <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	3308      	adds	r3, #8
 800c0de:	0019      	movs	r1, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	0018      	movs	r0, r3
 800c0e6:	f000 f943 	bl	800c370 <USBD_CtlSendData>
        break;
 800c0ea:	e00e      	b.n	800c10a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	1d19      	adds	r1, r3, #4
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	0018      	movs	r0, r3
 800c0f6:	f000 f93b 	bl	800c370 <USBD_CtlSendData>
        break;
 800c0fa:	e006      	b.n	800c10a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800c0fc:	683a      	ldr	r2, [r7, #0]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	0011      	movs	r1, r2
 800c102:	0018      	movs	r0, r3
 800c104:	f000 f8b6 	bl	800c274 <USBD_CtlError>
        break;
 800c108:	46c0      	nop			; (mov r8, r8)
}
 800c10a:	46c0      	nop			; (mov r8, r8)
 800c10c:	46bd      	mov	sp, r7
 800c10e:	b002      	add	sp, #8
 800c110:	bd80      	pop	{r7, pc}

0800c112 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c112:	b580      	push	{r7, lr}
 800c114:	b082      	sub	sp, #8
 800c116:	af00      	add	r7, sp, #0
 800c118:	6078      	str	r0, [r7, #4]
 800c11a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	23a7      	movs	r3, #167	; 0xa7
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	5cd3      	ldrb	r3, [r2, r3]
 800c124:	3b01      	subs	r3, #1
 800c126:	2b02      	cmp	r3, #2
 800c128:	d822      	bhi.n	800c170 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	88db      	ldrh	r3, [r3, #6]
 800c12e:	2b02      	cmp	r3, #2
 800c130:	d006      	beq.n	800c140 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800c132:	683a      	ldr	r2, [r7, #0]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	0011      	movs	r1, r2
 800c138:	0018      	movs	r0, r3
 800c13a:	f000 f89b 	bl	800c274 <USBD_CtlError>
        break;
 800c13e:	e01e      	b.n	800c17e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2201      	movs	r2, #1
 800c144:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	23a9      	movs	r3, #169	; 0xa9
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	58d3      	ldr	r3, [r2, r3]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d005      	beq.n	800c15e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	2202      	movs	r2, #2
 800c158:	431a      	orrs	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	330c      	adds	r3, #12
 800c162:	0019      	movs	r1, r3
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2202      	movs	r2, #2
 800c168:	0018      	movs	r0, r3
 800c16a:	f000 f901 	bl	800c370 <USBD_CtlSendData>
      break;
 800c16e:	e006      	b.n	800c17e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800c170:	683a      	ldr	r2, [r7, #0]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	0011      	movs	r1, r2
 800c176:	0018      	movs	r0, r3
 800c178:	f000 f87c 	bl	800c274 <USBD_CtlError>
      break;
 800c17c:	46c0      	nop			; (mov r8, r8)
  }
}
 800c17e:	46c0      	nop			; (mov r8, r8)
 800c180:	46bd      	mov	sp, r7
 800c182:	b002      	add	sp, #8
 800c184:	bd80      	pop	{r7, pc}

0800c186 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c186:	b580      	push	{r7, lr}
 800c188:	b082      	sub	sp, #8
 800c18a:	af00      	add	r7, sp, #0
 800c18c:	6078      	str	r0, [r7, #4]
 800c18e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	885b      	ldrh	r3, [r3, #2]
 800c194:	2b01      	cmp	r3, #1
 800c196:	d108      	bne.n	800c1aa <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800c198:	687a      	ldr	r2, [r7, #4]
 800c19a:	23a9      	movs	r3, #169	; 0xa9
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	2101      	movs	r1, #1
 800c1a0:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	0018      	movs	r0, r3
 800c1a6:	f000 f94d 	bl	800c444 <USBD_CtlSendStatus>
  }
}
 800c1aa:	46c0      	nop			; (mov r8, r8)
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	b002      	add	sp, #8
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b082      	sub	sp, #8
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
 800c1ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c1bc:	687a      	ldr	r2, [r7, #4]
 800c1be:	23a7      	movs	r3, #167	; 0xa7
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	5cd3      	ldrb	r3, [r2, r3]
 800c1c4:	3b01      	subs	r3, #1
 800c1c6:	2b02      	cmp	r3, #2
 800c1c8:	d80d      	bhi.n	800c1e6 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	885b      	ldrh	r3, [r3, #2]
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d110      	bne.n	800c1f4 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	23a9      	movs	r3, #169	; 0xa9
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	2100      	movs	r1, #0
 800c1da:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	0018      	movs	r0, r3
 800c1e0:	f000 f930 	bl	800c444 <USBD_CtlSendStatus>
      }
      break;
 800c1e4:	e006      	b.n	800c1f4 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800c1e6:	683a      	ldr	r2, [r7, #0]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	0011      	movs	r1, r2
 800c1ec:	0018      	movs	r0, r3
 800c1ee:	f000 f841 	bl	800c274 <USBD_CtlError>
      break;
 800c1f2:	e000      	b.n	800c1f6 <USBD_ClrFeature+0x44>
      break;
 800c1f4:	46c0      	nop			; (mov r8, r8)
  }
}
 800c1f6:	46c0      	nop			; (mov r8, r8)
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	b002      	add	sp, #8
 800c1fc:	bd80      	pop	{r7, pc}

0800c1fe <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c1fe:	b580      	push	{r7, lr}
 800c200:	b082      	sub	sp, #8
 800c202:	af00      	add	r7, sp, #0
 800c204:	6078      	str	r0, [r7, #4]
 800c206:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	781a      	ldrb	r2, [r3, #0]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	785a      	ldrb	r2, [r3, #1]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	3302      	adds	r3, #2
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	b29a      	uxth	r2, r3
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	3303      	adds	r3, #3
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	b29b      	uxth	r3, r3
 800c228:	021b      	lsls	r3, r3, #8
 800c22a:	b29b      	uxth	r3, r3
 800c22c:	18d3      	adds	r3, r2, r3
 800c22e:	b29a      	uxth	r2, r3
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	3304      	adds	r3, #4
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	b29a      	uxth	r2, r3
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	3305      	adds	r3, #5
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	b29b      	uxth	r3, r3
 800c244:	021b      	lsls	r3, r3, #8
 800c246:	b29b      	uxth	r3, r3
 800c248:	18d3      	adds	r3, r2, r3
 800c24a:	b29a      	uxth	r2, r3
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	3306      	adds	r3, #6
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	b29a      	uxth	r2, r3
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	3307      	adds	r3, #7
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	b29b      	uxth	r3, r3
 800c260:	021b      	lsls	r3, r3, #8
 800c262:	b29b      	uxth	r3, r3
 800c264:	18d3      	adds	r3, r2, r3
 800c266:	b29a      	uxth	r2, r3
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	80da      	strh	r2, [r3, #6]

}
 800c26c:	46c0      	nop			; (mov r8, r8)
 800c26e:	46bd      	mov	sp, r7
 800c270:	b002      	add	sp, #8
 800c272:	bd80      	pop	{r7, pc}

0800c274 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b082      	sub	sp, #8
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
 800c27c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2180      	movs	r1, #128	; 0x80
 800c282:	0018      	movs	r0, r3
 800c284:	f000 fce3 	bl	800cc4e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2100      	movs	r1, #0
 800c28c:	0018      	movs	r0, r3
 800c28e:	f000 fcde 	bl	800cc4e <USBD_LL_StallEP>
}
 800c292:	46c0      	nop			; (mov r8, r8)
 800c294:	46bd      	mov	sp, r7
 800c296:	b002      	add	sp, #8
 800c298:	bd80      	pop	{r7, pc}

0800c29a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c29a:	b590      	push	{r4, r7, lr}
 800c29c:	b087      	sub	sp, #28
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	60f8      	str	r0, [r7, #12]
 800c2a2:	60b9      	str	r1, [r7, #8]
 800c2a4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c2a6:	2417      	movs	r4, #23
 800c2a8:	193b      	adds	r3, r7, r4
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d03c      	beq.n	800c32e <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	0018      	movs	r0, r3
 800c2b8:	f000 f83d 	bl	800c336 <USBD_GetLen>
 800c2bc:	0003      	movs	r3, r0
 800c2be:	3301      	adds	r3, #1
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	18db      	adds	r3, r3, r3
 800c2c4:	b29a      	uxth	r2, r3
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c2ca:	193b      	adds	r3, r7, r4
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	193a      	adds	r2, r7, r4
 800c2d0:	1c59      	adds	r1, r3, #1
 800c2d2:	7011      	strb	r1, [r2, #0]
 800c2d4:	001a      	movs	r2, r3
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	189b      	adds	r3, r3, r2
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	7812      	ldrb	r2, [r2, #0]
 800c2de:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c2e0:	193b      	adds	r3, r7, r4
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	193a      	adds	r2, r7, r4
 800c2e6:	1c59      	adds	r1, r3, #1
 800c2e8:	7011      	strb	r1, [r2, #0]
 800c2ea:	001a      	movs	r2, r3
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	189b      	adds	r3, r3, r2
 800c2f0:	2203      	movs	r2, #3
 800c2f2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c2f4:	e017      	b.n	800c326 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	1c5a      	adds	r2, r3, #1
 800c2fa:	60fa      	str	r2, [r7, #12]
 800c2fc:	2417      	movs	r4, #23
 800c2fe:	193a      	adds	r2, r7, r4
 800c300:	7812      	ldrb	r2, [r2, #0]
 800c302:	1939      	adds	r1, r7, r4
 800c304:	1c50      	adds	r0, r2, #1
 800c306:	7008      	strb	r0, [r1, #0]
 800c308:	0011      	movs	r1, r2
 800c30a:	68ba      	ldr	r2, [r7, #8]
 800c30c:	1852      	adds	r2, r2, r1
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c312:	193b      	adds	r3, r7, r4
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	193a      	adds	r2, r7, r4
 800c318:	1c59      	adds	r1, r3, #1
 800c31a:	7011      	strb	r1, [r2, #0]
 800c31c:	001a      	movs	r2, r3
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	189b      	adds	r3, r3, r2
 800c322:	2200      	movs	r2, #0
 800c324:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d1e3      	bne.n	800c2f6 <USBD_GetString+0x5c>
    }
  }
}
 800c32e:	46c0      	nop			; (mov r8, r8)
 800c330:	46bd      	mov	sp, r7
 800c332:	b007      	add	sp, #28
 800c334:	bd90      	pop	{r4, r7, pc}

0800c336 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c336:	b580      	push	{r7, lr}
 800c338:	b084      	sub	sp, #16
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c33e:	230f      	movs	r3, #15
 800c340:	18fb      	adds	r3, r7, r3
 800c342:	2200      	movs	r2, #0
 800c344:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800c346:	e008      	b.n	800c35a <USBD_GetLen+0x24>
  {
    len++;
 800c348:	210f      	movs	r1, #15
 800c34a:	187b      	adds	r3, r7, r1
 800c34c:	781a      	ldrb	r2, [r3, #0]
 800c34e:	187b      	adds	r3, r7, r1
 800c350:	3201      	adds	r2, #1
 800c352:	701a      	strb	r2, [r3, #0]
    buf++;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	3301      	adds	r3, #1
 800c358:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d1f2      	bne.n	800c348 <USBD_GetLen+0x12>
  }

  return len;
 800c362:	230f      	movs	r3, #15
 800c364:	18fb      	adds	r3, r7, r3
 800c366:	781b      	ldrb	r3, [r3, #0]
}
 800c368:	0018      	movs	r0, r3
 800c36a:	46bd      	mov	sp, r7
 800c36c:	b004      	add	sp, #16
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	1dbb      	adds	r3, r7, #6
 800c37c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c37e:	68fa      	ldr	r2, [r7, #12]
 800c380:	23a5      	movs	r3, #165	; 0xa5
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	2102      	movs	r1, #2
 800c386:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800c388:	1dbb      	adds	r3, r7, #6
 800c38a:	881a      	ldrh	r2, [r3, #0]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c390:	1dbb      	adds	r3, r7, #6
 800c392:	881a      	ldrh	r2, [r3, #0]
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c398:	1dbb      	adds	r3, r7, #6
 800c39a:	881b      	ldrh	r3, [r3, #0]
 800c39c:	68ba      	ldr	r2, [r7, #8]
 800c39e:	68f8      	ldr	r0, [r7, #12]
 800c3a0:	2100      	movs	r1, #0
 800c3a2:	f000 fd06 	bl	800cdb2 <USBD_LL_Transmit>

  return USBD_OK;
 800c3a6:	2300      	movs	r3, #0
}
 800c3a8:	0018      	movs	r0, r3
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	b004      	add	sp, #16
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	1dbb      	adds	r3, r7, #6
 800c3bc:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c3be:	1dbb      	adds	r3, r7, #6
 800c3c0:	881b      	ldrh	r3, [r3, #0]
 800c3c2:	68ba      	ldr	r2, [r7, #8]
 800c3c4:	68f8      	ldr	r0, [r7, #12]
 800c3c6:	2100      	movs	r1, #0
 800c3c8:	f000 fcf3 	bl	800cdb2 <USBD_LL_Transmit>

  return USBD_OK;
 800c3cc:	2300      	movs	r3, #0
}
 800c3ce:	0018      	movs	r0, r3
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	b004      	add	sp, #16
 800c3d4:	bd80      	pop	{r7, pc}

0800c3d6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c3d6:	b580      	push	{r7, lr}
 800c3d8:	b084      	sub	sp, #16
 800c3da:	af00      	add	r7, sp, #0
 800c3dc:	60f8      	str	r0, [r7, #12]
 800c3de:	60b9      	str	r1, [r7, #8]
 800c3e0:	1dbb      	adds	r3, r7, #6
 800c3e2:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c3e4:	68fa      	ldr	r2, [r7, #12]
 800c3e6:	23a5      	movs	r3, #165	; 0xa5
 800c3e8:	009b      	lsls	r3, r3, #2
 800c3ea:	2103      	movs	r1, #3
 800c3ec:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800c3ee:	1dbb      	adds	r3, r7, #6
 800c3f0:	8819      	ldrh	r1, [r3, #0]
 800c3f2:	68fa      	ldr	r2, [r7, #12]
 800c3f4:	23ae      	movs	r3, #174	; 0xae
 800c3f6:	005b      	lsls	r3, r3, #1
 800c3f8:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800c3fa:	1dbb      	adds	r3, r7, #6
 800c3fc:	8819      	ldrh	r1, [r3, #0]
 800c3fe:	68fa      	ldr	r2, [r7, #12]
 800c400:	23b0      	movs	r3, #176	; 0xb0
 800c402:	005b      	lsls	r3, r3, #1
 800c404:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c406:	1dbb      	adds	r3, r7, #6
 800c408:	881b      	ldrh	r3, [r3, #0]
 800c40a:	68ba      	ldr	r2, [r7, #8]
 800c40c:	68f8      	ldr	r0, [r7, #12]
 800c40e:	2100      	movs	r1, #0
 800c410:	f000 fd06 	bl	800ce20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c414:	2300      	movs	r3, #0
}
 800c416:	0018      	movs	r0, r3
 800c418:	46bd      	mov	sp, r7
 800c41a:	b004      	add	sp, #16
 800c41c:	bd80      	pop	{r7, pc}

0800c41e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c41e:	b580      	push	{r7, lr}
 800c420:	b084      	sub	sp, #16
 800c422:	af00      	add	r7, sp, #0
 800c424:	60f8      	str	r0, [r7, #12]
 800c426:	60b9      	str	r1, [r7, #8]
 800c428:	1dbb      	adds	r3, r7, #6
 800c42a:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c42c:	1dbb      	adds	r3, r7, #6
 800c42e:	881b      	ldrh	r3, [r3, #0]
 800c430:	68ba      	ldr	r2, [r7, #8]
 800c432:	68f8      	ldr	r0, [r7, #12]
 800c434:	2100      	movs	r1, #0
 800c436:	f000 fcf3 	bl	800ce20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c43a:	2300      	movs	r3, #0
}
 800c43c:	0018      	movs	r0, r3
 800c43e:	46bd      	mov	sp, r7
 800c440:	b004      	add	sp, #16
 800c442:	bd80      	pop	{r7, pc}

0800c444 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b082      	sub	sp, #8
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	23a5      	movs	r3, #165	; 0xa5
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	2104      	movs	r1, #4
 800c454:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	2300      	movs	r3, #0
 800c45a:	2200      	movs	r2, #0
 800c45c:	2100      	movs	r1, #0
 800c45e:	f000 fca8 	bl	800cdb2 <USBD_LL_Transmit>

  return USBD_OK;
 800c462:	2300      	movs	r3, #0
}
 800c464:	0018      	movs	r0, r3
 800c466:	46bd      	mov	sp, r7
 800c468:	b002      	add	sp, #8
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	23a5      	movs	r3, #165	; 0xa5
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	2105      	movs	r1, #5
 800c47c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	2300      	movs	r3, #0
 800c482:	2200      	movs	r2, #0
 800c484:	2100      	movs	r1, #0
 800c486:	f000 fccb 	bl	800ce20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c48a:	2300      	movs	r3, #0
}
 800c48c:	0018      	movs	r0, r3
 800c48e:	46bd      	mov	sp, r7
 800c490:	b002      	add	sp, #8
 800c492:	bd80      	pop	{r7, pc}

0800c494 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c498:	4914      	ldr	r1, [pc, #80]	; (800c4ec <MX_USB_DEVICE_Init+0x58>)
 800c49a:	4b15      	ldr	r3, [pc, #84]	; (800c4f0 <MX_USB_DEVICE_Init+0x5c>)
 800c49c:	2200      	movs	r2, #0
 800c49e:	0018      	movs	r0, r3
 800c4a0:	f7fe fdea 	bl	800b078 <USBD_Init>
 800c4a4:	1e03      	subs	r3, r0, #0
 800c4a6:	d001      	beq.n	800c4ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c4a8:	f7f5 fcf0 	bl	8001e8c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c4ac:	4a11      	ldr	r2, [pc, #68]	; (800c4f4 <MX_USB_DEVICE_Init+0x60>)
 800c4ae:	4b10      	ldr	r3, [pc, #64]	; (800c4f0 <MX_USB_DEVICE_Init+0x5c>)
 800c4b0:	0011      	movs	r1, r2
 800c4b2:	0018      	movs	r0, r3
 800c4b4:	f7fe fe11 	bl	800b0da <USBD_RegisterClass>
 800c4b8:	1e03      	subs	r3, r0, #0
 800c4ba:	d001      	beq.n	800c4c0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800c4bc:	f7f5 fce6 	bl	8001e8c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c4c0:	4a0d      	ldr	r2, [pc, #52]	; (800c4f8 <MX_USB_DEVICE_Init+0x64>)
 800c4c2:	4b0b      	ldr	r3, [pc, #44]	; (800c4f0 <MX_USB_DEVICE_Init+0x5c>)
 800c4c4:	0011      	movs	r1, r2
 800c4c6:	0018      	movs	r0, r3
 800c4c8:	f7fe fd26 	bl	800af18 <USBD_CDC_RegisterInterface>
 800c4cc:	1e03      	subs	r3, r0, #0
 800c4ce:	d001      	beq.n	800c4d4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800c4d0:	f7f5 fcdc 	bl	8001e8c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c4d4:	4b06      	ldr	r3, [pc, #24]	; (800c4f0 <MX_USB_DEVICE_Init+0x5c>)
 800c4d6:	0018      	movs	r0, r3
 800c4d8:	f7fe fe1f 	bl	800b11a <USBD_Start>
 800c4dc:	1e03      	subs	r3, r0, #0
 800c4de:	d001      	beq.n	800c4e4 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800c4e0:	f7f5 fcd4 	bl	8001e8c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c4e4:	46c0      	nop			; (mov r8, r8)
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	46c0      	nop			; (mov r8, r8)
 800c4ec:	2000012c 	.word	0x2000012c
 800c4f0:	200006a0 	.word	0x200006a0
 800c4f4:	20000018 	.word	0x20000018
 800c4f8:	2000011c 	.word	0x2000011c

0800c4fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c500:	4907      	ldr	r1, [pc, #28]	; (800c520 <CDC_Init_FS+0x24>)
 800c502:	4b08      	ldr	r3, [pc, #32]	; (800c524 <CDC_Init_FS+0x28>)
 800c504:	2200      	movs	r2, #0
 800c506:	0018      	movs	r0, r3
 800c508:	f7fe fd21 	bl	800af4e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c50c:	4a06      	ldr	r2, [pc, #24]	; (800c528 <CDC_Init_FS+0x2c>)
 800c50e:	4b05      	ldr	r3, [pc, #20]	; (800c524 <CDC_Init_FS+0x28>)
 800c510:	0011      	movs	r1, r2
 800c512:	0018      	movs	r0, r3
 800c514:	f7fe fd37 	bl	800af86 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c518:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c51a:	0018      	movs	r0, r3
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	20000d4c 	.word	0x20000d4c
 800c524:	200006a0 	.word	0x200006a0
 800c528:	20000964 	.word	0x20000964

0800c52c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c530:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c532:	0018      	movs	r0, r3
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}

0800c538 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b082      	sub	sp, #8
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6039      	str	r1, [r7, #0]
 800c540:	0011      	movs	r1, r2
 800c542:	1dfb      	adds	r3, r7, #7
 800c544:	1c02      	adds	r2, r0, #0
 800c546:	701a      	strb	r2, [r3, #0]
 800c548:	1d3b      	adds	r3, r7, #4
 800c54a:	1c0a      	adds	r2, r1, #0
 800c54c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c54e:	1dfb      	adds	r3, r7, #7
 800c550:	781b      	ldrb	r3, [r3, #0]
 800c552:	2b23      	cmp	r3, #35	; 0x23
 800c554:	d804      	bhi.n	800c560 <CDC_Control_FS+0x28>
 800c556:	009a      	lsls	r2, r3, #2
 800c558:	4b04      	ldr	r3, [pc, #16]	; (800c56c <CDC_Control_FS+0x34>)
 800c55a:	18d3      	adds	r3, r2, r3
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c560:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800c562:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c564:	0018      	movs	r0, r3
 800c566:	46bd      	mov	sp, r7
 800c568:	b002      	add	sp, #8
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	0800d9fc 	.word	0x0800d9fc

0800c570 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c570:	b590      	push	{r4, r7, lr}
 800c572:	b085      	sub	sp, #20
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  flags.data_received = 1;
 800c57a:	4b18      	ldr	r3, [pc, #96]	; (800c5dc <CDC_Receive_FS+0x6c>)
 800c57c:	7a1a      	ldrb	r2, [r3, #8]
 800c57e:	2101      	movs	r1, #1
 800c580:	430a      	orrs	r2, r1
 800c582:	721a      	strb	r2, [r3, #8]

  for(uint8_t i = 0; i < *Len; i++)
 800c584:	230f      	movs	r3, #15
 800c586:	18fb      	adds	r3, r7, r3
 800c588:	2200      	movs	r2, #0
 800c58a:	701a      	strb	r2, [r3, #0]
 800c58c:	e00f      	b.n	800c5ae <CDC_Receive_FS+0x3e>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800c58e:	4b14      	ldr	r3, [pc, #80]	; (800c5e0 <CDC_Receive_FS+0x70>)
 800c590:	6818      	ldr	r0, [r3, #0]
 800c592:	240f      	movs	r4, #15
 800c594:	193b      	adds	r3, r7, r4
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	18d3      	adds	r3, r2, r3
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	0019      	movs	r1, r3
 800c5a0:	f7f5 fcc4 	bl	8001f2c <push>
  for(uint8_t i = 0; i < *Len; i++)
 800c5a4:	193b      	adds	r3, r7, r4
 800c5a6:	781a      	ldrb	r2, [r3, #0]
 800c5a8:	193b      	adds	r3, r7, r4
 800c5aa:	3201      	adds	r2, #1
 800c5ac:	701a      	strb	r2, [r3, #0]
 800c5ae:	230f      	movs	r3, #15
 800c5b0:	18fb      	adds	r3, r7, r3
 800c5b2:	781a      	ldrb	r2, [r3, #0]
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	429a      	cmp	r2, r3
 800c5ba:	d3e8      	bcc.n	800c58e <CDC_Receive_FS+0x1e>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	4b09      	ldr	r3, [pc, #36]	; (800c5e4 <CDC_Receive_FS+0x74>)
 800c5c0:	0011      	movs	r1, r2
 800c5c2:	0018      	movs	r0, r3
 800c5c4:	f7fe fcdf 	bl	800af86 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c5c8:	4b06      	ldr	r3, [pc, #24]	; (800c5e4 <CDC_Receive_FS+0x74>)
 800c5ca:	0018      	movs	r0, r3
 800c5cc:	f7fe fd26 	bl	800b01c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c5d0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c5d2:	0018      	movs	r0, r3
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	b005      	add	sp, #20
 800c5d8:	bd90      	pop	{r4, r7, pc}
 800c5da:	46c0      	nop			; (mov r8, r8)
 800c5dc:	20000630 	.word	0x20000630
 800c5e0:	20001134 	.word	0x20001134
 800c5e4:	200006a0 	.word	0x200006a0

0800c5e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c5e8:	b5b0      	push	{r4, r5, r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	000a      	movs	r2, r1
 800c5f2:	1cbb      	adds	r3, r7, #2
 800c5f4:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800c5f6:	230f      	movs	r3, #15
 800c5f8:	18fb      	adds	r3, r7, r3
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c5fe:	4a11      	ldr	r2, [pc, #68]	; (800c644 <CDC_Transmit_FS+0x5c>)
 800c600:	23ae      	movs	r3, #174	; 0xae
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	58d3      	ldr	r3, [r2, r3]
 800c606:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c608:	68ba      	ldr	r2, [r7, #8]
 800c60a:	2385      	movs	r3, #133	; 0x85
 800c60c:	009b      	lsls	r3, r3, #2
 800c60e:	58d3      	ldr	r3, [r2, r3]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d001      	beq.n	800c618 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800c614:	2301      	movs	r3, #1
 800c616:	e010      	b.n	800c63a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c618:	1cbb      	adds	r3, r7, #2
 800c61a:	881a      	ldrh	r2, [r3, #0]
 800c61c:	6879      	ldr	r1, [r7, #4]
 800c61e:	4b09      	ldr	r3, [pc, #36]	; (800c644 <CDC_Transmit_FS+0x5c>)
 800c620:	0018      	movs	r0, r3
 800c622:	f7fe fc94 	bl	800af4e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c626:	250f      	movs	r5, #15
 800c628:	197c      	adds	r4, r7, r5
 800c62a:	4b06      	ldr	r3, [pc, #24]	; (800c644 <CDC_Transmit_FS+0x5c>)
 800c62c:	0018      	movs	r0, r3
 800c62e:	f7fe fcbe 	bl	800afae <USBD_CDC_TransmitPacket>
 800c632:	0003      	movs	r3, r0
 800c634:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800c636:	197b      	adds	r3, r7, r5
 800c638:	781b      	ldrb	r3, [r3, #0]
}
 800c63a:	0018      	movs	r0, r3
 800c63c:	46bd      	mov	sp, r7
 800c63e:	b004      	add	sp, #16
 800c640:	bdb0      	pop	{r4, r5, r7, pc}
 800c642:	46c0      	nop			; (mov r8, r8)
 800c644:	200006a0 	.word	0x200006a0

0800c648 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	0002      	movs	r2, r0
 800c650:	6039      	str	r1, [r7, #0]
 800c652:	1dfb      	adds	r3, r7, #7
 800c654:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	2212      	movs	r2, #18
 800c65a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c65c:	4b02      	ldr	r3, [pc, #8]	; (800c668 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c65e:	0018      	movs	r0, r3
 800c660:	46bd      	mov	sp, r7
 800c662:	b002      	add	sp, #8
 800c664:	bd80      	pop	{r7, pc}
 800c666:	46c0      	nop			; (mov r8, r8)
 800c668:	20000148 	.word	0x20000148

0800c66c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	0002      	movs	r2, r0
 800c674:	6039      	str	r1, [r7, #0]
 800c676:	1dfb      	adds	r3, r7, #7
 800c678:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	2204      	movs	r2, #4
 800c67e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c680:	4b02      	ldr	r3, [pc, #8]	; (800c68c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c682:	0018      	movs	r0, r3
 800c684:	46bd      	mov	sp, r7
 800c686:	b002      	add	sp, #8
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	46c0      	nop			; (mov r8, r8)
 800c68c:	2000015c 	.word	0x2000015c

0800c690 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	0002      	movs	r2, r0
 800c698:	6039      	str	r1, [r7, #0]
 800c69a:	1dfb      	adds	r3, r7, #7
 800c69c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800c69e:	1dfb      	adds	r3, r7, #7
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d106      	bne.n	800c6b4 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6a6:	683a      	ldr	r2, [r7, #0]
 800c6a8:	4908      	ldr	r1, [pc, #32]	; (800c6cc <USBD_FS_ProductStrDescriptor+0x3c>)
 800c6aa:	4b09      	ldr	r3, [pc, #36]	; (800c6d0 <USBD_FS_ProductStrDescriptor+0x40>)
 800c6ac:	0018      	movs	r0, r3
 800c6ae:	f7ff fdf4 	bl	800c29a <USBD_GetString>
 800c6b2:	e005      	b.n	800c6c0 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c6b4:	683a      	ldr	r2, [r7, #0]
 800c6b6:	4905      	ldr	r1, [pc, #20]	; (800c6cc <USBD_FS_ProductStrDescriptor+0x3c>)
 800c6b8:	4b05      	ldr	r3, [pc, #20]	; (800c6d0 <USBD_FS_ProductStrDescriptor+0x40>)
 800c6ba:	0018      	movs	r0, r3
 800c6bc:	f7ff fded 	bl	800c29a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c6c0:	4b02      	ldr	r3, [pc, #8]	; (800c6cc <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800c6c2:	0018      	movs	r0, r3
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	b002      	add	sp, #8
 800c6c8:	bd80      	pop	{r7, pc}
 800c6ca:	46c0      	nop			; (mov r8, r8)
 800c6cc:	20001138 	.word	0x20001138
 800c6d0:	0800d8ac 	.word	0x0800d8ac

0800c6d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	0002      	movs	r2, r0
 800c6dc:	6039      	str	r1, [r7, #0]
 800c6de:	1dfb      	adds	r3, r7, #7
 800c6e0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c6e2:	683a      	ldr	r2, [r7, #0]
 800c6e4:	4904      	ldr	r1, [pc, #16]	; (800c6f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c6e6:	4b05      	ldr	r3, [pc, #20]	; (800c6fc <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800c6e8:	0018      	movs	r0, r3
 800c6ea:	f7ff fdd6 	bl	800c29a <USBD_GetString>
  return USBD_StrDesc;
 800c6ee:	4b02      	ldr	r3, [pc, #8]	; (800c6f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800c6f0:	0018      	movs	r0, r3
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	b002      	add	sp, #8
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	20001138 	.word	0x20001138
 800c6fc:	0800d8c4 	.word	0x0800d8c4

0800c700 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b082      	sub	sp, #8
 800c704:	af00      	add	r7, sp, #0
 800c706:	0002      	movs	r2, r0
 800c708:	6039      	str	r1, [r7, #0]
 800c70a:	1dfb      	adds	r3, r7, #7
 800c70c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	221a      	movs	r2, #26
 800c712:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c714:	f000 f84c 	bl	800c7b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c718:	4b02      	ldr	r3, [pc, #8]	; (800c724 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800c71a:	0018      	movs	r0, r3
 800c71c:	46bd      	mov	sp, r7
 800c71e:	b002      	add	sp, #8
 800c720:	bd80      	pop	{r7, pc}
 800c722:	46c0      	nop			; (mov r8, r8)
 800c724:	20000160 	.word	0x20000160

0800c728 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b082      	sub	sp, #8
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	0002      	movs	r2, r0
 800c730:	6039      	str	r1, [r7, #0]
 800c732:	1dfb      	adds	r3, r7, #7
 800c734:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800c736:	1dfb      	adds	r3, r7, #7
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d106      	bne.n	800c74c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c73e:	683a      	ldr	r2, [r7, #0]
 800c740:	4908      	ldr	r1, [pc, #32]	; (800c764 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800c742:	4b09      	ldr	r3, [pc, #36]	; (800c768 <USBD_FS_ConfigStrDescriptor+0x40>)
 800c744:	0018      	movs	r0, r3
 800c746:	f7ff fda8 	bl	800c29a <USBD_GetString>
 800c74a:	e005      	b.n	800c758 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c74c:	683a      	ldr	r2, [r7, #0]
 800c74e:	4905      	ldr	r1, [pc, #20]	; (800c764 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800c750:	4b05      	ldr	r3, [pc, #20]	; (800c768 <USBD_FS_ConfigStrDescriptor+0x40>)
 800c752:	0018      	movs	r0, r3
 800c754:	f7ff fda1 	bl	800c29a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c758:	4b02      	ldr	r3, [pc, #8]	; (800c764 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800c75a:	0018      	movs	r0, r3
 800c75c:	46bd      	mov	sp, r7
 800c75e:	b002      	add	sp, #8
 800c760:	bd80      	pop	{r7, pc}
 800c762:	46c0      	nop			; (mov r8, r8)
 800c764:	20001138 	.word	0x20001138
 800c768:	0800d8d8 	.word	0x0800d8d8

0800c76c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b082      	sub	sp, #8
 800c770:	af00      	add	r7, sp, #0
 800c772:	0002      	movs	r2, r0
 800c774:	6039      	str	r1, [r7, #0]
 800c776:	1dfb      	adds	r3, r7, #7
 800c778:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800c77a:	1dfb      	adds	r3, r7, #7
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d106      	bne.n	800c790 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c782:	683a      	ldr	r2, [r7, #0]
 800c784:	4908      	ldr	r1, [pc, #32]	; (800c7a8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800c786:	4b09      	ldr	r3, [pc, #36]	; (800c7ac <USBD_FS_InterfaceStrDescriptor+0x40>)
 800c788:	0018      	movs	r0, r3
 800c78a:	f7ff fd86 	bl	800c29a <USBD_GetString>
 800c78e:	e005      	b.n	800c79c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c790:	683a      	ldr	r2, [r7, #0]
 800c792:	4905      	ldr	r1, [pc, #20]	; (800c7a8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800c794:	4b05      	ldr	r3, [pc, #20]	; (800c7ac <USBD_FS_InterfaceStrDescriptor+0x40>)
 800c796:	0018      	movs	r0, r3
 800c798:	f7ff fd7f 	bl	800c29a <USBD_GetString>
  }
  return USBD_StrDesc;
 800c79c:	4b02      	ldr	r3, [pc, #8]	; (800c7a8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800c79e:	0018      	movs	r0, r3
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	b002      	add	sp, #8
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	46c0      	nop			; (mov r8, r8)
 800c7a8:	20001138 	.word	0x20001138
 800c7ac:	0800d8e4 	.word	0x0800d8e4

0800c7b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b084      	sub	sp, #16
 800c7b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c7b6:	4b10      	ldr	r3, [pc, #64]	; (800c7f8 <Get_SerialNum+0x48>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c7bc:	4b0f      	ldr	r3, [pc, #60]	; (800c7fc <Get_SerialNum+0x4c>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c7c2:	4b0f      	ldr	r3, [pc, #60]	; (800c800 <Get_SerialNum+0x50>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c7c8:	68fa      	ldr	r2, [r7, #12]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	18d3      	adds	r3, r2, r3
 800c7ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d00b      	beq.n	800c7ee <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c7d6:	490b      	ldr	r1, [pc, #44]	; (800c804 <Get_SerialNum+0x54>)
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2208      	movs	r2, #8
 800c7dc:	0018      	movs	r0, r3
 800c7de:	f000 f815 	bl	800c80c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c7e2:	4909      	ldr	r1, [pc, #36]	; (800c808 <Get_SerialNum+0x58>)
 800c7e4:	68bb      	ldr	r3, [r7, #8]
 800c7e6:	2204      	movs	r2, #4
 800c7e8:	0018      	movs	r0, r3
 800c7ea:	f000 f80f 	bl	800c80c <IntToUnicode>
  }
}
 800c7ee:	46c0      	nop			; (mov r8, r8)
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	b004      	add	sp, #16
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	46c0      	nop			; (mov r8, r8)
 800c7f8:	1ffff7ac 	.word	0x1ffff7ac
 800c7fc:	1ffff7b0 	.word	0x1ffff7b0
 800c800:	1ffff7b4 	.word	0x1ffff7b4
 800c804:	20000162 	.word	0x20000162
 800c808:	20000172 	.word	0x20000172

0800c80c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b086      	sub	sp, #24
 800c810:	af00      	add	r7, sp, #0
 800c812:	60f8      	str	r0, [r7, #12]
 800c814:	60b9      	str	r1, [r7, #8]
 800c816:	1dfb      	adds	r3, r7, #7
 800c818:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800c81a:	2117      	movs	r1, #23
 800c81c:	187b      	adds	r3, r7, r1
 800c81e:	2200      	movs	r2, #0
 800c820:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800c822:	187b      	adds	r3, r7, r1
 800c824:	2200      	movs	r2, #0
 800c826:	701a      	strb	r2, [r3, #0]
 800c828:	e02f      	b.n	800c88a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	0f1b      	lsrs	r3, r3, #28
 800c82e:	2b09      	cmp	r3, #9
 800c830:	d80d      	bhi.n	800c84e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	0f1b      	lsrs	r3, r3, #28
 800c836:	b2da      	uxtb	r2, r3
 800c838:	2317      	movs	r3, #23
 800c83a:	18fb      	adds	r3, r7, r3
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	005b      	lsls	r3, r3, #1
 800c840:	0019      	movs	r1, r3
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	185b      	adds	r3, r3, r1
 800c846:	3230      	adds	r2, #48	; 0x30
 800c848:	b2d2      	uxtb	r2, r2
 800c84a:	701a      	strb	r2, [r3, #0]
 800c84c:	e00c      	b.n	800c868 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	0f1b      	lsrs	r3, r3, #28
 800c852:	b2da      	uxtb	r2, r3
 800c854:	2317      	movs	r3, #23
 800c856:	18fb      	adds	r3, r7, r3
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	005b      	lsls	r3, r3, #1
 800c85c:	0019      	movs	r1, r3
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	185b      	adds	r3, r3, r1
 800c862:	3237      	adds	r2, #55	; 0x37
 800c864:	b2d2      	uxtb	r2, r2
 800c866:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	011b      	lsls	r3, r3, #4
 800c86c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c86e:	2117      	movs	r1, #23
 800c870:	187b      	adds	r3, r7, r1
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	005b      	lsls	r3, r3, #1
 800c876:	3301      	adds	r3, #1
 800c878:	68ba      	ldr	r2, [r7, #8]
 800c87a:	18d3      	adds	r3, r2, r3
 800c87c:	2200      	movs	r2, #0
 800c87e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c880:	187b      	adds	r3, r7, r1
 800c882:	781a      	ldrb	r2, [r3, #0]
 800c884:	187b      	adds	r3, r7, r1
 800c886:	3201      	adds	r2, #1
 800c888:	701a      	strb	r2, [r3, #0]
 800c88a:	2317      	movs	r3, #23
 800c88c:	18fa      	adds	r2, r7, r3
 800c88e:	1dfb      	adds	r3, r7, #7
 800c890:	7812      	ldrb	r2, [r2, #0]
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	429a      	cmp	r2, r3
 800c896:	d3c8      	bcc.n	800c82a <IntToUnicode+0x1e>
  }
}
 800c898:	46c0      	nop			; (mov r8, r8)
 800c89a:	46c0      	nop			; (mov r8, r8)
 800c89c:	46bd      	mov	sp, r7
 800c89e:	b006      	add	sp, #24
 800c8a0:	bd80      	pop	{r7, pc}
	...

0800c8a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a0e      	ldr	r2, [pc, #56]	; (800c8ec <HAL_PCD_MspInit+0x48>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d115      	bne.n	800c8e2 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c8b6:	4b0e      	ldr	r3, [pc, #56]	; (800c8f0 <HAL_PCD_MspInit+0x4c>)
 800c8b8:	69da      	ldr	r2, [r3, #28]
 800c8ba:	4b0d      	ldr	r3, [pc, #52]	; (800c8f0 <HAL_PCD_MspInit+0x4c>)
 800c8bc:	2180      	movs	r1, #128	; 0x80
 800c8be:	0409      	lsls	r1, r1, #16
 800c8c0:	430a      	orrs	r2, r1
 800c8c2:	61da      	str	r2, [r3, #28]
 800c8c4:	4b0a      	ldr	r3, [pc, #40]	; (800c8f0 <HAL_PCD_MspInit+0x4c>)
 800c8c6:	69da      	ldr	r2, [r3, #28]
 800c8c8:	2380      	movs	r3, #128	; 0x80
 800c8ca:	041b      	lsls	r3, r3, #16
 800c8cc:	4013      	ands	r3, r2
 800c8ce:	60fb      	str	r3, [r7, #12]
 800c8d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	2100      	movs	r1, #0
 800c8d6:	201f      	movs	r0, #31
 800c8d8:	f7f6 ffc2 	bl	8003860 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c8dc:	201f      	movs	r0, #31
 800c8de:	f7f6 ffd4 	bl	800388a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c8e2:	46c0      	nop			; (mov r8, r8)
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	b004      	add	sp, #16
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	46c0      	nop			; (mov r8, r8)
 800c8ec:	40005c00 	.word	0x40005c00
 800c8f0:	40021000 	.word	0x40021000

0800c8f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b082      	sub	sp, #8
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	23bc      	movs	r3, #188	; 0xbc
 800c900:	009b      	lsls	r3, r3, #2
 800c902:	58d2      	ldr	r2, [r2, r3]
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	21ac      	movs	r1, #172	; 0xac
 800c908:	0089      	lsls	r1, r1, #2
 800c90a:	468c      	mov	ip, r1
 800c90c:	4463      	add	r3, ip
 800c90e:	0019      	movs	r1, r3
 800c910:	0010      	movs	r0, r2
 800c912:	f7fe fc55 	bl	800b1c0 <USBD_LL_SetupStage>
}
 800c916:	46c0      	nop			; (mov r8, r8)
 800c918:	46bd      	mov	sp, r7
 800c91a:	b002      	add	sp, #8
 800c91c:	bd80      	pop	{r7, pc}

0800c91e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c91e:	b590      	push	{r4, r7, lr}
 800c920:	b083      	sub	sp, #12
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
 800c926:	000a      	movs	r2, r1
 800c928:	1cfb      	adds	r3, r7, #3
 800c92a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	23bc      	movs	r3, #188	; 0xbc
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	58d4      	ldr	r4, [r2, r3]
 800c934:	1cfb      	adds	r3, r7, #3
 800c936:	781a      	ldrb	r2, [r3, #0]
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	23be      	movs	r3, #190	; 0xbe
 800c93c:	0059      	lsls	r1, r3, #1
 800c93e:	0013      	movs	r3, r2
 800c940:	009b      	lsls	r3, r3, #2
 800c942:	189b      	adds	r3, r3, r2
 800c944:	00db      	lsls	r3, r3, #3
 800c946:	18c3      	adds	r3, r0, r3
 800c948:	185b      	adds	r3, r3, r1
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	1cfb      	adds	r3, r7, #3
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	0019      	movs	r1, r3
 800c952:	0020      	movs	r0, r4
 800c954:	f7fe fc92 	bl	800b27c <USBD_LL_DataOutStage>
}
 800c958:	46c0      	nop			; (mov r8, r8)
 800c95a:	46bd      	mov	sp, r7
 800c95c:	b003      	add	sp, #12
 800c95e:	bd90      	pop	{r4, r7, pc}

0800c960 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b082      	sub	sp, #8
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	000a      	movs	r2, r1
 800c96a:	1cfb      	adds	r3, r7, #3
 800c96c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c96e:	687a      	ldr	r2, [r7, #4]
 800c970:	23bc      	movs	r3, #188	; 0xbc
 800c972:	009b      	lsls	r3, r3, #2
 800c974:	58d0      	ldr	r0, [r2, r3]
 800c976:	1cfb      	adds	r3, r7, #3
 800c978:	781a      	ldrb	r2, [r3, #0]
 800c97a:	6879      	ldr	r1, [r7, #4]
 800c97c:	0013      	movs	r3, r2
 800c97e:	009b      	lsls	r3, r3, #2
 800c980:	189b      	adds	r3, r3, r2
 800c982:	00db      	lsls	r3, r3, #3
 800c984:	18cb      	adds	r3, r1, r3
 800c986:	333c      	adds	r3, #60	; 0x3c
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	1cfb      	adds	r3, r7, #3
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	0019      	movs	r1, r3
 800c990:	f7fe fcf6 	bl	800b380 <USBD_LL_DataInStage>
}
 800c994:	46c0      	nop			; (mov r8, r8)
 800c996:	46bd      	mov	sp, r7
 800c998:	b002      	add	sp, #8
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	23bc      	movs	r3, #188	; 0xbc
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	58d3      	ldr	r3, [r2, r3]
 800c9ac:	0018      	movs	r0, r3
 800c9ae:	f7fe fe2d 	bl	800b60c <USBD_LL_SOF>
}
 800c9b2:	46c0      	nop			; (mov r8, r8)
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	b002      	add	sp, #8
 800c9b8:	bd80      	pop	{r7, pc}

0800c9ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b084      	sub	sp, #16
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c9c2:	230f      	movs	r3, #15
 800c9c4:	18fb      	adds	r3, r7, r3
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	689b      	ldr	r3, [r3, #8]
 800c9ce:	2b02      	cmp	r3, #2
 800c9d0:	d001      	beq.n	800c9d6 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800c9d2:	f7f5 fa5b 	bl	8001e8c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	23bc      	movs	r3, #188	; 0xbc
 800c9da:	009b      	lsls	r3, r3, #2
 800c9dc:	58d2      	ldr	r2, [r2, r3]
 800c9de:	230f      	movs	r3, #15
 800c9e0:	18fb      	adds	r3, r7, r3
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	0019      	movs	r1, r3
 800c9e6:	0010      	movs	r0, r2
 800c9e8:	f7fe fdcf 	bl	800b58a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c9ec:	687a      	ldr	r2, [r7, #4]
 800c9ee:	23bc      	movs	r3, #188	; 0xbc
 800c9f0:	009b      	lsls	r3, r3, #2
 800c9f2:	58d3      	ldr	r3, [r2, r3]
 800c9f4:	0018      	movs	r0, r3
 800c9f6:	f7fe fd80 	bl	800b4fa <USBD_LL_Reset>
}
 800c9fa:	46c0      	nop			; (mov r8, r8)
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	b004      	add	sp, #16
 800ca00:	bd80      	pop	{r7, pc}
	...

0800ca04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b082      	sub	sp, #8
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ca0c:	687a      	ldr	r2, [r7, #4]
 800ca0e:	23bc      	movs	r3, #188	; 0xbc
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	58d3      	ldr	r3, [r2, r3]
 800ca14:	0018      	movs	r0, r3
 800ca16:	f7fe fdc9 	bl	800b5ac <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	699b      	ldr	r3, [r3, #24]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d005      	beq.n	800ca2e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca22:	4b05      	ldr	r3, [pc, #20]	; (800ca38 <HAL_PCD_SuspendCallback+0x34>)
 800ca24:	691a      	ldr	r2, [r3, #16]
 800ca26:	4b04      	ldr	r3, [pc, #16]	; (800ca38 <HAL_PCD_SuspendCallback+0x34>)
 800ca28:	2106      	movs	r1, #6
 800ca2a:	430a      	orrs	r2, r1
 800ca2c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800ca2e:	46c0      	nop			; (mov r8, r8)
 800ca30:	46bd      	mov	sp, r7
 800ca32:	b002      	add	sp, #8
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	46c0      	nop			; (mov r8, r8)
 800ca38:	e000ed00 	.word	0xe000ed00

0800ca3c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b082      	sub	sp, #8
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	699b      	ldr	r3, [r3, #24]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d007      	beq.n	800ca5c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca4c:	4b09      	ldr	r3, [pc, #36]	; (800ca74 <HAL_PCD_ResumeCallback+0x38>)
 800ca4e:	691a      	ldr	r2, [r3, #16]
 800ca50:	4b08      	ldr	r3, [pc, #32]	; (800ca74 <HAL_PCD_ResumeCallback+0x38>)
 800ca52:	2106      	movs	r1, #6
 800ca54:	438a      	bics	r2, r1
 800ca56:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800ca58:	f000 fa44 	bl	800cee4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	23bc      	movs	r3, #188	; 0xbc
 800ca60:	009b      	lsls	r3, r3, #2
 800ca62:	58d3      	ldr	r3, [r2, r3]
 800ca64:	0018      	movs	r0, r3
 800ca66:	f7fe fdb9 	bl	800b5dc <USBD_LL_Resume>
}
 800ca6a:	46c0      	nop			; (mov r8, r8)
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	b002      	add	sp, #8
 800ca70:	bd80      	pop	{r7, pc}
 800ca72:	46c0      	nop			; (mov r8, r8)
 800ca74:	e000ed00 	.word	0xe000ed00

0800ca78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ca80:	4a2d      	ldr	r2, [pc, #180]	; (800cb38 <USBD_LL_Init+0xc0>)
 800ca82:	23bc      	movs	r3, #188	; 0xbc
 800ca84:	009b      	lsls	r3, r3, #2
 800ca86:	6879      	ldr	r1, [r7, #4]
 800ca88:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	23b0      	movs	r3, #176	; 0xb0
 800ca8e:	009b      	lsls	r3, r3, #2
 800ca90:	4929      	ldr	r1, [pc, #164]	; (800cb38 <USBD_LL_Init+0xc0>)
 800ca92:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800ca94:	4b28      	ldr	r3, [pc, #160]	; (800cb38 <USBD_LL_Init+0xc0>)
 800ca96:	4a29      	ldr	r2, [pc, #164]	; (800cb3c <USBD_LL_Init+0xc4>)
 800ca98:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ca9a:	4b27      	ldr	r3, [pc, #156]	; (800cb38 <USBD_LL_Init+0xc0>)
 800ca9c:	2208      	movs	r2, #8
 800ca9e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800caa0:	4b25      	ldr	r3, [pc, #148]	; (800cb38 <USBD_LL_Init+0xc0>)
 800caa2:	2202      	movs	r2, #2
 800caa4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800caa6:	4b24      	ldr	r3, [pc, #144]	; (800cb38 <USBD_LL_Init+0xc0>)
 800caa8:	2202      	movs	r2, #2
 800caaa:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800caac:	4b22      	ldr	r3, [pc, #136]	; (800cb38 <USBD_LL_Init+0xc0>)
 800caae:	2200      	movs	r2, #0
 800cab0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cab2:	4b21      	ldr	r3, [pc, #132]	; (800cb38 <USBD_LL_Init+0xc0>)
 800cab4:	2200      	movs	r2, #0
 800cab6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cab8:	4b1f      	ldr	r3, [pc, #124]	; (800cb38 <USBD_LL_Init+0xc0>)
 800caba:	2200      	movs	r2, #0
 800cabc:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cabe:	4b1e      	ldr	r3, [pc, #120]	; (800cb38 <USBD_LL_Init+0xc0>)
 800cac0:	0018      	movs	r0, r3
 800cac2:	f7f7 f967 	bl	8003d94 <HAL_PCD_Init>
 800cac6:	1e03      	subs	r3, r0, #0
 800cac8:	d001      	beq.n	800cace <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800caca:	f7f5 f9df 	bl	8001e8c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	23b0      	movs	r3, #176	; 0xb0
 800cad2:	009b      	lsls	r3, r3, #2
 800cad4:	58d0      	ldr	r0, [r2, r3]
 800cad6:	2318      	movs	r3, #24
 800cad8:	2200      	movs	r2, #0
 800cada:	2100      	movs	r1, #0
 800cadc:	f7f8 ff48 	bl	8005970 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	23b0      	movs	r3, #176	; 0xb0
 800cae4:	009b      	lsls	r3, r3, #2
 800cae6:	58d0      	ldr	r0, [r2, r3]
 800cae8:	2358      	movs	r3, #88	; 0x58
 800caea:	2200      	movs	r2, #0
 800caec:	2180      	movs	r1, #128	; 0x80
 800caee:	f7f8 ff3f 	bl	8005970 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800caf2:	687a      	ldr	r2, [r7, #4]
 800caf4:	23b0      	movs	r3, #176	; 0xb0
 800caf6:	009b      	lsls	r3, r3, #2
 800caf8:	58d0      	ldr	r0, [r2, r3]
 800cafa:	23c0      	movs	r3, #192	; 0xc0
 800cafc:	2200      	movs	r2, #0
 800cafe:	2181      	movs	r1, #129	; 0x81
 800cb00:	f7f8 ff36 	bl	8005970 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	23b0      	movs	r3, #176	; 0xb0
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	58d0      	ldr	r0, [r2, r3]
 800cb0c:	2388      	movs	r3, #136	; 0x88
 800cb0e:	005b      	lsls	r3, r3, #1
 800cb10:	2200      	movs	r2, #0
 800cb12:	2101      	movs	r1, #1
 800cb14:	f7f8 ff2c 	bl	8005970 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	23b0      	movs	r3, #176	; 0xb0
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	58d0      	ldr	r0, [r2, r3]
 800cb20:	2380      	movs	r3, #128	; 0x80
 800cb22:	005b      	lsls	r3, r3, #1
 800cb24:	2200      	movs	r2, #0
 800cb26:	2182      	movs	r1, #130	; 0x82
 800cb28:	f7f8 ff22 	bl	8005970 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cb2c:	2300      	movs	r3, #0
}
 800cb2e:	0018      	movs	r0, r3
 800cb30:	46bd      	mov	sp, r7
 800cb32:	b002      	add	sp, #8
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	46c0      	nop			; (mov r8, r8)
 800cb38:	20001338 	.word	0x20001338
 800cb3c:	40005c00 	.word	0x40005c00

0800cb40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cb40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb42:	b085      	sub	sp, #20
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb48:	210f      	movs	r1, #15
 800cb4a:	187b      	adds	r3, r7, r1
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb50:	260e      	movs	r6, #14
 800cb52:	19bb      	adds	r3, r7, r6
 800cb54:	2200      	movs	r2, #0
 800cb56:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cb58:	687a      	ldr	r2, [r7, #4]
 800cb5a:	23b0      	movs	r3, #176	; 0xb0
 800cb5c:	009b      	lsls	r3, r3, #2
 800cb5e:	58d3      	ldr	r3, [r2, r3]
 800cb60:	000d      	movs	r5, r1
 800cb62:	187c      	adds	r4, r7, r1
 800cb64:	0018      	movs	r0, r3
 800cb66:	f7f7 fa25 	bl	8003fb4 <HAL_PCD_Start>
 800cb6a:	0003      	movs	r3, r0
 800cb6c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb6e:	19bc      	adds	r4, r7, r6
 800cb70:	197b      	adds	r3, r7, r5
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	0018      	movs	r0, r3
 800cb76:	f000 f9bc 	bl	800cef2 <USBD_Get_USB_Status>
 800cb7a:	0003      	movs	r3, r0
 800cb7c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cb7e:	19bb      	adds	r3, r7, r6
 800cb80:	781b      	ldrb	r3, [r3, #0]
}
 800cb82:	0018      	movs	r0, r3
 800cb84:	46bd      	mov	sp, r7
 800cb86:	b005      	add	sp, #20
 800cb88:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cb8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cb8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb8c:	b085      	sub	sp, #20
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
 800cb92:	000c      	movs	r4, r1
 800cb94:	0010      	movs	r0, r2
 800cb96:	0019      	movs	r1, r3
 800cb98:	1cfb      	adds	r3, r7, #3
 800cb9a:	1c22      	adds	r2, r4, #0
 800cb9c:	701a      	strb	r2, [r3, #0]
 800cb9e:	1cbb      	adds	r3, r7, #2
 800cba0:	1c02      	adds	r2, r0, #0
 800cba2:	701a      	strb	r2, [r3, #0]
 800cba4:	003b      	movs	r3, r7
 800cba6:	1c0a      	adds	r2, r1, #0
 800cba8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbaa:	260f      	movs	r6, #15
 800cbac:	19bb      	adds	r3, r7, r6
 800cbae:	2200      	movs	r2, #0
 800cbb0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbb2:	250e      	movs	r5, #14
 800cbb4:	197b      	adds	r3, r7, r5
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cbba:	687a      	ldr	r2, [r7, #4]
 800cbbc:	23b0      	movs	r3, #176	; 0xb0
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	58d0      	ldr	r0, [r2, r3]
 800cbc2:	19bc      	adds	r4, r7, r6
 800cbc4:	1cbb      	adds	r3, r7, #2
 800cbc6:	781d      	ldrb	r5, [r3, #0]
 800cbc8:	003b      	movs	r3, r7
 800cbca:	881a      	ldrh	r2, [r3, #0]
 800cbcc:	1cfb      	adds	r3, r7, #3
 800cbce:	7819      	ldrb	r1, [r3, #0]
 800cbd0:	002b      	movs	r3, r5
 800cbd2:	f7f7 fbbc 	bl	800434e <HAL_PCD_EP_Open>
 800cbd6:	0003      	movs	r3, r0
 800cbd8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbda:	250e      	movs	r5, #14
 800cbdc:	197c      	adds	r4, r7, r5
 800cbde:	19bb      	adds	r3, r7, r6
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	0018      	movs	r0, r3
 800cbe4:	f000 f985 	bl	800cef2 <USBD_Get_USB_Status>
 800cbe8:	0003      	movs	r3, r0
 800cbea:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cbec:	197b      	adds	r3, r7, r5
 800cbee:	781b      	ldrb	r3, [r3, #0]
}
 800cbf0:	0018      	movs	r0, r3
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	b005      	add	sp, #20
 800cbf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cbf8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbfa:	b085      	sub	sp, #20
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
 800cc00:	000a      	movs	r2, r1
 800cc02:	1cfb      	adds	r3, r7, #3
 800cc04:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc06:	210f      	movs	r1, #15
 800cc08:	187b      	adds	r3, r7, r1
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc0e:	260e      	movs	r6, #14
 800cc10:	19bb      	adds	r3, r7, r6
 800cc12:	2200      	movs	r2, #0
 800cc14:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	23b0      	movs	r3, #176	; 0xb0
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	58d2      	ldr	r2, [r2, r3]
 800cc1e:	000d      	movs	r5, r1
 800cc20:	187c      	adds	r4, r7, r1
 800cc22:	1cfb      	adds	r3, r7, #3
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	0019      	movs	r1, r3
 800cc28:	0010      	movs	r0, r2
 800cc2a:	f7f7 fc08 	bl	800443e <HAL_PCD_EP_Close>
 800cc2e:	0003      	movs	r3, r0
 800cc30:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc32:	19bc      	adds	r4, r7, r6
 800cc34:	197b      	adds	r3, r7, r5
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	0018      	movs	r0, r3
 800cc3a:	f000 f95a 	bl	800cef2 <USBD_Get_USB_Status>
 800cc3e:	0003      	movs	r3, r0
 800cc40:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cc42:	19bb      	adds	r3, r7, r6
 800cc44:	781b      	ldrb	r3, [r3, #0]
}
 800cc46:	0018      	movs	r0, r3
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	b005      	add	sp, #20
 800cc4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cc4e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc50:	b085      	sub	sp, #20
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	6078      	str	r0, [r7, #4]
 800cc56:	000a      	movs	r2, r1
 800cc58:	1cfb      	adds	r3, r7, #3
 800cc5a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc5c:	210f      	movs	r1, #15
 800cc5e:	187b      	adds	r3, r7, r1
 800cc60:	2200      	movs	r2, #0
 800cc62:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc64:	260e      	movs	r6, #14
 800cc66:	19bb      	adds	r3, r7, r6
 800cc68:	2200      	movs	r2, #0
 800cc6a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc6c:	687a      	ldr	r2, [r7, #4]
 800cc6e:	23b0      	movs	r3, #176	; 0xb0
 800cc70:	009b      	lsls	r3, r3, #2
 800cc72:	58d2      	ldr	r2, [r2, r3]
 800cc74:	000d      	movs	r5, r1
 800cc76:	187c      	adds	r4, r7, r1
 800cc78:	1cfb      	adds	r3, r7, #3
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	0019      	movs	r1, r3
 800cc7e:	0010      	movs	r0, r2
 800cc80:	f7f7 fcd4 	bl	800462c <HAL_PCD_EP_SetStall>
 800cc84:	0003      	movs	r3, r0
 800cc86:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc88:	19bc      	adds	r4, r7, r6
 800cc8a:	197b      	adds	r3, r7, r5
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	0018      	movs	r0, r3
 800cc90:	f000 f92f 	bl	800cef2 <USBD_Get_USB_Status>
 800cc94:	0003      	movs	r3, r0
 800cc96:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cc98:	19bb      	adds	r3, r7, r6
 800cc9a:	781b      	ldrb	r3, [r3, #0]
}
 800cc9c:	0018      	movs	r0, r3
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	b005      	add	sp, #20
 800cca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cca4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cca6:	b085      	sub	sp, #20
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	000a      	movs	r2, r1
 800ccae:	1cfb      	adds	r3, r7, #3
 800ccb0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccb2:	210f      	movs	r1, #15
 800ccb4:	187b      	adds	r3, r7, r1
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccba:	260e      	movs	r6, #14
 800ccbc:	19bb      	adds	r3, r7, r6
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	23b0      	movs	r3, #176	; 0xb0
 800ccc6:	009b      	lsls	r3, r3, #2
 800ccc8:	58d2      	ldr	r2, [r2, r3]
 800ccca:	000d      	movs	r5, r1
 800cccc:	187c      	adds	r4, r7, r1
 800ccce:	1cfb      	adds	r3, r7, #3
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	0019      	movs	r1, r3
 800ccd4:	0010      	movs	r0, r2
 800ccd6:	f7f7 fd05 	bl	80046e4 <HAL_PCD_EP_ClrStall>
 800ccda:	0003      	movs	r3, r0
 800ccdc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccde:	19bc      	adds	r4, r7, r6
 800cce0:	197b      	adds	r3, r7, r5
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	0018      	movs	r0, r3
 800cce6:	f000 f904 	bl	800cef2 <USBD_Get_USB_Status>
 800ccea:	0003      	movs	r3, r0
 800ccec:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ccee:	19bb      	adds	r3, r7, r6
 800ccf0:	781b      	ldrb	r3, [r3, #0]
}
 800ccf2:	0018      	movs	r0, r3
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	b005      	add	sp, #20
 800ccf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ccfa <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccfa:	b580      	push	{r7, lr}
 800ccfc:	b084      	sub	sp, #16
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	6078      	str	r0, [r7, #4]
 800cd02:	000a      	movs	r2, r1
 800cd04:	1cfb      	adds	r3, r7, #3
 800cd06:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cd08:	687a      	ldr	r2, [r7, #4]
 800cd0a:	23b0      	movs	r3, #176	; 0xb0
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	58d3      	ldr	r3, [r2, r3]
 800cd10:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cd12:	1cfb      	adds	r3, r7, #3
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	b25b      	sxtb	r3, r3
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	da0d      	bge.n	800cd38 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cd1c:	1cfb      	adds	r3, r7, #3
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	227f      	movs	r2, #127	; 0x7f
 800cd22:	4013      	ands	r3, r2
 800cd24:	68f9      	ldr	r1, [r7, #12]
 800cd26:	1c5a      	adds	r2, r3, #1
 800cd28:	0013      	movs	r3, r2
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	189b      	adds	r3, r3, r2
 800cd2e:	00db      	lsls	r3, r3, #3
 800cd30:	18cb      	adds	r3, r1, r3
 800cd32:	3302      	adds	r3, #2
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	e00d      	b.n	800cd54 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cd38:	1cfb      	adds	r3, r7, #3
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	227f      	movs	r2, #127	; 0x7f
 800cd3e:	401a      	ands	r2, r3
 800cd40:	68f8      	ldr	r0, [r7, #12]
 800cd42:	23b5      	movs	r3, #181	; 0xb5
 800cd44:	0059      	lsls	r1, r3, #1
 800cd46:	0013      	movs	r3, r2
 800cd48:	009b      	lsls	r3, r3, #2
 800cd4a:	189b      	adds	r3, r3, r2
 800cd4c:	00db      	lsls	r3, r3, #3
 800cd4e:	18c3      	adds	r3, r0, r3
 800cd50:	185b      	adds	r3, r3, r1
 800cd52:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd54:	0018      	movs	r0, r3
 800cd56:	46bd      	mov	sp, r7
 800cd58:	b004      	add	sp, #16
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd5e:	b085      	sub	sp, #20
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	000a      	movs	r2, r1
 800cd66:	1cfb      	adds	r3, r7, #3
 800cd68:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd6a:	210f      	movs	r1, #15
 800cd6c:	187b      	adds	r3, r7, r1
 800cd6e:	2200      	movs	r2, #0
 800cd70:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd72:	260e      	movs	r6, #14
 800cd74:	19bb      	adds	r3, r7, r6
 800cd76:	2200      	movs	r2, #0
 800cd78:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	23b0      	movs	r3, #176	; 0xb0
 800cd7e:	009b      	lsls	r3, r3, #2
 800cd80:	58d2      	ldr	r2, [r2, r3]
 800cd82:	000d      	movs	r5, r1
 800cd84:	187c      	adds	r4, r7, r1
 800cd86:	1cfb      	adds	r3, r7, #3
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	0019      	movs	r1, r3
 800cd8c:	0010      	movs	r0, r2
 800cd8e:	f7f7 fab3 	bl	80042f8 <HAL_PCD_SetAddress>
 800cd92:	0003      	movs	r3, r0
 800cd94:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd96:	19bc      	adds	r4, r7, r6
 800cd98:	197b      	adds	r3, r7, r5
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	0018      	movs	r0, r3
 800cd9e:	f000 f8a8 	bl	800cef2 <USBD_Get_USB_Status>
 800cda2:	0003      	movs	r3, r0
 800cda4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800cda6:	19bb      	adds	r3, r7, r6
 800cda8:	781b      	ldrb	r3, [r3, #0]
}
 800cdaa:	0018      	movs	r0, r3
 800cdac:	46bd      	mov	sp, r7
 800cdae:	b005      	add	sp, #20
 800cdb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cdb2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cdb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdb4:	b087      	sub	sp, #28
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	60f8      	str	r0, [r7, #12]
 800cdba:	0008      	movs	r0, r1
 800cdbc:	607a      	str	r2, [r7, #4]
 800cdbe:	0019      	movs	r1, r3
 800cdc0:	230b      	movs	r3, #11
 800cdc2:	18fb      	adds	r3, r7, r3
 800cdc4:	1c02      	adds	r2, r0, #0
 800cdc6:	701a      	strb	r2, [r3, #0]
 800cdc8:	2408      	movs	r4, #8
 800cdca:	193b      	adds	r3, r7, r4
 800cdcc:	1c0a      	adds	r2, r1, #0
 800cdce:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdd0:	2117      	movs	r1, #23
 800cdd2:	187b      	adds	r3, r7, r1
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdd8:	2516      	movs	r5, #22
 800cdda:	197b      	adds	r3, r7, r5
 800cddc:	2200      	movs	r2, #0
 800cdde:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cde0:	68fa      	ldr	r2, [r7, #12]
 800cde2:	23b0      	movs	r3, #176	; 0xb0
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	58d0      	ldr	r0, [r2, r3]
 800cde8:	193b      	adds	r3, r7, r4
 800cdea:	881d      	ldrh	r5, [r3, #0]
 800cdec:	000e      	movs	r6, r1
 800cdee:	187c      	adds	r4, r7, r1
 800cdf0:	687a      	ldr	r2, [r7, #4]
 800cdf2:	230b      	movs	r3, #11
 800cdf4:	18fb      	adds	r3, r7, r3
 800cdf6:	7819      	ldrb	r1, [r3, #0]
 800cdf8:	002b      	movs	r3, r5
 800cdfa:	f7f7 fbce 	bl	800459a <HAL_PCD_EP_Transmit>
 800cdfe:	0003      	movs	r3, r0
 800ce00:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce02:	2516      	movs	r5, #22
 800ce04:	197c      	adds	r4, r7, r5
 800ce06:	19bb      	adds	r3, r7, r6
 800ce08:	781b      	ldrb	r3, [r3, #0]
 800ce0a:	0018      	movs	r0, r3
 800ce0c:	f000 f871 	bl	800cef2 <USBD_Get_USB_Status>
 800ce10:	0003      	movs	r3, r0
 800ce12:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ce14:	197b      	adds	r3, r7, r5
 800ce16:	781b      	ldrb	r3, [r3, #0]
}
 800ce18:	0018      	movs	r0, r3
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	b007      	add	sp, #28
 800ce1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ce20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce22:	b087      	sub	sp, #28
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	60f8      	str	r0, [r7, #12]
 800ce28:	0008      	movs	r0, r1
 800ce2a:	607a      	str	r2, [r7, #4]
 800ce2c:	0019      	movs	r1, r3
 800ce2e:	230b      	movs	r3, #11
 800ce30:	18fb      	adds	r3, r7, r3
 800ce32:	1c02      	adds	r2, r0, #0
 800ce34:	701a      	strb	r2, [r3, #0]
 800ce36:	2408      	movs	r4, #8
 800ce38:	193b      	adds	r3, r7, r4
 800ce3a:	1c0a      	adds	r2, r1, #0
 800ce3c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce3e:	2117      	movs	r1, #23
 800ce40:	187b      	adds	r3, r7, r1
 800ce42:	2200      	movs	r2, #0
 800ce44:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce46:	2516      	movs	r5, #22
 800ce48:	197b      	adds	r3, r7, r5
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce4e:	68fa      	ldr	r2, [r7, #12]
 800ce50:	23b0      	movs	r3, #176	; 0xb0
 800ce52:	009b      	lsls	r3, r3, #2
 800ce54:	58d0      	ldr	r0, [r2, r3]
 800ce56:	193b      	adds	r3, r7, r4
 800ce58:	881d      	ldrh	r5, [r3, #0]
 800ce5a:	000e      	movs	r6, r1
 800ce5c:	187c      	adds	r4, r7, r1
 800ce5e:	687a      	ldr	r2, [r7, #4]
 800ce60:	230b      	movs	r3, #11
 800ce62:	18fb      	adds	r3, r7, r3
 800ce64:	7819      	ldrb	r1, [r3, #0]
 800ce66:	002b      	movs	r3, r5
 800ce68:	f7f7 fb3a 	bl	80044e0 <HAL_PCD_EP_Receive>
 800ce6c:	0003      	movs	r3, r0
 800ce6e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce70:	2516      	movs	r5, #22
 800ce72:	197c      	adds	r4, r7, r5
 800ce74:	19bb      	adds	r3, r7, r6
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	0018      	movs	r0, r3
 800ce7a:	f000 f83a 	bl	800cef2 <USBD_Get_USB_Status>
 800ce7e:	0003      	movs	r3, r0
 800ce80:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ce82:	197b      	adds	r3, r7, r5
 800ce84:	781b      	ldrb	r3, [r3, #0]
}
 800ce86:	0018      	movs	r0, r3
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	b007      	add	sp, #28
 800ce8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ce8e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce8e:	b580      	push	{r7, lr}
 800ce90:	b082      	sub	sp, #8
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	6078      	str	r0, [r7, #4]
 800ce96:	000a      	movs	r2, r1
 800ce98:	1cfb      	adds	r3, r7, #3
 800ce9a:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	23b0      	movs	r3, #176	; 0xb0
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	58d2      	ldr	r2, [r2, r3]
 800cea4:	1cfb      	adds	r3, r7, #3
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	0019      	movs	r1, r3
 800ceaa:	0010      	movs	r0, r2
 800ceac:	f7f7 fb5c 	bl	8004568 <HAL_PCD_EP_GetRxCount>
 800ceb0:	0003      	movs	r3, r0
}
 800ceb2:	0018      	movs	r0, r3
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	b002      	add	sp, #8
 800ceb8:	bd80      	pop	{r7, pc}
	...

0800cebc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cec4:	4b02      	ldr	r3, [pc, #8]	; (800ced0 <USBD_static_malloc+0x14>)
}
 800cec6:	0018      	movs	r0, r3
 800cec8:	46bd      	mov	sp, r7
 800ceca:	b002      	add	sp, #8
 800cecc:	bd80      	pop	{r7, pc}
 800cece:	46c0      	nop			; (mov r8, r8)
 800ced0:	20000268 	.word	0x20000268

0800ced4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]

}
 800cedc:	46c0      	nop			; (mov r8, r8)
 800cede:	46bd      	mov	sp, r7
 800cee0:	b002      	add	sp, #8
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cee8:	f7f4 f9aa 	bl	8001240 <SystemClock_Config>
}
 800ceec:	46c0      	nop			; (mov r8, r8)
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}

0800cef2 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cef2:	b580      	push	{r7, lr}
 800cef4:	b084      	sub	sp, #16
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	0002      	movs	r2, r0
 800cefa:	1dfb      	adds	r3, r7, #7
 800cefc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cefe:	230f      	movs	r3, #15
 800cf00:	18fb      	adds	r3, r7, r3
 800cf02:	2200      	movs	r2, #0
 800cf04:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800cf06:	1dfb      	adds	r3, r7, #7
 800cf08:	781b      	ldrb	r3, [r3, #0]
 800cf0a:	2b03      	cmp	r3, #3
 800cf0c:	d017      	beq.n	800cf3e <USBD_Get_USB_Status+0x4c>
 800cf0e:	dc1b      	bgt.n	800cf48 <USBD_Get_USB_Status+0x56>
 800cf10:	2b02      	cmp	r3, #2
 800cf12:	d00f      	beq.n	800cf34 <USBD_Get_USB_Status+0x42>
 800cf14:	dc18      	bgt.n	800cf48 <USBD_Get_USB_Status+0x56>
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d002      	beq.n	800cf20 <USBD_Get_USB_Status+0x2e>
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d005      	beq.n	800cf2a <USBD_Get_USB_Status+0x38>
 800cf1e:	e013      	b.n	800cf48 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cf20:	230f      	movs	r3, #15
 800cf22:	18fb      	adds	r3, r7, r3
 800cf24:	2200      	movs	r2, #0
 800cf26:	701a      	strb	r2, [r3, #0]
    break;
 800cf28:	e013      	b.n	800cf52 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf2a:	230f      	movs	r3, #15
 800cf2c:	18fb      	adds	r3, r7, r3
 800cf2e:	2202      	movs	r2, #2
 800cf30:	701a      	strb	r2, [r3, #0]
    break;
 800cf32:	e00e      	b.n	800cf52 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf34:	230f      	movs	r3, #15
 800cf36:	18fb      	adds	r3, r7, r3
 800cf38:	2201      	movs	r2, #1
 800cf3a:	701a      	strb	r2, [r3, #0]
    break;
 800cf3c:	e009      	b.n	800cf52 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf3e:	230f      	movs	r3, #15
 800cf40:	18fb      	adds	r3, r7, r3
 800cf42:	2202      	movs	r2, #2
 800cf44:	701a      	strb	r2, [r3, #0]
    break;
 800cf46:	e004      	b.n	800cf52 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800cf48:	230f      	movs	r3, #15
 800cf4a:	18fb      	adds	r3, r7, r3
 800cf4c:	2202      	movs	r2, #2
 800cf4e:	701a      	strb	r2, [r3, #0]
    break;
 800cf50:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800cf52:	230f      	movs	r3, #15
 800cf54:	18fb      	adds	r3, r7, r3
 800cf56:	781b      	ldrb	r3, [r3, #0]
}
 800cf58:	0018      	movs	r0, r3
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	b004      	add	sp, #16
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <__errno>:
 800cf60:	4b01      	ldr	r3, [pc, #4]	; (800cf68 <__errno+0x8>)
 800cf62:	6818      	ldr	r0, [r3, #0]
 800cf64:	4770      	bx	lr
 800cf66:	46c0      	nop			; (mov r8, r8)
 800cf68:	2000017c 	.word	0x2000017c

0800cf6c <__libc_init_array>:
 800cf6c:	b570      	push	{r4, r5, r6, lr}
 800cf6e:	2600      	movs	r6, #0
 800cf70:	4d0c      	ldr	r5, [pc, #48]	; (800cfa4 <__libc_init_array+0x38>)
 800cf72:	4c0d      	ldr	r4, [pc, #52]	; (800cfa8 <__libc_init_array+0x3c>)
 800cf74:	1b64      	subs	r4, r4, r5
 800cf76:	10a4      	asrs	r4, r4, #2
 800cf78:	42a6      	cmp	r6, r4
 800cf7a:	d109      	bne.n	800cf90 <__libc_init_array+0x24>
 800cf7c:	2600      	movs	r6, #0
 800cf7e:	f000 fc5b 	bl	800d838 <_init>
 800cf82:	4d0a      	ldr	r5, [pc, #40]	; (800cfac <__libc_init_array+0x40>)
 800cf84:	4c0a      	ldr	r4, [pc, #40]	; (800cfb0 <__libc_init_array+0x44>)
 800cf86:	1b64      	subs	r4, r4, r5
 800cf88:	10a4      	asrs	r4, r4, #2
 800cf8a:	42a6      	cmp	r6, r4
 800cf8c:	d105      	bne.n	800cf9a <__libc_init_array+0x2e>
 800cf8e:	bd70      	pop	{r4, r5, r6, pc}
 800cf90:	00b3      	lsls	r3, r6, #2
 800cf92:	58eb      	ldr	r3, [r5, r3]
 800cf94:	4798      	blx	r3
 800cf96:	3601      	adds	r6, #1
 800cf98:	e7ee      	b.n	800cf78 <__libc_init_array+0xc>
 800cf9a:	00b3      	lsls	r3, r6, #2
 800cf9c:	58eb      	ldr	r3, [r5, r3]
 800cf9e:	4798      	blx	r3
 800cfa0:	3601      	adds	r6, #1
 800cfa2:	e7f2      	b.n	800cf8a <__libc_init_array+0x1e>
 800cfa4:	0800dac0 	.word	0x0800dac0
 800cfa8:	0800dac0 	.word	0x0800dac0
 800cfac:	0800dac0 	.word	0x0800dac0
 800cfb0:	0800dac4 	.word	0x0800dac4

0800cfb4 <malloc>:
 800cfb4:	b510      	push	{r4, lr}
 800cfb6:	4b03      	ldr	r3, [pc, #12]	; (800cfc4 <malloc+0x10>)
 800cfb8:	0001      	movs	r1, r0
 800cfba:	6818      	ldr	r0, [r3, #0]
 800cfbc:	f000 f86a 	bl	800d094 <_malloc_r>
 800cfc0:	bd10      	pop	{r4, pc}
 800cfc2:	46c0      	nop			; (mov r8, r8)
 800cfc4:	2000017c 	.word	0x2000017c

0800cfc8 <free>:
 800cfc8:	b510      	push	{r4, lr}
 800cfca:	4b03      	ldr	r3, [pc, #12]	; (800cfd8 <free+0x10>)
 800cfcc:	0001      	movs	r1, r0
 800cfce:	6818      	ldr	r0, [r3, #0]
 800cfd0:	f000 f816 	bl	800d000 <_free_r>
 800cfd4:	bd10      	pop	{r4, pc}
 800cfd6:	46c0      	nop			; (mov r8, r8)
 800cfd8:	2000017c 	.word	0x2000017c

0800cfdc <memcpy>:
 800cfdc:	2300      	movs	r3, #0
 800cfde:	b510      	push	{r4, lr}
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d100      	bne.n	800cfe6 <memcpy+0xa>
 800cfe4:	bd10      	pop	{r4, pc}
 800cfe6:	5ccc      	ldrb	r4, [r1, r3]
 800cfe8:	54c4      	strb	r4, [r0, r3]
 800cfea:	3301      	adds	r3, #1
 800cfec:	e7f8      	b.n	800cfe0 <memcpy+0x4>

0800cfee <memset>:
 800cfee:	0003      	movs	r3, r0
 800cff0:	1882      	adds	r2, r0, r2
 800cff2:	4293      	cmp	r3, r2
 800cff4:	d100      	bne.n	800cff8 <memset+0xa>
 800cff6:	4770      	bx	lr
 800cff8:	7019      	strb	r1, [r3, #0]
 800cffa:	3301      	adds	r3, #1
 800cffc:	e7f9      	b.n	800cff2 <memset+0x4>
	...

0800d000 <_free_r>:
 800d000:	b570      	push	{r4, r5, r6, lr}
 800d002:	0005      	movs	r5, r0
 800d004:	2900      	cmp	r1, #0
 800d006:	d010      	beq.n	800d02a <_free_r+0x2a>
 800d008:	1f0c      	subs	r4, r1, #4
 800d00a:	6823      	ldr	r3, [r4, #0]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	da00      	bge.n	800d012 <_free_r+0x12>
 800d010:	18e4      	adds	r4, r4, r3
 800d012:	0028      	movs	r0, r5
 800d014:	f000 f8ce 	bl	800d1b4 <__malloc_lock>
 800d018:	4a1d      	ldr	r2, [pc, #116]	; (800d090 <_free_r+0x90>)
 800d01a:	6813      	ldr	r3, [r2, #0]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d105      	bne.n	800d02c <_free_r+0x2c>
 800d020:	6063      	str	r3, [r4, #4]
 800d022:	6014      	str	r4, [r2, #0]
 800d024:	0028      	movs	r0, r5
 800d026:	f000 f8cd 	bl	800d1c4 <__malloc_unlock>
 800d02a:	bd70      	pop	{r4, r5, r6, pc}
 800d02c:	42a3      	cmp	r3, r4
 800d02e:	d908      	bls.n	800d042 <_free_r+0x42>
 800d030:	6821      	ldr	r1, [r4, #0]
 800d032:	1860      	adds	r0, r4, r1
 800d034:	4283      	cmp	r3, r0
 800d036:	d1f3      	bne.n	800d020 <_free_r+0x20>
 800d038:	6818      	ldr	r0, [r3, #0]
 800d03a:	685b      	ldr	r3, [r3, #4]
 800d03c:	1841      	adds	r1, r0, r1
 800d03e:	6021      	str	r1, [r4, #0]
 800d040:	e7ee      	b.n	800d020 <_free_r+0x20>
 800d042:	001a      	movs	r2, r3
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d001      	beq.n	800d04e <_free_r+0x4e>
 800d04a:	42a3      	cmp	r3, r4
 800d04c:	d9f9      	bls.n	800d042 <_free_r+0x42>
 800d04e:	6811      	ldr	r1, [r2, #0]
 800d050:	1850      	adds	r0, r2, r1
 800d052:	42a0      	cmp	r0, r4
 800d054:	d10b      	bne.n	800d06e <_free_r+0x6e>
 800d056:	6820      	ldr	r0, [r4, #0]
 800d058:	1809      	adds	r1, r1, r0
 800d05a:	1850      	adds	r0, r2, r1
 800d05c:	6011      	str	r1, [r2, #0]
 800d05e:	4283      	cmp	r3, r0
 800d060:	d1e0      	bne.n	800d024 <_free_r+0x24>
 800d062:	6818      	ldr	r0, [r3, #0]
 800d064:	685b      	ldr	r3, [r3, #4]
 800d066:	1841      	adds	r1, r0, r1
 800d068:	6011      	str	r1, [r2, #0]
 800d06a:	6053      	str	r3, [r2, #4]
 800d06c:	e7da      	b.n	800d024 <_free_r+0x24>
 800d06e:	42a0      	cmp	r0, r4
 800d070:	d902      	bls.n	800d078 <_free_r+0x78>
 800d072:	230c      	movs	r3, #12
 800d074:	602b      	str	r3, [r5, #0]
 800d076:	e7d5      	b.n	800d024 <_free_r+0x24>
 800d078:	6821      	ldr	r1, [r4, #0]
 800d07a:	1860      	adds	r0, r4, r1
 800d07c:	4283      	cmp	r3, r0
 800d07e:	d103      	bne.n	800d088 <_free_r+0x88>
 800d080:	6818      	ldr	r0, [r3, #0]
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	1841      	adds	r1, r0, r1
 800d086:	6021      	str	r1, [r4, #0]
 800d088:	6063      	str	r3, [r4, #4]
 800d08a:	6054      	str	r4, [r2, #4]
 800d08c:	e7ca      	b.n	800d024 <_free_r+0x24>
 800d08e:	46c0      	nop			; (mov r8, r8)
 800d090:	20000488 	.word	0x20000488

0800d094 <_malloc_r>:
 800d094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d096:	2303      	movs	r3, #3
 800d098:	1ccd      	adds	r5, r1, #3
 800d09a:	439d      	bics	r5, r3
 800d09c:	3508      	adds	r5, #8
 800d09e:	0006      	movs	r6, r0
 800d0a0:	2d0c      	cmp	r5, #12
 800d0a2:	d21f      	bcs.n	800d0e4 <_malloc_r+0x50>
 800d0a4:	250c      	movs	r5, #12
 800d0a6:	42a9      	cmp	r1, r5
 800d0a8:	d81e      	bhi.n	800d0e8 <_malloc_r+0x54>
 800d0aa:	0030      	movs	r0, r6
 800d0ac:	f000 f882 	bl	800d1b4 <__malloc_lock>
 800d0b0:	4925      	ldr	r1, [pc, #148]	; (800d148 <_malloc_r+0xb4>)
 800d0b2:	680a      	ldr	r2, [r1, #0]
 800d0b4:	0014      	movs	r4, r2
 800d0b6:	2c00      	cmp	r4, #0
 800d0b8:	d11a      	bne.n	800d0f0 <_malloc_r+0x5c>
 800d0ba:	4f24      	ldr	r7, [pc, #144]	; (800d14c <_malloc_r+0xb8>)
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d104      	bne.n	800d0cc <_malloc_r+0x38>
 800d0c2:	0021      	movs	r1, r4
 800d0c4:	0030      	movs	r0, r6
 800d0c6:	f000 f843 	bl	800d150 <_sbrk_r>
 800d0ca:	6038      	str	r0, [r7, #0]
 800d0cc:	0029      	movs	r1, r5
 800d0ce:	0030      	movs	r0, r6
 800d0d0:	f000 f83e 	bl	800d150 <_sbrk_r>
 800d0d4:	1c43      	adds	r3, r0, #1
 800d0d6:	d12b      	bne.n	800d130 <_malloc_r+0x9c>
 800d0d8:	230c      	movs	r3, #12
 800d0da:	0030      	movs	r0, r6
 800d0dc:	6033      	str	r3, [r6, #0]
 800d0de:	f000 f871 	bl	800d1c4 <__malloc_unlock>
 800d0e2:	e003      	b.n	800d0ec <_malloc_r+0x58>
 800d0e4:	2d00      	cmp	r5, #0
 800d0e6:	dade      	bge.n	800d0a6 <_malloc_r+0x12>
 800d0e8:	230c      	movs	r3, #12
 800d0ea:	6033      	str	r3, [r6, #0]
 800d0ec:	2000      	movs	r0, #0
 800d0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0f0:	6823      	ldr	r3, [r4, #0]
 800d0f2:	1b5b      	subs	r3, r3, r5
 800d0f4:	d419      	bmi.n	800d12a <_malloc_r+0x96>
 800d0f6:	2b0b      	cmp	r3, #11
 800d0f8:	d903      	bls.n	800d102 <_malloc_r+0x6e>
 800d0fa:	6023      	str	r3, [r4, #0]
 800d0fc:	18e4      	adds	r4, r4, r3
 800d0fe:	6025      	str	r5, [r4, #0]
 800d100:	e003      	b.n	800d10a <_malloc_r+0x76>
 800d102:	6863      	ldr	r3, [r4, #4]
 800d104:	42a2      	cmp	r2, r4
 800d106:	d10e      	bne.n	800d126 <_malloc_r+0x92>
 800d108:	600b      	str	r3, [r1, #0]
 800d10a:	0030      	movs	r0, r6
 800d10c:	f000 f85a 	bl	800d1c4 <__malloc_unlock>
 800d110:	0020      	movs	r0, r4
 800d112:	2207      	movs	r2, #7
 800d114:	300b      	adds	r0, #11
 800d116:	1d23      	adds	r3, r4, #4
 800d118:	4390      	bics	r0, r2
 800d11a:	1ac2      	subs	r2, r0, r3
 800d11c:	4298      	cmp	r0, r3
 800d11e:	d0e6      	beq.n	800d0ee <_malloc_r+0x5a>
 800d120:	1a1b      	subs	r3, r3, r0
 800d122:	50a3      	str	r3, [r4, r2]
 800d124:	e7e3      	b.n	800d0ee <_malloc_r+0x5a>
 800d126:	6053      	str	r3, [r2, #4]
 800d128:	e7ef      	b.n	800d10a <_malloc_r+0x76>
 800d12a:	0022      	movs	r2, r4
 800d12c:	6864      	ldr	r4, [r4, #4]
 800d12e:	e7c2      	b.n	800d0b6 <_malloc_r+0x22>
 800d130:	2303      	movs	r3, #3
 800d132:	1cc4      	adds	r4, r0, #3
 800d134:	439c      	bics	r4, r3
 800d136:	42a0      	cmp	r0, r4
 800d138:	d0e1      	beq.n	800d0fe <_malloc_r+0x6a>
 800d13a:	1a21      	subs	r1, r4, r0
 800d13c:	0030      	movs	r0, r6
 800d13e:	f000 f807 	bl	800d150 <_sbrk_r>
 800d142:	1c43      	adds	r3, r0, #1
 800d144:	d1db      	bne.n	800d0fe <_malloc_r+0x6a>
 800d146:	e7c7      	b.n	800d0d8 <_malloc_r+0x44>
 800d148:	20000488 	.word	0x20000488
 800d14c:	2000048c 	.word	0x2000048c

0800d150 <_sbrk_r>:
 800d150:	2300      	movs	r3, #0
 800d152:	b570      	push	{r4, r5, r6, lr}
 800d154:	4d06      	ldr	r5, [pc, #24]	; (800d170 <_sbrk_r+0x20>)
 800d156:	0004      	movs	r4, r0
 800d158:	0008      	movs	r0, r1
 800d15a:	602b      	str	r3, [r5, #0]
 800d15c:	f7f5 fa52 	bl	8002604 <_sbrk>
 800d160:	1c43      	adds	r3, r0, #1
 800d162:	d103      	bne.n	800d16c <_sbrk_r+0x1c>
 800d164:	682b      	ldr	r3, [r5, #0]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d000      	beq.n	800d16c <_sbrk_r+0x1c>
 800d16a:	6023      	str	r3, [r4, #0]
 800d16c:	bd70      	pop	{r4, r5, r6, pc}
 800d16e:	46c0      	nop			; (mov r8, r8)
 800d170:	2000162c 	.word	0x2000162c

0800d174 <siprintf>:
 800d174:	b40e      	push	{r1, r2, r3}
 800d176:	b500      	push	{lr}
 800d178:	490b      	ldr	r1, [pc, #44]	; (800d1a8 <siprintf+0x34>)
 800d17a:	b09c      	sub	sp, #112	; 0x70
 800d17c:	ab1d      	add	r3, sp, #116	; 0x74
 800d17e:	9002      	str	r0, [sp, #8]
 800d180:	9006      	str	r0, [sp, #24]
 800d182:	9107      	str	r1, [sp, #28]
 800d184:	9104      	str	r1, [sp, #16]
 800d186:	4809      	ldr	r0, [pc, #36]	; (800d1ac <siprintf+0x38>)
 800d188:	4909      	ldr	r1, [pc, #36]	; (800d1b0 <siprintf+0x3c>)
 800d18a:	cb04      	ldmia	r3!, {r2}
 800d18c:	9105      	str	r1, [sp, #20]
 800d18e:	6800      	ldr	r0, [r0, #0]
 800d190:	a902      	add	r1, sp, #8
 800d192:	9301      	str	r3, [sp, #4]
 800d194:	f000 f880 	bl	800d298 <_svfiprintf_r>
 800d198:	2300      	movs	r3, #0
 800d19a:	9a02      	ldr	r2, [sp, #8]
 800d19c:	7013      	strb	r3, [r2, #0]
 800d19e:	b01c      	add	sp, #112	; 0x70
 800d1a0:	bc08      	pop	{r3}
 800d1a2:	b003      	add	sp, #12
 800d1a4:	4718      	bx	r3
 800d1a6:	46c0      	nop			; (mov r8, r8)
 800d1a8:	7fffffff 	.word	0x7fffffff
 800d1ac:	2000017c 	.word	0x2000017c
 800d1b0:	ffff0208 	.word	0xffff0208

0800d1b4 <__malloc_lock>:
 800d1b4:	b510      	push	{r4, lr}
 800d1b6:	4802      	ldr	r0, [pc, #8]	; (800d1c0 <__malloc_lock+0xc>)
 800d1b8:	f000 faf0 	bl	800d79c <__retarget_lock_acquire_recursive>
 800d1bc:	bd10      	pop	{r4, pc}
 800d1be:	46c0      	nop			; (mov r8, r8)
 800d1c0:	20001634 	.word	0x20001634

0800d1c4 <__malloc_unlock>:
 800d1c4:	b510      	push	{r4, lr}
 800d1c6:	4802      	ldr	r0, [pc, #8]	; (800d1d0 <__malloc_unlock+0xc>)
 800d1c8:	f000 fae9 	bl	800d79e <__retarget_lock_release_recursive>
 800d1cc:	bd10      	pop	{r4, pc}
 800d1ce:	46c0      	nop			; (mov r8, r8)
 800d1d0:	20001634 	.word	0x20001634

0800d1d4 <__ssputs_r>:
 800d1d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1d6:	688e      	ldr	r6, [r1, #8]
 800d1d8:	b085      	sub	sp, #20
 800d1da:	0007      	movs	r7, r0
 800d1dc:	000c      	movs	r4, r1
 800d1de:	9203      	str	r2, [sp, #12]
 800d1e0:	9301      	str	r3, [sp, #4]
 800d1e2:	429e      	cmp	r6, r3
 800d1e4:	d83c      	bhi.n	800d260 <__ssputs_r+0x8c>
 800d1e6:	2390      	movs	r3, #144	; 0x90
 800d1e8:	898a      	ldrh	r2, [r1, #12]
 800d1ea:	00db      	lsls	r3, r3, #3
 800d1ec:	421a      	tst	r2, r3
 800d1ee:	d034      	beq.n	800d25a <__ssputs_r+0x86>
 800d1f0:	2503      	movs	r5, #3
 800d1f2:	6909      	ldr	r1, [r1, #16]
 800d1f4:	6823      	ldr	r3, [r4, #0]
 800d1f6:	1a5b      	subs	r3, r3, r1
 800d1f8:	9302      	str	r3, [sp, #8]
 800d1fa:	6963      	ldr	r3, [r4, #20]
 800d1fc:	9802      	ldr	r0, [sp, #8]
 800d1fe:	435d      	muls	r5, r3
 800d200:	0feb      	lsrs	r3, r5, #31
 800d202:	195d      	adds	r5, r3, r5
 800d204:	9b01      	ldr	r3, [sp, #4]
 800d206:	106d      	asrs	r5, r5, #1
 800d208:	3301      	adds	r3, #1
 800d20a:	181b      	adds	r3, r3, r0
 800d20c:	42ab      	cmp	r3, r5
 800d20e:	d900      	bls.n	800d212 <__ssputs_r+0x3e>
 800d210:	001d      	movs	r5, r3
 800d212:	0553      	lsls	r3, r2, #21
 800d214:	d532      	bpl.n	800d27c <__ssputs_r+0xa8>
 800d216:	0029      	movs	r1, r5
 800d218:	0038      	movs	r0, r7
 800d21a:	f7ff ff3b 	bl	800d094 <_malloc_r>
 800d21e:	1e06      	subs	r6, r0, #0
 800d220:	d109      	bne.n	800d236 <__ssputs_r+0x62>
 800d222:	230c      	movs	r3, #12
 800d224:	603b      	str	r3, [r7, #0]
 800d226:	2340      	movs	r3, #64	; 0x40
 800d228:	2001      	movs	r0, #1
 800d22a:	89a2      	ldrh	r2, [r4, #12]
 800d22c:	4240      	negs	r0, r0
 800d22e:	4313      	orrs	r3, r2
 800d230:	81a3      	strh	r3, [r4, #12]
 800d232:	b005      	add	sp, #20
 800d234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d236:	9a02      	ldr	r2, [sp, #8]
 800d238:	6921      	ldr	r1, [r4, #16]
 800d23a:	f7ff fecf 	bl	800cfdc <memcpy>
 800d23e:	89a3      	ldrh	r3, [r4, #12]
 800d240:	4a14      	ldr	r2, [pc, #80]	; (800d294 <__ssputs_r+0xc0>)
 800d242:	401a      	ands	r2, r3
 800d244:	2380      	movs	r3, #128	; 0x80
 800d246:	4313      	orrs	r3, r2
 800d248:	81a3      	strh	r3, [r4, #12]
 800d24a:	9b02      	ldr	r3, [sp, #8]
 800d24c:	6126      	str	r6, [r4, #16]
 800d24e:	18f6      	adds	r6, r6, r3
 800d250:	6026      	str	r6, [r4, #0]
 800d252:	6165      	str	r5, [r4, #20]
 800d254:	9e01      	ldr	r6, [sp, #4]
 800d256:	1aed      	subs	r5, r5, r3
 800d258:	60a5      	str	r5, [r4, #8]
 800d25a:	9b01      	ldr	r3, [sp, #4]
 800d25c:	429e      	cmp	r6, r3
 800d25e:	d900      	bls.n	800d262 <__ssputs_r+0x8e>
 800d260:	9e01      	ldr	r6, [sp, #4]
 800d262:	0032      	movs	r2, r6
 800d264:	9903      	ldr	r1, [sp, #12]
 800d266:	6820      	ldr	r0, [r4, #0]
 800d268:	f000 faa5 	bl	800d7b6 <memmove>
 800d26c:	68a3      	ldr	r3, [r4, #8]
 800d26e:	2000      	movs	r0, #0
 800d270:	1b9b      	subs	r3, r3, r6
 800d272:	60a3      	str	r3, [r4, #8]
 800d274:	6823      	ldr	r3, [r4, #0]
 800d276:	199e      	adds	r6, r3, r6
 800d278:	6026      	str	r6, [r4, #0]
 800d27a:	e7da      	b.n	800d232 <__ssputs_r+0x5e>
 800d27c:	002a      	movs	r2, r5
 800d27e:	0038      	movs	r0, r7
 800d280:	f000 faac 	bl	800d7dc <_realloc_r>
 800d284:	1e06      	subs	r6, r0, #0
 800d286:	d1e0      	bne.n	800d24a <__ssputs_r+0x76>
 800d288:	0038      	movs	r0, r7
 800d28a:	6921      	ldr	r1, [r4, #16]
 800d28c:	f7ff feb8 	bl	800d000 <_free_r>
 800d290:	e7c7      	b.n	800d222 <__ssputs_r+0x4e>
 800d292:	46c0      	nop			; (mov r8, r8)
 800d294:	fffffb7f 	.word	0xfffffb7f

0800d298 <_svfiprintf_r>:
 800d298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d29a:	b0a1      	sub	sp, #132	; 0x84
 800d29c:	9003      	str	r0, [sp, #12]
 800d29e:	001d      	movs	r5, r3
 800d2a0:	898b      	ldrh	r3, [r1, #12]
 800d2a2:	000f      	movs	r7, r1
 800d2a4:	0016      	movs	r6, r2
 800d2a6:	061b      	lsls	r3, r3, #24
 800d2a8:	d511      	bpl.n	800d2ce <_svfiprintf_r+0x36>
 800d2aa:	690b      	ldr	r3, [r1, #16]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d10e      	bne.n	800d2ce <_svfiprintf_r+0x36>
 800d2b0:	2140      	movs	r1, #64	; 0x40
 800d2b2:	f7ff feef 	bl	800d094 <_malloc_r>
 800d2b6:	6038      	str	r0, [r7, #0]
 800d2b8:	6138      	str	r0, [r7, #16]
 800d2ba:	2800      	cmp	r0, #0
 800d2bc:	d105      	bne.n	800d2ca <_svfiprintf_r+0x32>
 800d2be:	230c      	movs	r3, #12
 800d2c0:	9a03      	ldr	r2, [sp, #12]
 800d2c2:	3801      	subs	r0, #1
 800d2c4:	6013      	str	r3, [r2, #0]
 800d2c6:	b021      	add	sp, #132	; 0x84
 800d2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2ca:	2340      	movs	r3, #64	; 0x40
 800d2cc:	617b      	str	r3, [r7, #20]
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	ac08      	add	r4, sp, #32
 800d2d2:	6163      	str	r3, [r4, #20]
 800d2d4:	3320      	adds	r3, #32
 800d2d6:	7663      	strb	r3, [r4, #25]
 800d2d8:	3310      	adds	r3, #16
 800d2da:	76a3      	strb	r3, [r4, #26]
 800d2dc:	9507      	str	r5, [sp, #28]
 800d2de:	0035      	movs	r5, r6
 800d2e0:	782b      	ldrb	r3, [r5, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d001      	beq.n	800d2ea <_svfiprintf_r+0x52>
 800d2e6:	2b25      	cmp	r3, #37	; 0x25
 800d2e8:	d147      	bne.n	800d37a <_svfiprintf_r+0xe2>
 800d2ea:	1bab      	subs	r3, r5, r6
 800d2ec:	9305      	str	r3, [sp, #20]
 800d2ee:	42b5      	cmp	r5, r6
 800d2f0:	d00c      	beq.n	800d30c <_svfiprintf_r+0x74>
 800d2f2:	0032      	movs	r2, r6
 800d2f4:	0039      	movs	r1, r7
 800d2f6:	9803      	ldr	r0, [sp, #12]
 800d2f8:	f7ff ff6c 	bl	800d1d4 <__ssputs_r>
 800d2fc:	1c43      	adds	r3, r0, #1
 800d2fe:	d100      	bne.n	800d302 <_svfiprintf_r+0x6a>
 800d300:	e0ae      	b.n	800d460 <_svfiprintf_r+0x1c8>
 800d302:	6962      	ldr	r2, [r4, #20]
 800d304:	9b05      	ldr	r3, [sp, #20]
 800d306:	4694      	mov	ip, r2
 800d308:	4463      	add	r3, ip
 800d30a:	6163      	str	r3, [r4, #20]
 800d30c:	782b      	ldrb	r3, [r5, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d100      	bne.n	800d314 <_svfiprintf_r+0x7c>
 800d312:	e0a5      	b.n	800d460 <_svfiprintf_r+0x1c8>
 800d314:	2201      	movs	r2, #1
 800d316:	2300      	movs	r3, #0
 800d318:	4252      	negs	r2, r2
 800d31a:	6062      	str	r2, [r4, #4]
 800d31c:	a904      	add	r1, sp, #16
 800d31e:	3254      	adds	r2, #84	; 0x54
 800d320:	1852      	adds	r2, r2, r1
 800d322:	1c6e      	adds	r6, r5, #1
 800d324:	6023      	str	r3, [r4, #0]
 800d326:	60e3      	str	r3, [r4, #12]
 800d328:	60a3      	str	r3, [r4, #8]
 800d32a:	7013      	strb	r3, [r2, #0]
 800d32c:	65a3      	str	r3, [r4, #88]	; 0x58
 800d32e:	2205      	movs	r2, #5
 800d330:	7831      	ldrb	r1, [r6, #0]
 800d332:	4854      	ldr	r0, [pc, #336]	; (800d484 <_svfiprintf_r+0x1ec>)
 800d334:	f000 fa34 	bl	800d7a0 <memchr>
 800d338:	1c75      	adds	r5, r6, #1
 800d33a:	2800      	cmp	r0, #0
 800d33c:	d11f      	bne.n	800d37e <_svfiprintf_r+0xe6>
 800d33e:	6822      	ldr	r2, [r4, #0]
 800d340:	06d3      	lsls	r3, r2, #27
 800d342:	d504      	bpl.n	800d34e <_svfiprintf_r+0xb6>
 800d344:	2353      	movs	r3, #83	; 0x53
 800d346:	a904      	add	r1, sp, #16
 800d348:	185b      	adds	r3, r3, r1
 800d34a:	2120      	movs	r1, #32
 800d34c:	7019      	strb	r1, [r3, #0]
 800d34e:	0713      	lsls	r3, r2, #28
 800d350:	d504      	bpl.n	800d35c <_svfiprintf_r+0xc4>
 800d352:	2353      	movs	r3, #83	; 0x53
 800d354:	a904      	add	r1, sp, #16
 800d356:	185b      	adds	r3, r3, r1
 800d358:	212b      	movs	r1, #43	; 0x2b
 800d35a:	7019      	strb	r1, [r3, #0]
 800d35c:	7833      	ldrb	r3, [r6, #0]
 800d35e:	2b2a      	cmp	r3, #42	; 0x2a
 800d360:	d016      	beq.n	800d390 <_svfiprintf_r+0xf8>
 800d362:	0035      	movs	r5, r6
 800d364:	2100      	movs	r1, #0
 800d366:	200a      	movs	r0, #10
 800d368:	68e3      	ldr	r3, [r4, #12]
 800d36a:	782a      	ldrb	r2, [r5, #0]
 800d36c:	1c6e      	adds	r6, r5, #1
 800d36e:	3a30      	subs	r2, #48	; 0x30
 800d370:	2a09      	cmp	r2, #9
 800d372:	d94e      	bls.n	800d412 <_svfiprintf_r+0x17a>
 800d374:	2900      	cmp	r1, #0
 800d376:	d111      	bne.n	800d39c <_svfiprintf_r+0x104>
 800d378:	e017      	b.n	800d3aa <_svfiprintf_r+0x112>
 800d37a:	3501      	adds	r5, #1
 800d37c:	e7b0      	b.n	800d2e0 <_svfiprintf_r+0x48>
 800d37e:	4b41      	ldr	r3, [pc, #260]	; (800d484 <_svfiprintf_r+0x1ec>)
 800d380:	6822      	ldr	r2, [r4, #0]
 800d382:	1ac0      	subs	r0, r0, r3
 800d384:	2301      	movs	r3, #1
 800d386:	4083      	lsls	r3, r0
 800d388:	4313      	orrs	r3, r2
 800d38a:	002e      	movs	r6, r5
 800d38c:	6023      	str	r3, [r4, #0]
 800d38e:	e7ce      	b.n	800d32e <_svfiprintf_r+0x96>
 800d390:	9b07      	ldr	r3, [sp, #28]
 800d392:	1d19      	adds	r1, r3, #4
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	9107      	str	r1, [sp, #28]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	db01      	blt.n	800d3a0 <_svfiprintf_r+0x108>
 800d39c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d39e:	e004      	b.n	800d3aa <_svfiprintf_r+0x112>
 800d3a0:	425b      	negs	r3, r3
 800d3a2:	60e3      	str	r3, [r4, #12]
 800d3a4:	2302      	movs	r3, #2
 800d3a6:	4313      	orrs	r3, r2
 800d3a8:	6023      	str	r3, [r4, #0]
 800d3aa:	782b      	ldrb	r3, [r5, #0]
 800d3ac:	2b2e      	cmp	r3, #46	; 0x2e
 800d3ae:	d10a      	bne.n	800d3c6 <_svfiprintf_r+0x12e>
 800d3b0:	786b      	ldrb	r3, [r5, #1]
 800d3b2:	2b2a      	cmp	r3, #42	; 0x2a
 800d3b4:	d135      	bne.n	800d422 <_svfiprintf_r+0x18a>
 800d3b6:	9b07      	ldr	r3, [sp, #28]
 800d3b8:	3502      	adds	r5, #2
 800d3ba:	1d1a      	adds	r2, r3, #4
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	9207      	str	r2, [sp, #28]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	db2b      	blt.n	800d41c <_svfiprintf_r+0x184>
 800d3c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d3c6:	4e30      	ldr	r6, [pc, #192]	; (800d488 <_svfiprintf_r+0x1f0>)
 800d3c8:	2203      	movs	r2, #3
 800d3ca:	0030      	movs	r0, r6
 800d3cc:	7829      	ldrb	r1, [r5, #0]
 800d3ce:	f000 f9e7 	bl	800d7a0 <memchr>
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	d006      	beq.n	800d3e4 <_svfiprintf_r+0x14c>
 800d3d6:	2340      	movs	r3, #64	; 0x40
 800d3d8:	1b80      	subs	r0, r0, r6
 800d3da:	4083      	lsls	r3, r0
 800d3dc:	6822      	ldr	r2, [r4, #0]
 800d3de:	3501      	adds	r5, #1
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	6023      	str	r3, [r4, #0]
 800d3e4:	7829      	ldrb	r1, [r5, #0]
 800d3e6:	2206      	movs	r2, #6
 800d3e8:	4828      	ldr	r0, [pc, #160]	; (800d48c <_svfiprintf_r+0x1f4>)
 800d3ea:	1c6e      	adds	r6, r5, #1
 800d3ec:	7621      	strb	r1, [r4, #24]
 800d3ee:	f000 f9d7 	bl	800d7a0 <memchr>
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	d03c      	beq.n	800d470 <_svfiprintf_r+0x1d8>
 800d3f6:	4b26      	ldr	r3, [pc, #152]	; (800d490 <_svfiprintf_r+0x1f8>)
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d125      	bne.n	800d448 <_svfiprintf_r+0x1b0>
 800d3fc:	2207      	movs	r2, #7
 800d3fe:	9b07      	ldr	r3, [sp, #28]
 800d400:	3307      	adds	r3, #7
 800d402:	4393      	bics	r3, r2
 800d404:	3308      	adds	r3, #8
 800d406:	9307      	str	r3, [sp, #28]
 800d408:	6963      	ldr	r3, [r4, #20]
 800d40a:	9a04      	ldr	r2, [sp, #16]
 800d40c:	189b      	adds	r3, r3, r2
 800d40e:	6163      	str	r3, [r4, #20]
 800d410:	e765      	b.n	800d2de <_svfiprintf_r+0x46>
 800d412:	4343      	muls	r3, r0
 800d414:	0035      	movs	r5, r6
 800d416:	2101      	movs	r1, #1
 800d418:	189b      	adds	r3, r3, r2
 800d41a:	e7a6      	b.n	800d36a <_svfiprintf_r+0xd2>
 800d41c:	2301      	movs	r3, #1
 800d41e:	425b      	negs	r3, r3
 800d420:	e7d0      	b.n	800d3c4 <_svfiprintf_r+0x12c>
 800d422:	2300      	movs	r3, #0
 800d424:	200a      	movs	r0, #10
 800d426:	001a      	movs	r2, r3
 800d428:	3501      	adds	r5, #1
 800d42a:	6063      	str	r3, [r4, #4]
 800d42c:	7829      	ldrb	r1, [r5, #0]
 800d42e:	1c6e      	adds	r6, r5, #1
 800d430:	3930      	subs	r1, #48	; 0x30
 800d432:	2909      	cmp	r1, #9
 800d434:	d903      	bls.n	800d43e <_svfiprintf_r+0x1a6>
 800d436:	2b00      	cmp	r3, #0
 800d438:	d0c5      	beq.n	800d3c6 <_svfiprintf_r+0x12e>
 800d43a:	9209      	str	r2, [sp, #36]	; 0x24
 800d43c:	e7c3      	b.n	800d3c6 <_svfiprintf_r+0x12e>
 800d43e:	4342      	muls	r2, r0
 800d440:	0035      	movs	r5, r6
 800d442:	2301      	movs	r3, #1
 800d444:	1852      	adds	r2, r2, r1
 800d446:	e7f1      	b.n	800d42c <_svfiprintf_r+0x194>
 800d448:	ab07      	add	r3, sp, #28
 800d44a:	9300      	str	r3, [sp, #0]
 800d44c:	003a      	movs	r2, r7
 800d44e:	0021      	movs	r1, r4
 800d450:	4b10      	ldr	r3, [pc, #64]	; (800d494 <_svfiprintf_r+0x1fc>)
 800d452:	9803      	ldr	r0, [sp, #12]
 800d454:	e000      	b.n	800d458 <_svfiprintf_r+0x1c0>
 800d456:	bf00      	nop
 800d458:	9004      	str	r0, [sp, #16]
 800d45a:	9b04      	ldr	r3, [sp, #16]
 800d45c:	3301      	adds	r3, #1
 800d45e:	d1d3      	bne.n	800d408 <_svfiprintf_r+0x170>
 800d460:	89bb      	ldrh	r3, [r7, #12]
 800d462:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d464:	065b      	lsls	r3, r3, #25
 800d466:	d400      	bmi.n	800d46a <_svfiprintf_r+0x1d2>
 800d468:	e72d      	b.n	800d2c6 <_svfiprintf_r+0x2e>
 800d46a:	2001      	movs	r0, #1
 800d46c:	4240      	negs	r0, r0
 800d46e:	e72a      	b.n	800d2c6 <_svfiprintf_r+0x2e>
 800d470:	ab07      	add	r3, sp, #28
 800d472:	9300      	str	r3, [sp, #0]
 800d474:	003a      	movs	r2, r7
 800d476:	0021      	movs	r1, r4
 800d478:	4b06      	ldr	r3, [pc, #24]	; (800d494 <_svfiprintf_r+0x1fc>)
 800d47a:	9803      	ldr	r0, [sp, #12]
 800d47c:	f000 f87c 	bl	800d578 <_printf_i>
 800d480:	e7ea      	b.n	800d458 <_svfiprintf_r+0x1c0>
 800d482:	46c0      	nop			; (mov r8, r8)
 800d484:	0800da8c 	.word	0x0800da8c
 800d488:	0800da92 	.word	0x0800da92
 800d48c:	0800da96 	.word	0x0800da96
 800d490:	00000000 	.word	0x00000000
 800d494:	0800d1d5 	.word	0x0800d1d5

0800d498 <_printf_common>:
 800d498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d49a:	0015      	movs	r5, r2
 800d49c:	9301      	str	r3, [sp, #4]
 800d49e:	688a      	ldr	r2, [r1, #8]
 800d4a0:	690b      	ldr	r3, [r1, #16]
 800d4a2:	000c      	movs	r4, r1
 800d4a4:	9000      	str	r0, [sp, #0]
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	da00      	bge.n	800d4ac <_printf_common+0x14>
 800d4aa:	0013      	movs	r3, r2
 800d4ac:	0022      	movs	r2, r4
 800d4ae:	602b      	str	r3, [r5, #0]
 800d4b0:	3243      	adds	r2, #67	; 0x43
 800d4b2:	7812      	ldrb	r2, [r2, #0]
 800d4b4:	2a00      	cmp	r2, #0
 800d4b6:	d001      	beq.n	800d4bc <_printf_common+0x24>
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	602b      	str	r3, [r5, #0]
 800d4bc:	6823      	ldr	r3, [r4, #0]
 800d4be:	069b      	lsls	r3, r3, #26
 800d4c0:	d502      	bpl.n	800d4c8 <_printf_common+0x30>
 800d4c2:	682b      	ldr	r3, [r5, #0]
 800d4c4:	3302      	adds	r3, #2
 800d4c6:	602b      	str	r3, [r5, #0]
 800d4c8:	6822      	ldr	r2, [r4, #0]
 800d4ca:	2306      	movs	r3, #6
 800d4cc:	0017      	movs	r7, r2
 800d4ce:	401f      	ands	r7, r3
 800d4d0:	421a      	tst	r2, r3
 800d4d2:	d027      	beq.n	800d524 <_printf_common+0x8c>
 800d4d4:	0023      	movs	r3, r4
 800d4d6:	3343      	adds	r3, #67	; 0x43
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	1e5a      	subs	r2, r3, #1
 800d4dc:	4193      	sbcs	r3, r2
 800d4de:	6822      	ldr	r2, [r4, #0]
 800d4e0:	0692      	lsls	r2, r2, #26
 800d4e2:	d430      	bmi.n	800d546 <_printf_common+0xae>
 800d4e4:	0022      	movs	r2, r4
 800d4e6:	9901      	ldr	r1, [sp, #4]
 800d4e8:	9800      	ldr	r0, [sp, #0]
 800d4ea:	9e08      	ldr	r6, [sp, #32]
 800d4ec:	3243      	adds	r2, #67	; 0x43
 800d4ee:	47b0      	blx	r6
 800d4f0:	1c43      	adds	r3, r0, #1
 800d4f2:	d025      	beq.n	800d540 <_printf_common+0xa8>
 800d4f4:	2306      	movs	r3, #6
 800d4f6:	6820      	ldr	r0, [r4, #0]
 800d4f8:	682a      	ldr	r2, [r5, #0]
 800d4fa:	68e1      	ldr	r1, [r4, #12]
 800d4fc:	2500      	movs	r5, #0
 800d4fe:	4003      	ands	r3, r0
 800d500:	2b04      	cmp	r3, #4
 800d502:	d103      	bne.n	800d50c <_printf_common+0x74>
 800d504:	1a8d      	subs	r5, r1, r2
 800d506:	43eb      	mvns	r3, r5
 800d508:	17db      	asrs	r3, r3, #31
 800d50a:	401d      	ands	r5, r3
 800d50c:	68a3      	ldr	r3, [r4, #8]
 800d50e:	6922      	ldr	r2, [r4, #16]
 800d510:	4293      	cmp	r3, r2
 800d512:	dd01      	ble.n	800d518 <_printf_common+0x80>
 800d514:	1a9b      	subs	r3, r3, r2
 800d516:	18ed      	adds	r5, r5, r3
 800d518:	2700      	movs	r7, #0
 800d51a:	42bd      	cmp	r5, r7
 800d51c:	d120      	bne.n	800d560 <_printf_common+0xc8>
 800d51e:	2000      	movs	r0, #0
 800d520:	e010      	b.n	800d544 <_printf_common+0xac>
 800d522:	3701      	adds	r7, #1
 800d524:	68e3      	ldr	r3, [r4, #12]
 800d526:	682a      	ldr	r2, [r5, #0]
 800d528:	1a9b      	subs	r3, r3, r2
 800d52a:	42bb      	cmp	r3, r7
 800d52c:	ddd2      	ble.n	800d4d4 <_printf_common+0x3c>
 800d52e:	0022      	movs	r2, r4
 800d530:	2301      	movs	r3, #1
 800d532:	9901      	ldr	r1, [sp, #4]
 800d534:	9800      	ldr	r0, [sp, #0]
 800d536:	9e08      	ldr	r6, [sp, #32]
 800d538:	3219      	adds	r2, #25
 800d53a:	47b0      	blx	r6
 800d53c:	1c43      	adds	r3, r0, #1
 800d53e:	d1f0      	bne.n	800d522 <_printf_common+0x8a>
 800d540:	2001      	movs	r0, #1
 800d542:	4240      	negs	r0, r0
 800d544:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d546:	2030      	movs	r0, #48	; 0x30
 800d548:	18e1      	adds	r1, r4, r3
 800d54a:	3143      	adds	r1, #67	; 0x43
 800d54c:	7008      	strb	r0, [r1, #0]
 800d54e:	0021      	movs	r1, r4
 800d550:	1c5a      	adds	r2, r3, #1
 800d552:	3145      	adds	r1, #69	; 0x45
 800d554:	7809      	ldrb	r1, [r1, #0]
 800d556:	18a2      	adds	r2, r4, r2
 800d558:	3243      	adds	r2, #67	; 0x43
 800d55a:	3302      	adds	r3, #2
 800d55c:	7011      	strb	r1, [r2, #0]
 800d55e:	e7c1      	b.n	800d4e4 <_printf_common+0x4c>
 800d560:	0022      	movs	r2, r4
 800d562:	2301      	movs	r3, #1
 800d564:	9901      	ldr	r1, [sp, #4]
 800d566:	9800      	ldr	r0, [sp, #0]
 800d568:	9e08      	ldr	r6, [sp, #32]
 800d56a:	321a      	adds	r2, #26
 800d56c:	47b0      	blx	r6
 800d56e:	1c43      	adds	r3, r0, #1
 800d570:	d0e6      	beq.n	800d540 <_printf_common+0xa8>
 800d572:	3701      	adds	r7, #1
 800d574:	e7d1      	b.n	800d51a <_printf_common+0x82>
	...

0800d578 <_printf_i>:
 800d578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d57a:	b08b      	sub	sp, #44	; 0x2c
 800d57c:	9206      	str	r2, [sp, #24]
 800d57e:	000a      	movs	r2, r1
 800d580:	3243      	adds	r2, #67	; 0x43
 800d582:	9307      	str	r3, [sp, #28]
 800d584:	9005      	str	r0, [sp, #20]
 800d586:	9204      	str	r2, [sp, #16]
 800d588:	7e0a      	ldrb	r2, [r1, #24]
 800d58a:	000c      	movs	r4, r1
 800d58c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d58e:	2a78      	cmp	r2, #120	; 0x78
 800d590:	d806      	bhi.n	800d5a0 <_printf_i+0x28>
 800d592:	2a62      	cmp	r2, #98	; 0x62
 800d594:	d808      	bhi.n	800d5a8 <_printf_i+0x30>
 800d596:	2a00      	cmp	r2, #0
 800d598:	d100      	bne.n	800d59c <_printf_i+0x24>
 800d59a:	e0c0      	b.n	800d71e <_printf_i+0x1a6>
 800d59c:	2a58      	cmp	r2, #88	; 0x58
 800d59e:	d052      	beq.n	800d646 <_printf_i+0xce>
 800d5a0:	0026      	movs	r6, r4
 800d5a2:	3642      	adds	r6, #66	; 0x42
 800d5a4:	7032      	strb	r2, [r6, #0]
 800d5a6:	e022      	b.n	800d5ee <_printf_i+0x76>
 800d5a8:	0010      	movs	r0, r2
 800d5aa:	3863      	subs	r0, #99	; 0x63
 800d5ac:	2815      	cmp	r0, #21
 800d5ae:	d8f7      	bhi.n	800d5a0 <_printf_i+0x28>
 800d5b0:	f7f2 fdb2 	bl	8000118 <__gnu_thumb1_case_shi>
 800d5b4:	001f0016 	.word	0x001f0016
 800d5b8:	fff6fff6 	.word	0xfff6fff6
 800d5bc:	fff6fff6 	.word	0xfff6fff6
 800d5c0:	fff6001f 	.word	0xfff6001f
 800d5c4:	fff6fff6 	.word	0xfff6fff6
 800d5c8:	00a8fff6 	.word	0x00a8fff6
 800d5cc:	009a0036 	.word	0x009a0036
 800d5d0:	fff6fff6 	.word	0xfff6fff6
 800d5d4:	fff600b9 	.word	0xfff600b9
 800d5d8:	fff60036 	.word	0xfff60036
 800d5dc:	009efff6 	.word	0x009efff6
 800d5e0:	0026      	movs	r6, r4
 800d5e2:	681a      	ldr	r2, [r3, #0]
 800d5e4:	3642      	adds	r6, #66	; 0x42
 800d5e6:	1d11      	adds	r1, r2, #4
 800d5e8:	6019      	str	r1, [r3, #0]
 800d5ea:	6813      	ldr	r3, [r2, #0]
 800d5ec:	7033      	strb	r3, [r6, #0]
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	e0a7      	b.n	800d742 <_printf_i+0x1ca>
 800d5f2:	6808      	ldr	r0, [r1, #0]
 800d5f4:	6819      	ldr	r1, [r3, #0]
 800d5f6:	1d0a      	adds	r2, r1, #4
 800d5f8:	0605      	lsls	r5, r0, #24
 800d5fa:	d50b      	bpl.n	800d614 <_printf_i+0x9c>
 800d5fc:	680d      	ldr	r5, [r1, #0]
 800d5fe:	601a      	str	r2, [r3, #0]
 800d600:	2d00      	cmp	r5, #0
 800d602:	da03      	bge.n	800d60c <_printf_i+0x94>
 800d604:	232d      	movs	r3, #45	; 0x2d
 800d606:	9a04      	ldr	r2, [sp, #16]
 800d608:	426d      	negs	r5, r5
 800d60a:	7013      	strb	r3, [r2, #0]
 800d60c:	4b61      	ldr	r3, [pc, #388]	; (800d794 <_printf_i+0x21c>)
 800d60e:	270a      	movs	r7, #10
 800d610:	9303      	str	r3, [sp, #12]
 800d612:	e032      	b.n	800d67a <_printf_i+0x102>
 800d614:	680d      	ldr	r5, [r1, #0]
 800d616:	601a      	str	r2, [r3, #0]
 800d618:	0641      	lsls	r1, r0, #25
 800d61a:	d5f1      	bpl.n	800d600 <_printf_i+0x88>
 800d61c:	b22d      	sxth	r5, r5
 800d61e:	e7ef      	b.n	800d600 <_printf_i+0x88>
 800d620:	680d      	ldr	r5, [r1, #0]
 800d622:	6819      	ldr	r1, [r3, #0]
 800d624:	1d08      	adds	r0, r1, #4
 800d626:	6018      	str	r0, [r3, #0]
 800d628:	062e      	lsls	r6, r5, #24
 800d62a:	d501      	bpl.n	800d630 <_printf_i+0xb8>
 800d62c:	680d      	ldr	r5, [r1, #0]
 800d62e:	e003      	b.n	800d638 <_printf_i+0xc0>
 800d630:	066d      	lsls	r5, r5, #25
 800d632:	d5fb      	bpl.n	800d62c <_printf_i+0xb4>
 800d634:	680d      	ldr	r5, [r1, #0]
 800d636:	b2ad      	uxth	r5, r5
 800d638:	4b56      	ldr	r3, [pc, #344]	; (800d794 <_printf_i+0x21c>)
 800d63a:	270a      	movs	r7, #10
 800d63c:	9303      	str	r3, [sp, #12]
 800d63e:	2a6f      	cmp	r2, #111	; 0x6f
 800d640:	d117      	bne.n	800d672 <_printf_i+0xfa>
 800d642:	2708      	movs	r7, #8
 800d644:	e015      	b.n	800d672 <_printf_i+0xfa>
 800d646:	3145      	adds	r1, #69	; 0x45
 800d648:	700a      	strb	r2, [r1, #0]
 800d64a:	4a52      	ldr	r2, [pc, #328]	; (800d794 <_printf_i+0x21c>)
 800d64c:	9203      	str	r2, [sp, #12]
 800d64e:	681a      	ldr	r2, [r3, #0]
 800d650:	6821      	ldr	r1, [r4, #0]
 800d652:	ca20      	ldmia	r2!, {r5}
 800d654:	601a      	str	r2, [r3, #0]
 800d656:	0608      	lsls	r0, r1, #24
 800d658:	d550      	bpl.n	800d6fc <_printf_i+0x184>
 800d65a:	07cb      	lsls	r3, r1, #31
 800d65c:	d502      	bpl.n	800d664 <_printf_i+0xec>
 800d65e:	2320      	movs	r3, #32
 800d660:	4319      	orrs	r1, r3
 800d662:	6021      	str	r1, [r4, #0]
 800d664:	2710      	movs	r7, #16
 800d666:	2d00      	cmp	r5, #0
 800d668:	d103      	bne.n	800d672 <_printf_i+0xfa>
 800d66a:	2320      	movs	r3, #32
 800d66c:	6822      	ldr	r2, [r4, #0]
 800d66e:	439a      	bics	r2, r3
 800d670:	6022      	str	r2, [r4, #0]
 800d672:	0023      	movs	r3, r4
 800d674:	2200      	movs	r2, #0
 800d676:	3343      	adds	r3, #67	; 0x43
 800d678:	701a      	strb	r2, [r3, #0]
 800d67a:	6863      	ldr	r3, [r4, #4]
 800d67c:	60a3      	str	r3, [r4, #8]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	db03      	blt.n	800d68a <_printf_i+0x112>
 800d682:	2204      	movs	r2, #4
 800d684:	6821      	ldr	r1, [r4, #0]
 800d686:	4391      	bics	r1, r2
 800d688:	6021      	str	r1, [r4, #0]
 800d68a:	2d00      	cmp	r5, #0
 800d68c:	d102      	bne.n	800d694 <_printf_i+0x11c>
 800d68e:	9e04      	ldr	r6, [sp, #16]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d00c      	beq.n	800d6ae <_printf_i+0x136>
 800d694:	9e04      	ldr	r6, [sp, #16]
 800d696:	0028      	movs	r0, r5
 800d698:	0039      	movs	r1, r7
 800d69a:	f7f2 fdcd 	bl	8000238 <__aeabi_uidivmod>
 800d69e:	9b03      	ldr	r3, [sp, #12]
 800d6a0:	3e01      	subs	r6, #1
 800d6a2:	5c5b      	ldrb	r3, [r3, r1]
 800d6a4:	7033      	strb	r3, [r6, #0]
 800d6a6:	002b      	movs	r3, r5
 800d6a8:	0005      	movs	r5, r0
 800d6aa:	429f      	cmp	r7, r3
 800d6ac:	d9f3      	bls.n	800d696 <_printf_i+0x11e>
 800d6ae:	2f08      	cmp	r7, #8
 800d6b0:	d109      	bne.n	800d6c6 <_printf_i+0x14e>
 800d6b2:	6823      	ldr	r3, [r4, #0]
 800d6b4:	07db      	lsls	r3, r3, #31
 800d6b6:	d506      	bpl.n	800d6c6 <_printf_i+0x14e>
 800d6b8:	6863      	ldr	r3, [r4, #4]
 800d6ba:	6922      	ldr	r2, [r4, #16]
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	dc02      	bgt.n	800d6c6 <_printf_i+0x14e>
 800d6c0:	2330      	movs	r3, #48	; 0x30
 800d6c2:	3e01      	subs	r6, #1
 800d6c4:	7033      	strb	r3, [r6, #0]
 800d6c6:	9b04      	ldr	r3, [sp, #16]
 800d6c8:	1b9b      	subs	r3, r3, r6
 800d6ca:	6123      	str	r3, [r4, #16]
 800d6cc:	9b07      	ldr	r3, [sp, #28]
 800d6ce:	0021      	movs	r1, r4
 800d6d0:	9300      	str	r3, [sp, #0]
 800d6d2:	9805      	ldr	r0, [sp, #20]
 800d6d4:	9b06      	ldr	r3, [sp, #24]
 800d6d6:	aa09      	add	r2, sp, #36	; 0x24
 800d6d8:	f7ff fede 	bl	800d498 <_printf_common>
 800d6dc:	1c43      	adds	r3, r0, #1
 800d6de:	d135      	bne.n	800d74c <_printf_i+0x1d4>
 800d6e0:	2001      	movs	r0, #1
 800d6e2:	4240      	negs	r0, r0
 800d6e4:	b00b      	add	sp, #44	; 0x2c
 800d6e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6e8:	2220      	movs	r2, #32
 800d6ea:	6809      	ldr	r1, [r1, #0]
 800d6ec:	430a      	orrs	r2, r1
 800d6ee:	6022      	str	r2, [r4, #0]
 800d6f0:	0022      	movs	r2, r4
 800d6f2:	2178      	movs	r1, #120	; 0x78
 800d6f4:	3245      	adds	r2, #69	; 0x45
 800d6f6:	7011      	strb	r1, [r2, #0]
 800d6f8:	4a27      	ldr	r2, [pc, #156]	; (800d798 <_printf_i+0x220>)
 800d6fa:	e7a7      	b.n	800d64c <_printf_i+0xd4>
 800d6fc:	0648      	lsls	r0, r1, #25
 800d6fe:	d5ac      	bpl.n	800d65a <_printf_i+0xe2>
 800d700:	b2ad      	uxth	r5, r5
 800d702:	e7aa      	b.n	800d65a <_printf_i+0xe2>
 800d704:	681a      	ldr	r2, [r3, #0]
 800d706:	680d      	ldr	r5, [r1, #0]
 800d708:	1d10      	adds	r0, r2, #4
 800d70a:	6949      	ldr	r1, [r1, #20]
 800d70c:	6018      	str	r0, [r3, #0]
 800d70e:	6813      	ldr	r3, [r2, #0]
 800d710:	062e      	lsls	r6, r5, #24
 800d712:	d501      	bpl.n	800d718 <_printf_i+0x1a0>
 800d714:	6019      	str	r1, [r3, #0]
 800d716:	e002      	b.n	800d71e <_printf_i+0x1a6>
 800d718:	066d      	lsls	r5, r5, #25
 800d71a:	d5fb      	bpl.n	800d714 <_printf_i+0x19c>
 800d71c:	8019      	strh	r1, [r3, #0]
 800d71e:	2300      	movs	r3, #0
 800d720:	9e04      	ldr	r6, [sp, #16]
 800d722:	6123      	str	r3, [r4, #16]
 800d724:	e7d2      	b.n	800d6cc <_printf_i+0x154>
 800d726:	681a      	ldr	r2, [r3, #0]
 800d728:	1d11      	adds	r1, r2, #4
 800d72a:	6019      	str	r1, [r3, #0]
 800d72c:	6816      	ldr	r6, [r2, #0]
 800d72e:	2100      	movs	r1, #0
 800d730:	0030      	movs	r0, r6
 800d732:	6862      	ldr	r2, [r4, #4]
 800d734:	f000 f834 	bl	800d7a0 <memchr>
 800d738:	2800      	cmp	r0, #0
 800d73a:	d001      	beq.n	800d740 <_printf_i+0x1c8>
 800d73c:	1b80      	subs	r0, r0, r6
 800d73e:	6060      	str	r0, [r4, #4]
 800d740:	6863      	ldr	r3, [r4, #4]
 800d742:	6123      	str	r3, [r4, #16]
 800d744:	2300      	movs	r3, #0
 800d746:	9a04      	ldr	r2, [sp, #16]
 800d748:	7013      	strb	r3, [r2, #0]
 800d74a:	e7bf      	b.n	800d6cc <_printf_i+0x154>
 800d74c:	6923      	ldr	r3, [r4, #16]
 800d74e:	0032      	movs	r2, r6
 800d750:	9906      	ldr	r1, [sp, #24]
 800d752:	9805      	ldr	r0, [sp, #20]
 800d754:	9d07      	ldr	r5, [sp, #28]
 800d756:	47a8      	blx	r5
 800d758:	1c43      	adds	r3, r0, #1
 800d75a:	d0c1      	beq.n	800d6e0 <_printf_i+0x168>
 800d75c:	6823      	ldr	r3, [r4, #0]
 800d75e:	079b      	lsls	r3, r3, #30
 800d760:	d415      	bmi.n	800d78e <_printf_i+0x216>
 800d762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d764:	68e0      	ldr	r0, [r4, #12]
 800d766:	4298      	cmp	r0, r3
 800d768:	dabc      	bge.n	800d6e4 <_printf_i+0x16c>
 800d76a:	0018      	movs	r0, r3
 800d76c:	e7ba      	b.n	800d6e4 <_printf_i+0x16c>
 800d76e:	0022      	movs	r2, r4
 800d770:	2301      	movs	r3, #1
 800d772:	9906      	ldr	r1, [sp, #24]
 800d774:	9805      	ldr	r0, [sp, #20]
 800d776:	9e07      	ldr	r6, [sp, #28]
 800d778:	3219      	adds	r2, #25
 800d77a:	47b0      	blx	r6
 800d77c:	1c43      	adds	r3, r0, #1
 800d77e:	d0af      	beq.n	800d6e0 <_printf_i+0x168>
 800d780:	3501      	adds	r5, #1
 800d782:	68e3      	ldr	r3, [r4, #12]
 800d784:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d786:	1a9b      	subs	r3, r3, r2
 800d788:	42ab      	cmp	r3, r5
 800d78a:	dcf0      	bgt.n	800d76e <_printf_i+0x1f6>
 800d78c:	e7e9      	b.n	800d762 <_printf_i+0x1ea>
 800d78e:	2500      	movs	r5, #0
 800d790:	e7f7      	b.n	800d782 <_printf_i+0x20a>
 800d792:	46c0      	nop			; (mov r8, r8)
 800d794:	0800da9d 	.word	0x0800da9d
 800d798:	0800daae 	.word	0x0800daae

0800d79c <__retarget_lock_acquire_recursive>:
 800d79c:	4770      	bx	lr

0800d79e <__retarget_lock_release_recursive>:
 800d79e:	4770      	bx	lr

0800d7a0 <memchr>:
 800d7a0:	b2c9      	uxtb	r1, r1
 800d7a2:	1882      	adds	r2, r0, r2
 800d7a4:	4290      	cmp	r0, r2
 800d7a6:	d101      	bne.n	800d7ac <memchr+0xc>
 800d7a8:	2000      	movs	r0, #0
 800d7aa:	4770      	bx	lr
 800d7ac:	7803      	ldrb	r3, [r0, #0]
 800d7ae:	428b      	cmp	r3, r1
 800d7b0:	d0fb      	beq.n	800d7aa <memchr+0xa>
 800d7b2:	3001      	adds	r0, #1
 800d7b4:	e7f6      	b.n	800d7a4 <memchr+0x4>

0800d7b6 <memmove>:
 800d7b6:	b510      	push	{r4, lr}
 800d7b8:	4288      	cmp	r0, r1
 800d7ba:	d902      	bls.n	800d7c2 <memmove+0xc>
 800d7bc:	188b      	adds	r3, r1, r2
 800d7be:	4298      	cmp	r0, r3
 800d7c0:	d303      	bcc.n	800d7ca <memmove+0x14>
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	e007      	b.n	800d7d6 <memmove+0x20>
 800d7c6:	5c8b      	ldrb	r3, [r1, r2]
 800d7c8:	5483      	strb	r3, [r0, r2]
 800d7ca:	3a01      	subs	r2, #1
 800d7cc:	d2fb      	bcs.n	800d7c6 <memmove+0x10>
 800d7ce:	bd10      	pop	{r4, pc}
 800d7d0:	5ccc      	ldrb	r4, [r1, r3]
 800d7d2:	54c4      	strb	r4, [r0, r3]
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d1fa      	bne.n	800d7d0 <memmove+0x1a>
 800d7da:	e7f8      	b.n	800d7ce <memmove+0x18>

0800d7dc <_realloc_r>:
 800d7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7de:	0007      	movs	r7, r0
 800d7e0:	000d      	movs	r5, r1
 800d7e2:	0016      	movs	r6, r2
 800d7e4:	2900      	cmp	r1, #0
 800d7e6:	d105      	bne.n	800d7f4 <_realloc_r+0x18>
 800d7e8:	0011      	movs	r1, r2
 800d7ea:	f7ff fc53 	bl	800d094 <_malloc_r>
 800d7ee:	0004      	movs	r4, r0
 800d7f0:	0020      	movs	r0, r4
 800d7f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7f4:	2a00      	cmp	r2, #0
 800d7f6:	d103      	bne.n	800d800 <_realloc_r+0x24>
 800d7f8:	f7ff fc02 	bl	800d000 <_free_r>
 800d7fc:	0034      	movs	r4, r6
 800d7fe:	e7f7      	b.n	800d7f0 <_realloc_r+0x14>
 800d800:	f000 f812 	bl	800d828 <_malloc_usable_size_r>
 800d804:	002c      	movs	r4, r5
 800d806:	42b0      	cmp	r0, r6
 800d808:	d2f2      	bcs.n	800d7f0 <_realloc_r+0x14>
 800d80a:	0031      	movs	r1, r6
 800d80c:	0038      	movs	r0, r7
 800d80e:	f7ff fc41 	bl	800d094 <_malloc_r>
 800d812:	1e04      	subs	r4, r0, #0
 800d814:	d0ec      	beq.n	800d7f0 <_realloc_r+0x14>
 800d816:	0029      	movs	r1, r5
 800d818:	0032      	movs	r2, r6
 800d81a:	f7ff fbdf 	bl	800cfdc <memcpy>
 800d81e:	0029      	movs	r1, r5
 800d820:	0038      	movs	r0, r7
 800d822:	f7ff fbed 	bl	800d000 <_free_r>
 800d826:	e7e3      	b.n	800d7f0 <_realloc_r+0x14>

0800d828 <_malloc_usable_size_r>:
 800d828:	1f0b      	subs	r3, r1, #4
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	1f18      	subs	r0, r3, #4
 800d82e:	2b00      	cmp	r3, #0
 800d830:	da01      	bge.n	800d836 <_malloc_usable_size_r+0xe>
 800d832:	580b      	ldr	r3, [r1, r0]
 800d834:	18c0      	adds	r0, r0, r3
 800d836:	4770      	bx	lr

0800d838 <_init>:
 800d838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d83a:	46c0      	nop			; (mov r8, r8)
 800d83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d83e:	bc08      	pop	{r3}
 800d840:	469e      	mov	lr, r3
 800d842:	4770      	bx	lr

0800d844 <_fini>:
 800d844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d846:	46c0      	nop			; (mov r8, r8)
 800d848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d84a:	bc08      	pop	{r3}
 800d84c:	469e      	mov	lr, r3
 800d84e:	4770      	bx	lr
