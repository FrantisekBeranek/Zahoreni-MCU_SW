
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df48  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  0800e008  0800e008  0001e008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e37c  0800e37c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e37c  0800e37c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e37c  0800e37c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e37c  0800e37c  0001e37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e380  0800e380  0001e380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013fc  200001e0  0800e564  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015dc  0800e564  000215dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e67b  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004922  00000000  00000000  0003e883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  000431a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015a0  00000000  00000000  00044930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000202b2  00000000  00000000  00045ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020b84  00000000  00000000  00066182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4661  00000000  00000000  00086d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012b367  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005788  00000000  00000000  0012b3b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800dff0 	.word	0x0800dff0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800dff0 	.word	0x0800dff0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <comHandler>:
 *
 * Při přijmutí instrukce nedochází k zpracování, ale pouze k nastavení adekvátního flagu.
 * Vykonání instrukce musí být zařízeno v jiné části hlavního programu.
 */
void comHandler(void)
{
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	46c6      	mov	lr, r8
 800041c:	b500      	push	{lr}
 800041e:	b0a6      	sub	sp, #152	; 0x98
 8000420:	af00      	add	r7, sp, #0
	//___Ošetření plného bufferu___//
	if(USB_Rx_Buffer->status == BUFFER_FULL)
 8000422:	4bde      	ldr	r3, [pc, #888]	; (800079c <comHandler+0x384>)
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	7d1b      	ldrb	r3, [r3, #20]
 8000428:	2b02      	cmp	r3, #2
 800042a:	d109      	bne.n	8000440 <comHandler+0x28>
	{
		flags.data_received = 0;
 800042c:	4bdc      	ldr	r3, [pc, #880]	; (80007a0 <comHandler+0x388>)
 800042e:	7a1a      	ldrb	r2, [r3, #8]
 8000430:	2101      	movs	r1, #1
 8000432:	438a      	bics	r2, r1
 8000434:	721a      	strb	r2, [r3, #8]
		clearBuffer(USB_Rx_Buffer);
 8000436:	4bd9      	ldr	r3, [pc, #868]	; (800079c <comHandler+0x384>)
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	0018      	movs	r0, r3
 800043c:	f002 f850 	bl	80024e0 <clearBuffer>
	}

	//___Příjem dat___//
	if(flags.data_received)
 8000440:	4bd7      	ldr	r3, [pc, #860]	; (80007a0 <comHandler+0x388>)
 8000442:	7a1b      	ldrb	r3, [r3, #8]
 8000444:	2201      	movs	r2, #1
 8000446:	4013      	ands	r3, r2
 8000448:	b2db      	uxtb	r3, r3
 800044a:	2b00      	cmp	r3, #0
 800044c:	d100      	bne.n	8000450 <comHandler+0x38>
 800044e:	e0d3      	b.n	80005f8 <comHandler+0x1e0>
	{
		int start = 0;	//flag o nalezení počátku paketu
 8000450:	2300      	movs	r3, #0
 8000452:	2284      	movs	r2, #132	; 0x84
 8000454:	18ba      	adds	r2, r7, r2
 8000456:	6013      	str	r3, [r2, #0]

		for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 8000458:	2300      	movs	r3, #0
 800045a:	2288      	movs	r2, #136	; 0x88
 800045c:	18ba      	adds	r2, r7, r2
 800045e:	6013      	str	r3, [r2, #0]
 8000460:	e04b      	b.n	80004fa <comHandler+0xe2>
		{
			//Přečti znaky na pozici i a i+1
			char tmp1, tmp2;
			at(USB_Rx_Buffer, i, &tmp1);
 8000462:	4bce      	ldr	r3, [pc, #824]	; (800079c <comHandler+0x384>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	2457      	movs	r4, #87	; 0x57
 8000468:	2118      	movs	r1, #24
 800046a:	1860      	adds	r0, r4, r1
 800046c:	19c2      	adds	r2, r0, r7
 800046e:	2088      	movs	r0, #136	; 0x88
 8000470:	1838      	adds	r0, r7, r0
 8000472:	6801      	ldr	r1, [r0, #0]
 8000474:	0018      	movs	r0, r3
 8000476:	f002 f8db 	bl	8002630 <at>
			at(USB_Rx_Buffer, i+1, &tmp2);
 800047a:	4bc8      	ldr	r3, [pc, #800]	; (800079c <comHandler+0x384>)
 800047c:	6818      	ldr	r0, [r3, #0]
 800047e:	2388      	movs	r3, #136	; 0x88
 8000480:	18fb      	adds	r3, r7, r3
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	3301      	adds	r3, #1
 8000486:	2256      	movs	r2, #86	; 0x56
 8000488:	2118      	movs	r1, #24
 800048a:	1851      	adds	r1, r2, r1
 800048c:	19ca      	adds	r2, r1, r7
 800048e:	0019      	movs	r1, r3
 8000490:	f002 f8ce 	bl	8002630 <at>

			if(tmp1 == '>' && tmp1 == '>')	//začátek paketu
 8000494:	2218      	movs	r2, #24
 8000496:	18a3      	adds	r3, r4, r2
 8000498:	19db      	adds	r3, r3, r7
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b3e      	cmp	r3, #62	; 0x3e
 800049e:	d126      	bne.n	80004ee <comHandler+0xd6>
 80004a0:	18a3      	adds	r3, r4, r2
 80004a2:	19db      	adds	r3, r3, r7
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b3e      	cmp	r3, #62	; 0x3e
 80004a8:	d121      	bne.n	80004ee <comHandler+0xd6>
			{
				for(int y = 0; y < i; y++)	//vymazání obsahu buuferu před začátkem paketu (neplatná data)
 80004aa:	2300      	movs	r3, #0
 80004ac:	228c      	movs	r2, #140	; 0x8c
 80004ae:	18ba      	adds	r2, r7, r2
 80004b0:	6013      	str	r3, [r2, #0]
 80004b2:	e00f      	b.n	80004d4 <comHandler+0xbc>
				{
					char tmp;
					pop(USB_Rx_Buffer, &tmp);
 80004b4:	4bb9      	ldr	r3, [pc, #740]	; (800079c <comHandler+0x384>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2255      	movs	r2, #85	; 0x55
 80004ba:	2118      	movs	r1, #24
 80004bc:	1852      	adds	r2, r2, r1
 80004be:	19d2      	adds	r2, r2, r7
 80004c0:	0011      	movs	r1, r2
 80004c2:	0018      	movs	r0, r3
 80004c4:	f002 f881 	bl	80025ca <pop>
				for(int y = 0; y < i; y++)	//vymazání obsahu buuferu před začátkem paketu (neplatná data)
 80004c8:	228c      	movs	r2, #140	; 0x8c
 80004ca:	18bb      	adds	r3, r7, r2
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	3301      	adds	r3, #1
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	6013      	str	r3, [r2, #0]
 80004d4:	238c      	movs	r3, #140	; 0x8c
 80004d6:	18fb      	adds	r3, r7, r3
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	2388      	movs	r3, #136	; 0x88
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	dbe7      	blt.n	80004b4 <comHandler+0x9c>
				}
				start = 1;	//nastav flag o nalezení počátku
 80004e4:	2301      	movs	r3, #1
 80004e6:	2284      	movs	r2, #132	; 0x84
 80004e8:	18ba      	adds	r2, r7, r2
 80004ea:	6013      	str	r3, [r2, #0]
 80004ec:	e00d      	b.n	800050a <comHandler+0xf2>
		for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 80004ee:	2288      	movs	r2, #136	; 0x88
 80004f0:	18bb      	adds	r3, r7, r2
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	3301      	adds	r3, #1
 80004f6:	18ba      	adds	r2, r7, r2
 80004f8:	6013      	str	r3, [r2, #0]
 80004fa:	4ba8      	ldr	r3, [pc, #672]	; (800079c <comHandler+0x384>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	2288      	movs	r2, #136	; 0x88
 8000502:	18ba      	adds	r2, r7, r2
 8000504:	6812      	ldr	r2, [r2, #0]
 8000506:	429a      	cmp	r2, r3
 8000508:	dbab      	blt.n	8000462 <comHandler+0x4a>
				break;
			}
		}

		if(start)	//počátek byl nalezen
 800050a:	2384      	movs	r3, #132	; 0x84
 800050c:	18fb      	adds	r3, r7, r3
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d06c      	beq.n	80005ee <comHandler+0x1d6>
		{
			for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 8000514:	2300      	movs	r3, #0
 8000516:	2290      	movs	r2, #144	; 0x90
 8000518:	18ba      	adds	r2, r7, r2
 800051a:	6013      	str	r3, [r2, #0]
 800051c:	e05f      	b.n	80005de <comHandler+0x1c6>
			{
				//Přečti znaky na pozici i a i+1
				char tmp1, tmp2;
				at(USB_Rx_Buffer, i, &tmp1);
 800051e:	4b9f      	ldr	r3, [pc, #636]	; (800079c <comHandler+0x384>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2454      	movs	r4, #84	; 0x54
 8000524:	2118      	movs	r1, #24
 8000526:	1860      	adds	r0, r4, r1
 8000528:	19c2      	adds	r2, r0, r7
 800052a:	2090      	movs	r0, #144	; 0x90
 800052c:	1838      	adds	r0, r7, r0
 800052e:	6801      	ldr	r1, [r0, #0]
 8000530:	0018      	movs	r0, r3
 8000532:	f002 f87d 	bl	8002630 <at>
				at(USB_Rx_Buffer, i+1, &tmp2);
 8000536:	4b99      	ldr	r3, [pc, #612]	; (800079c <comHandler+0x384>)
 8000538:	6818      	ldr	r0, [r3, #0]
 800053a:	2390      	movs	r3, #144	; 0x90
 800053c:	18fa      	adds	r2, r7, r3
 800053e:	6813      	ldr	r3, [r2, #0]
 8000540:	3301      	adds	r3, #1
 8000542:	2253      	movs	r2, #83	; 0x53
 8000544:	2118      	movs	r1, #24
 8000546:	1851      	adds	r1, r2, r1
 8000548:	19ca      	adds	r2, r1, r7
 800054a:	0019      	movs	r1, r3
 800054c:	f002 f870 	bl	8002630 <at>

				if(tmp1 == '<' && tmp1 == '<')	//konec paketu
 8000550:	2218      	movs	r2, #24
 8000552:	18a1      	adds	r1, r4, r2
 8000554:	19cb      	adds	r3, r1, r7
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b3c      	cmp	r3, #60	; 0x3c
 800055a:	d13a      	bne.n	80005d2 <comHandler+0x1ba>
 800055c:	18a2      	adds	r2, r4, r2
 800055e:	19d3      	adds	r3, r2, r7
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b3c      	cmp	r3, #60	; 0x3c
 8000564:	d135      	bne.n	80005d2 <comHandler+0x1ba>
				{
					uint8_t* tmp = (uint8_t*)malloc((i+2)*sizeof(uint8_t));
 8000566:	2390      	movs	r3, #144	; 0x90
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	3302      	adds	r3, #2
 800056e:	0018      	movs	r0, r3
 8000570:	f00d f8b8 	bl	800d6e4 <malloc>
 8000574:	0003      	movs	r3, r0
 8000576:	67fb      	str	r3, [r7, #124]	; 0x7c
					for(int y = 0; y < i+2; y++)	//překopírování zprávy
 8000578:	2300      	movs	r3, #0
 800057a:	2294      	movs	r2, #148	; 0x94
 800057c:	18ba      	adds	r2, r7, r2
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	e00f      	b.n	80005a2 <comHandler+0x18a>
					{
						pop(USB_Rx_Buffer, &tmp[y]);
 8000582:	4b86      	ldr	r3, [pc, #536]	; (800079c <comHandler+0x384>)
 8000584:	6818      	ldr	r0, [r3, #0]
 8000586:	2494      	movs	r4, #148	; 0x94
 8000588:	193b      	adds	r3, r7, r4
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800058e:	18d3      	adds	r3, r2, r3
 8000590:	0019      	movs	r1, r3
 8000592:	f002 f81a 	bl	80025ca <pop>
					for(int y = 0; y < i+2; y++)	//překopírování zprávy
 8000596:	0022      	movs	r2, r4
 8000598:	18bb      	adds	r3, r7, r2
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	3301      	adds	r3, #1
 800059e:	18ba      	adds	r2, r7, r2
 80005a0:	6013      	str	r3, [r2, #0]
 80005a2:	2190      	movs	r1, #144	; 0x90
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	3301      	adds	r3, #1
 80005aa:	2294      	movs	r2, #148	; 0x94
 80005ac:	18ba      	adds	r2, r7, r2
 80005ae:	6812      	ldr	r2, [r2, #0]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	dde6      	ble.n	8000582 <comHandler+0x16a>
					}

					decodePaket(tmp, i+2);
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	3302      	adds	r3, #2
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005c0:	0011      	movs	r1, r2
 80005c2:	0018      	movs	r0, r3
 80005c4:	f000 fafa 	bl	8000bbc <decodePaket>
					free(tmp);
 80005c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005ca:	0018      	movs	r0, r3
 80005cc:	f00d f894 	bl	800d6f8 <free>
					break;
 80005d0:	e00d      	b.n	80005ee <comHandler+0x1d6>
			for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 80005d2:	2290      	movs	r2, #144	; 0x90
 80005d4:	18bb      	adds	r3, r7, r2
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	3301      	adds	r3, #1
 80005da:	18ba      	adds	r2, r7, r2
 80005dc:	6013      	str	r3, [r2, #0]
 80005de:	4b6f      	ldr	r3, [pc, #444]	; (800079c <comHandler+0x384>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	2290      	movs	r2, #144	; 0x90
 80005e6:	18ba      	adds	r2, r7, r2
 80005e8:	6812      	ldr	r2, [r2, #0]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	db97      	blt.n	800051e <comHandler+0x106>
				}
			}
		}

		flags.data_received = 0;
 80005ee:	4b6c      	ldr	r3, [pc, #432]	; (80007a0 <comHandler+0x388>)
 80005f0:	7a1a      	ldrb	r2, [r3, #8]
 80005f2:	2101      	movs	r1, #1
 80005f4:	438a      	bics	r2, r1
 80005f6:	721a      	strb	r2, [r3, #8]
	}

	if(flags.testProgress)	//Pokud test pokročil...
 80005f8:	4b69      	ldr	r3, [pc, #420]	; (80007a0 <comHandler+0x388>)
 80005fa:	7e1b      	ldrb	r3, [r3, #24]
 80005fc:	2202      	movs	r2, #2
 80005fe:	4013      	ands	r3, r2
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b00      	cmp	r3, #0
 8000604:	d04e      	beq.n	80006a4 <comHandler+0x28c>
	{
		//...zjisti v jaké je fázi...
		char testPhaseChr;
		switch(currentPhase())
 8000606:	f002 fb2d 	bl	8002c64 <currentPhase>
 800060a:	0003      	movs	r3, r0
 800060c:	2b06      	cmp	r3, #6
 800060e:	d82e      	bhi.n	800066e <comHandler+0x256>
 8000610:	009a      	lsls	r2, r3, #2
 8000612:	4b64      	ldr	r3, [pc, #400]	; (80007a4 <comHandler+0x38c>)
 8000614:	18d3      	adds	r3, r2, r3
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	469f      	mov	pc, r3
		{
		case START:
			testPhaseChr = 's';
 800061a:	2352      	movs	r3, #82	; 0x52
 800061c:	2218      	movs	r2, #24
 800061e:	189b      	adds	r3, r3, r2
 8000620:	19db      	adds	r3, r3, r7
 8000622:	2273      	movs	r2, #115	; 0x73
 8000624:	701a      	strb	r2, [r3, #0]
			break;
 8000626:	e029      	b.n	800067c <comHandler+0x264>
		case START_DONE:
			testPhaseChr = 's';
 8000628:	2352      	movs	r3, #82	; 0x52
 800062a:	2218      	movs	r2, #24
 800062c:	189b      	adds	r3, r3, r2
 800062e:	19db      	adds	r3, r3, r7
 8000630:	2273      	movs	r2, #115	; 0x73
 8000632:	701a      	strb	r2, [r3, #0]
			break;
 8000634:	e022      	b.n	800067c <comHandler+0x264>
		case MAIN_TEST:
			testPhaseChr = 'm';
 8000636:	2352      	movs	r3, #82	; 0x52
 8000638:	2218      	movs	r2, #24
 800063a:	189b      	adds	r3, r3, r2
 800063c:	19db      	adds	r3, r3, r7
 800063e:	226d      	movs	r2, #109	; 0x6d
 8000640:	701a      	strb	r2, [r3, #0]
			break;
 8000642:	e01b      	b.n	800067c <comHandler+0x264>
		case MAIN_TEST_DONE:
			testPhaseChr = 'm';
 8000644:	2352      	movs	r3, #82	; 0x52
 8000646:	2218      	movs	r2, #24
 8000648:	189b      	adds	r3, r3, r2
 800064a:	19db      	adds	r3, r3, r7
 800064c:	226d      	movs	r2, #109	; 0x6d
 800064e:	701a      	strb	r2, [r3, #0]
			break;
 8000650:	e014      	b.n	800067c <comHandler+0x264>
		case BATTERY_TEST:
			testPhaseChr = 'b';
 8000652:	2352      	movs	r3, #82	; 0x52
 8000654:	2218      	movs	r2, #24
 8000656:	189b      	adds	r3, r3, r2
 8000658:	19db      	adds	r3, r3, r7
 800065a:	2262      	movs	r2, #98	; 0x62
 800065c:	701a      	strb	r2, [r3, #0]
			break;
 800065e:	e00d      	b.n	800067c <comHandler+0x264>
		case BATTERY_TEST_DONE:
			testPhaseChr = 'M';
 8000660:	2352      	movs	r3, #82	; 0x52
 8000662:	2218      	movs	r2, #24
 8000664:	189b      	adds	r3, r3, r2
 8000666:	19db      	adds	r3, r3, r7
 8000668:	224d      	movs	r2, #77	; 0x4d
 800066a:	701a      	strb	r2, [r3, #0]
			break;
 800066c:	e006      	b.n	800067c <comHandler+0x264>
		default:
			testPhaseChr = 'e';
 800066e:	2352      	movs	r3, #82	; 0x52
 8000670:	2218      	movs	r2, #24
 8000672:	189b      	adds	r3, r3, r2
 8000674:	19db      	adds	r3, r3, r7
 8000676:	2265      	movs	r2, #101	; 0x65
 8000678:	701a      	strb	r2, [r3, #0]
			break;
 800067a:	46c0      	nop			; (mov r8, r8)
		}

		//...a upozorni na to PC
		Paket paket;
		fillPaket(&paket, TEST_PHASE_PAKET, &testPhaseChr, 1);
 800067c:	2352      	movs	r3, #82	; 0x52
 800067e:	2118      	movs	r1, #24
 8000680:	185b      	adds	r3, r3, r1
 8000682:	19da      	adds	r2, r3, r7
 8000684:	2444      	movs	r4, #68	; 0x44
 8000686:	1863      	adds	r3, r4, r1
 8000688:	19d8      	adds	r0, r3, r7
 800068a:	2301      	movs	r3, #1
 800068c:	2104      	movs	r1, #4
 800068e:	f000 f999 	bl	80009c4 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 8000692:	4b45      	ldr	r3, [pc, #276]	; (80007a8 <comHandler+0x390>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2118      	movs	r1, #24
 8000698:	1862      	adds	r2, r4, r1
 800069a:	19d2      	adds	r2, r2, r7
 800069c:	0011      	movs	r1, r2
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 f9d0 	bl	8000a44 <pushPaket>
	}

	if(flags.meas.measComplete)	//Jsou připravena data k odeslání
 80006a4:	4b3e      	ldr	r3, [pc, #248]	; (80007a0 <comHandler+0x388>)
 80006a6:	7d1b      	ldrb	r3, [r3, #20]
 80006a8:	2202      	movs	r2, #2
 80006aa:	4013      	ands	r3, r2
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d049      	beq.n	8000746 <comHandler+0x32e>
	{
		if(!flags.meas.calibMeas)
 80006b2:	4b3b      	ldr	r3, [pc, #236]	; (80007a0 <comHandler+0x388>)
 80006b4:	7d1b      	ldrb	r3, [r3, #20]
 80006b6:	2240      	movs	r2, #64	; 0x40
 80006b8:	4013      	ands	r3, r2
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d117      	bne.n	80006f0 <comHandler+0x2d8>
		{
			//Nejde o kalibrační data -> pošli číslo dat
			Paket paket;
			fillPaket(&paket, TEST_NUM_PAKET, &testNum, 1);
 80006c0:	4a3a      	ldr	r2, [pc, #232]	; (80007ac <comHandler+0x394>)
 80006c2:	242c      	movs	r4, #44	; 0x2c
 80006c4:	2318      	movs	r3, #24
 80006c6:	18e1      	adds	r1, r4, r3
 80006c8:	19c8      	adds	r0, r1, r7
 80006ca:	2301      	movs	r3, #1
 80006cc:	2103      	movs	r1, #3
 80006ce:	f000 f979 	bl	80009c4 <fillPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 80006d2:	4b35      	ldr	r3, [pc, #212]	; (80007a8 <comHandler+0x390>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2218      	movs	r2, #24
 80006d8:	18a2      	adds	r2, r4, r2
 80006da:	19d2      	adds	r2, r2, r7
 80006dc:	0011      	movs	r1, r2
 80006de:	0018      	movs	r0, r3
 80006e0:	f000 f9b0 	bl	8000a44 <pushPaket>
			testNum++;
 80006e4:	4b31      	ldr	r3, [pc, #196]	; (80007ac <comHandler+0x394>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	1c5a      	adds	r2, r3, #1
 80006ea:	4b30      	ldr	r3, [pc, #192]	; (80007ac <comHandler+0x394>)
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	e004      	b.n	80006fa <comHandler+0x2e2>
		}
		else
		{
			flags.meas.calibMeas = 0;
 80006f0:	4b2b      	ldr	r3, [pc, #172]	; (80007a0 <comHandler+0x388>)
 80006f2:	7d1a      	ldrb	r2, [r3, #20]
 80006f4:	2140      	movs	r1, #64	; 0x40
 80006f6:	438a      	bics	r2, r1
 80006f8:	751a      	strb	r2, [r3, #20]
		}

		//___Připrav a odešli paket___//
		makeByteArray();
 80006fa:	f000 f937 	bl	800096c <makeByteArray>
		Paket paket;
		if(flags.meas.onlyBattery)
 80006fe:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <comHandler+0x388>)
 8000700:	7d1b      	ldrb	r3, [r3, #20]
 8000702:	2220      	movs	r2, #32
 8000704:	4013      	ands	r3, r2
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	d009      	beq.n	8000720 <comHandler+0x308>
		{
			fillPaket(&paket, DATA_BAT_PAKET, data+12, BAT_DATA_PAKET_LENGHT);
 800070c:	4a28      	ldr	r2, [pc, #160]	; (80007b0 <comHandler+0x398>)
 800070e:	2338      	movs	r3, #56	; 0x38
 8000710:	2118      	movs	r1, #24
 8000712:	185b      	adds	r3, r3, r1
 8000714:	19d8      	adds	r0, r3, r7
 8000716:	2302      	movs	r3, #2
 8000718:	2102      	movs	r1, #2
 800071a:	f000 f953 	bl	80009c4 <fillPaket>
 800071e:	e008      	b.n	8000732 <comHandler+0x31a>
		}
		else
		{
			fillPaket(&paket, DATA_PAKET, data, DATA_PAKET_LENGHT);
 8000720:	4a24      	ldr	r2, [pc, #144]	; (80007b4 <comHandler+0x39c>)
 8000722:	2338      	movs	r3, #56	; 0x38
 8000724:	2118      	movs	r1, #24
 8000726:	185b      	adds	r3, r3, r1
 8000728:	19d8      	adds	r0, r3, r7
 800072a:	230e      	movs	r3, #14
 800072c:	2101      	movs	r1, #1
 800072e:	f000 f949 	bl	80009c4 <fillPaket>
		}
		pushPaket(USB_Tx_Buffer, &paket);
 8000732:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <comHandler+0x390>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	2238      	movs	r2, #56	; 0x38
 8000738:	2118      	movs	r1, #24
 800073a:	1852      	adds	r2, r2, r1
 800073c:	19d2      	adds	r2, r2, r7
 800073e:	0011      	movs	r1, r2
 8000740:	0018      	movs	r0, r3
 8000742:	f000 f97f 	bl	8000a44 <pushPaket>
		pushPaket(USB_Tx_Buffer, &paket);
	}
#endif

	//___Upozornění o stavu topení___//
	switch(flags.heaterState)
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <comHandler+0x388>)
 8000748:	7e1b      	ldrb	r3, [r3, #24]
 800074a:	069b      	lsls	r3, r3, #26
 800074c:	0f9b      	lsrs	r3, r3, #30
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b03      	cmp	r3, #3
 8000752:	d04f      	beq.n	80007f4 <comHandler+0x3dc>
 8000754:	dc6c      	bgt.n	8000830 <comHandler+0x418>
 8000756:	2b01      	cmp	r3, #1
 8000758:	d002      	beq.n	8000760 <comHandler+0x348>
 800075a:	2b02      	cmp	r3, #2
 800075c:	d02c      	beq.n	80007b8 <comHandler+0x3a0>
		fillPaket(&paket, HEATER_PAKET, &data, 1);
		pushPaket(USB_Tx_Buffer, &paket);
		flags.heaterState = 0;
		break;
	default:	//0 => neprobehl test topeni
		break;
 800075e:	e067      	b.n	8000830 <comHandler+0x418>
		data = 0;
 8000760:	211f      	movs	r1, #31
 8000762:	2018      	movs	r0, #24
 8000764:	180b      	adds	r3, r1, r0
 8000766:	19db      	adds	r3, r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
		fillPaket(&paket, HEATER_PAKET, &data, 1);
 800076c:	180b      	adds	r3, r1, r0
 800076e:	19da      	adds	r2, r3, r7
 8000770:	2420      	movs	r4, #32
 8000772:	1823      	adds	r3, r4, r0
 8000774:	19d8      	adds	r0, r3, r7
 8000776:	2301      	movs	r3, #1
 8000778:	2107      	movs	r1, #7
 800077a:	f000 f923 	bl	80009c4 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <comHandler+0x390>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2018      	movs	r0, #24
 8000784:	1822      	adds	r2, r4, r0
 8000786:	19d2      	adds	r2, r2, r7
 8000788:	0011      	movs	r1, r2
 800078a:	0018      	movs	r0, r3
 800078c:	f000 f95a 	bl	8000a44 <pushPaket>
		flags.heaterState = 0;
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <comHandler+0x388>)
 8000792:	7e1a      	ldrb	r2, [r3, #24]
 8000794:	2130      	movs	r1, #48	; 0x30
 8000796:	438a      	bics	r2, r1
 8000798:	761a      	strb	r2, [r3, #24]
		break;
 800079a:	e04a      	b.n	8000832 <comHandler+0x41a>
 800079c:	20000eb4 	.word	0x20000eb4
 80007a0:	200003d0 	.word	0x200003d0
 80007a4:	0800e130 	.word	0x0800e130
 80007a8:	200001fc 	.word	0x200001fc
 80007ac:	20000410 	.word	0x20000410
 80007b0:	2000020c 	.word	0x2000020c
 80007b4:	20000200 	.word	0x20000200
		data = 1;
 80007b8:	211f      	movs	r1, #31
 80007ba:	2018      	movs	r0, #24
 80007bc:	180b      	adds	r3, r1, r0
 80007be:	19db      	adds	r3, r3, r7
 80007c0:	2201      	movs	r2, #1
 80007c2:	701a      	strb	r2, [r3, #0]
		fillPaket(&paket, HEATER_PAKET, &data, 1);
 80007c4:	180b      	adds	r3, r1, r0
 80007c6:	19da      	adds	r2, r3, r7
 80007c8:	2420      	movs	r4, #32
 80007ca:	1823      	adds	r3, r4, r0
 80007cc:	19d8      	adds	r0, r3, r7
 80007ce:	2301      	movs	r3, #1
 80007d0:	2107      	movs	r1, #7
 80007d2:	f000 f8f7 	bl	80009c4 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 80007d6:	4b62      	ldr	r3, [pc, #392]	; (8000960 <comHandler+0x548>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2018      	movs	r0, #24
 80007dc:	1822      	adds	r2, r4, r0
 80007de:	19d2      	adds	r2, r2, r7
 80007e0:	0011      	movs	r1, r2
 80007e2:	0018      	movs	r0, r3
 80007e4:	f000 f92e 	bl	8000a44 <pushPaket>
		flags.heaterState = 0;
 80007e8:	4b5e      	ldr	r3, [pc, #376]	; (8000964 <comHandler+0x54c>)
 80007ea:	7e1a      	ldrb	r2, [r3, #24]
 80007ec:	2130      	movs	r1, #48	; 0x30
 80007ee:	438a      	bics	r2, r1
 80007f0:	761a      	strb	r2, [r3, #24]
		break;
 80007f2:	e01e      	b.n	8000832 <comHandler+0x41a>
		data = 2;
 80007f4:	211f      	movs	r1, #31
 80007f6:	2018      	movs	r0, #24
 80007f8:	180b      	adds	r3, r1, r0
 80007fa:	19db      	adds	r3, r3, r7
 80007fc:	2202      	movs	r2, #2
 80007fe:	701a      	strb	r2, [r3, #0]
		fillPaket(&paket, HEATER_PAKET, &data, 1);
 8000800:	180b      	adds	r3, r1, r0
 8000802:	19da      	adds	r2, r3, r7
 8000804:	2420      	movs	r4, #32
 8000806:	1823      	adds	r3, r4, r0
 8000808:	19d8      	adds	r0, r3, r7
 800080a:	2301      	movs	r3, #1
 800080c:	2107      	movs	r1, #7
 800080e:	f000 f8d9 	bl	80009c4 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 8000812:	4b53      	ldr	r3, [pc, #332]	; (8000960 <comHandler+0x548>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2018      	movs	r0, #24
 8000818:	1822      	adds	r2, r4, r0
 800081a:	19d2      	adds	r2, r2, r7
 800081c:	0011      	movs	r1, r2
 800081e:	0018      	movs	r0, r3
 8000820:	f000 f910 	bl	8000a44 <pushPaket>
		flags.heaterState = 0;
 8000824:	4b4f      	ldr	r3, [pc, #316]	; (8000964 <comHandler+0x54c>)
 8000826:	7e1a      	ldrb	r2, [r3, #24]
 8000828:	2130      	movs	r1, #48	; 0x30
 800082a:	438a      	bics	r2, r1
 800082c:	761a      	strb	r2, [r3, #24]
		break;
 800082e:	e000      	b.n	8000832 <comHandler+0x41a>
		break;
 8000830:	46c0      	nop			; (mov r8, r8)
	}

	if(flags.buttons.butt0_ver)
 8000832:	4b4c      	ldr	r3, [pc, #304]	; (8000964 <comHandler+0x54c>)
 8000834:	791b      	ldrb	r3, [r3, #4]
 8000836:	2202      	movs	r2, #2
 8000838:	4013      	ands	r3, r2
 800083a:	b2db      	uxtb	r3, r3
 800083c:	2b00      	cmp	r3, #0
 800083e:	d011      	beq.n	8000864 <comHandler+0x44c>
	{
		Paket paket;
		fillPaket(&paket, CANCEL_FROM_USER_PAKET, NULL, 0);
 8000840:	2410      	movs	r4, #16
 8000842:	2218      	movs	r2, #24
 8000844:	18a3      	adds	r3, r4, r2
 8000846:	19d8      	adds	r0, r3, r7
 8000848:	2300      	movs	r3, #0
 800084a:	2200      	movs	r2, #0
 800084c:	2108      	movs	r1, #8
 800084e:	f000 f8b9 	bl	80009c4 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 8000852:	4b43      	ldr	r3, [pc, #268]	; (8000960 <comHandler+0x548>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2218      	movs	r2, #24
 8000858:	18a2      	adds	r2, r4, r2
 800085a:	19d2      	adds	r2, r2, r7
 800085c:	0011      	movs	r1, r2
 800085e:	0018      	movs	r0, r3
 8000860:	f000 f8f0 	bl	8000a44 <pushPaket>
	}

	//___Odesílání dat___//
	//_Ošetření plného bufferu_//
	if(USB_Tx_Buffer->status == BUFFER_FULL)
 8000864:	4b3e      	ldr	r3, [pc, #248]	; (8000960 <comHandler+0x548>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	7d1b      	ldrb	r3, [r3, #20]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d11b      	bne.n	80008a6 <comHandler+0x48e>
	{
		flags.ui.shortBeep = 1;
 800086e:	4b3d      	ldr	r3, [pc, #244]	; (8000964 <comHandler+0x54c>)
 8000870:	7c1a      	ldrb	r2, [r3, #16]
 8000872:	2101      	movs	r1, #1
 8000874:	430a      	orrs	r2, r1
 8000876:	741a      	strb	r2, [r3, #16]
		char msg[] = {"Buffer full\n"};
 8000878:	2418      	movs	r4, #24
 800087a:	193b      	adds	r3, r7, r4
 800087c:	4a3a      	ldr	r2, [pc, #232]	; (8000968 <comHandler+0x550>)
 800087e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000880:	c313      	stmia	r3!, {r0, r1, r4}
 8000882:	7812      	ldrb	r2, [r2, #0]
 8000884:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(msg, strlen(msg));
 8000886:	2418      	movs	r4, #24
 8000888:	193b      	adds	r3, r7, r4
 800088a:	0018      	movs	r0, r3
 800088c:	f7ff fc3c 	bl	8000108 <strlen>
 8000890:	0002      	movs	r2, r0
 8000892:	193b      	adds	r3, r7, r4
 8000894:	0011      	movs	r1, r2
 8000896:	0018      	movs	r0, r3
 8000898:	f00c fa3e 	bl	800cd18 <CDC_Transmit_FS>
		clearBuffer(USB_Tx_Buffer);
 800089c:	4b30      	ldr	r3, [pc, #192]	; (8000960 <comHandler+0x548>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	0018      	movs	r0, r3
 80008a2:	f001 fe1d 	bl	80024e0 <clearBuffer>
	}
	//_Samotné odesílání_//
	if(USB_Tx_Buffer->filled)
 80008a6:	4b2e      	ldr	r3, [pc, #184]	; (8000960 <comHandler+0x548>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	689b      	ldr	r3, [r3, #8]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d051      	beq.n	8000954 <comHandler+0x53c>
	{
 80008b0:	466b      	mov	r3, sp
 80008b2:	4698      	mov	r8, r3
		int size = USB_Tx_Buffer->filled;
 80008b4:	4b2a      	ldr	r3, [pc, #168]	; (8000960 <comHandler+0x548>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	67bb      	str	r3, [r7, #120]	; 0x78
		char tmpStr[size];
 80008bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80008be:	1e5a      	subs	r2, r3, #1
 80008c0:	677a      	str	r2, [r7, #116]	; 0x74
 80008c2:	001a      	movs	r2, r3
 80008c4:	60ba      	str	r2, [r7, #8]
 80008c6:	2200      	movs	r2, #0
 80008c8:	60fa      	str	r2, [r7, #12]
 80008ca:	68b8      	ldr	r0, [r7, #8]
 80008cc:	68f9      	ldr	r1, [r7, #12]
 80008ce:	0002      	movs	r2, r0
 80008d0:	0f52      	lsrs	r2, r2, #29
 80008d2:	000c      	movs	r4, r1
 80008d4:	00e4      	lsls	r4, r4, #3
 80008d6:	617c      	str	r4, [r7, #20]
 80008d8:	697c      	ldr	r4, [r7, #20]
 80008da:	4314      	orrs	r4, r2
 80008dc:	617c      	str	r4, [r7, #20]
 80008de:	0002      	movs	r2, r0
 80008e0:	00d2      	lsls	r2, r2, #3
 80008e2:	613a      	str	r2, [r7, #16]
 80008e4:	001a      	movs	r2, r3
 80008e6:	603a      	str	r2, [r7, #0]
 80008e8:	2200      	movs	r2, #0
 80008ea:	607a      	str	r2, [r7, #4]
 80008ec:	6838      	ldr	r0, [r7, #0]
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	0002      	movs	r2, r0
 80008f2:	0f52      	lsrs	r2, r2, #29
 80008f4:	000c      	movs	r4, r1
 80008f6:	00e6      	lsls	r6, r4, #3
 80008f8:	4316      	orrs	r6, r2
 80008fa:	0002      	movs	r2, r0
 80008fc:	00d5      	lsls	r5, r2, #3
 80008fe:	3307      	adds	r3, #7
 8000900:	08db      	lsrs	r3, r3, #3
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	466a      	mov	r2, sp
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	469d      	mov	sp, r3
 800090a:	466b      	mov	r3, sp
 800090c:	3300      	adds	r3, #0
 800090e:	673b      	str	r3, [r7, #112]	; 0x70
		for(int i = 0; i < size; i++)
 8000910:	2300      	movs	r3, #0
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	18ba      	adds	r2, r7, r2
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	e00f      	b.n	800093a <comHandler+0x522>
		{
			pop(USB_Tx_Buffer, &tmpStr[i]);
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <comHandler+0x548>)
 800091c:	6818      	ldr	r0, [r3, #0]
 800091e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000920:	2480      	movs	r4, #128	; 0x80
 8000922:	193b      	adds	r3, r7, r4
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	18d3      	adds	r3, r2, r3
 8000928:	0019      	movs	r1, r3
 800092a:	f001 fe4e 	bl	80025ca <pop>
		for(int i = 0; i < size; i++)
 800092e:	0022      	movs	r2, r4
 8000930:	18bb      	adds	r3, r7, r2
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	3301      	adds	r3, #1
 8000936:	18ba      	adds	r2, r7, r2
 8000938:	6013      	str	r3, [r2, #0]
 800093a:	2380      	movs	r3, #128	; 0x80
 800093c:	18fb      	adds	r3, r7, r3
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000942:	429a      	cmp	r2, r3
 8000944:	dbe9      	blt.n	800091a <comHandler+0x502>
		}
		CDC_Transmit_FS(tmpStr, size);
 8000946:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000948:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800094a:	0011      	movs	r1, r2
 800094c:	0018      	movs	r0, r3
 800094e:	f00c f9e3 	bl	800cd18 <CDC_Transmit_FS>
 8000952:	46c5      	mov	sp, r8
	}

}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	b026      	add	sp, #152	; 0x98
 800095a:	bc80      	pop	{r7}
 800095c:	46b8      	mov	r8, r7
 800095e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000960:	200001fc 	.word	0x200001fc
 8000964:	200003d0 	.word	0x200003d0
 8000968:	0800e008 	.word	0x0800e008

0800096c <makeByteArray>:

//_____Zpracuje ADC_Results do pole data_____//
static void makeByteArray()
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
	for(int i = 0; i < 7; i++)
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	e018      	b.n	80009aa <makeByteArray+0x3e>
	{
		data[2*i] = MaskByte(ADC_Results[2*i], 1);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	005a      	lsls	r2, r3, #1
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <makeByteArray+0x50>)
 800097e:	0092      	lsls	r2, r2, #2
 8000980:	58d3      	ldr	r3, [r2, r3]
 8000982:	0a1a      	lsrs	r2, r3, #8
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	b2d1      	uxtb	r1, r2
 800098a:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <makeByteArray+0x54>)
 800098c:	54d1      	strb	r1, [r2, r3]
		data[2*i+1] = MaskByte(ADC_Results[2*i], 0);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	005a      	lsls	r2, r3, #1
 8000992:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <makeByteArray+0x50>)
 8000994:	0092      	lsls	r2, r2, #2
 8000996:	58d2      	ldr	r2, [r2, r3]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	3301      	adds	r3, #1
 800099e:	b2d1      	uxtb	r1, r2
 80009a0:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <makeByteArray+0x54>)
 80009a2:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 7; i++)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3301      	adds	r3, #1
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b06      	cmp	r3, #6
 80009ae:	dde3      	ble.n	8000978 <makeByteArray+0xc>
	}
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	b002      	add	sp, #8
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	20000380 	.word	0x20000380
 80009c0:	20000200 	.word	0x20000200

080009c4 <fillPaket>:

//_____Vytvoří strukturu Paket z dat v argumentech_____//
static void fillPaket(Paket* paket, outPaketType type, uint8_t* data, uint8_t dataLength)
{
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b087      	sub	sp, #28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	0008      	movs	r0, r1
 80009ce:	607a      	str	r2, [r7, #4]
 80009d0:	0019      	movs	r1, r3
 80009d2:	240b      	movs	r4, #11
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	1c02      	adds	r2, r0, #0
 80009d8:	701a      	strb	r2, [r3, #0]
 80009da:	200a      	movs	r0, #10
 80009dc:	183b      	adds	r3, r7, r0
 80009de:	1c0a      	adds	r2, r1, #0
 80009e0:	701a      	strb	r2, [r3, #0]
	paket->type = type;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	0021      	movs	r1, r4
 80009e6:	187a      	adds	r2, r7, r1
 80009e8:	7812      	ldrb	r2, [r2, #0]
 80009ea:	701a      	strb	r2, [r3, #0]
	paket->data = data;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	687a      	ldr	r2, [r7, #4]
 80009f0:	605a      	str	r2, [r3, #4]
	paket->dataLength = dataLength;
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	183a      	adds	r2, r7, r0
 80009f6:	7812      	ldrb	r2, [r2, #0]
 80009f8:	721a      	strb	r2, [r3, #8]
	uint8_t CA = type;
 80009fa:	2317      	movs	r3, #23
 80009fc:	18fb      	adds	r3, r7, r3
 80009fe:	187a      	adds	r2, r7, r1
 8000a00:	7812      	ldrb	r2, [r2, #0]
 8000a02:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataLength; i++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	e00c      	b.n	8000a24 <fillPaket+0x60>
		CA += data[i];
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	687a      	ldr	r2, [r7, #4]
 8000a0e:	18d3      	adds	r3, r2, r3
 8000a10:	7819      	ldrb	r1, [r3, #0]
 8000a12:	2217      	movs	r2, #23
 8000a14:	18bb      	adds	r3, r7, r2
 8000a16:	18ba      	adds	r2, r7, r2
 8000a18:	7812      	ldrb	r2, [r2, #0]
 8000a1a:	188a      	adds	r2, r1, r2
 8000a1c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataLength; i++)
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	3301      	adds	r3, #1
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	230a      	movs	r3, #10
 8000a26:	18fb      	adds	r3, r7, r3
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	dbec      	blt.n	8000a0a <fillPaket+0x46>
	paket->CA_value = CA;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2217      	movs	r2, #23
 8000a34:	18ba      	adds	r2, r7, r2
 8000a36:	7812      	ldrb	r2, [r2, #0]
 8000a38:	725a      	strb	r2, [r3, #9]
}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b007      	add	sp, #28
 8000a40:	bd90      	pop	{r4, r7, pc}
	...

08000a44 <pushPaket>:

//_____Vloží do bufferu řetězec odpovídající sestavenému paketu_____//
static void pushPaket(RING_BUFFER* buffer, Paket* paket)
{
 8000a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a46:	46c6      	mov	lr, r8
 8000a48:	b500      	push	{lr}
 8000a4a:	b096      	sub	sp, #88	; 0x58
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000a50:	63b9      	str	r1, [r7, #56]	; 0x38
 8000a52:	466b      	mov	r3, sp
 8000a54:	4698      	mov	r8, r3
	uint8_t msg[paket->dataLength + 2];
 8000a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000a58:	7a1b      	ldrb	r3, [r3, #8]
 8000a5a:	1c9a      	adds	r2, r3, #2
 8000a5c:	1e53      	subs	r3, r2, #1
 8000a5e:	657b      	str	r3, [r7, #84]	; 0x54
 8000a60:	0013      	movs	r3, r2
 8000a62:	61bb      	str	r3, [r7, #24]
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
 8000a68:	69b8      	ldr	r0, [r7, #24]
 8000a6a:	69f9      	ldr	r1, [r7, #28]
 8000a6c:	0003      	movs	r3, r0
 8000a6e:	0f5b      	lsrs	r3, r3, #29
 8000a70:	000e      	movs	r6, r1
 8000a72:	00f5      	lsls	r5, r6, #3
 8000a74:	431d      	orrs	r5, r3
 8000a76:	0003      	movs	r3, r0
 8000a78:	00dc      	lsls	r4, r3, #3
 8000a7a:	0013      	movs	r3, r2
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
 8000a82:	6938      	ldr	r0, [r7, #16]
 8000a84:	6979      	ldr	r1, [r7, #20]
 8000a86:	0003      	movs	r3, r0
 8000a88:	0f5b      	lsrs	r3, r3, #29
 8000a8a:	000c      	movs	r4, r1
 8000a8c:	00e4      	lsls	r4, r4, #3
 8000a8e:	637c      	str	r4, [r7, #52]	; 0x34
 8000a90:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8000a92:	431c      	orrs	r4, r3
 8000a94:	637c      	str	r4, [r7, #52]	; 0x34
 8000a96:	0003      	movs	r3, r0
 8000a98:	00db      	lsls	r3, r3, #3
 8000a9a:	633b      	str	r3, [r7, #48]	; 0x30
 8000a9c:	0013      	movs	r3, r2
 8000a9e:	3307      	adds	r3, #7
 8000aa0:	08db      	lsrs	r3, r3, #3
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	466a      	mov	r2, sp
 8000aa6:	1ad3      	subs	r3, r2, r3
 8000aa8:	469d      	mov	sp, r3
 8000aaa:	466b      	mov	r3, sp
 8000aac:	3300      	adds	r3, #0
 8000aae:	653b      	str	r3, [r7, #80]	; 0x50
	msg[0] = paket->type;
 8000ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ab2:	781a      	ldrb	r2, [r3, #0]
 8000ab4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ab6:	701a      	strb	r2, [r3, #0]
	memcpy(msg+1, paket->data, paket->dataLength);
 8000ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000aba:	1c58      	adds	r0, r3, #1
 8000abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000abe:	6859      	ldr	r1, [r3, #4]
 8000ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ac2:	7a1b      	ldrb	r3, [r3, #8]
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	f00c fe21 	bl	800d70c <memcpy>
	msg[paket->dataLength+1] = paket->CA_value;
 8000aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000acc:	7a1b      	ldrb	r3, [r3, #8]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ad2:	7a51      	ldrb	r1, [r2, #9]
 8000ad4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000ad6:	54d1      	strb	r1, [r2, r3]
	//msg[paket->dataLength+2] = 0U;

	uint8_t str[] = {">>"};
 8000ad8:	200c      	movs	r0, #12
 8000ada:	2638      	movs	r6, #56	; 0x38
 8000adc:	1983      	adds	r3, r0, r6
 8000ade:	19db      	adds	r3, r3, r7
 8000ae0:	4a34      	ldr	r2, [pc, #208]	; (8000bb4 <pushPaket+0x170>)
 8000ae2:	8811      	ldrh	r1, [r2, #0]
 8000ae4:	8019      	strh	r1, [r3, #0]
 8000ae6:	7892      	ldrb	r2, [r2, #2]
 8000ae8:	709a      	strb	r2, [r3, #2]
	uint8_t end[] = {"<<\n"};
 8000aea:	2508      	movs	r5, #8
 8000aec:	19ab      	adds	r3, r5, r6
 8000aee:	19db      	adds	r3, r3, r7
 8000af0:	4a31      	ldr	r2, [pc, #196]	; (8000bb8 <pushPaket+0x174>)
 8000af2:	601a      	str	r2, [r3, #0]

	uint8_t toSend[6+paket->dataLength + 2];
 8000af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000af6:	7a1b      	ldrb	r3, [r3, #8]
 8000af8:	3308      	adds	r3, #8
 8000afa:	001c      	movs	r4, r3
 8000afc:	1e63      	subs	r3, r4, #1
 8000afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b00:	0023      	movs	r3, r4
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68b9      	ldr	r1, [r7, #8]
 8000b0a:	68fa      	ldr	r2, [r7, #12]
 8000b0c:	000b      	movs	r3, r1
 8000b0e:	0f5b      	lsrs	r3, r3, #29
 8000b10:	0016      	movs	r6, r2
 8000b12:	00f6      	lsls	r6, r6, #3
 8000b14:	62fe      	str	r6, [r7, #44]	; 0x2c
 8000b16:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8000b18:	431e      	orrs	r6, r3
 8000b1a:	62fe      	str	r6, [r7, #44]	; 0x2c
 8000b1c:	000b      	movs	r3, r1
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b22:	0023      	movs	r3, r4
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	6839      	ldr	r1, [r7, #0]
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	000b      	movs	r3, r1
 8000b30:	0f5b      	lsrs	r3, r3, #29
 8000b32:	0016      	movs	r6, r2
 8000b34:	00f6      	lsls	r6, r6, #3
 8000b36:	627e      	str	r6, [r7, #36]	; 0x24
 8000b38:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8000b3a:	431e      	orrs	r6, r3
 8000b3c:	627e      	str	r6, [r7, #36]	; 0x24
 8000b3e:	000b      	movs	r3, r1
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	623b      	str	r3, [r7, #32]
 8000b44:	0023      	movs	r3, r4
 8000b46:	3307      	adds	r3, #7
 8000b48:	08db      	lsrs	r3, r3, #3
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	466a      	mov	r2, sp
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	469d      	mov	sp, r3
 8000b52:	466b      	mov	r3, sp
 8000b54:	3300      	adds	r3, #0
 8000b56:	64bb      	str	r3, [r7, #72]	; 0x48
	//sprintf(toSend, "%s%s%s\n", str, msg, end);	//pro testNum = 0 se vytiskne jen paket->type, jelikož sprintf pak narazí na nulu
	memcpy(toSend, str, 2);
 8000b58:	2638      	movs	r6, #56	; 0x38
 8000b5a:	1983      	adds	r3, r0, r6
 8000b5c:	19d9      	adds	r1, r3, r7
 8000b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b60:	2202      	movs	r2, #2
 8000b62:	0018      	movs	r0, r3
 8000b64:	f00c fdd2 	bl	800d70c <memcpy>
	memcpy(toSend+2, msg, paket->dataLength + 2);
 8000b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000b6a:	1c98      	adds	r0, r3, #2
 8000b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b6e:	7a1b      	ldrb	r3, [r3, #8]
 8000b70:	3302      	adds	r3, #2
 8000b72:	001a      	movs	r2, r3
 8000b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b76:	0019      	movs	r1, r3
 8000b78:	f00c fdc8 	bl	800d70c <memcpy>
	memcpy(toSend+2+paket->dataLength + 2, end, 4);
 8000b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b7e:	7a1b      	ldrb	r3, [r3, #8]
 8000b80:	3304      	adds	r3, #4
 8000b82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000b84:	18d2      	adds	r2, r2, r3
 8000b86:	19ab      	adds	r3, r5, r6
 8000b88:	19db      	adds	r3, r3, r7
 8000b8a:	0010      	movs	r0, r2
 8000b8c:	0019      	movs	r1, r3
 8000b8e:	2304      	movs	r3, #4
 8000b90:	001a      	movs	r2, r3
 8000b92:	f00c fdbb 	bl	800d70c <memcpy>
	pushStr(buffer, toSend, sizeof(toSend)-1);
 8000b96:	0023      	movs	r3, r4
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	001a      	movs	r2, r3
 8000b9c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f001 fcea 	bl	800257a <pushStr>
 8000ba6:	46c5      	mov	sp, r8
}
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b016      	add	sp, #88	; 0x58
 8000bae:	bc80      	pop	{r7}
 8000bb0:	46b8      	mov	r8, r7
 8000bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bb4:	0800e018 	.word	0x0800e018
 8000bb8:	000a3c3c 	.word	0x000a3c3c

08000bbc <decodePaket>:

//_____Příchozí řetězec přepracuje do struktury typu paket (pokud to lze)_____//
static uint8_t decodePaket(/*Paket* paket,*/ uint8_t* data, uint8_t dataLenght)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b089      	sub	sp, #36	; 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	000a      	movs	r2, r1
 8000bc6:	1cfb      	adds	r3, r7, #3
 8000bc8:	701a      	strb	r2, [r3, #0]
	int sum = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
	for(int i = 2; i < dataLenght - 3; i++)
 8000bce:	2302      	movs	r3, #2
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	e00a      	b.n	8000bea <decodePaket+0x2e>
	{
		sum += data[i];
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	18d3      	adds	r3, r2, r3
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	001a      	movs	r2, r3
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	189b      	adds	r3, r3, r2
 8000be2:	61fb      	str	r3, [r7, #28]
	for(int i = 2; i < dataLenght - 3; i++)
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	3301      	adds	r3, #1
 8000be8:	61bb      	str	r3, [r7, #24]
 8000bea:	1cfb      	adds	r3, r7, #3
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	3b03      	subs	r3, #3
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	dbee      	blt.n	8000bd4 <decodePaket+0x18>
	}
	if(sum == data[dataLenght - 3])	//kontorlní součet odpovídá
 8000bf6:	1cfb      	adds	r3, r7, #3
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	3b03      	subs	r3, #3
 8000bfc:	687a      	ldr	r2, [r7, #4]
 8000bfe:	18d3      	adds	r3, r2, r3
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	001a      	movs	r2, r3
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d000      	beq.n	8000c0c <decodePaket+0x50>
 8000c0a:	e06a      	b.n	8000ce2 <decodePaket+0x126>
	{
		switch(data[2])	//Na třetím místě je instrukce
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3302      	adds	r3, #2
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	3b61      	subs	r3, #97	; 0x61
 8000c14:	2b12      	cmp	r3, #18
 8000c16:	d85e      	bhi.n	8000cd6 <decodePaket+0x11a>
 8000c18:	009a      	lsls	r2, r3, #2
 8000c1a:	4b39      	ldr	r3, [pc, #228]	; (8000d00 <decodePaket+0x144>)
 8000c1c:	18d3      	adds	r3, r2, r3
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	469f      	mov	pc, r3
		{
		case 's': ;
			//___Start testu___//
			if(dataLenght == 7)
 8000c22:	1cfb      	adds	r3, r7, #3
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b07      	cmp	r3, #7
 8000c28:	d15d      	bne.n	8000ce6 <decodePaket+0x12a>
			{
				flags.instructions.startRequest = 1;
 8000c2a:	4b36      	ldr	r3, [pc, #216]	; (8000d04 <decodePaket+0x148>)
 8000c2c:	7b1a      	ldrb	r2, [r3, #12]
 8000c2e:	2101      	movs	r1, #1
 8000c30:	430a      	orrs	r2, r1
 8000c32:	731a      	strb	r2, [r3, #12]
				supplyToTest = data[3];
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	78da      	ldrb	r2, [r3, #3]
 8000c38:	4b33      	ldr	r3, [pc, #204]	; (8000d08 <decodePaket+0x14c>)
 8000c3a:	701a      	strb	r2, [r3, #0]
				sprintf(txt, "Start\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				//Na pozici data je ukazatel na testovaný zdroj
			}
			break;
 8000c3c:	e053      	b.n	8000ce6 <decodePaket+0x12a>

		case'c': ;
			//___Ukončení___//
		if(dataLenght == 7)
 8000c3e:	1cfb      	adds	r3, r7, #3
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b07      	cmp	r3, #7
 8000c44:	d151      	bne.n	8000cea <decodePaket+0x12e>
		{
			flags.instructions.stopRequest = 1;
 8000c46:	4b2f      	ldr	r3, [pc, #188]	; (8000d04 <decodePaket+0x148>)
 8000c48:	7b1a      	ldrb	r2, [r3, #12]
 8000c4a:	2102      	movs	r1, #2
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Ukonceni\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000c50:	e04b      	b.n	8000cea <decodePaket+0x12e>

		case'p': ;
			//___Pauza___//
		if(dataLenght == 7)
 8000c52:	1cfb      	adds	r3, r7, #3
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b07      	cmp	r3, #7
 8000c58:	d149      	bne.n	8000cee <decodePaket+0x132>
		{
			flags.instructions.pauseRequest = 1;
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <decodePaket+0x148>)
 8000c5c:	7b1a      	ldrb	r2, [r3, #12]
 8000c5e:	2104      	movs	r1, #4
 8000c60:	430a      	orrs	r2, r1
 8000c62:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Pauza\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000c64:	e043      	b.n	8000cee <decodePaket+0x132>

		case'k': ;
			//___Kalibrace___//
		if(dataLenght == 7)
 8000c66:	1cfb      	adds	r3, r7, #3
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b07      	cmp	r3, #7
 8000c6c:	d141      	bne.n	8000cf2 <decodePaket+0x136>
		{
			if(data[3] == 0)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	3303      	adds	r3, #3
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d105      	bne.n	8000c84 <decodePaket+0xc8>
				flags.instructions.calibRequest = 1;
 8000c78:	4b22      	ldr	r3, [pc, #136]	; (8000d04 <decodePaket+0x148>)
 8000c7a:	7b1a      	ldrb	r2, [r3, #12]
 8000c7c:	2108      	movs	r1, #8
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Kalibrace\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000c82:	e036      	b.n	8000cf2 <decodePaket+0x136>
			else if(data[3] == 1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3303      	adds	r3, #3
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d131      	bne.n	8000cf2 <decodePaket+0x136>
				flags.instructions.calibDone = 1;
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <decodePaket+0x148>)
 8000c90:	7b1a      	ldrb	r2, [r3, #12]
 8000c92:	2110      	movs	r1, #16
 8000c94:	430a      	orrs	r2, r1
 8000c96:	731a      	strb	r2, [r3, #12]
			break;
 8000c98:	e02b      	b.n	8000cf2 <decodePaket+0x136>

		case 'a' : ;
			//___Navázání komunikace___//
		if(dataLenght == 7)
 8000c9a:	1cfb      	adds	r3, r7, #3
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b07      	cmp	r3, #7
 8000ca0:	d119      	bne.n	8000cd6 <decodePaket+0x11a>
		{
			uint8_t data = regCount;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <decodePaket+0x150>)
 8000ca4:	781a      	ldrb	r2, [r3, #0]
 8000ca6:	2117      	movs	r1, #23
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	701a      	strb	r2, [r3, #0]
			Paket paket;
			fillPaket(&paket, ACK_PAKET, &data, 1);
 8000cac:	187a      	adds	r2, r7, r1
 8000cae:	2408      	movs	r4, #8
 8000cb0:	1938      	adds	r0, r7, r4
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	2105      	movs	r1, #5
 8000cb6:	f7ff fe85 	bl	80009c4 <fillPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 8000cba:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <decodePaket+0x154>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	193a      	adds	r2, r7, r4
 8000cc0:	0011      	movs	r1, r2
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f7ff febe 	bl	8000a44 <pushPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <decodePaket+0x154>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	193a      	adds	r2, r7, r4
 8000cce:	0011      	movs	r1, r2
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f7ff feb7 	bl	8000a44 <pushPaket>
		}

		default: ;
			//___Neplatný příkaz___//
			flags.instructions.unknownInst = 1;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <decodePaket+0x148>)
 8000cd8:	7b1a      	ldrb	r2, [r3, #12]
 8000cda:	2120      	movs	r1, #32
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
			sprintf(txt, "Neplatna instrukce\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			break;
 8000ce0:	e008      	b.n	8000cf4 <decodePaket+0x138>
		}
	}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	e006      	b.n	8000cf4 <decodePaket+0x138>
			break;
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	e004      	b.n	8000cf4 <decodePaket+0x138>
			break;
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	e002      	b.n	8000cf4 <decodePaket+0x138>
			break;
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	e000      	b.n	8000cf4 <decodePaket+0x138>
			break;
 8000cf2:	46c0      	nop			; (mov r8, r8)
	return 1;
 8000cf4:	2301      	movs	r3, #1
}
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	b009      	add	sp, #36	; 0x24
 8000cfc:	bd90      	pop	{r4, r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	0800e14c 	.word	0x0800e14c
 8000d04:	200003d0 	.word	0x200003d0
 8000d08:	200003ee 	.word	0x200003ee
 8000d0c:	20000404 	.word	0x20000404
 8000d10:	200001fc 	.word	0x200001fc

08000d14 <setColour>:
static BACKLIGHT colour;

//_____Rozvítí podsvícení dané argumentem_____//
//-> argument: Barva podsvícení
void setColour(BACKLIGHT colourToSet)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	1dfb      	adds	r3, r7, #7
 8000d1e:	701a      	strb	r2, [r3, #0]
	switch(colourToSet)
 8000d20:	1dfb      	adds	r3, r7, #7
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d033      	beq.n	8000d90 <setColour+0x7c>
 8000d28:	dc49      	bgt.n	8000dbe <setColour+0xaa>
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d002      	beq.n	8000d34 <setColour+0x20>
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	d017      	beq.n	8000d62 <setColour+0x4e>
 8000d32:	e044      	b.n	8000dbe <setColour+0xaa>
	{
	case BACKLIGHT_WHITE:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_SET);
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	009b      	lsls	r3, r3, #2
 8000d38:	4830      	ldr	r0, [pc, #192]	; (8000dfc <setColour+0xe8>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	0019      	movs	r1, r3
 8000d3e:	f003 fb70 	bl	8004422 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	0219      	lsls	r1, r3, #8
 8000d46:	2390      	movs	r3, #144	; 0x90
 8000d48:	05db      	lsls	r3, r3, #23
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f003 fb68 	bl	8004422 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	4829      	ldr	r0, [pc, #164]	; (8000dfc <setColour+0xe8>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	0019      	movs	r1, r3
 8000d5c:	f003 fb61 	bl	8004422 <HAL_GPIO_WritePin>
		break;
 8000d60:	e044      	b.n	8000dec <setColour+0xd8>

	case BACKLIGHT_GREEN:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000d62:	2380      	movs	r3, #128	; 0x80
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	4825      	ldr	r0, [pc, #148]	; (8000dfc <setColour+0xe8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	0019      	movs	r1, r3
 8000d6c:	f003 fb59 	bl	8004422 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	0219      	lsls	r1, r3, #8
 8000d74:	2390      	movs	r3, #144	; 0x90
 8000d76:	05db      	lsls	r3, r3, #23
 8000d78:	2200      	movs	r2, #0
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f003 fb51 	bl	8004422 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_SET);
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	481d      	ldr	r0, [pc, #116]	; (8000dfc <setColour+0xe8>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	0019      	movs	r1, r3
 8000d8a:	f003 fb4a 	bl	8004422 <HAL_GPIO_WritePin>
		break;
 8000d8e:	e02d      	b.n	8000dec <setColour+0xd8>

	case BACKLIGHT_RED:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	4819      	ldr	r0, [pc, #100]	; (8000dfc <setColour+0xe8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	0019      	movs	r1, r3
 8000d9a:	f003 fb42 	bl	8004422 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_SET);
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	0219      	lsls	r1, r3, #8
 8000da2:	2390      	movs	r3, #144	; 0x90
 8000da4:	05db      	lsls	r3, r3, #23
 8000da6:	2201      	movs	r2, #1
 8000da8:	0018      	movs	r0, r3
 8000daa:	f003 fb3a 	bl	8004422 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4812      	ldr	r0, [pc, #72]	; (8000dfc <setColour+0xe8>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	0019      	movs	r1, r3
 8000db8:	f003 fb33 	bl	8004422 <HAL_GPIO_WritePin>
		break;
 8000dbc:	e016      	b.n	8000dec <setColour+0xd8>

	default:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000dbe:	2380      	movs	r3, #128	; 0x80
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	480e      	ldr	r0, [pc, #56]	; (8000dfc <setColour+0xe8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	0019      	movs	r1, r3
 8000dc8:	f003 fb2b 	bl	8004422 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000dcc:	2380      	movs	r3, #128	; 0x80
 8000dce:	0219      	lsls	r1, r3, #8
 8000dd0:	2390      	movs	r3, #144	; 0x90
 8000dd2:	05db      	lsls	r3, r3, #23
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f003 fb23 	bl	8004422 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	4806      	ldr	r0, [pc, #24]	; (8000dfc <setColour+0xe8>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	0019      	movs	r1, r3
 8000de6:	f003 fb1c 	bl	8004422 <HAL_GPIO_WritePin>
		break;
 8000dea:	46c0      	nop			; (mov r8, r8)
	}

	colour = colourToSet;
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <setColour+0xec>)
 8000dee:	1dfa      	adds	r2, r7, #7
 8000df0:	7812      	ldrb	r2, [r2, #0]
 8000df2:	701a      	strb	r2, [r3, #0]
}
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b002      	add	sp, #8
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	48000400 	.word	0x48000400
 8000e00:	2000020e 	.word	0x2000020e

08000e04 <sendByte>:

//_____Pošle byte dat_____//
//-> argumenty: char - posílaný byte, Start_byte definuje zda jde o instrukci nebo data
// !!! Pracuje v blokujícím módu !!!
static DISP_STATE sendByte(char byte, START_BYTE type)
{
 8000e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	0002      	movs	r2, r0
 8000e0c:	1dfb      	adds	r3, r7, #7
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	1dbb      	adds	r3, r7, #6
 8000e12:	1c0a      	adds	r2, r1, #0
 8000e14:	701a      	strb	r2, [r3, #0]
		{
			return SPI_ERR;
		}
	}*/
	uint8_t buffer[3];
	switch(type)
 8000e16:	1dbb      	adds	r3, r7, #6
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d002      	beq.n	8000e24 <sendByte+0x20>
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d005      	beq.n	8000e2e <sendByte+0x2a>
 8000e22:	e009      	b.n	8000e38 <sendByte+0x34>
	{
		case INSTRUCTION:
			buffer[0] = 0xF8;
 8000e24:	2308      	movs	r3, #8
 8000e26:	18fb      	adds	r3, r7, r3
 8000e28:	22f8      	movs	r2, #248	; 0xf8
 8000e2a:	701a      	strb	r2, [r3, #0]
			break;
 8000e2c:	e006      	b.n	8000e3c <sendByte+0x38>
		case DATA:
			buffer[0] = 0xFA;
 8000e2e:	2308      	movs	r3, #8
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	22fa      	movs	r2, #250	; 0xfa
 8000e34:	701a      	strb	r2, [r3, #0]
			break;
 8000e36:	e001      	b.n	8000e3c <sendByte+0x38>
		default:	//neošetřené možnosti
			return SPI_ERR;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	e074      	b.n	8000f26 <sendByte+0x122>
			break;
	}
	uint8_t tmp1 = 0U, tmp2 = 0U;
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
 8000e44:	230e      	movs	r3, #14
 8000e46:	18fb      	adds	r3, r7, r3
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8000e4c:	230d      	movs	r3, #13
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	e03a      	b.n	8000ecc <sendByte+0xc8>
	{
		if(MaskBit(byte, i))
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	781a      	ldrb	r2, [r3, #0]
 8000e5a:	210d      	movs	r1, #13
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	411a      	asrs	r2, r3
 8000e62:	0013      	movs	r3, r2
 8000e64:	2201      	movs	r2, #1
 8000e66:	4013      	ands	r3, r2
 8000e68:	d00f      	beq.n	8000e8a <sendByte+0x86>
		{
			SetBit(tmp1, (7-i));
 8000e6a:	187b      	adds	r3, r7, r1
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2207      	movs	r2, #7
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2201      	movs	r2, #1
 8000e74:	409a      	lsls	r2, r3
 8000e76:	0013      	movs	r3, r2
 8000e78:	b25a      	sxtb	r2, r3
 8000e7a:	210f      	movs	r1, #15
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	b25b      	sxtb	r3, r3
 8000e82:	4313      	orrs	r3, r2
 8000e84:	b25a      	sxtb	r2, r3
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	701a      	strb	r2, [r3, #0]
		}
		if(MaskBit(byte, (i+4)))
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	781a      	ldrb	r2, [r3, #0]
 8000e8e:	210d      	movs	r1, #13
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	3304      	adds	r3, #4
 8000e96:	411a      	asrs	r2, r3
 8000e98:	0013      	movs	r3, r2
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	d00f      	beq.n	8000ec0 <sendByte+0xbc>
		{
			SetBit(tmp2, (7-i));
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	0013      	movs	r3, r2
 8000eae:	b25a      	sxtb	r2, r3
 8000eb0:	210e      	movs	r1, #14
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b25b      	sxtb	r3, r3
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	b25a      	sxtb	r2, r3
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8000ec0:	210d      	movs	r1, #13
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	781a      	ldrb	r2, [r3, #0]
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	3201      	adds	r2, #1
 8000eca:	701a      	strb	r2, [r3, #0]
 8000ecc:	230d      	movs	r3, #13
 8000ece:	18fb      	adds	r3, r7, r3
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d9bf      	bls.n	8000e56 <sendByte+0x52>
		}
	}
	buffer[1] = tmp1;
 8000ed6:	2508      	movs	r5, #8
 8000ed8:	197b      	adds	r3, r7, r5
 8000eda:	220f      	movs	r2, #15
 8000edc:	18ba      	adds	r2, r7, r2
 8000ede:	7812      	ldrb	r2, [r2, #0]
 8000ee0:	705a      	strb	r2, [r3, #1]
	buffer[2] = tmp2;
 8000ee2:	197b      	adds	r3, r7, r5
 8000ee4:	220e      	movs	r2, #14
 8000ee6:	18ba      	adds	r2, r7, r2
 8000ee8:	7812      	ldrb	r2, [r2, #0]
 8000eea:	709a      	strb	r2, [r3, #2]

	DISP_CS_ON;
 8000eec:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <sendByte+0x12c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2140      	movs	r1, #64	; 0x40
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f003 fa95 	bl	8004422 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, buffer, 3, 100);
 8000ef8:	260c      	movs	r6, #12
 8000efa:	19bc      	adds	r4, r7, r6
 8000efc:	1979      	adds	r1, r7, r5
 8000efe:	480d      	ldr	r0, [pc, #52]	; (8000f34 <sendByte+0x130>)
 8000f00:	2364      	movs	r3, #100	; 0x64
 8000f02:	2203      	movs	r2, #3
 8000f04:	f006 f80c 	bl	8006f20 <HAL_SPI_Transmit>
 8000f08:	0003      	movs	r3, r0
 8000f0a:	7023      	strb	r3, [r4, #0]
	DISP_CS_OFF;
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <sendByte+0x12c>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2140      	movs	r1, #64	; 0x40
 8000f12:	0018      	movs	r0, r3
 8000f14:	f003 fa85 	bl	8004422 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	if(ret == HAL_OK)
 8000f18:	19bb      	adds	r3, r7, r6
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d101      	bne.n	8000f24 <sendByte+0x120>
		return DISP_OK;
 8000f20:	2300      	movs	r3, #0
 8000f22:	e000      	b.n	8000f26 <sendByte+0x122>
	else
		return SPI_ERR;
 8000f24:	2302      	movs	r3, #2
}
 8000f26:	0018      	movs	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b005      	add	sp, #20
 8000f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	48000400 	.word	0x48000400
 8000f34:	20000250 	.word	0x20000250

08000f38 <dispInit>:
}

//_____Provede reset displeje a defaultní nastavení_____//
// !!! Pracuje v blokujícím módu !!!
void dispInit(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	//_____Reset displeje po startu_____//
	HAL_Delay(10);
 8000f3c:	200a      	movs	r0, #10
 8000f3e:	f002 fa3b 	bl	80033b8 <HAL_Delay>
	HAL_GPIO_WritePin(DISP_RST_GPIO_Port,DISP_RST_Pin, GPIO_PIN_RESET);
 8000f42:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <dispInit+0x8c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	2180      	movs	r1, #128	; 0x80
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f003 fa6a 	bl	8004422 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000f4e:	2014      	movs	r0, #20
 8000f50:	f002 fa32 	bl	80033b8 <HAL_Delay>
	HAL_GPIO_WritePin(DISP_RST_GPIO_Port,DISP_RST_Pin, GPIO_PIN_SET);
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <dispInit+0x8c>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	2180      	movs	r1, #128	; 0x80
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f003 fa61 	bl	8004422 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000f60:	2005      	movs	r0, #5
 8000f62:	f002 fa29 	bl	80033b8 <HAL_Delay>

	//_____Nastavit parametry_____//
	sendByte(0x31, INSTRUCTION);	//Function set IS = 1, RE = 0
 8000f66:	2101      	movs	r1, #1
 8000f68:	2031      	movs	r0, #49	; 0x31
 8000f6a:	f7ff ff4b 	bl	8000e04 <sendByte>
	sendByte(0x01, INSTRUCTION);	//Clear display
 8000f6e:	2101      	movs	r1, #1
 8000f70:	2001      	movs	r0, #1
 8000f72:	f7ff ff47 	bl	8000e04 <sendByte>
	sendByte(0x13, INSTRUCTION);	//Oscilator
 8000f76:	2101      	movs	r1, #1
 8000f78:	2013      	movs	r0, #19
 8000f7a:	f7ff ff43 	bl	8000e04 <sendByte>
	sendByte(0x7A, INSTRUCTION);	//Contrast
 8000f7e:	2101      	movs	r1, #1
 8000f80:	207a      	movs	r0, #122	; 0x7a
 8000f82:	f7ff ff3f 	bl	8000e04 <sendByte>
	sendByte(0x56, INSTRUCTION);	//Power/Icon/Contrast
 8000f86:	2101      	movs	r1, #1
 8000f88:	2056      	movs	r0, #86	; 0x56
 8000f8a:	f7ff ff3b 	bl	8000e04 <sendByte>
	sendByte(0x6B, INSTRUCTION);	//Follower control
 8000f8e:	2101      	movs	r1, #1
 8000f90:	206b      	movs	r0, #107	; 0x6b
 8000f92:	f7ff ff37 	bl	8000e04 <sendByte>
	sendByte(0x0F, INSTRUCTION);	//Display on
 8000f96:	2101      	movs	r1, #1
 8000f98:	200f      	movs	r0, #15
 8000f9a:	f7ff ff33 	bl	8000e04 <sendByte>
	sendByte(0x32, INSTRUCTION);	//Function set RE = 1
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	2032      	movs	r0, #50	; 0x32
 8000fa2:	f7ff ff2f 	bl	8000e04 <sendByte>
	sendByte(0x1F, INSTRUCTION);	//Shift enable
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	201f      	movs	r0, #31
 8000faa:	f7ff ff2b 	bl	8000e04 <sendByte>
	sendByte(0x38, INSTRUCTION);	//Function set RE = 0
 8000fae:	2101      	movs	r1, #1
 8000fb0:	2038      	movs	r0, #56	; 0x38
 8000fb2:	f7ff ff27 	bl	8000e04 <sendByte>

	//_____Zapnout podsvícení_____//
	setColour(BACKLIGHT_WHITE);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff feac 	bl	8000d14 <setColour>
}
 8000fbc:	46c0      	nop			; (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	48000400 	.word	0x48000400

08000fc8 <setCursor>:
//_____Nastaví kurzor_____//
//pozice počítána od nuly//
//-> argumenty: řádek, sloupec
// !!! Pracuje v blokujícím módu !!!
DISP_STATE setCursor(uint8_t row, uint8_t col)
{
 8000fc8:	b5b0      	push	{r4, r5, r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	0002      	movs	r2, r0
 8000fd0:	1dfb      	adds	r3, r7, #7
 8000fd2:	701a      	strb	r2, [r3, #0]
 8000fd4:	1dbb      	adds	r3, r7, #6
 8000fd6:	1c0a      	adds	r2, r1, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
	uint8_t addres = 0x80;	//DDRAM adresa
 8000fda:	230f      	movs	r3, #15
 8000fdc:	18fb      	adds	r3, r7, r3
 8000fde:	2280      	movs	r2, #128	; 0x80
 8000fe0:	701a      	strb	r2, [r3, #0]
	if(row > 3 || col > 15)	//displej 4x16
 8000fe2:	1dfb      	adds	r3, r7, #7
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d803      	bhi.n	8000ff2 <setCursor+0x2a>
 8000fea:	1dbb      	adds	r3, r7, #6
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b0f      	cmp	r3, #15
 8000ff0:	d901      	bls.n	8000ff6 <setCursor+0x2e>
		return DISP_ERR;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	e01c      	b.n	8001030 <setCursor+0x68>
	addres += row*0x20;
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	015b      	lsls	r3, r3, #5
 8000ffc:	b2d9      	uxtb	r1, r3
 8000ffe:	200f      	movs	r0, #15
 8001000:	183b      	adds	r3, r7, r0
 8001002:	183a      	adds	r2, r7, r0
 8001004:	7812      	ldrb	r2, [r2, #0]
 8001006:	188a      	adds	r2, r1, r2
 8001008:	701a      	strb	r2, [r3, #0]
	addres += col;
 800100a:	183b      	adds	r3, r7, r0
 800100c:	1839      	adds	r1, r7, r0
 800100e:	1dba      	adds	r2, r7, #6
 8001010:	7809      	ldrb	r1, [r1, #0]
 8001012:	7812      	ldrb	r2, [r2, #0]
 8001014:	188a      	adds	r2, r1, r2
 8001016:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(5);
	DISP_STATE ret = sendByte(addres, INSTRUCTION);
 8001018:	250e      	movs	r5, #14
 800101a:	197c      	adds	r4, r7, r5
 800101c:	183b      	adds	r3, r7, r0
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2101      	movs	r1, #1
 8001022:	0018      	movs	r0, r3
 8001024:	f7ff feee 	bl	8000e04 <sendByte>
 8001028:	0003      	movs	r3, r0
 800102a:	7023      	strb	r3, [r4, #0]
	//HAL_Delay(5);
	return ret;
 800102c:	197b      	adds	r3, r7, r5
 800102e:	781b      	ldrb	r3, [r3, #0]
}
 8001030:	0018      	movs	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	b004      	add	sp, #16
 8001036:	bdb0      	pop	{r4, r5, r7, pc}

08001038 <writeRow>:
//_____Zapiš řetězec na daný řádek_____//
//znaky přečnívající znaky budou smazány//
//-> argumenty: pole znaků, délka řetězce, řádek, zarovnání
// !!! Pracuje v blokujícím módu !!!
DISP_STATE writeRow(char* string, uint8_t lenght, uint8_t row, ALIGN align)
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b089      	sub	sp, #36	; 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	000c      	movs	r4, r1
 8001042:	0010      	movs	r0, r2
 8001044:	0019      	movs	r1, r3
 8001046:	1cfb      	adds	r3, r7, #3
 8001048:	1c22      	adds	r2, r4, #0
 800104a:	701a      	strb	r2, [r3, #0]
 800104c:	1cbb      	adds	r3, r7, #2
 800104e:	1c02      	adds	r2, r0, #0
 8001050:	701a      	strb	r2, [r3, #0]
 8001052:	1c7b      	adds	r3, r7, #1
 8001054:	1c0a      	adds	r2, r1, #0
 8001056:	701a      	strb	r2, [r3, #0]
	if(lenght > 16)	//neplatná délka řetězce
 8001058:	1cfb      	adds	r3, r7, #3
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b10      	cmp	r3, #16
 800105e:	d901      	bls.n	8001064 <writeRow+0x2c>
		return DISP_ERR;
 8001060:	2304      	movs	r3, #4
 8001062:	e083      	b.n	800116c <writeRow+0x134>
	uint8_t col;
	char newString[16];
	for(uint8_t i = 0; i < 16; i++)
 8001064:	231e      	movs	r3, #30
 8001066:	18fb      	adds	r3, r7, r3
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
 800106c:	e00b      	b.n	8001086 <writeRow+0x4e>
	{
		newString[i] = ' ';
 800106e:	201e      	movs	r0, #30
 8001070:	183b      	adds	r3, r7, r0
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	220c      	movs	r2, #12
 8001076:	18ba      	adds	r2, r7, r2
 8001078:	2120      	movs	r1, #32
 800107a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 16; i++)
 800107c:	183b      	adds	r3, r7, r0
 800107e:	781a      	ldrb	r2, [r3, #0]
 8001080:	183b      	adds	r3, r7, r0
 8001082:	3201      	adds	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]
 8001086:	231e      	movs	r3, #30
 8001088:	18fb      	adds	r3, r7, r3
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d9ee      	bls.n	800106e <writeRow+0x36>
	}
	switch(align)
 8001090:	1c7b      	adds	r3, r7, #1
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b02      	cmp	r3, #2
 8001096:	d012      	beq.n	80010be <writeRow+0x86>
 8001098:	dc1e      	bgt.n	80010d8 <writeRow+0xa0>
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <writeRow+0x6c>
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d005      	beq.n	80010ae <writeRow+0x76>
 80010a2:	e019      	b.n	80010d8 <writeRow+0xa0>
	{
		case LEFT:	//zarovnání doleva
			col = 0;
 80010a4:	231f      	movs	r3, #31
 80010a6:	18fb      	adds	r3, r7, r3
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
			break;
 80010ac:	e019      	b.n	80010e2 <writeRow+0xaa>
		case RIGHT:
			col = 15 - lenght;
 80010ae:	231f      	movs	r3, #31
 80010b0:	18fb      	adds	r3, r7, r3
 80010b2:	1cfa      	adds	r2, r7, #3
 80010b4:	7812      	ldrb	r2, [r2, #0]
 80010b6:	210f      	movs	r1, #15
 80010b8:	1a8a      	subs	r2, r1, r2
 80010ba:	701a      	strb	r2, [r3, #0]
			break;
 80010bc:	e011      	b.n	80010e2 <writeRow+0xaa>
		case CENTER:
			col = (15 - lenght)/2 + 1;
 80010be:	1cfb      	adds	r3, r7, #3
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	220f      	movs	r2, #15
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	d500      	bpl.n	80010ca <writeRow+0x92>
 80010c8:	3301      	adds	r3, #1
 80010ca:	105b      	asrs	r3, r3, #1
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	231f      	movs	r3, #31
 80010d0:	18fb      	adds	r3, r7, r3
 80010d2:	3201      	adds	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
			break;
 80010d6:	e004      	b.n	80010e2 <writeRow+0xaa>
		default:
			col = 0;
 80010d8:	231f      	movs	r3, #31
 80010da:	18fb      	adds	r3, r7, r3
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
			break;
 80010e0:	46c0      	nop			; (mov r8, r8)
	}
	for(uint8_t i = 0; i < lenght; i++)
 80010e2:	231d      	movs	r3, #29
 80010e4:	18fb      	adds	r3, r7, r3
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	e013      	b.n	8001114 <writeRow+0xdc>
	{
		newString[col + i] = string[i];
 80010ec:	201d      	movs	r0, #29
 80010ee:	183b      	adds	r3, r7, r0
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	18d2      	adds	r2, r2, r3
 80010f6:	231f      	movs	r3, #31
 80010f8:	18fb      	adds	r3, r7, r3
 80010fa:	7819      	ldrb	r1, [r3, #0]
 80010fc:	183b      	adds	r3, r7, r0
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	18cb      	adds	r3, r1, r3
 8001102:	7811      	ldrb	r1, [r2, #0]
 8001104:	220c      	movs	r2, #12
 8001106:	18ba      	adds	r2, r7, r2
 8001108:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < lenght; i++)
 800110a:	183b      	adds	r3, r7, r0
 800110c:	781a      	ldrb	r2, [r3, #0]
 800110e:	183b      	adds	r3, r7, r0
 8001110:	3201      	adds	r2, #1
 8001112:	701a      	strb	r2, [r3, #0]
 8001114:	231d      	movs	r3, #29
 8001116:	18fa      	adds	r2, r7, r3
 8001118:	1cfb      	adds	r3, r7, #3
 800111a:	7812      	ldrb	r2, [r2, #0]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	429a      	cmp	r2, r3
 8001120:	d3e4      	bcc.n	80010ec <writeRow+0xb4>
	}
	setCursor(row, 0);
 8001122:	1cbb      	adds	r3, r7, #2
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2100      	movs	r1, #0
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff ff4d 	bl	8000fc8 <setCursor>
	for(uint8_t i = 0; i < 16; i++)
 800112e:	231c      	movs	r3, #28
 8001130:	18fb      	adds	r3, r7, r3
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
 8001136:	e013      	b.n	8001160 <writeRow+0x128>
	{
		if(sendByte(newString[i], DATA) != DISP_OK)
 8001138:	231c      	movs	r3, #28
 800113a:	18fb      	adds	r3, r7, r3
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	220c      	movs	r2, #12
 8001140:	18ba      	adds	r2, r7, r2
 8001142:	5cd3      	ldrb	r3, [r2, r3]
 8001144:	2102      	movs	r1, #2
 8001146:	0018      	movs	r0, r3
 8001148:	f7ff fe5c 	bl	8000e04 <sendByte>
 800114c:	1e03      	subs	r3, r0, #0
 800114e:	d001      	beq.n	8001154 <writeRow+0x11c>
					return SPI_ERR;
 8001150:	2302      	movs	r3, #2
 8001152:	e00b      	b.n	800116c <writeRow+0x134>
	for(uint8_t i = 0; i < 16; i++)
 8001154:	211c      	movs	r1, #28
 8001156:	187b      	adds	r3, r7, r1
 8001158:	781a      	ldrb	r2, [r3, #0]
 800115a:	187b      	adds	r3, r7, r1
 800115c:	3201      	adds	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
 8001160:	231c      	movs	r3, #28
 8001162:	18fb      	adds	r3, r7, r3
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b0f      	cmp	r3, #15
 8001168:	d9e6      	bls.n	8001138 <writeRow+0x100>
	}
	return DISP_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	0018      	movs	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	b009      	add	sp, #36	; 0x24
 8001172:	bd90      	pop	{r4, r7, pc}

08001174 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	0002      	movs	r2, r0
 800117c:	1dbb      	adds	r3, r7, #6
 800117e:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 8001180:	1dbb      	adds	r3, r7, #6
 8001182:	881a      	ldrh	r2, [r3, #0]
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	429a      	cmp	r2, r3
 800118a:	d104      	bne.n	8001196 <HAL_GPIO_EXTI_Callback+0x22>
	{
		flags.buttons.butt0_int = 1;
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_GPIO_EXTI_Callback+0x40>)
 800118e:	791a      	ldrb	r2, [r3, #4]
 8001190:	2101      	movs	r1, #1
 8001192:	430a      	orrs	r2, r1
 8001194:	711a      	strb	r2, [r3, #4]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 8001196:	1dbb      	adds	r3, r7, #6
 8001198:	881a      	ldrh	r2, [r3, #0]
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	429a      	cmp	r2, r3
 80011a0:	d104      	bne.n	80011ac <HAL_GPIO_EXTI_Callback+0x38>
	{
		flags.buttons.butt1_int = 1;
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <HAL_GPIO_EXTI_Callback+0x40>)
 80011a4:	791a      	ldrb	r2, [r3, #4]
 80011a6:	2104      	movs	r1, #4
 80011a8:	430a      	orrs	r2, r1
 80011aa:	711a      	strb	r2, [r3, #4]
	}
}
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b002      	add	sp, #8
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200003d0 	.word	0x200003d0

080011b8 <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d110      	bne.n	80011ea <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		//Krátké pípnutí signalizuje vykonávání hlavní smy�?ky programu
		//delší než deset ms
		if(flags.time.ten_ms == 1)
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	07db      	lsls	r3, r3, #31
 80011ce:	0fdb      	lsrs	r3, r3, #31
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d104      	bne.n	80011e0 <HAL_TIM_PeriodElapsedCallback+0x28>
			flags.ui.shortBeep = 1;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80011d8:	7c1a      	ldrb	r2, [r3, #16]
 80011da:	2101      	movs	r1, #1
 80011dc:	430a      	orrs	r2, r1
 80011de:	741a      	strb	r2, [r3, #16]
		flags.time.ten_ms = 1;
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80011e2:	781a      	ldrb	r2, [r3, #0]
 80011e4:	2101      	movs	r1, #1
 80011e6:	430a      	orrs	r2, r1
 80011e8:	701a      	strb	r2, [r3, #0]
	}
}
 80011ea:	46c0      	nop			; (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b002      	add	sp, #8
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	200002b4 	.word	0x200002b4
 80011f8:	200003d0 	.word	0x200003d0

080011fc <HAL_ADC_ConvCpltCallback>:

//_____ADC data ready callback_____//
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_IT(hadc);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	0018      	movs	r0, r3
 8001208:	f002 faac 	bl	8003764 <HAL_ADC_Stop_IT>
	flags.meas.measDataReady = 1;
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <HAL_ADC_ConvCpltCallback+0x24>)
 800120e:	7d1a      	ldrb	r2, [r3, #20]
 8001210:	2104      	movs	r1, #4
 8001212:	430a      	orrs	r2, r1
 8001214:	751a      	strb	r2, [r3, #20]
}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	46bd      	mov	sp, r7
 800121a:	b002      	add	sp, #8
 800121c:	bd80      	pop	{r7, pc}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	200003d0 	.word	0x200003d0

08001224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001224:	b590      	push	{r4, r7, lr}
 8001226:	b087      	sub	sp, #28
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800122a:	f002 f861 	bl	80032f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  //__Buffery___//
  //dispBuffer = createBuffer(100);
  //regBuffer = createBuffer(100);
  USB_Rx_Buffer = createBuffer(500);
 800122e:	23fa      	movs	r3, #250	; 0xfa
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	0018      	movs	r0, r3
 8001234:	f001 f91f 	bl	8002476 <createBuffer>
 8001238:	0002      	movs	r2, r0
 800123a:	4b35      	ldr	r3, [pc, #212]	; (8001310 <main+0xec>)
 800123c:	601a      	str	r2, [r3, #0]
  USB_Tx_Buffer = createBuffer(500);
 800123e:	23fa      	movs	r3, #250	; 0xfa
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	0018      	movs	r0, r3
 8001244:	f001 f917 	bl	8002476 <createBuffer>
 8001248:	0002      	movs	r2, r0
 800124a:	4b32      	ldr	r3, [pc, #200]	; (8001314 <main+0xf0>)
 800124c:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124e:	f000 f86d 	bl	800132c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001252:	f000 fab7 	bl	80017c4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001256:	f00b fcb5 	bl	800cbc4 <MX_USB_DEVICE_Init>
  MX_ADC_Init();
 800125a:	f000 f8d3 	bl	8001404 <MX_ADC_Init>
  MX_SPI1_Init();
 800125e:	f000 f9ef 	bl	8001640 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001262:	f000 fa7f 	bl	8001764 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 8001266:	f000 fa31 	bl	80016cc <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Inicializace displeje___//
  dispInit();
 800126a:	f7ff fe65 	bl	8000f38 <dispInit>
  char line1[] = "Zahoreni";
 800126e:	200c      	movs	r0, #12
 8001270:	183b      	adds	r3, r7, r0
 8001272:	4a29      	ldr	r2, [pc, #164]	; (8001318 <main+0xf4>)
 8001274:	ca12      	ldmia	r2!, {r1, r4}
 8001276:	c312      	stmia	r3!, {r1, r4}
 8001278:	7812      	ldrb	r2, [r2, #0]
 800127a:	701a      	strb	r2, [r3, #0]
  char line2[] = "zdroju";
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	4a27      	ldr	r2, [pc, #156]	; (800131c <main+0xf8>)
 8001280:	6811      	ldr	r1, [r2, #0]
 8001282:	6019      	str	r1, [r3, #0]
 8001284:	8891      	ldrh	r1, [r2, #4]
 8001286:	8099      	strh	r1, [r3, #4]
 8001288:	7992      	ldrb	r2, [r2, #6]
 800128a:	719a      	strb	r2, [r3, #6]
  writeRow(line1, 8, 1, CENTER);
 800128c:	1838      	adds	r0, r7, r0
 800128e:	2302      	movs	r3, #2
 8001290:	2201      	movs	r2, #1
 8001292:	2108      	movs	r1, #8
 8001294:	f7ff fed0 	bl	8001038 <writeRow>
  writeRow(line2, 6, 2, CENTER);
 8001298:	1d38      	adds	r0, r7, #4
 800129a:	2302      	movs	r3, #2
 800129c:	2202      	movs	r2, #2
 800129e:	2106      	movs	r1, #6
 80012a0:	f7ff feca 	bl	8001038 <writeRow>

  LOAD_MIN_OFF;
 80012a4:	4b1e      	ldr	r3, [pc, #120]	; (8001320 <main+0xfc>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	2180      	movs	r1, #128	; 0x80
 80012aa:	0018      	movs	r0, r3
 80012ac:	f003 f8b9 	bl	8004422 <HAL_GPIO_WritePin>
  LOAD_MAX_OFF;
 80012b0:	4b1b      	ldr	r3, [pc, #108]	; (8001320 <main+0xfc>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	2140      	movs	r1, #64	; 0x40
 80012b6:	0018      	movs	r0, r3
 80012b8:	f003 f8b3 	bl	8004422 <HAL_GPIO_WritePin>

  if(regInit() != REG_OK)	//inicializace shift registrů
 80012bc:	f001 fa2c 	bl	8002718 <regInit>
 80012c0:	1e03      	subs	r3, r0, #0
 80012c2:	d004      	beq.n	80012ce <main+0xaa>
  {
	  flags.conErr = 1;
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <main+0x100>)
 80012c6:	7e1a      	ldrb	r2, [r3, #24]
 80012c8:	2140      	movs	r1, #64	; 0x40
 80012ca:	430a      	orrs	r2, r1
 80012cc:	761a      	strb	r2, [r3, #24]
	  //Odešli zprávu do PC
  }

  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <main+0x104>)
 80012d0:	0018      	movs	r0, r3
 80012d2:	f006 fb15 	bl	8007900 <HAL_TIM_Base_Start_IT>

  flags.ui.longBeep = 1;
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <main+0x100>)
 80012d8:	7c1a      	ldrb	r2, [r3, #16]
 80012da:	2102      	movs	r1, #2
 80012dc:	430a      	orrs	r2, r1
 80012de:	741a      	strb	r2, [r3, #16]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flags.time.ten_ms)	// 10 ms
 80012e0:	4b10      	ldr	r3, [pc, #64]	; (8001324 <main+0x100>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	07db      	lsls	r3, r3, #31
 80012e6:	0fdb      	lsrs	r3, r3, #31
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f8      	beq.n	80012e0 <main+0xbc>
	  {
		  clkHandler();
 80012ee:	f000 fb67 	bl	80019c0 <clkHandler>
		  buttonDebounce();
 80012f2:	f000 fbe3 	bl	8001abc <buttonDebounce>
		  comHandler();
 80012f6:	f7ff f88f 	bl	8000418 <comHandler>
		  calibHandler();
 80012fa:	f001 f81d 	bl	8002338 <calibHandler>
		  dispHandler();
 80012fe:	f000 fc65 	bl	8001bcc <dispHandler>
		  UI_Handler();
 8001302:	f000 fe3f 	bl	8001f84 <UI_Handler>
		  testHandler();
 8001306:	f001 fcb7 	bl	8002c78 <testHandler>
		  measHandler();
 800130a:	f000 ff63 	bl	80021d4 <measHandler>
	  if(flags.time.ten_ms)	// 10 ms
 800130e:	e7e7      	b.n	80012e0 <main+0xbc>
 8001310:	20000eb4 	.word	0x20000eb4
 8001314:	200001fc 	.word	0x200001fc
 8001318:	0800e01c 	.word	0x0800e01c
 800131c:	0800e028 	.word	0x0800e028
 8001320:	48000800 	.word	0x48000800
 8001324:	200003d0 	.word	0x200003d0
 8001328:	200002b4 	.word	0x200002b4

0800132c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800132c:	b590      	push	{r4, r7, lr}
 800132e:	b099      	sub	sp, #100	; 0x64
 8001330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001332:	242c      	movs	r4, #44	; 0x2c
 8001334:	193b      	adds	r3, r7, r4
 8001336:	0018      	movs	r0, r3
 8001338:	2334      	movs	r3, #52	; 0x34
 800133a:	001a      	movs	r2, r3
 800133c:	2100      	movs	r1, #0
 800133e:	f00c f9ee 	bl	800d71e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001342:	231c      	movs	r3, #28
 8001344:	18fb      	adds	r3, r7, r3
 8001346:	0018      	movs	r0, r3
 8001348:	2310      	movs	r3, #16
 800134a:	001a      	movs	r2, r3
 800134c:	2100      	movs	r1, #0
 800134e:	f00c f9e6 	bl	800d71e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001352:	003b      	movs	r3, r7
 8001354:	0018      	movs	r0, r3
 8001356:	231c      	movs	r3, #28
 8001358:	001a      	movs	r2, r3
 800135a:	2100      	movs	r1, #0
 800135c:	f00c f9df 	bl	800d71e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8001360:	0021      	movs	r1, r4
 8001362:	187b      	adds	r3, r7, r1
 8001364:	2232      	movs	r2, #50	; 0x32
 8001366:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001368:	187b      	adds	r3, r7, r1
 800136a:	2201      	movs	r2, #1
 800136c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800136e:	187b      	adds	r3, r7, r1
 8001370:	2201      	movs	r2, #1
 8001372:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001374:	187b      	adds	r3, r7, r1
 8001376:	2201      	movs	r2, #1
 8001378:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800137a:	187b      	adds	r3, r7, r1
 800137c:	2210      	movs	r2, #16
 800137e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001380:	187b      	adds	r3, r7, r1
 8001382:	2210      	movs	r2, #16
 8001384:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001386:	187b      	adds	r3, r7, r1
 8001388:	2202      	movs	r2, #2
 800138a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800138c:	187b      	adds	r3, r7, r1
 800138e:	2280      	movs	r2, #128	; 0x80
 8001390:	0212      	lsls	r2, r2, #8
 8001392:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001394:	187b      	adds	r3, r7, r1
 8001396:	2200      	movs	r2, #0
 8001398:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800139a:	187b      	adds	r3, r7, r1
 800139c:	2200      	movs	r2, #0
 800139e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a0:	187b      	adds	r3, r7, r1
 80013a2:	0018      	movs	r0, r3
 80013a4:	f004 ff04 	bl	80061b0 <HAL_RCC_OscConfig>
 80013a8:	1e03      	subs	r3, r0, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80013ac:	f001 f85e 	bl	800246c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b0:	211c      	movs	r1, #28
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	2207      	movs	r2, #7
 80013b6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	2202      	movs	r2, #2
 80013bc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013c4:	187b      	adds	r3, r7, r1
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013ca:	187b      	adds	r3, r7, r1
 80013cc:	2100      	movs	r1, #0
 80013ce:	0018      	movs	r0, r3
 80013d0:	f005 fa74 	bl	80068bc <HAL_RCC_ClockConfig>
 80013d4:	1e03      	subs	r3, r0, #0
 80013d6:	d001      	beq.n	80013dc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80013d8:	f001 f848 	bl	800246c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013dc:	003b      	movs	r3, r7
 80013de:	2280      	movs	r2, #128	; 0x80
 80013e0:	0292      	lsls	r2, r2, #10
 80013e2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80013e4:	003b      	movs	r3, r7
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ea:	003b      	movs	r3, r7
 80013ec:	0018      	movs	r0, r3
 80013ee:	f005 fbe1 	bl	8006bb4 <HAL_RCCEx_PeriphCLKConfig>
 80013f2:	1e03      	subs	r3, r0, #0
 80013f4:	d001      	beq.n	80013fa <SystemClock_Config+0xce>
  {
    Error_Handler();
 80013f6:	f001 f839 	bl	800246c <Error_Handler>
  }
}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b019      	add	sp, #100	; 0x64
 8001400:	bd90      	pop	{r4, r7, pc}
	...

08001404 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	0018      	movs	r0, r3
 800140e:	230c      	movs	r3, #12
 8001410:	001a      	movs	r2, r3
 8001412:	2100      	movs	r1, #0
 8001414:	f00c f983 	bl	800d71e <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001418:	4b87      	ldr	r3, [pc, #540]	; (8001638 <MX_ADC_Init+0x234>)
 800141a:	4a88      	ldr	r2, [pc, #544]	; (800163c <MX_ADC_Init+0x238>)
 800141c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800141e:	4b86      	ldr	r3, [pc, #536]	; (8001638 <MX_ADC_Init+0x234>)
 8001420:	2200      	movs	r2, #0
 8001422:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001424:	4b84      	ldr	r3, [pc, #528]	; (8001638 <MX_ADC_Init+0x234>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800142a:	4b83      	ldr	r3, [pc, #524]	; (8001638 <MX_ADC_Init+0x234>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001430:	4b81      	ldr	r3, [pc, #516]	; (8001638 <MX_ADC_Init+0x234>)
 8001432:	2201      	movs	r2, #1
 8001434:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001436:	4b80      	ldr	r3, [pc, #512]	; (8001638 <MX_ADC_Init+0x234>)
 8001438:	2204      	movs	r2, #4
 800143a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800143c:	4b7e      	ldr	r3, [pc, #504]	; (8001638 <MX_ADC_Init+0x234>)
 800143e:	2200      	movs	r2, #0
 8001440:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001442:	4b7d      	ldr	r3, [pc, #500]	; (8001638 <MX_ADC_Init+0x234>)
 8001444:	2200      	movs	r2, #0
 8001446:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001448:	4b7b      	ldr	r3, [pc, #492]	; (8001638 <MX_ADC_Init+0x234>)
 800144a:	2200      	movs	r2, #0
 800144c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800144e:	4b7a      	ldr	r3, [pc, #488]	; (8001638 <MX_ADC_Init+0x234>)
 8001450:	2200      	movs	r2, #0
 8001452:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001454:	4b78      	ldr	r3, [pc, #480]	; (8001638 <MX_ADC_Init+0x234>)
 8001456:	22c2      	movs	r2, #194	; 0xc2
 8001458:	32ff      	adds	r2, #255	; 0xff
 800145a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800145c:	4b76      	ldr	r3, [pc, #472]	; (8001638 <MX_ADC_Init+0x234>)
 800145e:	2200      	movs	r2, #0
 8001460:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001462:	4b75      	ldr	r3, [pc, #468]	; (8001638 <MX_ADC_Init+0x234>)
 8001464:	2224      	movs	r2, #36	; 0x24
 8001466:	2100      	movs	r1, #0
 8001468:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800146a:	4b73      	ldr	r3, [pc, #460]	; (8001638 <MX_ADC_Init+0x234>)
 800146c:	2201      	movs	r2, #1
 800146e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001470:	4b71      	ldr	r3, [pc, #452]	; (8001638 <MX_ADC_Init+0x234>)
 8001472:	0018      	movs	r0, r3
 8001474:	f001 ffc4 	bl	8003400 <HAL_ADC_Init>
 8001478:	1e03      	subs	r3, r0, #0
 800147a:	d001      	beq.n	8001480 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800147c:	f000 fff6 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	2280      	movs	r2, #128	; 0x80
 800148a:	0152      	lsls	r2, r2, #5
 800148c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2205      	movs	r2, #5
 8001492:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001494:	1d3a      	adds	r2, r7, #4
 8001496:	4b68      	ldr	r3, [pc, #416]	; (8001638 <MX_ADC_Init+0x234>)
 8001498:	0011      	movs	r1, r2
 800149a:	0018      	movs	r0, r3
 800149c:	f002 fa80 	bl	80039a0 <HAL_ADC_ConfigChannel>
 80014a0:	1e03      	subs	r3, r0, #0
 80014a2:	d001      	beq.n	80014a8 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80014a4:	f000 ffe2 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014ae:	1d3a      	adds	r2, r7, #4
 80014b0:	4b61      	ldr	r3, [pc, #388]	; (8001638 <MX_ADC_Init+0x234>)
 80014b2:	0011      	movs	r1, r2
 80014b4:	0018      	movs	r0, r3
 80014b6:	f002 fa73 	bl	80039a0 <HAL_ADC_ConfigChannel>
 80014ba:	1e03      	subs	r3, r0, #0
 80014bc:	d001      	beq.n	80014c2 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80014be:	f000 ffd5 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2202      	movs	r2, #2
 80014c6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014c8:	1d3a      	adds	r2, r7, #4
 80014ca:	4b5b      	ldr	r3, [pc, #364]	; (8001638 <MX_ADC_Init+0x234>)
 80014cc:	0011      	movs	r1, r2
 80014ce:	0018      	movs	r0, r3
 80014d0:	f002 fa66 	bl	80039a0 <HAL_ADC_ConfigChannel>
 80014d4:	1e03      	subs	r3, r0, #0
 80014d6:	d001      	beq.n	80014dc <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 80014d8:	f000 ffc8 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	2203      	movs	r2, #3
 80014e0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014e2:	1d3a      	adds	r2, r7, #4
 80014e4:	4b54      	ldr	r3, [pc, #336]	; (8001638 <MX_ADC_Init+0x234>)
 80014e6:	0011      	movs	r1, r2
 80014e8:	0018      	movs	r0, r3
 80014ea:	f002 fa59 	bl	80039a0 <HAL_ADC_ConfigChannel>
 80014ee:	1e03      	subs	r3, r0, #0
 80014f0:	d001      	beq.n	80014f6 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 80014f2:	f000 ffbb 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	2204      	movs	r2, #4
 80014fa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014fc:	1d3a      	adds	r2, r7, #4
 80014fe:	4b4e      	ldr	r3, [pc, #312]	; (8001638 <MX_ADC_Init+0x234>)
 8001500:	0011      	movs	r1, r2
 8001502:	0018      	movs	r0, r3
 8001504:	f002 fa4c 	bl	80039a0 <HAL_ADC_ConfigChannel>
 8001508:	1e03      	subs	r3, r0, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 800150c:	f000 ffae 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2205      	movs	r2, #5
 8001514:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001516:	1d3a      	adds	r2, r7, #4
 8001518:	4b47      	ldr	r3, [pc, #284]	; (8001638 <MX_ADC_Init+0x234>)
 800151a:	0011      	movs	r1, r2
 800151c:	0018      	movs	r0, r3
 800151e:	f002 fa3f 	bl	80039a0 <HAL_ADC_ConfigChannel>
 8001522:	1e03      	subs	r3, r0, #0
 8001524:	d001      	beq.n	800152a <MX_ADC_Init+0x126>
  {
    Error_Handler();
 8001526:	f000 ffa1 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2206      	movs	r2, #6
 800152e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001530:	1d3a      	adds	r2, r7, #4
 8001532:	4b41      	ldr	r3, [pc, #260]	; (8001638 <MX_ADC_Init+0x234>)
 8001534:	0011      	movs	r1, r2
 8001536:	0018      	movs	r0, r3
 8001538:	f002 fa32 	bl	80039a0 <HAL_ADC_ConfigChannel>
 800153c:	1e03      	subs	r3, r0, #0
 800153e:	d001      	beq.n	8001544 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8001540:	f000 ff94 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	2207      	movs	r2, #7
 8001548:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800154a:	1d3a      	adds	r2, r7, #4
 800154c:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <MX_ADC_Init+0x234>)
 800154e:	0011      	movs	r1, r2
 8001550:	0018      	movs	r0, r3
 8001552:	f002 fa25 	bl	80039a0 <HAL_ADC_ConfigChannel>
 8001556:	1e03      	subs	r3, r0, #0
 8001558:	d001      	beq.n	800155e <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 800155a:	f000 ff87 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	2208      	movs	r2, #8
 8001562:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001564:	1d3a      	adds	r2, r7, #4
 8001566:	4b34      	ldr	r3, [pc, #208]	; (8001638 <MX_ADC_Init+0x234>)
 8001568:	0011      	movs	r1, r2
 800156a:	0018      	movs	r0, r3
 800156c:	f002 fa18 	bl	80039a0 <HAL_ADC_ConfigChannel>
 8001570:	1e03      	subs	r3, r0, #0
 8001572:	d001      	beq.n	8001578 <MX_ADC_Init+0x174>
  {
    Error_Handler();
 8001574:	f000 ff7a 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2209      	movs	r2, #9
 800157c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800157e:	1d3a      	adds	r2, r7, #4
 8001580:	4b2d      	ldr	r3, [pc, #180]	; (8001638 <MX_ADC_Init+0x234>)
 8001582:	0011      	movs	r1, r2
 8001584:	0018      	movs	r0, r3
 8001586:	f002 fa0b 	bl	80039a0 <HAL_ADC_ConfigChannel>
 800158a:	1e03      	subs	r3, r0, #0
 800158c:	d001      	beq.n	8001592 <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 800158e:	f000 ff6d 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	220a      	movs	r2, #10
 8001596:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001598:	1d3a      	adds	r2, r7, #4
 800159a:	4b27      	ldr	r3, [pc, #156]	; (8001638 <MX_ADC_Init+0x234>)
 800159c:	0011      	movs	r1, r2
 800159e:	0018      	movs	r0, r3
 80015a0:	f002 f9fe 	bl	80039a0 <HAL_ADC_ConfigChannel>
 80015a4:	1e03      	subs	r3, r0, #0
 80015a6:	d001      	beq.n	80015ac <MX_ADC_Init+0x1a8>
  {
    Error_Handler();
 80015a8:	f000 ff60 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	220b      	movs	r2, #11
 80015b0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015b2:	1d3a      	adds	r2, r7, #4
 80015b4:	4b20      	ldr	r3, [pc, #128]	; (8001638 <MX_ADC_Init+0x234>)
 80015b6:	0011      	movs	r1, r2
 80015b8:	0018      	movs	r0, r3
 80015ba:	f002 f9f1 	bl	80039a0 <HAL_ADC_ConfigChannel>
 80015be:	1e03      	subs	r3, r0, #0
 80015c0:	d001      	beq.n	80015c6 <MX_ADC_Init+0x1c2>
  {
    Error_Handler();
 80015c2:	f000 ff53 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	220c      	movs	r2, #12
 80015ca:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015cc:	1d3a      	adds	r2, r7, #4
 80015ce:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <MX_ADC_Init+0x234>)
 80015d0:	0011      	movs	r1, r2
 80015d2:	0018      	movs	r0, r3
 80015d4:	f002 f9e4 	bl	80039a0 <HAL_ADC_ConfigChannel>
 80015d8:	1e03      	subs	r3, r0, #0
 80015da:	d001      	beq.n	80015e0 <MX_ADC_Init+0x1dc>
  {
    Error_Handler();
 80015dc:	f000 ff46 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	220d      	movs	r2, #13
 80015e4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015e6:	1d3a      	adds	r2, r7, #4
 80015e8:	4b13      	ldr	r3, [pc, #76]	; (8001638 <MX_ADC_Init+0x234>)
 80015ea:	0011      	movs	r1, r2
 80015ec:	0018      	movs	r0, r3
 80015ee:	f002 f9d7 	bl	80039a0 <HAL_ADC_ConfigChannel>
 80015f2:	1e03      	subs	r3, r0, #0
 80015f4:	d001      	beq.n	80015fa <MX_ADC_Init+0x1f6>
  {
    Error_Handler();
 80015f6:	f000 ff39 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	220e      	movs	r2, #14
 80015fe:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001600:	1d3a      	adds	r2, r7, #4
 8001602:	4b0d      	ldr	r3, [pc, #52]	; (8001638 <MX_ADC_Init+0x234>)
 8001604:	0011      	movs	r1, r2
 8001606:	0018      	movs	r0, r3
 8001608:	f002 f9ca 	bl	80039a0 <HAL_ADC_ConfigChannel>
 800160c:	1e03      	subs	r3, r0, #0
 800160e:	d001      	beq.n	8001614 <MX_ADC_Init+0x210>
  {
    Error_Handler();
 8001610:	f000 ff2c 	bl	800246c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	220f      	movs	r2, #15
 8001618:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800161a:	1d3a      	adds	r2, r7, #4
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <MX_ADC_Init+0x234>)
 800161e:	0011      	movs	r1, r2
 8001620:	0018      	movs	r0, r3
 8001622:	f002 f9bd 	bl	80039a0 <HAL_ADC_ConfigChannel>
 8001626:	1e03      	subs	r3, r0, #0
 8001628:	d001      	beq.n	800162e <MX_ADC_Init+0x22a>
  {
    Error_Handler();
 800162a:	f000 ff1f 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	46bd      	mov	sp, r7
 8001632:	b004      	add	sp, #16
 8001634:	bd80      	pop	{r7, pc}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	20000210 	.word	0x20000210
 800163c:	40012400 	.word	0x40012400

08001640 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001644:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <MX_SPI1_Init+0x80>)
 8001646:	4a1f      	ldr	r2, [pc, #124]	; (80016c4 <MX_SPI1_Init+0x84>)
 8001648:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800164a:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <MX_SPI1_Init+0x80>)
 800164c:	2282      	movs	r2, #130	; 0x82
 800164e:	0052      	lsls	r2, r2, #1
 8001650:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001652:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <MX_SPI1_Init+0x80>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <MX_SPI1_Init+0x80>)
 800165a:	22e0      	movs	r2, #224	; 0xe0
 800165c:	00d2      	lsls	r2, r2, #3
 800165e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001660:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <MX_SPI1_Init+0x80>)
 8001662:	2202      	movs	r2, #2
 8001664:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001666:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <MX_SPI1_Init+0x80>)
 8001668:	2201      	movs	r2, #1
 800166a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <MX_SPI1_Init+0x80>)
 800166e:	2280      	movs	r2, #128	; 0x80
 8001670:	0092      	lsls	r2, r2, #2
 8001672:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <MX_SPI1_Init+0x80>)
 8001676:	2230      	movs	r2, #48	; 0x30
 8001678:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_SPI1_Init+0x80>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <MX_SPI1_Init+0x80>)
 8001682:	2200      	movs	r2, #0
 8001684:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_SPI1_Init+0x80>)
 8001688:	2200      	movs	r2, #0
 800168a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_SPI1_Init+0x80>)
 800168e:	2207      	movs	r2, #7
 8001690:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <MX_SPI1_Init+0x80>)
 8001694:	2200      	movs	r2, #0
 8001696:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_SPI1_Init+0x80>)
 800169a:	2200      	movs	r2, #0
 800169c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <MX_SPI1_Init+0x80>)
 80016a0:	0018      	movs	r0, r3
 80016a2:	f005 fb85 	bl	8006db0 <HAL_SPI_Init>
 80016a6:	1e03      	subs	r3, r0, #0
 80016a8:	d001      	beq.n	80016ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80016aa:	f000 fedf 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <MX_SPI1_Init+0x88>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	2140      	movs	r1, #64	; 0x40
 80016b4:	0018      	movs	r0, r3
 80016b6:	f002 feb4 	bl	8004422 <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000250 	.word	0x20000250
 80016c4:	40013000 	.word	0x40013000
 80016c8:	48000400 	.word	0x48000400

080016cc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	0018      	movs	r0, r3
 80016d6:	231c      	movs	r3, #28
 80016d8:	001a      	movs	r2, r3
 80016da:	2100      	movs	r1, #0
 80016dc:	f00c f81f 	bl	800d71e <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80016e0:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <MX_TIM14_Init+0x8c>)
 80016e2:	4a1e      	ldr	r2, [pc, #120]	; (800175c <MX_TIM14_Init+0x90>)
 80016e4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16-1;
 80016e6:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <MX_TIM14_Init+0x8c>)
 80016e8:	220f      	movs	r2, #15
 80016ea:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <MX_TIM14_Init+0x8c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <MX_TIM14_Init+0x8c>)
 80016f4:	4a1a      	ldr	r2, [pc, #104]	; (8001760 <MX_TIM14_Init+0x94>)
 80016f6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f8:	4b17      	ldr	r3, [pc, #92]	; (8001758 <MX_TIM14_Init+0x8c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fe:	4b16      	ldr	r3, [pc, #88]	; (8001758 <MX_TIM14_Init+0x8c>)
 8001700:	2200      	movs	r2, #0
 8001702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_TIM14_Init+0x8c>)
 8001706:	0018      	movs	r0, r3
 8001708:	f006 f8aa 	bl	8007860 <HAL_TIM_Base_Init>
 800170c:	1e03      	subs	r3, r0, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8001710:	f000 feac 	bl	800246c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8001714:	4b10      	ldr	r3, [pc, #64]	; (8001758 <MX_TIM14_Init+0x8c>)
 8001716:	0018      	movs	r0, r3
 8001718:	f006 f944 	bl	80079a4 <HAL_TIM_OC_Init>
 800171c:	1e03      	subs	r3, r0, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8001720:	f000 fea4 	bl	800246c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	2200      	movs	r2, #0
 800172e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800173c:	1d39      	adds	r1, r7, #4
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_TIM14_Init+0x8c>)
 8001740:	2200      	movs	r2, #0
 8001742:	0018      	movs	r0, r3
 8001744:	f006 fa9c 	bl	8007c80 <HAL_TIM_OC_ConfigChannel>
 8001748:	1e03      	subs	r3, r0, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800174c:	f000 fe8e 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001750:	46c0      	nop			; (mov r8, r8)
 8001752:	46bd      	mov	sp, r7
 8001754:	b008      	add	sp, #32
 8001756:	bd80      	pop	{r7, pc}
 8001758:	200002b4 	.word	0x200002b4
 800175c:	40002000 	.word	0x40002000
 8001760:	0000270f 	.word	0x0000270f

08001764 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MX_USART3_UART_Init+0x58>)
 800176a:	4a15      	ldr	r2, [pc, #84]	; (80017c0 <MX_USART3_UART_Init+0x5c>)
 800176c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <MX_USART3_UART_Init+0x58>)
 8001770:	2296      	movs	r2, #150	; 0x96
 8001772:	0212      	lsls	r2, r2, #8
 8001774:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_USART3_UART_Init+0x58>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_USART3_UART_Init+0x58>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_USART3_UART_Init+0x58>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_USART3_UART_Init+0x58>)
 800178a:	220c      	movs	r2, #12
 800178c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178e:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <MX_USART3_UART_Init+0x58>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_USART3_UART_Init+0x58>)
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800179a:	4b08      	ldr	r3, [pc, #32]	; (80017bc <MX_USART3_UART_Init+0x58>)
 800179c:	2200      	movs	r2, #0
 800179e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_USART3_UART_Init+0x58>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017a6:	4b05      	ldr	r3, [pc, #20]	; (80017bc <MX_USART3_UART_Init+0x58>)
 80017a8:	0018      	movs	r0, r3
 80017aa:	f006 fd6d 	bl	8008288 <HAL_UART_Init>
 80017ae:	1e03      	subs	r3, r0, #0
 80017b0:	d001      	beq.n	80017b6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80017b2:	f000 fe5b 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200002fc 	.word	0x200002fc
 80017c0:	40004800 	.word	0x40004800

080017c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b08b      	sub	sp, #44	; 0x2c
 80017c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ca:	2414      	movs	r4, #20
 80017cc:	193b      	adds	r3, r7, r4
 80017ce:	0018      	movs	r0, r3
 80017d0:	2314      	movs	r3, #20
 80017d2:	001a      	movs	r2, r3
 80017d4:	2100      	movs	r1, #0
 80017d6:	f00b ffa2 	bl	800d71e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017da:	4b74      	ldr	r3, [pc, #464]	; (80019ac <MX_GPIO_Init+0x1e8>)
 80017dc:	695a      	ldr	r2, [r3, #20]
 80017de:	4b73      	ldr	r3, [pc, #460]	; (80019ac <MX_GPIO_Init+0x1e8>)
 80017e0:	2180      	movs	r1, #128	; 0x80
 80017e2:	03c9      	lsls	r1, r1, #15
 80017e4:	430a      	orrs	r2, r1
 80017e6:	615a      	str	r2, [r3, #20]
 80017e8:	4b70      	ldr	r3, [pc, #448]	; (80019ac <MX_GPIO_Init+0x1e8>)
 80017ea:	695a      	ldr	r2, [r3, #20]
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	03db      	lsls	r3, r3, #15
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f6:	4b6d      	ldr	r3, [pc, #436]	; (80019ac <MX_GPIO_Init+0x1e8>)
 80017f8:	695a      	ldr	r2, [r3, #20]
 80017fa:	4b6c      	ldr	r3, [pc, #432]	; (80019ac <MX_GPIO_Init+0x1e8>)
 80017fc:	2180      	movs	r1, #128	; 0x80
 80017fe:	0309      	lsls	r1, r1, #12
 8001800:	430a      	orrs	r2, r1
 8001802:	615a      	str	r2, [r3, #20]
 8001804:	4b69      	ldr	r3, [pc, #420]	; (80019ac <MX_GPIO_Init+0x1e8>)
 8001806:	695a      	ldr	r2, [r3, #20]
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	031b      	lsls	r3, r3, #12
 800180c:	4013      	ands	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	4b66      	ldr	r3, [pc, #408]	; (80019ac <MX_GPIO_Init+0x1e8>)
 8001814:	695a      	ldr	r2, [r3, #20]
 8001816:	4b65      	ldr	r3, [pc, #404]	; (80019ac <MX_GPIO_Init+0x1e8>)
 8001818:	2180      	movs	r1, #128	; 0x80
 800181a:	0289      	lsls	r1, r1, #10
 800181c:	430a      	orrs	r2, r1
 800181e:	615a      	str	r2, [r3, #20]
 8001820:	4b62      	ldr	r3, [pc, #392]	; (80019ac <MX_GPIO_Init+0x1e8>)
 8001822:	695a      	ldr	r2, [r3, #20]
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	029b      	lsls	r3, r3, #10
 8001828:	4013      	ands	r3, r2
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800182e:	4b5f      	ldr	r3, [pc, #380]	; (80019ac <MX_GPIO_Init+0x1e8>)
 8001830:	695a      	ldr	r2, [r3, #20]
 8001832:	4b5e      	ldr	r3, [pc, #376]	; (80019ac <MX_GPIO_Init+0x1e8>)
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	02c9      	lsls	r1, r1, #11
 8001838:	430a      	orrs	r2, r1
 800183a:	615a      	str	r2, [r3, #20]
 800183c:	4b5b      	ldr	r3, [pc, #364]	; (80019ac <MX_GPIO_Init+0x1e8>)
 800183e:	695a      	ldr	r2, [r3, #20]
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	02db      	lsls	r3, r3, #11
 8001844:	4013      	ands	r3, r2
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800184a:	4b58      	ldr	r3, [pc, #352]	; (80019ac <MX_GPIO_Init+0x1e8>)
 800184c:	695a      	ldr	r2, [r3, #20]
 800184e:	4b57      	ldr	r3, [pc, #348]	; (80019ac <MX_GPIO_Init+0x1e8>)
 8001850:	2180      	movs	r1, #128	; 0x80
 8001852:	0349      	lsls	r1, r1, #13
 8001854:	430a      	orrs	r2, r1
 8001856:	615a      	str	r2, [r3, #20]
 8001858:	4b54      	ldr	r3, [pc, #336]	; (80019ac <MX_GPIO_Init+0x1e8>)
 800185a:	695a      	ldr	r2, [r3, #20]
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	035b      	lsls	r3, r3, #13
 8001860:	4013      	ands	r3, r2
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|SR_CLR_Pin|SR_RCLK_Pin|SR_OE_Pin
 8001866:	4952      	ldr	r1, [pc, #328]	; (80019b0 <MX_GPIO_Init+0x1ec>)
 8001868:	4b52      	ldr	r3, [pc, #328]	; (80019b4 <MX_GPIO_Init+0x1f0>)
 800186a:	2200      	movs	r2, #0
 800186c:	0018      	movs	r0, r3
 800186e:	f002 fdd8 	bl	8004422 <HAL_GPIO_WritePin>
                          |DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin|BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8001872:	239e      	movs	r3, #158	; 0x9e
 8001874:	015b      	lsls	r3, r3, #5
 8001876:	4850      	ldr	r0, [pc, #320]	; (80019b8 <MX_GPIO_Init+0x1f4>)
 8001878:	2200      	movs	r2, #0
 800187a:	0019      	movs	r1, r3
 800187c:	f002 fdd1 	bl	8004422 <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	0219      	lsls	r1, r3, #8
 8001884:	2390      	movs	r3, #144	; 0x90
 8001886:	05db      	lsls	r3, r3, #23
 8001888:	2200      	movs	r2, #0
 800188a:	0018      	movs	r0, r3
 800188c:	f002 fdc9 	bl	8004422 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin SR_CLR_Pin SR_RCLK_Pin SR_OE_Pin
                           DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|SR_CLR_Pin|SR_RCLK_Pin|SR_OE_Pin
 8001890:	193b      	adds	r3, r7, r4
 8001892:	4a47      	ldr	r2, [pc, #284]	; (80019b0 <MX_GPIO_Init+0x1ec>)
 8001894:	601a      	str	r2, [r3, #0]
                          |DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin|BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001896:	193b      	adds	r3, r7, r4
 8001898:	2201      	movs	r2, #1
 800189a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	193b      	adds	r3, r7, r4
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	193b      	adds	r3, r7, r4
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a8:	193b      	adds	r3, r7, r4
 80018aa:	4a42      	ldr	r2, [pc, #264]	; (80019b4 <MX_GPIO_Init+0x1f0>)
 80018ac:	0019      	movs	r1, r3
 80018ae:	0010      	movs	r0, r2
 80018b0:	f002 fc22 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEATER_STATE_Pin */
  GPIO_InitStruct.Pin = HEATER_STATE_Pin;
 80018b4:	0021      	movs	r1, r4
 80018b6:	187b      	adds	r3, r7, r1
 80018b8:	2280      	movs	r2, #128	; 0x80
 80018ba:	0152      	lsls	r2, r2, #5
 80018bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018be:	000c      	movs	r4, r1
 80018c0:	193b      	adds	r3, r7, r4
 80018c2:	2200      	movs	r2, #0
 80018c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	193b      	adds	r3, r7, r4
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HEATER_STATE_GPIO_Port, &GPIO_InitStruct);
 80018cc:	193b      	adds	r3, r7, r4
 80018ce:	4a39      	ldr	r2, [pc, #228]	; (80019b4 <MX_GPIO_Init+0x1f0>)
 80018d0:	0019      	movs	r1, r3
 80018d2:	0010      	movs	r0, r2
 80018d4:	f002 fc10 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 80018d8:	0021      	movs	r1, r4
 80018da:	187b      	adds	r3, r7, r1
 80018dc:	229e      	movs	r2, #158	; 0x9e
 80018de:	0152      	lsls	r2, r2, #5
 80018e0:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e2:	000c      	movs	r4, r1
 80018e4:	193b      	adds	r3, r7, r4
 80018e6:	2201      	movs	r2, #1
 80018e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	193b      	adds	r3, r7, r4
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	193b      	adds	r3, r7, r4
 80018f2:	2200      	movs	r2, #0
 80018f4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f6:	193b      	adds	r3, r7, r4
 80018f8:	4a2f      	ldr	r2, [pc, #188]	; (80019b8 <MX_GPIO_Init+0x1f4>)
 80018fa:	0019      	movs	r1, r3
 80018fc:	0010      	movs	r0, r2
 80018fe:	f002 fbfb 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 8001902:	193b      	adds	r3, r7, r4
 8001904:	22c0      	movs	r2, #192	; 0xc0
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800190a:	193b      	adds	r3, r7, r4
 800190c:	2288      	movs	r2, #136	; 0x88
 800190e:	0352      	lsls	r2, r2, #13
 8001910:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001912:	193b      	adds	r3, r7, r4
 8001914:	2202      	movs	r2, #2
 8001916:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	193a      	adds	r2, r7, r4
 800191a:	2390      	movs	r3, #144	; 0x90
 800191c:	05db      	lsls	r3, r3, #23
 800191e:	0011      	movs	r1, r2
 8001920:	0018      	movs	r0, r3
 8001922:	f002 fbe9 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001926:	193b      	adds	r3, r7, r4
 8001928:	2280      	movs	r2, #128	; 0x80
 800192a:	00d2      	lsls	r2, r2, #3
 800192c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192e:	193b      	adds	r3, r7, r4
 8001930:	2200      	movs	r2, #0
 8001932:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	193b      	adds	r3, r7, r4
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800193a:	193a      	adds	r2, r7, r4
 800193c:	2390      	movs	r3, #144	; 0x90
 800193e:	05db      	lsls	r3, r3, #23
 8001940:	0011      	movs	r1, r2
 8001942:	0018      	movs	r0, r3
 8001944:	f002 fbd8 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 8001948:	0021      	movs	r1, r4
 800194a:	187b      	adds	r3, r7, r1
 800194c:	2280      	movs	r2, #128	; 0x80
 800194e:	0212      	lsls	r2, r2, #8
 8001950:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001952:	000c      	movs	r4, r1
 8001954:	193b      	adds	r3, r7, r4
 8001956:	2201      	movs	r2, #1
 8001958:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	193b      	adds	r3, r7, r4
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	193b      	adds	r3, r7, r4
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 8001966:	193a      	adds	r2, r7, r4
 8001968:	2390      	movs	r3, #144	; 0x90
 800196a:	05db      	lsls	r3, r3, #23
 800196c:	0011      	movs	r1, r2
 800196e:	0018      	movs	r0, r3
 8001970:	f002 fbc2 	bl	80040f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 8001974:	193b      	adds	r3, r7, r4
 8001976:	2204      	movs	r2, #4
 8001978:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800197a:	193b      	adds	r3, r7, r4
 800197c:	2200      	movs	r2, #0
 800197e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	193b      	adds	r3, r7, r4
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 8001986:	193b      	adds	r3, r7, r4
 8001988:	4a0c      	ldr	r2, [pc, #48]	; (80019bc <MX_GPIO_Init+0x1f8>)
 800198a:	0019      	movs	r1, r3
 800198c:	0010      	movs	r0, r2
 800198e:	f002 fbb3 	bl	80040f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	2007      	movs	r0, #7
 8001998:	f002 fafe 	bl	8003f98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800199c:	2007      	movs	r0, #7
 800199e:	f002 fb10 	bl	8003fc2 <HAL_NVIC_EnableIRQ>

}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b00b      	add	sp, #44	; 0x2c
 80019a8:	bd90      	pop	{r4, r7, pc}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	40021000 	.word	0x40021000
 80019b0:	0000e3c4 	.word	0x0000e3c4
 80019b4:	48000400 	.word	0x48000400
 80019b8:	48000800 	.word	0x48000800
 80019bc:	48000c00 	.word	0x48000c00

080019c0 <clkHandler>:

/* USER CODE BEGIN 4 */

//_____Hodiny_____//
 void clkHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	//___nulování všech flagů___//
	flags.time.ten_ms = 0;
 80019c4:	4b3b      	ldr	r3, [pc, #236]	; (8001ab4 <clkHandler+0xf4>)
 80019c6:	781a      	ldrb	r2, [r3, #0]
 80019c8:	2101      	movs	r1, #1
 80019ca:	438a      	bics	r2, r1
 80019cc:	701a      	strb	r2, [r3, #0]
	flags.time.sec	= 0;
 80019ce:	4b39      	ldr	r3, [pc, #228]	; (8001ab4 <clkHandler+0xf4>)
 80019d0:	781a      	ldrb	r2, [r3, #0]
 80019d2:	2102      	movs	r1, #2
 80019d4:	438a      	bics	r2, r1
 80019d6:	701a      	strb	r2, [r3, #0]
	flags.time.min	= 0;
 80019d8:	4b36      	ldr	r3, [pc, #216]	; (8001ab4 <clkHandler+0xf4>)
 80019da:	781a      	ldrb	r2, [r3, #0]
 80019dc:	2104      	movs	r1, #4
 80019de:	438a      	bics	r2, r1
 80019e0:	701a      	strb	r2, [r3, #0]
	flags.time.hour	= 0;
 80019e2:	4b34      	ldr	r3, [pc, #208]	; (8001ab4 <clkHandler+0xf4>)
 80019e4:	781a      	ldrb	r2, [r3, #0]
 80019e6:	2108      	movs	r1, #8
 80019e8:	438a      	bics	r2, r1
 80019ea:	701a      	strb	r2, [r3, #0]

	sysTime[SYSTIME_TEN_MS]++;	//uplynulo dalších 10 ms
 80019ec:	4b32      	ldr	r3, [pc, #200]	; (8001ab8 <clkHandler+0xf8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	4b31      	ldr	r3, [pc, #196]	; (8001ab8 <clkHandler+0xf8>)
 80019f4:	601a      	str	r2, [r3, #0]

#ifdef __DEBUG_FAST__
	if((sysTime[SYSTIME_TEN_MS] % 10) == 0)	//0,1 s
#else
	if((sysTime[SYSTIME_TEN_MS] % 100) == 0)	//1 s
 80019f6:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <clkHandler+0xf8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2164      	movs	r1, #100	; 0x64
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7fe fc1b 	bl	8000238 <__aeabi_uidivmod>
 8001a02:	1e0b      	subs	r3, r1, #0
 8001a04:	d109      	bne.n	8001a1a <clkHandler+0x5a>
#endif
	{
		sysTime[SYSTIME_SEC]++;
 8001a06:	4b2c      	ldr	r3, [pc, #176]	; (8001ab8 <clkHandler+0xf8>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <clkHandler+0xf8>)
 8001a0e:	605a      	str	r2, [r3, #4]
		flags.time.sec = 1;
 8001a10:	4b28      	ldr	r3, [pc, #160]	; (8001ab4 <clkHandler+0xf4>)
 8001a12:	781a      	ldrb	r2, [r3, #0]
 8001a14:	2102      	movs	r1, #2
 8001a16:	430a      	orrs	r2, r1
 8001a18:	701a      	strb	r2, [r3, #0]
	}

	if(flags.time.sec)	//Uplynula 1 s
 8001a1a:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <clkHandler+0xf4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	079b      	lsls	r3, r3, #30
 8001a20:	0fdb      	lsrs	r3, r3, #31
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d042      	beq.n	8001aae <clkHandler+0xee>
	{
		if((sysTime[SYSTIME_SEC] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8001a28:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <clkHandler+0xf8>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	213c      	movs	r1, #60	; 0x3c
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f7fe fc02 	bl	8000238 <__aeabi_uidivmod>
 8001a34:	1e0b      	subs	r3, r1, #0
 8001a36:	d110      	bne.n	8001a5a <clkHandler+0x9a>
 8001a38:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <clkHandler+0xf8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00c      	beq.n	8001a5a <clkHandler+0x9a>
		{
			sysTime[SYSTIME_SEC] = 0;
 8001a40:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <clkHandler+0xf8>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	605a      	str	r2, [r3, #4]
			sysTime[SYSTIME_MIN]++;
 8001a46:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <clkHandler+0xf8>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <clkHandler+0xf8>)
 8001a4e:	609a      	str	r2, [r3, #8]
			flags.time.min = 1;
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <clkHandler+0xf4>)
 8001a52:	781a      	ldrb	r2, [r3, #0]
 8001a54:	2104      	movs	r1, #4
 8001a56:	430a      	orrs	r2, r1
 8001a58:	701a      	strb	r2, [r3, #0]
		}

		if(flags.time.min)	//Uplynula 1 min
 8001a5a:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <clkHandler+0xf4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	075b      	lsls	r3, r3, #29
 8001a60:	0fdb      	lsrs	r3, r3, #31
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d022      	beq.n	8001aae <clkHandler+0xee>
		{
			if((sysTime[SYSTIME_MIN] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8001a68:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <clkHandler+0xf8>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	213c      	movs	r1, #60	; 0x3c
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f7fe fbe2 	bl	8000238 <__aeabi_uidivmod>
 8001a74:	1e0b      	subs	r3, r1, #0
 8001a76:	d11a      	bne.n	8001aae <clkHandler+0xee>
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <clkHandler+0xf8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d016      	beq.n	8001aae <clkHandler+0xee>
			{

				sysTime[SYSTIME_SEC] = 0;
 8001a80:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <clkHandler+0xf8>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	605a      	str	r2, [r3, #4]
				sysTime[SYSTIME_MIN] = 0;
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <clkHandler+0xf8>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
				sysTime[SYSTIME_HOUR]++;
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <clkHandler+0xf8>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	1c5a      	adds	r2, r3, #1
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <clkHandler+0xf8>)
 8001a94:	60da      	str	r2, [r3, #12]
				flags.time.hour = 1;
 8001a96:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <clkHandler+0xf4>)
 8001a98:	781a      	ldrb	r2, [r3, #0]
 8001a9a:	2108      	movs	r1, #8
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	701a      	strb	r2, [r3, #0]
				if(sysTime[SYSTIME_HOUR] >= 23)
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <clkHandler+0xf8>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b16      	cmp	r3, #22
 8001aa6:	d902      	bls.n	8001aae <clkHandler+0xee>
					sysTime[SYSTIME_HOUR] = 0;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <clkHandler+0xf8>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime[SYSTIME_HOUR], sysTime[SYSTIME_MIN], sysTime[SYSTIME_SEC]);
		pushStr(USB_Tx_Buffer, timeStamp, strlen(timeStamp));	//odešli �?as
	}
#endif
}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	200003d0 	.word	0x200003d0
 8001ab8:	200003c0 	.word	0x200003c0

08001abc <buttonDebounce>:

//_____Debounce tla�?ítek_____//
 void buttonDebounce(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	//___nulování flagů___//
	flags.buttons.butt0_ver = 0;
 8001ac0:	4b3f      	ldr	r3, [pc, #252]	; (8001bc0 <buttonDebounce+0x104>)
 8001ac2:	791a      	ldrb	r2, [r3, #4]
 8001ac4:	2102      	movs	r1, #2
 8001ac6:	438a      	bics	r2, r1
 8001ac8:	711a      	strb	r2, [r3, #4]
	flags.buttons.butt1_ver = 0;
 8001aca:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <buttonDebounce+0x104>)
 8001acc:	791a      	ldrb	r2, [r3, #4]
 8001ace:	2108      	movs	r1, #8
 8001ad0:	438a      	bics	r2, r1
 8001ad2:	711a      	strb	r2, [r3, #4]

	if(flags.buttons.butt0_int)	//interrupt tla�?ítka 0
 8001ad4:	4b3a      	ldr	r3, [pc, #232]	; (8001bc0 <buttonDebounce+0x104>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	07db      	lsls	r3, r3, #31
 8001ada:	0fdb      	lsrs	r3, r3, #31
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d031      	beq.n	8001b46 <buttonDebounce+0x8a>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	009a      	lsls	r2, r3, #2
 8001ae6:	2390      	movs	r3, #144	; 0x90
 8001ae8:	05db      	lsls	r3, r3, #23
 8001aea:	0011      	movs	r1, r2
 8001aec:	0018      	movs	r0, r3
 8001aee:	f002 fc7b 	bl	80043e8 <HAL_GPIO_ReadPin>
 8001af2:	0003      	movs	r3, r0
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d107      	bne.n	8001b08 <buttonDebounce+0x4c>
		{
			button0_Debounce++;
 8001af8:	4b32      	ldr	r3, [pc, #200]	; (8001bc4 <buttonDebounce+0x108>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	3301      	adds	r3, #1
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4b30      	ldr	r3, [pc, #192]	; (8001bc4 <buttonDebounce+0x108>)
 8001b04:	701a      	strb	r2, [r3, #0]
 8001b06:	e007      	b.n	8001b18 <buttonDebounce+0x5c>
		}
		else	//pin tla�?ítka na Low -> šlo o zákmit
		{
			button0_Debounce = 0;
 8001b08:	4b2e      	ldr	r3, [pc, #184]	; (8001bc4 <buttonDebounce+0x108>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt0_int = 0;
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <buttonDebounce+0x104>)
 8001b10:	791a      	ldrb	r2, [r3, #4]
 8001b12:	2101      	movs	r1, #1
 8001b14:	438a      	bics	r2, r1
 8001b16:	711a      	strb	r2, [r3, #4]
		}
		if(button0_Debounce >= 5)	//pin tla�?ítka na High 5*10 ms -> ustálený stisk
 8001b18:	4b2a      	ldr	r3, [pc, #168]	; (8001bc4 <buttonDebounce+0x108>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d911      	bls.n	8001b46 <buttonDebounce+0x8a>
		{
			flags.buttons.butt0_ver = 1;
 8001b22:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <buttonDebounce+0x104>)
 8001b24:	791a      	ldrb	r2, [r3, #4]
 8001b26:	2102      	movs	r1, #2
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt0_int = 0;
 8001b2c:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <buttonDebounce+0x104>)
 8001b2e:	791a      	ldrb	r2, [r3, #4]
 8001b30:	2101      	movs	r1, #1
 8001b32:	438a      	bics	r2, r1
 8001b34:	711a      	strb	r2, [r3, #4]
			button0_Debounce = 0;
 8001b36:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <buttonDebounce+0x108>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]

			flags.ui.active = 1;
 8001b3c:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <buttonDebounce+0x104>)
 8001b3e:	7c1a      	ldrb	r2, [r3, #16]
 8001b40:	2120      	movs	r1, #32
 8001b42:	430a      	orrs	r2, r1
 8001b44:	741a      	strb	r2, [r3, #16]
			//writeChar('a', 1, 5);
#endif
		}
	}

	if(flags.buttons.butt1_int)	//interrupt tla�?ítka 1
 8001b46:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <buttonDebounce+0x104>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	075b      	lsls	r3, r3, #29
 8001b4c:	0fdb      	lsrs	r3, r3, #31
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d031      	beq.n	8001bb8 <buttonDebounce+0xfc>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	005a      	lsls	r2, r3, #1
 8001b58:	2390      	movs	r3, #144	; 0x90
 8001b5a:	05db      	lsls	r3, r3, #23
 8001b5c:	0011      	movs	r1, r2
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f002 fc42 	bl	80043e8 <HAL_GPIO_ReadPin>
 8001b64:	0003      	movs	r3, r0
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d107      	bne.n	8001b7a <buttonDebounce+0xbe>
		{
			button1_Debounce++;
 8001b6a:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <buttonDebounce+0x10c>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	3301      	adds	r3, #1
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <buttonDebounce+0x10c>)
 8001b76:	701a      	strb	r2, [r3, #0]
 8001b78:	e007      	b.n	8001b8a <buttonDebounce+0xce>
		}
		else	//pin tla�?ítka na Low -> šlo o zákmit
		{
			button1_Debounce = 0;
 8001b7a:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <buttonDebounce+0x10c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt1_int = 0;
 8001b80:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <buttonDebounce+0x104>)
 8001b82:	791a      	ldrb	r2, [r3, #4]
 8001b84:	2104      	movs	r1, #4
 8001b86:	438a      	bics	r2, r1
 8001b88:	711a      	strb	r2, [r3, #4]
		}
		if(button1_Debounce >= 5)	//pin tla�?ítka na High 5*10 ms -> ustálený stisk
 8001b8a:	4b0f      	ldr	r3, [pc, #60]	; (8001bc8 <buttonDebounce+0x10c>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b04      	cmp	r3, #4
 8001b92:	d911      	bls.n	8001bb8 <buttonDebounce+0xfc>
		{
			flags.buttons.butt1_ver = 1;
 8001b94:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <buttonDebounce+0x104>)
 8001b96:	791a      	ldrb	r2, [r3, #4]
 8001b98:	2108      	movs	r1, #8
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt1_int = 0;
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <buttonDebounce+0x104>)
 8001ba0:	791a      	ldrb	r2, [r3, #4]
 8001ba2:	2104      	movs	r1, #4
 8001ba4:	438a      	bics	r2, r1
 8001ba6:	711a      	strb	r2, [r3, #4]
			button1_Debounce = 0;
 8001ba8:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <buttonDebounce+0x10c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]

			flags.ui.active = 1;
 8001bae:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <buttonDebounce+0x104>)
 8001bb0:	7c1a      	ldrb	r2, [r3, #16]
 8001bb2:	2120      	movs	r1, #32
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	741a      	strb	r2, [r3, #16]
#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
#endif
		}
	}
}
 8001bb8:	46c0      	nop			; (mov r8, r8)
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	200003d0 	.word	0x200003d0
 8001bc4:	200003ec 	.word	0x200003ec
 8001bc8:	200003ed 	.word	0x200003ed

08001bcc <dispHandler>:

//_____Obsluha výtisků textu na displej_____//
 void dispHandler()
{
 8001bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bce:	b0bd      	sub	sp, #244	; 0xf4
 8001bd0:	af02      	add	r7, sp, #8
	char emptyString[] = "                ";
 8001bd2:	25cc      	movs	r5, #204	; 0xcc
 8001bd4:	197b      	adds	r3, r7, r5
 8001bd6:	4ada      	ldr	r2, [pc, #872]	; (8001f40 <dispHandler+0x374>)
 8001bd8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001bda:	c313      	stmia	r3!, {r0, r1, r4}
 8001bdc:	6811      	ldr	r1, [r2, #0]
 8001bde:	6019      	str	r1, [r3, #0]
 8001be0:	7912      	ldrb	r2, [r2, #4]
 8001be2:	711a      	strb	r2, [r3, #4]
	char* strings[4] = {emptyString};
 8001be4:	24bc      	movs	r4, #188	; 0xbc
 8001be6:	193b      	adds	r3, r7, r4
 8001be8:	0018      	movs	r0, r3
 8001bea:	2310      	movs	r3, #16
 8001bec:	001a      	movs	r2, r3
 8001bee:	2100      	movs	r1, #0
 8001bf0:	f00b fd95 	bl	800d71e <memset>
 8001bf4:	193b      	adds	r3, r7, r4
 8001bf6:	197a      	adds	r2, r7, r5
 8001bf8:	601a      	str	r2, [r3, #0]
	ALIGN align[4] = {CENTER};
 8001bfa:	25b8      	movs	r5, #184	; 0xb8
 8001bfc:	197b      	adds	r3, r7, r5
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	197b      	adds	r3, r7, r5
 8001c04:	2202      	movs	r2, #2
 8001c06:	701a      	strb	r2, [r3, #0]
		strings[3] = ADC_value;
		writeRow(strings[3], strlen(strings[3]), 3, align[3]);
	}
#endif

	if(flags.testProgress && !flags.instructions.stopRequest)
 8001c08:	4bce      	ldr	r3, [pc, #824]	; (8001f44 <dispHandler+0x378>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	079b      	lsls	r3, r3, #30
 8001c0e:	0fdb      	lsrs	r3, r3, #31
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d100      	bne.n	8001c18 <dispHandler+0x4c>
 8001c16:	e0f6      	b.n	8001e06 <dispHandler+0x23a>
 8001c18:	4bca      	ldr	r3, [pc, #808]	; (8001f44 <dispHandler+0x378>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	079b      	lsls	r3, r3, #30
 8001c1e:	0fdb      	lsrs	r3, r3, #31
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d000      	beq.n	8001c28 <dispHandler+0x5c>
 8001c26:	e0ee      	b.n	8001e06 <dispHandler+0x23a>
	{
		if(currentPhase() != WAITING)
 8001c28:	f001 f81c 	bl	8002c64 <currentPhase>
 8001c2c:	1e03      	subs	r3, r0, #0
 8001c2e:	d010      	beq.n	8001c52 <dispHandler+0x86>
		{
			char supplyInTestingNum[6];
			sprintf(supplyInTestingNum, "%d/%d", supplyToTest+1, regCount);
 8001c30:	4bc5      	ldr	r3, [pc, #788]	; (8001f48 <dispHandler+0x37c>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	4bc4      	ldr	r3, [pc, #784]	; (8001f4c <dispHandler+0x380>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	49c4      	ldr	r1, [pc, #784]	; (8001f50 <dispHandler+0x384>)
 8001c3e:	26b0      	movs	r6, #176	; 0xb0
 8001c40:	19b8      	adds	r0, r7, r6
 8001c42:	f00b fe69 	bl	800d918 <siprintf>

			strings[0] = supplyInTestingNum;
 8001c46:	193b      	adds	r3, r7, r4
 8001c48:	19ba      	adds	r2, r7, r6
 8001c4a:	601a      	str	r2, [r3, #0]
			align[0] = LEFT;
 8001c4c:	197b      	adds	r3, r7, r5
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
		}

		switch(currentPhase())
 8001c52:	f001 f807 	bl	8002c64 <currentPhase>
 8001c56:	0003      	movs	r3, r0
 8001c58:	2b06      	cmp	r3, #6
 8001c5a:	d900      	bls.n	8001c5e <dispHandler+0x92>
 8001c5c:	e087      	b.n	8001d6e <dispHandler+0x1a2>
 8001c5e:	009a      	lsls	r2, r3, #2
 8001c60:	4bbc      	ldr	r3, [pc, #752]	; (8001f54 <dispHandler+0x388>)
 8001c62:	18d3      	adds	r3, r2, r3
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	469f      	mov	pc, r3
		{
		case START:
		{
			char start1[] = "Spousteni";
 8001c68:	21a4      	movs	r1, #164	; 0xa4
 8001c6a:	187b      	adds	r3, r7, r1
 8001c6c:	4aba      	ldr	r2, [pc, #744]	; (8001f58 <dispHandler+0x38c>)
 8001c6e:	ca11      	ldmia	r2!, {r0, r4}
 8001c70:	c311      	stmia	r3!, {r0, r4}
 8001c72:	8812      	ldrh	r2, [r2, #0]
 8001c74:	801a      	strh	r2, [r3, #0]
			strings[1] = start1;
 8001c76:	23bc      	movs	r3, #188	; 0xbc
 8001c78:	18fb      	adds	r3, r7, r3
 8001c7a:	187a      	adds	r2, r7, r1
 8001c7c:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001c7e:	23b8      	movs	r3, #184	; 0xb8
 8001c80:	18fb      	adds	r3, r7, r3
 8001c82:	2202      	movs	r2, #2
 8001c84:	705a      	strb	r2, [r3, #1]

			break;
 8001c86:	e091      	b.n	8001dac <dispHandler+0x1e0>
		}
		case START_DONE:
		{
			char start1[] = "Spousteni";
 8001c88:	2198      	movs	r1, #152	; 0x98
 8001c8a:	187b      	adds	r3, r7, r1
 8001c8c:	4ab2      	ldr	r2, [pc, #712]	; (8001f58 <dispHandler+0x38c>)
 8001c8e:	ca11      	ldmia	r2!, {r0, r4}
 8001c90:	c311      	stmia	r3!, {r0, r4}
 8001c92:	8812      	ldrh	r2, [r2, #0]
 8001c94:	801a      	strh	r2, [r3, #0]
			char start2[] = "dokonceno";
 8001c96:	208c      	movs	r0, #140	; 0x8c
 8001c98:	183b      	adds	r3, r7, r0
 8001c9a:	4ab0      	ldr	r2, [pc, #704]	; (8001f5c <dispHandler+0x390>)
 8001c9c:	ca30      	ldmia	r2!, {r4, r5}
 8001c9e:	c330      	stmia	r3!, {r4, r5}
 8001ca0:	8812      	ldrh	r2, [r2, #0]
 8001ca2:	801a      	strh	r2, [r3, #0]
			strings[1] = start1;
 8001ca4:	24bc      	movs	r4, #188	; 0xbc
 8001ca6:	193b      	adds	r3, r7, r4
 8001ca8:	187a      	adds	r2, r7, r1
 8001caa:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001cac:	21b8      	movs	r1, #184	; 0xb8
 8001cae:	187b      	adds	r3, r7, r1
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	705a      	strb	r2, [r3, #1]
			strings[2] = start2;
 8001cb4:	193b      	adds	r3, r7, r4
 8001cb6:	183a      	adds	r2, r7, r0
 8001cb8:	609a      	str	r2, [r3, #8]
			align[2] = CENTER;
 8001cba:	187b      	adds	r3, r7, r1
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	709a      	strb	r2, [r3, #2]
			break;
 8001cc0:	e074      	b.n	8001dac <dispHandler+0x1e0>
		}
		case MAIN_TEST:
		{
			char main1[] = "Hlavni test";
 8001cc2:	2180      	movs	r1, #128	; 0x80
 8001cc4:	187b      	adds	r3, r7, r1
 8001cc6:	4aa6      	ldr	r2, [pc, #664]	; (8001f60 <dispHandler+0x394>)
 8001cc8:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001cca:	c331      	stmia	r3!, {r0, r4, r5}
			strings[1] = main1;
 8001ccc:	23bc      	movs	r3, #188	; 0xbc
 8001cce:	18fb      	adds	r3, r7, r3
 8001cd0:	187a      	adds	r2, r7, r1
 8001cd2:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001cd4:	23b8      	movs	r3, #184	; 0xb8
 8001cd6:	18fb      	adds	r3, r7, r3
 8001cd8:	2202      	movs	r2, #2
 8001cda:	705a      	strb	r2, [r3, #1]
			break;
 8001cdc:	e066      	b.n	8001dac <dispHandler+0x1e0>
		}
		case MAIN_TEST_DONE:
		{
			char main1[] = "Hlavni test";
 8001cde:	2174      	movs	r1, #116	; 0x74
 8001ce0:	187b      	adds	r3, r7, r1
 8001ce2:	4a9f      	ldr	r2, [pc, #636]	; (8001f60 <dispHandler+0x394>)
 8001ce4:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001ce6:	c331      	stmia	r3!, {r0, r4, r5}
			char main2[] = "dokoncen";
 8001ce8:	2068      	movs	r0, #104	; 0x68
 8001cea:	183b      	adds	r3, r7, r0
 8001cec:	4a9d      	ldr	r2, [pc, #628]	; (8001f64 <dispHandler+0x398>)
 8001cee:	ca30      	ldmia	r2!, {r4, r5}
 8001cf0:	c330      	stmia	r3!, {r4, r5}
 8001cf2:	7812      	ldrb	r2, [r2, #0]
 8001cf4:	701a      	strb	r2, [r3, #0]
			strings[1] = main1;
 8001cf6:	24bc      	movs	r4, #188	; 0xbc
 8001cf8:	193b      	adds	r3, r7, r4
 8001cfa:	187a      	adds	r2, r7, r1
 8001cfc:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001cfe:	21b8      	movs	r1, #184	; 0xb8
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	2202      	movs	r2, #2
 8001d04:	705a      	strb	r2, [r3, #1]
			strings[2] = main2;
 8001d06:	193b      	adds	r3, r7, r4
 8001d08:	183a      	adds	r2, r7, r0
 8001d0a:	609a      	str	r2, [r3, #8]
			align[2] = CENTER;
 8001d0c:	187b      	adds	r3, r7, r1
 8001d0e:	2202      	movs	r2, #2
 8001d10:	709a      	strb	r2, [r3, #2]
			break;
 8001d12:	e04b      	b.n	8001dac <dispHandler+0x1e0>
		}
		case BATTERY_TEST:
		{
			char bat1[] = "Test baterie";
 8001d14:	2158      	movs	r1, #88	; 0x58
 8001d16:	187b      	adds	r3, r7, r1
 8001d18:	4a93      	ldr	r2, [pc, #588]	; (8001f68 <dispHandler+0x39c>)
 8001d1a:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001d1c:	c331      	stmia	r3!, {r0, r4, r5}
 8001d1e:	7812      	ldrb	r2, [r2, #0]
 8001d20:	701a      	strb	r2, [r3, #0]
			strings[1] = bat1;
 8001d22:	23bc      	movs	r3, #188	; 0xbc
 8001d24:	18fb      	adds	r3, r7, r3
 8001d26:	187a      	adds	r2, r7, r1
 8001d28:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001d2a:	23b8      	movs	r3, #184	; 0xb8
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	2202      	movs	r2, #2
 8001d30:	705a      	strb	r2, [r3, #1]
			break;
 8001d32:	e03b      	b.n	8001dac <dispHandler+0x1e0>
		}
		case BATTERY_TEST_DONE:
		{
			char bat1[] = "Test baterie";
 8001d34:	2148      	movs	r1, #72	; 0x48
 8001d36:	187b      	adds	r3, r7, r1
 8001d38:	4a8b      	ldr	r2, [pc, #556]	; (8001f68 <dispHandler+0x39c>)
 8001d3a:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001d3c:	c331      	stmia	r3!, {r0, r4, r5}
 8001d3e:	7812      	ldrb	r2, [r2, #0]
 8001d40:	701a      	strb	r2, [r3, #0]
			char bat2[] = "dokoncen";
 8001d42:	203c      	movs	r0, #60	; 0x3c
 8001d44:	183b      	adds	r3, r7, r0
 8001d46:	4a87      	ldr	r2, [pc, #540]	; (8001f64 <dispHandler+0x398>)
 8001d48:	ca30      	ldmia	r2!, {r4, r5}
 8001d4a:	c330      	stmia	r3!, {r4, r5}
 8001d4c:	7812      	ldrb	r2, [r2, #0]
 8001d4e:	701a      	strb	r2, [r3, #0]
			strings[1] = bat1;
 8001d50:	24bc      	movs	r4, #188	; 0xbc
 8001d52:	193b      	adds	r3, r7, r4
 8001d54:	187a      	adds	r2, r7, r1
 8001d56:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001d58:	21b8      	movs	r1, #184	; 0xb8
 8001d5a:	187b      	adds	r3, r7, r1
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	705a      	strb	r2, [r3, #1]
			strings[2] = bat2;
 8001d60:	193b      	adds	r3, r7, r4
 8001d62:	183a      	adds	r2, r7, r0
 8001d64:	609a      	str	r2, [r3, #8]
			align[2] = CENTER;
 8001d66:	187b      	adds	r3, r7, r1
 8001d68:	2202      	movs	r2, #2
 8001d6a:	709a      	strb	r2, [r3, #2]
			break;
 8001d6c:	e01e      	b.n	8001dac <dispHandler+0x1e0>
		}
		default:
		{
			char default1[] = "Zahoreni";
 8001d6e:	2030      	movs	r0, #48	; 0x30
 8001d70:	183b      	adds	r3, r7, r0
 8001d72:	4a7e      	ldr	r2, [pc, #504]	; (8001f6c <dispHandler+0x3a0>)
 8001d74:	ca12      	ldmia	r2!, {r1, r4}
 8001d76:	c312      	stmia	r3!, {r1, r4}
 8001d78:	7812      	ldrb	r2, [r2, #0]
 8001d7a:	701a      	strb	r2, [r3, #0]
			char default2[] = "zdroju";
 8001d7c:	2428      	movs	r4, #40	; 0x28
 8001d7e:	193b      	adds	r3, r7, r4
 8001d80:	4a7b      	ldr	r2, [pc, #492]	; (8001f70 <dispHandler+0x3a4>)
 8001d82:	6811      	ldr	r1, [r2, #0]
 8001d84:	6019      	str	r1, [r3, #0]
 8001d86:	8891      	ldrh	r1, [r2, #4]
 8001d88:	8099      	strh	r1, [r3, #4]
 8001d8a:	7992      	ldrb	r2, [r2, #6]
 8001d8c:	719a      	strb	r2, [r3, #6]
			strings[1] = default1;
 8001d8e:	21bc      	movs	r1, #188	; 0xbc
 8001d90:	187b      	adds	r3, r7, r1
 8001d92:	183a      	adds	r2, r7, r0
 8001d94:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001d96:	20b8      	movs	r0, #184	; 0xb8
 8001d98:	183b      	adds	r3, r7, r0
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	705a      	strb	r2, [r3, #1]
			strings[2] = default2;
 8001d9e:	187b      	adds	r3, r7, r1
 8001da0:	193a      	adds	r2, r7, r4
 8001da2:	609a      	str	r2, [r3, #8]
			align[2] = CENTER;
 8001da4:	183b      	adds	r3, r7, r0
 8001da6:	2202      	movs	r2, #2
 8001da8:	709a      	strb	r2, [r3, #2]

			break;
 8001daa:	46c0      	nop			; (mov r8, r8)
		}
		}

		for(int i = 0; i < 4; i++)
 8001dac:	2300      	movs	r3, #0
 8001dae:	22e4      	movs	r2, #228	; 0xe4
 8001db0:	18ba      	adds	r2, r7, r2
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	e022      	b.n	8001dfc <dispHandler+0x230>
		{
			writeRow(strings[i], strlen(strings[i]), i, align[i]);
 8001db6:	21bc      	movs	r1, #188	; 0xbc
 8001db8:	187b      	adds	r3, r7, r1
 8001dba:	25e4      	movs	r5, #228	; 0xe4
 8001dbc:	197a      	adds	r2, r7, r5
 8001dbe:	6812      	ldr	r2, [r2, #0]
 8001dc0:	0092      	lsls	r2, r2, #2
 8001dc2:	58d4      	ldr	r4, [r2, r3]
 8001dc4:	187b      	adds	r3, r7, r1
 8001dc6:	197a      	adds	r2, r7, r5
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	0092      	lsls	r2, r2, #2
 8001dcc:	58d3      	ldr	r3, [r2, r3]
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f7fe f99a 	bl	8000108 <strlen>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	b2d9      	uxtb	r1, r3
 8001dd8:	197b      	adds	r3, r7, r5
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	b2d8      	uxtb	r0, r3
 8001dde:	23b8      	movs	r3, #184	; 0xb8
 8001de0:	18fa      	adds	r2, r7, r3
 8001de2:	197b      	adds	r3, r7, r5
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	18d3      	adds	r3, r2, r3
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	0002      	movs	r2, r0
 8001dec:	0020      	movs	r0, r4
 8001dee:	f7ff f923 	bl	8001038 <writeRow>
		for(int i = 0; i < 4; i++)
 8001df2:	197b      	adds	r3, r7, r5
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	3301      	adds	r3, #1
 8001df8:	197a      	adds	r2, r7, r5
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	23e4      	movs	r3, #228	; 0xe4
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	ddd7      	ble.n	8001db6 <dispHandler+0x1ea>
		}
	}

	//_____Zobrazení �?asu u hlavních testů_____//
	if(flags.time.sec)
 8001e06:	4b4f      	ldr	r3, [pc, #316]	; (8001f44 <dispHandler+0x378>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	079b      	lsls	r3, r3, #30
 8001e0c:	0fdb      	lsrs	r3, r3, #31
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d051      	beq.n	8001eb8 <dispHandler+0x2ec>
	{
		switch(currentPhase())
 8001e14:	f000 ff26 	bl	8002c64 <currentPhase>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d002      	beq.n	8001e24 <dispHandler+0x258>
 8001e1e:	2b05      	cmp	r3, #5
 8001e20:	d028      	beq.n	8001e74 <dispHandler+0x2a8>
			sprintf(time, "%lu:%lu", 14-sysTime[SYSTIME_MIN], 59-sysTime[SYSTIME_SEC]);
			writeRow(time, strlen(time), 2, CENTER);
			break;
		}
		default:
			break;
 8001e22:	e04a      	b.n	8001eba <dispHandler+0x2ee>
			char time[9] = {0};
 8001e24:	251c      	movs	r5, #28
 8001e26:	197b      	adds	r3, r7, r5
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	2205      	movs	r2, #5
 8001e30:	2100      	movs	r1, #0
 8001e32:	0018      	movs	r0, r3
 8001e34:	f00b fc73 	bl	800d71e <memset>
			sprintf(time, "%lu:%lu:%lu", 2-sysTime[SYSTIME_HOUR], 59-sysTime[SYSTIME_MIN], 59-sysTime[SYSTIME_SEC]);
 8001e38:	4b4e      	ldr	r3, [pc, #312]	; (8001f74 <dispHandler+0x3a8>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	1ad2      	subs	r2, r2, r3
 8001e40:	4b4c      	ldr	r3, [pc, #304]	; (8001f74 <dispHandler+0x3a8>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	213b      	movs	r1, #59	; 0x3b
 8001e46:	1acc      	subs	r4, r1, r3
 8001e48:	4b4a      	ldr	r3, [pc, #296]	; (8001f74 <dispHandler+0x3a8>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	213b      	movs	r1, #59	; 0x3b
 8001e4e:	1acb      	subs	r3, r1, r3
 8001e50:	4949      	ldr	r1, [pc, #292]	; (8001f78 <dispHandler+0x3ac>)
 8001e52:	1978      	adds	r0, r7, r5
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	0023      	movs	r3, r4
 8001e58:	f00b fd5e 	bl	800d918 <siprintf>
			writeRow(time, strlen(time), 2, CENTER);
 8001e5c:	197b      	adds	r3, r7, r5
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f7fe f952 	bl	8000108 <strlen>
 8001e64:	0003      	movs	r3, r0
 8001e66:	b2d9      	uxtb	r1, r3
 8001e68:	1978      	adds	r0, r7, r5
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	f7ff f8e3 	bl	8001038 <writeRow>
			break;
 8001e72:	e022      	b.n	8001eba <dispHandler+0x2ee>
			char time[9] = {0};
 8001e74:	2410      	movs	r4, #16
 8001e76:	193b      	adds	r3, r7, r4
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2205      	movs	r2, #5
 8001e80:	2100      	movs	r1, #0
 8001e82:	0018      	movs	r0, r3
 8001e84:	f00b fc4b 	bl	800d71e <memset>
			sprintf(time, "%lu:%lu", 14-sysTime[SYSTIME_MIN], 59-sysTime[SYSTIME_SEC]);
 8001e88:	4b3a      	ldr	r3, [pc, #232]	; (8001f74 <dispHandler+0x3a8>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	220e      	movs	r2, #14
 8001e8e:	1ad2      	subs	r2, r2, r3
 8001e90:	4b38      	ldr	r3, [pc, #224]	; (8001f74 <dispHandler+0x3a8>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	213b      	movs	r1, #59	; 0x3b
 8001e96:	1acb      	subs	r3, r1, r3
 8001e98:	4938      	ldr	r1, [pc, #224]	; (8001f7c <dispHandler+0x3b0>)
 8001e9a:	1938      	adds	r0, r7, r4
 8001e9c:	f00b fd3c 	bl	800d918 <siprintf>
			writeRow(time, strlen(time), 2, CENTER);
 8001ea0:	193b      	adds	r3, r7, r4
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f7fe f930 	bl	8000108 <strlen>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	b2d9      	uxtb	r1, r3
 8001eac:	1938      	adds	r0, r7, r4
 8001eae:	2302      	movs	r3, #2
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	f7ff f8c1 	bl	8001038 <writeRow>
			break;
 8001eb6:	e000      	b.n	8001eba <dispHandler+0x2ee>
		}
	}
 8001eb8:	46c0      	nop			; (mov r8, r8)

	if(flags.instructions.stopRequest || flags.testCanceled)
 8001eba:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <dispHandler+0x378>)
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	079b      	lsls	r3, r3, #30
 8001ec0:	0fdb      	lsrs	r3, r3, #31
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d106      	bne.n	8001ed6 <dispHandler+0x30a>
 8001ec8:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <dispHandler+0x378>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	075b      	lsls	r3, r3, #29
 8001ece:	0fdb      	lsrs	r3, r3, #31
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d030      	beq.n	8001f38 <dispHandler+0x36c>
	{
		char err[] = "Preruseni";
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	4a29      	ldr	r2, [pc, #164]	; (8001f80 <dispHandler+0x3b4>)
 8001eda:	ca03      	ldmia	r2!, {r0, r1}
 8001edc:	c303      	stmia	r3!, {r0, r1}
 8001ede:	8812      	ldrh	r2, [r2, #0]
 8001ee0:	801a      	strh	r2, [r3, #0]
		strings[1] = err;
 8001ee2:	23bc      	movs	r3, #188	; 0xbc
 8001ee4:	18fb      	adds	r3, r7, r3
 8001ee6:	1d3a      	adds	r2, r7, #4
 8001ee8:	605a      	str	r2, [r3, #4]

		for(int i = 0; i < 4; i++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	22e0      	movs	r2, #224	; 0xe0
 8001eee:	18ba      	adds	r2, r7, r2
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e01c      	b.n	8001f2e <dispHandler+0x362>
		{
			writeRow(strings[i], strlen(strings[i]), i, CENTER);
 8001ef4:	21bc      	movs	r1, #188	; 0xbc
 8001ef6:	187b      	adds	r3, r7, r1
 8001ef8:	25e0      	movs	r5, #224	; 0xe0
 8001efa:	197a      	adds	r2, r7, r5
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	0092      	lsls	r2, r2, #2
 8001f00:	58d4      	ldr	r4, [r2, r3]
 8001f02:	187b      	adds	r3, r7, r1
 8001f04:	197a      	adds	r2, r7, r5
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	0092      	lsls	r2, r2, #2
 8001f0a:	58d3      	ldr	r3, [r2, r3]
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7fe f8fb 	bl	8000108 <strlen>
 8001f12:	0003      	movs	r3, r0
 8001f14:	b2d9      	uxtb	r1, r3
 8001f16:	197b      	adds	r3, r7, r5
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	0020      	movs	r0, r4
 8001f20:	f7ff f88a 	bl	8001038 <writeRow>
		for(int i = 0; i < 4; i++)
 8001f24:	197b      	adds	r3, r7, r5
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	197a      	adds	r2, r7, r5
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	23e0      	movs	r3, #224	; 0xe0
 8001f30:	18fb      	adds	r3, r7, r3
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b03      	cmp	r3, #3
 8001f36:	dddd      	ble.n	8001ef4 <dispHandler+0x328>
		}
	}
}
 8001f38:	46c0      	nop			; (mov r8, r8)
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b03b      	add	sp, #236	; 0xec
 8001f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f40:	0800e04c 	.word	0x0800e04c
 8001f44:	200003d0 	.word	0x200003d0
 8001f48:	200003ee 	.word	0x200003ee
 8001f4c:	20000404 	.word	0x20000404
 8001f50:	0800e030 	.word	0x0800e030
 8001f54:	0800e1d8 	.word	0x0800e1d8
 8001f58:	0800e060 	.word	0x0800e060
 8001f5c:	0800e06c 	.word	0x0800e06c
 8001f60:	0800e078 	.word	0x0800e078
 8001f64:	0800e084 	.word	0x0800e084
 8001f68:	0800e090 	.word	0x0800e090
 8001f6c:	0800e01c 	.word	0x0800e01c
 8001f70:	0800e028 	.word	0x0800e028
 8001f74:	200003c0 	.word	0x200003c0
 8001f78:	0800e038 	.word	0x0800e038
 8001f7c:	0800e044 	.word	0x0800e044
 8001f80:	0800e0a0 	.word	0x0800e0a0

08001f84 <UI_Handler>:

//_____Obsluha piezo + podsvícení displeje_____//
 void UI_Handler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
	if((sysTime[SYSTIME_TEN_MS] - startTime_LCD) >= 6000)	//1min
	{
		setColour(BACKLIGHT_OFF);
	}*/

	if(flags.conErr)
 8001f88:	4b8b      	ldr	r3, [pc, #556]	; (80021b8 <UI_Handler+0x234>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	065b      	lsls	r3, r3, #25
 8001f8e:	0fdb      	lsrs	r3, r3, #31
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d004      	beq.n	8001fa0 <UI_Handler+0x1c>
		flags.ui.error = 1;
 8001f96:	4b88      	ldr	r3, [pc, #544]	; (80021b8 <UI_Handler+0x234>)
 8001f98:	7c1a      	ldrb	r2, [r3, #16]
 8001f9a:	2104      	movs	r1, #4
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	741a      	strb	r2, [r3, #16]

	flags.ui.active = 0;
 8001fa0:	4b85      	ldr	r3, [pc, #532]	; (80021b8 <UI_Handler+0x234>)
 8001fa2:	7c1a      	ldrb	r2, [r3, #16]
 8001fa4:	2120      	movs	r1, #32
 8001fa6:	438a      	bics	r2, r1
 8001fa8:	741a      	strb	r2, [r3, #16]

	static uint32_t startTime;	//proměnná pro �?asování dějů

	//___Nastavení stavu podle požadavků___//
	//___Stavy výše mají vyšší prioritu (error nejvyšší)___//
	if(flags.ui.error && (UI_State != ERROR))
 8001faa:	4b83      	ldr	r3, [pc, #524]	; (80021b8 <UI_Handler+0x234>)
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	075b      	lsls	r3, r3, #29
 8001fb0:	0fdb      	lsrs	r3, r3, #31
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00b      	beq.n	8001fd0 <UI_Handler+0x4c>
 8001fb8:	4b80      	ldr	r3, [pc, #512]	; (80021bc <UI_Handler+0x238>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	d007      	beq.n	8001fd0 <UI_Handler+0x4c>
	{
		UI_State = ERROR;
 8001fc0:	4b7e      	ldr	r3, [pc, #504]	; (80021bc <UI_Handler+0x238>)
 8001fc2:	2203      	movs	r2, #3
 8001fc4:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001fc6:	4b7e      	ldr	r3, [pc, #504]	; (80021c0 <UI_Handler+0x23c>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	4b7e      	ldr	r3, [pc, #504]	; (80021c4 <UI_Handler+0x240>)
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	e05e      	b.n	800208e <UI_Handler+0x10a>
	}
	else if(flags.ui.notice && (UI_State == OFF))
 8001fd0:	4b79      	ldr	r3, [pc, #484]	; (80021b8 <UI_Handler+0x234>)
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	071b      	lsls	r3, r3, #28
 8001fd6:	0fdb      	lsrs	r3, r3, #31
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d010      	beq.n	8002000 <UI_Handler+0x7c>
 8001fde:	4b77      	ldr	r3, [pc, #476]	; (80021bc <UI_Handler+0x238>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10c      	bne.n	8002000 <UI_Handler+0x7c>
	{
		UI_State = NOTICE;
 8001fe6:	4b75      	ldr	r3, [pc, #468]	; (80021bc <UI_Handler+0x238>)
 8001fe8:	2204      	movs	r2, #4
 8001fea:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001fec:	4b74      	ldr	r3, [pc, #464]	; (80021c0 <UI_Handler+0x23c>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b74      	ldr	r3, [pc, #464]	; (80021c4 <UI_Handler+0x240>)
 8001ff2:	601a      	str	r2, [r3, #0]
		flags.ui.notice = 0;
 8001ff4:	4b70      	ldr	r3, [pc, #448]	; (80021b8 <UI_Handler+0x234>)
 8001ff6:	7c1a      	ldrb	r2, [r3, #16]
 8001ff8:	2108      	movs	r1, #8
 8001ffa:	438a      	bics	r2, r1
 8001ffc:	741a      	strb	r2, [r3, #16]
 8001ffe:	e046      	b.n	800208e <UI_Handler+0x10a>
	}
	else if(flags.ui.done && (UI_State == OFF))
 8002000:	4b6d      	ldr	r3, [pc, #436]	; (80021b8 <UI_Handler+0x234>)
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	06db      	lsls	r3, r3, #27
 8002006:	0fdb      	lsrs	r3, r3, #31
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d010      	beq.n	8002030 <UI_Handler+0xac>
 800200e:	4b6b      	ldr	r3, [pc, #428]	; (80021bc <UI_Handler+0x238>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10c      	bne.n	8002030 <UI_Handler+0xac>
	{
		UI_State = DONE;
 8002016:	4b69      	ldr	r3, [pc, #420]	; (80021bc <UI_Handler+0x238>)
 8002018:	2205      	movs	r2, #5
 800201a:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 800201c:	4b68      	ldr	r3, [pc, #416]	; (80021c0 <UI_Handler+0x23c>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b68      	ldr	r3, [pc, #416]	; (80021c4 <UI_Handler+0x240>)
 8002022:	601a      	str	r2, [r3, #0]
		flags.ui.done = 0;
 8002024:	4b64      	ldr	r3, [pc, #400]	; (80021b8 <UI_Handler+0x234>)
 8002026:	7c1a      	ldrb	r2, [r3, #16]
 8002028:	2110      	movs	r1, #16
 800202a:	438a      	bics	r2, r1
 800202c:	741a      	strb	r2, [r3, #16]
 800202e:	e02e      	b.n	800208e <UI_Handler+0x10a>
	}
	else if(flags.ui.longBeep && (UI_State == OFF))
 8002030:	4b61      	ldr	r3, [pc, #388]	; (80021b8 <UI_Handler+0x234>)
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	079b      	lsls	r3, r3, #30
 8002036:	0fdb      	lsrs	r3, r3, #31
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d010      	beq.n	8002060 <UI_Handler+0xdc>
 800203e:	4b5f      	ldr	r3, [pc, #380]	; (80021bc <UI_Handler+0x238>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10c      	bne.n	8002060 <UI_Handler+0xdc>
	{
		UI_State = LONG_BEEP;
 8002046:	4b5d      	ldr	r3, [pc, #372]	; (80021bc <UI_Handler+0x238>)
 8002048:	2202      	movs	r2, #2
 800204a:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 800204c:	4b5c      	ldr	r3, [pc, #368]	; (80021c0 <UI_Handler+0x23c>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b5c      	ldr	r3, [pc, #368]	; (80021c4 <UI_Handler+0x240>)
 8002052:	601a      	str	r2, [r3, #0]
		flags.ui.longBeep = 0;
 8002054:	4b58      	ldr	r3, [pc, #352]	; (80021b8 <UI_Handler+0x234>)
 8002056:	7c1a      	ldrb	r2, [r3, #16]
 8002058:	2102      	movs	r1, #2
 800205a:	438a      	bics	r2, r1
 800205c:	741a      	strb	r2, [r3, #16]
 800205e:	e016      	b.n	800208e <UI_Handler+0x10a>
	}
	else if(flags.ui.shortBeep && (UI_State == OFF))
 8002060:	4b55      	ldr	r3, [pc, #340]	; (80021b8 <UI_Handler+0x234>)
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	07db      	lsls	r3, r3, #31
 8002066:	0fdb      	lsrs	r3, r3, #31
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00f      	beq.n	800208e <UI_Handler+0x10a>
 800206e:	4b53      	ldr	r3, [pc, #332]	; (80021bc <UI_Handler+0x238>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10b      	bne.n	800208e <UI_Handler+0x10a>
	{
		UI_State = SHORT_BEEP;
 8002076:	4b51      	ldr	r3, [pc, #324]	; (80021bc <UI_Handler+0x238>)
 8002078:	2201      	movs	r2, #1
 800207a:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 800207c:	4b50      	ldr	r3, [pc, #320]	; (80021c0 <UI_Handler+0x23c>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b50      	ldr	r3, [pc, #320]	; (80021c4 <UI_Handler+0x240>)
 8002082:	601a      	str	r2, [r3, #0]
		flags.ui.shortBeep = 0;
 8002084:	4b4c      	ldr	r3, [pc, #304]	; (80021b8 <UI_Handler+0x234>)
 8002086:	7c1a      	ldrb	r2, [r3, #16]
 8002088:	2101      	movs	r1, #1
 800208a:	438a      	bics	r2, r1
 800208c:	741a      	strb	r2, [r3, #16]
	}

	switch(UI_State)
 800208e:	4b4b      	ldr	r3, [pc, #300]	; (80021bc <UI_Handler+0x238>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b05      	cmp	r3, #5
 8002094:	d900      	bls.n	8002098 <UI_Handler+0x114>
 8002096:	e07a      	b.n	800218e <UI_Handler+0x20a>
 8002098:	009a      	lsls	r2, r3, #2
 800209a:	4b4b      	ldr	r3, [pc, #300]	; (80021c8 <UI_Handler+0x244>)
 800209c:	18d3      	adds	r3, r2, r3
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	469f      	mov	pc, r3
	{
	case SHORT_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 50)		//0,5s
 80020a2:	4b47      	ldr	r3, [pc, #284]	; (80021c0 <UI_Handler+0x23c>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	4b47      	ldr	r3, [pc, #284]	; (80021c4 <UI_Handler+0x240>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	2b31      	cmp	r3, #49	; 0x31
 80020ae:	d800      	bhi.n	80020b2 <UI_Handler+0x12e>
 80020b0:	e075      	b.n	800219e <UI_Handler+0x21a>
		{
			UI_State = OFF;
 80020b2:	4b42      	ldr	r3, [pc, #264]	; (80021bc <UI_Handler+0x238>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	015b      	lsls	r3, r3, #5
 80020bc:	4843      	ldr	r0, [pc, #268]	; (80021cc <UI_Handler+0x248>)
 80020be:	2200      	movs	r2, #0
 80020c0:	0019      	movs	r1, r3
 80020c2:	f002 f9ae 	bl	8004422 <HAL_GPIO_WritePin>
		}
		break;
 80020c6:	e06a      	b.n	800219e <UI_Handler+0x21a>

	case LONG_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 100)	//1s
 80020c8:	4b3d      	ldr	r3, [pc, #244]	; (80021c0 <UI_Handler+0x23c>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b3d      	ldr	r3, [pc, #244]	; (80021c4 <UI_Handler+0x240>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b63      	cmp	r3, #99	; 0x63
 80020d4:	d965      	bls.n	80021a2 <UI_Handler+0x21e>
		{
			UI_State = OFF;
 80020d6:	4b39      	ldr	r3, [pc, #228]	; (80021bc <UI_Handler+0x238>)
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	015b      	lsls	r3, r3, #5
 80020e0:	483a      	ldr	r0, [pc, #232]	; (80021cc <UI_Handler+0x248>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	0019      	movs	r1, r3
 80020e6:	f002 f99c 	bl	8004422 <HAL_GPIO_WritePin>
		}
		break;
 80020ea:	e05a      	b.n	80021a2 <UI_Handler+0x21e>

	case ERROR:
		if(!flags.ui.error)	//dokud není požadavek zrušen provádí se error
 80020ec:	4b32      	ldr	r3, [pc, #200]	; (80021b8 <UI_Handler+0x234>)
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	075b      	lsls	r3, r3, #29
 80020f2:	0fdb      	lsrs	r3, r3, #31
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d102      	bne.n	8002100 <UI_Handler+0x17c>
			UI_State = OFF;
 80020fa:	4b30      	ldr	r3, [pc, #192]	; (80021bc <UI_Handler+0x238>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))	//každých 0,5s
 8002100:	4b2f      	ldr	r3, [pc, #188]	; (80021c0 <UI_Handler+0x23c>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b2f      	ldr	r3, [pc, #188]	; (80021c4 <UI_Handler+0x240>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2132      	movs	r1, #50	; 0x32
 800210c:	0018      	movs	r0, r3
 800210e:	f7fe f893 	bl	8000238 <__aeabi_uidivmod>
 8002112:	1e0b      	subs	r3, r1, #0
 8002114:	d147      	bne.n	80021a6 <UI_Handler+0x222>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
#endif
			BACKLIGHT_RED_Toggle;
 8002116:	2380      	movs	r3, #128	; 0x80
 8002118:	021a      	lsls	r2, r3, #8
 800211a:	2390      	movs	r3, #144	; 0x90
 800211c:	05db      	lsls	r3, r3, #23
 800211e:	0011      	movs	r1, r2
 8002120:	0018      	movs	r0, r3
 8002122:	f002 f99b 	bl	800445c <HAL_GPIO_TogglePin>
		}
		break;
 8002126:	e03e      	b.n	80021a6 <UI_Handler+0x222>

	case NOTICE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 35))	//každých 0,35s
 8002128:	4b25      	ldr	r3, [pc, #148]	; (80021c0 <UI_Handler+0x23c>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <UI_Handler+0x240>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2123      	movs	r1, #35	; 0x23
 8002134:	0018      	movs	r0, r3
 8002136:	f7fe f87f 	bl	8000238 <__aeabi_uidivmod>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
#endif
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 209)	//Po 2,1s ukon�?i
 800213a:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <UI_Handler+0x23c>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <UI_Handler+0x240>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2bd0      	cmp	r3, #208	; 0xd0
 8002146:	d930      	bls.n	80021aa <UI_Handler+0x226>
			UI_State = OFF;
 8002148:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <UI_Handler+0x238>)
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
		break;
 800214e:	e02c      	b.n	80021aa <UI_Handler+0x226>

	case DONE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))	//každých 0,5s
 8002150:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <UI_Handler+0x23c>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b1b      	ldr	r3, [pc, #108]	; (80021c4 <UI_Handler+0x240>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2132      	movs	r1, #50	; 0x32
 800215c:	0018      	movs	r0, r3
 800215e:	f7fe f86b 	bl	8000238 <__aeabi_uidivmod>
 8002162:	1e0b      	subs	r3, r1, #0
 8002164:	d106      	bne.n	8002174 <UI_Handler+0x1f0>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
#endif
			BACKLIGHT_GREEN_Toggle;
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4a19      	ldr	r2, [pc, #100]	; (80021d0 <UI_Handler+0x24c>)
 800216c:	0019      	movs	r1, r3
 800216e:	0010      	movs	r0, r2
 8002170:	f002 f974 	bl	800445c <HAL_GPIO_TogglePin>
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 299)	//Po 3s ukon�?i
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <UI_Handler+0x23c>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <UI_Handler+0x240>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	1ad2      	subs	r2, r2, r3
 800217e:	2395      	movs	r3, #149	; 0x95
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	429a      	cmp	r2, r3
 8002184:	d913      	bls.n	80021ae <UI_Handler+0x22a>
			UI_State = OFF;
 8002186:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <UI_Handler+0x238>)
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
		break;
 800218c:	e00f      	b.n	80021ae <UI_Handler+0x22a>

	default:	//Ošetřuje i UI_State == OFF
		BUZZER_OFF;
 800218e:	2380      	movs	r3, #128	; 0x80
 8002190:	015b      	lsls	r3, r3, #5
 8002192:	480e      	ldr	r0, [pc, #56]	; (80021cc <UI_Handler+0x248>)
 8002194:	2200      	movs	r2, #0
 8002196:	0019      	movs	r1, r3
 8002198:	f002 f943 	bl	8004422 <HAL_GPIO_WritePin>
#ifndef __DEBUG_BUTT__
		//setColour(BACKLIGHT_OFF);
#endif
		break;
 800219c:	e008      	b.n	80021b0 <UI_Handler+0x22c>
		break;
 800219e:	46c0      	nop			; (mov r8, r8)
 80021a0:	e006      	b.n	80021b0 <UI_Handler+0x22c>
		break;
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	e004      	b.n	80021b0 <UI_Handler+0x22c>
		break;
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	e002      	b.n	80021b0 <UI_Handler+0x22c>
		break;
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	e000      	b.n	80021b0 <UI_Handler+0x22c>
		break;
 80021ae:	46c0      	nop			; (mov r8, r8)

	}
}
 80021b0:	46c0      	nop			; (mov r8, r8)
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	200003d0 	.word	0x200003d0
 80021bc:	200003ef 	.word	0x200003ef
 80021c0:	200003c0 	.word	0x200003c0
 80021c4:	200003f0 	.word	0x200003f0
 80021c8:	0800e1f4 	.word	0x0800e1f4
 80021cc:	48000800 	.word	0x48000800
 80021d0:	48000400 	.word	0x48000400

080021d4 <measHandler>:

//_____Osluha AD převodníků_____//
 void measHandler(void)
{
 80021d4:	b5b0      	push	{r4, r5, r7, lr}
 80021d6:	af00      	add	r7, sp, #0
	static ADC_State_Type ADC_State;

	//___Nulování flagů___//
	flags.meas.measComplete = 0;
 80021d8:	4b51      	ldr	r3, [pc, #324]	; (8002320 <measHandler+0x14c>)
 80021da:	7d1a      	ldrb	r2, [r3, #20]
 80021dc:	2102      	movs	r1, #2
 80021de:	438a      	bics	r2, r1
 80021e0:	751a      	strb	r2, [r3, #20]
	flags.meas.measConflict = 0;
 80021e2:	4b4f      	ldr	r3, [pc, #316]	; (8002320 <measHandler+0x14c>)
 80021e4:	7d1a      	ldrb	r2, [r3, #20]
 80021e6:	2110      	movs	r1, #16
 80021e8:	438a      	bics	r2, r1
 80021ea:	751a      	strb	r2, [r3, #20]

	if(flags.meas.measRequest)
 80021ec:	4b4c      	ldr	r3, [pc, #304]	; (8002320 <measHandler+0x14c>)
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	07db      	lsls	r3, r3, #31
 80021f2:	0fdb      	lsrs	r3, r3, #31
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d045      	beq.n	8002286 <measHandler+0xb2>
	{
		if(!flags.meas.measRunning)
 80021fa:	4b49      	ldr	r3, [pc, #292]	; (8002320 <measHandler+0x14c>)
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	071b      	lsls	r3, r3, #28
 8002200:	0fdb      	lsrs	r3, r3, #31
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d134      	bne.n	8002272 <measHandler+0x9e>
		{
			flags.meas.measRunning = 1;
 8002208:	4b45      	ldr	r3, [pc, #276]	; (8002320 <measHandler+0x14c>)
 800220a:	7d1a      	ldrb	r2, [r3, #20]
 800220c:	2108      	movs	r1, #8
 800220e:	430a      	orrs	r2, r1
 8002210:	751a      	strb	r2, [r3, #20]
			if(currentPhase() == BATTERY_TEST || currentPhase() == BATTERY_TEST_DONE)	//probíhá battery test
 8002212:	f000 fd27 	bl	8002c64 <currentPhase>
 8002216:	0003      	movs	r3, r0
 8002218:	2b05      	cmp	r3, #5
 800221a:	d004      	beq.n	8002226 <measHandler+0x52>
 800221c:	f000 fd22 	bl	8002c64 <currentPhase>
 8002220:	0003      	movs	r3, r0
 8002222:	2b06      	cmp	r3, #6
 8002224:	d110      	bne.n	8002248 <measHandler+0x74>
			{
				flags.meas.onlyBattery = 1;
 8002226:	4b3e      	ldr	r3, [pc, #248]	; (8002320 <measHandler+0x14c>)
 8002228:	7d1a      	ldrb	r2, [r3, #20]
 800222a:	2120      	movs	r1, #32
 800222c:	430a      	orrs	r2, r1
 800222e:	751a      	strb	r2, [r3, #20]
				ADC_State = U_BAT;
 8002230:	4b3c      	ldr	r3, [pc, #240]	; (8002324 <measHandler+0x150>)
 8002232:	220d      	movs	r2, #13
 8002234:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 8002236:	4b3b      	ldr	r3, [pc, #236]	; (8002324 <measHandler+0x150>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	1e59      	subs	r1, r3, #1
 800223c:	4b3a      	ldr	r3, [pc, #232]	; (8002328 <measHandler+0x154>)
 800223e:	4a3b      	ldr	r2, [pc, #236]	; (800232c <measHandler+0x158>)
 8002240:	0089      	lsls	r1, r1, #2
 8002242:	588a      	ldr	r2, [r1, r2]
 8002244:	629a      	str	r2, [r3, #40]	; 0x28
 8002246:	e00f      	b.n	8002268 <measHandler+0x94>
			}
			else
			{
				flags.meas.onlyBattery = 0;
 8002248:	4b35      	ldr	r3, [pc, #212]	; (8002320 <measHandler+0x14c>)
 800224a:	7d1a      	ldrb	r2, [r3, #20]
 800224c:	2120      	movs	r1, #32
 800224e:	438a      	bics	r2, r1
 8002250:	751a      	strb	r2, [r3, #20]
				ADC_State = U15V;
 8002252:	4b34      	ldr	r3, [pc, #208]	; (8002324 <measHandler+0x150>)
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 8002258:	4b32      	ldr	r3, [pc, #200]	; (8002324 <measHandler+0x150>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	1e59      	subs	r1, r3, #1
 800225e:	4b32      	ldr	r3, [pc, #200]	; (8002328 <measHandler+0x154>)
 8002260:	4a32      	ldr	r2, [pc, #200]	; (800232c <measHandler+0x158>)
 8002262:	0089      	lsls	r1, r1, #2
 8002264:	588a      	ldr	r2, [r1, r2]
 8002266:	629a      	str	r2, [r3, #40]	; 0x28
			}
			HAL_ADC_Start_IT(&hadc);
 8002268:	4b31      	ldr	r3, [pc, #196]	; (8002330 <measHandler+0x15c>)
 800226a:	0018      	movs	r0, r3
 800226c:	f001 fa08 	bl	8003680 <HAL_ADC_Start_IT>
 8002270:	e004      	b.n	800227c <measHandler+0xa8>
		}
		else
		{
			flags.meas.measConflict = 1;
 8002272:	4b2b      	ldr	r3, [pc, #172]	; (8002320 <measHandler+0x14c>)
 8002274:	7d1a      	ldrb	r2, [r3, #20]
 8002276:	2110      	movs	r1, #16
 8002278:	430a      	orrs	r2, r1
 800227a:	751a      	strb	r2, [r3, #20]
		}
		flags.meas.measRequest = 0;
 800227c:	4b28      	ldr	r3, [pc, #160]	; (8002320 <measHandler+0x14c>)
 800227e:	7d1a      	ldrb	r2, [r3, #20]
 8002280:	2101      	movs	r1, #1
 8002282:	438a      	bics	r2, r1
 8002284:	751a      	strb	r2, [r3, #20]
	}

	if(ADC_State != ADC_WAITING)
 8002286:	4b27      	ldr	r3, [pc, #156]	; (8002324 <measHandler+0x150>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d045      	beq.n	800231a <measHandler+0x146>
	{
		if(flags.meas.measDataReady)
 800228e:	4b24      	ldr	r3, [pc, #144]	; (8002320 <measHandler+0x14c>)
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	075b      	lsls	r3, r3, #29
 8002294:	0fdb      	lsrs	r3, r3, #31
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d03e      	beq.n	800231a <measHandler+0x146>
		{
			flags.meas.measDataReady = 0;
 800229c:	4b20      	ldr	r3, [pc, #128]	; (8002320 <measHandler+0x14c>)
 800229e:	7d1a      	ldrb	r2, [r3, #20]
 80022a0:	2104      	movs	r1, #4
 80022a2:	438a      	bics	r2, r1
 80022a4:	751a      	strb	r2, [r3, #20]

			if(ADC_State == U_BAT)	//U_BAT je vždy měřeno jako poslední
 80022a6:	4b1f      	ldr	r3, [pc, #124]	; (8002324 <measHandler+0x150>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b0d      	cmp	r3, #13
 80022ac:	d118      	bne.n	80022e0 <measHandler+0x10c>
			{
				ADC_Results[ADC_State-1] = HAL_ADC_GetValue(&hadc);
 80022ae:	4b1d      	ldr	r3, [pc, #116]	; (8002324 <measHandler+0x150>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	1e5c      	subs	r4, r3, #1
 80022b4:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <measHandler+0x15c>)
 80022b6:	0018      	movs	r0, r3
 80022b8:	f001 fa9e 	bl	80037f8 <HAL_ADC_GetValue>
 80022bc:	0001      	movs	r1, r0
 80022be:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <measHandler+0x160>)
 80022c0:	00a2      	lsls	r2, r4, #2
 80022c2:	50d1      	str	r1, [r2, r3]
				flags.meas.measComplete = 1;
 80022c4:	4b16      	ldr	r3, [pc, #88]	; (8002320 <measHandler+0x14c>)
 80022c6:	7d1a      	ldrb	r2, [r3, #20]
 80022c8:	2102      	movs	r1, #2
 80022ca:	430a      	orrs	r2, r1
 80022cc:	751a      	strb	r2, [r3, #20]
				flags.meas.measRunning = 0;
 80022ce:	4b14      	ldr	r3, [pc, #80]	; (8002320 <measHandler+0x14c>)
 80022d0:	7d1a      	ldrb	r2, [r3, #20]
 80022d2:	2108      	movs	r1, #8
 80022d4:	438a      	bics	r2, r1
 80022d6:	751a      	strb	r2, [r3, #20]
				ADC_State = ADC_WAITING;
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <measHandler+0x150>)
 80022da:	2200      	movs	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]

				HAL_ADC_Start_IT(&hadc);
			}
		}
	}
}
 80022de:	e01c      	b.n	800231a <measHandler+0x146>
				ADC_Results[ADC_State-1] = HAL_ADC_GetValue(&hadc);
 80022e0:	4b10      	ldr	r3, [pc, #64]	; (8002324 <measHandler+0x150>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	1e5c      	subs	r4, r3, #1
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <measHandler+0x15c>)
 80022e8:	0018      	movs	r0, r3
 80022ea:	f001 fa85 	bl	80037f8 <HAL_ADC_GetValue>
 80022ee:	0001      	movs	r1, r0
 80022f0:	4b10      	ldr	r3, [pc, #64]	; (8002334 <measHandler+0x160>)
 80022f2:	00a2      	lsls	r2, r4, #2
 80022f4:	50d1      	str	r1, [r2, r3]
				ADC_State += 2;	//Měř další kanál (měření proudů se přeskakuje)
 80022f6:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <measHandler+0x150>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	3302      	adds	r3, #2
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4b09      	ldr	r3, [pc, #36]	; (8002324 <measHandler+0x150>)
 8002300:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];	//Nastav měřený kanál
 8002302:	4b08      	ldr	r3, [pc, #32]	; (8002324 <measHandler+0x150>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	1e59      	subs	r1, r3, #1
 8002308:	4b07      	ldr	r3, [pc, #28]	; (8002328 <measHandler+0x154>)
 800230a:	4a08      	ldr	r2, [pc, #32]	; (800232c <measHandler+0x158>)
 800230c:	0089      	lsls	r1, r1, #2
 800230e:	588a      	ldr	r2, [r1, r2]
 8002310:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_ADC_Start_IT(&hadc);
 8002312:	4b07      	ldr	r3, [pc, #28]	; (8002330 <measHandler+0x15c>)
 8002314:	0018      	movs	r0, r3
 8002316:	f001 f9b3 	bl	8003680 <HAL_ADC_Start_IT>
}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	46bd      	mov	sp, r7
 800231e:	bdb0      	pop	{r4, r5, r7, pc}
 8002320:	200003d0 	.word	0x200003d0
 8002324:	200003f4 	.word	0x200003f4
 8002328:	40012400 	.word	0x40012400
 800232c:	0800e198 	.word	0x0800e198
 8002330:	20000210 	.word	0x20000210
 8002334:	20000380 	.word	0x20000380

08002338 <calibHandler>:

void calibHandler()
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
	static uint32_t savedSec;

	if(flags.instructions.calibRequest)
 800233e:	4b44      	ldr	r3, [pc, #272]	; (8002450 <calibHandler+0x118>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	071b      	lsls	r3, r3, #28
 8002344:	0fdb      	lsrs	r3, r3, #31
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d032      	beq.n	80023b2 <calibHandler+0x7a>
	{
		sourceInTesting = &regValues[regCount - 1];
 800234c:	4b41      	ldr	r3, [pc, #260]	; (8002454 <calibHandler+0x11c>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b41      	ldr	r3, [pc, #260]	; (8002458 <calibHandler+0x120>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	3b01      	subs	r3, #1
 8002356:	18d2      	adds	r2, r2, r3
 8002358:	4b40      	ldr	r3, [pc, #256]	; (800245c <calibHandler+0x124>)
 800235a:	601a      	str	r2, [r3, #0]

		for(int i = 0; i < regCount; i++)
 800235c:	2300      	movs	r3, #0
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	e008      	b.n	8002374 <calibHandler+0x3c>
		{
			regValues[i] = 0;
 8002362:	4b3c      	ldr	r3, [pc, #240]	; (8002454 <calibHandler+0x11c>)
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	18d3      	adds	r3, r2, r3
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < regCount; i++)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3301      	adds	r3, #1
 8002372:	607b      	str	r3, [r7, #4]
 8002374:	4b38      	ldr	r3, [pc, #224]	; (8002458 <calibHandler+0x120>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	001a      	movs	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4293      	cmp	r3, r2
 800237e:	dbf0      	blt.n	8002362 <calibHandler+0x2a>
		}
		RELAY_ON(*sourceInTesting);	//připojit relé
 8002380:	4b36      	ldr	r3, [pc, #216]	; (800245c <calibHandler+0x124>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	781a      	ldrb	r2, [r3, #0]
 8002386:	4b35      	ldr	r3, [pc, #212]	; (800245c <calibHandler+0x124>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2102      	movs	r1, #2
 800238c:	430a      	orrs	r2, r1
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]

		sendData();	//poslat konfiguraci shift registrům
 8002392:	f000 fa1d 	bl	80027d0 <sendData>

		savedSec = sysTime[SYSTIME_SEC];
 8002396:	4b32      	ldr	r3, [pc, #200]	; (8002460 <calibHandler+0x128>)
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	4b32      	ldr	r3, [pc, #200]	; (8002464 <calibHandler+0x12c>)
 800239c:	601a      	str	r2, [r3, #0]

		flags.instructions.calibRequest = 0;
 800239e:	4b2c      	ldr	r3, [pc, #176]	; (8002450 <calibHandler+0x118>)
 80023a0:	7b1a      	ldrb	r2, [r3, #12]
 80023a2:	2108      	movs	r1, #8
 80023a4:	438a      	bics	r2, r1
 80023a6:	731a      	strb	r2, [r3, #12]
		flags.calibRunning = 1;
 80023a8:	4b29      	ldr	r3, [pc, #164]	; (8002450 <calibHandler+0x118>)
 80023aa:	7e1a      	ldrb	r2, [r3, #24]
 80023ac:	2108      	movs	r1, #8
 80023ae:	430a      	orrs	r2, r1
 80023b0:	761a      	strb	r2, [r3, #24]


	}
	if(flags.calibRunning)
 80023b2:	4b27      	ldr	r3, [pc, #156]	; (8002450 <calibHandler+0x118>)
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	071b      	lsls	r3, r3, #28
 80023b8:	0fdb      	lsrs	r3, r3, #31
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d043      	beq.n	8002448 <calibHandler+0x110>
	{
	  static uint8_t lock = 0;
	  if((sysTime[SYSTIME_SEC] >= savedSec + 3) & !lock)
 80023c0:	4b27      	ldr	r3, [pc, #156]	; (8002460 <calibHandler+0x128>)
 80023c2:	6859      	ldr	r1, [r3, #4]
 80023c4:	4b27      	ldr	r3, [pc, #156]	; (8002464 <calibHandler+0x12c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	1cda      	adds	r2, r3, #3
 80023ca:	2300      	movs	r3, #0
 80023cc:	4291      	cmp	r1, r2
 80023ce:	415b      	adcs	r3, r3
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	4a25      	ldr	r2, [pc, #148]	; (8002468 <calibHandler+0x130>)
 80023d4:	7812      	ldrb	r2, [r2, #0]
 80023d6:	4251      	negs	r1, r2
 80023d8:	414a      	adcs	r2, r1
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	4013      	ands	r3, r2
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00c      	beq.n	80023fe <calibHandler+0xc6>
		{
			flags.meas.measRequest = 1;
 80023e4:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <calibHandler+0x118>)
 80023e6:	7d1a      	ldrb	r2, [r3, #20]
 80023e8:	2101      	movs	r1, #1
 80023ea:	430a      	orrs	r2, r1
 80023ec:	751a      	strb	r2, [r3, #20]
			flags.meas.calibMeas = 1;
 80023ee:	4b18      	ldr	r3, [pc, #96]	; (8002450 <calibHandler+0x118>)
 80023f0:	7d1a      	ldrb	r2, [r3, #20]
 80023f2:	2140      	movs	r1, #64	; 0x40
 80023f4:	430a      	orrs	r2, r1
 80023f6:	751a      	strb	r2, [r3, #20]
			lock = 1;
 80023f8:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <calibHandler+0x130>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
		}
		if(flags.instructions.calibDone)
 80023fe:	4b14      	ldr	r3, [pc, #80]	; (8002450 <calibHandler+0x118>)
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	06db      	lsls	r3, r3, #27
 8002404:	0fdb      	lsrs	r3, r3, #31
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01d      	beq.n	8002448 <calibHandler+0x110>
		{
			for(int i = 0; i < regCount; i++)
 800240c:	2300      	movs	r3, #0
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	e008      	b.n	8002424 <calibHandler+0xec>
			{
				regValues[i] = 0;
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <calibHandler+0x11c>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	18d3      	adds	r3, r2, r3
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < regCount; i++)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	3301      	adds	r3, #1
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <calibHandler+0x120>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	001a      	movs	r2, r3
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	4293      	cmp	r3, r2
 800242e:	dbf0      	blt.n	8002412 <calibHandler+0xda>
			}

			sendData();	//poslat konfiguraci shift registrům
 8002430:	f000 f9ce 	bl	80027d0 <sendData>
			flags.calibRunning = 0;
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <calibHandler+0x118>)
 8002436:	7e1a      	ldrb	r2, [r3, #24]
 8002438:	2108      	movs	r1, #8
 800243a:	438a      	bics	r2, r1
 800243c:	761a      	strb	r2, [r3, #24]
			flags.instructions.calibDone = 0;
 800243e:	4b04      	ldr	r3, [pc, #16]	; (8002450 <calibHandler+0x118>)
 8002440:	7b1a      	ldrb	r2, [r3, #12]
 8002442:	2110      	movs	r1, #16
 8002444:	438a      	bics	r2, r1
 8002446:	731a      	strb	r2, [r3, #12]
		}
	}
}
 8002448:	46c0      	nop			; (mov r8, r8)
 800244a:	46bd      	mov	sp, r7
 800244c:	b002      	add	sp, #8
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200003d0 	.word	0x200003d0
 8002454:	20000400 	.word	0x20000400
 8002458:	20000404 	.word	0x20000404
 800245c:	20000414 	.word	0x20000414
 8002460:	200003c0 	.word	0x200003c0
 8002464:	200003f8 	.word	0x200003f8
 8002468:	200003fc 	.word	0x200003fc

0800246c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002470:	b672      	cpsid	i
}
 8002472:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002474:	e7fe      	b.n	8002474 <Error_Handler+0x8>

08002476 <createBuffer>:
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	2018      	movs	r0, #24
 8002480:	f00b f930 	bl	800d6e4 <malloc>
 8002484:	0003      	movs	r3, r0
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <createBuffer+0x1c>
 800248e:	2300      	movs	r3, #0
 8002490:	e022      	b.n	80024d8 <createBuffer+0x62>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	0018      	movs	r0, r3
 8002496:	f00b f925 	bl	800d6e4 <malloc>
 800249a:	0003      	movs	r3, r0
 800249c:	001a      	movs	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d105      	bne.n	80024b6 <createBuffer+0x40>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	0018      	movs	r0, r3
 80024ae:	f00b f923 	bl	800d6f8 <free>
 80024b2:	2300      	movs	r3, #0
 80024b4:	e010      	b.n	80024d8 <createBuffer+0x62>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	605a      	str	r2, [r3, #4]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	60da      	str	r2, [r3, #12]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	1e5a      	subs	r2, r3, #1
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	611a      	str	r2, [r3, #16]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2201      	movs	r2, #1
 80024d4:	751a      	strb	r2, [r3, #20]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	b004      	add	sp, #16
 80024de:	bd80      	pop	{r7, pc}

080024e0 <clearBuffer>:
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	60da      	str	r2, [r3, #12]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	1e5a      	subs	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	611a      	str	r2, [r3, #16]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	751a      	strb	r2, [r3, #20]
 8002504:	46c0      	nop			; (mov r8, r8)
 8002506:	46bd      	mov	sp, r7
 8002508:	b002      	add	sp, #8
 800250a:	bd80      	pop	{r7, pc}

0800250c <push>:
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	000a      	movs	r2, r1
 8002516:	1cfb      	adds	r3, r7, #3
 8002518:	701a      	strb	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	7d1b      	ldrb	r3, [r3, #20]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d101      	bne.n	8002526 <push+0x1a>
 8002522:	2302      	movs	r3, #2
 8002524:	e025      	b.n	8002572 <push+0x66>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	1c5a      	adds	r2, r3, #1
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	0019      	movs	r1, r3
 8002532:	0010      	movs	r0, r2
 8002534:	f7fd ff6a 	bl	800040c <__aeabi_idivmod>
 8002538:	000b      	movs	r3, r1
 800253a:	001a      	movs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	611a      	str	r2, [r3, #16]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	609a      	str	r2, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	18d3      	adds	r3, r2, r3
 8002554:	1cfa      	adds	r2, r7, #3
 8002556:	7812      	ldrb	r2, [r2, #0]
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	429a      	cmp	r2, r3
 8002564:	db01      	blt.n	800256a <push+0x5e>
 8002566:	2202      	movs	r2, #2
 8002568:	e000      	b.n	800256c <push+0x60>
 800256a:	2200      	movs	r2, #0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	751a      	strb	r2, [r3, #20]
 8002570:	2300      	movs	r3, #0
 8002572:	0018      	movs	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	b002      	add	sp, #8
 8002578:	bd80      	pop	{r7, pc}

0800257a <pushStr>:
 800257a:	b580      	push	{r7, lr}
 800257c:	b086      	sub	sp, #24
 800257e:	af00      	add	r7, sp, #0
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6899      	ldr	r1, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	18cb      	adds	r3, r1, r3
 8002592:	429a      	cmp	r2, r3
 8002594:	da01      	bge.n	800259a <pushStr+0x20>
 8002596:	2302      	movs	r3, #2
 8002598:	e013      	b.n	80025c2 <pushStr+0x48>
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	e00b      	b.n	80025b8 <pushStr+0x3e>
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	18d3      	adds	r3, r2, r3
 80025a6:	781a      	ldrb	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	0011      	movs	r1, r2
 80025ac:	0018      	movs	r0, r3
 80025ae:	f7ff ffad 	bl	800250c <push>
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3301      	adds	r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	dbef      	blt.n	80025a0 <pushStr+0x26>
 80025c0:	2300      	movs	r3, #0
 80025c2:	0018      	movs	r0, r3
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b006      	add	sp, #24
 80025c8:	bd80      	pop	{r7, pc}

080025ca <pop>:
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	6039      	str	r1, [r7, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	7d1b      	ldrb	r3, [r3, #20]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <pop+0x16>
 80025dc:	2301      	movs	r3, #1
 80025de:	e023      	b.n	8002628 <pop+0x5e>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	18d3      	adds	r3, r2, r3
 80025ea:	781a      	ldrb	r2, [r3, #0]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	701a      	strb	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	0019      	movs	r1, r3
 80025fc:	0010      	movs	r0, r2
 80025fe:	f7fd ff05 	bl	800040c <__aeabi_idivmod>
 8002602:	000b      	movs	r3, r1
 8002604:	001a      	movs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	1e5a      	subs	r2, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	1e5a      	subs	r2, r3, #1
 800261a:	4313      	orrs	r3, r2
 800261c:	0fdb      	lsrs	r3, r3, #31
 800261e:	b2db      	uxtb	r3, r3
 8002620:	001a      	movs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	751a      	strb	r2, [r3, #20]
 8002626:	2300      	movs	r3, #0
 8002628:	0018      	movs	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	b002      	add	sp, #8
 800262e:	bd80      	pop	{r7, pc}

08002630 <at>:
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	7d1b      	ldrb	r3, [r3, #20]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <at+0x18>
 8002644:	2301      	movs	r3, #1
 8002646:	e01a      	b.n	800267e <at+0x4e>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	429a      	cmp	r2, r3
 8002650:	db01      	blt.n	8002656 <at+0x26>
 8002652:	2303      	movs	r3, #3
 8002654:	e013      	b.n	800267e <at+0x4e>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	18d2      	adds	r2, r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	0019      	movs	r1, r3
 8002664:	0010      	movs	r0, r2
 8002666:	f7fd fed1 	bl	800040c <__aeabi_idivmod>
 800266a:	000b      	movs	r3, r1
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	18d3      	adds	r3, r2, r3
 8002676:	781a      	ldrb	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	701a      	strb	r2, [r3, #0]
 800267c:	2300      	movs	r3, #0
 800267e:	0018      	movs	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	b006      	add	sp, #24
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <getCount>:



//_____Zjistí počet registrů_____//
static uint8_t getCount(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af02      	add	r7, sp, #8
	uint8_t question;
	uint8_t answer;
	regCount = 0;
 800268e:	4b1f      	ldr	r3, [pc, #124]	; (800270c <getCount+0x84>)
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]

	do
	{
		question = 42;
 8002694:	1dfb      	adds	r3, r7, #7
 8002696:	222a      	movs	r2, #42	; 0x2a
 8002698:	701a      	strb	r2, [r3, #0]
		answer = 0;
 800269a:	1dbb      	adds	r3, r7, #6
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
		if(HAL_SPI_TransmitReceive(&hspi1, &question, &answer, 1, 100) != HAL_OK)
 80026a0:	1dba      	adds	r2, r7, #6
 80026a2:	1df9      	adds	r1, r7, #7
 80026a4:	481a      	ldr	r0, [pc, #104]	; (8002710 <getCount+0x88>)
 80026a6:	2364      	movs	r3, #100	; 0x64
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	2301      	movs	r3, #1
 80026ac:	f004 fd90 	bl	80071d0 <HAL_SPI_TransmitReceive>
 80026b0:	1e03      	subs	r3, r0, #0
 80026b2:	d001      	beq.n	80026b8 <getCount+0x30>
			return 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	e024      	b.n	8002702 <getCount+0x7a>
		regCount++;
 80026b8:	4b14      	ldr	r3, [pc, #80]	; (800270c <getCount+0x84>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	3301      	adds	r3, #1
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	4b12      	ldr	r3, [pc, #72]	; (800270c <getCount+0x84>)
 80026c2:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1);
 80026c4:	2001      	movs	r0, #1
 80026c6:	f000 fe77 	bl	80033b8 <HAL_Delay>

		if(regCount >= 100)	//Ošetření nepřipojených relé desek
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <getCount+0x84>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b63      	cmp	r3, #99	; 0x63
 80026d0:	d909      	bls.n	80026e6 <getCount+0x5e>
		{
			flags.conErr = 1;
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <getCount+0x8c>)
 80026d4:	7e1a      	ldrb	r2, [r3, #24]
 80026d6:	2140      	movs	r1, #64	; 0x40
 80026d8:	430a      	orrs	r2, r1
 80026da:	761a      	strb	r2, [r3, #24]
			regCount = 0;
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <getCount+0x84>)
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
			return 0;
 80026e2:	2300      	movs	r3, #0
 80026e4:	e00d      	b.n	8002702 <getCount+0x7a>
		}
	}
	while(answer != question);
 80026e6:	1dbb      	adds	r3, r7, #6
 80026e8:	781a      	ldrb	r2, [r3, #0]
 80026ea:	1dfb      	adds	r3, r7, #7
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d1d0      	bne.n	8002694 <getCount+0xc>

	regCount--;
 80026f2:	4b06      	ldr	r3, [pc, #24]	; (800270c <getCount+0x84>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	4b04      	ldr	r3, [pc, #16]	; (800270c <getCount+0x84>)
 80026fc:	701a      	strb	r2, [r3, #0]

	return regCount;
 80026fe:	4b03      	ldr	r3, [pc, #12]	; (800270c <getCount+0x84>)
 8002700:	781b      	ldrb	r3, [r3, #0]
}
 8002702:	0018      	movs	r0, r3
 8002704:	46bd      	mov	sp, r7
 8002706:	b002      	add	sp, #8
 8002708:	bd80      	pop	{r7, pc}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	20000404 	.word	0x20000404
 8002710:	20000250 	.word	0x20000250
 8002714:	200003d0 	.word	0x200003d0

08002718 <regInit>:

//_____Inicializuje registry_____//
REG_STATE regInit(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
	//___Clear registrů___//
	REG_CLR_ACTIVE;
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	019b      	lsls	r3, r3, #6
 8002722:	4827      	ldr	r0, [pc, #156]	; (80027c0 <regInit+0xa8>)
 8002724:	2200      	movs	r2, #0
 8002726:	0019      	movs	r1, r3
 8002728:	f001 fe7b 	bl	8004422 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800272c:	2005      	movs	r0, #5
 800272e:	f000 fe43 	bl	80033b8 <HAL_Delay>
	REG_CLR_INACTIVE;
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	019b      	lsls	r3, r3, #6
 8002736:	4822      	ldr	r0, [pc, #136]	; (80027c0 <regInit+0xa8>)
 8002738:	2201      	movs	r2, #1
 800273a:	0019      	movs	r1, r3
 800273c:	f001 fe71 	bl	8004422 <HAL_GPIO_WritePin>

	REG_DISABLE;
 8002740:	2380      	movs	r3, #128	; 0x80
 8002742:	021b      	lsls	r3, r3, #8
 8002744:	481e      	ldr	r0, [pc, #120]	; (80027c0 <regInit+0xa8>)
 8002746:	2201      	movs	r2, #1
 8002748:	0019      	movs	r1, r3
 800274a:	f001 fe6a 	bl	8004422 <HAL_GPIO_WritePin>

		if(getCount() == 0)
 800274e:	f7ff ff9b 	bl	8002688 <getCount>
 8002752:	1e03      	subs	r3, r0, #0
 8002754:	d101      	bne.n	800275a <regInit+0x42>
		{
			return REG_CON_ERR;	//Connection error
 8002756:	2301      	movs	r3, #1
 8002758:	e02e      	b.n	80027b8 <regInit+0xa0>
		}

		regValues = (uint8_t*) malloc(regCount * sizeof(uint8_t));
 800275a:	4b1a      	ldr	r3, [pc, #104]	; (80027c4 <regInit+0xac>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	0018      	movs	r0, r3
 8002760:	f00a ffc0 	bl	800d6e4 <malloc>
 8002764:	0003      	movs	r3, r0
 8002766:	001a      	movs	r2, r3
 8002768:	4b17      	ldr	r3, [pc, #92]	; (80027c8 <regInit+0xb0>)
 800276a:	601a      	str	r2, [r3, #0]
		if(regValues == NULL)
 800276c:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <regInit+0xb0>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d104      	bne.n	800277e <regInit+0x66>
		{
			regState = REG_ERR;
 8002774:	4b15      	ldr	r3, [pc, #84]	; (80027cc <regInit+0xb4>)
 8002776:	2202      	movs	r2, #2
 8002778:	701a      	strb	r2, [r3, #0]
			return REG_ERR;
 800277a:	2302      	movs	r3, #2
 800277c:	e01c      	b.n	80027b8 <regInit+0xa0>
		}

		for(int i = 0; i < regCount; i++)
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]
 8002782:	e008      	b.n	8002796 <regInit+0x7e>
		{
			regValues[i] = 0;
 8002784:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <regInit+0xb0>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	18d3      	adds	r3, r2, r3
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < regCount; i++)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3301      	adds	r3, #1
 8002794:	607b      	str	r3, [r7, #4]
 8002796:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <regInit+0xac>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	001a      	movs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4293      	cmp	r3, r2
 80027a0:	dbf0      	blt.n	8002784 <regInit+0x6c>
		}

		sendData();
 80027a2:	f000 f815 	bl	80027d0 <sendData>

	REG_ENABLE;
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	021b      	lsls	r3, r3, #8
 80027aa:	4805      	ldr	r0, [pc, #20]	; (80027c0 <regInit+0xa8>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	0019      	movs	r1, r3
 80027b0:	f001 fe37 	bl	8004422 <HAL_GPIO_WritePin>

	return regState;
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <regInit+0xb4>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
}
 80027b8:	0018      	movs	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b002      	add	sp, #8
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	48000400 	.word	0x48000400
 80027c4:	20000404 	.word	0x20000404
 80027c8:	20000400 	.word	0x20000400
 80027cc:	200003fd 	.word	0x200003fd

080027d0 <sendData>:

//_____Pošle data z regValues do registrů_____//
REG_STATE sendData(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
	if(HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)
 80027d4:	4b17      	ldr	r3, [pc, #92]	; (8002834 <sendData+0x64>)
 80027d6:	6819      	ldr	r1, [r3, #0]
 80027d8:	4b17      	ldr	r3, [pc, #92]	; (8002838 <sendData+0x68>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	b29a      	uxth	r2, r3
 80027de:	4817      	ldr	r0, [pc, #92]	; (800283c <sendData+0x6c>)
 80027e0:	2364      	movs	r3, #100	; 0x64
 80027e2:	f004 fb9d 	bl	8006f20 <HAL_SPI_Transmit>
 80027e6:	1e03      	subs	r3, r0, #0
 80027e8:	d114      	bne.n	8002814 <sendData+0x44>
	{
		//vytvoř pulz na RCLK¨
		REG_RCLK_HIGH;
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	01db      	lsls	r3, r3, #7
 80027ee:	4814      	ldr	r0, [pc, #80]	; (8002840 <sendData+0x70>)
 80027f0:	2201      	movs	r2, #1
 80027f2:	0019      	movs	r1, r3
 80027f4:	f001 fe15 	bl	8004422 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80027f8:	2001      	movs	r0, #1
 80027fa:	f000 fddd 	bl	80033b8 <HAL_Delay>
		REG_RCLK_LOW;
 80027fe:	2380      	movs	r3, #128	; 0x80
 8002800:	01db      	lsls	r3, r3, #7
 8002802:	480f      	ldr	r0, [pc, #60]	; (8002840 <sendData+0x70>)
 8002804:	2200      	movs	r2, #0
 8002806:	0019      	movs	r1, r3
 8002808:	f001 fe0b 	bl	8004422 <HAL_GPIO_WritePin>

		regState = REG_OK;
 800280c:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <sendData+0x74>)
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]
 8002812:	e009      	b.n	8002828 <sendData+0x58>
	}
	else
	{
		regState = REG_ERR;
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <sendData+0x74>)
 8002816:	2202      	movs	r2, #2
 8002818:	701a      	strb	r2, [r3, #0]

		REG_DISABLE;	//výstup ve stavu vysoké impedance (zabrání nechtěnému nastavení relé)
 800281a:	2380      	movs	r3, #128	; 0x80
 800281c:	021b      	lsls	r3, r3, #8
 800281e:	4808      	ldr	r0, [pc, #32]	; (8002840 <sendData+0x70>)
 8002820:	2201      	movs	r2, #1
 8002822:	0019      	movs	r1, r3
 8002824:	f001 fdfd 	bl	8004422 <HAL_GPIO_WritePin>
	}

	return regState;
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <sendData+0x74>)
 800282a:	781b      	ldrb	r3, [r3, #0]
}
 800282c:	0018      	movs	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	20000400 	.word	0x20000400
 8002838:	20000404 	.word	0x20000404
 800283c:	20000250 	.word	0x20000250
 8002840:	48000400 	.word	0x48000400
 8002844:	200003fd 	.word	0x200003fd

08002848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284e:	4b0f      	ldr	r3, [pc, #60]	; (800288c <HAL_MspInit+0x44>)
 8002850:	699a      	ldr	r2, [r3, #24]
 8002852:	4b0e      	ldr	r3, [pc, #56]	; (800288c <HAL_MspInit+0x44>)
 8002854:	2101      	movs	r1, #1
 8002856:	430a      	orrs	r2, r1
 8002858:	619a      	str	r2, [r3, #24]
 800285a:	4b0c      	ldr	r3, [pc, #48]	; (800288c <HAL_MspInit+0x44>)
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2201      	movs	r2, #1
 8002860:	4013      	ands	r3, r2
 8002862:	607b      	str	r3, [r7, #4]
 8002864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_MspInit+0x44>)
 8002868:	69da      	ldr	r2, [r3, #28]
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <HAL_MspInit+0x44>)
 800286c:	2180      	movs	r1, #128	; 0x80
 800286e:	0549      	lsls	r1, r1, #21
 8002870:	430a      	orrs	r2, r1
 8002872:	61da      	str	r2, [r3, #28]
 8002874:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_MspInit+0x44>)
 8002876:	69da      	ldr	r2, [r3, #28]
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	055b      	lsls	r3, r3, #21
 800287c:	4013      	ands	r3, r2
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	46bd      	mov	sp, r7
 8002886:	b002      	add	sp, #8
 8002888:	bd80      	pop	{r7, pc}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	40021000 	.word	0x40021000

08002890 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b08d      	sub	sp, #52	; 0x34
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	241c      	movs	r4, #28
 800289a:	193b      	adds	r3, r7, r4
 800289c:	0018      	movs	r0, r3
 800289e:	2314      	movs	r3, #20
 80028a0:	001a      	movs	r2, r3
 80028a2:	2100      	movs	r1, #0
 80028a4:	f00a ff3b 	bl	800d71e <memset>
  if(hadc->Instance==ADC1)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a3a      	ldr	r2, [pc, #232]	; (8002998 <HAL_ADC_MspInit+0x108>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d16d      	bne.n	800298e <HAL_ADC_MspInit+0xfe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028b2:	4b3a      	ldr	r3, [pc, #232]	; (800299c <HAL_ADC_MspInit+0x10c>)
 80028b4:	699a      	ldr	r2, [r3, #24]
 80028b6:	4b39      	ldr	r3, [pc, #228]	; (800299c <HAL_ADC_MspInit+0x10c>)
 80028b8:	2180      	movs	r1, #128	; 0x80
 80028ba:	0089      	lsls	r1, r1, #2
 80028bc:	430a      	orrs	r2, r1
 80028be:	619a      	str	r2, [r3, #24]
 80028c0:	4b36      	ldr	r3, [pc, #216]	; (800299c <HAL_ADC_MspInit+0x10c>)
 80028c2:	699a      	ldr	r2, [r3, #24]
 80028c4:	2380      	movs	r3, #128	; 0x80
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
 80028cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ce:	4b33      	ldr	r3, [pc, #204]	; (800299c <HAL_ADC_MspInit+0x10c>)
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	4b32      	ldr	r3, [pc, #200]	; (800299c <HAL_ADC_MspInit+0x10c>)
 80028d4:	2180      	movs	r1, #128	; 0x80
 80028d6:	0309      	lsls	r1, r1, #12
 80028d8:	430a      	orrs	r2, r1
 80028da:	615a      	str	r2, [r3, #20]
 80028dc:	4b2f      	ldr	r3, [pc, #188]	; (800299c <HAL_ADC_MspInit+0x10c>)
 80028de:	695a      	ldr	r2, [r3, #20]
 80028e0:	2380      	movs	r3, #128	; 0x80
 80028e2:	031b      	lsls	r3, r3, #12
 80028e4:	4013      	ands	r3, r2
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ea:	4b2c      	ldr	r3, [pc, #176]	; (800299c <HAL_ADC_MspInit+0x10c>)
 80028ec:	695a      	ldr	r2, [r3, #20]
 80028ee:	4b2b      	ldr	r3, [pc, #172]	; (800299c <HAL_ADC_MspInit+0x10c>)
 80028f0:	2180      	movs	r1, #128	; 0x80
 80028f2:	0289      	lsls	r1, r1, #10
 80028f4:	430a      	orrs	r2, r1
 80028f6:	615a      	str	r2, [r3, #20]
 80028f8:	4b28      	ldr	r3, [pc, #160]	; (800299c <HAL_ADC_MspInit+0x10c>)
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	2380      	movs	r3, #128	; 0x80
 80028fe:	029b      	lsls	r3, r3, #10
 8002900:	4013      	ands	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002906:	4b25      	ldr	r3, [pc, #148]	; (800299c <HAL_ADC_MspInit+0x10c>)
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	4b24      	ldr	r3, [pc, #144]	; (800299c <HAL_ADC_MspInit+0x10c>)
 800290c:	2180      	movs	r1, #128	; 0x80
 800290e:	02c9      	lsls	r1, r1, #11
 8002910:	430a      	orrs	r2, r1
 8002912:	615a      	str	r2, [r3, #20]
 8002914:	4b21      	ldr	r3, [pc, #132]	; (800299c <HAL_ADC_MspInit+0x10c>)
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	2380      	movs	r3, #128	; 0x80
 800291a:	02db      	lsls	r3, r3, #11
 800291c:	4013      	ands	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002922:	193b      	adds	r3, r7, r4
 8002924:	223f      	movs	r2, #63	; 0x3f
 8002926:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002928:	193b      	adds	r3, r7, r4
 800292a:	2203      	movs	r2, #3
 800292c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	193b      	adds	r3, r7, r4
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002934:	193b      	adds	r3, r7, r4
 8002936:	4a1a      	ldr	r2, [pc, #104]	; (80029a0 <HAL_ADC_MspInit+0x110>)
 8002938:	0019      	movs	r1, r3
 800293a:	0010      	movs	r0, r2
 800293c:	f001 fbdc 	bl	80040f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002940:	193b      	adds	r3, r7, r4
 8002942:	22ff      	movs	r2, #255	; 0xff
 8002944:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002946:	193b      	adds	r3, r7, r4
 8002948:	2203      	movs	r2, #3
 800294a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	193b      	adds	r3, r7, r4
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002952:	193a      	adds	r2, r7, r4
 8002954:	2390      	movs	r3, #144	; 0x90
 8002956:	05db      	lsls	r3, r3, #23
 8002958:	0011      	movs	r1, r2
 800295a:	0018      	movs	r0, r3
 800295c:	f001 fbcc 	bl	80040f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002960:	193b      	adds	r3, r7, r4
 8002962:	2203      	movs	r2, #3
 8002964:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002966:	193b      	adds	r3, r7, r4
 8002968:	2203      	movs	r2, #3
 800296a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	193b      	adds	r3, r7, r4
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002972:	193b      	adds	r3, r7, r4
 8002974:	4a0b      	ldr	r2, [pc, #44]	; (80029a4 <HAL_ADC_MspInit+0x114>)
 8002976:	0019      	movs	r1, r3
 8002978:	0010      	movs	r0, r2
 800297a:	f001 fbbd 	bl	80040f8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 800297e:	2200      	movs	r2, #0
 8002980:	2100      	movs	r1, #0
 8002982:	200c      	movs	r0, #12
 8002984:	f001 fb08 	bl	8003f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8002988:	200c      	movs	r0, #12
 800298a:	f001 fb1a 	bl	8003fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	46bd      	mov	sp, r7
 8002992:	b00d      	add	sp, #52	; 0x34
 8002994:	bd90      	pop	{r4, r7, pc}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	40012400 	.word	0x40012400
 800299c:	40021000 	.word	0x40021000
 80029a0:	48000800 	.word	0x48000800
 80029a4:	48000400 	.word	0x48000400

080029a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b08b      	sub	sp, #44	; 0x2c
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	2414      	movs	r4, #20
 80029b2:	193b      	adds	r3, r7, r4
 80029b4:	0018      	movs	r0, r3
 80029b6:	2314      	movs	r3, #20
 80029b8:	001a      	movs	r2, r3
 80029ba:	2100      	movs	r1, #0
 80029bc:	f00a feaf 	bl	800d71e <memset>
  if(hspi->Instance==SPI1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a1c      	ldr	r2, [pc, #112]	; (8002a38 <HAL_SPI_MspInit+0x90>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d131      	bne.n	8002a2e <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029ca:	4b1c      	ldr	r3, [pc, #112]	; (8002a3c <HAL_SPI_MspInit+0x94>)
 80029cc:	699a      	ldr	r2, [r3, #24]
 80029ce:	4b1b      	ldr	r3, [pc, #108]	; (8002a3c <HAL_SPI_MspInit+0x94>)
 80029d0:	2180      	movs	r1, #128	; 0x80
 80029d2:	0149      	lsls	r1, r1, #5
 80029d4:	430a      	orrs	r2, r1
 80029d6:	619a      	str	r2, [r3, #24]
 80029d8:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <HAL_SPI_MspInit+0x94>)
 80029da:	699a      	ldr	r2, [r3, #24]
 80029dc:	2380      	movs	r3, #128	; 0x80
 80029de:	015b      	lsls	r3, r3, #5
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e6:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <HAL_SPI_MspInit+0x94>)
 80029e8:	695a      	ldr	r2, [r3, #20]
 80029ea:	4b14      	ldr	r3, [pc, #80]	; (8002a3c <HAL_SPI_MspInit+0x94>)
 80029ec:	2180      	movs	r1, #128	; 0x80
 80029ee:	02c9      	lsls	r1, r1, #11
 80029f0:	430a      	orrs	r2, r1
 80029f2:	615a      	str	r2, [r3, #20]
 80029f4:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <HAL_SPI_MspInit+0x94>)
 80029f6:	695a      	ldr	r2, [r3, #20]
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	02db      	lsls	r3, r3, #11
 80029fc:	4013      	ands	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002a02:	0021      	movs	r1, r4
 8002a04:	187b      	adds	r3, r7, r1
 8002a06:	2238      	movs	r2, #56	; 0x38
 8002a08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0a:	187b      	adds	r3, r7, r1
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	187b      	adds	r3, r7, r1
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a16:	187b      	adds	r3, r7, r1
 8002a18:	2203      	movs	r2, #3
 8002a1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002a1c:	187b      	adds	r3, r7, r1
 8002a1e:	2200      	movs	r2, #0
 8002a20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a22:	187b      	adds	r3, r7, r1
 8002a24:	4a06      	ldr	r2, [pc, #24]	; (8002a40 <HAL_SPI_MspInit+0x98>)
 8002a26:	0019      	movs	r1, r3
 8002a28:	0010      	movs	r0, r2
 8002a2a:	f001 fb65 	bl	80040f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a2e:	46c0      	nop			; (mov r8, r8)
 8002a30:	46bd      	mov	sp, r7
 8002a32:	b00b      	add	sp, #44	; 0x2c
 8002a34:	bd90      	pop	{r4, r7, pc}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	40013000 	.word	0x40013000
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	48000400 	.word	0x48000400

08002a44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a0e      	ldr	r2, [pc, #56]	; (8002a8c <HAL_TIM_Base_MspInit+0x48>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d115      	bne.n	8002a82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002a56:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <HAL_TIM_Base_MspInit+0x4c>)
 8002a58:	69da      	ldr	r2, [r3, #28]
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <HAL_TIM_Base_MspInit+0x4c>)
 8002a5c:	2180      	movs	r1, #128	; 0x80
 8002a5e:	0049      	lsls	r1, r1, #1
 8002a60:	430a      	orrs	r2, r1
 8002a62:	61da      	str	r2, [r3, #28]
 8002a64:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <HAL_TIM_Base_MspInit+0x4c>)
 8002a66:	69da      	ldr	r2, [r3, #28]
 8002a68:	2380      	movs	r3, #128	; 0x80
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002a72:	2200      	movs	r2, #0
 8002a74:	2100      	movs	r1, #0
 8002a76:	2013      	movs	r0, #19
 8002a78:	f001 fa8e 	bl	8003f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002a7c:	2013      	movs	r0, #19
 8002a7e:	f001 faa0 	bl	8003fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b004      	add	sp, #16
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	40002000 	.word	0x40002000
 8002a90:	40021000 	.word	0x40021000

08002a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a94:	b590      	push	{r4, r7, lr}
 8002a96:	b08b      	sub	sp, #44	; 0x2c
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9c:	2414      	movs	r4, #20
 8002a9e:	193b      	adds	r3, r7, r4
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	2314      	movs	r3, #20
 8002aa4:	001a      	movs	r2, r3
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	f00a fe39 	bl	800d71e <memset>
  if(huart->Instance==USART3)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a20      	ldr	r2, [pc, #128]	; (8002b34 <HAL_UART_MspInit+0xa0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d13a      	bne.n	8002b2c <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ab6:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <HAL_UART_MspInit+0xa4>)
 8002ab8:	69da      	ldr	r2, [r3, #28]
 8002aba:	4b1f      	ldr	r3, [pc, #124]	; (8002b38 <HAL_UART_MspInit+0xa4>)
 8002abc:	2180      	movs	r1, #128	; 0x80
 8002abe:	02c9      	lsls	r1, r1, #11
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	61da      	str	r2, [r3, #28]
 8002ac4:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <HAL_UART_MspInit+0xa4>)
 8002ac6:	69da      	ldr	r2, [r3, #28]
 8002ac8:	2380      	movs	r3, #128	; 0x80
 8002aca:	02db      	lsls	r3, r3, #11
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
 8002ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ad2:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <HAL_UART_MspInit+0xa4>)
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <HAL_UART_MspInit+0xa4>)
 8002ad8:	2180      	movs	r1, #128	; 0x80
 8002ada:	0309      	lsls	r1, r1, #12
 8002adc:	430a      	orrs	r2, r1
 8002ade:	615a      	str	r2, [r3, #20]
 8002ae0:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <HAL_UART_MspInit+0xa4>)
 8002ae2:	695a      	ldr	r2, [r3, #20]
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	031b      	lsls	r3, r3, #12
 8002ae8:	4013      	ands	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002aee:	193b      	adds	r3, r7, r4
 8002af0:	22c0      	movs	r2, #192	; 0xc0
 8002af2:	0112      	lsls	r2, r2, #4
 8002af4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af6:	0021      	movs	r1, r4
 8002af8:	187b      	adds	r3, r7, r1
 8002afa:	2202      	movs	r2, #2
 8002afc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	187b      	adds	r3, r7, r1
 8002b00:	2200      	movs	r2, #0
 8002b02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b04:	187b      	adds	r3, r7, r1
 8002b06:	2203      	movs	r2, #3
 8002b08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8002b0a:	187b      	adds	r3, r7, r1
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b10:	187b      	adds	r3, r7, r1
 8002b12:	4a0a      	ldr	r2, [pc, #40]	; (8002b3c <HAL_UART_MspInit+0xa8>)
 8002b14:	0019      	movs	r1, r3
 8002b16:	0010      	movs	r0, r2
 8002b18:	f001 faee 	bl	80040f8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2100      	movs	r1, #0
 8002b20:	201d      	movs	r0, #29
 8002b22:	f001 fa39 	bl	8003f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8002b26:	201d      	movs	r0, #29
 8002b28:	f001 fa4b 	bl	8003fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002b2c:	46c0      	nop			; (mov r8, r8)
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b00b      	add	sp, #44	; 0x2c
 8002b32:	bd90      	pop	{r4, r7, pc}
 8002b34:	40004800 	.word	0x40004800
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	48000800 	.word	0x48000800

08002b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b44:	e7fe      	b.n	8002b44 <NMI_Handler+0x4>

08002b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b4a:	e7fe      	b.n	8002b4a <HardFault_Handler+0x4>

08002b4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002b50:	46c0      	nop			; (mov r8, r8)
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b64:	f000 fc0c 	bl	8003380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b68:	46c0      	nop			; (mov r8, r8)
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	0018      	movs	r0, r3
 8002b78:	f001 fc8c 	bl	8004494 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_0_Pin);
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	0018      	movs	r0, r3
 8002b82:	f001 fc87 	bl	8004494 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002b90:	4b03      	ldr	r3, [pc, #12]	; (8002ba0 <ADC1_COMP_IRQHandler+0x14>)
 8002b92:	0018      	movs	r0, r3
 8002b94:	f000 fe3c 	bl	8003810 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8002b98:	46c0      	nop			; (mov r8, r8)
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	20000210 	.word	0x20000210

08002ba4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002ba8:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <TIM14_IRQHandler+0x14>)
 8002baa:	0018      	movs	r0, r3
 8002bac:	f004 ff52 	bl	8007a54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002bb0:	46c0      	nop			; (mov r8, r8)
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	200002b4 	.word	0x200002b4

08002bbc <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002bc0:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <USART3_4_IRQHandler+0x14>)
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f005 fbb4 	bl	8008330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	200002fc 	.word	0x200002fc

08002bd4 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <USB_IRQHandler+0x14>)
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f001 fdac 	bl	8004738 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002be0:	46c0      	nop			; (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	200010b8 	.word	0x200010b8

08002bec <_sbrk>:
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <_sbrk+0x5c>)
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <_sbrk+0x60>)
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <_sbrk+0x64>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d102      	bne.n	8002c0e <_sbrk+0x22>
 8002c08:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <_sbrk+0x64>)
 8002c0a:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <_sbrk+0x68>)
 8002c0c:	601a      	str	r2, [r3, #0]
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <_sbrk+0x64>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	18d3      	adds	r3, r2, r3
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d207      	bcs.n	8002c2c <_sbrk+0x40>
 8002c1c:	f00a fd38 	bl	800d690 <__errno>
 8002c20:	0003      	movs	r3, r0
 8002c22:	220c      	movs	r2, #12
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	2301      	movs	r3, #1
 8002c28:	425b      	negs	r3, r3
 8002c2a:	e009      	b.n	8002c40 <_sbrk+0x54>
 8002c2c:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <_sbrk+0x64>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <_sbrk+0x64>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	18d2      	adds	r2, r2, r3
 8002c3a:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <_sbrk+0x64>)
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	0018      	movs	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b006      	add	sp, #24
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	20004000 	.word	0x20004000
 8002c4c:	00000400 	.word	0x00000400
 8002c50:	20000408 	.word	0x20000408
 8002c54:	200015e0 	.word	0x200015e0

08002c58 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002c5c:	46c0      	nop			; (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
	...

08002c64 <currentPhase>:
static void startTest();
static void stopTest();

//_____Dotaz na aktuální fázi testu_____//
TEST_PHASE currentPhase()
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
	return testPhase;
 8002c68:	4b02      	ldr	r3, [pc, #8]	; (8002c74 <currentPhase+0x10>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
}
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	2000040c 	.word	0x2000040c

08002c78 <testHandler>:

//_____Funkce pro řízení testu_____//
void testHandler()
{
 8002c78:	b590      	push	{r4, r7, lr}
 8002c7a:	b08b      	sub	sp, #44	; 0x2c
 8002c7c:	af00      	add	r7, sp, #0
	flags.testProgress = 0;
 8002c7e:	4bcb      	ldr	r3, [pc, #812]	; (8002fac <testHandler+0x334>)
 8002c80:	7e1a      	ldrb	r2, [r3, #24]
 8002c82:	2102      	movs	r1, #2
 8002c84:	438a      	bics	r2, r1
 8002c86:	761a      	strb	r2, [r3, #24]
	flags.testCanceled = 0;
 8002c88:	4bc8      	ldr	r3, [pc, #800]	; (8002fac <testHandler+0x334>)
 8002c8a:	7e1a      	ldrb	r2, [r3, #24]
 8002c8c:	2104      	movs	r1, #4
 8002c8e:	438a      	bics	r2, r1
 8002c90:	761a      	strb	r2, [r3, #24]

	if(flags.instructions.startRequest)
 8002c92:	4bc6      	ldr	r3, [pc, #792]	; (8002fac <testHandler+0x334>)
 8002c94:	7b1b      	ldrb	r3, [r3, #12]
 8002c96:	2201      	movs	r2, #1
 8002c98:	4013      	ands	r3, r2
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d032      	beq.n	8002d06 <testHandler+0x8e>
	{
		if(testPhase == WAITING)
 8002ca0:	4bc3      	ldr	r3, [pc, #780]	; (8002fb0 <testHandler+0x338>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d124      	bne.n	8002cf2 <testHandler+0x7a>
		{
			if(flags.conErr)
 8002ca8:	4bc0      	ldr	r3, [pc, #768]	; (8002fac <testHandler+0x334>)
 8002caa:	7e1b      	ldrb	r3, [r3, #24]
 8002cac:	2240      	movs	r2, #64	; 0x40
 8002cae:	4013      	ands	r3, r2
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d01a      	beq.n	8002cec <testHandler+0x74>
			{
				char txt[] = {"Relay PCB connection error\n"};
 8002cb6:	1d3b      	adds	r3, r7, #4
 8002cb8:	4abe      	ldr	r2, [pc, #760]	; (8002fb4 <testHandler+0x33c>)
 8002cba:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002cbc:	c313      	stmia	r3!, {r0, r1, r4}
 8002cbe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002cc0:	c313      	stmia	r3!, {r0, r1, r4}
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	601a      	str	r2, [r3, #0]
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8002cc6:	4bbc      	ldr	r3, [pc, #752]	; (8002fb8 <testHandler+0x340>)
 8002cc8:	681c      	ldr	r4, [r3, #0]
 8002cca:	1d3b      	adds	r3, r7, #4
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f7fd fa1b 	bl	8000108 <strlen>
 8002cd2:	0003      	movs	r3, r0
 8002cd4:	001a      	movs	r2, r3
 8002cd6:	1d3b      	adds	r3, r7, #4
 8002cd8:	0019      	movs	r1, r3
 8002cda:	0020      	movs	r0, r4
 8002cdc:	f7ff fc4d 	bl	800257a <pushStr>
				flags.instructions.startRequest = 0;
 8002ce0:	4bb2      	ldr	r3, [pc, #712]	; (8002fac <testHandler+0x334>)
 8002ce2:	7b1a      	ldrb	r2, [r3, #12]
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	438a      	bics	r2, r1
 8002ce8:	731a      	strb	r2, [r3, #12]
 8002cea:	e00c      	b.n	8002d06 <testHandler+0x8e>
			}
			else
			{
				startTest();
 8002cec:	f000 f9f6 	bl	80030dc <startTest>
 8002cf0:	e009      	b.n	8002d06 <testHandler+0x8e>
			}
		}
		else
		{
			flags.startConflict = 1;
 8002cf2:	4bae      	ldr	r3, [pc, #696]	; (8002fac <testHandler+0x334>)
 8002cf4:	7e1a      	ldrb	r2, [r3, #24]
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	761a      	strb	r2, [r3, #24]
			flags.instructions.startRequest = 0;
 8002cfc:	4bab      	ldr	r3, [pc, #684]	; (8002fac <testHandler+0x334>)
 8002cfe:	7b1a      	ldrb	r2, [r3, #12]
 8002d00:	2101      	movs	r1, #1
 8002d02:	438a      	bics	r2, r1
 8002d04:	731a      	strb	r2, [r3, #12]
		}
	}
	if(flags.instructions.stopRequest)
 8002d06:	4ba9      	ldr	r3, [pc, #676]	; (8002fac <testHandler+0x334>)
 8002d08:	7b1b      	ldrb	r3, [r3, #12]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <testHandler+0xa0>
	{
		stopTest();
 8002d14:	f000 fa88 	bl	8003228 <stopTest>
	}

	if(testPhase != WAITING)
 8002d18:	4ba5      	ldr	r3, [pc, #660]	; (8002fb0 <testHandler+0x338>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00d      	beq.n	8002d3c <testHandler+0xc4>
	{
		if(flags.buttons.butt0_ver)
 8002d20:	4ba2      	ldr	r3, [pc, #648]	; (8002fac <testHandler+0x334>)
 8002d22:	791b      	ldrb	r3, [r3, #4]
 8002d24:	2202      	movs	r2, #2
 8002d26:	4013      	ands	r3, r2
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d006      	beq.n	8002d3c <testHandler+0xc4>
		{
			stopTest();
 8002d2e:	f000 fa7b 	bl	8003228 <stopTest>
			flags.testCanceled = 1;
 8002d32:	4b9e      	ldr	r3, [pc, #632]	; (8002fac <testHandler+0x334>)
 8002d34:	7e1a      	ldrb	r2, [r3, #24]
 8002d36:	2104      	movs	r1, #4
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	761a      	strb	r2, [r3, #24]
		}
	}

	switch(testPhase)
 8002d3c:	4b9c      	ldr	r3, [pc, #624]	; (8002fb0 <testHandler+0x338>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b06      	cmp	r3, #6
 8002d42:	d900      	bls.n	8002d46 <testHandler+0xce>
 8002d44:	e1be      	b.n	80030c4 <testHandler+0x44c>
 8002d46:	009a      	lsls	r2, r3, #2
 8002d48:	4b9c      	ldr	r3, [pc, #624]	; (8002fbc <testHandler+0x344>)
 8002d4a:	18d3      	adds	r3, r2, r3
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	469f      	mov	pc, r3
	{
	case WAITING:
		flags.testProgress = 0;
 8002d50:	4b96      	ldr	r3, [pc, #600]	; (8002fac <testHandler+0x334>)
 8002d52:	7e1a      	ldrb	r2, [r3, #24]
 8002d54:	2102      	movs	r1, #2
 8002d56:	438a      	bics	r2, r1
 8002d58:	761a      	strb	r2, [r3, #24]
		//flags.meas.measRequest = 0;
		break;
 8002d5a:	e1b3      	b.n	80030c4 <testHandler+0x44c>
	case START:

		//___Pokud je dokončeno měření napětí naprázdno...____//
		if(flags.meas.measComplete)
 8002d5c:	4b93      	ldr	r3, [pc, #588]	; (8002fac <testHandler+0x334>)
 8002d5e:	7d1b      	ldrb	r3, [r3, #20]
 8002d60:	2202      	movs	r2, #2
 8002d62:	4013      	ands	r3, r2
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <testHandler+0xfe>
		{
			testPhase++;
 8002d6a:	4b91      	ldr	r3, [pc, #580]	; (8002fb0 <testHandler+0x338>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	4b8f      	ldr	r3, [pc, #572]	; (8002fb0 <testHandler+0x338>)
 8002d74:	701a      	strb	r2, [r3, #0]
		}

		if(flags.time.sec)
 8002d76:	4b8d      	ldr	r3, [pc, #564]	; (8002fac <testHandler+0x334>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d05e      	beq.n	8002e42 <testHandler+0x1ca>
		{
			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED1);	//blikání prvni progress led
 8002d84:	4b8e      	ldr	r3, [pc, #568]	; (8002fc0 <testHandler+0x348>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	781a      	ldrb	r2, [r3, #0]
 8002d8a:	4b8d      	ldr	r3, [pc, #564]	; (8002fc0 <testHandler+0x348>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2120      	movs	r1, #32
 8002d90:	404a      	eors	r2, r1
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]
			sendData();
 8002d96:	f7ff fd1b 	bl	80027d0 <sendData>

			switch(sysTime[SYSTIME_SEC])
 8002d9a:	4b8a      	ldr	r3, [pc, #552]	; (8002fc4 <testHandler+0x34c>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b05      	cmp	r3, #5
 8002da0:	d851      	bhi.n	8002e46 <testHandler+0x1ce>
 8002da2:	009a      	lsls	r2, r3, #2
 8002da4:	4b88      	ldr	r3, [pc, #544]	; (8002fc8 <testHandler+0x350>)
 8002da6:	18d3      	adds	r3, r2, r3
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	469f      	mov	pc, r3
			{
			case 1:	//Po jedne sekunde zapnout topeni
				HAL_Delay(2);	//pro oddaleni sepnuti rele od spi komunikace
 8002dac:	2002      	movs	r0, #2
 8002dae:	f000 fb03 	bl	80033b8 <HAL_Delay>
				HTR_ON;
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4885      	ldr	r0, [pc, #532]	; (8002fcc <testHandler+0x354>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	0019      	movs	r1, r3
 8002dbc:	f001 fb31 	bl	8004422 <HAL_GPIO_WritePin>
				EM_HTR_ON;
 8002dc0:	2380      	movs	r3, #128	; 0x80
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4881      	ldr	r0, [pc, #516]	; (8002fcc <testHandler+0x354>)
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	0019      	movs	r1, r3
 8002dca:	f001 fb2a 	bl	8004422 <HAL_GPIO_WritePin>
				break;
 8002dce:	e03b      	b.n	8002e48 <testHandler+0x1d0>
			case 2:
				break;
			case 3:	//V treti sekunde overit funkcnost topeni
				if(HAL_GPIO_ReadPin(HEATER_STATE_GPIO_Port, HEATER_STATE_Pin) != GPIO_PIN_RESET)	//Topení neni v poradku
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	015b      	lsls	r3, r3, #5
 8002dd4:	4a7e      	ldr	r2, [pc, #504]	; (8002fd0 <testHandler+0x358>)
 8002dd6:	0019      	movs	r1, r3
 8002dd8:	0010      	movs	r0, r2
 8002dda:	f001 fb05 	bl	80043e8 <HAL_GPIO_ReadPin>
 8002dde:	1e03      	subs	r3, r0, #0
 8002de0:	d007      	beq.n	8002df2 <testHandler+0x17a>
				{
					flags.heaterState = HEATER_ERR;
 8002de2:	4b72      	ldr	r3, [pc, #456]	; (8002fac <testHandler+0x334>)
 8002de4:	7e1a      	ldrb	r2, [r3, #24]
 8002de6:	2130      	movs	r1, #48	; 0x30
 8002de8:	438a      	bics	r2, r1
 8002dea:	1c11      	adds	r1, r2, #0
 8002dec:	2220      	movs	r2, #32
 8002dee:	430a      	orrs	r2, r1
 8002df0:	761a      	strb	r2, [r3, #24]
				}
				//vypnout topeni optotriak
				HTR_OFF;
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4875      	ldr	r0, [pc, #468]	; (8002fcc <testHandler+0x354>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	f001 fb11 	bl	8004422 <HAL_GPIO_WritePin>
				break;
 8002e00:	e022      	b.n	8002e48 <testHandler+0x1d0>
			case 4:
				if(HAL_GPIO_ReadPin(HEATER_STATE_GPIO_Port, HEATER_STATE_Pin) != GPIO_PIN_SET)	//Topení neni v poradku
 8002e02:	2380      	movs	r3, #128	; 0x80
 8002e04:	015b      	lsls	r3, r3, #5
 8002e06:	4a72      	ldr	r2, [pc, #456]	; (8002fd0 <testHandler+0x358>)
 8002e08:	0019      	movs	r1, r3
 8002e0a:	0010      	movs	r0, r2
 8002e0c:	f001 faec 	bl	80043e8 <HAL_GPIO_ReadPin>
 8002e10:	0003      	movs	r3, r0
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d004      	beq.n	8002e20 <testHandler+0x1a8>
				{
					flags.heaterState = HEATER_TRIAC_ERR;
 8002e16:	4b65      	ldr	r3, [pc, #404]	; (8002fac <testHandler+0x334>)
 8002e18:	7e1a      	ldrb	r2, [r3, #24]
 8002e1a:	2130      	movs	r1, #48	; 0x30
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	761a      	strb	r2, [r3, #24]
				}
				//vypnout topeni
				HAL_Delay(2);	//pro oddaleni sepnuti rele od spi komunikace
 8002e20:	2002      	movs	r0, #2
 8002e22:	f000 fac9 	bl	80033b8 <HAL_Delay>
				EM_HTR_OFF;
 8002e26:	2380      	movs	r3, #128	; 0x80
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	4868      	ldr	r0, [pc, #416]	; (8002fcc <testHandler+0x354>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	0019      	movs	r1, r3
 8002e30:	f001 faf7 	bl	8004422 <HAL_GPIO_WritePin>
				break;
 8002e34:	e008      	b.n	8002e48 <testHandler+0x1d0>
			case 5:	//v pate sekunde zmerit napeti naprazdno
				flags.meas.measRequest = 1;
 8002e36:	4b5d      	ldr	r3, [pc, #372]	; (8002fac <testHandler+0x334>)
 8002e38:	7d1a      	ldrb	r2, [r3, #20]
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	751a      	strb	r2, [r3, #20]
				break;
 8002e40:	e002      	b.n	8002e48 <testHandler+0x1d0>
			default:
				break;
			}
		}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	e13e      	b.n	80030c4 <testHandler+0x44c>
				break;
 8002e46:	46c0      	nop			; (mov r8, r8)
		break;
 8002e48:	e13c      	b.n	80030c4 <testHandler+0x44c>
	case START_DONE:
		//___Připojení zátěže___//
		LOAD_MIN_ON;
 8002e4a:	4b60      	ldr	r3, [pc, #384]	; (8002fcc <testHandler+0x354>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	2180      	movs	r1, #128	; 0x80
 8002e50:	0018      	movs	r0, r3
 8002e52:	f001 fae6 	bl	8004422 <HAL_GPIO_WritePin>
		LOAD_MAX_ON;
 8002e56:	4b5d      	ldr	r3, [pc, #372]	; (8002fcc <testHandler+0x354>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	2140      	movs	r1, #64	; 0x40
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f001 fae0 	bl	8004422 <HAL_GPIO_WritePin>

		testPhase++;
 8002e62:	4b53      	ldr	r3, [pc, #332]	; (8002fb0 <testHandler+0x338>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	3301      	adds	r3, #1
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	4b51      	ldr	r3, [pc, #324]	; (8002fb0 <testHandler+0x338>)
 8002e6c:	701a      	strb	r2, [r3, #0]
		flags.testProgress = 1;
 8002e6e:	4b4f      	ldr	r3, [pc, #316]	; (8002fac <testHandler+0x334>)
 8002e70:	7e1a      	ldrb	r2, [r3, #24]
 8002e72:	2102      	movs	r1, #2
 8002e74:	430a      	orrs	r2, r1
 8002e76:	761a      	strb	r2, [r3, #24]
		//flags.ui.shortBeep = 1;

		PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//rozsvítit první led
 8002e78:	4b51      	ldr	r3, [pc, #324]	; (8002fc0 <testHandler+0x348>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	781a      	ldrb	r2, [r3, #0]
 8002e7e:	4b50      	ldr	r3, [pc, #320]	; (8002fc0 <testHandler+0x348>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2120      	movs	r1, #32
 8002e84:	430a      	orrs	r2, r1
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	701a      	strb	r2, [r3, #0]

		//___Nulování času___//
		for(int i = 1; i < 4; i++)
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8e:	e007      	b.n	8002ea0 <testHandler+0x228>
		{
			sysTime[i] = 0;
 8002e90:	4b4c      	ldr	r3, [pc, #304]	; (8002fc4 <testHandler+0x34c>)
 8002e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e94:	0092      	lsls	r2, r2, #2
 8002e96:	2100      	movs	r1, #0
 8002e98:	50d1      	str	r1, [r2, r3]
		for(int i = 1; i < 4; i++)
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	2b03      	cmp	r3, #3
 8002ea4:	ddf4      	ble.n	8002e90 <testHandler+0x218>
		}
		break;
 8002ea6:	e10d      	b.n	80030c4 <testHandler+0x44c>
	case MAIN_TEST:
		if(flags.time.sec)	//___Změna času___//
 8002ea8:	4b40      	ldr	r3, [pc, #256]	; (8002fac <testHandler+0x334>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2202      	movs	r2, #2
 8002eae:	4013      	ands	r3, r2
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <testHandler+0x254>
		{
			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED2);	//blikání druhé progress led
 8002eb6:	4b42      	ldr	r3, [pc, #264]	; (8002fc0 <testHandler+0x348>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	781a      	ldrb	r2, [r3, #0]
 8002ebc:	4b40      	ldr	r3, [pc, #256]	; (8002fc0 <testHandler+0x348>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2110      	movs	r1, #16
 8002ec2:	404a      	eors	r2, r1
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	701a      	strb	r2, [r3, #0]
			sendData();
 8002ec8:	f7ff fc82 	bl	80027d0 <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
#else
		if(!(sysTime[SYSTIME_MIN] % 10) && !(sysTime[SYSTIME_MIN] == 0 && sysTime[SYSTIME_HOUR] == 0) && flags.time.min)	//___Měření napětí každých deset minut___//
 8002ecc:	4b3d      	ldr	r3, [pc, #244]	; (8002fc4 <testHandler+0x34c>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	210a      	movs	r1, #10
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f7fd fa9a 	bl	800040c <__aeabi_idivmod>
 8002ed8:	1e0b      	subs	r3, r1, #0
 8002eda:	d113      	bne.n	8002f04 <testHandler+0x28c>
 8002edc:	4b39      	ldr	r3, [pc, #228]	; (8002fc4 <testHandler+0x34c>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d103      	bne.n	8002eec <testHandler+0x274>
 8002ee4:	4b37      	ldr	r3, [pc, #220]	; (8002fc4 <testHandler+0x34c>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00b      	beq.n	8002f04 <testHandler+0x28c>
 8002eec:	4b2f      	ldr	r3, [pc, #188]	; (8002fac <testHandler+0x334>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2204      	movs	r2, #4
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d004      	beq.n	8002f04 <testHandler+0x28c>
#endif
		{
			flags.meas.measRequest = 1;
 8002efa:	4b2c      	ldr	r3, [pc, #176]	; (8002fac <testHandler+0x334>)
 8002efc:	7d1a      	ldrb	r2, [r3, #20]
 8002efe:	2101      	movs	r1, #1
 8002f00:	430a      	orrs	r2, r1
 8002f02:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 3)	//___Po deseti minutách je měření u konce___//
#else
		if(sysTime[SYSTIME_HOUR] >= 3)	//___Po třech hodinách je měření u konce___//
 8002f04:	4b2f      	ldr	r3, [pc, #188]	; (8002fc4 <testHandler+0x34c>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	dc00      	bgt.n	8002f0e <testHandler+0x296>
 8002f0c:	e0d3      	b.n	80030b6 <testHandler+0x43e>
#endif
		{
			testPhase++;
 8002f0e:	4b28      	ldr	r3, [pc, #160]	; (8002fb0 <testHandler+0x338>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	3301      	adds	r3, #1
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	4b26      	ldr	r3, [pc, #152]	; (8002fb0 <testHandler+0x338>)
 8002f18:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002f1a:	e0cc      	b.n	80030b6 <testHandler+0x43e>
	case MAIN_TEST_DONE:
		if(!flags.meas.measRunning)
 8002f1c:	4b23      	ldr	r3, [pc, #140]	; (8002fac <testHandler+0x334>)
 8002f1e:	7d1b      	ldrb	r3, [r3, #20]
 8002f20:	2208      	movs	r2, #8
 8002f22:	4013      	ands	r3, r2
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d000      	beq.n	8002f2c <testHandler+0x2b4>
 8002f2a:	e0c6      	b.n	80030ba <testHandler+0x442>
		{
			flags.ui.notice = 1;
 8002f2c:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <testHandler+0x334>)
 8002f2e:	7c1a      	ldrb	r2, [r3, #16]
 8002f30:	2108      	movs	r1, #8
 8002f32:	430a      	orrs	r2, r1
 8002f34:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8002f36:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <testHandler+0x334>)
 8002f38:	7e1a      	ldrb	r2, [r3, #24]
 8002f3a:	2102      	movs	r1, #2
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	761a      	strb	r2, [r3, #24]

			testPhase++;
 8002f40:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <testHandler+0x338>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	3301      	adds	r3, #1
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	4b19      	ldr	r3, [pc, #100]	; (8002fb0 <testHandler+0x338>)
 8002f4a:	701a      	strb	r2, [r3, #0]

			LOAD_MIN_OFF;
 8002f4c:	4b1f      	ldr	r3, [pc, #124]	; (8002fcc <testHandler+0x354>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2180      	movs	r1, #128	; 0x80
 8002f52:	0018      	movs	r0, r3
 8002f54:	f001 fa65 	bl	8004422 <HAL_GPIO_WritePin>
			LOAD_MAX_OFF;
 8002f58:	4b1c      	ldr	r3, [pc, #112]	; (8002fcc <testHandler+0x354>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2140      	movs	r1, #64	; 0x40
 8002f5e:	0018      	movs	r0, r3
 8002f60:	f001 fa5f 	bl	8004422 <HAL_GPIO_WritePin>

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED2);
 8002f64:	4b16      	ldr	r3, [pc, #88]	; (8002fc0 <testHandler+0x348>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	781a      	ldrb	r2, [r3, #0]
 8002f6a:	4b15      	ldr	r3, [pc, #84]	; (8002fc0 <testHandler+0x348>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2110      	movs	r1, #16
 8002f70:	430a      	orrs	r2, r1
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	701a      	strb	r2, [r3, #0]
			PWR_OFF(*sourceInTesting);
 8002f76:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <testHandler+0x348>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	781a      	ldrb	r2, [r3, #0]
 8002f7c:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <testHandler+0x348>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2101      	movs	r1, #1
 8002f82:	430a      	orrs	r2, r1
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	701a      	strb	r2, [r3, #0]
			sendData();
 8002f88:	f7ff fc22 	bl	80027d0 <sendData>

			//___Nulování času___//
			for(int i = 1; i < 4; i++)
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	623b      	str	r3, [r7, #32]
 8002f90:	e007      	b.n	8002fa2 <testHandler+0x32a>
			{
				sysTime[i] = 0;
 8002f92:	4b0c      	ldr	r3, [pc, #48]	; (8002fc4 <testHandler+0x34c>)
 8002f94:	6a3a      	ldr	r2, [r7, #32]
 8002f96:	0092      	lsls	r2, r2, #2
 8002f98:	2100      	movs	r1, #0
 8002f9a:	50d1      	str	r1, [r2, r3]
			for(int i = 1; i < 4; i++)
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	623b      	str	r3, [r7, #32]
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	ddf4      	ble.n	8002f92 <testHandler+0x31a>
			}
		}
		break;
 8002fa8:	e087      	b.n	80030ba <testHandler+0x442>
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	200003d0 	.word	0x200003d0
 8002fb0:	2000040c 	.word	0x2000040c
 8002fb4:	0800e0ac 	.word	0x0800e0ac
 8002fb8:	200001fc 	.word	0x200001fc
 8002fbc:	0800e224 	.word	0x0800e224
 8002fc0:	20000414 	.word	0x20000414
 8002fc4:	200003c0 	.word	0x200003c0
 8002fc8:	0800e240 	.word	0x0800e240
 8002fcc:	48000800 	.word	0x48000800
 8002fd0:	48000400 	.word	0x48000400
	case BATTERY_TEST:
		if(flags.time.sec)	//___Změna času___//
 8002fd4:	4b3d      	ldr	r3, [pc, #244]	; (80030cc <testHandler+0x454>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	4013      	ands	r3, r2
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00a      	beq.n	8002ff8 <testHandler+0x380>
		{
			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED3);	//blikání třetí progress led
 8002fe2:	4b3b      	ldr	r3, [pc, #236]	; (80030d0 <testHandler+0x458>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	781a      	ldrb	r2, [r3, #0]
 8002fe8:	4b39      	ldr	r3, [pc, #228]	; (80030d0 <testHandler+0x458>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2108      	movs	r1, #8
 8002fee:	404a      	eors	r2, r1
 8002ff0:	b2d2      	uxtb	r2, r2
 8002ff2:	701a      	strb	r2, [r3, #0]
			sendData();
 8002ff4:	f7ff fbec 	bl	80027d0 <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
#else
		if(!(sysTime[SYSTIME_MIN] % 5) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých pět minut___//
 8002ff8:	4b36      	ldr	r3, [pc, #216]	; (80030d4 <testHandler+0x45c>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	2105      	movs	r1, #5
 8002ffe:	0018      	movs	r0, r3
 8003000:	f7fd fa04 	bl	800040c <__aeabi_idivmod>
 8003004:	1e0b      	subs	r3, r1, #0
 8003006:	d114      	bne.n	8003032 <testHandler+0x3ba>
 8003008:	4b32      	ldr	r3, [pc, #200]	; (80030d4 <testHandler+0x45c>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d010      	beq.n	8003032 <testHandler+0x3ba>
 8003010:	4b2e      	ldr	r3, [pc, #184]	; (80030cc <testHandler+0x454>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2204      	movs	r2, #4
 8003016:	4013      	ands	r3, r2
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <testHandler+0x3ba>
#endif
		{
			flags.meas.onlyBattery = 1;
 800301e:	4b2b      	ldr	r3, [pc, #172]	; (80030cc <testHandler+0x454>)
 8003020:	7d1a      	ldrb	r2, [r3, #20]
 8003022:	2120      	movs	r1, #32
 8003024:	430a      	orrs	r2, r1
 8003026:	751a      	strb	r2, [r3, #20]
			flags.meas.measRequest = 1;
 8003028:	4b28      	ldr	r3, [pc, #160]	; (80030cc <testHandler+0x454>)
 800302a:	7d1a      	ldrb	r2, [r3, #20]
 800302c:	2101      	movs	r1, #1
 800302e:	430a      	orrs	r2, r1
 8003030:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 2)	//___Po třech minutách je měření u konce___//
#else
		if(sysTime[SYSTIME_MIN] >= 15)	//___Po patnácti minutách je měření u konce___//
 8003032:	4b28      	ldr	r3, [pc, #160]	; (80030d4 <testHandler+0x45c>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	2b0e      	cmp	r3, #14
 8003038:	dd41      	ble.n	80030be <testHandler+0x446>
#endif
		{
			testPhase++;
 800303a:	4b27      	ldr	r3, [pc, #156]	; (80030d8 <testHandler+0x460>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	3301      	adds	r3, #1
 8003040:	b2da      	uxtb	r2, r3
 8003042:	4b25      	ldr	r3, [pc, #148]	; (80030d8 <testHandler+0x460>)
 8003044:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003046:	e03a      	b.n	80030be <testHandler+0x446>
	case BATTERY_TEST_DONE:
		if(!flags.meas.measRunning)
 8003048:	4b20      	ldr	r3, [pc, #128]	; (80030cc <testHandler+0x454>)
 800304a:	7d1b      	ldrb	r3, [r3, #20]
 800304c:	2208      	movs	r2, #8
 800304e:	4013      	ands	r3, r2
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d135      	bne.n	80030c2 <testHandler+0x44a>
		{
			flags.ui.done = 1;
 8003056:	4b1d      	ldr	r3, [pc, #116]	; (80030cc <testHandler+0x454>)
 8003058:	7c1a      	ldrb	r2, [r3, #16]
 800305a:	2110      	movs	r1, #16
 800305c:	430a      	orrs	r2, r1
 800305e:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8003060:	4b1a      	ldr	r3, [pc, #104]	; (80030cc <testHandler+0x454>)
 8003062:	7e1a      	ldrb	r2, [r3, #24]
 8003064:	2102      	movs	r1, #2
 8003066:	430a      	orrs	r2, r1
 8003068:	761a      	strb	r2, [r3, #24]

			//Zobrazit text na displej

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED3);
 800306a:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <testHandler+0x458>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	781a      	ldrb	r2, [r3, #0]
 8003070:	4b17      	ldr	r3, [pc, #92]	; (80030d0 <testHandler+0x458>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2108      	movs	r1, #8
 8003076:	430a      	orrs	r2, r1
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	701a      	strb	r2, [r3, #0]
			RELAY_OFF(*sourceInTesting);
 800307c:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <testHandler+0x458>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	781a      	ldrb	r2, [r3, #0]
 8003082:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <testHandler+0x458>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2102      	movs	r1, #2
 8003088:	438a      	bics	r2, r1
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]
			PWR_ON(*sourceInTesting);
 800308e:	4b10      	ldr	r3, [pc, #64]	; (80030d0 <testHandler+0x458>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	781a      	ldrb	r2, [r3, #0]
 8003094:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <testHandler+0x458>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2101      	movs	r1, #1
 800309a:	438a      	bics	r2, r1
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	701a      	strb	r2, [r3, #0]
			sendData();
 80030a0:	f7ff fb96 	bl	80027d0 <sendData>

			flags.meas.onlyBattery = 0;
 80030a4:	4b09      	ldr	r3, [pc, #36]	; (80030cc <testHandler+0x454>)
 80030a6:	7d1a      	ldrb	r2, [r3, #20]
 80030a8:	2120      	movs	r1, #32
 80030aa:	438a      	bics	r2, r1
 80030ac:	751a      	strb	r2, [r3, #20]

			testPhase = WAITING;
 80030ae:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <testHandler+0x460>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80030b4:	e005      	b.n	80030c2 <testHandler+0x44a>
		break;
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	e004      	b.n	80030c4 <testHandler+0x44c>
		break;
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	e002      	b.n	80030c4 <testHandler+0x44c>
		break;
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	e000      	b.n	80030c4 <testHandler+0x44c>
		break;
 80030c2:	46c0      	nop			; (mov r8, r8)

	}
}
 80030c4:	46c0      	nop			; (mov r8, r8)
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b00b      	add	sp, #44	; 0x2c
 80030ca:	bd90      	pop	{r4, r7, pc}
 80030cc:	200003d0 	.word	0x200003d0
 80030d0:	20000414 	.word	0x20000414
 80030d4:	200003c0 	.word	0x200003c0
 80030d8:	2000040c 	.word	0x2000040c

080030dc <startTest>:

//_____Funkce pro zahájení testu_____//
static void startTest(/*ukazatel na zdroj*/)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
	if(supplyToTest > regCount)
 80030e2:	4b49      	ldr	r3, [pc, #292]	; (8003208 <startTest+0x12c>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	4b48      	ldr	r3, [pc, #288]	; (800320c <startTest+0x130>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d900      	bls.n	80030f2 <startTest+0x16>
 80030f0:	e085      	b.n	80031fe <startTest+0x122>
	{
		return;
	}

	flags.ui.shortBeep = 1;
 80030f2:	4b47      	ldr	r3, [pc, #284]	; (8003210 <startTest+0x134>)
 80030f4:	7c1a      	ldrb	r2, [r3, #16]
 80030f6:	2101      	movs	r1, #1
 80030f8:	430a      	orrs	r2, r1
 80030fa:	741a      	strb	r2, [r3, #16]
	testPhase = START;
 80030fc:	4b45      	ldr	r3, [pc, #276]	; (8003214 <startTest+0x138>)
 80030fe:	2201      	movs	r2, #1
 8003100:	701a      	strb	r2, [r3, #0]
	testNum = 0;
 8003102:	4b45      	ldr	r3, [pc, #276]	; (8003218 <startTest+0x13c>)
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
	flags.testProgress = 1;
 8003108:	4b41      	ldr	r3, [pc, #260]	; (8003210 <startTest+0x134>)
 800310a:	7e1a      	ldrb	r2, [r3, #24]
 800310c:	2102      	movs	r1, #2
 800310e:	430a      	orrs	r2, r1
 8003110:	761a      	strb	r2, [r3, #24]

	sourceInTesting = &regValues[regCount - (supplyToTest+1)];	//První deska (spodní) je řízena posledním bytem
 8003112:	4b42      	ldr	r3, [pc, #264]	; (800321c <startTest+0x140>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a3d      	ldr	r2, [pc, #244]	; (800320c <startTest+0x130>)
 8003118:	7812      	ldrb	r2, [r2, #0]
 800311a:	0011      	movs	r1, r2
 800311c:	4a3a      	ldr	r2, [pc, #232]	; (8003208 <startTest+0x12c>)
 800311e:	7812      	ldrb	r2, [r2, #0]
 8003120:	b2d2      	uxtb	r2, r2
 8003122:	3201      	adds	r2, #1
 8003124:	1a8a      	subs	r2, r1, r2
 8003126:	189a      	adds	r2, r3, r2
 8003128:	4b3d      	ldr	r3, [pc, #244]	; (8003220 <startTest+0x144>)
 800312a:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < regCount; i++)
 800312c:	2300      	movs	r3, #0
 800312e:	607b      	str	r3, [r7, #4]
 8003130:	e01c      	b.n	800316c <startTest+0x90>
	{
		//Power up and disconnect all supplies
		RELAY_OFF(regValues[i]);
 8003132:	4b3a      	ldr	r3, [pc, #232]	; (800321c <startTest+0x140>)
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	18d3      	adds	r3, r2, r3
 800313a:	781a      	ldrb	r2, [r3, #0]
 800313c:	4b37      	ldr	r3, [pc, #220]	; (800321c <startTest+0x140>)
 800313e:	6819      	ldr	r1, [r3, #0]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	18cb      	adds	r3, r1, r3
 8003144:	2102      	movs	r1, #2
 8003146:	438a      	bics	r2, r1
 8003148:	b2d2      	uxtb	r2, r2
 800314a:	701a      	strb	r2, [r3, #0]
		PWR_ON(regValues[i]);
 800314c:	4b33      	ldr	r3, [pc, #204]	; (800321c <startTest+0x140>)
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	18d3      	adds	r3, r2, r3
 8003154:	781a      	ldrb	r2, [r3, #0]
 8003156:	4b31      	ldr	r3, [pc, #196]	; (800321c <startTest+0x140>)
 8003158:	6819      	ldr	r1, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	18cb      	adds	r3, r1, r3
 800315e:	2101      	movs	r1, #1
 8003160:	438a      	bics	r2, r1
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < regCount; i++)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3301      	adds	r3, #1
 800316a:	607b      	str	r3, [r7, #4]
 800316c:	4b27      	ldr	r3, [pc, #156]	; (800320c <startTest+0x130>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	001a      	movs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4293      	cmp	r3, r2
 8003176:	dbdc      	blt.n	8003132 <startTest+0x56>
	}
	PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//rozsvítit první ledku progress
 8003178:	4b29      	ldr	r3, [pc, #164]	; (8003220 <startTest+0x144>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	781a      	ldrb	r2, [r3, #0]
 800317e:	4b28      	ldr	r3, [pc, #160]	; (8003220 <startTest+0x144>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2120      	movs	r1, #32
 8003184:	430a      	orrs	r2, r1
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	701a      	strb	r2, [r3, #0]
	PROGRESS_OFF(*sourceInTesting, PROGRESS_LED2);	//Zhasnout zbyle led
 800318a:	4b25      	ldr	r3, [pc, #148]	; (8003220 <startTest+0x144>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	781a      	ldrb	r2, [r3, #0]
 8003190:	4b23      	ldr	r3, [pc, #140]	; (8003220 <startTest+0x144>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2110      	movs	r1, #16
 8003196:	438a      	bics	r2, r1
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	701a      	strb	r2, [r3, #0]
	PROGRESS_OFF(*sourceInTesting, PROGRESS_LED3);
 800319c:	4b20      	ldr	r3, [pc, #128]	; (8003220 <startTest+0x144>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	781a      	ldrb	r2, [r3, #0]
 80031a2:	4b1f      	ldr	r3, [pc, #124]	; (8003220 <startTest+0x144>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2108      	movs	r1, #8
 80031a8:	438a      	bics	r2, r1
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	701a      	strb	r2, [r3, #0]
	ERROR_OFF(*sourceInTesting);
 80031ae:	4b1c      	ldr	r3, [pc, #112]	; (8003220 <startTest+0x144>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	781a      	ldrb	r2, [r3, #0]
 80031b4:	4b1a      	ldr	r3, [pc, #104]	; (8003220 <startTest+0x144>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2104      	movs	r1, #4
 80031ba:	438a      	bics	r2, r1
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	701a      	strb	r2, [r3, #0]
	RELAY_ON(*sourceInTesting);	//připojit relé
 80031c0:	4b17      	ldr	r3, [pc, #92]	; (8003220 <startTest+0x144>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	781a      	ldrb	r2, [r3, #0]
 80031c6:	4b16      	ldr	r3, [pc, #88]	; (8003220 <startTest+0x144>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2102      	movs	r1, #2
 80031cc:	430a      	orrs	r2, r1
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	701a      	strb	r2, [r3, #0]

	sendData();	//poslat konfiguraci shift registrům
 80031d2:	f7ff fafd 	bl	80027d0 <sendData>

	//___Nulování času___//
	for(int i = 1; i < 4; i++)
 80031d6:	2301      	movs	r3, #1
 80031d8:	603b      	str	r3, [r7, #0]
 80031da:	e007      	b.n	80031ec <startTest+0x110>
	{
		sysTime[i] = 0;
 80031dc:	4b11      	ldr	r3, [pc, #68]	; (8003224 <startTest+0x148>)
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	0092      	lsls	r2, r2, #2
 80031e2:	2100      	movs	r1, #0
 80031e4:	50d1      	str	r1, [r2, r3]
	for(int i = 1; i < 4; i++)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	3301      	adds	r3, #1
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	ddf4      	ble.n	80031dc <startTest+0x100>
	}

	flags.instructions.startRequest = 0;
 80031f2:	4b07      	ldr	r3, [pc, #28]	; (8003210 <startTest+0x134>)
 80031f4:	7b1a      	ldrb	r2, [r3, #12]
 80031f6:	2101      	movs	r1, #1
 80031f8:	438a      	bics	r2, r1
 80031fa:	731a      	strb	r2, [r3, #12]
 80031fc:	e000      	b.n	8003200 <startTest+0x124>
		return;
 80031fe:	46c0      	nop			; (mov r8, r8)
}
 8003200:	46bd      	mov	sp, r7
 8003202:	b002      	add	sp, #8
 8003204:	bd80      	pop	{r7, pc}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	200003ee 	.word	0x200003ee
 800320c:	20000404 	.word	0x20000404
 8003210:	200003d0 	.word	0x200003d0
 8003214:	2000040c 	.word	0x2000040c
 8003218:	20000410 	.word	0x20000410
 800321c:	20000400 	.word	0x20000400
 8003220:	20000414 	.word	0x20000414
 8003224:	200003c0 	.word	0x200003c0

08003228 <stopTest>:

//_____Funkce pro ukončení testu_____//
static void stopTest()
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
	flags.ui.longBeep = 1;
 800322c:	4b17      	ldr	r3, [pc, #92]	; (800328c <stopTest+0x64>)
 800322e:	7c1a      	ldrb	r2, [r3, #16]
 8003230:	2102      	movs	r1, #2
 8003232:	430a      	orrs	r2, r1
 8003234:	741a      	strb	r2, [r3, #16]
	testPhase = WAITING;
 8003236:	4b16      	ldr	r3, [pc, #88]	; (8003290 <stopTest+0x68>)
 8003238:	2200      	movs	r2, #0
 800323a:	701a      	strb	r2, [r3, #0]

	//Zobrazit text na displej
	LOAD_MIN_OFF;
 800323c:	4b15      	ldr	r3, [pc, #84]	; (8003294 <stopTest+0x6c>)
 800323e:	2200      	movs	r2, #0
 8003240:	2180      	movs	r1, #128	; 0x80
 8003242:	0018      	movs	r0, r3
 8003244:	f001 f8ed 	bl	8004422 <HAL_GPIO_WritePin>
	LOAD_MAX_OFF;
 8003248:	4b12      	ldr	r3, [pc, #72]	; (8003294 <stopTest+0x6c>)
 800324a:	2200      	movs	r2, #0
 800324c:	2140      	movs	r1, #64	; 0x40
 800324e:	0018      	movs	r0, r3
 8003250:	f001 f8e7 	bl	8004422 <HAL_GPIO_WritePin>

	if(sourceInTesting != NULL)
 8003254:	4b10      	ldr	r3, [pc, #64]	; (8003298 <stopTest+0x70>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00c      	beq.n	8003276 <stopTest+0x4e>
	{
		*sourceInTesting = 0;
 800325c:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <stopTest+0x70>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2200      	movs	r2, #0
 8003262:	701a      	strb	r2, [r3, #0]
		ERROR_ON(*sourceInTesting);
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <stopTest+0x70>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	781a      	ldrb	r2, [r3, #0]
 800326a:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <stopTest+0x70>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2104      	movs	r1, #4
 8003270:	430a      	orrs	r2, r1
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]
	}
	sendData();
 8003276:	f7ff faab 	bl	80027d0 <sendData>

	flags.instructions.stopRequest = 0;
 800327a:	4b04      	ldr	r3, [pc, #16]	; (800328c <stopTest+0x64>)
 800327c:	7b1a      	ldrb	r2, [r3, #12]
 800327e:	2102      	movs	r1, #2
 8003280:	438a      	bics	r2, r1
 8003282:	731a      	strb	r2, [r3, #12]
}
 8003284:	46c0      	nop			; (mov r8, r8)
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	200003d0 	.word	0x200003d0
 8003290:	2000040c 	.word	0x2000040c
 8003294:	48000800 	.word	0x48000800
 8003298:	20000414 	.word	0x20000414

0800329c <Reset_Handler>:
 800329c:	480d      	ldr	r0, [pc, #52]	; (80032d4 <LoopForever+0x2>)
 800329e:	4685      	mov	sp, r0
 80032a0:	480d      	ldr	r0, [pc, #52]	; (80032d8 <LoopForever+0x6>)
 80032a2:	490e      	ldr	r1, [pc, #56]	; (80032dc <LoopForever+0xa>)
 80032a4:	4a0e      	ldr	r2, [pc, #56]	; (80032e0 <LoopForever+0xe>)
 80032a6:	2300      	movs	r3, #0
 80032a8:	e002      	b.n	80032b0 <LoopCopyDataInit>

080032aa <CopyDataInit>:
 80032aa:	58d4      	ldr	r4, [r2, r3]
 80032ac:	50c4      	str	r4, [r0, r3]
 80032ae:	3304      	adds	r3, #4

080032b0 <LoopCopyDataInit>:
 80032b0:	18c4      	adds	r4, r0, r3
 80032b2:	428c      	cmp	r4, r1
 80032b4:	d3f9      	bcc.n	80032aa <CopyDataInit>
 80032b6:	4a0b      	ldr	r2, [pc, #44]	; (80032e4 <LoopForever+0x12>)
 80032b8:	4c0b      	ldr	r4, [pc, #44]	; (80032e8 <LoopForever+0x16>)
 80032ba:	2300      	movs	r3, #0
 80032bc:	e001      	b.n	80032c2 <LoopFillZerobss>

080032be <FillZerobss>:
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	3204      	adds	r2, #4

080032c2 <LoopFillZerobss>:
 80032c2:	42a2      	cmp	r2, r4
 80032c4:	d3fb      	bcc.n	80032be <FillZerobss>
 80032c6:	f7ff fcc7 	bl	8002c58 <SystemInit>
 80032ca:	f00a f9e7 	bl	800d69c <__libc_init_array>
 80032ce:	f7fd ffa9 	bl	8001224 <main>

080032d2 <LoopForever>:
 80032d2:	e7fe      	b.n	80032d2 <LoopForever>
 80032d4:	20004000 	.word	0x20004000
 80032d8:	20000000 	.word	0x20000000
 80032dc:	200001e0 	.word	0x200001e0
 80032e0:	0800e384 	.word	0x0800e384
 80032e4:	200001e0 	.word	0x200001e0
 80032e8:	200015dc 	.word	0x200015dc

080032ec <CEC_CAN_IRQHandler>:
 80032ec:	e7fe      	b.n	80032ec <CEC_CAN_IRQHandler>
	...

080032f0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032f4:	4b07      	ldr	r3, [pc, #28]	; (8003314 <HAL_Init+0x24>)
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_Init+0x24>)
 80032fa:	2110      	movs	r1, #16
 80032fc:	430a      	orrs	r2, r1
 80032fe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003300:	2003      	movs	r0, #3
 8003302:	f000 f809 	bl	8003318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003306:	f7ff fa9f 	bl	8002848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	0018      	movs	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	40022000 	.word	0x40022000

08003318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003318:	b590      	push	{r4, r7, lr}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003320:	4b14      	ldr	r3, [pc, #80]	; (8003374 <HAL_InitTick+0x5c>)
 8003322:	681c      	ldr	r4, [r3, #0]
 8003324:	4b14      	ldr	r3, [pc, #80]	; (8003378 <HAL_InitTick+0x60>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	0019      	movs	r1, r3
 800332a:	23fa      	movs	r3, #250	; 0xfa
 800332c:	0098      	lsls	r0, r3, #2
 800332e:	f7fc fefd 	bl	800012c <__udivsi3>
 8003332:	0003      	movs	r3, r0
 8003334:	0019      	movs	r1, r3
 8003336:	0020      	movs	r0, r4
 8003338:	f7fc fef8 	bl	800012c <__udivsi3>
 800333c:	0003      	movs	r3, r0
 800333e:	0018      	movs	r0, r3
 8003340:	f000 fe4f 	bl	8003fe2 <HAL_SYSTICK_Config>
 8003344:	1e03      	subs	r3, r0, #0
 8003346:	d001      	beq.n	800334c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e00f      	b.n	800336c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b03      	cmp	r3, #3
 8003350:	d80b      	bhi.n	800336a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	2301      	movs	r3, #1
 8003356:	425b      	negs	r3, r3
 8003358:	2200      	movs	r2, #0
 800335a:	0018      	movs	r0, r3
 800335c:	f000 fe1c 	bl	8003f98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003360:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_InitTick+0x64>)
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	e000      	b.n	800336c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
}
 800336c:	0018      	movs	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	b003      	add	sp, #12
 8003372:	bd90      	pop	{r4, r7, pc}
 8003374:	20000000 	.word	0x20000000
 8003378:	20000008 	.word	0x20000008
 800337c:	20000004 	.word	0x20000004

08003380 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003384:	4b05      	ldr	r3, [pc, #20]	; (800339c <HAL_IncTick+0x1c>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	001a      	movs	r2, r3
 800338a:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <HAL_IncTick+0x20>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	18d2      	adds	r2, r2, r3
 8003390:	4b03      	ldr	r3, [pc, #12]	; (80033a0 <HAL_IncTick+0x20>)
 8003392:	601a      	str	r2, [r3, #0]
}
 8003394:	46c0      	nop			; (mov r8, r8)
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	20000008 	.word	0x20000008
 80033a0:	20000418 	.word	0x20000418

080033a4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  return uwTick;
 80033a8:	4b02      	ldr	r3, [pc, #8]	; (80033b4 <HAL_GetTick+0x10>)
 80033aa:	681b      	ldr	r3, [r3, #0]
}
 80033ac:	0018      	movs	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	20000418 	.word	0x20000418

080033b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033c0:	f7ff fff0 	bl	80033a4 <HAL_GetTick>
 80033c4:	0003      	movs	r3, r0
 80033c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	3301      	adds	r3, #1
 80033d0:	d005      	beq.n	80033de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033d2:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <HAL_Delay+0x44>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	001a      	movs	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	189b      	adds	r3, r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	f7ff ffe0 	bl	80033a4 <HAL_GetTick>
 80033e4:	0002      	movs	r2, r0
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d8f7      	bhi.n	80033e0 <HAL_Delay+0x28>
  {
  }
}
 80033f0:	46c0      	nop			; (mov r8, r8)
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	46bd      	mov	sp, r7
 80033f6:	b004      	add	sp, #16
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	20000008 	.word	0x20000008

08003400 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003408:	230f      	movs	r3, #15
 800340a:	18fb      	adds	r3, r7, r3
 800340c:	2200      	movs	r2, #0
 800340e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e125      	b.n	800366a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10a      	bne.n	800343c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2234      	movs	r2, #52	; 0x34
 8003430:	2100      	movs	r1, #0
 8003432:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	0018      	movs	r0, r3
 8003438:	f7ff fa2a 	bl	8002890 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003440:	2210      	movs	r2, #16
 8003442:	4013      	ands	r3, r2
 8003444:	d000      	beq.n	8003448 <HAL_ADC_Init+0x48>
 8003446:	e103      	b.n	8003650 <HAL_ADC_Init+0x250>
 8003448:	230f      	movs	r3, #15
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d000      	beq.n	8003454 <HAL_ADC_Init+0x54>
 8003452:	e0fd      	b.n	8003650 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2204      	movs	r2, #4
 800345c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800345e:	d000      	beq.n	8003462 <HAL_ADC_Init+0x62>
 8003460:	e0f6      	b.n	8003650 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003466:	4a83      	ldr	r2, [pc, #524]	; (8003674 <HAL_ADC_Init+0x274>)
 8003468:	4013      	ands	r3, r2
 800346a:	2202      	movs	r2, #2
 800346c:	431a      	orrs	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2203      	movs	r2, #3
 800347a:	4013      	ands	r3, r2
 800347c:	2b01      	cmp	r3, #1
 800347e:	d112      	bne.n	80034a6 <HAL_ADC_Init+0xa6>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2201      	movs	r2, #1
 8003488:	4013      	ands	r3, r2
 800348a:	2b01      	cmp	r3, #1
 800348c:	d009      	beq.n	80034a2 <HAL_ADC_Init+0xa2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	2380      	movs	r3, #128	; 0x80
 8003496:	021b      	lsls	r3, r3, #8
 8003498:	401a      	ands	r2, r3
 800349a:	2380      	movs	r3, #128	; 0x80
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	429a      	cmp	r2, r3
 80034a0:	d101      	bne.n	80034a6 <HAL_ADC_Init+0xa6>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <HAL_ADC_Init+0xa8>
 80034a6:	2300      	movs	r3, #0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d116      	bne.n	80034da <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	2218      	movs	r2, #24
 80034b4:	4393      	bics	r3, r2
 80034b6:	0019      	movs	r1, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	0899      	lsrs	r1, r3, #2
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4964      	ldr	r1, [pc, #400]	; (8003678 <HAL_ADC_Init+0x278>)
 80034e6:	400a      	ands	r2, r1
 80034e8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	7e1b      	ldrb	r3, [r3, #24]
 80034ee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	7e5b      	ldrb	r3, [r3, #25]
 80034f4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034f6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	7e9b      	ldrb	r3, [r3, #26]
 80034fc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80034fe:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	2b01      	cmp	r3, #1
 8003506:	d002      	beq.n	800350e <HAL_ADC_Init+0x10e>
 8003508:	2380      	movs	r3, #128	; 0x80
 800350a:	015b      	lsls	r3, r3, #5
 800350c:	e000      	b.n	8003510 <HAL_ADC_Init+0x110>
 800350e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003510:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003516:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	2b02      	cmp	r3, #2
 800351e:	d101      	bne.n	8003524 <HAL_ADC_Init+0x124>
 8003520:	2304      	movs	r3, #4
 8003522:	e000      	b.n	8003526 <HAL_ADC_Init+0x126>
 8003524:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8003526:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2124      	movs	r1, #36	; 0x24
 800352c:	5c5b      	ldrb	r3, [r3, r1]
 800352e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003530:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	4313      	orrs	r3, r2
 8003536:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	7edb      	ldrb	r3, [r3, #27]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d115      	bne.n	800356c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	7e9b      	ldrb	r3, [r3, #26]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d105      	bne.n	8003554 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2280      	movs	r2, #128	; 0x80
 800354c:	0252      	lsls	r2, r2, #9
 800354e:	4313      	orrs	r3, r2
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	e00b      	b.n	800356c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	2220      	movs	r2, #32
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003564:	2201      	movs	r2, #1
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	23c2      	movs	r3, #194	; 0xc2
 8003572:	33ff      	adds	r3, #255	; 0xff
 8003574:	429a      	cmp	r2, r3
 8003576:	d007      	beq.n	8003588 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003580:	4313      	orrs	r3, r2
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	4313      	orrs	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68d9      	ldr	r1, [r3, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	430a      	orrs	r2, r1
 8003596:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359c:	2380      	movs	r3, #128	; 0x80
 800359e:	055b      	lsls	r3, r3, #21
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d01b      	beq.n	80035dc <HAL_ADC_Init+0x1dc>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d017      	beq.n	80035dc <HAL_ADC_Init+0x1dc>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d013      	beq.n	80035dc <HAL_ADC_Init+0x1dc>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	d00f      	beq.n	80035dc <HAL_ADC_Init+0x1dc>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d00b      	beq.n	80035dc <HAL_ADC_Init+0x1dc>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	2b05      	cmp	r3, #5
 80035ca:	d007      	beq.n	80035dc <HAL_ADC_Init+0x1dc>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d0:	2b06      	cmp	r3, #6
 80035d2:	d003      	beq.n	80035dc <HAL_ADC_Init+0x1dc>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	2b07      	cmp	r3, #7
 80035da:	d112      	bne.n	8003602 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2107      	movs	r1, #7
 80035e8:	438a      	bics	r2, r1
 80035ea:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6959      	ldr	r1, [r3, #20]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f6:	2207      	movs	r2, #7
 80035f8:	401a      	ands	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4a1c      	ldr	r2, [pc, #112]	; (800367c <HAL_ADC_Init+0x27c>)
 800360a:	4013      	ands	r3, r2
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	429a      	cmp	r2, r3
 8003610:	d10b      	bne.n	800362a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	2203      	movs	r2, #3
 800361e:	4393      	bics	r3, r2
 8003620:	2201      	movs	r2, #1
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003628:	e01c      	b.n	8003664 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362e:	2212      	movs	r2, #18
 8003630:	4393      	bics	r3, r2
 8003632:	2210      	movs	r2, #16
 8003634:	431a      	orrs	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363e:	2201      	movs	r2, #1
 8003640:	431a      	orrs	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003646:	230f      	movs	r3, #15
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	2201      	movs	r2, #1
 800364c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800364e:	e009      	b.n	8003664 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003654:	2210      	movs	r2, #16
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800365c:	230f      	movs	r3, #15
 800365e:	18fb      	adds	r3, r7, r3
 8003660:	2201      	movs	r2, #1
 8003662:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003664:	230f      	movs	r3, #15
 8003666:	18fb      	adds	r3, r7, r3
 8003668:	781b      	ldrb	r3, [r3, #0]
}
 800366a:	0018      	movs	r0, r3
 800366c:	46bd      	mov	sp, r7
 800366e:	b004      	add	sp, #16
 8003670:	bd80      	pop	{r7, pc}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	fffffefd 	.word	0xfffffefd
 8003678:	fffe0219 	.word	0xfffe0219
 800367c:	833fffe7 	.word	0x833fffe7

08003680 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003680:	b590      	push	{r4, r7, lr}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003688:	230f      	movs	r3, #15
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2204      	movs	r2, #4
 8003698:	4013      	ands	r3, r2
 800369a:	d156      	bne.n	800374a <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2234      	movs	r2, #52	; 0x34
 80036a0:	5c9b      	ldrb	r3, [r3, r2]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_ADC_Start_IT+0x2a>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e056      	b.n	8003758 <HAL_ADC_Start_IT+0xd8>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2234      	movs	r2, #52	; 0x34
 80036ae:	2101      	movs	r1, #1
 80036b0:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	7e5b      	ldrb	r3, [r3, #25]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d007      	beq.n	80036ca <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80036ba:	230f      	movs	r3, #15
 80036bc:	18fc      	adds	r4, r7, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	0018      	movs	r0, r3
 80036c2:	f000 fa7b 	bl	8003bbc <ADC_Enable>
 80036c6:	0003      	movs	r3, r0
 80036c8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80036ca:	230f      	movs	r3, #15
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d13e      	bne.n	8003752 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d8:	4a21      	ldr	r2, [pc, #132]	; (8003760 <HAL_ADC_Start_IT+0xe0>)
 80036da:	4013      	ands	r3, r2
 80036dc:	2280      	movs	r2, #128	; 0x80
 80036de:	0052      	lsls	r2, r2, #1
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2234      	movs	r2, #52	; 0x34
 80036f0:	2100      	movs	r1, #0
 80036f2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	221c      	movs	r2, #28
 80036fa:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	2b08      	cmp	r3, #8
 8003702:	d110      	bne.n	8003726 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2104      	movs	r1, #4
 8003710:	438a      	bics	r2, r1
 8003712:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2118      	movs	r1, #24
 8003720:	430a      	orrs	r2, r1
 8003722:	605a      	str	r2, [r3, #4]
          break;
 8003724:	e008      	b.n	8003738 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	211c      	movs	r1, #28
 8003732:	430a      	orrs	r2, r1
 8003734:	605a      	str	r2, [r3, #4]
          break;
 8003736:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2104      	movs	r1, #4
 8003744:	430a      	orrs	r2, r1
 8003746:	609a      	str	r2, [r3, #8]
 8003748:	e003      	b.n	8003752 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800374a:	230f      	movs	r3, #15
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	2202      	movs	r2, #2
 8003750:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 8003752:	230f      	movs	r3, #15
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	781b      	ldrb	r3, [r3, #0]
}
 8003758:	0018      	movs	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	b005      	add	sp, #20
 800375e:	bd90      	pop	{r4, r7, pc}
 8003760:	fffff0fe 	.word	0xfffff0fe

08003764 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8003764:	b5b0      	push	{r4, r5, r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800376c:	230f      	movs	r3, #15
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2234      	movs	r2, #52	; 0x34
 8003778:	5c9b      	ldrb	r3, [r3, r2]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_ADC_Stop_IT+0x1e>
 800377e:	2302      	movs	r3, #2
 8003780:	e033      	b.n	80037ea <HAL_ADC_Stop_IT+0x86>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2234      	movs	r2, #52	; 0x34
 8003786:	2101      	movs	r1, #1
 8003788:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800378a:	250f      	movs	r5, #15
 800378c:	197c      	adds	r4, r7, r5
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	0018      	movs	r0, r3
 8003792:	f000 fb08 	bl	8003da6 <ADC_ConversionStop>
 8003796:	0003      	movs	r3, r0
 8003798:	7023      	strb	r3, [r4, #0]
   
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800379a:	0028      	movs	r0, r5
 800379c:	183b      	adds	r3, r7, r0
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d11b      	bne.n	80037dc <HAL_ADC_Stop_IT+0x78>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	211c      	movs	r1, #28
 80037b0:	438a      	bics	r2, r1
 80037b2:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80037b4:	0005      	movs	r5, r0
 80037b6:	183c      	adds	r4, r7, r0
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	0018      	movs	r0, r3
 80037bc:	f000 fa82 	bl	8003cc4 <ADC_Disable>
 80037c0:	0003      	movs	r3, r0
 80037c2:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80037c4:	197b      	adds	r3, r7, r5
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d107      	bne.n	80037dc <HAL_ADC_Stop_IT+0x78>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d0:	4a08      	ldr	r2, [pc, #32]	; (80037f4 <HAL_ADC_Stop_IT+0x90>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	2201      	movs	r2, #1
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2234      	movs	r2, #52	; 0x34
 80037e0:	2100      	movs	r1, #0
 80037e2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80037e4:	230f      	movs	r3, #15
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	781b      	ldrb	r3, [r3, #0]
}
 80037ea:	0018      	movs	r0, r3
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b004      	add	sp, #16
 80037f0:	bdb0      	pop	{r4, r5, r7, pc}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	fffffefe 	.word	0xfffffefe

080037f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003806:	0018      	movs	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	b002      	add	sp, #8
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2204      	movs	r2, #4
 8003820:	4013      	ands	r3, r2
 8003822:	2b04      	cmp	r3, #4
 8003824:	d106      	bne.n	8003834 <HAL_ADC_IRQHandler+0x24>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2204      	movs	r2, #4
 800382e:	4013      	ands	r3, r2
 8003830:	2b04      	cmp	r3, #4
 8003832:	d00d      	beq.n	8003850 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2208      	movs	r2, #8
 800383c:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800383e:	2b08      	cmp	r3, #8
 8003840:	d14f      	bne.n	80038e2 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2208      	movs	r2, #8
 800384a:	4013      	ands	r3, r2
 800384c:	2b08      	cmp	r3, #8
 800384e:	d148      	bne.n	80038e2 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	2210      	movs	r2, #16
 8003856:	4013      	ands	r3, r2
 8003858:	d106      	bne.n	8003868 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385e:	2280      	movs	r2, #128	; 0x80
 8003860:	0092      	lsls	r2, r2, #2
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	23c0      	movs	r3, #192	; 0xc0
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	4013      	ands	r3, r2
 8003874:	d12d      	bne.n	80038d2 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800387a:	2b00      	cmp	r3, #0
 800387c:	d129      	bne.n	80038d2 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2208      	movs	r2, #8
 8003886:	4013      	ands	r3, r2
 8003888:	2b08      	cmp	r3, #8
 800388a:	d122      	bne.n	80038d2 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2204      	movs	r2, #4
 8003894:	4013      	ands	r3, r2
 8003896:	d110      	bne.n	80038ba <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	210c      	movs	r1, #12
 80038a4:	438a      	bics	r2, r1
 80038a6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	4a33      	ldr	r2, [pc, #204]	; (800397c <HAL_ADC_IRQHandler+0x16c>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	2201      	movs	r2, #1
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	639a      	str	r2, [r3, #56]	; 0x38
 80038b8:	e00b      	b.n	80038d2 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	2220      	movs	r2, #32
 80038c0:	431a      	orrs	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ca:	2201      	movs	r2, #1
 80038cc:	431a      	orrs	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	0018      	movs	r0, r3
 80038d6:	f7fd fc91 	bl	80011fc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	220c      	movs	r2, #12
 80038e0:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2280      	movs	r2, #128	; 0x80
 80038ea:	4013      	ands	r3, r2
 80038ec:	2b80      	cmp	r3, #128	; 0x80
 80038ee:	d115      	bne.n	800391c <HAL_ADC_IRQHandler+0x10c>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2280      	movs	r2, #128	; 0x80
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b80      	cmp	r3, #128	; 0x80
 80038fc:	d10e      	bne.n	800391c <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	2280      	movs	r2, #128	; 0x80
 8003904:	0252      	lsls	r2, r2, #9
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	0018      	movs	r0, r3
 8003910:	f000 f836 	bl	8003980 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2280      	movs	r2, #128	; 0x80
 800391a:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2210      	movs	r2, #16
 8003924:	4013      	ands	r3, r2
 8003926:	2b10      	cmp	r3, #16
 8003928:	d123      	bne.n	8003972 <HAL_ADC_IRQHandler+0x162>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2210      	movs	r2, #16
 8003932:	4013      	ands	r3, r2
 8003934:	2b10      	cmp	r3, #16
 8003936:	d11c      	bne.n	8003972 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	2b01      	cmp	r3, #1
 800393e:	d006      	beq.n	800394e <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	2201      	movs	r2, #1
 8003948:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800394a:	2b01      	cmp	r3, #1
 800394c:	d10d      	bne.n	800396a <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003952:	2202      	movs	r2, #2
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2210      	movs	r2, #16
 8003960:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	0018      	movs	r0, r3
 8003966:	f000 f813 	bl	8003990 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2210      	movs	r2, #16
 8003970:	601a      	str	r2, [r3, #0]
  }

}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	46bd      	mov	sp, r7
 8003976:	b002      	add	sp, #8
 8003978:	bd80      	pop	{r7, pc}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	fffffefe 	.word	0xfffffefe

08003980 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003988:	46c0      	nop			; (mov r8, r8)
 800398a:	46bd      	mov	sp, r7
 800398c:	b002      	add	sp, #8
 800398e:	bd80      	pop	{r7, pc}

08003990 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003998:	46c0      	nop			; (mov r8, r8)
 800399a:	46bd      	mov	sp, r7
 800399c:	b002      	add	sp, #8
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039aa:	230f      	movs	r3, #15
 80039ac:	18fb      	adds	r3, r7, r3
 80039ae:	2200      	movs	r2, #0
 80039b0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ba:	2380      	movs	r3, #128	; 0x80
 80039bc:	055b      	lsls	r3, r3, #21
 80039be:	429a      	cmp	r2, r3
 80039c0:	d011      	beq.n	80039e6 <HAL_ADC_ConfigChannel+0x46>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d00d      	beq.n	80039e6 <HAL_ADC_ConfigChannel+0x46>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d009      	beq.n	80039e6 <HAL_ADC_ConfigChannel+0x46>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d005      	beq.n	80039e6 <HAL_ADC_ConfigChannel+0x46>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d001      	beq.n	80039e6 <HAL_ADC_ConfigChannel+0x46>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2234      	movs	r2, #52	; 0x34
 80039ea:	5c9b      	ldrb	r3, [r3, r2]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_ADC_ConfigChannel+0x54>
 80039f0:	2302      	movs	r3, #2
 80039f2:	e0d0      	b.n	8003b96 <HAL_ADC_ConfigChannel+0x1f6>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2234      	movs	r2, #52	; 0x34
 80039f8:	2101      	movs	r1, #1
 80039fa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	2204      	movs	r2, #4
 8003a04:	4013      	ands	r3, r2
 8003a06:	d000      	beq.n	8003a0a <HAL_ADC_ConfigChannel+0x6a>
 8003a08:	e0b4      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	4a64      	ldr	r2, [pc, #400]	; (8003ba0 <HAL_ADC_ConfigChannel+0x200>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d100      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x76>
 8003a14:	e082      	b.n	8003b1c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2201      	movs	r2, #1
 8003a22:	409a      	lsls	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a30:	2380      	movs	r3, #128	; 0x80
 8003a32:	055b      	lsls	r3, r3, #21
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d037      	beq.n	8003aa8 <HAL_ADC_ConfigChannel+0x108>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d033      	beq.n	8003aa8 <HAL_ADC_ConfigChannel+0x108>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d02f      	beq.n	8003aa8 <HAL_ADC_ConfigChannel+0x108>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d02b      	beq.n	8003aa8 <HAL_ADC_ConfigChannel+0x108>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d027      	beq.n	8003aa8 <HAL_ADC_ConfigChannel+0x108>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	2b05      	cmp	r3, #5
 8003a5e:	d023      	beq.n	8003aa8 <HAL_ADC_ConfigChannel+0x108>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	2b06      	cmp	r3, #6
 8003a66:	d01f      	beq.n	8003aa8 <HAL_ADC_ConfigChannel+0x108>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	2b07      	cmp	r3, #7
 8003a6e:	d01b      	beq.n	8003aa8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	2107      	movs	r1, #7
 8003a7c:	400b      	ands	r3, r1
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d012      	beq.n	8003aa8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695a      	ldr	r2, [r3, #20]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2107      	movs	r1, #7
 8003a8e:	438a      	bics	r2, r1
 8003a90:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6959      	ldr	r1, [r3, #20]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2207      	movs	r2, #7
 8003a9e:	401a      	ands	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b10      	cmp	r3, #16
 8003aae:	d007      	beq.n	8003ac0 <HAL_ADC_ConfigChannel+0x120>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b11      	cmp	r3, #17
 8003ab6:	d003      	beq.n	8003ac0 <HAL_ADC_ConfigChannel+0x120>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b12      	cmp	r3, #18
 8003abe:	d163      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003ac0:	4b38      	ldr	r3, [pc, #224]	; (8003ba4 <HAL_ADC_ConfigChannel+0x204>)
 8003ac2:	6819      	ldr	r1, [r3, #0]
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b10      	cmp	r3, #16
 8003aca:	d009      	beq.n	8003ae0 <HAL_ADC_ConfigChannel+0x140>
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b11      	cmp	r3, #17
 8003ad2:	d102      	bne.n	8003ada <HAL_ADC_ConfigChannel+0x13a>
 8003ad4:	2380      	movs	r3, #128	; 0x80
 8003ad6:	03db      	lsls	r3, r3, #15
 8003ad8:	e004      	b.n	8003ae4 <HAL_ADC_ConfigChannel+0x144>
 8003ada:	2380      	movs	r3, #128	; 0x80
 8003adc:	045b      	lsls	r3, r3, #17
 8003ade:	e001      	b.n	8003ae4 <HAL_ADC_ConfigChannel+0x144>
 8003ae0:	2380      	movs	r3, #128	; 0x80
 8003ae2:	041b      	lsls	r3, r3, #16
 8003ae4:	4a2f      	ldr	r2, [pc, #188]	; (8003ba4 <HAL_ADC_ConfigChannel+0x204>)
 8003ae6:	430b      	orrs	r3, r1
 8003ae8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b10      	cmp	r3, #16
 8003af0:	d14a      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003af2:	4b2d      	ldr	r3, [pc, #180]	; (8003ba8 <HAL_ADC_ConfigChannel+0x208>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	492d      	ldr	r1, [pc, #180]	; (8003bac <HAL_ADC_ConfigChannel+0x20c>)
 8003af8:	0018      	movs	r0, r3
 8003afa:	f7fc fb17 	bl	800012c <__udivsi3>
 8003afe:	0003      	movs	r3, r0
 8003b00:	001a      	movs	r2, r3
 8003b02:	0013      	movs	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	189b      	adds	r3, r3, r2
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b0c:	e002      	b.n	8003b14 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	3b01      	subs	r3, #1
 8003b12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f9      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x16e>
 8003b1a:	e035      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2101      	movs	r1, #1
 8003b28:	4099      	lsls	r1, r3
 8003b2a:	000b      	movs	r3, r1
 8003b2c:	43d9      	mvns	r1, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	400a      	ands	r2, r1
 8003b34:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b10      	cmp	r3, #16
 8003b3c:	d007      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0x1ae>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b11      	cmp	r3, #17
 8003b44:	d003      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0x1ae>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b12      	cmp	r3, #18
 8003b4c:	d11c      	bne.n	8003b88 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003b4e:	4b15      	ldr	r3, [pc, #84]	; (8003ba4 <HAL_ADC_ConfigChannel+0x204>)
 8003b50:	6819      	ldr	r1, [r3, #0]
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b10      	cmp	r3, #16
 8003b58:	d007      	beq.n	8003b6a <HAL_ADC_ConfigChannel+0x1ca>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b11      	cmp	r3, #17
 8003b60:	d101      	bne.n	8003b66 <HAL_ADC_ConfigChannel+0x1c6>
 8003b62:	4b13      	ldr	r3, [pc, #76]	; (8003bb0 <HAL_ADC_ConfigChannel+0x210>)
 8003b64:	e002      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x1cc>
 8003b66:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <HAL_ADC_ConfigChannel+0x214>)
 8003b68:	e000      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x1cc>
 8003b6a:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <HAL_ADC_ConfigChannel+0x218>)
 8003b6c:	4a0d      	ldr	r2, [pc, #52]	; (8003ba4 <HAL_ADC_ConfigChannel+0x204>)
 8003b6e:	400b      	ands	r3, r1
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	e009      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	2220      	movs	r2, #32
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003b80:	230f      	movs	r3, #15
 8003b82:	18fb      	adds	r3, r7, r3
 8003b84:	2201      	movs	r2, #1
 8003b86:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2234      	movs	r2, #52	; 0x34
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003b90:	230f      	movs	r3, #15
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	781b      	ldrb	r3, [r3, #0]
}
 8003b96:	0018      	movs	r0, r3
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	b004      	add	sp, #16
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	46c0      	nop			; (mov r8, r8)
 8003ba0:	00001001 	.word	0x00001001
 8003ba4:	40012708 	.word	0x40012708
 8003ba8:	20000000 	.word	0x20000000
 8003bac:	000f4240 	.word	0x000f4240
 8003bb0:	ffbfffff 	.word	0xffbfffff
 8003bb4:	feffffff 	.word	0xfeffffff
 8003bb8:	ff7fffff 	.word	0xff7fffff

08003bbc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d112      	bne.n	8003c00 <ADC_Enable+0x44>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2201      	movs	r2, #1
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d009      	beq.n	8003bfc <ADC_Enable+0x40>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	2380      	movs	r3, #128	; 0x80
 8003bf0:	021b      	lsls	r3, r3, #8
 8003bf2:	401a      	ands	r2, r3
 8003bf4:	2380      	movs	r3, #128	; 0x80
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d101      	bne.n	8003c00 <ADC_Enable+0x44>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <ADC_Enable+0x46>
 8003c00:	2300      	movs	r3, #0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d152      	bne.n	8003cac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	4a2a      	ldr	r2, [pc, #168]	; (8003cb8 <ADC_Enable+0xfc>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	d00d      	beq.n	8003c2e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c16:	2210      	movs	r2, #16
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c22:	2201      	movs	r2, #1
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e03f      	b.n	8003cae <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2101      	movs	r1, #1
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c3e:	4b1f      	ldr	r3, [pc, #124]	; (8003cbc <ADC_Enable+0x100>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	491f      	ldr	r1, [pc, #124]	; (8003cc0 <ADC_Enable+0x104>)
 8003c44:	0018      	movs	r0, r3
 8003c46:	f7fc fa71 	bl	800012c <__udivsi3>
 8003c4a:	0003      	movs	r3, r0
 8003c4c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003c4e:	e002      	b.n	8003c56 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1f9      	bne.n	8003c50 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c5c:	f7ff fba2 	bl	80033a4 <HAL_GetTick>
 8003c60:	0003      	movs	r3, r0
 8003c62:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c64:	e01b      	b.n	8003c9e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c66:	f7ff fb9d 	bl	80033a4 <HAL_GetTick>
 8003c6a:	0002      	movs	r2, r0
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d914      	bls.n	8003c9e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d00d      	beq.n	8003c9e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c86:	2210      	movs	r2, #16
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c92:	2201      	movs	r2, #1
 8003c94:	431a      	orrs	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e007      	b.n	8003cae <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d1dc      	bne.n	8003c66 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	0018      	movs	r0, r3
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	b004      	add	sp, #16
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	80000017 	.word	0x80000017
 8003cbc:	20000000 	.word	0x20000000
 8003cc0:	000f4240 	.word	0x000f4240

08003cc4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2203      	movs	r2, #3
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d112      	bne.n	8003d04 <ADC_Disable+0x40>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d009      	beq.n	8003d00 <ADC_Disable+0x3c>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	2380      	movs	r3, #128	; 0x80
 8003cf4:	021b      	lsls	r3, r3, #8
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	2380      	movs	r3, #128	; 0x80
 8003cfa:	021b      	lsls	r3, r3, #8
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d101      	bne.n	8003d04 <ADC_Disable+0x40>
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <ADC_Disable+0x42>
 8003d04:	2300      	movs	r3, #0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d048      	beq.n	8003d9c <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	2205      	movs	r2, #5
 8003d12:	4013      	ands	r3, r2
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d110      	bne.n	8003d3a <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689a      	ldr	r2, [r3, #8]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2102      	movs	r1, #2
 8003d24:	430a      	orrs	r2, r1
 8003d26:	609a      	str	r2, [r3, #8]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003d30:	f7ff fb38 	bl	80033a4 <HAL_GetTick>
 8003d34:	0003      	movs	r3, r0
 8003d36:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003d38:	e029      	b.n	8003d8e <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3e:	2210      	movs	r2, #16
 8003d40:	431a      	orrs	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e023      	b.n	8003d9e <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d56:	f7ff fb25 	bl	80033a4 <HAL_GetTick>
 8003d5a:	0002      	movs	r2, r0
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d914      	bls.n	8003d8e <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d10d      	bne.n	8003d8e <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d76:	2210      	movs	r2, #16
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d82:	2201      	movs	r2, #1
 8003d84:	431a      	orrs	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e007      	b.n	8003d9e <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2201      	movs	r2, #1
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d0dc      	beq.n	8003d56 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	0018      	movs	r0, r3
 8003da0:	46bd      	mov	sp, r7
 8003da2:	b004      	add	sp, #16
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	2204      	movs	r2, #4
 8003dba:	4013      	ands	r3, r2
 8003dbc:	d03a      	beq.n	8003e34 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d10d      	bne.n	8003de8 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003dd6:	d107      	bne.n	8003de8 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2110      	movs	r1, #16
 8003de4:	430a      	orrs	r2, r1
 8003de6:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003de8:	f7ff fadc 	bl	80033a4 <HAL_GetTick>
 8003dec:	0003      	movs	r3, r0
 8003dee:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003df0:	e01a      	b.n	8003e28 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003df2:	f7ff fad7 	bl	80033a4 <HAL_GetTick>
 8003df6:	0002      	movs	r2, r0
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d913      	bls.n	8003e28 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2204      	movs	r2, #4
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d00d      	beq.n	8003e28 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	2210      	movs	r2, #16
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e006      	b.n	8003e36 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2204      	movs	r2, #4
 8003e30:	4013      	ands	r3, r2
 8003e32:	d1de      	bne.n	8003df2 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	0018      	movs	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b004      	add	sp, #16
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	0002      	movs	r2, r0
 8003e48:	1dfb      	adds	r3, r7, #7
 8003e4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e4c:	1dfb      	adds	r3, r7, #7
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b7f      	cmp	r3, #127	; 0x7f
 8003e52:	d809      	bhi.n	8003e68 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e54:	1dfb      	adds	r3, r7, #7
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	001a      	movs	r2, r3
 8003e5a:	231f      	movs	r3, #31
 8003e5c:	401a      	ands	r2, r3
 8003e5e:	4b04      	ldr	r3, [pc, #16]	; (8003e70 <__NVIC_EnableIRQ+0x30>)
 8003e60:	2101      	movs	r1, #1
 8003e62:	4091      	lsls	r1, r2
 8003e64:	000a      	movs	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]
  }
}
 8003e68:	46c0      	nop			; (mov r8, r8)
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	b002      	add	sp, #8
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	e000e100 	.word	0xe000e100

08003e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e74:	b590      	push	{r4, r7, lr}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	0002      	movs	r2, r0
 8003e7c:	6039      	str	r1, [r7, #0]
 8003e7e:	1dfb      	adds	r3, r7, #7
 8003e80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e82:	1dfb      	adds	r3, r7, #7
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b7f      	cmp	r3, #127	; 0x7f
 8003e88:	d828      	bhi.n	8003edc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e8a:	4a2f      	ldr	r2, [pc, #188]	; (8003f48 <__NVIC_SetPriority+0xd4>)
 8003e8c:	1dfb      	adds	r3, r7, #7
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	b25b      	sxtb	r3, r3
 8003e92:	089b      	lsrs	r3, r3, #2
 8003e94:	33c0      	adds	r3, #192	; 0xc0
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	589b      	ldr	r3, [r3, r2]
 8003e9a:	1dfa      	adds	r2, r7, #7
 8003e9c:	7812      	ldrb	r2, [r2, #0]
 8003e9e:	0011      	movs	r1, r2
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	400a      	ands	r2, r1
 8003ea4:	00d2      	lsls	r2, r2, #3
 8003ea6:	21ff      	movs	r1, #255	; 0xff
 8003ea8:	4091      	lsls	r1, r2
 8003eaa:	000a      	movs	r2, r1
 8003eac:	43d2      	mvns	r2, r2
 8003eae:	401a      	ands	r2, r3
 8003eb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	019b      	lsls	r3, r3, #6
 8003eb6:	22ff      	movs	r2, #255	; 0xff
 8003eb8:	401a      	ands	r2, r3
 8003eba:	1dfb      	adds	r3, r7, #7
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	4003      	ands	r3, r0
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ec8:	481f      	ldr	r0, [pc, #124]	; (8003f48 <__NVIC_SetPriority+0xd4>)
 8003eca:	1dfb      	adds	r3, r7, #7
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	b25b      	sxtb	r3, r3
 8003ed0:	089b      	lsrs	r3, r3, #2
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	33c0      	adds	r3, #192	; 0xc0
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003eda:	e031      	b.n	8003f40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003edc:	4a1b      	ldr	r2, [pc, #108]	; (8003f4c <__NVIC_SetPriority+0xd8>)
 8003ede:	1dfb      	adds	r3, r7, #7
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	0019      	movs	r1, r3
 8003ee4:	230f      	movs	r3, #15
 8003ee6:	400b      	ands	r3, r1
 8003ee8:	3b08      	subs	r3, #8
 8003eea:	089b      	lsrs	r3, r3, #2
 8003eec:	3306      	adds	r3, #6
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	18d3      	adds	r3, r2, r3
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	1dfa      	adds	r2, r7, #7
 8003ef8:	7812      	ldrb	r2, [r2, #0]
 8003efa:	0011      	movs	r1, r2
 8003efc:	2203      	movs	r2, #3
 8003efe:	400a      	ands	r2, r1
 8003f00:	00d2      	lsls	r2, r2, #3
 8003f02:	21ff      	movs	r1, #255	; 0xff
 8003f04:	4091      	lsls	r1, r2
 8003f06:	000a      	movs	r2, r1
 8003f08:	43d2      	mvns	r2, r2
 8003f0a:	401a      	ands	r2, r3
 8003f0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	019b      	lsls	r3, r3, #6
 8003f12:	22ff      	movs	r2, #255	; 0xff
 8003f14:	401a      	ands	r2, r3
 8003f16:	1dfb      	adds	r3, r7, #7
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	4003      	ands	r3, r0
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f24:	4809      	ldr	r0, [pc, #36]	; (8003f4c <__NVIC_SetPriority+0xd8>)
 8003f26:	1dfb      	adds	r3, r7, #7
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	001c      	movs	r4, r3
 8003f2c:	230f      	movs	r3, #15
 8003f2e:	4023      	ands	r3, r4
 8003f30:	3b08      	subs	r3, #8
 8003f32:	089b      	lsrs	r3, r3, #2
 8003f34:	430a      	orrs	r2, r1
 8003f36:	3306      	adds	r3, #6
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	18c3      	adds	r3, r0, r3
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	601a      	str	r2, [r3, #0]
}
 8003f40:	46c0      	nop			; (mov r8, r8)
 8003f42:	46bd      	mov	sp, r7
 8003f44:	b003      	add	sp, #12
 8003f46:	bd90      	pop	{r4, r7, pc}
 8003f48:	e000e100 	.word	0xe000e100
 8003f4c:	e000ed00 	.word	0xe000ed00

08003f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	1e5a      	subs	r2, r3, #1
 8003f5c:	2380      	movs	r3, #128	; 0x80
 8003f5e:	045b      	lsls	r3, r3, #17
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d301      	bcc.n	8003f68 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f64:	2301      	movs	r3, #1
 8003f66:	e010      	b.n	8003f8a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f68:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <SysTick_Config+0x44>)
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	3a01      	subs	r2, #1
 8003f6e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f70:	2301      	movs	r3, #1
 8003f72:	425b      	negs	r3, r3
 8003f74:	2103      	movs	r1, #3
 8003f76:	0018      	movs	r0, r3
 8003f78:	f7ff ff7c 	bl	8003e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f7c:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <SysTick_Config+0x44>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f82:	4b04      	ldr	r3, [pc, #16]	; (8003f94 <SysTick_Config+0x44>)
 8003f84:	2207      	movs	r2, #7
 8003f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b002      	add	sp, #8
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	e000e010 	.word	0xe000e010

08003f98 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	607a      	str	r2, [r7, #4]
 8003fa2:	210f      	movs	r1, #15
 8003fa4:	187b      	adds	r3, r7, r1
 8003fa6:	1c02      	adds	r2, r0, #0
 8003fa8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	187b      	adds	r3, r7, r1
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	b25b      	sxtb	r3, r3
 8003fb2:	0011      	movs	r1, r2
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f7ff ff5d 	bl	8003e74 <__NVIC_SetPriority>
}
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	b004      	add	sp, #16
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	0002      	movs	r2, r0
 8003fca:	1dfb      	adds	r3, r7, #7
 8003fcc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fce:	1dfb      	adds	r3, r7, #7
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	b25b      	sxtb	r3, r3
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f7ff ff33 	bl	8003e40 <__NVIC_EnableIRQ>
}
 8003fda:	46c0      	nop			; (mov r8, r8)
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	b002      	add	sp, #8
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	0018      	movs	r0, r3
 8003fee:	f7ff ffaf 	bl	8003f50 <SysTick_Config>
 8003ff2:	0003      	movs	r3, r0
}
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b002      	add	sp, #8
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2221      	movs	r2, #33	; 0x21
 8004008:	5c9b      	ldrb	r3, [r3, r2]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d008      	beq.n	8004022 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2204      	movs	r2, #4
 8004014:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2220      	movs	r2, #32
 800401a:	2100      	movs	r1, #0
 800401c:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e020      	b.n	8004064 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	210e      	movs	r1, #14
 800402e:	438a      	bics	r2, r1
 8004030:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2101      	movs	r1, #1
 800403e:	438a      	bics	r2, r1
 8004040:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404a:	2101      	movs	r1, #1
 800404c:	4091      	lsls	r1, r2
 800404e:	000a      	movs	r2, r1
 8004050:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2221      	movs	r2, #33	; 0x21
 8004056:	2101      	movs	r1, #1
 8004058:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2220      	movs	r2, #32
 800405e:	2100      	movs	r1, #0
 8004060:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	0018      	movs	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	b002      	add	sp, #8
 800406a:	bd80      	pop	{r7, pc}

0800406c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004074:	210f      	movs	r1, #15
 8004076:	187b      	adds	r3, r7, r1
 8004078:	2200      	movs	r2, #0
 800407a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2221      	movs	r2, #33	; 0x21
 8004080:	5c9b      	ldrb	r3, [r3, r2]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d006      	beq.n	8004096 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2204      	movs	r2, #4
 800408c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800408e:	187b      	adds	r3, r7, r1
 8004090:	2201      	movs	r2, #1
 8004092:	701a      	strb	r2, [r3, #0]
 8004094:	e028      	b.n	80040e8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	210e      	movs	r1, #14
 80040a2:	438a      	bics	r2, r1
 80040a4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2101      	movs	r1, #1
 80040b2:	438a      	bics	r2, r1
 80040b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	2101      	movs	r1, #1
 80040c0:	4091      	lsls	r1, r2
 80040c2:	000a      	movs	r2, r1
 80040c4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2221      	movs	r2, #33	; 0x21
 80040ca:	2101      	movs	r1, #1
 80040cc:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2220      	movs	r2, #32
 80040d2:	2100      	movs	r1, #0
 80040d4:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d004      	beq.n	80040e8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	0010      	movs	r0, r2
 80040e6:	4798      	blx	r3
    } 
  }
  return status;
 80040e8:	230f      	movs	r3, #15
 80040ea:	18fb      	adds	r3, r7, r3
 80040ec:	781b      	ldrb	r3, [r3, #0]
}
 80040ee:	0018      	movs	r0, r3
 80040f0:	46bd      	mov	sp, r7
 80040f2:	b004      	add	sp, #16
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004106:	e155      	b.n	80043b4 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2101      	movs	r1, #1
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	4091      	lsls	r1, r2
 8004112:	000a      	movs	r2, r1
 8004114:	4013      	ands	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d100      	bne.n	8004120 <HAL_GPIO_Init+0x28>
 800411e:	e146      	b.n	80043ae <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	2203      	movs	r2, #3
 8004126:	4013      	ands	r3, r2
 8004128:	2b01      	cmp	r3, #1
 800412a:	d005      	beq.n	8004138 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2203      	movs	r2, #3
 8004132:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004134:	2b02      	cmp	r3, #2
 8004136:	d130      	bne.n	800419a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	2203      	movs	r2, #3
 8004144:	409a      	lsls	r2, r3
 8004146:	0013      	movs	r3, r2
 8004148:	43da      	mvns	r2, r3
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	4013      	ands	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	68da      	ldr	r2, [r3, #12]
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	409a      	lsls	r2, r3
 800415a:	0013      	movs	r3, r2
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800416e:	2201      	movs	r2, #1
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	409a      	lsls	r2, r3
 8004174:	0013      	movs	r3, r2
 8004176:	43da      	mvns	r2, r3
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	4013      	ands	r3, r2
 800417c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	091b      	lsrs	r3, r3, #4
 8004184:	2201      	movs	r2, #1
 8004186:	401a      	ands	r2, r3
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	409a      	lsls	r2, r3
 800418c:	0013      	movs	r3, r2
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	2203      	movs	r2, #3
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d017      	beq.n	80041d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	2203      	movs	r2, #3
 80041b2:	409a      	lsls	r2, r3
 80041b4:	0013      	movs	r3, r2
 80041b6:	43da      	mvns	r2, r3
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4013      	ands	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	409a      	lsls	r2, r3
 80041c8:	0013      	movs	r3, r2
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2203      	movs	r2, #3
 80041dc:	4013      	ands	r3, r2
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d123      	bne.n	800422a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	08da      	lsrs	r2, r3, #3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3208      	adds	r2, #8
 80041ea:	0092      	lsls	r2, r2, #2
 80041ec:	58d3      	ldr	r3, [r2, r3]
 80041ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	2207      	movs	r2, #7
 80041f4:	4013      	ands	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	220f      	movs	r2, #15
 80041fa:	409a      	lsls	r2, r3
 80041fc:	0013      	movs	r3, r2
 80041fe:	43da      	mvns	r2, r3
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	4013      	ands	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	691a      	ldr	r2, [r3, #16]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2107      	movs	r1, #7
 800420e:	400b      	ands	r3, r1
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	409a      	lsls	r2, r3
 8004214:	0013      	movs	r3, r2
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	4313      	orrs	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	08da      	lsrs	r2, r3, #3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3208      	adds	r2, #8
 8004224:	0092      	lsls	r2, r2, #2
 8004226:	6939      	ldr	r1, [r7, #16]
 8004228:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	2203      	movs	r2, #3
 8004236:	409a      	lsls	r2, r3
 8004238:	0013      	movs	r3, r2
 800423a:	43da      	mvns	r2, r3
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4013      	ands	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2203      	movs	r2, #3
 8004248:	401a      	ands	r2, r3
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	409a      	lsls	r2, r3
 8004250:	0013      	movs	r3, r2
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
 8004262:	23c0      	movs	r3, #192	; 0xc0
 8004264:	029b      	lsls	r3, r3, #10
 8004266:	4013      	ands	r3, r2
 8004268:	d100      	bne.n	800426c <HAL_GPIO_Init+0x174>
 800426a:	e0a0      	b.n	80043ae <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800426c:	4b57      	ldr	r3, [pc, #348]	; (80043cc <HAL_GPIO_Init+0x2d4>)
 800426e:	699a      	ldr	r2, [r3, #24]
 8004270:	4b56      	ldr	r3, [pc, #344]	; (80043cc <HAL_GPIO_Init+0x2d4>)
 8004272:	2101      	movs	r1, #1
 8004274:	430a      	orrs	r2, r1
 8004276:	619a      	str	r2, [r3, #24]
 8004278:	4b54      	ldr	r3, [pc, #336]	; (80043cc <HAL_GPIO_Init+0x2d4>)
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	2201      	movs	r2, #1
 800427e:	4013      	ands	r3, r2
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004284:	4a52      	ldr	r2, [pc, #328]	; (80043d0 <HAL_GPIO_Init+0x2d8>)
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	089b      	lsrs	r3, r3, #2
 800428a:	3302      	adds	r3, #2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	589b      	ldr	r3, [r3, r2]
 8004290:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2203      	movs	r2, #3
 8004296:	4013      	ands	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	220f      	movs	r2, #15
 800429c:	409a      	lsls	r2, r3
 800429e:	0013      	movs	r3, r2
 80042a0:	43da      	mvns	r2, r3
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	4013      	ands	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	2390      	movs	r3, #144	; 0x90
 80042ac:	05db      	lsls	r3, r3, #23
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d019      	beq.n	80042e6 <HAL_GPIO_Init+0x1ee>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a47      	ldr	r2, [pc, #284]	; (80043d4 <HAL_GPIO_Init+0x2dc>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d013      	beq.n	80042e2 <HAL_GPIO_Init+0x1ea>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a46      	ldr	r2, [pc, #280]	; (80043d8 <HAL_GPIO_Init+0x2e0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00d      	beq.n	80042de <HAL_GPIO_Init+0x1e6>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a45      	ldr	r2, [pc, #276]	; (80043dc <HAL_GPIO_Init+0x2e4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d007      	beq.n	80042da <HAL_GPIO_Init+0x1e2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a44      	ldr	r2, [pc, #272]	; (80043e0 <HAL_GPIO_Init+0x2e8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d101      	bne.n	80042d6 <HAL_GPIO_Init+0x1de>
 80042d2:	2304      	movs	r3, #4
 80042d4:	e008      	b.n	80042e8 <HAL_GPIO_Init+0x1f0>
 80042d6:	2305      	movs	r3, #5
 80042d8:	e006      	b.n	80042e8 <HAL_GPIO_Init+0x1f0>
 80042da:	2303      	movs	r3, #3
 80042dc:	e004      	b.n	80042e8 <HAL_GPIO_Init+0x1f0>
 80042de:	2302      	movs	r3, #2
 80042e0:	e002      	b.n	80042e8 <HAL_GPIO_Init+0x1f0>
 80042e2:	2301      	movs	r3, #1
 80042e4:	e000      	b.n	80042e8 <HAL_GPIO_Init+0x1f0>
 80042e6:	2300      	movs	r3, #0
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	2103      	movs	r1, #3
 80042ec:	400a      	ands	r2, r1
 80042ee:	0092      	lsls	r2, r2, #2
 80042f0:	4093      	lsls	r3, r2
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80042f8:	4935      	ldr	r1, [pc, #212]	; (80043d0 <HAL_GPIO_Init+0x2d8>)
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	089b      	lsrs	r3, r3, #2
 80042fe:	3302      	adds	r3, #2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004306:	4b37      	ldr	r3, [pc, #220]	; (80043e4 <HAL_GPIO_Init+0x2ec>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	43da      	mvns	r2, r3
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4013      	ands	r3, r2
 8004314:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	2380      	movs	r3, #128	; 0x80
 800431c:	025b      	lsls	r3, r3, #9
 800431e:	4013      	ands	r3, r2
 8004320:	d003      	beq.n	800432a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800432a:	4b2e      	ldr	r3, [pc, #184]	; (80043e4 <HAL_GPIO_Init+0x2ec>)
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004330:	4b2c      	ldr	r3, [pc, #176]	; (80043e4 <HAL_GPIO_Init+0x2ec>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	43da      	mvns	r2, r3
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	4013      	ands	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	2380      	movs	r3, #128	; 0x80
 8004346:	029b      	lsls	r3, r3, #10
 8004348:	4013      	ands	r3, r2
 800434a:	d003      	beq.n	8004354 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004354:	4b23      	ldr	r3, [pc, #140]	; (80043e4 <HAL_GPIO_Init+0x2ec>)
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800435a:	4b22      	ldr	r3, [pc, #136]	; (80043e4 <HAL_GPIO_Init+0x2ec>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	43da      	mvns	r2, r3
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	4013      	ands	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685a      	ldr	r2, [r3, #4]
 800436e:	2380      	movs	r3, #128	; 0x80
 8004370:	035b      	lsls	r3, r3, #13
 8004372:	4013      	ands	r3, r2
 8004374:	d003      	beq.n	800437e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800437e:	4b19      	ldr	r3, [pc, #100]	; (80043e4 <HAL_GPIO_Init+0x2ec>)
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004384:	4b17      	ldr	r3, [pc, #92]	; (80043e4 <HAL_GPIO_Init+0x2ec>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	43da      	mvns	r2, r3
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	4013      	ands	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	2380      	movs	r3, #128	; 0x80
 800439a:	039b      	lsls	r3, r3, #14
 800439c:	4013      	ands	r3, r2
 800439e:	d003      	beq.n	80043a8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80043a8:	4b0e      	ldr	r3, [pc, #56]	; (80043e4 <HAL_GPIO_Init+0x2ec>)
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	3301      	adds	r3, #1
 80043b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	40da      	lsrs	r2, r3
 80043bc:	1e13      	subs	r3, r2, #0
 80043be:	d000      	beq.n	80043c2 <HAL_GPIO_Init+0x2ca>
 80043c0:	e6a2      	b.n	8004108 <HAL_GPIO_Init+0x10>
  } 
}
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	46c0      	nop			; (mov r8, r8)
 80043c6:	46bd      	mov	sp, r7
 80043c8:	b006      	add	sp, #24
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40021000 	.word	0x40021000
 80043d0:	40010000 	.word	0x40010000
 80043d4:	48000400 	.word	0x48000400
 80043d8:	48000800 	.word	0x48000800
 80043dc:	48000c00 	.word	0x48000c00
 80043e0:	48001000 	.word	0x48001000
 80043e4:	40010400 	.word	0x40010400

080043e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	000a      	movs	r2, r1
 80043f2:	1cbb      	adds	r3, r7, #2
 80043f4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	1cba      	adds	r2, r7, #2
 80043fc:	8812      	ldrh	r2, [r2, #0]
 80043fe:	4013      	ands	r3, r2
 8004400:	d004      	beq.n	800440c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004402:	230f      	movs	r3, #15
 8004404:	18fb      	adds	r3, r7, r3
 8004406:	2201      	movs	r2, #1
 8004408:	701a      	strb	r2, [r3, #0]
 800440a:	e003      	b.n	8004414 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800440c:	230f      	movs	r3, #15
 800440e:	18fb      	adds	r3, r7, r3
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004414:	230f      	movs	r3, #15
 8004416:	18fb      	adds	r3, r7, r3
 8004418:	781b      	ldrb	r3, [r3, #0]
  }
 800441a:	0018      	movs	r0, r3
 800441c:	46bd      	mov	sp, r7
 800441e:	b004      	add	sp, #16
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	0008      	movs	r0, r1
 800442c:	0011      	movs	r1, r2
 800442e:	1cbb      	adds	r3, r7, #2
 8004430:	1c02      	adds	r2, r0, #0
 8004432:	801a      	strh	r2, [r3, #0]
 8004434:	1c7b      	adds	r3, r7, #1
 8004436:	1c0a      	adds	r2, r1, #0
 8004438:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800443a:	1c7b      	adds	r3, r7, #1
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d004      	beq.n	800444c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004442:	1cbb      	adds	r3, r7, #2
 8004444:	881a      	ldrh	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800444a:	e003      	b.n	8004454 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800444c:	1cbb      	adds	r3, r7, #2
 800444e:	881a      	ldrh	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004454:	46c0      	nop			; (mov r8, r8)
 8004456:	46bd      	mov	sp, r7
 8004458:	b002      	add	sp, #8
 800445a:	bd80      	pop	{r7, pc}

0800445c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	000a      	movs	r2, r1
 8004466:	1cbb      	adds	r3, r7, #2
 8004468:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004470:	1cbb      	adds	r3, r7, #2
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4013      	ands	r3, r2
 8004478:	041a      	lsls	r2, r3, #16
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	43db      	mvns	r3, r3
 800447e:	1cb9      	adds	r1, r7, #2
 8004480:	8809      	ldrh	r1, [r1, #0]
 8004482:	400b      	ands	r3, r1
 8004484:	431a      	orrs	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	619a      	str	r2, [r3, #24]
}
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	46bd      	mov	sp, r7
 800448e:	b004      	add	sp, #16
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	0002      	movs	r2, r0
 800449c:	1dbb      	adds	r3, r7, #6
 800449e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80044a0:	4b09      	ldr	r3, [pc, #36]	; (80044c8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	1dba      	adds	r2, r7, #6
 80044a6:	8812      	ldrh	r2, [r2, #0]
 80044a8:	4013      	ands	r3, r2
 80044aa:	d008      	beq.n	80044be <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044ac:	4b06      	ldr	r3, [pc, #24]	; (80044c8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80044ae:	1dba      	adds	r2, r7, #6
 80044b0:	8812      	ldrh	r2, [r2, #0]
 80044b2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044b4:	1dbb      	adds	r3, r7, #6
 80044b6:	881b      	ldrh	r3, [r3, #0]
 80044b8:	0018      	movs	r0, r3
 80044ba:	f7fc fe5b 	bl	8001174 <HAL_GPIO_EXTI_Callback>
  }
}
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	46bd      	mov	sp, r7
 80044c2:	b002      	add	sp, #8
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	40010400 	.word	0x40010400

080044cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ce:	b08b      	sub	sp, #44	; 0x2c
 80044d0:	af06      	add	r7, sp, #24
 80044d2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e0ff      	b.n	80046de <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a81      	ldr	r2, [pc, #516]	; (80046e8 <HAL_PCD_Init+0x21c>)
 80044e2:	5c9b      	ldrb	r3, [r3, r2]
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d108      	bne.n	80044fc <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	23aa      	movs	r3, #170	; 0xaa
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	2100      	movs	r1, #0
 80044f2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	0018      	movs	r0, r3
 80044f8:	f008 fd6c 	bl	800cfd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a7a      	ldr	r2, [pc, #488]	; (80046e8 <HAL_PCD_Init+0x21c>)
 8004500:	2103      	movs	r1, #3
 8004502:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	0018      	movs	r0, r3
 800450a:	f004 fe0f 	bl	800912c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800450e:	230f      	movs	r3, #15
 8004510:	18fb      	adds	r3, r7, r3
 8004512:	2200      	movs	r2, #0
 8004514:	701a      	strb	r2, [r3, #0]
 8004516:	e058      	b.n	80045ca <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004518:	200f      	movs	r0, #15
 800451a:	183b      	adds	r3, r7, r0
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	0013      	movs	r3, r2
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	189b      	adds	r3, r3, r2
 8004528:	00db      	lsls	r3, r3, #3
 800452a:	18cb      	adds	r3, r1, r3
 800452c:	3301      	adds	r3, #1
 800452e:	2201      	movs	r2, #1
 8004530:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004532:	183b      	adds	r3, r7, r0
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	0013      	movs	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	189b      	adds	r3, r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	183a      	adds	r2, r7, r0
 8004544:	7812      	ldrb	r2, [r2, #0]
 8004546:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004548:	0004      	movs	r4, r0
 800454a:	183b      	adds	r3, r7, r0
 800454c:	781a      	ldrb	r2, [r3, #0]
 800454e:	193b      	adds	r3, r7, r4
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	b298      	uxth	r0, r3
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	0013      	movs	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	189b      	adds	r3, r3, r2
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	18cb      	adds	r3, r1, r3
 8004560:	3336      	adds	r3, #54	; 0x36
 8004562:	1c02      	adds	r2, r0, #0
 8004564:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004566:	193b      	adds	r3, r7, r4
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	6879      	ldr	r1, [r7, #4]
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	0013      	movs	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	189b      	adds	r3, r3, r2
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	18cb      	adds	r3, r1, r3
 8004578:	3303      	adds	r3, #3
 800457a:	2200      	movs	r2, #0
 800457c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800457e:	193b      	adds	r3, r7, r4
 8004580:	781a      	ldrb	r2, [r3, #0]
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	0013      	movs	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	189b      	adds	r3, r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	18cb      	adds	r3, r1, r3
 800458e:	3338      	adds	r3, #56	; 0x38
 8004590:	2200      	movs	r2, #0
 8004592:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004594:	193b      	adds	r3, r7, r4
 8004596:	781a      	ldrb	r2, [r3, #0]
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	0013      	movs	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	189b      	adds	r3, r3, r2
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	18cb      	adds	r3, r1, r3
 80045a4:	333c      	adds	r3, #60	; 0x3c
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045aa:	193b      	adds	r3, r7, r4
 80045ac:	781a      	ldrb	r2, [r3, #0]
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	0013      	movs	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	189b      	adds	r3, r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	18cb      	adds	r3, r1, r3
 80045ba:	3340      	adds	r3, #64	; 0x40
 80045bc:	2200      	movs	r2, #0
 80045be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045c0:	193b      	adds	r3, r7, r4
 80045c2:	781a      	ldrb	r2, [r3, #0]
 80045c4:	193b      	adds	r3, r7, r4
 80045c6:	3201      	adds	r2, #1
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	210f      	movs	r1, #15
 80045cc:	187b      	adds	r3, r7, r1
 80045ce:	781a      	ldrb	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d39f      	bcc.n	8004518 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045d8:	187b      	adds	r3, r7, r1
 80045da:	2200      	movs	r2, #0
 80045dc:	701a      	strb	r2, [r3, #0]
 80045de:	e056      	b.n	800468e <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045e0:	240f      	movs	r4, #15
 80045e2:	193b      	adds	r3, r7, r4
 80045e4:	781a      	ldrb	r2, [r3, #0]
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	236a      	movs	r3, #106	; 0x6a
 80045ea:	33ff      	adds	r3, #255	; 0xff
 80045ec:	0019      	movs	r1, r3
 80045ee:	0013      	movs	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	189b      	adds	r3, r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	18c3      	adds	r3, r0, r3
 80045f8:	185b      	adds	r3, r3, r1
 80045fa:	2200      	movs	r2, #0
 80045fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045fe:	193b      	adds	r3, r7, r4
 8004600:	781a      	ldrb	r2, [r3, #0]
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	23b4      	movs	r3, #180	; 0xb4
 8004606:	0059      	lsls	r1, r3, #1
 8004608:	0013      	movs	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	189b      	adds	r3, r3, r2
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	18c3      	adds	r3, r0, r3
 8004612:	185b      	adds	r3, r3, r1
 8004614:	193a      	adds	r2, r7, r4
 8004616:	7812      	ldrb	r2, [r2, #0]
 8004618:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800461a:	193b      	adds	r3, r7, r4
 800461c:	781a      	ldrb	r2, [r3, #0]
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	236c      	movs	r3, #108	; 0x6c
 8004622:	33ff      	adds	r3, #255	; 0xff
 8004624:	0019      	movs	r1, r3
 8004626:	0013      	movs	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	189b      	adds	r3, r3, r2
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	18c3      	adds	r3, r0, r3
 8004630:	185b      	adds	r3, r3, r1
 8004632:	2200      	movs	r2, #0
 8004634:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004636:	193b      	adds	r3, r7, r4
 8004638:	781a      	ldrb	r2, [r3, #0]
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	23bc      	movs	r3, #188	; 0xbc
 800463e:	0059      	lsls	r1, r3, #1
 8004640:	0013      	movs	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	189b      	adds	r3, r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	18c3      	adds	r3, r0, r3
 800464a:	185b      	adds	r3, r3, r1
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004650:	193b      	adds	r3, r7, r4
 8004652:	781a      	ldrb	r2, [r3, #0]
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	23be      	movs	r3, #190	; 0xbe
 8004658:	0059      	lsls	r1, r3, #1
 800465a:	0013      	movs	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	189b      	adds	r3, r3, r2
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	18c3      	adds	r3, r0, r3
 8004664:	185b      	adds	r3, r3, r1
 8004666:	2200      	movs	r2, #0
 8004668:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800466a:	193b      	adds	r3, r7, r4
 800466c:	781a      	ldrb	r2, [r3, #0]
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	23c0      	movs	r3, #192	; 0xc0
 8004672:	0059      	lsls	r1, r3, #1
 8004674:	0013      	movs	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	189b      	adds	r3, r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	18c3      	adds	r3, r0, r3
 800467e:	185b      	adds	r3, r3, r1
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004684:	193b      	adds	r3, r7, r4
 8004686:	781a      	ldrb	r2, [r3, #0]
 8004688:	193b      	adds	r3, r7, r4
 800468a:	3201      	adds	r2, #1
 800468c:	701a      	strb	r2, [r3, #0]
 800468e:	230f      	movs	r3, #15
 8004690:	18fb      	adds	r3, r7, r3
 8004692:	781a      	ldrb	r2, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	429a      	cmp	r2, r3
 800469a:	d3a1      	bcc.n	80045e0 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6818      	ldr	r0, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	466a      	mov	r2, sp
 80046a4:	0011      	movs	r1, r2
 80046a6:	001a      	movs	r2, r3
 80046a8:	3210      	adds	r2, #16
 80046aa:	ca70      	ldmia	r2!, {r4, r5, r6}
 80046ac:	c170      	stmia	r1!, {r4, r5, r6}
 80046ae:	ca30      	ldmia	r2!, {r4, r5}
 80046b0:	c130      	stmia	r1!, {r4, r5}
 80046b2:	6859      	ldr	r1, [r3, #4]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f004 fd52 	bl	8009160 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2224      	movs	r2, #36	; 0x24
 80046c0:	2100      	movs	r1, #0
 80046c2:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a08      	ldr	r2, [pc, #32]	; (80046e8 <HAL_PCD_Init+0x21c>)
 80046c8:	2101      	movs	r1, #1
 80046ca:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d103      	bne.n	80046dc <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	0018      	movs	r0, r3
 80046d8:	f001 fd34 	bl	8006144 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	0018      	movs	r0, r3
 80046e0:	46bd      	mov	sp, r7
 80046e2:	b005      	add	sp, #20
 80046e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046e6:	46c0      	nop			; (mov r8, r8)
 80046e8:	000002a9 	.word	0x000002a9

080046ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	23aa      	movs	r3, #170	; 0xaa
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	5cd3      	ldrb	r3, [r2, r3]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d101      	bne.n	8004704 <HAL_PCD_Start+0x18>
 8004700:	2302      	movs	r3, #2
 8004702:	e014      	b.n	800472e <HAL_PCD_Start+0x42>
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	23aa      	movs	r3, #170	; 0xaa
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	2101      	movs	r1, #1
 800470c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	0018      	movs	r0, r3
 8004714:	f004 fcf4 	bl	8009100 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	0018      	movs	r0, r3
 800471e:	f006 fc4b 	bl	800afb8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	23aa      	movs	r3, #170	; 0xaa
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	2100      	movs	r1, #0
 800472a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	0018      	movs	r0, r3
 8004730:	46bd      	mov	sp, r7
 8004732:	b002      	add	sp, #8
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	0018      	movs	r0, r3
 8004746:	f006 fc4d 	bl	800afe4 <USB_ReadInterrupts>
 800474a:	0002      	movs	r2, r0
 800474c:	2380      	movs	r3, #128	; 0x80
 800474e:	021b      	lsls	r3, r3, #8
 8004750:	401a      	ands	r2, r3
 8004752:	2380      	movs	r3, #128	; 0x80
 8004754:	021b      	lsls	r3, r3, #8
 8004756:	429a      	cmp	r2, r3
 8004758:	d103      	bne.n	8004762 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	0018      	movs	r0, r3
 800475e:	f000 fbbb 	bl	8004ed8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	0018      	movs	r0, r3
 8004768:	f006 fc3c 	bl	800afe4 <USB_ReadInterrupts>
 800476c:	0002      	movs	r2, r0
 800476e:	2380      	movs	r3, #128	; 0x80
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	401a      	ands	r2, r3
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	429a      	cmp	r2, r3
 800477a:	d114      	bne.n	80047a6 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2244      	movs	r2, #68	; 0x44
 8004782:	5a9b      	ldrh	r3, [r3, r2]
 8004784:	b29a      	uxth	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	49a2      	ldr	r1, [pc, #648]	; (8004a14 <HAL_PCD_IRQHandler+0x2dc>)
 800478c:	400a      	ands	r2, r1
 800478e:	b291      	uxth	r1, r2
 8004790:	2244      	movs	r2, #68	; 0x44
 8004792:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	0018      	movs	r0, r3
 8004798:	f008 fca7 	bl	800d0ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2100      	movs	r1, #0
 80047a0:	0018      	movs	r0, r3
 80047a2:	f000 f945 	bl	8004a30 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	0018      	movs	r0, r3
 80047ac:	f006 fc1a 	bl	800afe4 <USB_ReadInterrupts>
 80047b0:	0002      	movs	r2, r0
 80047b2:	2380      	movs	r3, #128	; 0x80
 80047b4:	01db      	lsls	r3, r3, #7
 80047b6:	401a      	ands	r2, r3
 80047b8:	2380      	movs	r3, #128	; 0x80
 80047ba:	01db      	lsls	r3, r3, #7
 80047bc:	429a      	cmp	r2, r3
 80047be:	d10b      	bne.n	80047d8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2244      	movs	r2, #68	; 0x44
 80047c6:	5a9b      	ldrh	r3, [r3, r2]
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4992      	ldr	r1, [pc, #584]	; (8004a18 <HAL_PCD_IRQHandler+0x2e0>)
 80047d0:	400a      	ands	r2, r1
 80047d2:	b291      	uxth	r1, r2
 80047d4:	2244      	movs	r2, #68	; 0x44
 80047d6:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	0018      	movs	r0, r3
 80047de:	f006 fc01 	bl	800afe4 <USB_ReadInterrupts>
 80047e2:	0002      	movs	r2, r0
 80047e4:	2380      	movs	r3, #128	; 0x80
 80047e6:	019b      	lsls	r3, r3, #6
 80047e8:	401a      	ands	r2, r3
 80047ea:	2380      	movs	r3, #128	; 0x80
 80047ec:	019b      	lsls	r3, r3, #6
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d10b      	bne.n	800480a <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2244      	movs	r2, #68	; 0x44
 80047f8:	5a9b      	ldrh	r3, [r3, r2]
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4986      	ldr	r1, [pc, #536]	; (8004a1c <HAL_PCD_IRQHandler+0x2e4>)
 8004802:	400a      	ands	r2, r1
 8004804:	b291      	uxth	r1, r2
 8004806:	2244      	movs	r2, #68	; 0x44
 8004808:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	0018      	movs	r0, r3
 8004810:	f006 fbe8 	bl	800afe4 <USB_ReadInterrupts>
 8004814:	0002      	movs	r2, r0
 8004816:	2380      	movs	r3, #128	; 0x80
 8004818:	015b      	lsls	r3, r3, #5
 800481a:	401a      	ands	r2, r3
 800481c:	2380      	movs	r3, #128	; 0x80
 800481e:	015b      	lsls	r3, r3, #5
 8004820:	429a      	cmp	r2, r3
 8004822:	d137      	bne.n	8004894 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2240      	movs	r2, #64	; 0x40
 800482a:	5a9b      	ldrh	r3, [r3, r2]
 800482c:	b29a      	uxth	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2104      	movs	r1, #4
 8004834:	438a      	bics	r2, r1
 8004836:	b291      	uxth	r1, r2
 8004838:	2240      	movs	r2, #64	; 0x40
 800483a:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2240      	movs	r2, #64	; 0x40
 8004842:	5a9b      	ldrh	r3, [r3, r2]
 8004844:	b29a      	uxth	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2108      	movs	r1, #8
 800484c:	438a      	bics	r2, r1
 800484e:	b291      	uxth	r1, r2
 8004850:	2240      	movs	r2, #64	; 0x40
 8004852:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	23b8      	movs	r3, #184	; 0xb8
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	5cd3      	ldrb	r3, [r2, r3]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d109      	bne.n	8004874 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	23b8      	movs	r3, #184	; 0xb8
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	2100      	movs	r1, #0
 8004868:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2100      	movs	r1, #0
 800486e:	0018      	movs	r0, r3
 8004870:	f001 fc92 	bl	8006198 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	0018      	movs	r0, r3
 8004878:	f008 fc78 	bl	800d16c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2244      	movs	r2, #68	; 0x44
 8004882:	5a9b      	ldrh	r3, [r3, r2]
 8004884:	b29a      	uxth	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4965      	ldr	r1, [pc, #404]	; (8004a20 <HAL_PCD_IRQHandler+0x2e8>)
 800488c:	400a      	ands	r2, r1
 800488e:	b291      	uxth	r1, r2
 8004890:	2244      	movs	r2, #68	; 0x44
 8004892:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	0018      	movs	r0, r3
 800489a:	f006 fba3 	bl	800afe4 <USB_ReadInterrupts>
 800489e:	0002      	movs	r2, r0
 80048a0:	2380      	movs	r3, #128	; 0x80
 80048a2:	011b      	lsls	r3, r3, #4
 80048a4:	401a      	ands	r2, r3
 80048a6:	2380      	movs	r3, #128	; 0x80
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d127      	bne.n	80048fe <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2240      	movs	r2, #64	; 0x40
 80048b4:	5a9b      	ldrh	r3, [r3, r2]
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2108      	movs	r1, #8
 80048be:	430a      	orrs	r2, r1
 80048c0:	b291      	uxth	r1, r2
 80048c2:	2240      	movs	r2, #64	; 0x40
 80048c4:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2244      	movs	r2, #68	; 0x44
 80048cc:	5a9b      	ldrh	r3, [r3, r2]
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4953      	ldr	r1, [pc, #332]	; (8004a24 <HAL_PCD_IRQHandler+0x2ec>)
 80048d6:	400a      	ands	r2, r1
 80048d8:	b291      	uxth	r1, r2
 80048da:	2244      	movs	r2, #68	; 0x44
 80048dc:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2240      	movs	r2, #64	; 0x40
 80048e4:	5a9b      	ldrh	r3, [r3, r2]
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2104      	movs	r1, #4
 80048ee:	430a      	orrs	r2, r1
 80048f0:	b291      	uxth	r1, r2
 80048f2:	2240      	movs	r2, #64	; 0x40
 80048f4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	0018      	movs	r0, r3
 80048fa:	f008 fc1b 	bl	800d134 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	0018      	movs	r0, r3
 8004904:	f006 fb6e 	bl	800afe4 <USB_ReadInterrupts>
 8004908:	0003      	movs	r3, r0
 800490a:	2280      	movs	r2, #128	; 0x80
 800490c:	4013      	ands	r3, r2
 800490e:	2b80      	cmp	r3, #128	; 0x80
 8004910:	d145      	bne.n	800499e <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2244      	movs	r2, #68	; 0x44
 8004918:	5a9b      	ldrh	r3, [r3, r2]
 800491a:	b29a      	uxth	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2180      	movs	r1, #128	; 0x80
 8004922:	438a      	bics	r2, r1
 8004924:	b291      	uxth	r1, r2
 8004926:	2244      	movs	r2, #68	; 0x44
 8004928:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	23b8      	movs	r3, #184	; 0xb8
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	5cd3      	ldrb	r3, [r2, r3]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d12f      	bne.n	8004996 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2240      	movs	r2, #64	; 0x40
 800493c:	5a9b      	ldrh	r3, [r3, r2]
 800493e:	b29a      	uxth	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2104      	movs	r1, #4
 8004946:	430a      	orrs	r2, r1
 8004948:	b291      	uxth	r1, r2
 800494a:	2240      	movs	r2, #64	; 0x40
 800494c:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2240      	movs	r2, #64	; 0x40
 8004954:	5a9b      	ldrh	r3, [r3, r2]
 8004956:	b29a      	uxth	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2108      	movs	r1, #8
 800495e:	430a      	orrs	r2, r1
 8004960:	b291      	uxth	r1, r2
 8004962:	2240      	movs	r2, #64	; 0x40
 8004964:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	23b8      	movs	r3, #184	; 0xb8
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	2101      	movs	r1, #1
 800496e:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2254      	movs	r2, #84	; 0x54
 8004976:	5a9b      	ldrh	r3, [r3, r2]
 8004978:	b29b      	uxth	r3, r3
 800497a:	089b      	lsrs	r3, r3, #2
 800497c:	223c      	movs	r2, #60	; 0x3c
 800497e:	4013      	ands	r3, r2
 8004980:	0019      	movs	r1, r3
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	23b9      	movs	r3, #185	; 0xb9
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2101      	movs	r1, #1
 800498e:	0018      	movs	r0, r3
 8004990:	f001 fc02 	bl	8006198 <HAL_PCDEx_LPM_Callback>
 8004994:	e003      	b.n	800499e <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	0018      	movs	r0, r3
 800499a:	f008 fbcb 	bl	800d134 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	0018      	movs	r0, r3
 80049a4:	f006 fb1e 	bl	800afe4 <USB_ReadInterrupts>
 80049a8:	0002      	movs	r2, r0
 80049aa:	2380      	movs	r3, #128	; 0x80
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	401a      	ands	r2, r3
 80049b0:	2380      	movs	r3, #128	; 0x80
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d10f      	bne.n	80049d8 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2244      	movs	r2, #68	; 0x44
 80049be:	5a9b      	ldrh	r3, [r3, r2]
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4918      	ldr	r1, [pc, #96]	; (8004a28 <HAL_PCD_IRQHandler+0x2f0>)
 80049c8:	400a      	ands	r2, r1
 80049ca:	b291      	uxth	r1, r2
 80049cc:	2244      	movs	r2, #68	; 0x44
 80049ce:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	0018      	movs	r0, r3
 80049d4:	f008 fb7a 	bl	800d0cc <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	0018      	movs	r0, r3
 80049de:	f006 fb01 	bl	800afe4 <USB_ReadInterrupts>
 80049e2:	0002      	movs	r2, r0
 80049e4:	2380      	movs	r3, #128	; 0x80
 80049e6:	005b      	lsls	r3, r3, #1
 80049e8:	401a      	ands	r2, r3
 80049ea:	2380      	movs	r3, #128	; 0x80
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d10b      	bne.n	8004a0a <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2244      	movs	r2, #68	; 0x44
 80049f8:	5a9b      	ldrh	r3, [r3, r2]
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	490a      	ldr	r1, [pc, #40]	; (8004a2c <HAL_PCD_IRQHandler+0x2f4>)
 8004a02:	400a      	ands	r2, r1
 8004a04:	b291      	uxth	r1, r2
 8004a06:	2244      	movs	r2, #68	; 0x44
 8004a08:	5299      	strh	r1, [r3, r2]
  }
}
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	b002      	add	sp, #8
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	fffffbff 	.word	0xfffffbff
 8004a18:	ffffbfff 	.word	0xffffbfff
 8004a1c:	ffffdfff 	.word	0xffffdfff
 8004a20:	ffffefff 	.word	0xffffefff
 8004a24:	fffff7ff 	.word	0xfffff7ff
 8004a28:	fffffdff 	.word	0xfffffdff
 8004a2c:	fffffeff 	.word	0xfffffeff

08004a30 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	000a      	movs	r2, r1
 8004a3a:	1cfb      	adds	r3, r7, #3
 8004a3c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	23aa      	movs	r3, #170	; 0xaa
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	5cd3      	ldrb	r3, [r2, r3]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d101      	bne.n	8004a4e <HAL_PCD_SetAddress+0x1e>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	e017      	b.n	8004a7e <HAL_PCD_SetAddress+0x4e>
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	23aa      	movs	r3, #170	; 0xaa
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	2101      	movs	r1, #1
 8004a56:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	1cfa      	adds	r2, r7, #3
 8004a5c:	2124      	movs	r1, #36	; 0x24
 8004a5e:	7812      	ldrb	r2, [r2, #0]
 8004a60:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	1cfb      	adds	r3, r7, #3
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	0019      	movs	r1, r3
 8004a6c:	0010      	movs	r0, r2
 8004a6e:	f006 fa8f 	bl	800af90 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	23aa      	movs	r3, #170	; 0xaa
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	2100      	movs	r1, #0
 8004a7a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	0018      	movs	r0, r3
 8004a80:	46bd      	mov	sp, r7
 8004a82:	b002      	add	sp, #8
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004a86:	b590      	push	{r4, r7, lr}
 8004a88:	b085      	sub	sp, #20
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	000c      	movs	r4, r1
 8004a90:	0010      	movs	r0, r2
 8004a92:	0019      	movs	r1, r3
 8004a94:	1cfb      	adds	r3, r7, #3
 8004a96:	1c22      	adds	r2, r4, #0
 8004a98:	701a      	strb	r2, [r3, #0]
 8004a9a:	003b      	movs	r3, r7
 8004a9c:	1c02      	adds	r2, r0, #0
 8004a9e:	801a      	strh	r2, [r3, #0]
 8004aa0:	1cbb      	adds	r3, r7, #2
 8004aa2:	1c0a      	adds	r2, r1, #0
 8004aa4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004aa6:	230b      	movs	r3, #11
 8004aa8:	18fb      	adds	r3, r7, r3
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004aae:	1cfb      	adds	r3, r7, #3
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	b25b      	sxtb	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	da0f      	bge.n	8004ad8 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ab8:	1cfb      	adds	r3, r7, #3
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2207      	movs	r2, #7
 8004abe:	4013      	ands	r3, r2
 8004ac0:	1c5a      	adds	r2, r3, #1
 8004ac2:	0013      	movs	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	189b      	adds	r3, r3, r2
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	18d3      	adds	r3, r2, r3
 8004ace:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	705a      	strb	r2, [r3, #1]
 8004ad6:	e00f      	b.n	8004af8 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ad8:	1cfb      	adds	r3, r7, #3
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2207      	movs	r2, #7
 8004ade:	401a      	ands	r2, r3
 8004ae0:	0013      	movs	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	189b      	adds	r3, r3, r2
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	3369      	adds	r3, #105	; 0x69
 8004aea:	33ff      	adds	r3, #255	; 0xff
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	18d3      	adds	r3, r2, r3
 8004af0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004af8:	1cfb      	adds	r3, r7, #3
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2207      	movs	r2, #7
 8004afe:	4013      	ands	r3, r2
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b06:	003b      	movs	r3, r7
 8004b08:	881a      	ldrh	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	1cba      	adds	r2, r7, #2
 8004b12:	7812      	ldrb	r2, [r2, #0]
 8004b14:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	785b      	ldrb	r3, [r3, #1]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d004      	beq.n	8004b28 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b28:	1cbb      	adds	r3, r7, #2
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d102      	bne.n	8004b36 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	23aa      	movs	r3, #170	; 0xaa
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	5cd3      	ldrb	r3, [r2, r3]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <HAL_PCD_EP_Open+0xc0>
 8004b42:	2302      	movs	r3, #2
 8004b44:	e013      	b.n	8004b6e <HAL_PCD_EP_Open+0xe8>
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	23aa      	movs	r3, #170	; 0xaa
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	0011      	movs	r1, r2
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f004 fb29 	bl	80091b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	23aa      	movs	r3, #170	; 0xaa
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	2100      	movs	r1, #0
 8004b66:	54d1      	strb	r1, [r2, r3]

  return ret;
 8004b68:	230b      	movs	r3, #11
 8004b6a:	18fb      	adds	r3, r7, r3
 8004b6c:	781b      	ldrb	r3, [r3, #0]
}
 8004b6e:	0018      	movs	r0, r3
 8004b70:	46bd      	mov	sp, r7
 8004b72:	b005      	add	sp, #20
 8004b74:	bd90      	pop	{r4, r7, pc}

08004b76 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b084      	sub	sp, #16
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
 8004b7e:	000a      	movs	r2, r1
 8004b80:	1cfb      	adds	r3, r7, #3
 8004b82:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b84:	1cfb      	adds	r3, r7, #3
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	b25b      	sxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	da0f      	bge.n	8004bae <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b8e:	1cfb      	adds	r3, r7, #3
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	2207      	movs	r2, #7
 8004b94:	4013      	ands	r3, r2
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	0013      	movs	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	189b      	adds	r3, r3, r2
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	18d3      	adds	r3, r2, r3
 8004ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	705a      	strb	r2, [r3, #1]
 8004bac:	e00f      	b.n	8004bce <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bae:	1cfb      	adds	r3, r7, #3
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2207      	movs	r2, #7
 8004bb4:	401a      	ands	r2, r3
 8004bb6:	0013      	movs	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	189b      	adds	r3, r3, r2
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	3369      	adds	r3, #105	; 0x69
 8004bc0:	33ff      	adds	r3, #255	; 0xff
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	18d3      	adds	r3, r2, r3
 8004bc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004bce:	1cfb      	adds	r3, r7, #3
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	2207      	movs	r2, #7
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	23aa      	movs	r3, #170	; 0xaa
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	5cd3      	ldrb	r3, [r2, r3]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <HAL_PCD_EP_Close+0x76>
 8004be8:	2302      	movs	r3, #2
 8004bea:	e011      	b.n	8004c10 <HAL_PCD_EP_Close+0x9a>
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	23aa      	movs	r3, #170	; 0xaa
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	0011      	movs	r1, r2
 8004bfe:	0018      	movs	r0, r3
 8004c00:	f004 fe4a 	bl	8009898 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	23aa      	movs	r3, #170	; 0xaa
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	0018      	movs	r0, r3
 8004c12:	46bd      	mov	sp, r7
 8004c14:	b004      	add	sp, #16
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	607a      	str	r2, [r7, #4]
 8004c22:	603b      	str	r3, [r7, #0]
 8004c24:	200b      	movs	r0, #11
 8004c26:	183b      	adds	r3, r7, r0
 8004c28:	1c0a      	adds	r2, r1, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c2c:	0001      	movs	r1, r0
 8004c2e:	187b      	adds	r3, r7, r1
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	2207      	movs	r2, #7
 8004c34:	401a      	ands	r2, r3
 8004c36:	0013      	movs	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	189b      	adds	r3, r3, r2
 8004c3c:	00db      	lsls	r3, r3, #3
 8004c3e:	3369      	adds	r3, #105	; 0x69
 8004c40:	33ff      	adds	r3, #255	; 0xff
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	18d3      	adds	r3, r2, r3
 8004c46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	2200      	movs	r2, #0
 8004c58:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c60:	187b      	adds	r3, r7, r1
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2207      	movs	r2, #7
 8004c66:	4013      	ands	r3, r2
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c6e:	187b      	adds	r3, r7, r1
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2207      	movs	r2, #7
 8004c74:	4013      	ands	r3, r2
 8004c76:	d107      	bne.n	8004c88 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	0011      	movs	r1, r2
 8004c80:	0018      	movs	r0, r3
 8004c82:	f004 ffc9 	bl	8009c18 <USB_EPStartXfer>
 8004c86:	e006      	b.n	8004c96 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	0011      	movs	r1, r2
 8004c90:	0018      	movs	r0, r3
 8004c92:	f004 ffc1 	bl	8009c18 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	0018      	movs	r0, r3
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	b006      	add	sp, #24
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	000a      	movs	r2, r1
 8004caa:	1cfb      	adds	r3, r7, #3
 8004cac:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004cae:	1cfb      	adds	r3, r7, #3
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2207      	movs	r2, #7
 8004cb4:	401a      	ands	r2, r3
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	23c2      	movs	r3, #194	; 0xc2
 8004cba:	0059      	lsls	r1, r3, #1
 8004cbc:	0013      	movs	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	189b      	adds	r3, r3, r2
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	18c3      	adds	r3, r0, r3
 8004cc6:	185b      	adds	r3, r3, r1
 8004cc8:	681b      	ldr	r3, [r3, #0]
}
 8004cca:	0018      	movs	r0, r3
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	b002      	add	sp, #8
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b086      	sub	sp, #24
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	603b      	str	r3, [r7, #0]
 8004cde:	200b      	movs	r0, #11
 8004ce0:	183b      	adds	r3, r7, r0
 8004ce2:	1c0a      	adds	r2, r1, #0
 8004ce4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ce6:	183b      	adds	r3, r7, r0
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	2207      	movs	r2, #7
 8004cec:	4013      	ands	r3, r2
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	0013      	movs	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	189b      	adds	r3, r3, r2
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	18d3      	adds	r3, r2, r3
 8004cfc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2224      	movs	r2, #36	; 0x24
 8004d0e:	2101      	movs	r1, #1
 8004d10:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2201      	movs	r2, #1
 8004d22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d24:	183b      	adds	r3, r7, r0
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2207      	movs	r2, #7
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d32:	183b      	adds	r3, r7, r0
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	2207      	movs	r2, #7
 8004d38:	4013      	ands	r3, r2
 8004d3a:	d107      	bne.n	8004d4c <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	0011      	movs	r1, r2
 8004d44:	0018      	movs	r0, r3
 8004d46:	f004 ff67 	bl	8009c18 <USB_EPStartXfer>
 8004d4a:	e006      	b.n	8004d5a <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	0011      	movs	r1, r2
 8004d54:	0018      	movs	r0, r3
 8004d56:	f004 ff5f 	bl	8009c18 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	b006      	add	sp, #24
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	000a      	movs	r2, r1
 8004d6e:	1cfb      	adds	r3, r7, #3
 8004d70:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d72:	1cfb      	adds	r3, r7, #3
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2207      	movs	r2, #7
 8004d78:	401a      	ands	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d901      	bls.n	8004d86 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e046      	b.n	8004e14 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d86:	1cfb      	adds	r3, r7, #3
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	b25b      	sxtb	r3, r3
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	da0f      	bge.n	8004db0 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d90:	1cfb      	adds	r3, r7, #3
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2207      	movs	r2, #7
 8004d96:	4013      	ands	r3, r2
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	0013      	movs	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	189b      	adds	r3, r3, r2
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	18d3      	adds	r3, r2, r3
 8004da6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2201      	movs	r2, #1
 8004dac:	705a      	strb	r2, [r3, #1]
 8004dae:	e00d      	b.n	8004dcc <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004db0:	1cfb      	adds	r3, r7, #3
 8004db2:	781a      	ldrb	r2, [r3, #0]
 8004db4:	0013      	movs	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	189b      	adds	r3, r3, r2
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	3369      	adds	r3, #105	; 0x69
 8004dbe:	33ff      	adds	r3, #255	; 0xff
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	18d3      	adds	r3, r2, r3
 8004dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dd2:	1cfb      	adds	r3, r7, #3
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	2207      	movs	r2, #7
 8004dd8:	4013      	ands	r3, r2
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	23aa      	movs	r3, #170	; 0xaa
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	5cd3      	ldrb	r3, [r2, r3]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d101      	bne.n	8004df0 <HAL_PCD_EP_SetStall+0x8c>
 8004dec:	2302      	movs	r3, #2
 8004dee:	e011      	b.n	8004e14 <HAL_PCD_EP_SetStall+0xb0>
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	23aa      	movs	r3, #170	; 0xaa
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	2101      	movs	r1, #1
 8004df8:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	0011      	movs	r1, r2
 8004e02:	0018      	movs	r0, r3
 8004e04:	f005 ffc2 	bl	800ad8c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	23aa      	movs	r3, #170	; 0xaa
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	2100      	movs	r1, #0
 8004e10:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	0018      	movs	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	b004      	add	sp, #16
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	000a      	movs	r2, r1
 8004e26:	1cfb      	adds	r3, r7, #3
 8004e28:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e2a:	1cfb      	adds	r3, r7, #3
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	220f      	movs	r2, #15
 8004e30:	401a      	ands	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d901      	bls.n	8004e3e <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e048      	b.n	8004ed0 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e3e:	1cfb      	adds	r3, r7, #3
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	b25b      	sxtb	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	da0f      	bge.n	8004e68 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e48:	1cfb      	adds	r3, r7, #3
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2207      	movs	r2, #7
 8004e4e:	4013      	ands	r3, r2
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	0013      	movs	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	189b      	adds	r3, r3, r2
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	18d3      	adds	r3, r2, r3
 8004e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2201      	movs	r2, #1
 8004e64:	705a      	strb	r2, [r3, #1]
 8004e66:	e00f      	b.n	8004e88 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e68:	1cfb      	adds	r3, r7, #3
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2207      	movs	r2, #7
 8004e6e:	401a      	ands	r2, r3
 8004e70:	0013      	movs	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	189b      	adds	r3, r3, r2
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	3369      	adds	r3, #105	; 0x69
 8004e7a:	33ff      	adds	r3, #255	; 0xff
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	18d3      	adds	r3, r2, r3
 8004e80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e8e:	1cfb      	adds	r3, r7, #3
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2207      	movs	r2, #7
 8004e94:	4013      	ands	r3, r2
 8004e96:	b2da      	uxtb	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	23aa      	movs	r3, #170	; 0xaa
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	5cd3      	ldrb	r3, [r2, r3]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_PCD_EP_ClrStall+0x90>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e011      	b.n	8004ed0 <HAL_PCD_EP_ClrStall+0xb4>
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	23aa      	movs	r3, #170	; 0xaa
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	0011      	movs	r1, r2
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f005 ffb4 	bl	800ae2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	23aa      	movs	r3, #170	; 0xaa
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	2100      	movs	r1, #0
 8004ecc:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	b004      	add	sp, #16
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004ed8:	b5b0      	push	{r4, r5, r7, lr}
 8004eda:	b096      	sub	sp, #88	; 0x58
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004ee0:	f000 fbd8 	bl	8005694 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	2056      	movs	r0, #86	; 0x56
 8004eea:	183b      	adds	r3, r7, r0
 8004eec:	2144      	movs	r1, #68	; 0x44
 8004eee:	5a52      	ldrh	r2, [r2, r1]
 8004ef0:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004ef2:	183b      	adds	r3, r7, r0
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	2455      	movs	r4, #85	; 0x55
 8004efa:	193b      	adds	r3, r7, r4
 8004efc:	210f      	movs	r1, #15
 8004efe:	400a      	ands	r2, r1
 8004f00:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8004f02:	193b      	adds	r3, r7, r4
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d000      	beq.n	8004f0c <PCD_EP_ISR_Handler+0x34>
 8004f0a:	e179      	b.n	8005200 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004f0c:	183b      	adds	r3, r7, r0
 8004f0e:	881b      	ldrh	r3, [r3, #0]
 8004f10:	2210      	movs	r2, #16
 8004f12:	4013      	ands	r3, r2
 8004f14:	d154      	bne.n	8004fc0 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	200e      	movs	r0, #14
 8004f20:	183b      	adds	r3, r7, r0
 8004f22:	49af      	ldr	r1, [pc, #700]	; (80051e0 <PCD_EP_ISR_Handler+0x308>)
 8004f24:	400a      	ands	r2, r1
 8004f26:	801a      	strh	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	183a      	adds	r2, r7, r0
 8004f2e:	8812      	ldrh	r2, [r2, #0]
 8004f30:	49ac      	ldr	r1, [pc, #688]	; (80051e4 <PCD_EP_ISR_Handler+0x30c>)
 8004f32:	430a      	orrs	r2, r1
 8004f34:	b292      	uxth	r2, r2
 8004f36:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3328      	adds	r3, #40	; 0x28
 8004f3c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2250      	movs	r2, #80	; 0x50
 8004f44:	5a9b      	ldrh	r3, [r3, r2]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	001a      	movs	r2, r3
 8004f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	18d2      	adds	r2, r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	18d3      	adds	r3, r2, r3
 8004f58:	4aa3      	ldr	r2, [pc, #652]	; (80051e8 <PCD_EP_ISR_Handler+0x310>)
 8004f5a:	4694      	mov	ip, r2
 8004f5c:	4463      	add	r3, ip
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	059b      	lsls	r3, r3, #22
 8004f62:	0d9a      	lsrs	r2, r3, #22
 8004f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f66:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f6a:	695a      	ldr	r2, [r3, #20]
 8004f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	18d2      	adds	r2, r2, r3
 8004f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f74:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2100      	movs	r1, #0
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	f008 f888 	bl	800d090 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2224      	movs	r2, #36	; 0x24
 8004f84:	5c9b      	ldrb	r3, [r3, r2]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <PCD_EP_ISR_Handler+0xb8>
 8004f8c:	f000 fb82 	bl	8005694 <PCD_EP_ISR_Handler+0x7bc>
 8004f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <PCD_EP_ISR_Handler+0xc4>
 8004f98:	f000 fb7c 	bl	8005694 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2224      	movs	r2, #36	; 0x24
 8004fa0:	5c9b      	ldrb	r3, [r3, r2]
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2280      	movs	r2, #128	; 0x80
 8004fa6:	4252      	negs	r2, r2
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	b291      	uxth	r1, r2
 8004fb2:	224c      	movs	r2, #76	; 0x4c
 8004fb4:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2224      	movs	r2, #36	; 0x24
 8004fba:	2100      	movs	r1, #0
 8004fbc:	5499      	strb	r1, [r3, r2]
 8004fbe:	e369      	b.n	8005694 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	3369      	adds	r3, #105	; 0x69
 8004fc4:	33ff      	adds	r3, #255	; 0xff
 8004fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	2152      	movs	r1, #82	; 0x52
 8004fce:	187b      	adds	r3, r7, r1
 8004fd0:	8812      	ldrh	r2, [r2, #0]
 8004fd2:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004fd4:	187b      	adds	r3, r7, r1
 8004fd6:	881a      	ldrh	r2, [r3, #0]
 8004fd8:	2380      	movs	r3, #128	; 0x80
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d037      	beq.n	8005050 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2250      	movs	r2, #80	; 0x50
 8004fe6:	5a9b      	ldrh	r3, [r3, r2]
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	001a      	movs	r2, r3
 8004fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	18d2      	adds	r2, r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	18d3      	adds	r3, r2, r3
 8004ffa:	4a7c      	ldr	r2, [pc, #496]	; (80051ec <PCD_EP_ISR_Handler+0x314>)
 8004ffc:	4694      	mov	ip, r2
 8004ffe:	4463      	add	r3, ip
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	059b      	lsls	r3, r3, #22
 8005004:	0d9a      	lsrs	r2, r3, #22
 8005006:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005008:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6818      	ldr	r0, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	22ac      	movs	r2, #172	; 0xac
 8005012:	0092      	lsls	r2, r2, #2
 8005014:	1899      	adds	r1, r3, r2
 8005016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005018:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800501a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800501c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800501e:	b29b      	uxth	r3, r3
 8005020:	f006 f832 	bl	800b088 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	881b      	ldrh	r3, [r3, #0]
 800502a:	b29a      	uxth	r2, r3
 800502c:	2010      	movs	r0, #16
 800502e:	183b      	adds	r3, r7, r0
 8005030:	496f      	ldr	r1, [pc, #444]	; (80051f0 <PCD_EP_ISR_Handler+0x318>)
 8005032:	400a      	ands	r2, r1
 8005034:	801a      	strh	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	183a      	adds	r2, r7, r0
 800503c:	8812      	ldrh	r2, [r2, #0]
 800503e:	2180      	movs	r1, #128	; 0x80
 8005040:	430a      	orrs	r2, r1
 8005042:	b292      	uxth	r2, r2
 8005044:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	0018      	movs	r0, r3
 800504a:	f007 ffeb 	bl	800d024 <HAL_PCD_SetupStageCallback>
 800504e:	e321      	b.n	8005694 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005050:	2352      	movs	r3, #82	; 0x52
 8005052:	18fb      	adds	r3, r7, r3
 8005054:	2200      	movs	r2, #0
 8005056:	5e9b      	ldrsh	r3, [r3, r2]
 8005058:	2b00      	cmp	r3, #0
 800505a:	db00      	blt.n	800505e <PCD_EP_ISR_Handler+0x186>
 800505c:	e31a      	b.n	8005694 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29a      	uxth	r2, r3
 8005066:	201e      	movs	r0, #30
 8005068:	183b      	adds	r3, r7, r0
 800506a:	4961      	ldr	r1, [pc, #388]	; (80051f0 <PCD_EP_ISR_Handler+0x318>)
 800506c:	400a      	ands	r2, r1
 800506e:	801a      	strh	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	183a      	adds	r2, r7, r0
 8005076:	8812      	ldrh	r2, [r2, #0]
 8005078:	2180      	movs	r1, #128	; 0x80
 800507a:	430a      	orrs	r2, r1
 800507c:	b292      	uxth	r2, r2
 800507e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2250      	movs	r2, #80	; 0x50
 8005086:	5a9b      	ldrh	r3, [r3, r2]
 8005088:	b29b      	uxth	r3, r3
 800508a:	001a      	movs	r2, r3
 800508c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	00db      	lsls	r3, r3, #3
 8005092:	18d2      	adds	r2, r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	18d3      	adds	r3, r2, r3
 800509a:	4a54      	ldr	r2, [pc, #336]	; (80051ec <PCD_EP_ISR_Handler+0x314>)
 800509c:	4694      	mov	ip, r2
 800509e:	4463      	add	r3, ip
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	059b      	lsls	r3, r3, #22
 80050a4:	0d9a      	lsrs	r2, r3, #22
 80050a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80050aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d01a      	beq.n	80050e8 <PCD_EP_ISR_Handler+0x210>
 80050b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d016      	beq.n	80050e8 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6818      	ldr	r0, [r3, #0]
 80050be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c0:	6959      	ldr	r1, [r3, #20]
 80050c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80050c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050c8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	f005 ffdc 	bl	800b088 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80050d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d2:	695a      	ldr	r2, [r3, #20]
 80050d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	18d2      	adds	r2, r2, r3
 80050da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050dc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2100      	movs	r1, #0
 80050e2:	0018      	movs	r0, r3
 80050e4:	f007 ffb3 	bl	800d04e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	001a      	movs	r2, r3
 80050f2:	2380      	movs	r3, #128	; 0x80
 80050f4:	011b      	lsls	r3, r3, #4
 80050f6:	4013      	ands	r3, r2
 80050f8:	d000      	beq.n	80050fc <PCD_EP_ISR_Handler+0x224>
 80050fa:	e2cb      	b.n	8005694 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	61bb      	str	r3, [r7, #24]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2250      	movs	r2, #80	; 0x50
 8005108:	5a9b      	ldrh	r3, [r3, r2]
 800510a:	b29b      	uxth	r3, r3
 800510c:	001a      	movs	r2, r3
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	189b      	adds	r3, r3, r2
 8005112:	61bb      	str	r3, [r7, #24]
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	4a35      	ldr	r2, [pc, #212]	; (80051ec <PCD_EP_ISR_Handler+0x314>)
 8005118:	4694      	mov	ip, r2
 800511a:	4463      	add	r3, ip
 800511c:	617b      	str	r3, [r7, #20]
 800511e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d110      	bne.n	8005148 <PCD_EP_ISR_Handler+0x270>
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	b29b      	uxth	r3, r3
 800512c:	4a31      	ldr	r2, [pc, #196]	; (80051f4 <PCD_EP_ISR_Handler+0x31c>)
 800512e:	4013      	ands	r3, r2
 8005130:	b29a      	uxth	r2, r3
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	801a      	strh	r2, [r3, #0]
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	b29b      	uxth	r3, r3
 800513c:	4a29      	ldr	r2, [pc, #164]	; (80051e4 <PCD_EP_ISR_Handler+0x30c>)
 800513e:	4313      	orrs	r3, r2
 8005140:	b29a      	uxth	r2, r3
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	801a      	strh	r2, [r3, #0]
 8005146:	e02b      	b.n	80051a0 <PCD_EP_ISR_Handler+0x2c8>
 8005148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	2b3e      	cmp	r3, #62	; 0x3e
 800514e:	d812      	bhi.n	8005176 <PCD_EP_ISR_Handler+0x29e>
 8005150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	085b      	lsrs	r3, r3, #1
 8005156:	647b      	str	r3, [r7, #68]	; 0x44
 8005158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	2201      	movs	r2, #1
 800515e:	4013      	ands	r3, r2
 8005160:	d002      	beq.n	8005168 <PCD_EP_ISR_Handler+0x290>
 8005162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005164:	3301      	adds	r3, #1
 8005166:	647b      	str	r3, [r7, #68]	; 0x44
 8005168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800516a:	b29b      	uxth	r3, r3
 800516c:	029b      	lsls	r3, r3, #10
 800516e:	b29a      	uxth	r2, r3
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	801a      	strh	r2, [r3, #0]
 8005174:	e014      	b.n	80051a0 <PCD_EP_ISR_Handler+0x2c8>
 8005176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	647b      	str	r3, [r7, #68]	; 0x44
 800517e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	221f      	movs	r2, #31
 8005184:	4013      	ands	r3, r2
 8005186:	d102      	bne.n	800518e <PCD_EP_ISR_Handler+0x2b6>
 8005188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800518a:	3b01      	subs	r3, #1
 800518c:	647b      	str	r3, [r7, #68]	; 0x44
 800518e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005190:	b29b      	uxth	r3, r3
 8005192:	029b      	lsls	r3, r3, #10
 8005194:	b29b      	uxth	r3, r3
 8005196:	4a13      	ldr	r2, [pc, #76]	; (80051e4 <PCD_EP_ISR_Handler+0x30c>)
 8005198:	4313      	orrs	r3, r2
 800519a:	b29a      	uxth	r2, r3
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	b29a      	uxth	r2, r3
 80051a8:	2012      	movs	r0, #18
 80051aa:	183b      	adds	r3, r7, r0
 80051ac:	4912      	ldr	r1, [pc, #72]	; (80051f8 <PCD_EP_ISR_Handler+0x320>)
 80051ae:	400a      	ands	r2, r1
 80051b0:	801a      	strh	r2, [r3, #0]
 80051b2:	183b      	adds	r3, r7, r0
 80051b4:	183a      	adds	r2, r7, r0
 80051b6:	8812      	ldrh	r2, [r2, #0]
 80051b8:	2180      	movs	r1, #128	; 0x80
 80051ba:	0149      	lsls	r1, r1, #5
 80051bc:	404a      	eors	r2, r1
 80051be:	801a      	strh	r2, [r3, #0]
 80051c0:	183b      	adds	r3, r7, r0
 80051c2:	183a      	adds	r2, r7, r0
 80051c4:	8812      	ldrh	r2, [r2, #0]
 80051c6:	2180      	movs	r1, #128	; 0x80
 80051c8:	0189      	lsls	r1, r1, #6
 80051ca:	404a      	eors	r2, r1
 80051cc:	801a      	strh	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	183a      	adds	r2, r7, r0
 80051d4:	8812      	ldrh	r2, [r2, #0]
 80051d6:	4909      	ldr	r1, [pc, #36]	; (80051fc <PCD_EP_ISR_Handler+0x324>)
 80051d8:	430a      	orrs	r2, r1
 80051da:	b292      	uxth	r2, r2
 80051dc:	801a      	strh	r2, [r3, #0]
 80051de:	e259      	b.n	8005694 <PCD_EP_ISR_Handler+0x7bc>
 80051e0:	ffff8f0f 	.word	0xffff8f0f
 80051e4:	ffff8000 	.word	0xffff8000
 80051e8:	00000402 	.word	0x00000402
 80051ec:	00000406 	.word	0x00000406
 80051f0:	00000f8f 	.word	0x00000f8f
 80051f4:	ffff83ff 	.word	0xffff83ff
 80051f8:	ffffbf8f 	.word	0xffffbf8f
 80051fc:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	001a      	movs	r2, r3
 8005206:	2055      	movs	r0, #85	; 0x55
 8005208:	183b      	adds	r3, r7, r0
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	18d2      	adds	r2, r2, r3
 8005210:	2152      	movs	r1, #82	; 0x52
 8005212:	187b      	adds	r3, r7, r1
 8005214:	8812      	ldrh	r2, [r2, #0]
 8005216:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005218:	187b      	adds	r3, r7, r1
 800521a:	2200      	movs	r2, #0
 800521c:	5e9b      	ldrsh	r3, [r3, r2]
 800521e:	2b00      	cmp	r3, #0
 8005220:	db00      	blt.n	8005224 <PCD_EP_ISR_Handler+0x34c>
 8005222:	e0fa      	b.n	800541a <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	001a      	movs	r2, r3
 800522a:	183b      	adds	r3, r7, r0
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	18d3      	adds	r3, r2, r3
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	b29a      	uxth	r2, r3
 8005236:	2450      	movs	r4, #80	; 0x50
 8005238:	193b      	adds	r3, r7, r4
 800523a:	49cf      	ldr	r1, [pc, #828]	; (8005578 <PCD_EP_ISR_Handler+0x6a0>)
 800523c:	400a      	ands	r2, r1
 800523e:	801a      	strh	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	001a      	movs	r2, r3
 8005246:	183b      	adds	r3, r7, r0
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	18d3      	adds	r3, r2, r3
 800524e:	193a      	adds	r2, r7, r4
 8005250:	8812      	ldrh	r2, [r2, #0]
 8005252:	2180      	movs	r1, #128	; 0x80
 8005254:	430a      	orrs	r2, r1
 8005256:	b292      	uxth	r2, r2
 8005258:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800525a:	183b      	adds	r3, r7, r0
 800525c:	781a      	ldrb	r2, [r3, #0]
 800525e:	0013      	movs	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	189b      	adds	r3, r3, r2
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	3369      	adds	r3, #105	; 0x69
 8005268:	33ff      	adds	r3, #255	; 0xff
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	18d3      	adds	r3, r2, r3
 800526e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005272:	7b1b      	ldrb	r3, [r3, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d125      	bne.n	80052c4 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2250      	movs	r2, #80	; 0x50
 800527e:	5a9b      	ldrh	r3, [r3, r2]
 8005280:	b29b      	uxth	r3, r3
 8005282:	001a      	movs	r2, r3
 8005284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	18d2      	adds	r2, r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	18d3      	adds	r3, r2, r3
 8005292:	4aba      	ldr	r2, [pc, #744]	; (800557c <PCD_EP_ISR_Handler+0x6a4>)
 8005294:	4694      	mov	ip, r2
 8005296:	4463      	add	r3, ip
 8005298:	881a      	ldrh	r2, [r3, #0]
 800529a:	2448      	movs	r4, #72	; 0x48
 800529c:	193b      	adds	r3, r7, r4
 800529e:	0592      	lsls	r2, r2, #22
 80052a0:	0d92      	lsrs	r2, r2, #22
 80052a2:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80052a4:	193b      	adds	r3, r7, r4
 80052a6:	881b      	ldrh	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d100      	bne.n	80052ae <PCD_EP_ISR_Handler+0x3d6>
 80052ac:	e08d      	b.n	80053ca <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b4:	6959      	ldr	r1, [r3, #20]
 80052b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b8:	88da      	ldrh	r2, [r3, #6]
 80052ba:	193b      	adds	r3, r7, r4
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	f005 fee3 	bl	800b088 <USB_ReadPMA>
 80052c2:	e082      	b.n	80053ca <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80052c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c6:	78db      	ldrb	r3, [r3, #3]
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d10c      	bne.n	80052e6 <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80052cc:	2348      	movs	r3, #72	; 0x48
 80052ce:	18fc      	adds	r4, r7, r3
 80052d0:	2352      	movs	r3, #82	; 0x52
 80052d2:	18fb      	adds	r3, r7, r3
 80052d4:	881a      	ldrh	r2, [r3, #0]
 80052d6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	0018      	movs	r0, r3
 80052dc:	f000 f9ee 	bl	80056bc <HAL_PCD_EP_DB_Receive>
 80052e0:	0003      	movs	r3, r0
 80052e2:	8023      	strh	r3, [r4, #0]
 80052e4:	e071      	b.n	80053ca <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	001a      	movs	r2, r3
 80052ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	18d3      	adds	r3, r2, r3
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	204a      	movs	r0, #74	; 0x4a
 80052fa:	183b      	adds	r3, r7, r0
 80052fc:	49a0      	ldr	r1, [pc, #640]	; (8005580 <PCD_EP_ISR_Handler+0x6a8>)
 80052fe:	400a      	ands	r2, r1
 8005300:	801a      	strh	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	001a      	movs	r2, r3
 8005308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	18d3      	adds	r3, r2, r3
 8005310:	183a      	adds	r2, r7, r0
 8005312:	8812      	ldrh	r2, [r2, #0]
 8005314:	499b      	ldr	r1, [pc, #620]	; (8005584 <PCD_EP_ISR_Handler+0x6ac>)
 8005316:	430a      	orrs	r2, r1
 8005318:	b292      	uxth	r2, r2
 800531a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	001a      	movs	r2, r3
 8005322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	18d3      	adds	r3, r2, r3
 800532a:	881b      	ldrh	r3, [r3, #0]
 800532c:	b29b      	uxth	r3, r3
 800532e:	001a      	movs	r2, r3
 8005330:	2380      	movs	r3, #128	; 0x80
 8005332:	01db      	lsls	r3, r3, #7
 8005334:	4013      	ands	r3, r2
 8005336:	d024      	beq.n	8005382 <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2250      	movs	r2, #80	; 0x50
 800533e:	5a9b      	ldrh	r3, [r3, r2]
 8005340:	b29b      	uxth	r3, r3
 8005342:	001a      	movs	r2, r3
 8005344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	18d2      	adds	r2, r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	18d3      	adds	r3, r2, r3
 8005352:	4a8d      	ldr	r2, [pc, #564]	; (8005588 <PCD_EP_ISR_Handler+0x6b0>)
 8005354:	4694      	mov	ip, r2
 8005356:	4463      	add	r3, ip
 8005358:	881a      	ldrh	r2, [r3, #0]
 800535a:	2448      	movs	r4, #72	; 0x48
 800535c:	193b      	adds	r3, r7, r4
 800535e:	0592      	lsls	r2, r2, #22
 8005360:	0d92      	lsrs	r2, r2, #22
 8005362:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8005364:	193b      	adds	r3, r7, r4
 8005366:	881b      	ldrh	r3, [r3, #0]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d02e      	beq.n	80053ca <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6818      	ldr	r0, [r3, #0]
 8005370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005372:	6959      	ldr	r1, [r3, #20]
 8005374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005376:	891a      	ldrh	r2, [r3, #8]
 8005378:	193b      	adds	r3, r7, r4
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	f005 fe84 	bl	800b088 <USB_ReadPMA>
 8005380:	e023      	b.n	80053ca <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2250      	movs	r2, #80	; 0x50
 8005388:	5a9b      	ldrh	r3, [r3, r2]
 800538a:	b29b      	uxth	r3, r3
 800538c:	001a      	movs	r2, r3
 800538e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	18d2      	adds	r2, r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	18d3      	adds	r3, r2, r3
 800539c:	4a77      	ldr	r2, [pc, #476]	; (800557c <PCD_EP_ISR_Handler+0x6a4>)
 800539e:	4694      	mov	ip, r2
 80053a0:	4463      	add	r3, ip
 80053a2:	881a      	ldrh	r2, [r3, #0]
 80053a4:	2448      	movs	r4, #72	; 0x48
 80053a6:	193b      	adds	r3, r7, r4
 80053a8:	0592      	lsls	r2, r2, #22
 80053aa:	0d92      	lsrs	r2, r2, #22
 80053ac:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80053ae:	193b      	adds	r3, r7, r4
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d009      	beq.n	80053ca <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6818      	ldr	r0, [r3, #0]
 80053ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053bc:	6959      	ldr	r1, [r3, #20]
 80053be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053c0:	895a      	ldrh	r2, [r3, #10]
 80053c2:	193b      	adds	r3, r7, r4
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	f005 fe5f 	bl	800b088 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80053ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053cc:	69da      	ldr	r2, [r3, #28]
 80053ce:	2148      	movs	r1, #72	; 0x48
 80053d0:	187b      	adds	r3, r7, r1
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	18d2      	adds	r2, r2, r3
 80053d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80053da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053dc:	695a      	ldr	r2, [r3, #20]
 80053de:	187b      	adds	r3, r7, r1
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	18d2      	adds	r2, r2, r3
 80053e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80053e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d005      	beq.n	80053fc <PCD_EP_ISR_Handler+0x524>
 80053f0:	187b      	adds	r3, r7, r1
 80053f2:	881a      	ldrh	r2, [r3, #0]
 80053f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d207      	bcs.n	800540c <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80053fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053fe:	781a      	ldrb	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	0011      	movs	r1, r2
 8005404:	0018      	movs	r0, r3
 8005406:	f007 fe22 	bl	800d04e <HAL_PCD_DataOutStageCallback>
 800540a:	e006      	b.n	800541a <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005412:	0011      	movs	r1, r2
 8005414:	0018      	movs	r0, r3
 8005416:	f004 fbff 	bl	8009c18 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800541a:	2452      	movs	r4, #82	; 0x52
 800541c:	193b      	adds	r3, r7, r4
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	2280      	movs	r2, #128	; 0x80
 8005422:	4013      	ands	r3, r2
 8005424:	d100      	bne.n	8005428 <PCD_EP_ISR_Handler+0x550>
 8005426:	e135      	b.n	8005694 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 8005428:	2055      	movs	r0, #85	; 0x55
 800542a:	183b      	adds	r3, r7, r0
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	1c5a      	adds	r2, r3, #1
 8005430:	0013      	movs	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	189b      	adds	r3, r3, r2
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	18d3      	adds	r3, r2, r3
 800543c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	001a      	movs	r2, r3
 8005444:	183b      	adds	r3, r7, r0
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	18d3      	adds	r3, r2, r3
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	b29a      	uxth	r2, r3
 8005450:	2542      	movs	r5, #66	; 0x42
 8005452:	197b      	adds	r3, r7, r5
 8005454:	494d      	ldr	r1, [pc, #308]	; (800558c <PCD_EP_ISR_Handler+0x6b4>)
 8005456:	400a      	ands	r2, r1
 8005458:	801a      	strh	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	001a      	movs	r2, r3
 8005460:	183b      	adds	r3, r7, r0
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	18d3      	adds	r3, r2, r3
 8005468:	197a      	adds	r2, r7, r5
 800546a:	8812      	ldrh	r2, [r2, #0]
 800546c:	4948      	ldr	r1, [pc, #288]	; (8005590 <PCD_EP_ISR_Handler+0x6b8>)
 800546e:	430a      	orrs	r2, r1
 8005470:	b292      	uxth	r2, r2
 8005472:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 8005474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005476:	78db      	ldrb	r3, [r3, #3]
 8005478:	2b02      	cmp	r3, #2
 800547a:	d100      	bne.n	800547e <PCD_EP_ISR_Handler+0x5a6>
 800547c:	e0ad      	b.n	80055da <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 800547e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005480:	2200      	movs	r2, #0
 8005482:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005484:	193b      	adds	r3, r7, r4
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	2240      	movs	r2, #64	; 0x40
 800548a:	4013      	ands	r3, r2
 800548c:	d046      	beq.n	800551c <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800548e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005490:	785b      	ldrb	r3, [r3, #1]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d125      	bne.n	80054e2 <PCD_EP_ISR_Handler+0x60a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	627b      	str	r3, [r7, #36]	; 0x24
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2250      	movs	r2, #80	; 0x50
 80054a2:	5a9b      	ldrh	r3, [r3, r2]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	001a      	movs	r2, r3
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	189b      	adds	r3, r3, r2
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24
 80054ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	00da      	lsls	r2, r3, #3
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	18d3      	adds	r3, r2, r3
 80054b8:	4a33      	ldr	r2, [pc, #204]	; (8005588 <PCD_EP_ISR_Handler+0x6b0>)
 80054ba:	4694      	mov	ip, r2
 80054bc:	4463      	add	r3, ip
 80054be:	623b      	str	r3, [r7, #32]
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	881b      	ldrh	r3, [r3, #0]
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	4a33      	ldr	r2, [pc, #204]	; (8005594 <PCD_EP_ISR_Handler+0x6bc>)
 80054c8:	4013      	ands	r3, r2
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	801a      	strh	r2, [r3, #0]
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	881b      	ldrh	r3, [r3, #0]
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	4a2e      	ldr	r2, [pc, #184]	; (8005590 <PCD_EP_ISR_Handler+0x6b8>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	b29a      	uxth	r2, r3
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	801a      	strh	r2, [r3, #0]
 80054e0:	e073      	b.n	80055ca <PCD_EP_ISR_Handler+0x6f2>
 80054e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054e4:	785b      	ldrb	r3, [r3, #1]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d16f      	bne.n	80055ca <PCD_EP_ISR_Handler+0x6f2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2250      	movs	r2, #80	; 0x50
 80054f6:	5a9b      	ldrh	r3, [r3, r2]
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	001a      	movs	r2, r3
 80054fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fe:	189b      	adds	r3, r3, r2
 8005500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	00da      	lsls	r2, r3, #3
 8005508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550a:	18d3      	adds	r3, r2, r3
 800550c:	4a1e      	ldr	r2, [pc, #120]	; (8005588 <PCD_EP_ISR_Handler+0x6b0>)
 800550e:	4694      	mov	ip, r2
 8005510:	4463      	add	r3, ip
 8005512:	62bb      	str	r3, [r7, #40]	; 0x28
 8005514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005516:	2200      	movs	r2, #0
 8005518:	801a      	strh	r2, [r3, #0]
 800551a:	e056      	b.n	80055ca <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005524:	785b      	ldrb	r3, [r3, #1]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d136      	bne.n	8005598 <PCD_EP_ISR_Handler+0x6c0>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	637b      	str	r3, [r7, #52]	; 0x34
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2250      	movs	r2, #80	; 0x50
 8005536:	5a9b      	ldrh	r3, [r3, r2]
 8005538:	b29b      	uxth	r3, r3
 800553a:	001a      	movs	r2, r3
 800553c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553e:	189b      	adds	r3, r3, r2
 8005540:	637b      	str	r3, [r7, #52]	; 0x34
 8005542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	00da      	lsls	r2, r3, #3
 8005548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554a:	18d3      	adds	r3, r2, r3
 800554c:	4a0b      	ldr	r2, [pc, #44]	; (800557c <PCD_EP_ISR_Handler+0x6a4>)
 800554e:	4694      	mov	ip, r2
 8005550:	4463      	add	r3, ip
 8005552:	633b      	str	r3, [r7, #48]	; 0x30
 8005554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005556:	881b      	ldrh	r3, [r3, #0]
 8005558:	b29b      	uxth	r3, r3
 800555a:	4a0e      	ldr	r2, [pc, #56]	; (8005594 <PCD_EP_ISR_Handler+0x6bc>)
 800555c:	4013      	ands	r3, r2
 800555e:	b29a      	uxth	r2, r3
 8005560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005562:	801a      	strh	r2, [r3, #0]
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	881b      	ldrh	r3, [r3, #0]
 8005568:	b29b      	uxth	r3, r3
 800556a:	4a09      	ldr	r2, [pc, #36]	; (8005590 <PCD_EP_ISR_Handler+0x6b8>)
 800556c:	4313      	orrs	r3, r2
 800556e:	b29a      	uxth	r2, r3
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	801a      	strh	r2, [r3, #0]
 8005574:	e029      	b.n	80055ca <PCD_EP_ISR_Handler+0x6f2>
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	00000f8f 	.word	0x00000f8f
 800557c:	00000406 	.word	0x00000406
 8005580:	ffff8f8f 	.word	0xffff8f8f
 8005584:	ffff80c0 	.word	0xffff80c0
 8005588:	00000402 	.word	0x00000402
 800558c:	ffff8f0f 	.word	0xffff8f0f
 8005590:	ffff8000 	.word	0xffff8000
 8005594:	ffff83ff 	.word	0xffff83ff
 8005598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800559a:	785b      	ldrb	r3, [r3, #1]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d114      	bne.n	80055ca <PCD_EP_ISR_Handler+0x6f2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2250      	movs	r2, #80	; 0x50
 80055a6:	5a9b      	ldrh	r3, [r3, r2]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	001a      	movs	r2, r3
 80055ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ae:	189b      	adds	r3, r3, r2
 80055b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	00da      	lsls	r2, r3, #3
 80055b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ba:	18d3      	adds	r3, r2, r3
 80055bc:	4a3d      	ldr	r2, [pc, #244]	; (80056b4 <PCD_EP_ISR_Handler+0x7dc>)
 80055be:	4694      	mov	ip, r2
 80055c0:	4463      	add	r3, ip
 80055c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	2200      	movs	r2, #0
 80055c8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80055ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055cc:	781a      	ldrb	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	0011      	movs	r1, r2
 80055d2:	0018      	movs	r0, r3
 80055d4:	f007 fd5c 	bl	800d090 <HAL_PCD_DataInStageCallback>
 80055d8:	e05c      	b.n	8005694 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 80055da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055dc:	78db      	ldrb	r3, [r3, #3]
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d150      	bne.n	8005684 <PCD_EP_ISR_Handler+0x7ac>
 80055e2:	2352      	movs	r3, #82	; 0x52
 80055e4:	18fb      	adds	r3, r7, r3
 80055e6:	881a      	ldrh	r2, [r3, #0]
 80055e8:	2380      	movs	r3, #128	; 0x80
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	4013      	ands	r3, r2
 80055ee:	d149      	bne.n	8005684 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2250      	movs	r2, #80	; 0x50
 80055f6:	5a9b      	ldrh	r3, [r3, r2]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	001a      	movs	r2, r3
 80055fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	18d2      	adds	r2, r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	18d3      	adds	r3, r2, r3
 800560a:	4a2b      	ldr	r2, [pc, #172]	; (80056b8 <PCD_EP_ISR_Handler+0x7e0>)
 800560c:	4694      	mov	ip, r2
 800560e:	4463      	add	r3, ip
 8005610:	881a      	ldrh	r2, [r3, #0]
 8005612:	2140      	movs	r1, #64	; 0x40
 8005614:	187b      	adds	r3, r7, r1
 8005616:	0592      	lsls	r2, r2, #22
 8005618:	0d92      	lsrs	r2, r2, #22
 800561a:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 800561c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800561e:	699a      	ldr	r2, [r3, #24]
 8005620:	187b      	adds	r3, r7, r1
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	429a      	cmp	r2, r3
 8005626:	d907      	bls.n	8005638 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8005628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800562a:	699a      	ldr	r2, [r3, #24]
 800562c:	187b      	adds	r3, r7, r1
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	1ad2      	subs	r2, r2, r3
 8005632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005634:	619a      	str	r2, [r3, #24]
 8005636:	e002      	b.n	800563e <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 8005638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800563a:	2200      	movs	r2, #0
 800563c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800563e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d107      	bne.n	8005656 <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005648:	781a      	ldrb	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	0011      	movs	r1, r2
 800564e:	0018      	movs	r0, r3
 8005650:	f007 fd1e 	bl	800d090 <HAL_PCD_DataInStageCallback>
 8005654:	e01e      	b.n	8005694 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8005656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005658:	695a      	ldr	r2, [r3, #20]
 800565a:	2140      	movs	r1, #64	; 0x40
 800565c:	187b      	adds	r3, r7, r1
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	18d2      	adds	r2, r2, r3
 8005662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005664:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8005666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005668:	69da      	ldr	r2, [r3, #28]
 800566a:	187b      	adds	r3, r7, r1
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	18d2      	adds	r2, r2, r3
 8005670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005672:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800567a:	0011      	movs	r1, r2
 800567c:	0018      	movs	r0, r3
 800567e:	f004 facb 	bl	8009c18 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005682:	e007      	b.n	8005694 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005684:	2352      	movs	r3, #82	; 0x52
 8005686:	18fb      	adds	r3, r7, r3
 8005688:	881a      	ldrh	r2, [r3, #0]
 800568a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	0018      	movs	r0, r3
 8005690:	f000 f930 	bl	80058f4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2244      	movs	r2, #68	; 0x44
 800569a:	5a9b      	ldrh	r3, [r3, r2]
 800569c:	b29b      	uxth	r3, r3
 800569e:	b21b      	sxth	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	da01      	bge.n	80056a8 <PCD_EP_ISR_Handler+0x7d0>
 80056a4:	f7ff fc1e 	bl	8004ee4 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	0018      	movs	r0, r3
 80056ac:	46bd      	mov	sp, r7
 80056ae:	b016      	add	sp, #88	; 0x58
 80056b0:	bdb0      	pop	{r4, r5, r7, pc}
 80056b2:	46c0      	nop			; (mov r8, r8)
 80056b4:	00000406 	.word	0x00000406
 80056b8:	00000402 	.word	0x00000402

080056bc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80056bc:	b590      	push	{r4, r7, lr}
 80056be:	b089      	sub	sp, #36	; 0x24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	1dbb      	adds	r3, r7, #6
 80056c8:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80056ca:	1dbb      	adds	r3, r7, #6
 80056cc:	881a      	ldrh	r2, [r3, #0]
 80056ce:	2380      	movs	r3, #128	; 0x80
 80056d0:	01db      	lsls	r3, r3, #7
 80056d2:	4013      	ands	r3, r2
 80056d4:	d100      	bne.n	80056d8 <HAL_PCD_EP_DB_Receive+0x1c>
 80056d6:	e07d      	b.n	80057d4 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2250      	movs	r2, #80	; 0x50
 80056de:	5a9b      	ldrh	r3, [r3, r2]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	001a      	movs	r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	18d2      	adds	r2, r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	18d3      	adds	r3, r2, r3
 80056f2:	4a7a      	ldr	r2, [pc, #488]	; (80058dc <HAL_PCD_EP_DB_Receive+0x220>)
 80056f4:	4694      	mov	ip, r2
 80056f6:	4463      	add	r3, ip
 80056f8:	881a      	ldrh	r2, [r3, #0]
 80056fa:	211a      	movs	r1, #26
 80056fc:	187b      	adds	r3, r7, r1
 80056fe:	0592      	lsls	r2, r2, #22
 8005700:	0d92      	lsrs	r2, r2, #22
 8005702:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	699a      	ldr	r2, [r3, #24]
 8005708:	187b      	adds	r3, r7, r1
 800570a:	881b      	ldrh	r3, [r3, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d307      	bcc.n	8005720 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	699a      	ldr	r2, [r3, #24]
 8005714:	187b      	adds	r3, r7, r1
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	1ad2      	subs	r2, r2, r3
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	619a      	str	r2, [r3, #24]
 800571e:	e002      	b.n	8005726 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2200      	movs	r2, #0
 8005724:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d121      	bne.n	8005772 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	001a      	movs	r2, r3
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	18d3      	adds	r3, r2, r3
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	b29a      	uxth	r2, r3
 8005740:	2018      	movs	r0, #24
 8005742:	183b      	adds	r3, r7, r0
 8005744:	4966      	ldr	r1, [pc, #408]	; (80058e0 <HAL_PCD_EP_DB_Receive+0x224>)
 8005746:	400a      	ands	r2, r1
 8005748:	801a      	strh	r2, [r3, #0]
 800574a:	183b      	adds	r3, r7, r0
 800574c:	183a      	adds	r2, r7, r0
 800574e:	8812      	ldrh	r2, [r2, #0]
 8005750:	2180      	movs	r1, #128	; 0x80
 8005752:	0189      	lsls	r1, r1, #6
 8005754:	404a      	eors	r2, r1
 8005756:	801a      	strh	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	001a      	movs	r2, r3
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	18d3      	adds	r3, r2, r3
 8005766:	183a      	adds	r2, r7, r0
 8005768:	8812      	ldrh	r2, [r2, #0]
 800576a:	495e      	ldr	r1, [pc, #376]	; (80058e4 <HAL_PCD_EP_DB_Receive+0x228>)
 800576c:	430a      	orrs	r2, r1
 800576e:	b292      	uxth	r2, r2
 8005770:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005772:	1dbb      	adds	r3, r7, #6
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	2240      	movs	r2, #64	; 0x40
 8005778:	4013      	ands	r3, r2
 800577a:	d01a      	beq.n	80057b2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	001a      	movs	r2, r3
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	18d3      	adds	r3, r2, r3
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	b29a      	uxth	r2, r3
 800578e:	2016      	movs	r0, #22
 8005790:	183b      	adds	r3, r7, r0
 8005792:	4955      	ldr	r1, [pc, #340]	; (80058e8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8005794:	400a      	ands	r2, r1
 8005796:	801a      	strh	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	001a      	movs	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	18d3      	adds	r3, r2, r3
 80057a6:	183a      	adds	r2, r7, r0
 80057a8:	8812      	ldrh	r2, [r2, #0]
 80057aa:	4950      	ldr	r1, [pc, #320]	; (80058ec <HAL_PCD_EP_DB_Receive+0x230>)
 80057ac:	430a      	orrs	r2, r1
 80057ae:	b292      	uxth	r2, r2
 80057b0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80057b2:	241a      	movs	r4, #26
 80057b4:	193b      	adds	r3, r7, r4
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d100      	bne.n	80057be <HAL_PCD_EP_DB_Receive+0x102>
 80057bc:	e086      	b.n	80058cc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6818      	ldr	r0, [r3, #0]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	6959      	ldr	r1, [r3, #20]
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	891a      	ldrh	r2, [r3, #8]
 80057ca:	193b      	adds	r3, r7, r4
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	f005 fc5b 	bl	800b088 <USB_ReadPMA>
 80057d2:	e07b      	b.n	80058cc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2250      	movs	r2, #80	; 0x50
 80057da:	5a9b      	ldrh	r3, [r3, r2]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	001a      	movs	r2, r3
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	18d2      	adds	r2, r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	18d3      	adds	r3, r2, r3
 80057ee:	4a40      	ldr	r2, [pc, #256]	; (80058f0 <HAL_PCD_EP_DB_Receive+0x234>)
 80057f0:	4694      	mov	ip, r2
 80057f2:	4463      	add	r3, ip
 80057f4:	881a      	ldrh	r2, [r3, #0]
 80057f6:	211a      	movs	r1, #26
 80057f8:	187b      	adds	r3, r7, r1
 80057fa:	0592      	lsls	r2, r2, #22
 80057fc:	0d92      	lsrs	r2, r2, #22
 80057fe:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	699a      	ldr	r2, [r3, #24]
 8005804:	187b      	adds	r3, r7, r1
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d307      	bcc.n	800581c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	699a      	ldr	r2, [r3, #24]
 8005810:	187b      	adds	r3, r7, r1
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	1ad2      	subs	r2, r2, r3
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	619a      	str	r2, [r3, #24]
 800581a:	e002      	b.n	8005822 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2200      	movs	r2, #0
 8005820:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d121      	bne.n	800586e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	001a      	movs	r2, r3
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	18d3      	adds	r3, r2, r3
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29a      	uxth	r2, r3
 800583c:	201e      	movs	r0, #30
 800583e:	183b      	adds	r3, r7, r0
 8005840:	4927      	ldr	r1, [pc, #156]	; (80058e0 <HAL_PCD_EP_DB_Receive+0x224>)
 8005842:	400a      	ands	r2, r1
 8005844:	801a      	strh	r2, [r3, #0]
 8005846:	183b      	adds	r3, r7, r0
 8005848:	183a      	adds	r2, r7, r0
 800584a:	8812      	ldrh	r2, [r2, #0]
 800584c:	2180      	movs	r1, #128	; 0x80
 800584e:	0189      	lsls	r1, r1, #6
 8005850:	404a      	eors	r2, r1
 8005852:	801a      	strh	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	001a      	movs	r2, r3
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	18d3      	adds	r3, r2, r3
 8005862:	183a      	adds	r2, r7, r0
 8005864:	8812      	ldrh	r2, [r2, #0]
 8005866:	491f      	ldr	r1, [pc, #124]	; (80058e4 <HAL_PCD_EP_DB_Receive+0x228>)
 8005868:	430a      	orrs	r2, r1
 800586a:	b292      	uxth	r2, r2
 800586c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800586e:	1dbb      	adds	r3, r7, #6
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	2240      	movs	r2, #64	; 0x40
 8005874:	4013      	ands	r3, r2
 8005876:	d11a      	bne.n	80058ae <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	001a      	movs	r2, r3
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	18d3      	adds	r3, r2, r3
 8005886:	881b      	ldrh	r3, [r3, #0]
 8005888:	b29a      	uxth	r2, r3
 800588a:	201c      	movs	r0, #28
 800588c:	183b      	adds	r3, r7, r0
 800588e:	4916      	ldr	r1, [pc, #88]	; (80058e8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8005890:	400a      	ands	r2, r1
 8005892:	801a      	strh	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	001a      	movs	r2, r3
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	18d3      	adds	r3, r2, r3
 80058a2:	183a      	adds	r2, r7, r0
 80058a4:	8812      	ldrh	r2, [r2, #0]
 80058a6:	4911      	ldr	r1, [pc, #68]	; (80058ec <HAL_PCD_EP_DB_Receive+0x230>)
 80058a8:	430a      	orrs	r2, r1
 80058aa:	b292      	uxth	r2, r2
 80058ac:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80058ae:	241a      	movs	r4, #26
 80058b0:	193b      	adds	r3, r7, r4
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d009      	beq.n	80058cc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6818      	ldr	r0, [r3, #0]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	6959      	ldr	r1, [r3, #20]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	895a      	ldrh	r2, [r3, #10]
 80058c4:	193b      	adds	r3, r7, r4
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	f005 fbde 	bl	800b088 <USB_ReadPMA>
    }
  }

  return count;
 80058cc:	231a      	movs	r3, #26
 80058ce:	18fb      	adds	r3, r7, r3
 80058d0:	881b      	ldrh	r3, [r3, #0]
}
 80058d2:	0018      	movs	r0, r3
 80058d4:	46bd      	mov	sp, r7
 80058d6:	b009      	add	sp, #36	; 0x24
 80058d8:	bd90      	pop	{r4, r7, pc}
 80058da:	46c0      	nop			; (mov r8, r8)
 80058dc:	00000402 	.word	0x00000402
 80058e0:	ffffbf8f 	.word	0xffffbf8f
 80058e4:	ffff8080 	.word	0xffff8080
 80058e8:	ffff8f8f 	.word	0xffff8f8f
 80058ec:	ffff80c0 	.word	0xffff80c0
 80058f0:	00000406 	.word	0x00000406

080058f4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b0a2      	sub	sp, #136	; 0x88
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	1dbb      	adds	r3, r7, #6
 8005900:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005902:	1dbb      	adds	r3, r7, #6
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	2240      	movs	r2, #64	; 0x40
 8005908:	4013      	ands	r3, r2
 800590a:	d100      	bne.n	800590e <HAL_PCD_EP_DB_Transmit+0x1a>
 800590c:	e1c8      	b.n	8005ca0 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2250      	movs	r2, #80	; 0x50
 8005914:	5a9b      	ldrh	r3, [r3, r2]
 8005916:	b29b      	uxth	r3, r3
 8005918:	001a      	movs	r2, r3
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	18d2      	adds	r2, r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	18d3      	adds	r3, r2, r3
 8005928:	4ad7      	ldr	r2, [pc, #860]	; (8005c88 <HAL_PCD_EP_DB_Transmit+0x394>)
 800592a:	4694      	mov	ip, r2
 800592c:	4463      	add	r3, ip
 800592e:	881a      	ldrh	r2, [r3, #0]
 8005930:	214e      	movs	r1, #78	; 0x4e
 8005932:	187b      	adds	r3, r7, r1
 8005934:	0592      	lsls	r2, r2, #22
 8005936:	0d92      	lsrs	r2, r2, #22
 8005938:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	699a      	ldr	r2, [r3, #24]
 800593e:	187b      	adds	r3, r7, r1
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	429a      	cmp	r2, r3
 8005944:	d907      	bls.n	8005956 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	699a      	ldr	r2, [r3, #24]
 800594a:	187b      	adds	r3, r7, r1
 800594c:	881b      	ldrh	r3, [r3, #0]
 800594e:	1ad2      	subs	r2, r2, r3
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	619a      	str	r2, [r3, #24]
 8005954:	e002      	b.n	800595c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2200      	movs	r2, #0
 800595a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d000      	beq.n	8005966 <HAL_PCD_EP_DB_Transmit+0x72>
 8005964:	e0b5      	b.n	8005ad2 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	785b      	ldrb	r3, [r3, #1]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d125      	bne.n	80059ba <HAL_PCD_EP_DB_Transmit+0xc6>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	62bb      	str	r3, [r7, #40]	; 0x28
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2250      	movs	r2, #80	; 0x50
 800597a:	5a9b      	ldrh	r3, [r3, r2]
 800597c:	b29b      	uxth	r3, r3
 800597e:	001a      	movs	r2, r3
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	189b      	adds	r3, r3, r2
 8005984:	62bb      	str	r3, [r7, #40]	; 0x28
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	00da      	lsls	r2, r3, #3
 800598c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598e:	18d3      	adds	r3, r2, r3
 8005990:	4abd      	ldr	r2, [pc, #756]	; (8005c88 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005992:	4694      	mov	ip, r2
 8005994:	4463      	add	r3, ip
 8005996:	627b      	str	r3, [r7, #36]	; 0x24
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	b29b      	uxth	r3, r3
 800599e:	4abb      	ldr	r2, [pc, #748]	; (8005c8c <HAL_PCD_EP_DB_Transmit+0x398>)
 80059a0:	4013      	ands	r3, r2
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	801a      	strh	r2, [r3, #0]
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	4ab8      	ldr	r2, [pc, #736]	; (8005c90 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b6:	801a      	strh	r2, [r3, #0]
 80059b8:	e01b      	b.n	80059f2 <HAL_PCD_EP_DB_Transmit+0xfe>
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	785b      	ldrb	r3, [r3, #1]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d117      	bne.n	80059f2 <HAL_PCD_EP_DB_Transmit+0xfe>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	633b      	str	r3, [r7, #48]	; 0x30
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2250      	movs	r2, #80	; 0x50
 80059ce:	5a9b      	ldrh	r3, [r3, r2]
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	001a      	movs	r2, r3
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	189b      	adds	r3, r3, r2
 80059d8:	633b      	str	r3, [r7, #48]	; 0x30
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	00da      	lsls	r2, r3, #3
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	18d3      	adds	r3, r2, r3
 80059e4:	4aa8      	ldr	r2, [pc, #672]	; (8005c88 <HAL_PCD_EP_DB_Transmit+0x394>)
 80059e6:	4694      	mov	ip, r2
 80059e8:	4463      	add	r3, ip
 80059ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	2200      	movs	r2, #0
 80059f0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	623b      	str	r3, [r7, #32]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	785b      	ldrb	r3, [r3, #1]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d125      	bne.n	8005a4c <HAL_PCD_EP_DB_Transmit+0x158>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	61bb      	str	r3, [r7, #24]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2250      	movs	r2, #80	; 0x50
 8005a0c:	5a9b      	ldrh	r3, [r3, r2]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	001a      	movs	r2, r3
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	189b      	adds	r3, r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	00da      	lsls	r2, r3, #3
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	18d3      	adds	r3, r2, r3
 8005a22:	4a9c      	ldr	r2, [pc, #624]	; (8005c94 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8005a24:	4694      	mov	ip, r2
 8005a26:	4463      	add	r3, ip
 8005a28:	617b      	str	r3, [r7, #20]
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	4a96      	ldr	r2, [pc, #600]	; (8005c8c <HAL_PCD_EP_DB_Transmit+0x398>)
 8005a32:	4013      	ands	r3, r2
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	801a      	strh	r2, [r3, #0]
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	4a93      	ldr	r2, [pc, #588]	; (8005c90 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	801a      	strh	r2, [r3, #0]
 8005a4a:	e018      	b.n	8005a7e <HAL_PCD_EP_DB_Transmit+0x18a>
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	785b      	ldrb	r3, [r3, #1]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d114      	bne.n	8005a7e <HAL_PCD_EP_DB_Transmit+0x18a>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2250      	movs	r2, #80	; 0x50
 8005a5a:	5a9b      	ldrh	r3, [r3, r2]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	001a      	movs	r2, r3
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	189b      	adds	r3, r3, r2
 8005a64:	623b      	str	r3, [r7, #32]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	00da      	lsls	r2, r3, #3
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	18d3      	adds	r3, r2, r3
 8005a70:	4a88      	ldr	r2, [pc, #544]	; (8005c94 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8005a72:	4694      	mov	ip, r2
 8005a74:	4463      	add	r3, ip
 8005a76:	61fb      	str	r3, [r7, #28]
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	781a      	ldrb	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	0011      	movs	r1, r2
 8005a86:	0018      	movs	r0, r3
 8005a88:	f007 fb02 	bl	800d090 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005a8c:	1dbb      	adds	r3, r7, #6
 8005a8e:	881a      	ldrh	r2, [r3, #0]
 8005a90:	2380      	movs	r3, #128	; 0x80
 8005a92:	01db      	lsls	r3, r3, #7
 8005a94:	4013      	ands	r3, r2
 8005a96:	d100      	bne.n	8005a9a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8005a98:	e2d4      	b.n	8006044 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	001a      	movs	r2, r3
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	18d3      	adds	r3, r2, r3
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	2012      	movs	r0, #18
 8005aae:	183b      	adds	r3, r7, r0
 8005ab0:	4979      	ldr	r1, [pc, #484]	; (8005c98 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8005ab2:	400a      	ands	r2, r1
 8005ab4:	801a      	strh	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	001a      	movs	r2, r3
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	18d3      	adds	r3, r2, r3
 8005ac4:	183a      	adds	r2, r7, r0
 8005ac6:	8812      	ldrh	r2, [r2, #0]
 8005ac8:	4974      	ldr	r1, [pc, #464]	; (8005c9c <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8005aca:	430a      	orrs	r2, r1
 8005acc:	b292      	uxth	r2, r2
 8005ace:	801a      	strh	r2, [r3, #0]
 8005ad0:	e2b8      	b.n	8006044 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005ad2:	1dbb      	adds	r3, r7, #6
 8005ad4:	881a      	ldrh	r2, [r3, #0]
 8005ad6:	2380      	movs	r3, #128	; 0x80
 8005ad8:	01db      	lsls	r3, r3, #7
 8005ada:	4013      	ands	r3, r2
 8005adc:	d01a      	beq.n	8005b14 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	001a      	movs	r2, r3
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	18d3      	adds	r3, r2, r3
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	2044      	movs	r0, #68	; 0x44
 8005af2:	183b      	adds	r3, r7, r0
 8005af4:	4968      	ldr	r1, [pc, #416]	; (8005c98 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8005af6:	400a      	ands	r2, r1
 8005af8:	801a      	strh	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	001a      	movs	r2, r3
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	18d3      	adds	r3, r2, r3
 8005b08:	183a      	adds	r2, r7, r0
 8005b0a:	8812      	ldrh	r2, [r2, #0]
 8005b0c:	4963      	ldr	r1, [pc, #396]	; (8005c9c <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	b292      	uxth	r2, r2
 8005b12:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	2224      	movs	r2, #36	; 0x24
 8005b18:	5c9b      	ldrb	r3, [r3, r2]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d000      	beq.n	8005b20 <HAL_PCD_EP_DB_Transmit+0x22c>
 8005b1e:	e291      	b.n	8006044 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	695a      	ldr	r2, [r3, #20]
 8005b24:	214e      	movs	r1, #78	; 0x4e
 8005b26:	187b      	adds	r3, r7, r1
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	18d2      	adds	r2, r2, r3
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	69da      	ldr	r2, [r3, #28]
 8005b34:	187b      	adds	r3, r7, r1
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	18d2      	adds	r2, r2, r3
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	6a1a      	ldr	r2, [r3, #32]
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d309      	bcc.n	8005b5e <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	6a1a      	ldr	r2, [r3, #32]
 8005b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b56:	1ad2      	subs	r2, r2, r3
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	621a      	str	r2, [r3, #32]
 8005b5c:	e016      	b.n	8005b8c <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d108      	bne.n	8005b78 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8005b66:	234e      	movs	r3, #78	; 0x4e
 8005b68:	18fb      	adds	r3, r7, r3
 8005b6a:	881b      	ldrh	r3, [r3, #0]
 8005b6c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2224      	movs	r2, #36	; 0x24
 8005b72:	2100      	movs	r1, #0
 8005b74:	5499      	strb	r1, [r3, r2]
 8005b76:	e009      	b.n	8005b8c <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	2224      	movs	r2, #36	; 0x24
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	785b      	ldrb	r3, [r3, #1]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d150      	bne.n	8005c36 <HAL_PCD_EP_DB_Transmit+0x342>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2250      	movs	r2, #80	; 0x50
 8005ba0:	5a9b      	ldrh	r3, [r3, r2]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	001a      	movs	r2, r3
 8005ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba8:	189b      	adds	r3, r3, r2
 8005baa:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	00da      	lsls	r2, r3, #3
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb4:	18d3      	adds	r3, r2, r3
 8005bb6:	4a34      	ldr	r2, [pc, #208]	; (8005c88 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005bb8:	4694      	mov	ip, r2
 8005bba:	4463      	add	r3, ip
 8005bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8005bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d110      	bne.n	8005be6 <HAL_PCD_EP_DB_Transmit+0x2f2>
 8005bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	4a30      	ldr	r2, [pc, #192]	; (8005c8c <HAL_PCD_EP_DB_Transmit+0x398>)
 8005bcc:	4013      	ands	r3, r2
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd2:	801a      	strh	r2, [r3, #0]
 8005bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	4a2d      	ldr	r2, [pc, #180]	; (8005c90 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be2:	801a      	strh	r2, [r3, #0]
 8005be4:	e044      	b.n	8005c70 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be8:	2b3e      	cmp	r3, #62	; 0x3e
 8005bea:	d810      	bhi.n	8005c0e <HAL_PCD_EP_DB_Transmit+0x31a>
 8005bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bee:	085b      	lsrs	r3, r3, #1
 8005bf0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	d002      	beq.n	8005c00 <HAL_PCD_EP_DB_Transmit+0x30c>
 8005bfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	029b      	lsls	r3, r3, #10
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c0a:	801a      	strh	r2, [r3, #0]
 8005c0c:	e030      	b.n	8005c70 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c10:	095b      	lsrs	r3, r3, #5
 8005c12:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c16:	221f      	movs	r2, #31
 8005c18:	4013      	ands	r3, r2
 8005c1a:	d102      	bne.n	8005c22 <HAL_PCD_EP_DB_Transmit+0x32e>
 8005c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	029b      	lsls	r3, r3, #10
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	4a19      	ldr	r2, [pc, #100]	; (8005c90 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c32:	801a      	strh	r2, [r3, #0]
 8005c34:	e01c      	b.n	8005c70 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	785b      	ldrb	r3, [r3, #1]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d118      	bne.n	8005c70 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	643b      	str	r3, [r7, #64]	; 0x40
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2250      	movs	r2, #80	; 0x50
 8005c4a:	5a9b      	ldrh	r3, [r3, r2]
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	001a      	movs	r2, r3
 8005c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c52:	189b      	adds	r3, r3, r2
 8005c54:	643b      	str	r3, [r7, #64]	; 0x40
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	00da      	lsls	r2, r3, #3
 8005c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c5e:	18d3      	adds	r3, r2, r3
 8005c60:	4a09      	ldr	r2, [pc, #36]	; (8005c88 <HAL_PCD_EP_DB_Transmit+0x394>)
 8005c62:	4694      	mov	ip, r2
 8005c64:	4463      	add	r3, ip
 8005c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c6e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6818      	ldr	r0, [r3, #0]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	6959      	ldr	r1, [r3, #20]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	891a      	ldrh	r2, [r3, #8]
 8005c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	f005 f9be 	bl	800b000 <USB_WritePMA>
 8005c84:	e1de      	b.n	8006044 <HAL_PCD_EP_DB_Transmit+0x750>
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	00000402 	.word	0x00000402
 8005c8c:	ffff83ff 	.word	0xffff83ff
 8005c90:	ffff8000 	.word	0xffff8000
 8005c94:	00000406 	.word	0x00000406
 8005c98:	ffff8f8f 	.word	0xffff8f8f
 8005c9c:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2250      	movs	r2, #80	; 0x50
 8005ca6:	5a9b      	ldrh	r3, [r3, r2]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	001a      	movs	r2, r3
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	18d2      	adds	r2, r2, r3
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	18d3      	adds	r3, r2, r3
 8005cba:	4aca      	ldr	r2, [pc, #808]	; (8005fe4 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005cbc:	4694      	mov	ip, r2
 8005cbe:	4463      	add	r3, ip
 8005cc0:	881a      	ldrh	r2, [r3, #0]
 8005cc2:	214e      	movs	r1, #78	; 0x4e
 8005cc4:	187b      	adds	r3, r7, r1
 8005cc6:	0592      	lsls	r2, r2, #22
 8005cc8:	0d92      	lsrs	r2, r2, #22
 8005cca:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	699a      	ldr	r2, [r3, #24]
 8005cd0:	187b      	adds	r3, r7, r1
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d307      	bcc.n	8005ce8 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	699a      	ldr	r2, [r3, #24]
 8005cdc:	187b      	adds	r3, r7, r1
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	1ad2      	subs	r2, r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	619a      	str	r2, [r3, #24]
 8005ce6:	e002      	b.n	8005cee <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2200      	movs	r2, #0
 8005cec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d000      	beq.n	8005cf8 <HAL_PCD_EP_DB_Transmit+0x404>
 8005cf6:	e0c0      	b.n	8005e7a <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	785b      	ldrb	r3, [r3, #1]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d125      	bne.n	8005d4c <HAL_PCD_EP_DB_Transmit+0x458>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2250      	movs	r2, #80	; 0x50
 8005d0c:	5a9b      	ldrh	r3, [r3, r2]
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	001a      	movs	r2, r3
 8005d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d14:	189b      	adds	r3, r3, r2
 8005d16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	00da      	lsls	r2, r3, #3
 8005d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d20:	18d3      	adds	r3, r2, r3
 8005d22:	4ab1      	ldr	r2, [pc, #708]	; (8005fe8 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8005d24:	4694      	mov	ip, r2
 8005d26:	4463      	add	r3, ip
 8005d28:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	4aae      	ldr	r2, [pc, #696]	; (8005fec <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8005d32:	4013      	ands	r3, r2
 8005d34:	b29a      	uxth	r2, r3
 8005d36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d38:	801a      	strh	r2, [r3, #0]
 8005d3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	4aab      	ldr	r2, [pc, #684]	; (8005ff0 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d48:	801a      	strh	r2, [r3, #0]
 8005d4a:	e01b      	b.n	8005d84 <HAL_PCD_EP_DB_Transmit+0x490>
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	785b      	ldrb	r3, [r3, #1]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d117      	bne.n	8005d84 <HAL_PCD_EP_DB_Transmit+0x490>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	677b      	str	r3, [r7, #116]	; 0x74
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2250      	movs	r2, #80	; 0x50
 8005d60:	5a9b      	ldrh	r3, [r3, r2]
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	001a      	movs	r2, r3
 8005d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d68:	189b      	adds	r3, r3, r2
 8005d6a:	677b      	str	r3, [r7, #116]	; 0x74
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	00da      	lsls	r2, r3, #3
 8005d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d74:	18d3      	adds	r3, r2, r3
 8005d76:	4a9c      	ldr	r2, [pc, #624]	; (8005fe8 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8005d78:	4694      	mov	ip, r2
 8005d7a:	4463      	add	r3, ip
 8005d7c:	673b      	str	r3, [r7, #112]	; 0x70
 8005d7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d80:	2200      	movs	r2, #0
 8005d82:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	785b      	ldrb	r3, [r3, #1]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d130      	bne.n	8005df4 <HAL_PCD_EP_DB_Transmit+0x500>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2180      	movs	r1, #128	; 0x80
 8005d98:	187a      	adds	r2, r7, r1
 8005d9a:	6013      	str	r3, [r2, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2250      	movs	r2, #80	; 0x50
 8005da2:	5a9b      	ldrh	r3, [r3, r2]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	001a      	movs	r2, r3
 8005da8:	187b      	adds	r3, r7, r1
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	189b      	adds	r3, r3, r2
 8005dae:	187a      	adds	r2, r7, r1
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	00da      	lsls	r2, r3, #3
 8005db8:	187b      	adds	r3, r7, r1
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	18d3      	adds	r3, r2, r3
 8005dbe:	4a89      	ldr	r2, [pc, #548]	; (8005fe4 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005dc0:	4694      	mov	ip, r2
 8005dc2:	4463      	add	r3, ip
 8005dc4:	2184      	movs	r1, #132	; 0x84
 8005dc6:	187a      	adds	r2, r7, r1
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	187b      	adds	r3, r7, r1
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	4a86      	ldr	r2, [pc, #536]	; (8005fec <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	187b      	adds	r3, r7, r1
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	801a      	strh	r2, [r3, #0]
 8005dde:	187b      	adds	r3, r7, r1
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	4a82      	ldr	r2, [pc, #520]	; (8005ff0 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005de8:	4313      	orrs	r3, r2
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	187b      	adds	r3, r7, r1
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	801a      	strh	r2, [r3, #0]
 8005df2:	e018      	b.n	8005e26 <HAL_PCD_EP_DB_Transmit+0x532>
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	785b      	ldrb	r3, [r3, #1]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d114      	bne.n	8005e26 <HAL_PCD_EP_DB_Transmit+0x532>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2250      	movs	r2, #80	; 0x50
 8005e02:	5a9b      	ldrh	r3, [r3, r2]
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	001a      	movs	r2, r3
 8005e08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e0a:	189b      	adds	r3, r3, r2
 8005e0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	00da      	lsls	r2, r3, #3
 8005e14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e16:	18d3      	adds	r3, r2, r3
 8005e18:	4a72      	ldr	r2, [pc, #456]	; (8005fe4 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005e1a:	4694      	mov	ip, r2
 8005e1c:	4463      	add	r3, ip
 8005e1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e22:	2200      	movs	r2, #0
 8005e24:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	781a      	ldrb	r2, [r3, #0]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	0011      	movs	r1, r2
 8005e2e:	0018      	movs	r0, r3
 8005e30:	f007 f92e 	bl	800d090 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e34:	1dbb      	adds	r3, r7, #6
 8005e36:	881a      	ldrh	r2, [r3, #0]
 8005e38:	2380      	movs	r3, #128	; 0x80
 8005e3a:	01db      	lsls	r3, r3, #7
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	d000      	beq.n	8005e42 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005e40:	e100      	b.n	8006044 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	001a      	movs	r2, r3
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	18d3      	adds	r3, r2, r3
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	2046      	movs	r0, #70	; 0x46
 8005e56:	183b      	adds	r3, r7, r0
 8005e58:	4966      	ldr	r1, [pc, #408]	; (8005ff4 <HAL_PCD_EP_DB_Transmit+0x700>)
 8005e5a:	400a      	ands	r2, r1
 8005e5c:	801a      	strh	r2, [r3, #0]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	001a      	movs	r2, r3
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	18d3      	adds	r3, r2, r3
 8005e6c:	183a      	adds	r2, r7, r0
 8005e6e:	8812      	ldrh	r2, [r2, #0]
 8005e70:	4961      	ldr	r1, [pc, #388]	; (8005ff8 <HAL_PCD_EP_DB_Transmit+0x704>)
 8005e72:	430a      	orrs	r2, r1
 8005e74:	b292      	uxth	r2, r2
 8005e76:	801a      	strh	r2, [r3, #0]
 8005e78:	e0e4      	b.n	8006044 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e7a:	1dbb      	adds	r3, r7, #6
 8005e7c:	881a      	ldrh	r2, [r3, #0]
 8005e7e:	2380      	movs	r3, #128	; 0x80
 8005e80:	01db      	lsls	r3, r3, #7
 8005e82:	4013      	ands	r3, r2
 8005e84:	d11a      	bne.n	8005ebc <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	001a      	movs	r2, r3
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	18d3      	adds	r3, r2, r3
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	204c      	movs	r0, #76	; 0x4c
 8005e9a:	183b      	adds	r3, r7, r0
 8005e9c:	4955      	ldr	r1, [pc, #340]	; (8005ff4 <HAL_PCD_EP_DB_Transmit+0x700>)
 8005e9e:	400a      	ands	r2, r1
 8005ea0:	801a      	strh	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	001a      	movs	r2, r3
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	18d3      	adds	r3, r2, r3
 8005eb0:	183a      	adds	r2, r7, r0
 8005eb2:	8812      	ldrh	r2, [r2, #0]
 8005eb4:	4950      	ldr	r1, [pc, #320]	; (8005ff8 <HAL_PCD_EP_DB_Transmit+0x704>)
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	b292      	uxth	r2, r2
 8005eba:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	2224      	movs	r2, #36	; 0x24
 8005ec0:	5c9b      	ldrb	r3, [r3, r2]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d000      	beq.n	8005ec8 <HAL_PCD_EP_DB_Transmit+0x5d4>
 8005ec6:	e0bd      	b.n	8006044 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	695a      	ldr	r2, [r3, #20]
 8005ecc:	214e      	movs	r1, #78	; 0x4e
 8005ece:	187b      	adds	r3, r7, r1
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	18d2      	adds	r2, r2, r3
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	69da      	ldr	r2, [r3, #28]
 8005edc:	187b      	adds	r3, r7, r1
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	18d2      	adds	r2, r2, r3
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	6a1a      	ldr	r2, [r3, #32]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d309      	bcc.n	8005f06 <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	6a1a      	ldr	r2, [r3, #32]
 8005efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005efe:	1ad2      	subs	r2, r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	621a      	str	r2, [r3, #32]
 8005f04:	e016      	b.n	8005f34 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d108      	bne.n	8005f20 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8005f0e:	234e      	movs	r3, #78	; 0x4e
 8005f10:	18fb      	adds	r3, r7, r3
 8005f12:	881b      	ldrh	r3, [r3, #0]
 8005f14:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	2224      	movs	r2, #36	; 0x24
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	5499      	strb	r1, [r3, r2]
 8005f1e:	e009      	b.n	8005f34 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	2224      	movs	r2, #36	; 0x24
 8005f30:	2100      	movs	r1, #0
 8005f32:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	667b      	str	r3, [r7, #100]	; 0x64
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	785b      	ldrb	r3, [r3, #1]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d15c      	bne.n	8005ffc <HAL_PCD_EP_DB_Transmit+0x708>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2250      	movs	r2, #80	; 0x50
 8005f4e:	5a9b      	ldrh	r3, [r3, r2]
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	001a      	movs	r2, r3
 8005f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f56:	189b      	adds	r3, r3, r2
 8005f58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	00da      	lsls	r2, r3, #3
 8005f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f62:	18d3      	adds	r3, r2, r3
 8005f64:	4a1f      	ldr	r2, [pc, #124]	; (8005fe4 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005f66:	4694      	mov	ip, r2
 8005f68:	4463      	add	r3, ip
 8005f6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d110      	bne.n	8005f94 <HAL_PCD_EP_DB_Transmit+0x6a0>
 8005f72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	4a1c      	ldr	r2, [pc, #112]	; (8005fec <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f80:	801a      	strh	r2, [r3, #0]
 8005f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	4a19      	ldr	r2, [pc, #100]	; (8005ff0 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f90:	801a      	strh	r2, [r3, #0]
 8005f92:	e04d      	b.n	8006030 <HAL_PCD_EP_DB_Transmit+0x73c>
 8005f94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f96:	2b3e      	cmp	r3, #62	; 0x3e
 8005f98:	d810      	bhi.n	8005fbc <HAL_PCD_EP_DB_Transmit+0x6c8>
 8005f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f9c:	085b      	lsrs	r3, r3, #1
 8005f9e:	657b      	str	r3, [r7, #84]	; 0x54
 8005fa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	d002      	beq.n	8005fae <HAL_PCD_EP_DB_Transmit+0x6ba>
 8005fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005faa:	3301      	adds	r3, #1
 8005fac:	657b      	str	r3, [r7, #84]	; 0x54
 8005fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	029b      	lsls	r3, r3, #10
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fb8:	801a      	strh	r2, [r3, #0]
 8005fba:	e039      	b.n	8006030 <HAL_PCD_EP_DB_Transmit+0x73c>
 8005fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	657b      	str	r3, [r7, #84]	; 0x54
 8005fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fc4:	221f      	movs	r2, #31
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	d102      	bne.n	8005fd0 <HAL_PCD_EP_DB_Transmit+0x6dc>
 8005fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	657b      	str	r3, [r7, #84]	; 0x54
 8005fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	029b      	lsls	r3, r3, #10
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	4a05      	ldr	r2, [pc, #20]	; (8005ff0 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fe0:	801a      	strh	r2, [r3, #0]
 8005fe2:	e025      	b.n	8006030 <HAL_PCD_EP_DB_Transmit+0x73c>
 8005fe4:	00000406 	.word	0x00000406
 8005fe8:	00000402 	.word	0x00000402
 8005fec:	ffff83ff 	.word	0xffff83ff
 8005ff0:	ffff8000 	.word	0xffff8000
 8005ff4:	ffff8f8f 	.word	0xffff8f8f
 8005ff8:	ffffc080 	.word	0xffffc080
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	785b      	ldrb	r3, [r3, #1]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d115      	bne.n	8006030 <HAL_PCD_EP_DB_Transmit+0x73c>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2250      	movs	r2, #80	; 0x50
 800600a:	5a9b      	ldrh	r3, [r3, r2]
 800600c:	b29b      	uxth	r3, r3
 800600e:	001a      	movs	r2, r3
 8006010:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006012:	189b      	adds	r3, r3, r2
 8006014:	667b      	str	r3, [r7, #100]	; 0x64
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	00da      	lsls	r2, r3, #3
 800601c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800601e:	18d3      	adds	r3, r2, r3
 8006020:	4a1e      	ldr	r2, [pc, #120]	; (800609c <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8006022:	4694      	mov	ip, r2
 8006024:	4463      	add	r3, ip
 8006026:	663b      	str	r3, [r7, #96]	; 0x60
 8006028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800602a:	b29a      	uxth	r2, r3
 800602c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800602e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6818      	ldr	r0, [r3, #0]
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	6959      	ldr	r1, [r3, #20]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	895a      	ldrh	r2, [r3, #10]
 800603c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800603e:	b29b      	uxth	r3, r3
 8006040:	f004 ffde 	bl	800b000 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	001a      	movs	r2, r3
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	18d3      	adds	r3, r2, r3
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	b29a      	uxth	r2, r3
 8006056:	2010      	movs	r0, #16
 8006058:	183b      	adds	r3, r7, r0
 800605a:	4911      	ldr	r1, [pc, #68]	; (80060a0 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 800605c:	400a      	ands	r2, r1
 800605e:	801a      	strh	r2, [r3, #0]
 8006060:	183b      	adds	r3, r7, r0
 8006062:	183a      	adds	r2, r7, r0
 8006064:	8812      	ldrh	r2, [r2, #0]
 8006066:	2110      	movs	r1, #16
 8006068:	404a      	eors	r2, r1
 800606a:	801a      	strh	r2, [r3, #0]
 800606c:	183b      	adds	r3, r7, r0
 800606e:	183a      	adds	r2, r7, r0
 8006070:	8812      	ldrh	r2, [r2, #0]
 8006072:	2120      	movs	r1, #32
 8006074:	404a      	eors	r2, r1
 8006076:	801a      	strh	r2, [r3, #0]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	001a      	movs	r2, r3
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	18d3      	adds	r3, r2, r3
 8006086:	183a      	adds	r2, r7, r0
 8006088:	8812      	ldrh	r2, [r2, #0]
 800608a:	4906      	ldr	r1, [pc, #24]	; (80060a4 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 800608c:	430a      	orrs	r2, r1
 800608e:	b292      	uxth	r2, r2
 8006090:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	0018      	movs	r0, r3
 8006096:	46bd      	mov	sp, r7
 8006098:	b022      	add	sp, #136	; 0x88
 800609a:	bd80      	pop	{r7, pc}
 800609c:	00000406 	.word	0x00000406
 80060a0:	ffff8fbf 	.word	0xffff8fbf
 80060a4:	ffff8080 	.word	0xffff8080

080060a8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80060a8:	b590      	push	{r4, r7, lr}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	0008      	movs	r0, r1
 80060b2:	0011      	movs	r1, r2
 80060b4:	607b      	str	r3, [r7, #4]
 80060b6:	240a      	movs	r4, #10
 80060b8:	193b      	adds	r3, r7, r4
 80060ba:	1c02      	adds	r2, r0, #0
 80060bc:	801a      	strh	r2, [r3, #0]
 80060be:	2308      	movs	r3, #8
 80060c0:	18fb      	adds	r3, r7, r3
 80060c2:	1c0a      	adds	r2, r1, #0
 80060c4:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80060c6:	0021      	movs	r1, r4
 80060c8:	187b      	adds	r3, r7, r1
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	2280      	movs	r2, #128	; 0x80
 80060ce:	4013      	ands	r3, r2
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00c      	beq.n	80060f0 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060d6:	187b      	adds	r3, r7, r1
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	2207      	movs	r2, #7
 80060dc:	4013      	ands	r3, r2
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	0013      	movs	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	189b      	adds	r3, r3, r2
 80060e6:	00db      	lsls	r3, r3, #3
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	18d3      	adds	r3, r2, r3
 80060ec:	617b      	str	r3, [r7, #20]
 80060ee:	e00b      	b.n	8006108 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80060f0:	230a      	movs	r3, #10
 80060f2:	18fb      	adds	r3, r7, r3
 80060f4:	881a      	ldrh	r2, [r3, #0]
 80060f6:	0013      	movs	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	189b      	adds	r3, r3, r2
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	3369      	adds	r3, #105	; 0x69
 8006100:	33ff      	adds	r3, #255	; 0xff
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	18d3      	adds	r3, r2, r3
 8006106:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006108:	2308      	movs	r3, #8
 800610a:	18fb      	adds	r3, r7, r3
 800610c:	881b      	ldrh	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d107      	bne.n	8006122 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2200      	movs	r2, #0
 8006116:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	b29a      	uxth	r2, r3
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	80da      	strh	r2, [r3, #6]
 8006120:	e00b      	b.n	800613a <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	2201      	movs	r2, #1
 8006126:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	b29a      	uxth	r2, r3
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	0c1b      	lsrs	r3, r3, #16
 8006134:	b29a      	uxth	r2, r3
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	0018      	movs	r0, r3
 800613e:	46bd      	mov	sp, r7
 8006140:	b007      	add	sp, #28
 8006142:	bd90      	pop	{r4, r7, pc}

08006144 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	23ba      	movs	r3, #186	; 0xba
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	2101      	movs	r1, #1
 800615a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	23b8      	movs	r3, #184	; 0xb8
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	2100      	movs	r1, #0
 8006164:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2254      	movs	r2, #84	; 0x54
 800616a:	5a9b      	ldrh	r3, [r3, r2]
 800616c:	b29b      	uxth	r3, r3
 800616e:	2201      	movs	r2, #1
 8006170:	4313      	orrs	r3, r2
 8006172:	b299      	uxth	r1, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2254      	movs	r2, #84	; 0x54
 8006178:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2254      	movs	r2, #84	; 0x54
 800617e:	5a9b      	ldrh	r3, [r3, r2]
 8006180:	b29b      	uxth	r3, r3
 8006182:	2202      	movs	r2, #2
 8006184:	4313      	orrs	r3, r2
 8006186:	b299      	uxth	r1, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2254      	movs	r2, #84	; 0x54
 800618c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	0018      	movs	r0, r3
 8006192:	46bd      	mov	sp, r7
 8006194:	b004      	add	sp, #16
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	000a      	movs	r2, r1
 80061a2:	1cfb      	adds	r3, r7, #3
 80061a4:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80061a6:	46c0      	nop			; (mov r8, r8)
 80061a8:	46bd      	mov	sp, r7
 80061aa:	b002      	add	sp, #8
 80061ac:	bd80      	pop	{r7, pc}
	...

080061b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d102      	bne.n	80061c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	f000 fb76 	bl	80068b0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2201      	movs	r2, #1
 80061ca:	4013      	ands	r3, r2
 80061cc:	d100      	bne.n	80061d0 <HAL_RCC_OscConfig+0x20>
 80061ce:	e08e      	b.n	80062ee <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80061d0:	4bc5      	ldr	r3, [pc, #788]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	220c      	movs	r2, #12
 80061d6:	4013      	ands	r3, r2
 80061d8:	2b04      	cmp	r3, #4
 80061da:	d00e      	beq.n	80061fa <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80061dc:	4bc2      	ldr	r3, [pc, #776]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	220c      	movs	r2, #12
 80061e2:	4013      	ands	r3, r2
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	d117      	bne.n	8006218 <HAL_RCC_OscConfig+0x68>
 80061e8:	4bbf      	ldr	r3, [pc, #764]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	23c0      	movs	r3, #192	; 0xc0
 80061ee:	025b      	lsls	r3, r3, #9
 80061f0:	401a      	ands	r2, r3
 80061f2:	2380      	movs	r3, #128	; 0x80
 80061f4:	025b      	lsls	r3, r3, #9
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d10e      	bne.n	8006218 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061fa:	4bbb      	ldr	r3, [pc, #748]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	2380      	movs	r3, #128	; 0x80
 8006200:	029b      	lsls	r3, r3, #10
 8006202:	4013      	ands	r3, r2
 8006204:	d100      	bne.n	8006208 <HAL_RCC_OscConfig+0x58>
 8006206:	e071      	b.n	80062ec <HAL_RCC_OscConfig+0x13c>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d000      	beq.n	8006212 <HAL_RCC_OscConfig+0x62>
 8006210:	e06c      	b.n	80062ec <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	f000 fb4c 	bl	80068b0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d107      	bne.n	8006230 <HAL_RCC_OscConfig+0x80>
 8006220:	4bb1      	ldr	r3, [pc, #708]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	4bb0      	ldr	r3, [pc, #704]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 8006226:	2180      	movs	r1, #128	; 0x80
 8006228:	0249      	lsls	r1, r1, #9
 800622a:	430a      	orrs	r2, r1
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	e02f      	b.n	8006290 <HAL_RCC_OscConfig+0xe0>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d10c      	bne.n	8006252 <HAL_RCC_OscConfig+0xa2>
 8006238:	4bab      	ldr	r3, [pc, #684]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	4baa      	ldr	r3, [pc, #680]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 800623e:	49ab      	ldr	r1, [pc, #684]	; (80064ec <HAL_RCC_OscConfig+0x33c>)
 8006240:	400a      	ands	r2, r1
 8006242:	601a      	str	r2, [r3, #0]
 8006244:	4ba8      	ldr	r3, [pc, #672]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	4ba7      	ldr	r3, [pc, #668]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 800624a:	49a9      	ldr	r1, [pc, #676]	; (80064f0 <HAL_RCC_OscConfig+0x340>)
 800624c:	400a      	ands	r2, r1
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	e01e      	b.n	8006290 <HAL_RCC_OscConfig+0xe0>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	2b05      	cmp	r3, #5
 8006258:	d10e      	bne.n	8006278 <HAL_RCC_OscConfig+0xc8>
 800625a:	4ba3      	ldr	r3, [pc, #652]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	4ba2      	ldr	r3, [pc, #648]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 8006260:	2180      	movs	r1, #128	; 0x80
 8006262:	02c9      	lsls	r1, r1, #11
 8006264:	430a      	orrs	r2, r1
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	4b9f      	ldr	r3, [pc, #636]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	4b9e      	ldr	r3, [pc, #632]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 800626e:	2180      	movs	r1, #128	; 0x80
 8006270:	0249      	lsls	r1, r1, #9
 8006272:	430a      	orrs	r2, r1
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	e00b      	b.n	8006290 <HAL_RCC_OscConfig+0xe0>
 8006278:	4b9b      	ldr	r3, [pc, #620]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	4b9a      	ldr	r3, [pc, #616]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 800627e:	499b      	ldr	r1, [pc, #620]	; (80064ec <HAL_RCC_OscConfig+0x33c>)
 8006280:	400a      	ands	r2, r1
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	4b98      	ldr	r3, [pc, #608]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	4b97      	ldr	r3, [pc, #604]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 800628a:	4999      	ldr	r1, [pc, #612]	; (80064f0 <HAL_RCC_OscConfig+0x340>)
 800628c:	400a      	ands	r2, r1
 800628e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d014      	beq.n	80062c2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006298:	f7fd f884 	bl	80033a4 <HAL_GetTick>
 800629c:	0003      	movs	r3, r0
 800629e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062a0:	e008      	b.n	80062b4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062a2:	f7fd f87f 	bl	80033a4 <HAL_GetTick>
 80062a6:	0002      	movs	r2, r0
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b64      	cmp	r3, #100	; 0x64
 80062ae:	d901      	bls.n	80062b4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e2fd      	b.n	80068b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062b4:	4b8c      	ldr	r3, [pc, #560]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	2380      	movs	r3, #128	; 0x80
 80062ba:	029b      	lsls	r3, r3, #10
 80062bc:	4013      	ands	r3, r2
 80062be:	d0f0      	beq.n	80062a2 <HAL_RCC_OscConfig+0xf2>
 80062c0:	e015      	b.n	80062ee <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062c2:	f7fd f86f 	bl	80033a4 <HAL_GetTick>
 80062c6:	0003      	movs	r3, r0
 80062c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062ca:	e008      	b.n	80062de <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062cc:	f7fd f86a 	bl	80033a4 <HAL_GetTick>
 80062d0:	0002      	movs	r2, r0
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	2b64      	cmp	r3, #100	; 0x64
 80062d8:	d901      	bls.n	80062de <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e2e8      	b.n	80068b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062de:	4b82      	ldr	r3, [pc, #520]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	2380      	movs	r3, #128	; 0x80
 80062e4:	029b      	lsls	r3, r3, #10
 80062e6:	4013      	ands	r3, r2
 80062e8:	d1f0      	bne.n	80062cc <HAL_RCC_OscConfig+0x11c>
 80062ea:	e000      	b.n	80062ee <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2202      	movs	r2, #2
 80062f4:	4013      	ands	r3, r2
 80062f6:	d100      	bne.n	80062fa <HAL_RCC_OscConfig+0x14a>
 80062f8:	e06c      	b.n	80063d4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80062fa:	4b7b      	ldr	r3, [pc, #492]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	220c      	movs	r2, #12
 8006300:	4013      	ands	r3, r2
 8006302:	d00e      	beq.n	8006322 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006304:	4b78      	ldr	r3, [pc, #480]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	220c      	movs	r2, #12
 800630a:	4013      	ands	r3, r2
 800630c:	2b08      	cmp	r3, #8
 800630e:	d11f      	bne.n	8006350 <HAL_RCC_OscConfig+0x1a0>
 8006310:	4b75      	ldr	r3, [pc, #468]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	23c0      	movs	r3, #192	; 0xc0
 8006316:	025b      	lsls	r3, r3, #9
 8006318:	401a      	ands	r2, r3
 800631a:	2380      	movs	r3, #128	; 0x80
 800631c:	021b      	lsls	r3, r3, #8
 800631e:	429a      	cmp	r2, r3
 8006320:	d116      	bne.n	8006350 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006322:	4b71      	ldr	r3, [pc, #452]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2202      	movs	r2, #2
 8006328:	4013      	ands	r3, r2
 800632a:	d005      	beq.n	8006338 <HAL_RCC_OscConfig+0x188>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d001      	beq.n	8006338 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e2bb      	b.n	80068b0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006338:	4b6b      	ldr	r3, [pc, #428]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	22f8      	movs	r2, #248	; 0xf8
 800633e:	4393      	bics	r3, r2
 8006340:	0019      	movs	r1, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	00da      	lsls	r2, r3, #3
 8006348:	4b67      	ldr	r3, [pc, #412]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 800634a:	430a      	orrs	r2, r1
 800634c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800634e:	e041      	b.n	80063d4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d024      	beq.n	80063a2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006358:	4b63      	ldr	r3, [pc, #396]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	4b62      	ldr	r3, [pc, #392]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 800635e:	2101      	movs	r1, #1
 8006360:	430a      	orrs	r2, r1
 8006362:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006364:	f7fd f81e 	bl	80033a4 <HAL_GetTick>
 8006368:	0003      	movs	r3, r0
 800636a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800636c:	e008      	b.n	8006380 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800636e:	f7fd f819 	bl	80033a4 <HAL_GetTick>
 8006372:	0002      	movs	r2, r0
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	2b02      	cmp	r3, #2
 800637a:	d901      	bls.n	8006380 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e297      	b.n	80068b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006380:	4b59      	ldr	r3, [pc, #356]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2202      	movs	r2, #2
 8006386:	4013      	ands	r3, r2
 8006388:	d0f1      	beq.n	800636e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800638a:	4b57      	ldr	r3, [pc, #348]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	22f8      	movs	r2, #248	; 0xf8
 8006390:	4393      	bics	r3, r2
 8006392:	0019      	movs	r1, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	00da      	lsls	r2, r3, #3
 800639a:	4b53      	ldr	r3, [pc, #332]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 800639c:	430a      	orrs	r2, r1
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	e018      	b.n	80063d4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063a2:	4b51      	ldr	r3, [pc, #324]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	4b50      	ldr	r3, [pc, #320]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 80063a8:	2101      	movs	r1, #1
 80063aa:	438a      	bics	r2, r1
 80063ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ae:	f7fc fff9 	bl	80033a4 <HAL_GetTick>
 80063b2:	0003      	movs	r3, r0
 80063b4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063b6:	e008      	b.n	80063ca <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063b8:	f7fc fff4 	bl	80033a4 <HAL_GetTick>
 80063bc:	0002      	movs	r2, r0
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e272      	b.n	80068b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063ca:	4b47      	ldr	r3, [pc, #284]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2202      	movs	r2, #2
 80063d0:	4013      	ands	r3, r2
 80063d2:	d1f1      	bne.n	80063b8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2208      	movs	r2, #8
 80063da:	4013      	ands	r3, r2
 80063dc:	d036      	beq.n	800644c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d019      	beq.n	800641a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063e6:	4b40      	ldr	r3, [pc, #256]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 80063e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063ea:	4b3f      	ldr	r3, [pc, #252]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 80063ec:	2101      	movs	r1, #1
 80063ee:	430a      	orrs	r2, r1
 80063f0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063f2:	f7fc ffd7 	bl	80033a4 <HAL_GetTick>
 80063f6:	0003      	movs	r3, r0
 80063f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063fa:	e008      	b.n	800640e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063fc:	f7fc ffd2 	bl	80033a4 <HAL_GetTick>
 8006400:	0002      	movs	r2, r0
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	2b02      	cmp	r3, #2
 8006408:	d901      	bls.n	800640e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e250      	b.n	80068b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800640e:	4b36      	ldr	r3, [pc, #216]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 8006410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006412:	2202      	movs	r2, #2
 8006414:	4013      	ands	r3, r2
 8006416:	d0f1      	beq.n	80063fc <HAL_RCC_OscConfig+0x24c>
 8006418:	e018      	b.n	800644c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800641a:	4b33      	ldr	r3, [pc, #204]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 800641c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800641e:	4b32      	ldr	r3, [pc, #200]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 8006420:	2101      	movs	r1, #1
 8006422:	438a      	bics	r2, r1
 8006424:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006426:	f7fc ffbd 	bl	80033a4 <HAL_GetTick>
 800642a:	0003      	movs	r3, r0
 800642c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800642e:	e008      	b.n	8006442 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006430:	f7fc ffb8 	bl	80033a4 <HAL_GetTick>
 8006434:	0002      	movs	r2, r0
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	2b02      	cmp	r3, #2
 800643c:	d901      	bls.n	8006442 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e236      	b.n	80068b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006442:	4b29      	ldr	r3, [pc, #164]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 8006444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006446:	2202      	movs	r2, #2
 8006448:	4013      	ands	r3, r2
 800644a:	d1f1      	bne.n	8006430 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2204      	movs	r2, #4
 8006452:	4013      	ands	r3, r2
 8006454:	d100      	bne.n	8006458 <HAL_RCC_OscConfig+0x2a8>
 8006456:	e0b5      	b.n	80065c4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006458:	201f      	movs	r0, #31
 800645a:	183b      	adds	r3, r7, r0
 800645c:	2200      	movs	r2, #0
 800645e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006460:	4b21      	ldr	r3, [pc, #132]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 8006462:	69da      	ldr	r2, [r3, #28]
 8006464:	2380      	movs	r3, #128	; 0x80
 8006466:	055b      	lsls	r3, r3, #21
 8006468:	4013      	ands	r3, r2
 800646a:	d110      	bne.n	800648e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800646c:	4b1e      	ldr	r3, [pc, #120]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 800646e:	69da      	ldr	r2, [r3, #28]
 8006470:	4b1d      	ldr	r3, [pc, #116]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 8006472:	2180      	movs	r1, #128	; 0x80
 8006474:	0549      	lsls	r1, r1, #21
 8006476:	430a      	orrs	r2, r1
 8006478:	61da      	str	r2, [r3, #28]
 800647a:	4b1b      	ldr	r3, [pc, #108]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 800647c:	69da      	ldr	r2, [r3, #28]
 800647e:	2380      	movs	r3, #128	; 0x80
 8006480:	055b      	lsls	r3, r3, #21
 8006482:	4013      	ands	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]
 8006486:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006488:	183b      	adds	r3, r7, r0
 800648a:	2201      	movs	r2, #1
 800648c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800648e:	4b19      	ldr	r3, [pc, #100]	; (80064f4 <HAL_RCC_OscConfig+0x344>)
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	2380      	movs	r3, #128	; 0x80
 8006494:	005b      	lsls	r3, r3, #1
 8006496:	4013      	ands	r3, r2
 8006498:	d11a      	bne.n	80064d0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800649a:	4b16      	ldr	r3, [pc, #88]	; (80064f4 <HAL_RCC_OscConfig+0x344>)
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	4b15      	ldr	r3, [pc, #84]	; (80064f4 <HAL_RCC_OscConfig+0x344>)
 80064a0:	2180      	movs	r1, #128	; 0x80
 80064a2:	0049      	lsls	r1, r1, #1
 80064a4:	430a      	orrs	r2, r1
 80064a6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064a8:	f7fc ff7c 	bl	80033a4 <HAL_GetTick>
 80064ac:	0003      	movs	r3, r0
 80064ae:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b0:	e008      	b.n	80064c4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064b2:	f7fc ff77 	bl	80033a4 <HAL_GetTick>
 80064b6:	0002      	movs	r2, r0
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	2b64      	cmp	r3, #100	; 0x64
 80064be:	d901      	bls.n	80064c4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e1f5      	b.n	80068b0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064c4:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <HAL_RCC_OscConfig+0x344>)
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	2380      	movs	r3, #128	; 0x80
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	4013      	ands	r3, r2
 80064ce:	d0f0      	beq.n	80064b2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d10f      	bne.n	80064f8 <HAL_RCC_OscConfig+0x348>
 80064d8:	4b03      	ldr	r3, [pc, #12]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 80064da:	6a1a      	ldr	r2, [r3, #32]
 80064dc:	4b02      	ldr	r3, [pc, #8]	; (80064e8 <HAL_RCC_OscConfig+0x338>)
 80064de:	2101      	movs	r1, #1
 80064e0:	430a      	orrs	r2, r1
 80064e2:	621a      	str	r2, [r3, #32]
 80064e4:	e036      	b.n	8006554 <HAL_RCC_OscConfig+0x3a4>
 80064e6:	46c0      	nop			; (mov r8, r8)
 80064e8:	40021000 	.word	0x40021000
 80064ec:	fffeffff 	.word	0xfffeffff
 80064f0:	fffbffff 	.word	0xfffbffff
 80064f4:	40007000 	.word	0x40007000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10c      	bne.n	800651a <HAL_RCC_OscConfig+0x36a>
 8006500:	4bca      	ldr	r3, [pc, #808]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 8006502:	6a1a      	ldr	r2, [r3, #32]
 8006504:	4bc9      	ldr	r3, [pc, #804]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 8006506:	2101      	movs	r1, #1
 8006508:	438a      	bics	r2, r1
 800650a:	621a      	str	r2, [r3, #32]
 800650c:	4bc7      	ldr	r3, [pc, #796]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 800650e:	6a1a      	ldr	r2, [r3, #32]
 8006510:	4bc6      	ldr	r3, [pc, #792]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 8006512:	2104      	movs	r1, #4
 8006514:	438a      	bics	r2, r1
 8006516:	621a      	str	r2, [r3, #32]
 8006518:	e01c      	b.n	8006554 <HAL_RCC_OscConfig+0x3a4>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	2b05      	cmp	r3, #5
 8006520:	d10c      	bne.n	800653c <HAL_RCC_OscConfig+0x38c>
 8006522:	4bc2      	ldr	r3, [pc, #776]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 8006524:	6a1a      	ldr	r2, [r3, #32]
 8006526:	4bc1      	ldr	r3, [pc, #772]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 8006528:	2104      	movs	r1, #4
 800652a:	430a      	orrs	r2, r1
 800652c:	621a      	str	r2, [r3, #32]
 800652e:	4bbf      	ldr	r3, [pc, #764]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 8006530:	6a1a      	ldr	r2, [r3, #32]
 8006532:	4bbe      	ldr	r3, [pc, #760]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 8006534:	2101      	movs	r1, #1
 8006536:	430a      	orrs	r2, r1
 8006538:	621a      	str	r2, [r3, #32]
 800653a:	e00b      	b.n	8006554 <HAL_RCC_OscConfig+0x3a4>
 800653c:	4bbb      	ldr	r3, [pc, #748]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 800653e:	6a1a      	ldr	r2, [r3, #32]
 8006540:	4bba      	ldr	r3, [pc, #744]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 8006542:	2101      	movs	r1, #1
 8006544:	438a      	bics	r2, r1
 8006546:	621a      	str	r2, [r3, #32]
 8006548:	4bb8      	ldr	r3, [pc, #736]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 800654a:	6a1a      	ldr	r2, [r3, #32]
 800654c:	4bb7      	ldr	r3, [pc, #732]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 800654e:	2104      	movs	r1, #4
 8006550:	438a      	bics	r2, r1
 8006552:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d014      	beq.n	8006586 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800655c:	f7fc ff22 	bl	80033a4 <HAL_GetTick>
 8006560:	0003      	movs	r3, r0
 8006562:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006564:	e009      	b.n	800657a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006566:	f7fc ff1d 	bl	80033a4 <HAL_GetTick>
 800656a:	0002      	movs	r2, r0
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	4aaf      	ldr	r2, [pc, #700]	; (8006830 <HAL_RCC_OscConfig+0x680>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d901      	bls.n	800657a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e19a      	b.n	80068b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800657a:	4bac      	ldr	r3, [pc, #688]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	2202      	movs	r2, #2
 8006580:	4013      	ands	r3, r2
 8006582:	d0f0      	beq.n	8006566 <HAL_RCC_OscConfig+0x3b6>
 8006584:	e013      	b.n	80065ae <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006586:	f7fc ff0d 	bl	80033a4 <HAL_GetTick>
 800658a:	0003      	movs	r3, r0
 800658c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800658e:	e009      	b.n	80065a4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006590:	f7fc ff08 	bl	80033a4 <HAL_GetTick>
 8006594:	0002      	movs	r2, r0
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	4aa5      	ldr	r2, [pc, #660]	; (8006830 <HAL_RCC_OscConfig+0x680>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d901      	bls.n	80065a4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e185      	b.n	80068b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065a4:	4ba1      	ldr	r3, [pc, #644]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	2202      	movs	r2, #2
 80065aa:	4013      	ands	r3, r2
 80065ac:	d1f0      	bne.n	8006590 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80065ae:	231f      	movs	r3, #31
 80065b0:	18fb      	adds	r3, r7, r3
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d105      	bne.n	80065c4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065b8:	4b9c      	ldr	r3, [pc, #624]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 80065ba:	69da      	ldr	r2, [r3, #28]
 80065bc:	4b9b      	ldr	r3, [pc, #620]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 80065be:	499d      	ldr	r1, [pc, #628]	; (8006834 <HAL_RCC_OscConfig+0x684>)
 80065c0:	400a      	ands	r2, r1
 80065c2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2210      	movs	r2, #16
 80065ca:	4013      	ands	r3, r2
 80065cc:	d063      	beq.n	8006696 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d12a      	bne.n	800662c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80065d6:	4b95      	ldr	r3, [pc, #596]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 80065d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065da:	4b94      	ldr	r3, [pc, #592]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 80065dc:	2104      	movs	r1, #4
 80065de:	430a      	orrs	r2, r1
 80065e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80065e2:	4b92      	ldr	r3, [pc, #584]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 80065e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065e6:	4b91      	ldr	r3, [pc, #580]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 80065e8:	2101      	movs	r1, #1
 80065ea:	430a      	orrs	r2, r1
 80065ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065ee:	f7fc fed9 	bl	80033a4 <HAL_GetTick>
 80065f2:	0003      	movs	r3, r0
 80065f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80065f6:	e008      	b.n	800660a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80065f8:	f7fc fed4 	bl	80033a4 <HAL_GetTick>
 80065fc:	0002      	movs	r2, r0
 80065fe:	69bb      	ldr	r3, [r7, #24]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e152      	b.n	80068b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800660a:	4b88      	ldr	r3, [pc, #544]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 800660c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800660e:	2202      	movs	r2, #2
 8006610:	4013      	ands	r3, r2
 8006612:	d0f1      	beq.n	80065f8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006614:	4b85      	ldr	r3, [pc, #532]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 8006616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006618:	22f8      	movs	r2, #248	; 0xf8
 800661a:	4393      	bics	r3, r2
 800661c:	0019      	movs	r1, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	00da      	lsls	r2, r3, #3
 8006624:	4b81      	ldr	r3, [pc, #516]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 8006626:	430a      	orrs	r2, r1
 8006628:	635a      	str	r2, [r3, #52]	; 0x34
 800662a:	e034      	b.n	8006696 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	695b      	ldr	r3, [r3, #20]
 8006630:	3305      	adds	r3, #5
 8006632:	d111      	bne.n	8006658 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006634:	4b7d      	ldr	r3, [pc, #500]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 8006636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006638:	4b7c      	ldr	r3, [pc, #496]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 800663a:	2104      	movs	r1, #4
 800663c:	438a      	bics	r2, r1
 800663e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006640:	4b7a      	ldr	r3, [pc, #488]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 8006642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006644:	22f8      	movs	r2, #248	; 0xf8
 8006646:	4393      	bics	r3, r2
 8006648:	0019      	movs	r1, r3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	00da      	lsls	r2, r3, #3
 8006650:	4b76      	ldr	r3, [pc, #472]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 8006652:	430a      	orrs	r2, r1
 8006654:	635a      	str	r2, [r3, #52]	; 0x34
 8006656:	e01e      	b.n	8006696 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006658:	4b74      	ldr	r3, [pc, #464]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 800665a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800665c:	4b73      	ldr	r3, [pc, #460]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 800665e:	2104      	movs	r1, #4
 8006660:	430a      	orrs	r2, r1
 8006662:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006664:	4b71      	ldr	r3, [pc, #452]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 8006666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006668:	4b70      	ldr	r3, [pc, #448]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 800666a:	2101      	movs	r1, #1
 800666c:	438a      	bics	r2, r1
 800666e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006670:	f7fc fe98 	bl	80033a4 <HAL_GetTick>
 8006674:	0003      	movs	r3, r0
 8006676:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006678:	e008      	b.n	800668c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800667a:	f7fc fe93 	bl	80033a4 <HAL_GetTick>
 800667e:	0002      	movs	r2, r0
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	2b02      	cmp	r3, #2
 8006686:	d901      	bls.n	800668c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e111      	b.n	80068b0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800668c:	4b67      	ldr	r3, [pc, #412]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 800668e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006690:	2202      	movs	r2, #2
 8006692:	4013      	ands	r3, r2
 8006694:	d1f1      	bne.n	800667a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2220      	movs	r2, #32
 800669c:	4013      	ands	r3, r2
 800669e:	d05c      	beq.n	800675a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80066a0:	4b62      	ldr	r3, [pc, #392]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	220c      	movs	r2, #12
 80066a6:	4013      	ands	r3, r2
 80066a8:	2b0c      	cmp	r3, #12
 80066aa:	d00e      	beq.n	80066ca <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80066ac:	4b5f      	ldr	r3, [pc, #380]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	220c      	movs	r2, #12
 80066b2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80066b4:	2b08      	cmp	r3, #8
 80066b6:	d114      	bne.n	80066e2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80066b8:	4b5c      	ldr	r3, [pc, #368]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	23c0      	movs	r3, #192	; 0xc0
 80066be:	025b      	lsls	r3, r3, #9
 80066c0:	401a      	ands	r2, r3
 80066c2:	23c0      	movs	r3, #192	; 0xc0
 80066c4:	025b      	lsls	r3, r3, #9
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d10b      	bne.n	80066e2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80066ca:	4b58      	ldr	r3, [pc, #352]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 80066cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066ce:	2380      	movs	r3, #128	; 0x80
 80066d0:	025b      	lsls	r3, r3, #9
 80066d2:	4013      	ands	r3, r2
 80066d4:	d040      	beq.n	8006758 <HAL_RCC_OscConfig+0x5a8>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d03c      	beq.n	8006758 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e0e6      	b.n	80068b0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d01b      	beq.n	8006722 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80066ea:	4b50      	ldr	r3, [pc, #320]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 80066ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066ee:	4b4f      	ldr	r3, [pc, #316]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 80066f0:	2180      	movs	r1, #128	; 0x80
 80066f2:	0249      	lsls	r1, r1, #9
 80066f4:	430a      	orrs	r2, r1
 80066f6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066f8:	f7fc fe54 	bl	80033a4 <HAL_GetTick>
 80066fc:	0003      	movs	r3, r0
 80066fe:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006700:	e008      	b.n	8006714 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006702:	f7fc fe4f 	bl	80033a4 <HAL_GetTick>
 8006706:	0002      	movs	r2, r0
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b02      	cmp	r3, #2
 800670e:	d901      	bls.n	8006714 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e0cd      	b.n	80068b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006714:	4b45      	ldr	r3, [pc, #276]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 8006716:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006718:	2380      	movs	r3, #128	; 0x80
 800671a:	025b      	lsls	r3, r3, #9
 800671c:	4013      	ands	r3, r2
 800671e:	d0f0      	beq.n	8006702 <HAL_RCC_OscConfig+0x552>
 8006720:	e01b      	b.n	800675a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006722:	4b42      	ldr	r3, [pc, #264]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 8006724:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006726:	4b41      	ldr	r3, [pc, #260]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 8006728:	4943      	ldr	r1, [pc, #268]	; (8006838 <HAL_RCC_OscConfig+0x688>)
 800672a:	400a      	ands	r2, r1
 800672c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800672e:	f7fc fe39 	bl	80033a4 <HAL_GetTick>
 8006732:	0003      	movs	r3, r0
 8006734:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8006736:	e008      	b.n	800674a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006738:	f7fc fe34 	bl	80033a4 <HAL_GetTick>
 800673c:	0002      	movs	r2, r0
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b02      	cmp	r3, #2
 8006744:	d901      	bls.n	800674a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e0b2      	b.n	80068b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800674a:	4b38      	ldr	r3, [pc, #224]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 800674c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800674e:	2380      	movs	r3, #128	; 0x80
 8006750:	025b      	lsls	r3, r3, #9
 8006752:	4013      	ands	r3, r2
 8006754:	d1f0      	bne.n	8006738 <HAL_RCC_OscConfig+0x588>
 8006756:	e000      	b.n	800675a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8006758:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	2b00      	cmp	r3, #0
 8006760:	d100      	bne.n	8006764 <HAL_RCC_OscConfig+0x5b4>
 8006762:	e0a4      	b.n	80068ae <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006764:	4b31      	ldr	r3, [pc, #196]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	220c      	movs	r2, #12
 800676a:	4013      	ands	r3, r2
 800676c:	2b08      	cmp	r3, #8
 800676e:	d100      	bne.n	8006772 <HAL_RCC_OscConfig+0x5c2>
 8006770:	e078      	b.n	8006864 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006776:	2b02      	cmp	r3, #2
 8006778:	d14c      	bne.n	8006814 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800677a:	4b2c      	ldr	r3, [pc, #176]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	4b2b      	ldr	r3, [pc, #172]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 8006780:	492e      	ldr	r1, [pc, #184]	; (800683c <HAL_RCC_OscConfig+0x68c>)
 8006782:	400a      	ands	r2, r1
 8006784:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006786:	f7fc fe0d 	bl	80033a4 <HAL_GetTick>
 800678a:	0003      	movs	r3, r0
 800678c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800678e:	e008      	b.n	80067a2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006790:	f7fc fe08 	bl	80033a4 <HAL_GetTick>
 8006794:	0002      	movs	r2, r0
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	2b02      	cmp	r3, #2
 800679c:	d901      	bls.n	80067a2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e086      	b.n	80068b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067a2:	4b22      	ldr	r3, [pc, #136]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	2380      	movs	r3, #128	; 0x80
 80067a8:	049b      	lsls	r3, r3, #18
 80067aa:	4013      	ands	r3, r2
 80067ac:	d1f0      	bne.n	8006790 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80067ae:	4b1f      	ldr	r3, [pc, #124]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 80067b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b2:	220f      	movs	r2, #15
 80067b4:	4393      	bics	r3, r2
 80067b6:	0019      	movs	r1, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067bc:	4b1b      	ldr	r3, [pc, #108]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 80067be:	430a      	orrs	r2, r1
 80067c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80067c2:	4b1a      	ldr	r3, [pc, #104]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	4a1e      	ldr	r2, [pc, #120]	; (8006840 <HAL_RCC_OscConfig+0x690>)
 80067c8:	4013      	ands	r3, r2
 80067ca:	0019      	movs	r1, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d4:	431a      	orrs	r2, r3
 80067d6:	4b15      	ldr	r3, [pc, #84]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 80067d8:	430a      	orrs	r2, r1
 80067da:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067dc:	4b13      	ldr	r3, [pc, #76]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	4b12      	ldr	r3, [pc, #72]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 80067e2:	2180      	movs	r1, #128	; 0x80
 80067e4:	0449      	lsls	r1, r1, #17
 80067e6:	430a      	orrs	r2, r1
 80067e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ea:	f7fc fddb 	bl	80033a4 <HAL_GetTick>
 80067ee:	0003      	movs	r3, r0
 80067f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80067f2:	e008      	b.n	8006806 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067f4:	f7fc fdd6 	bl	80033a4 <HAL_GetTick>
 80067f8:	0002      	movs	r2, r0
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	1ad3      	subs	r3, r2, r3
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d901      	bls.n	8006806 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8006802:	2303      	movs	r3, #3
 8006804:	e054      	b.n	80068b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006806:	4b09      	ldr	r3, [pc, #36]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	2380      	movs	r3, #128	; 0x80
 800680c:	049b      	lsls	r3, r3, #18
 800680e:	4013      	ands	r3, r2
 8006810:	d0f0      	beq.n	80067f4 <HAL_RCC_OscConfig+0x644>
 8006812:	e04c      	b.n	80068ae <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006814:	4b05      	ldr	r3, [pc, #20]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	4b04      	ldr	r3, [pc, #16]	; (800682c <HAL_RCC_OscConfig+0x67c>)
 800681a:	4908      	ldr	r1, [pc, #32]	; (800683c <HAL_RCC_OscConfig+0x68c>)
 800681c:	400a      	ands	r2, r1
 800681e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006820:	f7fc fdc0 	bl	80033a4 <HAL_GetTick>
 8006824:	0003      	movs	r3, r0
 8006826:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006828:	e015      	b.n	8006856 <HAL_RCC_OscConfig+0x6a6>
 800682a:	46c0      	nop			; (mov r8, r8)
 800682c:	40021000 	.word	0x40021000
 8006830:	00001388 	.word	0x00001388
 8006834:	efffffff 	.word	0xefffffff
 8006838:	fffeffff 	.word	0xfffeffff
 800683c:	feffffff 	.word	0xfeffffff
 8006840:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006844:	f7fc fdae 	bl	80033a4 <HAL_GetTick>
 8006848:	0002      	movs	r2, r0
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b02      	cmp	r3, #2
 8006850:	d901      	bls.n	8006856 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e02c      	b.n	80068b0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006856:	4b18      	ldr	r3, [pc, #96]	; (80068b8 <HAL_RCC_OscConfig+0x708>)
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	2380      	movs	r3, #128	; 0x80
 800685c:	049b      	lsls	r3, r3, #18
 800685e:	4013      	ands	r3, r2
 8006860:	d1f0      	bne.n	8006844 <HAL_RCC_OscConfig+0x694>
 8006862:	e024      	b.n	80068ae <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	2b01      	cmp	r3, #1
 800686a:	d101      	bne.n	8006870 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e01f      	b.n	80068b0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006870:	4b11      	ldr	r3, [pc, #68]	; (80068b8 <HAL_RCC_OscConfig+0x708>)
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006876:	4b10      	ldr	r3, [pc, #64]	; (80068b8 <HAL_RCC_OscConfig+0x708>)
 8006878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	23c0      	movs	r3, #192	; 0xc0
 8006880:	025b      	lsls	r3, r3, #9
 8006882:	401a      	ands	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006888:	429a      	cmp	r2, r3
 800688a:	d10e      	bne.n	80068aa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	220f      	movs	r2, #15
 8006890:	401a      	ands	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006896:	429a      	cmp	r2, r3
 8006898:	d107      	bne.n	80068aa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	23f0      	movs	r3, #240	; 0xf0
 800689e:	039b      	lsls	r3, r3, #14
 80068a0:	401a      	ands	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d001      	beq.n	80068ae <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e000      	b.n	80068b0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	0018      	movs	r0, r3
 80068b2:	46bd      	mov	sp, r7
 80068b4:	b008      	add	sp, #32
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	40021000 	.word	0x40021000

080068bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d101      	bne.n	80068d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e0bf      	b.n	8006a50 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068d0:	4b61      	ldr	r3, [pc, #388]	; (8006a58 <HAL_RCC_ClockConfig+0x19c>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2201      	movs	r2, #1
 80068d6:	4013      	ands	r3, r2
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d911      	bls.n	8006902 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068de:	4b5e      	ldr	r3, [pc, #376]	; (8006a58 <HAL_RCC_ClockConfig+0x19c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2201      	movs	r2, #1
 80068e4:	4393      	bics	r3, r2
 80068e6:	0019      	movs	r1, r3
 80068e8:	4b5b      	ldr	r3, [pc, #364]	; (8006a58 <HAL_RCC_ClockConfig+0x19c>)
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	430a      	orrs	r2, r1
 80068ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068f0:	4b59      	ldr	r3, [pc, #356]	; (8006a58 <HAL_RCC_ClockConfig+0x19c>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2201      	movs	r2, #1
 80068f6:	4013      	ands	r3, r2
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d001      	beq.n	8006902 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e0a6      	b.n	8006a50 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2202      	movs	r2, #2
 8006908:	4013      	ands	r3, r2
 800690a:	d015      	beq.n	8006938 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2204      	movs	r2, #4
 8006912:	4013      	ands	r3, r2
 8006914:	d006      	beq.n	8006924 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006916:	4b51      	ldr	r3, [pc, #324]	; (8006a5c <HAL_RCC_ClockConfig+0x1a0>)
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	4b50      	ldr	r3, [pc, #320]	; (8006a5c <HAL_RCC_ClockConfig+0x1a0>)
 800691c:	21e0      	movs	r1, #224	; 0xe0
 800691e:	00c9      	lsls	r1, r1, #3
 8006920:	430a      	orrs	r2, r1
 8006922:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006924:	4b4d      	ldr	r3, [pc, #308]	; (8006a5c <HAL_RCC_ClockConfig+0x1a0>)
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	22f0      	movs	r2, #240	; 0xf0
 800692a:	4393      	bics	r3, r2
 800692c:	0019      	movs	r1, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	689a      	ldr	r2, [r3, #8]
 8006932:	4b4a      	ldr	r3, [pc, #296]	; (8006a5c <HAL_RCC_ClockConfig+0x1a0>)
 8006934:	430a      	orrs	r2, r1
 8006936:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2201      	movs	r2, #1
 800693e:	4013      	ands	r3, r2
 8006940:	d04c      	beq.n	80069dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d107      	bne.n	800695a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800694a:	4b44      	ldr	r3, [pc, #272]	; (8006a5c <HAL_RCC_ClockConfig+0x1a0>)
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	2380      	movs	r3, #128	; 0x80
 8006950:	029b      	lsls	r3, r3, #10
 8006952:	4013      	ands	r3, r2
 8006954:	d120      	bne.n	8006998 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e07a      	b.n	8006a50 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	2b02      	cmp	r3, #2
 8006960:	d107      	bne.n	8006972 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006962:	4b3e      	ldr	r3, [pc, #248]	; (8006a5c <HAL_RCC_ClockConfig+0x1a0>)
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	2380      	movs	r3, #128	; 0x80
 8006968:	049b      	lsls	r3, r3, #18
 800696a:	4013      	ands	r3, r2
 800696c:	d114      	bne.n	8006998 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e06e      	b.n	8006a50 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	2b03      	cmp	r3, #3
 8006978:	d107      	bne.n	800698a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800697a:	4b38      	ldr	r3, [pc, #224]	; (8006a5c <HAL_RCC_ClockConfig+0x1a0>)
 800697c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800697e:	2380      	movs	r3, #128	; 0x80
 8006980:	025b      	lsls	r3, r3, #9
 8006982:	4013      	ands	r3, r2
 8006984:	d108      	bne.n	8006998 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e062      	b.n	8006a50 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800698a:	4b34      	ldr	r3, [pc, #208]	; (8006a5c <HAL_RCC_ClockConfig+0x1a0>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2202      	movs	r2, #2
 8006990:	4013      	ands	r3, r2
 8006992:	d101      	bne.n	8006998 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e05b      	b.n	8006a50 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006998:	4b30      	ldr	r3, [pc, #192]	; (8006a5c <HAL_RCC_ClockConfig+0x1a0>)
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	2203      	movs	r2, #3
 800699e:	4393      	bics	r3, r2
 80069a0:	0019      	movs	r1, r3
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	4b2d      	ldr	r3, [pc, #180]	; (8006a5c <HAL_RCC_ClockConfig+0x1a0>)
 80069a8:	430a      	orrs	r2, r1
 80069aa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069ac:	f7fc fcfa 	bl	80033a4 <HAL_GetTick>
 80069b0:	0003      	movs	r3, r0
 80069b2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069b4:	e009      	b.n	80069ca <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069b6:	f7fc fcf5 	bl	80033a4 <HAL_GetTick>
 80069ba:	0002      	movs	r2, r0
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	4a27      	ldr	r2, [pc, #156]	; (8006a60 <HAL_RCC_ClockConfig+0x1a4>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d901      	bls.n	80069ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e042      	b.n	8006a50 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ca:	4b24      	ldr	r3, [pc, #144]	; (8006a5c <HAL_RCC_ClockConfig+0x1a0>)
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	220c      	movs	r2, #12
 80069d0:	401a      	ands	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	429a      	cmp	r2, r3
 80069da:	d1ec      	bne.n	80069b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069dc:	4b1e      	ldr	r3, [pc, #120]	; (8006a58 <HAL_RCC_ClockConfig+0x19c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2201      	movs	r2, #1
 80069e2:	4013      	ands	r3, r2
 80069e4:	683a      	ldr	r2, [r7, #0]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d211      	bcs.n	8006a0e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ea:	4b1b      	ldr	r3, [pc, #108]	; (8006a58 <HAL_RCC_ClockConfig+0x19c>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2201      	movs	r2, #1
 80069f0:	4393      	bics	r3, r2
 80069f2:	0019      	movs	r1, r3
 80069f4:	4b18      	ldr	r3, [pc, #96]	; (8006a58 <HAL_RCC_ClockConfig+0x19c>)
 80069f6:	683a      	ldr	r2, [r7, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069fc:	4b16      	ldr	r3, [pc, #88]	; (8006a58 <HAL_RCC_ClockConfig+0x19c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2201      	movs	r2, #1
 8006a02:	4013      	ands	r3, r2
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d001      	beq.n	8006a0e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e020      	b.n	8006a50 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2204      	movs	r2, #4
 8006a14:	4013      	ands	r3, r2
 8006a16:	d009      	beq.n	8006a2c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006a18:	4b10      	ldr	r3, [pc, #64]	; (8006a5c <HAL_RCC_ClockConfig+0x1a0>)
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	4a11      	ldr	r2, [pc, #68]	; (8006a64 <HAL_RCC_ClockConfig+0x1a8>)
 8006a1e:	4013      	ands	r3, r2
 8006a20:	0019      	movs	r1, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68da      	ldr	r2, [r3, #12]
 8006a26:	4b0d      	ldr	r3, [pc, #52]	; (8006a5c <HAL_RCC_ClockConfig+0x1a0>)
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006a2c:	f000 f820 	bl	8006a70 <HAL_RCC_GetSysClockFreq>
 8006a30:	0001      	movs	r1, r0
 8006a32:	4b0a      	ldr	r3, [pc, #40]	; (8006a5c <HAL_RCC_ClockConfig+0x1a0>)
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	091b      	lsrs	r3, r3, #4
 8006a38:	220f      	movs	r2, #15
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	4a0a      	ldr	r2, [pc, #40]	; (8006a68 <HAL_RCC_ClockConfig+0x1ac>)
 8006a3e:	5cd3      	ldrb	r3, [r2, r3]
 8006a40:	000a      	movs	r2, r1
 8006a42:	40da      	lsrs	r2, r3
 8006a44:	4b09      	ldr	r3, [pc, #36]	; (8006a6c <HAL_RCC_ClockConfig+0x1b0>)
 8006a46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006a48:	2003      	movs	r0, #3
 8006a4a:	f7fc fc65 	bl	8003318 <HAL_InitTick>
  
  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	0018      	movs	r0, r3
 8006a52:	46bd      	mov	sp, r7
 8006a54:	b004      	add	sp, #16
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	40022000 	.word	0x40022000
 8006a5c:	40021000 	.word	0x40021000
 8006a60:	00001388 	.word	0x00001388
 8006a64:	fffff8ff 	.word	0xfffff8ff
 8006a68:	0800e20c 	.word	0x0800e20c
 8006a6c:	20000000 	.word	0x20000000

08006a70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a70:	b590      	push	{r4, r7, lr}
 8006a72:	b08f      	sub	sp, #60	; 0x3c
 8006a74:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8006a76:	2314      	movs	r3, #20
 8006a78:	18fb      	adds	r3, r7, r3
 8006a7a:	4a38      	ldr	r2, [pc, #224]	; (8006b5c <HAL_RCC_GetSysClockFreq+0xec>)
 8006a7c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006a7e:	c313      	stmia	r3!, {r0, r1, r4}
 8006a80:	6812      	ldr	r2, [r2, #0]
 8006a82:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8006a84:	1d3b      	adds	r3, r7, #4
 8006a86:	4a36      	ldr	r2, [pc, #216]	; (8006b60 <HAL_RCC_GetSysClockFreq+0xf0>)
 8006a88:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006a8a:	c313      	stmia	r3!, {r0, r1, r4}
 8006a8c:	6812      	ldr	r2, [r2, #0]
 8006a8e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a90:	2300      	movs	r3, #0
 8006a92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a94:	2300      	movs	r3, #0
 8006a96:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a98:	2300      	movs	r3, #0
 8006a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8006aa4:	4b2f      	ldr	r3, [pc, #188]	; (8006b64 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aac:	220c      	movs	r2, #12
 8006aae:	4013      	ands	r3, r2
 8006ab0:	2b0c      	cmp	r3, #12
 8006ab2:	d047      	beq.n	8006b44 <HAL_RCC_GetSysClockFreq+0xd4>
 8006ab4:	d849      	bhi.n	8006b4a <HAL_RCC_GetSysClockFreq+0xda>
 8006ab6:	2b04      	cmp	r3, #4
 8006ab8:	d002      	beq.n	8006ac0 <HAL_RCC_GetSysClockFreq+0x50>
 8006aba:	2b08      	cmp	r3, #8
 8006abc:	d003      	beq.n	8006ac6 <HAL_RCC_GetSysClockFreq+0x56>
 8006abe:	e044      	b.n	8006b4a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ac0:	4b29      	ldr	r3, [pc, #164]	; (8006b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006ac2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006ac4:	e044      	b.n	8006b50 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac8:	0c9b      	lsrs	r3, r3, #18
 8006aca:	220f      	movs	r2, #15
 8006acc:	4013      	ands	r3, r2
 8006ace:	2214      	movs	r2, #20
 8006ad0:	18ba      	adds	r2, r7, r2
 8006ad2:	5cd3      	ldrb	r3, [r2, r3]
 8006ad4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006ad6:	4b23      	ldr	r3, [pc, #140]	; (8006b64 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ada:	220f      	movs	r2, #15
 8006adc:	4013      	ands	r3, r2
 8006ade:	1d3a      	adds	r2, r7, #4
 8006ae0:	5cd3      	ldrb	r3, [r2, r3]
 8006ae2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ae6:	23c0      	movs	r3, #192	; 0xc0
 8006ae8:	025b      	lsls	r3, r3, #9
 8006aea:	401a      	ands	r2, r3
 8006aec:	2380      	movs	r3, #128	; 0x80
 8006aee:	025b      	lsls	r3, r3, #9
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d109      	bne.n	8006b08 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006af6:	481c      	ldr	r0, [pc, #112]	; (8006b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8006af8:	f7f9 fb18 	bl	800012c <__udivsi3>
 8006afc:	0003      	movs	r3, r0
 8006afe:	001a      	movs	r2, r3
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	4353      	muls	r3, r2
 8006b04:	637b      	str	r3, [r7, #52]	; 0x34
 8006b06:	e01a      	b.n	8006b3e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8006b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b0a:	23c0      	movs	r3, #192	; 0xc0
 8006b0c:	025b      	lsls	r3, r3, #9
 8006b0e:	401a      	ands	r2, r3
 8006b10:	23c0      	movs	r3, #192	; 0xc0
 8006b12:	025b      	lsls	r3, r3, #9
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d109      	bne.n	8006b2c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b1a:	4814      	ldr	r0, [pc, #80]	; (8006b6c <HAL_RCC_GetSysClockFreq+0xfc>)
 8006b1c:	f7f9 fb06 	bl	800012c <__udivsi3>
 8006b20:	0003      	movs	r3, r0
 8006b22:	001a      	movs	r2, r3
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	4353      	muls	r3, r2
 8006b28:	637b      	str	r3, [r7, #52]	; 0x34
 8006b2a:	e008      	b.n	8006b3e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006b2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b2e:	4810      	ldr	r0, [pc, #64]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x100>)
 8006b30:	f7f9 fafc 	bl	800012c <__udivsi3>
 8006b34:	0003      	movs	r3, r0
 8006b36:	001a      	movs	r2, r3
 8006b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3a:	4353      	muls	r3, r2
 8006b3c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b40:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006b42:	e005      	b.n	8006b50 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8006b44:	4b09      	ldr	r3, [pc, #36]	; (8006b6c <HAL_RCC_GetSysClockFreq+0xfc>)
 8006b46:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006b48:	e002      	b.n	8006b50 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006b4a:	4b09      	ldr	r3, [pc, #36]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x100>)
 8006b4c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006b4e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006b52:	0018      	movs	r0, r3
 8006b54:	46bd      	mov	sp, r7
 8006b56:	b00f      	add	sp, #60	; 0x3c
 8006b58:	bd90      	pop	{r4, r7, pc}
 8006b5a:	46c0      	nop			; (mov r8, r8)
 8006b5c:	0800e0c8 	.word	0x0800e0c8
 8006b60:	0800e0d8 	.word	0x0800e0d8
 8006b64:	40021000 	.word	0x40021000
 8006b68:	00f42400 	.word	0x00f42400
 8006b6c:	02dc6c00 	.word	0x02dc6c00
 8006b70:	007a1200 	.word	0x007a1200

08006b74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b78:	4b02      	ldr	r3, [pc, #8]	; (8006b84 <HAL_RCC_GetHCLKFreq+0x10>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
}
 8006b7c:	0018      	movs	r0, r3
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	46c0      	nop			; (mov r8, r8)
 8006b84:	20000000 	.word	0x20000000

08006b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006b8c:	f7ff fff2 	bl	8006b74 <HAL_RCC_GetHCLKFreq>
 8006b90:	0001      	movs	r1, r0
 8006b92:	4b06      	ldr	r3, [pc, #24]	; (8006bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	0a1b      	lsrs	r3, r3, #8
 8006b98:	2207      	movs	r2, #7
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	4a04      	ldr	r2, [pc, #16]	; (8006bb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b9e:	5cd3      	ldrb	r3, [r2, r3]
 8006ba0:	40d9      	lsrs	r1, r3
 8006ba2:	000b      	movs	r3, r1
}    
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	46c0      	nop			; (mov r8, r8)
 8006bac:	40021000 	.word	0x40021000
 8006bb0:	0800e21c 	.word	0x0800e21c

08006bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	2380      	movs	r3, #128	; 0x80
 8006bca:	025b      	lsls	r3, r3, #9
 8006bcc:	4013      	ands	r3, r2
 8006bce:	d100      	bne.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006bd0:	e08e      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006bd2:	2017      	movs	r0, #23
 8006bd4:	183b      	adds	r3, r7, r0
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bda:	4b6e      	ldr	r3, [pc, #440]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006bdc:	69da      	ldr	r2, [r3, #28]
 8006bde:	2380      	movs	r3, #128	; 0x80
 8006be0:	055b      	lsls	r3, r3, #21
 8006be2:	4013      	ands	r3, r2
 8006be4:	d110      	bne.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006be6:	4b6b      	ldr	r3, [pc, #428]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006be8:	69da      	ldr	r2, [r3, #28]
 8006bea:	4b6a      	ldr	r3, [pc, #424]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006bec:	2180      	movs	r1, #128	; 0x80
 8006bee:	0549      	lsls	r1, r1, #21
 8006bf0:	430a      	orrs	r2, r1
 8006bf2:	61da      	str	r2, [r3, #28]
 8006bf4:	4b67      	ldr	r3, [pc, #412]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006bf6:	69da      	ldr	r2, [r3, #28]
 8006bf8:	2380      	movs	r3, #128	; 0x80
 8006bfa:	055b      	lsls	r3, r3, #21
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	60bb      	str	r3, [r7, #8]
 8006c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c02:	183b      	adds	r3, r7, r0
 8006c04:	2201      	movs	r2, #1
 8006c06:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c08:	4b63      	ldr	r3, [pc, #396]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	2380      	movs	r3, #128	; 0x80
 8006c0e:	005b      	lsls	r3, r3, #1
 8006c10:	4013      	ands	r3, r2
 8006c12:	d11a      	bne.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c14:	4b60      	ldr	r3, [pc, #384]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	4b5f      	ldr	r3, [pc, #380]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006c1a:	2180      	movs	r1, #128	; 0x80
 8006c1c:	0049      	lsls	r1, r1, #1
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c22:	f7fc fbbf 	bl	80033a4 <HAL_GetTick>
 8006c26:	0003      	movs	r3, r0
 8006c28:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c2a:	e008      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c2c:	f7fc fbba 	bl	80033a4 <HAL_GetTick>
 8006c30:	0002      	movs	r2, r0
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b64      	cmp	r3, #100	; 0x64
 8006c38:	d901      	bls.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e0a6      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c3e:	4b56      	ldr	r3, [pc, #344]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	2380      	movs	r3, #128	; 0x80
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	4013      	ands	r3, r2
 8006c48:	d0f0      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c4a:	4b52      	ldr	r3, [pc, #328]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c4c:	6a1a      	ldr	r2, [r3, #32]
 8006c4e:	23c0      	movs	r3, #192	; 0xc0
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4013      	ands	r3, r2
 8006c54:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d034      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	23c0      	movs	r3, #192	; 0xc0
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4013      	ands	r3, r2
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d02c      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c6c:	4b49      	ldr	r3, [pc, #292]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	4a4a      	ldr	r2, [pc, #296]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006c72:	4013      	ands	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c76:	4b47      	ldr	r3, [pc, #284]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c78:	6a1a      	ldr	r2, [r3, #32]
 8006c7a:	4b46      	ldr	r3, [pc, #280]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c7c:	2180      	movs	r1, #128	; 0x80
 8006c7e:	0249      	lsls	r1, r1, #9
 8006c80:	430a      	orrs	r2, r1
 8006c82:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c84:	4b43      	ldr	r3, [pc, #268]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c86:	6a1a      	ldr	r2, [r3, #32]
 8006c88:	4b42      	ldr	r3, [pc, #264]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c8a:	4945      	ldr	r1, [pc, #276]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006c8c:	400a      	ands	r2, r1
 8006c8e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006c90:	4b40      	ldr	r3, [pc, #256]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	d013      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c9e:	f7fc fb81 	bl	80033a4 <HAL_GetTick>
 8006ca2:	0003      	movs	r3, r0
 8006ca4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ca6:	e009      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ca8:	f7fc fb7c 	bl	80033a4 <HAL_GetTick>
 8006cac:	0002      	movs	r2, r0
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	4a3c      	ldr	r2, [pc, #240]	; (8006da4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d901      	bls.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e067      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cbc:	4b35      	ldr	r3, [pc, #212]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	4013      	ands	r3, r2
 8006cc4:	d0f0      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cc6:	4b33      	ldr	r3, [pc, #204]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	4a34      	ldr	r2, [pc, #208]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006ccc:	4013      	ands	r3, r2
 8006cce:	0019      	movs	r1, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	4b2f      	ldr	r3, [pc, #188]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006cda:	2317      	movs	r3, #23
 8006cdc:	18fb      	adds	r3, r7, r3
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d105      	bne.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ce4:	4b2b      	ldr	r3, [pc, #172]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ce6:	69da      	ldr	r2, [r3, #28]
 8006ce8:	4b2a      	ldr	r3, [pc, #168]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006cea:	492f      	ldr	r1, [pc, #188]	; (8006da8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006cec:	400a      	ands	r2, r1
 8006cee:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	d009      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006cfa:	4b26      	ldr	r3, [pc, #152]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfe:	2203      	movs	r2, #3
 8006d00:	4393      	bics	r3, r2
 8006d02:	0019      	movs	r1, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	689a      	ldr	r2, [r3, #8]
 8006d08:	4b22      	ldr	r3, [pc, #136]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2202      	movs	r2, #2
 8006d14:	4013      	ands	r3, r2
 8006d16:	d009      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d18:	4b1e      	ldr	r3, [pc, #120]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1c:	4a23      	ldr	r2, [pc, #140]	; (8006dac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d1e:	4013      	ands	r3, r2
 8006d20:	0019      	movs	r1, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	68da      	ldr	r2, [r3, #12]
 8006d26:	4b1b      	ldr	r3, [pc, #108]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d28:	430a      	orrs	r2, r1
 8006d2a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2220      	movs	r2, #32
 8006d32:	4013      	ands	r3, r2
 8006d34:	d009      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d36:	4b17      	ldr	r3, [pc, #92]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3a:	2210      	movs	r2, #16
 8006d3c:	4393      	bics	r3, r2
 8006d3e:	0019      	movs	r1, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	691a      	ldr	r2, [r3, #16]
 8006d44:	4b13      	ldr	r3, [pc, #76]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d46:	430a      	orrs	r2, r1
 8006d48:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	2380      	movs	r3, #128	; 0x80
 8006d50:	029b      	lsls	r3, r3, #10
 8006d52:	4013      	ands	r3, r2
 8006d54:	d009      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d56:	4b0f      	ldr	r3, [pc, #60]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5a:	2280      	movs	r2, #128	; 0x80
 8006d5c:	4393      	bics	r3, r2
 8006d5e:	0019      	movs	r1, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	699a      	ldr	r2, [r3, #24]
 8006d64:	4b0b      	ldr	r3, [pc, #44]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d66:	430a      	orrs	r2, r1
 8006d68:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	2380      	movs	r3, #128	; 0x80
 8006d70:	00db      	lsls	r3, r3, #3
 8006d72:	4013      	ands	r3, r2
 8006d74:	d009      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d76:	4b07      	ldr	r3, [pc, #28]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7a:	2240      	movs	r2, #64	; 0x40
 8006d7c:	4393      	bics	r3, r2
 8006d7e:	0019      	movs	r1, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	695a      	ldr	r2, [r3, #20]
 8006d84:	4b03      	ldr	r3, [pc, #12]	; (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006d86:	430a      	orrs	r2, r1
 8006d88:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	0018      	movs	r0, r3
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	b006      	add	sp, #24
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	40021000 	.word	0x40021000
 8006d98:	40007000 	.word	0x40007000
 8006d9c:	fffffcff 	.word	0xfffffcff
 8006da0:	fffeffff 	.word	0xfffeffff
 8006da4:	00001388 	.word	0x00001388
 8006da8:	efffffff 	.word	0xefffffff
 8006dac:	fffcffff 	.word	0xfffcffff

08006db0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e0a8      	b.n	8006f14 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d109      	bne.n	8006dde <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685a      	ldr	r2, [r3, #4]
 8006dce:	2382      	movs	r3, #130	; 0x82
 8006dd0:	005b      	lsls	r3, r3, #1
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d009      	beq.n	8006dea <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	61da      	str	r2, [r3, #28]
 8006ddc:	e005      	b.n	8006dea <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	225d      	movs	r2, #93	; 0x5d
 8006df4:	5c9b      	ldrb	r3, [r3, r2]
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d107      	bne.n	8006e0c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	225c      	movs	r2, #92	; 0x5c
 8006e00:	2100      	movs	r1, #0
 8006e02:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	0018      	movs	r0, r3
 8006e08:	f7fb fdce 	bl	80029a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	225d      	movs	r2, #93	; 0x5d
 8006e10:	2102      	movs	r1, #2
 8006e12:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2140      	movs	r1, #64	; 0x40
 8006e20:	438a      	bics	r2, r1
 8006e22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68da      	ldr	r2, [r3, #12]
 8006e28:	23e0      	movs	r3, #224	; 0xe0
 8006e2a:	00db      	lsls	r3, r3, #3
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d902      	bls.n	8006e36 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006e30:	2300      	movs	r3, #0
 8006e32:	60fb      	str	r3, [r7, #12]
 8006e34:	e002      	b.n	8006e3c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006e36:	2380      	movs	r3, #128	; 0x80
 8006e38:	015b      	lsls	r3, r3, #5
 8006e3a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68da      	ldr	r2, [r3, #12]
 8006e40:	23f0      	movs	r3, #240	; 0xf0
 8006e42:	011b      	lsls	r3, r3, #4
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d008      	beq.n	8006e5a <HAL_SPI_Init+0xaa>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68da      	ldr	r2, [r3, #12]
 8006e4c:	23e0      	movs	r3, #224	; 0xe0
 8006e4e:	00db      	lsls	r3, r3, #3
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d002      	beq.n	8006e5a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	2382      	movs	r3, #130	; 0x82
 8006e60:	005b      	lsls	r3, r3, #1
 8006e62:	401a      	ands	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6899      	ldr	r1, [r3, #8]
 8006e68:	2384      	movs	r3, #132	; 0x84
 8006e6a:	021b      	lsls	r3, r3, #8
 8006e6c:	400b      	ands	r3, r1
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	2102      	movs	r1, #2
 8006e76:	400b      	ands	r3, r1
 8006e78:	431a      	orrs	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	2101      	movs	r1, #1
 8006e80:	400b      	ands	r3, r1
 8006e82:	431a      	orrs	r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6999      	ldr	r1, [r3, #24]
 8006e88:	2380      	movs	r3, #128	; 0x80
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	400b      	ands	r3, r1
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	2138      	movs	r1, #56	; 0x38
 8006e96:	400b      	ands	r3, r1
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	2180      	movs	r1, #128	; 0x80
 8006ea0:	400b      	ands	r3, r1
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	0011      	movs	r1, r2
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006eaa:	2380      	movs	r3, #128	; 0x80
 8006eac:	019b      	lsls	r3, r3, #6
 8006eae:	401a      	ands	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	430a      	orrs	r2, r1
 8006eb6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	0c1b      	lsrs	r3, r3, #16
 8006ebe:	2204      	movs	r2, #4
 8006ec0:	401a      	ands	r2, r3
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec6:	2110      	movs	r1, #16
 8006ec8:	400b      	ands	r3, r1
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed0:	2108      	movs	r1, #8
 8006ed2:	400b      	ands	r3, r1
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68d9      	ldr	r1, [r3, #12]
 8006eda:	23f0      	movs	r3, #240	; 0xf0
 8006edc:	011b      	lsls	r3, r3, #4
 8006ede:	400b      	ands	r3, r1
 8006ee0:	431a      	orrs	r2, r3
 8006ee2:	0011      	movs	r1, r2
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	2380      	movs	r3, #128	; 0x80
 8006ee8:	015b      	lsls	r3, r3, #5
 8006eea:	401a      	ands	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	69da      	ldr	r2, [r3, #28]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4907      	ldr	r1, [pc, #28]	; (8006f1c <HAL_SPI_Init+0x16c>)
 8006f00:	400a      	ands	r2, r1
 8006f02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	225d      	movs	r2, #93	; 0x5d
 8006f0e:	2101      	movs	r1, #1
 8006f10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	0018      	movs	r0, r3
 8006f16:	46bd      	mov	sp, r7
 8006f18:	b004      	add	sp, #16
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	fffff7ff 	.word	0xfffff7ff

08006f20 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b088      	sub	sp, #32
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	603b      	str	r3, [r7, #0]
 8006f2c:	1dbb      	adds	r3, r7, #6
 8006f2e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f30:	231f      	movs	r3, #31
 8006f32:	18fb      	adds	r3, r7, r3
 8006f34:	2200      	movs	r2, #0
 8006f36:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	225c      	movs	r2, #92	; 0x5c
 8006f3c:	5c9b      	ldrb	r3, [r3, r2]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d101      	bne.n	8006f46 <HAL_SPI_Transmit+0x26>
 8006f42:	2302      	movs	r3, #2
 8006f44:	e140      	b.n	80071c8 <HAL_SPI_Transmit+0x2a8>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	225c      	movs	r2, #92	; 0x5c
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f4e:	f7fc fa29 	bl	80033a4 <HAL_GetTick>
 8006f52:	0003      	movs	r3, r0
 8006f54:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006f56:	2316      	movs	r3, #22
 8006f58:	18fb      	adds	r3, r7, r3
 8006f5a:	1dba      	adds	r2, r7, #6
 8006f5c:	8812      	ldrh	r2, [r2, #0]
 8006f5e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	225d      	movs	r2, #93	; 0x5d
 8006f64:	5c9b      	ldrb	r3, [r3, r2]
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d004      	beq.n	8006f76 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006f6c:	231f      	movs	r3, #31
 8006f6e:	18fb      	adds	r3, r7, r3
 8006f70:	2202      	movs	r2, #2
 8006f72:	701a      	strb	r2, [r3, #0]
    goto error;
 8006f74:	e11d      	b.n	80071b2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d003      	beq.n	8006f84 <HAL_SPI_Transmit+0x64>
 8006f7c:	1dbb      	adds	r3, r7, #6
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d104      	bne.n	8006f8e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006f84:	231f      	movs	r3, #31
 8006f86:	18fb      	adds	r3, r7, r3
 8006f88:	2201      	movs	r2, #1
 8006f8a:	701a      	strb	r2, [r3, #0]
    goto error;
 8006f8c:	e111      	b.n	80071b2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	225d      	movs	r2, #93	; 0x5d
 8006f92:	2103      	movs	r1, #3
 8006f94:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	68ba      	ldr	r2, [r7, #8]
 8006fa0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	1dba      	adds	r2, r7, #6
 8006fa6:	8812      	ldrh	r2, [r2, #0]
 8006fa8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	1dba      	adds	r2, r7, #6
 8006fae:	8812      	ldrh	r2, [r2, #0]
 8006fb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2244      	movs	r2, #68	; 0x44
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2246      	movs	r2, #70	; 0x46
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	689a      	ldr	r2, [r3, #8]
 8006fd8:	2380      	movs	r3, #128	; 0x80
 8006fda:	021b      	lsls	r3, r3, #8
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d110      	bne.n	8007002 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2140      	movs	r1, #64	; 0x40
 8006fec:	438a      	bics	r2, r1
 8006fee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2180      	movs	r1, #128	; 0x80
 8006ffc:	01c9      	lsls	r1, r1, #7
 8006ffe:	430a      	orrs	r2, r1
 8007000:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2240      	movs	r2, #64	; 0x40
 800700a:	4013      	ands	r3, r2
 800700c:	2b40      	cmp	r3, #64	; 0x40
 800700e:	d007      	beq.n	8007020 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2140      	movs	r1, #64	; 0x40
 800701c:	430a      	orrs	r2, r1
 800701e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	68da      	ldr	r2, [r3, #12]
 8007024:	23e0      	movs	r3, #224	; 0xe0
 8007026:	00db      	lsls	r3, r3, #3
 8007028:	429a      	cmp	r2, r3
 800702a:	d94e      	bls.n	80070ca <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d004      	beq.n	800703e <HAL_SPI_Transmit+0x11e>
 8007034:	2316      	movs	r3, #22
 8007036:	18fb      	adds	r3, r7, r3
 8007038:	881b      	ldrh	r3, [r3, #0]
 800703a:	2b01      	cmp	r3, #1
 800703c:	d13f      	bne.n	80070be <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007042:	881a      	ldrh	r2, [r3, #0]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704e:	1c9a      	adds	r2, r3, #2
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007058:	b29b      	uxth	r3, r3
 800705a:	3b01      	subs	r3, #1
 800705c:	b29a      	uxth	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007062:	e02c      	b.n	80070be <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	2202      	movs	r2, #2
 800706c:	4013      	ands	r3, r2
 800706e:	2b02      	cmp	r3, #2
 8007070:	d112      	bne.n	8007098 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007076:	881a      	ldrh	r2, [r3, #0]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007082:	1c9a      	adds	r2, r3, #2
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800708c:	b29b      	uxth	r3, r3
 800708e:	3b01      	subs	r3, #1
 8007090:	b29a      	uxth	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007096:	e012      	b.n	80070be <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007098:	f7fc f984 	bl	80033a4 <HAL_GetTick>
 800709c:	0002      	movs	r2, r0
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d802      	bhi.n	80070ae <HAL_SPI_Transmit+0x18e>
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	3301      	adds	r3, #1
 80070ac:	d102      	bne.n	80070b4 <HAL_SPI_Transmit+0x194>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d104      	bne.n	80070be <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80070b4:	231f      	movs	r3, #31
 80070b6:	18fb      	adds	r3, r7, r3
 80070b8:	2203      	movs	r2, #3
 80070ba:	701a      	strb	r2, [r3, #0]
          goto error;
 80070bc:	e079      	b.n	80071b2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1cd      	bne.n	8007064 <HAL_SPI_Transmit+0x144>
 80070c8:	e04f      	b.n	800716a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d004      	beq.n	80070dc <HAL_SPI_Transmit+0x1bc>
 80070d2:	2316      	movs	r3, #22
 80070d4:	18fb      	adds	r3, r7, r3
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d141      	bne.n	8007160 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	330c      	adds	r3, #12
 80070e6:	7812      	ldrb	r2, [r2, #0]
 80070e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	3b01      	subs	r3, #1
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8007102:	e02d      	b.n	8007160 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	2202      	movs	r2, #2
 800710c:	4013      	ands	r3, r2
 800710e:	2b02      	cmp	r3, #2
 8007110:	d113      	bne.n	800713a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	330c      	adds	r3, #12
 800711c:	7812      	ldrb	r2, [r2, #0]
 800711e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800712e:	b29b      	uxth	r3, r3
 8007130:	3b01      	subs	r3, #1
 8007132:	b29a      	uxth	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007138:	e012      	b.n	8007160 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800713a:	f7fc f933 	bl	80033a4 <HAL_GetTick>
 800713e:	0002      	movs	r2, r0
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	429a      	cmp	r2, r3
 8007148:	d802      	bhi.n	8007150 <HAL_SPI_Transmit+0x230>
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	3301      	adds	r3, #1
 800714e:	d102      	bne.n	8007156 <HAL_SPI_Transmit+0x236>
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d104      	bne.n	8007160 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8007156:	231f      	movs	r3, #31
 8007158:	18fb      	adds	r3, r7, r3
 800715a:	2203      	movs	r2, #3
 800715c:	701a      	strb	r2, [r3, #0]
          goto error;
 800715e:	e028      	b.n	80071b2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007164:	b29b      	uxth	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1cc      	bne.n	8007104 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	0018      	movs	r0, r3
 8007172:	f000 fb2f 	bl	80077d4 <SPI_EndRxTxTransaction>
 8007176:	1e03      	subs	r3, r0, #0
 8007178:	d002      	beq.n	8007180 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2220      	movs	r2, #32
 800717e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10a      	bne.n	800719e <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007188:	2300      	movs	r3, #0
 800718a:	613b      	str	r3, [r7, #16]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	613b      	str	r3, [r7, #16]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	613b      	str	r3, [r7, #16]
 800719c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d004      	beq.n	80071b0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80071a6:	231f      	movs	r3, #31
 80071a8:	18fb      	adds	r3, r7, r3
 80071aa:	2201      	movs	r2, #1
 80071ac:	701a      	strb	r2, [r3, #0]
 80071ae:	e000      	b.n	80071b2 <HAL_SPI_Transmit+0x292>
  }

error:
 80071b0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	225d      	movs	r2, #93	; 0x5d
 80071b6:	2101      	movs	r1, #1
 80071b8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	225c      	movs	r2, #92	; 0x5c
 80071be:	2100      	movs	r1, #0
 80071c0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80071c2:	231f      	movs	r3, #31
 80071c4:	18fb      	adds	r3, r7, r3
 80071c6:	781b      	ldrb	r3, [r3, #0]
}
 80071c8:	0018      	movs	r0, r3
 80071ca:	46bd      	mov	sp, r7
 80071cc:	b008      	add	sp, #32
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08a      	sub	sp, #40	; 0x28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
 80071dc:	001a      	movs	r2, r3
 80071de:	1cbb      	adds	r3, r7, #2
 80071e0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80071e2:	2301      	movs	r3, #1
 80071e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80071e6:	2323      	movs	r3, #35	; 0x23
 80071e8:	18fb      	adds	r3, r7, r3
 80071ea:	2200      	movs	r2, #0
 80071ec:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	225c      	movs	r2, #92	; 0x5c
 80071f2:	5c9b      	ldrb	r3, [r3, r2]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d101      	bne.n	80071fc <HAL_SPI_TransmitReceive+0x2c>
 80071f8:	2302      	movs	r3, #2
 80071fa:	e1b5      	b.n	8007568 <HAL_SPI_TransmitReceive+0x398>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	225c      	movs	r2, #92	; 0x5c
 8007200:	2101      	movs	r1, #1
 8007202:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007204:	f7fc f8ce 	bl	80033a4 <HAL_GetTick>
 8007208:	0003      	movs	r3, r0
 800720a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800720c:	201b      	movs	r0, #27
 800720e:	183b      	adds	r3, r7, r0
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	215d      	movs	r1, #93	; 0x5d
 8007214:	5c52      	ldrb	r2, [r2, r1]
 8007216:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800721e:	2312      	movs	r3, #18
 8007220:	18fb      	adds	r3, r7, r3
 8007222:	1cba      	adds	r2, r7, #2
 8007224:	8812      	ldrh	r2, [r2, #0]
 8007226:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007228:	183b      	adds	r3, r7, r0
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d011      	beq.n	8007254 <HAL_SPI_TransmitReceive+0x84>
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	2382      	movs	r3, #130	; 0x82
 8007234:	005b      	lsls	r3, r3, #1
 8007236:	429a      	cmp	r2, r3
 8007238:	d107      	bne.n	800724a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d103      	bne.n	800724a <HAL_SPI_TransmitReceive+0x7a>
 8007242:	183b      	adds	r3, r7, r0
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	2b04      	cmp	r3, #4
 8007248:	d004      	beq.n	8007254 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800724a:	2323      	movs	r3, #35	; 0x23
 800724c:	18fb      	adds	r3, r7, r3
 800724e:	2202      	movs	r2, #2
 8007250:	701a      	strb	r2, [r3, #0]
    goto error;
 8007252:	e17e      	b.n	8007552 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d006      	beq.n	8007268 <HAL_SPI_TransmitReceive+0x98>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d003      	beq.n	8007268 <HAL_SPI_TransmitReceive+0x98>
 8007260:	1cbb      	adds	r3, r7, #2
 8007262:	881b      	ldrh	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d104      	bne.n	8007272 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007268:	2323      	movs	r3, #35	; 0x23
 800726a:	18fb      	adds	r3, r7, r3
 800726c:	2201      	movs	r2, #1
 800726e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007270:	e16f      	b.n	8007552 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	225d      	movs	r2, #93	; 0x5d
 8007276:	5c9b      	ldrb	r3, [r3, r2]
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b04      	cmp	r3, #4
 800727c:	d003      	beq.n	8007286 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	225d      	movs	r2, #93	; 0x5d
 8007282:	2105      	movs	r1, #5
 8007284:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	1cba      	adds	r2, r7, #2
 8007296:	2146      	movs	r1, #70	; 0x46
 8007298:	8812      	ldrh	r2, [r2, #0]
 800729a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	1cba      	adds	r2, r7, #2
 80072a0:	2144      	movs	r1, #68	; 0x44
 80072a2:	8812      	ldrh	r2, [r2, #0]
 80072a4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	1cba      	adds	r2, r7, #2
 80072b0:	8812      	ldrh	r2, [r2, #0]
 80072b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	1cba      	adds	r2, r7, #2
 80072b8:	8812      	ldrh	r2, [r2, #0]
 80072ba:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	68da      	ldr	r2, [r3, #12]
 80072cc:	23e0      	movs	r3, #224	; 0xe0
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d908      	bls.n	80072e6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	685a      	ldr	r2, [r3, #4]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	49a4      	ldr	r1, [pc, #656]	; (8007570 <HAL_SPI_TransmitReceive+0x3a0>)
 80072e0:	400a      	ands	r2, r1
 80072e2:	605a      	str	r2, [r3, #4]
 80072e4:	e008      	b.n	80072f8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2180      	movs	r1, #128	; 0x80
 80072f2:	0149      	lsls	r1, r1, #5
 80072f4:	430a      	orrs	r2, r1
 80072f6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2240      	movs	r2, #64	; 0x40
 8007300:	4013      	ands	r3, r2
 8007302:	2b40      	cmp	r3, #64	; 0x40
 8007304:	d007      	beq.n	8007316 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2140      	movs	r1, #64	; 0x40
 8007312:	430a      	orrs	r2, r1
 8007314:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	68da      	ldr	r2, [r3, #12]
 800731a:	23e0      	movs	r3, #224	; 0xe0
 800731c:	00db      	lsls	r3, r3, #3
 800731e:	429a      	cmp	r2, r3
 8007320:	d800      	bhi.n	8007324 <HAL_SPI_TransmitReceive+0x154>
 8007322:	e07f      	b.n	8007424 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d005      	beq.n	8007338 <HAL_SPI_TransmitReceive+0x168>
 800732c:	2312      	movs	r3, #18
 800732e:	18fb      	adds	r3, r7, r3
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d000      	beq.n	8007338 <HAL_SPI_TransmitReceive+0x168>
 8007336:	e069      	b.n	800740c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733c:	881a      	ldrh	r2, [r3, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007348:	1c9a      	adds	r2, r3, #2
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007352:	b29b      	uxth	r3, r3
 8007354:	3b01      	subs	r3, #1
 8007356:	b29a      	uxth	r2, r3
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800735c:	e056      	b.n	800740c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	2202      	movs	r2, #2
 8007366:	4013      	ands	r3, r2
 8007368:	2b02      	cmp	r3, #2
 800736a:	d11b      	bne.n	80073a4 <HAL_SPI_TransmitReceive+0x1d4>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007370:	b29b      	uxth	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	d016      	beq.n	80073a4 <HAL_SPI_TransmitReceive+0x1d4>
 8007376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007378:	2b01      	cmp	r3, #1
 800737a:	d113      	bne.n	80073a4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007380:	881a      	ldrh	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738c:	1c9a      	adds	r2, r3, #2
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007396:	b29b      	uxth	r3, r3
 8007398:	3b01      	subs	r3, #1
 800739a:	b29a      	uxth	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	2201      	movs	r2, #1
 80073ac:	4013      	ands	r3, r2
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d11c      	bne.n	80073ec <HAL_SPI_TransmitReceive+0x21c>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2246      	movs	r2, #70	; 0x46
 80073b6:	5a9b      	ldrh	r3, [r3, r2]
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d016      	beq.n	80073ec <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68da      	ldr	r2, [r3, #12]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c8:	b292      	uxth	r2, r2
 80073ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d0:	1c9a      	adds	r2, r3, #2
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2246      	movs	r2, #70	; 0x46
 80073da:	5a9b      	ldrh	r3, [r3, r2]
 80073dc:	b29b      	uxth	r3, r3
 80073de:	3b01      	subs	r3, #1
 80073e0:	b299      	uxth	r1, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2246      	movs	r2, #70	; 0x46
 80073e6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073e8:	2301      	movs	r3, #1
 80073ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80073ec:	f7fb ffda 	bl	80033a4 <HAL_GetTick>
 80073f0:	0002      	movs	r2, r0
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d807      	bhi.n	800740c <HAL_SPI_TransmitReceive+0x23c>
 80073fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fe:	3301      	adds	r3, #1
 8007400:	d004      	beq.n	800740c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8007402:	2323      	movs	r3, #35	; 0x23
 8007404:	18fb      	adds	r3, r7, r3
 8007406:	2203      	movs	r2, #3
 8007408:	701a      	strb	r2, [r3, #0]
        goto error;
 800740a:	e0a2      	b.n	8007552 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007410:	b29b      	uxth	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1a3      	bne.n	800735e <HAL_SPI_TransmitReceive+0x18e>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2246      	movs	r2, #70	; 0x46
 800741a:	5a9b      	ldrh	r3, [r3, r2]
 800741c:	b29b      	uxth	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d19d      	bne.n	800735e <HAL_SPI_TransmitReceive+0x18e>
 8007422:	e085      	b.n	8007530 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d005      	beq.n	8007438 <HAL_SPI_TransmitReceive+0x268>
 800742c:	2312      	movs	r3, #18
 800742e:	18fb      	adds	r3, r7, r3
 8007430:	881b      	ldrh	r3, [r3, #0]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d000      	beq.n	8007438 <HAL_SPI_TransmitReceive+0x268>
 8007436:	e070      	b.n	800751a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	330c      	adds	r3, #12
 8007442:	7812      	ldrb	r2, [r2, #0]
 8007444:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744a:	1c5a      	adds	r2, r3, #1
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007454:	b29b      	uxth	r3, r3
 8007456:	3b01      	subs	r3, #1
 8007458:	b29a      	uxth	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800745e:	e05c      	b.n	800751a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	2202      	movs	r2, #2
 8007468:	4013      	ands	r3, r2
 800746a:	2b02      	cmp	r3, #2
 800746c:	d11c      	bne.n	80074a8 <HAL_SPI_TransmitReceive+0x2d8>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007472:	b29b      	uxth	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	d017      	beq.n	80074a8 <HAL_SPI_TransmitReceive+0x2d8>
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	2b01      	cmp	r3, #1
 800747c:	d114      	bne.n	80074a8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	330c      	adds	r3, #12
 8007488:	7812      	ldrb	r2, [r2, #0]
 800748a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800749a:	b29b      	uxth	r3, r3
 800749c:	3b01      	subs	r3, #1
 800749e:	b29a      	uxth	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	2201      	movs	r2, #1
 80074b0:	4013      	ands	r3, r2
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d11e      	bne.n	80074f4 <HAL_SPI_TransmitReceive+0x324>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2246      	movs	r2, #70	; 0x46
 80074ba:	5a9b      	ldrh	r3, [r3, r2]
 80074bc:	b29b      	uxth	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d018      	beq.n	80074f4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	330c      	adds	r3, #12
 80074c8:	001a      	movs	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	7812      	ldrb	r2, [r2, #0]
 80074d0:	b2d2      	uxtb	r2, r2
 80074d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d8:	1c5a      	adds	r2, r3, #1
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2246      	movs	r2, #70	; 0x46
 80074e2:	5a9b      	ldrh	r3, [r3, r2]
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	3b01      	subs	r3, #1
 80074e8:	b299      	uxth	r1, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2246      	movs	r2, #70	; 0x46
 80074ee:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074f0:	2301      	movs	r3, #1
 80074f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80074f4:	f7fb ff56 	bl	80033a4 <HAL_GetTick>
 80074f8:	0002      	movs	r2, r0
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007500:	429a      	cmp	r2, r3
 8007502:	d802      	bhi.n	800750a <HAL_SPI_TransmitReceive+0x33a>
 8007504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007506:	3301      	adds	r3, #1
 8007508:	d102      	bne.n	8007510 <HAL_SPI_TransmitReceive+0x340>
 800750a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750c:	2b00      	cmp	r3, #0
 800750e:	d104      	bne.n	800751a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8007510:	2323      	movs	r3, #35	; 0x23
 8007512:	18fb      	adds	r3, r7, r3
 8007514:	2203      	movs	r2, #3
 8007516:	701a      	strb	r2, [r3, #0]
        goto error;
 8007518:	e01b      	b.n	8007552 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800751e:	b29b      	uxth	r3, r3
 8007520:	2b00      	cmp	r3, #0
 8007522:	d19d      	bne.n	8007460 <HAL_SPI_TransmitReceive+0x290>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2246      	movs	r2, #70	; 0x46
 8007528:	5a9b      	ldrh	r3, [r3, r2]
 800752a:	b29b      	uxth	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	d197      	bne.n	8007460 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007530:	69fa      	ldr	r2, [r7, #28]
 8007532:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	0018      	movs	r0, r3
 8007538:	f000 f94c 	bl	80077d4 <SPI_EndRxTxTransaction>
 800753c:	1e03      	subs	r3, r0, #0
 800753e:	d007      	beq.n	8007550 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8007540:	2323      	movs	r3, #35	; 0x23
 8007542:	18fb      	adds	r3, r7, r3
 8007544:	2201      	movs	r2, #1
 8007546:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2220      	movs	r2, #32
 800754c:	661a      	str	r2, [r3, #96]	; 0x60
 800754e:	e000      	b.n	8007552 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8007550:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	225d      	movs	r2, #93	; 0x5d
 8007556:	2101      	movs	r1, #1
 8007558:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	225c      	movs	r2, #92	; 0x5c
 800755e:	2100      	movs	r1, #0
 8007560:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007562:	2323      	movs	r3, #35	; 0x23
 8007564:	18fb      	adds	r3, r7, r3
 8007566:	781b      	ldrb	r3, [r3, #0]
}
 8007568:	0018      	movs	r0, r3
 800756a:	46bd      	mov	sp, r7
 800756c:	b00a      	add	sp, #40	; 0x28
 800756e:	bd80      	pop	{r7, pc}
 8007570:	ffffefff 	.word	0xffffefff

08007574 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b088      	sub	sp, #32
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	603b      	str	r3, [r7, #0]
 8007580:	1dfb      	adds	r3, r7, #7
 8007582:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007584:	f7fb ff0e 	bl	80033a4 <HAL_GetTick>
 8007588:	0002      	movs	r2, r0
 800758a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758c:	1a9b      	subs	r3, r3, r2
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	18d3      	adds	r3, r2, r3
 8007592:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007594:	f7fb ff06 	bl	80033a4 <HAL_GetTick>
 8007598:	0003      	movs	r3, r0
 800759a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800759c:	4b3a      	ldr	r3, [pc, #232]	; (8007688 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	015b      	lsls	r3, r3, #5
 80075a2:	0d1b      	lsrs	r3, r3, #20
 80075a4:	69fa      	ldr	r2, [r7, #28]
 80075a6:	4353      	muls	r3, r2
 80075a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075aa:	e058      	b.n	800765e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	3301      	adds	r3, #1
 80075b0:	d055      	beq.n	800765e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80075b2:	f7fb fef7 	bl	80033a4 <HAL_GetTick>
 80075b6:	0002      	movs	r2, r0
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	69fa      	ldr	r2, [r7, #28]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d902      	bls.n	80075c8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d142      	bne.n	800764e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	21e0      	movs	r1, #224	; 0xe0
 80075d4:	438a      	bics	r2, r1
 80075d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	2382      	movs	r3, #130	; 0x82
 80075de:	005b      	lsls	r3, r3, #1
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d113      	bne.n	800760c <SPI_WaitFlagStateUntilTimeout+0x98>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	2380      	movs	r3, #128	; 0x80
 80075ea:	021b      	lsls	r3, r3, #8
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d005      	beq.n	80075fc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	689a      	ldr	r2, [r3, #8]
 80075f4:	2380      	movs	r3, #128	; 0x80
 80075f6:	00db      	lsls	r3, r3, #3
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d107      	bne.n	800760c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2140      	movs	r1, #64	; 0x40
 8007608:	438a      	bics	r2, r1
 800760a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007610:	2380      	movs	r3, #128	; 0x80
 8007612:	019b      	lsls	r3, r3, #6
 8007614:	429a      	cmp	r2, r3
 8007616:	d110      	bne.n	800763a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	491a      	ldr	r1, [pc, #104]	; (800768c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007624:	400a      	ands	r2, r1
 8007626:	601a      	str	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2180      	movs	r1, #128	; 0x80
 8007634:	0189      	lsls	r1, r1, #6
 8007636:	430a      	orrs	r2, r1
 8007638:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	225d      	movs	r2, #93	; 0x5d
 800763e:	2101      	movs	r1, #1
 8007640:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	225c      	movs	r2, #92	; 0x5c
 8007646:	2100      	movs	r1, #0
 8007648:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e017      	b.n	800767e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007654:	2300      	movs	r3, #0
 8007656:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	3b01      	subs	r3, #1
 800765c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	4013      	ands	r3, r2
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	425a      	negs	r2, r3
 800766e:	4153      	adcs	r3, r2
 8007670:	b2db      	uxtb	r3, r3
 8007672:	001a      	movs	r2, r3
 8007674:	1dfb      	adds	r3, r7, #7
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	429a      	cmp	r2, r3
 800767a:	d197      	bne.n	80075ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	0018      	movs	r0, r3
 8007680:	46bd      	mov	sp, r7
 8007682:	b008      	add	sp, #32
 8007684:	bd80      	pop	{r7, pc}
 8007686:	46c0      	nop			; (mov r8, r8)
 8007688:	20000000 	.word	0x20000000
 800768c:	ffffdfff 	.word	0xffffdfff

08007690 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b08a      	sub	sp, #40	; 0x28
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
 800769c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800769e:	2317      	movs	r3, #23
 80076a0:	18fb      	adds	r3, r7, r3
 80076a2:	2200      	movs	r2, #0
 80076a4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80076a6:	f7fb fe7d 	bl	80033a4 <HAL_GetTick>
 80076aa:	0002      	movs	r2, r0
 80076ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ae:	1a9b      	subs	r3, r3, r2
 80076b0:	683a      	ldr	r2, [r7, #0]
 80076b2:	18d3      	adds	r3, r2, r3
 80076b4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80076b6:	f7fb fe75 	bl	80033a4 <HAL_GetTick>
 80076ba:	0003      	movs	r3, r0
 80076bc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	330c      	adds	r3, #12
 80076c4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80076c6:	4b41      	ldr	r3, [pc, #260]	; (80077cc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	0013      	movs	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	189b      	adds	r3, r3, r2
 80076d0:	00da      	lsls	r2, r3, #3
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	0d1b      	lsrs	r3, r3, #20
 80076d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076d8:	4353      	muls	r3, r2
 80076da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80076dc:	e068      	b.n	80077b0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	23c0      	movs	r3, #192	; 0xc0
 80076e2:	00db      	lsls	r3, r3, #3
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d10a      	bne.n	80076fe <SPI_WaitFifoStateUntilTimeout+0x6e>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d107      	bne.n	80076fe <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	2117      	movs	r1, #23
 80076f6:	187b      	adds	r3, r7, r1
 80076f8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80076fa:	187b      	adds	r3, r7, r1
 80076fc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	3301      	adds	r3, #1
 8007702:	d055      	beq.n	80077b0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007704:	f7fb fe4e 	bl	80033a4 <HAL_GetTick>
 8007708:	0002      	movs	r2, r0
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007710:	429a      	cmp	r2, r3
 8007712:	d902      	bls.n	800771a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007716:	2b00      	cmp	r3, #0
 8007718:	d142      	bne.n	80077a0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	21e0      	movs	r1, #224	; 0xe0
 8007726:	438a      	bics	r2, r1
 8007728:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	2382      	movs	r3, #130	; 0x82
 8007730:	005b      	lsls	r3, r3, #1
 8007732:	429a      	cmp	r2, r3
 8007734:	d113      	bne.n	800775e <SPI_WaitFifoStateUntilTimeout+0xce>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	689a      	ldr	r2, [r3, #8]
 800773a:	2380      	movs	r3, #128	; 0x80
 800773c:	021b      	lsls	r3, r3, #8
 800773e:	429a      	cmp	r2, r3
 8007740:	d005      	beq.n	800774e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	689a      	ldr	r2, [r3, #8]
 8007746:	2380      	movs	r3, #128	; 0x80
 8007748:	00db      	lsls	r3, r3, #3
 800774a:	429a      	cmp	r2, r3
 800774c:	d107      	bne.n	800775e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2140      	movs	r1, #64	; 0x40
 800775a:	438a      	bics	r2, r1
 800775c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007762:	2380      	movs	r3, #128	; 0x80
 8007764:	019b      	lsls	r3, r3, #6
 8007766:	429a      	cmp	r2, r3
 8007768:	d110      	bne.n	800778c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4916      	ldr	r1, [pc, #88]	; (80077d0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007776:	400a      	ands	r2, r1
 8007778:	601a      	str	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2180      	movs	r1, #128	; 0x80
 8007786:	0189      	lsls	r1, r1, #6
 8007788:	430a      	orrs	r2, r1
 800778a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	225d      	movs	r2, #93	; 0x5d
 8007790:	2101      	movs	r1, #1
 8007792:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	225c      	movs	r2, #92	; 0x5c
 8007798:	2100      	movs	r1, #0
 800779a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e010      	b.n	80077c2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d101      	bne.n	80077aa <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	3b01      	subs	r3, #1
 80077ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	4013      	ands	r3, r2
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	429a      	cmp	r2, r3
 80077be:	d18e      	bne.n	80076de <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	0018      	movs	r0, r3
 80077c4:	46bd      	mov	sp, r7
 80077c6:	b00a      	add	sp, #40	; 0x28
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	46c0      	nop			; (mov r8, r8)
 80077cc:	20000000 	.word	0x20000000
 80077d0:	ffffdfff 	.word	0xffffdfff

080077d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af02      	add	r7, sp, #8
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	23c0      	movs	r3, #192	; 0xc0
 80077e4:	0159      	lsls	r1, r3, #5
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	0013      	movs	r3, r2
 80077ee:	2200      	movs	r2, #0
 80077f0:	f7ff ff4e 	bl	8007690 <SPI_WaitFifoStateUntilTimeout>
 80077f4:	1e03      	subs	r3, r0, #0
 80077f6:	d007      	beq.n	8007808 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077fc:	2220      	movs	r2, #32
 80077fe:	431a      	orrs	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007804:	2303      	movs	r3, #3
 8007806:	e027      	b.n	8007858 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	9300      	str	r3, [sp, #0]
 8007810:	0013      	movs	r3, r2
 8007812:	2200      	movs	r2, #0
 8007814:	2180      	movs	r1, #128	; 0x80
 8007816:	f7ff fead 	bl	8007574 <SPI_WaitFlagStateUntilTimeout>
 800781a:	1e03      	subs	r3, r0, #0
 800781c:	d007      	beq.n	800782e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007822:	2220      	movs	r2, #32
 8007824:	431a      	orrs	r2, r3
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e014      	b.n	8007858 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	23c0      	movs	r3, #192	; 0xc0
 8007832:	00d9      	lsls	r1, r3, #3
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	0013      	movs	r3, r2
 800783c:	2200      	movs	r2, #0
 800783e:	f7ff ff27 	bl	8007690 <SPI_WaitFifoStateUntilTimeout>
 8007842:	1e03      	subs	r3, r0, #0
 8007844:	d007      	beq.n	8007856 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800784a:	2220      	movs	r2, #32
 800784c:	431a      	orrs	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e000      	b.n	8007858 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	0018      	movs	r0, r3
 800785a:	46bd      	mov	sp, r7
 800785c:	b004      	add	sp, #16
 800785e:	bd80      	pop	{r7, pc}

08007860 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b082      	sub	sp, #8
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e042      	b.n	80078f8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	223d      	movs	r2, #61	; 0x3d
 8007876:	5c9b      	ldrb	r3, [r3, r2]
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d107      	bne.n	800788e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	223c      	movs	r2, #60	; 0x3c
 8007882:	2100      	movs	r1, #0
 8007884:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	0018      	movs	r0, r3
 800788a:	f7fb f8db 	bl	8002a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	223d      	movs	r2, #61	; 0x3d
 8007892:	2102      	movs	r1, #2
 8007894:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	3304      	adds	r3, #4
 800789e:	0019      	movs	r1, r3
 80078a0:	0010      	movs	r0, r2
 80078a2:	f000 fa65 	bl	8007d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2246      	movs	r2, #70	; 0x46
 80078aa:	2101      	movs	r1, #1
 80078ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	223e      	movs	r2, #62	; 0x3e
 80078b2:	2101      	movs	r1, #1
 80078b4:	5499      	strb	r1, [r3, r2]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	223f      	movs	r2, #63	; 0x3f
 80078ba:	2101      	movs	r1, #1
 80078bc:	5499      	strb	r1, [r3, r2]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2240      	movs	r2, #64	; 0x40
 80078c2:	2101      	movs	r1, #1
 80078c4:	5499      	strb	r1, [r3, r2]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2241      	movs	r2, #65	; 0x41
 80078ca:	2101      	movs	r1, #1
 80078cc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2242      	movs	r2, #66	; 0x42
 80078d2:	2101      	movs	r1, #1
 80078d4:	5499      	strb	r1, [r3, r2]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2243      	movs	r2, #67	; 0x43
 80078da:	2101      	movs	r1, #1
 80078dc:	5499      	strb	r1, [r3, r2]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2244      	movs	r2, #68	; 0x44
 80078e2:	2101      	movs	r1, #1
 80078e4:	5499      	strb	r1, [r3, r2]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2245      	movs	r2, #69	; 0x45
 80078ea:	2101      	movs	r1, #1
 80078ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	223d      	movs	r2, #61	; 0x3d
 80078f2:	2101      	movs	r1, #1
 80078f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	0018      	movs	r0, r3
 80078fa:	46bd      	mov	sp, r7
 80078fc:	b002      	add	sp, #8
 80078fe:	bd80      	pop	{r7, pc}

08007900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	223d      	movs	r2, #61	; 0x3d
 800790c:	5c9b      	ldrb	r3, [r3, r2]
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b01      	cmp	r3, #1
 8007912:	d001      	beq.n	8007918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e03b      	b.n	8007990 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	223d      	movs	r2, #61	; 0x3d
 800791c:	2102      	movs	r1, #2
 800791e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68da      	ldr	r2, [r3, #12]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2101      	movs	r1, #1
 800792c:	430a      	orrs	r2, r1
 800792e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a18      	ldr	r2, [pc, #96]	; (8007998 <HAL_TIM_Base_Start_IT+0x98>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d00f      	beq.n	800795a <HAL_TIM_Base_Start_IT+0x5a>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	2380      	movs	r3, #128	; 0x80
 8007940:	05db      	lsls	r3, r3, #23
 8007942:	429a      	cmp	r2, r3
 8007944:	d009      	beq.n	800795a <HAL_TIM_Base_Start_IT+0x5a>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a14      	ldr	r2, [pc, #80]	; (800799c <HAL_TIM_Base_Start_IT+0x9c>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d004      	beq.n	800795a <HAL_TIM_Base_Start_IT+0x5a>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a12      	ldr	r2, [pc, #72]	; (80079a0 <HAL_TIM_Base_Start_IT+0xa0>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d111      	bne.n	800797e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	2207      	movs	r2, #7
 8007962:	4013      	ands	r3, r2
 8007964:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b06      	cmp	r3, #6
 800796a:	d010      	beq.n	800798e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2101      	movs	r1, #1
 8007978:	430a      	orrs	r2, r1
 800797a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800797c:	e007      	b.n	800798e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2101      	movs	r1, #1
 800798a:	430a      	orrs	r2, r1
 800798c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	0018      	movs	r0, r3
 8007992:	46bd      	mov	sp, r7
 8007994:	b004      	add	sp, #16
 8007996:	bd80      	pop	{r7, pc}
 8007998:	40012c00 	.word	0x40012c00
 800799c:	40000400 	.word	0x40000400
 80079a0:	40014000 	.word	0x40014000

080079a4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e042      	b.n	8007a3c <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	223d      	movs	r2, #61	; 0x3d
 80079ba:	5c9b      	ldrb	r3, [r3, r2]
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d107      	bne.n	80079d2 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	223c      	movs	r2, #60	; 0x3c
 80079c6:	2100      	movs	r1, #0
 80079c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	0018      	movs	r0, r3
 80079ce:	f000 f839 	bl	8007a44 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	223d      	movs	r2, #61	; 0x3d
 80079d6:	2102      	movs	r1, #2
 80079d8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	3304      	adds	r3, #4
 80079e2:	0019      	movs	r1, r3
 80079e4:	0010      	movs	r0, r2
 80079e6:	f000 f9c3 	bl	8007d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2246      	movs	r2, #70	; 0x46
 80079ee:	2101      	movs	r1, #1
 80079f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	223e      	movs	r2, #62	; 0x3e
 80079f6:	2101      	movs	r1, #1
 80079f8:	5499      	strb	r1, [r3, r2]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	223f      	movs	r2, #63	; 0x3f
 80079fe:	2101      	movs	r1, #1
 8007a00:	5499      	strb	r1, [r3, r2]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2240      	movs	r2, #64	; 0x40
 8007a06:	2101      	movs	r1, #1
 8007a08:	5499      	strb	r1, [r3, r2]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2241      	movs	r2, #65	; 0x41
 8007a0e:	2101      	movs	r1, #1
 8007a10:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2242      	movs	r2, #66	; 0x42
 8007a16:	2101      	movs	r1, #1
 8007a18:	5499      	strb	r1, [r3, r2]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2243      	movs	r2, #67	; 0x43
 8007a1e:	2101      	movs	r1, #1
 8007a20:	5499      	strb	r1, [r3, r2]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2244      	movs	r2, #68	; 0x44
 8007a26:	2101      	movs	r1, #1
 8007a28:	5499      	strb	r1, [r3, r2]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2245      	movs	r2, #69	; 0x45
 8007a2e:	2101      	movs	r1, #1
 8007a30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	223d      	movs	r2, #61	; 0x3d
 8007a36:	2101      	movs	r1, #1
 8007a38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	0018      	movs	r0, r3
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	b002      	add	sp, #8
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007a4c:	46c0      	nop			; (mov r8, r8)
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	b002      	add	sp, #8
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	2202      	movs	r2, #2
 8007a64:	4013      	ands	r3, r2
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d124      	bne.n	8007ab4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	2202      	movs	r2, #2
 8007a72:	4013      	ands	r3, r2
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d11d      	bne.n	8007ab4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2203      	movs	r2, #3
 8007a7e:	4252      	negs	r2, r2
 8007a80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	2203      	movs	r2, #3
 8007a90:	4013      	ands	r3, r2
 8007a92:	d004      	beq.n	8007a9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	0018      	movs	r0, r3
 8007a98:	f000 f952 	bl	8007d40 <HAL_TIM_IC_CaptureCallback>
 8007a9c:	e007      	b.n	8007aae <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	0018      	movs	r0, r3
 8007aa2:	f000 f945 	bl	8007d30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	f000 f951 	bl	8007d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	2204      	movs	r2, #4
 8007abc:	4013      	ands	r3, r2
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	d125      	bne.n	8007b0e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	2204      	movs	r2, #4
 8007aca:	4013      	ands	r3, r2
 8007acc:	2b04      	cmp	r3, #4
 8007ace:	d11e      	bne.n	8007b0e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2205      	movs	r2, #5
 8007ad6:	4252      	negs	r2, r2
 8007ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2202      	movs	r2, #2
 8007ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	699a      	ldr	r2, [r3, #24]
 8007ae6:	23c0      	movs	r3, #192	; 0xc0
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4013      	ands	r3, r2
 8007aec:	d004      	beq.n	8007af8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	0018      	movs	r0, r3
 8007af2:	f000 f925 	bl	8007d40 <HAL_TIM_IC_CaptureCallback>
 8007af6:	e007      	b.n	8007b08 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	0018      	movs	r0, r3
 8007afc:	f000 f918 	bl	8007d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	0018      	movs	r0, r3
 8007b04:	f000 f924 	bl	8007d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	2208      	movs	r2, #8
 8007b16:	4013      	ands	r3, r2
 8007b18:	2b08      	cmp	r3, #8
 8007b1a:	d124      	bne.n	8007b66 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	2208      	movs	r2, #8
 8007b24:	4013      	ands	r3, r2
 8007b26:	2b08      	cmp	r3, #8
 8007b28:	d11d      	bne.n	8007b66 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2209      	movs	r2, #9
 8007b30:	4252      	negs	r2, r2
 8007b32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2204      	movs	r2, #4
 8007b38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	69db      	ldr	r3, [r3, #28]
 8007b40:	2203      	movs	r2, #3
 8007b42:	4013      	ands	r3, r2
 8007b44:	d004      	beq.n	8007b50 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	0018      	movs	r0, r3
 8007b4a:	f000 f8f9 	bl	8007d40 <HAL_TIM_IC_CaptureCallback>
 8007b4e:	e007      	b.n	8007b60 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	0018      	movs	r0, r3
 8007b54:	f000 f8ec 	bl	8007d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	0018      	movs	r0, r3
 8007b5c:	f000 f8f8 	bl	8007d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	2210      	movs	r2, #16
 8007b6e:	4013      	ands	r3, r2
 8007b70:	2b10      	cmp	r3, #16
 8007b72:	d125      	bne.n	8007bc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	2210      	movs	r2, #16
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	2b10      	cmp	r3, #16
 8007b80:	d11e      	bne.n	8007bc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2211      	movs	r2, #17
 8007b88:	4252      	negs	r2, r2
 8007b8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2208      	movs	r2, #8
 8007b90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	69da      	ldr	r2, [r3, #28]
 8007b98:	23c0      	movs	r3, #192	; 0xc0
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	d004      	beq.n	8007baa <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	0018      	movs	r0, r3
 8007ba4:	f000 f8cc 	bl	8007d40 <HAL_TIM_IC_CaptureCallback>
 8007ba8:	e007      	b.n	8007bba <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	0018      	movs	r0, r3
 8007bae:	f000 f8bf 	bl	8007d30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	0018      	movs	r0, r3
 8007bb6:	f000 f8cb 	bl	8007d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	691b      	ldr	r3, [r3, #16]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	4013      	ands	r3, r2
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d10f      	bne.n	8007bee <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d108      	bne.n	8007bee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2202      	movs	r2, #2
 8007be2:	4252      	negs	r2, r2
 8007be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	0018      	movs	r0, r3
 8007bea:	f7f9 fae5 	bl	80011b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	2280      	movs	r2, #128	; 0x80
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	2b80      	cmp	r3, #128	; 0x80
 8007bfa:	d10f      	bne.n	8007c1c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	2280      	movs	r2, #128	; 0x80
 8007c04:	4013      	ands	r3, r2
 8007c06:	2b80      	cmp	r3, #128	; 0x80
 8007c08:	d108      	bne.n	8007c1c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2281      	movs	r2, #129	; 0x81
 8007c10:	4252      	negs	r2, r2
 8007c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	0018      	movs	r0, r3
 8007c18:	f000 fb2e 	bl	8008278 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	2240      	movs	r2, #64	; 0x40
 8007c24:	4013      	ands	r3, r2
 8007c26:	2b40      	cmp	r3, #64	; 0x40
 8007c28:	d10f      	bne.n	8007c4a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	2240      	movs	r2, #64	; 0x40
 8007c32:	4013      	ands	r3, r2
 8007c34:	2b40      	cmp	r3, #64	; 0x40
 8007c36:	d108      	bne.n	8007c4a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2241      	movs	r2, #65	; 0x41
 8007c3e:	4252      	negs	r2, r2
 8007c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	0018      	movs	r0, r3
 8007c46:	f000 f88b 	bl	8007d60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	691b      	ldr	r3, [r3, #16]
 8007c50:	2220      	movs	r2, #32
 8007c52:	4013      	ands	r3, r2
 8007c54:	2b20      	cmp	r3, #32
 8007c56:	d10f      	bne.n	8007c78 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	2220      	movs	r2, #32
 8007c60:	4013      	ands	r3, r2
 8007c62:	2b20      	cmp	r3, #32
 8007c64:	d108      	bne.n	8007c78 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2221      	movs	r2, #33	; 0x21
 8007c6c:	4252      	negs	r2, r2
 8007c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	0018      	movs	r0, r3
 8007c74:	f000 faf8 	bl	8008268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c78:	46c0      	nop			; (mov r8, r8)
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	b002      	add	sp, #8
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b086      	sub	sp, #24
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c8c:	2317      	movs	r3, #23
 8007c8e:	18fb      	adds	r3, r7, r3
 8007c90:	2200      	movs	r2, #0
 8007c92:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	223c      	movs	r2, #60	; 0x3c
 8007c98:	5c9b      	ldrb	r3, [r3, r2]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d101      	bne.n	8007ca2 <HAL_TIM_OC_ConfigChannel+0x22>
 8007c9e:	2302      	movs	r3, #2
 8007ca0:	e042      	b.n	8007d28 <HAL_TIM_OC_ConfigChannel+0xa8>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	223c      	movs	r2, #60	; 0x3c
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b0c      	cmp	r3, #12
 8007cae:	d027      	beq.n	8007d00 <HAL_TIM_OC_ConfigChannel+0x80>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b0c      	cmp	r3, #12
 8007cb4:	d82c      	bhi.n	8007d10 <HAL_TIM_OC_ConfigChannel+0x90>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2b08      	cmp	r3, #8
 8007cba:	d019      	beq.n	8007cf0 <HAL_TIM_OC_ConfigChannel+0x70>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b08      	cmp	r3, #8
 8007cc0:	d826      	bhi.n	8007d10 <HAL_TIM_OC_ConfigChannel+0x90>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d003      	beq.n	8007cd0 <HAL_TIM_OC_ConfigChannel+0x50>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b04      	cmp	r3, #4
 8007ccc:	d008      	beq.n	8007ce0 <HAL_TIM_OC_ConfigChannel+0x60>
 8007cce:	e01f      	b.n	8007d10 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	0011      	movs	r1, r2
 8007cd8:	0018      	movs	r0, r3
 8007cda:	f000 f8c9 	bl	8007e70 <TIM_OC1_SetConfig>
      break;
 8007cde:	e01c      	b.n	8007d1a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	0011      	movs	r1, r2
 8007ce8:	0018      	movs	r0, r3
 8007cea:	f000 f949 	bl	8007f80 <TIM_OC2_SetConfig>
      break;
 8007cee:	e014      	b.n	8007d1a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	0011      	movs	r1, r2
 8007cf8:	0018      	movs	r0, r3
 8007cfa:	f000 f9c5 	bl	8008088 <TIM_OC3_SetConfig>
      break;
 8007cfe:	e00c      	b.n	8007d1a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	0011      	movs	r1, r2
 8007d08:	0018      	movs	r0, r3
 8007d0a:	f000 fa43 	bl	8008194 <TIM_OC4_SetConfig>
      break;
 8007d0e:	e004      	b.n	8007d1a <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8007d10:	2317      	movs	r3, #23
 8007d12:	18fb      	adds	r3, r7, r3
 8007d14:	2201      	movs	r2, #1
 8007d16:	701a      	strb	r2, [r3, #0]
      break;
 8007d18:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	223c      	movs	r2, #60	; 0x3c
 8007d1e:	2100      	movs	r1, #0
 8007d20:	5499      	strb	r1, [r3, r2]

  return status;
 8007d22:	2317      	movs	r3, #23
 8007d24:	18fb      	adds	r3, r7, r3
 8007d26:	781b      	ldrb	r3, [r3, #0]
}
 8007d28:	0018      	movs	r0, r3
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	b006      	add	sp, #24
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d38:	46c0      	nop			; (mov r8, r8)
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	b002      	add	sp, #8
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d48:	46c0      	nop			; (mov r8, r8)
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	b002      	add	sp, #8
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d58:	46c0      	nop			; (mov r8, r8)
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	b002      	add	sp, #8
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d68:	46c0      	nop			; (mov r8, r8)
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	b002      	add	sp, #8
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a34      	ldr	r2, [pc, #208]	; (8007e54 <TIM_Base_SetConfig+0xe4>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d008      	beq.n	8007d9a <TIM_Base_SetConfig+0x2a>
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	2380      	movs	r3, #128	; 0x80
 8007d8c:	05db      	lsls	r3, r3, #23
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d003      	beq.n	8007d9a <TIM_Base_SetConfig+0x2a>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a30      	ldr	r2, [pc, #192]	; (8007e58 <TIM_Base_SetConfig+0xe8>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d108      	bne.n	8007dac <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2270      	movs	r2, #112	; 0x70
 8007d9e:	4393      	bics	r3, r2
 8007da0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a29      	ldr	r2, [pc, #164]	; (8007e54 <TIM_Base_SetConfig+0xe4>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d018      	beq.n	8007de6 <TIM_Base_SetConfig+0x76>
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	2380      	movs	r3, #128	; 0x80
 8007db8:	05db      	lsls	r3, r3, #23
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d013      	beq.n	8007de6 <TIM_Base_SetConfig+0x76>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a25      	ldr	r2, [pc, #148]	; (8007e58 <TIM_Base_SetConfig+0xe8>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d00f      	beq.n	8007de6 <TIM_Base_SetConfig+0x76>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a24      	ldr	r2, [pc, #144]	; (8007e5c <TIM_Base_SetConfig+0xec>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d00b      	beq.n	8007de6 <TIM_Base_SetConfig+0x76>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a23      	ldr	r2, [pc, #140]	; (8007e60 <TIM_Base_SetConfig+0xf0>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d007      	beq.n	8007de6 <TIM_Base_SetConfig+0x76>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a22      	ldr	r2, [pc, #136]	; (8007e64 <TIM_Base_SetConfig+0xf4>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d003      	beq.n	8007de6 <TIM_Base_SetConfig+0x76>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a21      	ldr	r2, [pc, #132]	; (8007e68 <TIM_Base_SetConfig+0xf8>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d108      	bne.n	8007df8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	4a20      	ldr	r2, [pc, #128]	; (8007e6c <TIM_Base_SetConfig+0xfc>)
 8007dea:	4013      	ands	r3, r2
 8007dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	68fa      	ldr	r2, [r7, #12]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2280      	movs	r2, #128	; 0x80
 8007dfc:	4393      	bics	r3, r2
 8007dfe:	001a      	movs	r2, r3
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	689a      	ldr	r2, [r3, #8]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a0c      	ldr	r2, [pc, #48]	; (8007e54 <TIM_Base_SetConfig+0xe4>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d00b      	beq.n	8007e3e <TIM_Base_SetConfig+0xce>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a0d      	ldr	r2, [pc, #52]	; (8007e60 <TIM_Base_SetConfig+0xf0>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d007      	beq.n	8007e3e <TIM_Base_SetConfig+0xce>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a0c      	ldr	r2, [pc, #48]	; (8007e64 <TIM_Base_SetConfig+0xf4>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d003      	beq.n	8007e3e <TIM_Base_SetConfig+0xce>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a0b      	ldr	r2, [pc, #44]	; (8007e68 <TIM_Base_SetConfig+0xf8>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d103      	bne.n	8007e46 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	691a      	ldr	r2, [r3, #16]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	615a      	str	r2, [r3, #20]
}
 8007e4c:	46c0      	nop			; (mov r8, r8)
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	b004      	add	sp, #16
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	40012c00 	.word	0x40012c00
 8007e58:	40000400 	.word	0x40000400
 8007e5c:	40002000 	.word	0x40002000
 8007e60:	40014000 	.word	0x40014000
 8007e64:	40014400 	.word	0x40014400
 8007e68:	40014800 	.word	0x40014800
 8007e6c:	fffffcff 	.word	0xfffffcff

08007e70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	4393      	bics	r3, r2
 8007e82:	001a      	movs	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
 8007e8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	699b      	ldr	r3, [r3, #24]
 8007e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2270      	movs	r2, #112	; 0x70
 8007e9e:	4393      	bics	r3, r2
 8007ea0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	2203      	movs	r2, #3
 8007ea6:	4393      	bics	r3, r2
 8007ea8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	4393      	bics	r3, r2
 8007eba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	697a      	ldr	r2, [r7, #20]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a27      	ldr	r2, [pc, #156]	; (8007f68 <TIM_OC1_SetConfig+0xf8>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d00b      	beq.n	8007ee6 <TIM_OC1_SetConfig+0x76>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a26      	ldr	r2, [pc, #152]	; (8007f6c <TIM_OC1_SetConfig+0xfc>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d007      	beq.n	8007ee6 <TIM_OC1_SetConfig+0x76>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a25      	ldr	r2, [pc, #148]	; (8007f70 <TIM_OC1_SetConfig+0x100>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d003      	beq.n	8007ee6 <TIM_OC1_SetConfig+0x76>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a24      	ldr	r2, [pc, #144]	; (8007f74 <TIM_OC1_SetConfig+0x104>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d10c      	bne.n	8007f00 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	2208      	movs	r2, #8
 8007eea:	4393      	bics	r3, r2
 8007eec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	697a      	ldr	r2, [r7, #20]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	2204      	movs	r2, #4
 8007efc:	4393      	bics	r3, r2
 8007efe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a19      	ldr	r2, [pc, #100]	; (8007f68 <TIM_OC1_SetConfig+0xf8>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d00b      	beq.n	8007f20 <TIM_OC1_SetConfig+0xb0>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a18      	ldr	r2, [pc, #96]	; (8007f6c <TIM_OC1_SetConfig+0xfc>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d007      	beq.n	8007f20 <TIM_OC1_SetConfig+0xb0>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a17      	ldr	r2, [pc, #92]	; (8007f70 <TIM_OC1_SetConfig+0x100>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d003      	beq.n	8007f20 <TIM_OC1_SetConfig+0xb0>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a16      	ldr	r2, [pc, #88]	; (8007f74 <TIM_OC1_SetConfig+0x104>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d111      	bne.n	8007f44 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	4a15      	ldr	r2, [pc, #84]	; (8007f78 <TIM_OC1_SetConfig+0x108>)
 8007f24:	4013      	ands	r3, r2
 8007f26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	4a14      	ldr	r2, [pc, #80]	; (8007f7c <TIM_OC1_SetConfig+0x10c>)
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	695b      	ldr	r3, [r3, #20]
 8007f34:	693a      	ldr	r2, [r7, #16]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	685a      	ldr	r2, [r3, #4]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	621a      	str	r2, [r3, #32]
}
 8007f5e:	46c0      	nop			; (mov r8, r8)
 8007f60:	46bd      	mov	sp, r7
 8007f62:	b006      	add	sp, #24
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	46c0      	nop			; (mov r8, r8)
 8007f68:	40012c00 	.word	0x40012c00
 8007f6c:	40014000 	.word	0x40014000
 8007f70:	40014400 	.word	0x40014400
 8007f74:	40014800 	.word	0x40014800
 8007f78:	fffffeff 	.word	0xfffffeff
 8007f7c:	fffffdff 	.word	0xfffffdff

08007f80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	2210      	movs	r2, #16
 8007f90:	4393      	bics	r3, r2
 8007f92:	001a      	movs	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a1b      	ldr	r3, [r3, #32]
 8007f9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	4a2e      	ldr	r2, [pc, #184]	; (8008068 <TIM_OC2_SetConfig+0xe8>)
 8007fae:	4013      	ands	r3, r2
 8007fb0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	4a2d      	ldr	r2, [pc, #180]	; (800806c <TIM_OC2_SetConfig+0xec>)
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	021b      	lsls	r3, r3, #8
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	2220      	movs	r2, #32
 8007fca:	4393      	bics	r3, r2
 8007fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	011b      	lsls	r3, r3, #4
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a24      	ldr	r2, [pc, #144]	; (8008070 <TIM_OC2_SetConfig+0xf0>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d10d      	bne.n	8007ffe <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	2280      	movs	r2, #128	; 0x80
 8007fe6:	4393      	bics	r3, r2
 8007fe8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	011b      	lsls	r3, r3, #4
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	2240      	movs	r2, #64	; 0x40
 8007ffa:	4393      	bics	r3, r2
 8007ffc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a1b      	ldr	r2, [pc, #108]	; (8008070 <TIM_OC2_SetConfig+0xf0>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d00b      	beq.n	800801e <TIM_OC2_SetConfig+0x9e>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a1a      	ldr	r2, [pc, #104]	; (8008074 <TIM_OC2_SetConfig+0xf4>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d007      	beq.n	800801e <TIM_OC2_SetConfig+0x9e>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a19      	ldr	r2, [pc, #100]	; (8008078 <TIM_OC2_SetConfig+0xf8>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d003      	beq.n	800801e <TIM_OC2_SetConfig+0x9e>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a18      	ldr	r2, [pc, #96]	; (800807c <TIM_OC2_SetConfig+0xfc>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d113      	bne.n	8008046 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	4a17      	ldr	r2, [pc, #92]	; (8008080 <TIM_OC2_SetConfig+0x100>)
 8008022:	4013      	ands	r3, r2
 8008024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	4a16      	ldr	r2, [pc, #88]	; (8008084 <TIM_OC2_SetConfig+0x104>)
 800802a:	4013      	ands	r3, r2
 800802c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	4313      	orrs	r3, r2
 8008038:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	693a      	ldr	r2, [r7, #16]
 8008042:	4313      	orrs	r3, r2
 8008044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	693a      	ldr	r2, [r7, #16]
 800804a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	68fa      	ldr	r2, [r7, #12]
 8008050:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	621a      	str	r2, [r3, #32]
}
 8008060:	46c0      	nop			; (mov r8, r8)
 8008062:	46bd      	mov	sp, r7
 8008064:	b006      	add	sp, #24
 8008066:	bd80      	pop	{r7, pc}
 8008068:	ffff8fff 	.word	0xffff8fff
 800806c:	fffffcff 	.word	0xfffffcff
 8008070:	40012c00 	.word	0x40012c00
 8008074:	40014000 	.word	0x40014000
 8008078:	40014400 	.word	0x40014400
 800807c:	40014800 	.word	0x40014800
 8008080:	fffffbff 	.word	0xfffffbff
 8008084:	fffff7ff 	.word	0xfffff7ff

08008088 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b086      	sub	sp, #24
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a1b      	ldr	r3, [r3, #32]
 8008096:	4a35      	ldr	r2, [pc, #212]	; (800816c <TIM_OC3_SetConfig+0xe4>)
 8008098:	401a      	ands	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	69db      	ldr	r3, [r3, #28]
 80080ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2270      	movs	r2, #112	; 0x70
 80080b4:	4393      	bics	r3, r2
 80080b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2203      	movs	r2, #3
 80080bc:	4393      	bics	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	4a28      	ldr	r2, [pc, #160]	; (8008170 <TIM_OC3_SetConfig+0xe8>)
 80080ce:	4013      	ands	r3, r2
 80080d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	021b      	lsls	r3, r3, #8
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	4313      	orrs	r3, r2
 80080dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a24      	ldr	r2, [pc, #144]	; (8008174 <TIM_OC3_SetConfig+0xec>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d10d      	bne.n	8008102 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	4a23      	ldr	r2, [pc, #140]	; (8008178 <TIM_OC3_SetConfig+0xf0>)
 80080ea:	4013      	ands	r3, r2
 80080ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	021b      	lsls	r3, r3, #8
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	4a1f      	ldr	r2, [pc, #124]	; (800817c <TIM_OC3_SetConfig+0xf4>)
 80080fe:	4013      	ands	r3, r2
 8008100:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a1b      	ldr	r2, [pc, #108]	; (8008174 <TIM_OC3_SetConfig+0xec>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d00b      	beq.n	8008122 <TIM_OC3_SetConfig+0x9a>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a1c      	ldr	r2, [pc, #112]	; (8008180 <TIM_OC3_SetConfig+0xf8>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d007      	beq.n	8008122 <TIM_OC3_SetConfig+0x9a>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a1b      	ldr	r2, [pc, #108]	; (8008184 <TIM_OC3_SetConfig+0xfc>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d003      	beq.n	8008122 <TIM_OC3_SetConfig+0x9a>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a1a      	ldr	r2, [pc, #104]	; (8008188 <TIM_OC3_SetConfig+0x100>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d113      	bne.n	800814a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	4a19      	ldr	r2, [pc, #100]	; (800818c <TIM_OC3_SetConfig+0x104>)
 8008126:	4013      	ands	r3, r2
 8008128:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	4a18      	ldr	r2, [pc, #96]	; (8008190 <TIM_OC3_SetConfig+0x108>)
 800812e:	4013      	ands	r3, r2
 8008130:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	011b      	lsls	r3, r3, #4
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	4313      	orrs	r3, r2
 800813c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	011b      	lsls	r3, r3, #4
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	4313      	orrs	r3, r2
 8008148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	621a      	str	r2, [r3, #32]
}
 8008164:	46c0      	nop			; (mov r8, r8)
 8008166:	46bd      	mov	sp, r7
 8008168:	b006      	add	sp, #24
 800816a:	bd80      	pop	{r7, pc}
 800816c:	fffffeff 	.word	0xfffffeff
 8008170:	fffffdff 	.word	0xfffffdff
 8008174:	40012c00 	.word	0x40012c00
 8008178:	fffff7ff 	.word	0xfffff7ff
 800817c:	fffffbff 	.word	0xfffffbff
 8008180:	40014000 	.word	0x40014000
 8008184:	40014400 	.word	0x40014400
 8008188:	40014800 	.word	0x40014800
 800818c:	ffffefff 	.word	0xffffefff
 8008190:	ffffdfff 	.word	0xffffdfff

08008194 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	4a28      	ldr	r2, [pc, #160]	; (8008244 <TIM_OC4_SetConfig+0xb0>)
 80081a4:	401a      	ands	r2, r3
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a1b      	ldr	r3, [r3, #32]
 80081ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	4a22      	ldr	r2, [pc, #136]	; (8008248 <TIM_OC4_SetConfig+0xb4>)
 80081c0:	4013      	ands	r3, r2
 80081c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	4a21      	ldr	r2, [pc, #132]	; (800824c <TIM_OC4_SetConfig+0xb8>)
 80081c8:	4013      	ands	r3, r2
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	021b      	lsls	r3, r3, #8
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	4a1d      	ldr	r2, [pc, #116]	; (8008250 <TIM_OC4_SetConfig+0xbc>)
 80081dc:	4013      	ands	r3, r2
 80081de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	031b      	lsls	r3, r3, #12
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a19      	ldr	r2, [pc, #100]	; (8008254 <TIM_OC4_SetConfig+0xc0>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d00b      	beq.n	800820c <TIM_OC4_SetConfig+0x78>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a18      	ldr	r2, [pc, #96]	; (8008258 <TIM_OC4_SetConfig+0xc4>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d007      	beq.n	800820c <TIM_OC4_SetConfig+0x78>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a17      	ldr	r2, [pc, #92]	; (800825c <TIM_OC4_SetConfig+0xc8>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d003      	beq.n	800820c <TIM_OC4_SetConfig+0x78>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a16      	ldr	r2, [pc, #88]	; (8008260 <TIM_OC4_SetConfig+0xcc>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d109      	bne.n	8008220 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	4a15      	ldr	r2, [pc, #84]	; (8008264 <TIM_OC4_SetConfig+0xd0>)
 8008210:	4013      	ands	r3, r2
 8008212:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	695b      	ldr	r3, [r3, #20]
 8008218:	019b      	lsls	r3, r3, #6
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	4313      	orrs	r3, r2
 800821e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	697a      	ldr	r2, [r7, #20]
 8008224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	693a      	ldr	r2, [r7, #16]
 8008238:	621a      	str	r2, [r3, #32]
}
 800823a:	46c0      	nop			; (mov r8, r8)
 800823c:	46bd      	mov	sp, r7
 800823e:	b006      	add	sp, #24
 8008240:	bd80      	pop	{r7, pc}
 8008242:	46c0      	nop			; (mov r8, r8)
 8008244:	ffffefff 	.word	0xffffefff
 8008248:	ffff8fff 	.word	0xffff8fff
 800824c:	fffffcff 	.word	0xfffffcff
 8008250:	ffffdfff 	.word	0xffffdfff
 8008254:	40012c00 	.word	0x40012c00
 8008258:	40014000 	.word	0x40014000
 800825c:	40014400 	.word	0x40014400
 8008260:	40014800 	.word	0x40014800
 8008264:	ffffbfff 	.word	0xffffbfff

08008268 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008270:	46c0      	nop			; (mov r8, r8)
 8008272:	46bd      	mov	sp, r7
 8008274:	b002      	add	sp, #8
 8008276:	bd80      	pop	{r7, pc}

08008278 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008280:	46c0      	nop			; (mov r8, r8)
 8008282:	46bd      	mov	sp, r7
 8008284:	b002      	add	sp, #8
 8008286:	bd80      	pop	{r7, pc}

08008288 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d101      	bne.n	800829a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e044      	b.n	8008324 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d107      	bne.n	80082b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2274      	movs	r2, #116	; 0x74
 80082a6:	2100      	movs	r1, #0
 80082a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	0018      	movs	r0, r3
 80082ae:	f7fa fbf1 	bl	8002a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2224      	movs	r2, #36	; 0x24
 80082b6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2101      	movs	r1, #1
 80082c4:	438a      	bics	r2, r1
 80082c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	0018      	movs	r0, r3
 80082cc:	f000 fb24 	bl	8008918 <UART_SetConfig>
 80082d0:	0003      	movs	r3, r0
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d101      	bne.n	80082da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e024      	b.n	8008324 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d003      	beq.n	80082ea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	0018      	movs	r0, r3
 80082e6:	f000 fc9f 	bl	8008c28 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	685a      	ldr	r2, [r3, #4]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	490d      	ldr	r1, [pc, #52]	; (800832c <HAL_UART_Init+0xa4>)
 80082f6:	400a      	ands	r2, r1
 80082f8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	689a      	ldr	r2, [r3, #8]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	212a      	movs	r1, #42	; 0x2a
 8008306:	438a      	bics	r2, r1
 8008308:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2101      	movs	r1, #1
 8008316:	430a      	orrs	r2, r1
 8008318:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	0018      	movs	r0, r3
 800831e:	f000 fd37 	bl	8008d90 <UART_CheckIdleState>
 8008322:	0003      	movs	r3, r0
}
 8008324:	0018      	movs	r0, r3
 8008326:	46bd      	mov	sp, r7
 8008328:	b002      	add	sp, #8
 800832a:	bd80      	pop	{r7, pc}
 800832c:	ffffb7ff 	.word	0xffffb7ff

08008330 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008330:	b590      	push	{r4, r7, lr}
 8008332:	b0ab      	sub	sp, #172	; 0xac
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	69db      	ldr	r3, [r3, #28]
 800833e:	22a4      	movs	r2, #164	; 0xa4
 8008340:	18b9      	adds	r1, r7, r2
 8008342:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	20a0      	movs	r0, #160	; 0xa0
 800834c:	1839      	adds	r1, r7, r0
 800834e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	219c      	movs	r1, #156	; 0x9c
 8008358:	1879      	adds	r1, r7, r1
 800835a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800835c:	0011      	movs	r1, r2
 800835e:	18bb      	adds	r3, r7, r2
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a99      	ldr	r2, [pc, #612]	; (80085c8 <HAL_UART_IRQHandler+0x298>)
 8008364:	4013      	ands	r3, r2
 8008366:	2298      	movs	r2, #152	; 0x98
 8008368:	18bc      	adds	r4, r7, r2
 800836a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800836c:	18bb      	adds	r3, r7, r2
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d114      	bne.n	800839e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008374:	187b      	adds	r3, r7, r1
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2220      	movs	r2, #32
 800837a:	4013      	ands	r3, r2
 800837c:	d00f      	beq.n	800839e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800837e:	183b      	adds	r3, r7, r0
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2220      	movs	r2, #32
 8008384:	4013      	ands	r3, r2
 8008386:	d00a      	beq.n	800839e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800838c:	2b00      	cmp	r3, #0
 800838e:	d100      	bne.n	8008392 <HAL_UART_IRQHandler+0x62>
 8008390:	e296      	b.n	80088c0 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	0010      	movs	r0, r2
 800839a:	4798      	blx	r3
      }
      return;
 800839c:	e290      	b.n	80088c0 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800839e:	2398      	movs	r3, #152	; 0x98
 80083a0:	18fb      	adds	r3, r7, r3
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d100      	bne.n	80083aa <HAL_UART_IRQHandler+0x7a>
 80083a8:	e114      	b.n	80085d4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80083aa:	239c      	movs	r3, #156	; 0x9c
 80083ac:	18fb      	adds	r3, r7, r3
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2201      	movs	r2, #1
 80083b2:	4013      	ands	r3, r2
 80083b4:	d106      	bne.n	80083c4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80083b6:	23a0      	movs	r3, #160	; 0xa0
 80083b8:	18fb      	adds	r3, r7, r3
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a83      	ldr	r2, [pc, #524]	; (80085cc <HAL_UART_IRQHandler+0x29c>)
 80083be:	4013      	ands	r3, r2
 80083c0:	d100      	bne.n	80083c4 <HAL_UART_IRQHandler+0x94>
 80083c2:	e107      	b.n	80085d4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083c4:	23a4      	movs	r3, #164	; 0xa4
 80083c6:	18fb      	adds	r3, r7, r3
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2201      	movs	r2, #1
 80083cc:	4013      	ands	r3, r2
 80083ce:	d012      	beq.n	80083f6 <HAL_UART_IRQHandler+0xc6>
 80083d0:	23a0      	movs	r3, #160	; 0xa0
 80083d2:	18fb      	adds	r3, r7, r3
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	2380      	movs	r3, #128	; 0x80
 80083d8:	005b      	lsls	r3, r3, #1
 80083da:	4013      	ands	r3, r2
 80083dc:	d00b      	beq.n	80083f6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2201      	movs	r2, #1
 80083e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2280      	movs	r2, #128	; 0x80
 80083ea:	589b      	ldr	r3, [r3, r2]
 80083ec:	2201      	movs	r2, #1
 80083ee:	431a      	orrs	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2180      	movs	r1, #128	; 0x80
 80083f4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083f6:	23a4      	movs	r3, #164	; 0xa4
 80083f8:	18fb      	adds	r3, r7, r3
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2202      	movs	r2, #2
 80083fe:	4013      	ands	r3, r2
 8008400:	d011      	beq.n	8008426 <HAL_UART_IRQHandler+0xf6>
 8008402:	239c      	movs	r3, #156	; 0x9c
 8008404:	18fb      	adds	r3, r7, r3
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2201      	movs	r2, #1
 800840a:	4013      	ands	r3, r2
 800840c:	d00b      	beq.n	8008426 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2202      	movs	r2, #2
 8008414:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2280      	movs	r2, #128	; 0x80
 800841a:	589b      	ldr	r3, [r3, r2]
 800841c:	2204      	movs	r2, #4
 800841e:	431a      	orrs	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2180      	movs	r1, #128	; 0x80
 8008424:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008426:	23a4      	movs	r3, #164	; 0xa4
 8008428:	18fb      	adds	r3, r7, r3
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2204      	movs	r2, #4
 800842e:	4013      	ands	r3, r2
 8008430:	d011      	beq.n	8008456 <HAL_UART_IRQHandler+0x126>
 8008432:	239c      	movs	r3, #156	; 0x9c
 8008434:	18fb      	adds	r3, r7, r3
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2201      	movs	r2, #1
 800843a:	4013      	ands	r3, r2
 800843c:	d00b      	beq.n	8008456 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2204      	movs	r2, #4
 8008444:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2280      	movs	r2, #128	; 0x80
 800844a:	589b      	ldr	r3, [r3, r2]
 800844c:	2202      	movs	r2, #2
 800844e:	431a      	orrs	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2180      	movs	r1, #128	; 0x80
 8008454:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008456:	23a4      	movs	r3, #164	; 0xa4
 8008458:	18fb      	adds	r3, r7, r3
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2208      	movs	r2, #8
 800845e:	4013      	ands	r3, r2
 8008460:	d017      	beq.n	8008492 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008462:	23a0      	movs	r3, #160	; 0xa0
 8008464:	18fb      	adds	r3, r7, r3
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2220      	movs	r2, #32
 800846a:	4013      	ands	r3, r2
 800846c:	d105      	bne.n	800847a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800846e:	239c      	movs	r3, #156	; 0x9c
 8008470:	18fb      	adds	r3, r7, r3
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2201      	movs	r2, #1
 8008476:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008478:	d00b      	beq.n	8008492 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2208      	movs	r2, #8
 8008480:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2280      	movs	r2, #128	; 0x80
 8008486:	589b      	ldr	r3, [r3, r2]
 8008488:	2208      	movs	r2, #8
 800848a:	431a      	orrs	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2180      	movs	r1, #128	; 0x80
 8008490:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008492:	23a4      	movs	r3, #164	; 0xa4
 8008494:	18fb      	adds	r3, r7, r3
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	2380      	movs	r3, #128	; 0x80
 800849a:	011b      	lsls	r3, r3, #4
 800849c:	4013      	ands	r3, r2
 800849e:	d013      	beq.n	80084c8 <HAL_UART_IRQHandler+0x198>
 80084a0:	23a0      	movs	r3, #160	; 0xa0
 80084a2:	18fb      	adds	r3, r7, r3
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	2380      	movs	r3, #128	; 0x80
 80084a8:	04db      	lsls	r3, r3, #19
 80084aa:	4013      	ands	r3, r2
 80084ac:	d00c      	beq.n	80084c8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2280      	movs	r2, #128	; 0x80
 80084b4:	0112      	lsls	r2, r2, #4
 80084b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2280      	movs	r2, #128	; 0x80
 80084bc:	589b      	ldr	r3, [r3, r2]
 80084be:	2220      	movs	r2, #32
 80084c0:	431a      	orrs	r2, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2180      	movs	r1, #128	; 0x80
 80084c6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2280      	movs	r2, #128	; 0x80
 80084cc:	589b      	ldr	r3, [r3, r2]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d100      	bne.n	80084d4 <HAL_UART_IRQHandler+0x1a4>
 80084d2:	e1f7      	b.n	80088c4 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80084d4:	23a4      	movs	r3, #164	; 0xa4
 80084d6:	18fb      	adds	r3, r7, r3
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2220      	movs	r2, #32
 80084dc:	4013      	ands	r3, r2
 80084de:	d00e      	beq.n	80084fe <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80084e0:	23a0      	movs	r3, #160	; 0xa0
 80084e2:	18fb      	adds	r3, r7, r3
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2220      	movs	r2, #32
 80084e8:	4013      	ands	r3, r2
 80084ea:	d008      	beq.n	80084fe <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d004      	beq.n	80084fe <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	0010      	movs	r0, r2
 80084fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2280      	movs	r2, #128	; 0x80
 8008502:	589b      	ldr	r3, [r3, r2]
 8008504:	2194      	movs	r1, #148	; 0x94
 8008506:	187a      	adds	r2, r7, r1
 8008508:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	2240      	movs	r2, #64	; 0x40
 8008512:	4013      	ands	r3, r2
 8008514:	2b40      	cmp	r3, #64	; 0x40
 8008516:	d004      	beq.n	8008522 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008518:	187b      	adds	r3, r7, r1
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2228      	movs	r2, #40	; 0x28
 800851e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008520:	d047      	beq.n	80085b2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	0018      	movs	r0, r3
 8008526:	f000 fd3f 	bl	8008fa8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	2240      	movs	r2, #64	; 0x40
 8008532:	4013      	ands	r3, r2
 8008534:	2b40      	cmp	r3, #64	; 0x40
 8008536:	d137      	bne.n	80085a8 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008538:	f3ef 8310 	mrs	r3, PRIMASK
 800853c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800853e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008540:	2090      	movs	r0, #144	; 0x90
 8008542:	183a      	adds	r2, r7, r0
 8008544:	6013      	str	r3, [r2, #0]
 8008546:	2301      	movs	r3, #1
 8008548:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800854a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800854c:	f383 8810 	msr	PRIMASK, r3
}
 8008550:	46c0      	nop			; (mov r8, r8)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	689a      	ldr	r2, [r3, #8]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2140      	movs	r1, #64	; 0x40
 800855e:	438a      	bics	r2, r1
 8008560:	609a      	str	r2, [r3, #8]
 8008562:	183b      	adds	r3, r7, r0
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008568:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800856a:	f383 8810 	msr	PRIMASK, r3
}
 800856e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008574:	2b00      	cmp	r3, #0
 8008576:	d012      	beq.n	800859e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800857c:	4a14      	ldr	r2, [pc, #80]	; (80085d0 <HAL_UART_IRQHandler+0x2a0>)
 800857e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008584:	0018      	movs	r0, r3
 8008586:	f7fb fd71 	bl	800406c <HAL_DMA_Abort_IT>
 800858a:	1e03      	subs	r3, r0, #0
 800858c:	d01a      	beq.n	80085c4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008598:	0018      	movs	r0, r3
 800859a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800859c:	e012      	b.n	80085c4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	0018      	movs	r0, r3
 80085a2:	f000 f9a5 	bl	80088f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085a6:	e00d      	b.n	80085c4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	0018      	movs	r0, r3
 80085ac:	f000 f9a0 	bl	80088f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085b0:	e008      	b.n	80085c4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	0018      	movs	r0, r3
 80085b6:	f000 f99b 	bl	80088f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2280      	movs	r2, #128	; 0x80
 80085be:	2100      	movs	r1, #0
 80085c0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80085c2:	e17f      	b.n	80088c4 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085c4:	46c0      	nop			; (mov r8, r8)
    return;
 80085c6:	e17d      	b.n	80088c4 <HAL_UART_IRQHandler+0x594>
 80085c8:	0000080f 	.word	0x0000080f
 80085cc:	04000120 	.word	0x04000120
 80085d0:	0800906d 	.word	0x0800906d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d000      	beq.n	80085de <HAL_UART_IRQHandler+0x2ae>
 80085dc:	e131      	b.n	8008842 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80085de:	23a4      	movs	r3, #164	; 0xa4
 80085e0:	18fb      	adds	r3, r7, r3
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2210      	movs	r2, #16
 80085e6:	4013      	ands	r3, r2
 80085e8:	d100      	bne.n	80085ec <HAL_UART_IRQHandler+0x2bc>
 80085ea:	e12a      	b.n	8008842 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80085ec:	23a0      	movs	r3, #160	; 0xa0
 80085ee:	18fb      	adds	r3, r7, r3
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2210      	movs	r2, #16
 80085f4:	4013      	ands	r3, r2
 80085f6:	d100      	bne.n	80085fa <HAL_UART_IRQHandler+0x2ca>
 80085f8:	e123      	b.n	8008842 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2210      	movs	r2, #16
 8008600:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	2240      	movs	r2, #64	; 0x40
 800860a:	4013      	ands	r3, r2
 800860c:	2b40      	cmp	r3, #64	; 0x40
 800860e:	d000      	beq.n	8008612 <HAL_UART_IRQHandler+0x2e2>
 8008610:	e09b      	b.n	800874a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	685a      	ldr	r2, [r3, #4]
 800861a:	217e      	movs	r1, #126	; 0x7e
 800861c:	187b      	adds	r3, r7, r1
 800861e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8008620:	187b      	adds	r3, r7, r1
 8008622:	881b      	ldrh	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d100      	bne.n	800862a <HAL_UART_IRQHandler+0x2fa>
 8008628:	e14e      	b.n	80088c8 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2258      	movs	r2, #88	; 0x58
 800862e:	5a9b      	ldrh	r3, [r3, r2]
 8008630:	187a      	adds	r2, r7, r1
 8008632:	8812      	ldrh	r2, [r2, #0]
 8008634:	429a      	cmp	r2, r3
 8008636:	d300      	bcc.n	800863a <HAL_UART_IRQHandler+0x30a>
 8008638:	e146      	b.n	80088c8 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	187a      	adds	r2, r7, r1
 800863e:	215a      	movs	r1, #90	; 0x5a
 8008640:	8812      	ldrh	r2, [r2, #0]
 8008642:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	2b20      	cmp	r3, #32
 800864c:	d06e      	beq.n	800872c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800864e:	f3ef 8310 	mrs	r3, PRIMASK
 8008652:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008656:	67bb      	str	r3, [r7, #120]	; 0x78
 8008658:	2301      	movs	r3, #1
 800865a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800865c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800865e:	f383 8810 	msr	PRIMASK, r3
}
 8008662:	46c0      	nop			; (mov r8, r8)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	499a      	ldr	r1, [pc, #616]	; (80088d8 <HAL_UART_IRQHandler+0x5a8>)
 8008670:	400a      	ands	r2, r1
 8008672:	601a      	str	r2, [r3, #0]
 8008674:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008676:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867a:	f383 8810 	msr	PRIMASK, r3
}
 800867e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008680:	f3ef 8310 	mrs	r3, PRIMASK
 8008684:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008688:	677b      	str	r3, [r7, #116]	; 0x74
 800868a:	2301      	movs	r3, #1
 800868c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800868e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008690:	f383 8810 	msr	PRIMASK, r3
}
 8008694:	46c0      	nop			; (mov r8, r8)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	689a      	ldr	r2, [r3, #8]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2101      	movs	r1, #1
 80086a2:	438a      	bics	r2, r1
 80086a4:	609a      	str	r2, [r3, #8]
 80086a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80086a8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ac:	f383 8810 	msr	PRIMASK, r3
}
 80086b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086b2:	f3ef 8310 	mrs	r3, PRIMASK
 80086b6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80086b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086ba:	673b      	str	r3, [r7, #112]	; 0x70
 80086bc:	2301      	movs	r3, #1
 80086be:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086c2:	f383 8810 	msr	PRIMASK, r3
}
 80086c6:	46c0      	nop			; (mov r8, r8)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	689a      	ldr	r2, [r3, #8]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2140      	movs	r1, #64	; 0x40
 80086d4:	438a      	bics	r2, r1
 80086d6:	609a      	str	r2, [r3, #8]
 80086d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80086da:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086de:	f383 8810 	msr	PRIMASK, r3
}
 80086e2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2220      	movs	r2, #32
 80086e8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086f0:	f3ef 8310 	mrs	r3, PRIMASK
 80086f4:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80086f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086fa:	2301      	movs	r3, #1
 80086fc:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008700:	f383 8810 	msr	PRIMASK, r3
}
 8008704:	46c0      	nop			; (mov r8, r8)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2110      	movs	r1, #16
 8008712:	438a      	bics	r2, r1
 8008714:	601a      	str	r2, [r3, #0]
 8008716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008718:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800871a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800871c:	f383 8810 	msr	PRIMASK, r3
}
 8008720:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008726:	0018      	movs	r0, r3
 8008728:	f7fb fc68 	bl	8003ffc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2258      	movs	r2, #88	; 0x58
 8008730:	5a9a      	ldrh	r2, [r3, r2]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	215a      	movs	r1, #90	; 0x5a
 8008736:	5a5b      	ldrh	r3, [r3, r1]
 8008738:	b29b      	uxth	r3, r3
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	b29a      	uxth	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	0011      	movs	r1, r2
 8008742:	0018      	movs	r0, r3
 8008744:	f000 f8dc 	bl	8008900 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008748:	e0be      	b.n	80088c8 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2258      	movs	r2, #88	; 0x58
 800874e:	5a99      	ldrh	r1, [r3, r2]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	225a      	movs	r2, #90	; 0x5a
 8008754:	5a9b      	ldrh	r3, [r3, r2]
 8008756:	b29a      	uxth	r2, r3
 8008758:	208e      	movs	r0, #142	; 0x8e
 800875a:	183b      	adds	r3, r7, r0
 800875c:	1a8a      	subs	r2, r1, r2
 800875e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	225a      	movs	r2, #90	; 0x5a
 8008764:	5a9b      	ldrh	r3, [r3, r2]
 8008766:	b29b      	uxth	r3, r3
 8008768:	2b00      	cmp	r3, #0
 800876a:	d100      	bne.n	800876e <HAL_UART_IRQHandler+0x43e>
 800876c:	e0ae      	b.n	80088cc <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800876e:	183b      	adds	r3, r7, r0
 8008770:	881b      	ldrh	r3, [r3, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d100      	bne.n	8008778 <HAL_UART_IRQHandler+0x448>
 8008776:	e0a9      	b.n	80088cc <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008778:	f3ef 8310 	mrs	r3, PRIMASK
 800877c:	60fb      	str	r3, [r7, #12]
  return(result);
 800877e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008780:	2488      	movs	r4, #136	; 0x88
 8008782:	193a      	adds	r2, r7, r4
 8008784:	6013      	str	r3, [r2, #0]
 8008786:	2301      	movs	r3, #1
 8008788:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	f383 8810 	msr	PRIMASK, r3
}
 8008790:	46c0      	nop			; (mov r8, r8)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	494f      	ldr	r1, [pc, #316]	; (80088dc <HAL_UART_IRQHandler+0x5ac>)
 800879e:	400a      	ands	r2, r1
 80087a0:	601a      	str	r2, [r3, #0]
 80087a2:	193b      	adds	r3, r7, r4
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	f383 8810 	msr	PRIMASK, r3
}
 80087ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087b0:	f3ef 8310 	mrs	r3, PRIMASK
 80087b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80087b6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087b8:	2484      	movs	r4, #132	; 0x84
 80087ba:	193a      	adds	r2, r7, r4
 80087bc:	6013      	str	r3, [r2, #0]
 80087be:	2301      	movs	r3, #1
 80087c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	f383 8810 	msr	PRIMASK, r3
}
 80087c8:	46c0      	nop			; (mov r8, r8)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	689a      	ldr	r2, [r3, #8]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2101      	movs	r1, #1
 80087d6:	438a      	bics	r2, r1
 80087d8:	609a      	str	r2, [r3, #8]
 80087da:	193b      	adds	r3, r7, r4
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087e0:	6a3b      	ldr	r3, [r7, #32]
 80087e2:	f383 8810 	msr	PRIMASK, r3
}
 80087e6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2220      	movs	r2, #32
 80087ec:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087fa:	f3ef 8310 	mrs	r3, PRIMASK
 80087fe:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008800:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008802:	2480      	movs	r4, #128	; 0x80
 8008804:	193a      	adds	r2, r7, r4
 8008806:	6013      	str	r3, [r2, #0]
 8008808:	2301      	movs	r3, #1
 800880a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800880c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880e:	f383 8810 	msr	PRIMASK, r3
}
 8008812:	46c0      	nop			; (mov r8, r8)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2110      	movs	r1, #16
 8008820:	438a      	bics	r2, r1
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	193b      	adds	r3, r7, r4
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800882a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882c:	f383 8810 	msr	PRIMASK, r3
}
 8008830:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008832:	183b      	adds	r3, r7, r0
 8008834:	881a      	ldrh	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	0011      	movs	r1, r2
 800883a:	0018      	movs	r0, r3
 800883c:	f000 f860 	bl	8008900 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008840:	e044      	b.n	80088cc <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008842:	23a4      	movs	r3, #164	; 0xa4
 8008844:	18fb      	adds	r3, r7, r3
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	2380      	movs	r3, #128	; 0x80
 800884a:	035b      	lsls	r3, r3, #13
 800884c:	4013      	ands	r3, r2
 800884e:	d010      	beq.n	8008872 <HAL_UART_IRQHandler+0x542>
 8008850:	239c      	movs	r3, #156	; 0x9c
 8008852:	18fb      	adds	r3, r7, r3
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	2380      	movs	r3, #128	; 0x80
 8008858:	03db      	lsls	r3, r3, #15
 800885a:	4013      	ands	r3, r2
 800885c:	d009      	beq.n	8008872 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2280      	movs	r2, #128	; 0x80
 8008864:	0352      	lsls	r2, r2, #13
 8008866:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	0018      	movs	r0, r3
 800886c:	f000 fc40 	bl	80090f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008870:	e02f      	b.n	80088d2 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008872:	23a4      	movs	r3, #164	; 0xa4
 8008874:	18fb      	adds	r3, r7, r3
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2280      	movs	r2, #128	; 0x80
 800887a:	4013      	ands	r3, r2
 800887c:	d00f      	beq.n	800889e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800887e:	23a0      	movs	r3, #160	; 0xa0
 8008880:	18fb      	adds	r3, r7, r3
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2280      	movs	r2, #128	; 0x80
 8008886:	4013      	ands	r3, r2
 8008888:	d009      	beq.n	800889e <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800888e:	2b00      	cmp	r3, #0
 8008890:	d01e      	beq.n	80088d0 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	0010      	movs	r0, r2
 800889a:	4798      	blx	r3
    }
    return;
 800889c:	e018      	b.n	80088d0 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800889e:	23a4      	movs	r3, #164	; 0xa4
 80088a0:	18fb      	adds	r3, r7, r3
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2240      	movs	r2, #64	; 0x40
 80088a6:	4013      	ands	r3, r2
 80088a8:	d013      	beq.n	80088d2 <HAL_UART_IRQHandler+0x5a2>
 80088aa:	23a0      	movs	r3, #160	; 0xa0
 80088ac:	18fb      	adds	r3, r7, r3
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2240      	movs	r2, #64	; 0x40
 80088b2:	4013      	ands	r3, r2
 80088b4:	d00d      	beq.n	80088d2 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	0018      	movs	r0, r3
 80088ba:	f000 fbee 	bl	800909a <UART_EndTransmit_IT>
    return;
 80088be:	e008      	b.n	80088d2 <HAL_UART_IRQHandler+0x5a2>
      return;
 80088c0:	46c0      	nop			; (mov r8, r8)
 80088c2:	e006      	b.n	80088d2 <HAL_UART_IRQHandler+0x5a2>
    return;
 80088c4:	46c0      	nop			; (mov r8, r8)
 80088c6:	e004      	b.n	80088d2 <HAL_UART_IRQHandler+0x5a2>
      return;
 80088c8:	46c0      	nop			; (mov r8, r8)
 80088ca:	e002      	b.n	80088d2 <HAL_UART_IRQHandler+0x5a2>
      return;
 80088cc:	46c0      	nop			; (mov r8, r8)
 80088ce:	e000      	b.n	80088d2 <HAL_UART_IRQHandler+0x5a2>
    return;
 80088d0:	46c0      	nop			; (mov r8, r8)
  }

}
 80088d2:	46bd      	mov	sp, r7
 80088d4:	b02b      	add	sp, #172	; 0xac
 80088d6:	bd90      	pop	{r4, r7, pc}
 80088d8:	fffffeff 	.word	0xfffffeff
 80088dc:	fffffedf 	.word	0xfffffedf

080088e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80088e8:	46c0      	nop			; (mov r8, r8)
 80088ea:	46bd      	mov	sp, r7
 80088ec:	b002      	add	sp, #8
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80088f8:	46c0      	nop			; (mov r8, r8)
 80088fa:	46bd      	mov	sp, r7
 80088fc:	b002      	add	sp, #8
 80088fe:	bd80      	pop	{r7, pc}

08008900 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	000a      	movs	r2, r1
 800890a:	1cbb      	adds	r3, r7, #2
 800890c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800890e:	46c0      	nop			; (mov r8, r8)
 8008910:	46bd      	mov	sp, r7
 8008912:	b002      	add	sp, #8
 8008914:	bd80      	pop	{r7, pc}
	...

08008918 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b088      	sub	sp, #32
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008920:	231e      	movs	r3, #30
 8008922:	18fb      	adds	r3, r7, r3
 8008924:	2200      	movs	r2, #0
 8008926:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	689a      	ldr	r2, [r3, #8]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	431a      	orrs	r2, r3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	431a      	orrs	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	69db      	ldr	r3, [r3, #28]
 800893c:	4313      	orrs	r3, r2
 800893e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4aaf      	ldr	r2, [pc, #700]	; (8008c04 <UART_SetConfig+0x2ec>)
 8008948:	4013      	ands	r3, r2
 800894a:	0019      	movs	r1, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	697a      	ldr	r2, [r7, #20]
 8008952:	430a      	orrs	r2, r1
 8008954:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	4aaa      	ldr	r2, [pc, #680]	; (8008c08 <UART_SetConfig+0x2f0>)
 800895e:	4013      	ands	r3, r2
 8008960:	0019      	movs	r1, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68da      	ldr	r2, [r3, #12]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	430a      	orrs	r2, r1
 800896c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	699b      	ldr	r3, [r3, #24]
 8008972:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a1b      	ldr	r3, [r3, #32]
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	4313      	orrs	r3, r2
 800897c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	4aa1      	ldr	r2, [pc, #644]	; (8008c0c <UART_SetConfig+0x2f4>)
 8008986:	4013      	ands	r3, r2
 8008988:	0019      	movs	r1, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	430a      	orrs	r2, r1
 8008992:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a9d      	ldr	r2, [pc, #628]	; (8008c10 <UART_SetConfig+0x2f8>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d127      	bne.n	80089ee <UART_SetConfig+0xd6>
 800899e:	4b9d      	ldr	r3, [pc, #628]	; (8008c14 <UART_SetConfig+0x2fc>)
 80089a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a2:	2203      	movs	r2, #3
 80089a4:	4013      	ands	r3, r2
 80089a6:	2b03      	cmp	r3, #3
 80089a8:	d00d      	beq.n	80089c6 <UART_SetConfig+0xae>
 80089aa:	d81b      	bhi.n	80089e4 <UART_SetConfig+0xcc>
 80089ac:	2b02      	cmp	r3, #2
 80089ae:	d014      	beq.n	80089da <UART_SetConfig+0xc2>
 80089b0:	d818      	bhi.n	80089e4 <UART_SetConfig+0xcc>
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d002      	beq.n	80089bc <UART_SetConfig+0xa4>
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d00a      	beq.n	80089d0 <UART_SetConfig+0xb8>
 80089ba:	e013      	b.n	80089e4 <UART_SetConfig+0xcc>
 80089bc:	231f      	movs	r3, #31
 80089be:	18fb      	adds	r3, r7, r3
 80089c0:	2200      	movs	r2, #0
 80089c2:	701a      	strb	r2, [r3, #0]
 80089c4:	e065      	b.n	8008a92 <UART_SetConfig+0x17a>
 80089c6:	231f      	movs	r3, #31
 80089c8:	18fb      	adds	r3, r7, r3
 80089ca:	2202      	movs	r2, #2
 80089cc:	701a      	strb	r2, [r3, #0]
 80089ce:	e060      	b.n	8008a92 <UART_SetConfig+0x17a>
 80089d0:	231f      	movs	r3, #31
 80089d2:	18fb      	adds	r3, r7, r3
 80089d4:	2204      	movs	r2, #4
 80089d6:	701a      	strb	r2, [r3, #0]
 80089d8:	e05b      	b.n	8008a92 <UART_SetConfig+0x17a>
 80089da:	231f      	movs	r3, #31
 80089dc:	18fb      	adds	r3, r7, r3
 80089de:	2208      	movs	r2, #8
 80089e0:	701a      	strb	r2, [r3, #0]
 80089e2:	e056      	b.n	8008a92 <UART_SetConfig+0x17a>
 80089e4:	231f      	movs	r3, #31
 80089e6:	18fb      	adds	r3, r7, r3
 80089e8:	2210      	movs	r2, #16
 80089ea:	701a      	strb	r2, [r3, #0]
 80089ec:	e051      	b.n	8008a92 <UART_SetConfig+0x17a>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a89      	ldr	r2, [pc, #548]	; (8008c18 <UART_SetConfig+0x300>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d134      	bne.n	8008a62 <UART_SetConfig+0x14a>
 80089f8:	4b86      	ldr	r3, [pc, #536]	; (8008c14 <UART_SetConfig+0x2fc>)
 80089fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089fc:	23c0      	movs	r3, #192	; 0xc0
 80089fe:	029b      	lsls	r3, r3, #10
 8008a00:	4013      	ands	r3, r2
 8008a02:	22c0      	movs	r2, #192	; 0xc0
 8008a04:	0292      	lsls	r2, r2, #10
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d017      	beq.n	8008a3a <UART_SetConfig+0x122>
 8008a0a:	22c0      	movs	r2, #192	; 0xc0
 8008a0c:	0292      	lsls	r2, r2, #10
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d822      	bhi.n	8008a58 <UART_SetConfig+0x140>
 8008a12:	2280      	movs	r2, #128	; 0x80
 8008a14:	0292      	lsls	r2, r2, #10
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d019      	beq.n	8008a4e <UART_SetConfig+0x136>
 8008a1a:	2280      	movs	r2, #128	; 0x80
 8008a1c:	0292      	lsls	r2, r2, #10
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d81a      	bhi.n	8008a58 <UART_SetConfig+0x140>
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d004      	beq.n	8008a30 <UART_SetConfig+0x118>
 8008a26:	2280      	movs	r2, #128	; 0x80
 8008a28:	0252      	lsls	r2, r2, #9
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d00a      	beq.n	8008a44 <UART_SetConfig+0x12c>
 8008a2e:	e013      	b.n	8008a58 <UART_SetConfig+0x140>
 8008a30:	231f      	movs	r3, #31
 8008a32:	18fb      	adds	r3, r7, r3
 8008a34:	2200      	movs	r2, #0
 8008a36:	701a      	strb	r2, [r3, #0]
 8008a38:	e02b      	b.n	8008a92 <UART_SetConfig+0x17a>
 8008a3a:	231f      	movs	r3, #31
 8008a3c:	18fb      	adds	r3, r7, r3
 8008a3e:	2202      	movs	r2, #2
 8008a40:	701a      	strb	r2, [r3, #0]
 8008a42:	e026      	b.n	8008a92 <UART_SetConfig+0x17a>
 8008a44:	231f      	movs	r3, #31
 8008a46:	18fb      	adds	r3, r7, r3
 8008a48:	2204      	movs	r2, #4
 8008a4a:	701a      	strb	r2, [r3, #0]
 8008a4c:	e021      	b.n	8008a92 <UART_SetConfig+0x17a>
 8008a4e:	231f      	movs	r3, #31
 8008a50:	18fb      	adds	r3, r7, r3
 8008a52:	2208      	movs	r2, #8
 8008a54:	701a      	strb	r2, [r3, #0]
 8008a56:	e01c      	b.n	8008a92 <UART_SetConfig+0x17a>
 8008a58:	231f      	movs	r3, #31
 8008a5a:	18fb      	adds	r3, r7, r3
 8008a5c:	2210      	movs	r2, #16
 8008a5e:	701a      	strb	r2, [r3, #0]
 8008a60:	e017      	b.n	8008a92 <UART_SetConfig+0x17a>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a6d      	ldr	r2, [pc, #436]	; (8008c1c <UART_SetConfig+0x304>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d104      	bne.n	8008a76 <UART_SetConfig+0x15e>
 8008a6c:	231f      	movs	r3, #31
 8008a6e:	18fb      	adds	r3, r7, r3
 8008a70:	2200      	movs	r2, #0
 8008a72:	701a      	strb	r2, [r3, #0]
 8008a74:	e00d      	b.n	8008a92 <UART_SetConfig+0x17a>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a69      	ldr	r2, [pc, #420]	; (8008c20 <UART_SetConfig+0x308>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d104      	bne.n	8008a8a <UART_SetConfig+0x172>
 8008a80:	231f      	movs	r3, #31
 8008a82:	18fb      	adds	r3, r7, r3
 8008a84:	2200      	movs	r2, #0
 8008a86:	701a      	strb	r2, [r3, #0]
 8008a88:	e003      	b.n	8008a92 <UART_SetConfig+0x17a>
 8008a8a:	231f      	movs	r3, #31
 8008a8c:	18fb      	adds	r3, r7, r3
 8008a8e:	2210      	movs	r2, #16
 8008a90:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	69da      	ldr	r2, [r3, #28]
 8008a96:	2380      	movs	r3, #128	; 0x80
 8008a98:	021b      	lsls	r3, r3, #8
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d15d      	bne.n	8008b5a <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8008a9e:	231f      	movs	r3, #31
 8008aa0:	18fb      	adds	r3, r7, r3
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	2b08      	cmp	r3, #8
 8008aa6:	d015      	beq.n	8008ad4 <UART_SetConfig+0x1bc>
 8008aa8:	dc18      	bgt.n	8008adc <UART_SetConfig+0x1c4>
 8008aaa:	2b04      	cmp	r3, #4
 8008aac:	d00d      	beq.n	8008aca <UART_SetConfig+0x1b2>
 8008aae:	dc15      	bgt.n	8008adc <UART_SetConfig+0x1c4>
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d002      	beq.n	8008aba <UART_SetConfig+0x1a2>
 8008ab4:	2b02      	cmp	r3, #2
 8008ab6:	d005      	beq.n	8008ac4 <UART_SetConfig+0x1ac>
 8008ab8:	e010      	b.n	8008adc <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008aba:	f7fe f865 	bl	8006b88 <HAL_RCC_GetPCLK1Freq>
 8008abe:	0003      	movs	r3, r0
 8008ac0:	61bb      	str	r3, [r7, #24]
        break;
 8008ac2:	e012      	b.n	8008aea <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ac4:	4b57      	ldr	r3, [pc, #348]	; (8008c24 <UART_SetConfig+0x30c>)
 8008ac6:	61bb      	str	r3, [r7, #24]
        break;
 8008ac8:	e00f      	b.n	8008aea <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008aca:	f7fd ffd1 	bl	8006a70 <HAL_RCC_GetSysClockFreq>
 8008ace:	0003      	movs	r3, r0
 8008ad0:	61bb      	str	r3, [r7, #24]
        break;
 8008ad2:	e00a      	b.n	8008aea <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ad4:	2380      	movs	r3, #128	; 0x80
 8008ad6:	021b      	lsls	r3, r3, #8
 8008ad8:	61bb      	str	r3, [r7, #24]
        break;
 8008ada:	e006      	b.n	8008aea <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8008adc:	2300      	movs	r3, #0
 8008ade:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008ae0:	231e      	movs	r3, #30
 8008ae2:	18fb      	adds	r3, r7, r3
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	701a      	strb	r2, [r3, #0]
        break;
 8008ae8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d100      	bne.n	8008af2 <UART_SetConfig+0x1da>
 8008af0:	e07b      	b.n	8008bea <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	005a      	lsls	r2, r3, #1
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	085b      	lsrs	r3, r3, #1
 8008afc:	18d2      	adds	r2, r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	0019      	movs	r1, r3
 8008b04:	0010      	movs	r0, r2
 8008b06:	f7f7 fb11 	bl	800012c <__udivsi3>
 8008b0a:	0003      	movs	r3, r0
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	2b0f      	cmp	r3, #15
 8008b14:	d91c      	bls.n	8008b50 <UART_SetConfig+0x238>
 8008b16:	693a      	ldr	r2, [r7, #16]
 8008b18:	2380      	movs	r3, #128	; 0x80
 8008b1a:	025b      	lsls	r3, r3, #9
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d217      	bcs.n	8008b50 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	200e      	movs	r0, #14
 8008b26:	183b      	adds	r3, r7, r0
 8008b28:	210f      	movs	r1, #15
 8008b2a:	438a      	bics	r2, r1
 8008b2c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	085b      	lsrs	r3, r3, #1
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	2207      	movs	r2, #7
 8008b36:	4013      	ands	r3, r2
 8008b38:	b299      	uxth	r1, r3
 8008b3a:	183b      	adds	r3, r7, r0
 8008b3c:	183a      	adds	r2, r7, r0
 8008b3e:	8812      	ldrh	r2, [r2, #0]
 8008b40:	430a      	orrs	r2, r1
 8008b42:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	183a      	adds	r2, r7, r0
 8008b4a:	8812      	ldrh	r2, [r2, #0]
 8008b4c:	60da      	str	r2, [r3, #12]
 8008b4e:	e04c      	b.n	8008bea <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8008b50:	231e      	movs	r3, #30
 8008b52:	18fb      	adds	r3, r7, r3
 8008b54:	2201      	movs	r2, #1
 8008b56:	701a      	strb	r2, [r3, #0]
 8008b58:	e047      	b.n	8008bea <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b5a:	231f      	movs	r3, #31
 8008b5c:	18fb      	adds	r3, r7, r3
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	2b08      	cmp	r3, #8
 8008b62:	d015      	beq.n	8008b90 <UART_SetConfig+0x278>
 8008b64:	dc18      	bgt.n	8008b98 <UART_SetConfig+0x280>
 8008b66:	2b04      	cmp	r3, #4
 8008b68:	d00d      	beq.n	8008b86 <UART_SetConfig+0x26e>
 8008b6a:	dc15      	bgt.n	8008b98 <UART_SetConfig+0x280>
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d002      	beq.n	8008b76 <UART_SetConfig+0x25e>
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d005      	beq.n	8008b80 <UART_SetConfig+0x268>
 8008b74:	e010      	b.n	8008b98 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b76:	f7fe f807 	bl	8006b88 <HAL_RCC_GetPCLK1Freq>
 8008b7a:	0003      	movs	r3, r0
 8008b7c:	61bb      	str	r3, [r7, #24]
        break;
 8008b7e:	e012      	b.n	8008ba6 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b80:	4b28      	ldr	r3, [pc, #160]	; (8008c24 <UART_SetConfig+0x30c>)
 8008b82:	61bb      	str	r3, [r7, #24]
        break;
 8008b84:	e00f      	b.n	8008ba6 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b86:	f7fd ff73 	bl	8006a70 <HAL_RCC_GetSysClockFreq>
 8008b8a:	0003      	movs	r3, r0
 8008b8c:	61bb      	str	r3, [r7, #24]
        break;
 8008b8e:	e00a      	b.n	8008ba6 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b90:	2380      	movs	r3, #128	; 0x80
 8008b92:	021b      	lsls	r3, r3, #8
 8008b94:	61bb      	str	r3, [r7, #24]
        break;
 8008b96:	e006      	b.n	8008ba6 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008b9c:	231e      	movs	r3, #30
 8008b9e:	18fb      	adds	r3, r7, r3
 8008ba0:	2201      	movs	r2, #1
 8008ba2:	701a      	strb	r2, [r3, #0]
        break;
 8008ba4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d01e      	beq.n	8008bea <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	085a      	lsrs	r2, r3, #1
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	18d2      	adds	r2, r2, r3
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	0019      	movs	r1, r3
 8008bbc:	0010      	movs	r0, r2
 8008bbe:	f7f7 fab5 	bl	800012c <__udivsi3>
 8008bc2:	0003      	movs	r3, r0
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	2b0f      	cmp	r3, #15
 8008bcc:	d909      	bls.n	8008be2 <UART_SetConfig+0x2ca>
 8008bce:	693a      	ldr	r2, [r7, #16]
 8008bd0:	2380      	movs	r3, #128	; 0x80
 8008bd2:	025b      	lsls	r3, r3, #9
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d204      	bcs.n	8008be2 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	60da      	str	r2, [r3, #12]
 8008be0:	e003      	b.n	8008bea <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8008be2:	231e      	movs	r3, #30
 8008be4:	18fb      	adds	r3, r7, r3
 8008be6:	2201      	movs	r2, #1
 8008be8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008bf6:	231e      	movs	r3, #30
 8008bf8:	18fb      	adds	r3, r7, r3
 8008bfa:	781b      	ldrb	r3, [r3, #0]
}
 8008bfc:	0018      	movs	r0, r3
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	b008      	add	sp, #32
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	efff69f3 	.word	0xefff69f3
 8008c08:	ffffcfff 	.word	0xffffcfff
 8008c0c:	fffff4ff 	.word	0xfffff4ff
 8008c10:	40013800 	.word	0x40013800
 8008c14:	40021000 	.word	0x40021000
 8008c18:	40004400 	.word	0x40004400
 8008c1c:	40004800 	.word	0x40004800
 8008c20:	40004c00 	.word	0x40004c00
 8008c24:	007a1200 	.word	0x007a1200

08008c28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c34:	2201      	movs	r2, #1
 8008c36:	4013      	ands	r3, r2
 8008c38:	d00b      	beq.n	8008c52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	4a4a      	ldr	r2, [pc, #296]	; (8008d6c <UART_AdvFeatureConfig+0x144>)
 8008c42:	4013      	ands	r3, r2
 8008c44:	0019      	movs	r1, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c56:	2202      	movs	r2, #2
 8008c58:	4013      	ands	r3, r2
 8008c5a:	d00b      	beq.n	8008c74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	4a43      	ldr	r2, [pc, #268]	; (8008d70 <UART_AdvFeatureConfig+0x148>)
 8008c64:	4013      	ands	r3, r2
 8008c66:	0019      	movs	r1, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	430a      	orrs	r2, r1
 8008c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c78:	2204      	movs	r2, #4
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	d00b      	beq.n	8008c96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	4a3b      	ldr	r2, [pc, #236]	; (8008d74 <UART_AdvFeatureConfig+0x14c>)
 8008c86:	4013      	ands	r3, r2
 8008c88:	0019      	movs	r1, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	430a      	orrs	r2, r1
 8008c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c9a:	2208      	movs	r2, #8
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	d00b      	beq.n	8008cb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	4a34      	ldr	r2, [pc, #208]	; (8008d78 <UART_AdvFeatureConfig+0x150>)
 8008ca8:	4013      	ands	r3, r2
 8008caa:	0019      	movs	r1, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	430a      	orrs	r2, r1
 8008cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbc:	2210      	movs	r2, #16
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	d00b      	beq.n	8008cda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	4a2c      	ldr	r2, [pc, #176]	; (8008d7c <UART_AdvFeatureConfig+0x154>)
 8008cca:	4013      	ands	r3, r2
 8008ccc:	0019      	movs	r1, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cde:	2220      	movs	r2, #32
 8008ce0:	4013      	ands	r3, r2
 8008ce2:	d00b      	beq.n	8008cfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	4a25      	ldr	r2, [pc, #148]	; (8008d80 <UART_AdvFeatureConfig+0x158>)
 8008cec:	4013      	ands	r3, r2
 8008cee:	0019      	movs	r1, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	430a      	orrs	r2, r1
 8008cfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d00:	2240      	movs	r2, #64	; 0x40
 8008d02:	4013      	ands	r3, r2
 8008d04:	d01d      	beq.n	8008d42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	4a1d      	ldr	r2, [pc, #116]	; (8008d84 <UART_AdvFeatureConfig+0x15c>)
 8008d0e:	4013      	ands	r3, r2
 8008d10:	0019      	movs	r1, r3
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	430a      	orrs	r2, r1
 8008d1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d22:	2380      	movs	r3, #128	; 0x80
 8008d24:	035b      	lsls	r3, r3, #13
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d10b      	bne.n	8008d42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	4a15      	ldr	r2, [pc, #84]	; (8008d88 <UART_AdvFeatureConfig+0x160>)
 8008d32:	4013      	ands	r3, r2
 8008d34:	0019      	movs	r1, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	430a      	orrs	r2, r1
 8008d40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d46:	2280      	movs	r2, #128	; 0x80
 8008d48:	4013      	ands	r3, r2
 8008d4a:	d00b      	beq.n	8008d64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	4a0e      	ldr	r2, [pc, #56]	; (8008d8c <UART_AdvFeatureConfig+0x164>)
 8008d54:	4013      	ands	r3, r2
 8008d56:	0019      	movs	r1, r3
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	430a      	orrs	r2, r1
 8008d62:	605a      	str	r2, [r3, #4]
  }
}
 8008d64:	46c0      	nop			; (mov r8, r8)
 8008d66:	46bd      	mov	sp, r7
 8008d68:	b002      	add	sp, #8
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	fffdffff 	.word	0xfffdffff
 8008d70:	fffeffff 	.word	0xfffeffff
 8008d74:	fffbffff 	.word	0xfffbffff
 8008d78:	ffff7fff 	.word	0xffff7fff
 8008d7c:	ffffefff 	.word	0xffffefff
 8008d80:	ffffdfff 	.word	0xffffdfff
 8008d84:	ffefffff 	.word	0xffefffff
 8008d88:	ff9fffff 	.word	0xff9fffff
 8008d8c:	fff7ffff 	.word	0xfff7ffff

08008d90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b086      	sub	sp, #24
 8008d94:	af02      	add	r7, sp, #8
 8008d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2280      	movs	r2, #128	; 0x80
 8008d9c:	2100      	movs	r1, #0
 8008d9e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008da0:	f7fa fb00 	bl	80033a4 <HAL_GetTick>
 8008da4:	0003      	movs	r3, r0
 8008da6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2208      	movs	r2, #8
 8008db0:	4013      	ands	r3, r2
 8008db2:	2b08      	cmp	r3, #8
 8008db4:	d10c      	bne.n	8008dd0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2280      	movs	r2, #128	; 0x80
 8008dba:	0391      	lsls	r1, r2, #14
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	4a17      	ldr	r2, [pc, #92]	; (8008e1c <UART_CheckIdleState+0x8c>)
 8008dc0:	9200      	str	r2, [sp, #0]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	f000 f82c 	bl	8008e20 <UART_WaitOnFlagUntilTimeout>
 8008dc8:	1e03      	subs	r3, r0, #0
 8008dca:	d001      	beq.n	8008dd0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dcc:	2303      	movs	r3, #3
 8008dce:	e021      	b.n	8008e14 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2204      	movs	r2, #4
 8008dd8:	4013      	ands	r3, r2
 8008dda:	2b04      	cmp	r3, #4
 8008ddc:	d10c      	bne.n	8008df8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2280      	movs	r2, #128	; 0x80
 8008de2:	03d1      	lsls	r1, r2, #15
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	4a0d      	ldr	r2, [pc, #52]	; (8008e1c <UART_CheckIdleState+0x8c>)
 8008de8:	9200      	str	r2, [sp, #0]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f000 f818 	bl	8008e20 <UART_WaitOnFlagUntilTimeout>
 8008df0:	1e03      	subs	r3, r0, #0
 8008df2:	d001      	beq.n	8008df8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008df4:	2303      	movs	r3, #3
 8008df6:	e00d      	b.n	8008e14 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2220      	movs	r2, #32
 8008dfc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2220      	movs	r2, #32
 8008e02:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2274      	movs	r2, #116	; 0x74
 8008e0e:	2100      	movs	r1, #0
 8008e10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	0018      	movs	r0, r3
 8008e16:	46bd      	mov	sp, r7
 8008e18:	b004      	add	sp, #16
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	01ffffff 	.word	0x01ffffff

08008e20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b094      	sub	sp, #80	; 0x50
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	603b      	str	r3, [r7, #0]
 8008e2c:	1dfb      	adds	r3, r7, #7
 8008e2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e30:	e0a3      	b.n	8008f7a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e34:	3301      	adds	r3, #1
 8008e36:	d100      	bne.n	8008e3a <UART_WaitOnFlagUntilTimeout+0x1a>
 8008e38:	e09f      	b.n	8008f7a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e3a:	f7fa fab3 	bl	80033a4 <HAL_GetTick>
 8008e3e:	0002      	movs	r2, r0
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d302      	bcc.n	8008e50 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d13d      	bne.n	8008ecc <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e50:	f3ef 8310 	mrs	r3, PRIMASK
 8008e54:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e58:	647b      	str	r3, [r7, #68]	; 0x44
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e60:	f383 8810 	msr	PRIMASK, r3
}
 8008e64:	46c0      	nop			; (mov r8, r8)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	494c      	ldr	r1, [pc, #304]	; (8008fa4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008e72:	400a      	ands	r2, r1
 8008e74:	601a      	str	r2, [r3, #0]
 8008e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e78:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e7c:	f383 8810 	msr	PRIMASK, r3
}
 8008e80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e82:	f3ef 8310 	mrs	r3, PRIMASK
 8008e86:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e8a:	643b      	str	r3, [r7, #64]	; 0x40
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e92:	f383 8810 	msr	PRIMASK, r3
}
 8008e96:	46c0      	nop			; (mov r8, r8)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	689a      	ldr	r2, [r3, #8]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2101      	movs	r1, #1
 8008ea4:	438a      	bics	r2, r1
 8008ea6:	609a      	str	r2, [r3, #8]
 8008ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008eae:	f383 8810 	msr	PRIMASK, r3
}
 8008eb2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2220      	movs	r2, #32
 8008eb8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2220      	movs	r2, #32
 8008ebe:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2274      	movs	r2, #116	; 0x74
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e067      	b.n	8008f9c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2204      	movs	r2, #4
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	d050      	beq.n	8008f7a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	69da      	ldr	r2, [r3, #28]
 8008ede:	2380      	movs	r3, #128	; 0x80
 8008ee0:	011b      	lsls	r3, r3, #4
 8008ee2:	401a      	ands	r2, r3
 8008ee4:	2380      	movs	r3, #128	; 0x80
 8008ee6:	011b      	lsls	r3, r3, #4
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d146      	bne.n	8008f7a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2280      	movs	r2, #128	; 0x80
 8008ef2:	0112      	lsls	r2, r2, #4
 8008ef4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8008efa:	613b      	str	r3, [r7, #16]
  return(result);
 8008efc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f00:	2301      	movs	r3, #1
 8008f02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	f383 8810 	msr	PRIMASK, r3
}
 8008f0a:	46c0      	nop			; (mov r8, r8)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4923      	ldr	r1, [pc, #140]	; (8008fa4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008f18:	400a      	ands	r2, r1
 8008f1a:	601a      	str	r2, [r3, #0]
 8008f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	f383 8810 	msr	PRIMASK, r3
}
 8008f26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f28:	f3ef 8310 	mrs	r3, PRIMASK
 8008f2c:	61fb      	str	r3, [r7, #28]
  return(result);
 8008f2e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f30:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f32:	2301      	movs	r3, #1
 8008f34:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f36:	6a3b      	ldr	r3, [r7, #32]
 8008f38:	f383 8810 	msr	PRIMASK, r3
}
 8008f3c:	46c0      	nop			; (mov r8, r8)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	689a      	ldr	r2, [r3, #8]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2101      	movs	r1, #1
 8008f4a:	438a      	bics	r2, r1
 8008f4c:	609a      	str	r2, [r3, #8]
 8008f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f50:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f54:	f383 8810 	msr	PRIMASK, r3
}
 8008f58:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2220      	movs	r2, #32
 8008f5e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2220      	movs	r2, #32
 8008f64:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2280      	movs	r2, #128	; 0x80
 8008f6a:	2120      	movs	r1, #32
 8008f6c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2274      	movs	r2, #116	; 0x74
 8008f72:	2100      	movs	r1, #0
 8008f74:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008f76:	2303      	movs	r3, #3
 8008f78:	e010      	b.n	8008f9c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	69db      	ldr	r3, [r3, #28]
 8008f80:	68ba      	ldr	r2, [r7, #8]
 8008f82:	4013      	ands	r3, r2
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	425a      	negs	r2, r3
 8008f8a:	4153      	adcs	r3, r2
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	001a      	movs	r2, r3
 8008f90:	1dfb      	adds	r3, r7, #7
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d100      	bne.n	8008f9a <UART_WaitOnFlagUntilTimeout+0x17a>
 8008f98:	e74b      	b.n	8008e32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	0018      	movs	r0, r3
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	b014      	add	sp, #80	; 0x50
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	fffffe5f 	.word	0xfffffe5f

08008fa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b08e      	sub	sp, #56	; 0x38
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fb0:	f3ef 8310 	mrs	r3, PRIMASK
 8008fb4:	617b      	str	r3, [r7, #20]
  return(result);
 8008fb6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fb8:	637b      	str	r3, [r7, #52]	; 0x34
 8008fba:	2301      	movs	r3, #1
 8008fbc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	f383 8810 	msr	PRIMASK, r3
}
 8008fc4:	46c0      	nop			; (mov r8, r8)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4925      	ldr	r1, [pc, #148]	; (8009068 <UART_EndRxTransfer+0xc0>)
 8008fd2:	400a      	ands	r2, r1
 8008fd4:	601a      	str	r2, [r3, #0]
 8008fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	f383 8810 	msr	PRIMASK, r3
}
 8008fe0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8008fe6:	623b      	str	r3, [r7, #32]
  return(result);
 8008fe8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fea:	633b      	str	r3, [r7, #48]	; 0x30
 8008fec:	2301      	movs	r3, #1
 8008fee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	f383 8810 	msr	PRIMASK, r3
}
 8008ff6:	46c0      	nop			; (mov r8, r8)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	689a      	ldr	r2, [r3, #8]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2101      	movs	r1, #1
 8009004:	438a      	bics	r2, r1
 8009006:	609a      	str	r2, [r3, #8]
 8009008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800900c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900e:	f383 8810 	msr	PRIMASK, r3
}
 8009012:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009018:	2b01      	cmp	r3, #1
 800901a:	d118      	bne.n	800904e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800901c:	f3ef 8310 	mrs	r3, PRIMASK
 8009020:	60bb      	str	r3, [r7, #8]
  return(result);
 8009022:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009026:	2301      	movs	r3, #1
 8009028:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f383 8810 	msr	PRIMASK, r3
}
 8009030:	46c0      	nop			; (mov r8, r8)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2110      	movs	r1, #16
 800903e:	438a      	bics	r2, r1
 8009040:	601a      	str	r2, [r3, #0]
 8009042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009044:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	f383 8810 	msr	PRIMASK, r3
}
 800904c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2220      	movs	r2, #32
 8009052:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009060:	46c0      	nop			; (mov r8, r8)
 8009062:	46bd      	mov	sp, r7
 8009064:	b00e      	add	sp, #56	; 0x38
 8009066:	bd80      	pop	{r7, pc}
 8009068:	fffffedf 	.word	0xfffffedf

0800906c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009078:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	225a      	movs	r2, #90	; 0x5a
 800907e:	2100      	movs	r1, #0
 8009080:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2252      	movs	r2, #82	; 0x52
 8009086:	2100      	movs	r1, #0
 8009088:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	0018      	movs	r0, r3
 800908e:	f7ff fc2f 	bl	80088f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009092:	46c0      	nop			; (mov r8, r8)
 8009094:	46bd      	mov	sp, r7
 8009096:	b004      	add	sp, #16
 8009098:	bd80      	pop	{r7, pc}

0800909a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b086      	sub	sp, #24
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090a2:	f3ef 8310 	mrs	r3, PRIMASK
 80090a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80090a8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090aa:	617b      	str	r3, [r7, #20]
 80090ac:	2301      	movs	r3, #1
 80090ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f383 8810 	msr	PRIMASK, r3
}
 80090b6:	46c0      	nop			; (mov r8, r8)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2140      	movs	r1, #64	; 0x40
 80090c4:	438a      	bics	r2, r1
 80090c6:	601a      	str	r2, [r3, #0]
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	f383 8810 	msr	PRIMASK, r3
}
 80090d2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2220      	movs	r2, #32
 80090d8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	0018      	movs	r0, r3
 80090e4:	f7ff fbfc 	bl	80088e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090e8:	46c0      	nop			; (mov r8, r8)
 80090ea:	46bd      	mov	sp, r7
 80090ec:	b006      	add	sp, #24
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80090f8:	46c0      	nop			; (mov r8, r8)
 80090fa:	46bd      	mov	sp, r7
 80090fc:	b002      	add	sp, #8
 80090fe:	bd80      	pop	{r7, pc}

08009100 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2244      	movs	r2, #68	; 0x44
 800910c:	2100      	movs	r1, #0
 800910e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009110:	4b05      	ldr	r3, [pc, #20]	; (8009128 <USB_EnableGlobalInt+0x28>)
 8009112:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	b299      	uxth	r1, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2240      	movs	r2, #64	; 0x40
 800911c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	0018      	movs	r0, r3
 8009122:	46bd      	mov	sp, r7
 8009124:	b004      	add	sp, #16
 8009126:	bd80      	pop	{r7, pc}
 8009128:	0000bf80 	.word	0x0000bf80

0800912c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009134:	4b09      	ldr	r3, [pc, #36]	; (800915c <USB_DisableGlobalInt+0x30>)
 8009136:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2240      	movs	r2, #64	; 0x40
 800913c:	5a9b      	ldrh	r3, [r3, r2]
 800913e:	b29b      	uxth	r3, r3
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	b292      	uxth	r2, r2
 8009144:	43d2      	mvns	r2, r2
 8009146:	b292      	uxth	r2, r2
 8009148:	4013      	ands	r3, r2
 800914a:	b299      	uxth	r1, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2240      	movs	r2, #64	; 0x40
 8009150:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	0018      	movs	r0, r3
 8009156:	46bd      	mov	sp, r7
 8009158:	b004      	add	sp, #16
 800915a:	bd80      	pop	{r7, pc}
 800915c:	0000bf80 	.word	0x0000bf80

08009160 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009160:	b084      	sub	sp, #16
 8009162:	b590      	push	{r4, r7, lr}
 8009164:	b083      	sub	sp, #12
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	2004      	movs	r0, #4
 800916c:	2410      	movs	r4, #16
 800916e:	1900      	adds	r0, r0, r4
 8009170:	2408      	movs	r4, #8
 8009172:	46a4      	mov	ip, r4
 8009174:	44bc      	add	ip, r7
 8009176:	4460      	add	r0, ip
 8009178:	6001      	str	r1, [r0, #0]
 800917a:	6042      	str	r2, [r0, #4]
 800917c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2240      	movs	r2, #64	; 0x40
 8009182:	2101      	movs	r1, #1
 8009184:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2240      	movs	r2, #64	; 0x40
 800918a:	2100      	movs	r1, #0
 800918c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2244      	movs	r2, #68	; 0x44
 8009192:	2100      	movs	r1, #0
 8009194:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2250      	movs	r2, #80	; 0x50
 800919a:	2100      	movs	r1, #0
 800919c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	0018      	movs	r0, r3
 80091a2:	46bd      	mov	sp, r7
 80091a4:	b003      	add	sp, #12
 80091a6:	bc90      	pop	{r4, r7}
 80091a8:	bc08      	pop	{r3}
 80091aa:	b004      	add	sp, #16
 80091ac:	4718      	bx	r3
	...

080091b0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b09c      	sub	sp, #112	; 0x70
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80091ba:	236f      	movs	r3, #111	; 0x6f
 80091bc:	18fb      	adds	r3, r7, r3
 80091be:	2200      	movs	r2, #0
 80091c0:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	18d3      	adds	r3, r2, r3
 80091cc:	881b      	ldrh	r3, [r3, #0]
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	236c      	movs	r3, #108	; 0x6c
 80091d2:	18fb      	adds	r3, r7, r3
 80091d4:	49cf      	ldr	r1, [pc, #828]	; (8009514 <USB_ActivateEndpoint+0x364>)
 80091d6:	400a      	ands	r2, r1
 80091d8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	78db      	ldrb	r3, [r3, #3]
 80091de:	2b03      	cmp	r3, #3
 80091e0:	d017      	beq.n	8009212 <USB_ActivateEndpoint+0x62>
 80091e2:	dc28      	bgt.n	8009236 <USB_ActivateEndpoint+0x86>
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d00e      	beq.n	8009206 <USB_ActivateEndpoint+0x56>
 80091e8:	dc25      	bgt.n	8009236 <USB_ActivateEndpoint+0x86>
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d002      	beq.n	80091f4 <USB_ActivateEndpoint+0x44>
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d018      	beq.n	8009224 <USB_ActivateEndpoint+0x74>
 80091f2:	e020      	b.n	8009236 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80091f4:	226c      	movs	r2, #108	; 0x6c
 80091f6:	18bb      	adds	r3, r7, r2
 80091f8:	18ba      	adds	r2, r7, r2
 80091fa:	8812      	ldrh	r2, [r2, #0]
 80091fc:	2180      	movs	r1, #128	; 0x80
 80091fe:	0089      	lsls	r1, r1, #2
 8009200:	430a      	orrs	r2, r1
 8009202:	801a      	strh	r2, [r3, #0]
      break;
 8009204:	e01c      	b.n	8009240 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8009206:	226c      	movs	r2, #108	; 0x6c
 8009208:	18bb      	adds	r3, r7, r2
 800920a:	18ba      	adds	r2, r7, r2
 800920c:	8812      	ldrh	r2, [r2, #0]
 800920e:	801a      	strh	r2, [r3, #0]
      break;
 8009210:	e016      	b.n	8009240 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8009212:	226c      	movs	r2, #108	; 0x6c
 8009214:	18bb      	adds	r3, r7, r2
 8009216:	18ba      	adds	r2, r7, r2
 8009218:	8812      	ldrh	r2, [r2, #0]
 800921a:	21c0      	movs	r1, #192	; 0xc0
 800921c:	00c9      	lsls	r1, r1, #3
 800921e:	430a      	orrs	r2, r1
 8009220:	801a      	strh	r2, [r3, #0]
      break;
 8009222:	e00d      	b.n	8009240 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009224:	226c      	movs	r2, #108	; 0x6c
 8009226:	18bb      	adds	r3, r7, r2
 8009228:	18ba      	adds	r2, r7, r2
 800922a:	8812      	ldrh	r2, [r2, #0]
 800922c:	2180      	movs	r1, #128	; 0x80
 800922e:	00c9      	lsls	r1, r1, #3
 8009230:	430a      	orrs	r2, r1
 8009232:	801a      	strh	r2, [r3, #0]
      break;
 8009234:	e004      	b.n	8009240 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8009236:	236f      	movs	r3, #111	; 0x6f
 8009238:	18fb      	adds	r3, r7, r3
 800923a:	2201      	movs	r2, #1
 800923c:	701a      	strb	r2, [r3, #0]
      break;
 800923e:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	18d3      	adds	r3, r2, r3
 800924a:	226c      	movs	r2, #108	; 0x6c
 800924c:	18ba      	adds	r2, r7, r2
 800924e:	8812      	ldrh	r2, [r2, #0]
 8009250:	49b1      	ldr	r1, [pc, #708]	; (8009518 <USB_ActivateEndpoint+0x368>)
 8009252:	430a      	orrs	r2, r1
 8009254:	b292      	uxth	r2, r2
 8009256:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	18d3      	adds	r3, r2, r3
 8009262:	881b      	ldrh	r3, [r3, #0]
 8009264:	b29b      	uxth	r3, r3
 8009266:	b21b      	sxth	r3, r3
 8009268:	4aac      	ldr	r2, [pc, #688]	; (800951c <USB_ActivateEndpoint+0x36c>)
 800926a:	4013      	ands	r3, r2
 800926c:	b21a      	sxth	r2, r3
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	b21b      	sxth	r3, r3
 8009274:	4313      	orrs	r3, r2
 8009276:	b21a      	sxth	r2, r3
 8009278:	2166      	movs	r1, #102	; 0x66
 800927a:	187b      	adds	r3, r7, r1
 800927c:	801a      	strh	r2, [r3, #0]
 800927e:	687a      	ldr	r2, [r7, #4]
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	18d3      	adds	r3, r2, r3
 8009288:	187a      	adds	r2, r7, r1
 800928a:	8812      	ldrh	r2, [r2, #0]
 800928c:	49a2      	ldr	r1, [pc, #648]	; (8009518 <USB_ActivateEndpoint+0x368>)
 800928e:	430a      	orrs	r2, r1
 8009290:	b292      	uxth	r2, r2
 8009292:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	7b1b      	ldrb	r3, [r3, #12]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d000      	beq.n	800929e <USB_ActivateEndpoint+0xee>
 800929c:	e150      	b.n	8009540 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	785b      	ldrb	r3, [r3, #1]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d100      	bne.n	80092a8 <USB_ActivateEndpoint+0xf8>
 80092a6:	e07a      	b.n	800939e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	61bb      	str	r3, [r7, #24]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2250      	movs	r2, #80	; 0x50
 80092b0:	5a9b      	ldrh	r3, [r3, r2]
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	001a      	movs	r2, r3
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	189b      	adds	r3, r3, r2
 80092ba:	61bb      	str	r3, [r7, #24]
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	00da      	lsls	r2, r3, #3
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	18d3      	adds	r3, r2, r3
 80092c6:	2280      	movs	r2, #128	; 0x80
 80092c8:	00d2      	lsls	r2, r2, #3
 80092ca:	4694      	mov	ip, r2
 80092cc:	4463      	add	r3, ip
 80092ce:	617b      	str	r3, [r7, #20]
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	88db      	ldrh	r3, [r3, #6]
 80092d4:	085b      	lsrs	r3, r3, #1
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	18db      	adds	r3, r3, r3
 80092da:	b29a      	uxth	r2, r3
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	18d2      	adds	r2, r2, r3
 80092ea:	2112      	movs	r1, #18
 80092ec:	187b      	adds	r3, r7, r1
 80092ee:	8812      	ldrh	r2, [r2, #0]
 80092f0:	801a      	strh	r2, [r3, #0]
 80092f2:	187b      	adds	r3, r7, r1
 80092f4:	881b      	ldrh	r3, [r3, #0]
 80092f6:	2240      	movs	r2, #64	; 0x40
 80092f8:	4013      	ands	r3, r2
 80092fa:	d016      	beq.n	800932a <USB_ActivateEndpoint+0x17a>
 80092fc:	687a      	ldr	r2, [r7, #4]
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	009b      	lsls	r3, r3, #2
 8009304:	18d3      	adds	r3, r2, r3
 8009306:	881b      	ldrh	r3, [r3, #0]
 8009308:	b29a      	uxth	r2, r3
 800930a:	2010      	movs	r0, #16
 800930c:	183b      	adds	r3, r7, r0
 800930e:	4983      	ldr	r1, [pc, #524]	; (800951c <USB_ActivateEndpoint+0x36c>)
 8009310:	400a      	ands	r2, r1
 8009312:	801a      	strh	r2, [r3, #0]
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	18d3      	adds	r3, r2, r3
 800931e:	183a      	adds	r2, r7, r0
 8009320:	8812      	ldrh	r2, [r2, #0]
 8009322:	497f      	ldr	r1, [pc, #508]	; (8009520 <USB_ActivateEndpoint+0x370>)
 8009324:	430a      	orrs	r2, r1
 8009326:	b292      	uxth	r2, r2
 8009328:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	78db      	ldrb	r3, [r3, #3]
 800932e:	2b01      	cmp	r3, #1
 8009330:	d01d      	beq.n	800936e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	18d3      	adds	r3, r2, r3
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	b29a      	uxth	r2, r3
 8009340:	200c      	movs	r0, #12
 8009342:	183b      	adds	r3, r7, r0
 8009344:	4977      	ldr	r1, [pc, #476]	; (8009524 <USB_ActivateEndpoint+0x374>)
 8009346:	400a      	ands	r2, r1
 8009348:	801a      	strh	r2, [r3, #0]
 800934a:	183b      	adds	r3, r7, r0
 800934c:	183a      	adds	r2, r7, r0
 800934e:	8812      	ldrh	r2, [r2, #0]
 8009350:	2120      	movs	r1, #32
 8009352:	404a      	eors	r2, r1
 8009354:	801a      	strh	r2, [r3, #0]
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	18d3      	adds	r3, r2, r3
 8009360:	183a      	adds	r2, r7, r0
 8009362:	8812      	ldrh	r2, [r2, #0]
 8009364:	496c      	ldr	r1, [pc, #432]	; (8009518 <USB_ActivateEndpoint+0x368>)
 8009366:	430a      	orrs	r2, r1
 8009368:	b292      	uxth	r2, r2
 800936a:	801a      	strh	r2, [r3, #0]
 800936c:	e27a      	b.n	8009864 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	18d3      	adds	r3, r2, r3
 8009378:	881b      	ldrh	r3, [r3, #0]
 800937a:	b29a      	uxth	r2, r3
 800937c:	200e      	movs	r0, #14
 800937e:	183b      	adds	r3, r7, r0
 8009380:	4968      	ldr	r1, [pc, #416]	; (8009524 <USB_ActivateEndpoint+0x374>)
 8009382:	400a      	ands	r2, r1
 8009384:	801a      	strh	r2, [r3, #0]
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	18d3      	adds	r3, r2, r3
 8009390:	183a      	adds	r2, r7, r0
 8009392:	8812      	ldrh	r2, [r2, #0]
 8009394:	4960      	ldr	r1, [pc, #384]	; (8009518 <USB_ActivateEndpoint+0x368>)
 8009396:	430a      	orrs	r2, r1
 8009398:	b292      	uxth	r2, r2
 800939a:	801a      	strh	r2, [r3, #0]
 800939c:	e262      	b.n	8009864 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	633b      	str	r3, [r7, #48]	; 0x30
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2250      	movs	r2, #80	; 0x50
 80093a6:	5a9b      	ldrh	r3, [r3, r2]
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	001a      	movs	r2, r3
 80093ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ae:	189b      	adds	r3, r3, r2
 80093b0:	633b      	str	r3, [r7, #48]	; 0x30
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	00da      	lsls	r2, r3, #3
 80093b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ba:	18d3      	adds	r3, r2, r3
 80093bc:	4a5a      	ldr	r2, [pc, #360]	; (8009528 <USB_ActivateEndpoint+0x378>)
 80093be:	4694      	mov	ip, r2
 80093c0:	4463      	add	r3, ip
 80093c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	88db      	ldrh	r3, [r3, #6]
 80093c8:	085b      	lsrs	r3, r3, #1
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	18db      	adds	r3, r3, r3
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2250      	movs	r2, #80	; 0x50
 80093dc:	5a9b      	ldrh	r3, [r3, r2]
 80093de:	b29b      	uxth	r3, r3
 80093e0:	001a      	movs	r2, r3
 80093e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e4:	189b      	adds	r3, r3, r2
 80093e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	00da      	lsls	r2, r3, #3
 80093ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f0:	18d3      	adds	r3, r2, r3
 80093f2:	4a4e      	ldr	r2, [pc, #312]	; (800952c <USB_ActivateEndpoint+0x37c>)
 80093f4:	4694      	mov	ip, r2
 80093f6:	4463      	add	r3, ip
 80093f8:	627b      	str	r3, [r7, #36]	; 0x24
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d110      	bne.n	8009424 <USB_ActivateEndpoint+0x274>
 8009402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009404:	881b      	ldrh	r3, [r3, #0]
 8009406:	b29b      	uxth	r3, r3
 8009408:	4a49      	ldr	r2, [pc, #292]	; (8009530 <USB_ActivateEndpoint+0x380>)
 800940a:	4013      	ands	r3, r2
 800940c:	b29a      	uxth	r2, r3
 800940e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009410:	801a      	strh	r2, [r3, #0]
 8009412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009414:	881b      	ldrh	r3, [r3, #0]
 8009416:	b29b      	uxth	r3, r3
 8009418:	4a46      	ldr	r2, [pc, #280]	; (8009534 <USB_ActivateEndpoint+0x384>)
 800941a:	4313      	orrs	r3, r2
 800941c:	b29a      	uxth	r2, r3
 800941e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009420:	801a      	strh	r2, [r3, #0]
 8009422:	e02b      	b.n	800947c <USB_ActivateEndpoint+0x2cc>
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	2b3e      	cmp	r3, #62	; 0x3e
 800942a:	d812      	bhi.n	8009452 <USB_ActivateEndpoint+0x2a2>
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	085b      	lsrs	r3, r3, #1
 8009432:	66bb      	str	r3, [r7, #104]	; 0x68
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	2201      	movs	r2, #1
 800943a:	4013      	ands	r3, r2
 800943c:	d002      	beq.n	8009444 <USB_ActivateEndpoint+0x294>
 800943e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009440:	3301      	adds	r3, #1
 8009442:	66bb      	str	r3, [r7, #104]	; 0x68
 8009444:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009446:	b29b      	uxth	r3, r3
 8009448:	029b      	lsls	r3, r3, #10
 800944a:	b29a      	uxth	r2, r3
 800944c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944e:	801a      	strh	r2, [r3, #0]
 8009450:	e014      	b.n	800947c <USB_ActivateEndpoint+0x2cc>
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	095b      	lsrs	r3, r3, #5
 8009458:	66bb      	str	r3, [r7, #104]	; 0x68
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	221f      	movs	r2, #31
 8009460:	4013      	ands	r3, r2
 8009462:	d102      	bne.n	800946a <USB_ActivateEndpoint+0x2ba>
 8009464:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009466:	3b01      	subs	r3, #1
 8009468:	66bb      	str	r3, [r7, #104]	; 0x68
 800946a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800946c:	b29b      	uxth	r3, r3
 800946e:	029b      	lsls	r3, r3, #10
 8009470:	b29b      	uxth	r3, r3
 8009472:	4a30      	ldr	r2, [pc, #192]	; (8009534 <USB_ActivateEndpoint+0x384>)
 8009474:	4313      	orrs	r3, r2
 8009476:	b29a      	uxth	r2, r3
 8009478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800947c:	687a      	ldr	r2, [r7, #4]
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	18d2      	adds	r2, r2, r3
 8009486:	2122      	movs	r1, #34	; 0x22
 8009488:	187b      	adds	r3, r7, r1
 800948a:	8812      	ldrh	r2, [r2, #0]
 800948c:	801a      	strh	r2, [r3, #0]
 800948e:	187b      	adds	r3, r7, r1
 8009490:	881a      	ldrh	r2, [r3, #0]
 8009492:	2380      	movs	r3, #128	; 0x80
 8009494:	01db      	lsls	r3, r3, #7
 8009496:	4013      	ands	r3, r2
 8009498:	d016      	beq.n	80094c8 <USB_ActivateEndpoint+0x318>
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	18d3      	adds	r3, r2, r3
 80094a4:	881b      	ldrh	r3, [r3, #0]
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	2020      	movs	r0, #32
 80094aa:	183b      	adds	r3, r7, r0
 80094ac:	491b      	ldr	r1, [pc, #108]	; (800951c <USB_ActivateEndpoint+0x36c>)
 80094ae:	400a      	ands	r2, r1
 80094b0:	801a      	strh	r2, [r3, #0]
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	18d3      	adds	r3, r2, r3
 80094bc:	183a      	adds	r2, r7, r0
 80094be:	8812      	ldrh	r2, [r2, #0]
 80094c0:	491d      	ldr	r1, [pc, #116]	; (8009538 <USB_ActivateEndpoint+0x388>)
 80094c2:	430a      	orrs	r2, r1
 80094c4:	b292      	uxth	r2, r2
 80094c6:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	18d3      	adds	r3, r2, r3
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	201e      	movs	r0, #30
 80094d8:	183b      	adds	r3, r7, r0
 80094da:	4918      	ldr	r1, [pc, #96]	; (800953c <USB_ActivateEndpoint+0x38c>)
 80094dc:	400a      	ands	r2, r1
 80094de:	801a      	strh	r2, [r3, #0]
 80094e0:	183b      	adds	r3, r7, r0
 80094e2:	183a      	adds	r2, r7, r0
 80094e4:	8812      	ldrh	r2, [r2, #0]
 80094e6:	2180      	movs	r1, #128	; 0x80
 80094e8:	0149      	lsls	r1, r1, #5
 80094ea:	404a      	eors	r2, r1
 80094ec:	801a      	strh	r2, [r3, #0]
 80094ee:	183b      	adds	r3, r7, r0
 80094f0:	183a      	adds	r2, r7, r0
 80094f2:	8812      	ldrh	r2, [r2, #0]
 80094f4:	2180      	movs	r1, #128	; 0x80
 80094f6:	0189      	lsls	r1, r1, #6
 80094f8:	404a      	eors	r2, r1
 80094fa:	801a      	strh	r2, [r3, #0]
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	18d3      	adds	r3, r2, r3
 8009506:	183a      	adds	r2, r7, r0
 8009508:	8812      	ldrh	r2, [r2, #0]
 800950a:	4903      	ldr	r1, [pc, #12]	; (8009518 <USB_ActivateEndpoint+0x368>)
 800950c:	430a      	orrs	r2, r1
 800950e:	b292      	uxth	r2, r2
 8009510:	801a      	strh	r2, [r3, #0]
 8009512:	e1a7      	b.n	8009864 <USB_ActivateEndpoint+0x6b4>
 8009514:	ffff898f 	.word	0xffff898f
 8009518:	ffff8080 	.word	0xffff8080
 800951c:	ffff8f8f 	.word	0xffff8f8f
 8009520:	ffff80c0 	.word	0xffff80c0
 8009524:	ffff8fbf 	.word	0xffff8fbf
 8009528:	00000404 	.word	0x00000404
 800952c:	00000406 	.word	0x00000406
 8009530:	ffff83ff 	.word	0xffff83ff
 8009534:	ffff8000 	.word	0xffff8000
 8009538:	ffffc080 	.word	0xffffc080
 800953c:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	78db      	ldrb	r3, [r3, #3]
 8009544:	2b02      	cmp	r3, #2
 8009546:	d117      	bne.n	8009578 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	18d3      	adds	r3, r2, r3
 8009552:	881b      	ldrh	r3, [r3, #0]
 8009554:	b29a      	uxth	r2, r3
 8009556:	2062      	movs	r0, #98	; 0x62
 8009558:	183b      	adds	r3, r7, r0
 800955a:	49c6      	ldr	r1, [pc, #792]	; (8009874 <USB_ActivateEndpoint+0x6c4>)
 800955c:	400a      	ands	r2, r1
 800955e:	801a      	strh	r2, [r3, #0]
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	18d3      	adds	r3, r2, r3
 800956a:	183a      	adds	r2, r7, r0
 800956c:	8812      	ldrh	r2, [r2, #0]
 800956e:	49c2      	ldr	r1, [pc, #776]	; (8009878 <USB_ActivateEndpoint+0x6c8>)
 8009570:	430a      	orrs	r2, r1
 8009572:	b292      	uxth	r2, r2
 8009574:	801a      	strh	r2, [r3, #0]
 8009576:	e016      	b.n	80095a6 <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	18d3      	adds	r3, r2, r3
 8009582:	881b      	ldrh	r3, [r3, #0]
 8009584:	b29a      	uxth	r2, r3
 8009586:	2064      	movs	r0, #100	; 0x64
 8009588:	183b      	adds	r3, r7, r0
 800958a:	49bc      	ldr	r1, [pc, #752]	; (800987c <USB_ActivateEndpoint+0x6cc>)
 800958c:	400a      	ands	r2, r1
 800958e:	801a      	strh	r2, [r3, #0]
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	18d3      	adds	r3, r2, r3
 800959a:	183a      	adds	r2, r7, r0
 800959c:	8812      	ldrh	r2, [r2, #0]
 800959e:	49b8      	ldr	r1, [pc, #736]	; (8009880 <USB_ActivateEndpoint+0x6d0>)
 80095a0:	430a      	orrs	r2, r1
 80095a2:	b292      	uxth	r2, r2
 80095a4:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2250      	movs	r2, #80	; 0x50
 80095ae:	5a9b      	ldrh	r3, [r3, r2]
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	001a      	movs	r2, r3
 80095b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095b6:	189b      	adds	r3, r3, r2
 80095b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	00da      	lsls	r2, r3, #3
 80095c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095c2:	18d3      	adds	r3, r2, r3
 80095c4:	2280      	movs	r2, #128	; 0x80
 80095c6:	00d2      	lsls	r2, r2, #3
 80095c8:	4694      	mov	ip, r2
 80095ca:	4463      	add	r3, ip
 80095cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	891b      	ldrh	r3, [r3, #8]
 80095d2:	085b      	lsrs	r3, r3, #1
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	18db      	adds	r3, r3, r3
 80095d8:	b29a      	uxth	r2, r3
 80095da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095dc:	801a      	strh	r2, [r3, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	657b      	str	r3, [r7, #84]	; 0x54
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2250      	movs	r2, #80	; 0x50
 80095e6:	5a9b      	ldrh	r3, [r3, r2]
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	001a      	movs	r2, r3
 80095ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095ee:	189b      	adds	r3, r3, r2
 80095f0:	657b      	str	r3, [r7, #84]	; 0x54
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	00da      	lsls	r2, r3, #3
 80095f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095fa:	18d3      	adds	r3, r2, r3
 80095fc:	4aa1      	ldr	r2, [pc, #644]	; (8009884 <USB_ActivateEndpoint+0x6d4>)
 80095fe:	4694      	mov	ip, r2
 8009600:	4463      	add	r3, ip
 8009602:	653b      	str	r3, [r7, #80]	; 0x50
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	895b      	ldrh	r3, [r3, #10]
 8009608:	085b      	lsrs	r3, r3, #1
 800960a:	b29b      	uxth	r3, r3
 800960c:	18db      	adds	r3, r3, r3
 800960e:	b29a      	uxth	r2, r3
 8009610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009612:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	785b      	ldrb	r3, [r3, #1]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d000      	beq.n	800961e <USB_ActivateEndpoint+0x46e>
 800961c:	e087      	b.n	800972e <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	18d2      	adds	r2, r2, r3
 8009628:	2140      	movs	r1, #64	; 0x40
 800962a:	187b      	adds	r3, r7, r1
 800962c:	8812      	ldrh	r2, [r2, #0]
 800962e:	801a      	strh	r2, [r3, #0]
 8009630:	187b      	adds	r3, r7, r1
 8009632:	881a      	ldrh	r2, [r3, #0]
 8009634:	2380      	movs	r3, #128	; 0x80
 8009636:	01db      	lsls	r3, r3, #7
 8009638:	4013      	ands	r3, r2
 800963a:	d016      	beq.n	800966a <USB_ActivateEndpoint+0x4ba>
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	18d3      	adds	r3, r2, r3
 8009646:	881b      	ldrh	r3, [r3, #0]
 8009648:	b29a      	uxth	r2, r3
 800964a:	203e      	movs	r0, #62	; 0x3e
 800964c:	183b      	adds	r3, r7, r0
 800964e:	4989      	ldr	r1, [pc, #548]	; (8009874 <USB_ActivateEndpoint+0x6c4>)
 8009650:	400a      	ands	r2, r1
 8009652:	801a      	strh	r2, [r3, #0]
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	18d3      	adds	r3, r2, r3
 800965e:	183a      	adds	r2, r7, r0
 8009660:	8812      	ldrh	r2, [r2, #0]
 8009662:	4989      	ldr	r1, [pc, #548]	; (8009888 <USB_ActivateEndpoint+0x6d8>)
 8009664:	430a      	orrs	r2, r1
 8009666:	b292      	uxth	r2, r2
 8009668:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	18d2      	adds	r2, r2, r3
 8009674:	213c      	movs	r1, #60	; 0x3c
 8009676:	187b      	adds	r3, r7, r1
 8009678:	8812      	ldrh	r2, [r2, #0]
 800967a:	801a      	strh	r2, [r3, #0]
 800967c:	187b      	adds	r3, r7, r1
 800967e:	881b      	ldrh	r3, [r3, #0]
 8009680:	2240      	movs	r2, #64	; 0x40
 8009682:	4013      	ands	r3, r2
 8009684:	d016      	beq.n	80096b4 <USB_ActivateEndpoint+0x504>
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	18d3      	adds	r3, r2, r3
 8009690:	881b      	ldrh	r3, [r3, #0]
 8009692:	b29a      	uxth	r2, r3
 8009694:	203a      	movs	r0, #58	; 0x3a
 8009696:	183b      	adds	r3, r7, r0
 8009698:	4976      	ldr	r1, [pc, #472]	; (8009874 <USB_ActivateEndpoint+0x6c4>)
 800969a:	400a      	ands	r2, r1
 800969c:	801a      	strh	r2, [r3, #0]
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	18d3      	adds	r3, r2, r3
 80096a8:	183a      	adds	r2, r7, r0
 80096aa:	8812      	ldrh	r2, [r2, #0]
 80096ac:	4977      	ldr	r1, [pc, #476]	; (800988c <USB_ActivateEndpoint+0x6dc>)
 80096ae:	430a      	orrs	r2, r1
 80096b0:	b292      	uxth	r2, r2
 80096b2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	18d3      	adds	r3, r2, r3
 80096be:	881b      	ldrh	r3, [r3, #0]
 80096c0:	b29a      	uxth	r2, r3
 80096c2:	2038      	movs	r0, #56	; 0x38
 80096c4:	183b      	adds	r3, r7, r0
 80096c6:	4972      	ldr	r1, [pc, #456]	; (8009890 <USB_ActivateEndpoint+0x6e0>)
 80096c8:	400a      	ands	r2, r1
 80096ca:	801a      	strh	r2, [r3, #0]
 80096cc:	183b      	adds	r3, r7, r0
 80096ce:	183a      	adds	r2, r7, r0
 80096d0:	8812      	ldrh	r2, [r2, #0]
 80096d2:	2180      	movs	r1, #128	; 0x80
 80096d4:	0149      	lsls	r1, r1, #5
 80096d6:	404a      	eors	r2, r1
 80096d8:	801a      	strh	r2, [r3, #0]
 80096da:	183b      	adds	r3, r7, r0
 80096dc:	183a      	adds	r2, r7, r0
 80096de:	8812      	ldrh	r2, [r2, #0]
 80096e0:	2180      	movs	r1, #128	; 0x80
 80096e2:	0189      	lsls	r1, r1, #6
 80096e4:	404a      	eors	r2, r1
 80096e6:	801a      	strh	r2, [r3, #0]
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	18d3      	adds	r3, r2, r3
 80096f2:	183a      	adds	r2, r7, r0
 80096f4:	8812      	ldrh	r2, [r2, #0]
 80096f6:	4962      	ldr	r1, [pc, #392]	; (8009880 <USB_ActivateEndpoint+0x6d0>)
 80096f8:	430a      	orrs	r2, r1
 80096fa:	b292      	uxth	r2, r2
 80096fc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	18d3      	adds	r3, r2, r3
 8009708:	881b      	ldrh	r3, [r3, #0]
 800970a:	b29a      	uxth	r2, r3
 800970c:	2036      	movs	r0, #54	; 0x36
 800970e:	183b      	adds	r3, r7, r0
 8009710:	4960      	ldr	r1, [pc, #384]	; (8009894 <USB_ActivateEndpoint+0x6e4>)
 8009712:	400a      	ands	r2, r1
 8009714:	801a      	strh	r2, [r3, #0]
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	18d3      	adds	r3, r2, r3
 8009720:	183a      	adds	r2, r7, r0
 8009722:	8812      	ldrh	r2, [r2, #0]
 8009724:	4956      	ldr	r1, [pc, #344]	; (8009880 <USB_ActivateEndpoint+0x6d0>)
 8009726:	430a      	orrs	r2, r1
 8009728:	b292      	uxth	r2, r2
 800972a:	801a      	strh	r2, [r3, #0]
 800972c:	e09a      	b.n	8009864 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	18d2      	adds	r2, r2, r3
 8009738:	214e      	movs	r1, #78	; 0x4e
 800973a:	187b      	adds	r3, r7, r1
 800973c:	8812      	ldrh	r2, [r2, #0]
 800973e:	801a      	strh	r2, [r3, #0]
 8009740:	187b      	adds	r3, r7, r1
 8009742:	881a      	ldrh	r2, [r3, #0]
 8009744:	2380      	movs	r3, #128	; 0x80
 8009746:	01db      	lsls	r3, r3, #7
 8009748:	4013      	ands	r3, r2
 800974a:	d016      	beq.n	800977a <USB_ActivateEndpoint+0x5ca>
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	781b      	ldrb	r3, [r3, #0]
 8009752:	009b      	lsls	r3, r3, #2
 8009754:	18d3      	adds	r3, r2, r3
 8009756:	881b      	ldrh	r3, [r3, #0]
 8009758:	b29a      	uxth	r2, r3
 800975a:	204c      	movs	r0, #76	; 0x4c
 800975c:	183b      	adds	r3, r7, r0
 800975e:	4945      	ldr	r1, [pc, #276]	; (8009874 <USB_ActivateEndpoint+0x6c4>)
 8009760:	400a      	ands	r2, r1
 8009762:	801a      	strh	r2, [r3, #0]
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	18d3      	adds	r3, r2, r3
 800976e:	183a      	adds	r2, r7, r0
 8009770:	8812      	ldrh	r2, [r2, #0]
 8009772:	4945      	ldr	r1, [pc, #276]	; (8009888 <USB_ActivateEndpoint+0x6d8>)
 8009774:	430a      	orrs	r2, r1
 8009776:	b292      	uxth	r2, r2
 8009778:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	18d2      	adds	r2, r2, r3
 8009784:	214a      	movs	r1, #74	; 0x4a
 8009786:	187b      	adds	r3, r7, r1
 8009788:	8812      	ldrh	r2, [r2, #0]
 800978a:	801a      	strh	r2, [r3, #0]
 800978c:	187b      	adds	r3, r7, r1
 800978e:	881b      	ldrh	r3, [r3, #0]
 8009790:	2240      	movs	r2, #64	; 0x40
 8009792:	4013      	ands	r3, r2
 8009794:	d016      	beq.n	80097c4 <USB_ActivateEndpoint+0x614>
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	18d3      	adds	r3, r2, r3
 80097a0:	881b      	ldrh	r3, [r3, #0]
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	2048      	movs	r0, #72	; 0x48
 80097a6:	183b      	adds	r3, r7, r0
 80097a8:	4932      	ldr	r1, [pc, #200]	; (8009874 <USB_ActivateEndpoint+0x6c4>)
 80097aa:	400a      	ands	r2, r1
 80097ac:	801a      	strh	r2, [r3, #0]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	18d3      	adds	r3, r2, r3
 80097b8:	183a      	adds	r2, r7, r0
 80097ba:	8812      	ldrh	r2, [r2, #0]
 80097bc:	4933      	ldr	r1, [pc, #204]	; (800988c <USB_ActivateEndpoint+0x6dc>)
 80097be:	430a      	orrs	r2, r1
 80097c0:	b292      	uxth	r2, r2
 80097c2:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	78db      	ldrb	r3, [r3, #3]
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d01d      	beq.n	8009808 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	781b      	ldrb	r3, [r3, #0]
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	18d3      	adds	r3, r2, r3
 80097d6:	881b      	ldrh	r3, [r3, #0]
 80097d8:	b29a      	uxth	r2, r3
 80097da:	2044      	movs	r0, #68	; 0x44
 80097dc:	183b      	adds	r3, r7, r0
 80097de:	492d      	ldr	r1, [pc, #180]	; (8009894 <USB_ActivateEndpoint+0x6e4>)
 80097e0:	400a      	ands	r2, r1
 80097e2:	801a      	strh	r2, [r3, #0]
 80097e4:	183b      	adds	r3, r7, r0
 80097e6:	183a      	adds	r2, r7, r0
 80097e8:	8812      	ldrh	r2, [r2, #0]
 80097ea:	2120      	movs	r1, #32
 80097ec:	404a      	eors	r2, r1
 80097ee:	801a      	strh	r2, [r3, #0]
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	18d3      	adds	r3, r2, r3
 80097fa:	183a      	adds	r2, r7, r0
 80097fc:	8812      	ldrh	r2, [r2, #0]
 80097fe:	4920      	ldr	r1, [pc, #128]	; (8009880 <USB_ActivateEndpoint+0x6d0>)
 8009800:	430a      	orrs	r2, r1
 8009802:	b292      	uxth	r2, r2
 8009804:	801a      	strh	r2, [r3, #0]
 8009806:	e016      	b.n	8009836 <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009808:	687a      	ldr	r2, [r7, #4]
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	18d3      	adds	r3, r2, r3
 8009812:	881b      	ldrh	r3, [r3, #0]
 8009814:	b29a      	uxth	r2, r3
 8009816:	2046      	movs	r0, #70	; 0x46
 8009818:	183b      	adds	r3, r7, r0
 800981a:	491e      	ldr	r1, [pc, #120]	; (8009894 <USB_ActivateEndpoint+0x6e4>)
 800981c:	400a      	ands	r2, r1
 800981e:	801a      	strh	r2, [r3, #0]
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	18d3      	adds	r3, r2, r3
 800982a:	183a      	adds	r2, r7, r0
 800982c:	8812      	ldrh	r2, [r2, #0]
 800982e:	4914      	ldr	r1, [pc, #80]	; (8009880 <USB_ActivateEndpoint+0x6d0>)
 8009830:	430a      	orrs	r2, r1
 8009832:	b292      	uxth	r2, r2
 8009834:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	18d3      	adds	r3, r2, r3
 8009840:	881b      	ldrh	r3, [r3, #0]
 8009842:	b29a      	uxth	r2, r3
 8009844:	2042      	movs	r0, #66	; 0x42
 8009846:	183b      	adds	r3, r7, r0
 8009848:	4911      	ldr	r1, [pc, #68]	; (8009890 <USB_ActivateEndpoint+0x6e0>)
 800984a:	400a      	ands	r2, r1
 800984c:	801a      	strh	r2, [r3, #0]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	18d3      	adds	r3, r2, r3
 8009858:	183a      	adds	r2, r7, r0
 800985a:	8812      	ldrh	r2, [r2, #0]
 800985c:	4908      	ldr	r1, [pc, #32]	; (8009880 <USB_ActivateEndpoint+0x6d0>)
 800985e:	430a      	orrs	r2, r1
 8009860:	b292      	uxth	r2, r2
 8009862:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8009864:	236f      	movs	r3, #111	; 0x6f
 8009866:	18fb      	adds	r3, r7, r3
 8009868:	781b      	ldrb	r3, [r3, #0]
}
 800986a:	0018      	movs	r0, r3
 800986c:	46bd      	mov	sp, r7
 800986e:	b01c      	add	sp, #112	; 0x70
 8009870:	bd80      	pop	{r7, pc}
 8009872:	46c0      	nop			; (mov r8, r8)
 8009874:	ffff8f8f 	.word	0xffff8f8f
 8009878:	ffff8180 	.word	0xffff8180
 800987c:	ffff8e8f 	.word	0xffff8e8f
 8009880:	ffff8080 	.word	0xffff8080
 8009884:	00000404 	.word	0x00000404
 8009888:	ffffc080 	.word	0xffffc080
 800988c:	ffff80c0 	.word	0xffff80c0
 8009890:	ffffbf8f 	.word	0xffffbf8f
 8009894:	ffff8fbf 	.word	0xffff8fbf

08009898 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b08c      	sub	sp, #48	; 0x30
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	7b1b      	ldrb	r3, [r3, #12]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d000      	beq.n	80098ac <USB_DeactivateEndpoint+0x14>
 80098aa:	e07e      	b.n	80099aa <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	785b      	ldrb	r3, [r3, #1]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d03c      	beq.n	800992e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	18d2      	adds	r2, r2, r3
 80098be:	210c      	movs	r1, #12
 80098c0:	187b      	adds	r3, r7, r1
 80098c2:	8812      	ldrh	r2, [r2, #0]
 80098c4:	801a      	strh	r2, [r3, #0]
 80098c6:	187b      	adds	r3, r7, r1
 80098c8:	881b      	ldrh	r3, [r3, #0]
 80098ca:	2240      	movs	r2, #64	; 0x40
 80098cc:	4013      	ands	r3, r2
 80098ce:	d016      	beq.n	80098fe <USB_DeactivateEndpoint+0x66>
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	18d3      	adds	r3, r2, r3
 80098da:	881b      	ldrh	r3, [r3, #0]
 80098dc:	b29a      	uxth	r2, r3
 80098de:	200a      	movs	r0, #10
 80098e0:	183b      	adds	r3, r7, r0
 80098e2:	49c7      	ldr	r1, [pc, #796]	; (8009c00 <USB_DeactivateEndpoint+0x368>)
 80098e4:	400a      	ands	r2, r1
 80098e6:	801a      	strh	r2, [r3, #0]
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	18d3      	adds	r3, r2, r3
 80098f2:	183a      	adds	r2, r7, r0
 80098f4:	8812      	ldrh	r2, [r2, #0]
 80098f6:	49c3      	ldr	r1, [pc, #780]	; (8009c04 <USB_DeactivateEndpoint+0x36c>)
 80098f8:	430a      	orrs	r2, r1
 80098fa:	b292      	uxth	r2, r2
 80098fc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	18d3      	adds	r3, r2, r3
 8009908:	881b      	ldrh	r3, [r3, #0]
 800990a:	b29a      	uxth	r2, r3
 800990c:	2008      	movs	r0, #8
 800990e:	183b      	adds	r3, r7, r0
 8009910:	49bd      	ldr	r1, [pc, #756]	; (8009c08 <USB_DeactivateEndpoint+0x370>)
 8009912:	400a      	ands	r2, r1
 8009914:	801a      	strh	r2, [r3, #0]
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	18d3      	adds	r3, r2, r3
 8009920:	183a      	adds	r2, r7, r0
 8009922:	8812      	ldrh	r2, [r2, #0]
 8009924:	49b9      	ldr	r1, [pc, #740]	; (8009c0c <USB_DeactivateEndpoint+0x374>)
 8009926:	430a      	orrs	r2, r1
 8009928:	b292      	uxth	r2, r2
 800992a:	801a      	strh	r2, [r3, #0]
 800992c:	e163      	b.n	8009bf6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	18d2      	adds	r2, r2, r3
 8009938:	2112      	movs	r1, #18
 800993a:	187b      	adds	r3, r7, r1
 800993c:	8812      	ldrh	r2, [r2, #0]
 800993e:	801a      	strh	r2, [r3, #0]
 8009940:	187b      	adds	r3, r7, r1
 8009942:	881a      	ldrh	r2, [r3, #0]
 8009944:	2380      	movs	r3, #128	; 0x80
 8009946:	01db      	lsls	r3, r3, #7
 8009948:	4013      	ands	r3, r2
 800994a:	d016      	beq.n	800997a <USB_DeactivateEndpoint+0xe2>
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	18d3      	adds	r3, r2, r3
 8009956:	881b      	ldrh	r3, [r3, #0]
 8009958:	b29a      	uxth	r2, r3
 800995a:	2010      	movs	r0, #16
 800995c:	183b      	adds	r3, r7, r0
 800995e:	49a8      	ldr	r1, [pc, #672]	; (8009c00 <USB_DeactivateEndpoint+0x368>)
 8009960:	400a      	ands	r2, r1
 8009962:	801a      	strh	r2, [r3, #0]
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	18d3      	adds	r3, r2, r3
 800996e:	183a      	adds	r2, r7, r0
 8009970:	8812      	ldrh	r2, [r2, #0]
 8009972:	49a7      	ldr	r1, [pc, #668]	; (8009c10 <USB_DeactivateEndpoint+0x378>)
 8009974:	430a      	orrs	r2, r1
 8009976:	b292      	uxth	r2, r2
 8009978:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	18d3      	adds	r3, r2, r3
 8009984:	881b      	ldrh	r3, [r3, #0]
 8009986:	b29a      	uxth	r2, r3
 8009988:	200e      	movs	r0, #14
 800998a:	183b      	adds	r3, r7, r0
 800998c:	49a1      	ldr	r1, [pc, #644]	; (8009c14 <USB_DeactivateEndpoint+0x37c>)
 800998e:	400a      	ands	r2, r1
 8009990:	801a      	strh	r2, [r3, #0]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	18d3      	adds	r3, r2, r3
 800999c:	183a      	adds	r2, r7, r0
 800999e:	8812      	ldrh	r2, [r2, #0]
 80099a0:	499a      	ldr	r1, [pc, #616]	; (8009c0c <USB_DeactivateEndpoint+0x374>)
 80099a2:	430a      	orrs	r2, r1
 80099a4:	b292      	uxth	r2, r2
 80099a6:	801a      	strh	r2, [r3, #0]
 80099a8:	e125      	b.n	8009bf6 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	785b      	ldrb	r3, [r3, #1]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d000      	beq.n	80099b4 <USB_DeactivateEndpoint+0x11c>
 80099b2:	e090      	b.n	8009ad6 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80099b4:	687a      	ldr	r2, [r7, #4]
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	18d2      	adds	r2, r2, r3
 80099be:	2120      	movs	r1, #32
 80099c0:	187b      	adds	r3, r7, r1
 80099c2:	8812      	ldrh	r2, [r2, #0]
 80099c4:	801a      	strh	r2, [r3, #0]
 80099c6:	187b      	adds	r3, r7, r1
 80099c8:	881a      	ldrh	r2, [r3, #0]
 80099ca:	2380      	movs	r3, #128	; 0x80
 80099cc:	01db      	lsls	r3, r3, #7
 80099ce:	4013      	ands	r3, r2
 80099d0:	d016      	beq.n	8009a00 <USB_DeactivateEndpoint+0x168>
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	18d3      	adds	r3, r2, r3
 80099dc:	881b      	ldrh	r3, [r3, #0]
 80099de:	b29a      	uxth	r2, r3
 80099e0:	201e      	movs	r0, #30
 80099e2:	183b      	adds	r3, r7, r0
 80099e4:	4986      	ldr	r1, [pc, #536]	; (8009c00 <USB_DeactivateEndpoint+0x368>)
 80099e6:	400a      	ands	r2, r1
 80099e8:	801a      	strh	r2, [r3, #0]
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	18d3      	adds	r3, r2, r3
 80099f4:	183a      	adds	r2, r7, r0
 80099f6:	8812      	ldrh	r2, [r2, #0]
 80099f8:	4985      	ldr	r1, [pc, #532]	; (8009c10 <USB_DeactivateEndpoint+0x378>)
 80099fa:	430a      	orrs	r2, r1
 80099fc:	b292      	uxth	r2, r2
 80099fe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	18d2      	adds	r2, r2, r3
 8009a0a:	211c      	movs	r1, #28
 8009a0c:	187b      	adds	r3, r7, r1
 8009a0e:	8812      	ldrh	r2, [r2, #0]
 8009a10:	801a      	strh	r2, [r3, #0]
 8009a12:	187b      	adds	r3, r7, r1
 8009a14:	881b      	ldrh	r3, [r3, #0]
 8009a16:	2240      	movs	r2, #64	; 0x40
 8009a18:	4013      	ands	r3, r2
 8009a1a:	d016      	beq.n	8009a4a <USB_DeactivateEndpoint+0x1b2>
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	18d3      	adds	r3, r2, r3
 8009a26:	881b      	ldrh	r3, [r3, #0]
 8009a28:	b29a      	uxth	r2, r3
 8009a2a:	201a      	movs	r0, #26
 8009a2c:	183b      	adds	r3, r7, r0
 8009a2e:	4974      	ldr	r1, [pc, #464]	; (8009c00 <USB_DeactivateEndpoint+0x368>)
 8009a30:	400a      	ands	r2, r1
 8009a32:	801a      	strh	r2, [r3, #0]
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	18d3      	adds	r3, r2, r3
 8009a3e:	183a      	adds	r2, r7, r0
 8009a40:	8812      	ldrh	r2, [r2, #0]
 8009a42:	4970      	ldr	r1, [pc, #448]	; (8009c04 <USB_DeactivateEndpoint+0x36c>)
 8009a44:	430a      	orrs	r2, r1
 8009a46:	b292      	uxth	r2, r2
 8009a48:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	18d3      	adds	r3, r2, r3
 8009a54:	881b      	ldrh	r3, [r3, #0]
 8009a56:	b29a      	uxth	r2, r3
 8009a58:	2018      	movs	r0, #24
 8009a5a:	183b      	adds	r3, r7, r0
 8009a5c:	4968      	ldr	r1, [pc, #416]	; (8009c00 <USB_DeactivateEndpoint+0x368>)
 8009a5e:	400a      	ands	r2, r1
 8009a60:	801a      	strh	r2, [r3, #0]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	18d3      	adds	r3, r2, r3
 8009a6c:	183a      	adds	r2, r7, r0
 8009a6e:	8812      	ldrh	r2, [r2, #0]
 8009a70:	4964      	ldr	r1, [pc, #400]	; (8009c04 <USB_DeactivateEndpoint+0x36c>)
 8009a72:	430a      	orrs	r2, r1
 8009a74:	b292      	uxth	r2, r2
 8009a76:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009a78:	687a      	ldr	r2, [r7, #4]
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	009b      	lsls	r3, r3, #2
 8009a80:	18d3      	adds	r3, r2, r3
 8009a82:	881b      	ldrh	r3, [r3, #0]
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	2016      	movs	r0, #22
 8009a88:	183b      	adds	r3, r7, r0
 8009a8a:	4962      	ldr	r1, [pc, #392]	; (8009c14 <USB_DeactivateEndpoint+0x37c>)
 8009a8c:	400a      	ands	r2, r1
 8009a8e:	801a      	strh	r2, [r3, #0]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	18d3      	adds	r3, r2, r3
 8009a9a:	183a      	adds	r2, r7, r0
 8009a9c:	8812      	ldrh	r2, [r2, #0]
 8009a9e:	495b      	ldr	r1, [pc, #364]	; (8009c0c <USB_DeactivateEndpoint+0x374>)
 8009aa0:	430a      	orrs	r2, r1
 8009aa2:	b292      	uxth	r2, r2
 8009aa4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	18d3      	adds	r3, r2, r3
 8009ab0:	881b      	ldrh	r3, [r3, #0]
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	2014      	movs	r0, #20
 8009ab6:	183b      	adds	r3, r7, r0
 8009ab8:	4953      	ldr	r1, [pc, #332]	; (8009c08 <USB_DeactivateEndpoint+0x370>)
 8009aba:	400a      	ands	r2, r1
 8009abc:	801a      	strh	r2, [r3, #0]
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	18d3      	adds	r3, r2, r3
 8009ac8:	183a      	adds	r2, r7, r0
 8009aca:	8812      	ldrh	r2, [r2, #0]
 8009acc:	494f      	ldr	r1, [pc, #316]	; (8009c0c <USB_DeactivateEndpoint+0x374>)
 8009ace:	430a      	orrs	r2, r1
 8009ad0:	b292      	uxth	r2, r2
 8009ad2:	801a      	strh	r2, [r3, #0]
 8009ad4:	e08f      	b.n	8009bf6 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	18d2      	adds	r2, r2, r3
 8009ae0:	212e      	movs	r1, #46	; 0x2e
 8009ae2:	187b      	adds	r3, r7, r1
 8009ae4:	8812      	ldrh	r2, [r2, #0]
 8009ae6:	801a      	strh	r2, [r3, #0]
 8009ae8:	187b      	adds	r3, r7, r1
 8009aea:	881a      	ldrh	r2, [r3, #0]
 8009aec:	2380      	movs	r3, #128	; 0x80
 8009aee:	01db      	lsls	r3, r3, #7
 8009af0:	4013      	ands	r3, r2
 8009af2:	d016      	beq.n	8009b22 <USB_DeactivateEndpoint+0x28a>
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	18d3      	adds	r3, r2, r3
 8009afe:	881b      	ldrh	r3, [r3, #0]
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	202c      	movs	r0, #44	; 0x2c
 8009b04:	183b      	adds	r3, r7, r0
 8009b06:	493e      	ldr	r1, [pc, #248]	; (8009c00 <USB_DeactivateEndpoint+0x368>)
 8009b08:	400a      	ands	r2, r1
 8009b0a:	801a      	strh	r2, [r3, #0]
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	18d3      	adds	r3, r2, r3
 8009b16:	183a      	adds	r2, r7, r0
 8009b18:	8812      	ldrh	r2, [r2, #0]
 8009b1a:	493d      	ldr	r1, [pc, #244]	; (8009c10 <USB_DeactivateEndpoint+0x378>)
 8009b1c:	430a      	orrs	r2, r1
 8009b1e:	b292      	uxth	r2, r2
 8009b20:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	18d2      	adds	r2, r2, r3
 8009b2c:	212a      	movs	r1, #42	; 0x2a
 8009b2e:	187b      	adds	r3, r7, r1
 8009b30:	8812      	ldrh	r2, [r2, #0]
 8009b32:	801a      	strh	r2, [r3, #0]
 8009b34:	187b      	adds	r3, r7, r1
 8009b36:	881b      	ldrh	r3, [r3, #0]
 8009b38:	2240      	movs	r2, #64	; 0x40
 8009b3a:	4013      	ands	r3, r2
 8009b3c:	d016      	beq.n	8009b6c <USB_DeactivateEndpoint+0x2d4>
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	18d3      	adds	r3, r2, r3
 8009b48:	881b      	ldrh	r3, [r3, #0]
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	2028      	movs	r0, #40	; 0x28
 8009b4e:	183b      	adds	r3, r7, r0
 8009b50:	492b      	ldr	r1, [pc, #172]	; (8009c00 <USB_DeactivateEndpoint+0x368>)
 8009b52:	400a      	ands	r2, r1
 8009b54:	801a      	strh	r2, [r3, #0]
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	18d3      	adds	r3, r2, r3
 8009b60:	183a      	adds	r2, r7, r0
 8009b62:	8812      	ldrh	r2, [r2, #0]
 8009b64:	4927      	ldr	r1, [pc, #156]	; (8009c04 <USB_DeactivateEndpoint+0x36c>)
 8009b66:	430a      	orrs	r2, r1
 8009b68:	b292      	uxth	r2, r2
 8009b6a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	18d3      	adds	r3, r2, r3
 8009b76:	881b      	ldrh	r3, [r3, #0]
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	2026      	movs	r0, #38	; 0x26
 8009b7c:	183b      	adds	r3, r7, r0
 8009b7e:	4920      	ldr	r1, [pc, #128]	; (8009c00 <USB_DeactivateEndpoint+0x368>)
 8009b80:	400a      	ands	r2, r1
 8009b82:	801a      	strh	r2, [r3, #0]
 8009b84:	687a      	ldr	r2, [r7, #4]
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	18d3      	adds	r3, r2, r3
 8009b8e:	183a      	adds	r2, r7, r0
 8009b90:	8812      	ldrh	r2, [r2, #0]
 8009b92:	491f      	ldr	r1, [pc, #124]	; (8009c10 <USB_DeactivateEndpoint+0x378>)
 8009b94:	430a      	orrs	r2, r1
 8009b96:	b292      	uxth	r2, r2
 8009b98:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	18d3      	adds	r3, r2, r3
 8009ba4:	881b      	ldrh	r3, [r3, #0]
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	2024      	movs	r0, #36	; 0x24
 8009baa:	183b      	adds	r3, r7, r0
 8009bac:	4916      	ldr	r1, [pc, #88]	; (8009c08 <USB_DeactivateEndpoint+0x370>)
 8009bae:	400a      	ands	r2, r1
 8009bb0:	801a      	strh	r2, [r3, #0]
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	18d3      	adds	r3, r2, r3
 8009bbc:	183a      	adds	r2, r7, r0
 8009bbe:	8812      	ldrh	r2, [r2, #0]
 8009bc0:	4912      	ldr	r1, [pc, #72]	; (8009c0c <USB_DeactivateEndpoint+0x374>)
 8009bc2:	430a      	orrs	r2, r1
 8009bc4:	b292      	uxth	r2, r2
 8009bc6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	009b      	lsls	r3, r3, #2
 8009bd0:	18d3      	adds	r3, r2, r3
 8009bd2:	881b      	ldrh	r3, [r3, #0]
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	2022      	movs	r0, #34	; 0x22
 8009bd8:	183b      	adds	r3, r7, r0
 8009bda:	490e      	ldr	r1, [pc, #56]	; (8009c14 <USB_DeactivateEndpoint+0x37c>)
 8009bdc:	400a      	ands	r2, r1
 8009bde:	801a      	strh	r2, [r3, #0]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	18d3      	adds	r3, r2, r3
 8009bea:	183a      	adds	r2, r7, r0
 8009bec:	8812      	ldrh	r2, [r2, #0]
 8009bee:	4907      	ldr	r1, [pc, #28]	; (8009c0c <USB_DeactivateEndpoint+0x374>)
 8009bf0:	430a      	orrs	r2, r1
 8009bf2:	b292      	uxth	r2, r2
 8009bf4:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	0018      	movs	r0, r3
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	b00c      	add	sp, #48	; 0x30
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	ffff8f8f 	.word	0xffff8f8f
 8009c04:	ffff80c0 	.word	0xffff80c0
 8009c08:	ffff8fbf 	.word	0xffff8fbf
 8009c0c:	ffff8080 	.word	0xffff8080
 8009c10:	ffffc080 	.word	0xffffc080
 8009c14:	ffffbf8f 	.word	0xffffbf8f

08009c18 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009c18:	b590      	push	{r4, r7, lr}
 8009c1a:	b0c3      	sub	sp, #268	; 0x10c
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	785b      	ldrb	r3, [r3, #1]
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d001      	beq.n	8009c2e <USB_EPStartXfer+0x16>
 8009c2a:	f000 fcef 	bl	800a60c <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	699a      	ldr	r2, [r3, #24]
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d905      	bls.n	8009c46 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	1d7a      	adds	r2, r7, #5
 8009c40:	32ff      	adds	r2, #255	; 0xff
 8009c42:	6013      	str	r3, [r2, #0]
 8009c44:	e004      	b.n	8009c50 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	699b      	ldr	r3, [r3, #24]
 8009c4a:	1d7a      	adds	r2, r7, #5
 8009c4c:	32ff      	adds	r2, #255	; 0xff
 8009c4e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	7b1b      	ldrb	r3, [r3, #12]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d125      	bne.n	8009ca4 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	6959      	ldr	r1, [r3, #20]
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	88da      	ldrh	r2, [r3, #6]
 8009c60:	1d7b      	adds	r3, r7, #5
 8009c62:	33ff      	adds	r3, #255	; 0xff
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f001 f9c9 	bl	800b000 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	613b      	str	r3, [r7, #16]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2250      	movs	r2, #80	; 0x50
 8009c76:	5a9b      	ldrh	r3, [r3, r2]
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	001a      	movs	r2, r3
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	189b      	adds	r3, r3, r2
 8009c80:	613b      	str	r3, [r7, #16]
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	00da      	lsls	r2, r3, #3
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	18d3      	adds	r3, r2, r3
 8009c8c:	4acc      	ldr	r2, [pc, #816]	; (8009fc0 <USB_EPStartXfer+0x3a8>)
 8009c8e:	4694      	mov	ip, r2
 8009c90:	4463      	add	r3, ip
 8009c92:	60fb      	str	r3, [r7, #12]
 8009c94:	1d7b      	adds	r3, r7, #5
 8009c96:	33ff      	adds	r3, #255	; 0xff
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	801a      	strh	r2, [r3, #0]
 8009ca0:	f000 fc8f 	bl	800a5c2 <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	78db      	ldrb	r3, [r3, #3]
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	d000      	beq.n	8009cae <USB_EPStartXfer+0x96>
 8009cac:	e33a      	b.n	800a324 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	6a1a      	ldr	r2, [r3, #32]
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	691b      	ldr	r3, [r3, #16]
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d800      	bhi.n	8009cbc <USB_EPStartXfer+0xa4>
 8009cba:	e2df      	b.n	800a27c <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	18d3      	adds	r3, r2, r3
 8009cc6:	881b      	ldrh	r3, [r3, #0]
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	2056      	movs	r0, #86	; 0x56
 8009ccc:	183b      	adds	r3, r7, r0
 8009cce:	49bd      	ldr	r1, [pc, #756]	; (8009fc4 <USB_EPStartXfer+0x3ac>)
 8009cd0:	400a      	ands	r2, r1
 8009cd2:	801a      	strh	r2, [r3, #0]
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	18d3      	adds	r3, r2, r3
 8009cde:	183a      	adds	r2, r7, r0
 8009ce0:	8812      	ldrh	r2, [r2, #0]
 8009ce2:	49b9      	ldr	r1, [pc, #740]	; (8009fc8 <USB_EPStartXfer+0x3b0>)
 8009ce4:	430a      	orrs	r2, r1
 8009ce6:	b292      	uxth	r2, r2
 8009ce8:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	6a1a      	ldr	r2, [r3, #32]
 8009cee:	1d7b      	adds	r3, r7, #5
 8009cf0:	33ff      	adds	r3, #255	; 0xff
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	1ad2      	subs	r2, r2, r3
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	18d3      	adds	r3, r2, r3
 8009d04:	881b      	ldrh	r3, [r3, #0]
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	001a      	movs	r2, r3
 8009d0a:	2340      	movs	r3, #64	; 0x40
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	d100      	bne.n	8009d12 <USB_EPStartXfer+0xfa>
 8009d10:	e162      	b.n	8009fd8 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	633b      	str	r3, [r7, #48]	; 0x30
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	785b      	ldrb	r3, [r3, #1]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d16a      	bne.n	8009df4 <USB_EPStartXfer+0x1dc>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2250      	movs	r2, #80	; 0x50
 8009d26:	5a9b      	ldrh	r3, [r3, r2]
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	001a      	movs	r2, r3
 8009d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2e:	189b      	adds	r3, r3, r2
 8009d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	00da      	lsls	r2, r3, #3
 8009d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3a:	18d3      	adds	r3, r2, r3
 8009d3c:	4aa3      	ldr	r2, [pc, #652]	; (8009fcc <USB_EPStartXfer+0x3b4>)
 8009d3e:	4694      	mov	ip, r2
 8009d40:	4463      	add	r3, ip
 8009d42:	627b      	str	r3, [r7, #36]	; 0x24
 8009d44:	1d7b      	adds	r3, r7, #5
 8009d46:	33ff      	adds	r3, #255	; 0xff
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d110      	bne.n	8009d70 <USB_EPStartXfer+0x158>
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d50:	881b      	ldrh	r3, [r3, #0]
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	4a9e      	ldr	r2, [pc, #632]	; (8009fd0 <USB_EPStartXfer+0x3b8>)
 8009d56:	4013      	ands	r3, r2
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5c:	801a      	strh	r2, [r3, #0]
 8009d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d60:	881b      	ldrh	r3, [r3, #0]
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	4a9b      	ldr	r2, [pc, #620]	; (8009fd4 <USB_EPStartXfer+0x3bc>)
 8009d66:	4313      	orrs	r3, r2
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6c:	801a      	strh	r2, [r3, #0]
 8009d6e:	e05c      	b.n	8009e2a <USB_EPStartXfer+0x212>
 8009d70:	1d7b      	adds	r3, r7, #5
 8009d72:	33ff      	adds	r3, #255	; 0xff
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	2b3e      	cmp	r3, #62	; 0x3e
 8009d78:	d81c      	bhi.n	8009db4 <USB_EPStartXfer+0x19c>
 8009d7a:	1d7b      	adds	r3, r7, #5
 8009d7c:	33ff      	adds	r3, #255	; 0xff
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	085b      	lsrs	r3, r3, #1
 8009d82:	1c7a      	adds	r2, r7, #1
 8009d84:	32ff      	adds	r2, #255	; 0xff
 8009d86:	6013      	str	r3, [r2, #0]
 8009d88:	1d7b      	adds	r3, r7, #5
 8009d8a:	33ff      	adds	r3, #255	; 0xff
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	4013      	ands	r3, r2
 8009d92:	d006      	beq.n	8009da2 <USB_EPStartXfer+0x18a>
 8009d94:	1c7b      	adds	r3, r7, #1
 8009d96:	33ff      	adds	r3, #255	; 0xff
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	1c7a      	adds	r2, r7, #1
 8009d9e:	32ff      	adds	r2, #255	; 0xff
 8009da0:	6013      	str	r3, [r2, #0]
 8009da2:	1c7b      	adds	r3, r7, #1
 8009da4:	33ff      	adds	r3, #255	; 0xff
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	029b      	lsls	r3, r3, #10
 8009dac:	b29a      	uxth	r2, r3
 8009dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db0:	801a      	strh	r2, [r3, #0]
 8009db2:	e03a      	b.n	8009e2a <USB_EPStartXfer+0x212>
 8009db4:	1d7b      	adds	r3, r7, #5
 8009db6:	33ff      	adds	r3, #255	; 0xff
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	095b      	lsrs	r3, r3, #5
 8009dbc:	1c7a      	adds	r2, r7, #1
 8009dbe:	32ff      	adds	r2, #255	; 0xff
 8009dc0:	6013      	str	r3, [r2, #0]
 8009dc2:	1d7b      	adds	r3, r7, #5
 8009dc4:	33ff      	adds	r3, #255	; 0xff
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	221f      	movs	r2, #31
 8009dca:	4013      	ands	r3, r2
 8009dcc:	d106      	bne.n	8009ddc <USB_EPStartXfer+0x1c4>
 8009dce:	1c7b      	adds	r3, r7, #1
 8009dd0:	33ff      	adds	r3, #255	; 0xff
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	3b01      	subs	r3, #1
 8009dd6:	1c7a      	adds	r2, r7, #1
 8009dd8:	32ff      	adds	r2, #255	; 0xff
 8009dda:	6013      	str	r3, [r2, #0]
 8009ddc:	1c7b      	adds	r3, r7, #1
 8009dde:	33ff      	adds	r3, #255	; 0xff
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	029b      	lsls	r3, r3, #10
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	4a7a      	ldr	r2, [pc, #488]	; (8009fd4 <USB_EPStartXfer+0x3bc>)
 8009dea:	4313      	orrs	r3, r2
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df0:	801a      	strh	r2, [r3, #0]
 8009df2:	e01a      	b.n	8009e2a <USB_EPStartXfer+0x212>
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	785b      	ldrb	r3, [r3, #1]
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d116      	bne.n	8009e2a <USB_EPStartXfer+0x212>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2250      	movs	r2, #80	; 0x50
 8009e00:	5a9b      	ldrh	r3, [r3, r2]
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	001a      	movs	r2, r3
 8009e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e08:	189b      	adds	r3, r3, r2
 8009e0a:	633b      	str	r3, [r7, #48]	; 0x30
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	00da      	lsls	r2, r3, #3
 8009e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e14:	18d3      	adds	r3, r2, r3
 8009e16:	4a6d      	ldr	r2, [pc, #436]	; (8009fcc <USB_EPStartXfer+0x3b4>)
 8009e18:	4694      	mov	ip, r2
 8009e1a:	4463      	add	r3, ip
 8009e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e1e:	1d7b      	adds	r3, r7, #5
 8009e20:	33ff      	adds	r3, #255	; 0xff
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009e2a:	2076      	movs	r0, #118	; 0x76
 8009e2c:	183b      	adds	r3, r7, r0
 8009e2e:	683a      	ldr	r2, [r7, #0]
 8009e30:	8952      	ldrh	r2, [r2, #10]
 8009e32:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	6959      	ldr	r1, [r3, #20]
 8009e38:	1d7b      	adds	r3, r7, #5
 8009e3a:	33ff      	adds	r3, #255	; 0xff
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	b29c      	uxth	r4, r3
 8009e40:	183b      	adds	r3, r7, r0
 8009e42:	881a      	ldrh	r2, [r3, #0]
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	0023      	movs	r3, r4
 8009e48:	f001 f8da 	bl	800b000 <USB_WritePMA>
            ep->xfer_buff += len;
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	695a      	ldr	r2, [r3, #20]
 8009e50:	1d7b      	adds	r3, r7, #5
 8009e52:	33ff      	adds	r3, #255	; 0xff
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	18d2      	adds	r2, r2, r3
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	6a1a      	ldr	r2, [r3, #32]
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d908      	bls.n	8009e7a <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	6a1a      	ldr	r2, [r3, #32]
 8009e6c:	1d7b      	adds	r3, r7, #5
 8009e6e:	33ff      	adds	r3, #255	; 0xff
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	1ad2      	subs	r2, r2, r3
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	621a      	str	r2, [r3, #32]
 8009e78:	e007      	b.n	8009e8a <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	6a1b      	ldr	r3, [r3, #32]
 8009e7e:	1d7a      	adds	r2, r7, #5
 8009e80:	32ff      	adds	r2, #255	; 0xff
 8009e82:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	2200      	movs	r2, #0
 8009e88:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	785b      	ldrb	r3, [r3, #1]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d166      	bne.n	8009f60 <USB_EPStartXfer+0x348>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	61bb      	str	r3, [r7, #24]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2250      	movs	r2, #80	; 0x50
 8009e9a:	5a9b      	ldrh	r3, [r3, r2]
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	001a      	movs	r2, r3
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	189b      	adds	r3, r3, r2
 8009ea4:	61bb      	str	r3, [r7, #24]
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	00da      	lsls	r2, r3, #3
 8009eac:	69bb      	ldr	r3, [r7, #24]
 8009eae:	18d3      	adds	r3, r2, r3
 8009eb0:	4a43      	ldr	r2, [pc, #268]	; (8009fc0 <USB_EPStartXfer+0x3a8>)
 8009eb2:	4694      	mov	ip, r2
 8009eb4:	4463      	add	r3, ip
 8009eb6:	617b      	str	r3, [r7, #20]
 8009eb8:	1d7b      	adds	r3, r7, #5
 8009eba:	33ff      	adds	r3, #255	; 0xff
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d110      	bne.n	8009ee4 <USB_EPStartXfer+0x2cc>
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	881b      	ldrh	r3, [r3, #0]
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	4a41      	ldr	r2, [pc, #260]	; (8009fd0 <USB_EPStartXfer+0x3b8>)
 8009eca:	4013      	ands	r3, r2
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	801a      	strh	r2, [r3, #0]
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	881b      	ldrh	r3, [r3, #0]
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	4a3e      	ldr	r2, [pc, #248]	; (8009fd4 <USB_EPStartXfer+0x3bc>)
 8009eda:	4313      	orrs	r3, r2
 8009edc:	b29a      	uxth	r2, r3
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	801a      	strh	r2, [r3, #0]
 8009ee2:	e05a      	b.n	8009f9a <USB_EPStartXfer+0x382>
 8009ee4:	1d7b      	adds	r3, r7, #5
 8009ee6:	33ff      	adds	r3, #255	; 0xff
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2b3e      	cmp	r3, #62	; 0x3e
 8009eec:	d81a      	bhi.n	8009f24 <USB_EPStartXfer+0x30c>
 8009eee:	1d7b      	adds	r3, r7, #5
 8009ef0:	33ff      	adds	r3, #255	; 0xff
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	085b      	lsrs	r3, r3, #1
 8009ef6:	21fc      	movs	r1, #252	; 0xfc
 8009ef8:	187a      	adds	r2, r7, r1
 8009efa:	6013      	str	r3, [r2, #0]
 8009efc:	1d7b      	adds	r3, r7, #5
 8009efe:	33ff      	adds	r3, #255	; 0xff
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2201      	movs	r2, #1
 8009f04:	4013      	ands	r3, r2
 8009f06:	d004      	beq.n	8009f12 <USB_EPStartXfer+0x2fa>
 8009f08:	187b      	adds	r3, r7, r1
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	187a      	adds	r2, r7, r1
 8009f10:	6013      	str	r3, [r2, #0]
 8009f12:	23fc      	movs	r3, #252	; 0xfc
 8009f14:	18fb      	adds	r3, r7, r3
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	029b      	lsls	r3, r3, #10
 8009f1c:	b29a      	uxth	r2, r3
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	801a      	strh	r2, [r3, #0]
 8009f22:	e03a      	b.n	8009f9a <USB_EPStartXfer+0x382>
 8009f24:	1d7b      	adds	r3, r7, #5
 8009f26:	33ff      	adds	r3, #255	; 0xff
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	095b      	lsrs	r3, r3, #5
 8009f2c:	21fc      	movs	r1, #252	; 0xfc
 8009f2e:	187a      	adds	r2, r7, r1
 8009f30:	6013      	str	r3, [r2, #0]
 8009f32:	1d7b      	adds	r3, r7, #5
 8009f34:	33ff      	adds	r3, #255	; 0xff
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	221f      	movs	r2, #31
 8009f3a:	4013      	ands	r3, r2
 8009f3c:	d104      	bne.n	8009f48 <USB_EPStartXfer+0x330>
 8009f3e:	187b      	adds	r3, r7, r1
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	3b01      	subs	r3, #1
 8009f44:	187a      	adds	r2, r7, r1
 8009f46:	6013      	str	r3, [r2, #0]
 8009f48:	23fc      	movs	r3, #252	; 0xfc
 8009f4a:	18fb      	adds	r3, r7, r3
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	029b      	lsls	r3, r3, #10
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	4a1f      	ldr	r2, [pc, #124]	; (8009fd4 <USB_EPStartXfer+0x3bc>)
 8009f56:	4313      	orrs	r3, r2
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	801a      	strh	r2, [r3, #0]
 8009f5e:	e01c      	b.n	8009f9a <USB_EPStartXfer+0x382>
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	785b      	ldrb	r3, [r3, #1]
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d118      	bne.n	8009f9a <USB_EPStartXfer+0x382>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	623b      	str	r3, [r7, #32]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2250      	movs	r2, #80	; 0x50
 8009f70:	5a9b      	ldrh	r3, [r3, r2]
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	001a      	movs	r2, r3
 8009f76:	6a3b      	ldr	r3, [r7, #32]
 8009f78:	189b      	adds	r3, r3, r2
 8009f7a:	623b      	str	r3, [r7, #32]
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	00da      	lsls	r2, r3, #3
 8009f82:	6a3b      	ldr	r3, [r7, #32]
 8009f84:	18d3      	adds	r3, r2, r3
 8009f86:	4a0e      	ldr	r2, [pc, #56]	; (8009fc0 <USB_EPStartXfer+0x3a8>)
 8009f88:	4694      	mov	ip, r2
 8009f8a:	4463      	add	r3, ip
 8009f8c:	61fb      	str	r3, [r7, #28]
 8009f8e:	1d7b      	adds	r3, r7, #5
 8009f90:	33ff      	adds	r3, #255	; 0xff
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	b29a      	uxth	r2, r3
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009f9a:	2076      	movs	r0, #118	; 0x76
 8009f9c:	183b      	adds	r3, r7, r0
 8009f9e:	683a      	ldr	r2, [r7, #0]
 8009fa0:	8912      	ldrh	r2, [r2, #8]
 8009fa2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	6959      	ldr	r1, [r3, #20]
 8009fa8:	1d7b      	adds	r3, r7, #5
 8009faa:	33ff      	adds	r3, #255	; 0xff
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	b29c      	uxth	r4, r3
 8009fb0:	183b      	adds	r3, r7, r0
 8009fb2:	881a      	ldrh	r2, [r3, #0]
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	0023      	movs	r3, r4
 8009fb8:	f001 f822 	bl	800b000 <USB_WritePMA>
 8009fbc:	e301      	b.n	800a5c2 <USB_EPStartXfer+0x9aa>
 8009fbe:	46c0      	nop			; (mov r8, r8)
 8009fc0:	00000402 	.word	0x00000402
 8009fc4:	ffff8f8f 	.word	0xffff8f8f
 8009fc8:	ffff8180 	.word	0xffff8180
 8009fcc:	00000406 	.word	0x00000406
 8009fd0:	ffff83ff 	.word	0xffff83ff
 8009fd4:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	785b      	ldrb	r3, [r3, #1]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d166      	bne.n	800a0ae <USB_EPStartXfer+0x496>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2250      	movs	r2, #80	; 0x50
 8009fe8:	5a9b      	ldrh	r3, [r3, r2]
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	001a      	movs	r2, r3
 8009fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ff0:	189b      	adds	r3, r3, r2
 8009ff2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	00da      	lsls	r2, r3, #3
 8009ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ffc:	18d3      	adds	r3, r2, r3
 8009ffe:	4ac3      	ldr	r2, [pc, #780]	; (800a30c <USB_EPStartXfer+0x6f4>)
 800a000:	4694      	mov	ip, r2
 800a002:	4463      	add	r3, ip
 800a004:	647b      	str	r3, [r7, #68]	; 0x44
 800a006:	1d7b      	adds	r3, r7, #5
 800a008:	33ff      	adds	r3, #255	; 0xff
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d110      	bne.n	800a032 <USB_EPStartXfer+0x41a>
 800a010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a012:	881b      	ldrh	r3, [r3, #0]
 800a014:	b29b      	uxth	r3, r3
 800a016:	4abe      	ldr	r2, [pc, #760]	; (800a310 <USB_EPStartXfer+0x6f8>)
 800a018:	4013      	ands	r3, r2
 800a01a:	b29a      	uxth	r2, r3
 800a01c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a01e:	801a      	strh	r2, [r3, #0]
 800a020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a022:	881b      	ldrh	r3, [r3, #0]
 800a024:	b29b      	uxth	r3, r3
 800a026:	4abb      	ldr	r2, [pc, #748]	; (800a314 <USB_EPStartXfer+0x6fc>)
 800a028:	4313      	orrs	r3, r2
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a02e:	801a      	strh	r2, [r3, #0]
 800a030:	e05a      	b.n	800a0e8 <USB_EPStartXfer+0x4d0>
 800a032:	1d7b      	adds	r3, r7, #5
 800a034:	33ff      	adds	r3, #255	; 0xff
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2b3e      	cmp	r3, #62	; 0x3e
 800a03a:	d81a      	bhi.n	800a072 <USB_EPStartXfer+0x45a>
 800a03c:	1d7b      	adds	r3, r7, #5
 800a03e:	33ff      	adds	r3, #255	; 0xff
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	085b      	lsrs	r3, r3, #1
 800a044:	21f8      	movs	r1, #248	; 0xf8
 800a046:	187a      	adds	r2, r7, r1
 800a048:	6013      	str	r3, [r2, #0]
 800a04a:	1d7b      	adds	r3, r7, #5
 800a04c:	33ff      	adds	r3, #255	; 0xff
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2201      	movs	r2, #1
 800a052:	4013      	ands	r3, r2
 800a054:	d004      	beq.n	800a060 <USB_EPStartXfer+0x448>
 800a056:	187b      	adds	r3, r7, r1
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3301      	adds	r3, #1
 800a05c:	187a      	adds	r2, r7, r1
 800a05e:	6013      	str	r3, [r2, #0]
 800a060:	23f8      	movs	r3, #248	; 0xf8
 800a062:	18fb      	adds	r3, r7, r3
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	b29b      	uxth	r3, r3
 800a068:	029b      	lsls	r3, r3, #10
 800a06a:	b29a      	uxth	r2, r3
 800a06c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a06e:	801a      	strh	r2, [r3, #0]
 800a070:	e03a      	b.n	800a0e8 <USB_EPStartXfer+0x4d0>
 800a072:	1d7b      	adds	r3, r7, #5
 800a074:	33ff      	adds	r3, #255	; 0xff
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	095b      	lsrs	r3, r3, #5
 800a07a:	21f8      	movs	r1, #248	; 0xf8
 800a07c:	187a      	adds	r2, r7, r1
 800a07e:	6013      	str	r3, [r2, #0]
 800a080:	1d7b      	adds	r3, r7, #5
 800a082:	33ff      	adds	r3, #255	; 0xff
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	221f      	movs	r2, #31
 800a088:	4013      	ands	r3, r2
 800a08a:	d104      	bne.n	800a096 <USB_EPStartXfer+0x47e>
 800a08c:	187b      	adds	r3, r7, r1
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	3b01      	subs	r3, #1
 800a092:	187a      	adds	r2, r7, r1
 800a094:	6013      	str	r3, [r2, #0]
 800a096:	23f8      	movs	r3, #248	; 0xf8
 800a098:	18fb      	adds	r3, r7, r3
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	b29b      	uxth	r3, r3
 800a09e:	029b      	lsls	r3, r3, #10
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	4a9c      	ldr	r2, [pc, #624]	; (800a314 <USB_EPStartXfer+0x6fc>)
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	b29a      	uxth	r2, r3
 800a0a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0aa:	801a      	strh	r2, [r3, #0]
 800a0ac:	e01c      	b.n	800a0e8 <USB_EPStartXfer+0x4d0>
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	785b      	ldrb	r3, [r3, #1]
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d118      	bne.n	800a0e8 <USB_EPStartXfer+0x4d0>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	653b      	str	r3, [r7, #80]	; 0x50
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2250      	movs	r2, #80	; 0x50
 800a0be:	5a9b      	ldrh	r3, [r3, r2]
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	001a      	movs	r2, r3
 800a0c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0c6:	189b      	adds	r3, r3, r2
 800a0c8:	653b      	str	r3, [r7, #80]	; 0x50
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	00da      	lsls	r2, r3, #3
 800a0d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0d2:	18d3      	adds	r3, r2, r3
 800a0d4:	4a8d      	ldr	r2, [pc, #564]	; (800a30c <USB_EPStartXfer+0x6f4>)
 800a0d6:	4694      	mov	ip, r2
 800a0d8:	4463      	add	r3, ip
 800a0da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0dc:	1d7b      	adds	r3, r7, #5
 800a0de:	33ff      	adds	r3, #255	; 0xff
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0e6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a0e8:	2076      	movs	r0, #118	; 0x76
 800a0ea:	183b      	adds	r3, r7, r0
 800a0ec:	683a      	ldr	r2, [r7, #0]
 800a0ee:	8912      	ldrh	r2, [r2, #8]
 800a0f0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	6959      	ldr	r1, [r3, #20]
 800a0f6:	1d7b      	adds	r3, r7, #5
 800a0f8:	33ff      	adds	r3, #255	; 0xff
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	b29c      	uxth	r4, r3
 800a0fe:	183b      	adds	r3, r7, r0
 800a100:	881a      	ldrh	r2, [r3, #0]
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	0023      	movs	r3, r4
 800a106:	f000 ff7b 	bl	800b000 <USB_WritePMA>
            ep->xfer_buff += len;
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	695a      	ldr	r2, [r3, #20]
 800a10e:	1d7b      	adds	r3, r7, #5
 800a110:	33ff      	adds	r3, #255	; 0xff
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	18d2      	adds	r2, r2, r3
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	6a1a      	ldr	r2, [r3, #32]
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	691b      	ldr	r3, [r3, #16]
 800a122:	429a      	cmp	r2, r3
 800a124:	d908      	bls.n	800a138 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	6a1a      	ldr	r2, [r3, #32]
 800a12a:	1d7b      	adds	r3, r7, #5
 800a12c:	33ff      	adds	r3, #255	; 0xff
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	1ad2      	subs	r2, r2, r3
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	621a      	str	r2, [r3, #32]
 800a136:	e007      	b.n	800a148 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	6a1b      	ldr	r3, [r3, #32]
 800a13c:	1d7a      	adds	r2, r7, #5
 800a13e:	32ff      	adds	r2, #255	; 0xff
 800a140:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	2200      	movs	r2, #0
 800a146:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	643b      	str	r3, [r7, #64]	; 0x40
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	785b      	ldrb	r3, [r3, #1]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d166      	bne.n	800a222 <USB_EPStartXfer+0x60a>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	63bb      	str	r3, [r7, #56]	; 0x38
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2250      	movs	r2, #80	; 0x50
 800a15c:	5a9b      	ldrh	r3, [r3, r2]
 800a15e:	b29b      	uxth	r3, r3
 800a160:	001a      	movs	r2, r3
 800a162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a164:	189b      	adds	r3, r3, r2
 800a166:	63bb      	str	r3, [r7, #56]	; 0x38
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	00da      	lsls	r2, r3, #3
 800a16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a170:	18d3      	adds	r3, r2, r3
 800a172:	4a69      	ldr	r2, [pc, #420]	; (800a318 <USB_EPStartXfer+0x700>)
 800a174:	4694      	mov	ip, r2
 800a176:	4463      	add	r3, ip
 800a178:	637b      	str	r3, [r7, #52]	; 0x34
 800a17a:	1d7b      	adds	r3, r7, #5
 800a17c:	33ff      	adds	r3, #255	; 0xff
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d110      	bne.n	800a1a6 <USB_EPStartXfer+0x58e>
 800a184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a186:	881b      	ldrh	r3, [r3, #0]
 800a188:	b29b      	uxth	r3, r3
 800a18a:	4a61      	ldr	r2, [pc, #388]	; (800a310 <USB_EPStartXfer+0x6f8>)
 800a18c:	4013      	ands	r3, r2
 800a18e:	b29a      	uxth	r2, r3
 800a190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a192:	801a      	strh	r2, [r3, #0]
 800a194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a196:	881b      	ldrh	r3, [r3, #0]
 800a198:	b29b      	uxth	r3, r3
 800a19a:	4a5e      	ldr	r2, [pc, #376]	; (800a314 <USB_EPStartXfer+0x6fc>)
 800a19c:	4313      	orrs	r3, r2
 800a19e:	b29a      	uxth	r2, r3
 800a1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a2:	801a      	strh	r2, [r3, #0]
 800a1a4:	e058      	b.n	800a258 <USB_EPStartXfer+0x640>
 800a1a6:	1d7b      	adds	r3, r7, #5
 800a1a8:	33ff      	adds	r3, #255	; 0xff
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	2b3e      	cmp	r3, #62	; 0x3e
 800a1ae:	d81a      	bhi.n	800a1e6 <USB_EPStartXfer+0x5ce>
 800a1b0:	1d7b      	adds	r3, r7, #5
 800a1b2:	33ff      	adds	r3, #255	; 0xff
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	085b      	lsrs	r3, r3, #1
 800a1b8:	21f4      	movs	r1, #244	; 0xf4
 800a1ba:	187a      	adds	r2, r7, r1
 800a1bc:	6013      	str	r3, [r2, #0]
 800a1be:	1d7b      	adds	r3, r7, #5
 800a1c0:	33ff      	adds	r3, #255	; 0xff
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	d004      	beq.n	800a1d4 <USB_EPStartXfer+0x5bc>
 800a1ca:	187b      	adds	r3, r7, r1
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	187a      	adds	r2, r7, r1
 800a1d2:	6013      	str	r3, [r2, #0]
 800a1d4:	23f4      	movs	r3, #244	; 0xf4
 800a1d6:	18fb      	adds	r3, r7, r3
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	029b      	lsls	r3, r3, #10
 800a1de:	b29a      	uxth	r2, r3
 800a1e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1e2:	801a      	strh	r2, [r3, #0]
 800a1e4:	e038      	b.n	800a258 <USB_EPStartXfer+0x640>
 800a1e6:	1d7b      	adds	r3, r7, #5
 800a1e8:	33ff      	adds	r3, #255	; 0xff
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	095b      	lsrs	r3, r3, #5
 800a1ee:	21f4      	movs	r1, #244	; 0xf4
 800a1f0:	187a      	adds	r2, r7, r1
 800a1f2:	6013      	str	r3, [r2, #0]
 800a1f4:	1d7b      	adds	r3, r7, #5
 800a1f6:	33ff      	adds	r3, #255	; 0xff
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	221f      	movs	r2, #31
 800a1fc:	4013      	ands	r3, r2
 800a1fe:	d104      	bne.n	800a20a <USB_EPStartXfer+0x5f2>
 800a200:	187b      	adds	r3, r7, r1
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	3b01      	subs	r3, #1
 800a206:	187a      	adds	r2, r7, r1
 800a208:	6013      	str	r3, [r2, #0]
 800a20a:	23f4      	movs	r3, #244	; 0xf4
 800a20c:	18fb      	adds	r3, r7, r3
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	b29b      	uxth	r3, r3
 800a212:	029b      	lsls	r3, r3, #10
 800a214:	b29b      	uxth	r3, r3
 800a216:	4a3f      	ldr	r2, [pc, #252]	; (800a314 <USB_EPStartXfer+0x6fc>)
 800a218:	4313      	orrs	r3, r2
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a21e:	801a      	strh	r2, [r3, #0]
 800a220:	e01a      	b.n	800a258 <USB_EPStartXfer+0x640>
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	785b      	ldrb	r3, [r3, #1]
 800a226:	2b01      	cmp	r3, #1
 800a228:	d116      	bne.n	800a258 <USB_EPStartXfer+0x640>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2250      	movs	r2, #80	; 0x50
 800a22e:	5a9b      	ldrh	r3, [r3, r2]
 800a230:	b29b      	uxth	r3, r3
 800a232:	001a      	movs	r2, r3
 800a234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a236:	189b      	adds	r3, r3, r2
 800a238:	643b      	str	r3, [r7, #64]	; 0x40
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	781b      	ldrb	r3, [r3, #0]
 800a23e:	00da      	lsls	r2, r3, #3
 800a240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a242:	18d3      	adds	r3, r2, r3
 800a244:	4a34      	ldr	r2, [pc, #208]	; (800a318 <USB_EPStartXfer+0x700>)
 800a246:	4694      	mov	ip, r2
 800a248:	4463      	add	r3, ip
 800a24a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a24c:	1d7b      	adds	r3, r7, #5
 800a24e:	33ff      	adds	r3, #255	; 0xff
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	b29a      	uxth	r2, r3
 800a254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a256:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a258:	2076      	movs	r0, #118	; 0x76
 800a25a:	183b      	adds	r3, r7, r0
 800a25c:	683a      	ldr	r2, [r7, #0]
 800a25e:	8952      	ldrh	r2, [r2, #10]
 800a260:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	6959      	ldr	r1, [r3, #20]
 800a266:	1d7b      	adds	r3, r7, #5
 800a268:	33ff      	adds	r3, #255	; 0xff
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	b29c      	uxth	r4, r3
 800a26e:	183b      	adds	r3, r7, r0
 800a270:	881a      	ldrh	r2, [r3, #0]
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	0023      	movs	r3, r4
 800a276:	f000 fec3 	bl	800b000 <USB_WritePMA>
 800a27a:	e1a2      	b.n	800a5c2 <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	6a1b      	ldr	r3, [r3, #32]
 800a280:	1d7a      	adds	r2, r7, #5
 800a282:	32ff      	adds	r2, #255	; 0xff
 800a284:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	18d3      	adds	r3, r2, r3
 800a290:	881b      	ldrh	r3, [r3, #0]
 800a292:	b29a      	uxth	r2, r3
 800a294:	2062      	movs	r0, #98	; 0x62
 800a296:	183b      	adds	r3, r7, r0
 800a298:	4920      	ldr	r1, [pc, #128]	; (800a31c <USB_EPStartXfer+0x704>)
 800a29a:	400a      	ands	r2, r1
 800a29c:	801a      	strh	r2, [r3, #0]
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	781b      	ldrb	r3, [r3, #0]
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	18d3      	adds	r3, r2, r3
 800a2a8:	183a      	adds	r2, r7, r0
 800a2aa:	8812      	ldrh	r2, [r2, #0]
 800a2ac:	491c      	ldr	r1, [pc, #112]	; (800a320 <USB_EPStartXfer+0x708>)
 800a2ae:	430a      	orrs	r2, r1
 800a2b0:	b292      	uxth	r2, r2
 800a2b2:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2250      	movs	r2, #80	; 0x50
 800a2bc:	5a9b      	ldrh	r3, [r3, r2]
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	001a      	movs	r2, r3
 800a2c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2c4:	189b      	adds	r3, r3, r2
 800a2c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	00da      	lsls	r2, r3, #3
 800a2ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2d0:	18d3      	adds	r3, r2, r3
 800a2d2:	4a0e      	ldr	r2, [pc, #56]	; (800a30c <USB_EPStartXfer+0x6f4>)
 800a2d4:	4694      	mov	ip, r2
 800a2d6:	4463      	add	r3, ip
 800a2d8:	65bb      	str	r3, [r7, #88]	; 0x58
 800a2da:	1d7b      	adds	r3, r7, #5
 800a2dc:	33ff      	adds	r3, #255	; 0xff
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a2e6:	2076      	movs	r0, #118	; 0x76
 800a2e8:	183b      	adds	r3, r7, r0
 800a2ea:	683a      	ldr	r2, [r7, #0]
 800a2ec:	8912      	ldrh	r2, [r2, #8]
 800a2ee:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	6959      	ldr	r1, [r3, #20]
 800a2f4:	1d7b      	adds	r3, r7, #5
 800a2f6:	33ff      	adds	r3, #255	; 0xff
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	b29c      	uxth	r4, r3
 800a2fc:	183b      	adds	r3, r7, r0
 800a2fe:	881a      	ldrh	r2, [r3, #0]
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	0023      	movs	r3, r4
 800a304:	f000 fe7c 	bl	800b000 <USB_WritePMA>
 800a308:	e15b      	b.n	800a5c2 <USB_EPStartXfer+0x9aa>
 800a30a:	46c0      	nop			; (mov r8, r8)
 800a30c:	00000402 	.word	0x00000402
 800a310:	ffff83ff 	.word	0xffff83ff
 800a314:	ffff8000 	.word	0xffff8000
 800a318:	00000406 	.word	0x00000406
 800a31c:	ffff8e8f 	.word	0xffff8e8f
 800a320:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	6a1a      	ldr	r2, [r3, #32]
 800a328:	1d7b      	adds	r3, r7, #5
 800a32a:	33ff      	adds	r3, #255	; 0xff
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	1ad2      	subs	r2, r2, r3
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	009b      	lsls	r3, r3, #2
 800a33c:	18d3      	adds	r3, r2, r3
 800a33e:	881b      	ldrh	r3, [r3, #0]
 800a340:	b29b      	uxth	r3, r3
 800a342:	001a      	movs	r2, r3
 800a344:	2340      	movs	r3, #64	; 0x40
 800a346:	4013      	ands	r3, r2
 800a348:	d100      	bne.n	800a34c <USB_EPStartXfer+0x734>
 800a34a:	e099      	b.n	800a480 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	673b      	str	r3, [r7, #112]	; 0x70
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	785b      	ldrb	r3, [r3, #1]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d166      	bne.n	800a426 <USB_EPStartXfer+0x80e>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2250      	movs	r2, #80	; 0x50
 800a360:	5a9b      	ldrh	r3, [r3, r2]
 800a362:	b29b      	uxth	r3, r3
 800a364:	001a      	movs	r2, r3
 800a366:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a368:	189b      	adds	r3, r3, r2
 800a36a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	00da      	lsls	r2, r3, #3
 800a372:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a374:	18d3      	adds	r3, r2, r3
 800a376:	4ad0      	ldr	r2, [pc, #832]	; (800a6b8 <USB_EPStartXfer+0xaa0>)
 800a378:	4694      	mov	ip, r2
 800a37a:	4463      	add	r3, ip
 800a37c:	667b      	str	r3, [r7, #100]	; 0x64
 800a37e:	1d7b      	adds	r3, r7, #5
 800a380:	33ff      	adds	r3, #255	; 0xff
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d110      	bne.n	800a3aa <USB_EPStartXfer+0x792>
 800a388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a38a:	881b      	ldrh	r3, [r3, #0]
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	4acb      	ldr	r2, [pc, #812]	; (800a6bc <USB_EPStartXfer+0xaa4>)
 800a390:	4013      	ands	r3, r2
 800a392:	b29a      	uxth	r2, r3
 800a394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a396:	801a      	strh	r2, [r3, #0]
 800a398:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a39a:	881b      	ldrh	r3, [r3, #0]
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	4ac8      	ldr	r2, [pc, #800]	; (800a6c0 <USB_EPStartXfer+0xaa8>)
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	b29a      	uxth	r2, r3
 800a3a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3a6:	801a      	strh	r2, [r3, #0]
 800a3a8:	e058      	b.n	800a45c <USB_EPStartXfer+0x844>
 800a3aa:	1d7b      	adds	r3, r7, #5
 800a3ac:	33ff      	adds	r3, #255	; 0xff
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2b3e      	cmp	r3, #62	; 0x3e
 800a3b2:	d81a      	bhi.n	800a3ea <USB_EPStartXfer+0x7d2>
 800a3b4:	1d7b      	adds	r3, r7, #5
 800a3b6:	33ff      	adds	r3, #255	; 0xff
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	085b      	lsrs	r3, r3, #1
 800a3bc:	21f0      	movs	r1, #240	; 0xf0
 800a3be:	187a      	adds	r2, r7, r1
 800a3c0:	6013      	str	r3, [r2, #0]
 800a3c2:	1d7b      	adds	r3, r7, #5
 800a3c4:	33ff      	adds	r3, #255	; 0xff
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	d004      	beq.n	800a3d8 <USB_EPStartXfer+0x7c0>
 800a3ce:	187b      	adds	r3, r7, r1
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	187a      	adds	r2, r7, r1
 800a3d6:	6013      	str	r3, [r2, #0]
 800a3d8:	23f0      	movs	r3, #240	; 0xf0
 800a3da:	18fb      	adds	r3, r7, r3
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	029b      	lsls	r3, r3, #10
 800a3e2:	b29a      	uxth	r2, r3
 800a3e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3e6:	801a      	strh	r2, [r3, #0]
 800a3e8:	e038      	b.n	800a45c <USB_EPStartXfer+0x844>
 800a3ea:	1d7b      	adds	r3, r7, #5
 800a3ec:	33ff      	adds	r3, #255	; 0xff
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	095b      	lsrs	r3, r3, #5
 800a3f2:	21f0      	movs	r1, #240	; 0xf0
 800a3f4:	187a      	adds	r2, r7, r1
 800a3f6:	6013      	str	r3, [r2, #0]
 800a3f8:	1d7b      	adds	r3, r7, #5
 800a3fa:	33ff      	adds	r3, #255	; 0xff
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	221f      	movs	r2, #31
 800a400:	4013      	ands	r3, r2
 800a402:	d104      	bne.n	800a40e <USB_EPStartXfer+0x7f6>
 800a404:	187b      	adds	r3, r7, r1
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	3b01      	subs	r3, #1
 800a40a:	187a      	adds	r2, r7, r1
 800a40c:	6013      	str	r3, [r2, #0]
 800a40e:	23f0      	movs	r3, #240	; 0xf0
 800a410:	18fb      	adds	r3, r7, r3
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	b29b      	uxth	r3, r3
 800a416:	029b      	lsls	r3, r3, #10
 800a418:	b29b      	uxth	r3, r3
 800a41a:	4aa9      	ldr	r2, [pc, #676]	; (800a6c0 <USB_EPStartXfer+0xaa8>)
 800a41c:	4313      	orrs	r3, r2
 800a41e:	b29a      	uxth	r2, r3
 800a420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a422:	801a      	strh	r2, [r3, #0]
 800a424:	e01a      	b.n	800a45c <USB_EPStartXfer+0x844>
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	785b      	ldrb	r3, [r3, #1]
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d116      	bne.n	800a45c <USB_EPStartXfer+0x844>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2250      	movs	r2, #80	; 0x50
 800a432:	5a9b      	ldrh	r3, [r3, r2]
 800a434:	b29b      	uxth	r3, r3
 800a436:	001a      	movs	r2, r3
 800a438:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a43a:	189b      	adds	r3, r3, r2
 800a43c:	673b      	str	r3, [r7, #112]	; 0x70
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	00da      	lsls	r2, r3, #3
 800a444:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a446:	18d3      	adds	r3, r2, r3
 800a448:	4a9b      	ldr	r2, [pc, #620]	; (800a6b8 <USB_EPStartXfer+0xaa0>)
 800a44a:	4694      	mov	ip, r2
 800a44c:	4463      	add	r3, ip
 800a44e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a450:	1d7b      	adds	r3, r7, #5
 800a452:	33ff      	adds	r3, #255	; 0xff
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	b29a      	uxth	r2, r3
 800a458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a45a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a45c:	2076      	movs	r0, #118	; 0x76
 800a45e:	183b      	adds	r3, r7, r0
 800a460:	683a      	ldr	r2, [r7, #0]
 800a462:	8952      	ldrh	r2, [r2, #10]
 800a464:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	6959      	ldr	r1, [r3, #20]
 800a46a:	1d7b      	adds	r3, r7, #5
 800a46c:	33ff      	adds	r3, #255	; 0xff
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	b29c      	uxth	r4, r3
 800a472:	183b      	adds	r3, r7, r0
 800a474:	881a      	ldrh	r2, [r3, #0]
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	0023      	movs	r3, r4
 800a47a:	f000 fdc1 	bl	800b000 <USB_WritePMA>
 800a47e:	e0a0      	b.n	800a5c2 <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	785b      	ldrb	r3, [r3, #1]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d166      	bne.n	800a556 <USB_EPStartXfer+0x93e>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2250      	movs	r2, #80	; 0x50
 800a490:	5a9b      	ldrh	r3, [r3, r2]
 800a492:	b29b      	uxth	r3, r3
 800a494:	001a      	movs	r2, r3
 800a496:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a498:	189b      	adds	r3, r3, r2
 800a49a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	00da      	lsls	r2, r3, #3
 800a4a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a4a4:	18d3      	adds	r3, r2, r3
 800a4a6:	4a87      	ldr	r2, [pc, #540]	; (800a6c4 <USB_EPStartXfer+0xaac>)
 800a4a8:	4694      	mov	ip, r2
 800a4aa:	4463      	add	r3, ip
 800a4ac:	67bb      	str	r3, [r7, #120]	; 0x78
 800a4ae:	1d7b      	adds	r3, r7, #5
 800a4b0:	33ff      	adds	r3, #255	; 0xff
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d110      	bne.n	800a4da <USB_EPStartXfer+0x8c2>
 800a4b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4ba:	881b      	ldrh	r3, [r3, #0]
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	4a7f      	ldr	r2, [pc, #508]	; (800a6bc <USB_EPStartXfer+0xaa4>)
 800a4c0:	4013      	ands	r3, r2
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4c6:	801a      	strh	r2, [r3, #0]
 800a4c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4ca:	881b      	ldrh	r3, [r3, #0]
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	4a7c      	ldr	r2, [pc, #496]	; (800a6c0 <USB_EPStartXfer+0xaa8>)
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4d6:	801a      	strh	r2, [r3, #0]
 800a4d8:	e062      	b.n	800a5a0 <USB_EPStartXfer+0x988>
 800a4da:	1d7b      	adds	r3, r7, #5
 800a4dc:	33ff      	adds	r3, #255	; 0xff
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b3e      	cmp	r3, #62	; 0x3e
 800a4e2:	d81a      	bhi.n	800a51a <USB_EPStartXfer+0x902>
 800a4e4:	1d7b      	adds	r3, r7, #5
 800a4e6:	33ff      	adds	r3, #255	; 0xff
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	085b      	lsrs	r3, r3, #1
 800a4ec:	21ec      	movs	r1, #236	; 0xec
 800a4ee:	187a      	adds	r2, r7, r1
 800a4f0:	6013      	str	r3, [r2, #0]
 800a4f2:	1d7b      	adds	r3, r7, #5
 800a4f4:	33ff      	adds	r3, #255	; 0xff
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	4013      	ands	r3, r2
 800a4fc:	d004      	beq.n	800a508 <USB_EPStartXfer+0x8f0>
 800a4fe:	187b      	adds	r3, r7, r1
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	3301      	adds	r3, #1
 800a504:	187a      	adds	r2, r7, r1
 800a506:	6013      	str	r3, [r2, #0]
 800a508:	23ec      	movs	r3, #236	; 0xec
 800a50a:	18fb      	adds	r3, r7, r3
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	b29b      	uxth	r3, r3
 800a510:	029b      	lsls	r3, r3, #10
 800a512:	b29a      	uxth	r2, r3
 800a514:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a516:	801a      	strh	r2, [r3, #0]
 800a518:	e042      	b.n	800a5a0 <USB_EPStartXfer+0x988>
 800a51a:	1d7b      	adds	r3, r7, #5
 800a51c:	33ff      	adds	r3, #255	; 0xff
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	095b      	lsrs	r3, r3, #5
 800a522:	21ec      	movs	r1, #236	; 0xec
 800a524:	187a      	adds	r2, r7, r1
 800a526:	6013      	str	r3, [r2, #0]
 800a528:	1d7b      	adds	r3, r7, #5
 800a52a:	33ff      	adds	r3, #255	; 0xff
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	221f      	movs	r2, #31
 800a530:	4013      	ands	r3, r2
 800a532:	d104      	bne.n	800a53e <USB_EPStartXfer+0x926>
 800a534:	187b      	adds	r3, r7, r1
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	3b01      	subs	r3, #1
 800a53a:	187a      	adds	r2, r7, r1
 800a53c:	6013      	str	r3, [r2, #0]
 800a53e:	23ec      	movs	r3, #236	; 0xec
 800a540:	18fb      	adds	r3, r7, r3
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	b29b      	uxth	r3, r3
 800a546:	029b      	lsls	r3, r3, #10
 800a548:	b29b      	uxth	r3, r3
 800a54a:	4a5d      	ldr	r2, [pc, #372]	; (800a6c0 <USB_EPStartXfer+0xaa8>)
 800a54c:	4313      	orrs	r3, r2
 800a54e:	b29a      	uxth	r2, r3
 800a550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a552:	801a      	strh	r2, [r3, #0]
 800a554:	e024      	b.n	800a5a0 <USB_EPStartXfer+0x988>
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	785b      	ldrb	r3, [r3, #1]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d120      	bne.n	800a5a0 <USB_EPStartXfer+0x988>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2184      	movs	r1, #132	; 0x84
 800a562:	187a      	adds	r2, r7, r1
 800a564:	6013      	str	r3, [r2, #0]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2250      	movs	r2, #80	; 0x50
 800a56a:	5a9b      	ldrh	r3, [r3, r2]
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	001a      	movs	r2, r3
 800a570:	187b      	adds	r3, r7, r1
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	189b      	adds	r3, r3, r2
 800a576:	187a      	adds	r2, r7, r1
 800a578:	6013      	str	r3, [r2, #0]
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	00da      	lsls	r2, r3, #3
 800a580:	187b      	adds	r3, r7, r1
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	18d3      	adds	r3, r2, r3
 800a586:	4a4f      	ldr	r2, [pc, #316]	; (800a6c4 <USB_EPStartXfer+0xaac>)
 800a588:	4694      	mov	ip, r2
 800a58a:	4463      	add	r3, ip
 800a58c:	2180      	movs	r1, #128	; 0x80
 800a58e:	187a      	adds	r2, r7, r1
 800a590:	6013      	str	r3, [r2, #0]
 800a592:	1d7b      	adds	r3, r7, #5
 800a594:	33ff      	adds	r3, #255	; 0xff
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	b29a      	uxth	r2, r3
 800a59a:	187b      	adds	r3, r7, r1
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a5a0:	2076      	movs	r0, #118	; 0x76
 800a5a2:	183b      	adds	r3, r7, r0
 800a5a4:	683a      	ldr	r2, [r7, #0]
 800a5a6:	8912      	ldrh	r2, [r2, #8]
 800a5a8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	6959      	ldr	r1, [r3, #20]
 800a5ae:	1d7b      	adds	r3, r7, #5
 800a5b0:	33ff      	adds	r3, #255	; 0xff
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	b29c      	uxth	r4, r3
 800a5b6:	183b      	adds	r3, r7, r0
 800a5b8:	881a      	ldrh	r2, [r3, #0]
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	0023      	movs	r3, r4
 800a5be:	f000 fd1f 	bl	800b000 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	009b      	lsls	r3, r3, #2
 800a5ca:	18d3      	adds	r3, r2, r3
 800a5cc:	881b      	ldrh	r3, [r3, #0]
 800a5ce:	b29a      	uxth	r2, r3
 800a5d0:	200a      	movs	r0, #10
 800a5d2:	183b      	adds	r3, r7, r0
 800a5d4:	493c      	ldr	r1, [pc, #240]	; (800a6c8 <USB_EPStartXfer+0xab0>)
 800a5d6:	400a      	ands	r2, r1
 800a5d8:	801a      	strh	r2, [r3, #0]
 800a5da:	183b      	adds	r3, r7, r0
 800a5dc:	183a      	adds	r2, r7, r0
 800a5de:	8812      	ldrh	r2, [r2, #0]
 800a5e0:	2110      	movs	r1, #16
 800a5e2:	404a      	eors	r2, r1
 800a5e4:	801a      	strh	r2, [r3, #0]
 800a5e6:	183b      	adds	r3, r7, r0
 800a5e8:	183a      	adds	r2, r7, r0
 800a5ea:	8812      	ldrh	r2, [r2, #0]
 800a5ec:	2120      	movs	r1, #32
 800a5ee:	404a      	eors	r2, r1
 800a5f0:	801a      	strh	r2, [r3, #0]
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	18d3      	adds	r3, r2, r3
 800a5fc:	183a      	adds	r2, r7, r0
 800a5fe:	8812      	ldrh	r2, [r2, #0]
 800a600:	4932      	ldr	r1, [pc, #200]	; (800a6cc <USB_EPStartXfer+0xab4>)
 800a602:	430a      	orrs	r2, r1
 800a604:	b292      	uxth	r2, r2
 800a606:	801a      	strh	r2, [r3, #0]
 800a608:	f000 fbaf 	bl	800ad6a <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	7b1b      	ldrb	r3, [r3, #12]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d000      	beq.n	800a616 <USB_EPStartXfer+0x9fe>
 800a614:	e09e      	b.n	800a754 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	699a      	ldr	r2, [r3, #24]
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d90d      	bls.n	800a63e <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	1d7a      	adds	r2, r7, #5
 800a628:	32ff      	adds	r2, #255	; 0xff
 800a62a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	699a      	ldr	r2, [r3, #24]
 800a630:	1d7b      	adds	r3, r7, #5
 800a632:	33ff      	adds	r3, #255	; 0xff
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	1ad2      	subs	r2, r2, r3
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	619a      	str	r2, [r3, #24]
 800a63c:	e007      	b.n	800a64e <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	699b      	ldr	r3, [r3, #24]
 800a642:	1d7a      	adds	r2, r7, #5
 800a644:	32ff      	adds	r2, #255	; 0xff
 800a646:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	2200      	movs	r2, #0
 800a64c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2190      	movs	r1, #144	; 0x90
 800a652:	187a      	adds	r2, r7, r1
 800a654:	6013      	str	r3, [r2, #0]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2250      	movs	r2, #80	; 0x50
 800a65a:	5a9b      	ldrh	r3, [r3, r2]
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	001a      	movs	r2, r3
 800a660:	187b      	adds	r3, r7, r1
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	189b      	adds	r3, r3, r2
 800a666:	187a      	adds	r2, r7, r1
 800a668:	6013      	str	r3, [r2, #0]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	00da      	lsls	r2, r3, #3
 800a670:	187b      	adds	r3, r7, r1
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	18d3      	adds	r3, r2, r3
 800a676:	4a10      	ldr	r2, [pc, #64]	; (800a6b8 <USB_EPStartXfer+0xaa0>)
 800a678:	4694      	mov	ip, r2
 800a67a:	4463      	add	r3, ip
 800a67c:	218c      	movs	r1, #140	; 0x8c
 800a67e:	187a      	adds	r2, r7, r1
 800a680:	6013      	str	r3, [r2, #0]
 800a682:	1d7b      	adds	r3, r7, #5
 800a684:	33ff      	adds	r3, #255	; 0xff
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d121      	bne.n	800a6d0 <USB_EPStartXfer+0xab8>
 800a68c:	187b      	adds	r3, r7, r1
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	881b      	ldrh	r3, [r3, #0]
 800a692:	b29b      	uxth	r3, r3
 800a694:	4a09      	ldr	r2, [pc, #36]	; (800a6bc <USB_EPStartXfer+0xaa4>)
 800a696:	4013      	ands	r3, r2
 800a698:	b29a      	uxth	r2, r3
 800a69a:	187b      	adds	r3, r7, r1
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	801a      	strh	r2, [r3, #0]
 800a6a0:	187b      	adds	r3, r7, r1
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	881b      	ldrh	r3, [r3, #0]
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	4a05      	ldr	r2, [pc, #20]	; (800a6c0 <USB_EPStartXfer+0xaa8>)
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	b29a      	uxth	r2, r3
 800a6ae:	187b      	adds	r3, r7, r1
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	801a      	strh	r2, [r3, #0]
 800a6b4:	e334      	b.n	800ad20 <USB_EPStartXfer+0x1108>
 800a6b6:	46c0      	nop			; (mov r8, r8)
 800a6b8:	00000406 	.word	0x00000406
 800a6bc:	ffff83ff 	.word	0xffff83ff
 800a6c0:	ffff8000 	.word	0xffff8000
 800a6c4:	00000402 	.word	0x00000402
 800a6c8:	ffff8fbf 	.word	0xffff8fbf
 800a6cc:	ffff8080 	.word	0xffff8080
 800a6d0:	1d7b      	adds	r3, r7, #5
 800a6d2:	33ff      	adds	r3, #255	; 0xff
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2b3e      	cmp	r3, #62	; 0x3e
 800a6d8:	d81c      	bhi.n	800a714 <USB_EPStartXfer+0xafc>
 800a6da:	1d7b      	adds	r3, r7, #5
 800a6dc:	33ff      	adds	r3, #255	; 0xff
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	085b      	lsrs	r3, r3, #1
 800a6e2:	21e8      	movs	r1, #232	; 0xe8
 800a6e4:	187a      	adds	r2, r7, r1
 800a6e6:	6013      	str	r3, [r2, #0]
 800a6e8:	1d7b      	adds	r3, r7, #5
 800a6ea:	33ff      	adds	r3, #255	; 0xff
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	4013      	ands	r3, r2
 800a6f2:	d004      	beq.n	800a6fe <USB_EPStartXfer+0xae6>
 800a6f4:	187b      	adds	r3, r7, r1
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	187a      	adds	r2, r7, r1
 800a6fc:	6013      	str	r3, [r2, #0]
 800a6fe:	23e8      	movs	r3, #232	; 0xe8
 800a700:	18fb      	adds	r3, r7, r3
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	b29b      	uxth	r3, r3
 800a706:	029b      	lsls	r3, r3, #10
 800a708:	b29a      	uxth	r2, r3
 800a70a:	238c      	movs	r3, #140	; 0x8c
 800a70c:	18fb      	adds	r3, r7, r3
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	801a      	strh	r2, [r3, #0]
 800a712:	e305      	b.n	800ad20 <USB_EPStartXfer+0x1108>
 800a714:	1d7b      	adds	r3, r7, #5
 800a716:	33ff      	adds	r3, #255	; 0xff
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	095b      	lsrs	r3, r3, #5
 800a71c:	21e8      	movs	r1, #232	; 0xe8
 800a71e:	187a      	adds	r2, r7, r1
 800a720:	6013      	str	r3, [r2, #0]
 800a722:	1d7b      	adds	r3, r7, #5
 800a724:	33ff      	adds	r3, #255	; 0xff
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	221f      	movs	r2, #31
 800a72a:	4013      	ands	r3, r2
 800a72c:	d104      	bne.n	800a738 <USB_EPStartXfer+0xb20>
 800a72e:	187b      	adds	r3, r7, r1
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	3b01      	subs	r3, #1
 800a734:	187a      	adds	r2, r7, r1
 800a736:	6013      	str	r3, [r2, #0]
 800a738:	23e8      	movs	r3, #232	; 0xe8
 800a73a:	18fb      	adds	r3, r7, r3
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	b29b      	uxth	r3, r3
 800a740:	029b      	lsls	r3, r3, #10
 800a742:	b29b      	uxth	r3, r3
 800a744:	4aca      	ldr	r2, [pc, #808]	; (800aa70 <USB_EPStartXfer+0xe58>)
 800a746:	4313      	orrs	r3, r2
 800a748:	b29a      	uxth	r2, r3
 800a74a:	238c      	movs	r3, #140	; 0x8c
 800a74c:	18fb      	adds	r3, r7, r3
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	801a      	strh	r2, [r3, #0]
 800a752:	e2e5      	b.n	800ad20 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	78db      	ldrb	r3, [r3, #3]
 800a758:	2b02      	cmp	r3, #2
 800a75a:	d000      	beq.n	800a75e <USB_EPStartXfer+0xb46>
 800a75c:	e16f      	b.n	800aa3e <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	785b      	ldrb	r3, [r3, #1]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d16f      	bne.n	800a846 <USB_EPStartXfer+0xc2e>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	21ac      	movs	r1, #172	; 0xac
 800a76a:	187a      	adds	r2, r7, r1
 800a76c:	6013      	str	r3, [r2, #0]
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2250      	movs	r2, #80	; 0x50
 800a772:	5a9b      	ldrh	r3, [r3, r2]
 800a774:	b29b      	uxth	r3, r3
 800a776:	001a      	movs	r2, r3
 800a778:	187b      	adds	r3, r7, r1
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	189b      	adds	r3, r3, r2
 800a77e:	187a      	adds	r2, r7, r1
 800a780:	6013      	str	r3, [r2, #0]
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	00da      	lsls	r2, r3, #3
 800a788:	187b      	adds	r3, r7, r1
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	18d3      	adds	r3, r2, r3
 800a78e:	4ab9      	ldr	r2, [pc, #740]	; (800aa74 <USB_EPStartXfer+0xe5c>)
 800a790:	4694      	mov	ip, r2
 800a792:	4463      	add	r3, ip
 800a794:	21a8      	movs	r1, #168	; 0xa8
 800a796:	187a      	adds	r2, r7, r1
 800a798:	6013      	str	r3, [r2, #0]
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	691b      	ldr	r3, [r3, #16]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d114      	bne.n	800a7cc <USB_EPStartXfer+0xbb4>
 800a7a2:	187b      	adds	r3, r7, r1
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	881b      	ldrh	r3, [r3, #0]
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	4ab3      	ldr	r2, [pc, #716]	; (800aa78 <USB_EPStartXfer+0xe60>)
 800a7ac:	4013      	ands	r3, r2
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	187b      	adds	r3, r7, r1
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	801a      	strh	r2, [r3, #0]
 800a7b6:	187b      	adds	r3, r7, r1
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	881b      	ldrh	r3, [r3, #0]
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	4aac      	ldr	r2, [pc, #688]	; (800aa70 <USB_EPStartXfer+0xe58>)
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	187b      	adds	r3, r7, r1
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	801a      	strh	r2, [r3, #0]
 800a7ca:	e060      	b.n	800a88e <USB_EPStartXfer+0xc76>
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	691b      	ldr	r3, [r3, #16]
 800a7d0:	2b3e      	cmp	r3, #62	; 0x3e
 800a7d2:	d81a      	bhi.n	800a80a <USB_EPStartXfer+0xbf2>
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	691b      	ldr	r3, [r3, #16]
 800a7d8:	085b      	lsrs	r3, r3, #1
 800a7da:	21e4      	movs	r1, #228	; 0xe4
 800a7dc:	187a      	adds	r2, r7, r1
 800a7de:	6013      	str	r3, [r2, #0]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	691b      	ldr	r3, [r3, #16]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	4013      	ands	r3, r2
 800a7e8:	d004      	beq.n	800a7f4 <USB_EPStartXfer+0xbdc>
 800a7ea:	187b      	adds	r3, r7, r1
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	187a      	adds	r2, r7, r1
 800a7f2:	6013      	str	r3, [r2, #0]
 800a7f4:	23e4      	movs	r3, #228	; 0xe4
 800a7f6:	18fb      	adds	r3, r7, r3
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	029b      	lsls	r3, r3, #10
 800a7fe:	b29a      	uxth	r2, r3
 800a800:	23a8      	movs	r3, #168	; 0xa8
 800a802:	18fb      	adds	r3, r7, r3
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	801a      	strh	r2, [r3, #0]
 800a808:	e041      	b.n	800a88e <USB_EPStartXfer+0xc76>
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	691b      	ldr	r3, [r3, #16]
 800a80e:	095b      	lsrs	r3, r3, #5
 800a810:	21e4      	movs	r1, #228	; 0xe4
 800a812:	187a      	adds	r2, r7, r1
 800a814:	6013      	str	r3, [r2, #0]
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	221f      	movs	r2, #31
 800a81c:	4013      	ands	r3, r2
 800a81e:	d104      	bne.n	800a82a <USB_EPStartXfer+0xc12>
 800a820:	187b      	adds	r3, r7, r1
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	3b01      	subs	r3, #1
 800a826:	187a      	adds	r2, r7, r1
 800a828:	6013      	str	r3, [r2, #0]
 800a82a:	23e4      	movs	r3, #228	; 0xe4
 800a82c:	18fb      	adds	r3, r7, r3
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	b29b      	uxth	r3, r3
 800a832:	029b      	lsls	r3, r3, #10
 800a834:	b29b      	uxth	r3, r3
 800a836:	4a8e      	ldr	r2, [pc, #568]	; (800aa70 <USB_EPStartXfer+0xe58>)
 800a838:	4313      	orrs	r3, r2
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	23a8      	movs	r3, #168	; 0xa8
 800a83e:	18fb      	adds	r3, r7, r3
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	801a      	strh	r2, [r3, #0]
 800a844:	e023      	b.n	800a88e <USB_EPStartXfer+0xc76>
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	785b      	ldrb	r3, [r3, #1]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d11f      	bne.n	800a88e <USB_EPStartXfer+0xc76>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	21b4      	movs	r1, #180	; 0xb4
 800a852:	187a      	adds	r2, r7, r1
 800a854:	6013      	str	r3, [r2, #0]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2250      	movs	r2, #80	; 0x50
 800a85a:	5a9b      	ldrh	r3, [r3, r2]
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	001a      	movs	r2, r3
 800a860:	187b      	adds	r3, r7, r1
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	189b      	adds	r3, r3, r2
 800a866:	187a      	adds	r2, r7, r1
 800a868:	6013      	str	r3, [r2, #0]
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	00da      	lsls	r2, r3, #3
 800a870:	187b      	adds	r3, r7, r1
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	18d3      	adds	r3, r2, r3
 800a876:	4a7f      	ldr	r2, [pc, #508]	; (800aa74 <USB_EPStartXfer+0xe5c>)
 800a878:	4694      	mov	ip, r2
 800a87a:	4463      	add	r3, ip
 800a87c:	21b0      	movs	r1, #176	; 0xb0
 800a87e:	187a      	adds	r2, r7, r1
 800a880:	6013      	str	r3, [r2, #0]
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	691b      	ldr	r3, [r3, #16]
 800a886:	b29a      	uxth	r2, r3
 800a888:	187b      	adds	r3, r7, r1
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	801a      	strh	r2, [r3, #0]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	22a4      	movs	r2, #164	; 0xa4
 800a892:	18ba      	adds	r2, r7, r2
 800a894:	6013      	str	r3, [r2, #0]
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	785b      	ldrb	r3, [r3, #1]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d16f      	bne.n	800a97e <USB_EPStartXfer+0xd66>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	219c      	movs	r1, #156	; 0x9c
 800a8a2:	187a      	adds	r2, r7, r1
 800a8a4:	6013      	str	r3, [r2, #0]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2250      	movs	r2, #80	; 0x50
 800a8aa:	5a9b      	ldrh	r3, [r3, r2]
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	001a      	movs	r2, r3
 800a8b0:	187b      	adds	r3, r7, r1
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	189b      	adds	r3, r3, r2
 800a8b6:	187a      	adds	r2, r7, r1
 800a8b8:	6013      	str	r3, [r2, #0]
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	00da      	lsls	r2, r3, #3
 800a8c0:	187b      	adds	r3, r7, r1
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	18d3      	adds	r3, r2, r3
 800a8c6:	4a6d      	ldr	r2, [pc, #436]	; (800aa7c <USB_EPStartXfer+0xe64>)
 800a8c8:	4694      	mov	ip, r2
 800a8ca:	4463      	add	r3, ip
 800a8cc:	2198      	movs	r1, #152	; 0x98
 800a8ce:	187a      	adds	r2, r7, r1
 800a8d0:	6013      	str	r3, [r2, #0]
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d114      	bne.n	800a904 <USB_EPStartXfer+0xcec>
 800a8da:	187b      	adds	r3, r7, r1
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	881b      	ldrh	r3, [r3, #0]
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	4a65      	ldr	r2, [pc, #404]	; (800aa78 <USB_EPStartXfer+0xe60>)
 800a8e4:	4013      	ands	r3, r2
 800a8e6:	b29a      	uxth	r2, r3
 800a8e8:	187b      	adds	r3, r7, r1
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	801a      	strh	r2, [r3, #0]
 800a8ee:	187b      	adds	r3, r7, r1
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	881b      	ldrh	r3, [r3, #0]
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	4a5e      	ldr	r2, [pc, #376]	; (800aa70 <USB_EPStartXfer+0xe58>)
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	187b      	adds	r3, r7, r1
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	801a      	strh	r2, [r3, #0]
 800a902:	e05d      	b.n	800a9c0 <USB_EPStartXfer+0xda8>
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	691b      	ldr	r3, [r3, #16]
 800a908:	2b3e      	cmp	r3, #62	; 0x3e
 800a90a:	d81a      	bhi.n	800a942 <USB_EPStartXfer+0xd2a>
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	085b      	lsrs	r3, r3, #1
 800a912:	21e0      	movs	r1, #224	; 0xe0
 800a914:	187a      	adds	r2, r7, r1
 800a916:	6013      	str	r3, [r2, #0]
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	691b      	ldr	r3, [r3, #16]
 800a91c:	2201      	movs	r2, #1
 800a91e:	4013      	ands	r3, r2
 800a920:	d004      	beq.n	800a92c <USB_EPStartXfer+0xd14>
 800a922:	187b      	adds	r3, r7, r1
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	3301      	adds	r3, #1
 800a928:	187a      	adds	r2, r7, r1
 800a92a:	6013      	str	r3, [r2, #0]
 800a92c:	23e0      	movs	r3, #224	; 0xe0
 800a92e:	18fb      	adds	r3, r7, r3
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	b29b      	uxth	r3, r3
 800a934:	029b      	lsls	r3, r3, #10
 800a936:	b29a      	uxth	r2, r3
 800a938:	2398      	movs	r3, #152	; 0x98
 800a93a:	18fb      	adds	r3, r7, r3
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	801a      	strh	r2, [r3, #0]
 800a940:	e03e      	b.n	800a9c0 <USB_EPStartXfer+0xda8>
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	691b      	ldr	r3, [r3, #16]
 800a946:	095b      	lsrs	r3, r3, #5
 800a948:	21e0      	movs	r1, #224	; 0xe0
 800a94a:	187a      	adds	r2, r7, r1
 800a94c:	6013      	str	r3, [r2, #0]
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	691b      	ldr	r3, [r3, #16]
 800a952:	221f      	movs	r2, #31
 800a954:	4013      	ands	r3, r2
 800a956:	d104      	bne.n	800a962 <USB_EPStartXfer+0xd4a>
 800a958:	187b      	adds	r3, r7, r1
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	3b01      	subs	r3, #1
 800a95e:	187a      	adds	r2, r7, r1
 800a960:	6013      	str	r3, [r2, #0]
 800a962:	23e0      	movs	r3, #224	; 0xe0
 800a964:	18fb      	adds	r3, r7, r3
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	b29b      	uxth	r3, r3
 800a96a:	029b      	lsls	r3, r3, #10
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	4a40      	ldr	r2, [pc, #256]	; (800aa70 <USB_EPStartXfer+0xe58>)
 800a970:	4313      	orrs	r3, r2
 800a972:	b29a      	uxth	r2, r3
 800a974:	2398      	movs	r3, #152	; 0x98
 800a976:	18fb      	adds	r3, r7, r3
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	801a      	strh	r2, [r3, #0]
 800a97c:	e020      	b.n	800a9c0 <USB_EPStartXfer+0xda8>
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	785b      	ldrb	r3, [r3, #1]
 800a982:	2b01      	cmp	r3, #1
 800a984:	d11c      	bne.n	800a9c0 <USB_EPStartXfer+0xda8>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2250      	movs	r2, #80	; 0x50
 800a98a:	5a9b      	ldrh	r3, [r3, r2]
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	001a      	movs	r2, r3
 800a990:	21a4      	movs	r1, #164	; 0xa4
 800a992:	187b      	adds	r3, r7, r1
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	189b      	adds	r3, r3, r2
 800a998:	187a      	adds	r2, r7, r1
 800a99a:	6013      	str	r3, [r2, #0]
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	00da      	lsls	r2, r3, #3
 800a9a2:	187b      	adds	r3, r7, r1
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	18d3      	adds	r3, r2, r3
 800a9a8:	4a34      	ldr	r2, [pc, #208]	; (800aa7c <USB_EPStartXfer+0xe64>)
 800a9aa:	4694      	mov	ip, r2
 800a9ac:	4463      	add	r3, ip
 800a9ae:	21a0      	movs	r1, #160	; 0xa0
 800a9b0:	187a      	adds	r2, r7, r1
 800a9b2:	6013      	str	r3, [r2, #0]
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	691b      	ldr	r3, [r3, #16]
 800a9b8:	b29a      	uxth	r2, r3
 800a9ba:	187b      	adds	r3, r7, r1
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	69db      	ldr	r3, [r3, #28]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d100      	bne.n	800a9ca <USB_EPStartXfer+0xdb2>
 800a9c8:	e1aa      	b.n	800ad20 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	18d2      	adds	r2, r2, r3
 800a9d4:	2196      	movs	r1, #150	; 0x96
 800a9d6:	187b      	adds	r3, r7, r1
 800a9d8:	8812      	ldrh	r2, [r2, #0]
 800a9da:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a9dc:	187b      	adds	r3, r7, r1
 800a9de:	881a      	ldrh	r2, [r3, #0]
 800a9e0:	2380      	movs	r3, #128	; 0x80
 800a9e2:	01db      	lsls	r3, r3, #7
 800a9e4:	4013      	ands	r3, r2
 800a9e6:	d004      	beq.n	800a9f2 <USB_EPStartXfer+0xdda>
 800a9e8:	187b      	adds	r3, r7, r1
 800a9ea:	881b      	ldrh	r3, [r3, #0]
 800a9ec:	2240      	movs	r2, #64	; 0x40
 800a9ee:	4013      	ands	r3, r2
 800a9f0:	d10d      	bne.n	800aa0e <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a9f2:	2196      	movs	r1, #150	; 0x96
 800a9f4:	187b      	adds	r3, r7, r1
 800a9f6:	881a      	ldrh	r2, [r3, #0]
 800a9f8:	2380      	movs	r3, #128	; 0x80
 800a9fa:	01db      	lsls	r3, r3, #7
 800a9fc:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a9fe:	d000      	beq.n	800aa02 <USB_EPStartXfer+0xdea>
 800aa00:	e18e      	b.n	800ad20 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800aa02:	187b      	adds	r3, r7, r1
 800aa04:	881b      	ldrh	r3, [r3, #0]
 800aa06:	2240      	movs	r2, #64	; 0x40
 800aa08:	4013      	ands	r3, r2
 800aa0a:	d000      	beq.n	800aa0e <USB_EPStartXfer+0xdf6>
 800aa0c:	e188      	b.n	800ad20 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	18d3      	adds	r3, r2, r3
 800aa18:	881b      	ldrh	r3, [r3, #0]
 800aa1a:	b29a      	uxth	r2, r3
 800aa1c:	2094      	movs	r0, #148	; 0x94
 800aa1e:	183b      	adds	r3, r7, r0
 800aa20:	4917      	ldr	r1, [pc, #92]	; (800aa80 <USB_EPStartXfer+0xe68>)
 800aa22:	400a      	ands	r2, r1
 800aa24:	801a      	strh	r2, [r3, #0]
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	18d3      	adds	r3, r2, r3
 800aa30:	183a      	adds	r2, r7, r0
 800aa32:	8812      	ldrh	r2, [r2, #0]
 800aa34:	4913      	ldr	r1, [pc, #76]	; (800aa84 <USB_EPStartXfer+0xe6c>)
 800aa36:	430a      	orrs	r2, r1
 800aa38:	b292      	uxth	r2, r2
 800aa3a:	801a      	strh	r2, [r3, #0]
 800aa3c:	e170      	b.n	800ad20 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	78db      	ldrb	r3, [r3, #3]
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d000      	beq.n	800aa48 <USB_EPStartXfer+0xe30>
 800aa46:	e169      	b.n	800ad1c <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	699a      	ldr	r2, [r3, #24]
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d919      	bls.n	800aa88 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	691b      	ldr	r3, [r3, #16]
 800aa58:	1d7a      	adds	r2, r7, #5
 800aa5a:	32ff      	adds	r2, #255	; 0xff
 800aa5c:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	699a      	ldr	r2, [r3, #24]
 800aa62:	1d7b      	adds	r3, r7, #5
 800aa64:	33ff      	adds	r3, #255	; 0xff
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	1ad2      	subs	r2, r2, r3
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	619a      	str	r2, [r3, #24]
 800aa6e:	e013      	b.n	800aa98 <USB_EPStartXfer+0xe80>
 800aa70:	ffff8000 	.word	0xffff8000
 800aa74:	00000402 	.word	0x00000402
 800aa78:	ffff83ff 	.word	0xffff83ff
 800aa7c:	00000406 	.word	0x00000406
 800aa80:	ffff8f8f 	.word	0xffff8f8f
 800aa84:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	699b      	ldr	r3, [r3, #24]
 800aa8c:	1d7a      	adds	r2, r7, #5
 800aa8e:	32ff      	adds	r2, #255	; 0xff
 800aa90:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	2200      	movs	r2, #0
 800aa96:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	785b      	ldrb	r3, [r3, #1]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d000      	beq.n	800aaa2 <USB_EPStartXfer+0xe8a>
 800aaa0:	e075      	b.n	800ab8e <USB_EPStartXfer+0xf76>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	21cc      	movs	r1, #204	; 0xcc
 800aaa6:	187a      	adds	r2, r7, r1
 800aaa8:	6013      	str	r3, [r2, #0]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2250      	movs	r2, #80	; 0x50
 800aaae:	5a9b      	ldrh	r3, [r3, r2]
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	001a      	movs	r2, r3
 800aab4:	187b      	adds	r3, r7, r1
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	189b      	adds	r3, r3, r2
 800aaba:	187a      	adds	r2, r7, r1
 800aabc:	6013      	str	r3, [r2, #0]
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	00da      	lsls	r2, r3, #3
 800aac4:	187b      	adds	r3, r7, r1
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	18d3      	adds	r3, r2, r3
 800aaca:	4aaa      	ldr	r2, [pc, #680]	; (800ad74 <USB_EPStartXfer+0x115c>)
 800aacc:	4694      	mov	ip, r2
 800aace:	4463      	add	r3, ip
 800aad0:	21c8      	movs	r1, #200	; 0xc8
 800aad2:	187a      	adds	r2, r7, r1
 800aad4:	6013      	str	r3, [r2, #0]
 800aad6:	1d7b      	adds	r3, r7, #5
 800aad8:	33ff      	adds	r3, #255	; 0xff
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d114      	bne.n	800ab0a <USB_EPStartXfer+0xef2>
 800aae0:	187b      	adds	r3, r7, r1
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	881b      	ldrh	r3, [r3, #0]
 800aae6:	b29b      	uxth	r3, r3
 800aae8:	4aa3      	ldr	r2, [pc, #652]	; (800ad78 <USB_EPStartXfer+0x1160>)
 800aaea:	4013      	ands	r3, r2
 800aaec:	b29a      	uxth	r2, r3
 800aaee:	187b      	adds	r3, r7, r1
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	801a      	strh	r2, [r3, #0]
 800aaf4:	187b      	adds	r3, r7, r1
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	881b      	ldrh	r3, [r3, #0]
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	4a9f      	ldr	r2, [pc, #636]	; (800ad7c <USB_EPStartXfer+0x1164>)
 800aafe:	4313      	orrs	r3, r2
 800ab00:	b29a      	uxth	r2, r3
 800ab02:	187b      	adds	r3, r7, r1
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	801a      	strh	r2, [r3, #0]
 800ab08:	e066      	b.n	800abd8 <USB_EPStartXfer+0xfc0>
 800ab0a:	1d7b      	adds	r3, r7, #5
 800ab0c:	33ff      	adds	r3, #255	; 0xff
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2b3e      	cmp	r3, #62	; 0x3e
 800ab12:	d81c      	bhi.n	800ab4e <USB_EPStartXfer+0xf36>
 800ab14:	1d7b      	adds	r3, r7, #5
 800ab16:	33ff      	adds	r3, #255	; 0xff
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	085b      	lsrs	r3, r3, #1
 800ab1c:	21dc      	movs	r1, #220	; 0xdc
 800ab1e:	187a      	adds	r2, r7, r1
 800ab20:	6013      	str	r3, [r2, #0]
 800ab22:	1d7b      	adds	r3, r7, #5
 800ab24:	33ff      	adds	r3, #255	; 0xff
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2201      	movs	r2, #1
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	d004      	beq.n	800ab38 <USB_EPStartXfer+0xf20>
 800ab2e:	187b      	adds	r3, r7, r1
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	3301      	adds	r3, #1
 800ab34:	187a      	adds	r2, r7, r1
 800ab36:	6013      	str	r3, [r2, #0]
 800ab38:	23dc      	movs	r3, #220	; 0xdc
 800ab3a:	18fb      	adds	r3, r7, r3
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	029b      	lsls	r3, r3, #10
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	23c8      	movs	r3, #200	; 0xc8
 800ab46:	18fb      	adds	r3, r7, r3
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	801a      	strh	r2, [r3, #0]
 800ab4c:	e044      	b.n	800abd8 <USB_EPStartXfer+0xfc0>
 800ab4e:	1d7b      	adds	r3, r7, #5
 800ab50:	33ff      	adds	r3, #255	; 0xff
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	095b      	lsrs	r3, r3, #5
 800ab56:	21dc      	movs	r1, #220	; 0xdc
 800ab58:	187a      	adds	r2, r7, r1
 800ab5a:	6013      	str	r3, [r2, #0]
 800ab5c:	1d7b      	adds	r3, r7, #5
 800ab5e:	33ff      	adds	r3, #255	; 0xff
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	221f      	movs	r2, #31
 800ab64:	4013      	ands	r3, r2
 800ab66:	d104      	bne.n	800ab72 <USB_EPStartXfer+0xf5a>
 800ab68:	187b      	adds	r3, r7, r1
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	187a      	adds	r2, r7, r1
 800ab70:	6013      	str	r3, [r2, #0]
 800ab72:	23dc      	movs	r3, #220	; 0xdc
 800ab74:	18fb      	adds	r3, r7, r3
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	029b      	lsls	r3, r3, #10
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	4a7f      	ldr	r2, [pc, #508]	; (800ad7c <USB_EPStartXfer+0x1164>)
 800ab80:	4313      	orrs	r3, r2
 800ab82:	b29a      	uxth	r2, r3
 800ab84:	23c8      	movs	r3, #200	; 0xc8
 800ab86:	18fb      	adds	r3, r7, r3
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	801a      	strh	r2, [r3, #0]
 800ab8c:	e024      	b.n	800abd8 <USB_EPStartXfer+0xfc0>
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	785b      	ldrb	r3, [r3, #1]
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d120      	bne.n	800abd8 <USB_EPStartXfer+0xfc0>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	21d4      	movs	r1, #212	; 0xd4
 800ab9a:	187a      	adds	r2, r7, r1
 800ab9c:	6013      	str	r3, [r2, #0]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2250      	movs	r2, #80	; 0x50
 800aba2:	5a9b      	ldrh	r3, [r3, r2]
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	001a      	movs	r2, r3
 800aba8:	187b      	adds	r3, r7, r1
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	189b      	adds	r3, r3, r2
 800abae:	187a      	adds	r2, r7, r1
 800abb0:	6013      	str	r3, [r2, #0]
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	00da      	lsls	r2, r3, #3
 800abb8:	187b      	adds	r3, r7, r1
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	18d3      	adds	r3, r2, r3
 800abbe:	4a6d      	ldr	r2, [pc, #436]	; (800ad74 <USB_EPStartXfer+0x115c>)
 800abc0:	4694      	mov	ip, r2
 800abc2:	4463      	add	r3, ip
 800abc4:	21d0      	movs	r1, #208	; 0xd0
 800abc6:	187a      	adds	r2, r7, r1
 800abc8:	6013      	str	r3, [r2, #0]
 800abca:	1d7b      	adds	r3, r7, #5
 800abcc:	33ff      	adds	r3, #255	; 0xff
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	187b      	adds	r3, r7, r1
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	801a      	strh	r2, [r3, #0]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	22c4      	movs	r2, #196	; 0xc4
 800abdc:	18ba      	adds	r2, r7, r2
 800abde:	6013      	str	r3, [r2, #0]
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	785b      	ldrb	r3, [r3, #1]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d000      	beq.n	800abea <USB_EPStartXfer+0xfd2>
 800abe8:	e075      	b.n	800acd6 <USB_EPStartXfer+0x10be>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	21bc      	movs	r1, #188	; 0xbc
 800abee:	187a      	adds	r2, r7, r1
 800abf0:	6013      	str	r3, [r2, #0]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2250      	movs	r2, #80	; 0x50
 800abf6:	5a9b      	ldrh	r3, [r3, r2]
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	001a      	movs	r2, r3
 800abfc:	187b      	adds	r3, r7, r1
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	189b      	adds	r3, r3, r2
 800ac02:	187a      	adds	r2, r7, r1
 800ac04:	6013      	str	r3, [r2, #0]
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	00da      	lsls	r2, r3, #3
 800ac0c:	187b      	adds	r3, r7, r1
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	18d3      	adds	r3, r2, r3
 800ac12:	4a5b      	ldr	r2, [pc, #364]	; (800ad80 <USB_EPStartXfer+0x1168>)
 800ac14:	4694      	mov	ip, r2
 800ac16:	4463      	add	r3, ip
 800ac18:	21b8      	movs	r1, #184	; 0xb8
 800ac1a:	187a      	adds	r2, r7, r1
 800ac1c:	6013      	str	r3, [r2, #0]
 800ac1e:	1d7b      	adds	r3, r7, #5
 800ac20:	33ff      	adds	r3, #255	; 0xff
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d114      	bne.n	800ac52 <USB_EPStartXfer+0x103a>
 800ac28:	187b      	adds	r3, r7, r1
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	881b      	ldrh	r3, [r3, #0]
 800ac2e:	b29b      	uxth	r3, r3
 800ac30:	4a51      	ldr	r2, [pc, #324]	; (800ad78 <USB_EPStartXfer+0x1160>)
 800ac32:	4013      	ands	r3, r2
 800ac34:	b29a      	uxth	r2, r3
 800ac36:	187b      	adds	r3, r7, r1
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	801a      	strh	r2, [r3, #0]
 800ac3c:	187b      	adds	r3, r7, r1
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	881b      	ldrh	r3, [r3, #0]
 800ac42:	b29b      	uxth	r3, r3
 800ac44:	4a4d      	ldr	r2, [pc, #308]	; (800ad7c <USB_EPStartXfer+0x1164>)
 800ac46:	4313      	orrs	r3, r2
 800ac48:	b29a      	uxth	r2, r3
 800ac4a:	187b      	adds	r3, r7, r1
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	801a      	strh	r2, [r3, #0]
 800ac50:	e066      	b.n	800ad20 <USB_EPStartXfer+0x1108>
 800ac52:	1d7b      	adds	r3, r7, #5
 800ac54:	33ff      	adds	r3, #255	; 0xff
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2b3e      	cmp	r3, #62	; 0x3e
 800ac5a:	d81c      	bhi.n	800ac96 <USB_EPStartXfer+0x107e>
 800ac5c:	1d7b      	adds	r3, r7, #5
 800ac5e:	33ff      	adds	r3, #255	; 0xff
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	085b      	lsrs	r3, r3, #1
 800ac64:	21d8      	movs	r1, #216	; 0xd8
 800ac66:	187a      	adds	r2, r7, r1
 800ac68:	6013      	str	r3, [r2, #0]
 800ac6a:	1d7b      	adds	r3, r7, #5
 800ac6c:	33ff      	adds	r3, #255	; 0xff
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2201      	movs	r2, #1
 800ac72:	4013      	ands	r3, r2
 800ac74:	d004      	beq.n	800ac80 <USB_EPStartXfer+0x1068>
 800ac76:	187b      	adds	r3, r7, r1
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	3301      	adds	r3, #1
 800ac7c:	187a      	adds	r2, r7, r1
 800ac7e:	6013      	str	r3, [r2, #0]
 800ac80:	23d8      	movs	r3, #216	; 0xd8
 800ac82:	18fb      	adds	r3, r7, r3
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	029b      	lsls	r3, r3, #10
 800ac8a:	b29a      	uxth	r2, r3
 800ac8c:	23b8      	movs	r3, #184	; 0xb8
 800ac8e:	18fb      	adds	r3, r7, r3
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	801a      	strh	r2, [r3, #0]
 800ac94:	e044      	b.n	800ad20 <USB_EPStartXfer+0x1108>
 800ac96:	1d7b      	adds	r3, r7, #5
 800ac98:	33ff      	adds	r3, #255	; 0xff
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	095b      	lsrs	r3, r3, #5
 800ac9e:	21d8      	movs	r1, #216	; 0xd8
 800aca0:	187a      	adds	r2, r7, r1
 800aca2:	6013      	str	r3, [r2, #0]
 800aca4:	1d7b      	adds	r3, r7, #5
 800aca6:	33ff      	adds	r3, #255	; 0xff
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	221f      	movs	r2, #31
 800acac:	4013      	ands	r3, r2
 800acae:	d104      	bne.n	800acba <USB_EPStartXfer+0x10a2>
 800acb0:	187b      	adds	r3, r7, r1
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	3b01      	subs	r3, #1
 800acb6:	187a      	adds	r2, r7, r1
 800acb8:	6013      	str	r3, [r2, #0]
 800acba:	23d8      	movs	r3, #216	; 0xd8
 800acbc:	18fb      	adds	r3, r7, r3
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	029b      	lsls	r3, r3, #10
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	4a2d      	ldr	r2, [pc, #180]	; (800ad7c <USB_EPStartXfer+0x1164>)
 800acc8:	4313      	orrs	r3, r2
 800acca:	b29a      	uxth	r2, r3
 800accc:	23b8      	movs	r3, #184	; 0xb8
 800acce:	18fb      	adds	r3, r7, r3
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	801a      	strh	r2, [r3, #0]
 800acd4:	e024      	b.n	800ad20 <USB_EPStartXfer+0x1108>
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	785b      	ldrb	r3, [r3, #1]
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d120      	bne.n	800ad20 <USB_EPStartXfer+0x1108>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2250      	movs	r2, #80	; 0x50
 800ace2:	5a9b      	ldrh	r3, [r3, r2]
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	001a      	movs	r2, r3
 800ace8:	21c4      	movs	r1, #196	; 0xc4
 800acea:	187b      	adds	r3, r7, r1
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	189b      	adds	r3, r3, r2
 800acf0:	187a      	adds	r2, r7, r1
 800acf2:	6013      	str	r3, [r2, #0]
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	00da      	lsls	r2, r3, #3
 800acfa:	187b      	adds	r3, r7, r1
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	18d3      	adds	r3, r2, r3
 800ad00:	4a1f      	ldr	r2, [pc, #124]	; (800ad80 <USB_EPStartXfer+0x1168>)
 800ad02:	4694      	mov	ip, r2
 800ad04:	4463      	add	r3, ip
 800ad06:	21c0      	movs	r1, #192	; 0xc0
 800ad08:	187a      	adds	r2, r7, r1
 800ad0a:	6013      	str	r3, [r2, #0]
 800ad0c:	1d7b      	adds	r3, r7, #5
 800ad0e:	33ff      	adds	r3, #255	; 0xff
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	b29a      	uxth	r2, r3
 800ad14:	187b      	adds	r3, r7, r1
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	801a      	strh	r2, [r3, #0]
 800ad1a:	e001      	b.n	800ad20 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e025      	b.n	800ad6c <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	18d3      	adds	r3, r2, r3
 800ad2a:	881b      	ldrh	r3, [r3, #0]
 800ad2c:	b29a      	uxth	r2, r3
 800ad2e:	208a      	movs	r0, #138	; 0x8a
 800ad30:	183b      	adds	r3, r7, r0
 800ad32:	4914      	ldr	r1, [pc, #80]	; (800ad84 <USB_EPStartXfer+0x116c>)
 800ad34:	400a      	ands	r2, r1
 800ad36:	801a      	strh	r2, [r3, #0]
 800ad38:	183b      	adds	r3, r7, r0
 800ad3a:	183a      	adds	r2, r7, r0
 800ad3c:	8812      	ldrh	r2, [r2, #0]
 800ad3e:	2180      	movs	r1, #128	; 0x80
 800ad40:	0149      	lsls	r1, r1, #5
 800ad42:	404a      	eors	r2, r1
 800ad44:	801a      	strh	r2, [r3, #0]
 800ad46:	183b      	adds	r3, r7, r0
 800ad48:	183a      	adds	r2, r7, r0
 800ad4a:	8812      	ldrh	r2, [r2, #0]
 800ad4c:	2180      	movs	r1, #128	; 0x80
 800ad4e:	0189      	lsls	r1, r1, #6
 800ad50:	404a      	eors	r2, r1
 800ad52:	801a      	strh	r2, [r3, #0]
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	18d3      	adds	r3, r2, r3
 800ad5e:	183a      	adds	r2, r7, r0
 800ad60:	8812      	ldrh	r2, [r2, #0]
 800ad62:	4909      	ldr	r1, [pc, #36]	; (800ad88 <USB_EPStartXfer+0x1170>)
 800ad64:	430a      	orrs	r2, r1
 800ad66:	b292      	uxth	r2, r2
 800ad68:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	0018      	movs	r0, r3
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	b043      	add	sp, #268	; 0x10c
 800ad72:	bd90      	pop	{r4, r7, pc}
 800ad74:	00000402 	.word	0x00000402
 800ad78:	ffff83ff 	.word	0xffff83ff
 800ad7c:	ffff8000 	.word	0xffff8000
 800ad80:	00000406 	.word	0x00000406
 800ad84:	ffffbf8f 	.word	0xffffbf8f
 800ad88:	ffff8080 	.word	0xffff8080

0800ad8c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b084      	sub	sp, #16
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	785b      	ldrb	r3, [r3, #1]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d01d      	beq.n	800adda <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	18d3      	adds	r3, r2, r3
 800ada8:	881b      	ldrh	r3, [r3, #0]
 800adaa:	b29a      	uxth	r2, r3
 800adac:	200c      	movs	r0, #12
 800adae:	183b      	adds	r3, r7, r0
 800adb0:	491b      	ldr	r1, [pc, #108]	; (800ae20 <USB_EPSetStall+0x94>)
 800adb2:	400a      	ands	r2, r1
 800adb4:	801a      	strh	r2, [r3, #0]
 800adb6:	183b      	adds	r3, r7, r0
 800adb8:	183a      	adds	r2, r7, r0
 800adba:	8812      	ldrh	r2, [r2, #0]
 800adbc:	2110      	movs	r1, #16
 800adbe:	404a      	eors	r2, r1
 800adc0:	801a      	strh	r2, [r3, #0]
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	18d3      	adds	r3, r2, r3
 800adcc:	183a      	adds	r2, r7, r0
 800adce:	8812      	ldrh	r2, [r2, #0]
 800add0:	4914      	ldr	r1, [pc, #80]	; (800ae24 <USB_EPSetStall+0x98>)
 800add2:	430a      	orrs	r2, r1
 800add4:	b292      	uxth	r2, r2
 800add6:	801a      	strh	r2, [r3, #0]
 800add8:	e01d      	b.n	800ae16 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	18d3      	adds	r3, r2, r3
 800ade4:	881b      	ldrh	r3, [r3, #0]
 800ade6:	b29a      	uxth	r2, r3
 800ade8:	200e      	movs	r0, #14
 800adea:	183b      	adds	r3, r7, r0
 800adec:	490e      	ldr	r1, [pc, #56]	; (800ae28 <USB_EPSetStall+0x9c>)
 800adee:	400a      	ands	r2, r1
 800adf0:	801a      	strh	r2, [r3, #0]
 800adf2:	183b      	adds	r3, r7, r0
 800adf4:	183a      	adds	r2, r7, r0
 800adf6:	8812      	ldrh	r2, [r2, #0]
 800adf8:	2180      	movs	r1, #128	; 0x80
 800adfa:	0149      	lsls	r1, r1, #5
 800adfc:	404a      	eors	r2, r1
 800adfe:	801a      	strh	r2, [r3, #0]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	18d3      	adds	r3, r2, r3
 800ae0a:	183a      	adds	r2, r7, r0
 800ae0c:	8812      	ldrh	r2, [r2, #0]
 800ae0e:	4905      	ldr	r1, [pc, #20]	; (800ae24 <USB_EPSetStall+0x98>)
 800ae10:	430a      	orrs	r2, r1
 800ae12:	b292      	uxth	r2, r2
 800ae14:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800ae16:	2300      	movs	r3, #0
}
 800ae18:	0018      	movs	r0, r3
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	b004      	add	sp, #16
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	ffff8fbf 	.word	0xffff8fbf
 800ae24:	ffff8080 	.word	0xffff8080
 800ae28:	ffffbf8f 	.word	0xffffbf8f

0800ae2c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b086      	sub	sp, #24
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	7b1b      	ldrb	r3, [r3, #12]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d000      	beq.n	800ae40 <USB_EPClearStall+0x14>
 800ae3e:	e095      	b.n	800af6c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	785b      	ldrb	r3, [r3, #1]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d046      	beq.n	800aed6 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	18d2      	adds	r2, r2, r3
 800ae52:	2110      	movs	r1, #16
 800ae54:	187b      	adds	r3, r7, r1
 800ae56:	8812      	ldrh	r2, [r2, #0]
 800ae58:	801a      	strh	r2, [r3, #0]
 800ae5a:	187b      	adds	r3, r7, r1
 800ae5c:	881b      	ldrh	r3, [r3, #0]
 800ae5e:	2240      	movs	r2, #64	; 0x40
 800ae60:	4013      	ands	r3, r2
 800ae62:	d016      	beq.n	800ae92 <USB_EPClearStall+0x66>
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	18d3      	adds	r3, r2, r3
 800ae6e:	881b      	ldrh	r3, [r3, #0]
 800ae70:	b29a      	uxth	r2, r3
 800ae72:	200e      	movs	r0, #14
 800ae74:	183b      	adds	r3, r7, r0
 800ae76:	4940      	ldr	r1, [pc, #256]	; (800af78 <USB_EPClearStall+0x14c>)
 800ae78:	400a      	ands	r2, r1
 800ae7a:	801a      	strh	r2, [r3, #0]
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	009b      	lsls	r3, r3, #2
 800ae84:	18d3      	adds	r3, r2, r3
 800ae86:	183a      	adds	r2, r7, r0
 800ae88:	8812      	ldrh	r2, [r2, #0]
 800ae8a:	493c      	ldr	r1, [pc, #240]	; (800af7c <USB_EPClearStall+0x150>)
 800ae8c:	430a      	orrs	r2, r1
 800ae8e:	b292      	uxth	r2, r2
 800ae90:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	78db      	ldrb	r3, [r3, #3]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d068      	beq.n	800af6c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	781b      	ldrb	r3, [r3, #0]
 800aea0:	009b      	lsls	r3, r3, #2
 800aea2:	18d3      	adds	r3, r2, r3
 800aea4:	881b      	ldrh	r3, [r3, #0]
 800aea6:	b29a      	uxth	r2, r3
 800aea8:	200c      	movs	r0, #12
 800aeaa:	183b      	adds	r3, r7, r0
 800aeac:	4934      	ldr	r1, [pc, #208]	; (800af80 <USB_EPClearStall+0x154>)
 800aeae:	400a      	ands	r2, r1
 800aeb0:	801a      	strh	r2, [r3, #0]
 800aeb2:	183b      	adds	r3, r7, r0
 800aeb4:	183a      	adds	r2, r7, r0
 800aeb6:	8812      	ldrh	r2, [r2, #0]
 800aeb8:	2120      	movs	r1, #32
 800aeba:	404a      	eors	r2, r1
 800aebc:	801a      	strh	r2, [r3, #0]
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	781b      	ldrb	r3, [r3, #0]
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	18d3      	adds	r3, r2, r3
 800aec8:	183a      	adds	r2, r7, r0
 800aeca:	8812      	ldrh	r2, [r2, #0]
 800aecc:	492d      	ldr	r1, [pc, #180]	; (800af84 <USB_EPClearStall+0x158>)
 800aece:	430a      	orrs	r2, r1
 800aed0:	b292      	uxth	r2, r2
 800aed2:	801a      	strh	r2, [r3, #0]
 800aed4:	e04a      	b.n	800af6c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	18d2      	adds	r2, r2, r3
 800aee0:	2116      	movs	r1, #22
 800aee2:	187b      	adds	r3, r7, r1
 800aee4:	8812      	ldrh	r2, [r2, #0]
 800aee6:	801a      	strh	r2, [r3, #0]
 800aee8:	187b      	adds	r3, r7, r1
 800aeea:	881a      	ldrh	r2, [r3, #0]
 800aeec:	2380      	movs	r3, #128	; 0x80
 800aeee:	01db      	lsls	r3, r3, #7
 800aef0:	4013      	ands	r3, r2
 800aef2:	d016      	beq.n	800af22 <USB_EPClearStall+0xf6>
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	18d3      	adds	r3, r2, r3
 800aefe:	881b      	ldrh	r3, [r3, #0]
 800af00:	b29a      	uxth	r2, r3
 800af02:	2014      	movs	r0, #20
 800af04:	183b      	adds	r3, r7, r0
 800af06:	491c      	ldr	r1, [pc, #112]	; (800af78 <USB_EPClearStall+0x14c>)
 800af08:	400a      	ands	r2, r1
 800af0a:	801a      	strh	r2, [r3, #0]
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	18d3      	adds	r3, r2, r3
 800af16:	183a      	adds	r2, r7, r0
 800af18:	8812      	ldrh	r2, [r2, #0]
 800af1a:	491b      	ldr	r1, [pc, #108]	; (800af88 <USB_EPClearStall+0x15c>)
 800af1c:	430a      	orrs	r2, r1
 800af1e:	b292      	uxth	r2, r2
 800af20:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	009b      	lsls	r3, r3, #2
 800af2a:	18d3      	adds	r3, r2, r3
 800af2c:	881b      	ldrh	r3, [r3, #0]
 800af2e:	b29a      	uxth	r2, r3
 800af30:	2012      	movs	r0, #18
 800af32:	183b      	adds	r3, r7, r0
 800af34:	4915      	ldr	r1, [pc, #84]	; (800af8c <USB_EPClearStall+0x160>)
 800af36:	400a      	ands	r2, r1
 800af38:	801a      	strh	r2, [r3, #0]
 800af3a:	183b      	adds	r3, r7, r0
 800af3c:	183a      	adds	r2, r7, r0
 800af3e:	8812      	ldrh	r2, [r2, #0]
 800af40:	2180      	movs	r1, #128	; 0x80
 800af42:	0149      	lsls	r1, r1, #5
 800af44:	404a      	eors	r2, r1
 800af46:	801a      	strh	r2, [r3, #0]
 800af48:	183b      	adds	r3, r7, r0
 800af4a:	183a      	adds	r2, r7, r0
 800af4c:	8812      	ldrh	r2, [r2, #0]
 800af4e:	2180      	movs	r1, #128	; 0x80
 800af50:	0189      	lsls	r1, r1, #6
 800af52:	404a      	eors	r2, r1
 800af54:	801a      	strh	r2, [r3, #0]
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	009b      	lsls	r3, r3, #2
 800af5e:	18d3      	adds	r3, r2, r3
 800af60:	183a      	adds	r2, r7, r0
 800af62:	8812      	ldrh	r2, [r2, #0]
 800af64:	4907      	ldr	r1, [pc, #28]	; (800af84 <USB_EPClearStall+0x158>)
 800af66:	430a      	orrs	r2, r1
 800af68:	b292      	uxth	r2, r2
 800af6a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	0018      	movs	r0, r3
 800af70:	46bd      	mov	sp, r7
 800af72:	b006      	add	sp, #24
 800af74:	bd80      	pop	{r7, pc}
 800af76:	46c0      	nop			; (mov r8, r8)
 800af78:	ffff8f8f 	.word	0xffff8f8f
 800af7c:	ffff80c0 	.word	0xffff80c0
 800af80:	ffff8fbf 	.word	0xffff8fbf
 800af84:	ffff8080 	.word	0xffff8080
 800af88:	ffffc080 	.word	0xffffc080
 800af8c:	ffffbf8f 	.word	0xffffbf8f

0800af90 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
 800af98:	000a      	movs	r2, r1
 800af9a:	1cfb      	adds	r3, r7, #3
 800af9c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800af9e:	1cfb      	adds	r3, r7, #3
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d103      	bne.n	800afae <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	224c      	movs	r2, #76	; 0x4c
 800afaa:	2180      	movs	r1, #128	; 0x80
 800afac:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800afae:	2300      	movs	r3, #0
}
 800afb0:	0018      	movs	r0, r3
 800afb2:	46bd      	mov	sp, r7
 800afb4:	b002      	add	sp, #8
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2258      	movs	r2, #88	; 0x58
 800afc4:	5a9b      	ldrh	r3, [r3, r2]
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	4a05      	ldr	r2, [pc, #20]	; (800afe0 <USB_DevConnect+0x28>)
 800afca:	4313      	orrs	r3, r2
 800afcc:	b299      	uxth	r1, r3
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2258      	movs	r2, #88	; 0x58
 800afd2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	0018      	movs	r0, r3
 800afd8:	46bd      	mov	sp, r7
 800afda:	b002      	add	sp, #8
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	46c0      	nop			; (mov r8, r8)
 800afe0:	ffff8000 	.word	0xffff8000

0800afe4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2244      	movs	r2, #68	; 0x44
 800aff0:	5a9b      	ldrh	r3, [r3, r2]
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800aff6:	68fb      	ldr	r3, [r7, #12]
}
 800aff8:	0018      	movs	r0, r3
 800affa:	46bd      	mov	sp, r7
 800affc:	b004      	add	sp, #16
 800affe:	bd80      	pop	{r7, pc}

0800b000 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b08c      	sub	sp, #48	; 0x30
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	0019      	movs	r1, r3
 800b00c:	1dbb      	adds	r3, r7, #6
 800b00e:	801a      	strh	r2, [r3, #0]
 800b010:	1d3b      	adds	r3, r7, #4
 800b012:	1c0a      	adds	r2, r1, #0
 800b014:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b016:	1d3b      	adds	r3, r7, #4
 800b018:	881b      	ldrh	r3, [r3, #0]
 800b01a:	3301      	adds	r3, #1
 800b01c:	085b      	lsrs	r3, r3, #1
 800b01e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b028:	1dbb      	adds	r3, r7, #6
 800b02a:	881a      	ldrh	r2, [r3, #0]
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	18d3      	adds	r3, r2, r3
 800b030:	2280      	movs	r2, #128	; 0x80
 800b032:	00d2      	lsls	r2, r2, #3
 800b034:	4694      	mov	ip, r2
 800b036:	4463      	add	r3, ip
 800b038:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800b03a:	6a3b      	ldr	r3, [r7, #32]
 800b03c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b03e:	e01b      	b.n	800b078 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800b040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b048:	3301      	adds	r3, #1
 800b04a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	b29b      	uxth	r3, r3
 800b052:	021b      	lsls	r3, r3, #8
 800b054:	b29b      	uxth	r3, r3
 800b056:	001a      	movs	r2, r3
 800b058:	69bb      	ldr	r3, [r7, #24]
 800b05a:	4313      	orrs	r3, r2
 800b05c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	b29a      	uxth	r2, r3
 800b062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b064:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b068:	3302      	adds	r3, #2
 800b06a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800b06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06e:	3301      	adds	r3, #1
 800b070:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800b072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b074:	3b01      	subs	r3, #1
 800b076:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d1e0      	bne.n	800b040 <USB_WritePMA+0x40>
  }
}
 800b07e:	46c0      	nop			; (mov r8, r8)
 800b080:	46c0      	nop			; (mov r8, r8)
 800b082:	46bd      	mov	sp, r7
 800b084:	b00c      	add	sp, #48	; 0x30
 800b086:	bd80      	pop	{r7, pc}

0800b088 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b08a      	sub	sp, #40	; 0x28
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	0019      	movs	r1, r3
 800b094:	1dbb      	adds	r3, r7, #6
 800b096:	801a      	strh	r2, [r3, #0]
 800b098:	1d3b      	adds	r3, r7, #4
 800b09a:	1c0a      	adds	r2, r1, #0
 800b09c:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b09e:	1d3b      	adds	r3, r7, #4
 800b0a0:	881b      	ldrh	r3, [r3, #0]
 800b0a2:	085b      	lsrs	r3, r3, #1
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b0b0:	1dbb      	adds	r3, r7, #6
 800b0b2:	881a      	ldrh	r2, [r3, #0]
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	18d3      	adds	r3, r2, r3
 800b0b8:	2280      	movs	r2, #128	; 0x80
 800b0ba:	00d2      	lsls	r2, r2, #3
 800b0bc:	4694      	mov	ip, r2
 800b0be:	4463      	add	r3, ip
 800b0c0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	627b      	str	r3, [r7, #36]	; 0x24
 800b0c6:	e018      	b.n	800b0fa <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b0c8:	6a3b      	ldr	r3, [r7, #32]
 800b0ca:	881b      	ldrh	r3, [r3, #0]
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b0d0:	6a3b      	ldr	r3, [r7, #32]
 800b0d2:	3302      	adds	r3, #2
 800b0d4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	b2da      	uxtb	r2, r3
 800b0da:	69fb      	ldr	r3, [r7, #28]
 800b0dc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	0a1b      	lsrs	r3, r3, #8
 800b0e8:	b2da      	uxtb	r2, r3
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b0ee:	69fb      	ldr	r3, [r7, #28]
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800b0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	627b      	str	r3, [r7, #36]	; 0x24
 800b0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d1e3      	bne.n	800b0c8 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800b100:	1d3b      	adds	r3, r7, #4
 800b102:	881b      	ldrh	r3, [r3, #0]
 800b104:	2201      	movs	r2, #1
 800b106:	4013      	ands	r3, r2
 800b108:	b29b      	uxth	r3, r3
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d007      	beq.n	800b11e <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800b10e:	6a3b      	ldr	r3, [r7, #32]
 800b110:	881b      	ldrh	r3, [r3, #0]
 800b112:	b29b      	uxth	r3, r3
 800b114:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	b2da      	uxtb	r2, r3
 800b11a:	69fb      	ldr	r3, [r7, #28]
 800b11c:	701a      	strb	r2, [r3, #0]
  }
}
 800b11e:	46c0      	nop			; (mov r8, r8)
 800b120:	46bd      	mov	sp, r7
 800b122:	b00a      	add	sp, #40	; 0x28
 800b124:	bd80      	pop	{r7, pc}

0800b126 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b084      	sub	sp, #16
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
 800b12e:	000a      	movs	r2, r1
 800b130:	1cfb      	adds	r3, r7, #3
 800b132:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800b134:	230f      	movs	r3, #15
 800b136:	18fb      	adds	r3, r7, r3
 800b138:	2200      	movs	r2, #0
 800b13a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	7c1b      	ldrb	r3, [r3, #16]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d116      	bne.n	800b172 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b144:	2380      	movs	r3, #128	; 0x80
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	2202      	movs	r2, #2
 800b14c:	2181      	movs	r1, #129	; 0x81
 800b14e:	f002 f8b4 	bl	800d2ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2201      	movs	r2, #1
 800b156:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b158:	2380      	movs	r3, #128	; 0x80
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	2202      	movs	r2, #2
 800b160:	2101      	movs	r1, #1
 800b162:	f002 f8aa 	bl	800d2ba <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b166:	687a      	ldr	r2, [r7, #4]
 800b168:	23b6      	movs	r3, #182	; 0xb6
 800b16a:	005b      	lsls	r3, r3, #1
 800b16c:	2101      	movs	r1, #1
 800b16e:	50d1      	str	r1, [r2, r3]
 800b170:	e013      	b.n	800b19a <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	2340      	movs	r3, #64	; 0x40
 800b176:	2202      	movs	r2, #2
 800b178:	2181      	movs	r1, #129	; 0x81
 800b17a:	f002 f89e 	bl	800d2ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2201      	movs	r2, #1
 800b182:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	2340      	movs	r3, #64	; 0x40
 800b188:	2202      	movs	r2, #2
 800b18a:	2101      	movs	r1, #1
 800b18c:	f002 f895 	bl	800d2ba <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	23b6      	movs	r3, #182	; 0xb6
 800b194:	005b      	lsls	r3, r3, #1
 800b196:	2101      	movs	r1, #1
 800b198:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	2308      	movs	r3, #8
 800b19e:	2203      	movs	r2, #3
 800b1a0:	2182      	movs	r1, #130	; 0x82
 800b1a2:	f002 f88a 	bl	800d2ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b1ac:	2387      	movs	r3, #135	; 0x87
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	0018      	movs	r0, r3
 800b1b2:	f002 fa1b 	bl	800d5ec <USBD_static_malloc>
 800b1b6:	0001      	movs	r1, r0
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	23ae      	movs	r3, #174	; 0xae
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	23ae      	movs	r3, #174	; 0xae
 800b1c4:	009b      	lsls	r3, r3, #2
 800b1c6:	58d3      	ldr	r3, [r2, r3]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d104      	bne.n	800b1d6 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800b1cc:	230f      	movs	r3, #15
 800b1ce:	18fb      	adds	r3, r7, r3
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	701a      	strb	r2, [r3, #0]
 800b1d4:	e02c      	b.n	800b230 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	23ae      	movs	r3, #174	; 0xae
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	58d3      	ldr	r3, [r2, r3]
 800b1de:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	23af      	movs	r3, #175	; 0xaf
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	58d3      	ldr	r3, [r2, r3]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b1ec:	68ba      	ldr	r2, [r7, #8]
 800b1ee:	2385      	movs	r3, #133	; 0x85
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	2100      	movs	r1, #0
 800b1f4:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800b1f6:	68ba      	ldr	r2, [r7, #8]
 800b1f8:	2386      	movs	r3, #134	; 0x86
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	7c1b      	ldrb	r3, [r3, #16]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d10a      	bne.n	800b21e <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b208:	68ba      	ldr	r2, [r7, #8]
 800b20a:	2381      	movs	r3, #129	; 0x81
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	58d2      	ldr	r2, [r2, r3]
 800b210:	2380      	movs	r3, #128	; 0x80
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	2101      	movs	r1, #1
 800b218:	f002 f99a 	bl	800d550 <USBD_LL_PrepareReceive>
 800b21c:	e008      	b.n	800b230 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b21e:	68ba      	ldr	r2, [r7, #8]
 800b220:	2381      	movs	r3, #129	; 0x81
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	58d2      	ldr	r2, [r2, r3]
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	2340      	movs	r3, #64	; 0x40
 800b22a:	2101      	movs	r1, #1
 800b22c:	f002 f990 	bl	800d550 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b230:	230f      	movs	r3, #15
 800b232:	18fb      	adds	r3, r7, r3
 800b234:	781b      	ldrb	r3, [r3, #0]
}
 800b236:	0018      	movs	r0, r3
 800b238:	46bd      	mov	sp, r7
 800b23a:	b004      	add	sp, #16
 800b23c:	bd80      	pop	{r7, pc}

0800b23e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b23e:	b580      	push	{r7, lr}
 800b240:	b084      	sub	sp, #16
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
 800b246:	000a      	movs	r2, r1
 800b248:	1cfb      	adds	r3, r7, #3
 800b24a:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800b24c:	230f      	movs	r3, #15
 800b24e:	18fb      	adds	r3, r7, r3
 800b250:	2200      	movs	r2, #0
 800b252:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2181      	movs	r1, #129	; 0x81
 800b258:	0018      	movs	r0, r3
 800b25a:	f002 f865 	bl	800d328 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2101      	movs	r1, #1
 800b268:	0018      	movs	r0, r3
 800b26a:	f002 f85d 	bl	800d328 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	23b6      	movs	r3, #182	; 0xb6
 800b272:	005b      	lsls	r3, r3, #1
 800b274:	2100      	movs	r1, #0
 800b276:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2182      	movs	r1, #130	; 0x82
 800b27c:	0018      	movs	r0, r3
 800b27e:	f002 f853 	bl	800d328 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2200      	movs	r2, #0
 800b286:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	23ae      	movs	r3, #174	; 0xae
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	58d3      	ldr	r3, [r2, r3]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d011      	beq.n	800b2b8 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	23af      	movs	r3, #175	; 0xaf
 800b298:	009b      	lsls	r3, r3, #2
 800b29a:	58d3      	ldr	r3, [r2, r3]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	23ae      	movs	r3, #174	; 0xae
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	58d3      	ldr	r3, [r2, r3]
 800b2a8:	0018      	movs	r0, r3
 800b2aa:	f002 f9ab 	bl	800d604 <USBD_static_free>
    pdev->pClassData = NULL;
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	23ae      	movs	r3, #174	; 0xae
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800b2b8:	230f      	movs	r3, #15
 800b2ba:	18fb      	adds	r3, r7, r3
 800b2bc:	781b      	ldrb	r3, [r3, #0]
}
 800b2be:	0018      	movs	r0, r3
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	b004      	add	sp, #16
 800b2c4:	bd80      	pop	{r7, pc}
	...

0800b2c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b086      	sub	sp, #24
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	23ae      	movs	r3, #174	; 0xae
 800b2d6:	009b      	lsls	r3, r3, #2
 800b2d8:	58d3      	ldr	r3, [r2, r3]
 800b2da:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b2dc:	230f      	movs	r3, #15
 800b2de:	18fb      	adds	r3, r7, r3
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800b2e4:	230c      	movs	r3, #12
 800b2e6:	18fb      	adds	r3, r7, r3
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800b2ec:	2317      	movs	r3, #23
 800b2ee:	18fb      	adds	r3, r7, r3
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	001a      	movs	r2, r3
 800b2fa:	2360      	movs	r3, #96	; 0x60
 800b2fc:	4013      	ands	r3, r2
 800b2fe:	d03d      	beq.n	800b37c <USBD_CDC_Setup+0xb4>
 800b300:	2b20      	cmp	r3, #32
 800b302:	d000      	beq.n	800b306 <USBD_CDC_Setup+0x3e>
 800b304:	e094      	b.n	800b430 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	88db      	ldrh	r3, [r3, #6]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d02b      	beq.n	800b366 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	b25b      	sxtb	r3, r3
 800b314:	2b00      	cmp	r3, #0
 800b316:	da12      	bge.n	800b33e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	23af      	movs	r3, #175	; 0xaf
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	58d3      	ldr	r3, [r2, r3]
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	683a      	ldr	r2, [r7, #0]
 800b324:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b326:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b328:	683a      	ldr	r2, [r7, #0]
 800b32a:	88d2      	ldrh	r2, [r2, #6]
 800b32c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b32e:	6939      	ldr	r1, [r7, #16]
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	88da      	ldrh	r2, [r3, #6]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	0018      	movs	r0, r3
 800b338:	f001 fbb2 	bl	800caa0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b33c:	e083      	b.n	800b446 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	7859      	ldrb	r1, [r3, #1]
 800b342:	693a      	ldr	r2, [r7, #16]
 800b344:	2380      	movs	r3, #128	; 0x80
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	88db      	ldrh	r3, [r3, #6]
 800b34e:	b2d9      	uxtb	r1, r3
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	4a40      	ldr	r2, [pc, #256]	; (800b454 <USBD_CDC_Setup+0x18c>)
 800b354:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b356:	6939      	ldr	r1, [r7, #16]
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	88da      	ldrh	r2, [r3, #6]
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	0018      	movs	r0, r3
 800b360:	f001 fbd1 	bl	800cb06 <USBD_CtlPrepareRx>
      break;
 800b364:	e06f      	b.n	800b446 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	23af      	movs	r3, #175	; 0xaf
 800b36a:	009b      	lsls	r3, r3, #2
 800b36c:	58d3      	ldr	r3, [r2, r3]
 800b36e:	689b      	ldr	r3, [r3, #8]
 800b370:	683a      	ldr	r2, [r7, #0]
 800b372:	7850      	ldrb	r0, [r2, #1]
 800b374:	6839      	ldr	r1, [r7, #0]
 800b376:	2200      	movs	r2, #0
 800b378:	4798      	blx	r3
      break;
 800b37a:	e064      	b.n	800b446 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	785b      	ldrb	r3, [r3, #1]
 800b380:	2b0b      	cmp	r3, #11
 800b382:	d037      	beq.n	800b3f4 <USBD_CDC_Setup+0x12c>
 800b384:	dc47      	bgt.n	800b416 <USBD_CDC_Setup+0x14e>
 800b386:	2b00      	cmp	r3, #0
 800b388:	d002      	beq.n	800b390 <USBD_CDC_Setup+0xc8>
 800b38a:	2b0a      	cmp	r3, #10
 800b38c:	d019      	beq.n	800b3c2 <USBD_CDC_Setup+0xfa>
 800b38e:	e042      	b.n	800b416 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	23a7      	movs	r3, #167	; 0xa7
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	5cd3      	ldrb	r3, [r2, r3]
 800b398:	2b03      	cmp	r3, #3
 800b39a:	d107      	bne.n	800b3ac <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b39c:	230c      	movs	r3, #12
 800b39e:	18f9      	adds	r1, r7, r3
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2202      	movs	r2, #2
 800b3a4:	0018      	movs	r0, r3
 800b3a6:	f001 fb7b 	bl	800caa0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b3aa:	e040      	b.n	800b42e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800b3ac:	683a      	ldr	r2, [r7, #0]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	0011      	movs	r1, r2
 800b3b2:	0018      	movs	r0, r3
 800b3b4:	f001 faf6 	bl	800c9a4 <USBD_CtlError>
            ret = USBD_FAIL;
 800b3b8:	2317      	movs	r3, #23
 800b3ba:	18fb      	adds	r3, r7, r3
 800b3bc:	2202      	movs	r2, #2
 800b3be:	701a      	strb	r2, [r3, #0]
          break;
 800b3c0:	e035      	b.n	800b42e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	23a7      	movs	r3, #167	; 0xa7
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	5cd3      	ldrb	r3, [r2, r3]
 800b3ca:	2b03      	cmp	r3, #3
 800b3cc:	d107      	bne.n	800b3de <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b3ce:	230f      	movs	r3, #15
 800b3d0:	18f9      	adds	r1, r7, r3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	0018      	movs	r0, r3
 800b3d8:	f001 fb62 	bl	800caa0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b3dc:	e027      	b.n	800b42e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800b3de:	683a      	ldr	r2, [r7, #0]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	0011      	movs	r1, r2
 800b3e4:	0018      	movs	r0, r3
 800b3e6:	f001 fadd 	bl	800c9a4 <USBD_CtlError>
            ret = USBD_FAIL;
 800b3ea:	2317      	movs	r3, #23
 800b3ec:	18fb      	adds	r3, r7, r3
 800b3ee:	2202      	movs	r2, #2
 800b3f0:	701a      	strb	r2, [r3, #0]
          break;
 800b3f2:	e01c      	b.n	800b42e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	23a7      	movs	r3, #167	; 0xa7
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	5cd3      	ldrb	r3, [r2, r3]
 800b3fc:	2b03      	cmp	r3, #3
 800b3fe:	d015      	beq.n	800b42c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800b400:	683a      	ldr	r2, [r7, #0]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	0011      	movs	r1, r2
 800b406:	0018      	movs	r0, r3
 800b408:	f001 facc 	bl	800c9a4 <USBD_CtlError>
            ret = USBD_FAIL;
 800b40c:	2317      	movs	r3, #23
 800b40e:	18fb      	adds	r3, r7, r3
 800b410:	2202      	movs	r2, #2
 800b412:	701a      	strb	r2, [r3, #0]
          }
          break;
 800b414:	e00a      	b.n	800b42c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800b416:	683a      	ldr	r2, [r7, #0]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	0011      	movs	r1, r2
 800b41c:	0018      	movs	r0, r3
 800b41e:	f001 fac1 	bl	800c9a4 <USBD_CtlError>
          ret = USBD_FAIL;
 800b422:	2317      	movs	r3, #23
 800b424:	18fb      	adds	r3, r7, r3
 800b426:	2202      	movs	r2, #2
 800b428:	701a      	strb	r2, [r3, #0]
          break;
 800b42a:	e000      	b.n	800b42e <USBD_CDC_Setup+0x166>
          break;
 800b42c:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b42e:	e00a      	b.n	800b446 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800b430:	683a      	ldr	r2, [r7, #0]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	0011      	movs	r1, r2
 800b436:	0018      	movs	r0, r3
 800b438:	f001 fab4 	bl	800c9a4 <USBD_CtlError>
      ret = USBD_FAIL;
 800b43c:	2317      	movs	r3, #23
 800b43e:	18fb      	adds	r3, r7, r3
 800b440:	2202      	movs	r2, #2
 800b442:	701a      	strb	r2, [r3, #0]
      break;
 800b444:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800b446:	2317      	movs	r3, #23
 800b448:	18fb      	adds	r3, r7, r3
 800b44a:	781b      	ldrb	r3, [r3, #0]
}
 800b44c:	0018      	movs	r0, r3
 800b44e:	46bd      	mov	sp, r7
 800b450:	b006      	add	sp, #24
 800b452:	bd80      	pop	{r7, pc}
 800b454:	00000201 	.word	0x00000201

0800b458 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	000a      	movs	r2, r1
 800b462:	1cfb      	adds	r3, r7, #3
 800b464:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	23ae      	movs	r3, #174	; 0xae
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	58d3      	ldr	r3, [r2, r3]
 800b46e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	23b0      	movs	r3, #176	; 0xb0
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	58d3      	ldr	r3, [r2, r3]
 800b478:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	23ae      	movs	r3, #174	; 0xae
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	58d3      	ldr	r3, [r2, r3]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d03e      	beq.n	800b504 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b486:	1cfb      	adds	r3, r7, #3
 800b488:	781a      	ldrb	r2, [r3, #0]
 800b48a:	6879      	ldr	r1, [r7, #4]
 800b48c:	0013      	movs	r3, r2
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	189b      	adds	r3, r3, r2
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	18cb      	adds	r3, r1, r3
 800b496:	331c      	adds	r3, #28
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d02b      	beq.n	800b4f6 <USBD_CDC_DataIn+0x9e>
 800b49e:	1cfb      	adds	r3, r7, #3
 800b4a0:	781a      	ldrb	r2, [r3, #0]
 800b4a2:	6879      	ldr	r1, [r7, #4]
 800b4a4:	0013      	movs	r3, r2
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	189b      	adds	r3, r3, r2
 800b4aa:	009b      	lsls	r3, r3, #2
 800b4ac:	18cb      	adds	r3, r1, r3
 800b4ae:	331c      	adds	r3, #28
 800b4b0:	6818      	ldr	r0, [r3, #0]
 800b4b2:	1cfb      	adds	r3, r7, #3
 800b4b4:	781a      	ldrb	r2, [r3, #0]
 800b4b6:	68b9      	ldr	r1, [r7, #8]
 800b4b8:	0013      	movs	r3, r2
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	189b      	adds	r3, r3, r2
 800b4be:	00db      	lsls	r3, r3, #3
 800b4c0:	18cb      	adds	r3, r1, r3
 800b4c2:	3338      	adds	r3, #56	; 0x38
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	0019      	movs	r1, r3
 800b4c8:	f7f4 feb6 	bl	8000238 <__aeabi_uidivmod>
 800b4cc:	1e0b      	subs	r3, r1, #0
 800b4ce:	d112      	bne.n	800b4f6 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b4d0:	1cfb      	adds	r3, r7, #3
 800b4d2:	781a      	ldrb	r2, [r3, #0]
 800b4d4:	6879      	ldr	r1, [r7, #4]
 800b4d6:	0013      	movs	r3, r2
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	189b      	adds	r3, r3, r2
 800b4dc:	009b      	lsls	r3, r3, #2
 800b4de:	18cb      	adds	r3, r1, r3
 800b4e0:	331c      	adds	r3, #28
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b4e6:	1cfb      	adds	r3, r7, #3
 800b4e8:	7819      	ldrb	r1, [r3, #0]
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f001 fff7 	bl	800d4e2 <USBD_LL_Transmit>
 800b4f4:	e004      	b.n	800b500 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	2385      	movs	r3, #133	; 0x85
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800b500:	2300      	movs	r3, #0
 800b502:	e000      	b.n	800b506 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800b504:	2302      	movs	r3, #2
  }
}
 800b506:	0018      	movs	r0, r3
 800b508:	46bd      	mov	sp, r7
 800b50a:	b004      	add	sp, #16
 800b50c:	bd80      	pop	{r7, pc}

0800b50e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b084      	sub	sp, #16
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
 800b516:	000a      	movs	r2, r1
 800b518:	1cfb      	adds	r3, r7, #3
 800b51a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	23ae      	movs	r3, #174	; 0xae
 800b520:	009b      	lsls	r3, r3, #2
 800b522:	58d3      	ldr	r3, [r2, r3]
 800b524:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b526:	1cfb      	adds	r3, r7, #3
 800b528:	781a      	ldrb	r2, [r3, #0]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	0011      	movs	r1, r2
 800b52e:	0018      	movs	r0, r3
 800b530:	f002 f845 	bl	800d5be <USBD_LL_GetRxDataSize>
 800b534:	0001      	movs	r1, r0
 800b536:	68fa      	ldr	r2, [r7, #12]
 800b538:	2383      	movs	r3, #131	; 0x83
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	23ae      	movs	r3, #174	; 0xae
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	58d3      	ldr	r3, [r2, r3]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d011      	beq.n	800b56e <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	23af      	movs	r3, #175	; 0xaf
 800b54e:	009b      	lsls	r3, r3, #2
 800b550:	58d3      	ldr	r3, [r2, r3]
 800b552:	68da      	ldr	r2, [r3, #12]
 800b554:	68f9      	ldr	r1, [r7, #12]
 800b556:	2381      	movs	r3, #129	; 0x81
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	58c8      	ldr	r0, [r1, r3]
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2183      	movs	r1, #131	; 0x83
 800b560:	0089      	lsls	r1, r1, #2
 800b562:	468c      	mov	ip, r1
 800b564:	4463      	add	r3, ip
 800b566:	0019      	movs	r1, r3
 800b568:	4790      	blx	r2

    return USBD_OK;
 800b56a:	2300      	movs	r3, #0
 800b56c:	e000      	b.n	800b570 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800b56e:	2302      	movs	r3, #2
  }
}
 800b570:	0018      	movs	r0, r3
 800b572:	46bd      	mov	sp, r7
 800b574:	b004      	add	sp, #16
 800b576:	bd80      	pop	{r7, pc}

0800b578 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b578:	b590      	push	{r4, r7, lr}
 800b57a:	b085      	sub	sp, #20
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	23ae      	movs	r3, #174	; 0xae
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	58d3      	ldr	r3, [r2, r3]
 800b588:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	23af      	movs	r3, #175	; 0xaf
 800b58e:	009b      	lsls	r3, r3, #2
 800b590:	58d3      	ldr	r3, [r2, r3]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d019      	beq.n	800b5ca <USBD_CDC_EP0_RxReady+0x52>
 800b596:	68fa      	ldr	r2, [r7, #12]
 800b598:	2380      	movs	r3, #128	; 0x80
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	5cd3      	ldrb	r3, [r2, r3]
 800b59e:	2bff      	cmp	r3, #255	; 0xff
 800b5a0:	d013      	beq.n	800b5ca <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b5a2:	687a      	ldr	r2, [r7, #4]
 800b5a4:	23af      	movs	r3, #175	; 0xaf
 800b5a6:	009b      	lsls	r3, r3, #2
 800b5a8:	58d3      	ldr	r3, [r2, r3]
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	68f9      	ldr	r1, [r7, #12]
 800b5ae:	2280      	movs	r2, #128	; 0x80
 800b5b0:	0092      	lsls	r2, r2, #2
 800b5b2:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800b5b4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	4c06      	ldr	r4, [pc, #24]	; (800b5d4 <USBD_CDC_EP0_RxReady+0x5c>)
 800b5ba:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b5bc:	b292      	uxth	r2, r2
 800b5be:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b5c0:	68fa      	ldr	r2, [r7, #12]
 800b5c2:	2380      	movs	r3, #128	; 0x80
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	21ff      	movs	r1, #255	; 0xff
 800b5c8:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	0018      	movs	r0, r3
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	b005      	add	sp, #20
 800b5d2:	bd90      	pop	{r4, r7, pc}
 800b5d4:	00000201 	.word	0x00000201

0800b5d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2243      	movs	r2, #67	; 0x43
 800b5e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b5e6:	4b02      	ldr	r3, [pc, #8]	; (800b5f0 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800b5e8:	0018      	movs	r0, r3
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	b002      	add	sp, #8
 800b5ee:	bd80      	pop	{r7, pc}
 800b5f0:	20000094 	.word	0x20000094

0800b5f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2243      	movs	r2, #67	; 0x43
 800b600:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b602:	4b02      	ldr	r3, [pc, #8]	; (800b60c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800b604:	0018      	movs	r0, r3
 800b606:	46bd      	mov	sp, r7
 800b608:	b002      	add	sp, #8
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	20000050 	.word	0x20000050

0800b610 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b082      	sub	sp, #8
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2243      	movs	r2, #67	; 0x43
 800b61c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b61e:	4b02      	ldr	r3, [pc, #8]	; (800b628 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800b620:	0018      	movs	r0, r3
 800b622:	46bd      	mov	sp, r7
 800b624:	b002      	add	sp, #8
 800b626:	bd80      	pop	{r7, pc}
 800b628:	200000d8 	.word	0x200000d8

0800b62c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	220a      	movs	r2, #10
 800b638:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b63a:	4b02      	ldr	r3, [pc, #8]	; (800b644 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800b63c:	0018      	movs	r0, r3
 800b63e:	46bd      	mov	sp, r7
 800b640:	b002      	add	sp, #8
 800b642:	bd80      	pop	{r7, pc}
 800b644:	2000000c 	.word	0x2000000c

0800b648 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b652:	200f      	movs	r0, #15
 800b654:	183b      	adds	r3, r7, r0
 800b656:	2202      	movs	r2, #2
 800b658:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d007      	beq.n	800b670 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	23af      	movs	r3, #175	; 0xaf
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	6839      	ldr	r1, [r7, #0]
 800b668:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800b66a:	183b      	adds	r3, r7, r0
 800b66c:	2200      	movs	r2, #0
 800b66e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800b670:	230f      	movs	r3, #15
 800b672:	18fb      	adds	r3, r7, r3
 800b674:	781b      	ldrb	r3, [r3, #0]
}
 800b676:	0018      	movs	r0, r3
 800b678:	46bd      	mov	sp, r7
 800b67a:	b004      	add	sp, #16
 800b67c:	bd80      	pop	{r7, pc}

0800b67e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b67e:	b580      	push	{r7, lr}
 800b680:	b086      	sub	sp, #24
 800b682:	af00      	add	r7, sp, #0
 800b684:	60f8      	str	r0, [r7, #12]
 800b686:	60b9      	str	r1, [r7, #8]
 800b688:	1dbb      	adds	r3, r7, #6
 800b68a:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b68c:	68fa      	ldr	r2, [r7, #12]
 800b68e:	23ae      	movs	r3, #174	; 0xae
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	58d3      	ldr	r3, [r2, r3]
 800b694:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b696:	697a      	ldr	r2, [r7, #20]
 800b698:	2382      	movs	r3, #130	; 0x82
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	68b9      	ldr	r1, [r7, #8]
 800b69e:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800b6a0:	1dbb      	adds	r3, r7, #6
 800b6a2:	8819      	ldrh	r1, [r3, #0]
 800b6a4:	697a      	ldr	r2, [r7, #20]
 800b6a6:	2384      	movs	r3, #132	; 0x84
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800b6ac:	2300      	movs	r3, #0
}
 800b6ae:	0018      	movs	r0, r3
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	b006      	add	sp, #24
 800b6b4:	bd80      	pop	{r7, pc}

0800b6b6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b6b6:	b580      	push	{r7, lr}
 800b6b8:	b084      	sub	sp, #16
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	6078      	str	r0, [r7, #4]
 800b6be:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b6c0:	687a      	ldr	r2, [r7, #4]
 800b6c2:	23ae      	movs	r3, #174	; 0xae
 800b6c4:	009b      	lsls	r3, r3, #2
 800b6c6:	58d3      	ldr	r3, [r2, r3]
 800b6c8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	2381      	movs	r3, #129	; 0x81
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	6839      	ldr	r1, [r7, #0]
 800b6d2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800b6d4:	2300      	movs	r3, #0
}
 800b6d6:	0018      	movs	r0, r3
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	b004      	add	sp, #16
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b084      	sub	sp, #16
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	23ae      	movs	r3, #174	; 0xae
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	58d3      	ldr	r3, [r2, r3]
 800b6ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	23ae      	movs	r3, #174	; 0xae
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	58d3      	ldr	r3, [r2, r3]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d022      	beq.n	800b742 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800b6fc:	68fa      	ldr	r2, [r7, #12]
 800b6fe:	2385      	movs	r3, #133	; 0x85
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	58d3      	ldr	r3, [r2, r3]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d11a      	bne.n	800b73e <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b708:	68fa      	ldr	r2, [r7, #12]
 800b70a:	2385      	movs	r3, #133	; 0x85
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	2101      	movs	r1, #1
 800b710:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b712:	68fa      	ldr	r2, [r7, #12]
 800b714:	2384      	movs	r3, #132	; 0x84
 800b716:	009b      	lsls	r3, r3, #2
 800b718:	58d2      	ldr	r2, [r2, r3]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b71e:	68fa      	ldr	r2, [r7, #12]
 800b720:	2382      	movs	r3, #130	; 0x82
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800b726:	68fa      	ldr	r2, [r7, #12]
 800b728:	2384      	movs	r3, #132	; 0x84
 800b72a:	009b      	lsls	r3, r3, #2
 800b72c:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b72e:	b29b      	uxth	r3, r3
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	000a      	movs	r2, r1
 800b734:	2181      	movs	r1, #129	; 0x81
 800b736:	f001 fed4 	bl	800d4e2 <USBD_LL_Transmit>

      return USBD_OK;
 800b73a:	2300      	movs	r3, #0
 800b73c:	e002      	b.n	800b744 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800b73e:	2301      	movs	r3, #1
 800b740:	e000      	b.n	800b744 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800b742:	2302      	movs	r3, #2
  }
}
 800b744:	0018      	movs	r0, r3
 800b746:	46bd      	mov	sp, r7
 800b748:	b004      	add	sp, #16
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	23ae      	movs	r3, #174	; 0xae
 800b758:	009b      	lsls	r3, r3, #2
 800b75a:	58d3      	ldr	r3, [r2, r3]
 800b75c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	23ae      	movs	r3, #174	; 0xae
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	58d3      	ldr	r3, [r2, r3]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d019      	beq.n	800b79e <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	7c1b      	ldrb	r3, [r3, #16]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d10a      	bne.n	800b788 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b772:	68fa      	ldr	r2, [r7, #12]
 800b774:	2381      	movs	r3, #129	; 0x81
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	58d2      	ldr	r2, [r2, r3]
 800b77a:	2380      	movs	r3, #128	; 0x80
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	2101      	movs	r1, #1
 800b782:	f001 fee5 	bl	800d550 <USBD_LL_PrepareReceive>
 800b786:	e008      	b.n	800b79a <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	2381      	movs	r3, #129	; 0x81
 800b78c:	009b      	lsls	r3, r3, #2
 800b78e:	58d2      	ldr	r2, [r2, r3]
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	2340      	movs	r3, #64	; 0x40
 800b794:	2101      	movs	r1, #1
 800b796:	f001 fedb 	bl	800d550 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b79a:	2300      	movs	r3, #0
 800b79c:	e000      	b.n	800b7a0 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800b79e:	2302      	movs	r3, #2
  }
}
 800b7a0:	0018      	movs	r0, r3
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	b004      	add	sp, #16
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	1dfb      	adds	r3, r7, #7
 800b7b4:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d101      	bne.n	800b7c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b7bc:	2302      	movs	r3, #2
 800b7be:	e020      	b.n	800b802 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b7c0:	68fa      	ldr	r2, [r7, #12]
 800b7c2:	23ad      	movs	r3, #173	; 0xad
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	58d3      	ldr	r3, [r2, r3]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d004      	beq.n	800b7d6 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800b7cc:	68fa      	ldr	r2, [r7, #12]
 800b7ce:	23ad      	movs	r3, #173	; 0xad
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d004      	beq.n	800b7e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b7dc:	68fa      	ldr	r2, [r7, #12]
 800b7de:	23ac      	movs	r3, #172	; 0xac
 800b7e0:	009b      	lsls	r3, r3, #2
 800b7e2:	68b9      	ldr	r1, [r7, #8]
 800b7e4:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7e6:	68fa      	ldr	r2, [r7, #12]
 800b7e8:	23a7      	movs	r3, #167	; 0xa7
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	2101      	movs	r1, #1
 800b7ee:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	1dfa      	adds	r2, r7, #7
 800b7f4:	7812      	ldrb	r2, [r2, #0]
 800b7f6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	0018      	movs	r0, r3
 800b7fc:	f001 fcd4 	bl	800d1a8 <USBD_LL_Init>

  return USBD_OK;
 800b800:	2300      	movs	r3, #0
}
 800b802:	0018      	movs	r0, r3
 800b804:	46bd      	mov	sp, r7
 800b806:	b004      	add	sp, #16
 800b808:	bd80      	pop	{r7, pc}

0800b80a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b80a:	b580      	push	{r7, lr}
 800b80c:	b084      	sub	sp, #16
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
 800b812:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b814:	200f      	movs	r0, #15
 800b816:	183b      	adds	r3, r7, r0
 800b818:	2200      	movs	r2, #0
 800b81a:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d008      	beq.n	800b834 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	23ad      	movs	r3, #173	; 0xad
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	6839      	ldr	r1, [r7, #0]
 800b82a:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800b82c:	183b      	adds	r3, r7, r0
 800b82e:	2200      	movs	r2, #0
 800b830:	701a      	strb	r2, [r3, #0]
 800b832:	e003      	b.n	800b83c <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b834:	230f      	movs	r3, #15
 800b836:	18fb      	adds	r3, r7, r3
 800b838:	2202      	movs	r2, #2
 800b83a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800b83c:	230f      	movs	r3, #15
 800b83e:	18fb      	adds	r3, r7, r3
 800b840:	781b      	ldrb	r3, [r3, #0]
}
 800b842:	0018      	movs	r0, r3
 800b844:	46bd      	mov	sp, r7
 800b846:	b004      	add	sp, #16
 800b848:	bd80      	pop	{r7, pc}

0800b84a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b84a:	b580      	push	{r7, lr}
 800b84c:	b082      	sub	sp, #8
 800b84e:	af00      	add	r7, sp, #0
 800b850:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	0018      	movs	r0, r3
 800b856:	f001 fd0b 	bl	800d270 <USBD_LL_Start>

  return USBD_OK;
 800b85a:	2300      	movs	r3, #0
}
 800b85c:	0018      	movs	r0, r3
 800b85e:	46bd      	mov	sp, r7
 800b860:	b002      	add	sp, #8
 800b862:	bd80      	pop	{r7, pc}

0800b864 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b86c:	2300      	movs	r3, #0
}
 800b86e:	0018      	movs	r0, r3
 800b870:	46bd      	mov	sp, r7
 800b872:	b002      	add	sp, #8
 800b874:	bd80      	pop	{r7, pc}

0800b876 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b876:	b590      	push	{r4, r7, lr}
 800b878:	b085      	sub	sp, #20
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]
 800b87e:	000a      	movs	r2, r1
 800b880:	1cfb      	adds	r3, r7, #3
 800b882:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b884:	240f      	movs	r4, #15
 800b886:	193b      	adds	r3, r7, r4
 800b888:	2202      	movs	r2, #2
 800b88a:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	23ad      	movs	r3, #173	; 0xad
 800b890:	009b      	lsls	r3, r3, #2
 800b892:	58d3      	ldr	r3, [r2, r3]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d00e      	beq.n	800b8b6 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	23ad      	movs	r3, #173	; 0xad
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	58d3      	ldr	r3, [r2, r3]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	1cfa      	adds	r2, r7, #3
 800b8a4:	7811      	ldrb	r1, [r2, #0]
 800b8a6:	687a      	ldr	r2, [r7, #4]
 800b8a8:	0010      	movs	r0, r2
 800b8aa:	4798      	blx	r3
 800b8ac:	1e03      	subs	r3, r0, #0
 800b8ae:	d102      	bne.n	800b8b6 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800b8b0:	193b      	adds	r3, r7, r4
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800b8b6:	230f      	movs	r3, #15
 800b8b8:	18fb      	adds	r3, r7, r3
 800b8ba:	781b      	ldrb	r3, [r3, #0]
}
 800b8bc:	0018      	movs	r0, r3
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	b005      	add	sp, #20
 800b8c2:	bd90      	pop	{r4, r7, pc}

0800b8c4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	000a      	movs	r2, r1
 800b8ce:	1cfb      	adds	r3, r7, #3
 800b8d0:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b8d2:	687a      	ldr	r2, [r7, #4]
 800b8d4:	23ad      	movs	r3, #173	; 0xad
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	58d3      	ldr	r3, [r2, r3]
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	1cfa      	adds	r2, r7, #3
 800b8de:	7811      	ldrb	r1, [r2, #0]
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	0010      	movs	r0, r2
 800b8e4:	4798      	blx	r3

  return USBD_OK;
 800b8e6:	2300      	movs	r3, #0
}
 800b8e8:	0018      	movs	r0, r3
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	b002      	add	sp, #8
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	22aa      	movs	r2, #170	; 0xaa
 800b8fe:	0092      	lsls	r2, r2, #2
 800b900:	4694      	mov	ip, r2
 800b902:	4463      	add	r3, ip
 800b904:	683a      	ldr	r2, [r7, #0]
 800b906:	0011      	movs	r1, r2
 800b908:	0018      	movs	r0, r3
 800b90a:	f001 f810 	bl	800c92e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	23a5      	movs	r3, #165	; 0xa5
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	2101      	movs	r1, #1
 800b916:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	4a23      	ldr	r2, [pc, #140]	; (800b9a8 <USBD_LL_SetupStage+0xb8>)
 800b91c:	5a9b      	ldrh	r3, [r3, r2]
 800b91e:	0019      	movs	r1, r3
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	23a6      	movs	r3, #166	; 0xa6
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	23aa      	movs	r3, #170	; 0xaa
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	5cd3      	ldrb	r3, [r2, r3]
 800b930:	001a      	movs	r2, r3
 800b932:	231f      	movs	r3, #31
 800b934:	4013      	ands	r3, r2
 800b936:	2b02      	cmp	r3, #2
 800b938:	d019      	beq.n	800b96e <USBD_LL_SetupStage+0x7e>
 800b93a:	d822      	bhi.n	800b982 <USBD_LL_SetupStage+0x92>
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d002      	beq.n	800b946 <USBD_LL_SetupStage+0x56>
 800b940:	2b01      	cmp	r3, #1
 800b942:	d00a      	beq.n	800b95a <USBD_LL_SetupStage+0x6a>
 800b944:	e01d      	b.n	800b982 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	22aa      	movs	r2, #170	; 0xaa
 800b94a:	0092      	lsls	r2, r2, #2
 800b94c:	189a      	adds	r2, r3, r2
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	0011      	movs	r1, r2
 800b952:	0018      	movs	r0, r3
 800b954:	f000 fa10 	bl	800bd78 <USBD_StdDevReq>
      break;
 800b958:	e020      	b.n	800b99c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	22aa      	movs	r2, #170	; 0xaa
 800b95e:	0092      	lsls	r2, r2, #2
 800b960:	189a      	adds	r2, r3, r2
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	0011      	movs	r1, r2
 800b966:	0018      	movs	r0, r3
 800b968:	f000 fa78 	bl	800be5c <USBD_StdItfReq>
      break;
 800b96c:	e016      	b.n	800b99c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	22aa      	movs	r2, #170	; 0xaa
 800b972:	0092      	lsls	r2, r2, #2
 800b974:	189a      	adds	r2, r3, r2
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	0011      	movs	r1, r2
 800b97a:	0018      	movs	r0, r3
 800b97c:	f000 fac5 	bl	800bf0a <USBD_StdEPReq>
      break;
 800b980:	e00c      	b.n	800b99c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b982:	687a      	ldr	r2, [r7, #4]
 800b984:	23aa      	movs	r3, #170	; 0xaa
 800b986:	009b      	lsls	r3, r3, #2
 800b988:	5cd3      	ldrb	r3, [r2, r3]
 800b98a:	227f      	movs	r2, #127	; 0x7f
 800b98c:	4393      	bics	r3, r2
 800b98e:	b2da      	uxtb	r2, r3
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	0011      	movs	r1, r2
 800b994:	0018      	movs	r0, r3
 800b996:	f001 fcf2 	bl	800d37e <USBD_LL_StallEP>
      break;
 800b99a:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800b99c:	2300      	movs	r3, #0
}
 800b99e:	0018      	movs	r0, r3
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	b002      	add	sp, #8
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	46c0      	nop			; (mov r8, r8)
 800b9a8:	000002ae 	.word	0x000002ae

0800b9ac <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b086      	sub	sp, #24
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	60f8      	str	r0, [r7, #12]
 800b9b4:	607a      	str	r2, [r7, #4]
 800b9b6:	200b      	movs	r0, #11
 800b9b8:	183b      	adds	r3, r7, r0
 800b9ba:	1c0a      	adds	r2, r1, #0
 800b9bc:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b9be:	183b      	adds	r3, r7, r0
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d154      	bne.n	800ba70 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	3355      	adds	r3, #85	; 0x55
 800b9ca:	33ff      	adds	r3, #255	; 0xff
 800b9cc:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	23a5      	movs	r3, #165	; 0xa5
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	58d3      	ldr	r3, [r2, r3]
 800b9d6:	2b03      	cmp	r3, #3
 800b9d8:	d139      	bne.n	800ba4e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b9da:	697b      	ldr	r3, [r7, #20]
 800b9dc:	68da      	ldr	r2, [r3, #12]
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d919      	bls.n	800ba1a <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	68da      	ldr	r2, [r3, #12]
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	1ad2      	subs	r2, r2, r3
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	68da      	ldr	r2, [r3, #12]
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d203      	bcs.n	800ba08 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800ba04:	b29b      	uxth	r3, r3
 800ba06:	e002      	b.n	800ba0e <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	6879      	ldr	r1, [r7, #4]
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	001a      	movs	r2, r3
 800ba14:	f001 f89b 	bl	800cb4e <USBD_CtlContinueRx>
 800ba18:	e045      	b.n	800baa6 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ba1a:	68fa      	ldr	r2, [r7, #12]
 800ba1c:	23ad      	movs	r3, #173	; 0xad
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	58d3      	ldr	r3, [r2, r3]
 800ba22:	691b      	ldr	r3, [r3, #16]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d00d      	beq.n	800ba44 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ba28:	68fa      	ldr	r2, [r7, #12]
 800ba2a:	23a7      	movs	r3, #167	; 0xa7
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ba30:	2b03      	cmp	r3, #3
 800ba32:	d107      	bne.n	800ba44 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ba34:	68fa      	ldr	r2, [r7, #12]
 800ba36:	23ad      	movs	r3, #173	; 0xad
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	58d3      	ldr	r3, [r2, r3]
 800ba3c:	691b      	ldr	r3, [r3, #16]
 800ba3e:	68fa      	ldr	r2, [r7, #12]
 800ba40:	0010      	movs	r0, r2
 800ba42:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	0018      	movs	r0, r3
 800ba48:	f001 f894 	bl	800cb74 <USBD_CtlSendStatus>
 800ba4c:	e02b      	b.n	800baa6 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ba4e:	68fa      	ldr	r2, [r7, #12]
 800ba50:	23a5      	movs	r3, #165	; 0xa5
 800ba52:	009b      	lsls	r3, r3, #2
 800ba54:	58d3      	ldr	r3, [r2, r3]
 800ba56:	2b05      	cmp	r3, #5
 800ba58:	d125      	bne.n	800baa6 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ba5a:	68fa      	ldr	r2, [r7, #12]
 800ba5c:	23a5      	movs	r3, #165	; 0xa5
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	2100      	movs	r1, #0
 800ba62:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2100      	movs	r1, #0
 800ba68:	0018      	movs	r0, r3
 800ba6a:	f001 fc88 	bl	800d37e <USBD_LL_StallEP>
 800ba6e:	e01a      	b.n	800baa6 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ba70:	68fa      	ldr	r2, [r7, #12]
 800ba72:	23ad      	movs	r3, #173	; 0xad
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	58d3      	ldr	r3, [r2, r3]
 800ba78:	699b      	ldr	r3, [r3, #24]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d011      	beq.n	800baa2 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ba7e:	68fa      	ldr	r2, [r7, #12]
 800ba80:	23a7      	movs	r3, #167	; 0xa7
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800ba86:	2b03      	cmp	r3, #3
 800ba88:	d10b      	bne.n	800baa2 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800ba8a:	68fa      	ldr	r2, [r7, #12]
 800ba8c:	23ad      	movs	r3, #173	; 0xad
 800ba8e:	009b      	lsls	r3, r3, #2
 800ba90:	58d3      	ldr	r3, [r2, r3]
 800ba92:	699b      	ldr	r3, [r3, #24]
 800ba94:	220b      	movs	r2, #11
 800ba96:	18ba      	adds	r2, r7, r2
 800ba98:	7811      	ldrb	r1, [r2, #0]
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	0010      	movs	r0, r2
 800ba9e:	4798      	blx	r3
 800baa0:	e001      	b.n	800baa6 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800baa2:	2302      	movs	r3, #2
 800baa4:	e000      	b.n	800baa8 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800baa6:	2300      	movs	r3, #0
}
 800baa8:	0018      	movs	r0, r3
 800baaa:	46bd      	mov	sp, r7
 800baac:	b006      	add	sp, #24
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b086      	sub	sp, #24
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	607a      	str	r2, [r7, #4]
 800baba:	200b      	movs	r0, #11
 800babc:	183b      	adds	r3, r7, r0
 800babe:	1c0a      	adds	r2, r1, #0
 800bac0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bac2:	183b      	adds	r3, r7, r0
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d000      	beq.n	800bacc <USBD_LL_DataInStage+0x1c>
 800baca:	e08e      	b.n	800bbea <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	3314      	adds	r3, #20
 800bad0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bad2:	68fa      	ldr	r2, [r7, #12]
 800bad4:	23a5      	movs	r3, #165	; 0xa5
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	58d3      	ldr	r3, [r2, r3]
 800bada:	2b02      	cmp	r3, #2
 800badc:	d164      	bne.n	800bba8 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800bade:	697b      	ldr	r3, [r7, #20]
 800bae0:	68da      	ldr	r2, [r3, #12]
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	691b      	ldr	r3, [r3, #16]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d915      	bls.n	800bb16 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	68da      	ldr	r2, [r3, #12]
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	691b      	ldr	r3, [r3, #16]
 800baf2:	1ad2      	subs	r2, r2, r3
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	68db      	ldr	r3, [r3, #12]
 800bafc:	b29a      	uxth	r2, r3
 800bafe:	6879      	ldr	r1, [r7, #4]
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	0018      	movs	r0, r3
 800bb04:	f000 ffec 	bl	800cae0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb08:	68f8      	ldr	r0, [r7, #12]
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	2100      	movs	r1, #0
 800bb10:	f001 fd1e 	bl	800d550 <USBD_LL_PrepareReceive>
 800bb14:	e059      	b.n	800bbca <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	689a      	ldr	r2, [r3, #8]
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	0019      	movs	r1, r3
 800bb20:	0010      	movs	r0, r2
 800bb22:	f7f4 fb89 	bl	8000238 <__aeabi_uidivmod>
 800bb26:	1e0b      	subs	r3, r1, #0
 800bb28:	d11f      	bne.n	800bb6a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	689a      	ldr	r2, [r3, #8]
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d319      	bcc.n	800bb6a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	689a      	ldr	r2, [r3, #8]
 800bb3a:	68f9      	ldr	r1, [r7, #12]
 800bb3c:	23a6      	movs	r3, #166	; 0xa6
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d211      	bcs.n	800bb6a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	2100      	movs	r1, #0
 800bb4c:	0018      	movs	r0, r3
 800bb4e:	f000 ffc7 	bl	800cae0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	23a6      	movs	r3, #166	; 0xa6
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	2100      	movs	r1, #0
 800bb5a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb5c:	68f8      	ldr	r0, [r7, #12]
 800bb5e:	2300      	movs	r3, #0
 800bb60:	2200      	movs	r2, #0
 800bb62:	2100      	movs	r1, #0
 800bb64:	f001 fcf4 	bl	800d550 <USBD_LL_PrepareReceive>
 800bb68:	e02f      	b.n	800bbca <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bb6a:	68fa      	ldr	r2, [r7, #12]
 800bb6c:	23ad      	movs	r3, #173	; 0xad
 800bb6e:	009b      	lsls	r3, r3, #2
 800bb70:	58d3      	ldr	r3, [r2, r3]
 800bb72:	68db      	ldr	r3, [r3, #12]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d00d      	beq.n	800bb94 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bb78:	68fa      	ldr	r2, [r7, #12]
 800bb7a:	23a7      	movs	r3, #167	; 0xa7
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bb80:	2b03      	cmp	r3, #3
 800bb82:	d107      	bne.n	800bb94 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	23ad      	movs	r3, #173	; 0xad
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	58d3      	ldr	r3, [r2, r3]
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	0010      	movs	r0, r2
 800bb92:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2180      	movs	r1, #128	; 0x80
 800bb98:	0018      	movs	r0, r3
 800bb9a:	f001 fbf0 	bl	800d37e <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	0018      	movs	r0, r3
 800bba2:	f000 fffb 	bl	800cb9c <USBD_CtlReceiveStatus>
 800bba6:	e010      	b.n	800bbca <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bba8:	68fa      	ldr	r2, [r7, #12]
 800bbaa:	23a5      	movs	r3, #165	; 0xa5
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	58d3      	ldr	r3, [r2, r3]
 800bbb0:	2b04      	cmp	r3, #4
 800bbb2:	d005      	beq.n	800bbc0 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	23a5      	movs	r3, #165	; 0xa5
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d104      	bne.n	800bbca <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2180      	movs	r1, #128	; 0x80
 800bbc4:	0018      	movs	r0, r3
 800bbc6:	f001 fbda 	bl	800d37e <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bbca:	68fa      	ldr	r2, [r7, #12]
 800bbcc:	23a8      	movs	r3, #168	; 0xa8
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	5cd3      	ldrb	r3, [r2, r3]
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d124      	bne.n	800bc20 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	0018      	movs	r0, r3
 800bbda:	f7ff fe43 	bl	800b864 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bbde:	68fa      	ldr	r2, [r7, #12]
 800bbe0:	23a8      	movs	r3, #168	; 0xa8
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	2100      	movs	r1, #0
 800bbe6:	54d1      	strb	r1, [r2, r3]
 800bbe8:	e01a      	b.n	800bc20 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bbea:	68fa      	ldr	r2, [r7, #12]
 800bbec:	23ad      	movs	r3, #173	; 0xad
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	58d3      	ldr	r3, [r2, r3]
 800bbf2:	695b      	ldr	r3, [r3, #20]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d011      	beq.n	800bc1c <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bbf8:	68fa      	ldr	r2, [r7, #12]
 800bbfa:	23a7      	movs	r3, #167	; 0xa7
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800bc00:	2b03      	cmp	r3, #3
 800bc02:	d10b      	bne.n	800bc1c <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800bc04:	68fa      	ldr	r2, [r7, #12]
 800bc06:	23ad      	movs	r3, #173	; 0xad
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	58d3      	ldr	r3, [r2, r3]
 800bc0c:	695b      	ldr	r3, [r3, #20]
 800bc0e:	220b      	movs	r2, #11
 800bc10:	18ba      	adds	r2, r7, r2
 800bc12:	7811      	ldrb	r1, [r2, #0]
 800bc14:	68fa      	ldr	r2, [r7, #12]
 800bc16:	0010      	movs	r0, r2
 800bc18:	4798      	blx	r3
 800bc1a:	e001      	b.n	800bc20 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bc1c:	2302      	movs	r3, #2
 800bc1e:	e000      	b.n	800bc22 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	0018      	movs	r0, r3
 800bc24:	46bd      	mov	sp, r7
 800bc26:	b006      	add	sp, #24
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bc2a:	b580      	push	{r7, lr}
 800bc2c:	b082      	sub	sp, #8
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	2340      	movs	r3, #64	; 0x40
 800bc36:	2200      	movs	r2, #0
 800bc38:	2100      	movs	r1, #0
 800bc3a:	f001 fb3e 	bl	800d2ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	23ac      	movs	r3, #172	; 0xac
 800bc42:	005b      	lsls	r3, r3, #1
 800bc44:	2101      	movs	r1, #1
 800bc46:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	23b2      	movs	r3, #178	; 0xb2
 800bc4c:	005b      	lsls	r3, r3, #1
 800bc4e:	2140      	movs	r1, #64	; 0x40
 800bc50:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	2340      	movs	r3, #64	; 0x40
 800bc56:	2200      	movs	r2, #0
 800bc58:	2180      	movs	r1, #128	; 0x80
 800bc5a:	f001 fb2e 	bl	800d2ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2201      	movs	r2, #1
 800bc62:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2240      	movs	r2, #64	; 0x40
 800bc68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	23a7      	movs	r3, #167	; 0xa7
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	2101      	movs	r1, #1
 800bc72:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	23a5      	movs	r3, #165	; 0xa5
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2200      	movs	r2, #0
 800bc82:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	23a9      	movs	r3, #169	; 0xa9
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	2100      	movs	r1, #0
 800bc8c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	23ae      	movs	r3, #174	; 0xae
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	58d3      	ldr	r3, [r2, r3]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d00a      	beq.n	800bcb0 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	23ad      	movs	r3, #173	; 0xad
 800bc9e:	009b      	lsls	r3, r3, #2
 800bca0:	58d3      	ldr	r3, [r2, r3]
 800bca2:	685a      	ldr	r2, [r3, #4]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	685b      	ldr	r3, [r3, #4]
 800bca8:	b2d9      	uxtb	r1, r3
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	0018      	movs	r0, r3
 800bcae:	4790      	blx	r2
  }

  return USBD_OK;
 800bcb0:	2300      	movs	r3, #0
}
 800bcb2:	0018      	movs	r0, r3
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	b002      	add	sp, #8
 800bcb8:	bd80      	pop	{r7, pc}

0800bcba <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b082      	sub	sp, #8
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
 800bcc2:	000a      	movs	r2, r1
 800bcc4:	1cfb      	adds	r3, r7, #3
 800bcc6:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	1cfa      	adds	r2, r7, #3
 800bccc:	7812      	ldrb	r2, [r2, #0]
 800bcce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bcd0:	2300      	movs	r3, #0
}
 800bcd2:	0018      	movs	r0, r3
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	b002      	add	sp, #8
 800bcd8:	bd80      	pop	{r7, pc}
	...

0800bcdc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bce4:	687a      	ldr	r2, [r7, #4]
 800bce6:	23a7      	movs	r3, #167	; 0xa7
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	5cd1      	ldrb	r1, [r2, r3]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	4a06      	ldr	r2, [pc, #24]	; (800bd08 <USBD_LL_Suspend+0x2c>)
 800bcf0:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	23a7      	movs	r3, #167	; 0xa7
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	2104      	movs	r1, #4
 800bcfa:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800bcfc:	2300      	movs	r3, #0
}
 800bcfe:	0018      	movs	r0, r3
 800bd00:	46bd      	mov	sp, r7
 800bd02:	b002      	add	sp, #8
 800bd04:	bd80      	pop	{r7, pc}
 800bd06:	46c0      	nop			; (mov r8, r8)
 800bd08:	0000029d 	.word	0x0000029d

0800bd0c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	23a7      	movs	r3, #167	; 0xa7
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	5cd3      	ldrb	r3, [r2, r3]
 800bd1c:	2b04      	cmp	r3, #4
 800bd1e:	d106      	bne.n	800bd2e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	4a05      	ldr	r2, [pc, #20]	; (800bd38 <USBD_LL_Resume+0x2c>)
 800bd24:	5c99      	ldrb	r1, [r3, r2]
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	23a7      	movs	r3, #167	; 0xa7
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800bd2e:	2300      	movs	r3, #0
}
 800bd30:	0018      	movs	r0, r3
 800bd32:	46bd      	mov	sp, r7
 800bd34:	b002      	add	sp, #8
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	0000029d 	.word	0x0000029d

0800bd3c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd44:	687a      	ldr	r2, [r7, #4]
 800bd46:	23a7      	movs	r3, #167	; 0xa7
 800bd48:	009b      	lsls	r3, r3, #2
 800bd4a:	5cd3      	ldrb	r3, [r2, r3]
 800bd4c:	2b03      	cmp	r3, #3
 800bd4e:	d10e      	bne.n	800bd6e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800bd50:	687a      	ldr	r2, [r7, #4]
 800bd52:	23ad      	movs	r3, #173	; 0xad
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	58d3      	ldr	r3, [r2, r3]
 800bd58:	69db      	ldr	r3, [r3, #28]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d007      	beq.n	800bd6e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	23ad      	movs	r3, #173	; 0xad
 800bd62:	009b      	lsls	r3, r3, #2
 800bd64:	58d3      	ldr	r3, [r2, r3]
 800bd66:	69db      	ldr	r3, [r3, #28]
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	0010      	movs	r0, r2
 800bd6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	0018      	movs	r0, r3
 800bd72:	46bd      	mov	sp, r7
 800bd74:	b002      	add	sp, #8
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd82:	230f      	movs	r3, #15
 800bd84:	18fb      	adds	r3, r7, r3
 800bd86:	2200      	movs	r2, #0
 800bd88:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	001a      	movs	r2, r3
 800bd90:	2360      	movs	r3, #96	; 0x60
 800bd92:	4013      	ands	r3, r2
 800bd94:	2b40      	cmp	r3, #64	; 0x40
 800bd96:	d004      	beq.n	800bda2 <USBD_StdDevReq+0x2a>
 800bd98:	d84f      	bhi.n	800be3a <USBD_StdDevReq+0xc2>
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d00b      	beq.n	800bdb6 <USBD_StdDevReq+0x3e>
 800bd9e:	2b20      	cmp	r3, #32
 800bda0:	d14b      	bne.n	800be3a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bda2:	687a      	ldr	r2, [r7, #4]
 800bda4:	23ad      	movs	r3, #173	; 0xad
 800bda6:	009b      	lsls	r3, r3, #2
 800bda8:	58d3      	ldr	r3, [r2, r3]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	6839      	ldr	r1, [r7, #0]
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	0010      	movs	r0, r2
 800bdb2:	4798      	blx	r3
      break;
 800bdb4:	e048      	b.n	800be48 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	785b      	ldrb	r3, [r3, #1]
 800bdba:	2b09      	cmp	r3, #9
 800bdbc:	d835      	bhi.n	800be2a <USBD_StdDevReq+0xb2>
 800bdbe:	009a      	lsls	r2, r3, #2
 800bdc0:	4b25      	ldr	r3, [pc, #148]	; (800be58 <USBD_StdDevReq+0xe0>)
 800bdc2:	18d3      	adds	r3, r2, r3
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bdc8:	683a      	ldr	r2, [r7, #0]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	0011      	movs	r1, r2
 800bdce:	0018      	movs	r0, r3
 800bdd0:	f000 fa52 	bl	800c278 <USBD_GetDescriptor>
          break;
 800bdd4:	e030      	b.n	800be38 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bdd6:	683a      	ldr	r2, [r7, #0]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	0011      	movs	r1, r2
 800bddc:	0018      	movs	r0, r3
 800bdde:	f000 fbfd 	bl	800c5dc <USBD_SetAddress>
          break;
 800bde2:	e029      	b.n	800be38 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800bde4:	683a      	ldr	r2, [r7, #0]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	0011      	movs	r1, r2
 800bdea:	0018      	movs	r0, r3
 800bdec:	f000 fc4a 	bl	800c684 <USBD_SetConfig>
          break;
 800bdf0:	e022      	b.n	800be38 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bdf2:	683a      	ldr	r2, [r7, #0]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	0011      	movs	r1, r2
 800bdf8:	0018      	movs	r0, r3
 800bdfa:	f000 fce7 	bl	800c7cc <USBD_GetConfig>
          break;
 800bdfe:	e01b      	b.n	800be38 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be00:	683a      	ldr	r2, [r7, #0]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	0011      	movs	r1, r2
 800be06:	0018      	movs	r0, r3
 800be08:	f000 fd1b 	bl	800c842 <USBD_GetStatus>
          break;
 800be0c:	e014      	b.n	800be38 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be0e:	683a      	ldr	r2, [r7, #0]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	0011      	movs	r1, r2
 800be14:	0018      	movs	r0, r3
 800be16:	f000 fd4e 	bl	800c8b6 <USBD_SetFeature>
          break;
 800be1a:	e00d      	b.n	800be38 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be1c:	683a      	ldr	r2, [r7, #0]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	0011      	movs	r1, r2
 800be22:	0018      	movs	r0, r3
 800be24:	f000 fd5d 	bl	800c8e2 <USBD_ClrFeature>
          break;
 800be28:	e006      	b.n	800be38 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800be2a:	683a      	ldr	r2, [r7, #0]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	0011      	movs	r1, r2
 800be30:	0018      	movs	r0, r3
 800be32:	f000 fdb7 	bl	800c9a4 <USBD_CtlError>
          break;
 800be36:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800be38:	e006      	b.n	800be48 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800be3a:	683a      	ldr	r2, [r7, #0]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	0011      	movs	r1, r2
 800be40:	0018      	movs	r0, r3
 800be42:	f000 fdaf 	bl	800c9a4 <USBD_CtlError>
      break;
 800be46:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800be48:	230f      	movs	r3, #15
 800be4a:	18fb      	adds	r3, r7, r3
 800be4c:	781b      	ldrb	r3, [r3, #0]
}
 800be4e:	0018      	movs	r0, r3
 800be50:	46bd      	mov	sp, r7
 800be52:	b004      	add	sp, #16
 800be54:	bd80      	pop	{r7, pc}
 800be56:	46c0      	nop			; (mov r8, r8)
 800be58:	0800e258 	.word	0x0800e258

0800be5c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800be5c:	b5b0      	push	{r4, r5, r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be66:	230f      	movs	r3, #15
 800be68:	18fb      	adds	r3, r7, r3
 800be6a:	2200      	movs	r2, #0
 800be6c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	001a      	movs	r2, r3
 800be74:	2360      	movs	r3, #96	; 0x60
 800be76:	4013      	ands	r3, r2
 800be78:	2b40      	cmp	r3, #64	; 0x40
 800be7a:	d004      	beq.n	800be86 <USBD_StdItfReq+0x2a>
 800be7c:	d839      	bhi.n	800bef2 <USBD_StdItfReq+0x96>
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d001      	beq.n	800be86 <USBD_StdItfReq+0x2a>
 800be82:	2b20      	cmp	r3, #32
 800be84:	d135      	bne.n	800bef2 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	23a7      	movs	r3, #167	; 0xa7
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	5cd3      	ldrb	r3, [r2, r3]
 800be8e:	3b01      	subs	r3, #1
 800be90:	2b02      	cmp	r3, #2
 800be92:	d825      	bhi.n	800bee0 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	889b      	ldrh	r3, [r3, #4]
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d819      	bhi.n	800bed2 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	23ad      	movs	r3, #173	; 0xad
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	58d3      	ldr	r3, [r2, r3]
 800bea6:	689b      	ldr	r3, [r3, #8]
 800bea8:	250f      	movs	r5, #15
 800beaa:	197c      	adds	r4, r7, r5
 800beac:	6839      	ldr	r1, [r7, #0]
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	0010      	movs	r0, r2
 800beb2:	4798      	blx	r3
 800beb4:	0003      	movs	r3, r0
 800beb6:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	88db      	ldrh	r3, [r3, #6]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d116      	bne.n	800beee <USBD_StdItfReq+0x92>
 800bec0:	197b      	adds	r3, r7, r5
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d112      	bne.n	800beee <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	0018      	movs	r0, r3
 800becc:	f000 fe52 	bl	800cb74 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bed0:	e00d      	b.n	800beee <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800bed2:	683a      	ldr	r2, [r7, #0]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	0011      	movs	r1, r2
 800bed8:	0018      	movs	r0, r3
 800beda:	f000 fd63 	bl	800c9a4 <USBD_CtlError>
          break;
 800bede:	e006      	b.n	800beee <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800bee0:	683a      	ldr	r2, [r7, #0]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	0011      	movs	r1, r2
 800bee6:	0018      	movs	r0, r3
 800bee8:	f000 fd5c 	bl	800c9a4 <USBD_CtlError>
          break;
 800beec:	e000      	b.n	800bef0 <USBD_StdItfReq+0x94>
          break;
 800beee:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800bef0:	e006      	b.n	800bf00 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800bef2:	683a      	ldr	r2, [r7, #0]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	0011      	movs	r1, r2
 800bef8:	0018      	movs	r0, r3
 800befa:	f000 fd53 	bl	800c9a4 <USBD_CtlError>
      break;
 800befe:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800bf00:	2300      	movs	r3, #0
}
 800bf02:	0018      	movs	r0, r3
 800bf04:	46bd      	mov	sp, r7
 800bf06:	b004      	add	sp, #16
 800bf08:	bdb0      	pop	{r4, r5, r7, pc}

0800bf0a <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bf0a:	b5b0      	push	{r4, r5, r7, lr}
 800bf0c:	b084      	sub	sp, #16
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	6078      	str	r0, [r7, #4]
 800bf12:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf14:	230f      	movs	r3, #15
 800bf16:	18fb      	adds	r3, r7, r3
 800bf18:	2200      	movs	r2, #0
 800bf1a:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	889a      	ldrh	r2, [r3, #4]
 800bf20:	230e      	movs	r3, #14
 800bf22:	18fb      	adds	r3, r7, r3
 800bf24:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	001a      	movs	r2, r3
 800bf2c:	2360      	movs	r3, #96	; 0x60
 800bf2e:	4013      	ands	r3, r2
 800bf30:	2b40      	cmp	r3, #64	; 0x40
 800bf32:	d006      	beq.n	800bf42 <USBD_StdEPReq+0x38>
 800bf34:	d900      	bls.n	800bf38 <USBD_StdEPReq+0x2e>
 800bf36:	e190      	b.n	800c25a <USBD_StdEPReq+0x350>
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d00c      	beq.n	800bf56 <USBD_StdEPReq+0x4c>
 800bf3c:	2b20      	cmp	r3, #32
 800bf3e:	d000      	beq.n	800bf42 <USBD_StdEPReq+0x38>
 800bf40:	e18b      	b.n	800c25a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	23ad      	movs	r3, #173	; 0xad
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	58d3      	ldr	r3, [r2, r3]
 800bf4a:	689b      	ldr	r3, [r3, #8]
 800bf4c:	6839      	ldr	r1, [r7, #0]
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	0010      	movs	r0, r2
 800bf52:	4798      	blx	r3
      break;
 800bf54:	e188      	b.n	800c268 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	001a      	movs	r2, r3
 800bf5c:	2360      	movs	r3, #96	; 0x60
 800bf5e:	4013      	ands	r3, r2
 800bf60:	2b20      	cmp	r3, #32
 800bf62:	d10f      	bne.n	800bf84 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	23ad      	movs	r3, #173	; 0xad
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	58d3      	ldr	r3, [r2, r3]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	250f      	movs	r5, #15
 800bf70:	197c      	adds	r4, r7, r5
 800bf72:	6839      	ldr	r1, [r7, #0]
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	0010      	movs	r0, r2
 800bf78:	4798      	blx	r3
 800bf7a:	0003      	movs	r3, r0
 800bf7c:	7023      	strb	r3, [r4, #0]

        return ret;
 800bf7e:	197b      	adds	r3, r7, r5
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	e174      	b.n	800c26e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	785b      	ldrb	r3, [r3, #1]
 800bf88:	2b03      	cmp	r3, #3
 800bf8a:	d007      	beq.n	800bf9c <USBD_StdEPReq+0x92>
 800bf8c:	dd00      	ble.n	800bf90 <USBD_StdEPReq+0x86>
 800bf8e:	e15c      	b.n	800c24a <USBD_StdEPReq+0x340>
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d100      	bne.n	800bf96 <USBD_StdEPReq+0x8c>
 800bf94:	e092      	b.n	800c0bc <USBD_StdEPReq+0x1b2>
 800bf96:	2b01      	cmp	r3, #1
 800bf98:	d04b      	beq.n	800c032 <USBD_StdEPReq+0x128>
 800bf9a:	e156      	b.n	800c24a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	23a7      	movs	r3, #167	; 0xa7
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	5cd3      	ldrb	r3, [r2, r3]
 800bfa4:	2b02      	cmp	r3, #2
 800bfa6:	d002      	beq.n	800bfae <USBD_StdEPReq+0xa4>
 800bfa8:	2b03      	cmp	r3, #3
 800bfaa:	d01d      	beq.n	800bfe8 <USBD_StdEPReq+0xde>
 800bfac:	e039      	b.n	800c022 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfae:	220e      	movs	r2, #14
 800bfb0:	18bb      	adds	r3, r7, r2
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d010      	beq.n	800bfda <USBD_StdEPReq+0xd0>
 800bfb8:	18bb      	adds	r3, r7, r2
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	2b80      	cmp	r3, #128	; 0x80
 800bfbe:	d00c      	beq.n	800bfda <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bfc0:	18bb      	adds	r3, r7, r2
 800bfc2:	781a      	ldrb	r2, [r3, #0]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	0011      	movs	r1, r2
 800bfc8:	0018      	movs	r0, r3
 800bfca:	f001 f9d8 	bl	800d37e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2180      	movs	r1, #128	; 0x80
 800bfd2:	0018      	movs	r0, r3
 800bfd4:	f001 f9d3 	bl	800d37e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bfd8:	e02a      	b.n	800c030 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800bfda:	683a      	ldr	r2, [r7, #0]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	0011      	movs	r1, r2
 800bfe0:	0018      	movs	r0, r3
 800bfe2:	f000 fcdf 	bl	800c9a4 <USBD_CtlError>
              break;
 800bfe6:	e023      	b.n	800c030 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	885b      	ldrh	r3, [r3, #2]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d113      	bne.n	800c018 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800bff0:	220e      	movs	r2, #14
 800bff2:	18bb      	adds	r3, r7, r2
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d00e      	beq.n	800c018 <USBD_StdEPReq+0x10e>
 800bffa:	18bb      	adds	r3, r7, r2
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	2b80      	cmp	r3, #128	; 0x80
 800c000:	d00a      	beq.n	800c018 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	88db      	ldrh	r3, [r3, #6]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d106      	bne.n	800c018 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c00a:	18bb      	adds	r3, r7, r2
 800c00c:	781a      	ldrb	r2, [r3, #0]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	0011      	movs	r1, r2
 800c012:	0018      	movs	r0, r3
 800c014:	f001 f9b3 	bl	800d37e <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	0018      	movs	r0, r3
 800c01c:	f000 fdaa 	bl	800cb74 <USBD_CtlSendStatus>

              break;
 800c020:	e006      	b.n	800c030 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800c022:	683a      	ldr	r2, [r7, #0]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	0011      	movs	r1, r2
 800c028:	0018      	movs	r0, r3
 800c02a:	f000 fcbb 	bl	800c9a4 <USBD_CtlError>
              break;
 800c02e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800c030:	e112      	b.n	800c258 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c032:	687a      	ldr	r2, [r7, #4]
 800c034:	23a7      	movs	r3, #167	; 0xa7
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	5cd3      	ldrb	r3, [r2, r3]
 800c03a:	2b02      	cmp	r3, #2
 800c03c:	d002      	beq.n	800c044 <USBD_StdEPReq+0x13a>
 800c03e:	2b03      	cmp	r3, #3
 800c040:	d01d      	beq.n	800c07e <USBD_StdEPReq+0x174>
 800c042:	e032      	b.n	800c0aa <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c044:	220e      	movs	r2, #14
 800c046:	18bb      	adds	r3, r7, r2
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d010      	beq.n	800c070 <USBD_StdEPReq+0x166>
 800c04e:	18bb      	adds	r3, r7, r2
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	2b80      	cmp	r3, #128	; 0x80
 800c054:	d00c      	beq.n	800c070 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c056:	18bb      	adds	r3, r7, r2
 800c058:	781a      	ldrb	r2, [r3, #0]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	0011      	movs	r1, r2
 800c05e:	0018      	movs	r0, r3
 800c060:	f001 f98d 	bl	800d37e <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2180      	movs	r1, #128	; 0x80
 800c068:	0018      	movs	r0, r3
 800c06a:	f001 f988 	bl	800d37e <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c06e:	e024      	b.n	800c0ba <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800c070:	683a      	ldr	r2, [r7, #0]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	0011      	movs	r1, r2
 800c076:	0018      	movs	r0, r3
 800c078:	f000 fc94 	bl	800c9a4 <USBD_CtlError>
              break;
 800c07c:	e01d      	b.n	800c0ba <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	885b      	ldrh	r3, [r3, #2]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d118      	bne.n	800c0b8 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c086:	210e      	movs	r1, #14
 800c088:	187b      	adds	r3, r7, r1
 800c08a:	781b      	ldrb	r3, [r3, #0]
 800c08c:	227f      	movs	r2, #127	; 0x7f
 800c08e:	4013      	ands	r3, r2
 800c090:	d006      	beq.n	800c0a0 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c092:	187b      	adds	r3, r7, r1
 800c094:	781a      	ldrb	r2, [r3, #0]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	0011      	movs	r1, r2
 800c09a:	0018      	movs	r0, r3
 800c09c:	f001 f99a 	bl	800d3d4 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	0018      	movs	r0, r3
 800c0a4:	f000 fd66 	bl	800cb74 <USBD_CtlSendStatus>
              }
              break;
 800c0a8:	e006      	b.n	800c0b8 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800c0aa:	683a      	ldr	r2, [r7, #0]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	0011      	movs	r1, r2
 800c0b0:	0018      	movs	r0, r3
 800c0b2:	f000 fc77 	bl	800c9a4 <USBD_CtlError>
              break;
 800c0b6:	e000      	b.n	800c0ba <USBD_StdEPReq+0x1b0>
              break;
 800c0b8:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800c0ba:	e0cd      	b.n	800c258 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	23a7      	movs	r3, #167	; 0xa7
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	5cd3      	ldrb	r3, [r2, r3]
 800c0c4:	2b02      	cmp	r3, #2
 800c0c6:	d002      	beq.n	800c0ce <USBD_StdEPReq+0x1c4>
 800c0c8:	2b03      	cmp	r3, #3
 800c0ca:	d03c      	beq.n	800c146 <USBD_StdEPReq+0x23c>
 800c0cc:	e0b5      	b.n	800c23a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0ce:	220e      	movs	r2, #14
 800c0d0:	18bb      	adds	r3, r7, r2
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d00a      	beq.n	800c0ee <USBD_StdEPReq+0x1e4>
 800c0d8:	18bb      	adds	r3, r7, r2
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	2b80      	cmp	r3, #128	; 0x80
 800c0de:	d006      	beq.n	800c0ee <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800c0e0:	683a      	ldr	r2, [r7, #0]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	0011      	movs	r1, r2
 800c0e6:	0018      	movs	r0, r3
 800c0e8:	f000 fc5c 	bl	800c9a4 <USBD_CtlError>
                break;
 800c0ec:	e0ac      	b.n	800c248 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0ee:	220e      	movs	r2, #14
 800c0f0:	18bb      	adds	r3, r7, r2
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	b25b      	sxtb	r3, r3
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	da0c      	bge.n	800c114 <USBD_StdEPReq+0x20a>
 800c0fa:	18bb      	adds	r3, r7, r2
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	227f      	movs	r2, #127	; 0x7f
 800c100:	401a      	ands	r2, r3
 800c102:	0013      	movs	r3, r2
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	189b      	adds	r3, r3, r2
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	3310      	adds	r3, #16
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	18d3      	adds	r3, r2, r3
 800c110:	3304      	adds	r3, #4
 800c112:	e00d      	b.n	800c130 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c114:	230e      	movs	r3, #14
 800c116:	18fb      	adds	r3, r7, r3
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	227f      	movs	r2, #127	; 0x7f
 800c11c:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c11e:	0013      	movs	r3, r2
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	189b      	adds	r3, r3, r2
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	3351      	adds	r3, #81	; 0x51
 800c128:	33ff      	adds	r3, #255	; 0xff
 800c12a:	687a      	ldr	r2, [r7, #4]
 800c12c:	18d3      	adds	r3, r2, r3
 800c12e:	3304      	adds	r3, #4
 800c130:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	2200      	movs	r2, #0
 800c136:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c138:	68b9      	ldr	r1, [r7, #8]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2202      	movs	r2, #2
 800c13e:	0018      	movs	r0, r3
 800c140:	f000 fcae 	bl	800caa0 <USBD_CtlSendData>
              break;
 800c144:	e080      	b.n	800c248 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c146:	220e      	movs	r2, #14
 800c148:	18bb      	adds	r3, r7, r2
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	b25b      	sxtb	r3, r3
 800c14e:	2b00      	cmp	r3, #0
 800c150:	da14      	bge.n	800c17c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c152:	18bb      	adds	r3, r7, r2
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	220f      	movs	r2, #15
 800c158:	401a      	ands	r2, r3
 800c15a:	6879      	ldr	r1, [r7, #4]
 800c15c:	0013      	movs	r3, r2
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	189b      	adds	r3, r3, r2
 800c162:	009b      	lsls	r3, r3, #2
 800c164:	18cb      	adds	r3, r1, r3
 800c166:	3318      	adds	r3, #24
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d11e      	bne.n	800c1ac <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800c16e:	683a      	ldr	r2, [r7, #0]
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	0011      	movs	r1, r2
 800c174:	0018      	movs	r0, r3
 800c176:	f000 fc15 	bl	800c9a4 <USBD_CtlError>
                  break;
 800c17a:	e065      	b.n	800c248 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c17c:	230e      	movs	r3, #14
 800c17e:	18fb      	adds	r3, r7, r3
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	220f      	movs	r2, #15
 800c184:	401a      	ands	r2, r3
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	23ac      	movs	r3, #172	; 0xac
 800c18a:	0059      	lsls	r1, r3, #1
 800c18c:	0013      	movs	r3, r2
 800c18e:	009b      	lsls	r3, r3, #2
 800c190:	189b      	adds	r3, r3, r2
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	18c3      	adds	r3, r0, r3
 800c196:	185b      	adds	r3, r3, r1
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d106      	bne.n	800c1ac <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800c19e:	683a      	ldr	r2, [r7, #0]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	0011      	movs	r1, r2
 800c1a4:	0018      	movs	r0, r3
 800c1a6:	f000 fbfd 	bl	800c9a4 <USBD_CtlError>
                  break;
 800c1aa:	e04d      	b.n	800c248 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1ac:	220e      	movs	r2, #14
 800c1ae:	18bb      	adds	r3, r7, r2
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	b25b      	sxtb	r3, r3
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	da0c      	bge.n	800c1d2 <USBD_StdEPReq+0x2c8>
 800c1b8:	18bb      	adds	r3, r7, r2
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	227f      	movs	r2, #127	; 0x7f
 800c1be:	401a      	ands	r2, r3
 800c1c0:	0013      	movs	r3, r2
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	189b      	adds	r3, r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	3310      	adds	r3, #16
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	18d3      	adds	r3, r2, r3
 800c1ce:	3304      	adds	r3, #4
 800c1d0:	e00d      	b.n	800c1ee <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1d2:	230e      	movs	r3, #14
 800c1d4:	18fb      	adds	r3, r7, r3
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	227f      	movs	r2, #127	; 0x7f
 800c1da:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1dc:	0013      	movs	r3, r2
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	189b      	adds	r3, r3, r2
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	3351      	adds	r3, #81	; 0x51
 800c1e6:	33ff      	adds	r3, #255	; 0xff
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	18d3      	adds	r3, r2, r3
 800c1ec:	3304      	adds	r3, #4
 800c1ee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c1f0:	220e      	movs	r2, #14
 800c1f2:	18bb      	adds	r3, r7, r2
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d003      	beq.n	800c202 <USBD_StdEPReq+0x2f8>
 800c1fa:	18bb      	adds	r3, r7, r2
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	2b80      	cmp	r3, #128	; 0x80
 800c200:	d103      	bne.n	800c20a <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	2200      	movs	r2, #0
 800c206:	601a      	str	r2, [r3, #0]
 800c208:	e010      	b.n	800c22c <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c20a:	230e      	movs	r3, #14
 800c20c:	18fb      	adds	r3, r7, r3
 800c20e:	781a      	ldrb	r2, [r3, #0]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	0011      	movs	r1, r2
 800c214:	0018      	movs	r0, r3
 800c216:	f001 f908 	bl	800d42a <USBD_LL_IsStallEP>
 800c21a:	1e03      	subs	r3, r0, #0
 800c21c:	d003      	beq.n	800c226 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	2201      	movs	r2, #1
 800c222:	601a      	str	r2, [r3, #0]
 800c224:	e002      	b.n	800c22c <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	2200      	movs	r2, #0
 800c22a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c22c:	68b9      	ldr	r1, [r7, #8]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2202      	movs	r2, #2
 800c232:	0018      	movs	r0, r3
 800c234:	f000 fc34 	bl	800caa0 <USBD_CtlSendData>
              break;
 800c238:	e006      	b.n	800c248 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800c23a:	683a      	ldr	r2, [r7, #0]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	0011      	movs	r1, r2
 800c240:	0018      	movs	r0, r3
 800c242:	f000 fbaf 	bl	800c9a4 <USBD_CtlError>
              break;
 800c246:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800c248:	e006      	b.n	800c258 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800c24a:	683a      	ldr	r2, [r7, #0]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	0011      	movs	r1, r2
 800c250:	0018      	movs	r0, r3
 800c252:	f000 fba7 	bl	800c9a4 <USBD_CtlError>
          break;
 800c256:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800c258:	e006      	b.n	800c268 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800c25a:	683a      	ldr	r2, [r7, #0]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	0011      	movs	r1, r2
 800c260:	0018      	movs	r0, r3
 800c262:	f000 fb9f 	bl	800c9a4 <USBD_CtlError>
      break;
 800c266:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800c268:	230f      	movs	r3, #15
 800c26a:	18fb      	adds	r3, r7, r3
 800c26c:	781b      	ldrb	r3, [r3, #0]
}
 800c26e:	0018      	movs	r0, r3
 800c270:	46bd      	mov	sp, r7
 800c272:	b004      	add	sp, #16
 800c274:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c278 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c282:	2308      	movs	r3, #8
 800c284:	18fb      	adds	r3, r7, r3
 800c286:	2200      	movs	r2, #0
 800c288:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800c28a:	2300      	movs	r3, #0
 800c28c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c28e:	230b      	movs	r3, #11
 800c290:	18fb      	adds	r3, r7, r3
 800c292:	2200      	movs	r2, #0
 800c294:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	885b      	ldrh	r3, [r3, #2]
 800c29a:	0a1b      	lsrs	r3, r3, #8
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	2b07      	cmp	r3, #7
 800c2a0:	d900      	bls.n	800c2a4 <USBD_GetDescriptor+0x2c>
 800c2a2:	e159      	b.n	800c558 <USBD_GetDescriptor+0x2e0>
 800c2a4:	009a      	lsls	r2, r3, #2
 800c2a6:	4bcb      	ldr	r3, [pc, #812]	; (800c5d4 <USBD_GetDescriptor+0x35c>)
 800c2a8:	18d3      	adds	r3, r2, r3
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	23ac      	movs	r3, #172	; 0xac
 800c2b2:	009b      	lsls	r3, r3, #2
 800c2b4:	58d3      	ldr	r3, [r2, r3]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	7c12      	ldrb	r2, [r2, #16]
 800c2bc:	2108      	movs	r1, #8
 800c2be:	1879      	adds	r1, r7, r1
 800c2c0:	0010      	movs	r0, r2
 800c2c2:	4798      	blx	r3
 800c2c4:	0003      	movs	r3, r0
 800c2c6:	60fb      	str	r3, [r7, #12]
      break;
 800c2c8:	e153      	b.n	800c572 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	7c1b      	ldrb	r3, [r3, #16]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d10f      	bne.n	800c2f2 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	23ad      	movs	r3, #173	; 0xad
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	58d3      	ldr	r3, [r2, r3]
 800c2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2dc:	2208      	movs	r2, #8
 800c2de:	18ba      	adds	r2, r7, r2
 800c2e0:	0010      	movs	r0, r2
 800c2e2:	4798      	blx	r3
 800c2e4:	0003      	movs	r3, r0
 800c2e6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	2202      	movs	r2, #2
 800c2ee:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c2f0:	e13f      	b.n	800c572 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	23ad      	movs	r3, #173	; 0xad
 800c2f6:	009b      	lsls	r3, r3, #2
 800c2f8:	58d3      	ldr	r3, [r2, r3]
 800c2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2fc:	2208      	movs	r2, #8
 800c2fe:	18ba      	adds	r2, r7, r2
 800c300:	0010      	movs	r0, r2
 800c302:	4798      	blx	r3
 800c304:	0003      	movs	r3, r0
 800c306:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	3301      	adds	r3, #1
 800c30c:	2202      	movs	r2, #2
 800c30e:	701a      	strb	r2, [r3, #0]
      break;
 800c310:	e12f      	b.n	800c572 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	885b      	ldrh	r3, [r3, #2]
 800c316:	b2db      	uxtb	r3, r3
 800c318:	2b05      	cmp	r3, #5
 800c31a:	d900      	bls.n	800c31e <USBD_GetDescriptor+0xa6>
 800c31c:	e0d0      	b.n	800c4c0 <USBD_GetDescriptor+0x248>
 800c31e:	009a      	lsls	r2, r3, #2
 800c320:	4bad      	ldr	r3, [pc, #692]	; (800c5d8 <USBD_GetDescriptor+0x360>)
 800c322:	18d3      	adds	r3, r2, r3
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	23ac      	movs	r3, #172	; 0xac
 800c32c:	009b      	lsls	r3, r3, #2
 800c32e:	58d3      	ldr	r3, [r2, r3]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d00d      	beq.n	800c352 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	23ac      	movs	r3, #172	; 0xac
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	58d3      	ldr	r3, [r2, r3]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	7c12      	ldrb	r2, [r2, #16]
 800c344:	2108      	movs	r1, #8
 800c346:	1879      	adds	r1, r7, r1
 800c348:	0010      	movs	r0, r2
 800c34a:	4798      	blx	r3
 800c34c:	0003      	movs	r3, r0
 800c34e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c350:	e0c3      	b.n	800c4da <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c352:	683a      	ldr	r2, [r7, #0]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	0011      	movs	r1, r2
 800c358:	0018      	movs	r0, r3
 800c35a:	f000 fb23 	bl	800c9a4 <USBD_CtlError>
            err++;
 800c35e:	210b      	movs	r1, #11
 800c360:	187b      	adds	r3, r7, r1
 800c362:	781a      	ldrb	r2, [r3, #0]
 800c364:	187b      	adds	r3, r7, r1
 800c366:	3201      	adds	r2, #1
 800c368:	701a      	strb	r2, [r3, #0]
          break;
 800c36a:	e0b6      	b.n	800c4da <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	23ac      	movs	r3, #172	; 0xac
 800c370:	009b      	lsls	r3, r3, #2
 800c372:	58d3      	ldr	r3, [r2, r3]
 800c374:	689b      	ldr	r3, [r3, #8]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d00d      	beq.n	800c396 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	23ac      	movs	r3, #172	; 0xac
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	58d3      	ldr	r3, [r2, r3]
 800c382:	689b      	ldr	r3, [r3, #8]
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	7c12      	ldrb	r2, [r2, #16]
 800c388:	2108      	movs	r1, #8
 800c38a:	1879      	adds	r1, r7, r1
 800c38c:	0010      	movs	r0, r2
 800c38e:	4798      	blx	r3
 800c390:	0003      	movs	r3, r0
 800c392:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c394:	e0a1      	b.n	800c4da <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c396:	683a      	ldr	r2, [r7, #0]
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	0011      	movs	r1, r2
 800c39c:	0018      	movs	r0, r3
 800c39e:	f000 fb01 	bl	800c9a4 <USBD_CtlError>
            err++;
 800c3a2:	210b      	movs	r1, #11
 800c3a4:	187b      	adds	r3, r7, r1
 800c3a6:	781a      	ldrb	r2, [r3, #0]
 800c3a8:	187b      	adds	r3, r7, r1
 800c3aa:	3201      	adds	r2, #1
 800c3ac:	701a      	strb	r2, [r3, #0]
          break;
 800c3ae:	e094      	b.n	800c4da <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	23ac      	movs	r3, #172	; 0xac
 800c3b4:	009b      	lsls	r3, r3, #2
 800c3b6:	58d3      	ldr	r3, [r2, r3]
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d00d      	beq.n	800c3da <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	23ac      	movs	r3, #172	; 0xac
 800c3c2:	009b      	lsls	r3, r3, #2
 800c3c4:	58d3      	ldr	r3, [r2, r3]
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	7c12      	ldrb	r2, [r2, #16]
 800c3cc:	2108      	movs	r1, #8
 800c3ce:	1879      	adds	r1, r7, r1
 800c3d0:	0010      	movs	r0, r2
 800c3d2:	4798      	blx	r3
 800c3d4:	0003      	movs	r3, r0
 800c3d6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3d8:	e07f      	b.n	800c4da <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c3da:	683a      	ldr	r2, [r7, #0]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	0011      	movs	r1, r2
 800c3e0:	0018      	movs	r0, r3
 800c3e2:	f000 fadf 	bl	800c9a4 <USBD_CtlError>
            err++;
 800c3e6:	210b      	movs	r1, #11
 800c3e8:	187b      	adds	r3, r7, r1
 800c3ea:	781a      	ldrb	r2, [r3, #0]
 800c3ec:	187b      	adds	r3, r7, r1
 800c3ee:	3201      	adds	r2, #1
 800c3f0:	701a      	strb	r2, [r3, #0]
          break;
 800c3f2:	e072      	b.n	800c4da <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	23ac      	movs	r3, #172	; 0xac
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	58d3      	ldr	r3, [r2, r3]
 800c3fc:	691b      	ldr	r3, [r3, #16]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d00d      	beq.n	800c41e <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	23ac      	movs	r3, #172	; 0xac
 800c406:	009b      	lsls	r3, r3, #2
 800c408:	58d3      	ldr	r3, [r2, r3]
 800c40a:	691b      	ldr	r3, [r3, #16]
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	7c12      	ldrb	r2, [r2, #16]
 800c410:	2108      	movs	r1, #8
 800c412:	1879      	adds	r1, r7, r1
 800c414:	0010      	movs	r0, r2
 800c416:	4798      	blx	r3
 800c418:	0003      	movs	r3, r0
 800c41a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c41c:	e05d      	b.n	800c4da <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c41e:	683a      	ldr	r2, [r7, #0]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	0011      	movs	r1, r2
 800c424:	0018      	movs	r0, r3
 800c426:	f000 fabd 	bl	800c9a4 <USBD_CtlError>
            err++;
 800c42a:	210b      	movs	r1, #11
 800c42c:	187b      	adds	r3, r7, r1
 800c42e:	781a      	ldrb	r2, [r3, #0]
 800c430:	187b      	adds	r3, r7, r1
 800c432:	3201      	adds	r2, #1
 800c434:	701a      	strb	r2, [r3, #0]
          break;
 800c436:	e050      	b.n	800c4da <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c438:	687a      	ldr	r2, [r7, #4]
 800c43a:	23ac      	movs	r3, #172	; 0xac
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	58d3      	ldr	r3, [r2, r3]
 800c440:	695b      	ldr	r3, [r3, #20]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d00d      	beq.n	800c462 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c446:	687a      	ldr	r2, [r7, #4]
 800c448:	23ac      	movs	r3, #172	; 0xac
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	58d3      	ldr	r3, [r2, r3]
 800c44e:	695b      	ldr	r3, [r3, #20]
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	7c12      	ldrb	r2, [r2, #16]
 800c454:	2108      	movs	r1, #8
 800c456:	1879      	adds	r1, r7, r1
 800c458:	0010      	movs	r0, r2
 800c45a:	4798      	blx	r3
 800c45c:	0003      	movs	r3, r0
 800c45e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c460:	e03b      	b.n	800c4da <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c462:	683a      	ldr	r2, [r7, #0]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	0011      	movs	r1, r2
 800c468:	0018      	movs	r0, r3
 800c46a:	f000 fa9b 	bl	800c9a4 <USBD_CtlError>
            err++;
 800c46e:	210b      	movs	r1, #11
 800c470:	187b      	adds	r3, r7, r1
 800c472:	781a      	ldrb	r2, [r3, #0]
 800c474:	187b      	adds	r3, r7, r1
 800c476:	3201      	adds	r2, #1
 800c478:	701a      	strb	r2, [r3, #0]
          break;
 800c47a:	e02e      	b.n	800c4da <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	23ac      	movs	r3, #172	; 0xac
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	58d3      	ldr	r3, [r2, r3]
 800c484:	699b      	ldr	r3, [r3, #24]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d00d      	beq.n	800c4a6 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	23ac      	movs	r3, #172	; 0xac
 800c48e:	009b      	lsls	r3, r3, #2
 800c490:	58d3      	ldr	r3, [r2, r3]
 800c492:	699b      	ldr	r3, [r3, #24]
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	7c12      	ldrb	r2, [r2, #16]
 800c498:	2108      	movs	r1, #8
 800c49a:	1879      	adds	r1, r7, r1
 800c49c:	0010      	movs	r0, r2
 800c49e:	4798      	blx	r3
 800c4a0:	0003      	movs	r3, r0
 800c4a2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4a4:	e019      	b.n	800c4da <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c4a6:	683a      	ldr	r2, [r7, #0]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	0011      	movs	r1, r2
 800c4ac:	0018      	movs	r0, r3
 800c4ae:	f000 fa79 	bl	800c9a4 <USBD_CtlError>
            err++;
 800c4b2:	210b      	movs	r1, #11
 800c4b4:	187b      	adds	r3, r7, r1
 800c4b6:	781a      	ldrb	r2, [r3, #0]
 800c4b8:	187b      	adds	r3, r7, r1
 800c4ba:	3201      	adds	r2, #1
 800c4bc:	701a      	strb	r2, [r3, #0]
          break;
 800c4be:	e00c      	b.n	800c4da <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c4c0:	683a      	ldr	r2, [r7, #0]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	0011      	movs	r1, r2
 800c4c6:	0018      	movs	r0, r3
 800c4c8:	f000 fa6c 	bl	800c9a4 <USBD_CtlError>
          err++;
 800c4cc:	210b      	movs	r1, #11
 800c4ce:	187b      	adds	r3, r7, r1
 800c4d0:	781a      	ldrb	r2, [r3, #0]
 800c4d2:	187b      	adds	r3, r7, r1
 800c4d4:	3201      	adds	r2, #1
 800c4d6:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800c4d8:	e04b      	b.n	800c572 <USBD_GetDescriptor+0x2fa>
 800c4da:	e04a      	b.n	800c572 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	7c1b      	ldrb	r3, [r3, #16]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d10b      	bne.n	800c4fc <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	23ad      	movs	r3, #173	; 0xad
 800c4e8:	009b      	lsls	r3, r3, #2
 800c4ea:	58d3      	ldr	r3, [r2, r3]
 800c4ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4ee:	2208      	movs	r2, #8
 800c4f0:	18ba      	adds	r2, r7, r2
 800c4f2:	0010      	movs	r0, r2
 800c4f4:	4798      	blx	r3
 800c4f6:	0003      	movs	r3, r0
 800c4f8:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4fa:	e03a      	b.n	800c572 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800c4fc:	683a      	ldr	r2, [r7, #0]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	0011      	movs	r1, r2
 800c502:	0018      	movs	r0, r3
 800c504:	f000 fa4e 	bl	800c9a4 <USBD_CtlError>
        err++;
 800c508:	210b      	movs	r1, #11
 800c50a:	187b      	adds	r3, r7, r1
 800c50c:	781a      	ldrb	r2, [r3, #0]
 800c50e:	187b      	adds	r3, r7, r1
 800c510:	3201      	adds	r2, #1
 800c512:	701a      	strb	r2, [r3, #0]
      break;
 800c514:	e02d      	b.n	800c572 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	7c1b      	ldrb	r3, [r3, #16]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d10f      	bne.n	800c53e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	23ad      	movs	r3, #173	; 0xad
 800c522:	009b      	lsls	r3, r3, #2
 800c524:	58d3      	ldr	r3, [r2, r3]
 800c526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c528:	2208      	movs	r2, #8
 800c52a:	18ba      	adds	r2, r7, r2
 800c52c:	0010      	movs	r0, r2
 800c52e:	4798      	blx	r3
 800c530:	0003      	movs	r3, r0
 800c532:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	3301      	adds	r3, #1
 800c538:	2207      	movs	r2, #7
 800c53a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c53c:	e019      	b.n	800c572 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800c53e:	683a      	ldr	r2, [r7, #0]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	0011      	movs	r1, r2
 800c544:	0018      	movs	r0, r3
 800c546:	f000 fa2d 	bl	800c9a4 <USBD_CtlError>
        err++;
 800c54a:	210b      	movs	r1, #11
 800c54c:	187b      	adds	r3, r7, r1
 800c54e:	781a      	ldrb	r2, [r3, #0]
 800c550:	187b      	adds	r3, r7, r1
 800c552:	3201      	adds	r2, #1
 800c554:	701a      	strb	r2, [r3, #0]
      break;
 800c556:	e00c      	b.n	800c572 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800c558:	683a      	ldr	r2, [r7, #0]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	0011      	movs	r1, r2
 800c55e:	0018      	movs	r0, r3
 800c560:	f000 fa20 	bl	800c9a4 <USBD_CtlError>
      err++;
 800c564:	210b      	movs	r1, #11
 800c566:	187b      	adds	r3, r7, r1
 800c568:	781a      	ldrb	r2, [r3, #0]
 800c56a:	187b      	adds	r3, r7, r1
 800c56c:	3201      	adds	r2, #1
 800c56e:	701a      	strb	r2, [r3, #0]
      break;
 800c570:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800c572:	230b      	movs	r3, #11
 800c574:	18fb      	adds	r3, r7, r3
 800c576:	781b      	ldrb	r3, [r3, #0]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d127      	bne.n	800c5cc <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c57c:	2108      	movs	r1, #8
 800c57e:	187b      	adds	r3, r7, r1
 800c580:	881b      	ldrh	r3, [r3, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d019      	beq.n	800c5ba <USBD_GetDescriptor+0x342>
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	88db      	ldrh	r3, [r3, #6]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d015      	beq.n	800c5ba <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	88da      	ldrh	r2, [r3, #6]
 800c592:	187b      	adds	r3, r7, r1
 800c594:	881b      	ldrh	r3, [r3, #0]
 800c596:	1c18      	adds	r0, r3, #0
 800c598:	1c11      	adds	r1, r2, #0
 800c59a:	b28a      	uxth	r2, r1
 800c59c:	b283      	uxth	r3, r0
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d900      	bls.n	800c5a4 <USBD_GetDescriptor+0x32c>
 800c5a2:	1c01      	adds	r1, r0, #0
 800c5a4:	b28a      	uxth	r2, r1
 800c5a6:	2108      	movs	r1, #8
 800c5a8:	187b      	adds	r3, r7, r1
 800c5aa:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c5ac:	187b      	adds	r3, r7, r1
 800c5ae:	881a      	ldrh	r2, [r3, #0]
 800c5b0:	68f9      	ldr	r1, [r7, #12]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	0018      	movs	r0, r3
 800c5b6:	f000 fa73 	bl	800caa0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	88db      	ldrh	r3, [r3, #6]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d105      	bne.n	800c5ce <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	0018      	movs	r0, r3
 800c5c6:	f000 fad5 	bl	800cb74 <USBD_CtlSendStatus>
 800c5ca:	e000      	b.n	800c5ce <USBD_GetDescriptor+0x356>
    return;
 800c5cc:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	b004      	add	sp, #16
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	0800e280 	.word	0x0800e280
 800c5d8:	0800e2a0 	.word	0x0800e2a0

0800c5dc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c5dc:	b590      	push	{r4, r7, lr}
 800c5de:	b085      	sub	sp, #20
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	889b      	ldrh	r3, [r3, #4]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d13d      	bne.n	800c66a <USBD_SetAddress+0x8e>
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	88db      	ldrh	r3, [r3, #6]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d139      	bne.n	800c66a <USBD_SetAddress+0x8e>
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	885b      	ldrh	r3, [r3, #2]
 800c5fa:	2b7f      	cmp	r3, #127	; 0x7f
 800c5fc:	d835      	bhi.n	800c66a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	885b      	ldrh	r3, [r3, #2]
 800c602:	b2da      	uxtb	r2, r3
 800c604:	230f      	movs	r3, #15
 800c606:	18fb      	adds	r3, r7, r3
 800c608:	217f      	movs	r1, #127	; 0x7f
 800c60a:	400a      	ands	r2, r1
 800c60c:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	23a7      	movs	r3, #167	; 0xa7
 800c612:	009b      	lsls	r3, r3, #2
 800c614:	5cd3      	ldrb	r3, [r2, r3]
 800c616:	2b03      	cmp	r3, #3
 800c618:	d106      	bne.n	800c628 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800c61a:	683a      	ldr	r2, [r7, #0]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	0011      	movs	r1, r2
 800c620:	0018      	movs	r0, r3
 800c622:	f000 f9bf 	bl	800c9a4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c626:	e027      	b.n	800c678 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	240f      	movs	r4, #15
 800c62c:	193a      	adds	r2, r7, r4
 800c62e:	4914      	ldr	r1, [pc, #80]	; (800c680 <USBD_SetAddress+0xa4>)
 800c630:	7812      	ldrb	r2, [r2, #0]
 800c632:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c634:	193b      	adds	r3, r7, r4
 800c636:	781a      	ldrb	r2, [r3, #0]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	0011      	movs	r1, r2
 800c63c:	0018      	movs	r0, r3
 800c63e:	f000 ff25 	bl	800d48c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	0018      	movs	r0, r3
 800c646:	f000 fa95 	bl	800cb74 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c64a:	193b      	adds	r3, r7, r4
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d005      	beq.n	800c65e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	23a7      	movs	r3, #167	; 0xa7
 800c656:	009b      	lsls	r3, r3, #2
 800c658:	2102      	movs	r1, #2
 800c65a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c65c:	e00c      	b.n	800c678 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	23a7      	movs	r3, #167	; 0xa7
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	2101      	movs	r1, #1
 800c666:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c668:	e006      	b.n	800c678 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c66a:	683a      	ldr	r2, [r7, #0]
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	0011      	movs	r1, r2
 800c670:	0018      	movs	r0, r3
 800c672:	f000 f997 	bl	800c9a4 <USBD_CtlError>
  }
}
 800c676:	46c0      	nop			; (mov r8, r8)
 800c678:	46c0      	nop			; (mov r8, r8)
 800c67a:	46bd      	mov	sp, r7
 800c67c:	b005      	add	sp, #20
 800c67e:	bd90      	pop	{r4, r7, pc}
 800c680:	0000029e 	.word	0x0000029e

0800c684 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	885b      	ldrh	r3, [r3, #2]
 800c692:	b2da      	uxtb	r2, r3
 800c694:	4b4c      	ldr	r3, [pc, #304]	; (800c7c8 <USBD_SetConfig+0x144>)
 800c696:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c698:	4b4b      	ldr	r3, [pc, #300]	; (800c7c8 <USBD_SetConfig+0x144>)
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d906      	bls.n	800c6ae <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800c6a0:	683a      	ldr	r2, [r7, #0]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	0011      	movs	r1, r2
 800c6a6:	0018      	movs	r0, r3
 800c6a8:	f000 f97c 	bl	800c9a4 <USBD_CtlError>
 800c6ac:	e088      	b.n	800c7c0 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	23a7      	movs	r3, #167	; 0xa7
 800c6b2:	009b      	lsls	r3, r3, #2
 800c6b4:	5cd3      	ldrb	r3, [r2, r3]
 800c6b6:	2b02      	cmp	r3, #2
 800c6b8:	d002      	beq.n	800c6c0 <USBD_SetConfig+0x3c>
 800c6ba:	2b03      	cmp	r3, #3
 800c6bc:	d029      	beq.n	800c712 <USBD_SetConfig+0x8e>
 800c6be:	e071      	b.n	800c7a4 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c6c0:	4b41      	ldr	r3, [pc, #260]	; (800c7c8 <USBD_SetConfig+0x144>)
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d01f      	beq.n	800c708 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800c6c8:	4b3f      	ldr	r3, [pc, #252]	; (800c7c8 <USBD_SetConfig+0x144>)
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	001a      	movs	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	23a7      	movs	r3, #167	; 0xa7
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	2103      	movs	r1, #3
 800c6da:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c6dc:	4b3a      	ldr	r3, [pc, #232]	; (800c7c8 <USBD_SetConfig+0x144>)
 800c6de:	781a      	ldrb	r2, [r3, #0]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	0011      	movs	r1, r2
 800c6e4:	0018      	movs	r0, r3
 800c6e6:	f7ff f8c6 	bl	800b876 <USBD_SetClassConfig>
 800c6ea:	0003      	movs	r3, r0
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	d106      	bne.n	800c6fe <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800c6f0:	683a      	ldr	r2, [r7, #0]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	0011      	movs	r1, r2
 800c6f6:	0018      	movs	r0, r3
 800c6f8:	f000 f954 	bl	800c9a4 <USBD_CtlError>
            return;
 800c6fc:	e060      	b.n	800c7c0 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	0018      	movs	r0, r3
 800c702:	f000 fa37 	bl	800cb74 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c706:	e05b      	b.n	800c7c0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	0018      	movs	r0, r3
 800c70c:	f000 fa32 	bl	800cb74 <USBD_CtlSendStatus>
        break;
 800c710:	e056      	b.n	800c7c0 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c712:	4b2d      	ldr	r3, [pc, #180]	; (800c7c8 <USBD_SetConfig+0x144>)
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d115      	bne.n	800c746 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	23a7      	movs	r3, #167	; 0xa7
 800c71e:	009b      	lsls	r3, r3, #2
 800c720:	2102      	movs	r1, #2
 800c722:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800c724:	4b28      	ldr	r3, [pc, #160]	; (800c7c8 <USBD_SetConfig+0x144>)
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	001a      	movs	r2, r3
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c72e:	4b26      	ldr	r3, [pc, #152]	; (800c7c8 <USBD_SetConfig+0x144>)
 800c730:	781a      	ldrb	r2, [r3, #0]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	0011      	movs	r1, r2
 800c736:	0018      	movs	r0, r3
 800c738:	f7ff f8c4 	bl	800b8c4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	0018      	movs	r0, r3
 800c740:	f000 fa18 	bl	800cb74 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c744:	e03c      	b.n	800c7c0 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800c746:	4b20      	ldr	r3, [pc, #128]	; (800c7c8 <USBD_SetConfig+0x144>)
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	001a      	movs	r2, r3
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	429a      	cmp	r2, r3
 800c752:	d022      	beq.n	800c79a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	b2da      	uxtb	r2, r3
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	0011      	movs	r1, r2
 800c75e:	0018      	movs	r0, r3
 800c760:	f7ff f8b0 	bl	800b8c4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c764:	4b18      	ldr	r3, [pc, #96]	; (800c7c8 <USBD_SetConfig+0x144>)
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	001a      	movs	r2, r3
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c76e:	4b16      	ldr	r3, [pc, #88]	; (800c7c8 <USBD_SetConfig+0x144>)
 800c770:	781a      	ldrb	r2, [r3, #0]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	0011      	movs	r1, r2
 800c776:	0018      	movs	r0, r3
 800c778:	f7ff f87d 	bl	800b876 <USBD_SetClassConfig>
 800c77c:	0003      	movs	r3, r0
 800c77e:	2b02      	cmp	r3, #2
 800c780:	d106      	bne.n	800c790 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800c782:	683a      	ldr	r2, [r7, #0]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	0011      	movs	r1, r2
 800c788:	0018      	movs	r0, r3
 800c78a:	f000 f90b 	bl	800c9a4 <USBD_CtlError>
            return;
 800c78e:	e017      	b.n	800c7c0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	0018      	movs	r0, r3
 800c794:	f000 f9ee 	bl	800cb74 <USBD_CtlSendStatus>
        break;
 800c798:	e012      	b.n	800c7c0 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	0018      	movs	r0, r3
 800c79e:	f000 f9e9 	bl	800cb74 <USBD_CtlSendStatus>
        break;
 800c7a2:	e00d      	b.n	800c7c0 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800c7a4:	683a      	ldr	r2, [r7, #0]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	0011      	movs	r1, r2
 800c7aa:	0018      	movs	r0, r3
 800c7ac:	f000 f8fa 	bl	800c9a4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c7b0:	4b05      	ldr	r3, [pc, #20]	; (800c7c8 <USBD_SetConfig+0x144>)
 800c7b2:	781a      	ldrb	r2, [r3, #0]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	0011      	movs	r1, r2
 800c7b8:	0018      	movs	r0, r3
 800c7ba:	f7ff f883 	bl	800b8c4 <USBD_ClrClassConfig>
        break;
 800c7be:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	b002      	add	sp, #8
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	46c0      	nop			; (mov r8, r8)
 800c7c8:	2000041c 	.word	0x2000041c

0800c7cc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	88db      	ldrh	r3, [r3, #6]
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d006      	beq.n	800c7ec <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800c7de:	683a      	ldr	r2, [r7, #0]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	0011      	movs	r1, r2
 800c7e4:	0018      	movs	r0, r3
 800c7e6:	f000 f8dd 	bl	800c9a4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7ea:	e026      	b.n	800c83a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	23a7      	movs	r3, #167	; 0xa7
 800c7f0:	009b      	lsls	r3, r3, #2
 800c7f2:	5cd3      	ldrb	r3, [r2, r3]
 800c7f4:	2b02      	cmp	r3, #2
 800c7f6:	dc02      	bgt.n	800c7fe <USBD_GetConfig+0x32>
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	dc03      	bgt.n	800c804 <USBD_GetConfig+0x38>
 800c7fc:	e016      	b.n	800c82c <USBD_GetConfig+0x60>
 800c7fe:	2b03      	cmp	r3, #3
 800c800:	d00c      	beq.n	800c81c <USBD_GetConfig+0x50>
 800c802:	e013      	b.n	800c82c <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	3308      	adds	r3, #8
 800c80e:	0019      	movs	r1, r3
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2201      	movs	r2, #1
 800c814:	0018      	movs	r0, r3
 800c816:	f000 f943 	bl	800caa0 <USBD_CtlSendData>
        break;
 800c81a:	e00e      	b.n	800c83a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	1d19      	adds	r1, r3, #4
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2201      	movs	r2, #1
 800c824:	0018      	movs	r0, r3
 800c826:	f000 f93b 	bl	800caa0 <USBD_CtlSendData>
        break;
 800c82a:	e006      	b.n	800c83a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800c82c:	683a      	ldr	r2, [r7, #0]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	0011      	movs	r1, r2
 800c832:	0018      	movs	r0, r3
 800c834:	f000 f8b6 	bl	800c9a4 <USBD_CtlError>
        break;
 800c838:	46c0      	nop			; (mov r8, r8)
}
 800c83a:	46c0      	nop			; (mov r8, r8)
 800c83c:	46bd      	mov	sp, r7
 800c83e:	b002      	add	sp, #8
 800c840:	bd80      	pop	{r7, pc}

0800c842 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c842:	b580      	push	{r7, lr}
 800c844:	b082      	sub	sp, #8
 800c846:	af00      	add	r7, sp, #0
 800c848:	6078      	str	r0, [r7, #4]
 800c84a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c84c:	687a      	ldr	r2, [r7, #4]
 800c84e:	23a7      	movs	r3, #167	; 0xa7
 800c850:	009b      	lsls	r3, r3, #2
 800c852:	5cd3      	ldrb	r3, [r2, r3]
 800c854:	3b01      	subs	r3, #1
 800c856:	2b02      	cmp	r3, #2
 800c858:	d822      	bhi.n	800c8a0 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	88db      	ldrh	r3, [r3, #6]
 800c85e:	2b02      	cmp	r3, #2
 800c860:	d006      	beq.n	800c870 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800c862:	683a      	ldr	r2, [r7, #0]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	0011      	movs	r1, r2
 800c868:	0018      	movs	r0, r3
 800c86a:	f000 f89b 	bl	800c9a4 <USBD_CtlError>
        break;
 800c86e:	e01e      	b.n	800c8ae <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2201      	movs	r2, #1
 800c874:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c876:	687a      	ldr	r2, [r7, #4]
 800c878:	23a9      	movs	r3, #169	; 0xa9
 800c87a:	009b      	lsls	r3, r3, #2
 800c87c:	58d3      	ldr	r3, [r2, r3]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d005      	beq.n	800c88e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	2202      	movs	r2, #2
 800c888:	431a      	orrs	r2, r3
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	330c      	adds	r3, #12
 800c892:	0019      	movs	r1, r3
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2202      	movs	r2, #2
 800c898:	0018      	movs	r0, r3
 800c89a:	f000 f901 	bl	800caa0 <USBD_CtlSendData>
      break;
 800c89e:	e006      	b.n	800c8ae <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800c8a0:	683a      	ldr	r2, [r7, #0]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	0011      	movs	r1, r2
 800c8a6:	0018      	movs	r0, r3
 800c8a8:	f000 f87c 	bl	800c9a4 <USBD_CtlError>
      break;
 800c8ac:	46c0      	nop			; (mov r8, r8)
  }
}
 800c8ae:	46c0      	nop			; (mov r8, r8)
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	b002      	add	sp, #8
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c8b6:	b580      	push	{r7, lr}
 800c8b8:	b082      	sub	sp, #8
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
 800c8be:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	885b      	ldrh	r3, [r3, #2]
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	d108      	bne.n	800c8da <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	23a9      	movs	r3, #169	; 0xa9
 800c8cc:	009b      	lsls	r3, r3, #2
 800c8ce:	2101      	movs	r1, #1
 800c8d0:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	0018      	movs	r0, r3
 800c8d6:	f000 f94d 	bl	800cb74 <USBD_CtlSendStatus>
  }
}
 800c8da:	46c0      	nop			; (mov r8, r8)
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	b002      	add	sp, #8
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c8e2:	b580      	push	{r7, lr}
 800c8e4:	b082      	sub	sp, #8
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
 800c8ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	23a7      	movs	r3, #167	; 0xa7
 800c8f0:	009b      	lsls	r3, r3, #2
 800c8f2:	5cd3      	ldrb	r3, [r2, r3]
 800c8f4:	3b01      	subs	r3, #1
 800c8f6:	2b02      	cmp	r3, #2
 800c8f8:	d80d      	bhi.n	800c916 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	885b      	ldrh	r3, [r3, #2]
 800c8fe:	2b01      	cmp	r3, #1
 800c900:	d110      	bne.n	800c924 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	23a9      	movs	r3, #169	; 0xa9
 800c906:	009b      	lsls	r3, r3, #2
 800c908:	2100      	movs	r1, #0
 800c90a:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	0018      	movs	r0, r3
 800c910:	f000 f930 	bl	800cb74 <USBD_CtlSendStatus>
      }
      break;
 800c914:	e006      	b.n	800c924 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800c916:	683a      	ldr	r2, [r7, #0]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	0011      	movs	r1, r2
 800c91c:	0018      	movs	r0, r3
 800c91e:	f000 f841 	bl	800c9a4 <USBD_CtlError>
      break;
 800c922:	e000      	b.n	800c926 <USBD_ClrFeature+0x44>
      break;
 800c924:	46c0      	nop			; (mov r8, r8)
  }
}
 800c926:	46c0      	nop			; (mov r8, r8)
 800c928:	46bd      	mov	sp, r7
 800c92a:	b002      	add	sp, #8
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c92e:	b580      	push	{r7, lr}
 800c930:	b082      	sub	sp, #8
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
 800c936:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	781a      	ldrb	r2, [r3, #0]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	785a      	ldrb	r2, [r3, #1]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	3302      	adds	r3, #2
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	b29a      	uxth	r2, r3
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	3303      	adds	r3, #3
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	b29b      	uxth	r3, r3
 800c958:	021b      	lsls	r3, r3, #8
 800c95a:	b29b      	uxth	r3, r3
 800c95c:	18d3      	adds	r3, r2, r3
 800c95e:	b29a      	uxth	r2, r3
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	3304      	adds	r3, #4
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	b29a      	uxth	r2, r3
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	3305      	adds	r3, #5
 800c970:	781b      	ldrb	r3, [r3, #0]
 800c972:	b29b      	uxth	r3, r3
 800c974:	021b      	lsls	r3, r3, #8
 800c976:	b29b      	uxth	r3, r3
 800c978:	18d3      	adds	r3, r2, r3
 800c97a:	b29a      	uxth	r2, r3
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	3306      	adds	r3, #6
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	b29a      	uxth	r2, r3
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	3307      	adds	r3, #7
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	b29b      	uxth	r3, r3
 800c990:	021b      	lsls	r3, r3, #8
 800c992:	b29b      	uxth	r3, r3
 800c994:	18d3      	adds	r3, r2, r3
 800c996:	b29a      	uxth	r2, r3
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	80da      	strh	r2, [r3, #6]

}
 800c99c:	46c0      	nop			; (mov r8, r8)
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	b002      	add	sp, #8
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b082      	sub	sp, #8
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2180      	movs	r1, #128	; 0x80
 800c9b2:	0018      	movs	r0, r3
 800c9b4:	f000 fce3 	bl	800d37e <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2100      	movs	r1, #0
 800c9bc:	0018      	movs	r0, r3
 800c9be:	f000 fcde 	bl	800d37e <USBD_LL_StallEP>
}
 800c9c2:	46c0      	nop			; (mov r8, r8)
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	b002      	add	sp, #8
 800c9c8:	bd80      	pop	{r7, pc}

0800c9ca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9ca:	b590      	push	{r4, r7, lr}
 800c9cc:	b087      	sub	sp, #28
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	60f8      	str	r0, [r7, #12]
 800c9d2:	60b9      	str	r1, [r7, #8]
 800c9d4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c9d6:	2417      	movs	r4, #23
 800c9d8:	193b      	adds	r3, r7, r4
 800c9da:	2200      	movs	r2, #0
 800c9dc:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d03c      	beq.n	800ca5e <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	0018      	movs	r0, r3
 800c9e8:	f000 f83d 	bl	800ca66 <USBD_GetLen>
 800c9ec:	0003      	movs	r3, r0
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	18db      	adds	r3, r3, r3
 800c9f4:	b29a      	uxth	r2, r3
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c9fa:	193b      	adds	r3, r7, r4
 800c9fc:	781b      	ldrb	r3, [r3, #0]
 800c9fe:	193a      	adds	r2, r7, r4
 800ca00:	1c59      	adds	r1, r3, #1
 800ca02:	7011      	strb	r1, [r2, #0]
 800ca04:	001a      	movs	r2, r3
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	189b      	adds	r3, r3, r2
 800ca0a:	687a      	ldr	r2, [r7, #4]
 800ca0c:	7812      	ldrb	r2, [r2, #0]
 800ca0e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ca10:	193b      	adds	r3, r7, r4
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	193a      	adds	r2, r7, r4
 800ca16:	1c59      	adds	r1, r3, #1
 800ca18:	7011      	strb	r1, [r2, #0]
 800ca1a:	001a      	movs	r2, r3
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	189b      	adds	r3, r3, r2
 800ca20:	2203      	movs	r2, #3
 800ca22:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ca24:	e017      	b.n	800ca56 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	1c5a      	adds	r2, r3, #1
 800ca2a:	60fa      	str	r2, [r7, #12]
 800ca2c:	2417      	movs	r4, #23
 800ca2e:	193a      	adds	r2, r7, r4
 800ca30:	7812      	ldrb	r2, [r2, #0]
 800ca32:	1939      	adds	r1, r7, r4
 800ca34:	1c50      	adds	r0, r2, #1
 800ca36:	7008      	strb	r0, [r1, #0]
 800ca38:	0011      	movs	r1, r2
 800ca3a:	68ba      	ldr	r2, [r7, #8]
 800ca3c:	1852      	adds	r2, r2, r1
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ca42:	193b      	adds	r3, r7, r4
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	193a      	adds	r2, r7, r4
 800ca48:	1c59      	adds	r1, r3, #1
 800ca4a:	7011      	strb	r1, [r2, #0]
 800ca4c:	001a      	movs	r2, r3
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	189b      	adds	r3, r3, r2
 800ca52:	2200      	movs	r2, #0
 800ca54:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d1e3      	bne.n	800ca26 <USBD_GetString+0x5c>
    }
  }
}
 800ca5e:	46c0      	nop			; (mov r8, r8)
 800ca60:	46bd      	mov	sp, r7
 800ca62:	b007      	add	sp, #28
 800ca64:	bd90      	pop	{r4, r7, pc}

0800ca66 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca66:	b580      	push	{r7, lr}
 800ca68:	b084      	sub	sp, #16
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca6e:	230f      	movs	r3, #15
 800ca70:	18fb      	adds	r3, r7, r3
 800ca72:	2200      	movs	r2, #0
 800ca74:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800ca76:	e008      	b.n	800ca8a <USBD_GetLen+0x24>
  {
    len++;
 800ca78:	210f      	movs	r1, #15
 800ca7a:	187b      	adds	r3, r7, r1
 800ca7c:	781a      	ldrb	r2, [r3, #0]
 800ca7e:	187b      	adds	r3, r7, r1
 800ca80:	3201      	adds	r2, #1
 800ca82:	701a      	strb	r2, [r3, #0]
    buf++;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	3301      	adds	r3, #1
 800ca88:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d1f2      	bne.n	800ca78 <USBD_GetLen+0x12>
  }

  return len;
 800ca92:	230f      	movs	r3, #15
 800ca94:	18fb      	adds	r3, r7, r3
 800ca96:	781b      	ldrb	r3, [r3, #0]
}
 800ca98:	0018      	movs	r0, r3
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	b004      	add	sp, #16
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	60b9      	str	r1, [r7, #8]
 800caaa:	1dbb      	adds	r3, r7, #6
 800caac:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800caae:	68fa      	ldr	r2, [r7, #12]
 800cab0:	23a5      	movs	r3, #165	; 0xa5
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	2102      	movs	r1, #2
 800cab6:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800cab8:	1dbb      	adds	r3, r7, #6
 800caba:	881a      	ldrh	r2, [r3, #0]
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800cac0:	1dbb      	adds	r3, r7, #6
 800cac2:	881a      	ldrh	r2, [r3, #0]
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cac8:	1dbb      	adds	r3, r7, #6
 800caca:	881b      	ldrh	r3, [r3, #0]
 800cacc:	68ba      	ldr	r2, [r7, #8]
 800cace:	68f8      	ldr	r0, [r7, #12]
 800cad0:	2100      	movs	r1, #0
 800cad2:	f000 fd06 	bl	800d4e2 <USBD_LL_Transmit>

  return USBD_OK;
 800cad6:	2300      	movs	r3, #0
}
 800cad8:	0018      	movs	r0, r3
 800cada:	46bd      	mov	sp, r7
 800cadc:	b004      	add	sp, #16
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	1dbb      	adds	r3, r7, #6
 800caec:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800caee:	1dbb      	adds	r3, r7, #6
 800caf0:	881b      	ldrh	r3, [r3, #0]
 800caf2:	68ba      	ldr	r2, [r7, #8]
 800caf4:	68f8      	ldr	r0, [r7, #12]
 800caf6:	2100      	movs	r1, #0
 800caf8:	f000 fcf3 	bl	800d4e2 <USBD_LL_Transmit>

  return USBD_OK;
 800cafc:	2300      	movs	r3, #0
}
 800cafe:	0018      	movs	r0, r3
 800cb00:	46bd      	mov	sp, r7
 800cb02:	b004      	add	sp, #16
 800cb04:	bd80      	pop	{r7, pc}

0800cb06 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b084      	sub	sp, #16
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	60f8      	str	r0, [r7, #12]
 800cb0e:	60b9      	str	r1, [r7, #8]
 800cb10:	1dbb      	adds	r3, r7, #6
 800cb12:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cb14:	68fa      	ldr	r2, [r7, #12]
 800cb16:	23a5      	movs	r3, #165	; 0xa5
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	2103      	movs	r1, #3
 800cb1c:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800cb1e:	1dbb      	adds	r3, r7, #6
 800cb20:	8819      	ldrh	r1, [r3, #0]
 800cb22:	68fa      	ldr	r2, [r7, #12]
 800cb24:	23ae      	movs	r3, #174	; 0xae
 800cb26:	005b      	lsls	r3, r3, #1
 800cb28:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800cb2a:	1dbb      	adds	r3, r7, #6
 800cb2c:	8819      	ldrh	r1, [r3, #0]
 800cb2e:	68fa      	ldr	r2, [r7, #12]
 800cb30:	23b0      	movs	r3, #176	; 0xb0
 800cb32:	005b      	lsls	r3, r3, #1
 800cb34:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb36:	1dbb      	adds	r3, r7, #6
 800cb38:	881b      	ldrh	r3, [r3, #0]
 800cb3a:	68ba      	ldr	r2, [r7, #8]
 800cb3c:	68f8      	ldr	r0, [r7, #12]
 800cb3e:	2100      	movs	r1, #0
 800cb40:	f000 fd06 	bl	800d550 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb44:	2300      	movs	r3, #0
}
 800cb46:	0018      	movs	r0, r3
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	b004      	add	sp, #16
 800cb4c:	bd80      	pop	{r7, pc}

0800cb4e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b084      	sub	sp, #16
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	60f8      	str	r0, [r7, #12]
 800cb56:	60b9      	str	r1, [r7, #8]
 800cb58:	1dbb      	adds	r3, r7, #6
 800cb5a:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb5c:	1dbb      	adds	r3, r7, #6
 800cb5e:	881b      	ldrh	r3, [r3, #0]
 800cb60:	68ba      	ldr	r2, [r7, #8]
 800cb62:	68f8      	ldr	r0, [r7, #12]
 800cb64:	2100      	movs	r1, #0
 800cb66:	f000 fcf3 	bl	800d550 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb6a:	2300      	movs	r3, #0
}
 800cb6c:	0018      	movs	r0, r3
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	b004      	add	sp, #16
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b082      	sub	sp, #8
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	23a5      	movs	r3, #165	; 0xa5
 800cb80:	009b      	lsls	r3, r3, #2
 800cb82:	2104      	movs	r1, #4
 800cb84:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	2300      	movs	r3, #0
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	2100      	movs	r1, #0
 800cb8e:	f000 fca8 	bl	800d4e2 <USBD_LL_Transmit>

  return USBD_OK;
 800cb92:	2300      	movs	r3, #0
}
 800cb94:	0018      	movs	r0, r3
 800cb96:	46bd      	mov	sp, r7
 800cb98:	b002      	add	sp, #8
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cba4:	687a      	ldr	r2, [r7, #4]
 800cba6:	23a5      	movs	r3, #165	; 0xa5
 800cba8:	009b      	lsls	r3, r3, #2
 800cbaa:	2105      	movs	r1, #5
 800cbac:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	2100      	movs	r1, #0
 800cbb6:	f000 fccb 	bl	800d550 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbba:	2300      	movs	r3, #0
}
 800cbbc:	0018      	movs	r0, r3
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	b002      	add	sp, #8
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cbc8:	4914      	ldr	r1, [pc, #80]	; (800cc1c <MX_USB_DEVICE_Init+0x58>)
 800cbca:	4b15      	ldr	r3, [pc, #84]	; (800cc20 <MX_USB_DEVICE_Init+0x5c>)
 800cbcc:	2200      	movs	r2, #0
 800cbce:	0018      	movs	r0, r3
 800cbd0:	f7fe fdea 	bl	800b7a8 <USBD_Init>
 800cbd4:	1e03      	subs	r3, r0, #0
 800cbd6:	d001      	beq.n	800cbdc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cbd8:	f7f5 fc48 	bl	800246c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cbdc:	4a11      	ldr	r2, [pc, #68]	; (800cc24 <MX_USB_DEVICE_Init+0x60>)
 800cbde:	4b10      	ldr	r3, [pc, #64]	; (800cc20 <MX_USB_DEVICE_Init+0x5c>)
 800cbe0:	0011      	movs	r1, r2
 800cbe2:	0018      	movs	r0, r3
 800cbe4:	f7fe fe11 	bl	800b80a <USBD_RegisterClass>
 800cbe8:	1e03      	subs	r3, r0, #0
 800cbea:	d001      	beq.n	800cbf0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800cbec:	f7f5 fc3e 	bl	800246c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cbf0:	4a0d      	ldr	r2, [pc, #52]	; (800cc28 <MX_USB_DEVICE_Init+0x64>)
 800cbf2:	4b0b      	ldr	r3, [pc, #44]	; (800cc20 <MX_USB_DEVICE_Init+0x5c>)
 800cbf4:	0011      	movs	r1, r2
 800cbf6:	0018      	movs	r0, r3
 800cbf8:	f7fe fd26 	bl	800b648 <USBD_CDC_RegisterInterface>
 800cbfc:	1e03      	subs	r3, r0, #0
 800cbfe:	d001      	beq.n	800cc04 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800cc00:	f7f5 fc34 	bl	800246c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cc04:	4b06      	ldr	r3, [pc, #24]	; (800cc20 <MX_USB_DEVICE_Init+0x5c>)
 800cc06:	0018      	movs	r0, r3
 800cc08:	f7fe fe1f 	bl	800b84a <USBD_Start>
 800cc0c:	1e03      	subs	r3, r0, #0
 800cc0e:	d001      	beq.n	800cc14 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800cc10:	f7f5 fc2c 	bl	800246c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cc14:	46c0      	nop			; (mov r8, r8)
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	46c0      	nop			; (mov r8, r8)
 800cc1c:	2000012c 	.word	0x2000012c
 800cc20:	20000420 	.word	0x20000420
 800cc24:	20000018 	.word	0x20000018
 800cc28:	2000011c 	.word	0x2000011c

0800cc2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cc30:	4907      	ldr	r1, [pc, #28]	; (800cc50 <CDC_Init_FS+0x24>)
 800cc32:	4b08      	ldr	r3, [pc, #32]	; (800cc54 <CDC_Init_FS+0x28>)
 800cc34:	2200      	movs	r2, #0
 800cc36:	0018      	movs	r0, r3
 800cc38:	f7fe fd21 	bl	800b67e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cc3c:	4a06      	ldr	r2, [pc, #24]	; (800cc58 <CDC_Init_FS+0x2c>)
 800cc3e:	4b05      	ldr	r3, [pc, #20]	; (800cc54 <CDC_Init_FS+0x28>)
 800cc40:	0011      	movs	r1, r2
 800cc42:	0018      	movs	r0, r3
 800cc44:	f7fe fd37 	bl	800b6b6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cc48:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cc4a:	0018      	movs	r0, r3
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}
 800cc50:	20000acc 	.word	0x20000acc
 800cc54:	20000420 	.word	0x20000420
 800cc58:	200006e4 	.word	0x200006e4

0800cc5c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cc60:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cc62:	0018      	movs	r0, r3
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6039      	str	r1, [r7, #0]
 800cc70:	0011      	movs	r1, r2
 800cc72:	1dfb      	adds	r3, r7, #7
 800cc74:	1c02      	adds	r2, r0, #0
 800cc76:	701a      	strb	r2, [r3, #0]
 800cc78:	1d3b      	adds	r3, r7, #4
 800cc7a:	1c0a      	adds	r2, r1, #0
 800cc7c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cc7e:	1dfb      	adds	r3, r7, #7
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	2b23      	cmp	r3, #35	; 0x23
 800cc84:	d804      	bhi.n	800cc90 <CDC_Control_FS+0x28>
 800cc86:	009a      	lsls	r2, r3, #2
 800cc88:	4b04      	ldr	r3, [pc, #16]	; (800cc9c <CDC_Control_FS+0x34>)
 800cc8a:	18d3      	adds	r3, r2, r3
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cc90:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800cc92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cc94:	0018      	movs	r0, r3
 800cc96:	46bd      	mov	sp, r7
 800cc98:	b002      	add	sp, #8
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	0800e2b8 	.word	0x0800e2b8

0800cca0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cca0:	b590      	push	{r4, r7, lr}
 800cca2:	b085      	sub	sp, #20
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  flags.data_received = 1;
 800ccaa:	4b18      	ldr	r3, [pc, #96]	; (800cd0c <CDC_Receive_FS+0x6c>)
 800ccac:	7a1a      	ldrb	r2, [r3, #8]
 800ccae:	2101      	movs	r1, #1
 800ccb0:	430a      	orrs	r2, r1
 800ccb2:	721a      	strb	r2, [r3, #8]

  for(uint8_t i = 0; i < *Len; i++)
 800ccb4:	230f      	movs	r3, #15
 800ccb6:	18fb      	adds	r3, r7, r3
 800ccb8:	2200      	movs	r2, #0
 800ccba:	701a      	strb	r2, [r3, #0]
 800ccbc:	e00f      	b.n	800ccde <CDC_Receive_FS+0x3e>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800ccbe:	4b14      	ldr	r3, [pc, #80]	; (800cd10 <CDC_Receive_FS+0x70>)
 800ccc0:	6818      	ldr	r0, [r3, #0]
 800ccc2:	240f      	movs	r4, #15
 800ccc4:	193b      	adds	r3, r7, r4
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	18d3      	adds	r3, r2, r3
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	0019      	movs	r1, r3
 800ccd0:	f7f5 fc1c 	bl	800250c <push>
  for(uint8_t i = 0; i < *Len; i++)
 800ccd4:	193b      	adds	r3, r7, r4
 800ccd6:	781a      	ldrb	r2, [r3, #0]
 800ccd8:	193b      	adds	r3, r7, r4
 800ccda:	3201      	adds	r2, #1
 800ccdc:	701a      	strb	r2, [r3, #0]
 800ccde:	230f      	movs	r3, #15
 800cce0:	18fb      	adds	r3, r7, r3
 800cce2:	781a      	ldrb	r2, [r3, #0]
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d3e8      	bcc.n	800ccbe <CDC_Receive_FS+0x1e>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ccec:	687a      	ldr	r2, [r7, #4]
 800ccee:	4b09      	ldr	r3, [pc, #36]	; (800cd14 <CDC_Receive_FS+0x74>)
 800ccf0:	0011      	movs	r1, r2
 800ccf2:	0018      	movs	r0, r3
 800ccf4:	f7fe fcdf 	bl	800b6b6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ccf8:	4b06      	ldr	r3, [pc, #24]	; (800cd14 <CDC_Receive_FS+0x74>)
 800ccfa:	0018      	movs	r0, r3
 800ccfc:	f7fe fd26 	bl	800b74c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cd00:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cd02:	0018      	movs	r0, r3
 800cd04:	46bd      	mov	sp, r7
 800cd06:	b005      	add	sp, #20
 800cd08:	bd90      	pop	{r4, r7, pc}
 800cd0a:	46c0      	nop			; (mov r8, r8)
 800cd0c:	200003d0 	.word	0x200003d0
 800cd10:	20000eb4 	.word	0x20000eb4
 800cd14:	20000420 	.word	0x20000420

0800cd18 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cd18:	b5b0      	push	{r4, r5, r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	000a      	movs	r2, r1
 800cd22:	1cbb      	adds	r3, r7, #2
 800cd24:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800cd26:	230f      	movs	r3, #15
 800cd28:	18fb      	adds	r3, r7, r3
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cd2e:	4a11      	ldr	r2, [pc, #68]	; (800cd74 <CDC_Transmit_FS+0x5c>)
 800cd30:	23ae      	movs	r3, #174	; 0xae
 800cd32:	009b      	lsls	r3, r3, #2
 800cd34:	58d3      	ldr	r3, [r2, r3]
 800cd36:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cd38:	68ba      	ldr	r2, [r7, #8]
 800cd3a:	2385      	movs	r3, #133	; 0x85
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	58d3      	ldr	r3, [r2, r3]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d001      	beq.n	800cd48 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800cd44:	2301      	movs	r3, #1
 800cd46:	e010      	b.n	800cd6a <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cd48:	1cbb      	adds	r3, r7, #2
 800cd4a:	881a      	ldrh	r2, [r3, #0]
 800cd4c:	6879      	ldr	r1, [r7, #4]
 800cd4e:	4b09      	ldr	r3, [pc, #36]	; (800cd74 <CDC_Transmit_FS+0x5c>)
 800cd50:	0018      	movs	r0, r3
 800cd52:	f7fe fc94 	bl	800b67e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cd56:	250f      	movs	r5, #15
 800cd58:	197c      	adds	r4, r7, r5
 800cd5a:	4b06      	ldr	r3, [pc, #24]	; (800cd74 <CDC_Transmit_FS+0x5c>)
 800cd5c:	0018      	movs	r0, r3
 800cd5e:	f7fe fcbe 	bl	800b6de <USBD_CDC_TransmitPacket>
 800cd62:	0003      	movs	r3, r0
 800cd64:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800cd66:	197b      	adds	r3, r7, r5
 800cd68:	781b      	ldrb	r3, [r3, #0]
}
 800cd6a:	0018      	movs	r0, r3
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	b004      	add	sp, #16
 800cd70:	bdb0      	pop	{r4, r5, r7, pc}
 800cd72:	46c0      	nop			; (mov r8, r8)
 800cd74:	20000420 	.word	0x20000420

0800cd78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	0002      	movs	r2, r0
 800cd80:	6039      	str	r1, [r7, #0]
 800cd82:	1dfb      	adds	r3, r7, #7
 800cd84:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	2212      	movs	r2, #18
 800cd8a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cd8c:	4b02      	ldr	r3, [pc, #8]	; (800cd98 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cd8e:	0018      	movs	r0, r3
 800cd90:	46bd      	mov	sp, r7
 800cd92:	b002      	add	sp, #8
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	46c0      	nop			; (mov r8, r8)
 800cd98:	20000148 	.word	0x20000148

0800cd9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b082      	sub	sp, #8
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	0002      	movs	r2, r0
 800cda4:	6039      	str	r1, [r7, #0]
 800cda6:	1dfb      	adds	r3, r7, #7
 800cda8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	2204      	movs	r2, #4
 800cdae:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cdb0:	4b02      	ldr	r3, [pc, #8]	; (800cdbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cdb2:	0018      	movs	r0, r3
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	b002      	add	sp, #8
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	46c0      	nop			; (mov r8, r8)
 800cdbc:	2000015c 	.word	0x2000015c

0800cdc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	0002      	movs	r2, r0
 800cdc8:	6039      	str	r1, [r7, #0]
 800cdca:	1dfb      	adds	r3, r7, #7
 800cdcc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800cdce:	1dfb      	adds	r3, r7, #7
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d106      	bne.n	800cde4 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cdd6:	683a      	ldr	r2, [r7, #0]
 800cdd8:	4908      	ldr	r1, [pc, #32]	; (800cdfc <USBD_FS_ProductStrDescriptor+0x3c>)
 800cdda:	4b09      	ldr	r3, [pc, #36]	; (800ce00 <USBD_FS_ProductStrDescriptor+0x40>)
 800cddc:	0018      	movs	r0, r3
 800cdde:	f7ff fdf4 	bl	800c9ca <USBD_GetString>
 800cde2:	e005      	b.n	800cdf0 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cde4:	683a      	ldr	r2, [r7, #0]
 800cde6:	4905      	ldr	r1, [pc, #20]	; (800cdfc <USBD_FS_ProductStrDescriptor+0x3c>)
 800cde8:	4b05      	ldr	r3, [pc, #20]	; (800ce00 <USBD_FS_ProductStrDescriptor+0x40>)
 800cdea:	0018      	movs	r0, r3
 800cdec:	f7ff fded 	bl	800c9ca <USBD_GetString>
  }
  return USBD_StrDesc;
 800cdf0:	4b02      	ldr	r3, [pc, #8]	; (800cdfc <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800cdf2:	0018      	movs	r0, r3
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	b002      	add	sp, #8
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	46c0      	nop			; (mov r8, r8)
 800cdfc:	20000eb8 	.word	0x20000eb8
 800ce00:	0800e0e8 	.word	0x0800e0e8

0800ce04 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b082      	sub	sp, #8
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	0002      	movs	r2, r0
 800ce0c:	6039      	str	r1, [r7, #0]
 800ce0e:	1dfb      	adds	r3, r7, #7
 800ce10:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce12:	683a      	ldr	r2, [r7, #0]
 800ce14:	4904      	ldr	r1, [pc, #16]	; (800ce28 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ce16:	4b05      	ldr	r3, [pc, #20]	; (800ce2c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800ce18:	0018      	movs	r0, r3
 800ce1a:	f7ff fdd6 	bl	800c9ca <USBD_GetString>
  return USBD_StrDesc;
 800ce1e:	4b02      	ldr	r3, [pc, #8]	; (800ce28 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800ce20:	0018      	movs	r0, r3
 800ce22:	46bd      	mov	sp, r7
 800ce24:	b002      	add	sp, #8
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	20000eb8 	.word	0x20000eb8
 800ce2c:	0800e100 	.word	0x0800e100

0800ce30 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	0002      	movs	r2, r0
 800ce38:	6039      	str	r1, [r7, #0]
 800ce3a:	1dfb      	adds	r3, r7, #7
 800ce3c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	221a      	movs	r2, #26
 800ce42:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ce44:	f000 f84c 	bl	800cee0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ce48:	4b02      	ldr	r3, [pc, #8]	; (800ce54 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800ce4a:	0018      	movs	r0, r3
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	b002      	add	sp, #8
 800ce50:	bd80      	pop	{r7, pc}
 800ce52:	46c0      	nop			; (mov r8, r8)
 800ce54:	20000160 	.word	0x20000160

0800ce58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	0002      	movs	r2, r0
 800ce60:	6039      	str	r1, [r7, #0]
 800ce62:	1dfb      	adds	r3, r7, #7
 800ce64:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800ce66:	1dfb      	adds	r3, r7, #7
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d106      	bne.n	800ce7c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce6e:	683a      	ldr	r2, [r7, #0]
 800ce70:	4908      	ldr	r1, [pc, #32]	; (800ce94 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800ce72:	4b09      	ldr	r3, [pc, #36]	; (800ce98 <USBD_FS_ConfigStrDescriptor+0x40>)
 800ce74:	0018      	movs	r0, r3
 800ce76:	f7ff fda8 	bl	800c9ca <USBD_GetString>
 800ce7a:	e005      	b.n	800ce88 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce7c:	683a      	ldr	r2, [r7, #0]
 800ce7e:	4905      	ldr	r1, [pc, #20]	; (800ce94 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800ce80:	4b05      	ldr	r3, [pc, #20]	; (800ce98 <USBD_FS_ConfigStrDescriptor+0x40>)
 800ce82:	0018      	movs	r0, r3
 800ce84:	f7ff fda1 	bl	800c9ca <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce88:	4b02      	ldr	r3, [pc, #8]	; (800ce94 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800ce8a:	0018      	movs	r0, r3
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	b002      	add	sp, #8
 800ce90:	bd80      	pop	{r7, pc}
 800ce92:	46c0      	nop			; (mov r8, r8)
 800ce94:	20000eb8 	.word	0x20000eb8
 800ce98:	0800e114 	.word	0x0800e114

0800ce9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	0002      	movs	r2, r0
 800cea4:	6039      	str	r1, [r7, #0]
 800cea6:	1dfb      	adds	r3, r7, #7
 800cea8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800ceaa:	1dfb      	adds	r3, r7, #7
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d106      	bne.n	800cec0 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ceb2:	683a      	ldr	r2, [r7, #0]
 800ceb4:	4908      	ldr	r1, [pc, #32]	; (800ced8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800ceb6:	4b09      	ldr	r3, [pc, #36]	; (800cedc <USBD_FS_InterfaceStrDescriptor+0x40>)
 800ceb8:	0018      	movs	r0, r3
 800ceba:	f7ff fd86 	bl	800c9ca <USBD_GetString>
 800cebe:	e005      	b.n	800cecc <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cec0:	683a      	ldr	r2, [r7, #0]
 800cec2:	4905      	ldr	r1, [pc, #20]	; (800ced8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800cec4:	4b05      	ldr	r3, [pc, #20]	; (800cedc <USBD_FS_InterfaceStrDescriptor+0x40>)
 800cec6:	0018      	movs	r0, r3
 800cec8:	f7ff fd7f 	bl	800c9ca <USBD_GetString>
  }
  return USBD_StrDesc;
 800cecc:	4b02      	ldr	r3, [pc, #8]	; (800ced8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800cece:	0018      	movs	r0, r3
 800ced0:	46bd      	mov	sp, r7
 800ced2:	b002      	add	sp, #8
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	46c0      	nop			; (mov r8, r8)
 800ced8:	20000eb8 	.word	0x20000eb8
 800cedc:	0800e120 	.word	0x0800e120

0800cee0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b084      	sub	sp, #16
 800cee4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cee6:	4b10      	ldr	r3, [pc, #64]	; (800cf28 <Get_SerialNum+0x48>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ceec:	4b0f      	ldr	r3, [pc, #60]	; (800cf2c <Get_SerialNum+0x4c>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cef2:	4b0f      	ldr	r3, [pc, #60]	; (800cf30 <Get_SerialNum+0x50>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cef8:	68fa      	ldr	r2, [r7, #12]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	18d3      	adds	r3, r2, r3
 800cefe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d00b      	beq.n	800cf1e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf06:	490b      	ldr	r1, [pc, #44]	; (800cf34 <Get_SerialNum+0x54>)
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	2208      	movs	r2, #8
 800cf0c:	0018      	movs	r0, r3
 800cf0e:	f000 f815 	bl	800cf3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf12:	4909      	ldr	r1, [pc, #36]	; (800cf38 <Get_SerialNum+0x58>)
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	2204      	movs	r2, #4
 800cf18:	0018      	movs	r0, r3
 800cf1a:	f000 f80f 	bl	800cf3c <IntToUnicode>
  }
}
 800cf1e:	46c0      	nop			; (mov r8, r8)
 800cf20:	46bd      	mov	sp, r7
 800cf22:	b004      	add	sp, #16
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	46c0      	nop			; (mov r8, r8)
 800cf28:	1ffff7ac 	.word	0x1ffff7ac
 800cf2c:	1ffff7b0 	.word	0x1ffff7b0
 800cf30:	1ffff7b4 	.word	0x1ffff7b4
 800cf34:	20000162 	.word	0x20000162
 800cf38:	20000172 	.word	0x20000172

0800cf3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b086      	sub	sp, #24
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	1dfb      	adds	r3, r7, #7
 800cf48:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800cf4a:	2117      	movs	r1, #23
 800cf4c:	187b      	adds	r3, r7, r1
 800cf4e:	2200      	movs	r2, #0
 800cf50:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800cf52:	187b      	adds	r3, r7, r1
 800cf54:	2200      	movs	r2, #0
 800cf56:	701a      	strb	r2, [r3, #0]
 800cf58:	e02f      	b.n	800cfba <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	0f1b      	lsrs	r3, r3, #28
 800cf5e:	2b09      	cmp	r3, #9
 800cf60:	d80d      	bhi.n	800cf7e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	0f1b      	lsrs	r3, r3, #28
 800cf66:	b2da      	uxtb	r2, r3
 800cf68:	2317      	movs	r3, #23
 800cf6a:	18fb      	adds	r3, r7, r3
 800cf6c:	781b      	ldrb	r3, [r3, #0]
 800cf6e:	005b      	lsls	r3, r3, #1
 800cf70:	0019      	movs	r1, r3
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	185b      	adds	r3, r3, r1
 800cf76:	3230      	adds	r2, #48	; 0x30
 800cf78:	b2d2      	uxtb	r2, r2
 800cf7a:	701a      	strb	r2, [r3, #0]
 800cf7c:	e00c      	b.n	800cf98 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	0f1b      	lsrs	r3, r3, #28
 800cf82:	b2da      	uxtb	r2, r3
 800cf84:	2317      	movs	r3, #23
 800cf86:	18fb      	adds	r3, r7, r3
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	005b      	lsls	r3, r3, #1
 800cf8c:	0019      	movs	r1, r3
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	185b      	adds	r3, r3, r1
 800cf92:	3237      	adds	r2, #55	; 0x37
 800cf94:	b2d2      	uxtb	r2, r2
 800cf96:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	011b      	lsls	r3, r3, #4
 800cf9c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cf9e:	2117      	movs	r1, #23
 800cfa0:	187b      	adds	r3, r7, r1
 800cfa2:	781b      	ldrb	r3, [r3, #0]
 800cfa4:	005b      	lsls	r3, r3, #1
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	68ba      	ldr	r2, [r7, #8]
 800cfaa:	18d3      	adds	r3, r2, r3
 800cfac:	2200      	movs	r2, #0
 800cfae:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cfb0:	187b      	adds	r3, r7, r1
 800cfb2:	781a      	ldrb	r2, [r3, #0]
 800cfb4:	187b      	adds	r3, r7, r1
 800cfb6:	3201      	adds	r2, #1
 800cfb8:	701a      	strb	r2, [r3, #0]
 800cfba:	2317      	movs	r3, #23
 800cfbc:	18fa      	adds	r2, r7, r3
 800cfbe:	1dfb      	adds	r3, r7, #7
 800cfc0:	7812      	ldrb	r2, [r2, #0]
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d3c8      	bcc.n	800cf5a <IntToUnicode+0x1e>
  }
}
 800cfc8:	46c0      	nop			; (mov r8, r8)
 800cfca:	46c0      	nop			; (mov r8, r8)
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	b006      	add	sp, #24
 800cfd0:	bd80      	pop	{r7, pc}
	...

0800cfd4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b084      	sub	sp, #16
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4a0e      	ldr	r2, [pc, #56]	; (800d01c <HAL_PCD_MspInit+0x48>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d115      	bne.n	800d012 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cfe6:	4b0e      	ldr	r3, [pc, #56]	; (800d020 <HAL_PCD_MspInit+0x4c>)
 800cfe8:	69da      	ldr	r2, [r3, #28]
 800cfea:	4b0d      	ldr	r3, [pc, #52]	; (800d020 <HAL_PCD_MspInit+0x4c>)
 800cfec:	2180      	movs	r1, #128	; 0x80
 800cfee:	0409      	lsls	r1, r1, #16
 800cff0:	430a      	orrs	r2, r1
 800cff2:	61da      	str	r2, [r3, #28]
 800cff4:	4b0a      	ldr	r3, [pc, #40]	; (800d020 <HAL_PCD_MspInit+0x4c>)
 800cff6:	69da      	ldr	r2, [r3, #28]
 800cff8:	2380      	movs	r3, #128	; 0x80
 800cffa:	041b      	lsls	r3, r3, #16
 800cffc:	4013      	ands	r3, r2
 800cffe:	60fb      	str	r3, [r7, #12]
 800d000:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800d002:	2200      	movs	r2, #0
 800d004:	2100      	movs	r1, #0
 800d006:	201f      	movs	r0, #31
 800d008:	f7f6 ffc6 	bl	8003f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800d00c:	201f      	movs	r0, #31
 800d00e:	f7f6 ffd8 	bl	8003fc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d012:	46c0      	nop			; (mov r8, r8)
 800d014:	46bd      	mov	sp, r7
 800d016:	b004      	add	sp, #16
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	46c0      	nop			; (mov r8, r8)
 800d01c:	40005c00 	.word	0x40005c00
 800d020:	40021000 	.word	0x40021000

0800d024 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d02c:	687a      	ldr	r2, [r7, #4]
 800d02e:	23bc      	movs	r3, #188	; 0xbc
 800d030:	009b      	lsls	r3, r3, #2
 800d032:	58d2      	ldr	r2, [r2, r3]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	21ac      	movs	r1, #172	; 0xac
 800d038:	0089      	lsls	r1, r1, #2
 800d03a:	468c      	mov	ip, r1
 800d03c:	4463      	add	r3, ip
 800d03e:	0019      	movs	r1, r3
 800d040:	0010      	movs	r0, r2
 800d042:	f7fe fc55 	bl	800b8f0 <USBD_LL_SetupStage>
}
 800d046:	46c0      	nop			; (mov r8, r8)
 800d048:	46bd      	mov	sp, r7
 800d04a:	b002      	add	sp, #8
 800d04c:	bd80      	pop	{r7, pc}

0800d04e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d04e:	b590      	push	{r4, r7, lr}
 800d050:	b083      	sub	sp, #12
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
 800d056:	000a      	movs	r2, r1
 800d058:	1cfb      	adds	r3, r7, #3
 800d05a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d05c:	687a      	ldr	r2, [r7, #4]
 800d05e:	23bc      	movs	r3, #188	; 0xbc
 800d060:	009b      	lsls	r3, r3, #2
 800d062:	58d4      	ldr	r4, [r2, r3]
 800d064:	1cfb      	adds	r3, r7, #3
 800d066:	781a      	ldrb	r2, [r3, #0]
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	23be      	movs	r3, #190	; 0xbe
 800d06c:	0059      	lsls	r1, r3, #1
 800d06e:	0013      	movs	r3, r2
 800d070:	009b      	lsls	r3, r3, #2
 800d072:	189b      	adds	r3, r3, r2
 800d074:	00db      	lsls	r3, r3, #3
 800d076:	18c3      	adds	r3, r0, r3
 800d078:	185b      	adds	r3, r3, r1
 800d07a:	681a      	ldr	r2, [r3, #0]
 800d07c:	1cfb      	adds	r3, r7, #3
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	0019      	movs	r1, r3
 800d082:	0020      	movs	r0, r4
 800d084:	f7fe fc92 	bl	800b9ac <USBD_LL_DataOutStage>
}
 800d088:	46c0      	nop			; (mov r8, r8)
 800d08a:	46bd      	mov	sp, r7
 800d08c:	b003      	add	sp, #12
 800d08e:	bd90      	pop	{r4, r7, pc}

0800d090 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	000a      	movs	r2, r1
 800d09a:	1cfb      	adds	r3, r7, #3
 800d09c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d09e:	687a      	ldr	r2, [r7, #4]
 800d0a0:	23bc      	movs	r3, #188	; 0xbc
 800d0a2:	009b      	lsls	r3, r3, #2
 800d0a4:	58d0      	ldr	r0, [r2, r3]
 800d0a6:	1cfb      	adds	r3, r7, #3
 800d0a8:	781a      	ldrb	r2, [r3, #0]
 800d0aa:	6879      	ldr	r1, [r7, #4]
 800d0ac:	0013      	movs	r3, r2
 800d0ae:	009b      	lsls	r3, r3, #2
 800d0b0:	189b      	adds	r3, r3, r2
 800d0b2:	00db      	lsls	r3, r3, #3
 800d0b4:	18cb      	adds	r3, r1, r3
 800d0b6:	333c      	adds	r3, #60	; 0x3c
 800d0b8:	681a      	ldr	r2, [r3, #0]
 800d0ba:	1cfb      	adds	r3, r7, #3
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	0019      	movs	r1, r3
 800d0c0:	f7fe fcf6 	bl	800bab0 <USBD_LL_DataInStage>
}
 800d0c4:	46c0      	nop			; (mov r8, r8)
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	b002      	add	sp, #8
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b082      	sub	sp, #8
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d0d4:	687a      	ldr	r2, [r7, #4]
 800d0d6:	23bc      	movs	r3, #188	; 0xbc
 800d0d8:	009b      	lsls	r3, r3, #2
 800d0da:	58d3      	ldr	r3, [r2, r3]
 800d0dc:	0018      	movs	r0, r3
 800d0de:	f7fe fe2d 	bl	800bd3c <USBD_LL_SOF>
}
 800d0e2:	46c0      	nop			; (mov r8, r8)
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	b002      	add	sp, #8
 800d0e8:	bd80      	pop	{r7, pc}

0800d0ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0ea:	b580      	push	{r7, lr}
 800d0ec:	b084      	sub	sp, #16
 800d0ee:	af00      	add	r7, sp, #0
 800d0f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d0f2:	230f      	movs	r3, #15
 800d0f4:	18fb      	adds	r3, r7, r3
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	689b      	ldr	r3, [r3, #8]
 800d0fe:	2b02      	cmp	r3, #2
 800d100:	d001      	beq.n	800d106 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800d102:	f7f5 f9b3 	bl	800246c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d106:	687a      	ldr	r2, [r7, #4]
 800d108:	23bc      	movs	r3, #188	; 0xbc
 800d10a:	009b      	lsls	r3, r3, #2
 800d10c:	58d2      	ldr	r2, [r2, r3]
 800d10e:	230f      	movs	r3, #15
 800d110:	18fb      	adds	r3, r7, r3
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	0019      	movs	r1, r3
 800d116:	0010      	movs	r0, r2
 800d118:	f7fe fdcf 	bl	800bcba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d11c:	687a      	ldr	r2, [r7, #4]
 800d11e:	23bc      	movs	r3, #188	; 0xbc
 800d120:	009b      	lsls	r3, r3, #2
 800d122:	58d3      	ldr	r3, [r2, r3]
 800d124:	0018      	movs	r0, r3
 800d126:	f7fe fd80 	bl	800bc2a <USBD_LL_Reset>
}
 800d12a:	46c0      	nop			; (mov r8, r8)
 800d12c:	46bd      	mov	sp, r7
 800d12e:	b004      	add	sp, #16
 800d130:	bd80      	pop	{r7, pc}
	...

0800d134 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b082      	sub	sp, #8
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d13c:	687a      	ldr	r2, [r7, #4]
 800d13e:	23bc      	movs	r3, #188	; 0xbc
 800d140:	009b      	lsls	r3, r3, #2
 800d142:	58d3      	ldr	r3, [r2, r3]
 800d144:	0018      	movs	r0, r3
 800d146:	f7fe fdc9 	bl	800bcdc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	699b      	ldr	r3, [r3, #24]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d005      	beq.n	800d15e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d152:	4b05      	ldr	r3, [pc, #20]	; (800d168 <HAL_PCD_SuspendCallback+0x34>)
 800d154:	691a      	ldr	r2, [r3, #16]
 800d156:	4b04      	ldr	r3, [pc, #16]	; (800d168 <HAL_PCD_SuspendCallback+0x34>)
 800d158:	2106      	movs	r1, #6
 800d15a:	430a      	orrs	r2, r1
 800d15c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800d15e:	46c0      	nop			; (mov r8, r8)
 800d160:	46bd      	mov	sp, r7
 800d162:	b002      	add	sp, #8
 800d164:	bd80      	pop	{r7, pc}
 800d166:	46c0      	nop			; (mov r8, r8)
 800d168:	e000ed00 	.word	0xe000ed00

0800d16c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	699b      	ldr	r3, [r3, #24]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d007      	beq.n	800d18c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d17c:	4b09      	ldr	r3, [pc, #36]	; (800d1a4 <HAL_PCD_ResumeCallback+0x38>)
 800d17e:	691a      	ldr	r2, [r3, #16]
 800d180:	4b08      	ldr	r3, [pc, #32]	; (800d1a4 <HAL_PCD_ResumeCallback+0x38>)
 800d182:	2106      	movs	r1, #6
 800d184:	438a      	bics	r2, r1
 800d186:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800d188:	f000 fa44 	bl	800d614 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d18c:	687a      	ldr	r2, [r7, #4]
 800d18e:	23bc      	movs	r3, #188	; 0xbc
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	58d3      	ldr	r3, [r2, r3]
 800d194:	0018      	movs	r0, r3
 800d196:	f7fe fdb9 	bl	800bd0c <USBD_LL_Resume>
}
 800d19a:	46c0      	nop			; (mov r8, r8)
 800d19c:	46bd      	mov	sp, r7
 800d19e:	b002      	add	sp, #8
 800d1a0:	bd80      	pop	{r7, pc}
 800d1a2:	46c0      	nop			; (mov r8, r8)
 800d1a4:	e000ed00 	.word	0xe000ed00

0800d1a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b082      	sub	sp, #8
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d1b0:	4a2d      	ldr	r2, [pc, #180]	; (800d268 <USBD_LL_Init+0xc0>)
 800d1b2:	23bc      	movs	r3, #188	; 0xbc
 800d1b4:	009b      	lsls	r3, r3, #2
 800d1b6:	6879      	ldr	r1, [r7, #4]
 800d1b8:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	23b0      	movs	r3, #176	; 0xb0
 800d1be:	009b      	lsls	r3, r3, #2
 800d1c0:	4929      	ldr	r1, [pc, #164]	; (800d268 <USBD_LL_Init+0xc0>)
 800d1c2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800d1c4:	4b28      	ldr	r3, [pc, #160]	; (800d268 <USBD_LL_Init+0xc0>)
 800d1c6:	4a29      	ldr	r2, [pc, #164]	; (800d26c <USBD_LL_Init+0xc4>)
 800d1c8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d1ca:	4b27      	ldr	r3, [pc, #156]	; (800d268 <USBD_LL_Init+0xc0>)
 800d1cc:	2208      	movs	r2, #8
 800d1ce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d1d0:	4b25      	ldr	r3, [pc, #148]	; (800d268 <USBD_LL_Init+0xc0>)
 800d1d2:	2202      	movs	r2, #2
 800d1d4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d1d6:	4b24      	ldr	r3, [pc, #144]	; (800d268 <USBD_LL_Init+0xc0>)
 800d1d8:	2202      	movs	r2, #2
 800d1da:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d1dc:	4b22      	ldr	r3, [pc, #136]	; (800d268 <USBD_LL_Init+0xc0>)
 800d1de:	2200      	movs	r2, #0
 800d1e0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d1e2:	4b21      	ldr	r3, [pc, #132]	; (800d268 <USBD_LL_Init+0xc0>)
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d1e8:	4b1f      	ldr	r3, [pc, #124]	; (800d268 <USBD_LL_Init+0xc0>)
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d1ee:	4b1e      	ldr	r3, [pc, #120]	; (800d268 <USBD_LL_Init+0xc0>)
 800d1f0:	0018      	movs	r0, r3
 800d1f2:	f7f7 f96b 	bl	80044cc <HAL_PCD_Init>
 800d1f6:	1e03      	subs	r3, r0, #0
 800d1f8:	d001      	beq.n	800d1fe <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800d1fa:	f7f5 f937 	bl	800246c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	23b0      	movs	r3, #176	; 0xb0
 800d202:	009b      	lsls	r3, r3, #2
 800d204:	58d0      	ldr	r0, [r2, r3]
 800d206:	2318      	movs	r3, #24
 800d208:	2200      	movs	r2, #0
 800d20a:	2100      	movs	r1, #0
 800d20c:	f7f8 ff4c 	bl	80060a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d210:	687a      	ldr	r2, [r7, #4]
 800d212:	23b0      	movs	r3, #176	; 0xb0
 800d214:	009b      	lsls	r3, r3, #2
 800d216:	58d0      	ldr	r0, [r2, r3]
 800d218:	2358      	movs	r3, #88	; 0x58
 800d21a:	2200      	movs	r2, #0
 800d21c:	2180      	movs	r1, #128	; 0x80
 800d21e:	f7f8 ff43 	bl	80060a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d222:	687a      	ldr	r2, [r7, #4]
 800d224:	23b0      	movs	r3, #176	; 0xb0
 800d226:	009b      	lsls	r3, r3, #2
 800d228:	58d0      	ldr	r0, [r2, r3]
 800d22a:	23c0      	movs	r3, #192	; 0xc0
 800d22c:	2200      	movs	r2, #0
 800d22e:	2181      	movs	r1, #129	; 0x81
 800d230:	f7f8 ff3a 	bl	80060a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	23b0      	movs	r3, #176	; 0xb0
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	58d0      	ldr	r0, [r2, r3]
 800d23c:	2388      	movs	r3, #136	; 0x88
 800d23e:	005b      	lsls	r3, r3, #1
 800d240:	2200      	movs	r2, #0
 800d242:	2101      	movs	r1, #1
 800d244:	f7f8 ff30 	bl	80060a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d248:	687a      	ldr	r2, [r7, #4]
 800d24a:	23b0      	movs	r3, #176	; 0xb0
 800d24c:	009b      	lsls	r3, r3, #2
 800d24e:	58d0      	ldr	r0, [r2, r3]
 800d250:	2380      	movs	r3, #128	; 0x80
 800d252:	005b      	lsls	r3, r3, #1
 800d254:	2200      	movs	r2, #0
 800d256:	2182      	movs	r1, #130	; 0x82
 800d258:	f7f8 ff26 	bl	80060a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d25c:	2300      	movs	r3, #0
}
 800d25e:	0018      	movs	r0, r3
 800d260:	46bd      	mov	sp, r7
 800d262:	b002      	add	sp, #8
 800d264:	bd80      	pop	{r7, pc}
 800d266:	46c0      	nop			; (mov r8, r8)
 800d268:	200010b8 	.word	0x200010b8
 800d26c:	40005c00 	.word	0x40005c00

0800d270 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d270:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d272:	b085      	sub	sp, #20
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d278:	210f      	movs	r1, #15
 800d27a:	187b      	adds	r3, r7, r1
 800d27c:	2200      	movs	r2, #0
 800d27e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d280:	260e      	movs	r6, #14
 800d282:	19bb      	adds	r3, r7, r6
 800d284:	2200      	movs	r2, #0
 800d286:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d288:	687a      	ldr	r2, [r7, #4]
 800d28a:	23b0      	movs	r3, #176	; 0xb0
 800d28c:	009b      	lsls	r3, r3, #2
 800d28e:	58d3      	ldr	r3, [r2, r3]
 800d290:	000d      	movs	r5, r1
 800d292:	187c      	adds	r4, r7, r1
 800d294:	0018      	movs	r0, r3
 800d296:	f7f7 fa29 	bl	80046ec <HAL_PCD_Start>
 800d29a:	0003      	movs	r3, r0
 800d29c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d29e:	19bc      	adds	r4, r7, r6
 800d2a0:	197b      	adds	r3, r7, r5
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	0018      	movs	r0, r3
 800d2a6:	f000 f9bc 	bl	800d622 <USBD_Get_USB_Status>
 800d2aa:	0003      	movs	r3, r0
 800d2ac:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d2ae:	19bb      	adds	r3, r7, r6
 800d2b0:	781b      	ldrb	r3, [r3, #0]
}
 800d2b2:	0018      	movs	r0, r3
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	b005      	add	sp, #20
 800d2b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d2ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d2ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2bc:	b085      	sub	sp, #20
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	6078      	str	r0, [r7, #4]
 800d2c2:	000c      	movs	r4, r1
 800d2c4:	0010      	movs	r0, r2
 800d2c6:	0019      	movs	r1, r3
 800d2c8:	1cfb      	adds	r3, r7, #3
 800d2ca:	1c22      	adds	r2, r4, #0
 800d2cc:	701a      	strb	r2, [r3, #0]
 800d2ce:	1cbb      	adds	r3, r7, #2
 800d2d0:	1c02      	adds	r2, r0, #0
 800d2d2:	701a      	strb	r2, [r3, #0]
 800d2d4:	003b      	movs	r3, r7
 800d2d6:	1c0a      	adds	r2, r1, #0
 800d2d8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2da:	260f      	movs	r6, #15
 800d2dc:	19bb      	adds	r3, r7, r6
 800d2de:	2200      	movs	r2, #0
 800d2e0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2e2:	250e      	movs	r5, #14
 800d2e4:	197b      	adds	r3, r7, r5
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d2ea:	687a      	ldr	r2, [r7, #4]
 800d2ec:	23b0      	movs	r3, #176	; 0xb0
 800d2ee:	009b      	lsls	r3, r3, #2
 800d2f0:	58d0      	ldr	r0, [r2, r3]
 800d2f2:	19bc      	adds	r4, r7, r6
 800d2f4:	1cbb      	adds	r3, r7, #2
 800d2f6:	781d      	ldrb	r5, [r3, #0]
 800d2f8:	003b      	movs	r3, r7
 800d2fa:	881a      	ldrh	r2, [r3, #0]
 800d2fc:	1cfb      	adds	r3, r7, #3
 800d2fe:	7819      	ldrb	r1, [r3, #0]
 800d300:	002b      	movs	r3, r5
 800d302:	f7f7 fbc0 	bl	8004a86 <HAL_PCD_EP_Open>
 800d306:	0003      	movs	r3, r0
 800d308:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d30a:	250e      	movs	r5, #14
 800d30c:	197c      	adds	r4, r7, r5
 800d30e:	19bb      	adds	r3, r7, r6
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	0018      	movs	r0, r3
 800d314:	f000 f985 	bl	800d622 <USBD_Get_USB_Status>
 800d318:	0003      	movs	r3, r0
 800d31a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d31c:	197b      	adds	r3, r7, r5
 800d31e:	781b      	ldrb	r3, [r3, #0]
}
 800d320:	0018      	movs	r0, r3
 800d322:	46bd      	mov	sp, r7
 800d324:	b005      	add	sp, #20
 800d326:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d328 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d32a:	b085      	sub	sp, #20
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	000a      	movs	r2, r1
 800d332:	1cfb      	adds	r3, r7, #3
 800d334:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d336:	210f      	movs	r1, #15
 800d338:	187b      	adds	r3, r7, r1
 800d33a:	2200      	movs	r2, #0
 800d33c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d33e:	260e      	movs	r6, #14
 800d340:	19bb      	adds	r3, r7, r6
 800d342:	2200      	movs	r2, #0
 800d344:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d346:	687a      	ldr	r2, [r7, #4]
 800d348:	23b0      	movs	r3, #176	; 0xb0
 800d34a:	009b      	lsls	r3, r3, #2
 800d34c:	58d2      	ldr	r2, [r2, r3]
 800d34e:	000d      	movs	r5, r1
 800d350:	187c      	adds	r4, r7, r1
 800d352:	1cfb      	adds	r3, r7, #3
 800d354:	781b      	ldrb	r3, [r3, #0]
 800d356:	0019      	movs	r1, r3
 800d358:	0010      	movs	r0, r2
 800d35a:	f7f7 fc0c 	bl	8004b76 <HAL_PCD_EP_Close>
 800d35e:	0003      	movs	r3, r0
 800d360:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d362:	19bc      	adds	r4, r7, r6
 800d364:	197b      	adds	r3, r7, r5
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	0018      	movs	r0, r3
 800d36a:	f000 f95a 	bl	800d622 <USBD_Get_USB_Status>
 800d36e:	0003      	movs	r3, r0
 800d370:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d372:	19bb      	adds	r3, r7, r6
 800d374:	781b      	ldrb	r3, [r3, #0]
}
 800d376:	0018      	movs	r0, r3
 800d378:	46bd      	mov	sp, r7
 800d37a:	b005      	add	sp, #20
 800d37c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d37e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d37e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d380:	b085      	sub	sp, #20
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
 800d386:	000a      	movs	r2, r1
 800d388:	1cfb      	adds	r3, r7, #3
 800d38a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d38c:	210f      	movs	r1, #15
 800d38e:	187b      	adds	r3, r7, r1
 800d390:	2200      	movs	r2, #0
 800d392:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d394:	260e      	movs	r6, #14
 800d396:	19bb      	adds	r3, r7, r6
 800d398:	2200      	movs	r2, #0
 800d39a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d39c:	687a      	ldr	r2, [r7, #4]
 800d39e:	23b0      	movs	r3, #176	; 0xb0
 800d3a0:	009b      	lsls	r3, r3, #2
 800d3a2:	58d2      	ldr	r2, [r2, r3]
 800d3a4:	000d      	movs	r5, r1
 800d3a6:	187c      	adds	r4, r7, r1
 800d3a8:	1cfb      	adds	r3, r7, #3
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	0019      	movs	r1, r3
 800d3ae:	0010      	movs	r0, r2
 800d3b0:	f7f7 fcd8 	bl	8004d64 <HAL_PCD_EP_SetStall>
 800d3b4:	0003      	movs	r3, r0
 800d3b6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3b8:	19bc      	adds	r4, r7, r6
 800d3ba:	197b      	adds	r3, r7, r5
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	0018      	movs	r0, r3
 800d3c0:	f000 f92f 	bl	800d622 <USBD_Get_USB_Status>
 800d3c4:	0003      	movs	r3, r0
 800d3c6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d3c8:	19bb      	adds	r3, r7, r6
 800d3ca:	781b      	ldrb	r3, [r3, #0]
}
 800d3cc:	0018      	movs	r0, r3
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	b005      	add	sp, #20
 800d3d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d3d4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3d6:	b085      	sub	sp, #20
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	000a      	movs	r2, r1
 800d3de:	1cfb      	adds	r3, r7, #3
 800d3e0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3e2:	210f      	movs	r1, #15
 800d3e4:	187b      	adds	r3, r7, r1
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3ea:	260e      	movs	r6, #14
 800d3ec:	19bb      	adds	r3, r7, r6
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d3f2:	687a      	ldr	r2, [r7, #4]
 800d3f4:	23b0      	movs	r3, #176	; 0xb0
 800d3f6:	009b      	lsls	r3, r3, #2
 800d3f8:	58d2      	ldr	r2, [r2, r3]
 800d3fa:	000d      	movs	r5, r1
 800d3fc:	187c      	adds	r4, r7, r1
 800d3fe:	1cfb      	adds	r3, r7, #3
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	0019      	movs	r1, r3
 800d404:	0010      	movs	r0, r2
 800d406:	f7f7 fd09 	bl	8004e1c <HAL_PCD_EP_ClrStall>
 800d40a:	0003      	movs	r3, r0
 800d40c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d40e:	19bc      	adds	r4, r7, r6
 800d410:	197b      	adds	r3, r7, r5
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	0018      	movs	r0, r3
 800d416:	f000 f904 	bl	800d622 <USBD_Get_USB_Status>
 800d41a:	0003      	movs	r3, r0
 800d41c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d41e:	19bb      	adds	r3, r7, r6
 800d420:	781b      	ldrb	r3, [r3, #0]
}
 800d422:	0018      	movs	r0, r3
 800d424:	46bd      	mov	sp, r7
 800d426:	b005      	add	sp, #20
 800d428:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d42a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b084      	sub	sp, #16
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
 800d432:	000a      	movs	r2, r1
 800d434:	1cfb      	adds	r3, r7, #3
 800d436:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d438:	687a      	ldr	r2, [r7, #4]
 800d43a:	23b0      	movs	r3, #176	; 0xb0
 800d43c:	009b      	lsls	r3, r3, #2
 800d43e:	58d3      	ldr	r3, [r2, r3]
 800d440:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d442:	1cfb      	adds	r3, r7, #3
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	b25b      	sxtb	r3, r3
 800d448:	2b00      	cmp	r3, #0
 800d44a:	da0d      	bge.n	800d468 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d44c:	1cfb      	adds	r3, r7, #3
 800d44e:	781b      	ldrb	r3, [r3, #0]
 800d450:	227f      	movs	r2, #127	; 0x7f
 800d452:	4013      	ands	r3, r2
 800d454:	68f9      	ldr	r1, [r7, #12]
 800d456:	1c5a      	adds	r2, r3, #1
 800d458:	0013      	movs	r3, r2
 800d45a:	009b      	lsls	r3, r3, #2
 800d45c:	189b      	adds	r3, r3, r2
 800d45e:	00db      	lsls	r3, r3, #3
 800d460:	18cb      	adds	r3, r1, r3
 800d462:	3302      	adds	r3, #2
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	e00d      	b.n	800d484 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d468:	1cfb      	adds	r3, r7, #3
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	227f      	movs	r2, #127	; 0x7f
 800d46e:	401a      	ands	r2, r3
 800d470:	68f8      	ldr	r0, [r7, #12]
 800d472:	23b5      	movs	r3, #181	; 0xb5
 800d474:	0059      	lsls	r1, r3, #1
 800d476:	0013      	movs	r3, r2
 800d478:	009b      	lsls	r3, r3, #2
 800d47a:	189b      	adds	r3, r3, r2
 800d47c:	00db      	lsls	r3, r3, #3
 800d47e:	18c3      	adds	r3, r0, r3
 800d480:	185b      	adds	r3, r3, r1
 800d482:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d484:	0018      	movs	r0, r3
 800d486:	46bd      	mov	sp, r7
 800d488:	b004      	add	sp, #16
 800d48a:	bd80      	pop	{r7, pc}

0800d48c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d48c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d48e:	b085      	sub	sp, #20
 800d490:	af00      	add	r7, sp, #0
 800d492:	6078      	str	r0, [r7, #4]
 800d494:	000a      	movs	r2, r1
 800d496:	1cfb      	adds	r3, r7, #3
 800d498:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d49a:	210f      	movs	r1, #15
 800d49c:	187b      	adds	r3, r7, r1
 800d49e:	2200      	movs	r2, #0
 800d4a0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4a2:	260e      	movs	r6, #14
 800d4a4:	19bb      	adds	r3, r7, r6
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d4aa:	687a      	ldr	r2, [r7, #4]
 800d4ac:	23b0      	movs	r3, #176	; 0xb0
 800d4ae:	009b      	lsls	r3, r3, #2
 800d4b0:	58d2      	ldr	r2, [r2, r3]
 800d4b2:	000d      	movs	r5, r1
 800d4b4:	187c      	adds	r4, r7, r1
 800d4b6:	1cfb      	adds	r3, r7, #3
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	0019      	movs	r1, r3
 800d4bc:	0010      	movs	r0, r2
 800d4be:	f7f7 fab7 	bl	8004a30 <HAL_PCD_SetAddress>
 800d4c2:	0003      	movs	r3, r0
 800d4c4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4c6:	19bc      	adds	r4, r7, r6
 800d4c8:	197b      	adds	r3, r7, r5
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	0018      	movs	r0, r3
 800d4ce:	f000 f8a8 	bl	800d622 <USBD_Get_USB_Status>
 800d4d2:	0003      	movs	r3, r0
 800d4d4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d4d6:	19bb      	adds	r3, r7, r6
 800d4d8:	781b      	ldrb	r3, [r3, #0]
}
 800d4da:	0018      	movs	r0, r3
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	b005      	add	sp, #20
 800d4e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d4e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d4e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4e4:	b087      	sub	sp, #28
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	60f8      	str	r0, [r7, #12]
 800d4ea:	0008      	movs	r0, r1
 800d4ec:	607a      	str	r2, [r7, #4]
 800d4ee:	0019      	movs	r1, r3
 800d4f0:	230b      	movs	r3, #11
 800d4f2:	18fb      	adds	r3, r7, r3
 800d4f4:	1c02      	adds	r2, r0, #0
 800d4f6:	701a      	strb	r2, [r3, #0]
 800d4f8:	2408      	movs	r4, #8
 800d4fa:	193b      	adds	r3, r7, r4
 800d4fc:	1c0a      	adds	r2, r1, #0
 800d4fe:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d500:	2117      	movs	r1, #23
 800d502:	187b      	adds	r3, r7, r1
 800d504:	2200      	movs	r2, #0
 800d506:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d508:	2516      	movs	r5, #22
 800d50a:	197b      	adds	r3, r7, r5
 800d50c:	2200      	movs	r2, #0
 800d50e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d510:	68fa      	ldr	r2, [r7, #12]
 800d512:	23b0      	movs	r3, #176	; 0xb0
 800d514:	009b      	lsls	r3, r3, #2
 800d516:	58d0      	ldr	r0, [r2, r3]
 800d518:	193b      	adds	r3, r7, r4
 800d51a:	881d      	ldrh	r5, [r3, #0]
 800d51c:	000e      	movs	r6, r1
 800d51e:	187c      	adds	r4, r7, r1
 800d520:	687a      	ldr	r2, [r7, #4]
 800d522:	230b      	movs	r3, #11
 800d524:	18fb      	adds	r3, r7, r3
 800d526:	7819      	ldrb	r1, [r3, #0]
 800d528:	002b      	movs	r3, r5
 800d52a:	f7f7 fbd2 	bl	8004cd2 <HAL_PCD_EP_Transmit>
 800d52e:	0003      	movs	r3, r0
 800d530:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d532:	2516      	movs	r5, #22
 800d534:	197c      	adds	r4, r7, r5
 800d536:	19bb      	adds	r3, r7, r6
 800d538:	781b      	ldrb	r3, [r3, #0]
 800d53a:	0018      	movs	r0, r3
 800d53c:	f000 f871 	bl	800d622 <USBD_Get_USB_Status>
 800d540:	0003      	movs	r3, r0
 800d542:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d544:	197b      	adds	r3, r7, r5
 800d546:	781b      	ldrb	r3, [r3, #0]
}
 800d548:	0018      	movs	r0, r3
 800d54a:	46bd      	mov	sp, r7
 800d54c:	b007      	add	sp, #28
 800d54e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d550 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d550:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d552:	b087      	sub	sp, #28
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	0008      	movs	r0, r1
 800d55a:	607a      	str	r2, [r7, #4]
 800d55c:	0019      	movs	r1, r3
 800d55e:	230b      	movs	r3, #11
 800d560:	18fb      	adds	r3, r7, r3
 800d562:	1c02      	adds	r2, r0, #0
 800d564:	701a      	strb	r2, [r3, #0]
 800d566:	2408      	movs	r4, #8
 800d568:	193b      	adds	r3, r7, r4
 800d56a:	1c0a      	adds	r2, r1, #0
 800d56c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d56e:	2117      	movs	r1, #23
 800d570:	187b      	adds	r3, r7, r1
 800d572:	2200      	movs	r2, #0
 800d574:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d576:	2516      	movs	r5, #22
 800d578:	197b      	adds	r3, r7, r5
 800d57a:	2200      	movs	r2, #0
 800d57c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d57e:	68fa      	ldr	r2, [r7, #12]
 800d580:	23b0      	movs	r3, #176	; 0xb0
 800d582:	009b      	lsls	r3, r3, #2
 800d584:	58d0      	ldr	r0, [r2, r3]
 800d586:	193b      	adds	r3, r7, r4
 800d588:	881d      	ldrh	r5, [r3, #0]
 800d58a:	000e      	movs	r6, r1
 800d58c:	187c      	adds	r4, r7, r1
 800d58e:	687a      	ldr	r2, [r7, #4]
 800d590:	230b      	movs	r3, #11
 800d592:	18fb      	adds	r3, r7, r3
 800d594:	7819      	ldrb	r1, [r3, #0]
 800d596:	002b      	movs	r3, r5
 800d598:	f7f7 fb3e 	bl	8004c18 <HAL_PCD_EP_Receive>
 800d59c:	0003      	movs	r3, r0
 800d59e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5a0:	2516      	movs	r5, #22
 800d5a2:	197c      	adds	r4, r7, r5
 800d5a4:	19bb      	adds	r3, r7, r6
 800d5a6:	781b      	ldrb	r3, [r3, #0]
 800d5a8:	0018      	movs	r0, r3
 800d5aa:	f000 f83a 	bl	800d622 <USBD_Get_USB_Status>
 800d5ae:	0003      	movs	r3, r0
 800d5b0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d5b2:	197b      	adds	r3, r7, r5
 800d5b4:	781b      	ldrb	r3, [r3, #0]
}
 800d5b6:	0018      	movs	r0, r3
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	b007      	add	sp, #28
 800d5bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d5be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5be:	b580      	push	{r7, lr}
 800d5c0:	b082      	sub	sp, #8
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
 800d5c6:	000a      	movs	r2, r1
 800d5c8:	1cfb      	adds	r3, r7, #3
 800d5ca:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d5cc:	687a      	ldr	r2, [r7, #4]
 800d5ce:	23b0      	movs	r3, #176	; 0xb0
 800d5d0:	009b      	lsls	r3, r3, #2
 800d5d2:	58d2      	ldr	r2, [r2, r3]
 800d5d4:	1cfb      	adds	r3, r7, #3
 800d5d6:	781b      	ldrb	r3, [r3, #0]
 800d5d8:	0019      	movs	r1, r3
 800d5da:	0010      	movs	r0, r2
 800d5dc:	f7f7 fb60 	bl	8004ca0 <HAL_PCD_EP_GetRxCount>
 800d5e0:	0003      	movs	r3, r0
}
 800d5e2:	0018      	movs	r0, r3
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	b002      	add	sp, #8
 800d5e8:	bd80      	pop	{r7, pc}
	...

0800d5ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b082      	sub	sp, #8
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d5f4:	4b02      	ldr	r3, [pc, #8]	; (800d600 <USBD_static_malloc+0x14>)
}
 800d5f6:	0018      	movs	r0, r3
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	b002      	add	sp, #8
 800d5fc:	bd80      	pop	{r7, pc}
 800d5fe:	46c0      	nop			; (mov r8, r8)
 800d600:	200013ac 	.word	0x200013ac

0800d604 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]

}
 800d60c:	46c0      	nop			; (mov r8, r8)
 800d60e:	46bd      	mov	sp, r7
 800d610:	b002      	add	sp, #8
 800d612:	bd80      	pop	{r7, pc}

0800d614 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d618:	f7f3 fe88 	bl	800132c <SystemClock_Config>
}
 800d61c:	46c0      	nop			; (mov r8, r8)
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}

0800d622 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d622:	b580      	push	{r7, lr}
 800d624:	b084      	sub	sp, #16
 800d626:	af00      	add	r7, sp, #0
 800d628:	0002      	movs	r2, r0
 800d62a:	1dfb      	adds	r3, r7, #7
 800d62c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d62e:	230f      	movs	r3, #15
 800d630:	18fb      	adds	r3, r7, r3
 800d632:	2200      	movs	r2, #0
 800d634:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800d636:	1dfb      	adds	r3, r7, #7
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	2b03      	cmp	r3, #3
 800d63c:	d017      	beq.n	800d66e <USBD_Get_USB_Status+0x4c>
 800d63e:	dc1b      	bgt.n	800d678 <USBD_Get_USB_Status+0x56>
 800d640:	2b02      	cmp	r3, #2
 800d642:	d00f      	beq.n	800d664 <USBD_Get_USB_Status+0x42>
 800d644:	dc18      	bgt.n	800d678 <USBD_Get_USB_Status+0x56>
 800d646:	2b00      	cmp	r3, #0
 800d648:	d002      	beq.n	800d650 <USBD_Get_USB_Status+0x2e>
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d005      	beq.n	800d65a <USBD_Get_USB_Status+0x38>
 800d64e:	e013      	b.n	800d678 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d650:	230f      	movs	r3, #15
 800d652:	18fb      	adds	r3, r7, r3
 800d654:	2200      	movs	r2, #0
 800d656:	701a      	strb	r2, [r3, #0]
    break;
 800d658:	e013      	b.n	800d682 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d65a:	230f      	movs	r3, #15
 800d65c:	18fb      	adds	r3, r7, r3
 800d65e:	2202      	movs	r2, #2
 800d660:	701a      	strb	r2, [r3, #0]
    break;
 800d662:	e00e      	b.n	800d682 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d664:	230f      	movs	r3, #15
 800d666:	18fb      	adds	r3, r7, r3
 800d668:	2201      	movs	r2, #1
 800d66a:	701a      	strb	r2, [r3, #0]
    break;
 800d66c:	e009      	b.n	800d682 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d66e:	230f      	movs	r3, #15
 800d670:	18fb      	adds	r3, r7, r3
 800d672:	2202      	movs	r2, #2
 800d674:	701a      	strb	r2, [r3, #0]
    break;
 800d676:	e004      	b.n	800d682 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800d678:	230f      	movs	r3, #15
 800d67a:	18fb      	adds	r3, r7, r3
 800d67c:	2202      	movs	r2, #2
 800d67e:	701a      	strb	r2, [r3, #0]
    break;
 800d680:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800d682:	230f      	movs	r3, #15
 800d684:	18fb      	adds	r3, r7, r3
 800d686:	781b      	ldrb	r3, [r3, #0]
}
 800d688:	0018      	movs	r0, r3
 800d68a:	46bd      	mov	sp, r7
 800d68c:	b004      	add	sp, #16
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <__errno>:
 800d690:	4b01      	ldr	r3, [pc, #4]	; (800d698 <__errno+0x8>)
 800d692:	6818      	ldr	r0, [r3, #0]
 800d694:	4770      	bx	lr
 800d696:	46c0      	nop			; (mov r8, r8)
 800d698:	2000017c 	.word	0x2000017c

0800d69c <__libc_init_array>:
 800d69c:	b570      	push	{r4, r5, r6, lr}
 800d69e:	2600      	movs	r6, #0
 800d6a0:	4d0c      	ldr	r5, [pc, #48]	; (800d6d4 <__libc_init_array+0x38>)
 800d6a2:	4c0d      	ldr	r4, [pc, #52]	; (800d6d8 <__libc_init_array+0x3c>)
 800d6a4:	1b64      	subs	r4, r4, r5
 800d6a6:	10a4      	asrs	r4, r4, #2
 800d6a8:	42a6      	cmp	r6, r4
 800d6aa:	d109      	bne.n	800d6c0 <__libc_init_array+0x24>
 800d6ac:	2600      	movs	r6, #0
 800d6ae:	f000 fc9f 	bl	800dff0 <_init>
 800d6b2:	4d0a      	ldr	r5, [pc, #40]	; (800d6dc <__libc_init_array+0x40>)
 800d6b4:	4c0a      	ldr	r4, [pc, #40]	; (800d6e0 <__libc_init_array+0x44>)
 800d6b6:	1b64      	subs	r4, r4, r5
 800d6b8:	10a4      	asrs	r4, r4, #2
 800d6ba:	42a6      	cmp	r6, r4
 800d6bc:	d105      	bne.n	800d6ca <__libc_init_array+0x2e>
 800d6be:	bd70      	pop	{r4, r5, r6, pc}
 800d6c0:	00b3      	lsls	r3, r6, #2
 800d6c2:	58eb      	ldr	r3, [r5, r3]
 800d6c4:	4798      	blx	r3
 800d6c6:	3601      	adds	r6, #1
 800d6c8:	e7ee      	b.n	800d6a8 <__libc_init_array+0xc>
 800d6ca:	00b3      	lsls	r3, r6, #2
 800d6cc:	58eb      	ldr	r3, [r5, r3]
 800d6ce:	4798      	blx	r3
 800d6d0:	3601      	adds	r6, #1
 800d6d2:	e7f2      	b.n	800d6ba <__libc_init_array+0x1e>
 800d6d4:	0800e37c 	.word	0x0800e37c
 800d6d8:	0800e37c 	.word	0x0800e37c
 800d6dc:	0800e37c 	.word	0x0800e37c
 800d6e0:	0800e380 	.word	0x0800e380

0800d6e4 <malloc>:
 800d6e4:	b510      	push	{r4, lr}
 800d6e6:	4b03      	ldr	r3, [pc, #12]	; (800d6f4 <malloc+0x10>)
 800d6e8:	0001      	movs	r1, r0
 800d6ea:	6818      	ldr	r0, [r3, #0]
 800d6ec:	f000 f88c 	bl	800d808 <_malloc_r>
 800d6f0:	bd10      	pop	{r4, pc}
 800d6f2:	46c0      	nop			; (mov r8, r8)
 800d6f4:	2000017c 	.word	0x2000017c

0800d6f8 <free>:
 800d6f8:	b510      	push	{r4, lr}
 800d6fa:	4b03      	ldr	r3, [pc, #12]	; (800d708 <free+0x10>)
 800d6fc:	0001      	movs	r1, r0
 800d6fe:	6818      	ldr	r0, [r3, #0]
 800d700:	f000 f816 	bl	800d730 <_free_r>
 800d704:	bd10      	pop	{r4, pc}
 800d706:	46c0      	nop			; (mov r8, r8)
 800d708:	2000017c 	.word	0x2000017c

0800d70c <memcpy>:
 800d70c:	2300      	movs	r3, #0
 800d70e:	b510      	push	{r4, lr}
 800d710:	429a      	cmp	r2, r3
 800d712:	d100      	bne.n	800d716 <memcpy+0xa>
 800d714:	bd10      	pop	{r4, pc}
 800d716:	5ccc      	ldrb	r4, [r1, r3]
 800d718:	54c4      	strb	r4, [r0, r3]
 800d71a:	3301      	adds	r3, #1
 800d71c:	e7f8      	b.n	800d710 <memcpy+0x4>

0800d71e <memset>:
 800d71e:	0003      	movs	r3, r0
 800d720:	1882      	adds	r2, r0, r2
 800d722:	4293      	cmp	r3, r2
 800d724:	d100      	bne.n	800d728 <memset+0xa>
 800d726:	4770      	bx	lr
 800d728:	7019      	strb	r1, [r3, #0]
 800d72a:	3301      	adds	r3, #1
 800d72c:	e7f9      	b.n	800d722 <memset+0x4>
	...

0800d730 <_free_r>:
 800d730:	b570      	push	{r4, r5, r6, lr}
 800d732:	0005      	movs	r5, r0
 800d734:	2900      	cmp	r1, #0
 800d736:	d010      	beq.n	800d75a <_free_r+0x2a>
 800d738:	1f0c      	subs	r4, r1, #4
 800d73a:	6823      	ldr	r3, [r4, #0]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	da00      	bge.n	800d742 <_free_r+0x12>
 800d740:	18e4      	adds	r4, r4, r3
 800d742:	0028      	movs	r0, r5
 800d744:	f000 f908 	bl	800d958 <__malloc_lock>
 800d748:	4a1d      	ldr	r2, [pc, #116]	; (800d7c0 <_free_r+0x90>)
 800d74a:	6813      	ldr	r3, [r2, #0]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d105      	bne.n	800d75c <_free_r+0x2c>
 800d750:	6063      	str	r3, [r4, #4]
 800d752:	6014      	str	r4, [r2, #0]
 800d754:	0028      	movs	r0, r5
 800d756:	f000 f907 	bl	800d968 <__malloc_unlock>
 800d75a:	bd70      	pop	{r4, r5, r6, pc}
 800d75c:	42a3      	cmp	r3, r4
 800d75e:	d908      	bls.n	800d772 <_free_r+0x42>
 800d760:	6821      	ldr	r1, [r4, #0]
 800d762:	1860      	adds	r0, r4, r1
 800d764:	4283      	cmp	r3, r0
 800d766:	d1f3      	bne.n	800d750 <_free_r+0x20>
 800d768:	6818      	ldr	r0, [r3, #0]
 800d76a:	685b      	ldr	r3, [r3, #4]
 800d76c:	1841      	adds	r1, r0, r1
 800d76e:	6021      	str	r1, [r4, #0]
 800d770:	e7ee      	b.n	800d750 <_free_r+0x20>
 800d772:	001a      	movs	r2, r3
 800d774:	685b      	ldr	r3, [r3, #4]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d001      	beq.n	800d77e <_free_r+0x4e>
 800d77a:	42a3      	cmp	r3, r4
 800d77c:	d9f9      	bls.n	800d772 <_free_r+0x42>
 800d77e:	6811      	ldr	r1, [r2, #0]
 800d780:	1850      	adds	r0, r2, r1
 800d782:	42a0      	cmp	r0, r4
 800d784:	d10b      	bne.n	800d79e <_free_r+0x6e>
 800d786:	6820      	ldr	r0, [r4, #0]
 800d788:	1809      	adds	r1, r1, r0
 800d78a:	1850      	adds	r0, r2, r1
 800d78c:	6011      	str	r1, [r2, #0]
 800d78e:	4283      	cmp	r3, r0
 800d790:	d1e0      	bne.n	800d754 <_free_r+0x24>
 800d792:	6818      	ldr	r0, [r3, #0]
 800d794:	685b      	ldr	r3, [r3, #4]
 800d796:	1841      	adds	r1, r0, r1
 800d798:	6011      	str	r1, [r2, #0]
 800d79a:	6053      	str	r3, [r2, #4]
 800d79c:	e7da      	b.n	800d754 <_free_r+0x24>
 800d79e:	42a0      	cmp	r0, r4
 800d7a0:	d902      	bls.n	800d7a8 <_free_r+0x78>
 800d7a2:	230c      	movs	r3, #12
 800d7a4:	602b      	str	r3, [r5, #0]
 800d7a6:	e7d5      	b.n	800d754 <_free_r+0x24>
 800d7a8:	6821      	ldr	r1, [r4, #0]
 800d7aa:	1860      	adds	r0, r4, r1
 800d7ac:	4283      	cmp	r3, r0
 800d7ae:	d103      	bne.n	800d7b8 <_free_r+0x88>
 800d7b0:	6818      	ldr	r0, [r3, #0]
 800d7b2:	685b      	ldr	r3, [r3, #4]
 800d7b4:	1841      	adds	r1, r0, r1
 800d7b6:	6021      	str	r1, [r4, #0]
 800d7b8:	6063      	str	r3, [r4, #4]
 800d7ba:	6054      	str	r4, [r2, #4]
 800d7bc:	e7ca      	b.n	800d754 <_free_r+0x24>
 800d7be:	46c0      	nop			; (mov r8, r8)
 800d7c0:	200015cc 	.word	0x200015cc

0800d7c4 <sbrk_aligned>:
 800d7c4:	b570      	push	{r4, r5, r6, lr}
 800d7c6:	4e0f      	ldr	r6, [pc, #60]	; (800d804 <sbrk_aligned+0x40>)
 800d7c8:	000d      	movs	r5, r1
 800d7ca:	6831      	ldr	r1, [r6, #0]
 800d7cc:	0004      	movs	r4, r0
 800d7ce:	2900      	cmp	r1, #0
 800d7d0:	d102      	bne.n	800d7d8 <sbrk_aligned+0x14>
 800d7d2:	f000 f88f 	bl	800d8f4 <_sbrk_r>
 800d7d6:	6030      	str	r0, [r6, #0]
 800d7d8:	0029      	movs	r1, r5
 800d7da:	0020      	movs	r0, r4
 800d7dc:	f000 f88a 	bl	800d8f4 <_sbrk_r>
 800d7e0:	1c43      	adds	r3, r0, #1
 800d7e2:	d00a      	beq.n	800d7fa <sbrk_aligned+0x36>
 800d7e4:	2303      	movs	r3, #3
 800d7e6:	1cc5      	adds	r5, r0, #3
 800d7e8:	439d      	bics	r5, r3
 800d7ea:	42a8      	cmp	r0, r5
 800d7ec:	d007      	beq.n	800d7fe <sbrk_aligned+0x3a>
 800d7ee:	1a29      	subs	r1, r5, r0
 800d7f0:	0020      	movs	r0, r4
 800d7f2:	f000 f87f 	bl	800d8f4 <_sbrk_r>
 800d7f6:	1c43      	adds	r3, r0, #1
 800d7f8:	d101      	bne.n	800d7fe <sbrk_aligned+0x3a>
 800d7fa:	2501      	movs	r5, #1
 800d7fc:	426d      	negs	r5, r5
 800d7fe:	0028      	movs	r0, r5
 800d800:	bd70      	pop	{r4, r5, r6, pc}
 800d802:	46c0      	nop			; (mov r8, r8)
 800d804:	200015d0 	.word	0x200015d0

0800d808 <_malloc_r>:
 800d808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d80a:	2203      	movs	r2, #3
 800d80c:	1ccb      	adds	r3, r1, #3
 800d80e:	4393      	bics	r3, r2
 800d810:	3308      	adds	r3, #8
 800d812:	0006      	movs	r6, r0
 800d814:	001f      	movs	r7, r3
 800d816:	2b0c      	cmp	r3, #12
 800d818:	d232      	bcs.n	800d880 <_malloc_r+0x78>
 800d81a:	270c      	movs	r7, #12
 800d81c:	42b9      	cmp	r1, r7
 800d81e:	d831      	bhi.n	800d884 <_malloc_r+0x7c>
 800d820:	0030      	movs	r0, r6
 800d822:	f000 f899 	bl	800d958 <__malloc_lock>
 800d826:	4d32      	ldr	r5, [pc, #200]	; (800d8f0 <_malloc_r+0xe8>)
 800d828:	682b      	ldr	r3, [r5, #0]
 800d82a:	001c      	movs	r4, r3
 800d82c:	2c00      	cmp	r4, #0
 800d82e:	d12e      	bne.n	800d88e <_malloc_r+0x86>
 800d830:	0039      	movs	r1, r7
 800d832:	0030      	movs	r0, r6
 800d834:	f7ff ffc6 	bl	800d7c4 <sbrk_aligned>
 800d838:	0004      	movs	r4, r0
 800d83a:	1c43      	adds	r3, r0, #1
 800d83c:	d11e      	bne.n	800d87c <_malloc_r+0x74>
 800d83e:	682c      	ldr	r4, [r5, #0]
 800d840:	0025      	movs	r5, r4
 800d842:	2d00      	cmp	r5, #0
 800d844:	d14a      	bne.n	800d8dc <_malloc_r+0xd4>
 800d846:	6823      	ldr	r3, [r4, #0]
 800d848:	0029      	movs	r1, r5
 800d84a:	18e3      	adds	r3, r4, r3
 800d84c:	0030      	movs	r0, r6
 800d84e:	9301      	str	r3, [sp, #4]
 800d850:	f000 f850 	bl	800d8f4 <_sbrk_r>
 800d854:	9b01      	ldr	r3, [sp, #4]
 800d856:	4283      	cmp	r3, r0
 800d858:	d143      	bne.n	800d8e2 <_malloc_r+0xda>
 800d85a:	6823      	ldr	r3, [r4, #0]
 800d85c:	3703      	adds	r7, #3
 800d85e:	1aff      	subs	r7, r7, r3
 800d860:	2303      	movs	r3, #3
 800d862:	439f      	bics	r7, r3
 800d864:	3708      	adds	r7, #8
 800d866:	2f0c      	cmp	r7, #12
 800d868:	d200      	bcs.n	800d86c <_malloc_r+0x64>
 800d86a:	270c      	movs	r7, #12
 800d86c:	0039      	movs	r1, r7
 800d86e:	0030      	movs	r0, r6
 800d870:	f7ff ffa8 	bl	800d7c4 <sbrk_aligned>
 800d874:	1c43      	adds	r3, r0, #1
 800d876:	d034      	beq.n	800d8e2 <_malloc_r+0xda>
 800d878:	6823      	ldr	r3, [r4, #0]
 800d87a:	19df      	adds	r7, r3, r7
 800d87c:	6027      	str	r7, [r4, #0]
 800d87e:	e013      	b.n	800d8a8 <_malloc_r+0xa0>
 800d880:	2b00      	cmp	r3, #0
 800d882:	dacb      	bge.n	800d81c <_malloc_r+0x14>
 800d884:	230c      	movs	r3, #12
 800d886:	2500      	movs	r5, #0
 800d888:	6033      	str	r3, [r6, #0]
 800d88a:	0028      	movs	r0, r5
 800d88c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d88e:	6822      	ldr	r2, [r4, #0]
 800d890:	1bd1      	subs	r1, r2, r7
 800d892:	d420      	bmi.n	800d8d6 <_malloc_r+0xce>
 800d894:	290b      	cmp	r1, #11
 800d896:	d917      	bls.n	800d8c8 <_malloc_r+0xc0>
 800d898:	19e2      	adds	r2, r4, r7
 800d89a:	6027      	str	r7, [r4, #0]
 800d89c:	42a3      	cmp	r3, r4
 800d89e:	d111      	bne.n	800d8c4 <_malloc_r+0xbc>
 800d8a0:	602a      	str	r2, [r5, #0]
 800d8a2:	6863      	ldr	r3, [r4, #4]
 800d8a4:	6011      	str	r1, [r2, #0]
 800d8a6:	6053      	str	r3, [r2, #4]
 800d8a8:	0030      	movs	r0, r6
 800d8aa:	0025      	movs	r5, r4
 800d8ac:	f000 f85c 	bl	800d968 <__malloc_unlock>
 800d8b0:	2207      	movs	r2, #7
 800d8b2:	350b      	adds	r5, #11
 800d8b4:	1d23      	adds	r3, r4, #4
 800d8b6:	4395      	bics	r5, r2
 800d8b8:	1aea      	subs	r2, r5, r3
 800d8ba:	429d      	cmp	r5, r3
 800d8bc:	d0e5      	beq.n	800d88a <_malloc_r+0x82>
 800d8be:	1b5b      	subs	r3, r3, r5
 800d8c0:	50a3      	str	r3, [r4, r2]
 800d8c2:	e7e2      	b.n	800d88a <_malloc_r+0x82>
 800d8c4:	605a      	str	r2, [r3, #4]
 800d8c6:	e7ec      	b.n	800d8a2 <_malloc_r+0x9a>
 800d8c8:	6862      	ldr	r2, [r4, #4]
 800d8ca:	42a3      	cmp	r3, r4
 800d8cc:	d101      	bne.n	800d8d2 <_malloc_r+0xca>
 800d8ce:	602a      	str	r2, [r5, #0]
 800d8d0:	e7ea      	b.n	800d8a8 <_malloc_r+0xa0>
 800d8d2:	605a      	str	r2, [r3, #4]
 800d8d4:	e7e8      	b.n	800d8a8 <_malloc_r+0xa0>
 800d8d6:	0023      	movs	r3, r4
 800d8d8:	6864      	ldr	r4, [r4, #4]
 800d8da:	e7a7      	b.n	800d82c <_malloc_r+0x24>
 800d8dc:	002c      	movs	r4, r5
 800d8de:	686d      	ldr	r5, [r5, #4]
 800d8e0:	e7af      	b.n	800d842 <_malloc_r+0x3a>
 800d8e2:	230c      	movs	r3, #12
 800d8e4:	0030      	movs	r0, r6
 800d8e6:	6033      	str	r3, [r6, #0]
 800d8e8:	f000 f83e 	bl	800d968 <__malloc_unlock>
 800d8ec:	e7cd      	b.n	800d88a <_malloc_r+0x82>
 800d8ee:	46c0      	nop			; (mov r8, r8)
 800d8f0:	200015cc 	.word	0x200015cc

0800d8f4 <_sbrk_r>:
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	b570      	push	{r4, r5, r6, lr}
 800d8f8:	4d06      	ldr	r5, [pc, #24]	; (800d914 <_sbrk_r+0x20>)
 800d8fa:	0004      	movs	r4, r0
 800d8fc:	0008      	movs	r0, r1
 800d8fe:	602b      	str	r3, [r5, #0]
 800d900:	f7f5 f974 	bl	8002bec <_sbrk>
 800d904:	1c43      	adds	r3, r0, #1
 800d906:	d103      	bne.n	800d910 <_sbrk_r+0x1c>
 800d908:	682b      	ldr	r3, [r5, #0]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d000      	beq.n	800d910 <_sbrk_r+0x1c>
 800d90e:	6023      	str	r3, [r4, #0]
 800d910:	bd70      	pop	{r4, r5, r6, pc}
 800d912:	46c0      	nop			; (mov r8, r8)
 800d914:	200015d4 	.word	0x200015d4

0800d918 <siprintf>:
 800d918:	b40e      	push	{r1, r2, r3}
 800d91a:	b500      	push	{lr}
 800d91c:	490b      	ldr	r1, [pc, #44]	; (800d94c <siprintf+0x34>)
 800d91e:	b09c      	sub	sp, #112	; 0x70
 800d920:	ab1d      	add	r3, sp, #116	; 0x74
 800d922:	9002      	str	r0, [sp, #8]
 800d924:	9006      	str	r0, [sp, #24]
 800d926:	9107      	str	r1, [sp, #28]
 800d928:	9104      	str	r1, [sp, #16]
 800d92a:	4809      	ldr	r0, [pc, #36]	; (800d950 <siprintf+0x38>)
 800d92c:	4909      	ldr	r1, [pc, #36]	; (800d954 <siprintf+0x3c>)
 800d92e:	cb04      	ldmia	r3!, {r2}
 800d930:	9105      	str	r1, [sp, #20]
 800d932:	6800      	ldr	r0, [r0, #0]
 800d934:	a902      	add	r1, sp, #8
 800d936:	9301      	str	r3, [sp, #4]
 800d938:	f000 f880 	bl	800da3c <_svfiprintf_r>
 800d93c:	2300      	movs	r3, #0
 800d93e:	9a02      	ldr	r2, [sp, #8]
 800d940:	7013      	strb	r3, [r2, #0]
 800d942:	b01c      	add	sp, #112	; 0x70
 800d944:	bc08      	pop	{r3}
 800d946:	b003      	add	sp, #12
 800d948:	4718      	bx	r3
 800d94a:	46c0      	nop			; (mov r8, r8)
 800d94c:	7fffffff 	.word	0x7fffffff
 800d950:	2000017c 	.word	0x2000017c
 800d954:	ffff0208 	.word	0xffff0208

0800d958 <__malloc_lock>:
 800d958:	b510      	push	{r4, lr}
 800d95a:	4802      	ldr	r0, [pc, #8]	; (800d964 <__malloc_lock+0xc>)
 800d95c:	f000 faf0 	bl	800df40 <__retarget_lock_acquire_recursive>
 800d960:	bd10      	pop	{r4, pc}
 800d962:	46c0      	nop			; (mov r8, r8)
 800d964:	200015d8 	.word	0x200015d8

0800d968 <__malloc_unlock>:
 800d968:	b510      	push	{r4, lr}
 800d96a:	4802      	ldr	r0, [pc, #8]	; (800d974 <__malloc_unlock+0xc>)
 800d96c:	f000 fae9 	bl	800df42 <__retarget_lock_release_recursive>
 800d970:	bd10      	pop	{r4, pc}
 800d972:	46c0      	nop			; (mov r8, r8)
 800d974:	200015d8 	.word	0x200015d8

0800d978 <__ssputs_r>:
 800d978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d97a:	688e      	ldr	r6, [r1, #8]
 800d97c:	b085      	sub	sp, #20
 800d97e:	0007      	movs	r7, r0
 800d980:	000c      	movs	r4, r1
 800d982:	9203      	str	r2, [sp, #12]
 800d984:	9301      	str	r3, [sp, #4]
 800d986:	429e      	cmp	r6, r3
 800d988:	d83c      	bhi.n	800da04 <__ssputs_r+0x8c>
 800d98a:	2390      	movs	r3, #144	; 0x90
 800d98c:	898a      	ldrh	r2, [r1, #12]
 800d98e:	00db      	lsls	r3, r3, #3
 800d990:	421a      	tst	r2, r3
 800d992:	d034      	beq.n	800d9fe <__ssputs_r+0x86>
 800d994:	6909      	ldr	r1, [r1, #16]
 800d996:	6823      	ldr	r3, [r4, #0]
 800d998:	6960      	ldr	r0, [r4, #20]
 800d99a:	1a5b      	subs	r3, r3, r1
 800d99c:	9302      	str	r3, [sp, #8]
 800d99e:	2303      	movs	r3, #3
 800d9a0:	4343      	muls	r3, r0
 800d9a2:	0fdd      	lsrs	r5, r3, #31
 800d9a4:	18ed      	adds	r5, r5, r3
 800d9a6:	9b01      	ldr	r3, [sp, #4]
 800d9a8:	9802      	ldr	r0, [sp, #8]
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	181b      	adds	r3, r3, r0
 800d9ae:	106d      	asrs	r5, r5, #1
 800d9b0:	42ab      	cmp	r3, r5
 800d9b2:	d900      	bls.n	800d9b6 <__ssputs_r+0x3e>
 800d9b4:	001d      	movs	r5, r3
 800d9b6:	0553      	lsls	r3, r2, #21
 800d9b8:	d532      	bpl.n	800da20 <__ssputs_r+0xa8>
 800d9ba:	0029      	movs	r1, r5
 800d9bc:	0038      	movs	r0, r7
 800d9be:	f7ff ff23 	bl	800d808 <_malloc_r>
 800d9c2:	1e06      	subs	r6, r0, #0
 800d9c4:	d109      	bne.n	800d9da <__ssputs_r+0x62>
 800d9c6:	230c      	movs	r3, #12
 800d9c8:	603b      	str	r3, [r7, #0]
 800d9ca:	2340      	movs	r3, #64	; 0x40
 800d9cc:	2001      	movs	r0, #1
 800d9ce:	89a2      	ldrh	r2, [r4, #12]
 800d9d0:	4240      	negs	r0, r0
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	81a3      	strh	r3, [r4, #12]
 800d9d6:	b005      	add	sp, #20
 800d9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9da:	9a02      	ldr	r2, [sp, #8]
 800d9dc:	6921      	ldr	r1, [r4, #16]
 800d9de:	f7ff fe95 	bl	800d70c <memcpy>
 800d9e2:	89a3      	ldrh	r3, [r4, #12]
 800d9e4:	4a14      	ldr	r2, [pc, #80]	; (800da38 <__ssputs_r+0xc0>)
 800d9e6:	401a      	ands	r2, r3
 800d9e8:	2380      	movs	r3, #128	; 0x80
 800d9ea:	4313      	orrs	r3, r2
 800d9ec:	81a3      	strh	r3, [r4, #12]
 800d9ee:	9b02      	ldr	r3, [sp, #8]
 800d9f0:	6126      	str	r6, [r4, #16]
 800d9f2:	18f6      	adds	r6, r6, r3
 800d9f4:	6026      	str	r6, [r4, #0]
 800d9f6:	6165      	str	r5, [r4, #20]
 800d9f8:	9e01      	ldr	r6, [sp, #4]
 800d9fa:	1aed      	subs	r5, r5, r3
 800d9fc:	60a5      	str	r5, [r4, #8]
 800d9fe:	9b01      	ldr	r3, [sp, #4]
 800da00:	429e      	cmp	r6, r3
 800da02:	d900      	bls.n	800da06 <__ssputs_r+0x8e>
 800da04:	9e01      	ldr	r6, [sp, #4]
 800da06:	0032      	movs	r2, r6
 800da08:	9903      	ldr	r1, [sp, #12]
 800da0a:	6820      	ldr	r0, [r4, #0]
 800da0c:	f000 faa5 	bl	800df5a <memmove>
 800da10:	68a3      	ldr	r3, [r4, #8]
 800da12:	2000      	movs	r0, #0
 800da14:	1b9b      	subs	r3, r3, r6
 800da16:	60a3      	str	r3, [r4, #8]
 800da18:	6823      	ldr	r3, [r4, #0]
 800da1a:	199e      	adds	r6, r3, r6
 800da1c:	6026      	str	r6, [r4, #0]
 800da1e:	e7da      	b.n	800d9d6 <__ssputs_r+0x5e>
 800da20:	002a      	movs	r2, r5
 800da22:	0038      	movs	r0, r7
 800da24:	f000 faac 	bl	800df80 <_realloc_r>
 800da28:	1e06      	subs	r6, r0, #0
 800da2a:	d1e0      	bne.n	800d9ee <__ssputs_r+0x76>
 800da2c:	0038      	movs	r0, r7
 800da2e:	6921      	ldr	r1, [r4, #16]
 800da30:	f7ff fe7e 	bl	800d730 <_free_r>
 800da34:	e7c7      	b.n	800d9c6 <__ssputs_r+0x4e>
 800da36:	46c0      	nop			; (mov r8, r8)
 800da38:	fffffb7f 	.word	0xfffffb7f

0800da3c <_svfiprintf_r>:
 800da3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da3e:	b0a1      	sub	sp, #132	; 0x84
 800da40:	9003      	str	r0, [sp, #12]
 800da42:	001d      	movs	r5, r3
 800da44:	898b      	ldrh	r3, [r1, #12]
 800da46:	000f      	movs	r7, r1
 800da48:	0016      	movs	r6, r2
 800da4a:	061b      	lsls	r3, r3, #24
 800da4c:	d511      	bpl.n	800da72 <_svfiprintf_r+0x36>
 800da4e:	690b      	ldr	r3, [r1, #16]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d10e      	bne.n	800da72 <_svfiprintf_r+0x36>
 800da54:	2140      	movs	r1, #64	; 0x40
 800da56:	f7ff fed7 	bl	800d808 <_malloc_r>
 800da5a:	6038      	str	r0, [r7, #0]
 800da5c:	6138      	str	r0, [r7, #16]
 800da5e:	2800      	cmp	r0, #0
 800da60:	d105      	bne.n	800da6e <_svfiprintf_r+0x32>
 800da62:	230c      	movs	r3, #12
 800da64:	9a03      	ldr	r2, [sp, #12]
 800da66:	3801      	subs	r0, #1
 800da68:	6013      	str	r3, [r2, #0]
 800da6a:	b021      	add	sp, #132	; 0x84
 800da6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da6e:	2340      	movs	r3, #64	; 0x40
 800da70:	617b      	str	r3, [r7, #20]
 800da72:	2300      	movs	r3, #0
 800da74:	ac08      	add	r4, sp, #32
 800da76:	6163      	str	r3, [r4, #20]
 800da78:	3320      	adds	r3, #32
 800da7a:	7663      	strb	r3, [r4, #25]
 800da7c:	3310      	adds	r3, #16
 800da7e:	76a3      	strb	r3, [r4, #26]
 800da80:	9507      	str	r5, [sp, #28]
 800da82:	0035      	movs	r5, r6
 800da84:	782b      	ldrb	r3, [r5, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d001      	beq.n	800da8e <_svfiprintf_r+0x52>
 800da8a:	2b25      	cmp	r3, #37	; 0x25
 800da8c:	d147      	bne.n	800db1e <_svfiprintf_r+0xe2>
 800da8e:	1bab      	subs	r3, r5, r6
 800da90:	9305      	str	r3, [sp, #20]
 800da92:	42b5      	cmp	r5, r6
 800da94:	d00c      	beq.n	800dab0 <_svfiprintf_r+0x74>
 800da96:	0032      	movs	r2, r6
 800da98:	0039      	movs	r1, r7
 800da9a:	9803      	ldr	r0, [sp, #12]
 800da9c:	f7ff ff6c 	bl	800d978 <__ssputs_r>
 800daa0:	1c43      	adds	r3, r0, #1
 800daa2:	d100      	bne.n	800daa6 <_svfiprintf_r+0x6a>
 800daa4:	e0ae      	b.n	800dc04 <_svfiprintf_r+0x1c8>
 800daa6:	6962      	ldr	r2, [r4, #20]
 800daa8:	9b05      	ldr	r3, [sp, #20]
 800daaa:	4694      	mov	ip, r2
 800daac:	4463      	add	r3, ip
 800daae:	6163      	str	r3, [r4, #20]
 800dab0:	782b      	ldrb	r3, [r5, #0]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d100      	bne.n	800dab8 <_svfiprintf_r+0x7c>
 800dab6:	e0a5      	b.n	800dc04 <_svfiprintf_r+0x1c8>
 800dab8:	2201      	movs	r2, #1
 800daba:	2300      	movs	r3, #0
 800dabc:	4252      	negs	r2, r2
 800dabe:	6062      	str	r2, [r4, #4]
 800dac0:	a904      	add	r1, sp, #16
 800dac2:	3254      	adds	r2, #84	; 0x54
 800dac4:	1852      	adds	r2, r2, r1
 800dac6:	1c6e      	adds	r6, r5, #1
 800dac8:	6023      	str	r3, [r4, #0]
 800daca:	60e3      	str	r3, [r4, #12]
 800dacc:	60a3      	str	r3, [r4, #8]
 800dace:	7013      	strb	r3, [r2, #0]
 800dad0:	65a3      	str	r3, [r4, #88]	; 0x58
 800dad2:	2205      	movs	r2, #5
 800dad4:	7831      	ldrb	r1, [r6, #0]
 800dad6:	4854      	ldr	r0, [pc, #336]	; (800dc28 <_svfiprintf_r+0x1ec>)
 800dad8:	f000 fa34 	bl	800df44 <memchr>
 800dadc:	1c75      	adds	r5, r6, #1
 800dade:	2800      	cmp	r0, #0
 800dae0:	d11f      	bne.n	800db22 <_svfiprintf_r+0xe6>
 800dae2:	6822      	ldr	r2, [r4, #0]
 800dae4:	06d3      	lsls	r3, r2, #27
 800dae6:	d504      	bpl.n	800daf2 <_svfiprintf_r+0xb6>
 800dae8:	2353      	movs	r3, #83	; 0x53
 800daea:	a904      	add	r1, sp, #16
 800daec:	185b      	adds	r3, r3, r1
 800daee:	2120      	movs	r1, #32
 800daf0:	7019      	strb	r1, [r3, #0]
 800daf2:	0713      	lsls	r3, r2, #28
 800daf4:	d504      	bpl.n	800db00 <_svfiprintf_r+0xc4>
 800daf6:	2353      	movs	r3, #83	; 0x53
 800daf8:	a904      	add	r1, sp, #16
 800dafa:	185b      	adds	r3, r3, r1
 800dafc:	212b      	movs	r1, #43	; 0x2b
 800dafe:	7019      	strb	r1, [r3, #0]
 800db00:	7833      	ldrb	r3, [r6, #0]
 800db02:	2b2a      	cmp	r3, #42	; 0x2a
 800db04:	d016      	beq.n	800db34 <_svfiprintf_r+0xf8>
 800db06:	0035      	movs	r5, r6
 800db08:	2100      	movs	r1, #0
 800db0a:	200a      	movs	r0, #10
 800db0c:	68e3      	ldr	r3, [r4, #12]
 800db0e:	782a      	ldrb	r2, [r5, #0]
 800db10:	1c6e      	adds	r6, r5, #1
 800db12:	3a30      	subs	r2, #48	; 0x30
 800db14:	2a09      	cmp	r2, #9
 800db16:	d94e      	bls.n	800dbb6 <_svfiprintf_r+0x17a>
 800db18:	2900      	cmp	r1, #0
 800db1a:	d111      	bne.n	800db40 <_svfiprintf_r+0x104>
 800db1c:	e017      	b.n	800db4e <_svfiprintf_r+0x112>
 800db1e:	3501      	adds	r5, #1
 800db20:	e7b0      	b.n	800da84 <_svfiprintf_r+0x48>
 800db22:	4b41      	ldr	r3, [pc, #260]	; (800dc28 <_svfiprintf_r+0x1ec>)
 800db24:	6822      	ldr	r2, [r4, #0]
 800db26:	1ac0      	subs	r0, r0, r3
 800db28:	2301      	movs	r3, #1
 800db2a:	4083      	lsls	r3, r0
 800db2c:	4313      	orrs	r3, r2
 800db2e:	002e      	movs	r6, r5
 800db30:	6023      	str	r3, [r4, #0]
 800db32:	e7ce      	b.n	800dad2 <_svfiprintf_r+0x96>
 800db34:	9b07      	ldr	r3, [sp, #28]
 800db36:	1d19      	adds	r1, r3, #4
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	9107      	str	r1, [sp, #28]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	db01      	blt.n	800db44 <_svfiprintf_r+0x108>
 800db40:	930b      	str	r3, [sp, #44]	; 0x2c
 800db42:	e004      	b.n	800db4e <_svfiprintf_r+0x112>
 800db44:	425b      	negs	r3, r3
 800db46:	60e3      	str	r3, [r4, #12]
 800db48:	2302      	movs	r3, #2
 800db4a:	4313      	orrs	r3, r2
 800db4c:	6023      	str	r3, [r4, #0]
 800db4e:	782b      	ldrb	r3, [r5, #0]
 800db50:	2b2e      	cmp	r3, #46	; 0x2e
 800db52:	d10a      	bne.n	800db6a <_svfiprintf_r+0x12e>
 800db54:	786b      	ldrb	r3, [r5, #1]
 800db56:	2b2a      	cmp	r3, #42	; 0x2a
 800db58:	d135      	bne.n	800dbc6 <_svfiprintf_r+0x18a>
 800db5a:	9b07      	ldr	r3, [sp, #28]
 800db5c:	3502      	adds	r5, #2
 800db5e:	1d1a      	adds	r2, r3, #4
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	9207      	str	r2, [sp, #28]
 800db64:	2b00      	cmp	r3, #0
 800db66:	db2b      	blt.n	800dbc0 <_svfiprintf_r+0x184>
 800db68:	9309      	str	r3, [sp, #36]	; 0x24
 800db6a:	4e30      	ldr	r6, [pc, #192]	; (800dc2c <_svfiprintf_r+0x1f0>)
 800db6c:	2203      	movs	r2, #3
 800db6e:	0030      	movs	r0, r6
 800db70:	7829      	ldrb	r1, [r5, #0]
 800db72:	f000 f9e7 	bl	800df44 <memchr>
 800db76:	2800      	cmp	r0, #0
 800db78:	d006      	beq.n	800db88 <_svfiprintf_r+0x14c>
 800db7a:	2340      	movs	r3, #64	; 0x40
 800db7c:	1b80      	subs	r0, r0, r6
 800db7e:	4083      	lsls	r3, r0
 800db80:	6822      	ldr	r2, [r4, #0]
 800db82:	3501      	adds	r5, #1
 800db84:	4313      	orrs	r3, r2
 800db86:	6023      	str	r3, [r4, #0]
 800db88:	7829      	ldrb	r1, [r5, #0]
 800db8a:	2206      	movs	r2, #6
 800db8c:	4828      	ldr	r0, [pc, #160]	; (800dc30 <_svfiprintf_r+0x1f4>)
 800db8e:	1c6e      	adds	r6, r5, #1
 800db90:	7621      	strb	r1, [r4, #24]
 800db92:	f000 f9d7 	bl	800df44 <memchr>
 800db96:	2800      	cmp	r0, #0
 800db98:	d03c      	beq.n	800dc14 <_svfiprintf_r+0x1d8>
 800db9a:	4b26      	ldr	r3, [pc, #152]	; (800dc34 <_svfiprintf_r+0x1f8>)
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d125      	bne.n	800dbec <_svfiprintf_r+0x1b0>
 800dba0:	2207      	movs	r2, #7
 800dba2:	9b07      	ldr	r3, [sp, #28]
 800dba4:	3307      	adds	r3, #7
 800dba6:	4393      	bics	r3, r2
 800dba8:	3308      	adds	r3, #8
 800dbaa:	9307      	str	r3, [sp, #28]
 800dbac:	6963      	ldr	r3, [r4, #20]
 800dbae:	9a04      	ldr	r2, [sp, #16]
 800dbb0:	189b      	adds	r3, r3, r2
 800dbb2:	6163      	str	r3, [r4, #20]
 800dbb4:	e765      	b.n	800da82 <_svfiprintf_r+0x46>
 800dbb6:	4343      	muls	r3, r0
 800dbb8:	0035      	movs	r5, r6
 800dbba:	2101      	movs	r1, #1
 800dbbc:	189b      	adds	r3, r3, r2
 800dbbe:	e7a6      	b.n	800db0e <_svfiprintf_r+0xd2>
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	425b      	negs	r3, r3
 800dbc4:	e7d0      	b.n	800db68 <_svfiprintf_r+0x12c>
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	200a      	movs	r0, #10
 800dbca:	001a      	movs	r2, r3
 800dbcc:	3501      	adds	r5, #1
 800dbce:	6063      	str	r3, [r4, #4]
 800dbd0:	7829      	ldrb	r1, [r5, #0]
 800dbd2:	1c6e      	adds	r6, r5, #1
 800dbd4:	3930      	subs	r1, #48	; 0x30
 800dbd6:	2909      	cmp	r1, #9
 800dbd8:	d903      	bls.n	800dbe2 <_svfiprintf_r+0x1a6>
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d0c5      	beq.n	800db6a <_svfiprintf_r+0x12e>
 800dbde:	9209      	str	r2, [sp, #36]	; 0x24
 800dbe0:	e7c3      	b.n	800db6a <_svfiprintf_r+0x12e>
 800dbe2:	4342      	muls	r2, r0
 800dbe4:	0035      	movs	r5, r6
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	1852      	adds	r2, r2, r1
 800dbea:	e7f1      	b.n	800dbd0 <_svfiprintf_r+0x194>
 800dbec:	ab07      	add	r3, sp, #28
 800dbee:	9300      	str	r3, [sp, #0]
 800dbf0:	003a      	movs	r2, r7
 800dbf2:	0021      	movs	r1, r4
 800dbf4:	4b10      	ldr	r3, [pc, #64]	; (800dc38 <_svfiprintf_r+0x1fc>)
 800dbf6:	9803      	ldr	r0, [sp, #12]
 800dbf8:	e000      	b.n	800dbfc <_svfiprintf_r+0x1c0>
 800dbfa:	bf00      	nop
 800dbfc:	9004      	str	r0, [sp, #16]
 800dbfe:	9b04      	ldr	r3, [sp, #16]
 800dc00:	3301      	adds	r3, #1
 800dc02:	d1d3      	bne.n	800dbac <_svfiprintf_r+0x170>
 800dc04:	89bb      	ldrh	r3, [r7, #12]
 800dc06:	980d      	ldr	r0, [sp, #52]	; 0x34
 800dc08:	065b      	lsls	r3, r3, #25
 800dc0a:	d400      	bmi.n	800dc0e <_svfiprintf_r+0x1d2>
 800dc0c:	e72d      	b.n	800da6a <_svfiprintf_r+0x2e>
 800dc0e:	2001      	movs	r0, #1
 800dc10:	4240      	negs	r0, r0
 800dc12:	e72a      	b.n	800da6a <_svfiprintf_r+0x2e>
 800dc14:	ab07      	add	r3, sp, #28
 800dc16:	9300      	str	r3, [sp, #0]
 800dc18:	003a      	movs	r2, r7
 800dc1a:	0021      	movs	r1, r4
 800dc1c:	4b06      	ldr	r3, [pc, #24]	; (800dc38 <_svfiprintf_r+0x1fc>)
 800dc1e:	9803      	ldr	r0, [sp, #12]
 800dc20:	f000 f87c 	bl	800dd1c <_printf_i>
 800dc24:	e7ea      	b.n	800dbfc <_svfiprintf_r+0x1c0>
 800dc26:	46c0      	nop			; (mov r8, r8)
 800dc28:	0800e348 	.word	0x0800e348
 800dc2c:	0800e34e 	.word	0x0800e34e
 800dc30:	0800e352 	.word	0x0800e352
 800dc34:	00000000 	.word	0x00000000
 800dc38:	0800d979 	.word	0x0800d979

0800dc3c <_printf_common>:
 800dc3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc3e:	0015      	movs	r5, r2
 800dc40:	9301      	str	r3, [sp, #4]
 800dc42:	688a      	ldr	r2, [r1, #8]
 800dc44:	690b      	ldr	r3, [r1, #16]
 800dc46:	000c      	movs	r4, r1
 800dc48:	9000      	str	r0, [sp, #0]
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	da00      	bge.n	800dc50 <_printf_common+0x14>
 800dc4e:	0013      	movs	r3, r2
 800dc50:	0022      	movs	r2, r4
 800dc52:	602b      	str	r3, [r5, #0]
 800dc54:	3243      	adds	r2, #67	; 0x43
 800dc56:	7812      	ldrb	r2, [r2, #0]
 800dc58:	2a00      	cmp	r2, #0
 800dc5a:	d001      	beq.n	800dc60 <_printf_common+0x24>
 800dc5c:	3301      	adds	r3, #1
 800dc5e:	602b      	str	r3, [r5, #0]
 800dc60:	6823      	ldr	r3, [r4, #0]
 800dc62:	069b      	lsls	r3, r3, #26
 800dc64:	d502      	bpl.n	800dc6c <_printf_common+0x30>
 800dc66:	682b      	ldr	r3, [r5, #0]
 800dc68:	3302      	adds	r3, #2
 800dc6a:	602b      	str	r3, [r5, #0]
 800dc6c:	6822      	ldr	r2, [r4, #0]
 800dc6e:	2306      	movs	r3, #6
 800dc70:	0017      	movs	r7, r2
 800dc72:	401f      	ands	r7, r3
 800dc74:	421a      	tst	r2, r3
 800dc76:	d027      	beq.n	800dcc8 <_printf_common+0x8c>
 800dc78:	0023      	movs	r3, r4
 800dc7a:	3343      	adds	r3, #67	; 0x43
 800dc7c:	781b      	ldrb	r3, [r3, #0]
 800dc7e:	1e5a      	subs	r2, r3, #1
 800dc80:	4193      	sbcs	r3, r2
 800dc82:	6822      	ldr	r2, [r4, #0]
 800dc84:	0692      	lsls	r2, r2, #26
 800dc86:	d430      	bmi.n	800dcea <_printf_common+0xae>
 800dc88:	0022      	movs	r2, r4
 800dc8a:	9901      	ldr	r1, [sp, #4]
 800dc8c:	9800      	ldr	r0, [sp, #0]
 800dc8e:	9e08      	ldr	r6, [sp, #32]
 800dc90:	3243      	adds	r2, #67	; 0x43
 800dc92:	47b0      	blx	r6
 800dc94:	1c43      	adds	r3, r0, #1
 800dc96:	d025      	beq.n	800dce4 <_printf_common+0xa8>
 800dc98:	2306      	movs	r3, #6
 800dc9a:	6820      	ldr	r0, [r4, #0]
 800dc9c:	682a      	ldr	r2, [r5, #0]
 800dc9e:	68e1      	ldr	r1, [r4, #12]
 800dca0:	2500      	movs	r5, #0
 800dca2:	4003      	ands	r3, r0
 800dca4:	2b04      	cmp	r3, #4
 800dca6:	d103      	bne.n	800dcb0 <_printf_common+0x74>
 800dca8:	1a8d      	subs	r5, r1, r2
 800dcaa:	43eb      	mvns	r3, r5
 800dcac:	17db      	asrs	r3, r3, #31
 800dcae:	401d      	ands	r5, r3
 800dcb0:	68a3      	ldr	r3, [r4, #8]
 800dcb2:	6922      	ldr	r2, [r4, #16]
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	dd01      	ble.n	800dcbc <_printf_common+0x80>
 800dcb8:	1a9b      	subs	r3, r3, r2
 800dcba:	18ed      	adds	r5, r5, r3
 800dcbc:	2700      	movs	r7, #0
 800dcbe:	42bd      	cmp	r5, r7
 800dcc0:	d120      	bne.n	800dd04 <_printf_common+0xc8>
 800dcc2:	2000      	movs	r0, #0
 800dcc4:	e010      	b.n	800dce8 <_printf_common+0xac>
 800dcc6:	3701      	adds	r7, #1
 800dcc8:	68e3      	ldr	r3, [r4, #12]
 800dcca:	682a      	ldr	r2, [r5, #0]
 800dccc:	1a9b      	subs	r3, r3, r2
 800dcce:	42bb      	cmp	r3, r7
 800dcd0:	ddd2      	ble.n	800dc78 <_printf_common+0x3c>
 800dcd2:	0022      	movs	r2, r4
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	9901      	ldr	r1, [sp, #4]
 800dcd8:	9800      	ldr	r0, [sp, #0]
 800dcda:	9e08      	ldr	r6, [sp, #32]
 800dcdc:	3219      	adds	r2, #25
 800dcde:	47b0      	blx	r6
 800dce0:	1c43      	adds	r3, r0, #1
 800dce2:	d1f0      	bne.n	800dcc6 <_printf_common+0x8a>
 800dce4:	2001      	movs	r0, #1
 800dce6:	4240      	negs	r0, r0
 800dce8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dcea:	2030      	movs	r0, #48	; 0x30
 800dcec:	18e1      	adds	r1, r4, r3
 800dcee:	3143      	adds	r1, #67	; 0x43
 800dcf0:	7008      	strb	r0, [r1, #0]
 800dcf2:	0021      	movs	r1, r4
 800dcf4:	1c5a      	adds	r2, r3, #1
 800dcf6:	3145      	adds	r1, #69	; 0x45
 800dcf8:	7809      	ldrb	r1, [r1, #0]
 800dcfa:	18a2      	adds	r2, r4, r2
 800dcfc:	3243      	adds	r2, #67	; 0x43
 800dcfe:	3302      	adds	r3, #2
 800dd00:	7011      	strb	r1, [r2, #0]
 800dd02:	e7c1      	b.n	800dc88 <_printf_common+0x4c>
 800dd04:	0022      	movs	r2, r4
 800dd06:	2301      	movs	r3, #1
 800dd08:	9901      	ldr	r1, [sp, #4]
 800dd0a:	9800      	ldr	r0, [sp, #0]
 800dd0c:	9e08      	ldr	r6, [sp, #32]
 800dd0e:	321a      	adds	r2, #26
 800dd10:	47b0      	blx	r6
 800dd12:	1c43      	adds	r3, r0, #1
 800dd14:	d0e6      	beq.n	800dce4 <_printf_common+0xa8>
 800dd16:	3701      	adds	r7, #1
 800dd18:	e7d1      	b.n	800dcbe <_printf_common+0x82>
	...

0800dd1c <_printf_i>:
 800dd1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd1e:	b08b      	sub	sp, #44	; 0x2c
 800dd20:	9206      	str	r2, [sp, #24]
 800dd22:	000a      	movs	r2, r1
 800dd24:	3243      	adds	r2, #67	; 0x43
 800dd26:	9307      	str	r3, [sp, #28]
 800dd28:	9005      	str	r0, [sp, #20]
 800dd2a:	9204      	str	r2, [sp, #16]
 800dd2c:	7e0a      	ldrb	r2, [r1, #24]
 800dd2e:	000c      	movs	r4, r1
 800dd30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dd32:	2a78      	cmp	r2, #120	; 0x78
 800dd34:	d807      	bhi.n	800dd46 <_printf_i+0x2a>
 800dd36:	2a62      	cmp	r2, #98	; 0x62
 800dd38:	d809      	bhi.n	800dd4e <_printf_i+0x32>
 800dd3a:	2a00      	cmp	r2, #0
 800dd3c:	d100      	bne.n	800dd40 <_printf_i+0x24>
 800dd3e:	e0c1      	b.n	800dec4 <_printf_i+0x1a8>
 800dd40:	2a58      	cmp	r2, #88	; 0x58
 800dd42:	d100      	bne.n	800dd46 <_printf_i+0x2a>
 800dd44:	e08c      	b.n	800de60 <_printf_i+0x144>
 800dd46:	0026      	movs	r6, r4
 800dd48:	3642      	adds	r6, #66	; 0x42
 800dd4a:	7032      	strb	r2, [r6, #0]
 800dd4c:	e022      	b.n	800dd94 <_printf_i+0x78>
 800dd4e:	0010      	movs	r0, r2
 800dd50:	3863      	subs	r0, #99	; 0x63
 800dd52:	2815      	cmp	r0, #21
 800dd54:	d8f7      	bhi.n	800dd46 <_printf_i+0x2a>
 800dd56:	f7f2 f9df 	bl	8000118 <__gnu_thumb1_case_shi>
 800dd5a:	0016      	.short	0x0016
 800dd5c:	fff6001f 	.word	0xfff6001f
 800dd60:	fff6fff6 	.word	0xfff6fff6
 800dd64:	001ffff6 	.word	0x001ffff6
 800dd68:	fff6fff6 	.word	0xfff6fff6
 800dd6c:	fff6fff6 	.word	0xfff6fff6
 800dd70:	003600a8 	.word	0x003600a8
 800dd74:	fff6009a 	.word	0xfff6009a
 800dd78:	00b9fff6 	.word	0x00b9fff6
 800dd7c:	0036fff6 	.word	0x0036fff6
 800dd80:	fff6fff6 	.word	0xfff6fff6
 800dd84:	009e      	.short	0x009e
 800dd86:	0026      	movs	r6, r4
 800dd88:	681a      	ldr	r2, [r3, #0]
 800dd8a:	3642      	adds	r6, #66	; 0x42
 800dd8c:	1d11      	adds	r1, r2, #4
 800dd8e:	6019      	str	r1, [r3, #0]
 800dd90:	6813      	ldr	r3, [r2, #0]
 800dd92:	7033      	strb	r3, [r6, #0]
 800dd94:	2301      	movs	r3, #1
 800dd96:	e0a7      	b.n	800dee8 <_printf_i+0x1cc>
 800dd98:	6808      	ldr	r0, [r1, #0]
 800dd9a:	6819      	ldr	r1, [r3, #0]
 800dd9c:	1d0a      	adds	r2, r1, #4
 800dd9e:	0605      	lsls	r5, r0, #24
 800dda0:	d50b      	bpl.n	800ddba <_printf_i+0x9e>
 800dda2:	680d      	ldr	r5, [r1, #0]
 800dda4:	601a      	str	r2, [r3, #0]
 800dda6:	2d00      	cmp	r5, #0
 800dda8:	da03      	bge.n	800ddb2 <_printf_i+0x96>
 800ddaa:	232d      	movs	r3, #45	; 0x2d
 800ddac:	9a04      	ldr	r2, [sp, #16]
 800ddae:	426d      	negs	r5, r5
 800ddb0:	7013      	strb	r3, [r2, #0]
 800ddb2:	4b61      	ldr	r3, [pc, #388]	; (800df38 <_printf_i+0x21c>)
 800ddb4:	270a      	movs	r7, #10
 800ddb6:	9303      	str	r3, [sp, #12]
 800ddb8:	e01b      	b.n	800ddf2 <_printf_i+0xd6>
 800ddba:	680d      	ldr	r5, [r1, #0]
 800ddbc:	601a      	str	r2, [r3, #0]
 800ddbe:	0641      	lsls	r1, r0, #25
 800ddc0:	d5f1      	bpl.n	800dda6 <_printf_i+0x8a>
 800ddc2:	b22d      	sxth	r5, r5
 800ddc4:	e7ef      	b.n	800dda6 <_printf_i+0x8a>
 800ddc6:	680d      	ldr	r5, [r1, #0]
 800ddc8:	6819      	ldr	r1, [r3, #0]
 800ddca:	1d08      	adds	r0, r1, #4
 800ddcc:	6018      	str	r0, [r3, #0]
 800ddce:	062e      	lsls	r6, r5, #24
 800ddd0:	d501      	bpl.n	800ddd6 <_printf_i+0xba>
 800ddd2:	680d      	ldr	r5, [r1, #0]
 800ddd4:	e003      	b.n	800ddde <_printf_i+0xc2>
 800ddd6:	066d      	lsls	r5, r5, #25
 800ddd8:	d5fb      	bpl.n	800ddd2 <_printf_i+0xb6>
 800ddda:	680d      	ldr	r5, [r1, #0]
 800dddc:	b2ad      	uxth	r5, r5
 800ddde:	4b56      	ldr	r3, [pc, #344]	; (800df38 <_printf_i+0x21c>)
 800dde0:	2708      	movs	r7, #8
 800dde2:	9303      	str	r3, [sp, #12]
 800dde4:	2a6f      	cmp	r2, #111	; 0x6f
 800dde6:	d000      	beq.n	800ddea <_printf_i+0xce>
 800dde8:	3702      	adds	r7, #2
 800ddea:	0023      	movs	r3, r4
 800ddec:	2200      	movs	r2, #0
 800ddee:	3343      	adds	r3, #67	; 0x43
 800ddf0:	701a      	strb	r2, [r3, #0]
 800ddf2:	6863      	ldr	r3, [r4, #4]
 800ddf4:	60a3      	str	r3, [r4, #8]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	db03      	blt.n	800de02 <_printf_i+0xe6>
 800ddfa:	2204      	movs	r2, #4
 800ddfc:	6821      	ldr	r1, [r4, #0]
 800ddfe:	4391      	bics	r1, r2
 800de00:	6021      	str	r1, [r4, #0]
 800de02:	2d00      	cmp	r5, #0
 800de04:	d102      	bne.n	800de0c <_printf_i+0xf0>
 800de06:	9e04      	ldr	r6, [sp, #16]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d00c      	beq.n	800de26 <_printf_i+0x10a>
 800de0c:	9e04      	ldr	r6, [sp, #16]
 800de0e:	0028      	movs	r0, r5
 800de10:	0039      	movs	r1, r7
 800de12:	f7f2 fa11 	bl	8000238 <__aeabi_uidivmod>
 800de16:	9b03      	ldr	r3, [sp, #12]
 800de18:	3e01      	subs	r6, #1
 800de1a:	5c5b      	ldrb	r3, [r3, r1]
 800de1c:	7033      	strb	r3, [r6, #0]
 800de1e:	002b      	movs	r3, r5
 800de20:	0005      	movs	r5, r0
 800de22:	429f      	cmp	r7, r3
 800de24:	d9f3      	bls.n	800de0e <_printf_i+0xf2>
 800de26:	2f08      	cmp	r7, #8
 800de28:	d109      	bne.n	800de3e <_printf_i+0x122>
 800de2a:	6823      	ldr	r3, [r4, #0]
 800de2c:	07db      	lsls	r3, r3, #31
 800de2e:	d506      	bpl.n	800de3e <_printf_i+0x122>
 800de30:	6863      	ldr	r3, [r4, #4]
 800de32:	6922      	ldr	r2, [r4, #16]
 800de34:	4293      	cmp	r3, r2
 800de36:	dc02      	bgt.n	800de3e <_printf_i+0x122>
 800de38:	2330      	movs	r3, #48	; 0x30
 800de3a:	3e01      	subs	r6, #1
 800de3c:	7033      	strb	r3, [r6, #0]
 800de3e:	9b04      	ldr	r3, [sp, #16]
 800de40:	1b9b      	subs	r3, r3, r6
 800de42:	6123      	str	r3, [r4, #16]
 800de44:	9b07      	ldr	r3, [sp, #28]
 800de46:	0021      	movs	r1, r4
 800de48:	9300      	str	r3, [sp, #0]
 800de4a:	9805      	ldr	r0, [sp, #20]
 800de4c:	9b06      	ldr	r3, [sp, #24]
 800de4e:	aa09      	add	r2, sp, #36	; 0x24
 800de50:	f7ff fef4 	bl	800dc3c <_printf_common>
 800de54:	1c43      	adds	r3, r0, #1
 800de56:	d14c      	bne.n	800def2 <_printf_i+0x1d6>
 800de58:	2001      	movs	r0, #1
 800de5a:	4240      	negs	r0, r0
 800de5c:	b00b      	add	sp, #44	; 0x2c
 800de5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de60:	3145      	adds	r1, #69	; 0x45
 800de62:	700a      	strb	r2, [r1, #0]
 800de64:	4a34      	ldr	r2, [pc, #208]	; (800df38 <_printf_i+0x21c>)
 800de66:	9203      	str	r2, [sp, #12]
 800de68:	681a      	ldr	r2, [r3, #0]
 800de6a:	6821      	ldr	r1, [r4, #0]
 800de6c:	ca20      	ldmia	r2!, {r5}
 800de6e:	601a      	str	r2, [r3, #0]
 800de70:	0608      	lsls	r0, r1, #24
 800de72:	d516      	bpl.n	800dea2 <_printf_i+0x186>
 800de74:	07cb      	lsls	r3, r1, #31
 800de76:	d502      	bpl.n	800de7e <_printf_i+0x162>
 800de78:	2320      	movs	r3, #32
 800de7a:	4319      	orrs	r1, r3
 800de7c:	6021      	str	r1, [r4, #0]
 800de7e:	2710      	movs	r7, #16
 800de80:	2d00      	cmp	r5, #0
 800de82:	d1b2      	bne.n	800ddea <_printf_i+0xce>
 800de84:	2320      	movs	r3, #32
 800de86:	6822      	ldr	r2, [r4, #0]
 800de88:	439a      	bics	r2, r3
 800de8a:	6022      	str	r2, [r4, #0]
 800de8c:	e7ad      	b.n	800ddea <_printf_i+0xce>
 800de8e:	2220      	movs	r2, #32
 800de90:	6809      	ldr	r1, [r1, #0]
 800de92:	430a      	orrs	r2, r1
 800de94:	6022      	str	r2, [r4, #0]
 800de96:	0022      	movs	r2, r4
 800de98:	2178      	movs	r1, #120	; 0x78
 800de9a:	3245      	adds	r2, #69	; 0x45
 800de9c:	7011      	strb	r1, [r2, #0]
 800de9e:	4a27      	ldr	r2, [pc, #156]	; (800df3c <_printf_i+0x220>)
 800dea0:	e7e1      	b.n	800de66 <_printf_i+0x14a>
 800dea2:	0648      	lsls	r0, r1, #25
 800dea4:	d5e6      	bpl.n	800de74 <_printf_i+0x158>
 800dea6:	b2ad      	uxth	r5, r5
 800dea8:	e7e4      	b.n	800de74 <_printf_i+0x158>
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	680d      	ldr	r5, [r1, #0]
 800deae:	1d10      	adds	r0, r2, #4
 800deb0:	6949      	ldr	r1, [r1, #20]
 800deb2:	6018      	str	r0, [r3, #0]
 800deb4:	6813      	ldr	r3, [r2, #0]
 800deb6:	062e      	lsls	r6, r5, #24
 800deb8:	d501      	bpl.n	800debe <_printf_i+0x1a2>
 800deba:	6019      	str	r1, [r3, #0]
 800debc:	e002      	b.n	800dec4 <_printf_i+0x1a8>
 800debe:	066d      	lsls	r5, r5, #25
 800dec0:	d5fb      	bpl.n	800deba <_printf_i+0x19e>
 800dec2:	8019      	strh	r1, [r3, #0]
 800dec4:	2300      	movs	r3, #0
 800dec6:	9e04      	ldr	r6, [sp, #16]
 800dec8:	6123      	str	r3, [r4, #16]
 800deca:	e7bb      	b.n	800de44 <_printf_i+0x128>
 800decc:	681a      	ldr	r2, [r3, #0]
 800dece:	1d11      	adds	r1, r2, #4
 800ded0:	6019      	str	r1, [r3, #0]
 800ded2:	6816      	ldr	r6, [r2, #0]
 800ded4:	2100      	movs	r1, #0
 800ded6:	0030      	movs	r0, r6
 800ded8:	6862      	ldr	r2, [r4, #4]
 800deda:	f000 f833 	bl	800df44 <memchr>
 800dede:	2800      	cmp	r0, #0
 800dee0:	d001      	beq.n	800dee6 <_printf_i+0x1ca>
 800dee2:	1b80      	subs	r0, r0, r6
 800dee4:	6060      	str	r0, [r4, #4]
 800dee6:	6863      	ldr	r3, [r4, #4]
 800dee8:	6123      	str	r3, [r4, #16]
 800deea:	2300      	movs	r3, #0
 800deec:	9a04      	ldr	r2, [sp, #16]
 800deee:	7013      	strb	r3, [r2, #0]
 800def0:	e7a8      	b.n	800de44 <_printf_i+0x128>
 800def2:	6923      	ldr	r3, [r4, #16]
 800def4:	0032      	movs	r2, r6
 800def6:	9906      	ldr	r1, [sp, #24]
 800def8:	9805      	ldr	r0, [sp, #20]
 800defa:	9d07      	ldr	r5, [sp, #28]
 800defc:	47a8      	blx	r5
 800defe:	1c43      	adds	r3, r0, #1
 800df00:	d0aa      	beq.n	800de58 <_printf_i+0x13c>
 800df02:	6823      	ldr	r3, [r4, #0]
 800df04:	079b      	lsls	r3, r3, #30
 800df06:	d415      	bmi.n	800df34 <_printf_i+0x218>
 800df08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df0a:	68e0      	ldr	r0, [r4, #12]
 800df0c:	4298      	cmp	r0, r3
 800df0e:	daa5      	bge.n	800de5c <_printf_i+0x140>
 800df10:	0018      	movs	r0, r3
 800df12:	e7a3      	b.n	800de5c <_printf_i+0x140>
 800df14:	0022      	movs	r2, r4
 800df16:	2301      	movs	r3, #1
 800df18:	9906      	ldr	r1, [sp, #24]
 800df1a:	9805      	ldr	r0, [sp, #20]
 800df1c:	9e07      	ldr	r6, [sp, #28]
 800df1e:	3219      	adds	r2, #25
 800df20:	47b0      	blx	r6
 800df22:	1c43      	adds	r3, r0, #1
 800df24:	d098      	beq.n	800de58 <_printf_i+0x13c>
 800df26:	3501      	adds	r5, #1
 800df28:	68e3      	ldr	r3, [r4, #12]
 800df2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df2c:	1a9b      	subs	r3, r3, r2
 800df2e:	42ab      	cmp	r3, r5
 800df30:	dcf0      	bgt.n	800df14 <_printf_i+0x1f8>
 800df32:	e7e9      	b.n	800df08 <_printf_i+0x1ec>
 800df34:	2500      	movs	r5, #0
 800df36:	e7f7      	b.n	800df28 <_printf_i+0x20c>
 800df38:	0800e359 	.word	0x0800e359
 800df3c:	0800e36a 	.word	0x0800e36a

0800df40 <__retarget_lock_acquire_recursive>:
 800df40:	4770      	bx	lr

0800df42 <__retarget_lock_release_recursive>:
 800df42:	4770      	bx	lr

0800df44 <memchr>:
 800df44:	b2c9      	uxtb	r1, r1
 800df46:	1882      	adds	r2, r0, r2
 800df48:	4290      	cmp	r0, r2
 800df4a:	d101      	bne.n	800df50 <memchr+0xc>
 800df4c:	2000      	movs	r0, #0
 800df4e:	4770      	bx	lr
 800df50:	7803      	ldrb	r3, [r0, #0]
 800df52:	428b      	cmp	r3, r1
 800df54:	d0fb      	beq.n	800df4e <memchr+0xa>
 800df56:	3001      	adds	r0, #1
 800df58:	e7f6      	b.n	800df48 <memchr+0x4>

0800df5a <memmove>:
 800df5a:	b510      	push	{r4, lr}
 800df5c:	4288      	cmp	r0, r1
 800df5e:	d902      	bls.n	800df66 <memmove+0xc>
 800df60:	188b      	adds	r3, r1, r2
 800df62:	4298      	cmp	r0, r3
 800df64:	d303      	bcc.n	800df6e <memmove+0x14>
 800df66:	2300      	movs	r3, #0
 800df68:	e007      	b.n	800df7a <memmove+0x20>
 800df6a:	5c8b      	ldrb	r3, [r1, r2]
 800df6c:	5483      	strb	r3, [r0, r2]
 800df6e:	3a01      	subs	r2, #1
 800df70:	d2fb      	bcs.n	800df6a <memmove+0x10>
 800df72:	bd10      	pop	{r4, pc}
 800df74:	5ccc      	ldrb	r4, [r1, r3]
 800df76:	54c4      	strb	r4, [r0, r3]
 800df78:	3301      	adds	r3, #1
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d1fa      	bne.n	800df74 <memmove+0x1a>
 800df7e:	e7f8      	b.n	800df72 <memmove+0x18>

0800df80 <_realloc_r>:
 800df80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df82:	0007      	movs	r7, r0
 800df84:	000e      	movs	r6, r1
 800df86:	0014      	movs	r4, r2
 800df88:	2900      	cmp	r1, #0
 800df8a:	d105      	bne.n	800df98 <_realloc_r+0x18>
 800df8c:	0011      	movs	r1, r2
 800df8e:	f7ff fc3b 	bl	800d808 <_malloc_r>
 800df92:	0005      	movs	r5, r0
 800df94:	0028      	movs	r0, r5
 800df96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800df98:	2a00      	cmp	r2, #0
 800df9a:	d103      	bne.n	800dfa4 <_realloc_r+0x24>
 800df9c:	f7ff fbc8 	bl	800d730 <_free_r>
 800dfa0:	0025      	movs	r5, r4
 800dfa2:	e7f7      	b.n	800df94 <_realloc_r+0x14>
 800dfa4:	f000 f81b 	bl	800dfde <_malloc_usable_size_r>
 800dfa8:	9001      	str	r0, [sp, #4]
 800dfaa:	4284      	cmp	r4, r0
 800dfac:	d803      	bhi.n	800dfb6 <_realloc_r+0x36>
 800dfae:	0035      	movs	r5, r6
 800dfb0:	0843      	lsrs	r3, r0, #1
 800dfb2:	42a3      	cmp	r3, r4
 800dfb4:	d3ee      	bcc.n	800df94 <_realloc_r+0x14>
 800dfb6:	0021      	movs	r1, r4
 800dfb8:	0038      	movs	r0, r7
 800dfba:	f7ff fc25 	bl	800d808 <_malloc_r>
 800dfbe:	1e05      	subs	r5, r0, #0
 800dfc0:	d0e8      	beq.n	800df94 <_realloc_r+0x14>
 800dfc2:	9b01      	ldr	r3, [sp, #4]
 800dfc4:	0022      	movs	r2, r4
 800dfc6:	429c      	cmp	r4, r3
 800dfc8:	d900      	bls.n	800dfcc <_realloc_r+0x4c>
 800dfca:	001a      	movs	r2, r3
 800dfcc:	0031      	movs	r1, r6
 800dfce:	0028      	movs	r0, r5
 800dfd0:	f7ff fb9c 	bl	800d70c <memcpy>
 800dfd4:	0031      	movs	r1, r6
 800dfd6:	0038      	movs	r0, r7
 800dfd8:	f7ff fbaa 	bl	800d730 <_free_r>
 800dfdc:	e7da      	b.n	800df94 <_realloc_r+0x14>

0800dfde <_malloc_usable_size_r>:
 800dfde:	1f0b      	subs	r3, r1, #4
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	1f18      	subs	r0, r3, #4
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	da01      	bge.n	800dfec <_malloc_usable_size_r+0xe>
 800dfe8:	580b      	ldr	r3, [r1, r0]
 800dfea:	18c0      	adds	r0, r0, r3
 800dfec:	4770      	bx	lr
	...

0800dff0 <_init>:
 800dff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dff2:	46c0      	nop			; (mov r8, r8)
 800dff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dff6:	bc08      	pop	{r3}
 800dff8:	469e      	mov	lr, r3
 800dffa:	4770      	bx	lr

0800dffc <_fini>:
 800dffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dffe:	46c0      	nop			; (mov r8, r8)
 800e000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e002:	bc08      	pop	{r3}
 800e004:	469e      	mov	lr, r3
 800e006:	4770      	bx	lr
