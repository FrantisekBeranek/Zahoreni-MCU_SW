
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c998  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  0800ca58  0800ca58  0001ca58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ccac  0800ccac  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800ccac  0800ccac  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ccac  0800ccac  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ccac  0800ccac  0001ccac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ccb0  0800ccb0  0001ccb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ccb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000148c  200001e0  0800ce94  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000166c  0800ce94  0002166c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a39c  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e64  00000000  00000000  0004a5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  0004f408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001568  00000000  00000000  00050b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ffdd  00000000  00000000  000520b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fcad  00000000  00000000  0007208d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a43b7  00000000  00000000  00091d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001360f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005684  00000000  00000000  00136144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ca40 	.word	0x0800ca40

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800ca40 	.word	0x0800ca40

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <setColour>:
#include "lcd.h"

//_____Rozvítí podsvícení dané argumentem_____//
//-> argument: Barva podsvícení
void setColour(BACKLIGHT colour)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	0002      	movs	r2, r0
 8000420:	1dfb      	adds	r3, r7, #7
 8000422:	701a      	strb	r2, [r3, #0]
	switch(colour)
 8000424:	1dfb      	adds	r3, r7, #7
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b02      	cmp	r3, #2
 800042a:	d033      	beq.n	8000494 <setColour+0x7c>
 800042c:	dc49      	bgt.n	80004c2 <setColour+0xaa>
 800042e:	2b00      	cmp	r3, #0
 8000430:	d002      	beq.n	8000438 <setColour+0x20>
 8000432:	2b01      	cmp	r3, #1
 8000434:	d017      	beq.n	8000466 <setColour+0x4e>
 8000436:	e044      	b.n	80004c2 <setColour+0xaa>
	{
	case BACKLIGHT_WHITE:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_SET);
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	482e      	ldr	r0, [pc, #184]	; (80004f8 <setColour+0xe0>)
 800043e:	2201      	movs	r2, #1
 8000440:	0019      	movs	r1, r3
 8000442:	f002 ff28 	bl	8003296 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000446:	2380      	movs	r3, #128	; 0x80
 8000448:	0219      	lsls	r1, r3, #8
 800044a:	2390      	movs	r3, #144	; 0x90
 800044c:	05db      	lsls	r3, r3, #23
 800044e:	2200      	movs	r2, #0
 8000450:	0018      	movs	r0, r3
 8000452:	f002 ff20 	bl	8003296 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000456:	2380      	movs	r3, #128	; 0x80
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	4827      	ldr	r0, [pc, #156]	; (80004f8 <setColour+0xe0>)
 800045c:	2200      	movs	r2, #0
 800045e:	0019      	movs	r1, r3
 8000460:	f002 ff19 	bl	8003296 <HAL_GPIO_WritePin>
		break;
 8000464:	e044      	b.n	80004f0 <setColour+0xd8>

	case BACKLIGHT_GREEN:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	4823      	ldr	r0, [pc, #140]	; (80004f8 <setColour+0xe0>)
 800046c:	2200      	movs	r2, #0
 800046e:	0019      	movs	r1, r3
 8000470:	f002 ff11 	bl	8003296 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	0219      	lsls	r1, r3, #8
 8000478:	2390      	movs	r3, #144	; 0x90
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	2200      	movs	r2, #0
 800047e:	0018      	movs	r0, r3
 8000480:	f002 ff09 	bl	8003296 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_SET);
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	481b      	ldr	r0, [pc, #108]	; (80004f8 <setColour+0xe0>)
 800048a:	2201      	movs	r2, #1
 800048c:	0019      	movs	r1, r3
 800048e:	f002 ff02 	bl	8003296 <HAL_GPIO_WritePin>
		break;
 8000492:	e02d      	b.n	80004f0 <setColour+0xd8>

	case BACKLIGHT_RED:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	4817      	ldr	r0, [pc, #92]	; (80004f8 <setColour+0xe0>)
 800049a:	2200      	movs	r2, #0
 800049c:	0019      	movs	r1, r3
 800049e:	f002 fefa 	bl	8003296 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_SET);
 80004a2:	2380      	movs	r3, #128	; 0x80
 80004a4:	0219      	lsls	r1, r3, #8
 80004a6:	2390      	movs	r3, #144	; 0x90
 80004a8:	05db      	lsls	r3, r3, #23
 80004aa:	2201      	movs	r2, #1
 80004ac:	0018      	movs	r0, r3
 80004ae:	f002 fef2 	bl	8003296 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 80004b2:	2380      	movs	r3, #128	; 0x80
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	4810      	ldr	r0, [pc, #64]	; (80004f8 <setColour+0xe0>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	0019      	movs	r1, r3
 80004bc:	f002 feeb 	bl	8003296 <HAL_GPIO_WritePin>
		break;
 80004c0:	e016      	b.n	80004f0 <setColour+0xd8>

	default:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 80004c2:	2380      	movs	r3, #128	; 0x80
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	480c      	ldr	r0, [pc, #48]	; (80004f8 <setColour+0xe0>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	0019      	movs	r1, r3
 80004cc:	f002 fee3 	bl	8003296 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	0219      	lsls	r1, r3, #8
 80004d4:	2390      	movs	r3, #144	; 0x90
 80004d6:	05db      	lsls	r3, r3, #23
 80004d8:	2200      	movs	r2, #0
 80004da:	0018      	movs	r0, r3
 80004dc:	f002 fedb 	bl	8003296 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <setColour+0xe0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	0019      	movs	r1, r3
 80004ea:	f002 fed4 	bl	8003296 <HAL_GPIO_WritePin>
		break;
 80004ee:	46c0      	nop			; (mov r8, r8)
	}
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	48000400 	.word	0x48000400

080004fc <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	0002      	movs	r2, r0
 8000504:	1dbb      	adds	r3, r7, #6
 8000506:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 8000508:	1dbb      	adds	r3, r7, #6
 800050a:	881a      	ldrh	r2, [r3, #0]
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	429a      	cmp	r2, r3
 8000512:	d104      	bne.n	800051e <HAL_GPIO_EXTI_Callback+0x22>
	{
		flags.buttons.butt0_int = 1;
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <HAL_GPIO_EXTI_Callback+0x40>)
 8000516:	791a      	ldrb	r2, [r3, #4]
 8000518:	2101      	movs	r1, #1
 800051a:	430a      	orrs	r2, r1
 800051c:	711a      	strb	r2, [r3, #4]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 800051e:	1dbb      	adds	r3, r7, #6
 8000520:	881a      	ldrh	r2, [r3, #0]
 8000522:	2380      	movs	r3, #128	; 0x80
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	429a      	cmp	r2, r3
 8000528:	d104      	bne.n	8000534 <HAL_GPIO_EXTI_Callback+0x38>
	{
		flags.buttons.butt1_int = 1;
 800052a:	4b04      	ldr	r3, [pc, #16]	; (800053c <HAL_GPIO_EXTI_Callback+0x40>)
 800052c:	791a      	ldrb	r2, [r3, #4]
 800052e:	2104      	movs	r1, #4
 8000530:	430a      	orrs	r2, r1
 8000532:	711a      	strb	r2, [r3, #4]
	}
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b002      	add	sp, #8
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000618 	.word	0x20000618

08000540 <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800054c:	429a      	cmp	r2, r3
 800054e:	d104      	bne.n	800055a <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		flags.time.ten_ms = 1;
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000552:	781a      	ldrb	r2, [r3, #0]
 8000554:	2101      	movs	r1, #1
 8000556:	430a      	orrs	r2, r1
 8000558:	701a      	strb	r2, [r3, #0]
	}
}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	200005d0 	.word	0x200005d0
 8000568:	20000618 	.word	0x20000618

0800056c <HAL_ADC_ConvCpltCallback>:

//_____ADC data ready callback_____//
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	flags.meas.measDataReady = 1;
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000576:	7d1a      	ldrb	r2, [r3, #20]
 8000578:	2104      	movs	r1, #4
 800057a:	430a      	orrs	r2, r1
 800057c:	751a      	strb	r2, [r3, #20]
}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	b002      	add	sp, #8
 8000584:	bd80      	pop	{r7, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	20000618 	.word	0x20000618

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f001 fd88 	bl	80020a4 <HAL_Init>

  /* USER CODE BEGIN Init */

  //__Buffery___//
  dispBuffer = createBuffer(100);
 8000594:	2064      	movs	r0, #100	; 0x64
 8000596:	f001 f83a 	bl	800160e <createBuffer>
 800059a:	0002      	movs	r2, r0
 800059c:	4b28      	ldr	r3, [pc, #160]	; (8000640 <main+0xb4>)
 800059e:	601a      	str	r2, [r3, #0]
  regBuffer = createBuffer(100);
 80005a0:	2064      	movs	r0, #100	; 0x64
 80005a2:	f001 f834 	bl	800160e <createBuffer>
 80005a6:	0002      	movs	r2, r0
 80005a8:	4b26      	ldr	r3, [pc, #152]	; (8000644 <main+0xb8>)
 80005aa:	601a      	str	r2, [r3, #0]
  USB_Rx_Buffer = createBuffer(500);
 80005ac:	23fa      	movs	r3, #250	; 0xfa
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 f82c 	bl	800160e <createBuffer>
 80005b6:	0002      	movs	r2, r0
 80005b8:	4b23      	ldr	r3, [pc, #140]	; (8000648 <main+0xbc>)
 80005ba:	601a      	str	r2, [r3, #0]
  USB_Tx_Buffer = createBuffer(500);
 80005bc:	23fa      	movs	r3, #250	; 0xfa
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 f824 	bl	800160e <createBuffer>
 80005c6:	0002      	movs	r2, r0
 80005c8:	4b20      	ldr	r3, [pc, #128]	; (800064c <main+0xc0>)
 80005ca:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f846 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 faae 	bl	8000b30 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005d4:	f00b f862 	bl	800b69c <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 80005d8:	f000 fa8c 	bl	8000af4 <MX_DMA_Init>
  MX_ADC_Init();
 80005dc:	f000 f8aa 	bl	8000734 <MX_ADC_Init>
  MX_SPI1_Init();
 80005e0:	f000 f9c6 	bl	8000970 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80005e4:	f000 fa56 	bl	8000a94 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 80005e8:	f000 fa08 	bl	80009fc <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Inicializace displeje___//
  //dispInit();
  //writeChar('a', 1, 5);

  LOAD_MIN_OFF;
 80005ec:	4b18      	ldr	r3, [pc, #96]	; (8000650 <main+0xc4>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	2180      	movs	r1, #128	; 0x80
 80005f2:	0018      	movs	r0, r3
 80005f4:	f002 fe4f 	bl	8003296 <HAL_GPIO_WritePin>
  LOAD_MAX_OFF;
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <main+0xc4>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	2140      	movs	r1, #64	; 0x40
 80005fe:	0018      	movs	r0, r3
 8000600:	f002 fe49 	bl	8003296 <HAL_GPIO_WritePin>
	  flags.conErr = 1;
	  //Odešli zprávu do PC
  }*/

  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 8000604:	4b13      	ldr	r3, [pc, #76]	; (8000654 <main+0xc8>)
 8000606:	0018      	movs	r0, r3
 8000608:	f005 fee2 	bl	80063d0 <HAL_TIM_Base_Start_IT>

  flags.ui.longBeep = 1;
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <main+0xcc>)
 800060e:	7c1a      	ldrb	r2, [r3, #16]
 8000610:	2102      	movs	r1, #2
 8000612:	430a      	orrs	r2, r1
 8000614:	741a      	strb	r2, [r3, #16]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flags.time.ten_ms)	// 10 ms
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <main+0xcc>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2201      	movs	r2, #1
 800061c:	4013      	ands	r3, r2
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2b00      	cmp	r3, #0
 8000622:	d0f8      	beq.n	8000616 <main+0x8a>
	  {
		  clkHandler();
 8000624:	f000 fb70 	bl	8000d08 <clkHandler>
		  buttonDebounce();
 8000628:	f000 fbec 	bl	8000e04 <buttonDebounce>
		  comHandler();
 800062c:	f000 fc5a 	bl	8000ee4 <comHandler>
		  UI_Handler();
 8000630:	f000 fd98 	bl	8001164 <UI_Handler>
		  testHandler();
 8000634:	f001 fb22 	bl	8001c7c <testHandler>
		  measHandler();
 8000638:	f000 feae 	bl	8001398 <measHandler>
	  if(flags.time.ten_ms)	// 10 ms
 800063c:	e7eb      	b.n	8000616 <main+0x8a>
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	20000488 	.word	0x20000488
 8000644:	200006c0 	.word	0x200006c0
 8000648:	20001164 	.word	0x20001164
 800064c:	20000568 	.word	0x20000568
 8000650:	48000800 	.word	0x48000800
 8000654:	200005d0 	.word	0x200005d0
 8000658:	20000618 	.word	0x20000618

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b099      	sub	sp, #100	; 0x64
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	242c      	movs	r4, #44	; 0x2c
 8000664:	193b      	adds	r3, r7, r4
 8000666:	0018      	movs	r0, r3
 8000668:	2334      	movs	r3, #52	; 0x34
 800066a:	001a      	movs	r2, r3
 800066c:	2100      	movs	r1, #0
 800066e:	f00b fdb9 	bl	800c1e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000672:	231c      	movs	r3, #28
 8000674:	18fb      	adds	r3, r7, r3
 8000676:	0018      	movs	r0, r3
 8000678:	2310      	movs	r3, #16
 800067a:	001a      	movs	r2, r3
 800067c:	2100      	movs	r1, #0
 800067e:	f00b fdb1 	bl	800c1e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000682:	003b      	movs	r3, r7
 8000684:	0018      	movs	r0, r3
 8000686:	231c      	movs	r3, #28
 8000688:	001a      	movs	r2, r3
 800068a:	2100      	movs	r1, #0
 800068c:	f00b fdaa 	bl	800c1e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000690:	0021      	movs	r1, r4
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2232      	movs	r2, #50	; 0x32
 8000696:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2201      	movs	r2, #1
 800069c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2201      	movs	r2, #1
 80006a2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2201      	movs	r2, #1
 80006a8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006aa:	187b      	adds	r3, r7, r1
 80006ac:	2210      	movs	r2, #16
 80006ae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2210      	movs	r2, #16
 80006b4:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2202      	movs	r2, #2
 80006ba:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	0212      	lsls	r2, r2, #8
 80006c2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	0352      	lsls	r2, r2, #13
 80006ca:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2200      	movs	r2, #0
 80006d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	0018      	movs	r0, r3
 80006d6:	f004 fca5 	bl	8005024 <HAL_RCC_OscConfig>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80006de:	f000 ff91 	bl	8001604 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	211c      	movs	r1, #28
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	2207      	movs	r2, #7
 80006e8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	187b      	adds	r3, r7, r1
 80006ec:	2202      	movs	r2, #2
 80006ee:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	187b      	adds	r3, r7, r1
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2101      	movs	r1, #1
 8000700:	0018      	movs	r0, r3
 8000702:	f005 f815 	bl	8005730 <HAL_RCC_ClockConfig>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800070a:	f000 ff7b 	bl	8001604 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800070e:	003b      	movs	r3, r7
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	0292      	lsls	r2, r2, #10
 8000714:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000716:	003b      	movs	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800071c:	003b      	movs	r3, r7
 800071e:	0018      	movs	r0, r3
 8000720:	f005 f982 	bl	8005a28 <HAL_RCCEx_PeriphCLKConfig>
 8000724:	1e03      	subs	r3, r0, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000728:	f000 ff6c 	bl	8001604 <Error_Handler>
  }
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b019      	add	sp, #100	; 0x64
 8000732:	bd90      	pop	{r4, r7, pc}

08000734 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	0018      	movs	r0, r3
 800073e:	230c      	movs	r3, #12
 8000740:	001a      	movs	r2, r3
 8000742:	2100      	movs	r1, #0
 8000744:	f00b fd4e 	bl	800c1e4 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000748:	4b87      	ldr	r3, [pc, #540]	; (8000968 <MX_ADC_Init+0x234>)
 800074a:	4a88      	ldr	r2, [pc, #544]	; (800096c <MX_ADC_Init+0x238>)
 800074c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800074e:	4b86      	ldr	r3, [pc, #536]	; (8000968 <MX_ADC_Init+0x234>)
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000754:	4b84      	ldr	r3, [pc, #528]	; (8000968 <MX_ADC_Init+0x234>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800075a:	4b83      	ldr	r3, [pc, #524]	; (8000968 <MX_ADC_Init+0x234>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000760:	4b81      	ldr	r3, [pc, #516]	; (8000968 <MX_ADC_Init+0x234>)
 8000762:	2201      	movs	r2, #1
 8000764:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000766:	4b80      	ldr	r3, [pc, #512]	; (8000968 <MX_ADC_Init+0x234>)
 8000768:	2204      	movs	r2, #4
 800076a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800076c:	4b7e      	ldr	r3, [pc, #504]	; (8000968 <MX_ADC_Init+0x234>)
 800076e:	2200      	movs	r2, #0
 8000770:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000772:	4b7d      	ldr	r3, [pc, #500]	; (8000968 <MX_ADC_Init+0x234>)
 8000774:	2200      	movs	r2, #0
 8000776:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000778:	4b7b      	ldr	r3, [pc, #492]	; (8000968 <MX_ADC_Init+0x234>)
 800077a:	2201      	movs	r2, #1
 800077c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800077e:	4b7a      	ldr	r3, [pc, #488]	; (8000968 <MX_ADC_Init+0x234>)
 8000780:	2200      	movs	r2, #0
 8000782:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000784:	4b78      	ldr	r3, [pc, #480]	; (8000968 <MX_ADC_Init+0x234>)
 8000786:	22c2      	movs	r2, #194	; 0xc2
 8000788:	32ff      	adds	r2, #255	; 0xff
 800078a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800078c:	4b76      	ldr	r3, [pc, #472]	; (8000968 <MX_ADC_Init+0x234>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000792:	4b75      	ldr	r3, [pc, #468]	; (8000968 <MX_ADC_Init+0x234>)
 8000794:	2224      	movs	r2, #36	; 0x24
 8000796:	2100      	movs	r1, #0
 8000798:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800079a:	4b73      	ldr	r3, [pc, #460]	; (8000968 <MX_ADC_Init+0x234>)
 800079c:	2201      	movs	r2, #1
 800079e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80007a0:	4b71      	ldr	r3, [pc, #452]	; (8000968 <MX_ADC_Init+0x234>)
 80007a2:	0018      	movs	r0, r3
 80007a4:	f001 fd06 	bl	80021b4 <HAL_ADC_Init>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80007ac:	f000 ff2a 	bl	8001604 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2280      	movs	r2, #128	; 0x80
 80007ba:	0152      	lsls	r2, r2, #5
 80007bc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2280      	movs	r2, #128	; 0x80
 80007c2:	0552      	lsls	r2, r2, #21
 80007c4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007c6:	1d3a      	adds	r2, r7, #4
 80007c8:	4b67      	ldr	r3, [pc, #412]	; (8000968 <MX_ADC_Init+0x234>)
 80007ca:	0011      	movs	r1, r2
 80007cc:	0018      	movs	r0, r3
 80007ce:	f001 fec3 	bl	8002558 <HAL_ADC_ConfigChannel>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d001      	beq.n	80007da <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80007d6:	f000 ff15 	bl	8001604 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2201      	movs	r2, #1
 80007de:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007e0:	1d3a      	adds	r2, r7, #4
 80007e2:	4b61      	ldr	r3, [pc, #388]	; (8000968 <MX_ADC_Init+0x234>)
 80007e4:	0011      	movs	r1, r2
 80007e6:	0018      	movs	r0, r3
 80007e8:	f001 feb6 	bl	8002558 <HAL_ADC_ConfigChannel>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80007f0:	f000 ff08 	bl	8001604 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2202      	movs	r2, #2
 80007f8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007fa:	1d3a      	adds	r2, r7, #4
 80007fc:	4b5a      	ldr	r3, [pc, #360]	; (8000968 <MX_ADC_Init+0x234>)
 80007fe:	0011      	movs	r1, r2
 8000800:	0018      	movs	r0, r3
 8000802:	f001 fea9 	bl	8002558 <HAL_ADC_ConfigChannel>
 8000806:	1e03      	subs	r3, r0, #0
 8000808:	d001      	beq.n	800080e <MX_ADC_Init+0xda>
  {
    Error_Handler();
 800080a:	f000 fefb 	bl	8001604 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2203      	movs	r2, #3
 8000812:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000814:	1d3a      	adds	r2, r7, #4
 8000816:	4b54      	ldr	r3, [pc, #336]	; (8000968 <MX_ADC_Init+0x234>)
 8000818:	0011      	movs	r1, r2
 800081a:	0018      	movs	r0, r3
 800081c:	f001 fe9c 	bl	8002558 <HAL_ADC_ConfigChannel>
 8000820:	1e03      	subs	r3, r0, #0
 8000822:	d001      	beq.n	8000828 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8000824:	f000 feee 	bl	8001604 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2204      	movs	r2, #4
 800082c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800082e:	1d3a      	adds	r2, r7, #4
 8000830:	4b4d      	ldr	r3, [pc, #308]	; (8000968 <MX_ADC_Init+0x234>)
 8000832:	0011      	movs	r1, r2
 8000834:	0018      	movs	r0, r3
 8000836:	f001 fe8f 	bl	8002558 <HAL_ADC_ConfigChannel>
 800083a:	1e03      	subs	r3, r0, #0
 800083c:	d001      	beq.n	8000842 <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 800083e:	f000 fee1 	bl	8001604 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2205      	movs	r2, #5
 8000846:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000848:	1d3a      	adds	r2, r7, #4
 800084a:	4b47      	ldr	r3, [pc, #284]	; (8000968 <MX_ADC_Init+0x234>)
 800084c:	0011      	movs	r1, r2
 800084e:	0018      	movs	r0, r3
 8000850:	f001 fe82 	bl	8002558 <HAL_ADC_ConfigChannel>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000858:	f000 fed4 	bl	8001604 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2206      	movs	r2, #6
 8000860:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000862:	1d3a      	adds	r2, r7, #4
 8000864:	4b40      	ldr	r3, [pc, #256]	; (8000968 <MX_ADC_Init+0x234>)
 8000866:	0011      	movs	r1, r2
 8000868:	0018      	movs	r0, r3
 800086a:	f001 fe75 	bl	8002558 <HAL_ADC_ConfigChannel>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC_Init+0x142>
  {
    Error_Handler();
 8000872:	f000 fec7 	bl	8001604 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2207      	movs	r2, #7
 800087a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800087c:	1d3a      	adds	r2, r7, #4
 800087e:	4b3a      	ldr	r3, [pc, #232]	; (8000968 <MX_ADC_Init+0x234>)
 8000880:	0011      	movs	r1, r2
 8000882:	0018      	movs	r0, r3
 8000884:	f001 fe68 	bl	8002558 <HAL_ADC_ConfigChannel>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 800088c:	f000 feba 	bl	8001604 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2208      	movs	r2, #8
 8000894:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000896:	1d3a      	adds	r2, r7, #4
 8000898:	4b33      	ldr	r3, [pc, #204]	; (8000968 <MX_ADC_Init+0x234>)
 800089a:	0011      	movs	r1, r2
 800089c:	0018      	movs	r0, r3
 800089e:	f001 fe5b 	bl	8002558 <HAL_ADC_ConfigChannel>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <MX_ADC_Init+0x176>
  {
    Error_Handler();
 80008a6:	f000 fead 	bl	8001604 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2209      	movs	r2, #9
 80008ae:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008b0:	1d3a      	adds	r2, r7, #4
 80008b2:	4b2d      	ldr	r3, [pc, #180]	; (8000968 <MX_ADC_Init+0x234>)
 80008b4:	0011      	movs	r1, r2
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 fe4e 	bl	8002558 <HAL_ADC_ConfigChannel>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <MX_ADC_Init+0x190>
  {
    Error_Handler();
 80008c0:	f000 fea0 	bl	8001604 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	220a      	movs	r2, #10
 80008c8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008ca:	1d3a      	adds	r2, r7, #4
 80008cc:	4b26      	ldr	r3, [pc, #152]	; (8000968 <MX_ADC_Init+0x234>)
 80008ce:	0011      	movs	r1, r2
 80008d0:	0018      	movs	r0, r3
 80008d2:	f001 fe41 	bl	8002558 <HAL_ADC_ConfigChannel>
 80008d6:	1e03      	subs	r3, r0, #0
 80008d8:	d001      	beq.n	80008de <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 80008da:	f000 fe93 	bl	8001604 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	220b      	movs	r2, #11
 80008e2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008e4:	1d3a      	adds	r2, r7, #4
 80008e6:	4b20      	ldr	r3, [pc, #128]	; (8000968 <MX_ADC_Init+0x234>)
 80008e8:	0011      	movs	r1, r2
 80008ea:	0018      	movs	r0, r3
 80008ec:	f001 fe34 	bl	8002558 <HAL_ADC_ConfigChannel>
 80008f0:	1e03      	subs	r3, r0, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 80008f4:	f000 fe86 	bl	8001604 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	220c      	movs	r2, #12
 80008fc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008fe:	1d3a      	adds	r2, r7, #4
 8000900:	4b19      	ldr	r3, [pc, #100]	; (8000968 <MX_ADC_Init+0x234>)
 8000902:	0011      	movs	r1, r2
 8000904:	0018      	movs	r0, r3
 8000906:	f001 fe27 	bl	8002558 <HAL_ADC_ConfigChannel>
 800090a:	1e03      	subs	r3, r0, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 800090e:	f000 fe79 	bl	8001604 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	220d      	movs	r2, #13
 8000916:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000918:	1d3a      	adds	r2, r7, #4
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_ADC_Init+0x234>)
 800091c:	0011      	movs	r1, r2
 800091e:	0018      	movs	r0, r3
 8000920:	f001 fe1a 	bl	8002558 <HAL_ADC_ConfigChannel>
 8000924:	1e03      	subs	r3, r0, #0
 8000926:	d001      	beq.n	800092c <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 8000928:	f000 fe6c 	bl	8001604 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	220e      	movs	r2, #14
 8000930:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000932:	1d3a      	adds	r2, r7, #4
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_ADC_Init+0x234>)
 8000936:	0011      	movs	r1, r2
 8000938:	0018      	movs	r0, r3
 800093a:	f001 fe0d 	bl	8002558 <HAL_ADC_ConfigChannel>
 800093e:	1e03      	subs	r3, r0, #0
 8000940:	d001      	beq.n	8000946 <MX_ADC_Init+0x212>
  {
    Error_Handler();
 8000942:	f000 fe5f 	bl	8001604 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	220f      	movs	r2, #15
 800094a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800094c:	1d3a      	adds	r2, r7, #4
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_ADC_Init+0x234>)
 8000950:	0011      	movs	r1, r2
 8000952:	0018      	movs	r0, r3
 8000954:	f001 fe00 	bl	8002558 <HAL_ADC_ConfigChannel>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d001      	beq.n	8000960 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 800095c:	f000 fe52 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	b004      	add	sp, #16
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000678 	.word	0x20000678
 800096c:	40012400 	.word	0x40012400

08000970 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <MX_SPI1_Init+0x80>)
 8000976:	4a1f      	ldr	r2, [pc, #124]	; (80009f4 <MX_SPI1_Init+0x84>)
 8000978:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_SPI1_Init+0x80>)
 800097c:	2282      	movs	r2, #130	; 0x82
 800097e:	0052      	lsls	r2, r2, #1
 8000980:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000982:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_SPI1_Init+0x80>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000988:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_SPI1_Init+0x80>)
 800098a:	22e0      	movs	r2, #224	; 0xe0
 800098c:	00d2      	lsls	r2, r2, #3
 800098e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <MX_SPI1_Init+0x80>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_SPI1_Init+0x80>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_SPI1_Init+0x80>)
 800099e:	2280      	movs	r2, #128	; 0x80
 80009a0:	0092      	lsls	r2, r2, #2
 80009a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_SPI1_Init+0x80>)
 80009a6:	2238      	movs	r2, #56	; 0x38
 80009a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_SPI1_Init+0x80>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_SPI1_Init+0x80>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_SPI1_Init+0x80>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_SPI1_Init+0x80>)
 80009be:	2207      	movs	r2, #7
 80009c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <MX_SPI1_Init+0x80>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_SPI1_Init+0x80>)
 80009ca:	2208      	movs	r2, #8
 80009cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <MX_SPI1_Init+0x80>)
 80009d0:	0018      	movs	r0, r3
 80009d2:	f005 f927 	bl	8005c24 <HAL_SPI_Init>
 80009d6:	1e03      	subs	r3, r0, #0
 80009d8:	d001      	beq.n	80009de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009da:	f000 fe13 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_SPI1_Init+0x88>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	2140      	movs	r1, #64	; 0x40
 80009e4:	0018      	movs	r0, r3
 80009e6:	f002 fc56 	bl	8003296 <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	2000056c 	.word	0x2000056c
 80009f4:	40013000 	.word	0x40013000
 80009f8:	48000400 	.word	0x48000400

080009fc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	0018      	movs	r0, r3
 8000a06:	231c      	movs	r3, #28
 8000a08:	001a      	movs	r2, r3
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	f00b fbea 	bl	800c1e4 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	; (8000a88 <MX_TIM14_Init+0x8c>)
 8000a12:	4a1e      	ldr	r2, [pc, #120]	; (8000a8c <MX_TIM14_Init+0x90>)
 8000a14:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	; (8000a88 <MX_TIM14_Init+0x8c>)
 8000a18:	222f      	movs	r2, #47	; 0x2f
 8000a1a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_TIM14_Init+0x8c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <MX_TIM14_Init+0x8c>)
 8000a24:	4a1a      	ldr	r2, [pc, #104]	; (8000a90 <MX_TIM14_Init+0x94>)
 8000a26:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a28:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_TIM14_Init+0x8c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2e:	4b16      	ldr	r3, [pc, #88]	; (8000a88 <MX_TIM14_Init+0x8c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a34:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_TIM14_Init+0x8c>)
 8000a36:	0018      	movs	r0, r3
 8000a38:	f005 fc7a 	bl	8006330 <HAL_TIM_Base_Init>
 8000a3c:	1e03      	subs	r3, r0, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000a40:	f000 fde0 	bl	8001604 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8000a44:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <MX_TIM14_Init+0x8c>)
 8000a46:	0018      	movs	r0, r3
 8000a48:	f005 fd14 	bl	8006474 <HAL_TIM_OC_Init>
 8000a4c:	1e03      	subs	r3, r0, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000a50:	f000 fdd8 	bl	8001604 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a6c:	1d39      	adds	r1, r7, #4
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_TIM14_Init+0x8c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	0018      	movs	r0, r3
 8000a74:	f005 fe6c 	bl	8006750 <HAL_TIM_OC_ConfigChannel>
 8000a78:	1e03      	subs	r3, r0, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000a7c:	f000 fdc2 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b008      	add	sp, #32
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200005d0 	.word	0x200005d0
 8000a8c:	40002000 	.word	0x40002000
 8000a90:	0000270f 	.word	0x0000270f

08000a94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a98:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_USART3_UART_Init+0x58>)
 8000a9a:	4a15      	ldr	r2, [pc, #84]	; (8000af0 <MX_USART3_UART_Init+0x5c>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <MX_USART3_UART_Init+0x58>)
 8000aa0:	2296      	movs	r2, #150	; 0x96
 8000aa2:	0212      	lsls	r2, r2, #8
 8000aa4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_USART3_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_USART3_UART_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_USART3_UART_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_USART3_UART_Init+0x58>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_USART3_UART_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_USART3_UART_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_USART3_UART_Init+0x58>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_USART3_UART_Init+0x58>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ad6:	4b05      	ldr	r3, [pc, #20]	; (8000aec <MX_USART3_UART_Init+0x58>)
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f006 f93d 	bl	8006d58 <HAL_UART_Init>
 8000ade:	1e03      	subs	r3, r0, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ae2:	f000 fd8f 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200004e4 	.word	0x200004e4
 8000af0:	40004800 	.word	0x40004800

08000af4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_DMA_Init+0x38>)
 8000afc:	695a      	ldr	r2, [r3, #20]
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <MX_DMA_Init+0x38>)
 8000b00:	2101      	movs	r1, #1
 8000b02:	430a      	orrs	r2, r1
 8000b04:	615a      	str	r2, [r3, #20]
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_DMA_Init+0x38>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	2009      	movs	r0, #9
 8000b18:	f001 ffe0 	bl	8002adc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b1c:	2009      	movs	r0, #9
 8000b1e:	f001 fff2 	bl	8002b06 <HAL_NVIC_EnableIRQ>

}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b002      	add	sp, #8
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	40021000 	.word	0x40021000

08000b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b08b      	sub	sp, #44	; 0x2c
 8000b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	2414      	movs	r4, #20
 8000b38:	193b      	adds	r3, r7, r4
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	2314      	movs	r3, #20
 8000b3e:	001a      	movs	r2, r3
 8000b40:	2100      	movs	r1, #0
 8000b42:	f00b fb4f 	bl	800c1e4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b46:	4b6b      	ldr	r3, [pc, #428]	; (8000cf4 <MX_GPIO_Init+0x1c4>)
 8000b48:	695a      	ldr	r2, [r3, #20]
 8000b4a:	4b6a      	ldr	r3, [pc, #424]	; (8000cf4 <MX_GPIO_Init+0x1c4>)
 8000b4c:	2180      	movs	r1, #128	; 0x80
 8000b4e:	03c9      	lsls	r1, r1, #15
 8000b50:	430a      	orrs	r2, r1
 8000b52:	615a      	str	r2, [r3, #20]
 8000b54:	4b67      	ldr	r3, [pc, #412]	; (8000cf4 <MX_GPIO_Init+0x1c4>)
 8000b56:	695a      	ldr	r2, [r3, #20]
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	03db      	lsls	r3, r3, #15
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	4b64      	ldr	r3, [pc, #400]	; (8000cf4 <MX_GPIO_Init+0x1c4>)
 8000b64:	695a      	ldr	r2, [r3, #20]
 8000b66:	4b63      	ldr	r3, [pc, #396]	; (8000cf4 <MX_GPIO_Init+0x1c4>)
 8000b68:	2180      	movs	r1, #128	; 0x80
 8000b6a:	0309      	lsls	r1, r1, #12
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	615a      	str	r2, [r3, #20]
 8000b70:	4b60      	ldr	r3, [pc, #384]	; (8000cf4 <MX_GPIO_Init+0x1c4>)
 8000b72:	695a      	ldr	r2, [r3, #20]
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	031b      	lsls	r3, r3, #12
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	4b5d      	ldr	r3, [pc, #372]	; (8000cf4 <MX_GPIO_Init+0x1c4>)
 8000b80:	695a      	ldr	r2, [r3, #20]
 8000b82:	4b5c      	ldr	r3, [pc, #368]	; (8000cf4 <MX_GPIO_Init+0x1c4>)
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	0289      	lsls	r1, r1, #10
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	615a      	str	r2, [r3, #20]
 8000b8c:	4b59      	ldr	r3, [pc, #356]	; (8000cf4 <MX_GPIO_Init+0x1c4>)
 8000b8e:	695a      	ldr	r2, [r3, #20]
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	029b      	lsls	r3, r3, #10
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b56      	ldr	r3, [pc, #344]	; (8000cf4 <MX_GPIO_Init+0x1c4>)
 8000b9c:	695a      	ldr	r2, [r3, #20]
 8000b9e:	4b55      	ldr	r3, [pc, #340]	; (8000cf4 <MX_GPIO_Init+0x1c4>)
 8000ba0:	2180      	movs	r1, #128	; 0x80
 8000ba2:	02c9      	lsls	r1, r1, #11
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	615a      	str	r2, [r3, #20]
 8000ba8:	4b52      	ldr	r3, [pc, #328]	; (8000cf4 <MX_GPIO_Init+0x1c4>)
 8000baa:	695a      	ldr	r2, [r3, #20]
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	02db      	lsls	r3, r3, #11
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb6:	4b4f      	ldr	r3, [pc, #316]	; (8000cf4 <MX_GPIO_Init+0x1c4>)
 8000bb8:	695a      	ldr	r2, [r3, #20]
 8000bba:	4b4e      	ldr	r3, [pc, #312]	; (8000cf4 <MX_GPIO_Init+0x1c4>)
 8000bbc:	2180      	movs	r1, #128	; 0x80
 8000bbe:	0349      	lsls	r1, r1, #13
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	615a      	str	r2, [r3, #20]
 8000bc4:	4b4b      	ldr	r3, [pc, #300]	; (8000cf4 <MX_GPIO_Init+0x1c4>)
 8000bc6:	695a      	ldr	r2, [r3, #20]
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	035b      	lsls	r3, r3, #13
 8000bcc:	4013      	ands	r3, r2
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000bd2:	4949      	ldr	r1, [pc, #292]	; (8000cf8 <MX_GPIO_Init+0x1c8>)
 8000bd4:	4b49      	ldr	r3, [pc, #292]	; (8000cfc <MX_GPIO_Init+0x1cc>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f002 fb5c 	bl	8003296 <HAL_GPIO_WritePin>
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000bde:	239e      	movs	r3, #158	; 0x9e
 8000be0:	015b      	lsls	r3, r3, #5
 8000be2:	4847      	ldr	r0, [pc, #284]	; (8000d00 <MX_GPIO_Init+0x1d0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	0019      	movs	r1, r3
 8000be8:	f002 fb55 	bl	8003296 <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000bec:	2380      	movs	r3, #128	; 0x80
 8000bee:	0219      	lsls	r1, r3, #8
 8000bf0:	2390      	movs	r3, #144	; 0x90
 8000bf2:	05db      	lsls	r3, r3, #23
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f002 fb4d 	bl	8003296 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin DEBUG_Pin SR_CLR_Pin SR_RCLK_Pin
                           SR_OE_Pin DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin
                           BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000bfc:	193b      	adds	r3, r7, r4
 8000bfe:	4a3e      	ldr	r2, [pc, #248]	; (8000cf8 <MX_GPIO_Init+0x1c8>)
 8000c00:	601a      	str	r2, [r3, #0]
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c02:	193b      	adds	r3, r7, r4
 8000c04:	2201      	movs	r2, #1
 8000c06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	193b      	adds	r3, r7, r4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	193b      	adds	r3, r7, r4
 8000c10:	2200      	movs	r2, #0
 8000c12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c14:	193b      	adds	r3, r7, r4
 8000c16:	4a39      	ldr	r2, [pc, #228]	; (8000cfc <MX_GPIO_Init+0x1cc>)
 8000c18:	0019      	movs	r1, r3
 8000c1a:	0010      	movs	r0, r2
 8000c1c:	f002 f9a6 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000c20:	0021      	movs	r1, r4
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	229e      	movs	r2, #158	; 0x9e
 8000c26:	0152      	lsls	r2, r2, #5
 8000c28:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	000c      	movs	r4, r1
 8000c2c:	193b      	adds	r3, r7, r4
 8000c2e:	2201      	movs	r2, #1
 8000c30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	193b      	adds	r3, r7, r4
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	193b      	adds	r3, r7, r4
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	4a2f      	ldr	r2, [pc, #188]	; (8000d00 <MX_GPIO_Init+0x1d0>)
 8000c42:	0019      	movs	r1, r3
 8000c44:	0010      	movs	r0, r2
 8000c46:	f002 f991 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	22c0      	movs	r2, #192	; 0xc0
 8000c4e:	0092      	lsls	r2, r2, #2
 8000c50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	2288      	movs	r2, #136	; 0x88
 8000c56:	0352      	lsls	r2, r2, #13
 8000c58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c5a:	193b      	adds	r3, r7, r4
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	193a      	adds	r2, r7, r4
 8000c62:	2390      	movs	r3, #144	; 0x90
 8000c64:	05db      	lsls	r3, r3, #23
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f002 f97f 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c6e:	193b      	adds	r3, r7, r4
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	00d2      	lsls	r2, r2, #3
 8000c74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c76:	193b      	adds	r3, r7, r4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	193b      	adds	r3, r7, r4
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c82:	193a      	adds	r2, r7, r4
 8000c84:	2390      	movs	r3, #144	; 0x90
 8000c86:	05db      	lsls	r3, r3, #23
 8000c88:	0011      	movs	r1, r2
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f002 f96e 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 8000c90:	0021      	movs	r1, r4
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	2280      	movs	r2, #128	; 0x80
 8000c96:	0212      	lsls	r2, r2, #8
 8000c98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	000c      	movs	r4, r1
 8000c9c:	193b      	adds	r3, r7, r4
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	193b      	adds	r3, r7, r4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	193b      	adds	r3, r7, r4
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 8000cae:	193a      	adds	r2, r7, r4
 8000cb0:	2390      	movs	r3, #144	; 0x90
 8000cb2:	05db      	lsls	r3, r3, #23
 8000cb4:	0011      	movs	r1, r2
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f002 f958 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 8000cbc:	193b      	adds	r3, r7, r4
 8000cbe:	2204      	movs	r2, #4
 8000cc0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc2:	193b      	adds	r3, r7, r4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	193b      	adds	r3, r7, r4
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	4a0c      	ldr	r2, [pc, #48]	; (8000d04 <MX_GPIO_Init+0x1d4>)
 8000cd2:	0019      	movs	r1, r3
 8000cd4:	0010      	movs	r0, r2
 8000cd6:	f002 f949 	bl	8002f6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2007      	movs	r0, #7
 8000ce0:	f001 fefc 	bl	8002adc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000ce4:	2007      	movs	r0, #7
 8000ce6:	f001 ff0e 	bl	8002b06 <HAL_NVIC_EnableIRQ>

}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b00b      	add	sp, #44	; 0x2c
 8000cf0:	bd90      	pop	{r4, r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	0000f3c4 	.word	0x0000f3c4
 8000cfc:	48000400 	.word	0x48000400
 8000d00:	48000800 	.word	0x48000800
 8000d04:	48000c00 	.word	0x48000c00

08000d08 <clkHandler>:

/* USER CODE BEGIN 4 */

void clkHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	flags.time.ten_ms = 0;
 8000d0c:	4b3b      	ldr	r3, [pc, #236]	; (8000dfc <clkHandler+0xf4>)
 8000d0e:	781a      	ldrb	r2, [r3, #0]
 8000d10:	2101      	movs	r1, #1
 8000d12:	438a      	bics	r2, r1
 8000d14:	701a      	strb	r2, [r3, #0]
	flags.time.sec	= 0;
 8000d16:	4b39      	ldr	r3, [pc, #228]	; (8000dfc <clkHandler+0xf4>)
 8000d18:	781a      	ldrb	r2, [r3, #0]
 8000d1a:	2102      	movs	r1, #2
 8000d1c:	438a      	bics	r2, r1
 8000d1e:	701a      	strb	r2, [r3, #0]
	flags.time.min	= 0;
 8000d20:	4b36      	ldr	r3, [pc, #216]	; (8000dfc <clkHandler+0xf4>)
 8000d22:	781a      	ldrb	r2, [r3, #0]
 8000d24:	2104      	movs	r1, #4
 8000d26:	438a      	bics	r2, r1
 8000d28:	701a      	strb	r2, [r3, #0]
	flags.time.hour	= 0;
 8000d2a:	4b34      	ldr	r3, [pc, #208]	; (8000dfc <clkHandler+0xf4>)
 8000d2c:	781a      	ldrb	r2, [r3, #0]
 8000d2e:	2108      	movs	r1, #8
 8000d30:	438a      	bics	r2, r1
 8000d32:	701a      	strb	r2, [r3, #0]
	sysTime[SYSTIME_TEN_MS]++;
 8000d34:	4b32      	ldr	r3, [pc, #200]	; (8000e00 <clkHandler+0xf8>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	1c5a      	adds	r2, r3, #1
 8000d3a:	4b31      	ldr	r3, [pc, #196]	; (8000e00 <clkHandler+0xf8>)
 8000d3c:	601a      	str	r2, [r3, #0]
	if((sysTime[SYSTIME_TEN_MS] % 10) == 0)	//1 s
 8000d3e:	4b30      	ldr	r3, [pc, #192]	; (8000e00 <clkHandler+0xf8>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	210a      	movs	r1, #10
 8000d44:	0018      	movs	r0, r3
 8000d46:	f7ff fa77 	bl	8000238 <__aeabi_uidivmod>
 8000d4a:	1e0b      	subs	r3, r1, #0
 8000d4c:	d109      	bne.n	8000d62 <clkHandler+0x5a>
	{
		sysTime[SYSTIME_SEC]++;
 8000d4e:	4b2c      	ldr	r3, [pc, #176]	; (8000e00 <clkHandler+0xf8>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	4b2a      	ldr	r3, [pc, #168]	; (8000e00 <clkHandler+0xf8>)
 8000d56:	605a      	str	r2, [r3, #4]
		flags.time.sec = 1;
 8000d58:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <clkHandler+0xf4>)
 8000d5a:	781a      	ldrb	r2, [r3, #0]
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	701a      	strb	r2, [r3, #0]
	}

	if(flags.time.sec)
 8000d62:	4b26      	ldr	r3, [pc, #152]	; (8000dfc <clkHandler+0xf4>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2202      	movs	r2, #2
 8000d68:	4013      	ands	r3, r2
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d042      	beq.n	8000df6 <clkHandler+0xee>
	{
		if((sysTime[SYSTIME_SEC] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8000d70:	4b23      	ldr	r3, [pc, #140]	; (8000e00 <clkHandler+0xf8>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	213c      	movs	r1, #60	; 0x3c
 8000d76:	0018      	movs	r0, r3
 8000d78:	f7ff fa5e 	bl	8000238 <__aeabi_uidivmod>
 8000d7c:	1e0b      	subs	r3, r1, #0
 8000d7e:	d110      	bne.n	8000da2 <clkHandler+0x9a>
 8000d80:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <clkHandler+0xf8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d00c      	beq.n	8000da2 <clkHandler+0x9a>
		{
			sysTime[SYSTIME_SEC] = 0;
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <clkHandler+0xf8>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	605a      	str	r2, [r3, #4]
			sysTime[SYSTIME_MIN]++;
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <clkHandler+0xf8>)
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	1c5a      	adds	r2, r3, #1
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <clkHandler+0xf8>)
 8000d96:	609a      	str	r2, [r3, #8]
			flags.time.min = 1;
 8000d98:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <clkHandler+0xf4>)
 8000d9a:	781a      	ldrb	r2, [r3, #0]
 8000d9c:	2104      	movs	r1, #4
 8000d9e:	430a      	orrs	r2, r1
 8000da0:	701a      	strb	r2, [r3, #0]
		}

		if(flags.time.min)
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <clkHandler+0xf4>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2204      	movs	r2, #4
 8000da8:	4013      	ands	r3, r2
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d022      	beq.n	8000df6 <clkHandler+0xee>
		{
			if((sysTime[SYSTIME_MIN] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8000db0:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <clkHandler+0xf8>)
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	213c      	movs	r1, #60	; 0x3c
 8000db6:	0018      	movs	r0, r3
 8000db8:	f7ff fa3e 	bl	8000238 <__aeabi_uidivmod>
 8000dbc:	1e0b      	subs	r3, r1, #0
 8000dbe:	d11a      	bne.n	8000df6 <clkHandler+0xee>
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <clkHandler+0xf8>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d016      	beq.n	8000df6 <clkHandler+0xee>
			{

				sysTime[SYSTIME_SEC] = 0;
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <clkHandler+0xf8>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	605a      	str	r2, [r3, #4]
				sysTime[SYSTIME_MIN] = 0;
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <clkHandler+0xf8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
				sysTime[SYSTIME_HOUR]++;
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <clkHandler+0xf8>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	1c5a      	adds	r2, r3, #1
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <clkHandler+0xf8>)
 8000ddc:	60da      	str	r2, [r3, #12]
				flags.time.hour = 1;
 8000dde:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <clkHandler+0xf4>)
 8000de0:	781a      	ldrb	r2, [r3, #0]
 8000de2:	2108      	movs	r1, #8
 8000de4:	430a      	orrs	r2, r1
 8000de6:	701a      	strb	r2, [r3, #0]
				if(sysTime[SYSTIME_HOUR] >= 23)
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <clkHandler+0xf8>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	2b16      	cmp	r3, #22
 8000dee:	d902      	bls.n	8000df6 <clkHandler+0xee>
					sysTime[SYSTIME_HOUR] = 0;
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <clkHandler+0xf8>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime[SYSTIME_HOUR], sysTime[SYSTIME_MIN], sysTime[SYSTIME_SEC]);
		pushStr(USB_Tx_Buffer, timeStamp, strlen(timeStamp));	//odešli čas
	}
#endif
}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000618 	.word	0x20000618
 8000e00:	2000023c 	.word	0x2000023c

08000e04 <buttonDebounce>:

void buttonDebounce(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	if(flags.buttons.butt0_int)
 8000e08:	4b33      	ldr	r3, [pc, #204]	; (8000ed8 <buttonDebounce+0xd4>)
 8000e0a:	791b      	ldrb	r3, [r3, #4]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4013      	ands	r3, r2
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d02a      	beq.n	8000e6c <buttonDebounce+0x68>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 8000e16:	2380      	movs	r3, #128	; 0x80
 8000e18:	009a      	lsls	r2, r3, #2
 8000e1a:	2390      	movs	r3, #144	; 0x90
 8000e1c:	05db      	lsls	r3, r3, #23
 8000e1e:	0011      	movs	r1, r2
 8000e20:	0018      	movs	r0, r3
 8000e22:	f002 fa1b 	bl	800325c <HAL_GPIO_ReadPin>
 8000e26:	0003      	movs	r3, r0
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d106      	bne.n	8000e3a <buttonDebounce+0x36>
		{
			button0_Debounce++;
 8000e2c:	4b2b      	ldr	r3, [pc, #172]	; (8000edc <buttonDebounce+0xd8>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	3301      	adds	r3, #1
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	4b29      	ldr	r3, [pc, #164]	; (8000edc <buttonDebounce+0xd8>)
 8000e36:	701a      	strb	r2, [r3, #0]
 8000e38:	e007      	b.n	8000e4a <buttonDebounce+0x46>
		}
		else
		{
			button0_Debounce = 0;
 8000e3a:	4b28      	ldr	r3, [pc, #160]	; (8000edc <buttonDebounce+0xd8>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt0_int = 0;
 8000e40:	4b25      	ldr	r3, [pc, #148]	; (8000ed8 <buttonDebounce+0xd4>)
 8000e42:	791a      	ldrb	r2, [r3, #4]
 8000e44:	2101      	movs	r1, #1
 8000e46:	438a      	bics	r2, r1
 8000e48:	711a      	strb	r2, [r3, #4]
		}
		if(button0_Debounce >= 5)
 8000e4a:	4b24      	ldr	r3, [pc, #144]	; (8000edc <buttonDebounce+0xd8>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	d90c      	bls.n	8000e6c <buttonDebounce+0x68>
		{
			flags.buttons.butt0_ver = 1;
 8000e52:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <buttonDebounce+0xd4>)
 8000e54:	791a      	ldrb	r2, [r3, #4]
 8000e56:	2102      	movs	r1, #2
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt0_int = 0;
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <buttonDebounce+0xd4>)
 8000e5e:	791a      	ldrb	r2, [r3, #4]
 8000e60:	2101      	movs	r1, #1
 8000e62:	438a      	bics	r2, r1
 8000e64:	711a      	strb	r2, [r3, #4]
			button0_Debounce = 0;
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <buttonDebounce+0xd8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
			//writeChar('a', 1, 5);
#endif
		}
	}

	if(flags.buttons.butt1_int)
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <buttonDebounce+0xd4>)
 8000e6e:	791b      	ldrb	r3, [r3, #4]
 8000e70:	2204      	movs	r2, #4
 8000e72:	4013      	ands	r3, r2
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d02a      	beq.n	8000ed0 <buttonDebounce+0xcc>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	005a      	lsls	r2, r3, #1
 8000e7e:	2390      	movs	r3, #144	; 0x90
 8000e80:	05db      	lsls	r3, r3, #23
 8000e82:	0011      	movs	r1, r2
 8000e84:	0018      	movs	r0, r3
 8000e86:	f002 f9e9 	bl	800325c <HAL_GPIO_ReadPin>
 8000e8a:	0003      	movs	r3, r0
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d106      	bne.n	8000e9e <buttonDebounce+0x9a>
		{
			button1_Debounce++;
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <buttonDebounce+0xdc>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	3301      	adds	r3, #1
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <buttonDebounce+0xdc>)
 8000e9a:	701a      	strb	r2, [r3, #0]
 8000e9c:	e007      	b.n	8000eae <buttonDebounce+0xaa>
		}
		else
		{
			button1_Debounce = 0;
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <buttonDebounce+0xdc>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt1_int = 0;
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <buttonDebounce+0xd4>)
 8000ea6:	791a      	ldrb	r2, [r3, #4]
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	438a      	bics	r2, r1
 8000eac:	711a      	strb	r2, [r3, #4]
		}
		if(button1_Debounce >= 5)
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <buttonDebounce+0xdc>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d90c      	bls.n	8000ed0 <buttonDebounce+0xcc>
		{
			flags.buttons.butt1_ver = 1;
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <buttonDebounce+0xd4>)
 8000eb8:	791a      	ldrb	r2, [r3, #4]
 8000eba:	2108      	movs	r1, #8
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt1_int = 0;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <buttonDebounce+0xd4>)
 8000ec2:	791a      	ldrb	r2, [r3, #4]
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	438a      	bics	r2, r1
 8000ec8:	711a      	strb	r2, [r3, #4]
			button1_Debounce = 0;
 8000eca:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <buttonDebounce+0xdc>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
#endif
		}
	}
}
 8000ed0:	46c0      	nop			; (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	20000618 	.word	0x20000618
 8000edc:	2000024c 	.word	0x2000024c
 8000ee0:	2000024d 	.word	0x2000024d

08000ee4 <comHandler>:
 *
 * Při přijmutí instrukce nedochází k zpracování, ale pouze k nastavení adekvátního flagu.
 * Vykonání instrukce musí být zařízeno v jiné části hlavního programu.
 */
void comHandler(void)
{
 8000ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee6:	b0a1      	sub	sp, #132	; 0x84
 8000ee8:	af00      	add	r7, sp, #0
	//___Příjem dat___//
	if(flags.data_received)
 8000eea:	4b97      	ldr	r3, [pc, #604]	; (8001148 <comHandler+0x264>)
 8000eec:	7a1b      	ldrb	r3, [r3, #8]
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d042      	beq.n	8000f7e <comHandler+0x9a>
	{
		char instruction;
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 8000ef8:	e02e      	b.n	8000f58 <comHandler+0x74>
		{
#ifdef __DEBUG_INST__
			uint8_t txt[30];
#endif

			switch(instruction)
 8000efa:	234b      	movs	r3, #75	; 0x4b
 8000efc:	2220      	movs	r2, #32
 8000efe:	4694      	mov	ip, r2
 8000f00:	44bc      	add	ip, r7
 8000f02:	4463      	add	r3, ip
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b73      	cmp	r3, #115	; 0x73
 8000f08:	d008      	beq.n	8000f1c <comHandler+0x38>
 8000f0a:	dc1f      	bgt.n	8000f4c <comHandler+0x68>
 8000f0c:	2b70      	cmp	r3, #112	; 0x70
 8000f0e:	d011      	beq.n	8000f34 <comHandler+0x50>
 8000f10:	dc1c      	bgt.n	8000f4c <comHandler+0x68>
 8000f12:	2b63      	cmp	r3, #99	; 0x63
 8000f14:	d008      	beq.n	8000f28 <comHandler+0x44>
 8000f16:	2b6b      	cmp	r3, #107	; 0x6b
 8000f18:	d012      	beq.n	8000f40 <comHandler+0x5c>
 8000f1a:	e017      	b.n	8000f4c <comHandler+0x68>
			{
			case 's': ;
				//___Start testu___//
				flags.instructions.startRequest = 1;
 8000f1c:	4b8a      	ldr	r3, [pc, #552]	; (8001148 <comHandler+0x264>)
 8000f1e:	7b1a      	ldrb	r2, [r3, #12]
 8000f20:	2101      	movs	r1, #1
 8000f22:	430a      	orrs	r2, r1
 8000f24:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Start\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000f26:	e017      	b.n	8000f58 <comHandler+0x74>

			case'c': ;
				//___Ukončení___//
				flags.instructions.stopRequest = 1;
 8000f28:	4b87      	ldr	r3, [pc, #540]	; (8001148 <comHandler+0x264>)
 8000f2a:	7b1a      	ldrb	r2, [r3, #12]
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Ukonceni\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000f32:	e011      	b.n	8000f58 <comHandler+0x74>

			case'p': ;
				//___Pauza___//
				flags.instructions.pauseRequest = 1;
 8000f34:	4b84      	ldr	r3, [pc, #528]	; (8001148 <comHandler+0x264>)
 8000f36:	7b1a      	ldrb	r2, [r3, #12]
 8000f38:	2104      	movs	r1, #4
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Pauza\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000f3e:	e00b      	b.n	8000f58 <comHandler+0x74>

			case'k': ;
				//___Kalibrace___//
				flags.instructions.calibRequest = 1;
 8000f40:	4b81      	ldr	r3, [pc, #516]	; (8001148 <comHandler+0x264>)
 8000f42:	7b1a      	ldrb	r2, [r3, #12]
 8000f44:	2108      	movs	r1, #8
 8000f46:	430a      	orrs	r2, r1
 8000f48:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Kalibrace\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000f4a:	e005      	b.n	8000f58 <comHandler+0x74>

			default: ;
				//___Neplatný příkaz___//
				flags.instructions.unknownInst = 1;
 8000f4c:	4b7e      	ldr	r3, [pc, #504]	; (8001148 <comHandler+0x264>)
 8000f4e:	7b1a      	ldrb	r2, [r3, #12]
 8000f50:	2110      	movs	r1, #16
 8000f52:	430a      	orrs	r2, r1
 8000f54:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Neplatna instrukce\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000f56:	46c0      	nop			; (mov r8, r8)
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 8000f58:	4b7c      	ldr	r3, [pc, #496]	; (800114c <comHandler+0x268>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	224b      	movs	r2, #75	; 0x4b
 8000f5e:	2120      	movs	r1, #32
 8000f60:	468c      	mov	ip, r1
 8000f62:	44bc      	add	ip, r7
 8000f64:	4462      	add	r2, ip
 8000f66:	0011      	movs	r1, r2
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f000 fbe4 	bl	8001736 <pop>
 8000f6e:	0003      	movs	r3, r0
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d1c2      	bne.n	8000efa <comHandler+0x16>
			}
		}
		flags.data_received = 0;
 8000f74:	4b74      	ldr	r3, [pc, #464]	; (8001148 <comHandler+0x264>)
 8000f76:	7a1a      	ldrb	r2, [r3, #8]
 8000f78:	2101      	movs	r1, #1
 8000f7a:	438a      	bics	r2, r1
 8000f7c:	721a      	strb	r2, [r3, #8]
	}

	if(flags.testProgress)
 8000f7e:	4b72      	ldr	r3, [pc, #456]	; (8001148 <comHandler+0x264>)
 8000f80:	7e1b      	ldrb	r3, [r3, #24]
 8000f82:	2202      	movs	r2, #2
 8000f84:	4013      	ands	r3, r2
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d01d      	beq.n	8000fc8 <comHandler+0xe4>
	{
		char txt[] = {"Test progress\n"};
 8000f8c:	203c      	movs	r0, #60	; 0x3c
 8000f8e:	2320      	movs	r3, #32
 8000f90:	18fb      	adds	r3, r7, r3
 8000f92:	181b      	adds	r3, r3, r0
 8000f94:	4a6e      	ldr	r2, [pc, #440]	; (8001150 <comHandler+0x26c>)
 8000f96:	ca32      	ldmia	r2!, {r1, r4, r5}
 8000f98:	c332      	stmia	r3!, {r1, r4, r5}
 8000f9a:	8811      	ldrh	r1, [r2, #0]
 8000f9c:	8019      	strh	r1, [r3, #0]
 8000f9e:	7892      	ldrb	r2, [r2, #2]
 8000fa0:	709a      	strb	r2, [r3, #2]
		pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000fa2:	4b6c      	ldr	r3, [pc, #432]	; (8001154 <comHandler+0x270>)
 8000fa4:	681e      	ldr	r6, [r3, #0]
 8000fa6:	0004      	movs	r4, r0
 8000fa8:	2320      	movs	r3, #32
 8000faa:	18fb      	adds	r3, r7, r3
 8000fac:	181b      	adds	r3, r3, r0
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f7ff f8aa 	bl	8000108 <strlen>
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	001a      	movs	r2, r3
 8000fb8:	0020      	movs	r0, r4
 8000fba:	2320      	movs	r3, #32
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	181b      	adds	r3, r3, r0
 8000fc0:	0019      	movs	r1, r3
 8000fc2:	0030      	movs	r0, r6
 8000fc4:	f000 fb8f 	bl	80016e6 <pushStr>
	}

	if(flags.meas.measComplete)
 8000fc8:	4b5f      	ldr	r3, [pc, #380]	; (8001148 <comHandler+0x264>)
 8000fca:	7d1b      	ldrb	r3, [r3, #20]
 8000fcc:	2202      	movs	r2, #2
 8000fce:	4013      	ands	r3, r2
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d042      	beq.n	800105c <comHandler+0x178>
	{
		char txt[] = {"Measure\n"};
 8000fd6:	2130      	movs	r1, #48	; 0x30
 8000fd8:	2320      	movs	r3, #32
 8000fda:	18fb      	adds	r3, r7, r3
 8000fdc:	185b      	adds	r3, r3, r1
 8000fde:	4a5e      	ldr	r2, [pc, #376]	; (8001158 <comHandler+0x274>)
 8000fe0:	ca11      	ldmia	r2!, {r0, r4}
 8000fe2:	c311      	stmia	r3!, {r0, r4}
 8000fe4:	7812      	ldrb	r2, [r2, #0]
 8000fe6:	701a      	strb	r2, [r3, #0]
		pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000fe8:	4b5a      	ldr	r3, [pc, #360]	; (8001154 <comHandler+0x270>)
 8000fea:	681e      	ldr	r6, [r3, #0]
 8000fec:	000c      	movs	r4, r1
 8000fee:	2320      	movs	r3, #32
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	185b      	adds	r3, r3, r1
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f7ff f887 	bl	8000108 <strlen>
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	001a      	movs	r2, r3
 8000ffe:	0021      	movs	r1, r4
 8001000:	2320      	movs	r3, #32
 8001002:	18fb      	adds	r3, r7, r3
 8001004:	185b      	adds	r3, r3, r1
 8001006:	0019      	movs	r1, r3
 8001008:	0030      	movs	r0, r6
 800100a:	f000 fb6c 	bl	80016e6 <pushStr>

		uint8_t measResult[32];
		for(int i = 0; i < 16; i++)
 800100e:	2300      	movs	r3, #0
 8001010:	67bb      	str	r3, [r7, #120]	; 0x78
 8001012:	e018      	b.n	8001046 <comHandler+0x162>
		{
			measResult[2*i] = ADC_Results[i] & 0x00FF;
 8001014:	4b51      	ldr	r3, [pc, #324]	; (800115c <comHandler+0x278>)
 8001016:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001018:	0092      	lsls	r2, r2, #2
 800101a:	58d2      	ldr	r2, [r2, r3]
 800101c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	b2d1      	uxtb	r1, r2
 8001022:	2220      	movs	r2, #32
 8001024:	18ba      	adds	r2, r7, r2
 8001026:	54d1      	strb	r1, [r2, r3]
			measResult[2*i + 1] = (ADC_Results[i] & 0xFF00) >> 8;
 8001028:	4b4c      	ldr	r3, [pc, #304]	; (800115c <comHandler+0x278>)
 800102a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800102c:	0092      	lsls	r2, r2, #2
 800102e:	58d3      	ldr	r3, [r2, r3]
 8001030:	0a1a      	lsrs	r2, r3, #8
 8001032:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	3301      	adds	r3, #1
 8001038:	b2d1      	uxtb	r1, r2
 800103a:	2220      	movs	r2, #32
 800103c:	18ba      	adds	r2, r7, r2
 800103e:	54d1      	strb	r1, [r2, r3]
		for(int i = 0; i < 16; i++)
 8001040:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001042:	3301      	adds	r3, #1
 8001044:	67bb      	str	r3, [r7, #120]	; 0x78
 8001046:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001048:	2b0f      	cmp	r3, #15
 800104a:	dde3      	ble.n	8001014 <comHandler+0x130>
		}
		pushStr(USB_Tx_Buffer, measResult, 32);
 800104c:	4b41      	ldr	r3, [pc, #260]	; (8001154 <comHandler+0x270>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2220      	movs	r2, #32
 8001052:	18b9      	adds	r1, r7, r2
 8001054:	2220      	movs	r2, #32
 8001056:	0018      	movs	r0, r3
 8001058:	f000 fb45 	bl	80016e6 <pushStr>
	}

	//___Odesílání dat___//
	//_Ošetření plného bufferu_//
	if(USB_Tx_Buffer->status == BUFFER_FULL)
 800105c:	4b3d      	ldr	r3, [pc, #244]	; (8001154 <comHandler+0x270>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	7d1b      	ldrb	r3, [r3, #20]
 8001062:	2b02      	cmp	r3, #2
 8001064:	d118      	bne.n	8001098 <comHandler+0x1b4>
	{
		char msg[] = {"Buffer full\n"};
 8001066:	2120      	movs	r1, #32
 8001068:	2320      	movs	r3, #32
 800106a:	18fb      	adds	r3, r7, r3
 800106c:	185b      	adds	r3, r3, r1
 800106e:	4a3c      	ldr	r2, [pc, #240]	; (8001160 <comHandler+0x27c>)
 8001070:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001072:	c331      	stmia	r3!, {r0, r4, r5}
 8001074:	7812      	ldrb	r2, [r2, #0]
 8001076:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(msg, strlen(msg));
 8001078:	000e      	movs	r6, r1
 800107a:	2320      	movs	r3, #32
 800107c:	18fb      	adds	r3, r7, r3
 800107e:	185b      	adds	r3, r3, r1
 8001080:	0018      	movs	r0, r3
 8001082:	f7ff f841 	bl	8000108 <strlen>
 8001086:	0003      	movs	r3, r0
 8001088:	b29a      	uxth	r2, r3
 800108a:	2320      	movs	r3, #32
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	199b      	adds	r3, r3, r6
 8001090:	0011      	movs	r1, r2
 8001092:	0018      	movs	r0, r3
 8001094:	f00a fbac 	bl	800b7f0 <CDC_Transmit_FS>
	}
	//_Samotné odesílání_//
	if(USB_Tx_Buffer->filled)
 8001098:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <comHandler+0x270>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d04e      	beq.n	8001140 <comHandler+0x25c>
	{
 80010a2:	466b      	mov	r3, sp
 80010a4:	001e      	movs	r6, r3
		int size = USB_Tx_Buffer->filled;
 80010a6:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <comHandler+0x270>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	677b      	str	r3, [r7, #116]	; 0x74
		char tmpStr[size+1];
 80010ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010b0:	3301      	adds	r3, #1
 80010b2:	1e5a      	subs	r2, r3, #1
 80010b4:	673a      	str	r2, [r7, #112]	; 0x70
 80010b6:	001a      	movs	r2, r3
 80010b8:	60ba      	str	r2, [r7, #8]
 80010ba:	2200      	movs	r2, #0
 80010bc:	60fa      	str	r2, [r7, #12]
 80010be:	68b8      	ldr	r0, [r7, #8]
 80010c0:	68f9      	ldr	r1, [r7, #12]
 80010c2:	0002      	movs	r2, r0
 80010c4:	0f52      	lsrs	r2, r2, #29
 80010c6:	000c      	movs	r4, r1
 80010c8:	00e4      	lsls	r4, r4, #3
 80010ca:	61fc      	str	r4, [r7, #28]
 80010cc:	69fc      	ldr	r4, [r7, #28]
 80010ce:	4314      	orrs	r4, r2
 80010d0:	61fc      	str	r4, [r7, #28]
 80010d2:	0002      	movs	r2, r0
 80010d4:	00d2      	lsls	r2, r2, #3
 80010d6:	61ba      	str	r2, [r7, #24]
 80010d8:	001a      	movs	r2, r3
 80010da:	603a      	str	r2, [r7, #0]
 80010dc:	2200      	movs	r2, #0
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	6838      	ldr	r0, [r7, #0]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	0002      	movs	r2, r0
 80010e6:	0f52      	lsrs	r2, r2, #29
 80010e8:	000c      	movs	r4, r1
 80010ea:	00e4      	lsls	r4, r4, #3
 80010ec:	617c      	str	r4, [r7, #20]
 80010ee:	697c      	ldr	r4, [r7, #20]
 80010f0:	4314      	orrs	r4, r2
 80010f2:	617c      	str	r4, [r7, #20]
 80010f4:	0002      	movs	r2, r0
 80010f6:	00d2      	lsls	r2, r2, #3
 80010f8:	613a      	str	r2, [r7, #16]
 80010fa:	3307      	adds	r3, #7
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	466a      	mov	r2, sp
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	469d      	mov	sp, r3
 8001106:	466b      	mov	r3, sp
 8001108:	3300      	adds	r3, #0
 800110a:	66fb      	str	r3, [r7, #108]	; 0x6c
		for(int i = 0; i < size; i++)
 800110c:	2300      	movs	r3, #0
 800110e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001110:	e00a      	b.n	8001128 <comHandler+0x244>
		{
			pop(USB_Tx_Buffer, &tmpStr[i]);
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <comHandler+0x270>)
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001118:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800111a:	18d3      	adds	r3, r2, r3
 800111c:	0019      	movs	r1, r3
 800111e:	f000 fb0a 	bl	8001736 <pop>
		for(int i = 0; i < size; i++)
 8001122:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001124:	3301      	adds	r3, #1
 8001126:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001128:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800112a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800112c:	429a      	cmp	r2, r3
 800112e:	dbf0      	blt.n	8001112 <comHandler+0x22e>
		}
		CDC_Transmit_FS(tmpStr, size);
 8001130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001132:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001134:	b292      	uxth	r2, r2
 8001136:	0011      	movs	r1, r2
 8001138:	0018      	movs	r0, r3
 800113a:	f00a fb59 	bl	800b7f0 <CDC_Transmit_FS>
 800113e:	46b5      	mov	sp, r6
	}

}
 8001140:	46c0      	nop			; (mov r8, r8)
 8001142:	46bd      	mov	sp, r7
 8001144:	b021      	add	sp, #132	; 0x84
 8001146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001148:	20000618 	.word	0x20000618
 800114c:	20001164 	.word	0x20001164
 8001150:	0800ca58 	.word	0x0800ca58
 8001154:	20000568 	.word	0x20000568
 8001158:	0800ca68 	.word	0x0800ca68
 800115c:	200001fc 	.word	0x200001fc
 8001160:	0800ca74 	.word	0x0800ca74

08001164 <UI_Handler>:

//_____Obsluha piezo + podsvícení displeje_____//
void UI_Handler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
		DONE,
	}UI_State;

	static uint32_t startTime;

	if(flags.ui.error && (UI_State != ERROR))
 8001168:	4b84      	ldr	r3, [pc, #528]	; (800137c <UI_Handler+0x218>)
 800116a:	7c1b      	ldrb	r3, [r3, #16]
 800116c:	2204      	movs	r2, #4
 800116e:	4013      	ands	r3, r2
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00b      	beq.n	800118e <UI_Handler+0x2a>
 8001176:	4b82      	ldr	r3, [pc, #520]	; (8001380 <UI_Handler+0x21c>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b03      	cmp	r3, #3
 800117c:	d007      	beq.n	800118e <UI_Handler+0x2a>
	{
		UI_State = ERROR;
 800117e:	4b80      	ldr	r3, [pc, #512]	; (8001380 <UI_Handler+0x21c>)
 8001180:	2203      	movs	r2, #3
 8001182:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001184:	4b7f      	ldr	r3, [pc, #508]	; (8001384 <UI_Handler+0x220>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b7f      	ldr	r3, [pc, #508]	; (8001388 <UI_Handler+0x224>)
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	e05e      	b.n	800124c <UI_Handler+0xe8>
	}
	else if(flags.ui.notice && (UI_State == OFF))
 800118e:	4b7b      	ldr	r3, [pc, #492]	; (800137c <UI_Handler+0x218>)
 8001190:	7c1b      	ldrb	r3, [r3, #16]
 8001192:	2208      	movs	r2, #8
 8001194:	4013      	ands	r3, r2
 8001196:	b2db      	uxtb	r3, r3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d010      	beq.n	80011be <UI_Handler+0x5a>
 800119c:	4b78      	ldr	r3, [pc, #480]	; (8001380 <UI_Handler+0x21c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d10c      	bne.n	80011be <UI_Handler+0x5a>
	{
		UI_State = NOTICE;
 80011a4:	4b76      	ldr	r3, [pc, #472]	; (8001380 <UI_Handler+0x21c>)
 80011a6:	2204      	movs	r2, #4
 80011a8:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80011aa:	4b76      	ldr	r3, [pc, #472]	; (8001384 <UI_Handler+0x220>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	4b76      	ldr	r3, [pc, #472]	; (8001388 <UI_Handler+0x224>)
 80011b0:	601a      	str	r2, [r3, #0]
		flags.ui.notice = 0;
 80011b2:	4b72      	ldr	r3, [pc, #456]	; (800137c <UI_Handler+0x218>)
 80011b4:	7c1a      	ldrb	r2, [r3, #16]
 80011b6:	2108      	movs	r1, #8
 80011b8:	438a      	bics	r2, r1
 80011ba:	741a      	strb	r2, [r3, #16]
 80011bc:	e046      	b.n	800124c <UI_Handler+0xe8>
	}
	else if(flags.ui.done && (UI_State == OFF))
 80011be:	4b6f      	ldr	r3, [pc, #444]	; (800137c <UI_Handler+0x218>)
 80011c0:	7c1b      	ldrb	r3, [r3, #16]
 80011c2:	2210      	movs	r2, #16
 80011c4:	4013      	ands	r3, r2
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d010      	beq.n	80011ee <UI_Handler+0x8a>
 80011cc:	4b6c      	ldr	r3, [pc, #432]	; (8001380 <UI_Handler+0x21c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d10c      	bne.n	80011ee <UI_Handler+0x8a>
	{
		UI_State = DONE;
 80011d4:	4b6a      	ldr	r3, [pc, #424]	; (8001380 <UI_Handler+0x21c>)
 80011d6:	2205      	movs	r2, #5
 80011d8:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80011da:	4b6a      	ldr	r3, [pc, #424]	; (8001384 <UI_Handler+0x220>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4b6a      	ldr	r3, [pc, #424]	; (8001388 <UI_Handler+0x224>)
 80011e0:	601a      	str	r2, [r3, #0]
		flags.ui.done = 0;
 80011e2:	4b66      	ldr	r3, [pc, #408]	; (800137c <UI_Handler+0x218>)
 80011e4:	7c1a      	ldrb	r2, [r3, #16]
 80011e6:	2110      	movs	r1, #16
 80011e8:	438a      	bics	r2, r1
 80011ea:	741a      	strb	r2, [r3, #16]
 80011ec:	e02e      	b.n	800124c <UI_Handler+0xe8>
	}
	else if(flags.ui.longBeep && (UI_State == OFF))
 80011ee:	4b63      	ldr	r3, [pc, #396]	; (800137c <UI_Handler+0x218>)
 80011f0:	7c1b      	ldrb	r3, [r3, #16]
 80011f2:	2202      	movs	r2, #2
 80011f4:	4013      	ands	r3, r2
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d010      	beq.n	800121e <UI_Handler+0xba>
 80011fc:	4b60      	ldr	r3, [pc, #384]	; (8001380 <UI_Handler+0x21c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d10c      	bne.n	800121e <UI_Handler+0xba>
	{
		UI_State = LONG_BEEP;
 8001204:	4b5e      	ldr	r3, [pc, #376]	; (8001380 <UI_Handler+0x21c>)
 8001206:	2202      	movs	r2, #2
 8001208:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 800120a:	4b5e      	ldr	r3, [pc, #376]	; (8001384 <UI_Handler+0x220>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	4b5e      	ldr	r3, [pc, #376]	; (8001388 <UI_Handler+0x224>)
 8001210:	601a      	str	r2, [r3, #0]
		flags.ui.longBeep = 0;
 8001212:	4b5a      	ldr	r3, [pc, #360]	; (800137c <UI_Handler+0x218>)
 8001214:	7c1a      	ldrb	r2, [r3, #16]
 8001216:	2102      	movs	r1, #2
 8001218:	438a      	bics	r2, r1
 800121a:	741a      	strb	r2, [r3, #16]
 800121c:	e016      	b.n	800124c <UI_Handler+0xe8>
	}
	else if(flags.ui.shortBeep && (UI_State == OFF))
 800121e:	4b57      	ldr	r3, [pc, #348]	; (800137c <UI_Handler+0x218>)
 8001220:	7c1b      	ldrb	r3, [r3, #16]
 8001222:	2201      	movs	r2, #1
 8001224:	4013      	ands	r3, r2
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00f      	beq.n	800124c <UI_Handler+0xe8>
 800122c:	4b54      	ldr	r3, [pc, #336]	; (8001380 <UI_Handler+0x21c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d10b      	bne.n	800124c <UI_Handler+0xe8>
	{
		UI_State = SHORT_BEEP;
 8001234:	4b52      	ldr	r3, [pc, #328]	; (8001380 <UI_Handler+0x21c>)
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 800123a:	4b52      	ldr	r3, [pc, #328]	; (8001384 <UI_Handler+0x220>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4b52      	ldr	r3, [pc, #328]	; (8001388 <UI_Handler+0x224>)
 8001240:	601a      	str	r2, [r3, #0]
		flags.ui.shortBeep = 0;
 8001242:	4b4e      	ldr	r3, [pc, #312]	; (800137c <UI_Handler+0x218>)
 8001244:	7c1a      	ldrb	r2, [r3, #16]
 8001246:	2101      	movs	r1, #1
 8001248:	438a      	bics	r2, r1
 800124a:	741a      	strb	r2, [r3, #16]
	}

	switch(UI_State)
 800124c:	4b4c      	ldr	r3, [pc, #304]	; (8001380 <UI_Handler+0x21c>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b05      	cmp	r3, #5
 8001252:	d900      	bls.n	8001256 <UI_Handler+0xf2>
 8001254:	e07a      	b.n	800134c <UI_Handler+0x1e8>
 8001256:	009a      	lsls	r2, r3, #2
 8001258:	4b4c      	ldr	r3, [pc, #304]	; (800138c <UI_Handler+0x228>)
 800125a:	18d3      	adds	r3, r2, r3
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	469f      	mov	pc, r3
	{
	case SHORT_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 50)
 8001260:	4b48      	ldr	r3, [pc, #288]	; (8001384 <UI_Handler+0x220>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b48      	ldr	r3, [pc, #288]	; (8001388 <UI_Handler+0x224>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b31      	cmp	r3, #49	; 0x31
 800126c:	d800      	bhi.n	8001270 <UI_Handler+0x10c>
 800126e:	e078      	b.n	8001362 <UI_Handler+0x1fe>
		{
			UI_State = OFF;
 8001270:	4b43      	ldr	r3, [pc, #268]	; (8001380 <UI_Handler+0x21c>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	015b      	lsls	r3, r3, #5
 800127a:	4845      	ldr	r0, [pc, #276]	; (8001390 <UI_Handler+0x22c>)
 800127c:	2200      	movs	r2, #0
 800127e:	0019      	movs	r1, r3
 8001280:	f002 f809 	bl	8003296 <HAL_GPIO_WritePin>
		}
		break;
 8001284:	e06d      	b.n	8001362 <UI_Handler+0x1fe>

	case LONG_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 100)
 8001286:	4b3f      	ldr	r3, [pc, #252]	; (8001384 <UI_Handler+0x220>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	4b3f      	ldr	r3, [pc, #252]	; (8001388 <UI_Handler+0x224>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	2b63      	cmp	r3, #99	; 0x63
 8001292:	d968      	bls.n	8001366 <UI_Handler+0x202>
		{
			UI_State = OFF;
 8001294:	4b3a      	ldr	r3, [pc, #232]	; (8001380 <UI_Handler+0x21c>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 800129a:	2380      	movs	r3, #128	; 0x80
 800129c:	015b      	lsls	r3, r3, #5
 800129e:	483c      	ldr	r0, [pc, #240]	; (8001390 <UI_Handler+0x22c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	0019      	movs	r1, r3
 80012a4:	f001 fff7 	bl	8003296 <HAL_GPIO_WritePin>
		}
		break;
 80012a8:	e05d      	b.n	8001366 <UI_Handler+0x202>

	case ERROR:
		if(!flags.ui.error)
 80012aa:	4b34      	ldr	r3, [pc, #208]	; (800137c <UI_Handler+0x218>)
 80012ac:	7c1b      	ldrb	r3, [r3, #16]
 80012ae:	2204      	movs	r2, #4
 80012b0:	4013      	ands	r3, r2
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d102      	bne.n	80012be <UI_Handler+0x15a>
			UI_State = OFF;
 80012b8:	4b31      	ldr	r3, [pc, #196]	; (8001380 <UI_Handler+0x21c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))
 80012be:	4b31      	ldr	r3, [pc, #196]	; (8001384 <UI_Handler+0x220>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	4b31      	ldr	r3, [pc, #196]	; (8001388 <UI_Handler+0x224>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2132      	movs	r1, #50	; 0x32
 80012ca:	0018      	movs	r0, r3
 80012cc:	f7fe ffb4 	bl	8000238 <__aeabi_uidivmod>
 80012d0:	1e0b      	subs	r3, r1, #0
 80012d2:	d14a      	bne.n	800136a <UI_Handler+0x206>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
#endif
			BACKLIGHT_RED_Toggle;
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	021a      	lsls	r2, r3, #8
 80012d8:	2390      	movs	r3, #144	; 0x90
 80012da:	05db      	lsls	r3, r3, #23
 80012dc:	0011      	movs	r1, r2
 80012de:	0018      	movs	r0, r3
 80012e0:	f001 fff6 	bl	80032d0 <HAL_GPIO_TogglePin>
		}
		break;
 80012e4:	e041      	b.n	800136a <UI_Handler+0x206>

	case NOTICE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 35))
 80012e6:	4b27      	ldr	r3, [pc, #156]	; (8001384 <UI_Handler+0x220>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4b27      	ldr	r3, [pc, #156]	; (8001388 <UI_Handler+0x224>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2123      	movs	r1, #35	; 0x23
 80012f2:	0018      	movs	r0, r3
 80012f4:	f7fe ffa0 	bl	8000238 <__aeabi_uidivmod>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
#endif
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 209)
 80012f8:	4b22      	ldr	r3, [pc, #136]	; (8001384 <UI_Handler+0x220>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b22      	ldr	r3, [pc, #136]	; (8001388 <UI_Handler+0x224>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2bd0      	cmp	r3, #208	; 0xd0
 8001304:	d933      	bls.n	800136e <UI_Handler+0x20a>
			UI_State = OFF;
 8001306:	4b1e      	ldr	r3, [pc, #120]	; (8001380 <UI_Handler+0x21c>)
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
		break;
 800130c:	e02f      	b.n	800136e <UI_Handler+0x20a>

	case DONE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <UI_Handler+0x220>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <UI_Handler+0x224>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2132      	movs	r1, #50	; 0x32
 800131a:	0018      	movs	r0, r3
 800131c:	f7fe ff8c 	bl	8000238 <__aeabi_uidivmod>
 8001320:	1e0b      	subs	r3, r1, #0
 8001322:	d106      	bne.n	8001332 <UI_Handler+0x1ce>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
#endif
			BACKLIGHT_GREEN_Toggle;
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4a1a      	ldr	r2, [pc, #104]	; (8001394 <UI_Handler+0x230>)
 800132a:	0019      	movs	r1, r3
 800132c:	0010      	movs	r0, r2
 800132e:	f001 ffcf 	bl	80032d0 <HAL_GPIO_TogglePin>
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 299)
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <UI_Handler+0x220>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4b14      	ldr	r3, [pc, #80]	; (8001388 <UI_Handler+0x224>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	1ad2      	subs	r2, r2, r3
 800133c:	2395      	movs	r3, #149	; 0x95
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	429a      	cmp	r2, r3
 8001342:	d916      	bls.n	8001372 <UI_Handler+0x20e>
			UI_State = OFF;
 8001344:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <UI_Handler+0x21c>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
		break;
 800134a:	e012      	b.n	8001372 <UI_Handler+0x20e>

	default:	//Ošetřuje i UI_State == OFF
		BUZZER_OFF;
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	015b      	lsls	r3, r3, #5
 8001350:	480f      	ldr	r0, [pc, #60]	; (8001390 <UI_Handler+0x22c>)
 8001352:	2200      	movs	r2, #0
 8001354:	0019      	movs	r1, r3
 8001356:	f001 ff9e 	bl	8003296 <HAL_GPIO_WritePin>
#ifndef __DEBUG_BUTT__
		setColour(BACKLIGHT_OFF);
 800135a:	2003      	movs	r0, #3
 800135c:	f7ff f85c 	bl	8000418 <setColour>
#endif
		break;
 8001360:	e008      	b.n	8001374 <UI_Handler+0x210>
		break;
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	e006      	b.n	8001374 <UI_Handler+0x210>
		break;
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	e004      	b.n	8001374 <UI_Handler+0x210>
		break;
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	e002      	b.n	8001374 <UI_Handler+0x210>
		break;
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	e000      	b.n	8001374 <UI_Handler+0x210>
		break;
 8001372:	46c0      	nop			; (mov r8, r8)

	}
}
 8001374:	46c0      	nop			; (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	20000618 	.word	0x20000618
 8001380:	2000024e 	.word	0x2000024e
 8001384:	2000023c 	.word	0x2000023c
 8001388:	20000250 	.word	0x20000250
 800138c:	0800caf8 	.word	0x0800caf8
 8001390:	48000800 	.word	0x48000800
 8001394:	48000400 	.word	0x48000400

08001398 <measHandler>:

//_____Osluha AD převodníků_____//
void measHandler(void)
{
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	af00      	add	r7, sp, #0
		U_BAT,					//kanál 6
		PAD9, PAD15,			//kanál 4, 13
		U48V_CURRENT			//kanál 3
	}ADC_State;

	flags.meas.measComplete = 0;
 800139c:	4b6d      	ldr	r3, [pc, #436]	; (8001554 <measHandler+0x1bc>)
 800139e:	7d1a      	ldrb	r2, [r3, #20]
 80013a0:	2102      	movs	r1, #2
 80013a2:	438a      	bics	r2, r1
 80013a4:	751a      	strb	r2, [r3, #20]
	flags.meas.measConflict = 0;
 80013a6:	4b6b      	ldr	r3, [pc, #428]	; (8001554 <measHandler+0x1bc>)
 80013a8:	7d1a      	ldrb	r2, [r3, #20]
 80013aa:	2110      	movs	r1, #16
 80013ac:	438a      	bics	r2, r1
 80013ae:	751a      	strb	r2, [r3, #20]

	if(flags.meas.measRequest)
 80013b0:	4b68      	ldr	r3, [pc, #416]	; (8001554 <measHandler+0x1bc>)
 80013b2:	7d1b      	ldrb	r3, [r3, #20]
 80013b4:	2201      	movs	r2, #1
 80013b6:	4013      	ands	r3, r2
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d03b      	beq.n	8001436 <measHandler+0x9e>
	{
		if(ADC_State == WAITING)
 80013be:	4b66      	ldr	r3, [pc, #408]	; (8001558 <measHandler+0x1c0>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d12d      	bne.n	8001422 <measHandler+0x8a>
		{
			flags.meas.measRunning = 1;
 80013c6:	4b63      	ldr	r3, [pc, #396]	; (8001554 <measHandler+0x1bc>)
 80013c8:	7d1a      	ldrb	r2, [r3, #20]
 80013ca:	2108      	movs	r1, #8
 80013cc:	430a      	orrs	r2, r1
 80013ce:	751a      	strb	r2, [r3, #20]
			if(currentPhase() == BATTERY_TEST)	//probíhá battery test
 80013d0:	f000 fc4a 	bl	8001c68 <currentPhase>
 80013d4:	0003      	movs	r3, r0
 80013d6:	2b05      	cmp	r3, #5
 80013d8:	d111      	bne.n	80013fe <measHandler+0x66>
			{
				flags.meas.onlyBattery = 1;
 80013da:	4b5e      	ldr	r3, [pc, #376]	; (8001554 <measHandler+0x1bc>)
 80013dc:	7d1a      	ldrb	r2, [r3, #20]
 80013de:	2120      	movs	r1, #32
 80013e0:	430a      	orrs	r2, r1
 80013e2:	751a      	strb	r2, [r3, #20]
				ADC_State = U_BAT;
 80013e4:	4b5c      	ldr	r3, [pc, #368]	; (8001558 <measHandler+0x1c0>)
 80013e6:	220d      	movs	r2, #13
 80013e8:	701a      	strb	r2, [r3, #0]
				changeChannel(ADC_CHANNEL_6);
 80013ea:	2006      	movs	r0, #6
 80013ec:	f000 f8be 	bl	800156c <changeChannel>
				HAL_ADC_Start_DMA(&hadc, ADC_Buffer, 20);
 80013f0:	495a      	ldr	r1, [pc, #360]	; (800155c <measHandler+0x1c4>)
 80013f2:	4b5b      	ldr	r3, [pc, #364]	; (8001560 <measHandler+0x1c8>)
 80013f4:	2214      	movs	r2, #20
 80013f6:	0018      	movs	r0, r3
 80013f8:	f001 f81c 	bl	8002434 <HAL_ADC_Start_DMA>
 80013fc:	e016      	b.n	800142c <measHandler+0x94>
			}
			else
			{
				flags.meas.onlyBattery = 0;
 80013fe:	4b55      	ldr	r3, [pc, #340]	; (8001554 <measHandler+0x1bc>)
 8001400:	7d1a      	ldrb	r2, [r3, #20]
 8001402:	2120      	movs	r1, #32
 8001404:	438a      	bics	r2, r1
 8001406:	751a      	strb	r2, [r3, #20]
				ADC_State = U15V;
 8001408:	4b53      	ldr	r3, [pc, #332]	; (8001558 <measHandler+0x1c0>)
 800140a:	2201      	movs	r2, #1
 800140c:	701a      	strb	r2, [r3, #0]
				changeChannel(ADC_CHANNEL_7);
 800140e:	2007      	movs	r0, #7
 8001410:	f000 f8ac 	bl	800156c <changeChannel>
				HAL_ADC_Start_DMA(&hadc, ADC_Buffer, 20);
 8001414:	4951      	ldr	r1, [pc, #324]	; (800155c <measHandler+0x1c4>)
 8001416:	4b52      	ldr	r3, [pc, #328]	; (8001560 <measHandler+0x1c8>)
 8001418:	2214      	movs	r2, #20
 800141a:	0018      	movs	r0, r3
 800141c:	f001 f80a 	bl	8002434 <HAL_ADC_Start_DMA>
 8001420:	e004      	b.n	800142c <measHandler+0x94>
			}
		}
		else
		{
			flags.meas.measConflict = 1;
 8001422:	4b4c      	ldr	r3, [pc, #304]	; (8001554 <measHandler+0x1bc>)
 8001424:	7d1a      	ldrb	r2, [r3, #20]
 8001426:	2110      	movs	r1, #16
 8001428:	430a      	orrs	r2, r1
 800142a:	751a      	strb	r2, [r3, #20]
		}
		flags.meas.measRequest = 0;
 800142c:	4b49      	ldr	r3, [pc, #292]	; (8001554 <measHandler+0x1bc>)
 800142e:	7d1a      	ldrb	r2, [r3, #20]
 8001430:	2101      	movs	r1, #1
 8001432:	438a      	bics	r2, r1
 8001434:	751a      	strb	r2, [r3, #20]
	}

	if(ADC_State != WAITING)
 8001436:	4b48      	ldr	r3, [pc, #288]	; (8001558 <measHandler+0x1c0>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d100      	bne.n	8001440 <measHandler+0xa8>
 800143e:	e086      	b.n	800154e <measHandler+0x1b6>
	{
		if(flags.meas.measDataReady)
 8001440:	4b44      	ldr	r3, [pc, #272]	; (8001554 <measHandler+0x1bc>)
 8001442:	7d1b      	ldrb	r3, [r3, #20]
 8001444:	2204      	movs	r2, #4
 8001446:	4013      	ands	r3, r2
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d100      	bne.n	8001450 <measHandler+0xb8>
 800144e:	e07e      	b.n	800154e <measHandler+0x1b6>
		{
			flags.meas.measDataReady = 0;
 8001450:	4b40      	ldr	r3, [pc, #256]	; (8001554 <measHandler+0x1bc>)
 8001452:	7d1a      	ldrb	r2, [r3, #20]
 8001454:	2104      	movs	r1, #4
 8001456:	438a      	bics	r2, r1
 8001458:	751a      	strb	r2, [r3, #20]

			if(ADC_State == U_BAT)	//U_BAT je vždy měřeno jako poslední
 800145a:	4b3f      	ldr	r3, [pc, #252]	; (8001558 <measHandler+0x1c0>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b0d      	cmp	r3, #13
 8001460:	d116      	bne.n	8001490 <measHandler+0xf8>
			{
				ADC_Results[ADC_State-1] = ADC_dataProcessing();
 8001462:	4b3d      	ldr	r3, [pc, #244]	; (8001558 <measHandler+0x1c0>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	1e5c      	subs	r4, r3, #1
 8001468:	f000 f8a8 	bl	80015bc <ADC_dataProcessing>
 800146c:	0001      	movs	r1, r0
 800146e:	4b3d      	ldr	r3, [pc, #244]	; (8001564 <measHandler+0x1cc>)
 8001470:	00a2      	lsls	r2, r4, #2
 8001472:	50d1      	str	r1, [r2, r3]
				flags.meas.measComplete = 1;
 8001474:	4b37      	ldr	r3, [pc, #220]	; (8001554 <measHandler+0x1bc>)
 8001476:	7d1a      	ldrb	r2, [r3, #20]
 8001478:	2102      	movs	r1, #2
 800147a:	430a      	orrs	r2, r1
 800147c:	751a      	strb	r2, [r3, #20]
				flags.meas.measRunning = 0;
 800147e:	4b35      	ldr	r3, [pc, #212]	; (8001554 <measHandler+0x1bc>)
 8001480:	7d1a      	ldrb	r2, [r3, #20]
 8001482:	2108      	movs	r1, #8
 8001484:	438a      	bics	r2, r1
 8001486:	751a      	strb	r2, [r3, #20]
				ADC_State = WAITING;
 8001488:	4b33      	ldr	r3, [pc, #204]	; (8001558 <measHandler+0x1c0>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]

				HAL_ADC_Start_DMA(&hadc, ADC_Buffer, 20);
			}
		}
	}
}
 800148e:	e05e      	b.n	800154e <measHandler+0x1b6>
				ADC_Results[ADC_State-1] = ADC_dataProcessing();
 8001490:	4b31      	ldr	r3, [pc, #196]	; (8001558 <measHandler+0x1c0>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	1e5c      	subs	r4, r3, #1
 8001496:	f000 f891 	bl	80015bc <ADC_dataProcessing>
 800149a:	0001      	movs	r1, r0
 800149c:	4b31      	ldr	r3, [pc, #196]	; (8001564 <measHandler+0x1cc>)
 800149e:	00a2      	lsls	r2, r4, #2
 80014a0:	50d1      	str	r1, [r2, r3]
				ADC_State += 2;
 80014a2:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <measHandler+0x1c0>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	3302      	adds	r3, #2
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <measHandler+0x1c0>)
 80014ac:	701a      	strb	r2, [r3, #0]
				switch(ADC_State)
 80014ae:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <measHandler+0x1c0>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b10      	cmp	r3, #16
 80014b4:	d844      	bhi.n	8001540 <measHandler+0x1a8>
 80014b6:	009a      	lsls	r2, r3, #2
 80014b8:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <measHandler+0x1d0>)
 80014ba:	18d3      	adds	r3, r2, r3
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	469f      	mov	pc, r3
					changeChannel(ADC_CHANNEL_7);
 80014c0:	2007      	movs	r0, #7
 80014c2:	f000 f853 	bl	800156c <changeChannel>
					break;
 80014c6:	e03c      	b.n	8001542 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_10);
 80014c8:	200a      	movs	r0, #10
 80014ca:	f000 f84f 	bl	800156c <changeChannel>
					break;
 80014ce:	e038      	b.n	8001542 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_14);
 80014d0:	200e      	movs	r0, #14
 80014d2:	f000 f84b 	bl	800156c <changeChannel>
					break;
 80014d6:	e034      	b.n	8001542 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_12);
 80014d8:	200c      	movs	r0, #12
 80014da:	f000 f847 	bl	800156c <changeChannel>
					break;
 80014de:	e030      	b.n	8001542 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_5);
 80014e0:	2005      	movs	r0, #5
 80014e2:	f000 f843 	bl	800156c <changeChannel>
					break;
 80014e6:	e02c      	b.n	8001542 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_11);
 80014e8:	200b      	movs	r0, #11
 80014ea:	f000 f83f 	bl	800156c <changeChannel>
					break;
 80014ee:	e028      	b.n	8001542 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_9);
 80014f0:	2009      	movs	r0, #9
 80014f2:	f000 f83b 	bl	800156c <changeChannel>
					break;
 80014f6:	e024      	b.n	8001542 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_2);
 80014f8:	2002      	movs	r0, #2
 80014fa:	f000 f837 	bl	800156c <changeChannel>
					break;
 80014fe:	e020      	b.n	8001542 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_15);
 8001500:	200f      	movs	r0, #15
 8001502:	f000 f833 	bl	800156c <changeChannel>
					break;
 8001506:	e01c      	b.n	8001542 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_0);
 8001508:	2000      	movs	r0, #0
 800150a:	f000 f82f 	bl	800156c <changeChannel>
					break;
 800150e:	e018      	b.n	8001542 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_8);
 8001510:	2008      	movs	r0, #8
 8001512:	f000 f82b 	bl	800156c <changeChannel>
					break;
 8001516:	e014      	b.n	8001542 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_1);
 8001518:	2001      	movs	r0, #1
 800151a:	f000 f827 	bl	800156c <changeChannel>
					break;
 800151e:	e010      	b.n	8001542 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_6);
 8001520:	2006      	movs	r0, #6
 8001522:	f000 f823 	bl	800156c <changeChannel>
					break;
 8001526:	e00c      	b.n	8001542 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_4);
 8001528:	2004      	movs	r0, #4
 800152a:	f000 f81f 	bl	800156c <changeChannel>
					break;
 800152e:	e008      	b.n	8001542 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_13);
 8001530:	200d      	movs	r0, #13
 8001532:	f000 f81b 	bl	800156c <changeChannel>
					break;
 8001536:	e004      	b.n	8001542 <measHandler+0x1aa>
					changeChannel(ADC_CHANNEL_3);
 8001538:	2003      	movs	r0, #3
 800153a:	f000 f817 	bl	800156c <changeChannel>
					break;
 800153e:	e000      	b.n	8001542 <measHandler+0x1aa>
					break;
 8001540:	46c0      	nop			; (mov r8, r8)
				HAL_ADC_Start_DMA(&hadc, ADC_Buffer, 20);
 8001542:	4906      	ldr	r1, [pc, #24]	; (800155c <measHandler+0x1c4>)
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <measHandler+0x1c8>)
 8001546:	2214      	movs	r2, #20
 8001548:	0018      	movs	r0, r3
 800154a:	f000 ff73 	bl	8002434 <HAL_ADC_Start_DMA>
}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	46bd      	mov	sp, r7
 8001552:	bdb0      	pop	{r4, r5, r7, pc}
 8001554:	20000618 	.word	0x20000618
 8001558:	20000254 	.word	0x20000254
 800155c:	20000494 	.word	0x20000494
 8001560:	20000678 	.word	0x20000678
 8001564:	200001fc 	.word	0x200001fc
 8001568:	0800cb10 	.word	0x0800cb10

0800156c <changeChannel>:

//_____Změna lanálu ADC_____//
static void changeChannel(unsigned int channel)
{
 800156c:	b590      	push	{r4, r7, lr}
 800156e:	b087      	sub	sp, #28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = {0};
 8001574:	240c      	movs	r4, #12
 8001576:	193b      	adds	r3, r7, r4
 8001578:	0018      	movs	r0, r3
 800157a:	230c      	movs	r3, #12
 800157c:	001a      	movs	r2, r3
 800157e:	2100      	movs	r1, #0
 8001580:	f00a fe30 	bl	800c1e4 <memset>
	sConfig.Channel = channel;
 8001584:	0021      	movs	r1, r4
 8001586:	187b      	adds	r3, r7, r1
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800158c:	187b      	adds	r3, r7, r1
 800158e:	2280      	movs	r2, #128	; 0x80
 8001590:	0152      	lsls	r2, r2, #5
 8001592:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001594:	187b      	adds	r3, r7, r1
 8001596:	2280      	movs	r2, #128	; 0x80
 8001598:	0552      	lsls	r2, r2, #21
 800159a:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800159c:	187a      	adds	r2, r7, r1
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <changeChannel+0x4c>)
 80015a0:	0011      	movs	r1, r2
 80015a2:	0018      	movs	r0, r3
 80015a4:	f000 ffd8 	bl	8002558 <HAL_ADC_ConfigChannel>
 80015a8:	1e03      	subs	r3, r0, #0
 80015aa:	d001      	beq.n	80015b0 <changeChannel+0x44>
	{
		Error_Handler();
 80015ac:	f000 f82a 	bl	8001604 <Error_Handler>
	}
}
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b007      	add	sp, #28
 80015b6:	bd90      	pop	{r4, r7, pc}
 80015b8:	20000678 	.word	0x20000678

080015bc <ADC_dataProcessing>:

//_____Zpracování naměřených dat_____//
static uint32_t ADC_dataProcessing()
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
	uint32_t mean = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 20; i++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	603b      	str	r3, [r7, #0]
 80015ca:	e009      	b.n	80015e0 <ADC_dataProcessing+0x24>
	{
		mean += ADC_Buffer[i];
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <ADC_dataProcessing+0x44>)
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	0092      	lsls	r2, r2, #2
 80015d2:	58d3      	ldr	r3, [r2, r3]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	18d3      	adds	r3, r2, r3
 80015d8:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 20; i++)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	3301      	adds	r3, #1
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	2b13      	cmp	r3, #19
 80015e4:	ddf2      	ble.n	80015cc <ADC_dataProcessing+0x10>
	}
	mean = mean/20;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2114      	movs	r1, #20
 80015ea:	0018      	movs	r0, r3
 80015ec:	f7fe fd9e 	bl	800012c <__udivsi3>
 80015f0:	0003      	movs	r3, r0
 80015f2:	607b      	str	r3, [r7, #4]

	return mean;
 80015f4:	687b      	ldr	r3, [r7, #4]
}
 80015f6:	0018      	movs	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	b002      	add	sp, #8
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	20000494 	.word	0x20000494

08001604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001608:	b672      	cpsid	i
}
 800160a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800160c:	e7fe      	b.n	800160c <Error_Handler+0x8>

0800160e <createBuffer>:

//_____Vytvoří buffer v dynamické paměti_____//
//Návratová hodnota - ukazatel na vytvořený buffer (NULL = chyba)
//Argument - velikost bufferu
RING_BUFFER* createBuffer(int size)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
	RING_BUFFER* buffer = (RING_BUFFER*) malloc(sizeof(RING_BUFFER));
 8001616:	2018      	movs	r0, #24
 8001618:	f00a fdd0 	bl	800c1bc <malloc>
 800161c:	0003      	movs	r3, r0
 800161e:	60fb      	str	r3, [r7, #12]
	if(buffer == NULL)			//Nepodařilo se alokovat paměť
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <createBuffer+0x1c>
	{
		return NULL;
 8001626:	2300      	movs	r3, #0
 8001628:	e022      	b.n	8001670 <createBuffer+0x62>
	}
	buffer->buffer = (char*) malloc(size * sizeof(char));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	0018      	movs	r0, r3
 800162e:	f00a fdc5 	bl	800c1bc <malloc>
 8001632:	0003      	movs	r3, r0
 8001634:	001a      	movs	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	601a      	str	r2, [r3, #0]
	if(buffer->buffer == NULL)	//Nepodařilo se alokovat paměť
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d105      	bne.n	800164e <createBuffer+0x40>
	{
		free(buffer);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	0018      	movs	r0, r3
 8001646:	f00a fdc3 	bl	800c1d0 <free>
		return NULL;
 800164a:	2300      	movs	r3, #0
 800164c:	e010      	b.n	8001670 <createBuffer+0x62>
	}

	buffer->bufferSize = size;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	605a      	str	r2, [r3, #4]
	buffer->filled = 0;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
	buffer->first = 0;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2200      	movs	r2, #0
 800165e:	60da      	str	r2, [r3, #12]
	buffer->last = size-1;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	1e5a      	subs	r2, r3, #1
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	611a      	str	r2, [r3, #16]
	buffer->status = BUFFER_EMPTY;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2201      	movs	r2, #1
 800166c:	751a      	strb	r2, [r3, #20]

	return buffer;
 800166e:	68fb      	ldr	r3, [r7, #12]
}
 8001670:	0018      	movs	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	b004      	add	sp, #16
 8001676:	bd80      	pop	{r7, pc}

08001678 <push>:
	return buffer->status;
}

//_____Uloží znak do bufferu_____//
BUFFER_STATE push(RING_BUFFER* buffer, char character)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	000a      	movs	r2, r1
 8001682:	1cfb      	adds	r3, r7, #3
 8001684:	701a      	strb	r2, [r3, #0]
	if(buffer->status == BUFFER_FULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	7d1b      	ldrb	r3, [r3, #20]
 800168a:	2b02      	cmp	r3, #2
 800168c:	d101      	bne.n	8001692 <push+0x1a>
		return BUFFER_FULL;
 800168e:	2302      	movs	r3, #2
 8001690:	e025      	b.n	80016de <push+0x66>

	buffer->last = (buffer->last + 1) % (buffer->bufferSize);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	0019      	movs	r1, r3
 800169e:	0010      	movs	r0, r2
 80016a0:	f7fe feb4 	bl	800040c <__aeabi_idivmod>
 80016a4:	000b      	movs	r3, r1
 80016a6:	001a      	movs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	611a      	str	r2, [r3, #16]
	buffer->filled++;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	1c5a      	adds	r2, r3, #1
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	609a      	str	r2, [r3, #8]
	buffer->buffer[buffer->last] = character;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	18d3      	adds	r3, r2, r3
 80016c0:	1cfa      	adds	r2, r7, #3
 80016c2:	7812      	ldrb	r2, [r2, #0]
 80016c4:	701a      	strb	r2, [r3, #0]
	buffer->status = (buffer->filled >= buffer->bufferSize)? BUFFER_FULL : BUFFER_OK;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	db01      	blt.n	80016d6 <push+0x5e>
 80016d2:	2202      	movs	r2, #2
 80016d4:	e000      	b.n	80016d8 <push+0x60>
 80016d6:	2200      	movs	r2, #0
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	0018      	movs	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b002      	add	sp, #8
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <pushStr>:

//_____Uloží řetězec do bufferu_____//
BUFFER_STATE pushStr(RING_BUFFER* buffer, char* str, int len)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
	if(buffer->bufferSize < (buffer->filled + len))
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6899      	ldr	r1, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	18cb      	adds	r3, r1, r3
 80016fe:	429a      	cmp	r2, r3
 8001700:	da01      	bge.n	8001706 <pushStr+0x20>
		return BUFFER_FULL;
 8001702:	2302      	movs	r3, #2
 8001704:	e013      	b.n	800172e <pushStr+0x48>

	for(int i = 0; i < len; i++)
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	e00b      	b.n	8001724 <pushStr+0x3e>
	{
		push(buffer, str[i]);
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	18d3      	adds	r3, r2, r3
 8001712:	781a      	ldrb	r2, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	0011      	movs	r1, r2
 8001718:	0018      	movs	r0, r3
 800171a:	f7ff ffad 	bl	8001678 <push>
	for(int i = 0; i < len; i++)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	3301      	adds	r3, #1
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	429a      	cmp	r2, r3
 800172a:	dbef      	blt.n	800170c <pushStr+0x26>
	}

	return BUFFER_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	0018      	movs	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	b006      	add	sp, #24
 8001734:	bd80      	pop	{r7, pc}

08001736 <pop>:

//_____Přečte a odstraní poslední znak z bufferu_____//
//Znak bude uložen na adresu v argumentu
BUFFER_STATE pop(RING_BUFFER* buffer, char* character)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
	if(buffer->status == BUFFER_EMPTY)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7d1b      	ldrb	r3, [r3, #20]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d101      	bne.n	800174c <pop+0x16>
		return BUFFER_EMPTY;
 8001748:	2301      	movs	r3, #1
 800174a:	e023      	b.n	8001794 <pop+0x5e>

	*character = buffer->buffer[buffer->first];
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	18d3      	adds	r3, r2, r3
 8001756:	781a      	ldrb	r2, [r3, #0]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	701a      	strb	r2, [r3, #0]
	buffer->first = (buffer->first + 1) % (buffer->bufferSize);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	1c5a      	adds	r2, r3, #1
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	0019      	movs	r1, r3
 8001768:	0010      	movs	r0, r2
 800176a:	f7fe fe4f 	bl	800040c <__aeabi_idivmod>
 800176e:	000b      	movs	r3, r1
 8001770:	001a      	movs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	60da      	str	r2, [r3, #12]
	buffer->filled--;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	1e5a      	subs	r2, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	609a      	str	r2, [r3, #8]
	buffer->status = (buffer->filled <= 0)? BUFFER_EMPTY : BUFFER_OK;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	1e5a      	subs	r2, r3, #1
 8001786:	4313      	orrs	r3, r2
 8001788:	0fdb      	lsrs	r3, r3, #31
 800178a:	b2db      	uxtb	r3, r3
 800178c:	001a      	movs	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	0018      	movs	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	b002      	add	sp, #8
 800179a:	bd80      	pop	{r7, pc}

0800179c <sendData>:
	return regState;
}

//_____Pošle data z regValues do registrů_____//
REG_STATE sendData(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	if(HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <sendData+0x54>)
 80017a2:	6819      	ldr	r1, [r3, #0]
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <sendData+0x58>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	b29a      	uxth	r2, r3
 80017aa:	4813      	ldr	r0, [pc, #76]	; (80017f8 <sendData+0x5c>)
 80017ac:	2364      	movs	r3, #100	; 0x64
 80017ae:	f004 faf1 	bl	8005d94 <HAL_SPI_Transmit>
 80017b2:	1e03      	subs	r3, r0, #0
 80017b4:	d114      	bne.n	80017e0 <sendData+0x44>
	{
		//vytvoř pulz na RCLK¨
		REG_RCLK_HIGH;
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	01db      	lsls	r3, r3, #7
 80017ba:	4810      	ldr	r0, [pc, #64]	; (80017fc <sendData+0x60>)
 80017bc:	2201      	movs	r2, #1
 80017be:	0019      	movs	r1, r3
 80017c0:	f001 fd69 	bl	8003296 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80017c4:	2001      	movs	r0, #1
 80017c6:	f000 fcd1 	bl	800216c <HAL_Delay>
		REG_RCLK_LOW;
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	01db      	lsls	r3, r3, #7
 80017ce:	480b      	ldr	r0, [pc, #44]	; (80017fc <sendData+0x60>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	0019      	movs	r1, r3
 80017d4:	f001 fd5f 	bl	8003296 <HAL_GPIO_WritePin>

		regState = REG_OK;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <sendData+0x64>)
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
 80017de:	e002      	b.n	80017e6 <sendData+0x4a>
	}
	else
	{
		regState = REG_ERR;
 80017e0:	4b07      	ldr	r3, [pc, #28]	; (8001800 <sendData+0x64>)
 80017e2:	2202      	movs	r2, #2
 80017e4:	701a      	strb	r2, [r3, #0]
	}

	return regState;
 80017e6:	4b06      	ldr	r3, [pc, #24]	; (8001800 <sendData+0x64>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
}
 80017ea:	0018      	movs	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200006b8 	.word	0x200006b8
 80017f4:	200006bd 	.word	0x200006bd
 80017f8:	2000056c 	.word	0x2000056c
 80017fc:	48000400 	.word	0x48000400
 8001800:	200006bc 	.word	0x200006bc

08001804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180a:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <HAL_MspInit+0x44>)
 800180c:	699a      	ldr	r2, [r3, #24]
 800180e:	4b0e      	ldr	r3, [pc, #56]	; (8001848 <HAL_MspInit+0x44>)
 8001810:	2101      	movs	r1, #1
 8001812:	430a      	orrs	r2, r1
 8001814:	619a      	str	r2, [r3, #24]
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <HAL_MspInit+0x44>)
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	2201      	movs	r2, #1
 800181c:	4013      	ands	r3, r2
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <HAL_MspInit+0x44>)
 8001824:	69da      	ldr	r2, [r3, #28]
 8001826:	4b08      	ldr	r3, [pc, #32]	; (8001848 <HAL_MspInit+0x44>)
 8001828:	2180      	movs	r1, #128	; 0x80
 800182a:	0549      	lsls	r1, r1, #21
 800182c:	430a      	orrs	r2, r1
 800182e:	61da      	str	r2, [r3, #28]
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_MspInit+0x44>)
 8001832:	69da      	ldr	r2, [r3, #28]
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	055b      	lsls	r3, r3, #21
 8001838:	4013      	ands	r3, r2
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	46bd      	mov	sp, r7
 8001842:	b002      	add	sp, #8
 8001844:	bd80      	pop	{r7, pc}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	40021000 	.word	0x40021000

0800184c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b08d      	sub	sp, #52	; 0x34
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	241c      	movs	r4, #28
 8001856:	193b      	adds	r3, r7, r4
 8001858:	0018      	movs	r0, r3
 800185a:	2314      	movs	r3, #20
 800185c:	001a      	movs	r2, r3
 800185e:	2100      	movs	r1, #0
 8001860:	f00a fcc0 	bl	800c1e4 <memset>
  if(hadc->Instance==ADC1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a4a      	ldr	r2, [pc, #296]	; (8001994 <HAL_ADC_MspInit+0x148>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d000      	beq.n	8001870 <HAL_ADC_MspInit+0x24>
 800186e:	e08d      	b.n	800198c <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001870:	4b49      	ldr	r3, [pc, #292]	; (8001998 <HAL_ADC_MspInit+0x14c>)
 8001872:	699a      	ldr	r2, [r3, #24]
 8001874:	4b48      	ldr	r3, [pc, #288]	; (8001998 <HAL_ADC_MspInit+0x14c>)
 8001876:	2180      	movs	r1, #128	; 0x80
 8001878:	0089      	lsls	r1, r1, #2
 800187a:	430a      	orrs	r2, r1
 800187c:	619a      	str	r2, [r3, #24]
 800187e:	4b46      	ldr	r3, [pc, #280]	; (8001998 <HAL_ADC_MspInit+0x14c>)
 8001880:	699a      	ldr	r2, [r3, #24]
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4013      	ands	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800188c:	4b42      	ldr	r3, [pc, #264]	; (8001998 <HAL_ADC_MspInit+0x14c>)
 800188e:	695a      	ldr	r2, [r3, #20]
 8001890:	4b41      	ldr	r3, [pc, #260]	; (8001998 <HAL_ADC_MspInit+0x14c>)
 8001892:	2180      	movs	r1, #128	; 0x80
 8001894:	0309      	lsls	r1, r1, #12
 8001896:	430a      	orrs	r2, r1
 8001898:	615a      	str	r2, [r3, #20]
 800189a:	4b3f      	ldr	r3, [pc, #252]	; (8001998 <HAL_ADC_MspInit+0x14c>)
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	031b      	lsls	r3, r3, #12
 80018a2:	4013      	ands	r3, r2
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a8:	4b3b      	ldr	r3, [pc, #236]	; (8001998 <HAL_ADC_MspInit+0x14c>)
 80018aa:	695a      	ldr	r2, [r3, #20]
 80018ac:	4b3a      	ldr	r3, [pc, #232]	; (8001998 <HAL_ADC_MspInit+0x14c>)
 80018ae:	2180      	movs	r1, #128	; 0x80
 80018b0:	0289      	lsls	r1, r1, #10
 80018b2:	430a      	orrs	r2, r1
 80018b4:	615a      	str	r2, [r3, #20]
 80018b6:	4b38      	ldr	r3, [pc, #224]	; (8001998 <HAL_ADC_MspInit+0x14c>)
 80018b8:	695a      	ldr	r2, [r3, #20]
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	029b      	lsls	r3, r3, #10
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c4:	4b34      	ldr	r3, [pc, #208]	; (8001998 <HAL_ADC_MspInit+0x14c>)
 80018c6:	695a      	ldr	r2, [r3, #20]
 80018c8:	4b33      	ldr	r3, [pc, #204]	; (8001998 <HAL_ADC_MspInit+0x14c>)
 80018ca:	2180      	movs	r1, #128	; 0x80
 80018cc:	02c9      	lsls	r1, r1, #11
 80018ce:	430a      	orrs	r2, r1
 80018d0:	615a      	str	r2, [r3, #20]
 80018d2:	4b31      	ldr	r3, [pc, #196]	; (8001998 <HAL_ADC_MspInit+0x14c>)
 80018d4:	695a      	ldr	r2, [r3, #20]
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	02db      	lsls	r3, r3, #11
 80018da:	4013      	ands	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80018e0:	193b      	adds	r3, r7, r4
 80018e2:	223f      	movs	r2, #63	; 0x3f
 80018e4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e6:	193b      	adds	r3, r7, r4
 80018e8:	2203      	movs	r2, #3
 80018ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	193b      	adds	r3, r7, r4
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f2:	193b      	adds	r3, r7, r4
 80018f4:	4a29      	ldr	r2, [pc, #164]	; (800199c <HAL_ADC_MspInit+0x150>)
 80018f6:	0019      	movs	r1, r3
 80018f8:	0010      	movs	r0, r2
 80018fa:	f001 fb37 	bl	8002f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80018fe:	193b      	adds	r3, r7, r4
 8001900:	22ff      	movs	r2, #255	; 0xff
 8001902:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001904:	193b      	adds	r3, r7, r4
 8001906:	2203      	movs	r2, #3
 8001908:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	193b      	adds	r3, r7, r4
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001910:	193a      	adds	r2, r7, r4
 8001912:	2390      	movs	r3, #144	; 0x90
 8001914:	05db      	lsls	r3, r3, #23
 8001916:	0011      	movs	r1, r2
 8001918:	0018      	movs	r0, r3
 800191a:	f001 fb27 	bl	8002f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800191e:	193b      	adds	r3, r7, r4
 8001920:	2203      	movs	r2, #3
 8001922:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001924:	193b      	adds	r3, r7, r4
 8001926:	2203      	movs	r2, #3
 8001928:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	193b      	adds	r3, r7, r4
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	193b      	adds	r3, r7, r4
 8001932:	4a1b      	ldr	r2, [pc, #108]	; (80019a0 <HAL_ADC_MspInit+0x154>)
 8001934:	0019      	movs	r1, r3
 8001936:	0010      	movs	r0, r2
 8001938:	f001 fb18 	bl	8002f6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_ADC_MspInit+0x158>)
 800193e:	4a1a      	ldr	r2, [pc, #104]	; (80019a8 <HAL_ADC_MspInit+0x15c>)
 8001940:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <HAL_ADC_MspInit+0x158>)
 8001944:	2200      	movs	r2, #0
 8001946:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001948:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <HAL_ADC_MspInit+0x158>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <HAL_ADC_MspInit+0x158>)
 8001950:	2280      	movs	r2, #128	; 0x80
 8001952:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <HAL_ADC_MspInit+0x158>)
 8001956:	2280      	movs	r2, #128	; 0x80
 8001958:	0052      	lsls	r2, r2, #1
 800195a:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <HAL_ADC_MspInit+0x158>)
 800195e:	2280      	movs	r2, #128	; 0x80
 8001960:	00d2      	lsls	r2, r2, #3
 8001962:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <HAL_ADC_MspInit+0x158>)
 8001966:	2200      	movs	r2, #0
 8001968:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <HAL_ADC_MspInit+0x158>)
 800196c:	2200      	movs	r2, #0
 800196e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <HAL_ADC_MspInit+0x158>)
 8001972:	0018      	movs	r0, r3
 8001974:	f001 f8e4 	bl	8002b40 <HAL_DMA_Init>
 8001978:	1e03      	subs	r3, r0, #0
 800197a:	d001      	beq.n	8001980 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 800197c:	f7ff fe42 	bl	8001604 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	4a08      	ldr	r2, [pc, #32]	; (80019a4 <HAL_ADC_MspInit+0x158>)
 8001984:	631a      	str	r2, [r3, #48]	; 0x30
 8001986:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <HAL_ADC_MspInit+0x158>)
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800198c:	46c0      	nop			; (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	b00d      	add	sp, #52	; 0x34
 8001992:	bd90      	pop	{r4, r7, pc}
 8001994:	40012400 	.word	0x40012400
 8001998:	40021000 	.word	0x40021000
 800199c:	48000800 	.word	0x48000800
 80019a0:	48000400 	.word	0x48000400
 80019a4:	20000634 	.word	0x20000634
 80019a8:	40020008 	.word	0x40020008

080019ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b08b      	sub	sp, #44	; 0x2c
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	2414      	movs	r4, #20
 80019b6:	193b      	adds	r3, r7, r4
 80019b8:	0018      	movs	r0, r3
 80019ba:	2314      	movs	r3, #20
 80019bc:	001a      	movs	r2, r3
 80019be:	2100      	movs	r1, #0
 80019c0:	f00a fc10 	bl	800c1e4 <memset>
  if(hspi->Instance==SPI1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a1c      	ldr	r2, [pc, #112]	; (8001a3c <HAL_SPI_MspInit+0x90>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d131      	bne.n	8001a32 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019ce:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <HAL_SPI_MspInit+0x94>)
 80019d0:	699a      	ldr	r2, [r3, #24]
 80019d2:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <HAL_SPI_MspInit+0x94>)
 80019d4:	2180      	movs	r1, #128	; 0x80
 80019d6:	0149      	lsls	r1, r1, #5
 80019d8:	430a      	orrs	r2, r1
 80019da:	619a      	str	r2, [r3, #24]
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <HAL_SPI_MspInit+0x94>)
 80019de:	699a      	ldr	r2, [r3, #24]
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	015b      	lsls	r3, r3, #5
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <HAL_SPI_MspInit+0x94>)
 80019ec:	695a      	ldr	r2, [r3, #20]
 80019ee:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <HAL_SPI_MspInit+0x94>)
 80019f0:	2180      	movs	r1, #128	; 0x80
 80019f2:	02c9      	lsls	r1, r1, #11
 80019f4:	430a      	orrs	r2, r1
 80019f6:	615a      	str	r2, [r3, #20]
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_SPI_MspInit+0x94>)
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	02db      	lsls	r3, r3, #11
 8001a00:	4013      	ands	r3, r2
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001a06:	0021      	movs	r1, r4
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	2238      	movs	r2, #56	; 0x38
 8001a0c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	187b      	adds	r3, r7, r1
 8001a10:	2202      	movs	r2, #2
 8001a12:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	187b      	adds	r3, r7, r1
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a1a:	187b      	adds	r3, r7, r1
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001a20:	187b      	adds	r3, r7, r1
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a26:	187b      	adds	r3, r7, r1
 8001a28:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <HAL_SPI_MspInit+0x98>)
 8001a2a:	0019      	movs	r1, r3
 8001a2c:	0010      	movs	r0, r2
 8001a2e:	f001 fa9d 	bl	8002f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b00b      	add	sp, #44	; 0x2c
 8001a38:	bd90      	pop	{r4, r7, pc}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	40013000 	.word	0x40013000
 8001a40:	40021000 	.word	0x40021000
 8001a44:	48000400 	.word	0x48000400

08001a48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <HAL_TIM_Base_MspInit+0x48>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d115      	bne.n	8001a86 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_TIM_Base_MspInit+0x4c>)
 8001a5c:	69da      	ldr	r2, [r3, #28]
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <HAL_TIM_Base_MspInit+0x4c>)
 8001a60:	2180      	movs	r1, #128	; 0x80
 8001a62:	0049      	lsls	r1, r1, #1
 8001a64:	430a      	orrs	r2, r1
 8001a66:	61da      	str	r2, [r3, #28]
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_TIM_Base_MspInit+0x4c>)
 8001a6a:	69da      	ldr	r2, [r3, #28]
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4013      	ands	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2013      	movs	r0, #19
 8001a7c:	f001 f82e 	bl	8002adc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001a80:	2013      	movs	r0, #19
 8001a82:	f001 f840 	bl	8002b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b004      	add	sp, #16
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	40002000 	.word	0x40002000
 8001a94:	40021000 	.word	0x40021000

08001a98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a98:	b590      	push	{r4, r7, lr}
 8001a9a:	b08b      	sub	sp, #44	; 0x2c
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	2414      	movs	r4, #20
 8001aa2:	193b      	adds	r3, r7, r4
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	2314      	movs	r3, #20
 8001aa8:	001a      	movs	r2, r3
 8001aaa:	2100      	movs	r1, #0
 8001aac:	f00a fb9a 	bl	800c1e4 <memset>
  if(huart->Instance==USART3)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a20      	ldr	r2, [pc, #128]	; (8001b38 <HAL_UART_MspInit+0xa0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d13a      	bne.n	8001b30 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001aba:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <HAL_UART_MspInit+0xa4>)
 8001abc:	69da      	ldr	r2, [r3, #28]
 8001abe:	4b1f      	ldr	r3, [pc, #124]	; (8001b3c <HAL_UART_MspInit+0xa4>)
 8001ac0:	2180      	movs	r1, #128	; 0x80
 8001ac2:	02c9      	lsls	r1, r1, #11
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	61da      	str	r2, [r3, #28]
 8001ac8:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <HAL_UART_MspInit+0xa4>)
 8001aca:	69da      	ldr	r2, [r3, #28]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	02db      	lsls	r3, r3, #11
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_UART_MspInit+0xa4>)
 8001ad8:	695a      	ldr	r2, [r3, #20]
 8001ada:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <HAL_UART_MspInit+0xa4>)
 8001adc:	2180      	movs	r1, #128	; 0x80
 8001ade:	0309      	lsls	r1, r1, #12
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	615a      	str	r2, [r3, #20]
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_UART_MspInit+0xa4>)
 8001ae6:	695a      	ldr	r2, [r3, #20]
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	031b      	lsls	r3, r3, #12
 8001aec:	4013      	ands	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001af2:	193b      	adds	r3, r7, r4
 8001af4:	22c0      	movs	r2, #192	; 0xc0
 8001af6:	0112      	lsls	r2, r2, #4
 8001af8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	0021      	movs	r1, r4
 8001afc:	187b      	adds	r3, r7, r1
 8001afe:	2202      	movs	r2, #2
 8001b00:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8001b0e:	187b      	adds	r3, r7, r1
 8001b10:	2201      	movs	r2, #1
 8001b12:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b14:	187b      	adds	r3, r7, r1
 8001b16:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <HAL_UART_MspInit+0xa8>)
 8001b18:	0019      	movs	r1, r3
 8001b1a:	0010      	movs	r0, r2
 8001b1c:	f001 fa26 	bl	8002f6c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8001b20:	2200      	movs	r2, #0
 8001b22:	2100      	movs	r1, #0
 8001b24:	201d      	movs	r0, #29
 8001b26:	f000 ffd9 	bl	8002adc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8001b2a:	201d      	movs	r0, #29
 8001b2c:	f000 ffeb 	bl	8002b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b30:	46c0      	nop			; (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	b00b      	add	sp, #44	; 0x2c
 8001b36:	bd90      	pop	{r4, r7, pc}
 8001b38:	40004800 	.word	0x40004800
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	48000800 	.word	0x48000800

08001b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <NMI_Handler+0x4>

08001b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b4e:	e7fe      	b.n	8001b4e <HardFault_Handler+0x4>

08001b50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b54:	46c0      	nop			; (mov r8, r8)
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b5e:	46c0      	nop			; (mov r8, r8)
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b68:	f000 fae4 	bl	8002134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b6c:	46c0      	nop			; (mov r8, r8)
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f001 fbc4 	bl	8003308 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	0018      	movs	r0, r3
 8001b86:	f001 fbbf 	bl	8003308 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <DMA1_Channel1_IRQHandler+0x14>)
 8001b96:	0018      	movs	r0, r3
 8001b98:	f001 f8fd 	bl	8002d96 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b9c:	46c0      	nop			; (mov r8, r8)
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	20000634 	.word	0x20000634

08001ba8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001bac:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <TIM14_IRQHandler+0x14>)
 8001bae:	0018      	movs	r0, r3
 8001bb0:	f004 fcb8 	bl	8006524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001bb4:	46c0      	nop			; (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	200005d0 	.word	0x200005d0

08001bc0 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001bc4:	4b03      	ldr	r3, [pc, #12]	; (8001bd4 <USART3_4_IRQHandler+0x14>)
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f005 f91a 	bl	8006e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8001bcc:	46c0      	nop			; (mov r8, r8)
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	200004e4 	.word	0x200004e4

08001bd8 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <USB_IRQHandler+0x14>)
 8001bde:	0018      	movs	r0, r3
 8001be0:	f001 fce4 	bl	80035ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001be4:	46c0      	nop			; (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	20001368 	.word	0x20001368

08001bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf8:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <_sbrk+0x5c>)
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <_sbrk+0x60>)
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <_sbrk+0x64>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d102      	bne.n	8001c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <_sbrk+0x64>)
 8001c0e:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <_sbrk+0x68>)
 8001c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <_sbrk+0x64>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	18d3      	adds	r3, r2, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d207      	bcs.n	8001c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c20:	f00a faa2 	bl	800c168 <__errno>
 8001c24:	0003      	movs	r3, r0
 8001c26:	220c      	movs	r2, #12
 8001c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	425b      	negs	r3, r3
 8001c2e:	e009      	b.n	8001c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c36:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	18d2      	adds	r2, r2, r3
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <_sbrk+0x64>)
 8001c40:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001c42:	68fb      	ldr	r3, [r7, #12]
}
 8001c44:	0018      	movs	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b006      	add	sp, #24
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20004000 	.word	0x20004000
 8001c50:	00000400 	.word	0x00000400
 8001c54:	20000258 	.word	0x20000258
 8001c58:	20001670 	.word	0x20001670

08001c5c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001c60:	46c0      	nop			; (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <currentPhase>:
static void startTest();
static void stopTest();

//_____Dotaz na aktuální fázi testu_____//
TEST_PHASE currentPhase()
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	return testPhase;
 8001c6c:	4b02      	ldr	r3, [pc, #8]	; (8001c78 <currentPhase+0x10>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
}
 8001c70:	0018      	movs	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	2000025c 	.word	0x2000025c

08001c7c <testHandler>:

//_____Funkce pro řízení testu_____//
void testHandler()
{
 8001c7c:	b5b0      	push	{r4, r5, r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af02      	add	r7, sp, #8
	flags.testProgress = 0;
 8001c82:	4bc2      	ldr	r3, [pc, #776]	; (8001f8c <testHandler+0x310>)
 8001c84:	7e1a      	ldrb	r2, [r3, #24]
 8001c86:	2102      	movs	r1, #2
 8001c88:	438a      	bics	r2, r1
 8001c8a:	761a      	strb	r2, [r3, #24]

	if(flags.instructions.startRequest)
 8001c8c:	4bbf      	ldr	r3, [pc, #764]	; (8001f8c <testHandler+0x310>)
 8001c8e:	7b1b      	ldrb	r3, [r3, #12]
 8001c90:	2201      	movs	r2, #1
 8001c92:	4013      	ands	r3, r2
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d012      	beq.n	8001cc0 <testHandler+0x44>
	{
		if(testPhase == WAITING)
 8001c9a:	4bbd      	ldr	r3, [pc, #756]	; (8001f90 <testHandler+0x314>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d109      	bne.n	8001cb6 <testHandler+0x3a>
		{
			if(flags.conErr)
 8001ca2:	4bba      	ldr	r3, [pc, #744]	; (8001f8c <testHandler+0x310>)
 8001ca4:	7e1b      	ldrb	r3, [r3, #24]
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	4013      	ands	r3, r2
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d107      	bne.n	8001cc0 <testHandler+0x44>
			{
				//Pošli zprávu do PC
			}
			else
			{
				startTest();
 8001cb0:	f000 f97a 	bl	8001fa8 <startTest>
 8001cb4:	e004      	b.n	8001cc0 <testHandler+0x44>
			}
		}
		else
		{
			flags.startConflict = 1;
 8001cb6:	4bb5      	ldr	r3, [pc, #724]	; (8001f8c <testHandler+0x310>)
 8001cb8:	7e1a      	ldrb	r2, [r3, #24]
 8001cba:	2101      	movs	r1, #1
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	761a      	strb	r2, [r3, #24]
		}
	}
	if(flags.instructions.stopRequest)
 8001cc0:	4bb2      	ldr	r3, [pc, #712]	; (8001f8c <testHandler+0x310>)
 8001cc2:	7b1b      	ldrb	r3, [r3, #12]
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <testHandler+0x56>
	{
		stopTest();
 8001cce:	f000 f993 	bl	8001ff8 <stopTest>
	}

	switch(testPhase)
 8001cd2:	4baf      	ldr	r3, [pc, #700]	; (8001f90 <testHandler+0x314>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d900      	bls.n	8001cdc <testHandler+0x60>
 8001cda:	e153      	b.n	8001f84 <testHandler+0x308>
 8001cdc:	009a      	lsls	r2, r3, #2
 8001cde:	4bad      	ldr	r3, [pc, #692]	; (8001f94 <testHandler+0x318>)
 8001ce0:	18d3      	adds	r3, r2, r3
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	469f      	mov	pc, r3
	{
	case WAITING:
		flags.testProgress = 0;
 8001ce6:	4ba9      	ldr	r3, [pc, #676]	; (8001f8c <testHandler+0x310>)
 8001ce8:	7e1a      	ldrb	r2, [r3, #24]
 8001cea:	2102      	movs	r1, #2
 8001cec:	438a      	bics	r2, r1
 8001cee:	761a      	strb	r2, [r3, #24]
		flags.meas.measRequest = 0;
 8001cf0:	4ba6      	ldr	r3, [pc, #664]	; (8001f8c <testHandler+0x310>)
 8001cf2:	7d1a      	ldrb	r2, [r3, #20]
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	438a      	bics	r2, r1
 8001cf8:	751a      	strb	r2, [r3, #20]
		break;
 8001cfa:	e143      	b.n	8001f84 <testHandler+0x308>
	case START:

		//___Pokud je dokončeno měření napětí naprázdno...____//
		if(flags.meas.measComplete)
 8001cfc:	4ba3      	ldr	r3, [pc, #652]	; (8001f8c <testHandler+0x310>)
 8001cfe:	7d1b      	ldrb	r3, [r3, #20]
 8001d00:	2202      	movs	r2, #2
 8001d02:	4013      	ands	r3, r2
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d100      	bne.n	8001d0c <testHandler+0x90>
 8001d0a:	e132      	b.n	8001f72 <testHandler+0x2f6>
		{
			testPhase++;
 8001d0c:	4ba0      	ldr	r3, [pc, #640]	; (8001f90 <testHandler+0x314>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	4b9e      	ldr	r3, [pc, #632]	; (8001f90 <testHandler+0x314>)
 8001d16:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001d18:	e12b      	b.n	8001f72 <testHandler+0x2f6>
	case START_DONE:
		//___Připojení zátěže___//
		LOAD_MIN_ON;
 8001d1a:	4b9f      	ldr	r3, [pc, #636]	; (8001f98 <testHandler+0x31c>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	2180      	movs	r1, #128	; 0x80
 8001d20:	0018      	movs	r0, r3
 8001d22:	f001 fab8 	bl	8003296 <HAL_GPIO_WritePin>
		LOAD_MAX_ON;
 8001d26:	4b9c      	ldr	r3, [pc, #624]	; (8001f98 <testHandler+0x31c>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	2140      	movs	r1, #64	; 0x40
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f001 fab2 	bl	8003296 <HAL_GPIO_WritePin>

		testPhase++;
 8001d32:	4b97      	ldr	r3, [pc, #604]	; (8001f90 <testHandler+0x314>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	3301      	adds	r3, #1
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4b95      	ldr	r3, [pc, #596]	; (8001f90 <testHandler+0x314>)
 8001d3c:	701a      	strb	r2, [r3, #0]
		flags.testProgress = 1;
 8001d3e:	4b93      	ldr	r3, [pc, #588]	; (8001f8c <testHandler+0x310>)
 8001d40:	7e1a      	ldrb	r2, [r3, #24]
 8001d42:	2102      	movs	r1, #2
 8001d44:	430a      	orrs	r2, r1
 8001d46:	761a      	strb	r2, [r3, #24]
		flags.ui.shortBeep = 1;
 8001d48:	4b90      	ldr	r3, [pc, #576]	; (8001f8c <testHandler+0x310>)
 8001d4a:	7c1a      	ldrb	r2, [r3, #16]
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	741a      	strb	r2, [r3, #16]

		//___Nulování času___//
		for(int i = 1; i < 4; i++)
 8001d52:	2301      	movs	r3, #1
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	e007      	b.n	8001d68 <testHandler+0xec>
		{
			sysTime[i] = 0;
 8001d58:	4b90      	ldr	r3, [pc, #576]	; (8001f9c <testHandler+0x320>)
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	0092      	lsls	r2, r2, #2
 8001d5e:	2100      	movs	r1, #0
 8001d60:	50d1      	str	r1, [r2, r3]
		for(int i = 1; i < 4; i++)
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3301      	adds	r3, #1
 8001d66:	61fb      	str	r3, [r7, #28]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	ddf4      	ble.n	8001d58 <testHandler+0xdc>
		}
		break;
 8001d6e:	e109      	b.n	8001f84 <testHandler+0x308>
	case MAIN_TEST:
		if(flags.time.sec)	//___Změna času___//
 8001d70:	4b86      	ldr	r3, [pc, #536]	; (8001f8c <testHandler+0x310>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2202      	movs	r2, #2
 8001d76:	4013      	ands	r3, r2
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d01b      	beq.n	8001db6 <testHandler+0x13a>
		{
			char time[9] = {0};
 8001d7e:	250c      	movs	r5, #12
 8001d80:	197b      	adds	r3, r7, r5
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	3304      	adds	r3, #4
 8001d88:	2205      	movs	r2, #5
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f00a fa29 	bl	800c1e4 <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 8001d92:	4b82      	ldr	r3, [pc, #520]	; (8001f9c <testHandler+0x320>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	223c      	movs	r2, #60	; 0x3c
 8001d98:	1ad2      	subs	r2, r2, r3
 8001d9a:	4b80      	ldr	r3, [pc, #512]	; (8001f9c <testHandler+0x320>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	213c      	movs	r1, #60	; 0x3c
 8001da0:	1acc      	subs	r4, r1, r3
 8001da2:	4b7e      	ldr	r3, [pc, #504]	; (8001f9c <testHandler+0x320>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	2103      	movs	r1, #3
 8001da8:	1acb      	subs	r3, r1, r3
 8001daa:	497d      	ldr	r1, [pc, #500]	; (8001fa0 <testHandler+0x324>)
 8001dac:	1978      	adds	r0, r7, r5
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	0023      	movs	r3, r4
 8001db2:	f00a fad9 	bl	800c368 <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			//PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED2);	//blikání druhé progress led
			//sendData();
		}
		if(!(sysTime[SYSTIME_MIN] % 10) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých deset minut___//
 8001db6:	4b79      	ldr	r3, [pc, #484]	; (8001f9c <testHandler+0x320>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	210a      	movs	r1, #10
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f7fe fb25 	bl	800040c <__aeabi_idivmod>
 8001dc2:	1e0b      	subs	r3, r1, #0
 8001dc4:	d10f      	bne.n	8001de6 <testHandler+0x16a>
 8001dc6:	4b75      	ldr	r3, [pc, #468]	; (8001f9c <testHandler+0x320>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00b      	beq.n	8001de6 <testHandler+0x16a>
 8001dce:	4b6f      	ldr	r3, [pc, #444]	; (8001f8c <testHandler+0x310>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d004      	beq.n	8001de6 <testHandler+0x16a>
		{
			flags.meas.measRequest = 1;
 8001ddc:	4b6b      	ldr	r3, [pc, #428]	; (8001f8c <testHandler+0x310>)
 8001dde:	7d1a      	ldrb	r2, [r3, #20]
 8001de0:	2101      	movs	r1, #1
 8001de2:	430a      	orrs	r2, r1
 8001de4:	751a      	strb	r2, [r3, #20]
		}
		if(sysTime[SYSTIME_HOUR] >= 3)	//___Po třech hodinách je měření u konce___//
 8001de6:	4b6d      	ldr	r3, [pc, #436]	; (8001f9c <testHandler+0x320>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	dc00      	bgt.n	8001df0 <testHandler+0x174>
 8001dee:	e0c2      	b.n	8001f76 <testHandler+0x2fa>
		{
			testPhase++;
 8001df0:	4b67      	ldr	r3, [pc, #412]	; (8001f90 <testHandler+0x314>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	3301      	adds	r3, #1
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	4b65      	ldr	r3, [pc, #404]	; (8001f90 <testHandler+0x314>)
 8001dfa:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001dfc:	e0bb      	b.n	8001f76 <testHandler+0x2fa>
	case MAIN_TEST_DONE:
		if(flags.meas.measComplete)
 8001dfe:	4b63      	ldr	r3, [pc, #396]	; (8001f8c <testHandler+0x310>)
 8001e00:	7d1b      	ldrb	r3, [r3, #20]
 8001e02:	2202      	movs	r2, #2
 8001e04:	4013      	ands	r3, r2
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d100      	bne.n	8001e0e <testHandler+0x192>
 8001e0c:	e0b5      	b.n	8001f7a <testHandler+0x2fe>
		{
			flags.ui.notice = 1;
 8001e0e:	4b5f      	ldr	r3, [pc, #380]	; (8001f8c <testHandler+0x310>)
 8001e10:	7c1a      	ldrb	r2, [r3, #16]
 8001e12:	2108      	movs	r1, #8
 8001e14:	430a      	orrs	r2, r1
 8001e16:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8001e18:	4b5c      	ldr	r3, [pc, #368]	; (8001f8c <testHandler+0x310>)
 8001e1a:	7e1a      	ldrb	r2, [r3, #24]
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	761a      	strb	r2, [r3, #24]

			testPhase++;
 8001e22:	4b5b      	ldr	r3, [pc, #364]	; (8001f90 <testHandler+0x314>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	3301      	adds	r3, #1
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	4b59      	ldr	r3, [pc, #356]	; (8001f90 <testHandler+0x314>)
 8001e2c:	701a      	strb	r2, [r3, #0]

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED2);
 8001e2e:	4b5d      	ldr	r3, [pc, #372]	; (8001fa4 <testHandler+0x328>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	781a      	ldrb	r2, [r3, #0]
 8001e34:	4b5b      	ldr	r3, [pc, #364]	; (8001fa4 <testHandler+0x328>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2110      	movs	r1, #16
 8001e3a:	438a      	bics	r2, r1
 8001e3c:	b2d2      	uxtb	r2, r2
 8001e3e:	701a      	strb	r2, [r3, #0]
			PWR_OFF(*sourceInTesting);
 8001e40:	4b58      	ldr	r3, [pc, #352]	; (8001fa4 <testHandler+0x328>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	781a      	ldrb	r2, [r3, #0]
 8001e46:	4b57      	ldr	r3, [pc, #348]	; (8001fa4 <testHandler+0x328>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	701a      	strb	r2, [r3, #0]
			//sendData();

			//___Nulování času___//
			for(int i = 1; i < 4; i++)
 8001e52:	2301      	movs	r3, #1
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	e007      	b.n	8001e68 <testHandler+0x1ec>
			{
				sysTime[i] = 0;
 8001e58:	4b50      	ldr	r3, [pc, #320]	; (8001f9c <testHandler+0x320>)
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	0092      	lsls	r2, r2, #2
 8001e5e:	2100      	movs	r1, #0
 8001e60:	50d1      	str	r1, [r2, r3]
			for(int i = 1; i < 4; i++)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	3301      	adds	r3, #1
 8001e66:	61bb      	str	r3, [r7, #24]
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	ddf4      	ble.n	8001e58 <testHandler+0x1dc>
			}
		}
		break;
 8001e6e:	e084      	b.n	8001f7a <testHandler+0x2fe>
	case BATTERY_TEST:
		if(flags.time.sec)	//___Změna času___//
 8001e70:	4b46      	ldr	r3, [pc, #280]	; (8001f8c <testHandler+0x310>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2202      	movs	r2, #2
 8001e76:	4013      	ands	r3, r2
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d023      	beq.n	8001ec6 <testHandler+0x24a>
		{
			char time[9] = {0};
 8001e7e:	003b      	movs	r3, r7
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	3304      	adds	r3, #4
 8001e86:	2205      	movs	r2, #5
 8001e88:	2100      	movs	r1, #0
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f00a f9aa 	bl	800c1e4 <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 8001e90:	4b42      	ldr	r3, [pc, #264]	; (8001f9c <testHandler+0x320>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	223c      	movs	r2, #60	; 0x3c
 8001e96:	1ad2      	subs	r2, r2, r3
 8001e98:	4b40      	ldr	r3, [pc, #256]	; (8001f9c <testHandler+0x320>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	213c      	movs	r1, #60	; 0x3c
 8001e9e:	1acc      	subs	r4, r1, r3
 8001ea0:	4b3e      	ldr	r3, [pc, #248]	; (8001f9c <testHandler+0x320>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	2103      	movs	r1, #3
 8001ea6:	1acb      	subs	r3, r1, r3
 8001ea8:	493d      	ldr	r1, [pc, #244]	; (8001fa0 <testHandler+0x324>)
 8001eaa:	0038      	movs	r0, r7
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	0023      	movs	r3, r4
 8001eb0:	f00a fa5a 	bl	800c368 <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED3);	//blikání třetí progress led
 8001eb4:	4b3b      	ldr	r3, [pc, #236]	; (8001fa4 <testHandler+0x328>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	781a      	ldrb	r2, [r3, #0]
 8001eba:	4b3a      	ldr	r3, [pc, #232]	; (8001fa4 <testHandler+0x328>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2108      	movs	r1, #8
 8001ec0:	404a      	eors	r2, r1
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	701a      	strb	r2, [r3, #0]
			//sendData();
		}
		if(!(sysTime[SYSTIME_MIN] % 5) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých pět minut___//
 8001ec6:	4b35      	ldr	r3, [pc, #212]	; (8001f9c <testHandler+0x320>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2105      	movs	r1, #5
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f7fe fa9d 	bl	800040c <__aeabi_idivmod>
 8001ed2:	1e0b      	subs	r3, r1, #0
 8001ed4:	d10f      	bne.n	8001ef6 <testHandler+0x27a>
 8001ed6:	4b31      	ldr	r3, [pc, #196]	; (8001f9c <testHandler+0x320>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00b      	beq.n	8001ef6 <testHandler+0x27a>
 8001ede:	4b2b      	ldr	r3, [pc, #172]	; (8001f8c <testHandler+0x310>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2204      	movs	r2, #4
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d004      	beq.n	8001ef6 <testHandler+0x27a>
		{
			flags.meas.measRequest = 1;
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <testHandler+0x310>)
 8001eee:	7d1a      	ldrb	r2, [r3, #20]
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	751a      	strb	r2, [r3, #20]
		}
		if(sysTime[SYSTIME_MIN] >= 15)	//___Po třech hodinách je měření u konce___//
 8001ef6:	4b29      	ldr	r3, [pc, #164]	; (8001f9c <testHandler+0x320>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b0e      	cmp	r3, #14
 8001efc:	dd3f      	ble.n	8001f7e <testHandler+0x302>
		{
			testPhase++;
 8001efe:	4b24      	ldr	r3, [pc, #144]	; (8001f90 <testHandler+0x314>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	3301      	adds	r3, #1
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <testHandler+0x314>)
 8001f08:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001f0a:	e038      	b.n	8001f7e <testHandler+0x302>
	case BATTERY_TEST_DONE:
		if(flags.meas.measComplete)
 8001f0c:	4b1f      	ldr	r3, [pc, #124]	; (8001f8c <testHandler+0x310>)
 8001f0e:	7d1b      	ldrb	r3, [r3, #20]
 8001f10:	2202      	movs	r2, #2
 8001f12:	4013      	ands	r3, r2
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d033      	beq.n	8001f82 <testHandler+0x306>
		{
			flags.ui.done = 1;
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <testHandler+0x310>)
 8001f1c:	7c1a      	ldrb	r2, [r3, #16]
 8001f1e:	2110      	movs	r1, #16
 8001f20:	430a      	orrs	r2, r1
 8001f22:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8001f24:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <testHandler+0x310>)
 8001f26:	7e1a      	ldrb	r2, [r3, #24]
 8001f28:	2102      	movs	r1, #2
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	761a      	strb	r2, [r3, #24]

			//Zobrazit text na displej

			LOAD_MIN_OFF;
 8001f2e:	4b1a      	ldr	r3, [pc, #104]	; (8001f98 <testHandler+0x31c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	2180      	movs	r1, #128	; 0x80
 8001f34:	0018      	movs	r0, r3
 8001f36:	f001 f9ae 	bl	8003296 <HAL_GPIO_WritePin>
			LOAD_MAX_OFF;
 8001f3a:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <testHandler+0x31c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2140      	movs	r1, #64	; 0x40
 8001f40:	0018      	movs	r0, r3
 8001f42:	f001 f9a8 	bl	8003296 <HAL_GPIO_WritePin>

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED3);
 8001f46:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <testHandler+0x328>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	781a      	ldrb	r2, [r3, #0]
 8001f4c:	4b15      	ldr	r3, [pc, #84]	; (8001fa4 <testHandler+0x328>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2108      	movs	r1, #8
 8001f52:	438a      	bics	r2, r1
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	701a      	strb	r2, [r3, #0]
			PWR_ON(*sourceInTesting);
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <testHandler+0x328>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	781a      	ldrb	r2, [r3, #0]
 8001f5e:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <testHandler+0x328>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2101      	movs	r1, #1
 8001f64:	438a      	bics	r2, r1
 8001f66:	b2d2      	uxtb	r2, r2
 8001f68:	701a      	strb	r2, [r3, #0]
			//sendData();

			testPhase = WAITING;
 8001f6a:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <testHandler+0x314>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001f70:	e007      	b.n	8001f82 <testHandler+0x306>
		break;
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	e006      	b.n	8001f84 <testHandler+0x308>
		break;
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	e004      	b.n	8001f84 <testHandler+0x308>
		break;
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	e002      	b.n	8001f84 <testHandler+0x308>
		break;
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	e000      	b.n	8001f84 <testHandler+0x308>
		break;
 8001f82:	46c0      	nop			; (mov r8, r8)

	}
}
 8001f84:	46c0      	nop			; (mov r8, r8)
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b008      	add	sp, #32
 8001f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f8c:	20000618 	.word	0x20000618
 8001f90:	2000025c 	.word	0x2000025c
 8001f94:	0800cb6c 	.word	0x0800cb6c
 8001f98:	48000800 	.word	0x48000800
 8001f9c:	2000023c 	.word	0x2000023c
 8001fa0:	0800ca84 	.word	0x0800ca84
 8001fa4:	200006c8 	.word	0x200006c8

08001fa8 <startTest>:

//_____Funkce pro zahájení testu_____//
static void startTest(/*ukazatel na zdroj*/)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
	flags.ui.shortBeep = 1;
 8001fac:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <startTest+0x40>)
 8001fae:	7c1a      	ldrb	r2, [r3, #16]
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	741a      	strb	r2, [r3, #16]
	testPhase = START;
 8001fb6:	4b0d      	ldr	r3, [pc, #52]	; (8001fec <startTest+0x44>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
	flags.testProgress = 1;
 8001fbc:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <startTest+0x40>)
 8001fbe:	7e1a      	ldrb	r2, [r3, #24]
 8001fc0:	2102      	movs	r1, #2
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	761a      	strb	r2, [r3, #24]

	sourceInTesting = &regValues[0/*ukazatel na zdroj*/];
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <startTest+0x48>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <startTest+0x4c>)
 8001fcc:	601a      	str	r2, [r3, #0]
	 * RELAY_ON(*sourceInTesting);	//připojit relé
	 *
	 * sendData();	//poslat konfiguraci shift registrům
	 */
	//Zobrazit text na displej
	flags.meas.measRequest = 1;	//spustit měření
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <startTest+0x40>)
 8001fd0:	7d1a      	ldrb	r2, [r3, #20]
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	751a      	strb	r2, [r3, #20]

	flags.instructions.startRequest = 0;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <startTest+0x40>)
 8001fda:	7b1a      	ldrb	r2, [r3, #12]
 8001fdc:	2101      	movs	r1, #1
 8001fde:	438a      	bics	r2, r1
 8001fe0:	731a      	strb	r2, [r3, #12]
}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000618 	.word	0x20000618
 8001fec:	2000025c 	.word	0x2000025c
 8001ff0:	200006b8 	.word	0x200006b8
 8001ff4:	200006c8 	.word	0x200006c8

08001ff8 <stopTest>:

//_____Funkce pro ukončení testu_____//
static void stopTest()
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
	flags.ui.longBeep = 1;
 8001ffc:	4b10      	ldr	r3, [pc, #64]	; (8002040 <stopTest+0x48>)
 8001ffe:	7c1a      	ldrb	r2, [r3, #16]
 8002000:	2102      	movs	r1, #2
 8002002:	430a      	orrs	r2, r1
 8002004:	741a      	strb	r2, [r3, #16]
	testPhase = WAITING;
 8002006:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <stopTest+0x4c>)
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]

	//Zobrazit text na displej
	LOAD_MIN_OFF;
 800200c:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <stopTest+0x50>)
 800200e:	2200      	movs	r2, #0
 8002010:	2180      	movs	r1, #128	; 0x80
 8002012:	0018      	movs	r0, r3
 8002014:	f001 f93f 	bl	8003296 <HAL_GPIO_WritePin>
	LOAD_MAX_OFF;
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <stopTest+0x50>)
 800201a:	2200      	movs	r2, #0
 800201c:	2140      	movs	r1, #64	; 0x40
 800201e:	0018      	movs	r0, r3
 8002020:	f001 f939 	bl	8003296 <HAL_GPIO_WritePin>

	*sourceInTesting = 0;
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <stopTest+0x54>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
	sendData();
 800202c:	f7ff fbb6 	bl	800179c <sendData>

	flags.instructions.stopRequest = 0;
 8002030:	4b03      	ldr	r3, [pc, #12]	; (8002040 <stopTest+0x48>)
 8002032:	7b1a      	ldrb	r2, [r3, #12]
 8002034:	2102      	movs	r1, #2
 8002036:	438a      	bics	r2, r1
 8002038:	731a      	strb	r2, [r3, #12]
}
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000618 	.word	0x20000618
 8002044:	2000025c 	.word	0x2000025c
 8002048:	48000800 	.word	0x48000800
 800204c:	200006c8 	.word	0x200006c8

08002050 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002050:	480d      	ldr	r0, [pc, #52]	; (8002088 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002052:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002054:	480d      	ldr	r0, [pc, #52]	; (800208c <LoopForever+0x6>)
  ldr r1, =_edata
 8002056:	490e      	ldr	r1, [pc, #56]	; (8002090 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002058:	4a0e      	ldr	r2, [pc, #56]	; (8002094 <LoopForever+0xe>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800205c:	e002      	b.n	8002064 <LoopCopyDataInit>

0800205e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800205e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002062:	3304      	adds	r3, #4

08002064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002068:	d3f9      	bcc.n	800205e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800206a:	4a0b      	ldr	r2, [pc, #44]	; (8002098 <LoopForever+0x12>)
  ldr r4, =_ebss
 800206c:	4c0b      	ldr	r4, [pc, #44]	; (800209c <LoopForever+0x16>)
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002070:	e001      	b.n	8002076 <LoopFillZerobss>

08002072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002074:	3204      	adds	r2, #4

08002076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002078:	d3fb      	bcc.n	8002072 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800207a:	f7ff fdef 	bl	8001c5c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800207e:	f00a f879 	bl	800c174 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002082:	f7fe fa83 	bl	800058c <main>

08002086 <LoopForever>:

LoopForever:
    b LoopForever
 8002086:	e7fe      	b.n	8002086 <LoopForever>
  ldr   r0, =_estack
 8002088:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800208c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002090:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002094:	0800ccb4 	.word	0x0800ccb4
  ldr r2, =_sbss
 8002098:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800209c:	2000166c 	.word	0x2000166c

080020a0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020a0:	e7fe      	b.n	80020a0 <ADC1_COMP_IRQHandler>
	...

080020a4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a8:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <HAL_Init+0x24>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_Init+0x24>)
 80020ae:	2110      	movs	r1, #16
 80020b0:	430a      	orrs	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80020b4:	2003      	movs	r0, #3
 80020b6:	f000 f809 	bl	80020cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020ba:	f7ff fba3 	bl	8001804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	0018      	movs	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	40022000 	.word	0x40022000

080020cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020d4:	4b14      	ldr	r3, [pc, #80]	; (8002128 <HAL_InitTick+0x5c>)
 80020d6:	681c      	ldr	r4, [r3, #0]
 80020d8:	4b14      	ldr	r3, [pc, #80]	; (800212c <HAL_InitTick+0x60>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	0019      	movs	r1, r3
 80020de:	23fa      	movs	r3, #250	; 0xfa
 80020e0:	0098      	lsls	r0, r3, #2
 80020e2:	f7fe f823 	bl	800012c <__udivsi3>
 80020e6:	0003      	movs	r3, r0
 80020e8:	0019      	movs	r1, r3
 80020ea:	0020      	movs	r0, r4
 80020ec:	f7fe f81e 	bl	800012c <__udivsi3>
 80020f0:	0003      	movs	r3, r0
 80020f2:	0018      	movs	r0, r3
 80020f4:	f000 fd17 	bl	8002b26 <HAL_SYSTICK_Config>
 80020f8:	1e03      	subs	r3, r0, #0
 80020fa:	d001      	beq.n	8002100 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e00f      	b.n	8002120 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b03      	cmp	r3, #3
 8002104:	d80b      	bhi.n	800211e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	2301      	movs	r3, #1
 800210a:	425b      	negs	r3, r3
 800210c:	2200      	movs	r2, #0
 800210e:	0018      	movs	r0, r3
 8002110:	f000 fce4 	bl	8002adc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_InitTick+0x64>)
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
 800211c:	e000      	b.n	8002120 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
}
 8002120:	0018      	movs	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	b003      	add	sp, #12
 8002126:	bd90      	pop	{r4, r7, pc}
 8002128:	20000000 	.word	0x20000000
 800212c:	20000008 	.word	0x20000008
 8002130:	20000004 	.word	0x20000004

08002134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_IncTick+0x1c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	001a      	movs	r2, r3
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_IncTick+0x20>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	18d2      	adds	r2, r2, r3
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <HAL_IncTick+0x20>)
 8002146:	601a      	str	r2, [r3, #0]
}
 8002148:	46c0      	nop			; (mov r8, r8)
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	20000008 	.word	0x20000008
 8002154:	200006cc 	.word	0x200006cc

08002158 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  return uwTick;
 800215c:	4b02      	ldr	r3, [pc, #8]	; (8002168 <HAL_GetTick+0x10>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	0018      	movs	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	200006cc 	.word	0x200006cc

0800216c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002174:	f7ff fff0 	bl	8002158 <HAL_GetTick>
 8002178:	0003      	movs	r3, r0
 800217a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	3301      	adds	r3, #1
 8002184:	d005      	beq.n	8002192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_Delay+0x44>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	001a      	movs	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	189b      	adds	r3, r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002192:	46c0      	nop			; (mov r8, r8)
 8002194:	f7ff ffe0 	bl	8002158 <HAL_GetTick>
 8002198:	0002      	movs	r2, r0
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d8f7      	bhi.n	8002194 <HAL_Delay+0x28>
  {
  }
}
 80021a4:	46c0      	nop			; (mov r8, r8)
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	46bd      	mov	sp, r7
 80021aa:	b004      	add	sp, #16
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	20000008 	.word	0x20000008

080021b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021bc:	230f      	movs	r3, #15
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e125      	b.n	800241e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10a      	bne.n	80021f0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2234      	movs	r2, #52	; 0x34
 80021e4:	2100      	movs	r1, #0
 80021e6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	0018      	movs	r0, r3
 80021ec:	f7ff fb2e 	bl	800184c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f4:	2210      	movs	r2, #16
 80021f6:	4013      	ands	r3, r2
 80021f8:	d000      	beq.n	80021fc <HAL_ADC_Init+0x48>
 80021fa:	e103      	b.n	8002404 <HAL_ADC_Init+0x250>
 80021fc:	230f      	movs	r3, #15
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d000      	beq.n	8002208 <HAL_ADC_Init+0x54>
 8002206:	e0fd      	b.n	8002404 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	2204      	movs	r2, #4
 8002210:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002212:	d000      	beq.n	8002216 <HAL_ADC_Init+0x62>
 8002214:	e0f6      	b.n	8002404 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221a:	4a83      	ldr	r2, [pc, #524]	; (8002428 <HAL_ADC_Init+0x274>)
 800221c:	4013      	ands	r3, r2
 800221e:	2202      	movs	r2, #2
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2203      	movs	r2, #3
 800222e:	4013      	ands	r3, r2
 8002230:	2b01      	cmp	r3, #1
 8002232:	d112      	bne.n	800225a <HAL_ADC_Init+0xa6>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2201      	movs	r2, #1
 800223c:	4013      	ands	r3, r2
 800223e:	2b01      	cmp	r3, #1
 8002240:	d009      	beq.n	8002256 <HAL_ADC_Init+0xa2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	021b      	lsls	r3, r3, #8
 800224c:	401a      	ands	r2, r3
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	429a      	cmp	r2, r3
 8002254:	d101      	bne.n	800225a <HAL_ADC_Init+0xa6>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_ADC_Init+0xa8>
 800225a:	2300      	movs	r3, #0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d116      	bne.n	800228e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	2218      	movs	r2, #24
 8002268:	4393      	bics	r3, r2
 800226a:	0019      	movs	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	0899      	lsrs	r1, r3, #2
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4964      	ldr	r1, [pc, #400]	; (800242c <HAL_ADC_Init+0x278>)
 800229a:	400a      	ands	r2, r1
 800229c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	7e1b      	ldrb	r3, [r3, #24]
 80022a2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	7e5b      	ldrb	r3, [r3, #25]
 80022a8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022aa:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	7e9b      	ldrb	r3, [r3, #26]
 80022b0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80022b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d002      	beq.n	80022c2 <HAL_ADC_Init+0x10e>
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	015b      	lsls	r3, r3, #5
 80022c0:	e000      	b.n	80022c4 <HAL_ADC_Init+0x110>
 80022c2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80022c4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80022ca:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d101      	bne.n	80022d8 <HAL_ADC_Init+0x124>
 80022d4:	2304      	movs	r3, #4
 80022d6:	e000      	b.n	80022da <HAL_ADC_Init+0x126>
 80022d8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80022da:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2124      	movs	r1, #36	; 0x24
 80022e0:	5c5b      	ldrb	r3, [r3, r1]
 80022e2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80022e4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	7edb      	ldrb	r3, [r3, #27]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d115      	bne.n	8002320 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	7e9b      	ldrb	r3, [r3, #26]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d105      	bne.n	8002308 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2280      	movs	r2, #128	; 0x80
 8002300:	0252      	lsls	r2, r2, #9
 8002302:	4313      	orrs	r3, r2
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	e00b      	b.n	8002320 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230c:	2220      	movs	r2, #32
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002318:	2201      	movs	r2, #1
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69da      	ldr	r2, [r3, #28]
 8002324:	23c2      	movs	r3, #194	; 0xc2
 8002326:	33ff      	adds	r3, #255	; 0xff
 8002328:	429a      	cmp	r2, r3
 800232a:	d007      	beq.n	800233c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002334:	4313      	orrs	r3, r2
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	4313      	orrs	r3, r2
 800233a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68d9      	ldr	r1, [r3, #12]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	430a      	orrs	r2, r1
 800234a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	055b      	lsls	r3, r3, #21
 8002354:	429a      	cmp	r2, r3
 8002356:	d01b      	beq.n	8002390 <HAL_ADC_Init+0x1dc>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	2b01      	cmp	r3, #1
 800235e:	d017      	beq.n	8002390 <HAL_ADC_Init+0x1dc>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	2b02      	cmp	r3, #2
 8002366:	d013      	beq.n	8002390 <HAL_ADC_Init+0x1dc>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	2b03      	cmp	r3, #3
 800236e:	d00f      	beq.n	8002390 <HAL_ADC_Init+0x1dc>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	2b04      	cmp	r3, #4
 8002376:	d00b      	beq.n	8002390 <HAL_ADC_Init+0x1dc>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237c:	2b05      	cmp	r3, #5
 800237e:	d007      	beq.n	8002390 <HAL_ADC_Init+0x1dc>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002384:	2b06      	cmp	r3, #6
 8002386:	d003      	beq.n	8002390 <HAL_ADC_Init+0x1dc>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	2b07      	cmp	r3, #7
 800238e:	d112      	bne.n	80023b6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	695a      	ldr	r2, [r3, #20]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2107      	movs	r1, #7
 800239c:	438a      	bics	r2, r1
 800239e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6959      	ldr	r1, [r3, #20]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023aa:	2207      	movs	r2, #7
 80023ac:	401a      	ands	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4a1c      	ldr	r2, [pc, #112]	; (8002430 <HAL_ADC_Init+0x27c>)
 80023be:	4013      	ands	r3, r2
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d10b      	bne.n	80023de <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d0:	2203      	movs	r2, #3
 80023d2:	4393      	bics	r3, r2
 80023d4:	2201      	movs	r2, #1
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80023dc:	e01c      	b.n	8002418 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e2:	2212      	movs	r2, #18
 80023e4:	4393      	bics	r3, r2
 80023e6:	2210      	movs	r2, #16
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f2:	2201      	movs	r2, #1
 80023f4:	431a      	orrs	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80023fa:	230f      	movs	r3, #15
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	2201      	movs	r2, #1
 8002400:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002402:	e009      	b.n	8002418 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002408:	2210      	movs	r2, #16
 800240a:	431a      	orrs	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002410:	230f      	movs	r3, #15
 8002412:	18fb      	adds	r3, r7, r3
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002418:	230f      	movs	r3, #15
 800241a:	18fb      	adds	r3, r7, r3
 800241c:	781b      	ldrb	r3, [r3, #0]
}
 800241e:	0018      	movs	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	b004      	add	sp, #16
 8002424:	bd80      	pop	{r7, pc}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	fffffefd 	.word	0xfffffefd
 800242c:	fffe0219 	.word	0xfffe0219
 8002430:	833fffe7 	.word	0x833fffe7

08002434 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002434:	b590      	push	{r4, r7, lr}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002440:	2317      	movs	r3, #23
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2204      	movs	r2, #4
 8002450:	4013      	ands	r3, r2
 8002452:	d15e      	bne.n	8002512 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2234      	movs	r2, #52	; 0x34
 8002458:	5c9b      	ldrb	r3, [r3, r2]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_ADC_Start_DMA+0x2e>
 800245e:	2302      	movs	r3, #2
 8002460:	e05e      	b.n	8002520 <HAL_ADC_Start_DMA+0xec>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2234      	movs	r2, #52	; 0x34
 8002466:	2101      	movs	r1, #1
 8002468:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	7e5b      	ldrb	r3, [r3, #25]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d007      	beq.n	8002482 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002472:	2317      	movs	r3, #23
 8002474:	18fc      	adds	r4, r7, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	0018      	movs	r0, r3
 800247a:	f000 f97b 	bl	8002774 <ADC_Enable>
 800247e:	0003      	movs	r3, r0
 8002480:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002482:	2317      	movs	r3, #23
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d146      	bne.n	800251a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002490:	4a25      	ldr	r2, [pc, #148]	; (8002528 <HAL_ADC_Start_DMA+0xf4>)
 8002492:	4013      	ands	r3, r2
 8002494:	2280      	movs	r2, #128	; 0x80
 8002496:	0052      	lsls	r2, r2, #1
 8002498:	431a      	orrs	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2234      	movs	r2, #52	; 0x34
 80024a8:	2100      	movs	r1, #0
 80024aa:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	4a1e      	ldr	r2, [pc, #120]	; (800252c <HAL_ADC_Start_DMA+0xf8>)
 80024b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b8:	4a1d      	ldr	r2, [pc, #116]	; (8002530 <HAL_ADC_Start_DMA+0xfc>)
 80024ba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	4a1c      	ldr	r2, [pc, #112]	; (8002534 <HAL_ADC_Start_DMA+0x100>)
 80024c2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	221c      	movs	r2, #28
 80024ca:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2110      	movs	r1, #16
 80024d8:	430a      	orrs	r2, r1
 80024da:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2101      	movs	r1, #1
 80024e8:	430a      	orrs	r2, r1
 80024ea:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	3340      	adds	r3, #64	; 0x40
 80024f6:	0019      	movs	r1, r3
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f000 fb68 	bl	8002bd0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2104      	movs	r1, #4
 800250c:	430a      	orrs	r2, r1
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	e003      	b.n	800251a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002512:	2317      	movs	r3, #23
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	2202      	movs	r2, #2
 8002518:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800251a:	2317      	movs	r3, #23
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	781b      	ldrb	r3, [r3, #0]
}
 8002520:	0018      	movs	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	b007      	add	sp, #28
 8002526:	bd90      	pop	{r4, r7, pc}
 8002528:	fffff0fe 	.word	0xfffff0fe
 800252c:	0800287d 	.word	0x0800287d
 8002530:	08002931 	.word	0x08002931
 8002534:	0800294f 	.word	0x0800294f

08002538 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002540:	46c0      	nop			; (mov r8, r8)
 8002542:	46bd      	mov	sp, r7
 8002544:	b002      	add	sp, #8
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002550:	46c0      	nop			; (mov r8, r8)
 8002552:	46bd      	mov	sp, r7
 8002554:	b002      	add	sp, #8
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002562:	230f      	movs	r3, #15
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	055b      	lsls	r3, r3, #21
 8002576:	429a      	cmp	r2, r3
 8002578:	d011      	beq.n	800259e <HAL_ADC_ConfigChannel+0x46>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257e:	2b01      	cmp	r3, #1
 8002580:	d00d      	beq.n	800259e <HAL_ADC_ConfigChannel+0x46>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002586:	2b02      	cmp	r3, #2
 8002588:	d009      	beq.n	800259e <HAL_ADC_ConfigChannel+0x46>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	2b03      	cmp	r3, #3
 8002590:	d005      	beq.n	800259e <HAL_ADC_ConfigChannel+0x46>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	2b04      	cmp	r3, #4
 8002598:	d001      	beq.n	800259e <HAL_ADC_ConfigChannel+0x46>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2234      	movs	r2, #52	; 0x34
 80025a2:	5c9b      	ldrb	r3, [r3, r2]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x54>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e0d0      	b.n	800274e <HAL_ADC_ConfigChannel+0x1f6>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2234      	movs	r2, #52	; 0x34
 80025b0:	2101      	movs	r1, #1
 80025b2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2204      	movs	r2, #4
 80025bc:	4013      	ands	r3, r2
 80025be:	d000      	beq.n	80025c2 <HAL_ADC_ConfigChannel+0x6a>
 80025c0:	e0b4      	b.n	800272c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	4a64      	ldr	r2, [pc, #400]	; (8002758 <HAL_ADC_ConfigChannel+0x200>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d100      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x76>
 80025cc:	e082      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2201      	movs	r2, #1
 80025da:	409a      	lsls	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e8:	2380      	movs	r3, #128	; 0x80
 80025ea:	055b      	lsls	r3, r3, #21
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d037      	beq.n	8002660 <HAL_ADC_ConfigChannel+0x108>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d033      	beq.n	8002660 <HAL_ADC_ConfigChannel+0x108>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d02f      	beq.n	8002660 <HAL_ADC_ConfigChannel+0x108>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	2b03      	cmp	r3, #3
 8002606:	d02b      	beq.n	8002660 <HAL_ADC_ConfigChannel+0x108>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	2b04      	cmp	r3, #4
 800260e:	d027      	beq.n	8002660 <HAL_ADC_ConfigChannel+0x108>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	2b05      	cmp	r3, #5
 8002616:	d023      	beq.n	8002660 <HAL_ADC_ConfigChannel+0x108>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	2b06      	cmp	r3, #6
 800261e:	d01f      	beq.n	8002660 <HAL_ADC_ConfigChannel+0x108>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	2b07      	cmp	r3, #7
 8002626:	d01b      	beq.n	8002660 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	2107      	movs	r1, #7
 8002634:	400b      	ands	r3, r1
 8002636:	429a      	cmp	r2, r3
 8002638:	d012      	beq.n	8002660 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2107      	movs	r1, #7
 8002646:	438a      	bics	r2, r1
 8002648:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6959      	ldr	r1, [r3, #20]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2207      	movs	r2, #7
 8002656:	401a      	ands	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b10      	cmp	r3, #16
 8002666:	d007      	beq.n	8002678 <HAL_ADC_ConfigChannel+0x120>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b11      	cmp	r3, #17
 800266e:	d003      	beq.n	8002678 <HAL_ADC_ConfigChannel+0x120>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b12      	cmp	r3, #18
 8002676:	d163      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002678:	4b38      	ldr	r3, [pc, #224]	; (800275c <HAL_ADC_ConfigChannel+0x204>)
 800267a:	6819      	ldr	r1, [r3, #0]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b10      	cmp	r3, #16
 8002682:	d009      	beq.n	8002698 <HAL_ADC_ConfigChannel+0x140>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b11      	cmp	r3, #17
 800268a:	d102      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x13a>
 800268c:	2380      	movs	r3, #128	; 0x80
 800268e:	03db      	lsls	r3, r3, #15
 8002690:	e004      	b.n	800269c <HAL_ADC_ConfigChannel+0x144>
 8002692:	2380      	movs	r3, #128	; 0x80
 8002694:	045b      	lsls	r3, r3, #17
 8002696:	e001      	b.n	800269c <HAL_ADC_ConfigChannel+0x144>
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	041b      	lsls	r3, r3, #16
 800269c:	4a2f      	ldr	r2, [pc, #188]	; (800275c <HAL_ADC_ConfigChannel+0x204>)
 800269e:	430b      	orrs	r3, r1
 80026a0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b10      	cmp	r3, #16
 80026a8:	d14a      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026aa:	4b2d      	ldr	r3, [pc, #180]	; (8002760 <HAL_ADC_ConfigChannel+0x208>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	492d      	ldr	r1, [pc, #180]	; (8002764 <HAL_ADC_ConfigChannel+0x20c>)
 80026b0:	0018      	movs	r0, r3
 80026b2:	f7fd fd3b 	bl	800012c <__udivsi3>
 80026b6:	0003      	movs	r3, r0
 80026b8:	001a      	movs	r2, r3
 80026ba:	0013      	movs	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	189b      	adds	r3, r3, r2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026c4:	e002      	b.n	80026cc <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	3b01      	subs	r3, #1
 80026ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f9      	bne.n	80026c6 <HAL_ADC_ConfigChannel+0x16e>
 80026d2:	e035      	b.n	8002740 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2101      	movs	r1, #1
 80026e0:	4099      	lsls	r1, r3
 80026e2:	000b      	movs	r3, r1
 80026e4:	43d9      	mvns	r1, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	400a      	ands	r2, r1
 80026ec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2b10      	cmp	r3, #16
 80026f4:	d007      	beq.n	8002706 <HAL_ADC_ConfigChannel+0x1ae>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b11      	cmp	r3, #17
 80026fc:	d003      	beq.n	8002706 <HAL_ADC_ConfigChannel+0x1ae>
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b12      	cmp	r3, #18
 8002704:	d11c      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <HAL_ADC_ConfigChannel+0x204>)
 8002708:	6819      	ldr	r1, [r3, #0]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b10      	cmp	r3, #16
 8002710:	d007      	beq.n	8002722 <HAL_ADC_ConfigChannel+0x1ca>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b11      	cmp	r3, #17
 8002718:	d101      	bne.n	800271e <HAL_ADC_ConfigChannel+0x1c6>
 800271a:	4b13      	ldr	r3, [pc, #76]	; (8002768 <HAL_ADC_ConfigChannel+0x210>)
 800271c:	e002      	b.n	8002724 <HAL_ADC_ConfigChannel+0x1cc>
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <HAL_ADC_ConfigChannel+0x214>)
 8002720:	e000      	b.n	8002724 <HAL_ADC_ConfigChannel+0x1cc>
 8002722:	4b13      	ldr	r3, [pc, #76]	; (8002770 <HAL_ADC_ConfigChannel+0x218>)
 8002724:	4a0d      	ldr	r2, [pc, #52]	; (800275c <HAL_ADC_ConfigChannel+0x204>)
 8002726:	400b      	ands	r3, r1
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	e009      	b.n	8002740 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002730:	2220      	movs	r2, #32
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002738:	230f      	movs	r3, #15
 800273a:	18fb      	adds	r3, r7, r3
 800273c:	2201      	movs	r2, #1
 800273e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2234      	movs	r2, #52	; 0x34
 8002744:	2100      	movs	r1, #0
 8002746:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002748:	230f      	movs	r3, #15
 800274a:	18fb      	adds	r3, r7, r3
 800274c:	781b      	ldrb	r3, [r3, #0]
}
 800274e:	0018      	movs	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	b004      	add	sp, #16
 8002754:	bd80      	pop	{r7, pc}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	00001001 	.word	0x00001001
 800275c:	40012708 	.word	0x40012708
 8002760:	20000000 	.word	0x20000000
 8002764:	000f4240 	.word	0x000f4240
 8002768:	ffbfffff 	.word	0xffbfffff
 800276c:	feffffff 	.word	0xfeffffff
 8002770:	ff7fffff 	.word	0xff7fffff

08002774 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2203      	movs	r2, #3
 800278c:	4013      	ands	r3, r2
 800278e:	2b01      	cmp	r3, #1
 8002790:	d112      	bne.n	80027b8 <ADC_Enable+0x44>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2201      	movs	r2, #1
 800279a:	4013      	ands	r3, r2
 800279c:	2b01      	cmp	r3, #1
 800279e:	d009      	beq.n	80027b4 <ADC_Enable+0x40>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	2380      	movs	r3, #128	; 0x80
 80027a8:	021b      	lsls	r3, r3, #8
 80027aa:	401a      	ands	r2, r3
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d101      	bne.n	80027b8 <ADC_Enable+0x44>
 80027b4:	2301      	movs	r3, #1
 80027b6:	e000      	b.n	80027ba <ADC_Enable+0x46>
 80027b8:	2300      	movs	r3, #0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d152      	bne.n	8002864 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	4a2a      	ldr	r2, [pc, #168]	; (8002870 <ADC_Enable+0xfc>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	d00d      	beq.n	80027e6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ce:	2210      	movs	r2, #16
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027da:	2201      	movs	r2, #1
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e03f      	b.n	8002866 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2101      	movs	r1, #1
 80027f2:	430a      	orrs	r2, r1
 80027f4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027f6:	4b1f      	ldr	r3, [pc, #124]	; (8002874 <ADC_Enable+0x100>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	491f      	ldr	r1, [pc, #124]	; (8002878 <ADC_Enable+0x104>)
 80027fc:	0018      	movs	r0, r3
 80027fe:	f7fd fc95 	bl	800012c <__udivsi3>
 8002802:	0003      	movs	r3, r0
 8002804:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002806:	e002      	b.n	800280e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	3b01      	subs	r3, #1
 800280c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f9      	bne.n	8002808 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002814:	f7ff fca0 	bl	8002158 <HAL_GetTick>
 8002818:	0003      	movs	r3, r0
 800281a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800281c:	e01b      	b.n	8002856 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800281e:	f7ff fc9b 	bl	8002158 <HAL_GetTick>
 8002822:	0002      	movs	r2, r0
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d914      	bls.n	8002856 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2201      	movs	r2, #1
 8002834:	4013      	ands	r3, r2
 8002836:	2b01      	cmp	r3, #1
 8002838:	d00d      	beq.n	8002856 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283e:	2210      	movs	r2, #16
 8002840:	431a      	orrs	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284a:	2201      	movs	r2, #1
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e007      	b.n	8002866 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2201      	movs	r2, #1
 800285e:	4013      	ands	r3, r2
 8002860:	2b01      	cmp	r3, #1
 8002862:	d1dc      	bne.n	800281e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	0018      	movs	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	b004      	add	sp, #16
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	80000017 	.word	0x80000017
 8002874:	20000000 	.word	0x20000000
 8002878:	000f4240 	.word	0x000f4240

0800287c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288e:	2250      	movs	r2, #80	; 0x50
 8002890:	4013      	ands	r3, r2
 8002892:	d140      	bne.n	8002916 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002898:	2280      	movs	r2, #128	; 0x80
 800289a:	0092      	lsls	r2, r2, #2
 800289c:	431a      	orrs	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	23c0      	movs	r3, #192	; 0xc0
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	4013      	ands	r3, r2
 80028ae:	d12d      	bne.n	800290c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d129      	bne.n	800290c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2208      	movs	r2, #8
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d122      	bne.n	800290c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2204      	movs	r2, #4
 80028ce:	4013      	ands	r3, r2
 80028d0:	d110      	bne.n	80028f4 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	210c      	movs	r1, #12
 80028de:	438a      	bics	r2, r1
 80028e0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e6:	4a11      	ldr	r2, [pc, #68]	; (800292c <ADC_DMAConvCplt+0xb0>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	2201      	movs	r2, #1
 80028ec:	431a      	orrs	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	639a      	str	r2, [r3, #56]	; 0x38
 80028f2:	e00b      	b.n	800290c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f8:	2220      	movs	r2, #32
 80028fa:	431a      	orrs	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002904:	2201      	movs	r2, #1
 8002906:	431a      	orrs	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	0018      	movs	r0, r3
 8002910:	f7fd fe2c 	bl	800056c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002914:	e005      	b.n	8002922 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	0010      	movs	r0, r2
 8002920:	4798      	blx	r3
}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	46bd      	mov	sp, r7
 8002926:	b004      	add	sp, #16
 8002928:	bd80      	pop	{r7, pc}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	fffffefe 	.word	0xfffffefe

08002930 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	0018      	movs	r0, r3
 8002942:	f7ff fdf9 	bl	8002538 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	46bd      	mov	sp, r7
 800294a:	b004      	add	sp, #16
 800294c:	bd80      	pop	{r7, pc}

0800294e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b084      	sub	sp, #16
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002960:	2240      	movs	r2, #64	; 0x40
 8002962:	431a      	orrs	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296c:	2204      	movs	r2, #4
 800296e:	431a      	orrs	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	0018      	movs	r0, r3
 8002978:	f7ff fde6 	bl	8002548 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800297c:	46c0      	nop			; (mov r8, r8)
 800297e:	46bd      	mov	sp, r7
 8002980:	b004      	add	sp, #16
 8002982:	bd80      	pop	{r7, pc}

08002984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	0002      	movs	r2, r0
 800298c:	1dfb      	adds	r3, r7, #7
 800298e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002990:	1dfb      	adds	r3, r7, #7
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b7f      	cmp	r3, #127	; 0x7f
 8002996:	d809      	bhi.n	80029ac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002998:	1dfb      	adds	r3, r7, #7
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	001a      	movs	r2, r3
 800299e:	231f      	movs	r3, #31
 80029a0:	401a      	ands	r2, r3
 80029a2:	4b04      	ldr	r3, [pc, #16]	; (80029b4 <__NVIC_EnableIRQ+0x30>)
 80029a4:	2101      	movs	r1, #1
 80029a6:	4091      	lsls	r1, r2
 80029a8:	000a      	movs	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]
  }
}
 80029ac:	46c0      	nop			; (mov r8, r8)
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b002      	add	sp, #8
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	e000e100 	.word	0xe000e100

080029b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029b8:	b590      	push	{r4, r7, lr}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	0002      	movs	r2, r0
 80029c0:	6039      	str	r1, [r7, #0]
 80029c2:	1dfb      	adds	r3, r7, #7
 80029c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80029c6:	1dfb      	adds	r3, r7, #7
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b7f      	cmp	r3, #127	; 0x7f
 80029cc:	d828      	bhi.n	8002a20 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029ce:	4a2f      	ldr	r2, [pc, #188]	; (8002a8c <__NVIC_SetPriority+0xd4>)
 80029d0:	1dfb      	adds	r3, r7, #7
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	b25b      	sxtb	r3, r3
 80029d6:	089b      	lsrs	r3, r3, #2
 80029d8:	33c0      	adds	r3, #192	; 0xc0
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	589b      	ldr	r3, [r3, r2]
 80029de:	1dfa      	adds	r2, r7, #7
 80029e0:	7812      	ldrb	r2, [r2, #0]
 80029e2:	0011      	movs	r1, r2
 80029e4:	2203      	movs	r2, #3
 80029e6:	400a      	ands	r2, r1
 80029e8:	00d2      	lsls	r2, r2, #3
 80029ea:	21ff      	movs	r1, #255	; 0xff
 80029ec:	4091      	lsls	r1, r2
 80029ee:	000a      	movs	r2, r1
 80029f0:	43d2      	mvns	r2, r2
 80029f2:	401a      	ands	r2, r3
 80029f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	019b      	lsls	r3, r3, #6
 80029fa:	22ff      	movs	r2, #255	; 0xff
 80029fc:	401a      	ands	r2, r3
 80029fe:	1dfb      	adds	r3, r7, #7
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	0018      	movs	r0, r3
 8002a04:	2303      	movs	r3, #3
 8002a06:	4003      	ands	r3, r0
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a0c:	481f      	ldr	r0, [pc, #124]	; (8002a8c <__NVIC_SetPriority+0xd4>)
 8002a0e:	1dfb      	adds	r3, r7, #7
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	b25b      	sxtb	r3, r3
 8002a14:	089b      	lsrs	r3, r3, #2
 8002a16:	430a      	orrs	r2, r1
 8002a18:	33c0      	adds	r3, #192	; 0xc0
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002a1e:	e031      	b.n	8002a84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a20:	4a1b      	ldr	r2, [pc, #108]	; (8002a90 <__NVIC_SetPriority+0xd8>)
 8002a22:	1dfb      	adds	r3, r7, #7
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	0019      	movs	r1, r3
 8002a28:	230f      	movs	r3, #15
 8002a2a:	400b      	ands	r3, r1
 8002a2c:	3b08      	subs	r3, #8
 8002a2e:	089b      	lsrs	r3, r3, #2
 8002a30:	3306      	adds	r3, #6
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	18d3      	adds	r3, r2, r3
 8002a36:	3304      	adds	r3, #4
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	1dfa      	adds	r2, r7, #7
 8002a3c:	7812      	ldrb	r2, [r2, #0]
 8002a3e:	0011      	movs	r1, r2
 8002a40:	2203      	movs	r2, #3
 8002a42:	400a      	ands	r2, r1
 8002a44:	00d2      	lsls	r2, r2, #3
 8002a46:	21ff      	movs	r1, #255	; 0xff
 8002a48:	4091      	lsls	r1, r2
 8002a4a:	000a      	movs	r2, r1
 8002a4c:	43d2      	mvns	r2, r2
 8002a4e:	401a      	ands	r2, r3
 8002a50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	019b      	lsls	r3, r3, #6
 8002a56:	22ff      	movs	r2, #255	; 0xff
 8002a58:	401a      	ands	r2, r3
 8002a5a:	1dfb      	adds	r3, r7, #7
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	0018      	movs	r0, r3
 8002a60:	2303      	movs	r3, #3
 8002a62:	4003      	ands	r3, r0
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a68:	4809      	ldr	r0, [pc, #36]	; (8002a90 <__NVIC_SetPriority+0xd8>)
 8002a6a:	1dfb      	adds	r3, r7, #7
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	001c      	movs	r4, r3
 8002a70:	230f      	movs	r3, #15
 8002a72:	4023      	ands	r3, r4
 8002a74:	3b08      	subs	r3, #8
 8002a76:	089b      	lsrs	r3, r3, #2
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	3306      	adds	r3, #6
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	18c3      	adds	r3, r0, r3
 8002a80:	3304      	adds	r3, #4
 8002a82:	601a      	str	r2, [r3, #0]
}
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b003      	add	sp, #12
 8002a8a:	bd90      	pop	{r4, r7, pc}
 8002a8c:	e000e100 	.word	0xe000e100
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	1e5a      	subs	r2, r3, #1
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	045b      	lsls	r3, r3, #17
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d301      	bcc.n	8002aac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e010      	b.n	8002ace <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aac:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <SysTick_Config+0x44>)
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	3a01      	subs	r2, #1
 8002ab2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	425b      	negs	r3, r3
 8002ab8:	2103      	movs	r1, #3
 8002aba:	0018      	movs	r0, r3
 8002abc:	f7ff ff7c 	bl	80029b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <SysTick_Config+0x44>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ac6:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <SysTick_Config+0x44>)
 8002ac8:	2207      	movs	r2, #7
 8002aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	0018      	movs	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b002      	add	sp, #8
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	e000e010 	.word	0xe000e010

08002adc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	607a      	str	r2, [r7, #4]
 8002ae6:	210f      	movs	r1, #15
 8002ae8:	187b      	adds	r3, r7, r1
 8002aea:	1c02      	adds	r2, r0, #0
 8002aec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	187b      	adds	r3, r7, r1
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	b25b      	sxtb	r3, r3
 8002af6:	0011      	movs	r1, r2
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7ff ff5d 	bl	80029b8 <__NVIC_SetPriority>
}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b004      	add	sp, #16
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	0002      	movs	r2, r0
 8002b0e:	1dfb      	adds	r3, r7, #7
 8002b10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b12:	1dfb      	adds	r3, r7, #7
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	b25b      	sxtb	r3, r3
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f7ff ff33 	bl	8002984 <__NVIC_EnableIRQ>
}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	46bd      	mov	sp, r7
 8002b22:	b002      	add	sp, #8
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	0018      	movs	r0, r3
 8002b32:	f7ff ffaf 	bl	8002a94 <SysTick_Config>
 8002b36:	0003      	movs	r3, r0
}
 8002b38:	0018      	movs	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b002      	add	sp, #8
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e036      	b.n	8002bc4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2221      	movs	r2, #33	; 0x21
 8002b5a:	2102      	movs	r1, #2
 8002b5c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4a18      	ldr	r2, [pc, #96]	; (8002bcc <HAL_DMA_Init+0x8c>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f000 f9c4 	bl	8002f34 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2221      	movs	r2, #33	; 0x21
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}  
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b004      	add	sp, #16
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	ffffc00f 	.word	0xffffc00f

08002bd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002bde:	2317      	movs	r3, #23
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	2200      	movs	r2, #0
 8002be4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	5c9b      	ldrb	r3, [r3, r2]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d101      	bne.n	8002bf4 <HAL_DMA_Start_IT+0x24>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	e04f      	b.n	8002c94 <HAL_DMA_Start_IT+0xc4>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2221      	movs	r2, #33	; 0x21
 8002c00:	5c9b      	ldrb	r3, [r3, r2]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d13a      	bne.n	8002c7e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2221      	movs	r2, #33	; 0x21
 8002c0c:	2102      	movs	r1, #2
 8002c0e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2101      	movs	r1, #1
 8002c22:	438a      	bics	r2, r1
 8002c24:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	68b9      	ldr	r1, [r7, #8]
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 f954 	bl	8002eda <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d008      	beq.n	8002c4c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	210e      	movs	r1, #14
 8002c46:	430a      	orrs	r2, r1
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	e00f      	b.n	8002c6c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	210a      	movs	r1, #10
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2104      	movs	r1, #4
 8002c68:	438a      	bics	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2101      	movs	r1, #1
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	e007      	b.n	8002c8e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2220      	movs	r2, #32
 8002c82:	2100      	movs	r1, #0
 8002c84:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002c86:	2317      	movs	r3, #23
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8002c8e:	2317      	movs	r3, #23
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	781b      	ldrb	r3, [r3, #0]
} 
 8002c94:	0018      	movs	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b006      	add	sp, #24
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2221      	movs	r2, #33	; 0x21
 8002ca8:	5c9b      	ldrb	r3, [r3, r2]
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d008      	beq.n	8002cc2 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2204      	movs	r2, #4
 8002cb4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	2100      	movs	r1, #0
 8002cbc:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e020      	b.n	8002d04 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	210e      	movs	r1, #14
 8002cce:	438a      	bics	r2, r1
 8002cd0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2101      	movs	r1, #1
 8002cde:	438a      	bics	r2, r1
 8002ce0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cea:	2101      	movs	r1, #1
 8002cec:	4091      	lsls	r1, r2
 8002cee:	000a      	movs	r2, r1
 8002cf0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2221      	movs	r2, #33	; 0x21
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	2100      	movs	r1, #0
 8002d00:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	0018      	movs	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b002      	add	sp, #8
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d14:	210f      	movs	r1, #15
 8002d16:	187b      	adds	r3, r7, r1
 8002d18:	2200      	movs	r2, #0
 8002d1a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2221      	movs	r2, #33	; 0x21
 8002d20:	5c9b      	ldrb	r3, [r3, r2]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d006      	beq.n	8002d36 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002d2e:	187b      	adds	r3, r7, r1
 8002d30:	2201      	movs	r2, #1
 8002d32:	701a      	strb	r2, [r3, #0]
 8002d34:	e028      	b.n	8002d88 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	210e      	movs	r1, #14
 8002d42:	438a      	bics	r2, r1
 8002d44:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2101      	movs	r1, #1
 8002d52:	438a      	bics	r2, r1
 8002d54:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5e:	2101      	movs	r1, #1
 8002d60:	4091      	lsls	r1, r2
 8002d62:	000a      	movs	r2, r1
 8002d64:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2221      	movs	r2, #33	; 0x21
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2220      	movs	r2, #32
 8002d72:	2100      	movs	r1, #0
 8002d74:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d004      	beq.n	8002d88 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	0010      	movs	r0, r2
 8002d86:	4798      	blx	r3
    } 
  }
  return status;
 8002d88:	230f      	movs	r3, #15
 8002d8a:	18fb      	adds	r3, r7, r3
 8002d8c:	781b      	ldrb	r3, [r3, #0]
}
 8002d8e:	0018      	movs	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b004      	add	sp, #16
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	2204      	movs	r2, #4
 8002db4:	409a      	lsls	r2, r3
 8002db6:	0013      	movs	r3, r2
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d024      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x72>
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2204      	movs	r2, #4
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d020      	beq.n	8002e08 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	4013      	ands	r3, r2
 8002dd0:	d107      	bne.n	8002de2 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2104      	movs	r1, #4
 8002dde:	438a      	bics	r2, r1
 8002de0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dea:	2104      	movs	r1, #4
 8002dec:	4091      	lsls	r1, r2
 8002dee:	000a      	movs	r2, r1
 8002df0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d100      	bne.n	8002dfc <HAL_DMA_IRQHandler+0x66>
 8002dfa:	e06a      	b.n	8002ed2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	0010      	movs	r0, r2
 8002e04:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002e06:	e064      	b.n	8002ed2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	409a      	lsls	r2, r3
 8002e10:	0013      	movs	r3, r2
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4013      	ands	r3, r2
 8002e16:	d02b      	beq.n	8002e70 <HAL_DMA_IRQHandler+0xda>
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d027      	beq.n	8002e70 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2220      	movs	r2, #32
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d10b      	bne.n	8002e44 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	210a      	movs	r1, #10
 8002e38:	438a      	bics	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2221      	movs	r2, #33	; 0x21
 8002e40:	2101      	movs	r1, #1
 8002e42:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4c:	2102      	movs	r1, #2
 8002e4e:	4091      	lsls	r1, r2
 8002e50:	000a      	movs	r2, r1
 8002e52:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2220      	movs	r2, #32
 8002e58:	2100      	movs	r1, #0
 8002e5a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d036      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	0010      	movs	r0, r2
 8002e6c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002e6e:	e030      	b.n	8002ed2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	2208      	movs	r2, #8
 8002e76:	409a      	lsls	r2, r3
 8002e78:	0013      	movs	r3, r2
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d028      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0x13c>
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2208      	movs	r2, #8
 8002e84:	4013      	ands	r3, r2
 8002e86:	d024      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	210e      	movs	r1, #14
 8002e94:	438a      	bics	r2, r1
 8002e96:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	4091      	lsls	r1, r2
 8002ea4:	000a      	movs	r2, r1
 8002ea6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2221      	movs	r2, #33	; 0x21
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	2100      	movs	r1, #0
 8002ebc:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	0010      	movs	r0, r2
 8002ece:	4798      	blx	r3
    }
   }
}  
 8002ed0:	e7ff      	b.n	8002ed2 <HAL_DMA_IRQHandler+0x13c>
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b004      	add	sp, #16
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b084      	sub	sp, #16
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	60f8      	str	r0, [r7, #12]
 8002ee2:	60b9      	str	r1, [r7, #8]
 8002ee4:	607a      	str	r2, [r7, #4]
 8002ee6:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	4091      	lsls	r1, r2
 8002ef4:	000a      	movs	r2, r1
 8002ef6:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b10      	cmp	r3, #16
 8002f06:	d108      	bne.n	8002f1a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f18:	e007      	b.n	8002f2a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	60da      	str	r2, [r3, #12]
}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b004      	add	sp, #16
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a08      	ldr	r2, [pc, #32]	; (8002f64 <DMA_CalcBaseAndBitshift+0x30>)
 8002f42:	4694      	mov	ip, r2
 8002f44:	4463      	add	r3, ip
 8002f46:	2114      	movs	r1, #20
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f7fd f8ef 	bl	800012c <__udivsi3>
 8002f4e:	0003      	movs	r3, r0
 8002f50:	009a      	lsls	r2, r3, #2
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a03      	ldr	r2, [pc, #12]	; (8002f68 <DMA_CalcBaseAndBitshift+0x34>)
 8002f5a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002f5c:	46c0      	nop			; (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b002      	add	sp, #8
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	bffdfff8 	.word	0xbffdfff8
 8002f68:	40020000 	.word	0x40020000

08002f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f7a:	e155      	b.n	8003228 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2101      	movs	r1, #1
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4091      	lsls	r1, r2
 8002f86:	000a      	movs	r2, r1
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d100      	bne.n	8002f94 <HAL_GPIO_Init+0x28>
 8002f92:	e146      	b.n	8003222 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2203      	movs	r2, #3
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d005      	beq.n	8002fac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2203      	movs	r2, #3
 8002fa6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d130      	bne.n	800300e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	0013      	movs	r3, r2
 8002fbc:	43da      	mvns	r2, r3
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	409a      	lsls	r2, r3
 8002fce:	0013      	movs	r3, r2
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	409a      	lsls	r2, r3
 8002fe8:	0013      	movs	r3, r2
 8002fea:	43da      	mvns	r2, r3
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	091b      	lsrs	r3, r3, #4
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	409a      	lsls	r2, r3
 8003000:	0013      	movs	r3, r2
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2203      	movs	r2, #3
 8003014:	4013      	ands	r3, r2
 8003016:	2b03      	cmp	r3, #3
 8003018:	d017      	beq.n	800304a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	2203      	movs	r2, #3
 8003026:	409a      	lsls	r2, r3
 8003028:	0013      	movs	r3, r2
 800302a:	43da      	mvns	r2, r3
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	4013      	ands	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	409a      	lsls	r2, r3
 800303c:	0013      	movs	r3, r2
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2203      	movs	r2, #3
 8003050:	4013      	ands	r3, r2
 8003052:	2b02      	cmp	r3, #2
 8003054:	d123      	bne.n	800309e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	08da      	lsrs	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3208      	adds	r2, #8
 800305e:	0092      	lsls	r2, r2, #2
 8003060:	58d3      	ldr	r3, [r2, r3]
 8003062:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	2207      	movs	r2, #7
 8003068:	4013      	ands	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	220f      	movs	r2, #15
 800306e:	409a      	lsls	r2, r3
 8003070:	0013      	movs	r3, r2
 8003072:	43da      	mvns	r2, r3
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4013      	ands	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2107      	movs	r1, #7
 8003082:	400b      	ands	r3, r1
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	409a      	lsls	r2, r3
 8003088:	0013      	movs	r3, r2
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	08da      	lsrs	r2, r3, #3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3208      	adds	r2, #8
 8003098:	0092      	lsls	r2, r2, #2
 800309a:	6939      	ldr	r1, [r7, #16]
 800309c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	2203      	movs	r2, #3
 80030aa:	409a      	lsls	r2, r3
 80030ac:	0013      	movs	r3, r2
 80030ae:	43da      	mvns	r2, r3
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2203      	movs	r2, #3
 80030bc:	401a      	ands	r2, r3
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	409a      	lsls	r2, r3
 80030c4:	0013      	movs	r3, r2
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	23c0      	movs	r3, #192	; 0xc0
 80030d8:	029b      	lsls	r3, r3, #10
 80030da:	4013      	ands	r3, r2
 80030dc:	d100      	bne.n	80030e0 <HAL_GPIO_Init+0x174>
 80030de:	e0a0      	b.n	8003222 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e0:	4b57      	ldr	r3, [pc, #348]	; (8003240 <HAL_GPIO_Init+0x2d4>)
 80030e2:	699a      	ldr	r2, [r3, #24]
 80030e4:	4b56      	ldr	r3, [pc, #344]	; (8003240 <HAL_GPIO_Init+0x2d4>)
 80030e6:	2101      	movs	r1, #1
 80030e8:	430a      	orrs	r2, r1
 80030ea:	619a      	str	r2, [r3, #24]
 80030ec:	4b54      	ldr	r3, [pc, #336]	; (8003240 <HAL_GPIO_Init+0x2d4>)
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	2201      	movs	r2, #1
 80030f2:	4013      	ands	r3, r2
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030f8:	4a52      	ldr	r2, [pc, #328]	; (8003244 <HAL_GPIO_Init+0x2d8>)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	089b      	lsrs	r3, r3, #2
 80030fe:	3302      	adds	r3, #2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	589b      	ldr	r3, [r3, r2]
 8003104:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2203      	movs	r2, #3
 800310a:	4013      	ands	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	220f      	movs	r2, #15
 8003110:	409a      	lsls	r2, r3
 8003112:	0013      	movs	r3, r2
 8003114:	43da      	mvns	r2, r3
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	4013      	ands	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	2390      	movs	r3, #144	; 0x90
 8003120:	05db      	lsls	r3, r3, #23
 8003122:	429a      	cmp	r2, r3
 8003124:	d019      	beq.n	800315a <HAL_GPIO_Init+0x1ee>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a47      	ldr	r2, [pc, #284]	; (8003248 <HAL_GPIO_Init+0x2dc>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d013      	beq.n	8003156 <HAL_GPIO_Init+0x1ea>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a46      	ldr	r2, [pc, #280]	; (800324c <HAL_GPIO_Init+0x2e0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00d      	beq.n	8003152 <HAL_GPIO_Init+0x1e6>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a45      	ldr	r2, [pc, #276]	; (8003250 <HAL_GPIO_Init+0x2e4>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d007      	beq.n	800314e <HAL_GPIO_Init+0x1e2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a44      	ldr	r2, [pc, #272]	; (8003254 <HAL_GPIO_Init+0x2e8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d101      	bne.n	800314a <HAL_GPIO_Init+0x1de>
 8003146:	2304      	movs	r3, #4
 8003148:	e008      	b.n	800315c <HAL_GPIO_Init+0x1f0>
 800314a:	2305      	movs	r3, #5
 800314c:	e006      	b.n	800315c <HAL_GPIO_Init+0x1f0>
 800314e:	2303      	movs	r3, #3
 8003150:	e004      	b.n	800315c <HAL_GPIO_Init+0x1f0>
 8003152:	2302      	movs	r3, #2
 8003154:	e002      	b.n	800315c <HAL_GPIO_Init+0x1f0>
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <HAL_GPIO_Init+0x1f0>
 800315a:	2300      	movs	r3, #0
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	2103      	movs	r1, #3
 8003160:	400a      	ands	r2, r1
 8003162:	0092      	lsls	r2, r2, #2
 8003164:	4093      	lsls	r3, r2
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800316c:	4935      	ldr	r1, [pc, #212]	; (8003244 <HAL_GPIO_Init+0x2d8>)
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	089b      	lsrs	r3, r3, #2
 8003172:	3302      	adds	r3, #2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800317a:	4b37      	ldr	r3, [pc, #220]	; (8003258 <HAL_GPIO_Init+0x2ec>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	43da      	mvns	r2, r3
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4013      	ands	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	2380      	movs	r3, #128	; 0x80
 8003190:	025b      	lsls	r3, r3, #9
 8003192:	4013      	ands	r3, r2
 8003194:	d003      	beq.n	800319e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800319e:	4b2e      	ldr	r3, [pc, #184]	; (8003258 <HAL_GPIO_Init+0x2ec>)
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80031a4:	4b2c      	ldr	r3, [pc, #176]	; (8003258 <HAL_GPIO_Init+0x2ec>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	43da      	mvns	r2, r3
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	4013      	ands	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	2380      	movs	r3, #128	; 0x80
 80031ba:	029b      	lsls	r3, r3, #10
 80031bc:	4013      	ands	r3, r2
 80031be:	d003      	beq.n	80031c8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80031c8:	4b23      	ldr	r3, [pc, #140]	; (8003258 <HAL_GPIO_Init+0x2ec>)
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ce:	4b22      	ldr	r3, [pc, #136]	; (8003258 <HAL_GPIO_Init+0x2ec>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	43da      	mvns	r2, r3
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4013      	ands	r3, r2
 80031dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	2380      	movs	r3, #128	; 0x80
 80031e4:	035b      	lsls	r3, r3, #13
 80031e6:	4013      	ands	r3, r2
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80031f2:	4b19      	ldr	r3, [pc, #100]	; (8003258 <HAL_GPIO_Init+0x2ec>)
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80031f8:	4b17      	ldr	r3, [pc, #92]	; (8003258 <HAL_GPIO_Init+0x2ec>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	43da      	mvns	r2, r3
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4013      	ands	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	2380      	movs	r3, #128	; 0x80
 800320e:	039b      	lsls	r3, r3, #14
 8003210:	4013      	ands	r3, r2
 8003212:	d003      	beq.n	800321c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4313      	orrs	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800321c:	4b0e      	ldr	r3, [pc, #56]	; (8003258 <HAL_GPIO_Init+0x2ec>)
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	3301      	adds	r3, #1
 8003226:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	40da      	lsrs	r2, r3
 8003230:	1e13      	subs	r3, r2, #0
 8003232:	d000      	beq.n	8003236 <HAL_GPIO_Init+0x2ca>
 8003234:	e6a2      	b.n	8002f7c <HAL_GPIO_Init+0x10>
  } 
}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	b006      	add	sp, #24
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40021000 	.word	0x40021000
 8003244:	40010000 	.word	0x40010000
 8003248:	48000400 	.word	0x48000400
 800324c:	48000800 	.word	0x48000800
 8003250:	48000c00 	.word	0x48000c00
 8003254:	48001000 	.word	0x48001000
 8003258:	40010400 	.word	0x40010400

0800325c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	000a      	movs	r2, r1
 8003266:	1cbb      	adds	r3, r7, #2
 8003268:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	1cba      	adds	r2, r7, #2
 8003270:	8812      	ldrh	r2, [r2, #0]
 8003272:	4013      	ands	r3, r2
 8003274:	d004      	beq.n	8003280 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003276:	230f      	movs	r3, #15
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	2201      	movs	r2, #1
 800327c:	701a      	strb	r2, [r3, #0]
 800327e:	e003      	b.n	8003288 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003280:	230f      	movs	r3, #15
 8003282:	18fb      	adds	r3, r7, r3
 8003284:	2200      	movs	r2, #0
 8003286:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003288:	230f      	movs	r3, #15
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	781b      	ldrb	r3, [r3, #0]
  }
 800328e:	0018      	movs	r0, r3
 8003290:	46bd      	mov	sp, r7
 8003292:	b004      	add	sp, #16
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	0008      	movs	r0, r1
 80032a0:	0011      	movs	r1, r2
 80032a2:	1cbb      	adds	r3, r7, #2
 80032a4:	1c02      	adds	r2, r0, #0
 80032a6:	801a      	strh	r2, [r3, #0]
 80032a8:	1c7b      	adds	r3, r7, #1
 80032aa:	1c0a      	adds	r2, r1, #0
 80032ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032ae:	1c7b      	adds	r3, r7, #1
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d004      	beq.n	80032c0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032b6:	1cbb      	adds	r3, r7, #2
 80032b8:	881a      	ldrh	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032be:	e003      	b.n	80032c8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032c0:	1cbb      	adds	r3, r7, #2
 80032c2:	881a      	ldrh	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032c8:	46c0      	nop			; (mov r8, r8)
 80032ca:	46bd      	mov	sp, r7
 80032cc:	b002      	add	sp, #8
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	000a      	movs	r2, r1
 80032da:	1cbb      	adds	r3, r7, #2
 80032dc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032e4:	1cbb      	adds	r3, r7, #2
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	4013      	ands	r3, r2
 80032ec:	041a      	lsls	r2, r3, #16
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	43db      	mvns	r3, r3
 80032f2:	1cb9      	adds	r1, r7, #2
 80032f4:	8809      	ldrh	r1, [r1, #0]
 80032f6:	400b      	ands	r3, r1
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	619a      	str	r2, [r3, #24]
}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	46bd      	mov	sp, r7
 8003302:	b004      	add	sp, #16
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	0002      	movs	r2, r0
 8003310:	1dbb      	adds	r3, r7, #6
 8003312:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003314:	4b09      	ldr	r3, [pc, #36]	; (800333c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	1dba      	adds	r2, r7, #6
 800331a:	8812      	ldrh	r2, [r2, #0]
 800331c:	4013      	ands	r3, r2
 800331e:	d008      	beq.n	8003332 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8003322:	1dba      	adds	r2, r7, #6
 8003324:	8812      	ldrh	r2, [r2, #0]
 8003326:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003328:	1dbb      	adds	r3, r7, #6
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	0018      	movs	r0, r3
 800332e:	f7fd f8e5 	bl	80004fc <HAL_GPIO_EXTI_Callback>
  }
}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	46bd      	mov	sp, r7
 8003336:	b002      	add	sp, #8
 8003338:	bd80      	pop	{r7, pc}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	40010400 	.word	0x40010400

08003340 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003342:	b08b      	sub	sp, #44	; 0x2c
 8003344:	af06      	add	r7, sp, #24
 8003346:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e0ff      	b.n	8003552 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a81      	ldr	r2, [pc, #516]	; (800355c <HAL_PCD_Init+0x21c>)
 8003356:	5c9b      	ldrb	r3, [r3, r2]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d108      	bne.n	8003370 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	23aa      	movs	r3, #170	; 0xaa
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	2100      	movs	r1, #0
 8003366:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	0018      	movs	r0, r3
 800336c:	f008 fb9e 	bl	800baac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a7a      	ldr	r2, [pc, #488]	; (800355c <HAL_PCD_Init+0x21c>)
 8003374:	2103      	movs	r1, #3
 8003376:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	0018      	movs	r0, r3
 800337e:	f004 fc3d 	bl	8007bfc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003382:	230f      	movs	r3, #15
 8003384:	18fb      	adds	r3, r7, r3
 8003386:	2200      	movs	r2, #0
 8003388:	701a      	strb	r2, [r3, #0]
 800338a:	e058      	b.n	800343e <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800338c:	200f      	movs	r0, #15
 800338e:	183b      	adds	r3, r7, r0
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	0013      	movs	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	189b      	adds	r3, r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	18cb      	adds	r3, r1, r3
 80033a0:	3301      	adds	r3, #1
 80033a2:	2201      	movs	r2, #1
 80033a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033a6:	183b      	adds	r3, r7, r0
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	0013      	movs	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	189b      	adds	r3, r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	183a      	adds	r2, r7, r0
 80033b8:	7812      	ldrb	r2, [r2, #0]
 80033ba:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033bc:	0004      	movs	r4, r0
 80033be:	183b      	adds	r3, r7, r0
 80033c0:	781a      	ldrb	r2, [r3, #0]
 80033c2:	193b      	adds	r3, r7, r4
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	b298      	uxth	r0, r3
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	0013      	movs	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	189b      	adds	r3, r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	18cb      	adds	r3, r1, r3
 80033d4:	3336      	adds	r3, #54	; 0x36
 80033d6:	1c02      	adds	r2, r0, #0
 80033d8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033da:	193b      	adds	r3, r7, r4
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	0013      	movs	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	189b      	adds	r3, r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	18cb      	adds	r3, r1, r3
 80033ec:	3303      	adds	r3, #3
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033f2:	193b      	adds	r3, r7, r4
 80033f4:	781a      	ldrb	r2, [r3, #0]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	0013      	movs	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	189b      	adds	r3, r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	18cb      	adds	r3, r1, r3
 8003402:	3338      	adds	r3, #56	; 0x38
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003408:	193b      	adds	r3, r7, r4
 800340a:	781a      	ldrb	r2, [r3, #0]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	0013      	movs	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	189b      	adds	r3, r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	18cb      	adds	r3, r1, r3
 8003418:	333c      	adds	r3, #60	; 0x3c
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800341e:	193b      	adds	r3, r7, r4
 8003420:	781a      	ldrb	r2, [r3, #0]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	0013      	movs	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	189b      	adds	r3, r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	18cb      	adds	r3, r1, r3
 800342e:	3340      	adds	r3, #64	; 0x40
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003434:	193b      	adds	r3, r7, r4
 8003436:	781a      	ldrb	r2, [r3, #0]
 8003438:	193b      	adds	r3, r7, r4
 800343a:	3201      	adds	r2, #1
 800343c:	701a      	strb	r2, [r3, #0]
 800343e:	210f      	movs	r1, #15
 8003440:	187b      	adds	r3, r7, r1
 8003442:	781a      	ldrb	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	429a      	cmp	r2, r3
 800344a:	d39f      	bcc.n	800338c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800344c:	187b      	adds	r3, r7, r1
 800344e:	2200      	movs	r2, #0
 8003450:	701a      	strb	r2, [r3, #0]
 8003452:	e056      	b.n	8003502 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003454:	240f      	movs	r4, #15
 8003456:	193b      	adds	r3, r7, r4
 8003458:	781a      	ldrb	r2, [r3, #0]
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	236a      	movs	r3, #106	; 0x6a
 800345e:	33ff      	adds	r3, #255	; 0xff
 8003460:	0019      	movs	r1, r3
 8003462:	0013      	movs	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	189b      	adds	r3, r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	18c3      	adds	r3, r0, r3
 800346c:	185b      	adds	r3, r3, r1
 800346e:	2200      	movs	r2, #0
 8003470:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003472:	193b      	adds	r3, r7, r4
 8003474:	781a      	ldrb	r2, [r3, #0]
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	23b4      	movs	r3, #180	; 0xb4
 800347a:	0059      	lsls	r1, r3, #1
 800347c:	0013      	movs	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	189b      	adds	r3, r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	18c3      	adds	r3, r0, r3
 8003486:	185b      	adds	r3, r3, r1
 8003488:	193a      	adds	r2, r7, r4
 800348a:	7812      	ldrb	r2, [r2, #0]
 800348c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800348e:	193b      	adds	r3, r7, r4
 8003490:	781a      	ldrb	r2, [r3, #0]
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	236c      	movs	r3, #108	; 0x6c
 8003496:	33ff      	adds	r3, #255	; 0xff
 8003498:	0019      	movs	r1, r3
 800349a:	0013      	movs	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	189b      	adds	r3, r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	18c3      	adds	r3, r0, r3
 80034a4:	185b      	adds	r3, r3, r1
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034aa:	193b      	adds	r3, r7, r4
 80034ac:	781a      	ldrb	r2, [r3, #0]
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	23bc      	movs	r3, #188	; 0xbc
 80034b2:	0059      	lsls	r1, r3, #1
 80034b4:	0013      	movs	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	189b      	adds	r3, r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	18c3      	adds	r3, r0, r3
 80034be:	185b      	adds	r3, r3, r1
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034c4:	193b      	adds	r3, r7, r4
 80034c6:	781a      	ldrb	r2, [r3, #0]
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	23be      	movs	r3, #190	; 0xbe
 80034cc:	0059      	lsls	r1, r3, #1
 80034ce:	0013      	movs	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	189b      	adds	r3, r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	18c3      	adds	r3, r0, r3
 80034d8:	185b      	adds	r3, r3, r1
 80034da:	2200      	movs	r2, #0
 80034dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034de:	193b      	adds	r3, r7, r4
 80034e0:	781a      	ldrb	r2, [r3, #0]
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	23c0      	movs	r3, #192	; 0xc0
 80034e6:	0059      	lsls	r1, r3, #1
 80034e8:	0013      	movs	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	189b      	adds	r3, r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	18c3      	adds	r3, r0, r3
 80034f2:	185b      	adds	r3, r3, r1
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034f8:	193b      	adds	r3, r7, r4
 80034fa:	781a      	ldrb	r2, [r3, #0]
 80034fc:	193b      	adds	r3, r7, r4
 80034fe:	3201      	adds	r2, #1
 8003500:	701a      	strb	r2, [r3, #0]
 8003502:	230f      	movs	r3, #15
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	781a      	ldrb	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	429a      	cmp	r2, r3
 800350e:	d3a1      	bcc.n	8003454 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6818      	ldr	r0, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	466a      	mov	r2, sp
 8003518:	0011      	movs	r1, r2
 800351a:	001a      	movs	r2, r3
 800351c:	3210      	adds	r2, #16
 800351e:	ca70      	ldmia	r2!, {r4, r5, r6}
 8003520:	c170      	stmia	r1!, {r4, r5, r6}
 8003522:	ca30      	ldmia	r2!, {r4, r5}
 8003524:	c130      	stmia	r1!, {r4, r5}
 8003526:	6859      	ldr	r1, [r3, #4]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	f004 fb80 	bl	8007c30 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2224      	movs	r2, #36	; 0x24
 8003534:	2100      	movs	r1, #0
 8003536:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a08      	ldr	r2, [pc, #32]	; (800355c <HAL_PCD_Init+0x21c>)
 800353c:	2101      	movs	r1, #1
 800353e:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d103      	bne.n	8003550 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	0018      	movs	r0, r3
 800354c:	f001 fd34 	bl	8004fb8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	0018      	movs	r0, r3
 8003554:	46bd      	mov	sp, r7
 8003556:	b005      	add	sp, #20
 8003558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	000002a9 	.word	0x000002a9

08003560 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	23aa      	movs	r3, #170	; 0xaa
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	5cd3      	ldrb	r3, [r2, r3]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_PCD_Start+0x18>
 8003574:	2302      	movs	r3, #2
 8003576:	e014      	b.n	80035a2 <HAL_PCD_Start+0x42>
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	23aa      	movs	r3, #170	; 0xaa
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	2101      	movs	r1, #1
 8003580:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	0018      	movs	r0, r3
 8003588:	f004 fb22 	bl	8007bd0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	0018      	movs	r0, r3
 8003592:	f006 fa7d 	bl	8009a90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	23aa      	movs	r3, #170	; 0xaa
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	2100      	movs	r1, #0
 800359e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	0018      	movs	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b002      	add	sp, #8
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	0018      	movs	r0, r3
 80035ba:	f006 fa7f 	bl	8009abc <USB_ReadInterrupts>
 80035be:	0002      	movs	r2, r0
 80035c0:	2380      	movs	r3, #128	; 0x80
 80035c2:	021b      	lsls	r3, r3, #8
 80035c4:	401a      	ands	r2, r3
 80035c6:	2380      	movs	r3, #128	; 0x80
 80035c8:	021b      	lsls	r3, r3, #8
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d103      	bne.n	80035d6 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	0018      	movs	r0, r3
 80035d2:	f000 fbbb 	bl	8003d4c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	0018      	movs	r0, r3
 80035dc:	f006 fa6e 	bl	8009abc <USB_ReadInterrupts>
 80035e0:	0002      	movs	r2, r0
 80035e2:	2380      	movs	r3, #128	; 0x80
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	401a      	ands	r2, r3
 80035e8:	2380      	movs	r3, #128	; 0x80
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d114      	bne.n	800361a <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2244      	movs	r2, #68	; 0x44
 80035f6:	5a9b      	ldrh	r3, [r3, r2]
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	49a2      	ldr	r1, [pc, #648]	; (8003888 <HAL_PCD_IRQHandler+0x2dc>)
 8003600:	400a      	ands	r2, r1
 8003602:	b291      	uxth	r1, r2
 8003604:	2244      	movs	r2, #68	; 0x44
 8003606:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	0018      	movs	r0, r3
 800360c:	f008 fad9 	bl	800bbc2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2100      	movs	r1, #0
 8003614:	0018      	movs	r0, r3
 8003616:	f000 f945 	bl	80038a4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	0018      	movs	r0, r3
 8003620:	f006 fa4c 	bl	8009abc <USB_ReadInterrupts>
 8003624:	0002      	movs	r2, r0
 8003626:	2380      	movs	r3, #128	; 0x80
 8003628:	01db      	lsls	r3, r3, #7
 800362a:	401a      	ands	r2, r3
 800362c:	2380      	movs	r3, #128	; 0x80
 800362e:	01db      	lsls	r3, r3, #7
 8003630:	429a      	cmp	r2, r3
 8003632:	d10b      	bne.n	800364c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2244      	movs	r2, #68	; 0x44
 800363a:	5a9b      	ldrh	r3, [r3, r2]
 800363c:	b29a      	uxth	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4992      	ldr	r1, [pc, #584]	; (800388c <HAL_PCD_IRQHandler+0x2e0>)
 8003644:	400a      	ands	r2, r1
 8003646:	b291      	uxth	r1, r2
 8003648:	2244      	movs	r2, #68	; 0x44
 800364a:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	0018      	movs	r0, r3
 8003652:	f006 fa33 	bl	8009abc <USB_ReadInterrupts>
 8003656:	0002      	movs	r2, r0
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	019b      	lsls	r3, r3, #6
 800365c:	401a      	ands	r2, r3
 800365e:	2380      	movs	r3, #128	; 0x80
 8003660:	019b      	lsls	r3, r3, #6
 8003662:	429a      	cmp	r2, r3
 8003664:	d10b      	bne.n	800367e <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2244      	movs	r2, #68	; 0x44
 800366c:	5a9b      	ldrh	r3, [r3, r2]
 800366e:	b29a      	uxth	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4986      	ldr	r1, [pc, #536]	; (8003890 <HAL_PCD_IRQHandler+0x2e4>)
 8003676:	400a      	ands	r2, r1
 8003678:	b291      	uxth	r1, r2
 800367a:	2244      	movs	r2, #68	; 0x44
 800367c:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	0018      	movs	r0, r3
 8003684:	f006 fa1a 	bl	8009abc <USB_ReadInterrupts>
 8003688:	0002      	movs	r2, r0
 800368a:	2380      	movs	r3, #128	; 0x80
 800368c:	015b      	lsls	r3, r3, #5
 800368e:	401a      	ands	r2, r3
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	015b      	lsls	r3, r3, #5
 8003694:	429a      	cmp	r2, r3
 8003696:	d137      	bne.n	8003708 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2240      	movs	r2, #64	; 0x40
 800369e:	5a9b      	ldrh	r3, [r3, r2]
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2104      	movs	r1, #4
 80036a8:	438a      	bics	r2, r1
 80036aa:	b291      	uxth	r1, r2
 80036ac:	2240      	movs	r2, #64	; 0x40
 80036ae:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2240      	movs	r2, #64	; 0x40
 80036b6:	5a9b      	ldrh	r3, [r3, r2]
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2108      	movs	r1, #8
 80036c0:	438a      	bics	r2, r1
 80036c2:	b291      	uxth	r1, r2
 80036c4:	2240      	movs	r2, #64	; 0x40
 80036c6:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	23b8      	movs	r3, #184	; 0xb8
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	5cd3      	ldrb	r3, [r2, r3]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d109      	bne.n	80036e8 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	23b8      	movs	r3, #184	; 0xb8
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	2100      	movs	r1, #0
 80036dc:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2100      	movs	r1, #0
 80036e2:	0018      	movs	r0, r3
 80036e4:	f001 fc92 	bl	800500c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f008 faaa 	bl	800bc44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2244      	movs	r2, #68	; 0x44
 80036f6:	5a9b      	ldrh	r3, [r3, r2]
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4965      	ldr	r1, [pc, #404]	; (8003894 <HAL_PCD_IRQHandler+0x2e8>)
 8003700:	400a      	ands	r2, r1
 8003702:	b291      	uxth	r1, r2
 8003704:	2244      	movs	r2, #68	; 0x44
 8003706:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	0018      	movs	r0, r3
 800370e:	f006 f9d5 	bl	8009abc <USB_ReadInterrupts>
 8003712:	0002      	movs	r2, r0
 8003714:	2380      	movs	r3, #128	; 0x80
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	401a      	ands	r2, r3
 800371a:	2380      	movs	r3, #128	; 0x80
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	429a      	cmp	r2, r3
 8003720:	d127      	bne.n	8003772 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2240      	movs	r2, #64	; 0x40
 8003728:	5a9b      	ldrh	r3, [r3, r2]
 800372a:	b29a      	uxth	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2108      	movs	r1, #8
 8003732:	430a      	orrs	r2, r1
 8003734:	b291      	uxth	r1, r2
 8003736:	2240      	movs	r2, #64	; 0x40
 8003738:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2244      	movs	r2, #68	; 0x44
 8003740:	5a9b      	ldrh	r3, [r3, r2]
 8003742:	b29a      	uxth	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4953      	ldr	r1, [pc, #332]	; (8003898 <HAL_PCD_IRQHandler+0x2ec>)
 800374a:	400a      	ands	r2, r1
 800374c:	b291      	uxth	r1, r2
 800374e:	2244      	movs	r2, #68	; 0x44
 8003750:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2240      	movs	r2, #64	; 0x40
 8003758:	5a9b      	ldrh	r3, [r3, r2]
 800375a:	b29a      	uxth	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2104      	movs	r1, #4
 8003762:	430a      	orrs	r2, r1
 8003764:	b291      	uxth	r1, r2
 8003766:	2240      	movs	r2, #64	; 0x40
 8003768:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	0018      	movs	r0, r3
 800376e:	f008 fa4d 	bl	800bc0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	0018      	movs	r0, r3
 8003778:	f006 f9a0 	bl	8009abc <USB_ReadInterrupts>
 800377c:	0003      	movs	r3, r0
 800377e:	2280      	movs	r2, #128	; 0x80
 8003780:	4013      	ands	r3, r2
 8003782:	2b80      	cmp	r3, #128	; 0x80
 8003784:	d145      	bne.n	8003812 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2244      	movs	r2, #68	; 0x44
 800378c:	5a9b      	ldrh	r3, [r3, r2]
 800378e:	b29a      	uxth	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2180      	movs	r1, #128	; 0x80
 8003796:	438a      	bics	r2, r1
 8003798:	b291      	uxth	r1, r2
 800379a:	2244      	movs	r2, #68	; 0x44
 800379c:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	23b8      	movs	r3, #184	; 0xb8
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	5cd3      	ldrb	r3, [r2, r3]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d12f      	bne.n	800380a <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2240      	movs	r2, #64	; 0x40
 80037b0:	5a9b      	ldrh	r3, [r3, r2]
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2104      	movs	r1, #4
 80037ba:	430a      	orrs	r2, r1
 80037bc:	b291      	uxth	r1, r2
 80037be:	2240      	movs	r2, #64	; 0x40
 80037c0:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2240      	movs	r2, #64	; 0x40
 80037c8:	5a9b      	ldrh	r3, [r3, r2]
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2108      	movs	r1, #8
 80037d2:	430a      	orrs	r2, r1
 80037d4:	b291      	uxth	r1, r2
 80037d6:	2240      	movs	r2, #64	; 0x40
 80037d8:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	23b8      	movs	r3, #184	; 0xb8
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	2101      	movs	r1, #1
 80037e2:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2254      	movs	r2, #84	; 0x54
 80037ea:	5a9b      	ldrh	r3, [r3, r2]
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	089b      	lsrs	r3, r3, #2
 80037f0:	223c      	movs	r2, #60	; 0x3c
 80037f2:	4013      	ands	r3, r2
 80037f4:	0019      	movs	r1, r3
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	23b9      	movs	r3, #185	; 0xb9
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2101      	movs	r1, #1
 8003802:	0018      	movs	r0, r3
 8003804:	f001 fc02 	bl	800500c <HAL_PCDEx_LPM_Callback>
 8003808:	e003      	b.n	8003812 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	0018      	movs	r0, r3
 800380e:	f008 f9fd 	bl	800bc0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	0018      	movs	r0, r3
 8003818:	f006 f950 	bl	8009abc <USB_ReadInterrupts>
 800381c:	0002      	movs	r2, r0
 800381e:	2380      	movs	r3, #128	; 0x80
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	401a      	ands	r2, r3
 8003824:	2380      	movs	r3, #128	; 0x80
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	429a      	cmp	r2, r3
 800382a:	d10f      	bne.n	800384c <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2244      	movs	r2, #68	; 0x44
 8003832:	5a9b      	ldrh	r3, [r3, r2]
 8003834:	b29a      	uxth	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4918      	ldr	r1, [pc, #96]	; (800389c <HAL_PCD_IRQHandler+0x2f0>)
 800383c:	400a      	ands	r2, r1
 800383e:	b291      	uxth	r1, r2
 8003840:	2244      	movs	r2, #68	; 0x44
 8003842:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	0018      	movs	r0, r3
 8003848:	f008 f9ac 	bl	800bba4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	0018      	movs	r0, r3
 8003852:	f006 f933 	bl	8009abc <USB_ReadInterrupts>
 8003856:	0002      	movs	r2, r0
 8003858:	2380      	movs	r3, #128	; 0x80
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	401a      	ands	r2, r3
 800385e:	2380      	movs	r3, #128	; 0x80
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	429a      	cmp	r2, r3
 8003864:	d10b      	bne.n	800387e <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2244      	movs	r2, #68	; 0x44
 800386c:	5a9b      	ldrh	r3, [r3, r2]
 800386e:	b29a      	uxth	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	490a      	ldr	r1, [pc, #40]	; (80038a0 <HAL_PCD_IRQHandler+0x2f4>)
 8003876:	400a      	ands	r2, r1
 8003878:	b291      	uxth	r1, r2
 800387a:	2244      	movs	r2, #68	; 0x44
 800387c:	5299      	strh	r1, [r3, r2]
  }
}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	46bd      	mov	sp, r7
 8003882:	b002      	add	sp, #8
 8003884:	bd80      	pop	{r7, pc}
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	fffffbff 	.word	0xfffffbff
 800388c:	ffffbfff 	.word	0xffffbfff
 8003890:	ffffdfff 	.word	0xffffdfff
 8003894:	ffffefff 	.word	0xffffefff
 8003898:	fffff7ff 	.word	0xfffff7ff
 800389c:	fffffdff 	.word	0xfffffdff
 80038a0:	fffffeff 	.word	0xfffffeff

080038a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	000a      	movs	r2, r1
 80038ae:	1cfb      	adds	r3, r7, #3
 80038b0:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	23aa      	movs	r3, #170	; 0xaa
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	5cd3      	ldrb	r3, [r2, r3]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <HAL_PCD_SetAddress+0x1e>
 80038be:	2302      	movs	r3, #2
 80038c0:	e017      	b.n	80038f2 <HAL_PCD_SetAddress+0x4e>
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	23aa      	movs	r3, #170	; 0xaa
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	2101      	movs	r1, #1
 80038ca:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	1cfa      	adds	r2, r7, #3
 80038d0:	2124      	movs	r1, #36	; 0x24
 80038d2:	7812      	ldrb	r2, [r2, #0]
 80038d4:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	1cfb      	adds	r3, r7, #3
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	0019      	movs	r1, r3
 80038e0:	0010      	movs	r0, r2
 80038e2:	f006 f8c1 	bl	8009a68 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	23aa      	movs	r3, #170	; 0xaa
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	2100      	movs	r1, #0
 80038ee:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	0018      	movs	r0, r3
 80038f4:	46bd      	mov	sp, r7
 80038f6:	b002      	add	sp, #8
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80038fa:	b590      	push	{r4, r7, lr}
 80038fc:	b085      	sub	sp, #20
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	000c      	movs	r4, r1
 8003904:	0010      	movs	r0, r2
 8003906:	0019      	movs	r1, r3
 8003908:	1cfb      	adds	r3, r7, #3
 800390a:	1c22      	adds	r2, r4, #0
 800390c:	701a      	strb	r2, [r3, #0]
 800390e:	003b      	movs	r3, r7
 8003910:	1c02      	adds	r2, r0, #0
 8003912:	801a      	strh	r2, [r3, #0]
 8003914:	1cbb      	adds	r3, r7, #2
 8003916:	1c0a      	adds	r2, r1, #0
 8003918:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800391a:	230b      	movs	r3, #11
 800391c:	18fb      	adds	r3, r7, r3
 800391e:	2200      	movs	r2, #0
 8003920:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003922:	1cfb      	adds	r3, r7, #3
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	b25b      	sxtb	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	da0f      	bge.n	800394c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800392c:	1cfb      	adds	r3, r7, #3
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2207      	movs	r2, #7
 8003932:	4013      	ands	r3, r2
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	0013      	movs	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	189b      	adds	r3, r3, r2
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	18d3      	adds	r3, r2, r3
 8003942:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2201      	movs	r2, #1
 8003948:	705a      	strb	r2, [r3, #1]
 800394a:	e00f      	b.n	800396c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800394c:	1cfb      	adds	r3, r7, #3
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2207      	movs	r2, #7
 8003952:	401a      	ands	r2, r3
 8003954:	0013      	movs	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	189b      	adds	r3, r3, r2
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	3369      	adds	r3, #105	; 0x69
 800395e:	33ff      	adds	r3, #255	; 0xff
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	18d3      	adds	r3, r2, r3
 8003964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800396c:	1cfb      	adds	r3, r7, #3
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2207      	movs	r2, #7
 8003972:	4013      	ands	r3, r2
 8003974:	b2da      	uxtb	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800397a:	003b      	movs	r3, r7
 800397c:	881a      	ldrh	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1cba      	adds	r2, r7, #2
 8003986:	7812      	ldrb	r2, [r2, #0]
 8003988:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	785b      	ldrb	r3, [r3, #1]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d004      	beq.n	800399c <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800399c:	1cbb      	adds	r3, r7, #2
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d102      	bne.n	80039aa <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	23aa      	movs	r3, #170	; 0xaa
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	5cd3      	ldrb	r3, [r2, r3]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_PCD_EP_Open+0xc0>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e013      	b.n	80039e2 <HAL_PCD_EP_Open+0xe8>
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	23aa      	movs	r3, #170	; 0xaa
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	2101      	movs	r1, #1
 80039c2:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	0011      	movs	r1, r2
 80039cc:	0018      	movs	r0, r3
 80039ce:	f004 f95b 	bl	8007c88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	23aa      	movs	r3, #170	; 0xaa
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	2100      	movs	r1, #0
 80039da:	54d1      	strb	r1, [r2, r3]

  return ret;
 80039dc:	230b      	movs	r3, #11
 80039de:	18fb      	adds	r3, r7, r3
 80039e0:	781b      	ldrb	r3, [r3, #0]
}
 80039e2:	0018      	movs	r0, r3
 80039e4:	46bd      	mov	sp, r7
 80039e6:	b005      	add	sp, #20
 80039e8:	bd90      	pop	{r4, r7, pc}

080039ea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	000a      	movs	r2, r1
 80039f4:	1cfb      	adds	r3, r7, #3
 80039f6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039f8:	1cfb      	adds	r3, r7, #3
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	b25b      	sxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	da0f      	bge.n	8003a22 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a02:	1cfb      	adds	r3, r7, #3
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	2207      	movs	r2, #7
 8003a08:	4013      	ands	r3, r2
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	0013      	movs	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	189b      	adds	r3, r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	18d3      	adds	r3, r2, r3
 8003a18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	705a      	strb	r2, [r3, #1]
 8003a20:	e00f      	b.n	8003a42 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a22:	1cfb      	adds	r3, r7, #3
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2207      	movs	r2, #7
 8003a28:	401a      	ands	r2, r3
 8003a2a:	0013      	movs	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	189b      	adds	r3, r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	3369      	adds	r3, #105	; 0x69
 8003a34:	33ff      	adds	r3, #255	; 0xff
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	18d3      	adds	r3, r2, r3
 8003a3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a42:	1cfb      	adds	r3, r7, #3
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2207      	movs	r2, #7
 8003a48:	4013      	ands	r3, r2
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	23aa      	movs	r3, #170	; 0xaa
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	5cd3      	ldrb	r3, [r2, r3]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_PCD_EP_Close+0x76>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e011      	b.n	8003a84 <HAL_PCD_EP_Close+0x9a>
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	23aa      	movs	r3, #170	; 0xaa
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	2101      	movs	r1, #1
 8003a68:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	0011      	movs	r1, r2
 8003a72:	0018      	movs	r0, r3
 8003a74:	f004 fc7c 	bl	8008370 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	23aa      	movs	r3, #170	; 0xaa
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	2100      	movs	r1, #0
 8003a80:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	0018      	movs	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b004      	add	sp, #16
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	607a      	str	r2, [r7, #4]
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	200b      	movs	r0, #11
 8003a9a:	183b      	adds	r3, r7, r0
 8003a9c:	1c0a      	adds	r2, r1, #0
 8003a9e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003aa0:	0001      	movs	r1, r0
 8003aa2:	187b      	adds	r3, r7, r1
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	2207      	movs	r2, #7
 8003aa8:	401a      	ands	r2, r3
 8003aaa:	0013      	movs	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	189b      	adds	r3, r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	3369      	adds	r3, #105	; 0x69
 8003ab4:	33ff      	adds	r3, #255	; 0xff
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	18d3      	adds	r3, r2, r3
 8003aba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2200      	movs	r2, #0
 8003acc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ad4:	187b      	adds	r3, r7, r1
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2207      	movs	r2, #7
 8003ada:	4013      	ands	r3, r2
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ae2:	187b      	adds	r3, r7, r1
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2207      	movs	r2, #7
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d107      	bne.n	8003afc <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	0011      	movs	r1, r2
 8003af4:	0018      	movs	r0, r3
 8003af6:	f004 fdfb 	bl	80086f0 <USB_EPStartXfer>
 8003afa:	e006      	b.n	8003b0a <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	0011      	movs	r1, r2
 8003b04:	0018      	movs	r0, r3
 8003b06:	f004 fdf3 	bl	80086f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b006      	add	sp, #24
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	000a      	movs	r2, r1
 8003b1e:	1cfb      	adds	r3, r7, #3
 8003b20:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b22:	1cfb      	adds	r3, r7, #3
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	2207      	movs	r2, #7
 8003b28:	401a      	ands	r2, r3
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	23c2      	movs	r3, #194	; 0xc2
 8003b2e:	0059      	lsls	r1, r3, #1
 8003b30:	0013      	movs	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	189b      	adds	r3, r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	18c3      	adds	r3, r0, r3
 8003b3a:	185b      	adds	r3, r3, r1
 8003b3c:	681b      	ldr	r3, [r3, #0]
}
 8003b3e:	0018      	movs	r0, r3
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b002      	add	sp, #8
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b086      	sub	sp, #24
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	60f8      	str	r0, [r7, #12]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
 8003b52:	200b      	movs	r0, #11
 8003b54:	183b      	adds	r3, r7, r0
 8003b56:	1c0a      	adds	r2, r1, #0
 8003b58:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b5a:	183b      	adds	r3, r7, r0
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2207      	movs	r2, #7
 8003b60:	4013      	ands	r3, r2
 8003b62:	1c5a      	adds	r2, r3, #1
 8003b64:	0013      	movs	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	189b      	adds	r3, r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	18d3      	adds	r3, r2, r3
 8003b70:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2224      	movs	r2, #36	; 0x24
 8003b82:	2101      	movs	r1, #1
 8003b84:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2201      	movs	r2, #1
 8003b96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b98:	183b      	adds	r3, r7, r0
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2207      	movs	r2, #7
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ba6:	183b      	adds	r3, r7, r0
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2207      	movs	r2, #7
 8003bac:	4013      	ands	r3, r2
 8003bae:	d107      	bne.n	8003bc0 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	0011      	movs	r1, r2
 8003bb8:	0018      	movs	r0, r3
 8003bba:	f004 fd99 	bl	80086f0 <USB_EPStartXfer>
 8003bbe:	e006      	b.n	8003bce <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	0011      	movs	r1, r2
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f004 fd91 	bl	80086f0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b006      	add	sp, #24
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	000a      	movs	r2, r1
 8003be2:	1cfb      	adds	r3, r7, #3
 8003be4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003be6:	1cfb      	adds	r3, r7, #3
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2207      	movs	r2, #7
 8003bec:	401a      	ands	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d901      	bls.n	8003bfa <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e046      	b.n	8003c88 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bfa:	1cfb      	adds	r3, r7, #3
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	b25b      	sxtb	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	da0f      	bge.n	8003c24 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c04:	1cfb      	adds	r3, r7, #3
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2207      	movs	r2, #7
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	0013      	movs	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	189b      	adds	r3, r3, r2
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	18d3      	adds	r3, r2, r3
 8003c1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	705a      	strb	r2, [r3, #1]
 8003c22:	e00d      	b.n	8003c40 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c24:	1cfb      	adds	r3, r7, #3
 8003c26:	781a      	ldrb	r2, [r3, #0]
 8003c28:	0013      	movs	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	189b      	adds	r3, r3, r2
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	3369      	adds	r3, #105	; 0x69
 8003c32:	33ff      	adds	r3, #255	; 0xff
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	18d3      	adds	r3, r2, r3
 8003c38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2201      	movs	r2, #1
 8003c44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c46:	1cfb      	adds	r3, r7, #3
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2207      	movs	r2, #7
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	23aa      	movs	r3, #170	; 0xaa
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	5cd3      	ldrb	r3, [r2, r3]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_PCD_EP_SetStall+0x8c>
 8003c60:	2302      	movs	r3, #2
 8003c62:	e011      	b.n	8003c88 <HAL_PCD_EP_SetStall+0xb0>
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	23aa      	movs	r3, #170	; 0xaa
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	0011      	movs	r1, r2
 8003c76:	0018      	movs	r0, r3
 8003c78:	f005 fdf4 	bl	8009864 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	23aa      	movs	r3, #170	; 0xaa
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	2100      	movs	r1, #0
 8003c84:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	0018      	movs	r0, r3
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b004      	add	sp, #16
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	000a      	movs	r2, r1
 8003c9a:	1cfb      	adds	r3, r7, #3
 8003c9c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c9e:	1cfb      	adds	r3, r7, #3
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	220f      	movs	r2, #15
 8003ca4:	401a      	ands	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d901      	bls.n	8003cb2 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e048      	b.n	8003d44 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cb2:	1cfb      	adds	r3, r7, #3
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	b25b      	sxtb	r3, r3
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	da0f      	bge.n	8003cdc <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cbc:	1cfb      	adds	r3, r7, #3
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2207      	movs	r2, #7
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	1c5a      	adds	r2, r3, #1
 8003cc6:	0013      	movs	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	189b      	adds	r3, r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	18d3      	adds	r3, r2, r3
 8003cd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	705a      	strb	r2, [r3, #1]
 8003cda:	e00f      	b.n	8003cfc <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cdc:	1cfb      	adds	r3, r7, #3
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2207      	movs	r2, #7
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	0013      	movs	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	189b      	adds	r3, r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	3369      	adds	r3, #105	; 0x69
 8003cee:	33ff      	adds	r3, #255	; 0xff
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	18d3      	adds	r3, r2, r3
 8003cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d02:	1cfb      	adds	r3, r7, #3
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2207      	movs	r2, #7
 8003d08:	4013      	ands	r3, r2
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	23aa      	movs	r3, #170	; 0xaa
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	5cd3      	ldrb	r3, [r2, r3]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <HAL_PCD_EP_ClrStall+0x90>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e011      	b.n	8003d44 <HAL_PCD_EP_ClrStall+0xb4>
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	23aa      	movs	r3, #170	; 0xaa
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	2101      	movs	r1, #1
 8003d28:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	0011      	movs	r1, r2
 8003d32:	0018      	movs	r0, r3
 8003d34:	f005 fde6 	bl	8009904 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	23aa      	movs	r3, #170	; 0xaa
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	2100      	movs	r1, #0
 8003d40:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	0018      	movs	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b004      	add	sp, #16
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003d4c:	b5b0      	push	{r4, r5, r7, lr}
 8003d4e:	b096      	sub	sp, #88	; 0x58
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003d54:	f000 fbd8 	bl	8004508 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	2056      	movs	r0, #86	; 0x56
 8003d5e:	183b      	adds	r3, r7, r0
 8003d60:	2144      	movs	r1, #68	; 0x44
 8003d62:	5a52      	ldrh	r2, [r2, r1]
 8003d64:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003d66:	183b      	adds	r3, r7, r0
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	2455      	movs	r4, #85	; 0x55
 8003d6e:	193b      	adds	r3, r7, r4
 8003d70:	210f      	movs	r1, #15
 8003d72:	400a      	ands	r2, r1
 8003d74:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8003d76:	193b      	adds	r3, r7, r4
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d000      	beq.n	8003d80 <PCD_EP_ISR_Handler+0x34>
 8003d7e:	e179      	b.n	8004074 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003d80:	183b      	adds	r3, r7, r0
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	2210      	movs	r2, #16
 8003d86:	4013      	ands	r3, r2
 8003d88:	d154      	bne.n	8003e34 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	200e      	movs	r0, #14
 8003d94:	183b      	adds	r3, r7, r0
 8003d96:	49af      	ldr	r1, [pc, #700]	; (8004054 <PCD_EP_ISR_Handler+0x308>)
 8003d98:	400a      	ands	r2, r1
 8003d9a:	801a      	strh	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	183a      	adds	r2, r7, r0
 8003da2:	8812      	ldrh	r2, [r2, #0]
 8003da4:	49ac      	ldr	r1, [pc, #688]	; (8004058 <PCD_EP_ISR_Handler+0x30c>)
 8003da6:	430a      	orrs	r2, r1
 8003da8:	b292      	uxth	r2, r2
 8003daa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3328      	adds	r3, #40	; 0x28
 8003db0:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2250      	movs	r2, #80	; 0x50
 8003db8:	5a9b      	ldrh	r3, [r3, r2]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	001a      	movs	r2, r3
 8003dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	18d2      	adds	r2, r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	18d3      	adds	r3, r2, r3
 8003dcc:	4aa3      	ldr	r2, [pc, #652]	; (800405c <PCD_EP_ISR_Handler+0x310>)
 8003dce:	4694      	mov	ip, r2
 8003dd0:	4463      	add	r3, ip
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	059b      	lsls	r3, r3, #22
 8003dd6:	0d9a      	lsrs	r2, r3, #22
 8003dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dda:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dde:	695a      	ldr	r2, [r3, #20]
 8003de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	18d2      	adds	r2, r2, r3
 8003de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003de8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2100      	movs	r1, #0
 8003dee:	0018      	movs	r0, r3
 8003df0:	f007 feba 	bl	800bb68 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2224      	movs	r2, #36	; 0x24
 8003df8:	5c9b      	ldrb	r3, [r3, r2]
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <PCD_EP_ISR_Handler+0xb8>
 8003e00:	f000 fb82 	bl	8004508 <PCD_EP_ISR_Handler+0x7bc>
 8003e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <PCD_EP_ISR_Handler+0xc4>
 8003e0c:	f000 fb7c 	bl	8004508 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2224      	movs	r2, #36	; 0x24
 8003e14:	5c9b      	ldrb	r3, [r3, r2]
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2280      	movs	r2, #128	; 0x80
 8003e1a:	4252      	negs	r2, r2
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	b291      	uxth	r1, r2
 8003e26:	224c      	movs	r2, #76	; 0x4c
 8003e28:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2224      	movs	r2, #36	; 0x24
 8003e2e:	2100      	movs	r1, #0
 8003e30:	5499      	strb	r1, [r3, r2]
 8003e32:	e369      	b.n	8004508 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3369      	adds	r3, #105	; 0x69
 8003e38:	33ff      	adds	r3, #255	; 0xff
 8003e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	2152      	movs	r1, #82	; 0x52
 8003e42:	187b      	adds	r3, r7, r1
 8003e44:	8812      	ldrh	r2, [r2, #0]
 8003e46:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003e48:	187b      	adds	r3, r7, r1
 8003e4a:	881a      	ldrh	r2, [r3, #0]
 8003e4c:	2380      	movs	r3, #128	; 0x80
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	4013      	ands	r3, r2
 8003e52:	d037      	beq.n	8003ec4 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2250      	movs	r2, #80	; 0x50
 8003e5a:	5a9b      	ldrh	r3, [r3, r2]
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	001a      	movs	r2, r3
 8003e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	18d2      	adds	r2, r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	18d3      	adds	r3, r2, r3
 8003e6e:	4a7c      	ldr	r2, [pc, #496]	; (8004060 <PCD_EP_ISR_Handler+0x314>)
 8003e70:	4694      	mov	ip, r2
 8003e72:	4463      	add	r3, ip
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	059b      	lsls	r3, r3, #22
 8003e78:	0d9a      	lsrs	r2, r3, #22
 8003e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e7c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6818      	ldr	r0, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	22ac      	movs	r2, #172	; 0xac
 8003e86:	0092      	lsls	r2, r2, #2
 8003e88:	1899      	adds	r1, r3, r2
 8003e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e8c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e90:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	f005 fe64 	bl	8009b60 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	2010      	movs	r0, #16
 8003ea2:	183b      	adds	r3, r7, r0
 8003ea4:	496f      	ldr	r1, [pc, #444]	; (8004064 <PCD_EP_ISR_Handler+0x318>)
 8003ea6:	400a      	ands	r2, r1
 8003ea8:	801a      	strh	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	183a      	adds	r2, r7, r0
 8003eb0:	8812      	ldrh	r2, [r2, #0]
 8003eb2:	2180      	movs	r1, #128	; 0x80
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	b292      	uxth	r2, r2
 8003eb8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f007 fe1d 	bl	800bafc <HAL_PCD_SetupStageCallback>
 8003ec2:	e321      	b.n	8004508 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003ec4:	2352      	movs	r3, #82	; 0x52
 8003ec6:	18fb      	adds	r3, r7, r3
 8003ec8:	2200      	movs	r2, #0
 8003eca:	5e9b      	ldrsh	r3, [r3, r2]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	db00      	blt.n	8003ed2 <PCD_EP_ISR_Handler+0x186>
 8003ed0:	e31a      	b.n	8004508 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	201e      	movs	r0, #30
 8003edc:	183b      	adds	r3, r7, r0
 8003ede:	4961      	ldr	r1, [pc, #388]	; (8004064 <PCD_EP_ISR_Handler+0x318>)
 8003ee0:	400a      	ands	r2, r1
 8003ee2:	801a      	strh	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	183a      	adds	r2, r7, r0
 8003eea:	8812      	ldrh	r2, [r2, #0]
 8003eec:	2180      	movs	r1, #128	; 0x80
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	b292      	uxth	r2, r2
 8003ef2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2250      	movs	r2, #80	; 0x50
 8003efa:	5a9b      	ldrh	r3, [r3, r2]
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	001a      	movs	r2, r3
 8003f00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	18d2      	adds	r2, r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	18d3      	adds	r3, r2, r3
 8003f0e:	4a54      	ldr	r2, [pc, #336]	; (8004060 <PCD_EP_ISR_Handler+0x314>)
 8003f10:	4694      	mov	ip, r2
 8003f12:	4463      	add	r3, ip
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	059b      	lsls	r3, r3, #22
 8003f18:	0d9a      	lsrs	r2, r3, #22
 8003f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f1c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d01a      	beq.n	8003f5c <PCD_EP_ISR_Handler+0x210>
 8003f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d016      	beq.n	8003f5c <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f34:	6959      	ldr	r1, [r3, #20]
 8003f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f38:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f3c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	f005 fe0e 	bl	8009b60 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f46:	695a      	ldr	r2, [r3, #20]
 8003f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	18d2      	adds	r2, r2, r3
 8003f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f50:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2100      	movs	r1, #0
 8003f56:	0018      	movs	r0, r3
 8003f58:	f007 fde5 	bl	800bb26 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	001a      	movs	r2, r3
 8003f66:	2380      	movs	r3, #128	; 0x80
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	d000      	beq.n	8003f70 <PCD_EP_ISR_Handler+0x224>
 8003f6e:	e2cb      	b.n	8004508 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2250      	movs	r2, #80	; 0x50
 8003f7c:	5a9b      	ldrh	r3, [r3, r2]
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	001a      	movs	r2, r3
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	189b      	adds	r3, r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	4a35      	ldr	r2, [pc, #212]	; (8004060 <PCD_EP_ISR_Handler+0x314>)
 8003f8c:	4694      	mov	ip, r2
 8003f8e:	4463      	add	r3, ip
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d110      	bne.n	8003fbc <PCD_EP_ISR_Handler+0x270>
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	4a31      	ldr	r2, [pc, #196]	; (8004068 <PCD_EP_ISR_Handler+0x31c>)
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	801a      	strh	r2, [r3, #0]
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	4a29      	ldr	r2, [pc, #164]	; (8004058 <PCD_EP_ISR_Handler+0x30c>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	801a      	strh	r2, [r3, #0]
 8003fba:	e02b      	b.n	8004014 <PCD_EP_ISR_Handler+0x2c8>
 8003fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	2b3e      	cmp	r3, #62	; 0x3e
 8003fc2:	d812      	bhi.n	8003fea <PCD_EP_ISR_Handler+0x29e>
 8003fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	085b      	lsrs	r3, r3, #1
 8003fca:	647b      	str	r3, [r7, #68]	; 0x44
 8003fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d002      	beq.n	8003fdc <PCD_EP_ISR_Handler+0x290>
 8003fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fd8:	3301      	adds	r3, #1
 8003fda:	647b      	str	r3, [r7, #68]	; 0x44
 8003fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	029b      	lsls	r3, r3, #10
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	801a      	strh	r2, [r3, #0]
 8003fe8:	e014      	b.n	8004014 <PCD_EP_ISR_Handler+0x2c8>
 8003fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	647b      	str	r3, [r7, #68]	; 0x44
 8003ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	221f      	movs	r2, #31
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d102      	bne.n	8004002 <PCD_EP_ISR_Handler+0x2b6>
 8003ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ffe:	3b01      	subs	r3, #1
 8004000:	647b      	str	r3, [r7, #68]	; 0x44
 8004002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004004:	b29b      	uxth	r3, r3
 8004006:	029b      	lsls	r3, r3, #10
 8004008:	b29b      	uxth	r3, r3
 800400a:	4a13      	ldr	r2, [pc, #76]	; (8004058 <PCD_EP_ISR_Handler+0x30c>)
 800400c:	4313      	orrs	r3, r2
 800400e:	b29a      	uxth	r2, r3
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	b29a      	uxth	r2, r3
 800401c:	2012      	movs	r0, #18
 800401e:	183b      	adds	r3, r7, r0
 8004020:	4912      	ldr	r1, [pc, #72]	; (800406c <PCD_EP_ISR_Handler+0x320>)
 8004022:	400a      	ands	r2, r1
 8004024:	801a      	strh	r2, [r3, #0]
 8004026:	183b      	adds	r3, r7, r0
 8004028:	183a      	adds	r2, r7, r0
 800402a:	8812      	ldrh	r2, [r2, #0]
 800402c:	2180      	movs	r1, #128	; 0x80
 800402e:	0149      	lsls	r1, r1, #5
 8004030:	404a      	eors	r2, r1
 8004032:	801a      	strh	r2, [r3, #0]
 8004034:	183b      	adds	r3, r7, r0
 8004036:	183a      	adds	r2, r7, r0
 8004038:	8812      	ldrh	r2, [r2, #0]
 800403a:	2180      	movs	r1, #128	; 0x80
 800403c:	0189      	lsls	r1, r1, #6
 800403e:	404a      	eors	r2, r1
 8004040:	801a      	strh	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	183a      	adds	r2, r7, r0
 8004048:	8812      	ldrh	r2, [r2, #0]
 800404a:	4909      	ldr	r1, [pc, #36]	; (8004070 <PCD_EP_ISR_Handler+0x324>)
 800404c:	430a      	orrs	r2, r1
 800404e:	b292      	uxth	r2, r2
 8004050:	801a      	strh	r2, [r3, #0]
 8004052:	e259      	b.n	8004508 <PCD_EP_ISR_Handler+0x7bc>
 8004054:	ffff8f0f 	.word	0xffff8f0f
 8004058:	ffff8000 	.word	0xffff8000
 800405c:	00000402 	.word	0x00000402
 8004060:	00000406 	.word	0x00000406
 8004064:	00000f8f 	.word	0x00000f8f
 8004068:	ffff83ff 	.word	0xffff83ff
 800406c:	ffffbf8f 	.word	0xffffbf8f
 8004070:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	001a      	movs	r2, r3
 800407a:	2055      	movs	r0, #85	; 0x55
 800407c:	183b      	adds	r3, r7, r0
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	18d2      	adds	r2, r2, r3
 8004084:	2152      	movs	r1, #82	; 0x52
 8004086:	187b      	adds	r3, r7, r1
 8004088:	8812      	ldrh	r2, [r2, #0]
 800408a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800408c:	187b      	adds	r3, r7, r1
 800408e:	2200      	movs	r2, #0
 8004090:	5e9b      	ldrsh	r3, [r3, r2]
 8004092:	2b00      	cmp	r3, #0
 8004094:	db00      	blt.n	8004098 <PCD_EP_ISR_Handler+0x34c>
 8004096:	e0fa      	b.n	800428e <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	001a      	movs	r2, r3
 800409e:	183b      	adds	r3, r7, r0
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	18d3      	adds	r3, r2, r3
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	2450      	movs	r4, #80	; 0x50
 80040ac:	193b      	adds	r3, r7, r4
 80040ae:	49cf      	ldr	r1, [pc, #828]	; (80043ec <PCD_EP_ISR_Handler+0x6a0>)
 80040b0:	400a      	ands	r2, r1
 80040b2:	801a      	strh	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	001a      	movs	r2, r3
 80040ba:	183b      	adds	r3, r7, r0
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	18d3      	adds	r3, r2, r3
 80040c2:	193a      	adds	r2, r7, r4
 80040c4:	8812      	ldrh	r2, [r2, #0]
 80040c6:	2180      	movs	r1, #128	; 0x80
 80040c8:	430a      	orrs	r2, r1
 80040ca:	b292      	uxth	r2, r2
 80040cc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80040ce:	183b      	adds	r3, r7, r0
 80040d0:	781a      	ldrb	r2, [r3, #0]
 80040d2:	0013      	movs	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	189b      	adds	r3, r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	3369      	adds	r3, #105	; 0x69
 80040dc:	33ff      	adds	r3, #255	; 0xff
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	18d3      	adds	r3, r2, r3
 80040e2:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80040e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e6:	7b1b      	ldrb	r3, [r3, #12]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d125      	bne.n	8004138 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2250      	movs	r2, #80	; 0x50
 80040f2:	5a9b      	ldrh	r3, [r3, r2]
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	001a      	movs	r2, r3
 80040f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	18d2      	adds	r2, r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	18d3      	adds	r3, r2, r3
 8004106:	4aba      	ldr	r2, [pc, #744]	; (80043f0 <PCD_EP_ISR_Handler+0x6a4>)
 8004108:	4694      	mov	ip, r2
 800410a:	4463      	add	r3, ip
 800410c:	881a      	ldrh	r2, [r3, #0]
 800410e:	2448      	movs	r4, #72	; 0x48
 8004110:	193b      	adds	r3, r7, r4
 8004112:	0592      	lsls	r2, r2, #22
 8004114:	0d92      	lsrs	r2, r2, #22
 8004116:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8004118:	193b      	adds	r3, r7, r4
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d100      	bne.n	8004122 <PCD_EP_ISR_Handler+0x3d6>
 8004120:	e08d      	b.n	800423e <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004128:	6959      	ldr	r1, [r3, #20]
 800412a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800412c:	88da      	ldrh	r2, [r3, #6]
 800412e:	193b      	adds	r3, r7, r4
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	f005 fd15 	bl	8009b60 <USB_ReadPMA>
 8004136:	e082      	b.n	800423e <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800413a:	78db      	ldrb	r3, [r3, #3]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d10c      	bne.n	800415a <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004140:	2348      	movs	r3, #72	; 0x48
 8004142:	18fc      	adds	r4, r7, r3
 8004144:	2352      	movs	r3, #82	; 0x52
 8004146:	18fb      	adds	r3, r7, r3
 8004148:	881a      	ldrh	r2, [r3, #0]
 800414a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	0018      	movs	r0, r3
 8004150:	f000 f9ee 	bl	8004530 <HAL_PCD_EP_DB_Receive>
 8004154:	0003      	movs	r3, r0
 8004156:	8023      	strh	r3, [r4, #0]
 8004158:	e071      	b.n	800423e <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	001a      	movs	r2, r3
 8004160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	18d3      	adds	r3, r2, r3
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	b29a      	uxth	r2, r3
 800416c:	204a      	movs	r0, #74	; 0x4a
 800416e:	183b      	adds	r3, r7, r0
 8004170:	49a0      	ldr	r1, [pc, #640]	; (80043f4 <PCD_EP_ISR_Handler+0x6a8>)
 8004172:	400a      	ands	r2, r1
 8004174:	801a      	strh	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	001a      	movs	r2, r3
 800417c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	18d3      	adds	r3, r2, r3
 8004184:	183a      	adds	r2, r7, r0
 8004186:	8812      	ldrh	r2, [r2, #0]
 8004188:	499b      	ldr	r1, [pc, #620]	; (80043f8 <PCD_EP_ISR_Handler+0x6ac>)
 800418a:	430a      	orrs	r2, r1
 800418c:	b292      	uxth	r2, r2
 800418e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	001a      	movs	r2, r3
 8004196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	18d3      	adds	r3, r2, r3
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	001a      	movs	r2, r3
 80041a4:	2380      	movs	r3, #128	; 0x80
 80041a6:	01db      	lsls	r3, r3, #7
 80041a8:	4013      	ands	r3, r2
 80041aa:	d024      	beq.n	80041f6 <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2250      	movs	r2, #80	; 0x50
 80041b2:	5a9b      	ldrh	r3, [r3, r2]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	001a      	movs	r2, r3
 80041b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	18d2      	adds	r2, r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	18d3      	adds	r3, r2, r3
 80041c6:	4a8d      	ldr	r2, [pc, #564]	; (80043fc <PCD_EP_ISR_Handler+0x6b0>)
 80041c8:	4694      	mov	ip, r2
 80041ca:	4463      	add	r3, ip
 80041cc:	881a      	ldrh	r2, [r3, #0]
 80041ce:	2448      	movs	r4, #72	; 0x48
 80041d0:	193b      	adds	r3, r7, r4
 80041d2:	0592      	lsls	r2, r2, #22
 80041d4:	0d92      	lsrs	r2, r2, #22
 80041d6:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80041d8:	193b      	adds	r3, r7, r4
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d02e      	beq.n	800423e <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e6:	6959      	ldr	r1, [r3, #20]
 80041e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ea:	891a      	ldrh	r2, [r3, #8]
 80041ec:	193b      	adds	r3, r7, r4
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	f005 fcb6 	bl	8009b60 <USB_ReadPMA>
 80041f4:	e023      	b.n	800423e <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2250      	movs	r2, #80	; 0x50
 80041fc:	5a9b      	ldrh	r3, [r3, r2]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	001a      	movs	r2, r3
 8004202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	18d2      	adds	r2, r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	18d3      	adds	r3, r2, r3
 8004210:	4a77      	ldr	r2, [pc, #476]	; (80043f0 <PCD_EP_ISR_Handler+0x6a4>)
 8004212:	4694      	mov	ip, r2
 8004214:	4463      	add	r3, ip
 8004216:	881a      	ldrh	r2, [r3, #0]
 8004218:	2448      	movs	r4, #72	; 0x48
 800421a:	193b      	adds	r3, r7, r4
 800421c:	0592      	lsls	r2, r2, #22
 800421e:	0d92      	lsrs	r2, r2, #22
 8004220:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8004222:	193b      	adds	r3, r7, r4
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004230:	6959      	ldr	r1, [r3, #20]
 8004232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004234:	895a      	ldrh	r2, [r3, #10]
 8004236:	193b      	adds	r3, r7, r4
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	f005 fc91 	bl	8009b60 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800423e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004240:	69da      	ldr	r2, [r3, #28]
 8004242:	2148      	movs	r1, #72	; 0x48
 8004244:	187b      	adds	r3, r7, r1
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	18d2      	adds	r2, r2, r3
 800424a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800424c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800424e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004250:	695a      	ldr	r2, [r3, #20]
 8004252:	187b      	adds	r3, r7, r1
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	18d2      	adds	r2, r2, r3
 8004258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800425a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800425c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <PCD_EP_ISR_Handler+0x524>
 8004264:	187b      	adds	r3, r7, r1
 8004266:	881a      	ldrh	r2, [r3, #0]
 8004268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	429a      	cmp	r2, r3
 800426e:	d207      	bcs.n	8004280 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004272:	781a      	ldrb	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	0011      	movs	r1, r2
 8004278:	0018      	movs	r0, r3
 800427a:	f007 fc54 	bl	800bb26 <HAL_PCD_DataOutStageCallback>
 800427e:	e006      	b.n	800428e <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004286:	0011      	movs	r1, r2
 8004288:	0018      	movs	r0, r3
 800428a:	f004 fa31 	bl	80086f0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800428e:	2452      	movs	r4, #82	; 0x52
 8004290:	193b      	adds	r3, r7, r4
 8004292:	881b      	ldrh	r3, [r3, #0]
 8004294:	2280      	movs	r2, #128	; 0x80
 8004296:	4013      	ands	r3, r2
 8004298:	d100      	bne.n	800429c <PCD_EP_ISR_Handler+0x550>
 800429a:	e135      	b.n	8004508 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 800429c:	2055      	movs	r0, #85	; 0x55
 800429e:	183b      	adds	r3, r7, r0
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	0013      	movs	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	189b      	adds	r3, r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	18d3      	adds	r3, r2, r3
 80042b0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	001a      	movs	r2, r3
 80042b8:	183b      	adds	r3, r7, r0
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	18d3      	adds	r3, r2, r3
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	2542      	movs	r5, #66	; 0x42
 80042c6:	197b      	adds	r3, r7, r5
 80042c8:	494d      	ldr	r1, [pc, #308]	; (8004400 <PCD_EP_ISR_Handler+0x6b4>)
 80042ca:	400a      	ands	r2, r1
 80042cc:	801a      	strh	r2, [r3, #0]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	001a      	movs	r2, r3
 80042d4:	183b      	adds	r3, r7, r0
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	18d3      	adds	r3, r2, r3
 80042dc:	197a      	adds	r2, r7, r5
 80042de:	8812      	ldrh	r2, [r2, #0]
 80042e0:	4948      	ldr	r1, [pc, #288]	; (8004404 <PCD_EP_ISR_Handler+0x6b8>)
 80042e2:	430a      	orrs	r2, r1
 80042e4:	b292      	uxth	r2, r2
 80042e6:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 80042e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ea:	78db      	ldrb	r3, [r3, #3]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d100      	bne.n	80042f2 <PCD_EP_ISR_Handler+0x5a6>
 80042f0:	e0ad      	b.n	800444e <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 80042f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f4:	2200      	movs	r2, #0
 80042f6:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80042f8:	193b      	adds	r3, r7, r4
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	2240      	movs	r2, #64	; 0x40
 80042fe:	4013      	ands	r3, r2
 8004300:	d046      	beq.n	8004390 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004304:	785b      	ldrb	r3, [r3, #1]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d125      	bne.n	8004356 <PCD_EP_ISR_Handler+0x60a>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2250      	movs	r2, #80	; 0x50
 8004316:	5a9b      	ldrh	r3, [r3, r2]
 8004318:	b29b      	uxth	r3, r3
 800431a:	001a      	movs	r2, r3
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	189b      	adds	r3, r3, r2
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
 8004322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	00da      	lsls	r2, r3, #3
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	18d3      	adds	r3, r2, r3
 800432c:	4a33      	ldr	r2, [pc, #204]	; (80043fc <PCD_EP_ISR_Handler+0x6b0>)
 800432e:	4694      	mov	ip, r2
 8004330:	4463      	add	r3, ip
 8004332:	623b      	str	r3, [r7, #32]
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	b29b      	uxth	r3, r3
 800433a:	4a33      	ldr	r2, [pc, #204]	; (8004408 <PCD_EP_ISR_Handler+0x6bc>)
 800433c:	4013      	ands	r3, r2
 800433e:	b29a      	uxth	r2, r3
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	801a      	strh	r2, [r3, #0]
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	b29b      	uxth	r3, r3
 800434a:	4a2e      	ldr	r2, [pc, #184]	; (8004404 <PCD_EP_ISR_Handler+0x6b8>)
 800434c:	4313      	orrs	r3, r2
 800434e:	b29a      	uxth	r2, r3
 8004350:	6a3b      	ldr	r3, [r7, #32]
 8004352:	801a      	strh	r2, [r3, #0]
 8004354:	e073      	b.n	800443e <PCD_EP_ISR_Handler+0x6f2>
 8004356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004358:	785b      	ldrb	r3, [r3, #1]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d16f      	bne.n	800443e <PCD_EP_ISR_Handler+0x6f2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2250      	movs	r2, #80	; 0x50
 800436a:	5a9b      	ldrh	r3, [r3, r2]
 800436c:	b29b      	uxth	r3, r3
 800436e:	001a      	movs	r2, r3
 8004370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004372:	189b      	adds	r3, r3, r2
 8004374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	00da      	lsls	r2, r3, #3
 800437c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437e:	18d3      	adds	r3, r2, r3
 8004380:	4a1e      	ldr	r2, [pc, #120]	; (80043fc <PCD_EP_ISR_Handler+0x6b0>)
 8004382:	4694      	mov	ip, r2
 8004384:	4463      	add	r3, ip
 8004386:	62bb      	str	r3, [r7, #40]	; 0x28
 8004388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438a:	2200      	movs	r2, #0
 800438c:	801a      	strh	r2, [r3, #0]
 800438e:	e056      	b.n	800443e <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004398:	785b      	ldrb	r3, [r3, #1]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d136      	bne.n	800440c <PCD_EP_ISR_Handler+0x6c0>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	637b      	str	r3, [r7, #52]	; 0x34
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2250      	movs	r2, #80	; 0x50
 80043aa:	5a9b      	ldrh	r3, [r3, r2]
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	001a      	movs	r2, r3
 80043b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b2:	189b      	adds	r3, r3, r2
 80043b4:	637b      	str	r3, [r7, #52]	; 0x34
 80043b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	00da      	lsls	r2, r3, #3
 80043bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043be:	18d3      	adds	r3, r2, r3
 80043c0:	4a0b      	ldr	r2, [pc, #44]	; (80043f0 <PCD_EP_ISR_Handler+0x6a4>)
 80043c2:	4694      	mov	ip, r2
 80043c4:	4463      	add	r3, ip
 80043c6:	633b      	str	r3, [r7, #48]	; 0x30
 80043c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	4a0e      	ldr	r2, [pc, #56]	; (8004408 <PCD_EP_ISR_Handler+0x6bc>)
 80043d0:	4013      	ands	r3, r2
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d6:	801a      	strh	r2, [r3, #0]
 80043d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	b29b      	uxth	r3, r3
 80043de:	4a09      	ldr	r2, [pc, #36]	; (8004404 <PCD_EP_ISR_Handler+0x6b8>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e6:	801a      	strh	r2, [r3, #0]
 80043e8:	e029      	b.n	800443e <PCD_EP_ISR_Handler+0x6f2>
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	00000f8f 	.word	0x00000f8f
 80043f0:	00000406 	.word	0x00000406
 80043f4:	ffff8f8f 	.word	0xffff8f8f
 80043f8:	ffff80c0 	.word	0xffff80c0
 80043fc:	00000402 	.word	0x00000402
 8004400:	ffff8f0f 	.word	0xffff8f0f
 8004404:	ffff8000 	.word	0xffff8000
 8004408:	ffff83ff 	.word	0xffff83ff
 800440c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800440e:	785b      	ldrb	r3, [r3, #1]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d114      	bne.n	800443e <PCD_EP_ISR_Handler+0x6f2>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2250      	movs	r2, #80	; 0x50
 800441a:	5a9b      	ldrh	r3, [r3, r2]
 800441c:	b29b      	uxth	r3, r3
 800441e:	001a      	movs	r2, r3
 8004420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004422:	189b      	adds	r3, r3, r2
 8004424:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	00da      	lsls	r2, r3, #3
 800442c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800442e:	18d3      	adds	r3, r2, r3
 8004430:	4a3d      	ldr	r2, [pc, #244]	; (8004528 <PCD_EP_ISR_Handler+0x7dc>)
 8004432:	4694      	mov	ip, r2
 8004434:	4463      	add	r3, ip
 8004436:	63bb      	str	r3, [r7, #56]	; 0x38
 8004438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443a:	2200      	movs	r2, #0
 800443c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800443e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004440:	781a      	ldrb	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	0011      	movs	r1, r2
 8004446:	0018      	movs	r0, r3
 8004448:	f007 fb8e 	bl	800bb68 <HAL_PCD_DataInStageCallback>
 800444c:	e05c      	b.n	8004508 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800444e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004450:	78db      	ldrb	r3, [r3, #3]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d150      	bne.n	80044f8 <PCD_EP_ISR_Handler+0x7ac>
 8004456:	2352      	movs	r3, #82	; 0x52
 8004458:	18fb      	adds	r3, r7, r3
 800445a:	881a      	ldrh	r2, [r3, #0]
 800445c:	2380      	movs	r3, #128	; 0x80
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	4013      	ands	r3, r2
 8004462:	d149      	bne.n	80044f8 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2250      	movs	r2, #80	; 0x50
 800446a:	5a9b      	ldrh	r3, [r3, r2]
 800446c:	b29b      	uxth	r3, r3
 800446e:	001a      	movs	r2, r3
 8004470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	18d2      	adds	r2, r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	18d3      	adds	r3, r2, r3
 800447e:	4a2b      	ldr	r2, [pc, #172]	; (800452c <PCD_EP_ISR_Handler+0x7e0>)
 8004480:	4694      	mov	ip, r2
 8004482:	4463      	add	r3, ip
 8004484:	881a      	ldrh	r2, [r3, #0]
 8004486:	2140      	movs	r1, #64	; 0x40
 8004488:	187b      	adds	r3, r7, r1
 800448a:	0592      	lsls	r2, r2, #22
 800448c:	0d92      	lsrs	r2, r2, #22
 800448e:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8004490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004492:	699a      	ldr	r2, [r3, #24]
 8004494:	187b      	adds	r3, r7, r1
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	429a      	cmp	r2, r3
 800449a:	d907      	bls.n	80044ac <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 800449c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800449e:	699a      	ldr	r2, [r3, #24]
 80044a0:	187b      	adds	r3, r7, r1
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	1ad2      	subs	r2, r2, r3
 80044a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a8:	619a      	str	r2, [r3, #24]
 80044aa:	e002      	b.n	80044b2 <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 80044ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ae:	2200      	movs	r2, #0
 80044b0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80044b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d107      	bne.n	80044ca <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044bc:	781a      	ldrb	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	0011      	movs	r1, r2
 80044c2:	0018      	movs	r0, r3
 80044c4:	f007 fb50 	bl	800bb68 <HAL_PCD_DataInStageCallback>
 80044c8:	e01e      	b.n	8004508 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80044ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044cc:	695a      	ldr	r2, [r3, #20]
 80044ce:	2140      	movs	r1, #64	; 0x40
 80044d0:	187b      	adds	r3, r7, r1
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	18d2      	adds	r2, r2, r3
 80044d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80044da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044dc:	69da      	ldr	r2, [r3, #28]
 80044de:	187b      	adds	r3, r7, r1
 80044e0:	881b      	ldrh	r3, [r3, #0]
 80044e2:	18d2      	adds	r2, r2, r3
 80044e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044ee:	0011      	movs	r1, r2
 80044f0:	0018      	movs	r0, r3
 80044f2:	f004 f8fd 	bl	80086f0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80044f6:	e007      	b.n	8004508 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80044f8:	2352      	movs	r3, #82	; 0x52
 80044fa:	18fb      	adds	r3, r7, r3
 80044fc:	881a      	ldrh	r2, [r3, #0]
 80044fe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	0018      	movs	r0, r3
 8004504:	f000 f930 	bl	8004768 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2244      	movs	r2, #68	; 0x44
 800450e:	5a9b      	ldrh	r3, [r3, r2]
 8004510:	b29b      	uxth	r3, r3
 8004512:	b21b      	sxth	r3, r3
 8004514:	2b00      	cmp	r3, #0
 8004516:	da01      	bge.n	800451c <PCD_EP_ISR_Handler+0x7d0>
 8004518:	f7ff fc1e 	bl	8003d58 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	0018      	movs	r0, r3
 8004520:	46bd      	mov	sp, r7
 8004522:	b016      	add	sp, #88	; 0x58
 8004524:	bdb0      	pop	{r4, r5, r7, pc}
 8004526:	46c0      	nop			; (mov r8, r8)
 8004528:	00000406 	.word	0x00000406
 800452c:	00000402 	.word	0x00000402

08004530 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004530:	b590      	push	{r4, r7, lr}
 8004532:	b089      	sub	sp, #36	; 0x24
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	1dbb      	adds	r3, r7, #6
 800453c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800453e:	1dbb      	adds	r3, r7, #6
 8004540:	881a      	ldrh	r2, [r3, #0]
 8004542:	2380      	movs	r3, #128	; 0x80
 8004544:	01db      	lsls	r3, r3, #7
 8004546:	4013      	ands	r3, r2
 8004548:	d100      	bne.n	800454c <HAL_PCD_EP_DB_Receive+0x1c>
 800454a:	e07d      	b.n	8004648 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2250      	movs	r2, #80	; 0x50
 8004552:	5a9b      	ldrh	r3, [r3, r2]
 8004554:	b29b      	uxth	r3, r3
 8004556:	001a      	movs	r2, r3
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	18d2      	adds	r2, r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	18d3      	adds	r3, r2, r3
 8004566:	4a7a      	ldr	r2, [pc, #488]	; (8004750 <HAL_PCD_EP_DB_Receive+0x220>)
 8004568:	4694      	mov	ip, r2
 800456a:	4463      	add	r3, ip
 800456c:	881a      	ldrh	r2, [r3, #0]
 800456e:	211a      	movs	r1, #26
 8004570:	187b      	adds	r3, r7, r1
 8004572:	0592      	lsls	r2, r2, #22
 8004574:	0d92      	lsrs	r2, r2, #22
 8004576:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	699a      	ldr	r2, [r3, #24]
 800457c:	187b      	adds	r3, r7, r1
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d307      	bcc.n	8004594 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	699a      	ldr	r2, [r3, #24]
 8004588:	187b      	adds	r3, r7, r1
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	1ad2      	subs	r2, r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	619a      	str	r2, [r3, #24]
 8004592:	e002      	b.n	800459a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2200      	movs	r2, #0
 8004598:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d121      	bne.n	80045e6 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	001a      	movs	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	18d3      	adds	r3, r2, r3
 80045b0:	881b      	ldrh	r3, [r3, #0]
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	2018      	movs	r0, #24
 80045b6:	183b      	adds	r3, r7, r0
 80045b8:	4966      	ldr	r1, [pc, #408]	; (8004754 <HAL_PCD_EP_DB_Receive+0x224>)
 80045ba:	400a      	ands	r2, r1
 80045bc:	801a      	strh	r2, [r3, #0]
 80045be:	183b      	adds	r3, r7, r0
 80045c0:	183a      	adds	r2, r7, r0
 80045c2:	8812      	ldrh	r2, [r2, #0]
 80045c4:	2180      	movs	r1, #128	; 0x80
 80045c6:	0189      	lsls	r1, r1, #6
 80045c8:	404a      	eors	r2, r1
 80045ca:	801a      	strh	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	001a      	movs	r2, r3
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	18d3      	adds	r3, r2, r3
 80045da:	183a      	adds	r2, r7, r0
 80045dc:	8812      	ldrh	r2, [r2, #0]
 80045de:	495e      	ldr	r1, [pc, #376]	; (8004758 <HAL_PCD_EP_DB_Receive+0x228>)
 80045e0:	430a      	orrs	r2, r1
 80045e2:	b292      	uxth	r2, r2
 80045e4:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80045e6:	1dbb      	adds	r3, r7, #6
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	2240      	movs	r2, #64	; 0x40
 80045ec:	4013      	ands	r3, r2
 80045ee:	d01a      	beq.n	8004626 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	001a      	movs	r2, r3
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	18d3      	adds	r3, r2, r3
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	b29a      	uxth	r2, r3
 8004602:	2016      	movs	r0, #22
 8004604:	183b      	adds	r3, r7, r0
 8004606:	4955      	ldr	r1, [pc, #340]	; (800475c <HAL_PCD_EP_DB_Receive+0x22c>)
 8004608:	400a      	ands	r2, r1
 800460a:	801a      	strh	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	001a      	movs	r2, r3
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	18d3      	adds	r3, r2, r3
 800461a:	183a      	adds	r2, r7, r0
 800461c:	8812      	ldrh	r2, [r2, #0]
 800461e:	4950      	ldr	r1, [pc, #320]	; (8004760 <HAL_PCD_EP_DB_Receive+0x230>)
 8004620:	430a      	orrs	r2, r1
 8004622:	b292      	uxth	r2, r2
 8004624:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8004626:	241a      	movs	r4, #26
 8004628:	193b      	adds	r3, r7, r4
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d100      	bne.n	8004632 <HAL_PCD_EP_DB_Receive+0x102>
 8004630:	e086      	b.n	8004740 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6818      	ldr	r0, [r3, #0]
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	6959      	ldr	r1, [r3, #20]
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	891a      	ldrh	r2, [r3, #8]
 800463e:	193b      	adds	r3, r7, r4
 8004640:	881b      	ldrh	r3, [r3, #0]
 8004642:	f005 fa8d 	bl	8009b60 <USB_ReadPMA>
 8004646:	e07b      	b.n	8004740 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2250      	movs	r2, #80	; 0x50
 800464e:	5a9b      	ldrh	r3, [r3, r2]
 8004650:	b29b      	uxth	r3, r3
 8004652:	001a      	movs	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	18d2      	adds	r2, r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	18d3      	adds	r3, r2, r3
 8004662:	4a40      	ldr	r2, [pc, #256]	; (8004764 <HAL_PCD_EP_DB_Receive+0x234>)
 8004664:	4694      	mov	ip, r2
 8004666:	4463      	add	r3, ip
 8004668:	881a      	ldrh	r2, [r3, #0]
 800466a:	211a      	movs	r1, #26
 800466c:	187b      	adds	r3, r7, r1
 800466e:	0592      	lsls	r2, r2, #22
 8004670:	0d92      	lsrs	r2, r2, #22
 8004672:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	699a      	ldr	r2, [r3, #24]
 8004678:	187b      	adds	r3, r7, r1
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d307      	bcc.n	8004690 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	699a      	ldr	r2, [r3, #24]
 8004684:	187b      	adds	r3, r7, r1
 8004686:	881b      	ldrh	r3, [r3, #0]
 8004688:	1ad2      	subs	r2, r2, r3
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	619a      	str	r2, [r3, #24]
 800468e:	e002      	b.n	8004696 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2200      	movs	r2, #0
 8004694:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d121      	bne.n	80046e2 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	001a      	movs	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	18d3      	adds	r3, r2, r3
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	201e      	movs	r0, #30
 80046b2:	183b      	adds	r3, r7, r0
 80046b4:	4927      	ldr	r1, [pc, #156]	; (8004754 <HAL_PCD_EP_DB_Receive+0x224>)
 80046b6:	400a      	ands	r2, r1
 80046b8:	801a      	strh	r2, [r3, #0]
 80046ba:	183b      	adds	r3, r7, r0
 80046bc:	183a      	adds	r2, r7, r0
 80046be:	8812      	ldrh	r2, [r2, #0]
 80046c0:	2180      	movs	r1, #128	; 0x80
 80046c2:	0189      	lsls	r1, r1, #6
 80046c4:	404a      	eors	r2, r1
 80046c6:	801a      	strh	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	001a      	movs	r2, r3
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	18d3      	adds	r3, r2, r3
 80046d6:	183a      	adds	r2, r7, r0
 80046d8:	8812      	ldrh	r2, [r2, #0]
 80046da:	491f      	ldr	r1, [pc, #124]	; (8004758 <HAL_PCD_EP_DB_Receive+0x228>)
 80046dc:	430a      	orrs	r2, r1
 80046de:	b292      	uxth	r2, r2
 80046e0:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80046e2:	1dbb      	adds	r3, r7, #6
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	2240      	movs	r2, #64	; 0x40
 80046e8:	4013      	ands	r3, r2
 80046ea:	d11a      	bne.n	8004722 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	001a      	movs	r2, r3
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	18d3      	adds	r3, r2, r3
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	201c      	movs	r0, #28
 8004700:	183b      	adds	r3, r7, r0
 8004702:	4916      	ldr	r1, [pc, #88]	; (800475c <HAL_PCD_EP_DB_Receive+0x22c>)
 8004704:	400a      	ands	r2, r1
 8004706:	801a      	strh	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	001a      	movs	r2, r3
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	18d3      	adds	r3, r2, r3
 8004716:	183a      	adds	r2, r7, r0
 8004718:	8812      	ldrh	r2, [r2, #0]
 800471a:	4911      	ldr	r1, [pc, #68]	; (8004760 <HAL_PCD_EP_DB_Receive+0x230>)
 800471c:	430a      	orrs	r2, r1
 800471e:	b292      	uxth	r2, r2
 8004720:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8004722:	241a      	movs	r4, #26
 8004724:	193b      	adds	r3, r7, r4
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d009      	beq.n	8004740 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6818      	ldr	r0, [r3, #0]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	6959      	ldr	r1, [r3, #20]
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	895a      	ldrh	r2, [r3, #10]
 8004738:	193b      	adds	r3, r7, r4
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	f005 fa10 	bl	8009b60 <USB_ReadPMA>
    }
  }

  return count;
 8004740:	231a      	movs	r3, #26
 8004742:	18fb      	adds	r3, r7, r3
 8004744:	881b      	ldrh	r3, [r3, #0]
}
 8004746:	0018      	movs	r0, r3
 8004748:	46bd      	mov	sp, r7
 800474a:	b009      	add	sp, #36	; 0x24
 800474c:	bd90      	pop	{r4, r7, pc}
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	00000402 	.word	0x00000402
 8004754:	ffffbf8f 	.word	0xffffbf8f
 8004758:	ffff8080 	.word	0xffff8080
 800475c:	ffff8f8f 	.word	0xffff8f8f
 8004760:	ffff80c0 	.word	0xffff80c0
 8004764:	00000406 	.word	0x00000406

08004768 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b0a2      	sub	sp, #136	; 0x88
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	1dbb      	adds	r3, r7, #6
 8004774:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004776:	1dbb      	adds	r3, r7, #6
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	2240      	movs	r2, #64	; 0x40
 800477c:	4013      	ands	r3, r2
 800477e:	d100      	bne.n	8004782 <HAL_PCD_EP_DB_Transmit+0x1a>
 8004780:	e1c8      	b.n	8004b14 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2250      	movs	r2, #80	; 0x50
 8004788:	5a9b      	ldrh	r3, [r3, r2]
 800478a:	b29b      	uxth	r3, r3
 800478c:	001a      	movs	r2, r3
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	18d2      	adds	r2, r2, r3
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	18d3      	adds	r3, r2, r3
 800479c:	4ad7      	ldr	r2, [pc, #860]	; (8004afc <HAL_PCD_EP_DB_Transmit+0x394>)
 800479e:	4694      	mov	ip, r2
 80047a0:	4463      	add	r3, ip
 80047a2:	881a      	ldrh	r2, [r3, #0]
 80047a4:	214e      	movs	r1, #78	; 0x4e
 80047a6:	187b      	adds	r3, r7, r1
 80047a8:	0592      	lsls	r2, r2, #22
 80047aa:	0d92      	lsrs	r2, r2, #22
 80047ac:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	699a      	ldr	r2, [r3, #24]
 80047b2:	187b      	adds	r3, r7, r1
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d907      	bls.n	80047ca <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	187b      	adds	r3, r7, r1
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	1ad2      	subs	r2, r2, r3
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	619a      	str	r2, [r3, #24]
 80047c8:	e002      	b.n	80047d0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2200      	movs	r2, #0
 80047ce:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d000      	beq.n	80047da <HAL_PCD_EP_DB_Transmit+0x72>
 80047d8:	e0b5      	b.n	8004946 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	785b      	ldrb	r3, [r3, #1]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d125      	bne.n	800482e <HAL_PCD_EP_DB_Transmit+0xc6>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2250      	movs	r2, #80	; 0x50
 80047ee:	5a9b      	ldrh	r3, [r3, r2]
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	001a      	movs	r2, r3
 80047f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f6:	189b      	adds	r3, r3, r2
 80047f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	00da      	lsls	r2, r3, #3
 8004800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004802:	18d3      	adds	r3, r2, r3
 8004804:	4abd      	ldr	r2, [pc, #756]	; (8004afc <HAL_PCD_EP_DB_Transmit+0x394>)
 8004806:	4694      	mov	ip, r2
 8004808:	4463      	add	r3, ip
 800480a:	627b      	str	r3, [r7, #36]	; 0x24
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	b29b      	uxth	r3, r3
 8004812:	4abb      	ldr	r2, [pc, #748]	; (8004b00 <HAL_PCD_EP_DB_Transmit+0x398>)
 8004814:	4013      	ands	r3, r2
 8004816:	b29a      	uxth	r2, r3
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	801a      	strh	r2, [r3, #0]
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	b29b      	uxth	r3, r3
 8004822:	4ab8      	ldr	r2, [pc, #736]	; (8004b04 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004824:	4313      	orrs	r3, r2
 8004826:	b29a      	uxth	r2, r3
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	801a      	strh	r2, [r3, #0]
 800482c:	e01b      	b.n	8004866 <HAL_PCD_EP_DB_Transmit+0xfe>
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	785b      	ldrb	r3, [r3, #1]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d117      	bne.n	8004866 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	633b      	str	r3, [r7, #48]	; 0x30
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2250      	movs	r2, #80	; 0x50
 8004842:	5a9b      	ldrh	r3, [r3, r2]
 8004844:	b29b      	uxth	r3, r3
 8004846:	001a      	movs	r2, r3
 8004848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800484a:	189b      	adds	r3, r3, r2
 800484c:	633b      	str	r3, [r7, #48]	; 0x30
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	00da      	lsls	r2, r3, #3
 8004854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004856:	18d3      	adds	r3, r2, r3
 8004858:	4aa8      	ldr	r2, [pc, #672]	; (8004afc <HAL_PCD_EP_DB_Transmit+0x394>)
 800485a:	4694      	mov	ip, r2
 800485c:	4463      	add	r3, ip
 800485e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004862:	2200      	movs	r2, #0
 8004864:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	623b      	str	r3, [r7, #32]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	785b      	ldrb	r3, [r3, #1]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d125      	bne.n	80048c0 <HAL_PCD_EP_DB_Transmit+0x158>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	61bb      	str	r3, [r7, #24]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2250      	movs	r2, #80	; 0x50
 8004880:	5a9b      	ldrh	r3, [r3, r2]
 8004882:	b29b      	uxth	r3, r3
 8004884:	001a      	movs	r2, r3
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	189b      	adds	r3, r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	00da      	lsls	r2, r3, #3
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	18d3      	adds	r3, r2, r3
 8004896:	4a9c      	ldr	r2, [pc, #624]	; (8004b08 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8004898:	4694      	mov	ip, r2
 800489a:	4463      	add	r3, ip
 800489c:	617b      	str	r3, [r7, #20]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	4a96      	ldr	r2, [pc, #600]	; (8004b00 <HAL_PCD_EP_DB_Transmit+0x398>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	801a      	strh	r2, [r3, #0]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	4a93      	ldr	r2, [pc, #588]	; (8004b04 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	801a      	strh	r2, [r3, #0]
 80048be:	e018      	b.n	80048f2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	785b      	ldrb	r3, [r3, #1]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d114      	bne.n	80048f2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2250      	movs	r2, #80	; 0x50
 80048ce:	5a9b      	ldrh	r3, [r3, r2]
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	001a      	movs	r2, r3
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	189b      	adds	r3, r3, r2
 80048d8:	623b      	str	r3, [r7, #32]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	00da      	lsls	r2, r3, #3
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	18d3      	adds	r3, r2, r3
 80048e4:	4a88      	ldr	r2, [pc, #544]	; (8004b08 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 80048e6:	4694      	mov	ip, r2
 80048e8:	4463      	add	r3, ip
 80048ea:	61fb      	str	r3, [r7, #28]
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	2200      	movs	r2, #0
 80048f0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	781a      	ldrb	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	0011      	movs	r1, r2
 80048fa:	0018      	movs	r0, r3
 80048fc:	f007 f934 	bl	800bb68 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004900:	1dbb      	adds	r3, r7, #6
 8004902:	881a      	ldrh	r2, [r3, #0]
 8004904:	2380      	movs	r3, #128	; 0x80
 8004906:	01db      	lsls	r3, r3, #7
 8004908:	4013      	ands	r3, r2
 800490a:	d100      	bne.n	800490e <HAL_PCD_EP_DB_Transmit+0x1a6>
 800490c:	e2d4      	b.n	8004eb8 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	001a      	movs	r2, r3
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	18d3      	adds	r3, r2, r3
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	b29a      	uxth	r2, r3
 8004920:	2012      	movs	r0, #18
 8004922:	183b      	adds	r3, r7, r0
 8004924:	4979      	ldr	r1, [pc, #484]	; (8004b0c <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8004926:	400a      	ands	r2, r1
 8004928:	801a      	strh	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	001a      	movs	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	18d3      	adds	r3, r2, r3
 8004938:	183a      	adds	r2, r7, r0
 800493a:	8812      	ldrh	r2, [r2, #0]
 800493c:	4974      	ldr	r1, [pc, #464]	; (8004b10 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 800493e:	430a      	orrs	r2, r1
 8004940:	b292      	uxth	r2, r2
 8004942:	801a      	strh	r2, [r3, #0]
 8004944:	e2b8      	b.n	8004eb8 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004946:	1dbb      	adds	r3, r7, #6
 8004948:	881a      	ldrh	r2, [r3, #0]
 800494a:	2380      	movs	r3, #128	; 0x80
 800494c:	01db      	lsls	r3, r3, #7
 800494e:	4013      	ands	r3, r2
 8004950:	d01a      	beq.n	8004988 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	001a      	movs	r2, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	18d3      	adds	r3, r2, r3
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	b29a      	uxth	r2, r3
 8004964:	2044      	movs	r0, #68	; 0x44
 8004966:	183b      	adds	r3, r7, r0
 8004968:	4968      	ldr	r1, [pc, #416]	; (8004b0c <HAL_PCD_EP_DB_Transmit+0x3a4>)
 800496a:	400a      	ands	r2, r1
 800496c:	801a      	strh	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	001a      	movs	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	18d3      	adds	r3, r2, r3
 800497c:	183a      	adds	r2, r7, r0
 800497e:	8812      	ldrh	r2, [r2, #0]
 8004980:	4963      	ldr	r1, [pc, #396]	; (8004b10 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8004982:	430a      	orrs	r2, r1
 8004984:	b292      	uxth	r2, r2
 8004986:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2224      	movs	r2, #36	; 0x24
 800498c:	5c9b      	ldrb	r3, [r3, r2]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d000      	beq.n	8004994 <HAL_PCD_EP_DB_Transmit+0x22c>
 8004992:	e291      	b.n	8004eb8 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	695a      	ldr	r2, [r3, #20]
 8004998:	214e      	movs	r1, #78	; 0x4e
 800499a:	187b      	adds	r3, r7, r1
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	18d2      	adds	r2, r2, r3
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	69da      	ldr	r2, [r3, #28]
 80049a8:	187b      	adds	r3, r7, r1
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	18d2      	adds	r2, r2, r3
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	6a1a      	ldr	r2, [r3, #32]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d309      	bcc.n	80049d2 <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	6a1a      	ldr	r2, [r3, #32]
 80049c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ca:	1ad2      	subs	r2, r2, r3
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	621a      	str	r2, [r3, #32]
 80049d0:	e016      	b.n	8004a00 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d108      	bne.n	80049ec <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 80049da:	234e      	movs	r3, #78	; 0x4e
 80049dc:	18fb      	adds	r3, r7, r3
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2224      	movs	r2, #36	; 0x24
 80049e6:	2100      	movs	r1, #0
 80049e8:	5499      	strb	r1, [r3, r2]
 80049ea:	e009      	b.n	8004a00 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2224      	movs	r2, #36	; 0x24
 80049f0:	2100      	movs	r1, #0
 80049f2:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2200      	movs	r2, #0
 80049fe:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	785b      	ldrb	r3, [r3, #1]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d150      	bne.n	8004aaa <HAL_PCD_EP_DB_Transmit+0x342>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2250      	movs	r2, #80	; 0x50
 8004a14:	5a9b      	ldrh	r3, [r3, r2]
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	001a      	movs	r2, r3
 8004a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1c:	189b      	adds	r3, r3, r2
 8004a1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	00da      	lsls	r2, r3, #3
 8004a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a28:	18d3      	adds	r3, r2, r3
 8004a2a:	4a34      	ldr	r2, [pc, #208]	; (8004afc <HAL_PCD_EP_DB_Transmit+0x394>)
 8004a2c:	4694      	mov	ip, r2
 8004a2e:	4463      	add	r3, ip
 8004a30:	637b      	str	r3, [r7, #52]	; 0x34
 8004a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d110      	bne.n	8004a5a <HAL_PCD_EP_DB_Transmit+0x2f2>
 8004a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	4a30      	ldr	r2, [pc, #192]	; (8004b00 <HAL_PCD_EP_DB_Transmit+0x398>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a46:	801a      	strh	r2, [r3, #0]
 8004a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	4a2d      	ldr	r2, [pc, #180]	; (8004b04 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a56:	801a      	strh	r2, [r3, #0]
 8004a58:	e044      	b.n	8004ae4 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a5c:	2b3e      	cmp	r3, #62	; 0x3e
 8004a5e:	d810      	bhi.n	8004a82 <HAL_PCD_EP_DB_Transmit+0x31a>
 8004a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a62:	085b      	lsrs	r3, r3, #1
 8004a64:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a68:	2201      	movs	r2, #1
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	d002      	beq.n	8004a74 <HAL_PCD_EP_DB_Transmit+0x30c>
 8004a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a70:	3301      	adds	r3, #1
 8004a72:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	029b      	lsls	r3, r3, #10
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7e:	801a      	strh	r2, [r3, #0]
 8004a80:	e030      	b.n	8004ae4 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a84:	095b      	lsrs	r3, r3, #5
 8004a86:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a8a:	221f      	movs	r2, #31
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	d102      	bne.n	8004a96 <HAL_PCD_EP_DB_Transmit+0x32e>
 8004a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a92:	3b01      	subs	r3, #1
 8004a94:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	029b      	lsls	r3, r3, #10
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	4a19      	ldr	r2, [pc, #100]	; (8004b04 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa6:	801a      	strh	r2, [r3, #0]
 8004aa8:	e01c      	b.n	8004ae4 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	785b      	ldrb	r3, [r3, #1]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d118      	bne.n	8004ae4 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	643b      	str	r3, [r7, #64]	; 0x40
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2250      	movs	r2, #80	; 0x50
 8004abe:	5a9b      	ldrh	r3, [r3, r2]
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	001a      	movs	r2, r3
 8004ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ac6:	189b      	adds	r3, r3, r2
 8004ac8:	643b      	str	r3, [r7, #64]	; 0x40
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	00da      	lsls	r2, r3, #3
 8004ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ad2:	18d3      	adds	r3, r2, r3
 8004ad4:	4a09      	ldr	r2, [pc, #36]	; (8004afc <HAL_PCD_EP_DB_Transmit+0x394>)
 8004ad6:	4694      	mov	ip, r2
 8004ad8:	4463      	add	r3, ip
 8004ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6818      	ldr	r0, [r3, #0]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	6959      	ldr	r1, [r3, #20]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	891a      	ldrh	r2, [r3, #8]
 8004af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	f004 fff0 	bl	8009ad8 <USB_WritePMA>
 8004af8:	e1de      	b.n	8004eb8 <HAL_PCD_EP_DB_Transmit+0x750>
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	00000402 	.word	0x00000402
 8004b00:	ffff83ff 	.word	0xffff83ff
 8004b04:	ffff8000 	.word	0xffff8000
 8004b08:	00000406 	.word	0x00000406
 8004b0c:	ffff8f8f 	.word	0xffff8f8f
 8004b10:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2250      	movs	r2, #80	; 0x50
 8004b1a:	5a9b      	ldrh	r3, [r3, r2]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	001a      	movs	r2, r3
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	18d2      	adds	r2, r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	18d3      	adds	r3, r2, r3
 8004b2e:	4aca      	ldr	r2, [pc, #808]	; (8004e58 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004b30:	4694      	mov	ip, r2
 8004b32:	4463      	add	r3, ip
 8004b34:	881a      	ldrh	r2, [r3, #0]
 8004b36:	214e      	movs	r1, #78	; 0x4e
 8004b38:	187b      	adds	r3, r7, r1
 8004b3a:	0592      	lsls	r2, r2, #22
 8004b3c:	0d92      	lsrs	r2, r2, #22
 8004b3e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	699a      	ldr	r2, [r3, #24]
 8004b44:	187b      	adds	r3, r7, r1
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d307      	bcc.n	8004b5c <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	699a      	ldr	r2, [r3, #24]
 8004b50:	187b      	adds	r3, r7, r1
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	1ad2      	subs	r2, r2, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	619a      	str	r2, [r3, #24]
 8004b5a:	e002      	b.n	8004b62 <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d000      	beq.n	8004b6c <HAL_PCD_EP_DB_Transmit+0x404>
 8004b6a:	e0c0      	b.n	8004cee <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	785b      	ldrb	r3, [r3, #1]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d125      	bne.n	8004bc0 <HAL_PCD_EP_DB_Transmit+0x458>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2250      	movs	r2, #80	; 0x50
 8004b80:	5a9b      	ldrh	r3, [r3, r2]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	001a      	movs	r2, r3
 8004b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b88:	189b      	adds	r3, r3, r2
 8004b8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	00da      	lsls	r2, r3, #3
 8004b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b94:	18d3      	adds	r3, r2, r3
 8004b96:	4ab1      	ldr	r2, [pc, #708]	; (8004e5c <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8004b98:	4694      	mov	ip, r2
 8004b9a:	4463      	add	r3, ip
 8004b9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	4aae      	ldr	r2, [pc, #696]	; (8004e60 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bac:	801a      	strh	r2, [r3, #0]
 8004bae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	4aab      	ldr	r2, [pc, #684]	; (8004e64 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bbc:	801a      	strh	r2, [r3, #0]
 8004bbe:	e01b      	b.n	8004bf8 <HAL_PCD_EP_DB_Transmit+0x490>
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	785b      	ldrb	r3, [r3, #1]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d117      	bne.n	8004bf8 <HAL_PCD_EP_DB_Transmit+0x490>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	677b      	str	r3, [r7, #116]	; 0x74
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2250      	movs	r2, #80	; 0x50
 8004bd4:	5a9b      	ldrh	r3, [r3, r2]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	001a      	movs	r2, r3
 8004bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bdc:	189b      	adds	r3, r3, r2
 8004bde:	677b      	str	r3, [r7, #116]	; 0x74
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	00da      	lsls	r2, r3, #3
 8004be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004be8:	18d3      	adds	r3, r2, r3
 8004bea:	4a9c      	ldr	r2, [pc, #624]	; (8004e5c <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8004bec:	4694      	mov	ip, r2
 8004bee:	4463      	add	r3, ip
 8004bf0:	673b      	str	r3, [r7, #112]	; 0x70
 8004bf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	785b      	ldrb	r3, [r3, #1]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d130      	bne.n	8004c68 <HAL_PCD_EP_DB_Transmit+0x500>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2180      	movs	r1, #128	; 0x80
 8004c0c:	187a      	adds	r2, r7, r1
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2250      	movs	r2, #80	; 0x50
 8004c16:	5a9b      	ldrh	r3, [r3, r2]
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	001a      	movs	r2, r3
 8004c1c:	187b      	adds	r3, r7, r1
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	189b      	adds	r3, r3, r2
 8004c22:	187a      	adds	r2, r7, r1
 8004c24:	6013      	str	r3, [r2, #0]
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	00da      	lsls	r2, r3, #3
 8004c2c:	187b      	adds	r3, r7, r1
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	18d3      	adds	r3, r2, r3
 8004c32:	4a89      	ldr	r2, [pc, #548]	; (8004e58 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004c34:	4694      	mov	ip, r2
 8004c36:	4463      	add	r3, ip
 8004c38:	2184      	movs	r1, #132	; 0x84
 8004c3a:	187a      	adds	r2, r7, r1
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	187b      	adds	r3, r7, r1
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	4a86      	ldr	r2, [pc, #536]	; (8004e60 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	187b      	adds	r3, r7, r1
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	801a      	strh	r2, [r3, #0]
 8004c52:	187b      	adds	r3, r7, r1
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	4a82      	ldr	r2, [pc, #520]	; (8004e64 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	187b      	adds	r3, r7, r1
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	801a      	strh	r2, [r3, #0]
 8004c66:	e018      	b.n	8004c9a <HAL_PCD_EP_DB_Transmit+0x532>
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	785b      	ldrb	r3, [r3, #1]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d114      	bne.n	8004c9a <HAL_PCD_EP_DB_Transmit+0x532>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2250      	movs	r2, #80	; 0x50
 8004c76:	5a9b      	ldrh	r3, [r3, r2]
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	001a      	movs	r2, r3
 8004c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c7e:	189b      	adds	r3, r3, r2
 8004c80:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	00da      	lsls	r2, r3, #3
 8004c88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c8a:	18d3      	adds	r3, r2, r3
 8004c8c:	4a72      	ldr	r2, [pc, #456]	; (8004e58 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004c8e:	4694      	mov	ip, r2
 8004c90:	4463      	add	r3, ip
 8004c92:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c96:	2200      	movs	r2, #0
 8004c98:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	781a      	ldrb	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	0011      	movs	r1, r2
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	f006 ff60 	bl	800bb68 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004ca8:	1dbb      	adds	r3, r7, #6
 8004caa:	881a      	ldrh	r2, [r3, #0]
 8004cac:	2380      	movs	r3, #128	; 0x80
 8004cae:	01db      	lsls	r3, r3, #7
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	d000      	beq.n	8004cb6 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004cb4:	e100      	b.n	8004eb8 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	001a      	movs	r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	18d3      	adds	r3, r2, r3
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	2046      	movs	r0, #70	; 0x46
 8004cca:	183b      	adds	r3, r7, r0
 8004ccc:	4966      	ldr	r1, [pc, #408]	; (8004e68 <HAL_PCD_EP_DB_Transmit+0x700>)
 8004cce:	400a      	ands	r2, r1
 8004cd0:	801a      	strh	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	001a      	movs	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	18d3      	adds	r3, r2, r3
 8004ce0:	183a      	adds	r2, r7, r0
 8004ce2:	8812      	ldrh	r2, [r2, #0]
 8004ce4:	4961      	ldr	r1, [pc, #388]	; (8004e6c <HAL_PCD_EP_DB_Transmit+0x704>)
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	b292      	uxth	r2, r2
 8004cea:	801a      	strh	r2, [r3, #0]
 8004cec:	e0e4      	b.n	8004eb8 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004cee:	1dbb      	adds	r3, r7, #6
 8004cf0:	881a      	ldrh	r2, [r3, #0]
 8004cf2:	2380      	movs	r3, #128	; 0x80
 8004cf4:	01db      	lsls	r3, r3, #7
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	d11a      	bne.n	8004d30 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	001a      	movs	r2, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	18d3      	adds	r3, r2, r3
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	204c      	movs	r0, #76	; 0x4c
 8004d0e:	183b      	adds	r3, r7, r0
 8004d10:	4955      	ldr	r1, [pc, #340]	; (8004e68 <HAL_PCD_EP_DB_Transmit+0x700>)
 8004d12:	400a      	ands	r2, r1
 8004d14:	801a      	strh	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	001a      	movs	r2, r3
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	18d3      	adds	r3, r2, r3
 8004d24:	183a      	adds	r2, r7, r0
 8004d26:	8812      	ldrh	r2, [r2, #0]
 8004d28:	4950      	ldr	r1, [pc, #320]	; (8004e6c <HAL_PCD_EP_DB_Transmit+0x704>)
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	b292      	uxth	r2, r2
 8004d2e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2224      	movs	r2, #36	; 0x24
 8004d34:	5c9b      	ldrb	r3, [r3, r2]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d000      	beq.n	8004d3c <HAL_PCD_EP_DB_Transmit+0x5d4>
 8004d3a:	e0bd      	b.n	8004eb8 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	695a      	ldr	r2, [r3, #20]
 8004d40:	214e      	movs	r1, #78	; 0x4e
 8004d42:	187b      	adds	r3, r7, r1
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	18d2      	adds	r2, r2, r3
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	69da      	ldr	r2, [r3, #28]
 8004d50:	187b      	adds	r3, r7, r1
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	18d2      	adds	r2, r2, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	6a1a      	ldr	r2, [r3, #32]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d309      	bcc.n	8004d7a <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	6a1a      	ldr	r2, [r3, #32]
 8004d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d72:	1ad2      	subs	r2, r2, r3
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	621a      	str	r2, [r3, #32]
 8004d78:	e016      	b.n	8004da8 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d108      	bne.n	8004d94 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8004d82:	234e      	movs	r3, #78	; 0x4e
 8004d84:	18fb      	adds	r3, r7, r3
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2224      	movs	r2, #36	; 0x24
 8004d8e:	2100      	movs	r1, #0
 8004d90:	5499      	strb	r1, [r3, r2]
 8004d92:	e009      	b.n	8004da8 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2224      	movs	r2, #36	; 0x24
 8004da4:	2100      	movs	r1, #0
 8004da6:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	667b      	str	r3, [r7, #100]	; 0x64
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	785b      	ldrb	r3, [r3, #1]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d15c      	bne.n	8004e70 <HAL_PCD_EP_DB_Transmit+0x708>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2250      	movs	r2, #80	; 0x50
 8004dc2:	5a9b      	ldrh	r3, [r3, r2]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	001a      	movs	r2, r3
 8004dc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dca:	189b      	adds	r3, r3, r2
 8004dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	00da      	lsls	r2, r3, #3
 8004dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dd6:	18d3      	adds	r3, r2, r3
 8004dd8:	4a1f      	ldr	r2, [pc, #124]	; (8004e58 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004dda:	4694      	mov	ip, r2
 8004ddc:	4463      	add	r3, ip
 8004dde:	65bb      	str	r3, [r7, #88]	; 0x58
 8004de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d110      	bne.n	8004e08 <HAL_PCD_EP_DB_Transmit+0x6a0>
 8004de6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	4a1c      	ldr	r2, [pc, #112]	; (8004e60 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8004dee:	4013      	ands	r3, r2
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004df4:	801a      	strh	r2, [r3, #0]
 8004df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	4a19      	ldr	r2, [pc, #100]	; (8004e64 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e04:	801a      	strh	r2, [r3, #0]
 8004e06:	e04d      	b.n	8004ea4 <HAL_PCD_EP_DB_Transmit+0x73c>
 8004e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e0a:	2b3e      	cmp	r3, #62	; 0x3e
 8004e0c:	d810      	bhi.n	8004e30 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e10:	085b      	lsrs	r3, r3, #1
 8004e12:	657b      	str	r3, [r7, #84]	; 0x54
 8004e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e16:	2201      	movs	r2, #1
 8004e18:	4013      	ands	r3, r2
 8004e1a:	d002      	beq.n	8004e22 <HAL_PCD_EP_DB_Transmit+0x6ba>
 8004e1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e1e:	3301      	adds	r3, #1
 8004e20:	657b      	str	r3, [r7, #84]	; 0x54
 8004e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	029b      	lsls	r3, r3, #10
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e2c:	801a      	strh	r2, [r3, #0]
 8004e2e:	e039      	b.n	8004ea4 <HAL_PCD_EP_DB_Transmit+0x73c>
 8004e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e32:	095b      	lsrs	r3, r3, #5
 8004e34:	657b      	str	r3, [r7, #84]	; 0x54
 8004e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e38:	221f      	movs	r2, #31
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	d102      	bne.n	8004e44 <HAL_PCD_EP_DB_Transmit+0x6dc>
 8004e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e40:	3b01      	subs	r3, #1
 8004e42:	657b      	str	r3, [r7, #84]	; 0x54
 8004e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	029b      	lsls	r3, r3, #10
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	4a05      	ldr	r2, [pc, #20]	; (8004e64 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e54:	801a      	strh	r2, [r3, #0]
 8004e56:	e025      	b.n	8004ea4 <HAL_PCD_EP_DB_Transmit+0x73c>
 8004e58:	00000406 	.word	0x00000406
 8004e5c:	00000402 	.word	0x00000402
 8004e60:	ffff83ff 	.word	0xffff83ff
 8004e64:	ffff8000 	.word	0xffff8000
 8004e68:	ffff8f8f 	.word	0xffff8f8f
 8004e6c:	ffffc080 	.word	0xffffc080
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	785b      	ldrb	r3, [r3, #1]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d115      	bne.n	8004ea4 <HAL_PCD_EP_DB_Transmit+0x73c>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2250      	movs	r2, #80	; 0x50
 8004e7e:	5a9b      	ldrh	r3, [r3, r2]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	001a      	movs	r2, r3
 8004e84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e86:	189b      	adds	r3, r3, r2
 8004e88:	667b      	str	r3, [r7, #100]	; 0x64
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	00da      	lsls	r2, r3, #3
 8004e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e92:	18d3      	adds	r3, r2, r3
 8004e94:	4a1e      	ldr	r2, [pc, #120]	; (8004f10 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8004e96:	4694      	mov	ip, r2
 8004e98:	4463      	add	r3, ip
 8004e9a:	663b      	str	r3, [r7, #96]	; 0x60
 8004e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ea2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	6959      	ldr	r1, [r3, #20]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	895a      	ldrh	r2, [r3, #10]
 8004eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	f004 fe10 	bl	8009ad8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	001a      	movs	r2, r3
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	18d3      	adds	r3, r2, r3
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	2010      	movs	r0, #16
 8004ecc:	183b      	adds	r3, r7, r0
 8004ece:	4911      	ldr	r1, [pc, #68]	; (8004f14 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8004ed0:	400a      	ands	r2, r1
 8004ed2:	801a      	strh	r2, [r3, #0]
 8004ed4:	183b      	adds	r3, r7, r0
 8004ed6:	183a      	adds	r2, r7, r0
 8004ed8:	8812      	ldrh	r2, [r2, #0]
 8004eda:	2110      	movs	r1, #16
 8004edc:	404a      	eors	r2, r1
 8004ede:	801a      	strh	r2, [r3, #0]
 8004ee0:	183b      	adds	r3, r7, r0
 8004ee2:	183a      	adds	r2, r7, r0
 8004ee4:	8812      	ldrh	r2, [r2, #0]
 8004ee6:	2120      	movs	r1, #32
 8004ee8:	404a      	eors	r2, r1
 8004eea:	801a      	strh	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	001a      	movs	r2, r3
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	18d3      	adds	r3, r2, r3
 8004efa:	183a      	adds	r2, r7, r0
 8004efc:	8812      	ldrh	r2, [r2, #0]
 8004efe:	4906      	ldr	r1, [pc, #24]	; (8004f18 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 8004f00:	430a      	orrs	r2, r1
 8004f02:	b292      	uxth	r2, r2
 8004f04:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	0018      	movs	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	b022      	add	sp, #136	; 0x88
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	00000406 	.word	0x00000406
 8004f14:	ffff8fbf 	.word	0xffff8fbf
 8004f18:	ffff8080 	.word	0xffff8080

08004f1c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004f1c:	b590      	push	{r4, r7, lr}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	0008      	movs	r0, r1
 8004f26:	0011      	movs	r1, r2
 8004f28:	607b      	str	r3, [r7, #4]
 8004f2a:	240a      	movs	r4, #10
 8004f2c:	193b      	adds	r3, r7, r4
 8004f2e:	1c02      	adds	r2, r0, #0
 8004f30:	801a      	strh	r2, [r3, #0]
 8004f32:	2308      	movs	r3, #8
 8004f34:	18fb      	adds	r3, r7, r3
 8004f36:	1c0a      	adds	r2, r1, #0
 8004f38:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004f3a:	0021      	movs	r1, r4
 8004f3c:	187b      	adds	r3, r7, r1
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	2280      	movs	r2, #128	; 0x80
 8004f42:	4013      	ands	r3, r2
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00c      	beq.n	8004f64 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f4a:	187b      	adds	r3, r7, r1
 8004f4c:	881b      	ldrh	r3, [r3, #0]
 8004f4e:	2207      	movs	r2, #7
 8004f50:	4013      	ands	r3, r2
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	0013      	movs	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	189b      	adds	r3, r3, r2
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	18d3      	adds	r3, r2, r3
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	e00b      	b.n	8004f7c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f64:	230a      	movs	r3, #10
 8004f66:	18fb      	adds	r3, r7, r3
 8004f68:	881a      	ldrh	r2, [r3, #0]
 8004f6a:	0013      	movs	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	189b      	adds	r3, r3, r2
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	3369      	adds	r3, #105	; 0x69
 8004f74:	33ff      	adds	r3, #255	; 0xff
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	18d3      	adds	r3, r2, r3
 8004f7a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004f7c:	2308      	movs	r3, #8
 8004f7e:	18fb      	adds	r3, r7, r3
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d107      	bne.n	8004f96 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	80da      	strh	r2, [r3, #6]
 8004f94:	e00b      	b.n	8004fae <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	0c1b      	lsrs	r3, r3, #16
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	b007      	add	sp, #28
 8004fb6:	bd90      	pop	{r4, r7, pc}

08004fb8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	23ba      	movs	r3, #186	; 0xba
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	2101      	movs	r1, #1
 8004fce:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	23b8      	movs	r3, #184	; 0xb8
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2254      	movs	r2, #84	; 0x54
 8004fde:	5a9b      	ldrh	r3, [r3, r2]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	b299      	uxth	r1, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2254      	movs	r2, #84	; 0x54
 8004fec:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2254      	movs	r2, #84	; 0x54
 8004ff2:	5a9b      	ldrh	r3, [r3, r2]
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	b299      	uxth	r1, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2254      	movs	r2, #84	; 0x54
 8005000:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	0018      	movs	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	b004      	add	sp, #16
 800500a:	bd80      	pop	{r7, pc}

0800500c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	000a      	movs	r2, r1
 8005016:	1cfb      	adds	r3, r7, #3
 8005018:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800501a:	46c0      	nop			; (mov r8, r8)
 800501c:	46bd      	mov	sp, r7
 800501e:	b002      	add	sp, #8
 8005020:	bd80      	pop	{r7, pc}
	...

08005024 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d102      	bne.n	8005038 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	f000 fb76 	bl	8005724 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2201      	movs	r2, #1
 800503e:	4013      	ands	r3, r2
 8005040:	d100      	bne.n	8005044 <HAL_RCC_OscConfig+0x20>
 8005042:	e08e      	b.n	8005162 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005044:	4bc5      	ldr	r3, [pc, #788]	; (800535c <HAL_RCC_OscConfig+0x338>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	220c      	movs	r2, #12
 800504a:	4013      	ands	r3, r2
 800504c:	2b04      	cmp	r3, #4
 800504e:	d00e      	beq.n	800506e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005050:	4bc2      	ldr	r3, [pc, #776]	; (800535c <HAL_RCC_OscConfig+0x338>)
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	220c      	movs	r2, #12
 8005056:	4013      	ands	r3, r2
 8005058:	2b08      	cmp	r3, #8
 800505a:	d117      	bne.n	800508c <HAL_RCC_OscConfig+0x68>
 800505c:	4bbf      	ldr	r3, [pc, #764]	; (800535c <HAL_RCC_OscConfig+0x338>)
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	23c0      	movs	r3, #192	; 0xc0
 8005062:	025b      	lsls	r3, r3, #9
 8005064:	401a      	ands	r2, r3
 8005066:	2380      	movs	r3, #128	; 0x80
 8005068:	025b      	lsls	r3, r3, #9
 800506a:	429a      	cmp	r2, r3
 800506c:	d10e      	bne.n	800508c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800506e:	4bbb      	ldr	r3, [pc, #748]	; (800535c <HAL_RCC_OscConfig+0x338>)
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	2380      	movs	r3, #128	; 0x80
 8005074:	029b      	lsls	r3, r3, #10
 8005076:	4013      	ands	r3, r2
 8005078:	d100      	bne.n	800507c <HAL_RCC_OscConfig+0x58>
 800507a:	e071      	b.n	8005160 <HAL_RCC_OscConfig+0x13c>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d000      	beq.n	8005086 <HAL_RCC_OscConfig+0x62>
 8005084:	e06c      	b.n	8005160 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	f000 fb4c 	bl	8005724 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d107      	bne.n	80050a4 <HAL_RCC_OscConfig+0x80>
 8005094:	4bb1      	ldr	r3, [pc, #708]	; (800535c <HAL_RCC_OscConfig+0x338>)
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	4bb0      	ldr	r3, [pc, #704]	; (800535c <HAL_RCC_OscConfig+0x338>)
 800509a:	2180      	movs	r1, #128	; 0x80
 800509c:	0249      	lsls	r1, r1, #9
 800509e:	430a      	orrs	r2, r1
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	e02f      	b.n	8005104 <HAL_RCC_OscConfig+0xe0>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10c      	bne.n	80050c6 <HAL_RCC_OscConfig+0xa2>
 80050ac:	4bab      	ldr	r3, [pc, #684]	; (800535c <HAL_RCC_OscConfig+0x338>)
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	4baa      	ldr	r3, [pc, #680]	; (800535c <HAL_RCC_OscConfig+0x338>)
 80050b2:	49ab      	ldr	r1, [pc, #684]	; (8005360 <HAL_RCC_OscConfig+0x33c>)
 80050b4:	400a      	ands	r2, r1
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	4ba8      	ldr	r3, [pc, #672]	; (800535c <HAL_RCC_OscConfig+0x338>)
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	4ba7      	ldr	r3, [pc, #668]	; (800535c <HAL_RCC_OscConfig+0x338>)
 80050be:	49a9      	ldr	r1, [pc, #676]	; (8005364 <HAL_RCC_OscConfig+0x340>)
 80050c0:	400a      	ands	r2, r1
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	e01e      	b.n	8005104 <HAL_RCC_OscConfig+0xe0>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b05      	cmp	r3, #5
 80050cc:	d10e      	bne.n	80050ec <HAL_RCC_OscConfig+0xc8>
 80050ce:	4ba3      	ldr	r3, [pc, #652]	; (800535c <HAL_RCC_OscConfig+0x338>)
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	4ba2      	ldr	r3, [pc, #648]	; (800535c <HAL_RCC_OscConfig+0x338>)
 80050d4:	2180      	movs	r1, #128	; 0x80
 80050d6:	02c9      	lsls	r1, r1, #11
 80050d8:	430a      	orrs	r2, r1
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	4b9f      	ldr	r3, [pc, #636]	; (800535c <HAL_RCC_OscConfig+0x338>)
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	4b9e      	ldr	r3, [pc, #632]	; (800535c <HAL_RCC_OscConfig+0x338>)
 80050e2:	2180      	movs	r1, #128	; 0x80
 80050e4:	0249      	lsls	r1, r1, #9
 80050e6:	430a      	orrs	r2, r1
 80050e8:	601a      	str	r2, [r3, #0]
 80050ea:	e00b      	b.n	8005104 <HAL_RCC_OscConfig+0xe0>
 80050ec:	4b9b      	ldr	r3, [pc, #620]	; (800535c <HAL_RCC_OscConfig+0x338>)
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	4b9a      	ldr	r3, [pc, #616]	; (800535c <HAL_RCC_OscConfig+0x338>)
 80050f2:	499b      	ldr	r1, [pc, #620]	; (8005360 <HAL_RCC_OscConfig+0x33c>)
 80050f4:	400a      	ands	r2, r1
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	4b98      	ldr	r3, [pc, #608]	; (800535c <HAL_RCC_OscConfig+0x338>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	4b97      	ldr	r3, [pc, #604]	; (800535c <HAL_RCC_OscConfig+0x338>)
 80050fe:	4999      	ldr	r1, [pc, #612]	; (8005364 <HAL_RCC_OscConfig+0x340>)
 8005100:	400a      	ands	r2, r1
 8005102:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d014      	beq.n	8005136 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510c:	f7fd f824 	bl	8002158 <HAL_GetTick>
 8005110:	0003      	movs	r3, r0
 8005112:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005114:	e008      	b.n	8005128 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005116:	f7fd f81f 	bl	8002158 <HAL_GetTick>
 800511a:	0002      	movs	r2, r0
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b64      	cmp	r3, #100	; 0x64
 8005122:	d901      	bls.n	8005128 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e2fd      	b.n	8005724 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005128:	4b8c      	ldr	r3, [pc, #560]	; (800535c <HAL_RCC_OscConfig+0x338>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	2380      	movs	r3, #128	; 0x80
 800512e:	029b      	lsls	r3, r3, #10
 8005130:	4013      	ands	r3, r2
 8005132:	d0f0      	beq.n	8005116 <HAL_RCC_OscConfig+0xf2>
 8005134:	e015      	b.n	8005162 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005136:	f7fd f80f 	bl	8002158 <HAL_GetTick>
 800513a:	0003      	movs	r3, r0
 800513c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005140:	f7fd f80a 	bl	8002158 <HAL_GetTick>
 8005144:	0002      	movs	r2, r0
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b64      	cmp	r3, #100	; 0x64
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e2e8      	b.n	8005724 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005152:	4b82      	ldr	r3, [pc, #520]	; (800535c <HAL_RCC_OscConfig+0x338>)
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	2380      	movs	r3, #128	; 0x80
 8005158:	029b      	lsls	r3, r3, #10
 800515a:	4013      	ands	r3, r2
 800515c:	d1f0      	bne.n	8005140 <HAL_RCC_OscConfig+0x11c>
 800515e:	e000      	b.n	8005162 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005160:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2202      	movs	r2, #2
 8005168:	4013      	ands	r3, r2
 800516a:	d100      	bne.n	800516e <HAL_RCC_OscConfig+0x14a>
 800516c:	e06c      	b.n	8005248 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800516e:	4b7b      	ldr	r3, [pc, #492]	; (800535c <HAL_RCC_OscConfig+0x338>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	220c      	movs	r2, #12
 8005174:	4013      	ands	r3, r2
 8005176:	d00e      	beq.n	8005196 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005178:	4b78      	ldr	r3, [pc, #480]	; (800535c <HAL_RCC_OscConfig+0x338>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	220c      	movs	r2, #12
 800517e:	4013      	ands	r3, r2
 8005180:	2b08      	cmp	r3, #8
 8005182:	d11f      	bne.n	80051c4 <HAL_RCC_OscConfig+0x1a0>
 8005184:	4b75      	ldr	r3, [pc, #468]	; (800535c <HAL_RCC_OscConfig+0x338>)
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	23c0      	movs	r3, #192	; 0xc0
 800518a:	025b      	lsls	r3, r3, #9
 800518c:	401a      	ands	r2, r3
 800518e:	2380      	movs	r3, #128	; 0x80
 8005190:	021b      	lsls	r3, r3, #8
 8005192:	429a      	cmp	r2, r3
 8005194:	d116      	bne.n	80051c4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005196:	4b71      	ldr	r3, [pc, #452]	; (800535c <HAL_RCC_OscConfig+0x338>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2202      	movs	r2, #2
 800519c:	4013      	ands	r3, r2
 800519e:	d005      	beq.n	80051ac <HAL_RCC_OscConfig+0x188>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d001      	beq.n	80051ac <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e2bb      	b.n	8005724 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ac:	4b6b      	ldr	r3, [pc, #428]	; (800535c <HAL_RCC_OscConfig+0x338>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	22f8      	movs	r2, #248	; 0xf8
 80051b2:	4393      	bics	r3, r2
 80051b4:	0019      	movs	r1, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	00da      	lsls	r2, r3, #3
 80051bc:	4b67      	ldr	r3, [pc, #412]	; (800535c <HAL_RCC_OscConfig+0x338>)
 80051be:	430a      	orrs	r2, r1
 80051c0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051c2:	e041      	b.n	8005248 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d024      	beq.n	8005216 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051cc:	4b63      	ldr	r3, [pc, #396]	; (800535c <HAL_RCC_OscConfig+0x338>)
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	4b62      	ldr	r3, [pc, #392]	; (800535c <HAL_RCC_OscConfig+0x338>)
 80051d2:	2101      	movs	r1, #1
 80051d4:	430a      	orrs	r2, r1
 80051d6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051d8:	f7fc ffbe 	bl	8002158 <HAL_GetTick>
 80051dc:	0003      	movs	r3, r0
 80051de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e0:	e008      	b.n	80051f4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051e2:	f7fc ffb9 	bl	8002158 <HAL_GetTick>
 80051e6:	0002      	movs	r2, r0
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e297      	b.n	8005724 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f4:	4b59      	ldr	r3, [pc, #356]	; (800535c <HAL_RCC_OscConfig+0x338>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2202      	movs	r2, #2
 80051fa:	4013      	ands	r3, r2
 80051fc:	d0f1      	beq.n	80051e2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051fe:	4b57      	ldr	r3, [pc, #348]	; (800535c <HAL_RCC_OscConfig+0x338>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	22f8      	movs	r2, #248	; 0xf8
 8005204:	4393      	bics	r3, r2
 8005206:	0019      	movs	r1, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	00da      	lsls	r2, r3, #3
 800520e:	4b53      	ldr	r3, [pc, #332]	; (800535c <HAL_RCC_OscConfig+0x338>)
 8005210:	430a      	orrs	r2, r1
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	e018      	b.n	8005248 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005216:	4b51      	ldr	r3, [pc, #324]	; (800535c <HAL_RCC_OscConfig+0x338>)
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	4b50      	ldr	r3, [pc, #320]	; (800535c <HAL_RCC_OscConfig+0x338>)
 800521c:	2101      	movs	r1, #1
 800521e:	438a      	bics	r2, r1
 8005220:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005222:	f7fc ff99 	bl	8002158 <HAL_GetTick>
 8005226:	0003      	movs	r3, r0
 8005228:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800522c:	f7fc ff94 	bl	8002158 <HAL_GetTick>
 8005230:	0002      	movs	r2, r0
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e272      	b.n	8005724 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800523e:	4b47      	ldr	r3, [pc, #284]	; (800535c <HAL_RCC_OscConfig+0x338>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2202      	movs	r2, #2
 8005244:	4013      	ands	r3, r2
 8005246:	d1f1      	bne.n	800522c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2208      	movs	r2, #8
 800524e:	4013      	ands	r3, r2
 8005250:	d036      	beq.n	80052c0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d019      	beq.n	800528e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800525a:	4b40      	ldr	r3, [pc, #256]	; (800535c <HAL_RCC_OscConfig+0x338>)
 800525c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800525e:	4b3f      	ldr	r3, [pc, #252]	; (800535c <HAL_RCC_OscConfig+0x338>)
 8005260:	2101      	movs	r1, #1
 8005262:	430a      	orrs	r2, r1
 8005264:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005266:	f7fc ff77 	bl	8002158 <HAL_GetTick>
 800526a:	0003      	movs	r3, r0
 800526c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005270:	f7fc ff72 	bl	8002158 <HAL_GetTick>
 8005274:	0002      	movs	r2, r0
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e250      	b.n	8005724 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005282:	4b36      	ldr	r3, [pc, #216]	; (800535c <HAL_RCC_OscConfig+0x338>)
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	2202      	movs	r2, #2
 8005288:	4013      	ands	r3, r2
 800528a:	d0f1      	beq.n	8005270 <HAL_RCC_OscConfig+0x24c>
 800528c:	e018      	b.n	80052c0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800528e:	4b33      	ldr	r3, [pc, #204]	; (800535c <HAL_RCC_OscConfig+0x338>)
 8005290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005292:	4b32      	ldr	r3, [pc, #200]	; (800535c <HAL_RCC_OscConfig+0x338>)
 8005294:	2101      	movs	r1, #1
 8005296:	438a      	bics	r2, r1
 8005298:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800529a:	f7fc ff5d 	bl	8002158 <HAL_GetTick>
 800529e:	0003      	movs	r3, r0
 80052a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052a4:	f7fc ff58 	bl	8002158 <HAL_GetTick>
 80052a8:	0002      	movs	r2, r0
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e236      	b.n	8005724 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052b6:	4b29      	ldr	r3, [pc, #164]	; (800535c <HAL_RCC_OscConfig+0x338>)
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	2202      	movs	r2, #2
 80052bc:	4013      	ands	r3, r2
 80052be:	d1f1      	bne.n	80052a4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2204      	movs	r2, #4
 80052c6:	4013      	ands	r3, r2
 80052c8:	d100      	bne.n	80052cc <HAL_RCC_OscConfig+0x2a8>
 80052ca:	e0b5      	b.n	8005438 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052cc:	201f      	movs	r0, #31
 80052ce:	183b      	adds	r3, r7, r0
 80052d0:	2200      	movs	r2, #0
 80052d2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052d4:	4b21      	ldr	r3, [pc, #132]	; (800535c <HAL_RCC_OscConfig+0x338>)
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	2380      	movs	r3, #128	; 0x80
 80052da:	055b      	lsls	r3, r3, #21
 80052dc:	4013      	ands	r3, r2
 80052de:	d110      	bne.n	8005302 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052e0:	4b1e      	ldr	r3, [pc, #120]	; (800535c <HAL_RCC_OscConfig+0x338>)
 80052e2:	69da      	ldr	r2, [r3, #28]
 80052e4:	4b1d      	ldr	r3, [pc, #116]	; (800535c <HAL_RCC_OscConfig+0x338>)
 80052e6:	2180      	movs	r1, #128	; 0x80
 80052e8:	0549      	lsls	r1, r1, #21
 80052ea:	430a      	orrs	r2, r1
 80052ec:	61da      	str	r2, [r3, #28]
 80052ee:	4b1b      	ldr	r3, [pc, #108]	; (800535c <HAL_RCC_OscConfig+0x338>)
 80052f0:	69da      	ldr	r2, [r3, #28]
 80052f2:	2380      	movs	r3, #128	; 0x80
 80052f4:	055b      	lsls	r3, r3, #21
 80052f6:	4013      	ands	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80052fc:	183b      	adds	r3, r7, r0
 80052fe:	2201      	movs	r2, #1
 8005300:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005302:	4b19      	ldr	r3, [pc, #100]	; (8005368 <HAL_RCC_OscConfig+0x344>)
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	2380      	movs	r3, #128	; 0x80
 8005308:	005b      	lsls	r3, r3, #1
 800530a:	4013      	ands	r3, r2
 800530c:	d11a      	bne.n	8005344 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800530e:	4b16      	ldr	r3, [pc, #88]	; (8005368 <HAL_RCC_OscConfig+0x344>)
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	4b15      	ldr	r3, [pc, #84]	; (8005368 <HAL_RCC_OscConfig+0x344>)
 8005314:	2180      	movs	r1, #128	; 0x80
 8005316:	0049      	lsls	r1, r1, #1
 8005318:	430a      	orrs	r2, r1
 800531a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800531c:	f7fc ff1c 	bl	8002158 <HAL_GetTick>
 8005320:	0003      	movs	r3, r0
 8005322:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005324:	e008      	b.n	8005338 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005326:	f7fc ff17 	bl	8002158 <HAL_GetTick>
 800532a:	0002      	movs	r2, r0
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b64      	cmp	r3, #100	; 0x64
 8005332:	d901      	bls.n	8005338 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e1f5      	b.n	8005724 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005338:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <HAL_RCC_OscConfig+0x344>)
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	2380      	movs	r3, #128	; 0x80
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	4013      	ands	r3, r2
 8005342:	d0f0      	beq.n	8005326 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d10f      	bne.n	800536c <HAL_RCC_OscConfig+0x348>
 800534c:	4b03      	ldr	r3, [pc, #12]	; (800535c <HAL_RCC_OscConfig+0x338>)
 800534e:	6a1a      	ldr	r2, [r3, #32]
 8005350:	4b02      	ldr	r3, [pc, #8]	; (800535c <HAL_RCC_OscConfig+0x338>)
 8005352:	2101      	movs	r1, #1
 8005354:	430a      	orrs	r2, r1
 8005356:	621a      	str	r2, [r3, #32]
 8005358:	e036      	b.n	80053c8 <HAL_RCC_OscConfig+0x3a4>
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	40021000 	.word	0x40021000
 8005360:	fffeffff 	.word	0xfffeffff
 8005364:	fffbffff 	.word	0xfffbffff
 8005368:	40007000 	.word	0x40007000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10c      	bne.n	800538e <HAL_RCC_OscConfig+0x36a>
 8005374:	4bca      	ldr	r3, [pc, #808]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 8005376:	6a1a      	ldr	r2, [r3, #32]
 8005378:	4bc9      	ldr	r3, [pc, #804]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 800537a:	2101      	movs	r1, #1
 800537c:	438a      	bics	r2, r1
 800537e:	621a      	str	r2, [r3, #32]
 8005380:	4bc7      	ldr	r3, [pc, #796]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 8005382:	6a1a      	ldr	r2, [r3, #32]
 8005384:	4bc6      	ldr	r3, [pc, #792]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 8005386:	2104      	movs	r1, #4
 8005388:	438a      	bics	r2, r1
 800538a:	621a      	str	r2, [r3, #32]
 800538c:	e01c      	b.n	80053c8 <HAL_RCC_OscConfig+0x3a4>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	2b05      	cmp	r3, #5
 8005394:	d10c      	bne.n	80053b0 <HAL_RCC_OscConfig+0x38c>
 8005396:	4bc2      	ldr	r3, [pc, #776]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 8005398:	6a1a      	ldr	r2, [r3, #32]
 800539a:	4bc1      	ldr	r3, [pc, #772]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 800539c:	2104      	movs	r1, #4
 800539e:	430a      	orrs	r2, r1
 80053a0:	621a      	str	r2, [r3, #32]
 80053a2:	4bbf      	ldr	r3, [pc, #764]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 80053a4:	6a1a      	ldr	r2, [r3, #32]
 80053a6:	4bbe      	ldr	r3, [pc, #760]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 80053a8:	2101      	movs	r1, #1
 80053aa:	430a      	orrs	r2, r1
 80053ac:	621a      	str	r2, [r3, #32]
 80053ae:	e00b      	b.n	80053c8 <HAL_RCC_OscConfig+0x3a4>
 80053b0:	4bbb      	ldr	r3, [pc, #748]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 80053b2:	6a1a      	ldr	r2, [r3, #32]
 80053b4:	4bba      	ldr	r3, [pc, #744]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 80053b6:	2101      	movs	r1, #1
 80053b8:	438a      	bics	r2, r1
 80053ba:	621a      	str	r2, [r3, #32]
 80053bc:	4bb8      	ldr	r3, [pc, #736]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 80053be:	6a1a      	ldr	r2, [r3, #32]
 80053c0:	4bb7      	ldr	r3, [pc, #732]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 80053c2:	2104      	movs	r1, #4
 80053c4:	438a      	bics	r2, r1
 80053c6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d014      	beq.n	80053fa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053d0:	f7fc fec2 	bl	8002158 <HAL_GetTick>
 80053d4:	0003      	movs	r3, r0
 80053d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d8:	e009      	b.n	80053ee <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053da:	f7fc febd 	bl	8002158 <HAL_GetTick>
 80053de:	0002      	movs	r2, r0
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	4aaf      	ldr	r2, [pc, #700]	; (80056a4 <HAL_RCC_OscConfig+0x680>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e19a      	b.n	8005724 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ee:	4bac      	ldr	r3, [pc, #688]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	2202      	movs	r2, #2
 80053f4:	4013      	ands	r3, r2
 80053f6:	d0f0      	beq.n	80053da <HAL_RCC_OscConfig+0x3b6>
 80053f8:	e013      	b.n	8005422 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053fa:	f7fc fead 	bl	8002158 <HAL_GetTick>
 80053fe:	0003      	movs	r3, r0
 8005400:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005402:	e009      	b.n	8005418 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005404:	f7fc fea8 	bl	8002158 <HAL_GetTick>
 8005408:	0002      	movs	r2, r0
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	4aa5      	ldr	r2, [pc, #660]	; (80056a4 <HAL_RCC_OscConfig+0x680>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d901      	bls.n	8005418 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e185      	b.n	8005724 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005418:	4ba1      	ldr	r3, [pc, #644]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	2202      	movs	r2, #2
 800541e:	4013      	ands	r3, r2
 8005420:	d1f0      	bne.n	8005404 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005422:	231f      	movs	r3, #31
 8005424:	18fb      	adds	r3, r7, r3
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d105      	bne.n	8005438 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800542c:	4b9c      	ldr	r3, [pc, #624]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 800542e:	69da      	ldr	r2, [r3, #28]
 8005430:	4b9b      	ldr	r3, [pc, #620]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 8005432:	499d      	ldr	r1, [pc, #628]	; (80056a8 <HAL_RCC_OscConfig+0x684>)
 8005434:	400a      	ands	r2, r1
 8005436:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2210      	movs	r2, #16
 800543e:	4013      	ands	r3, r2
 8005440:	d063      	beq.n	800550a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d12a      	bne.n	80054a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800544a:	4b95      	ldr	r3, [pc, #596]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 800544c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800544e:	4b94      	ldr	r3, [pc, #592]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 8005450:	2104      	movs	r1, #4
 8005452:	430a      	orrs	r2, r1
 8005454:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005456:	4b92      	ldr	r3, [pc, #584]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 8005458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800545a:	4b91      	ldr	r3, [pc, #580]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 800545c:	2101      	movs	r1, #1
 800545e:	430a      	orrs	r2, r1
 8005460:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005462:	f7fc fe79 	bl	8002158 <HAL_GetTick>
 8005466:	0003      	movs	r3, r0
 8005468:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800546c:	f7fc fe74 	bl	8002158 <HAL_GetTick>
 8005470:	0002      	movs	r2, r0
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e152      	b.n	8005724 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800547e:	4b88      	ldr	r3, [pc, #544]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 8005480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005482:	2202      	movs	r2, #2
 8005484:	4013      	ands	r3, r2
 8005486:	d0f1      	beq.n	800546c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005488:	4b85      	ldr	r3, [pc, #532]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 800548a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548c:	22f8      	movs	r2, #248	; 0xf8
 800548e:	4393      	bics	r3, r2
 8005490:	0019      	movs	r1, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	00da      	lsls	r2, r3, #3
 8005498:	4b81      	ldr	r3, [pc, #516]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 800549a:	430a      	orrs	r2, r1
 800549c:	635a      	str	r2, [r3, #52]	; 0x34
 800549e:	e034      	b.n	800550a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	3305      	adds	r3, #5
 80054a6:	d111      	bne.n	80054cc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80054a8:	4b7d      	ldr	r3, [pc, #500]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 80054aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054ac:	4b7c      	ldr	r3, [pc, #496]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 80054ae:	2104      	movs	r1, #4
 80054b0:	438a      	bics	r2, r1
 80054b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80054b4:	4b7a      	ldr	r3, [pc, #488]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 80054b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b8:	22f8      	movs	r2, #248	; 0xf8
 80054ba:	4393      	bics	r3, r2
 80054bc:	0019      	movs	r1, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	00da      	lsls	r2, r3, #3
 80054c4:	4b76      	ldr	r3, [pc, #472]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 80054c6:	430a      	orrs	r2, r1
 80054c8:	635a      	str	r2, [r3, #52]	; 0x34
 80054ca:	e01e      	b.n	800550a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80054cc:	4b74      	ldr	r3, [pc, #464]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 80054ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054d0:	4b73      	ldr	r3, [pc, #460]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 80054d2:	2104      	movs	r1, #4
 80054d4:	430a      	orrs	r2, r1
 80054d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80054d8:	4b71      	ldr	r3, [pc, #452]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 80054da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054dc:	4b70      	ldr	r3, [pc, #448]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 80054de:	2101      	movs	r1, #1
 80054e0:	438a      	bics	r2, r1
 80054e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054e4:	f7fc fe38 	bl	8002158 <HAL_GetTick>
 80054e8:	0003      	movs	r3, r0
 80054ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80054ee:	f7fc fe33 	bl	8002158 <HAL_GetTick>
 80054f2:	0002      	movs	r2, r0
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e111      	b.n	8005724 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005500:	4b67      	ldr	r3, [pc, #412]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 8005502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005504:	2202      	movs	r2, #2
 8005506:	4013      	ands	r3, r2
 8005508:	d1f1      	bne.n	80054ee <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2220      	movs	r2, #32
 8005510:	4013      	ands	r3, r2
 8005512:	d05c      	beq.n	80055ce <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005514:	4b62      	ldr	r3, [pc, #392]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	220c      	movs	r2, #12
 800551a:	4013      	ands	r3, r2
 800551c:	2b0c      	cmp	r3, #12
 800551e:	d00e      	beq.n	800553e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005520:	4b5f      	ldr	r3, [pc, #380]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	220c      	movs	r2, #12
 8005526:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005528:	2b08      	cmp	r3, #8
 800552a:	d114      	bne.n	8005556 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800552c:	4b5c      	ldr	r3, [pc, #368]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	23c0      	movs	r3, #192	; 0xc0
 8005532:	025b      	lsls	r3, r3, #9
 8005534:	401a      	ands	r2, r3
 8005536:	23c0      	movs	r3, #192	; 0xc0
 8005538:	025b      	lsls	r3, r3, #9
 800553a:	429a      	cmp	r2, r3
 800553c:	d10b      	bne.n	8005556 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800553e:	4b58      	ldr	r3, [pc, #352]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 8005540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005542:	2380      	movs	r3, #128	; 0x80
 8005544:	025b      	lsls	r3, r3, #9
 8005546:	4013      	ands	r3, r2
 8005548:	d040      	beq.n	80055cc <HAL_RCC_OscConfig+0x5a8>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d03c      	beq.n	80055cc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e0e6      	b.n	8005724 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d01b      	beq.n	8005596 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800555e:	4b50      	ldr	r3, [pc, #320]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 8005560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005562:	4b4f      	ldr	r3, [pc, #316]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 8005564:	2180      	movs	r1, #128	; 0x80
 8005566:	0249      	lsls	r1, r1, #9
 8005568:	430a      	orrs	r2, r1
 800556a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556c:	f7fc fdf4 	bl	8002158 <HAL_GetTick>
 8005570:	0003      	movs	r3, r0
 8005572:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005574:	e008      	b.n	8005588 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005576:	f7fc fdef 	bl	8002158 <HAL_GetTick>
 800557a:	0002      	movs	r2, r0
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d901      	bls.n	8005588 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e0cd      	b.n	8005724 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005588:	4b45      	ldr	r3, [pc, #276]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 800558a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800558c:	2380      	movs	r3, #128	; 0x80
 800558e:	025b      	lsls	r3, r3, #9
 8005590:	4013      	ands	r3, r2
 8005592:	d0f0      	beq.n	8005576 <HAL_RCC_OscConfig+0x552>
 8005594:	e01b      	b.n	80055ce <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005596:	4b42      	ldr	r3, [pc, #264]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 8005598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800559a:	4b41      	ldr	r3, [pc, #260]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 800559c:	4943      	ldr	r1, [pc, #268]	; (80056ac <HAL_RCC_OscConfig+0x688>)
 800559e:	400a      	ands	r2, r1
 80055a0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a2:	f7fc fdd9 	bl	8002158 <HAL_GetTick>
 80055a6:	0003      	movs	r3, r0
 80055a8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055ac:	f7fc fdd4 	bl	8002158 <HAL_GetTick>
 80055b0:	0002      	movs	r2, r0
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e0b2      	b.n	8005724 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80055be:	4b38      	ldr	r3, [pc, #224]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 80055c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055c2:	2380      	movs	r3, #128	; 0x80
 80055c4:	025b      	lsls	r3, r3, #9
 80055c6:	4013      	ands	r3, r2
 80055c8:	d1f0      	bne.n	80055ac <HAL_RCC_OscConfig+0x588>
 80055ca:	e000      	b.n	80055ce <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80055cc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d100      	bne.n	80055d8 <HAL_RCC_OscConfig+0x5b4>
 80055d6:	e0a4      	b.n	8005722 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055d8:	4b31      	ldr	r3, [pc, #196]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	220c      	movs	r2, #12
 80055de:	4013      	ands	r3, r2
 80055e0:	2b08      	cmp	r3, #8
 80055e2:	d100      	bne.n	80055e6 <HAL_RCC_OscConfig+0x5c2>
 80055e4:	e078      	b.n	80056d8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d14c      	bne.n	8005688 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ee:	4b2c      	ldr	r3, [pc, #176]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	4b2b      	ldr	r3, [pc, #172]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 80055f4:	492e      	ldr	r1, [pc, #184]	; (80056b0 <HAL_RCC_OscConfig+0x68c>)
 80055f6:	400a      	ands	r2, r1
 80055f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055fa:	f7fc fdad 	bl	8002158 <HAL_GetTick>
 80055fe:	0003      	movs	r3, r0
 8005600:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005604:	f7fc fda8 	bl	8002158 <HAL_GetTick>
 8005608:	0002      	movs	r2, r0
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e086      	b.n	8005724 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005616:	4b22      	ldr	r3, [pc, #136]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	2380      	movs	r3, #128	; 0x80
 800561c:	049b      	lsls	r3, r3, #18
 800561e:	4013      	ands	r3, r2
 8005620:	d1f0      	bne.n	8005604 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005622:	4b1f      	ldr	r3, [pc, #124]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 8005624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005626:	220f      	movs	r2, #15
 8005628:	4393      	bics	r3, r2
 800562a:	0019      	movs	r1, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005630:	4b1b      	ldr	r3, [pc, #108]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 8005632:	430a      	orrs	r2, r1
 8005634:	62da      	str	r2, [r3, #44]	; 0x2c
 8005636:	4b1a      	ldr	r3, [pc, #104]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	4a1e      	ldr	r2, [pc, #120]	; (80056b4 <HAL_RCC_OscConfig+0x690>)
 800563c:	4013      	ands	r3, r2
 800563e:	0019      	movs	r1, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005648:	431a      	orrs	r2, r3
 800564a:	4b15      	ldr	r3, [pc, #84]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 800564c:	430a      	orrs	r2, r1
 800564e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005650:	4b13      	ldr	r3, [pc, #76]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	4b12      	ldr	r3, [pc, #72]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 8005656:	2180      	movs	r1, #128	; 0x80
 8005658:	0449      	lsls	r1, r1, #17
 800565a:	430a      	orrs	r2, r1
 800565c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800565e:	f7fc fd7b 	bl	8002158 <HAL_GetTick>
 8005662:	0003      	movs	r3, r0
 8005664:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005668:	f7fc fd76 	bl	8002158 <HAL_GetTick>
 800566c:	0002      	movs	r2, r0
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e054      	b.n	8005724 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800567a:	4b09      	ldr	r3, [pc, #36]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	2380      	movs	r3, #128	; 0x80
 8005680:	049b      	lsls	r3, r3, #18
 8005682:	4013      	ands	r3, r2
 8005684:	d0f0      	beq.n	8005668 <HAL_RCC_OscConfig+0x644>
 8005686:	e04c      	b.n	8005722 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005688:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	4b04      	ldr	r3, [pc, #16]	; (80056a0 <HAL_RCC_OscConfig+0x67c>)
 800568e:	4908      	ldr	r1, [pc, #32]	; (80056b0 <HAL_RCC_OscConfig+0x68c>)
 8005690:	400a      	ands	r2, r1
 8005692:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005694:	f7fc fd60 	bl	8002158 <HAL_GetTick>
 8005698:	0003      	movs	r3, r0
 800569a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800569c:	e015      	b.n	80056ca <HAL_RCC_OscConfig+0x6a6>
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	40021000 	.word	0x40021000
 80056a4:	00001388 	.word	0x00001388
 80056a8:	efffffff 	.word	0xefffffff
 80056ac:	fffeffff 	.word	0xfffeffff
 80056b0:	feffffff 	.word	0xfeffffff
 80056b4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056b8:	f7fc fd4e 	bl	8002158 <HAL_GetTick>
 80056bc:	0002      	movs	r2, r0
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e02c      	b.n	8005724 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056ca:	4b18      	ldr	r3, [pc, #96]	; (800572c <HAL_RCC_OscConfig+0x708>)
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	2380      	movs	r3, #128	; 0x80
 80056d0:	049b      	lsls	r3, r3, #18
 80056d2:	4013      	ands	r3, r2
 80056d4:	d1f0      	bne.n	80056b8 <HAL_RCC_OscConfig+0x694>
 80056d6:	e024      	b.n	8005722 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d101      	bne.n	80056e4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e01f      	b.n	8005724 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80056e4:	4b11      	ldr	r3, [pc, #68]	; (800572c <HAL_RCC_OscConfig+0x708>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80056ea:	4b10      	ldr	r3, [pc, #64]	; (800572c <HAL_RCC_OscConfig+0x708>)
 80056ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ee:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	23c0      	movs	r3, #192	; 0xc0
 80056f4:	025b      	lsls	r3, r3, #9
 80056f6:	401a      	ands	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d10e      	bne.n	800571e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	220f      	movs	r2, #15
 8005704:	401a      	ands	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800570a:	429a      	cmp	r2, r3
 800570c:	d107      	bne.n	800571e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	23f0      	movs	r3, #240	; 0xf0
 8005712:	039b      	lsls	r3, r3, #14
 8005714:	401a      	ands	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800571a:	429a      	cmp	r2, r3
 800571c:	d001      	beq.n	8005722 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	0018      	movs	r0, r3
 8005726:	46bd      	mov	sp, r7
 8005728:	b008      	add	sp, #32
 800572a:	bd80      	pop	{r7, pc}
 800572c:	40021000 	.word	0x40021000

08005730 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e0bf      	b.n	80058c4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005744:	4b61      	ldr	r3, [pc, #388]	; (80058cc <HAL_RCC_ClockConfig+0x19c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2201      	movs	r2, #1
 800574a:	4013      	ands	r3, r2
 800574c:	683a      	ldr	r2, [r7, #0]
 800574e:	429a      	cmp	r2, r3
 8005750:	d911      	bls.n	8005776 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005752:	4b5e      	ldr	r3, [pc, #376]	; (80058cc <HAL_RCC_ClockConfig+0x19c>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2201      	movs	r2, #1
 8005758:	4393      	bics	r3, r2
 800575a:	0019      	movs	r1, r3
 800575c:	4b5b      	ldr	r3, [pc, #364]	; (80058cc <HAL_RCC_ClockConfig+0x19c>)
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	430a      	orrs	r2, r1
 8005762:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005764:	4b59      	ldr	r3, [pc, #356]	; (80058cc <HAL_RCC_ClockConfig+0x19c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2201      	movs	r2, #1
 800576a:	4013      	ands	r3, r2
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	429a      	cmp	r2, r3
 8005770:	d001      	beq.n	8005776 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e0a6      	b.n	80058c4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2202      	movs	r2, #2
 800577c:	4013      	ands	r3, r2
 800577e:	d015      	beq.n	80057ac <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2204      	movs	r2, #4
 8005786:	4013      	ands	r3, r2
 8005788:	d006      	beq.n	8005798 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800578a:	4b51      	ldr	r3, [pc, #324]	; (80058d0 <HAL_RCC_ClockConfig+0x1a0>)
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	4b50      	ldr	r3, [pc, #320]	; (80058d0 <HAL_RCC_ClockConfig+0x1a0>)
 8005790:	21e0      	movs	r1, #224	; 0xe0
 8005792:	00c9      	lsls	r1, r1, #3
 8005794:	430a      	orrs	r2, r1
 8005796:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005798:	4b4d      	ldr	r3, [pc, #308]	; (80058d0 <HAL_RCC_ClockConfig+0x1a0>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	22f0      	movs	r2, #240	; 0xf0
 800579e:	4393      	bics	r3, r2
 80057a0:	0019      	movs	r1, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	4b4a      	ldr	r3, [pc, #296]	; (80058d0 <HAL_RCC_ClockConfig+0x1a0>)
 80057a8:	430a      	orrs	r2, r1
 80057aa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2201      	movs	r2, #1
 80057b2:	4013      	ands	r3, r2
 80057b4:	d04c      	beq.n	8005850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d107      	bne.n	80057ce <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057be:	4b44      	ldr	r3, [pc, #272]	; (80058d0 <HAL_RCC_ClockConfig+0x1a0>)
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	2380      	movs	r3, #128	; 0x80
 80057c4:	029b      	lsls	r3, r3, #10
 80057c6:	4013      	ands	r3, r2
 80057c8:	d120      	bne.n	800580c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e07a      	b.n	80058c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d107      	bne.n	80057e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057d6:	4b3e      	ldr	r3, [pc, #248]	; (80058d0 <HAL_RCC_ClockConfig+0x1a0>)
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	2380      	movs	r3, #128	; 0x80
 80057dc:	049b      	lsls	r3, r3, #18
 80057de:	4013      	ands	r3, r2
 80057e0:	d114      	bne.n	800580c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e06e      	b.n	80058c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d107      	bne.n	80057fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80057ee:	4b38      	ldr	r3, [pc, #224]	; (80058d0 <HAL_RCC_ClockConfig+0x1a0>)
 80057f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057f2:	2380      	movs	r3, #128	; 0x80
 80057f4:	025b      	lsls	r3, r3, #9
 80057f6:	4013      	ands	r3, r2
 80057f8:	d108      	bne.n	800580c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e062      	b.n	80058c4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057fe:	4b34      	ldr	r3, [pc, #208]	; (80058d0 <HAL_RCC_ClockConfig+0x1a0>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2202      	movs	r2, #2
 8005804:	4013      	ands	r3, r2
 8005806:	d101      	bne.n	800580c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e05b      	b.n	80058c4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800580c:	4b30      	ldr	r3, [pc, #192]	; (80058d0 <HAL_RCC_ClockConfig+0x1a0>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2203      	movs	r2, #3
 8005812:	4393      	bics	r3, r2
 8005814:	0019      	movs	r1, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	4b2d      	ldr	r3, [pc, #180]	; (80058d0 <HAL_RCC_ClockConfig+0x1a0>)
 800581c:	430a      	orrs	r2, r1
 800581e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005820:	f7fc fc9a 	bl	8002158 <HAL_GetTick>
 8005824:	0003      	movs	r3, r0
 8005826:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005828:	e009      	b.n	800583e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800582a:	f7fc fc95 	bl	8002158 <HAL_GetTick>
 800582e:	0002      	movs	r2, r0
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	4a27      	ldr	r2, [pc, #156]	; (80058d4 <HAL_RCC_ClockConfig+0x1a4>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d901      	bls.n	800583e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e042      	b.n	80058c4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800583e:	4b24      	ldr	r3, [pc, #144]	; (80058d0 <HAL_RCC_ClockConfig+0x1a0>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	220c      	movs	r2, #12
 8005844:	401a      	ands	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	429a      	cmp	r2, r3
 800584e:	d1ec      	bne.n	800582a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005850:	4b1e      	ldr	r3, [pc, #120]	; (80058cc <HAL_RCC_ClockConfig+0x19c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2201      	movs	r2, #1
 8005856:	4013      	ands	r3, r2
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d211      	bcs.n	8005882 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800585e:	4b1b      	ldr	r3, [pc, #108]	; (80058cc <HAL_RCC_ClockConfig+0x19c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2201      	movs	r2, #1
 8005864:	4393      	bics	r3, r2
 8005866:	0019      	movs	r1, r3
 8005868:	4b18      	ldr	r3, [pc, #96]	; (80058cc <HAL_RCC_ClockConfig+0x19c>)
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005870:	4b16      	ldr	r3, [pc, #88]	; (80058cc <HAL_RCC_ClockConfig+0x19c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2201      	movs	r2, #1
 8005876:	4013      	ands	r3, r2
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d001      	beq.n	8005882 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e020      	b.n	80058c4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2204      	movs	r2, #4
 8005888:	4013      	ands	r3, r2
 800588a:	d009      	beq.n	80058a0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800588c:	4b10      	ldr	r3, [pc, #64]	; (80058d0 <HAL_RCC_ClockConfig+0x1a0>)
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	4a11      	ldr	r2, [pc, #68]	; (80058d8 <HAL_RCC_ClockConfig+0x1a8>)
 8005892:	4013      	ands	r3, r2
 8005894:	0019      	movs	r1, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	4b0d      	ldr	r3, [pc, #52]	; (80058d0 <HAL_RCC_ClockConfig+0x1a0>)
 800589c:	430a      	orrs	r2, r1
 800589e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80058a0:	f000 f820 	bl	80058e4 <HAL_RCC_GetSysClockFreq>
 80058a4:	0001      	movs	r1, r0
 80058a6:	4b0a      	ldr	r3, [pc, #40]	; (80058d0 <HAL_RCC_ClockConfig+0x1a0>)
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	091b      	lsrs	r3, r3, #4
 80058ac:	220f      	movs	r2, #15
 80058ae:	4013      	ands	r3, r2
 80058b0:	4a0a      	ldr	r2, [pc, #40]	; (80058dc <HAL_RCC_ClockConfig+0x1ac>)
 80058b2:	5cd3      	ldrb	r3, [r2, r3]
 80058b4:	000a      	movs	r2, r1
 80058b6:	40da      	lsrs	r2, r3
 80058b8:	4b09      	ldr	r3, [pc, #36]	; (80058e0 <HAL_RCC_ClockConfig+0x1b0>)
 80058ba:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80058bc:	2003      	movs	r0, #3
 80058be:	f7fc fc05 	bl	80020cc <HAL_InitTick>
  
  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	0018      	movs	r0, r3
 80058c6:	46bd      	mov	sp, r7
 80058c8:	b004      	add	sp, #16
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	40022000 	.word	0x40022000
 80058d0:	40021000 	.word	0x40021000
 80058d4:	00001388 	.word	0x00001388
 80058d8:	fffff8ff 	.word	0xfffff8ff
 80058dc:	0800cb54 	.word	0x0800cb54
 80058e0:	20000000 	.word	0x20000000

080058e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058e4:	b590      	push	{r4, r7, lr}
 80058e6:	b08f      	sub	sp, #60	; 0x3c
 80058e8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80058ea:	2314      	movs	r3, #20
 80058ec:	18fb      	adds	r3, r7, r3
 80058ee:	4a38      	ldr	r2, [pc, #224]	; (80059d0 <HAL_RCC_GetSysClockFreq+0xec>)
 80058f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80058f2:	c313      	stmia	r3!, {r0, r1, r4}
 80058f4:	6812      	ldr	r2, [r2, #0]
 80058f6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80058f8:	1d3b      	adds	r3, r7, #4
 80058fa:	4a36      	ldr	r2, [pc, #216]	; (80059d4 <HAL_RCC_GetSysClockFreq+0xf0>)
 80058fc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80058fe:	c313      	stmia	r3!, {r0, r1, r4}
 8005900:	6812      	ldr	r2, [r2, #0]
 8005902:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005904:	2300      	movs	r3, #0
 8005906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005908:	2300      	movs	r3, #0
 800590a:	62bb      	str	r3, [r7, #40]	; 0x28
 800590c:	2300      	movs	r3, #0
 800590e:	637b      	str	r3, [r7, #52]	; 0x34
 8005910:	2300      	movs	r3, #0
 8005912:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005918:	4b2f      	ldr	r3, [pc, #188]	; (80059d8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005920:	220c      	movs	r2, #12
 8005922:	4013      	ands	r3, r2
 8005924:	2b0c      	cmp	r3, #12
 8005926:	d047      	beq.n	80059b8 <HAL_RCC_GetSysClockFreq+0xd4>
 8005928:	d849      	bhi.n	80059be <HAL_RCC_GetSysClockFreq+0xda>
 800592a:	2b04      	cmp	r3, #4
 800592c:	d002      	beq.n	8005934 <HAL_RCC_GetSysClockFreq+0x50>
 800592e:	2b08      	cmp	r3, #8
 8005930:	d003      	beq.n	800593a <HAL_RCC_GetSysClockFreq+0x56>
 8005932:	e044      	b.n	80059be <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005934:	4b29      	ldr	r3, [pc, #164]	; (80059dc <HAL_RCC_GetSysClockFreq+0xf8>)
 8005936:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005938:	e044      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593c:	0c9b      	lsrs	r3, r3, #18
 800593e:	220f      	movs	r2, #15
 8005940:	4013      	ands	r3, r2
 8005942:	2214      	movs	r2, #20
 8005944:	18ba      	adds	r2, r7, r2
 8005946:	5cd3      	ldrb	r3, [r2, r3]
 8005948:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800594a:	4b23      	ldr	r3, [pc, #140]	; (80059d8 <HAL_RCC_GetSysClockFreq+0xf4>)
 800594c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594e:	220f      	movs	r2, #15
 8005950:	4013      	ands	r3, r2
 8005952:	1d3a      	adds	r2, r7, #4
 8005954:	5cd3      	ldrb	r3, [r2, r3]
 8005956:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800595a:	23c0      	movs	r3, #192	; 0xc0
 800595c:	025b      	lsls	r3, r3, #9
 800595e:	401a      	ands	r2, r3
 8005960:	2380      	movs	r3, #128	; 0x80
 8005962:	025b      	lsls	r3, r3, #9
 8005964:	429a      	cmp	r2, r3
 8005966:	d109      	bne.n	800597c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005968:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800596a:	481c      	ldr	r0, [pc, #112]	; (80059dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800596c:	f7fa fbde 	bl	800012c <__udivsi3>
 8005970:	0003      	movs	r3, r0
 8005972:	001a      	movs	r2, r3
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	4353      	muls	r3, r2
 8005978:	637b      	str	r3, [r7, #52]	; 0x34
 800597a:	e01a      	b.n	80059b2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800597c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800597e:	23c0      	movs	r3, #192	; 0xc0
 8005980:	025b      	lsls	r3, r3, #9
 8005982:	401a      	ands	r2, r3
 8005984:	23c0      	movs	r3, #192	; 0xc0
 8005986:	025b      	lsls	r3, r3, #9
 8005988:	429a      	cmp	r2, r3
 800598a:	d109      	bne.n	80059a0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800598c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800598e:	4814      	ldr	r0, [pc, #80]	; (80059e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005990:	f7fa fbcc 	bl	800012c <__udivsi3>
 8005994:	0003      	movs	r3, r0
 8005996:	001a      	movs	r2, r3
 8005998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599a:	4353      	muls	r3, r2
 800599c:	637b      	str	r3, [r7, #52]	; 0x34
 800599e:	e008      	b.n	80059b2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80059a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059a2:	4810      	ldr	r0, [pc, #64]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x100>)
 80059a4:	f7fa fbc2 	bl	800012c <__udivsi3>
 80059a8:	0003      	movs	r3, r0
 80059aa:	001a      	movs	r2, r3
 80059ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ae:	4353      	muls	r3, r2
 80059b0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80059b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80059b6:	e005      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80059b8:	4b09      	ldr	r3, [pc, #36]	; (80059e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80059ba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80059bc:	e002      	b.n	80059c4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80059be:	4b09      	ldr	r3, [pc, #36]	; (80059e4 <HAL_RCC_GetSysClockFreq+0x100>)
 80059c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80059c2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80059c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80059c6:	0018      	movs	r0, r3
 80059c8:	46bd      	mov	sp, r7
 80059ca:	b00f      	add	sp, #60	; 0x3c
 80059cc:	bd90      	pop	{r4, r7, pc}
 80059ce:	46c0      	nop			; (mov r8, r8)
 80059d0:	0800ca90 	.word	0x0800ca90
 80059d4:	0800caa0 	.word	0x0800caa0
 80059d8:	40021000 	.word	0x40021000
 80059dc:	00f42400 	.word	0x00f42400
 80059e0:	02dc6c00 	.word	0x02dc6c00
 80059e4:	007a1200 	.word	0x007a1200

080059e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059ec:	4b02      	ldr	r3, [pc, #8]	; (80059f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80059ee:	681b      	ldr	r3, [r3, #0]
}
 80059f0:	0018      	movs	r0, r3
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	46c0      	nop			; (mov r8, r8)
 80059f8:	20000000 	.word	0x20000000

080059fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005a00:	f7ff fff2 	bl	80059e8 <HAL_RCC_GetHCLKFreq>
 8005a04:	0001      	movs	r1, r0
 8005a06:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	0a1b      	lsrs	r3, r3, #8
 8005a0c:	2207      	movs	r2, #7
 8005a0e:	4013      	ands	r3, r2
 8005a10:	4a04      	ldr	r2, [pc, #16]	; (8005a24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a12:	5cd3      	ldrb	r3, [r2, r3]
 8005a14:	40d9      	lsrs	r1, r3
 8005a16:	000b      	movs	r3, r1
}    
 8005a18:	0018      	movs	r0, r3
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	46c0      	nop			; (mov r8, r8)
 8005a20:	40021000 	.word	0x40021000
 8005a24:	0800cb64 	.word	0x0800cb64

08005a28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	2380      	movs	r3, #128	; 0x80
 8005a3e:	025b      	lsls	r3, r3, #9
 8005a40:	4013      	ands	r3, r2
 8005a42:	d100      	bne.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005a44:	e08e      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005a46:	2017      	movs	r0, #23
 8005a48:	183b      	adds	r3, r7, r0
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a4e:	4b6e      	ldr	r3, [pc, #440]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a50:	69da      	ldr	r2, [r3, #28]
 8005a52:	2380      	movs	r3, #128	; 0x80
 8005a54:	055b      	lsls	r3, r3, #21
 8005a56:	4013      	ands	r3, r2
 8005a58:	d110      	bne.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a5a:	4b6b      	ldr	r3, [pc, #428]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a5c:	69da      	ldr	r2, [r3, #28]
 8005a5e:	4b6a      	ldr	r3, [pc, #424]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a60:	2180      	movs	r1, #128	; 0x80
 8005a62:	0549      	lsls	r1, r1, #21
 8005a64:	430a      	orrs	r2, r1
 8005a66:	61da      	str	r2, [r3, #28]
 8005a68:	4b67      	ldr	r3, [pc, #412]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a6a:	69da      	ldr	r2, [r3, #28]
 8005a6c:	2380      	movs	r3, #128	; 0x80
 8005a6e:	055b      	lsls	r3, r3, #21
 8005a70:	4013      	ands	r3, r2
 8005a72:	60bb      	str	r3, [r7, #8]
 8005a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a76:	183b      	adds	r3, r7, r0
 8005a78:	2201      	movs	r2, #1
 8005a7a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a7c:	4b63      	ldr	r3, [pc, #396]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	2380      	movs	r3, #128	; 0x80
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	4013      	ands	r3, r2
 8005a86:	d11a      	bne.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a88:	4b60      	ldr	r3, [pc, #384]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	4b5f      	ldr	r3, [pc, #380]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005a8e:	2180      	movs	r1, #128	; 0x80
 8005a90:	0049      	lsls	r1, r1, #1
 8005a92:	430a      	orrs	r2, r1
 8005a94:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a96:	f7fc fb5f 	bl	8002158 <HAL_GetTick>
 8005a9a:	0003      	movs	r3, r0
 8005a9c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aa0:	f7fc fb5a 	bl	8002158 <HAL_GetTick>
 8005aa4:	0002      	movs	r2, r0
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b64      	cmp	r3, #100	; 0x64
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e0a6      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ab2:	4b56      	ldr	r3, [pc, #344]	; (8005c0c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	2380      	movs	r3, #128	; 0x80
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	4013      	ands	r3, r2
 8005abc:	d0f0      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005abe:	4b52      	ldr	r3, [pc, #328]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005ac0:	6a1a      	ldr	r2, [r3, #32]
 8005ac2:	23c0      	movs	r3, #192	; 0xc0
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d034      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	23c0      	movs	r3, #192	; 0xc0
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4013      	ands	r3, r2
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d02c      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ae0:	4b49      	ldr	r3, [pc, #292]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	4a4a      	ldr	r2, [pc, #296]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005aea:	4b47      	ldr	r3, [pc, #284]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005aec:	6a1a      	ldr	r2, [r3, #32]
 8005aee:	4b46      	ldr	r3, [pc, #280]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005af0:	2180      	movs	r1, #128	; 0x80
 8005af2:	0249      	lsls	r1, r1, #9
 8005af4:	430a      	orrs	r2, r1
 8005af6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005af8:	4b43      	ldr	r3, [pc, #268]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005afa:	6a1a      	ldr	r2, [r3, #32]
 8005afc:	4b42      	ldr	r3, [pc, #264]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005afe:	4945      	ldr	r1, [pc, #276]	; (8005c14 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8005b00:	400a      	ands	r2, r1
 8005b02:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005b04:	4b40      	ldr	r3, [pc, #256]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	4013      	ands	r3, r2
 8005b10:	d013      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b12:	f7fc fb21 	bl	8002158 <HAL_GetTick>
 8005b16:	0003      	movs	r3, r0
 8005b18:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b1a:	e009      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b1c:	f7fc fb1c 	bl	8002158 <HAL_GetTick>
 8005b20:	0002      	movs	r2, r0
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	4a3c      	ldr	r2, [pc, #240]	; (8005c18 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d901      	bls.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e067      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b30:	4b35      	ldr	r3, [pc, #212]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	2202      	movs	r2, #2
 8005b36:	4013      	ands	r3, r2
 8005b38:	d0f0      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b3a:	4b33      	ldr	r3, [pc, #204]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	4a34      	ldr	r2, [pc, #208]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	0019      	movs	r1, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	4b2f      	ldr	r3, [pc, #188]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005b4e:	2317      	movs	r3, #23
 8005b50:	18fb      	adds	r3, r7, r3
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d105      	bne.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b58:	4b2b      	ldr	r3, [pc, #172]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b5a:	69da      	ldr	r2, [r3, #28]
 8005b5c:	4b2a      	ldr	r3, [pc, #168]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b5e:	492f      	ldr	r1, [pc, #188]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005b60:	400a      	ands	r2, r1
 8005b62:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	d009      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b6e:	4b26      	ldr	r3, [pc, #152]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b72:	2203      	movs	r2, #3
 8005b74:	4393      	bics	r3, r2
 8005b76:	0019      	movs	r1, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	4b22      	ldr	r3, [pc, #136]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2202      	movs	r2, #2
 8005b88:	4013      	ands	r3, r2
 8005b8a:	d009      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b8c:	4b1e      	ldr	r3, [pc, #120]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b90:	4a23      	ldr	r2, [pc, #140]	; (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b92:	4013      	ands	r3, r2
 8005b94:	0019      	movs	r1, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68da      	ldr	r2, [r3, #12]
 8005b9a:	4b1b      	ldr	r3, [pc, #108]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	d009      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005baa:	4b17      	ldr	r3, [pc, #92]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bae:	2210      	movs	r2, #16
 8005bb0:	4393      	bics	r3, r2
 8005bb2:	0019      	movs	r1, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	691a      	ldr	r2, [r3, #16]
 8005bb8:	4b13      	ldr	r3, [pc, #76]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	2380      	movs	r3, #128	; 0x80
 8005bc4:	029b      	lsls	r3, r3, #10
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	d009      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bca:	4b0f      	ldr	r3, [pc, #60]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bce:	2280      	movs	r2, #128	; 0x80
 8005bd0:	4393      	bics	r3, r2
 8005bd2:	0019      	movs	r1, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	699a      	ldr	r2, [r3, #24]
 8005bd8:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	2380      	movs	r3, #128	; 0x80
 8005be4:	00db      	lsls	r3, r3, #3
 8005be6:	4013      	ands	r3, r2
 8005be8:	d009      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005bea:	4b07      	ldr	r3, [pc, #28]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bee:	2240      	movs	r2, #64	; 0x40
 8005bf0:	4393      	bics	r3, r2
 8005bf2:	0019      	movs	r1, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	695a      	ldr	r2, [r3, #20]
 8005bf8:	4b03      	ldr	r3, [pc, #12]	; (8005c08 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	0018      	movs	r0, r3
 8005c02:	46bd      	mov	sp, r7
 8005c04:	b006      	add	sp, #24
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	40007000 	.word	0x40007000
 8005c10:	fffffcff 	.word	0xfffffcff
 8005c14:	fffeffff 	.word	0xfffeffff
 8005c18:	00001388 	.word	0x00001388
 8005c1c:	efffffff 	.word	0xefffffff
 8005c20:	fffcffff 	.word	0xfffcffff

08005c24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d101      	bne.n	8005c36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e0a8      	b.n	8005d88 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d109      	bne.n	8005c52 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	2382      	movs	r3, #130	; 0x82
 8005c44:	005b      	lsls	r3, r3, #1
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d009      	beq.n	8005c5e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	61da      	str	r2, [r3, #28]
 8005c50:	e005      	b.n	8005c5e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	225d      	movs	r2, #93	; 0x5d
 8005c68:	5c9b      	ldrb	r3, [r3, r2]
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d107      	bne.n	8005c80 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	225c      	movs	r2, #92	; 0x5c
 8005c74:	2100      	movs	r1, #0
 8005c76:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	f7fb fe96 	bl	80019ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	225d      	movs	r2, #93	; 0x5d
 8005c84:	2102      	movs	r1, #2
 8005c86:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2140      	movs	r1, #64	; 0x40
 8005c94:	438a      	bics	r2, r1
 8005c96:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	68da      	ldr	r2, [r3, #12]
 8005c9c:	23e0      	movs	r3, #224	; 0xe0
 8005c9e:	00db      	lsls	r3, r3, #3
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d902      	bls.n	8005caa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	e002      	b.n	8005cb0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005caa:	2380      	movs	r3, #128	; 0x80
 8005cac:	015b      	lsls	r3, r3, #5
 8005cae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	23f0      	movs	r3, #240	; 0xf0
 8005cb6:	011b      	lsls	r3, r3, #4
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d008      	beq.n	8005cce <HAL_SPI_Init+0xaa>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	23e0      	movs	r3, #224	; 0xe0
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d002      	beq.n	8005cce <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	2382      	movs	r3, #130	; 0x82
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	401a      	ands	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6899      	ldr	r1, [r3, #8]
 8005cdc:	2384      	movs	r3, #132	; 0x84
 8005cde:	021b      	lsls	r3, r3, #8
 8005ce0:	400b      	ands	r3, r1
 8005ce2:	431a      	orrs	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	2102      	movs	r1, #2
 8005cea:	400b      	ands	r3, r1
 8005cec:	431a      	orrs	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	2101      	movs	r1, #1
 8005cf4:	400b      	ands	r3, r1
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6999      	ldr	r1, [r3, #24]
 8005cfc:	2380      	movs	r3, #128	; 0x80
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	400b      	ands	r3, r1
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	2138      	movs	r1, #56	; 0x38
 8005d0a:	400b      	ands	r3, r1
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	2180      	movs	r1, #128	; 0x80
 8005d14:	400b      	ands	r3, r1
 8005d16:	431a      	orrs	r2, r3
 8005d18:	0011      	movs	r1, r2
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d1e:	2380      	movs	r3, #128	; 0x80
 8005d20:	019b      	lsls	r3, r3, #6
 8005d22:	401a      	ands	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	0c1b      	lsrs	r3, r3, #16
 8005d32:	2204      	movs	r2, #4
 8005d34:	401a      	ands	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	2110      	movs	r1, #16
 8005d3c:	400b      	ands	r3, r1
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d44:	2108      	movs	r1, #8
 8005d46:	400b      	ands	r3, r1
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68d9      	ldr	r1, [r3, #12]
 8005d4e:	23f0      	movs	r3, #240	; 0xf0
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	400b      	ands	r3, r1
 8005d54:	431a      	orrs	r2, r3
 8005d56:	0011      	movs	r1, r2
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	2380      	movs	r3, #128	; 0x80
 8005d5c:	015b      	lsls	r3, r3, #5
 8005d5e:	401a      	ands	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	430a      	orrs	r2, r1
 8005d66:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	69da      	ldr	r2, [r3, #28]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4907      	ldr	r1, [pc, #28]	; (8005d90 <HAL_SPI_Init+0x16c>)
 8005d74:	400a      	ands	r2, r1
 8005d76:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	225d      	movs	r2, #93	; 0x5d
 8005d82:	2101      	movs	r1, #1
 8005d84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	0018      	movs	r0, r3
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	b004      	add	sp, #16
 8005d8e:	bd80      	pop	{r7, pc}
 8005d90:	fffff7ff 	.word	0xfffff7ff

08005d94 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	603b      	str	r3, [r7, #0]
 8005da0:	1dbb      	adds	r3, r7, #6
 8005da2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005da4:	231f      	movs	r3, #31
 8005da6:	18fb      	adds	r3, r7, r3
 8005da8:	2200      	movs	r2, #0
 8005daa:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	225c      	movs	r2, #92	; 0x5c
 8005db0:	5c9b      	ldrb	r3, [r3, r2]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d101      	bne.n	8005dba <HAL_SPI_Transmit+0x26>
 8005db6:	2302      	movs	r3, #2
 8005db8:	e140      	b.n	800603c <HAL_SPI_Transmit+0x2a8>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	225c      	movs	r2, #92	; 0x5c
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dc2:	f7fc f9c9 	bl	8002158 <HAL_GetTick>
 8005dc6:	0003      	movs	r3, r0
 8005dc8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005dca:	2316      	movs	r3, #22
 8005dcc:	18fb      	adds	r3, r7, r3
 8005dce:	1dba      	adds	r2, r7, #6
 8005dd0:	8812      	ldrh	r2, [r2, #0]
 8005dd2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	225d      	movs	r2, #93	; 0x5d
 8005dd8:	5c9b      	ldrb	r3, [r3, r2]
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d004      	beq.n	8005dea <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005de0:	231f      	movs	r3, #31
 8005de2:	18fb      	adds	r3, r7, r3
 8005de4:	2202      	movs	r2, #2
 8005de6:	701a      	strb	r2, [r3, #0]
    goto error;
 8005de8:	e11d      	b.n	8006026 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d003      	beq.n	8005df8 <HAL_SPI_Transmit+0x64>
 8005df0:	1dbb      	adds	r3, r7, #6
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d104      	bne.n	8005e02 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8005df8:	231f      	movs	r3, #31
 8005dfa:	18fb      	adds	r3, r7, r3
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	701a      	strb	r2, [r3, #0]
    goto error;
 8005e00:	e111      	b.n	8006026 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	225d      	movs	r2, #93	; 0x5d
 8005e06:	2103      	movs	r1, #3
 8005e08:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	68ba      	ldr	r2, [r7, #8]
 8005e14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	1dba      	adds	r2, r7, #6
 8005e1a:	8812      	ldrh	r2, [r2, #0]
 8005e1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	1dba      	adds	r2, r7, #6
 8005e22:	8812      	ldrh	r2, [r2, #0]
 8005e24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2244      	movs	r2, #68	; 0x44
 8005e30:	2100      	movs	r1, #0
 8005e32:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2246      	movs	r2, #70	; 0x46
 8005e38:	2100      	movs	r1, #0
 8005e3a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	689a      	ldr	r2, [r3, #8]
 8005e4c:	2380      	movs	r3, #128	; 0x80
 8005e4e:	021b      	lsls	r3, r3, #8
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d110      	bne.n	8005e76 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2140      	movs	r1, #64	; 0x40
 8005e60:	438a      	bics	r2, r1
 8005e62:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2180      	movs	r1, #128	; 0x80
 8005e70:	01c9      	lsls	r1, r1, #7
 8005e72:	430a      	orrs	r2, r1
 8005e74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2240      	movs	r2, #64	; 0x40
 8005e7e:	4013      	ands	r3, r2
 8005e80:	2b40      	cmp	r3, #64	; 0x40
 8005e82:	d007      	beq.n	8005e94 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2140      	movs	r1, #64	; 0x40
 8005e90:	430a      	orrs	r2, r1
 8005e92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	23e0      	movs	r3, #224	; 0xe0
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d94e      	bls.n	8005f3e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d004      	beq.n	8005eb2 <HAL_SPI_Transmit+0x11e>
 8005ea8:	2316      	movs	r3, #22
 8005eaa:	18fb      	adds	r3, r7, r3
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d13f      	bne.n	8005f32 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb6:	881a      	ldrh	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec2:	1c9a      	adds	r2, r3, #2
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ed6:	e02c      	b.n	8005f32 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d112      	bne.n	8005f0c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eea:	881a      	ldrh	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef6:	1c9a      	adds	r2, r3, #2
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f0a:	e012      	b.n	8005f32 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f0c:	f7fc f924 	bl	8002158 <HAL_GetTick>
 8005f10:	0002      	movs	r2, r0
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d802      	bhi.n	8005f22 <HAL_SPI_Transmit+0x18e>
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	d102      	bne.n	8005f28 <HAL_SPI_Transmit+0x194>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d104      	bne.n	8005f32 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8005f28:	231f      	movs	r3, #31
 8005f2a:	18fb      	adds	r3, r7, r3
 8005f2c:	2203      	movs	r2, #3
 8005f2e:	701a      	strb	r2, [r3, #0]
          goto error;
 8005f30:	e079      	b.n	8006026 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1cd      	bne.n	8005ed8 <HAL_SPI_Transmit+0x144>
 8005f3c:	e04f      	b.n	8005fde <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d004      	beq.n	8005f50 <HAL_SPI_Transmit+0x1bc>
 8005f46:	2316      	movs	r3, #22
 8005f48:	18fb      	adds	r3, r7, r3
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d141      	bne.n	8005fd4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	330c      	adds	r3, #12
 8005f5a:	7812      	ldrb	r2, [r2, #0]
 8005f5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005f76:	e02d      	b.n	8005fd4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	4013      	ands	r3, r2
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d113      	bne.n	8005fae <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	330c      	adds	r3, #12
 8005f90:	7812      	ldrb	r2, [r2, #0]
 8005f92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fac:	e012      	b.n	8005fd4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fae:	f7fc f8d3 	bl	8002158 <HAL_GetTick>
 8005fb2:	0002      	movs	r2, r0
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d802      	bhi.n	8005fc4 <HAL_SPI_Transmit+0x230>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	d102      	bne.n	8005fca <HAL_SPI_Transmit+0x236>
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d104      	bne.n	8005fd4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8005fca:	231f      	movs	r3, #31
 8005fcc:	18fb      	adds	r3, r7, r3
 8005fce:	2203      	movs	r2, #3
 8005fd0:	701a      	strb	r2, [r3, #0]
          goto error;
 8005fd2:	e028      	b.n	8006026 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1cc      	bne.n	8005f78 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	6839      	ldr	r1, [r7, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	0018      	movs	r0, r3
 8005fe6:	f000 f95d 	bl	80062a4 <SPI_EndRxTxTransaction>
 8005fea:	1e03      	subs	r3, r0, #0
 8005fec:	d002      	beq.n	8005ff4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10a      	bne.n	8006012 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	613b      	str	r3, [r7, #16]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	613b      	str	r3, [r7, #16]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	613b      	str	r3, [r7, #16]
 8006010:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006016:	2b00      	cmp	r3, #0
 8006018:	d004      	beq.n	8006024 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800601a:	231f      	movs	r3, #31
 800601c:	18fb      	adds	r3, r7, r3
 800601e:	2201      	movs	r2, #1
 8006020:	701a      	strb	r2, [r3, #0]
 8006022:	e000      	b.n	8006026 <HAL_SPI_Transmit+0x292>
  }

error:
 8006024:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	225d      	movs	r2, #93	; 0x5d
 800602a:	2101      	movs	r1, #1
 800602c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	225c      	movs	r2, #92	; 0x5c
 8006032:	2100      	movs	r1, #0
 8006034:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006036:	231f      	movs	r3, #31
 8006038:	18fb      	adds	r3, r7, r3
 800603a:	781b      	ldrb	r3, [r3, #0]
}
 800603c:	0018      	movs	r0, r3
 800603e:	46bd      	mov	sp, r7
 8006040:	b008      	add	sp, #32
 8006042:	bd80      	pop	{r7, pc}

08006044 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	603b      	str	r3, [r7, #0]
 8006050:	1dfb      	adds	r3, r7, #7
 8006052:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006054:	f7fc f880 	bl	8002158 <HAL_GetTick>
 8006058:	0002      	movs	r2, r0
 800605a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605c:	1a9b      	subs	r3, r3, r2
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	18d3      	adds	r3, r2, r3
 8006062:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006064:	f7fc f878 	bl	8002158 <HAL_GetTick>
 8006068:	0003      	movs	r3, r0
 800606a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800606c:	4b3a      	ldr	r3, [pc, #232]	; (8006158 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	015b      	lsls	r3, r3, #5
 8006072:	0d1b      	lsrs	r3, r3, #20
 8006074:	69fa      	ldr	r2, [r7, #28]
 8006076:	4353      	muls	r3, r2
 8006078:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800607a:	e058      	b.n	800612e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	3301      	adds	r3, #1
 8006080:	d055      	beq.n	800612e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006082:	f7fc f869 	bl	8002158 <HAL_GetTick>
 8006086:	0002      	movs	r2, r0
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	69fa      	ldr	r2, [r7, #28]
 800608e:	429a      	cmp	r2, r3
 8006090:	d902      	bls.n	8006098 <SPI_WaitFlagStateUntilTimeout+0x54>
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d142      	bne.n	800611e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	21e0      	movs	r1, #224	; 0xe0
 80060a4:	438a      	bics	r2, r1
 80060a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	2382      	movs	r3, #130	; 0x82
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d113      	bne.n	80060dc <SPI_WaitFlagStateUntilTimeout+0x98>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	2380      	movs	r3, #128	; 0x80
 80060ba:	021b      	lsls	r3, r3, #8
 80060bc:	429a      	cmp	r2, r3
 80060be:	d005      	beq.n	80060cc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	689a      	ldr	r2, [r3, #8]
 80060c4:	2380      	movs	r3, #128	; 0x80
 80060c6:	00db      	lsls	r3, r3, #3
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d107      	bne.n	80060dc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2140      	movs	r1, #64	; 0x40
 80060d8:	438a      	bics	r2, r1
 80060da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060e0:	2380      	movs	r3, #128	; 0x80
 80060e2:	019b      	lsls	r3, r3, #6
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d110      	bne.n	800610a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	491a      	ldr	r1, [pc, #104]	; (800615c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80060f4:	400a      	ands	r2, r1
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2180      	movs	r1, #128	; 0x80
 8006104:	0189      	lsls	r1, r1, #6
 8006106:	430a      	orrs	r2, r1
 8006108:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	225d      	movs	r2, #93	; 0x5d
 800610e:	2101      	movs	r1, #1
 8006110:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	225c      	movs	r2, #92	; 0x5c
 8006116:	2100      	movs	r1, #0
 8006118:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e017      	b.n	800614e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d101      	bne.n	8006128 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	3b01      	subs	r3, #1
 800612c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	4013      	ands	r3, r2
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	425a      	negs	r2, r3
 800613e:	4153      	adcs	r3, r2
 8006140:	b2db      	uxtb	r3, r3
 8006142:	001a      	movs	r2, r3
 8006144:	1dfb      	adds	r3, r7, #7
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	429a      	cmp	r2, r3
 800614a:	d197      	bne.n	800607c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	0018      	movs	r0, r3
 8006150:	46bd      	mov	sp, r7
 8006152:	b008      	add	sp, #32
 8006154:	bd80      	pop	{r7, pc}
 8006156:	46c0      	nop			; (mov r8, r8)
 8006158:	20000000 	.word	0x20000000
 800615c:	ffffdfff 	.word	0xffffdfff

08006160 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08a      	sub	sp, #40	; 0x28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800616e:	2317      	movs	r3, #23
 8006170:	18fb      	adds	r3, r7, r3
 8006172:	2200      	movs	r2, #0
 8006174:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006176:	f7fb ffef 	bl	8002158 <HAL_GetTick>
 800617a:	0002      	movs	r2, r0
 800617c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617e:	1a9b      	subs	r3, r3, r2
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	18d3      	adds	r3, r2, r3
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006186:	f7fb ffe7 	bl	8002158 <HAL_GetTick>
 800618a:	0003      	movs	r3, r0
 800618c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	330c      	adds	r3, #12
 8006194:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006196:	4b41      	ldr	r3, [pc, #260]	; (800629c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	0013      	movs	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	189b      	adds	r3, r3, r2
 80061a0:	00da      	lsls	r2, r3, #3
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	0d1b      	lsrs	r3, r3, #20
 80061a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a8:	4353      	muls	r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80061ac:	e068      	b.n	8006280 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	23c0      	movs	r3, #192	; 0xc0
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d10a      	bne.n	80061ce <SPI_WaitFifoStateUntilTimeout+0x6e>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d107      	bne.n	80061ce <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	2117      	movs	r1, #23
 80061c6:	187b      	adds	r3, r7, r1
 80061c8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80061ca:	187b      	adds	r3, r7, r1
 80061cc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	3301      	adds	r3, #1
 80061d2:	d055      	beq.n	8006280 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061d4:	f7fb ffc0 	bl	8002158 <HAL_GetTick>
 80061d8:	0002      	movs	r2, r0
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d902      	bls.n	80061ea <SPI_WaitFifoStateUntilTimeout+0x8a>
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d142      	bne.n	8006270 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	21e0      	movs	r1, #224	; 0xe0
 80061f6:	438a      	bics	r2, r1
 80061f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	2382      	movs	r3, #130	; 0x82
 8006200:	005b      	lsls	r3, r3, #1
 8006202:	429a      	cmp	r2, r3
 8006204:	d113      	bne.n	800622e <SPI_WaitFifoStateUntilTimeout+0xce>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	689a      	ldr	r2, [r3, #8]
 800620a:	2380      	movs	r3, #128	; 0x80
 800620c:	021b      	lsls	r3, r3, #8
 800620e:	429a      	cmp	r2, r3
 8006210:	d005      	beq.n	800621e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	689a      	ldr	r2, [r3, #8]
 8006216:	2380      	movs	r3, #128	; 0x80
 8006218:	00db      	lsls	r3, r3, #3
 800621a:	429a      	cmp	r2, r3
 800621c:	d107      	bne.n	800622e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2140      	movs	r1, #64	; 0x40
 800622a:	438a      	bics	r2, r1
 800622c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006232:	2380      	movs	r3, #128	; 0x80
 8006234:	019b      	lsls	r3, r3, #6
 8006236:	429a      	cmp	r2, r3
 8006238:	d110      	bne.n	800625c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4916      	ldr	r1, [pc, #88]	; (80062a0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006246:	400a      	ands	r2, r1
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2180      	movs	r1, #128	; 0x80
 8006256:	0189      	lsls	r1, r1, #6
 8006258:	430a      	orrs	r2, r1
 800625a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	225d      	movs	r2, #93	; 0x5d
 8006260:	2101      	movs	r1, #1
 8006262:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	225c      	movs	r2, #92	; 0x5c
 8006268:	2100      	movs	r1, #0
 800626a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e010      	b.n	8006292 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	3b01      	subs	r3, #1
 800627e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	4013      	ands	r3, r2
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	429a      	cmp	r2, r3
 800628e:	d18e      	bne.n	80061ae <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	0018      	movs	r0, r3
 8006294:	46bd      	mov	sp, r7
 8006296:	b00a      	add	sp, #40	; 0x28
 8006298:	bd80      	pop	{r7, pc}
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	20000000 	.word	0x20000000
 80062a0:	ffffdfff 	.word	0xffffdfff

080062a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af02      	add	r7, sp, #8
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	23c0      	movs	r3, #192	; 0xc0
 80062b4:	0159      	lsls	r1, r3, #5
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	0013      	movs	r3, r2
 80062be:	2200      	movs	r2, #0
 80062c0:	f7ff ff4e 	bl	8006160 <SPI_WaitFifoStateUntilTimeout>
 80062c4:	1e03      	subs	r3, r0, #0
 80062c6:	d007      	beq.n	80062d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062cc:	2220      	movs	r2, #32
 80062ce:	431a      	orrs	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e027      	b.n	8006328 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	0013      	movs	r3, r2
 80062e2:	2200      	movs	r2, #0
 80062e4:	2180      	movs	r1, #128	; 0x80
 80062e6:	f7ff fead 	bl	8006044 <SPI_WaitFlagStateUntilTimeout>
 80062ea:	1e03      	subs	r3, r0, #0
 80062ec:	d007      	beq.n	80062fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062f2:	2220      	movs	r2, #32
 80062f4:	431a      	orrs	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e014      	b.n	8006328 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	23c0      	movs	r3, #192	; 0xc0
 8006302:	00d9      	lsls	r1, r3, #3
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	0013      	movs	r3, r2
 800630c:	2200      	movs	r2, #0
 800630e:	f7ff ff27 	bl	8006160 <SPI_WaitFifoStateUntilTimeout>
 8006312:	1e03      	subs	r3, r0, #0
 8006314:	d007      	beq.n	8006326 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800631a:	2220      	movs	r2, #32
 800631c:	431a      	orrs	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e000      	b.n	8006328 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	0018      	movs	r0, r3
 800632a:	46bd      	mov	sp, r7
 800632c:	b004      	add	sp, #16
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e042      	b.n	80063c8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	223d      	movs	r2, #61	; 0x3d
 8006346:	5c9b      	ldrb	r3, [r3, r2]
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d107      	bne.n	800635e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	223c      	movs	r2, #60	; 0x3c
 8006352:	2100      	movs	r1, #0
 8006354:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	0018      	movs	r0, r3
 800635a:	f7fb fb75 	bl	8001a48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	223d      	movs	r2, #61	; 0x3d
 8006362:	2102      	movs	r1, #2
 8006364:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3304      	adds	r3, #4
 800636e:	0019      	movs	r1, r3
 8006370:	0010      	movs	r0, r2
 8006372:	f000 fa65 	bl	8006840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2246      	movs	r2, #70	; 0x46
 800637a:	2101      	movs	r1, #1
 800637c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	223e      	movs	r2, #62	; 0x3e
 8006382:	2101      	movs	r1, #1
 8006384:	5499      	strb	r1, [r3, r2]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	223f      	movs	r2, #63	; 0x3f
 800638a:	2101      	movs	r1, #1
 800638c:	5499      	strb	r1, [r3, r2]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2240      	movs	r2, #64	; 0x40
 8006392:	2101      	movs	r1, #1
 8006394:	5499      	strb	r1, [r3, r2]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2241      	movs	r2, #65	; 0x41
 800639a:	2101      	movs	r1, #1
 800639c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2242      	movs	r2, #66	; 0x42
 80063a2:	2101      	movs	r1, #1
 80063a4:	5499      	strb	r1, [r3, r2]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2243      	movs	r2, #67	; 0x43
 80063aa:	2101      	movs	r1, #1
 80063ac:	5499      	strb	r1, [r3, r2]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2244      	movs	r2, #68	; 0x44
 80063b2:	2101      	movs	r1, #1
 80063b4:	5499      	strb	r1, [r3, r2]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2245      	movs	r2, #69	; 0x45
 80063ba:	2101      	movs	r1, #1
 80063bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	223d      	movs	r2, #61	; 0x3d
 80063c2:	2101      	movs	r1, #1
 80063c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	0018      	movs	r0, r3
 80063ca:	46bd      	mov	sp, r7
 80063cc:	b002      	add	sp, #8
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	223d      	movs	r2, #61	; 0x3d
 80063dc:	5c9b      	ldrb	r3, [r3, r2]
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d001      	beq.n	80063e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e03b      	b.n	8006460 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	223d      	movs	r2, #61	; 0x3d
 80063ec:	2102      	movs	r1, #2
 80063ee:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68da      	ldr	r2, [r3, #12]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2101      	movs	r1, #1
 80063fc:	430a      	orrs	r2, r1
 80063fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a18      	ldr	r2, [pc, #96]	; (8006468 <HAL_TIM_Base_Start_IT+0x98>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00f      	beq.n	800642a <HAL_TIM_Base_Start_IT+0x5a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	2380      	movs	r3, #128	; 0x80
 8006410:	05db      	lsls	r3, r3, #23
 8006412:	429a      	cmp	r2, r3
 8006414:	d009      	beq.n	800642a <HAL_TIM_Base_Start_IT+0x5a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a14      	ldr	r2, [pc, #80]	; (800646c <HAL_TIM_Base_Start_IT+0x9c>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d004      	beq.n	800642a <HAL_TIM_Base_Start_IT+0x5a>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a12      	ldr	r2, [pc, #72]	; (8006470 <HAL_TIM_Base_Start_IT+0xa0>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d111      	bne.n	800644e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	2207      	movs	r2, #7
 8006432:	4013      	ands	r3, r2
 8006434:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b06      	cmp	r3, #6
 800643a:	d010      	beq.n	800645e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2101      	movs	r1, #1
 8006448:	430a      	orrs	r2, r1
 800644a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800644c:	e007      	b.n	800645e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2101      	movs	r1, #1
 800645a:	430a      	orrs	r2, r1
 800645c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	0018      	movs	r0, r3
 8006462:	46bd      	mov	sp, r7
 8006464:	b004      	add	sp, #16
 8006466:	bd80      	pop	{r7, pc}
 8006468:	40012c00 	.word	0x40012c00
 800646c:	40000400 	.word	0x40000400
 8006470:	40014000 	.word	0x40014000

08006474 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d101      	bne.n	8006486 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e042      	b.n	800650c <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	223d      	movs	r2, #61	; 0x3d
 800648a:	5c9b      	ldrb	r3, [r3, r2]
 800648c:	b2db      	uxtb	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d107      	bne.n	80064a2 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	223c      	movs	r2, #60	; 0x3c
 8006496:	2100      	movs	r1, #0
 8006498:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	0018      	movs	r0, r3
 800649e:	f000 f839 	bl	8006514 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	223d      	movs	r2, #61	; 0x3d
 80064a6:	2102      	movs	r1, #2
 80064a8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	3304      	adds	r3, #4
 80064b2:	0019      	movs	r1, r3
 80064b4:	0010      	movs	r0, r2
 80064b6:	f000 f9c3 	bl	8006840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2246      	movs	r2, #70	; 0x46
 80064be:	2101      	movs	r1, #1
 80064c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	223e      	movs	r2, #62	; 0x3e
 80064c6:	2101      	movs	r1, #1
 80064c8:	5499      	strb	r1, [r3, r2]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	223f      	movs	r2, #63	; 0x3f
 80064ce:	2101      	movs	r1, #1
 80064d0:	5499      	strb	r1, [r3, r2]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2240      	movs	r2, #64	; 0x40
 80064d6:	2101      	movs	r1, #1
 80064d8:	5499      	strb	r1, [r3, r2]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2241      	movs	r2, #65	; 0x41
 80064de:	2101      	movs	r1, #1
 80064e0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2242      	movs	r2, #66	; 0x42
 80064e6:	2101      	movs	r1, #1
 80064e8:	5499      	strb	r1, [r3, r2]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2243      	movs	r2, #67	; 0x43
 80064ee:	2101      	movs	r1, #1
 80064f0:	5499      	strb	r1, [r3, r2]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2244      	movs	r2, #68	; 0x44
 80064f6:	2101      	movs	r1, #1
 80064f8:	5499      	strb	r1, [r3, r2]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2245      	movs	r2, #69	; 0x45
 80064fe:	2101      	movs	r1, #1
 8006500:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	223d      	movs	r2, #61	; 0x3d
 8006506:	2101      	movs	r1, #1
 8006508:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	0018      	movs	r0, r3
 800650e:	46bd      	mov	sp, r7
 8006510:	b002      	add	sp, #8
 8006512:	bd80      	pop	{r7, pc}

08006514 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800651c:	46c0      	nop			; (mov r8, r8)
 800651e:	46bd      	mov	sp, r7
 8006520:	b002      	add	sp, #8
 8006522:	bd80      	pop	{r7, pc}

08006524 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	2202      	movs	r2, #2
 8006534:	4013      	ands	r3, r2
 8006536:	2b02      	cmp	r3, #2
 8006538:	d124      	bne.n	8006584 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	2202      	movs	r2, #2
 8006542:	4013      	ands	r3, r2
 8006544:	2b02      	cmp	r3, #2
 8006546:	d11d      	bne.n	8006584 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2203      	movs	r2, #3
 800654e:	4252      	negs	r2, r2
 8006550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	2203      	movs	r2, #3
 8006560:	4013      	ands	r3, r2
 8006562:	d004      	beq.n	800656e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	0018      	movs	r0, r3
 8006568:	f000 f952 	bl	8006810 <HAL_TIM_IC_CaptureCallback>
 800656c:	e007      	b.n	800657e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	0018      	movs	r0, r3
 8006572:	f000 f945 	bl	8006800 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	0018      	movs	r0, r3
 800657a:	f000 f951 	bl	8006820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	2204      	movs	r2, #4
 800658c:	4013      	ands	r3, r2
 800658e:	2b04      	cmp	r3, #4
 8006590:	d125      	bne.n	80065de <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	2204      	movs	r2, #4
 800659a:	4013      	ands	r3, r2
 800659c:	2b04      	cmp	r3, #4
 800659e:	d11e      	bne.n	80065de <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2205      	movs	r2, #5
 80065a6:	4252      	negs	r2, r2
 80065a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2202      	movs	r2, #2
 80065ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	23c0      	movs	r3, #192	; 0xc0
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4013      	ands	r3, r2
 80065bc:	d004      	beq.n	80065c8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	0018      	movs	r0, r3
 80065c2:	f000 f925 	bl	8006810 <HAL_TIM_IC_CaptureCallback>
 80065c6:	e007      	b.n	80065d8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	0018      	movs	r0, r3
 80065cc:	f000 f918 	bl	8006800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	0018      	movs	r0, r3
 80065d4:	f000 f924 	bl	8006820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	2208      	movs	r2, #8
 80065e6:	4013      	ands	r3, r2
 80065e8:	2b08      	cmp	r3, #8
 80065ea:	d124      	bne.n	8006636 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	2208      	movs	r2, #8
 80065f4:	4013      	ands	r3, r2
 80065f6:	2b08      	cmp	r3, #8
 80065f8:	d11d      	bne.n	8006636 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2209      	movs	r2, #9
 8006600:	4252      	negs	r2, r2
 8006602:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2204      	movs	r2, #4
 8006608:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	2203      	movs	r2, #3
 8006612:	4013      	ands	r3, r2
 8006614:	d004      	beq.n	8006620 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	0018      	movs	r0, r3
 800661a:	f000 f8f9 	bl	8006810 <HAL_TIM_IC_CaptureCallback>
 800661e:	e007      	b.n	8006630 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	0018      	movs	r0, r3
 8006624:	f000 f8ec 	bl	8006800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	0018      	movs	r0, r3
 800662c:	f000 f8f8 	bl	8006820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	2210      	movs	r2, #16
 800663e:	4013      	ands	r3, r2
 8006640:	2b10      	cmp	r3, #16
 8006642:	d125      	bne.n	8006690 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	2210      	movs	r2, #16
 800664c:	4013      	ands	r3, r2
 800664e:	2b10      	cmp	r3, #16
 8006650:	d11e      	bne.n	8006690 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2211      	movs	r2, #17
 8006658:	4252      	negs	r2, r2
 800665a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2208      	movs	r2, #8
 8006660:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69da      	ldr	r2, [r3, #28]
 8006668:	23c0      	movs	r3, #192	; 0xc0
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4013      	ands	r3, r2
 800666e:	d004      	beq.n	800667a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	0018      	movs	r0, r3
 8006674:	f000 f8cc 	bl	8006810 <HAL_TIM_IC_CaptureCallback>
 8006678:	e007      	b.n	800668a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	0018      	movs	r0, r3
 800667e:	f000 f8bf 	bl	8006800 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	0018      	movs	r0, r3
 8006686:	f000 f8cb 	bl	8006820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	2201      	movs	r2, #1
 8006698:	4013      	ands	r3, r2
 800669a:	2b01      	cmp	r3, #1
 800669c:	d10f      	bne.n	80066be <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	2201      	movs	r2, #1
 80066a6:	4013      	ands	r3, r2
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d108      	bne.n	80066be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2202      	movs	r2, #2
 80066b2:	4252      	negs	r2, r2
 80066b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	0018      	movs	r0, r3
 80066ba:	f7f9 ff41 	bl	8000540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	2280      	movs	r2, #128	; 0x80
 80066c6:	4013      	ands	r3, r2
 80066c8:	2b80      	cmp	r3, #128	; 0x80
 80066ca:	d10f      	bne.n	80066ec <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	2280      	movs	r2, #128	; 0x80
 80066d4:	4013      	ands	r3, r2
 80066d6:	2b80      	cmp	r3, #128	; 0x80
 80066d8:	d108      	bne.n	80066ec <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2281      	movs	r2, #129	; 0x81
 80066e0:	4252      	negs	r2, r2
 80066e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	0018      	movs	r0, r3
 80066e8:	f000 fb2e 	bl	8006d48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	2240      	movs	r2, #64	; 0x40
 80066f4:	4013      	ands	r3, r2
 80066f6:	2b40      	cmp	r3, #64	; 0x40
 80066f8:	d10f      	bne.n	800671a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	2240      	movs	r2, #64	; 0x40
 8006702:	4013      	ands	r3, r2
 8006704:	2b40      	cmp	r3, #64	; 0x40
 8006706:	d108      	bne.n	800671a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2241      	movs	r2, #65	; 0x41
 800670e:	4252      	negs	r2, r2
 8006710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	0018      	movs	r0, r3
 8006716:	f000 f88b 	bl	8006830 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	2220      	movs	r2, #32
 8006722:	4013      	ands	r3, r2
 8006724:	2b20      	cmp	r3, #32
 8006726:	d10f      	bne.n	8006748 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	2220      	movs	r2, #32
 8006730:	4013      	ands	r3, r2
 8006732:	2b20      	cmp	r3, #32
 8006734:	d108      	bne.n	8006748 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2221      	movs	r2, #33	; 0x21
 800673c:	4252      	negs	r2, r2
 800673e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	0018      	movs	r0, r3
 8006744:	f000 faf8 	bl	8006d38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006748:	46c0      	nop			; (mov r8, r8)
 800674a:	46bd      	mov	sp, r7
 800674c:	b002      	add	sp, #8
 800674e:	bd80      	pop	{r7, pc}

08006750 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800675c:	2317      	movs	r3, #23
 800675e:	18fb      	adds	r3, r7, r3
 8006760:	2200      	movs	r2, #0
 8006762:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	223c      	movs	r2, #60	; 0x3c
 8006768:	5c9b      	ldrb	r3, [r3, r2]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d101      	bne.n	8006772 <HAL_TIM_OC_ConfigChannel+0x22>
 800676e:	2302      	movs	r3, #2
 8006770:	e042      	b.n	80067f8 <HAL_TIM_OC_ConfigChannel+0xa8>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	223c      	movs	r2, #60	; 0x3c
 8006776:	2101      	movs	r1, #1
 8006778:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b0c      	cmp	r3, #12
 800677e:	d027      	beq.n	80067d0 <HAL_TIM_OC_ConfigChannel+0x80>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b0c      	cmp	r3, #12
 8006784:	d82c      	bhi.n	80067e0 <HAL_TIM_OC_ConfigChannel+0x90>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b08      	cmp	r3, #8
 800678a:	d019      	beq.n	80067c0 <HAL_TIM_OC_ConfigChannel+0x70>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b08      	cmp	r3, #8
 8006790:	d826      	bhi.n	80067e0 <HAL_TIM_OC_ConfigChannel+0x90>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <HAL_TIM_OC_ConfigChannel+0x50>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b04      	cmp	r3, #4
 800679c:	d008      	beq.n	80067b0 <HAL_TIM_OC_ConfigChannel+0x60>
 800679e:	e01f      	b.n	80067e0 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68ba      	ldr	r2, [r7, #8]
 80067a6:	0011      	movs	r1, r2
 80067a8:	0018      	movs	r0, r3
 80067aa:	f000 f8c9 	bl	8006940 <TIM_OC1_SetConfig>
      break;
 80067ae:	e01c      	b.n	80067ea <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	0011      	movs	r1, r2
 80067b8:	0018      	movs	r0, r3
 80067ba:	f000 f949 	bl	8006a50 <TIM_OC2_SetConfig>
      break;
 80067be:	e014      	b.n	80067ea <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	0011      	movs	r1, r2
 80067c8:	0018      	movs	r0, r3
 80067ca:	f000 f9c5 	bl	8006b58 <TIM_OC3_SetConfig>
      break;
 80067ce:	e00c      	b.n	80067ea <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	0011      	movs	r1, r2
 80067d8:	0018      	movs	r0, r3
 80067da:	f000 fa43 	bl	8006c64 <TIM_OC4_SetConfig>
      break;
 80067de:	e004      	b.n	80067ea <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 80067e0:	2317      	movs	r3, #23
 80067e2:	18fb      	adds	r3, r7, r3
 80067e4:	2201      	movs	r2, #1
 80067e6:	701a      	strb	r2, [r3, #0]
      break;
 80067e8:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	223c      	movs	r2, #60	; 0x3c
 80067ee:	2100      	movs	r1, #0
 80067f0:	5499      	strb	r1, [r3, r2]

  return status;
 80067f2:	2317      	movs	r3, #23
 80067f4:	18fb      	adds	r3, r7, r3
 80067f6:	781b      	ldrb	r3, [r3, #0]
}
 80067f8:	0018      	movs	r0, r3
 80067fa:	46bd      	mov	sp, r7
 80067fc:	b006      	add	sp, #24
 80067fe:	bd80      	pop	{r7, pc}

08006800 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006808:	46c0      	nop			; (mov r8, r8)
 800680a:	46bd      	mov	sp, r7
 800680c:	b002      	add	sp, #8
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006818:	46c0      	nop			; (mov r8, r8)
 800681a:	46bd      	mov	sp, r7
 800681c:	b002      	add	sp, #8
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006828:	46c0      	nop			; (mov r8, r8)
 800682a:	46bd      	mov	sp, r7
 800682c:	b002      	add	sp, #8
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006838:	46c0      	nop			; (mov r8, r8)
 800683a:	46bd      	mov	sp, r7
 800683c:	b002      	add	sp, #8
 800683e:	bd80      	pop	{r7, pc}

08006840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a34      	ldr	r2, [pc, #208]	; (8006924 <TIM_Base_SetConfig+0xe4>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d008      	beq.n	800686a <TIM_Base_SetConfig+0x2a>
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	2380      	movs	r3, #128	; 0x80
 800685c:	05db      	lsls	r3, r3, #23
 800685e:	429a      	cmp	r2, r3
 8006860:	d003      	beq.n	800686a <TIM_Base_SetConfig+0x2a>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a30      	ldr	r2, [pc, #192]	; (8006928 <TIM_Base_SetConfig+0xe8>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d108      	bne.n	800687c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2270      	movs	r2, #112	; 0x70
 800686e:	4393      	bics	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	68fa      	ldr	r2, [r7, #12]
 8006878:	4313      	orrs	r3, r2
 800687a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a29      	ldr	r2, [pc, #164]	; (8006924 <TIM_Base_SetConfig+0xe4>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d018      	beq.n	80068b6 <TIM_Base_SetConfig+0x76>
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	2380      	movs	r3, #128	; 0x80
 8006888:	05db      	lsls	r3, r3, #23
 800688a:	429a      	cmp	r2, r3
 800688c:	d013      	beq.n	80068b6 <TIM_Base_SetConfig+0x76>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a25      	ldr	r2, [pc, #148]	; (8006928 <TIM_Base_SetConfig+0xe8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d00f      	beq.n	80068b6 <TIM_Base_SetConfig+0x76>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a24      	ldr	r2, [pc, #144]	; (800692c <TIM_Base_SetConfig+0xec>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d00b      	beq.n	80068b6 <TIM_Base_SetConfig+0x76>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a23      	ldr	r2, [pc, #140]	; (8006930 <TIM_Base_SetConfig+0xf0>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d007      	beq.n	80068b6 <TIM_Base_SetConfig+0x76>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a22      	ldr	r2, [pc, #136]	; (8006934 <TIM_Base_SetConfig+0xf4>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d003      	beq.n	80068b6 <TIM_Base_SetConfig+0x76>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a21      	ldr	r2, [pc, #132]	; (8006938 <TIM_Base_SetConfig+0xf8>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d108      	bne.n	80068c8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	4a20      	ldr	r2, [pc, #128]	; (800693c <TIM_Base_SetConfig+0xfc>)
 80068ba:	4013      	ands	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2280      	movs	r2, #128	; 0x80
 80068cc:	4393      	bics	r3, r2
 80068ce:	001a      	movs	r2, r3
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	689a      	ldr	r2, [r3, #8]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a0c      	ldr	r2, [pc, #48]	; (8006924 <TIM_Base_SetConfig+0xe4>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d00b      	beq.n	800690e <TIM_Base_SetConfig+0xce>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a0d      	ldr	r2, [pc, #52]	; (8006930 <TIM_Base_SetConfig+0xf0>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d007      	beq.n	800690e <TIM_Base_SetConfig+0xce>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a0c      	ldr	r2, [pc, #48]	; (8006934 <TIM_Base_SetConfig+0xf4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d003      	beq.n	800690e <TIM_Base_SetConfig+0xce>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a0b      	ldr	r2, [pc, #44]	; (8006938 <TIM_Base_SetConfig+0xf8>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d103      	bne.n	8006916 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	691a      	ldr	r2, [r3, #16]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	615a      	str	r2, [r3, #20]
}
 800691c:	46c0      	nop			; (mov r8, r8)
 800691e:	46bd      	mov	sp, r7
 8006920:	b004      	add	sp, #16
 8006922:	bd80      	pop	{r7, pc}
 8006924:	40012c00 	.word	0x40012c00
 8006928:	40000400 	.word	0x40000400
 800692c:	40002000 	.word	0x40002000
 8006930:	40014000 	.word	0x40014000
 8006934:	40014400 	.word	0x40014400
 8006938:	40014800 	.word	0x40014800
 800693c:	fffffcff 	.word	0xfffffcff

08006940 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	2201      	movs	r2, #1
 8006950:	4393      	bics	r3, r2
 8006952:	001a      	movs	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a1b      	ldr	r3, [r3, #32]
 800695c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2270      	movs	r2, #112	; 0x70
 800696e:	4393      	bics	r3, r2
 8006970:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2203      	movs	r2, #3
 8006976:	4393      	bics	r3, r2
 8006978:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	4313      	orrs	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2202      	movs	r2, #2
 8006988:	4393      	bics	r3, r2
 800698a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	4313      	orrs	r3, r2
 8006994:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a27      	ldr	r2, [pc, #156]	; (8006a38 <TIM_OC1_SetConfig+0xf8>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d00b      	beq.n	80069b6 <TIM_OC1_SetConfig+0x76>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a26      	ldr	r2, [pc, #152]	; (8006a3c <TIM_OC1_SetConfig+0xfc>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d007      	beq.n	80069b6 <TIM_OC1_SetConfig+0x76>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a25      	ldr	r2, [pc, #148]	; (8006a40 <TIM_OC1_SetConfig+0x100>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d003      	beq.n	80069b6 <TIM_OC1_SetConfig+0x76>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a24      	ldr	r2, [pc, #144]	; (8006a44 <TIM_OC1_SetConfig+0x104>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d10c      	bne.n	80069d0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2208      	movs	r2, #8
 80069ba:	4393      	bics	r3, r2
 80069bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	2204      	movs	r2, #4
 80069cc:	4393      	bics	r3, r2
 80069ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a19      	ldr	r2, [pc, #100]	; (8006a38 <TIM_OC1_SetConfig+0xf8>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d00b      	beq.n	80069f0 <TIM_OC1_SetConfig+0xb0>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a18      	ldr	r2, [pc, #96]	; (8006a3c <TIM_OC1_SetConfig+0xfc>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d007      	beq.n	80069f0 <TIM_OC1_SetConfig+0xb0>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a17      	ldr	r2, [pc, #92]	; (8006a40 <TIM_OC1_SetConfig+0x100>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d003      	beq.n	80069f0 <TIM_OC1_SetConfig+0xb0>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a16      	ldr	r2, [pc, #88]	; (8006a44 <TIM_OC1_SetConfig+0x104>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d111      	bne.n	8006a14 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	4a15      	ldr	r2, [pc, #84]	; (8006a48 <TIM_OC1_SetConfig+0x108>)
 80069f4:	4013      	ands	r3, r2
 80069f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	4a14      	ldr	r2, [pc, #80]	; (8006a4c <TIM_OC1_SetConfig+0x10c>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	621a      	str	r2, [r3, #32]
}
 8006a2e:	46c0      	nop			; (mov r8, r8)
 8006a30:	46bd      	mov	sp, r7
 8006a32:	b006      	add	sp, #24
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	46c0      	nop			; (mov r8, r8)
 8006a38:	40012c00 	.word	0x40012c00
 8006a3c:	40014000 	.word	0x40014000
 8006a40:	40014400 	.word	0x40014400
 8006a44:	40014800 	.word	0x40014800
 8006a48:	fffffeff 	.word	0xfffffeff
 8006a4c:	fffffdff 	.word	0xfffffdff

08006a50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	2210      	movs	r2, #16
 8006a60:	4393      	bics	r3, r2
 8006a62:	001a      	movs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	4a2e      	ldr	r2, [pc, #184]	; (8006b38 <TIM_OC2_SetConfig+0xe8>)
 8006a7e:	4013      	ands	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	4a2d      	ldr	r2, [pc, #180]	; (8006b3c <TIM_OC2_SetConfig+0xec>)
 8006a86:	4013      	ands	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	021b      	lsls	r3, r3, #8
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	4393      	bics	r3, r2
 8006a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	011b      	lsls	r3, r3, #4
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a24      	ldr	r2, [pc, #144]	; (8006b40 <TIM_OC2_SetConfig+0xf0>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d10d      	bne.n	8006ace <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2280      	movs	r2, #128	; 0x80
 8006ab6:	4393      	bics	r3, r2
 8006ab8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	011b      	lsls	r3, r3, #4
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2240      	movs	r2, #64	; 0x40
 8006aca:	4393      	bics	r3, r2
 8006acc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a1b      	ldr	r2, [pc, #108]	; (8006b40 <TIM_OC2_SetConfig+0xf0>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d00b      	beq.n	8006aee <TIM_OC2_SetConfig+0x9e>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a1a      	ldr	r2, [pc, #104]	; (8006b44 <TIM_OC2_SetConfig+0xf4>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d007      	beq.n	8006aee <TIM_OC2_SetConfig+0x9e>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a19      	ldr	r2, [pc, #100]	; (8006b48 <TIM_OC2_SetConfig+0xf8>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d003      	beq.n	8006aee <TIM_OC2_SetConfig+0x9e>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a18      	ldr	r2, [pc, #96]	; (8006b4c <TIM_OC2_SetConfig+0xfc>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d113      	bne.n	8006b16 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	4a17      	ldr	r2, [pc, #92]	; (8006b50 <TIM_OC2_SetConfig+0x100>)
 8006af2:	4013      	ands	r3, r2
 8006af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	4a16      	ldr	r2, [pc, #88]	; (8006b54 <TIM_OC2_SetConfig+0x104>)
 8006afa:	4013      	ands	r3, r2
 8006afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	685a      	ldr	r2, [r3, #4]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	621a      	str	r2, [r3, #32]
}
 8006b30:	46c0      	nop			; (mov r8, r8)
 8006b32:	46bd      	mov	sp, r7
 8006b34:	b006      	add	sp, #24
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	ffff8fff 	.word	0xffff8fff
 8006b3c:	fffffcff 	.word	0xfffffcff
 8006b40:	40012c00 	.word	0x40012c00
 8006b44:	40014000 	.word	0x40014000
 8006b48:	40014400 	.word	0x40014400
 8006b4c:	40014800 	.word	0x40014800
 8006b50:	fffffbff 	.word	0xfffffbff
 8006b54:	fffff7ff 	.word	0xfffff7ff

08006b58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b086      	sub	sp, #24
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	4a35      	ldr	r2, [pc, #212]	; (8006c3c <TIM_OC3_SetConfig+0xe4>)
 8006b68:	401a      	ands	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2270      	movs	r2, #112	; 0x70
 8006b84:	4393      	bics	r3, r2
 8006b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2203      	movs	r2, #3
 8006b8c:	4393      	bics	r3, r2
 8006b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	4a28      	ldr	r2, [pc, #160]	; (8006c40 <TIM_OC3_SetConfig+0xe8>)
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	021b      	lsls	r3, r3, #8
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a24      	ldr	r2, [pc, #144]	; (8006c44 <TIM_OC3_SetConfig+0xec>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d10d      	bne.n	8006bd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	4a23      	ldr	r2, [pc, #140]	; (8006c48 <TIM_OC3_SetConfig+0xf0>)
 8006bba:	4013      	ands	r3, r2
 8006bbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	021b      	lsls	r3, r3, #8
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	4a1f      	ldr	r2, [pc, #124]	; (8006c4c <TIM_OC3_SetConfig+0xf4>)
 8006bce:	4013      	ands	r3, r2
 8006bd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a1b      	ldr	r2, [pc, #108]	; (8006c44 <TIM_OC3_SetConfig+0xec>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d00b      	beq.n	8006bf2 <TIM_OC3_SetConfig+0x9a>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a1c      	ldr	r2, [pc, #112]	; (8006c50 <TIM_OC3_SetConfig+0xf8>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d007      	beq.n	8006bf2 <TIM_OC3_SetConfig+0x9a>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a1b      	ldr	r2, [pc, #108]	; (8006c54 <TIM_OC3_SetConfig+0xfc>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d003      	beq.n	8006bf2 <TIM_OC3_SetConfig+0x9a>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a1a      	ldr	r2, [pc, #104]	; (8006c58 <TIM_OC3_SetConfig+0x100>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d113      	bne.n	8006c1a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	4a19      	ldr	r2, [pc, #100]	; (8006c5c <TIM_OC3_SetConfig+0x104>)
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	4a18      	ldr	r2, [pc, #96]	; (8006c60 <TIM_OC3_SetConfig+0x108>)
 8006bfe:	4013      	ands	r3, r2
 8006c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	011b      	lsls	r3, r3, #4
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	011b      	lsls	r3, r3, #4
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68fa      	ldr	r2, [r7, #12]
 8006c24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	621a      	str	r2, [r3, #32]
}
 8006c34:	46c0      	nop			; (mov r8, r8)
 8006c36:	46bd      	mov	sp, r7
 8006c38:	b006      	add	sp, #24
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	fffffeff 	.word	0xfffffeff
 8006c40:	fffffdff 	.word	0xfffffdff
 8006c44:	40012c00 	.word	0x40012c00
 8006c48:	fffff7ff 	.word	0xfffff7ff
 8006c4c:	fffffbff 	.word	0xfffffbff
 8006c50:	40014000 	.word	0x40014000
 8006c54:	40014400 	.word	0x40014400
 8006c58:	40014800 	.word	0x40014800
 8006c5c:	ffffefff 	.word	0xffffefff
 8006c60:	ffffdfff 	.word	0xffffdfff

08006c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	4a28      	ldr	r2, [pc, #160]	; (8006d14 <TIM_OC4_SetConfig+0xb0>)
 8006c74:	401a      	ands	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	69db      	ldr	r3, [r3, #28]
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4a22      	ldr	r2, [pc, #136]	; (8006d18 <TIM_OC4_SetConfig+0xb4>)
 8006c90:	4013      	ands	r3, r2
 8006c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	4a21      	ldr	r2, [pc, #132]	; (8006d1c <TIM_OC4_SetConfig+0xb8>)
 8006c98:	4013      	ands	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	021b      	lsls	r3, r3, #8
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	4a1d      	ldr	r2, [pc, #116]	; (8006d20 <TIM_OC4_SetConfig+0xbc>)
 8006cac:	4013      	ands	r3, r2
 8006cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	031b      	lsls	r3, r3, #12
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a19      	ldr	r2, [pc, #100]	; (8006d24 <TIM_OC4_SetConfig+0xc0>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d00b      	beq.n	8006cdc <TIM_OC4_SetConfig+0x78>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a18      	ldr	r2, [pc, #96]	; (8006d28 <TIM_OC4_SetConfig+0xc4>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d007      	beq.n	8006cdc <TIM_OC4_SetConfig+0x78>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a17      	ldr	r2, [pc, #92]	; (8006d2c <TIM_OC4_SetConfig+0xc8>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d003      	beq.n	8006cdc <TIM_OC4_SetConfig+0x78>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a16      	ldr	r2, [pc, #88]	; (8006d30 <TIM_OC4_SetConfig+0xcc>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d109      	bne.n	8006cf0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	4a15      	ldr	r2, [pc, #84]	; (8006d34 <TIM_OC4_SetConfig+0xd0>)
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	695b      	ldr	r3, [r3, #20]
 8006ce8:	019b      	lsls	r3, r3, #6
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	685a      	ldr	r2, [r3, #4]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	621a      	str	r2, [r3, #32]
}
 8006d0a:	46c0      	nop			; (mov r8, r8)
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	b006      	add	sp, #24
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	46c0      	nop			; (mov r8, r8)
 8006d14:	ffffefff 	.word	0xffffefff
 8006d18:	ffff8fff 	.word	0xffff8fff
 8006d1c:	fffffcff 	.word	0xfffffcff
 8006d20:	ffffdfff 	.word	0xffffdfff
 8006d24:	40012c00 	.word	0x40012c00
 8006d28:	40014000 	.word	0x40014000
 8006d2c:	40014400 	.word	0x40014400
 8006d30:	40014800 	.word	0x40014800
 8006d34:	ffffbfff 	.word	0xffffbfff

08006d38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d40:	46c0      	nop			; (mov r8, r8)
 8006d42:	46bd      	mov	sp, r7
 8006d44:	b002      	add	sp, #8
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d50:	46c0      	nop			; (mov r8, r8)
 8006d52:	46bd      	mov	sp, r7
 8006d54:	b002      	add	sp, #8
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b082      	sub	sp, #8
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e044      	b.n	8006df4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d107      	bne.n	8006d82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2274      	movs	r2, #116	; 0x74
 8006d76:	2100      	movs	r1, #0
 8006d78:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	0018      	movs	r0, r3
 8006d7e:	f7fa fe8b 	bl	8001a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2224      	movs	r2, #36	; 0x24
 8006d86:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2101      	movs	r1, #1
 8006d94:	438a      	bics	r2, r1
 8006d96:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	f000 fb24 	bl	80073e8 <UART_SetConfig>
 8006da0:	0003      	movs	r3, r0
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d101      	bne.n	8006daa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e024      	b.n	8006df4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d003      	beq.n	8006dba <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	0018      	movs	r0, r3
 8006db6:	f000 fc9f 	bl	80076f8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	490d      	ldr	r1, [pc, #52]	; (8006dfc <HAL_UART_Init+0xa4>)
 8006dc6:	400a      	ands	r2, r1
 8006dc8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689a      	ldr	r2, [r3, #8]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	212a      	movs	r1, #42	; 0x2a
 8006dd6:	438a      	bics	r2, r1
 8006dd8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	2101      	movs	r1, #1
 8006de6:	430a      	orrs	r2, r1
 8006de8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	0018      	movs	r0, r3
 8006dee:	f000 fd37 	bl	8007860 <UART_CheckIdleState>
 8006df2:	0003      	movs	r3, r0
}
 8006df4:	0018      	movs	r0, r3
 8006df6:	46bd      	mov	sp, r7
 8006df8:	b002      	add	sp, #8
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	ffffb7ff 	.word	0xffffb7ff

08006e00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e00:	b590      	push	{r4, r7, lr}
 8006e02:	b0ab      	sub	sp, #172	; 0xac
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	69db      	ldr	r3, [r3, #28]
 8006e0e:	22a4      	movs	r2, #164	; 0xa4
 8006e10:	18b9      	adds	r1, r7, r2
 8006e12:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	20a0      	movs	r0, #160	; 0xa0
 8006e1c:	1839      	adds	r1, r7, r0
 8006e1e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	219c      	movs	r1, #156	; 0x9c
 8006e28:	1879      	adds	r1, r7, r1
 8006e2a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e2c:	0011      	movs	r1, r2
 8006e2e:	18bb      	adds	r3, r7, r2
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a99      	ldr	r2, [pc, #612]	; (8007098 <HAL_UART_IRQHandler+0x298>)
 8006e34:	4013      	ands	r3, r2
 8006e36:	2298      	movs	r2, #152	; 0x98
 8006e38:	18bc      	adds	r4, r7, r2
 8006e3a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006e3c:	18bb      	adds	r3, r7, r2
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d114      	bne.n	8006e6e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e44:	187b      	adds	r3, r7, r1
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	d00f      	beq.n	8006e6e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e4e:	183b      	adds	r3, r7, r0
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2220      	movs	r2, #32
 8006e54:	4013      	ands	r3, r2
 8006e56:	d00a      	beq.n	8006e6e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d100      	bne.n	8006e62 <HAL_UART_IRQHandler+0x62>
 8006e60:	e296      	b.n	8007390 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	0010      	movs	r0, r2
 8006e6a:	4798      	blx	r3
      }
      return;
 8006e6c:	e290      	b.n	8007390 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e6e:	2398      	movs	r3, #152	; 0x98
 8006e70:	18fb      	adds	r3, r7, r3
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d100      	bne.n	8006e7a <HAL_UART_IRQHandler+0x7a>
 8006e78:	e114      	b.n	80070a4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006e7a:	239c      	movs	r3, #156	; 0x9c
 8006e7c:	18fb      	adds	r3, r7, r3
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2201      	movs	r2, #1
 8006e82:	4013      	ands	r3, r2
 8006e84:	d106      	bne.n	8006e94 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006e86:	23a0      	movs	r3, #160	; 0xa0
 8006e88:	18fb      	adds	r3, r7, r3
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a83      	ldr	r2, [pc, #524]	; (800709c <HAL_UART_IRQHandler+0x29c>)
 8006e8e:	4013      	ands	r3, r2
 8006e90:	d100      	bne.n	8006e94 <HAL_UART_IRQHandler+0x94>
 8006e92:	e107      	b.n	80070a4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e94:	23a4      	movs	r3, #164	; 0xa4
 8006e96:	18fb      	adds	r3, r7, r3
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	d012      	beq.n	8006ec6 <HAL_UART_IRQHandler+0xc6>
 8006ea0:	23a0      	movs	r3, #160	; 0xa0
 8006ea2:	18fb      	adds	r3, r7, r3
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	2380      	movs	r3, #128	; 0x80
 8006ea8:	005b      	lsls	r3, r3, #1
 8006eaa:	4013      	ands	r3, r2
 8006eac:	d00b      	beq.n	8006ec6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2280      	movs	r2, #128	; 0x80
 8006eba:	589b      	ldr	r3, [r3, r2]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2180      	movs	r1, #128	; 0x80
 8006ec4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ec6:	23a4      	movs	r3, #164	; 0xa4
 8006ec8:	18fb      	adds	r3, r7, r3
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2202      	movs	r2, #2
 8006ece:	4013      	ands	r3, r2
 8006ed0:	d011      	beq.n	8006ef6 <HAL_UART_IRQHandler+0xf6>
 8006ed2:	239c      	movs	r3, #156	; 0x9c
 8006ed4:	18fb      	adds	r3, r7, r3
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	4013      	ands	r3, r2
 8006edc:	d00b      	beq.n	8006ef6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2280      	movs	r2, #128	; 0x80
 8006eea:	589b      	ldr	r3, [r3, r2]
 8006eec:	2204      	movs	r2, #4
 8006eee:	431a      	orrs	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2180      	movs	r1, #128	; 0x80
 8006ef4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ef6:	23a4      	movs	r3, #164	; 0xa4
 8006ef8:	18fb      	adds	r3, r7, r3
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	2204      	movs	r2, #4
 8006efe:	4013      	ands	r3, r2
 8006f00:	d011      	beq.n	8006f26 <HAL_UART_IRQHandler+0x126>
 8006f02:	239c      	movs	r3, #156	; 0x9c
 8006f04:	18fb      	adds	r3, r7, r3
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	d00b      	beq.n	8006f26 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2204      	movs	r2, #4
 8006f14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2280      	movs	r2, #128	; 0x80
 8006f1a:	589b      	ldr	r3, [r3, r2]
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	431a      	orrs	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2180      	movs	r1, #128	; 0x80
 8006f24:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f26:	23a4      	movs	r3, #164	; 0xa4
 8006f28:	18fb      	adds	r3, r7, r3
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2208      	movs	r2, #8
 8006f2e:	4013      	ands	r3, r2
 8006f30:	d017      	beq.n	8006f62 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f32:	23a0      	movs	r3, #160	; 0xa0
 8006f34:	18fb      	adds	r3, r7, r3
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	d105      	bne.n	8006f4a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006f3e:	239c      	movs	r3, #156	; 0x9c
 8006f40:	18fb      	adds	r3, r7, r3
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2201      	movs	r2, #1
 8006f46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f48:	d00b      	beq.n	8006f62 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2208      	movs	r2, #8
 8006f50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2280      	movs	r2, #128	; 0x80
 8006f56:	589b      	ldr	r3, [r3, r2]
 8006f58:	2208      	movs	r2, #8
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2180      	movs	r1, #128	; 0x80
 8006f60:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f62:	23a4      	movs	r3, #164	; 0xa4
 8006f64:	18fb      	adds	r3, r7, r3
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	2380      	movs	r3, #128	; 0x80
 8006f6a:	011b      	lsls	r3, r3, #4
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	d013      	beq.n	8006f98 <HAL_UART_IRQHandler+0x198>
 8006f70:	23a0      	movs	r3, #160	; 0xa0
 8006f72:	18fb      	adds	r3, r7, r3
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	2380      	movs	r3, #128	; 0x80
 8006f78:	04db      	lsls	r3, r3, #19
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	d00c      	beq.n	8006f98 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2280      	movs	r2, #128	; 0x80
 8006f84:	0112      	lsls	r2, r2, #4
 8006f86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2280      	movs	r2, #128	; 0x80
 8006f8c:	589b      	ldr	r3, [r3, r2]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	431a      	orrs	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2180      	movs	r1, #128	; 0x80
 8006f96:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2280      	movs	r2, #128	; 0x80
 8006f9c:	589b      	ldr	r3, [r3, r2]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d100      	bne.n	8006fa4 <HAL_UART_IRQHandler+0x1a4>
 8006fa2:	e1f7      	b.n	8007394 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006fa4:	23a4      	movs	r3, #164	; 0xa4
 8006fa6:	18fb      	adds	r3, r7, r3
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2220      	movs	r2, #32
 8006fac:	4013      	ands	r3, r2
 8006fae:	d00e      	beq.n	8006fce <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006fb0:	23a0      	movs	r3, #160	; 0xa0
 8006fb2:	18fb      	adds	r3, r7, r3
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2220      	movs	r2, #32
 8006fb8:	4013      	ands	r3, r2
 8006fba:	d008      	beq.n	8006fce <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d004      	beq.n	8006fce <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	0010      	movs	r0, r2
 8006fcc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2280      	movs	r2, #128	; 0x80
 8006fd2:	589b      	ldr	r3, [r3, r2]
 8006fd4:	2194      	movs	r1, #148	; 0x94
 8006fd6:	187a      	adds	r2, r7, r1
 8006fd8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	2240      	movs	r2, #64	; 0x40
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	2b40      	cmp	r3, #64	; 0x40
 8006fe6:	d004      	beq.n	8006ff2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006fe8:	187b      	adds	r3, r7, r1
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2228      	movs	r2, #40	; 0x28
 8006fee:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ff0:	d047      	beq.n	8007082 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	0018      	movs	r0, r3
 8006ff6:	f000 fd3f 	bl	8007a78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	2240      	movs	r2, #64	; 0x40
 8007002:	4013      	ands	r3, r2
 8007004:	2b40      	cmp	r3, #64	; 0x40
 8007006:	d137      	bne.n	8007078 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007008:	f3ef 8310 	mrs	r3, PRIMASK
 800700c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800700e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007010:	2090      	movs	r0, #144	; 0x90
 8007012:	183a      	adds	r2, r7, r0
 8007014:	6013      	str	r3, [r2, #0]
 8007016:	2301      	movs	r3, #1
 8007018:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800701a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800701c:	f383 8810 	msr	PRIMASK, r3
}
 8007020:	46c0      	nop			; (mov r8, r8)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	689a      	ldr	r2, [r3, #8]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2140      	movs	r1, #64	; 0x40
 800702e:	438a      	bics	r2, r1
 8007030:	609a      	str	r2, [r3, #8]
 8007032:	183b      	adds	r3, r7, r0
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007038:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800703a:	f383 8810 	msr	PRIMASK, r3
}
 800703e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007044:	2b00      	cmp	r3, #0
 8007046:	d012      	beq.n	800706e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800704c:	4a14      	ldr	r2, [pc, #80]	; (80070a0 <HAL_UART_IRQHandler+0x2a0>)
 800704e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007054:	0018      	movs	r0, r3
 8007056:	f7fb fe59 	bl	8002d0c <HAL_DMA_Abort_IT>
 800705a:	1e03      	subs	r3, r0, #0
 800705c:	d01a      	beq.n	8007094 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007068:	0018      	movs	r0, r3
 800706a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800706c:	e012      	b.n	8007094 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	0018      	movs	r0, r3
 8007072:	f000 f9a5 	bl	80073c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007076:	e00d      	b.n	8007094 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	0018      	movs	r0, r3
 800707c:	f000 f9a0 	bl	80073c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007080:	e008      	b.n	8007094 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	0018      	movs	r0, r3
 8007086:	f000 f99b 	bl	80073c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2280      	movs	r2, #128	; 0x80
 800708e:	2100      	movs	r1, #0
 8007090:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007092:	e17f      	b.n	8007394 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007094:	46c0      	nop			; (mov r8, r8)
    return;
 8007096:	e17d      	b.n	8007394 <HAL_UART_IRQHandler+0x594>
 8007098:	0000080f 	.word	0x0000080f
 800709c:	04000120 	.word	0x04000120
 80070a0:	08007b3d 	.word	0x08007b3d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d000      	beq.n	80070ae <HAL_UART_IRQHandler+0x2ae>
 80070ac:	e131      	b.n	8007312 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80070ae:	23a4      	movs	r3, #164	; 0xa4
 80070b0:	18fb      	adds	r3, r7, r3
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2210      	movs	r2, #16
 80070b6:	4013      	ands	r3, r2
 80070b8:	d100      	bne.n	80070bc <HAL_UART_IRQHandler+0x2bc>
 80070ba:	e12a      	b.n	8007312 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80070bc:	23a0      	movs	r3, #160	; 0xa0
 80070be:	18fb      	adds	r3, r7, r3
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2210      	movs	r2, #16
 80070c4:	4013      	ands	r3, r2
 80070c6:	d100      	bne.n	80070ca <HAL_UART_IRQHandler+0x2ca>
 80070c8:	e123      	b.n	8007312 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2210      	movs	r2, #16
 80070d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	2240      	movs	r2, #64	; 0x40
 80070da:	4013      	ands	r3, r2
 80070dc:	2b40      	cmp	r3, #64	; 0x40
 80070de:	d000      	beq.n	80070e2 <HAL_UART_IRQHandler+0x2e2>
 80070e0:	e09b      	b.n	800721a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	685a      	ldr	r2, [r3, #4]
 80070ea:	217e      	movs	r1, #126	; 0x7e
 80070ec:	187b      	adds	r3, r7, r1
 80070ee:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80070f0:	187b      	adds	r3, r7, r1
 80070f2:	881b      	ldrh	r3, [r3, #0]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d100      	bne.n	80070fa <HAL_UART_IRQHandler+0x2fa>
 80070f8:	e14e      	b.n	8007398 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2258      	movs	r2, #88	; 0x58
 80070fe:	5a9b      	ldrh	r3, [r3, r2]
 8007100:	187a      	adds	r2, r7, r1
 8007102:	8812      	ldrh	r2, [r2, #0]
 8007104:	429a      	cmp	r2, r3
 8007106:	d300      	bcc.n	800710a <HAL_UART_IRQHandler+0x30a>
 8007108:	e146      	b.n	8007398 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	187a      	adds	r2, r7, r1
 800710e:	215a      	movs	r1, #90	; 0x5a
 8007110:	8812      	ldrh	r2, [r2, #0]
 8007112:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	2b20      	cmp	r3, #32
 800711c:	d06e      	beq.n	80071fc <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800711e:	f3ef 8310 	mrs	r3, PRIMASK
 8007122:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007126:	67bb      	str	r3, [r7, #120]	; 0x78
 8007128:	2301      	movs	r3, #1
 800712a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800712c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712e:	f383 8810 	msr	PRIMASK, r3
}
 8007132:	46c0      	nop			; (mov r8, r8)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	499a      	ldr	r1, [pc, #616]	; (80073a8 <HAL_UART_IRQHandler+0x5a8>)
 8007140:	400a      	ands	r2, r1
 8007142:	601a      	str	r2, [r3, #0]
 8007144:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007146:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714a:	f383 8810 	msr	PRIMASK, r3
}
 800714e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007150:	f3ef 8310 	mrs	r3, PRIMASK
 8007154:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007158:	677b      	str	r3, [r7, #116]	; 0x74
 800715a:	2301      	movs	r3, #1
 800715c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800715e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007160:	f383 8810 	msr	PRIMASK, r3
}
 8007164:	46c0      	nop			; (mov r8, r8)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	689a      	ldr	r2, [r3, #8]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2101      	movs	r1, #1
 8007172:	438a      	bics	r2, r1
 8007174:	609a      	str	r2, [r3, #8]
 8007176:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007178:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800717a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800717c:	f383 8810 	msr	PRIMASK, r3
}
 8007180:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007182:	f3ef 8310 	mrs	r3, PRIMASK
 8007186:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007188:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800718a:	673b      	str	r3, [r7, #112]	; 0x70
 800718c:	2301      	movs	r3, #1
 800718e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007190:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007192:	f383 8810 	msr	PRIMASK, r3
}
 8007196:	46c0      	nop			; (mov r8, r8)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	689a      	ldr	r2, [r3, #8]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	2140      	movs	r1, #64	; 0x40
 80071a4:	438a      	bics	r2, r1
 80071a6:	609a      	str	r2, [r3, #8]
 80071a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071aa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071ae:	f383 8810 	msr	PRIMASK, r3
}
 80071b2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2220      	movs	r2, #32
 80071b8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071c0:	f3ef 8310 	mrs	r3, PRIMASK
 80071c4:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80071c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071ca:	2301      	movs	r3, #1
 80071cc:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071d0:	f383 8810 	msr	PRIMASK, r3
}
 80071d4:	46c0      	nop			; (mov r8, r8)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2110      	movs	r1, #16
 80071e2:	438a      	bics	r2, r1
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071ec:	f383 8810 	msr	PRIMASK, r3
}
 80071f0:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f6:	0018      	movs	r0, r3
 80071f8:	f7fb fd50 	bl	8002c9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2258      	movs	r2, #88	; 0x58
 8007200:	5a9a      	ldrh	r2, [r3, r2]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	215a      	movs	r1, #90	; 0x5a
 8007206:	5a5b      	ldrh	r3, [r3, r1]
 8007208:	b29b      	uxth	r3, r3
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	b29a      	uxth	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	0011      	movs	r1, r2
 8007212:	0018      	movs	r0, r3
 8007214:	f000 f8dc 	bl	80073d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007218:	e0be      	b.n	8007398 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2258      	movs	r2, #88	; 0x58
 800721e:	5a99      	ldrh	r1, [r3, r2]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	225a      	movs	r2, #90	; 0x5a
 8007224:	5a9b      	ldrh	r3, [r3, r2]
 8007226:	b29a      	uxth	r2, r3
 8007228:	208e      	movs	r0, #142	; 0x8e
 800722a:	183b      	adds	r3, r7, r0
 800722c:	1a8a      	subs	r2, r1, r2
 800722e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	225a      	movs	r2, #90	; 0x5a
 8007234:	5a9b      	ldrh	r3, [r3, r2]
 8007236:	b29b      	uxth	r3, r3
 8007238:	2b00      	cmp	r3, #0
 800723a:	d100      	bne.n	800723e <HAL_UART_IRQHandler+0x43e>
 800723c:	e0ae      	b.n	800739c <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800723e:	183b      	adds	r3, r7, r0
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d100      	bne.n	8007248 <HAL_UART_IRQHandler+0x448>
 8007246:	e0a9      	b.n	800739c <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007248:	f3ef 8310 	mrs	r3, PRIMASK
 800724c:	60fb      	str	r3, [r7, #12]
  return(result);
 800724e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007250:	2488      	movs	r4, #136	; 0x88
 8007252:	193a      	adds	r2, r7, r4
 8007254:	6013      	str	r3, [r2, #0]
 8007256:	2301      	movs	r3, #1
 8007258:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f383 8810 	msr	PRIMASK, r3
}
 8007260:	46c0      	nop			; (mov r8, r8)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	494f      	ldr	r1, [pc, #316]	; (80073ac <HAL_UART_IRQHandler+0x5ac>)
 800726e:	400a      	ands	r2, r1
 8007270:	601a      	str	r2, [r3, #0]
 8007272:	193b      	adds	r3, r7, r4
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	f383 8810 	msr	PRIMASK, r3
}
 800727e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007280:	f3ef 8310 	mrs	r3, PRIMASK
 8007284:	61bb      	str	r3, [r7, #24]
  return(result);
 8007286:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007288:	2484      	movs	r4, #132	; 0x84
 800728a:	193a      	adds	r2, r7, r4
 800728c:	6013      	str	r3, [r2, #0]
 800728e:	2301      	movs	r3, #1
 8007290:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	f383 8810 	msr	PRIMASK, r3
}
 8007298:	46c0      	nop			; (mov r8, r8)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	689a      	ldr	r2, [r3, #8]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2101      	movs	r1, #1
 80072a6:	438a      	bics	r2, r1
 80072a8:	609a      	str	r2, [r3, #8]
 80072aa:	193b      	adds	r3, r7, r4
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072b0:	6a3b      	ldr	r3, [r7, #32]
 80072b2:	f383 8810 	msr	PRIMASK, r3
}
 80072b6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2220      	movs	r2, #32
 80072bc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072ca:	f3ef 8310 	mrs	r3, PRIMASK
 80072ce:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d2:	2480      	movs	r4, #128	; 0x80
 80072d4:	193a      	adds	r2, r7, r4
 80072d6:	6013      	str	r3, [r2, #0]
 80072d8:	2301      	movs	r3, #1
 80072da:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072de:	f383 8810 	msr	PRIMASK, r3
}
 80072e2:	46c0      	nop			; (mov r8, r8)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2110      	movs	r1, #16
 80072f0:	438a      	bics	r2, r1
 80072f2:	601a      	str	r2, [r3, #0]
 80072f4:	193b      	adds	r3, r7, r4
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fc:	f383 8810 	msr	PRIMASK, r3
}
 8007300:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007302:	183b      	adds	r3, r7, r0
 8007304:	881a      	ldrh	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	0011      	movs	r1, r2
 800730a:	0018      	movs	r0, r3
 800730c:	f000 f860 	bl	80073d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007310:	e044      	b.n	800739c <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007312:	23a4      	movs	r3, #164	; 0xa4
 8007314:	18fb      	adds	r3, r7, r3
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	2380      	movs	r3, #128	; 0x80
 800731a:	035b      	lsls	r3, r3, #13
 800731c:	4013      	ands	r3, r2
 800731e:	d010      	beq.n	8007342 <HAL_UART_IRQHandler+0x542>
 8007320:	239c      	movs	r3, #156	; 0x9c
 8007322:	18fb      	adds	r3, r7, r3
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	2380      	movs	r3, #128	; 0x80
 8007328:	03db      	lsls	r3, r3, #15
 800732a:	4013      	ands	r3, r2
 800732c:	d009      	beq.n	8007342 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2280      	movs	r2, #128	; 0x80
 8007334:	0352      	lsls	r2, r2, #13
 8007336:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	0018      	movs	r0, r3
 800733c:	f000 fc40 	bl	8007bc0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007340:	e02f      	b.n	80073a2 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007342:	23a4      	movs	r3, #164	; 0xa4
 8007344:	18fb      	adds	r3, r7, r3
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2280      	movs	r2, #128	; 0x80
 800734a:	4013      	ands	r3, r2
 800734c:	d00f      	beq.n	800736e <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800734e:	23a0      	movs	r3, #160	; 0xa0
 8007350:	18fb      	adds	r3, r7, r3
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2280      	movs	r2, #128	; 0x80
 8007356:	4013      	ands	r3, r2
 8007358:	d009      	beq.n	800736e <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800735e:	2b00      	cmp	r3, #0
 8007360:	d01e      	beq.n	80073a0 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	0010      	movs	r0, r2
 800736a:	4798      	blx	r3
    }
    return;
 800736c:	e018      	b.n	80073a0 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800736e:	23a4      	movs	r3, #164	; 0xa4
 8007370:	18fb      	adds	r3, r7, r3
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2240      	movs	r2, #64	; 0x40
 8007376:	4013      	ands	r3, r2
 8007378:	d013      	beq.n	80073a2 <HAL_UART_IRQHandler+0x5a2>
 800737a:	23a0      	movs	r3, #160	; 0xa0
 800737c:	18fb      	adds	r3, r7, r3
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2240      	movs	r2, #64	; 0x40
 8007382:	4013      	ands	r3, r2
 8007384:	d00d      	beq.n	80073a2 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	0018      	movs	r0, r3
 800738a:	f000 fbee 	bl	8007b6a <UART_EndTransmit_IT>
    return;
 800738e:	e008      	b.n	80073a2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8007390:	46c0      	nop			; (mov r8, r8)
 8007392:	e006      	b.n	80073a2 <HAL_UART_IRQHandler+0x5a2>
    return;
 8007394:	46c0      	nop			; (mov r8, r8)
 8007396:	e004      	b.n	80073a2 <HAL_UART_IRQHandler+0x5a2>
      return;
 8007398:	46c0      	nop			; (mov r8, r8)
 800739a:	e002      	b.n	80073a2 <HAL_UART_IRQHandler+0x5a2>
      return;
 800739c:	46c0      	nop			; (mov r8, r8)
 800739e:	e000      	b.n	80073a2 <HAL_UART_IRQHandler+0x5a2>
    return;
 80073a0:	46c0      	nop			; (mov r8, r8)
  }

}
 80073a2:	46bd      	mov	sp, r7
 80073a4:	b02b      	add	sp, #172	; 0xac
 80073a6:	bd90      	pop	{r4, r7, pc}
 80073a8:	fffffeff 	.word	0xfffffeff
 80073ac:	fffffedf 	.word	0xfffffedf

080073b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80073b8:	46c0      	nop			; (mov r8, r8)
 80073ba:	46bd      	mov	sp, r7
 80073bc:	b002      	add	sp, #8
 80073be:	bd80      	pop	{r7, pc}

080073c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80073c8:	46c0      	nop			; (mov r8, r8)
 80073ca:	46bd      	mov	sp, r7
 80073cc:	b002      	add	sp, #8
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	000a      	movs	r2, r1
 80073da:	1cbb      	adds	r3, r7, #2
 80073dc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073de:	46c0      	nop			; (mov r8, r8)
 80073e0:	46bd      	mov	sp, r7
 80073e2:	b002      	add	sp, #8
 80073e4:	bd80      	pop	{r7, pc}
	...

080073e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b088      	sub	sp, #32
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073f0:	231e      	movs	r3, #30
 80073f2:	18fb      	adds	r3, r7, r3
 80073f4:	2200      	movs	r2, #0
 80073f6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	689a      	ldr	r2, [r3, #8]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	431a      	orrs	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	431a      	orrs	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	69db      	ldr	r3, [r3, #28]
 800740c:	4313      	orrs	r3, r2
 800740e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4aaf      	ldr	r2, [pc, #700]	; (80076d4 <UART_SetConfig+0x2ec>)
 8007418:	4013      	ands	r3, r2
 800741a:	0019      	movs	r1, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	430a      	orrs	r2, r1
 8007424:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	4aaa      	ldr	r2, [pc, #680]	; (80076d8 <UART_SetConfig+0x2f0>)
 800742e:	4013      	ands	r3, r2
 8007430:	0019      	movs	r1, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	68da      	ldr	r2, [r3, #12]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	430a      	orrs	r2, r1
 800743c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a1b      	ldr	r3, [r3, #32]
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	4313      	orrs	r3, r2
 800744c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	4aa1      	ldr	r2, [pc, #644]	; (80076dc <UART_SetConfig+0x2f4>)
 8007456:	4013      	ands	r3, r2
 8007458:	0019      	movs	r1, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	430a      	orrs	r2, r1
 8007462:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a9d      	ldr	r2, [pc, #628]	; (80076e0 <UART_SetConfig+0x2f8>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d127      	bne.n	80074be <UART_SetConfig+0xd6>
 800746e:	4b9d      	ldr	r3, [pc, #628]	; (80076e4 <UART_SetConfig+0x2fc>)
 8007470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007472:	2203      	movs	r2, #3
 8007474:	4013      	ands	r3, r2
 8007476:	2b03      	cmp	r3, #3
 8007478:	d00d      	beq.n	8007496 <UART_SetConfig+0xae>
 800747a:	d81b      	bhi.n	80074b4 <UART_SetConfig+0xcc>
 800747c:	2b02      	cmp	r3, #2
 800747e:	d014      	beq.n	80074aa <UART_SetConfig+0xc2>
 8007480:	d818      	bhi.n	80074b4 <UART_SetConfig+0xcc>
 8007482:	2b00      	cmp	r3, #0
 8007484:	d002      	beq.n	800748c <UART_SetConfig+0xa4>
 8007486:	2b01      	cmp	r3, #1
 8007488:	d00a      	beq.n	80074a0 <UART_SetConfig+0xb8>
 800748a:	e013      	b.n	80074b4 <UART_SetConfig+0xcc>
 800748c:	231f      	movs	r3, #31
 800748e:	18fb      	adds	r3, r7, r3
 8007490:	2200      	movs	r2, #0
 8007492:	701a      	strb	r2, [r3, #0]
 8007494:	e065      	b.n	8007562 <UART_SetConfig+0x17a>
 8007496:	231f      	movs	r3, #31
 8007498:	18fb      	adds	r3, r7, r3
 800749a:	2202      	movs	r2, #2
 800749c:	701a      	strb	r2, [r3, #0]
 800749e:	e060      	b.n	8007562 <UART_SetConfig+0x17a>
 80074a0:	231f      	movs	r3, #31
 80074a2:	18fb      	adds	r3, r7, r3
 80074a4:	2204      	movs	r2, #4
 80074a6:	701a      	strb	r2, [r3, #0]
 80074a8:	e05b      	b.n	8007562 <UART_SetConfig+0x17a>
 80074aa:	231f      	movs	r3, #31
 80074ac:	18fb      	adds	r3, r7, r3
 80074ae:	2208      	movs	r2, #8
 80074b0:	701a      	strb	r2, [r3, #0]
 80074b2:	e056      	b.n	8007562 <UART_SetConfig+0x17a>
 80074b4:	231f      	movs	r3, #31
 80074b6:	18fb      	adds	r3, r7, r3
 80074b8:	2210      	movs	r2, #16
 80074ba:	701a      	strb	r2, [r3, #0]
 80074bc:	e051      	b.n	8007562 <UART_SetConfig+0x17a>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a89      	ldr	r2, [pc, #548]	; (80076e8 <UART_SetConfig+0x300>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d134      	bne.n	8007532 <UART_SetConfig+0x14a>
 80074c8:	4b86      	ldr	r3, [pc, #536]	; (80076e4 <UART_SetConfig+0x2fc>)
 80074ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074cc:	23c0      	movs	r3, #192	; 0xc0
 80074ce:	029b      	lsls	r3, r3, #10
 80074d0:	4013      	ands	r3, r2
 80074d2:	22c0      	movs	r2, #192	; 0xc0
 80074d4:	0292      	lsls	r2, r2, #10
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d017      	beq.n	800750a <UART_SetConfig+0x122>
 80074da:	22c0      	movs	r2, #192	; 0xc0
 80074dc:	0292      	lsls	r2, r2, #10
 80074de:	4293      	cmp	r3, r2
 80074e0:	d822      	bhi.n	8007528 <UART_SetConfig+0x140>
 80074e2:	2280      	movs	r2, #128	; 0x80
 80074e4:	0292      	lsls	r2, r2, #10
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d019      	beq.n	800751e <UART_SetConfig+0x136>
 80074ea:	2280      	movs	r2, #128	; 0x80
 80074ec:	0292      	lsls	r2, r2, #10
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d81a      	bhi.n	8007528 <UART_SetConfig+0x140>
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d004      	beq.n	8007500 <UART_SetConfig+0x118>
 80074f6:	2280      	movs	r2, #128	; 0x80
 80074f8:	0252      	lsls	r2, r2, #9
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d00a      	beq.n	8007514 <UART_SetConfig+0x12c>
 80074fe:	e013      	b.n	8007528 <UART_SetConfig+0x140>
 8007500:	231f      	movs	r3, #31
 8007502:	18fb      	adds	r3, r7, r3
 8007504:	2200      	movs	r2, #0
 8007506:	701a      	strb	r2, [r3, #0]
 8007508:	e02b      	b.n	8007562 <UART_SetConfig+0x17a>
 800750a:	231f      	movs	r3, #31
 800750c:	18fb      	adds	r3, r7, r3
 800750e:	2202      	movs	r2, #2
 8007510:	701a      	strb	r2, [r3, #0]
 8007512:	e026      	b.n	8007562 <UART_SetConfig+0x17a>
 8007514:	231f      	movs	r3, #31
 8007516:	18fb      	adds	r3, r7, r3
 8007518:	2204      	movs	r2, #4
 800751a:	701a      	strb	r2, [r3, #0]
 800751c:	e021      	b.n	8007562 <UART_SetConfig+0x17a>
 800751e:	231f      	movs	r3, #31
 8007520:	18fb      	adds	r3, r7, r3
 8007522:	2208      	movs	r2, #8
 8007524:	701a      	strb	r2, [r3, #0]
 8007526:	e01c      	b.n	8007562 <UART_SetConfig+0x17a>
 8007528:	231f      	movs	r3, #31
 800752a:	18fb      	adds	r3, r7, r3
 800752c:	2210      	movs	r2, #16
 800752e:	701a      	strb	r2, [r3, #0]
 8007530:	e017      	b.n	8007562 <UART_SetConfig+0x17a>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a6d      	ldr	r2, [pc, #436]	; (80076ec <UART_SetConfig+0x304>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d104      	bne.n	8007546 <UART_SetConfig+0x15e>
 800753c:	231f      	movs	r3, #31
 800753e:	18fb      	adds	r3, r7, r3
 8007540:	2200      	movs	r2, #0
 8007542:	701a      	strb	r2, [r3, #0]
 8007544:	e00d      	b.n	8007562 <UART_SetConfig+0x17a>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a69      	ldr	r2, [pc, #420]	; (80076f0 <UART_SetConfig+0x308>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d104      	bne.n	800755a <UART_SetConfig+0x172>
 8007550:	231f      	movs	r3, #31
 8007552:	18fb      	adds	r3, r7, r3
 8007554:	2200      	movs	r2, #0
 8007556:	701a      	strb	r2, [r3, #0]
 8007558:	e003      	b.n	8007562 <UART_SetConfig+0x17a>
 800755a:	231f      	movs	r3, #31
 800755c:	18fb      	adds	r3, r7, r3
 800755e:	2210      	movs	r2, #16
 8007560:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	69da      	ldr	r2, [r3, #28]
 8007566:	2380      	movs	r3, #128	; 0x80
 8007568:	021b      	lsls	r3, r3, #8
 800756a:	429a      	cmp	r2, r3
 800756c:	d15d      	bne.n	800762a <UART_SetConfig+0x242>
  {
    switch (clocksource)
 800756e:	231f      	movs	r3, #31
 8007570:	18fb      	adds	r3, r7, r3
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	2b08      	cmp	r3, #8
 8007576:	d015      	beq.n	80075a4 <UART_SetConfig+0x1bc>
 8007578:	dc18      	bgt.n	80075ac <UART_SetConfig+0x1c4>
 800757a:	2b04      	cmp	r3, #4
 800757c:	d00d      	beq.n	800759a <UART_SetConfig+0x1b2>
 800757e:	dc15      	bgt.n	80075ac <UART_SetConfig+0x1c4>
 8007580:	2b00      	cmp	r3, #0
 8007582:	d002      	beq.n	800758a <UART_SetConfig+0x1a2>
 8007584:	2b02      	cmp	r3, #2
 8007586:	d005      	beq.n	8007594 <UART_SetConfig+0x1ac>
 8007588:	e010      	b.n	80075ac <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800758a:	f7fe fa37 	bl	80059fc <HAL_RCC_GetPCLK1Freq>
 800758e:	0003      	movs	r3, r0
 8007590:	61bb      	str	r3, [r7, #24]
        break;
 8007592:	e012      	b.n	80075ba <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007594:	4b57      	ldr	r3, [pc, #348]	; (80076f4 <UART_SetConfig+0x30c>)
 8007596:	61bb      	str	r3, [r7, #24]
        break;
 8007598:	e00f      	b.n	80075ba <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800759a:	f7fe f9a3 	bl	80058e4 <HAL_RCC_GetSysClockFreq>
 800759e:	0003      	movs	r3, r0
 80075a0:	61bb      	str	r3, [r7, #24]
        break;
 80075a2:	e00a      	b.n	80075ba <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075a4:	2380      	movs	r3, #128	; 0x80
 80075a6:	021b      	lsls	r3, r3, #8
 80075a8:	61bb      	str	r3, [r7, #24]
        break;
 80075aa:	e006      	b.n	80075ba <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80075ac:	2300      	movs	r3, #0
 80075ae:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80075b0:	231e      	movs	r3, #30
 80075b2:	18fb      	adds	r3, r7, r3
 80075b4:	2201      	movs	r2, #1
 80075b6:	701a      	strb	r2, [r3, #0]
        break;
 80075b8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d100      	bne.n	80075c2 <UART_SetConfig+0x1da>
 80075c0:	e07b      	b.n	80076ba <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	005a      	lsls	r2, r3, #1
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	085b      	lsrs	r3, r3, #1
 80075cc:	18d2      	adds	r2, r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	0019      	movs	r1, r3
 80075d4:	0010      	movs	r0, r2
 80075d6:	f7f8 fda9 	bl	800012c <__udivsi3>
 80075da:	0003      	movs	r3, r0
 80075dc:	b29b      	uxth	r3, r3
 80075de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	2b0f      	cmp	r3, #15
 80075e4:	d91c      	bls.n	8007620 <UART_SetConfig+0x238>
 80075e6:	693a      	ldr	r2, [r7, #16]
 80075e8:	2380      	movs	r3, #128	; 0x80
 80075ea:	025b      	lsls	r3, r3, #9
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d217      	bcs.n	8007620 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	b29a      	uxth	r2, r3
 80075f4:	200e      	movs	r0, #14
 80075f6:	183b      	adds	r3, r7, r0
 80075f8:	210f      	movs	r1, #15
 80075fa:	438a      	bics	r2, r1
 80075fc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	085b      	lsrs	r3, r3, #1
 8007602:	b29b      	uxth	r3, r3
 8007604:	2207      	movs	r2, #7
 8007606:	4013      	ands	r3, r2
 8007608:	b299      	uxth	r1, r3
 800760a:	183b      	adds	r3, r7, r0
 800760c:	183a      	adds	r2, r7, r0
 800760e:	8812      	ldrh	r2, [r2, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	183a      	adds	r2, r7, r0
 800761a:	8812      	ldrh	r2, [r2, #0]
 800761c:	60da      	str	r2, [r3, #12]
 800761e:	e04c      	b.n	80076ba <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8007620:	231e      	movs	r3, #30
 8007622:	18fb      	adds	r3, r7, r3
 8007624:	2201      	movs	r2, #1
 8007626:	701a      	strb	r2, [r3, #0]
 8007628:	e047      	b.n	80076ba <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800762a:	231f      	movs	r3, #31
 800762c:	18fb      	adds	r3, r7, r3
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	2b08      	cmp	r3, #8
 8007632:	d015      	beq.n	8007660 <UART_SetConfig+0x278>
 8007634:	dc18      	bgt.n	8007668 <UART_SetConfig+0x280>
 8007636:	2b04      	cmp	r3, #4
 8007638:	d00d      	beq.n	8007656 <UART_SetConfig+0x26e>
 800763a:	dc15      	bgt.n	8007668 <UART_SetConfig+0x280>
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <UART_SetConfig+0x25e>
 8007640:	2b02      	cmp	r3, #2
 8007642:	d005      	beq.n	8007650 <UART_SetConfig+0x268>
 8007644:	e010      	b.n	8007668 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007646:	f7fe f9d9 	bl	80059fc <HAL_RCC_GetPCLK1Freq>
 800764a:	0003      	movs	r3, r0
 800764c:	61bb      	str	r3, [r7, #24]
        break;
 800764e:	e012      	b.n	8007676 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007650:	4b28      	ldr	r3, [pc, #160]	; (80076f4 <UART_SetConfig+0x30c>)
 8007652:	61bb      	str	r3, [r7, #24]
        break;
 8007654:	e00f      	b.n	8007676 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007656:	f7fe f945 	bl	80058e4 <HAL_RCC_GetSysClockFreq>
 800765a:	0003      	movs	r3, r0
 800765c:	61bb      	str	r3, [r7, #24]
        break;
 800765e:	e00a      	b.n	8007676 <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007660:	2380      	movs	r3, #128	; 0x80
 8007662:	021b      	lsls	r3, r3, #8
 8007664:	61bb      	str	r3, [r7, #24]
        break;
 8007666:	e006      	b.n	8007676 <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8007668:	2300      	movs	r3, #0
 800766a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800766c:	231e      	movs	r3, #30
 800766e:	18fb      	adds	r3, r7, r3
 8007670:	2201      	movs	r2, #1
 8007672:	701a      	strb	r2, [r3, #0]
        break;
 8007674:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d01e      	beq.n	80076ba <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	085a      	lsrs	r2, r3, #1
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	18d2      	adds	r2, r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	0019      	movs	r1, r3
 800768c:	0010      	movs	r0, r2
 800768e:	f7f8 fd4d 	bl	800012c <__udivsi3>
 8007692:	0003      	movs	r3, r0
 8007694:	b29b      	uxth	r3, r3
 8007696:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	2b0f      	cmp	r3, #15
 800769c:	d909      	bls.n	80076b2 <UART_SetConfig+0x2ca>
 800769e:	693a      	ldr	r2, [r7, #16]
 80076a0:	2380      	movs	r3, #128	; 0x80
 80076a2:	025b      	lsls	r3, r3, #9
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d204      	bcs.n	80076b2 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	60da      	str	r2, [r3, #12]
 80076b0:	e003      	b.n	80076ba <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80076b2:	231e      	movs	r3, #30
 80076b4:	18fb      	adds	r3, r7, r3
 80076b6:	2201      	movs	r2, #1
 80076b8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80076c6:	231e      	movs	r3, #30
 80076c8:	18fb      	adds	r3, r7, r3
 80076ca:	781b      	ldrb	r3, [r3, #0]
}
 80076cc:	0018      	movs	r0, r3
 80076ce:	46bd      	mov	sp, r7
 80076d0:	b008      	add	sp, #32
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	efff69f3 	.word	0xefff69f3
 80076d8:	ffffcfff 	.word	0xffffcfff
 80076dc:	fffff4ff 	.word	0xfffff4ff
 80076e0:	40013800 	.word	0x40013800
 80076e4:	40021000 	.word	0x40021000
 80076e8:	40004400 	.word	0x40004400
 80076ec:	40004800 	.word	0x40004800
 80076f0:	40004c00 	.word	0x40004c00
 80076f4:	007a1200 	.word	0x007a1200

080076f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007704:	2201      	movs	r2, #1
 8007706:	4013      	ands	r3, r2
 8007708:	d00b      	beq.n	8007722 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	4a4a      	ldr	r2, [pc, #296]	; (800783c <UART_AdvFeatureConfig+0x144>)
 8007712:	4013      	ands	r3, r2
 8007714:	0019      	movs	r1, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007726:	2202      	movs	r2, #2
 8007728:	4013      	ands	r3, r2
 800772a:	d00b      	beq.n	8007744 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	4a43      	ldr	r2, [pc, #268]	; (8007840 <UART_AdvFeatureConfig+0x148>)
 8007734:	4013      	ands	r3, r2
 8007736:	0019      	movs	r1, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	430a      	orrs	r2, r1
 8007742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007748:	2204      	movs	r2, #4
 800774a:	4013      	ands	r3, r2
 800774c:	d00b      	beq.n	8007766 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	4a3b      	ldr	r2, [pc, #236]	; (8007844 <UART_AdvFeatureConfig+0x14c>)
 8007756:	4013      	ands	r3, r2
 8007758:	0019      	movs	r1, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776a:	2208      	movs	r2, #8
 800776c:	4013      	ands	r3, r2
 800776e:	d00b      	beq.n	8007788 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	4a34      	ldr	r2, [pc, #208]	; (8007848 <UART_AdvFeatureConfig+0x150>)
 8007778:	4013      	ands	r3, r2
 800777a:	0019      	movs	r1, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	430a      	orrs	r2, r1
 8007786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778c:	2210      	movs	r2, #16
 800778e:	4013      	ands	r3, r2
 8007790:	d00b      	beq.n	80077aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	4a2c      	ldr	r2, [pc, #176]	; (800784c <UART_AdvFeatureConfig+0x154>)
 800779a:	4013      	ands	r3, r2
 800779c:	0019      	movs	r1, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	430a      	orrs	r2, r1
 80077a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	2220      	movs	r2, #32
 80077b0:	4013      	ands	r3, r2
 80077b2:	d00b      	beq.n	80077cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	4a25      	ldr	r2, [pc, #148]	; (8007850 <UART_AdvFeatureConfig+0x158>)
 80077bc:	4013      	ands	r3, r2
 80077be:	0019      	movs	r1, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d0:	2240      	movs	r2, #64	; 0x40
 80077d2:	4013      	ands	r3, r2
 80077d4:	d01d      	beq.n	8007812 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	4a1d      	ldr	r2, [pc, #116]	; (8007854 <UART_AdvFeatureConfig+0x15c>)
 80077de:	4013      	ands	r3, r2
 80077e0:	0019      	movs	r1, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077f2:	2380      	movs	r3, #128	; 0x80
 80077f4:	035b      	lsls	r3, r3, #13
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d10b      	bne.n	8007812 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	4a15      	ldr	r2, [pc, #84]	; (8007858 <UART_AdvFeatureConfig+0x160>)
 8007802:	4013      	ands	r3, r2
 8007804:	0019      	movs	r1, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007816:	2280      	movs	r2, #128	; 0x80
 8007818:	4013      	ands	r3, r2
 800781a:	d00b      	beq.n	8007834 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	4a0e      	ldr	r2, [pc, #56]	; (800785c <UART_AdvFeatureConfig+0x164>)
 8007824:	4013      	ands	r3, r2
 8007826:	0019      	movs	r1, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	605a      	str	r2, [r3, #4]
  }
}
 8007834:	46c0      	nop			; (mov r8, r8)
 8007836:	46bd      	mov	sp, r7
 8007838:	b002      	add	sp, #8
 800783a:	bd80      	pop	{r7, pc}
 800783c:	fffdffff 	.word	0xfffdffff
 8007840:	fffeffff 	.word	0xfffeffff
 8007844:	fffbffff 	.word	0xfffbffff
 8007848:	ffff7fff 	.word	0xffff7fff
 800784c:	ffffefff 	.word	0xffffefff
 8007850:	ffffdfff 	.word	0xffffdfff
 8007854:	ffefffff 	.word	0xffefffff
 8007858:	ff9fffff 	.word	0xff9fffff
 800785c:	fff7ffff 	.word	0xfff7ffff

08007860 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af02      	add	r7, sp, #8
 8007866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2280      	movs	r2, #128	; 0x80
 800786c:	2100      	movs	r1, #0
 800786e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007870:	f7fa fc72 	bl	8002158 <HAL_GetTick>
 8007874:	0003      	movs	r3, r0
 8007876:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2208      	movs	r2, #8
 8007880:	4013      	ands	r3, r2
 8007882:	2b08      	cmp	r3, #8
 8007884:	d10c      	bne.n	80078a0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2280      	movs	r2, #128	; 0x80
 800788a:	0391      	lsls	r1, r2, #14
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	4a17      	ldr	r2, [pc, #92]	; (80078ec <UART_CheckIdleState+0x8c>)
 8007890:	9200      	str	r2, [sp, #0]
 8007892:	2200      	movs	r2, #0
 8007894:	f000 f82c 	bl	80078f0 <UART_WaitOnFlagUntilTimeout>
 8007898:	1e03      	subs	r3, r0, #0
 800789a:	d001      	beq.n	80078a0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	e021      	b.n	80078e4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2204      	movs	r2, #4
 80078a8:	4013      	ands	r3, r2
 80078aa:	2b04      	cmp	r3, #4
 80078ac:	d10c      	bne.n	80078c8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2280      	movs	r2, #128	; 0x80
 80078b2:	03d1      	lsls	r1, r2, #15
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	4a0d      	ldr	r2, [pc, #52]	; (80078ec <UART_CheckIdleState+0x8c>)
 80078b8:	9200      	str	r2, [sp, #0]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f000 f818 	bl	80078f0 <UART_WaitOnFlagUntilTimeout>
 80078c0:	1e03      	subs	r3, r0, #0
 80078c2:	d001      	beq.n	80078c8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e00d      	b.n	80078e4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2220      	movs	r2, #32
 80078cc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2220      	movs	r2, #32
 80078d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2274      	movs	r2, #116	; 0x74
 80078de:	2100      	movs	r1, #0
 80078e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078e2:	2300      	movs	r3, #0
}
 80078e4:	0018      	movs	r0, r3
 80078e6:	46bd      	mov	sp, r7
 80078e8:	b004      	add	sp, #16
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	01ffffff 	.word	0x01ffffff

080078f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b094      	sub	sp, #80	; 0x50
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	603b      	str	r3, [r7, #0]
 80078fc:	1dfb      	adds	r3, r7, #7
 80078fe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007900:	e0a3      	b.n	8007a4a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007902:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007904:	3301      	adds	r3, #1
 8007906:	d100      	bne.n	800790a <UART_WaitOnFlagUntilTimeout+0x1a>
 8007908:	e09f      	b.n	8007a4a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800790a:	f7fa fc25 	bl	8002158 <HAL_GetTick>
 800790e:	0002      	movs	r2, r0
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007916:	429a      	cmp	r2, r3
 8007918:	d302      	bcc.n	8007920 <UART_WaitOnFlagUntilTimeout+0x30>
 800791a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800791c:	2b00      	cmp	r3, #0
 800791e:	d13d      	bne.n	800799c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007920:	f3ef 8310 	mrs	r3, PRIMASK
 8007924:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007926:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007928:	647b      	str	r3, [r7, #68]	; 0x44
 800792a:	2301      	movs	r3, #1
 800792c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800792e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007930:	f383 8810 	msr	PRIMASK, r3
}
 8007934:	46c0      	nop			; (mov r8, r8)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	494c      	ldr	r1, [pc, #304]	; (8007a74 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007942:	400a      	ands	r2, r1
 8007944:	601a      	str	r2, [r3, #0]
 8007946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007948:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800794a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794c:	f383 8810 	msr	PRIMASK, r3
}
 8007950:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007952:	f3ef 8310 	mrs	r3, PRIMASK
 8007956:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800795a:	643b      	str	r3, [r7, #64]	; 0x40
 800795c:	2301      	movs	r3, #1
 800795e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007962:	f383 8810 	msr	PRIMASK, r3
}
 8007966:	46c0      	nop			; (mov r8, r8)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	689a      	ldr	r2, [r3, #8]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2101      	movs	r1, #1
 8007974:	438a      	bics	r2, r1
 8007976:	609a      	str	r2, [r3, #8]
 8007978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800797a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800797c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800797e:	f383 8810 	msr	PRIMASK, r3
}
 8007982:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2220      	movs	r2, #32
 8007988:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2220      	movs	r2, #32
 800798e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2274      	movs	r2, #116	; 0x74
 8007994:	2100      	movs	r1, #0
 8007996:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007998:	2303      	movs	r3, #3
 800799a:	e067      	b.n	8007a6c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2204      	movs	r2, #4
 80079a4:	4013      	ands	r3, r2
 80079a6:	d050      	beq.n	8007a4a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	69da      	ldr	r2, [r3, #28]
 80079ae:	2380      	movs	r3, #128	; 0x80
 80079b0:	011b      	lsls	r3, r3, #4
 80079b2:	401a      	ands	r2, r3
 80079b4:	2380      	movs	r3, #128	; 0x80
 80079b6:	011b      	lsls	r3, r3, #4
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d146      	bne.n	8007a4a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2280      	movs	r2, #128	; 0x80
 80079c2:	0112      	lsls	r2, r2, #4
 80079c4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079c6:	f3ef 8310 	mrs	r3, PRIMASK
 80079ca:	613b      	str	r3, [r7, #16]
  return(result);
 80079cc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079d0:	2301      	movs	r3, #1
 80079d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	f383 8810 	msr	PRIMASK, r3
}
 80079da:	46c0      	nop			; (mov r8, r8)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4923      	ldr	r1, [pc, #140]	; (8007a74 <UART_WaitOnFlagUntilTimeout+0x184>)
 80079e8:	400a      	ands	r2, r1
 80079ea:	601a      	str	r2, [r3, #0]
 80079ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	f383 8810 	msr	PRIMASK, r3
}
 80079f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079f8:	f3ef 8310 	mrs	r3, PRIMASK
 80079fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80079fe:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a00:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a02:	2301      	movs	r3, #1
 8007a04:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	f383 8810 	msr	PRIMASK, r3
}
 8007a0c:	46c0      	nop			; (mov r8, r8)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689a      	ldr	r2, [r3, #8]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2101      	movs	r1, #1
 8007a1a:	438a      	bics	r2, r1
 8007a1c:	609a      	str	r2, [r3, #8]
 8007a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a20:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a24:	f383 8810 	msr	PRIMASK, r3
}
 8007a28:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2220      	movs	r2, #32
 8007a2e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2220      	movs	r2, #32
 8007a34:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2280      	movs	r2, #128	; 0x80
 8007a3a:	2120      	movs	r1, #32
 8007a3c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2274      	movs	r2, #116	; 0x74
 8007a42:	2100      	movs	r1, #0
 8007a44:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e010      	b.n	8007a6c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	69db      	ldr	r3, [r3, #28]
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	4013      	ands	r3, r2
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	425a      	negs	r2, r3
 8007a5a:	4153      	adcs	r3, r2
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	001a      	movs	r2, r3
 8007a60:	1dfb      	adds	r3, r7, #7
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d100      	bne.n	8007a6a <UART_WaitOnFlagUntilTimeout+0x17a>
 8007a68:	e74b      	b.n	8007902 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	0018      	movs	r0, r3
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	b014      	add	sp, #80	; 0x50
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	fffffe5f 	.word	0xfffffe5f

08007a78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b08e      	sub	sp, #56	; 0x38
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a80:	f3ef 8310 	mrs	r3, PRIMASK
 8007a84:	617b      	str	r3, [r7, #20]
  return(result);
 8007a86:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a88:	637b      	str	r3, [r7, #52]	; 0x34
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	f383 8810 	msr	PRIMASK, r3
}
 8007a94:	46c0      	nop			; (mov r8, r8)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4925      	ldr	r1, [pc, #148]	; (8007b38 <UART_EndRxTransfer+0xc0>)
 8007aa2:	400a      	ands	r2, r1
 8007aa4:	601a      	str	r2, [r3, #0]
 8007aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	f383 8810 	msr	PRIMASK, r3
}
 8007ab0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ab2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ab6:	623b      	str	r3, [r7, #32]
  return(result);
 8007ab8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aba:	633b      	str	r3, [r7, #48]	; 0x30
 8007abc:	2301      	movs	r3, #1
 8007abe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	f383 8810 	msr	PRIMASK, r3
}
 8007ac6:	46c0      	nop			; (mov r8, r8)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689a      	ldr	r2, [r3, #8]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2101      	movs	r1, #1
 8007ad4:	438a      	bics	r2, r1
 8007ad6:	609a      	str	r2, [r3, #8]
 8007ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ada:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ade:	f383 8810 	msr	PRIMASK, r3
}
 8007ae2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d118      	bne.n	8007b1e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aec:	f3ef 8310 	mrs	r3, PRIMASK
 8007af0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007af2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007af6:	2301      	movs	r3, #1
 8007af8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f383 8810 	msr	PRIMASK, r3
}
 8007b00:	46c0      	nop			; (mov r8, r8)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	681a      	ldr	r2, [r3, #0]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2110      	movs	r1, #16
 8007b0e:	438a      	bics	r2, r1
 8007b10:	601a      	str	r2, [r3, #0]
 8007b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	f383 8810 	msr	PRIMASK, r3
}
 8007b1c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2220      	movs	r2, #32
 8007b22:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007b30:	46c0      	nop			; (mov r8, r8)
 8007b32:	46bd      	mov	sp, r7
 8007b34:	b00e      	add	sp, #56	; 0x38
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	fffffedf 	.word	0xfffffedf

08007b3c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b48:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	225a      	movs	r2, #90	; 0x5a
 8007b4e:	2100      	movs	r1, #0
 8007b50:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2252      	movs	r2, #82	; 0x52
 8007b56:	2100      	movs	r1, #0
 8007b58:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	0018      	movs	r0, r3
 8007b5e:	f7ff fc2f 	bl	80073c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b62:	46c0      	nop			; (mov r8, r8)
 8007b64:	46bd      	mov	sp, r7
 8007b66:	b004      	add	sp, #16
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b086      	sub	sp, #24
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b72:	f3ef 8310 	mrs	r3, PRIMASK
 8007b76:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b78:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b7a:	617b      	str	r3, [r7, #20]
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f383 8810 	msr	PRIMASK, r3
}
 8007b86:	46c0      	nop			; (mov r8, r8)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2140      	movs	r1, #64	; 0x40
 8007b94:	438a      	bics	r2, r1
 8007b96:	601a      	str	r2, [r3, #0]
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	f383 8810 	msr	PRIMASK, r3
}
 8007ba2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	0018      	movs	r0, r3
 8007bb4:	f7ff fbfc 	bl	80073b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bb8:	46c0      	nop			; (mov r8, r8)
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	b006      	add	sp, #24
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007bc8:	46c0      	nop			; (mov r8, r8)
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	b002      	add	sp, #8
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2244      	movs	r2, #68	; 0x44
 8007bdc:	2100      	movs	r1, #0
 8007bde:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007be0:	4b05      	ldr	r3, [pc, #20]	; (8007bf8 <USB_EnableGlobalInt+0x28>)
 8007be2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	b299      	uxth	r1, r3
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2240      	movs	r2, #64	; 0x40
 8007bec:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	0018      	movs	r0, r3
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	b004      	add	sp, #16
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	0000bf80 	.word	0x0000bf80

08007bfc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007c04:	4b09      	ldr	r3, [pc, #36]	; (8007c2c <USB_DisableGlobalInt+0x30>)
 8007c06:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2240      	movs	r2, #64	; 0x40
 8007c0c:	5a9b      	ldrh	r3, [r3, r2]
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	b292      	uxth	r2, r2
 8007c14:	43d2      	mvns	r2, r2
 8007c16:	b292      	uxth	r2, r2
 8007c18:	4013      	ands	r3, r2
 8007c1a:	b299      	uxth	r1, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2240      	movs	r2, #64	; 0x40
 8007c20:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	0018      	movs	r0, r3
 8007c26:	46bd      	mov	sp, r7
 8007c28:	b004      	add	sp, #16
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	0000bf80 	.word	0x0000bf80

08007c30 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007c30:	b084      	sub	sp, #16
 8007c32:	b590      	push	{r4, r7, lr}
 8007c34:	46c6      	mov	lr, r8
 8007c36:	b500      	push	{lr}
 8007c38:	b082      	sub	sp, #8
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	2004      	movs	r0, #4
 8007c40:	2410      	movs	r4, #16
 8007c42:	46a4      	mov	ip, r4
 8007c44:	2408      	movs	r4, #8
 8007c46:	46a0      	mov	r8, r4
 8007c48:	44b8      	add	r8, r7
 8007c4a:	44c4      	add	ip, r8
 8007c4c:	4460      	add	r0, ip
 8007c4e:	6001      	str	r1, [r0, #0]
 8007c50:	6042      	str	r2, [r0, #4]
 8007c52:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2240      	movs	r2, #64	; 0x40
 8007c58:	2101      	movs	r1, #1
 8007c5a:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2240      	movs	r2, #64	; 0x40
 8007c60:	2100      	movs	r1, #0
 8007c62:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2244      	movs	r2, #68	; 0x44
 8007c68:	2100      	movs	r1, #0
 8007c6a:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2250      	movs	r2, #80	; 0x50
 8007c70:	2100      	movs	r1, #0
 8007c72:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	0018      	movs	r0, r3
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	b002      	add	sp, #8
 8007c7c:	bc80      	pop	{r7}
 8007c7e:	46b8      	mov	r8, r7
 8007c80:	bc90      	pop	{r4, r7}
 8007c82:	bc08      	pop	{r3}
 8007c84:	b004      	add	sp, #16
 8007c86:	4718      	bx	r3

08007c88 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b09c      	sub	sp, #112	; 0x70
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007c92:	236f      	movs	r3, #111	; 0x6f
 8007c94:	18fb      	adds	r3, r7, r3
 8007c96:	2200      	movs	r2, #0
 8007c98:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	18d3      	adds	r3, r2, r3
 8007ca4:	881b      	ldrh	r3, [r3, #0]
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	236c      	movs	r3, #108	; 0x6c
 8007caa:	18fb      	adds	r3, r7, r3
 8007cac:	49cf      	ldr	r1, [pc, #828]	; (8007fec <USB_ActivateEndpoint+0x364>)
 8007cae:	400a      	ands	r2, r1
 8007cb0:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	78db      	ldrb	r3, [r3, #3]
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d017      	beq.n	8007cea <USB_ActivateEndpoint+0x62>
 8007cba:	dc28      	bgt.n	8007d0e <USB_ActivateEndpoint+0x86>
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d00e      	beq.n	8007cde <USB_ActivateEndpoint+0x56>
 8007cc0:	dc25      	bgt.n	8007d0e <USB_ActivateEndpoint+0x86>
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d002      	beq.n	8007ccc <USB_ActivateEndpoint+0x44>
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d018      	beq.n	8007cfc <USB_ActivateEndpoint+0x74>
 8007cca:	e020      	b.n	8007d0e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007ccc:	226c      	movs	r2, #108	; 0x6c
 8007cce:	18bb      	adds	r3, r7, r2
 8007cd0:	18ba      	adds	r2, r7, r2
 8007cd2:	8812      	ldrh	r2, [r2, #0]
 8007cd4:	2180      	movs	r1, #128	; 0x80
 8007cd6:	0089      	lsls	r1, r1, #2
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	801a      	strh	r2, [r3, #0]
      break;
 8007cdc:	e01c      	b.n	8007d18 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8007cde:	226c      	movs	r2, #108	; 0x6c
 8007ce0:	18bb      	adds	r3, r7, r2
 8007ce2:	18ba      	adds	r2, r7, r2
 8007ce4:	8812      	ldrh	r2, [r2, #0]
 8007ce6:	801a      	strh	r2, [r3, #0]
      break;
 8007ce8:	e016      	b.n	8007d18 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007cea:	226c      	movs	r2, #108	; 0x6c
 8007cec:	18bb      	adds	r3, r7, r2
 8007cee:	18ba      	adds	r2, r7, r2
 8007cf0:	8812      	ldrh	r2, [r2, #0]
 8007cf2:	21c0      	movs	r1, #192	; 0xc0
 8007cf4:	00c9      	lsls	r1, r1, #3
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	801a      	strh	r2, [r3, #0]
      break;
 8007cfa:	e00d      	b.n	8007d18 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007cfc:	226c      	movs	r2, #108	; 0x6c
 8007cfe:	18bb      	adds	r3, r7, r2
 8007d00:	18ba      	adds	r2, r7, r2
 8007d02:	8812      	ldrh	r2, [r2, #0]
 8007d04:	2180      	movs	r1, #128	; 0x80
 8007d06:	00c9      	lsls	r1, r1, #3
 8007d08:	430a      	orrs	r2, r1
 8007d0a:	801a      	strh	r2, [r3, #0]
      break;
 8007d0c:	e004      	b.n	8007d18 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8007d0e:	236f      	movs	r3, #111	; 0x6f
 8007d10:	18fb      	adds	r3, r7, r3
 8007d12:	2201      	movs	r2, #1
 8007d14:	701a      	strb	r2, [r3, #0]
      break;
 8007d16:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	18d3      	adds	r3, r2, r3
 8007d22:	226c      	movs	r2, #108	; 0x6c
 8007d24:	18ba      	adds	r2, r7, r2
 8007d26:	8812      	ldrh	r2, [r2, #0]
 8007d28:	49b1      	ldr	r1, [pc, #708]	; (8007ff0 <USB_ActivateEndpoint+0x368>)
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	b292      	uxth	r2, r2
 8007d2e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	18d3      	adds	r3, r2, r3
 8007d3a:	881b      	ldrh	r3, [r3, #0]
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	b21b      	sxth	r3, r3
 8007d40:	4aac      	ldr	r2, [pc, #688]	; (8007ff4 <USB_ActivateEndpoint+0x36c>)
 8007d42:	4013      	ands	r3, r2
 8007d44:	b21a      	sxth	r2, r3
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	b21b      	sxth	r3, r3
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	b21a      	sxth	r2, r3
 8007d50:	2166      	movs	r1, #102	; 0x66
 8007d52:	187b      	adds	r3, r7, r1
 8007d54:	801a      	strh	r2, [r3, #0]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	18d3      	adds	r3, r2, r3
 8007d60:	187a      	adds	r2, r7, r1
 8007d62:	8812      	ldrh	r2, [r2, #0]
 8007d64:	49a2      	ldr	r1, [pc, #648]	; (8007ff0 <USB_ActivateEndpoint+0x368>)
 8007d66:	430a      	orrs	r2, r1
 8007d68:	b292      	uxth	r2, r2
 8007d6a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	7b1b      	ldrb	r3, [r3, #12]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d000      	beq.n	8007d76 <USB_ActivateEndpoint+0xee>
 8007d74:	e150      	b.n	8008018 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	785b      	ldrb	r3, [r3, #1]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d100      	bne.n	8007d80 <USB_ActivateEndpoint+0xf8>
 8007d7e:	e07a      	b.n	8007e76 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	61bb      	str	r3, [r7, #24]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2250      	movs	r2, #80	; 0x50
 8007d88:	5a9b      	ldrh	r3, [r3, r2]
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	001a      	movs	r2, r3
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	189b      	adds	r3, r3, r2
 8007d92:	61bb      	str	r3, [r7, #24]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	00da      	lsls	r2, r3, #3
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	18d3      	adds	r3, r2, r3
 8007d9e:	2280      	movs	r2, #128	; 0x80
 8007da0:	00d2      	lsls	r2, r2, #3
 8007da2:	4694      	mov	ip, r2
 8007da4:	4463      	add	r3, ip
 8007da6:	617b      	str	r3, [r7, #20]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	88db      	ldrh	r3, [r3, #6]
 8007dac:	085b      	lsrs	r3, r3, #1
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	18db      	adds	r3, r3, r3
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	18d2      	adds	r2, r2, r3
 8007dc2:	2112      	movs	r1, #18
 8007dc4:	187b      	adds	r3, r7, r1
 8007dc6:	8812      	ldrh	r2, [r2, #0]
 8007dc8:	801a      	strh	r2, [r3, #0]
 8007dca:	187b      	adds	r3, r7, r1
 8007dcc:	881b      	ldrh	r3, [r3, #0]
 8007dce:	2240      	movs	r2, #64	; 0x40
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	d016      	beq.n	8007e02 <USB_ActivateEndpoint+0x17a>
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	18d3      	adds	r3, r2, r3
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	b29a      	uxth	r2, r3
 8007de2:	2010      	movs	r0, #16
 8007de4:	183b      	adds	r3, r7, r0
 8007de6:	4983      	ldr	r1, [pc, #524]	; (8007ff4 <USB_ActivateEndpoint+0x36c>)
 8007de8:	400a      	ands	r2, r1
 8007dea:	801a      	strh	r2, [r3, #0]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	18d3      	adds	r3, r2, r3
 8007df6:	183a      	adds	r2, r7, r0
 8007df8:	8812      	ldrh	r2, [r2, #0]
 8007dfa:	497f      	ldr	r1, [pc, #508]	; (8007ff8 <USB_ActivateEndpoint+0x370>)
 8007dfc:	430a      	orrs	r2, r1
 8007dfe:	b292      	uxth	r2, r2
 8007e00:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	78db      	ldrb	r3, [r3, #3]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d01d      	beq.n	8007e46 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	18d3      	adds	r3, r2, r3
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	200c      	movs	r0, #12
 8007e1a:	183b      	adds	r3, r7, r0
 8007e1c:	4977      	ldr	r1, [pc, #476]	; (8007ffc <USB_ActivateEndpoint+0x374>)
 8007e1e:	400a      	ands	r2, r1
 8007e20:	801a      	strh	r2, [r3, #0]
 8007e22:	183b      	adds	r3, r7, r0
 8007e24:	183a      	adds	r2, r7, r0
 8007e26:	8812      	ldrh	r2, [r2, #0]
 8007e28:	2120      	movs	r1, #32
 8007e2a:	404a      	eors	r2, r1
 8007e2c:	801a      	strh	r2, [r3, #0]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	18d3      	adds	r3, r2, r3
 8007e38:	183a      	adds	r2, r7, r0
 8007e3a:	8812      	ldrh	r2, [r2, #0]
 8007e3c:	496c      	ldr	r1, [pc, #432]	; (8007ff0 <USB_ActivateEndpoint+0x368>)
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	b292      	uxth	r2, r2
 8007e42:	801a      	strh	r2, [r3, #0]
 8007e44:	e27a      	b.n	800833c <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	18d3      	adds	r3, r2, r3
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	200e      	movs	r0, #14
 8007e56:	183b      	adds	r3, r7, r0
 8007e58:	4968      	ldr	r1, [pc, #416]	; (8007ffc <USB_ActivateEndpoint+0x374>)
 8007e5a:	400a      	ands	r2, r1
 8007e5c:	801a      	strh	r2, [r3, #0]
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	18d3      	adds	r3, r2, r3
 8007e68:	183a      	adds	r2, r7, r0
 8007e6a:	8812      	ldrh	r2, [r2, #0]
 8007e6c:	4960      	ldr	r1, [pc, #384]	; (8007ff0 <USB_ActivateEndpoint+0x368>)
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	b292      	uxth	r2, r2
 8007e72:	801a      	strh	r2, [r3, #0]
 8007e74:	e262      	b.n	800833c <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	633b      	str	r3, [r7, #48]	; 0x30
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2250      	movs	r2, #80	; 0x50
 8007e7e:	5a9b      	ldrh	r3, [r3, r2]
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	001a      	movs	r2, r3
 8007e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e86:	189b      	adds	r3, r3, r2
 8007e88:	633b      	str	r3, [r7, #48]	; 0x30
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	00da      	lsls	r2, r3, #3
 8007e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e92:	18d3      	adds	r3, r2, r3
 8007e94:	4a5a      	ldr	r2, [pc, #360]	; (8008000 <USB_ActivateEndpoint+0x378>)
 8007e96:	4694      	mov	ip, r2
 8007e98:	4463      	add	r3, ip
 8007e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	88db      	ldrh	r3, [r3, #6]
 8007ea0:	085b      	lsrs	r3, r3, #1
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	18db      	adds	r3, r3, r3
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eaa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2250      	movs	r2, #80	; 0x50
 8007eb4:	5a9b      	ldrh	r3, [r3, r2]
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	001a      	movs	r2, r3
 8007eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebc:	189b      	adds	r3, r3, r2
 8007ebe:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	00da      	lsls	r2, r3, #3
 8007ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec8:	18d3      	adds	r3, r2, r3
 8007eca:	4a4e      	ldr	r2, [pc, #312]	; (8008004 <USB_ActivateEndpoint+0x37c>)
 8007ecc:	4694      	mov	ip, r2
 8007ece:	4463      	add	r3, ip
 8007ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d110      	bne.n	8007efc <USB_ActivateEndpoint+0x274>
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	881b      	ldrh	r3, [r3, #0]
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	4a49      	ldr	r2, [pc, #292]	; (8008008 <USB_ActivateEndpoint+0x380>)
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee8:	801a      	strh	r2, [r3, #0]
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	4a46      	ldr	r2, [pc, #280]	; (800800c <USB_ActivateEndpoint+0x384>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	801a      	strh	r2, [r3, #0]
 8007efa:	e02b      	b.n	8007f54 <USB_ActivateEndpoint+0x2cc>
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	2b3e      	cmp	r3, #62	; 0x3e
 8007f02:	d812      	bhi.n	8007f2a <USB_ActivateEndpoint+0x2a2>
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	085b      	lsrs	r3, r3, #1
 8007f0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	2201      	movs	r2, #1
 8007f12:	4013      	ands	r3, r2
 8007f14:	d002      	beq.n	8007f1c <USB_ActivateEndpoint+0x294>
 8007f16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f18:	3301      	adds	r3, #1
 8007f1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	029b      	lsls	r3, r3, #10
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f26:	801a      	strh	r2, [r3, #0]
 8007f28:	e014      	b.n	8007f54 <USB_ActivateEndpoint+0x2cc>
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	691b      	ldr	r3, [r3, #16]
 8007f2e:	095b      	lsrs	r3, r3, #5
 8007f30:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	221f      	movs	r2, #31
 8007f38:	4013      	ands	r3, r2
 8007f3a:	d102      	bne.n	8007f42 <USB_ActivateEndpoint+0x2ba>
 8007f3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	029b      	lsls	r3, r3, #10
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	4a30      	ldr	r2, [pc, #192]	; (800800c <USB_ActivateEndpoint+0x384>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	18d2      	adds	r2, r2, r3
 8007f5e:	2122      	movs	r1, #34	; 0x22
 8007f60:	187b      	adds	r3, r7, r1
 8007f62:	8812      	ldrh	r2, [r2, #0]
 8007f64:	801a      	strh	r2, [r3, #0]
 8007f66:	187b      	adds	r3, r7, r1
 8007f68:	881a      	ldrh	r2, [r3, #0]
 8007f6a:	2380      	movs	r3, #128	; 0x80
 8007f6c:	01db      	lsls	r3, r3, #7
 8007f6e:	4013      	ands	r3, r2
 8007f70:	d016      	beq.n	8007fa0 <USB_ActivateEndpoint+0x318>
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	18d3      	adds	r3, r2, r3
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	2020      	movs	r0, #32
 8007f82:	183b      	adds	r3, r7, r0
 8007f84:	491b      	ldr	r1, [pc, #108]	; (8007ff4 <USB_ActivateEndpoint+0x36c>)
 8007f86:	400a      	ands	r2, r1
 8007f88:	801a      	strh	r2, [r3, #0]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	18d3      	adds	r3, r2, r3
 8007f94:	183a      	adds	r2, r7, r0
 8007f96:	8812      	ldrh	r2, [r2, #0]
 8007f98:	491d      	ldr	r1, [pc, #116]	; (8008010 <USB_ActivateEndpoint+0x388>)
 8007f9a:	430a      	orrs	r2, r1
 8007f9c:	b292      	uxth	r2, r2
 8007f9e:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	18d3      	adds	r3, r2, r3
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	201e      	movs	r0, #30
 8007fb0:	183b      	adds	r3, r7, r0
 8007fb2:	4918      	ldr	r1, [pc, #96]	; (8008014 <USB_ActivateEndpoint+0x38c>)
 8007fb4:	400a      	ands	r2, r1
 8007fb6:	801a      	strh	r2, [r3, #0]
 8007fb8:	183b      	adds	r3, r7, r0
 8007fba:	183a      	adds	r2, r7, r0
 8007fbc:	8812      	ldrh	r2, [r2, #0]
 8007fbe:	2180      	movs	r1, #128	; 0x80
 8007fc0:	0149      	lsls	r1, r1, #5
 8007fc2:	404a      	eors	r2, r1
 8007fc4:	801a      	strh	r2, [r3, #0]
 8007fc6:	183b      	adds	r3, r7, r0
 8007fc8:	183a      	adds	r2, r7, r0
 8007fca:	8812      	ldrh	r2, [r2, #0]
 8007fcc:	2180      	movs	r1, #128	; 0x80
 8007fce:	0189      	lsls	r1, r1, #6
 8007fd0:	404a      	eors	r2, r1
 8007fd2:	801a      	strh	r2, [r3, #0]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	18d3      	adds	r3, r2, r3
 8007fde:	183a      	adds	r2, r7, r0
 8007fe0:	8812      	ldrh	r2, [r2, #0]
 8007fe2:	4903      	ldr	r1, [pc, #12]	; (8007ff0 <USB_ActivateEndpoint+0x368>)
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	b292      	uxth	r2, r2
 8007fe8:	801a      	strh	r2, [r3, #0]
 8007fea:	e1a7      	b.n	800833c <USB_ActivateEndpoint+0x6b4>
 8007fec:	ffff898f 	.word	0xffff898f
 8007ff0:	ffff8080 	.word	0xffff8080
 8007ff4:	ffff8f8f 	.word	0xffff8f8f
 8007ff8:	ffff80c0 	.word	0xffff80c0
 8007ffc:	ffff8fbf 	.word	0xffff8fbf
 8008000:	00000404 	.word	0x00000404
 8008004:	00000406 	.word	0x00000406
 8008008:	ffff83ff 	.word	0xffff83ff
 800800c:	ffff8000 	.word	0xffff8000
 8008010:	ffffc080 	.word	0xffffc080
 8008014:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	78db      	ldrb	r3, [r3, #3]
 800801c:	2b02      	cmp	r3, #2
 800801e:	d117      	bne.n	8008050 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	18d3      	adds	r3, r2, r3
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	b29a      	uxth	r2, r3
 800802e:	2062      	movs	r0, #98	; 0x62
 8008030:	183b      	adds	r3, r7, r0
 8008032:	49c6      	ldr	r1, [pc, #792]	; (800834c <USB_ActivateEndpoint+0x6c4>)
 8008034:	400a      	ands	r2, r1
 8008036:	801a      	strh	r2, [r3, #0]
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	18d3      	adds	r3, r2, r3
 8008042:	183a      	adds	r2, r7, r0
 8008044:	8812      	ldrh	r2, [r2, #0]
 8008046:	49c2      	ldr	r1, [pc, #776]	; (8008350 <USB_ActivateEndpoint+0x6c8>)
 8008048:	430a      	orrs	r2, r1
 800804a:	b292      	uxth	r2, r2
 800804c:	801a      	strh	r2, [r3, #0]
 800804e:	e016      	b.n	800807e <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	18d3      	adds	r3, r2, r3
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	b29a      	uxth	r2, r3
 800805e:	2064      	movs	r0, #100	; 0x64
 8008060:	183b      	adds	r3, r7, r0
 8008062:	49bc      	ldr	r1, [pc, #752]	; (8008354 <USB_ActivateEndpoint+0x6cc>)
 8008064:	400a      	ands	r2, r1
 8008066:	801a      	strh	r2, [r3, #0]
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	18d3      	adds	r3, r2, r3
 8008072:	183a      	adds	r2, r7, r0
 8008074:	8812      	ldrh	r2, [r2, #0]
 8008076:	49b8      	ldr	r1, [pc, #736]	; (8008358 <USB_ActivateEndpoint+0x6d0>)
 8008078:	430a      	orrs	r2, r1
 800807a:	b292      	uxth	r2, r2
 800807c:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2250      	movs	r2, #80	; 0x50
 8008086:	5a9b      	ldrh	r3, [r3, r2]
 8008088:	b29b      	uxth	r3, r3
 800808a:	001a      	movs	r2, r3
 800808c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800808e:	189b      	adds	r3, r3, r2
 8008090:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	00da      	lsls	r2, r3, #3
 8008098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800809a:	18d3      	adds	r3, r2, r3
 800809c:	2280      	movs	r2, #128	; 0x80
 800809e:	00d2      	lsls	r2, r2, #3
 80080a0:	4694      	mov	ip, r2
 80080a2:	4463      	add	r3, ip
 80080a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	891b      	ldrh	r3, [r3, #8]
 80080aa:	085b      	lsrs	r3, r3, #1
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	18db      	adds	r3, r3, r3
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080b4:	801a      	strh	r2, [r3, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	657b      	str	r3, [r7, #84]	; 0x54
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2250      	movs	r2, #80	; 0x50
 80080be:	5a9b      	ldrh	r3, [r3, r2]
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	001a      	movs	r2, r3
 80080c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080c6:	189b      	adds	r3, r3, r2
 80080c8:	657b      	str	r3, [r7, #84]	; 0x54
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	00da      	lsls	r2, r3, #3
 80080d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080d2:	18d3      	adds	r3, r2, r3
 80080d4:	4aa1      	ldr	r2, [pc, #644]	; (800835c <USB_ActivateEndpoint+0x6d4>)
 80080d6:	4694      	mov	ip, r2
 80080d8:	4463      	add	r3, ip
 80080da:	653b      	str	r3, [r7, #80]	; 0x50
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	895b      	ldrh	r3, [r3, #10]
 80080e0:	085b      	lsrs	r3, r3, #1
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	18db      	adds	r3, r3, r3
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080ea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	785b      	ldrb	r3, [r3, #1]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d000      	beq.n	80080f6 <USB_ActivateEndpoint+0x46e>
 80080f4:	e087      	b.n	8008206 <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	18d2      	adds	r2, r2, r3
 8008100:	2140      	movs	r1, #64	; 0x40
 8008102:	187b      	adds	r3, r7, r1
 8008104:	8812      	ldrh	r2, [r2, #0]
 8008106:	801a      	strh	r2, [r3, #0]
 8008108:	187b      	adds	r3, r7, r1
 800810a:	881a      	ldrh	r2, [r3, #0]
 800810c:	2380      	movs	r3, #128	; 0x80
 800810e:	01db      	lsls	r3, r3, #7
 8008110:	4013      	ands	r3, r2
 8008112:	d016      	beq.n	8008142 <USB_ActivateEndpoint+0x4ba>
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	18d3      	adds	r3, r2, r3
 800811e:	881b      	ldrh	r3, [r3, #0]
 8008120:	b29a      	uxth	r2, r3
 8008122:	203e      	movs	r0, #62	; 0x3e
 8008124:	183b      	adds	r3, r7, r0
 8008126:	4989      	ldr	r1, [pc, #548]	; (800834c <USB_ActivateEndpoint+0x6c4>)
 8008128:	400a      	ands	r2, r1
 800812a:	801a      	strh	r2, [r3, #0]
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	18d3      	adds	r3, r2, r3
 8008136:	183a      	adds	r2, r7, r0
 8008138:	8812      	ldrh	r2, [r2, #0]
 800813a:	4989      	ldr	r1, [pc, #548]	; (8008360 <USB_ActivateEndpoint+0x6d8>)
 800813c:	430a      	orrs	r2, r1
 800813e:	b292      	uxth	r2, r2
 8008140:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	18d2      	adds	r2, r2, r3
 800814c:	213c      	movs	r1, #60	; 0x3c
 800814e:	187b      	adds	r3, r7, r1
 8008150:	8812      	ldrh	r2, [r2, #0]
 8008152:	801a      	strh	r2, [r3, #0]
 8008154:	187b      	adds	r3, r7, r1
 8008156:	881b      	ldrh	r3, [r3, #0]
 8008158:	2240      	movs	r2, #64	; 0x40
 800815a:	4013      	ands	r3, r2
 800815c:	d016      	beq.n	800818c <USB_ActivateEndpoint+0x504>
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	18d3      	adds	r3, r2, r3
 8008168:	881b      	ldrh	r3, [r3, #0]
 800816a:	b29a      	uxth	r2, r3
 800816c:	203a      	movs	r0, #58	; 0x3a
 800816e:	183b      	adds	r3, r7, r0
 8008170:	4976      	ldr	r1, [pc, #472]	; (800834c <USB_ActivateEndpoint+0x6c4>)
 8008172:	400a      	ands	r2, r1
 8008174:	801a      	strh	r2, [r3, #0]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	18d3      	adds	r3, r2, r3
 8008180:	183a      	adds	r2, r7, r0
 8008182:	8812      	ldrh	r2, [r2, #0]
 8008184:	4977      	ldr	r1, [pc, #476]	; (8008364 <USB_ActivateEndpoint+0x6dc>)
 8008186:	430a      	orrs	r2, r1
 8008188:	b292      	uxth	r2, r2
 800818a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	18d3      	adds	r3, r2, r3
 8008196:	881b      	ldrh	r3, [r3, #0]
 8008198:	b29a      	uxth	r2, r3
 800819a:	2038      	movs	r0, #56	; 0x38
 800819c:	183b      	adds	r3, r7, r0
 800819e:	4972      	ldr	r1, [pc, #456]	; (8008368 <USB_ActivateEndpoint+0x6e0>)
 80081a0:	400a      	ands	r2, r1
 80081a2:	801a      	strh	r2, [r3, #0]
 80081a4:	183b      	adds	r3, r7, r0
 80081a6:	183a      	adds	r2, r7, r0
 80081a8:	8812      	ldrh	r2, [r2, #0]
 80081aa:	2180      	movs	r1, #128	; 0x80
 80081ac:	0149      	lsls	r1, r1, #5
 80081ae:	404a      	eors	r2, r1
 80081b0:	801a      	strh	r2, [r3, #0]
 80081b2:	183b      	adds	r3, r7, r0
 80081b4:	183a      	adds	r2, r7, r0
 80081b6:	8812      	ldrh	r2, [r2, #0]
 80081b8:	2180      	movs	r1, #128	; 0x80
 80081ba:	0189      	lsls	r1, r1, #6
 80081bc:	404a      	eors	r2, r1
 80081be:	801a      	strh	r2, [r3, #0]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	18d3      	adds	r3, r2, r3
 80081ca:	183a      	adds	r2, r7, r0
 80081cc:	8812      	ldrh	r2, [r2, #0]
 80081ce:	4962      	ldr	r1, [pc, #392]	; (8008358 <USB_ActivateEndpoint+0x6d0>)
 80081d0:	430a      	orrs	r2, r1
 80081d2:	b292      	uxth	r2, r2
 80081d4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	18d3      	adds	r3, r2, r3
 80081e0:	881b      	ldrh	r3, [r3, #0]
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	2036      	movs	r0, #54	; 0x36
 80081e6:	183b      	adds	r3, r7, r0
 80081e8:	4960      	ldr	r1, [pc, #384]	; (800836c <USB_ActivateEndpoint+0x6e4>)
 80081ea:	400a      	ands	r2, r1
 80081ec:	801a      	strh	r2, [r3, #0]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	18d3      	adds	r3, r2, r3
 80081f8:	183a      	adds	r2, r7, r0
 80081fa:	8812      	ldrh	r2, [r2, #0]
 80081fc:	4956      	ldr	r1, [pc, #344]	; (8008358 <USB_ActivateEndpoint+0x6d0>)
 80081fe:	430a      	orrs	r2, r1
 8008200:	b292      	uxth	r2, r2
 8008202:	801a      	strh	r2, [r3, #0]
 8008204:	e09a      	b.n	800833c <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	18d2      	adds	r2, r2, r3
 8008210:	214e      	movs	r1, #78	; 0x4e
 8008212:	187b      	adds	r3, r7, r1
 8008214:	8812      	ldrh	r2, [r2, #0]
 8008216:	801a      	strh	r2, [r3, #0]
 8008218:	187b      	adds	r3, r7, r1
 800821a:	881a      	ldrh	r2, [r3, #0]
 800821c:	2380      	movs	r3, #128	; 0x80
 800821e:	01db      	lsls	r3, r3, #7
 8008220:	4013      	ands	r3, r2
 8008222:	d016      	beq.n	8008252 <USB_ActivateEndpoint+0x5ca>
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	18d3      	adds	r3, r2, r3
 800822e:	881b      	ldrh	r3, [r3, #0]
 8008230:	b29a      	uxth	r2, r3
 8008232:	204c      	movs	r0, #76	; 0x4c
 8008234:	183b      	adds	r3, r7, r0
 8008236:	4945      	ldr	r1, [pc, #276]	; (800834c <USB_ActivateEndpoint+0x6c4>)
 8008238:	400a      	ands	r2, r1
 800823a:	801a      	strh	r2, [r3, #0]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	18d3      	adds	r3, r2, r3
 8008246:	183a      	adds	r2, r7, r0
 8008248:	8812      	ldrh	r2, [r2, #0]
 800824a:	4945      	ldr	r1, [pc, #276]	; (8008360 <USB_ActivateEndpoint+0x6d8>)
 800824c:	430a      	orrs	r2, r1
 800824e:	b292      	uxth	r2, r2
 8008250:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	781b      	ldrb	r3, [r3, #0]
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	18d2      	adds	r2, r2, r3
 800825c:	214a      	movs	r1, #74	; 0x4a
 800825e:	187b      	adds	r3, r7, r1
 8008260:	8812      	ldrh	r2, [r2, #0]
 8008262:	801a      	strh	r2, [r3, #0]
 8008264:	187b      	adds	r3, r7, r1
 8008266:	881b      	ldrh	r3, [r3, #0]
 8008268:	2240      	movs	r2, #64	; 0x40
 800826a:	4013      	ands	r3, r2
 800826c:	d016      	beq.n	800829c <USB_ActivateEndpoint+0x614>
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	18d3      	adds	r3, r2, r3
 8008278:	881b      	ldrh	r3, [r3, #0]
 800827a:	b29a      	uxth	r2, r3
 800827c:	2048      	movs	r0, #72	; 0x48
 800827e:	183b      	adds	r3, r7, r0
 8008280:	4932      	ldr	r1, [pc, #200]	; (800834c <USB_ActivateEndpoint+0x6c4>)
 8008282:	400a      	ands	r2, r1
 8008284:	801a      	strh	r2, [r3, #0]
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	18d3      	adds	r3, r2, r3
 8008290:	183a      	adds	r2, r7, r0
 8008292:	8812      	ldrh	r2, [r2, #0]
 8008294:	4933      	ldr	r1, [pc, #204]	; (8008364 <USB_ActivateEndpoint+0x6dc>)
 8008296:	430a      	orrs	r2, r1
 8008298:	b292      	uxth	r2, r2
 800829a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	78db      	ldrb	r3, [r3, #3]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d01d      	beq.n	80082e0 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	18d3      	adds	r3, r2, r3
 80082ae:	881b      	ldrh	r3, [r3, #0]
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	2044      	movs	r0, #68	; 0x44
 80082b4:	183b      	adds	r3, r7, r0
 80082b6:	492d      	ldr	r1, [pc, #180]	; (800836c <USB_ActivateEndpoint+0x6e4>)
 80082b8:	400a      	ands	r2, r1
 80082ba:	801a      	strh	r2, [r3, #0]
 80082bc:	183b      	adds	r3, r7, r0
 80082be:	183a      	adds	r2, r7, r0
 80082c0:	8812      	ldrh	r2, [r2, #0]
 80082c2:	2120      	movs	r1, #32
 80082c4:	404a      	eors	r2, r1
 80082c6:	801a      	strh	r2, [r3, #0]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	18d3      	adds	r3, r2, r3
 80082d2:	183a      	adds	r2, r7, r0
 80082d4:	8812      	ldrh	r2, [r2, #0]
 80082d6:	4920      	ldr	r1, [pc, #128]	; (8008358 <USB_ActivateEndpoint+0x6d0>)
 80082d8:	430a      	orrs	r2, r1
 80082da:	b292      	uxth	r2, r2
 80082dc:	801a      	strh	r2, [r3, #0]
 80082de:	e016      	b.n	800830e <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	18d3      	adds	r3, r2, r3
 80082ea:	881b      	ldrh	r3, [r3, #0]
 80082ec:	b29a      	uxth	r2, r3
 80082ee:	2046      	movs	r0, #70	; 0x46
 80082f0:	183b      	adds	r3, r7, r0
 80082f2:	491e      	ldr	r1, [pc, #120]	; (800836c <USB_ActivateEndpoint+0x6e4>)
 80082f4:	400a      	ands	r2, r1
 80082f6:	801a      	strh	r2, [r3, #0]
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	18d3      	adds	r3, r2, r3
 8008302:	183a      	adds	r2, r7, r0
 8008304:	8812      	ldrh	r2, [r2, #0]
 8008306:	4914      	ldr	r1, [pc, #80]	; (8008358 <USB_ActivateEndpoint+0x6d0>)
 8008308:	430a      	orrs	r2, r1
 800830a:	b292      	uxth	r2, r2
 800830c:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	18d3      	adds	r3, r2, r3
 8008318:	881b      	ldrh	r3, [r3, #0]
 800831a:	b29a      	uxth	r2, r3
 800831c:	2042      	movs	r0, #66	; 0x42
 800831e:	183b      	adds	r3, r7, r0
 8008320:	4911      	ldr	r1, [pc, #68]	; (8008368 <USB_ActivateEndpoint+0x6e0>)
 8008322:	400a      	ands	r2, r1
 8008324:	801a      	strh	r2, [r3, #0]
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	18d3      	adds	r3, r2, r3
 8008330:	183a      	adds	r2, r7, r0
 8008332:	8812      	ldrh	r2, [r2, #0]
 8008334:	4908      	ldr	r1, [pc, #32]	; (8008358 <USB_ActivateEndpoint+0x6d0>)
 8008336:	430a      	orrs	r2, r1
 8008338:	b292      	uxth	r2, r2
 800833a:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 800833c:	236f      	movs	r3, #111	; 0x6f
 800833e:	18fb      	adds	r3, r7, r3
 8008340:	781b      	ldrb	r3, [r3, #0]
}
 8008342:	0018      	movs	r0, r3
 8008344:	46bd      	mov	sp, r7
 8008346:	b01c      	add	sp, #112	; 0x70
 8008348:	bd80      	pop	{r7, pc}
 800834a:	46c0      	nop			; (mov r8, r8)
 800834c:	ffff8f8f 	.word	0xffff8f8f
 8008350:	ffff8180 	.word	0xffff8180
 8008354:	ffff8e8f 	.word	0xffff8e8f
 8008358:	ffff8080 	.word	0xffff8080
 800835c:	00000404 	.word	0x00000404
 8008360:	ffffc080 	.word	0xffffc080
 8008364:	ffff80c0 	.word	0xffff80c0
 8008368:	ffffbf8f 	.word	0xffffbf8f
 800836c:	ffff8fbf 	.word	0xffff8fbf

08008370 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b08c      	sub	sp, #48	; 0x30
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	7b1b      	ldrb	r3, [r3, #12]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d000      	beq.n	8008384 <USB_DeactivateEndpoint+0x14>
 8008382:	e07e      	b.n	8008482 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	785b      	ldrb	r3, [r3, #1]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d03c      	beq.n	8008406 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	18d2      	adds	r2, r2, r3
 8008396:	210c      	movs	r1, #12
 8008398:	187b      	adds	r3, r7, r1
 800839a:	8812      	ldrh	r2, [r2, #0]
 800839c:	801a      	strh	r2, [r3, #0]
 800839e:	187b      	adds	r3, r7, r1
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	2240      	movs	r2, #64	; 0x40
 80083a4:	4013      	ands	r3, r2
 80083a6:	d016      	beq.n	80083d6 <USB_DeactivateEndpoint+0x66>
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	18d3      	adds	r3, r2, r3
 80083b2:	881b      	ldrh	r3, [r3, #0]
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	200a      	movs	r0, #10
 80083b8:	183b      	adds	r3, r7, r0
 80083ba:	49c7      	ldr	r1, [pc, #796]	; (80086d8 <USB_DeactivateEndpoint+0x368>)
 80083bc:	400a      	ands	r2, r1
 80083be:	801a      	strh	r2, [r3, #0]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	18d3      	adds	r3, r2, r3
 80083ca:	183a      	adds	r2, r7, r0
 80083cc:	8812      	ldrh	r2, [r2, #0]
 80083ce:	49c3      	ldr	r1, [pc, #780]	; (80086dc <USB_DeactivateEndpoint+0x36c>)
 80083d0:	430a      	orrs	r2, r1
 80083d2:	b292      	uxth	r2, r2
 80083d4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	18d3      	adds	r3, r2, r3
 80083e0:	881b      	ldrh	r3, [r3, #0]
 80083e2:	b29a      	uxth	r2, r3
 80083e4:	2008      	movs	r0, #8
 80083e6:	183b      	adds	r3, r7, r0
 80083e8:	49bd      	ldr	r1, [pc, #756]	; (80086e0 <USB_DeactivateEndpoint+0x370>)
 80083ea:	400a      	ands	r2, r1
 80083ec:	801a      	strh	r2, [r3, #0]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	18d3      	adds	r3, r2, r3
 80083f8:	183a      	adds	r2, r7, r0
 80083fa:	8812      	ldrh	r2, [r2, #0]
 80083fc:	49b9      	ldr	r1, [pc, #740]	; (80086e4 <USB_DeactivateEndpoint+0x374>)
 80083fe:	430a      	orrs	r2, r1
 8008400:	b292      	uxth	r2, r2
 8008402:	801a      	strh	r2, [r3, #0]
 8008404:	e163      	b.n	80086ce <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	18d2      	adds	r2, r2, r3
 8008410:	2112      	movs	r1, #18
 8008412:	187b      	adds	r3, r7, r1
 8008414:	8812      	ldrh	r2, [r2, #0]
 8008416:	801a      	strh	r2, [r3, #0]
 8008418:	187b      	adds	r3, r7, r1
 800841a:	881a      	ldrh	r2, [r3, #0]
 800841c:	2380      	movs	r3, #128	; 0x80
 800841e:	01db      	lsls	r3, r3, #7
 8008420:	4013      	ands	r3, r2
 8008422:	d016      	beq.n	8008452 <USB_DeactivateEndpoint+0xe2>
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	18d3      	adds	r3, r2, r3
 800842e:	881b      	ldrh	r3, [r3, #0]
 8008430:	b29a      	uxth	r2, r3
 8008432:	2010      	movs	r0, #16
 8008434:	183b      	adds	r3, r7, r0
 8008436:	49a8      	ldr	r1, [pc, #672]	; (80086d8 <USB_DeactivateEndpoint+0x368>)
 8008438:	400a      	ands	r2, r1
 800843a:	801a      	strh	r2, [r3, #0]
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	18d3      	adds	r3, r2, r3
 8008446:	183a      	adds	r2, r7, r0
 8008448:	8812      	ldrh	r2, [r2, #0]
 800844a:	49a7      	ldr	r1, [pc, #668]	; (80086e8 <USB_DeactivateEndpoint+0x378>)
 800844c:	430a      	orrs	r2, r1
 800844e:	b292      	uxth	r2, r2
 8008450:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	18d3      	adds	r3, r2, r3
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	b29a      	uxth	r2, r3
 8008460:	200e      	movs	r0, #14
 8008462:	183b      	adds	r3, r7, r0
 8008464:	49a1      	ldr	r1, [pc, #644]	; (80086ec <USB_DeactivateEndpoint+0x37c>)
 8008466:	400a      	ands	r2, r1
 8008468:	801a      	strh	r2, [r3, #0]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	18d3      	adds	r3, r2, r3
 8008474:	183a      	adds	r2, r7, r0
 8008476:	8812      	ldrh	r2, [r2, #0]
 8008478:	499a      	ldr	r1, [pc, #616]	; (80086e4 <USB_DeactivateEndpoint+0x374>)
 800847a:	430a      	orrs	r2, r1
 800847c:	b292      	uxth	r2, r2
 800847e:	801a      	strh	r2, [r3, #0]
 8008480:	e125      	b.n	80086ce <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	785b      	ldrb	r3, [r3, #1]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d000      	beq.n	800848c <USB_DeactivateEndpoint+0x11c>
 800848a:	e090      	b.n	80085ae <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	18d2      	adds	r2, r2, r3
 8008496:	2120      	movs	r1, #32
 8008498:	187b      	adds	r3, r7, r1
 800849a:	8812      	ldrh	r2, [r2, #0]
 800849c:	801a      	strh	r2, [r3, #0]
 800849e:	187b      	adds	r3, r7, r1
 80084a0:	881a      	ldrh	r2, [r3, #0]
 80084a2:	2380      	movs	r3, #128	; 0x80
 80084a4:	01db      	lsls	r3, r3, #7
 80084a6:	4013      	ands	r3, r2
 80084a8:	d016      	beq.n	80084d8 <USB_DeactivateEndpoint+0x168>
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	18d3      	adds	r3, r2, r3
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	201e      	movs	r0, #30
 80084ba:	183b      	adds	r3, r7, r0
 80084bc:	4986      	ldr	r1, [pc, #536]	; (80086d8 <USB_DeactivateEndpoint+0x368>)
 80084be:	400a      	ands	r2, r1
 80084c0:	801a      	strh	r2, [r3, #0]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	18d3      	adds	r3, r2, r3
 80084cc:	183a      	adds	r2, r7, r0
 80084ce:	8812      	ldrh	r2, [r2, #0]
 80084d0:	4985      	ldr	r1, [pc, #532]	; (80086e8 <USB_DeactivateEndpoint+0x378>)
 80084d2:	430a      	orrs	r2, r1
 80084d4:	b292      	uxth	r2, r2
 80084d6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	18d2      	adds	r2, r2, r3
 80084e2:	211c      	movs	r1, #28
 80084e4:	187b      	adds	r3, r7, r1
 80084e6:	8812      	ldrh	r2, [r2, #0]
 80084e8:	801a      	strh	r2, [r3, #0]
 80084ea:	187b      	adds	r3, r7, r1
 80084ec:	881b      	ldrh	r3, [r3, #0]
 80084ee:	2240      	movs	r2, #64	; 0x40
 80084f0:	4013      	ands	r3, r2
 80084f2:	d016      	beq.n	8008522 <USB_DeactivateEndpoint+0x1b2>
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	18d3      	adds	r3, r2, r3
 80084fe:	881b      	ldrh	r3, [r3, #0]
 8008500:	b29a      	uxth	r2, r3
 8008502:	201a      	movs	r0, #26
 8008504:	183b      	adds	r3, r7, r0
 8008506:	4974      	ldr	r1, [pc, #464]	; (80086d8 <USB_DeactivateEndpoint+0x368>)
 8008508:	400a      	ands	r2, r1
 800850a:	801a      	strh	r2, [r3, #0]
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	18d3      	adds	r3, r2, r3
 8008516:	183a      	adds	r2, r7, r0
 8008518:	8812      	ldrh	r2, [r2, #0]
 800851a:	4970      	ldr	r1, [pc, #448]	; (80086dc <USB_DeactivateEndpoint+0x36c>)
 800851c:	430a      	orrs	r2, r1
 800851e:	b292      	uxth	r2, r2
 8008520:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	18d3      	adds	r3, r2, r3
 800852c:	881b      	ldrh	r3, [r3, #0]
 800852e:	b29a      	uxth	r2, r3
 8008530:	2018      	movs	r0, #24
 8008532:	183b      	adds	r3, r7, r0
 8008534:	4968      	ldr	r1, [pc, #416]	; (80086d8 <USB_DeactivateEndpoint+0x368>)
 8008536:	400a      	ands	r2, r1
 8008538:	801a      	strh	r2, [r3, #0]
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	18d3      	adds	r3, r2, r3
 8008544:	183a      	adds	r2, r7, r0
 8008546:	8812      	ldrh	r2, [r2, #0]
 8008548:	4964      	ldr	r1, [pc, #400]	; (80086dc <USB_DeactivateEndpoint+0x36c>)
 800854a:	430a      	orrs	r2, r1
 800854c:	b292      	uxth	r2, r2
 800854e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	18d3      	adds	r3, r2, r3
 800855a:	881b      	ldrh	r3, [r3, #0]
 800855c:	b29a      	uxth	r2, r3
 800855e:	2016      	movs	r0, #22
 8008560:	183b      	adds	r3, r7, r0
 8008562:	4962      	ldr	r1, [pc, #392]	; (80086ec <USB_DeactivateEndpoint+0x37c>)
 8008564:	400a      	ands	r2, r1
 8008566:	801a      	strh	r2, [r3, #0]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	18d3      	adds	r3, r2, r3
 8008572:	183a      	adds	r2, r7, r0
 8008574:	8812      	ldrh	r2, [r2, #0]
 8008576:	495b      	ldr	r1, [pc, #364]	; (80086e4 <USB_DeactivateEndpoint+0x374>)
 8008578:	430a      	orrs	r2, r1
 800857a:	b292      	uxth	r2, r2
 800857c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	18d3      	adds	r3, r2, r3
 8008588:	881b      	ldrh	r3, [r3, #0]
 800858a:	b29a      	uxth	r2, r3
 800858c:	2014      	movs	r0, #20
 800858e:	183b      	adds	r3, r7, r0
 8008590:	4953      	ldr	r1, [pc, #332]	; (80086e0 <USB_DeactivateEndpoint+0x370>)
 8008592:	400a      	ands	r2, r1
 8008594:	801a      	strh	r2, [r3, #0]
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	18d3      	adds	r3, r2, r3
 80085a0:	183a      	adds	r2, r7, r0
 80085a2:	8812      	ldrh	r2, [r2, #0]
 80085a4:	494f      	ldr	r1, [pc, #316]	; (80086e4 <USB_DeactivateEndpoint+0x374>)
 80085a6:	430a      	orrs	r2, r1
 80085a8:	b292      	uxth	r2, r2
 80085aa:	801a      	strh	r2, [r3, #0]
 80085ac:	e08f      	b.n	80086ce <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	18d2      	adds	r2, r2, r3
 80085b8:	212e      	movs	r1, #46	; 0x2e
 80085ba:	187b      	adds	r3, r7, r1
 80085bc:	8812      	ldrh	r2, [r2, #0]
 80085be:	801a      	strh	r2, [r3, #0]
 80085c0:	187b      	adds	r3, r7, r1
 80085c2:	881a      	ldrh	r2, [r3, #0]
 80085c4:	2380      	movs	r3, #128	; 0x80
 80085c6:	01db      	lsls	r3, r3, #7
 80085c8:	4013      	ands	r3, r2
 80085ca:	d016      	beq.n	80085fa <USB_DeactivateEndpoint+0x28a>
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	18d3      	adds	r3, r2, r3
 80085d6:	881b      	ldrh	r3, [r3, #0]
 80085d8:	b29a      	uxth	r2, r3
 80085da:	202c      	movs	r0, #44	; 0x2c
 80085dc:	183b      	adds	r3, r7, r0
 80085de:	493e      	ldr	r1, [pc, #248]	; (80086d8 <USB_DeactivateEndpoint+0x368>)
 80085e0:	400a      	ands	r2, r1
 80085e2:	801a      	strh	r2, [r3, #0]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	18d3      	adds	r3, r2, r3
 80085ee:	183a      	adds	r2, r7, r0
 80085f0:	8812      	ldrh	r2, [r2, #0]
 80085f2:	493d      	ldr	r1, [pc, #244]	; (80086e8 <USB_DeactivateEndpoint+0x378>)
 80085f4:	430a      	orrs	r2, r1
 80085f6:	b292      	uxth	r2, r2
 80085f8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	18d2      	adds	r2, r2, r3
 8008604:	212a      	movs	r1, #42	; 0x2a
 8008606:	187b      	adds	r3, r7, r1
 8008608:	8812      	ldrh	r2, [r2, #0]
 800860a:	801a      	strh	r2, [r3, #0]
 800860c:	187b      	adds	r3, r7, r1
 800860e:	881b      	ldrh	r3, [r3, #0]
 8008610:	2240      	movs	r2, #64	; 0x40
 8008612:	4013      	ands	r3, r2
 8008614:	d016      	beq.n	8008644 <USB_DeactivateEndpoint+0x2d4>
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	18d3      	adds	r3, r2, r3
 8008620:	881b      	ldrh	r3, [r3, #0]
 8008622:	b29a      	uxth	r2, r3
 8008624:	2028      	movs	r0, #40	; 0x28
 8008626:	183b      	adds	r3, r7, r0
 8008628:	492b      	ldr	r1, [pc, #172]	; (80086d8 <USB_DeactivateEndpoint+0x368>)
 800862a:	400a      	ands	r2, r1
 800862c:	801a      	strh	r2, [r3, #0]
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	18d3      	adds	r3, r2, r3
 8008638:	183a      	adds	r2, r7, r0
 800863a:	8812      	ldrh	r2, [r2, #0]
 800863c:	4927      	ldr	r1, [pc, #156]	; (80086dc <USB_DeactivateEndpoint+0x36c>)
 800863e:	430a      	orrs	r2, r1
 8008640:	b292      	uxth	r2, r2
 8008642:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	18d3      	adds	r3, r2, r3
 800864e:	881b      	ldrh	r3, [r3, #0]
 8008650:	b29a      	uxth	r2, r3
 8008652:	2026      	movs	r0, #38	; 0x26
 8008654:	183b      	adds	r3, r7, r0
 8008656:	4920      	ldr	r1, [pc, #128]	; (80086d8 <USB_DeactivateEndpoint+0x368>)
 8008658:	400a      	ands	r2, r1
 800865a:	801a      	strh	r2, [r3, #0]
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	18d3      	adds	r3, r2, r3
 8008666:	183a      	adds	r2, r7, r0
 8008668:	8812      	ldrh	r2, [r2, #0]
 800866a:	491f      	ldr	r1, [pc, #124]	; (80086e8 <USB_DeactivateEndpoint+0x378>)
 800866c:	430a      	orrs	r2, r1
 800866e:	b292      	uxth	r2, r2
 8008670:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	18d3      	adds	r3, r2, r3
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	b29a      	uxth	r2, r3
 8008680:	2024      	movs	r0, #36	; 0x24
 8008682:	183b      	adds	r3, r7, r0
 8008684:	4916      	ldr	r1, [pc, #88]	; (80086e0 <USB_DeactivateEndpoint+0x370>)
 8008686:	400a      	ands	r2, r1
 8008688:	801a      	strh	r2, [r3, #0]
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	18d3      	adds	r3, r2, r3
 8008694:	183a      	adds	r2, r7, r0
 8008696:	8812      	ldrh	r2, [r2, #0]
 8008698:	4912      	ldr	r1, [pc, #72]	; (80086e4 <USB_DeactivateEndpoint+0x374>)
 800869a:	430a      	orrs	r2, r1
 800869c:	b292      	uxth	r2, r2
 800869e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	18d3      	adds	r3, r2, r3
 80086aa:	881b      	ldrh	r3, [r3, #0]
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	2022      	movs	r0, #34	; 0x22
 80086b0:	183b      	adds	r3, r7, r0
 80086b2:	490e      	ldr	r1, [pc, #56]	; (80086ec <USB_DeactivateEndpoint+0x37c>)
 80086b4:	400a      	ands	r2, r1
 80086b6:	801a      	strh	r2, [r3, #0]
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	18d3      	adds	r3, r2, r3
 80086c2:	183a      	adds	r2, r7, r0
 80086c4:	8812      	ldrh	r2, [r2, #0]
 80086c6:	4907      	ldr	r1, [pc, #28]	; (80086e4 <USB_DeactivateEndpoint+0x374>)
 80086c8:	430a      	orrs	r2, r1
 80086ca:	b292      	uxth	r2, r2
 80086cc:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80086ce:	2300      	movs	r3, #0
}
 80086d0:	0018      	movs	r0, r3
 80086d2:	46bd      	mov	sp, r7
 80086d4:	b00c      	add	sp, #48	; 0x30
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	ffff8f8f 	.word	0xffff8f8f
 80086dc:	ffff80c0 	.word	0xffff80c0
 80086e0:	ffff8fbf 	.word	0xffff8fbf
 80086e4:	ffff8080 	.word	0xffff8080
 80086e8:	ffffc080 	.word	0xffffc080
 80086ec:	ffffbf8f 	.word	0xffffbf8f

080086f0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80086f0:	b590      	push	{r4, r7, lr}
 80086f2:	b0c3      	sub	sp, #268	; 0x10c
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	785b      	ldrb	r3, [r3, #1]
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d001      	beq.n	8008706 <USB_EPStartXfer+0x16>
 8008702:	f000 fcef 	bl	80090e4 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	699a      	ldr	r2, [r3, #24]
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	429a      	cmp	r2, r3
 8008710:	d905      	bls.n	800871e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	1d7a      	adds	r2, r7, #5
 8008718:	32ff      	adds	r2, #255	; 0xff
 800871a:	6013      	str	r3, [r2, #0]
 800871c:	e004      	b.n	8008728 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	1d7a      	adds	r2, r7, #5
 8008724:	32ff      	adds	r2, #255	; 0xff
 8008726:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	7b1b      	ldrb	r3, [r3, #12]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d125      	bne.n	800877c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	6959      	ldr	r1, [r3, #20]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	88da      	ldrh	r2, [r3, #6]
 8008738:	1d7b      	adds	r3, r7, #5
 800873a:	33ff      	adds	r3, #255	; 0xff
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	b29b      	uxth	r3, r3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f001 f9c9 	bl	8009ad8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	613b      	str	r3, [r7, #16]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2250      	movs	r2, #80	; 0x50
 800874e:	5a9b      	ldrh	r3, [r3, r2]
 8008750:	b29b      	uxth	r3, r3
 8008752:	001a      	movs	r2, r3
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	189b      	adds	r3, r3, r2
 8008758:	613b      	str	r3, [r7, #16]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	00da      	lsls	r2, r3, #3
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	18d3      	adds	r3, r2, r3
 8008764:	4acc      	ldr	r2, [pc, #816]	; (8008a98 <USB_EPStartXfer+0x3a8>)
 8008766:	4694      	mov	ip, r2
 8008768:	4463      	add	r3, ip
 800876a:	60fb      	str	r3, [r7, #12]
 800876c:	1d7b      	adds	r3, r7, #5
 800876e:	33ff      	adds	r3, #255	; 0xff
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	b29a      	uxth	r2, r3
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	801a      	strh	r2, [r3, #0]
 8008778:	f000 fc8f 	bl	800909a <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	78db      	ldrb	r3, [r3, #3]
 8008780:	2b02      	cmp	r3, #2
 8008782:	d000      	beq.n	8008786 <USB_EPStartXfer+0x96>
 8008784:	e33a      	b.n	8008dfc <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	6a1a      	ldr	r2, [r3, #32]
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	429a      	cmp	r2, r3
 8008790:	d800      	bhi.n	8008794 <USB_EPStartXfer+0xa4>
 8008792:	e2df      	b.n	8008d54 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	18d3      	adds	r3, r2, r3
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	b29a      	uxth	r2, r3
 80087a2:	2056      	movs	r0, #86	; 0x56
 80087a4:	183b      	adds	r3, r7, r0
 80087a6:	49bd      	ldr	r1, [pc, #756]	; (8008a9c <USB_EPStartXfer+0x3ac>)
 80087a8:	400a      	ands	r2, r1
 80087aa:	801a      	strh	r2, [r3, #0]
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	18d3      	adds	r3, r2, r3
 80087b6:	183a      	adds	r2, r7, r0
 80087b8:	8812      	ldrh	r2, [r2, #0]
 80087ba:	49b9      	ldr	r1, [pc, #740]	; (8008aa0 <USB_EPStartXfer+0x3b0>)
 80087bc:	430a      	orrs	r2, r1
 80087be:	b292      	uxth	r2, r2
 80087c0:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	6a1a      	ldr	r2, [r3, #32]
 80087c6:	1d7b      	adds	r3, r7, #5
 80087c8:	33ff      	adds	r3, #255	; 0xff
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	1ad2      	subs	r2, r2, r3
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	18d3      	adds	r3, r2, r3
 80087dc:	881b      	ldrh	r3, [r3, #0]
 80087de:	b29b      	uxth	r3, r3
 80087e0:	001a      	movs	r2, r3
 80087e2:	2340      	movs	r3, #64	; 0x40
 80087e4:	4013      	ands	r3, r2
 80087e6:	d100      	bne.n	80087ea <USB_EPStartXfer+0xfa>
 80087e8:	e162      	b.n	8008ab0 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	633b      	str	r3, [r7, #48]	; 0x30
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	785b      	ldrb	r3, [r3, #1]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d16a      	bne.n	80088cc <USB_EPStartXfer+0x1dc>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2250      	movs	r2, #80	; 0x50
 80087fe:	5a9b      	ldrh	r3, [r3, r2]
 8008800:	b29b      	uxth	r3, r3
 8008802:	001a      	movs	r2, r3
 8008804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008806:	189b      	adds	r3, r3, r2
 8008808:	62bb      	str	r3, [r7, #40]	; 0x28
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	00da      	lsls	r2, r3, #3
 8008810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008812:	18d3      	adds	r3, r2, r3
 8008814:	4aa3      	ldr	r2, [pc, #652]	; (8008aa4 <USB_EPStartXfer+0x3b4>)
 8008816:	4694      	mov	ip, r2
 8008818:	4463      	add	r3, ip
 800881a:	627b      	str	r3, [r7, #36]	; 0x24
 800881c:	1d7b      	adds	r3, r7, #5
 800881e:	33ff      	adds	r3, #255	; 0xff
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d110      	bne.n	8008848 <USB_EPStartXfer+0x158>
 8008826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008828:	881b      	ldrh	r3, [r3, #0]
 800882a:	b29b      	uxth	r3, r3
 800882c:	4a9e      	ldr	r2, [pc, #632]	; (8008aa8 <USB_EPStartXfer+0x3b8>)
 800882e:	4013      	ands	r3, r2
 8008830:	b29a      	uxth	r2, r3
 8008832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008834:	801a      	strh	r2, [r3, #0]
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	881b      	ldrh	r3, [r3, #0]
 800883a:	b29b      	uxth	r3, r3
 800883c:	4a9b      	ldr	r2, [pc, #620]	; (8008aac <USB_EPStartXfer+0x3bc>)
 800883e:	4313      	orrs	r3, r2
 8008840:	b29a      	uxth	r2, r3
 8008842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008844:	801a      	strh	r2, [r3, #0]
 8008846:	e05c      	b.n	8008902 <USB_EPStartXfer+0x212>
 8008848:	1d7b      	adds	r3, r7, #5
 800884a:	33ff      	adds	r3, #255	; 0xff
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2b3e      	cmp	r3, #62	; 0x3e
 8008850:	d81c      	bhi.n	800888c <USB_EPStartXfer+0x19c>
 8008852:	1d7b      	adds	r3, r7, #5
 8008854:	33ff      	adds	r3, #255	; 0xff
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	085b      	lsrs	r3, r3, #1
 800885a:	1c7a      	adds	r2, r7, #1
 800885c:	32ff      	adds	r2, #255	; 0xff
 800885e:	6013      	str	r3, [r2, #0]
 8008860:	1d7b      	adds	r3, r7, #5
 8008862:	33ff      	adds	r3, #255	; 0xff
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2201      	movs	r2, #1
 8008868:	4013      	ands	r3, r2
 800886a:	d006      	beq.n	800887a <USB_EPStartXfer+0x18a>
 800886c:	1c7b      	adds	r3, r7, #1
 800886e:	33ff      	adds	r3, #255	; 0xff
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	3301      	adds	r3, #1
 8008874:	1c7a      	adds	r2, r7, #1
 8008876:	32ff      	adds	r2, #255	; 0xff
 8008878:	6013      	str	r3, [r2, #0]
 800887a:	1c7b      	adds	r3, r7, #1
 800887c:	33ff      	adds	r3, #255	; 0xff
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	b29b      	uxth	r3, r3
 8008882:	029b      	lsls	r3, r3, #10
 8008884:	b29a      	uxth	r2, r3
 8008886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008888:	801a      	strh	r2, [r3, #0]
 800888a:	e03a      	b.n	8008902 <USB_EPStartXfer+0x212>
 800888c:	1d7b      	adds	r3, r7, #5
 800888e:	33ff      	adds	r3, #255	; 0xff
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	095b      	lsrs	r3, r3, #5
 8008894:	1c7a      	adds	r2, r7, #1
 8008896:	32ff      	adds	r2, #255	; 0xff
 8008898:	6013      	str	r3, [r2, #0]
 800889a:	1d7b      	adds	r3, r7, #5
 800889c:	33ff      	adds	r3, #255	; 0xff
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	221f      	movs	r2, #31
 80088a2:	4013      	ands	r3, r2
 80088a4:	d106      	bne.n	80088b4 <USB_EPStartXfer+0x1c4>
 80088a6:	1c7b      	adds	r3, r7, #1
 80088a8:	33ff      	adds	r3, #255	; 0xff
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	1c7a      	adds	r2, r7, #1
 80088b0:	32ff      	adds	r2, #255	; 0xff
 80088b2:	6013      	str	r3, [r2, #0]
 80088b4:	1c7b      	adds	r3, r7, #1
 80088b6:	33ff      	adds	r3, #255	; 0xff
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	029b      	lsls	r3, r3, #10
 80088be:	b29b      	uxth	r3, r3
 80088c0:	4a7a      	ldr	r2, [pc, #488]	; (8008aac <USB_EPStartXfer+0x3bc>)
 80088c2:	4313      	orrs	r3, r2
 80088c4:	b29a      	uxth	r2, r3
 80088c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c8:	801a      	strh	r2, [r3, #0]
 80088ca:	e01a      	b.n	8008902 <USB_EPStartXfer+0x212>
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	785b      	ldrb	r3, [r3, #1]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d116      	bne.n	8008902 <USB_EPStartXfer+0x212>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2250      	movs	r2, #80	; 0x50
 80088d8:	5a9b      	ldrh	r3, [r3, r2]
 80088da:	b29b      	uxth	r3, r3
 80088dc:	001a      	movs	r2, r3
 80088de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e0:	189b      	adds	r3, r3, r2
 80088e2:	633b      	str	r3, [r7, #48]	; 0x30
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	00da      	lsls	r2, r3, #3
 80088ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ec:	18d3      	adds	r3, r2, r3
 80088ee:	4a6d      	ldr	r2, [pc, #436]	; (8008aa4 <USB_EPStartXfer+0x3b4>)
 80088f0:	4694      	mov	ip, r2
 80088f2:	4463      	add	r3, ip
 80088f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088f6:	1d7b      	adds	r3, r7, #5
 80088f8:	33ff      	adds	r3, #255	; 0xff
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008900:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008902:	2076      	movs	r0, #118	; 0x76
 8008904:	183b      	adds	r3, r7, r0
 8008906:	683a      	ldr	r2, [r7, #0]
 8008908:	8952      	ldrh	r2, [r2, #10]
 800890a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	6959      	ldr	r1, [r3, #20]
 8008910:	1d7b      	adds	r3, r7, #5
 8008912:	33ff      	adds	r3, #255	; 0xff
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	b29c      	uxth	r4, r3
 8008918:	183b      	adds	r3, r7, r0
 800891a:	881a      	ldrh	r2, [r3, #0]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	0023      	movs	r3, r4
 8008920:	f001 f8da 	bl	8009ad8 <USB_WritePMA>
            ep->xfer_buff += len;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	695a      	ldr	r2, [r3, #20]
 8008928:	1d7b      	adds	r3, r7, #5
 800892a:	33ff      	adds	r3, #255	; 0xff
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	18d2      	adds	r2, r2, r3
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	6a1a      	ldr	r2, [r3, #32]
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	429a      	cmp	r2, r3
 800893e:	d908      	bls.n	8008952 <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	6a1a      	ldr	r2, [r3, #32]
 8008944:	1d7b      	adds	r3, r7, #5
 8008946:	33ff      	adds	r3, #255	; 0xff
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	1ad2      	subs	r2, r2, r3
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	621a      	str	r2, [r3, #32]
 8008950:	e007      	b.n	8008962 <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	6a1b      	ldr	r3, [r3, #32]
 8008956:	1d7a      	adds	r2, r7, #5
 8008958:	32ff      	adds	r2, #255	; 0xff
 800895a:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	2200      	movs	r2, #0
 8008960:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	785b      	ldrb	r3, [r3, #1]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d166      	bne.n	8008a38 <USB_EPStartXfer+0x348>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	61bb      	str	r3, [r7, #24]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2250      	movs	r2, #80	; 0x50
 8008972:	5a9b      	ldrh	r3, [r3, r2]
 8008974:	b29b      	uxth	r3, r3
 8008976:	001a      	movs	r2, r3
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	189b      	adds	r3, r3, r2
 800897c:	61bb      	str	r3, [r7, #24]
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	00da      	lsls	r2, r3, #3
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	18d3      	adds	r3, r2, r3
 8008988:	4a43      	ldr	r2, [pc, #268]	; (8008a98 <USB_EPStartXfer+0x3a8>)
 800898a:	4694      	mov	ip, r2
 800898c:	4463      	add	r3, ip
 800898e:	617b      	str	r3, [r7, #20]
 8008990:	1d7b      	adds	r3, r7, #5
 8008992:	33ff      	adds	r3, #255	; 0xff
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d110      	bne.n	80089bc <USB_EPStartXfer+0x2cc>
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	881b      	ldrh	r3, [r3, #0]
 800899e:	b29b      	uxth	r3, r3
 80089a0:	4a41      	ldr	r2, [pc, #260]	; (8008aa8 <USB_EPStartXfer+0x3b8>)
 80089a2:	4013      	ands	r3, r2
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	801a      	strh	r2, [r3, #0]
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	881b      	ldrh	r3, [r3, #0]
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	4a3e      	ldr	r2, [pc, #248]	; (8008aac <USB_EPStartXfer+0x3bc>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	801a      	strh	r2, [r3, #0]
 80089ba:	e05a      	b.n	8008a72 <USB_EPStartXfer+0x382>
 80089bc:	1d7b      	adds	r3, r7, #5
 80089be:	33ff      	adds	r3, #255	; 0xff
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2b3e      	cmp	r3, #62	; 0x3e
 80089c4:	d81a      	bhi.n	80089fc <USB_EPStartXfer+0x30c>
 80089c6:	1d7b      	adds	r3, r7, #5
 80089c8:	33ff      	adds	r3, #255	; 0xff
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	085b      	lsrs	r3, r3, #1
 80089ce:	21fc      	movs	r1, #252	; 0xfc
 80089d0:	187a      	adds	r2, r7, r1
 80089d2:	6013      	str	r3, [r2, #0]
 80089d4:	1d7b      	adds	r3, r7, #5
 80089d6:	33ff      	adds	r3, #255	; 0xff
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2201      	movs	r2, #1
 80089dc:	4013      	ands	r3, r2
 80089de:	d004      	beq.n	80089ea <USB_EPStartXfer+0x2fa>
 80089e0:	187b      	adds	r3, r7, r1
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	3301      	adds	r3, #1
 80089e6:	187a      	adds	r2, r7, r1
 80089e8:	6013      	str	r3, [r2, #0]
 80089ea:	23fc      	movs	r3, #252	; 0xfc
 80089ec:	18fb      	adds	r3, r7, r3
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	029b      	lsls	r3, r3, #10
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	801a      	strh	r2, [r3, #0]
 80089fa:	e03a      	b.n	8008a72 <USB_EPStartXfer+0x382>
 80089fc:	1d7b      	adds	r3, r7, #5
 80089fe:	33ff      	adds	r3, #255	; 0xff
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	095b      	lsrs	r3, r3, #5
 8008a04:	21fc      	movs	r1, #252	; 0xfc
 8008a06:	187a      	adds	r2, r7, r1
 8008a08:	6013      	str	r3, [r2, #0]
 8008a0a:	1d7b      	adds	r3, r7, #5
 8008a0c:	33ff      	adds	r3, #255	; 0xff
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	221f      	movs	r2, #31
 8008a12:	4013      	ands	r3, r2
 8008a14:	d104      	bne.n	8008a20 <USB_EPStartXfer+0x330>
 8008a16:	187b      	adds	r3, r7, r1
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	187a      	adds	r2, r7, r1
 8008a1e:	6013      	str	r3, [r2, #0]
 8008a20:	23fc      	movs	r3, #252	; 0xfc
 8008a22:	18fb      	adds	r3, r7, r3
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	b29b      	uxth	r3, r3
 8008a28:	029b      	lsls	r3, r3, #10
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	4a1f      	ldr	r2, [pc, #124]	; (8008aac <USB_EPStartXfer+0x3bc>)
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	801a      	strh	r2, [r3, #0]
 8008a36:	e01c      	b.n	8008a72 <USB_EPStartXfer+0x382>
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	785b      	ldrb	r3, [r3, #1]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d118      	bne.n	8008a72 <USB_EPStartXfer+0x382>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	623b      	str	r3, [r7, #32]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2250      	movs	r2, #80	; 0x50
 8008a48:	5a9b      	ldrh	r3, [r3, r2]
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	001a      	movs	r2, r3
 8008a4e:	6a3b      	ldr	r3, [r7, #32]
 8008a50:	189b      	adds	r3, r3, r2
 8008a52:	623b      	str	r3, [r7, #32]
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	00da      	lsls	r2, r3, #3
 8008a5a:	6a3b      	ldr	r3, [r7, #32]
 8008a5c:	18d3      	adds	r3, r2, r3
 8008a5e:	4a0e      	ldr	r2, [pc, #56]	; (8008a98 <USB_EPStartXfer+0x3a8>)
 8008a60:	4694      	mov	ip, r2
 8008a62:	4463      	add	r3, ip
 8008a64:	61fb      	str	r3, [r7, #28]
 8008a66:	1d7b      	adds	r3, r7, #5
 8008a68:	33ff      	adds	r3, #255	; 0xff
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	b29a      	uxth	r2, r3
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008a72:	2076      	movs	r0, #118	; 0x76
 8008a74:	183b      	adds	r3, r7, r0
 8008a76:	683a      	ldr	r2, [r7, #0]
 8008a78:	8912      	ldrh	r2, [r2, #8]
 8008a7a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	6959      	ldr	r1, [r3, #20]
 8008a80:	1d7b      	adds	r3, r7, #5
 8008a82:	33ff      	adds	r3, #255	; 0xff
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	b29c      	uxth	r4, r3
 8008a88:	183b      	adds	r3, r7, r0
 8008a8a:	881a      	ldrh	r2, [r3, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	0023      	movs	r3, r4
 8008a90:	f001 f822 	bl	8009ad8 <USB_WritePMA>
 8008a94:	e301      	b.n	800909a <USB_EPStartXfer+0x9aa>
 8008a96:	46c0      	nop			; (mov r8, r8)
 8008a98:	00000402 	.word	0x00000402
 8008a9c:	ffff8f8f 	.word	0xffff8f8f
 8008aa0:	ffff8180 	.word	0xffff8180
 8008aa4:	00000406 	.word	0x00000406
 8008aa8:	ffff83ff 	.word	0xffff83ff
 8008aac:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	785b      	ldrb	r3, [r3, #1]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d166      	bne.n	8008b86 <USB_EPStartXfer+0x496>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	64bb      	str	r3, [r7, #72]	; 0x48
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2250      	movs	r2, #80	; 0x50
 8008ac0:	5a9b      	ldrh	r3, [r3, r2]
 8008ac2:	b29b      	uxth	r3, r3
 8008ac4:	001a      	movs	r2, r3
 8008ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ac8:	189b      	adds	r3, r3, r2
 8008aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	00da      	lsls	r2, r3, #3
 8008ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ad4:	18d3      	adds	r3, r2, r3
 8008ad6:	4ac3      	ldr	r2, [pc, #780]	; (8008de4 <USB_EPStartXfer+0x6f4>)
 8008ad8:	4694      	mov	ip, r2
 8008ada:	4463      	add	r3, ip
 8008adc:	647b      	str	r3, [r7, #68]	; 0x44
 8008ade:	1d7b      	adds	r3, r7, #5
 8008ae0:	33ff      	adds	r3, #255	; 0xff
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d110      	bne.n	8008b0a <USB_EPStartXfer+0x41a>
 8008ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aea:	881b      	ldrh	r3, [r3, #0]
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	4abe      	ldr	r2, [pc, #760]	; (8008de8 <USB_EPStartXfer+0x6f8>)
 8008af0:	4013      	ands	r3, r2
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008af6:	801a      	strh	r2, [r3, #0]
 8008af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008afa:	881b      	ldrh	r3, [r3, #0]
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	4abb      	ldr	r2, [pc, #748]	; (8008dec <USB_EPStartXfer+0x6fc>)
 8008b00:	4313      	orrs	r3, r2
 8008b02:	b29a      	uxth	r2, r3
 8008b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b06:	801a      	strh	r2, [r3, #0]
 8008b08:	e05a      	b.n	8008bc0 <USB_EPStartXfer+0x4d0>
 8008b0a:	1d7b      	adds	r3, r7, #5
 8008b0c:	33ff      	adds	r3, #255	; 0xff
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2b3e      	cmp	r3, #62	; 0x3e
 8008b12:	d81a      	bhi.n	8008b4a <USB_EPStartXfer+0x45a>
 8008b14:	1d7b      	adds	r3, r7, #5
 8008b16:	33ff      	adds	r3, #255	; 0xff
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	085b      	lsrs	r3, r3, #1
 8008b1c:	21f8      	movs	r1, #248	; 0xf8
 8008b1e:	187a      	adds	r2, r7, r1
 8008b20:	6013      	str	r3, [r2, #0]
 8008b22:	1d7b      	adds	r3, r7, #5
 8008b24:	33ff      	adds	r3, #255	; 0xff
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2201      	movs	r2, #1
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	d004      	beq.n	8008b38 <USB_EPStartXfer+0x448>
 8008b2e:	187b      	adds	r3, r7, r1
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	3301      	adds	r3, #1
 8008b34:	187a      	adds	r2, r7, r1
 8008b36:	6013      	str	r3, [r2, #0]
 8008b38:	23f8      	movs	r3, #248	; 0xf8
 8008b3a:	18fb      	adds	r3, r7, r3
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	029b      	lsls	r3, r3, #10
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b46:	801a      	strh	r2, [r3, #0]
 8008b48:	e03a      	b.n	8008bc0 <USB_EPStartXfer+0x4d0>
 8008b4a:	1d7b      	adds	r3, r7, #5
 8008b4c:	33ff      	adds	r3, #255	; 0xff
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	095b      	lsrs	r3, r3, #5
 8008b52:	21f8      	movs	r1, #248	; 0xf8
 8008b54:	187a      	adds	r2, r7, r1
 8008b56:	6013      	str	r3, [r2, #0]
 8008b58:	1d7b      	adds	r3, r7, #5
 8008b5a:	33ff      	adds	r3, #255	; 0xff
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	221f      	movs	r2, #31
 8008b60:	4013      	ands	r3, r2
 8008b62:	d104      	bne.n	8008b6e <USB_EPStartXfer+0x47e>
 8008b64:	187b      	adds	r3, r7, r1
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	3b01      	subs	r3, #1
 8008b6a:	187a      	adds	r2, r7, r1
 8008b6c:	6013      	str	r3, [r2, #0]
 8008b6e:	23f8      	movs	r3, #248	; 0xf8
 8008b70:	18fb      	adds	r3, r7, r3
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	029b      	lsls	r3, r3, #10
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	4a9c      	ldr	r2, [pc, #624]	; (8008dec <USB_EPStartXfer+0x6fc>)
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b82:	801a      	strh	r2, [r3, #0]
 8008b84:	e01c      	b.n	8008bc0 <USB_EPStartXfer+0x4d0>
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	785b      	ldrb	r3, [r3, #1]
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d118      	bne.n	8008bc0 <USB_EPStartXfer+0x4d0>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	653b      	str	r3, [r7, #80]	; 0x50
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2250      	movs	r2, #80	; 0x50
 8008b96:	5a9b      	ldrh	r3, [r3, r2]
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	001a      	movs	r2, r3
 8008b9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b9e:	189b      	adds	r3, r3, r2
 8008ba0:	653b      	str	r3, [r7, #80]	; 0x50
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	00da      	lsls	r2, r3, #3
 8008ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008baa:	18d3      	adds	r3, r2, r3
 8008bac:	4a8d      	ldr	r2, [pc, #564]	; (8008de4 <USB_EPStartXfer+0x6f4>)
 8008bae:	4694      	mov	ip, r2
 8008bb0:	4463      	add	r3, ip
 8008bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bb4:	1d7b      	adds	r3, r7, #5
 8008bb6:	33ff      	adds	r3, #255	; 0xff
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bbe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008bc0:	2076      	movs	r0, #118	; 0x76
 8008bc2:	183b      	adds	r3, r7, r0
 8008bc4:	683a      	ldr	r2, [r7, #0]
 8008bc6:	8912      	ldrh	r2, [r2, #8]
 8008bc8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	6959      	ldr	r1, [r3, #20]
 8008bce:	1d7b      	adds	r3, r7, #5
 8008bd0:	33ff      	adds	r3, #255	; 0xff
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	b29c      	uxth	r4, r3
 8008bd6:	183b      	adds	r3, r7, r0
 8008bd8:	881a      	ldrh	r2, [r3, #0]
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	0023      	movs	r3, r4
 8008bde:	f000 ff7b 	bl	8009ad8 <USB_WritePMA>
            ep->xfer_buff += len;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	695a      	ldr	r2, [r3, #20]
 8008be6:	1d7b      	adds	r3, r7, #5
 8008be8:	33ff      	adds	r3, #255	; 0xff
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	18d2      	adds	r2, r2, r3
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	6a1a      	ldr	r2, [r3, #32]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d908      	bls.n	8008c10 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	6a1a      	ldr	r2, [r3, #32]
 8008c02:	1d7b      	adds	r3, r7, #5
 8008c04:	33ff      	adds	r3, #255	; 0xff
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	1ad2      	subs	r2, r2, r3
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	621a      	str	r2, [r3, #32]
 8008c0e:	e007      	b.n	8008c20 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	6a1b      	ldr	r3, [r3, #32]
 8008c14:	1d7a      	adds	r2, r7, #5
 8008c16:	32ff      	adds	r2, #255	; 0xff
 8008c18:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	643b      	str	r3, [r7, #64]	; 0x40
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	785b      	ldrb	r3, [r3, #1]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d166      	bne.n	8008cfa <USB_EPStartXfer+0x60a>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2250      	movs	r2, #80	; 0x50
 8008c34:	5a9b      	ldrh	r3, [r3, r2]
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	001a      	movs	r2, r3
 8008c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3c:	189b      	adds	r3, r3, r2
 8008c3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	00da      	lsls	r2, r3, #3
 8008c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c48:	18d3      	adds	r3, r2, r3
 8008c4a:	4a69      	ldr	r2, [pc, #420]	; (8008df0 <USB_EPStartXfer+0x700>)
 8008c4c:	4694      	mov	ip, r2
 8008c4e:	4463      	add	r3, ip
 8008c50:	637b      	str	r3, [r7, #52]	; 0x34
 8008c52:	1d7b      	adds	r3, r7, #5
 8008c54:	33ff      	adds	r3, #255	; 0xff
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d110      	bne.n	8008c7e <USB_EPStartXfer+0x58e>
 8008c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c5e:	881b      	ldrh	r3, [r3, #0]
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	4a61      	ldr	r2, [pc, #388]	; (8008de8 <USB_EPStartXfer+0x6f8>)
 8008c64:	4013      	ands	r3, r2
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6a:	801a      	strh	r2, [r3, #0]
 8008c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6e:	881b      	ldrh	r3, [r3, #0]
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	4a5e      	ldr	r2, [pc, #376]	; (8008dec <USB_EPStartXfer+0x6fc>)
 8008c74:	4313      	orrs	r3, r2
 8008c76:	b29a      	uxth	r2, r3
 8008c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c7a:	801a      	strh	r2, [r3, #0]
 8008c7c:	e058      	b.n	8008d30 <USB_EPStartXfer+0x640>
 8008c7e:	1d7b      	adds	r3, r7, #5
 8008c80:	33ff      	adds	r3, #255	; 0xff
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b3e      	cmp	r3, #62	; 0x3e
 8008c86:	d81a      	bhi.n	8008cbe <USB_EPStartXfer+0x5ce>
 8008c88:	1d7b      	adds	r3, r7, #5
 8008c8a:	33ff      	adds	r3, #255	; 0xff
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	085b      	lsrs	r3, r3, #1
 8008c90:	21f4      	movs	r1, #244	; 0xf4
 8008c92:	187a      	adds	r2, r7, r1
 8008c94:	6013      	str	r3, [r2, #0]
 8008c96:	1d7b      	adds	r3, r7, #5
 8008c98:	33ff      	adds	r3, #255	; 0xff
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	4013      	ands	r3, r2
 8008ca0:	d004      	beq.n	8008cac <USB_EPStartXfer+0x5bc>
 8008ca2:	187b      	adds	r3, r7, r1
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	3301      	adds	r3, #1
 8008ca8:	187a      	adds	r2, r7, r1
 8008caa:	6013      	str	r3, [r2, #0]
 8008cac:	23f4      	movs	r3, #244	; 0xf4
 8008cae:	18fb      	adds	r3, r7, r3
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	029b      	lsls	r3, r3, #10
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cba:	801a      	strh	r2, [r3, #0]
 8008cbc:	e038      	b.n	8008d30 <USB_EPStartXfer+0x640>
 8008cbe:	1d7b      	adds	r3, r7, #5
 8008cc0:	33ff      	adds	r3, #255	; 0xff
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	095b      	lsrs	r3, r3, #5
 8008cc6:	21f4      	movs	r1, #244	; 0xf4
 8008cc8:	187a      	adds	r2, r7, r1
 8008cca:	6013      	str	r3, [r2, #0]
 8008ccc:	1d7b      	adds	r3, r7, #5
 8008cce:	33ff      	adds	r3, #255	; 0xff
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	221f      	movs	r2, #31
 8008cd4:	4013      	ands	r3, r2
 8008cd6:	d104      	bne.n	8008ce2 <USB_EPStartXfer+0x5f2>
 8008cd8:	187b      	adds	r3, r7, r1
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	187a      	adds	r2, r7, r1
 8008ce0:	6013      	str	r3, [r2, #0]
 8008ce2:	23f4      	movs	r3, #244	; 0xf4
 8008ce4:	18fb      	adds	r3, r7, r3
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	029b      	lsls	r3, r3, #10
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	4a3f      	ldr	r2, [pc, #252]	; (8008dec <USB_EPStartXfer+0x6fc>)
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	b29a      	uxth	r2, r3
 8008cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf6:	801a      	strh	r2, [r3, #0]
 8008cf8:	e01a      	b.n	8008d30 <USB_EPStartXfer+0x640>
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	785b      	ldrb	r3, [r3, #1]
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d116      	bne.n	8008d30 <USB_EPStartXfer+0x640>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2250      	movs	r2, #80	; 0x50
 8008d06:	5a9b      	ldrh	r3, [r3, r2]
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	001a      	movs	r2, r3
 8008d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d0e:	189b      	adds	r3, r3, r2
 8008d10:	643b      	str	r3, [r7, #64]	; 0x40
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	00da      	lsls	r2, r3, #3
 8008d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d1a:	18d3      	adds	r3, r2, r3
 8008d1c:	4a34      	ldr	r2, [pc, #208]	; (8008df0 <USB_EPStartXfer+0x700>)
 8008d1e:	4694      	mov	ip, r2
 8008d20:	4463      	add	r3, ip
 8008d22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d24:	1d7b      	adds	r3, r7, #5
 8008d26:	33ff      	adds	r3, #255	; 0xff
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	b29a      	uxth	r2, r3
 8008d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008d30:	2076      	movs	r0, #118	; 0x76
 8008d32:	183b      	adds	r3, r7, r0
 8008d34:	683a      	ldr	r2, [r7, #0]
 8008d36:	8952      	ldrh	r2, [r2, #10]
 8008d38:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	6959      	ldr	r1, [r3, #20]
 8008d3e:	1d7b      	adds	r3, r7, #5
 8008d40:	33ff      	adds	r3, #255	; 0xff
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	b29c      	uxth	r4, r3
 8008d46:	183b      	adds	r3, r7, r0
 8008d48:	881a      	ldrh	r2, [r3, #0]
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	0023      	movs	r3, r4
 8008d4e:	f000 fec3 	bl	8009ad8 <USB_WritePMA>
 8008d52:	e1a2      	b.n	800909a <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	6a1b      	ldr	r3, [r3, #32]
 8008d58:	1d7a      	adds	r2, r7, #5
 8008d5a:	32ff      	adds	r2, #255	; 0xff
 8008d5c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	18d3      	adds	r3, r2, r3
 8008d68:	881b      	ldrh	r3, [r3, #0]
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	2062      	movs	r0, #98	; 0x62
 8008d6e:	183b      	adds	r3, r7, r0
 8008d70:	4920      	ldr	r1, [pc, #128]	; (8008df4 <USB_EPStartXfer+0x704>)
 8008d72:	400a      	ands	r2, r1
 8008d74:	801a      	strh	r2, [r3, #0]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	18d3      	adds	r3, r2, r3
 8008d80:	183a      	adds	r2, r7, r0
 8008d82:	8812      	ldrh	r2, [r2, #0]
 8008d84:	491c      	ldr	r1, [pc, #112]	; (8008df8 <USB_EPStartXfer+0x708>)
 8008d86:	430a      	orrs	r2, r1
 8008d88:	b292      	uxth	r2, r2
 8008d8a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2250      	movs	r2, #80	; 0x50
 8008d94:	5a9b      	ldrh	r3, [r3, r2]
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	001a      	movs	r2, r3
 8008d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d9c:	189b      	adds	r3, r3, r2
 8008d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	00da      	lsls	r2, r3, #3
 8008da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008da8:	18d3      	adds	r3, r2, r3
 8008daa:	4a0e      	ldr	r2, [pc, #56]	; (8008de4 <USB_EPStartXfer+0x6f4>)
 8008dac:	4694      	mov	ip, r2
 8008dae:	4463      	add	r3, ip
 8008db0:	65bb      	str	r3, [r7, #88]	; 0x58
 8008db2:	1d7b      	adds	r3, r7, #5
 8008db4:	33ff      	adds	r3, #255	; 0xff
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	b29a      	uxth	r2, r3
 8008dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008dbc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008dbe:	2076      	movs	r0, #118	; 0x76
 8008dc0:	183b      	adds	r3, r7, r0
 8008dc2:	683a      	ldr	r2, [r7, #0]
 8008dc4:	8912      	ldrh	r2, [r2, #8]
 8008dc6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	6959      	ldr	r1, [r3, #20]
 8008dcc:	1d7b      	adds	r3, r7, #5
 8008dce:	33ff      	adds	r3, #255	; 0xff
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	b29c      	uxth	r4, r3
 8008dd4:	183b      	adds	r3, r7, r0
 8008dd6:	881a      	ldrh	r2, [r3, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	0023      	movs	r3, r4
 8008ddc:	f000 fe7c 	bl	8009ad8 <USB_WritePMA>
 8008de0:	e15b      	b.n	800909a <USB_EPStartXfer+0x9aa>
 8008de2:	46c0      	nop			; (mov r8, r8)
 8008de4:	00000402 	.word	0x00000402
 8008de8:	ffff83ff 	.word	0xffff83ff
 8008dec:	ffff8000 	.word	0xffff8000
 8008df0:	00000406 	.word	0x00000406
 8008df4:	ffff8e8f 	.word	0xffff8e8f
 8008df8:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	6a1a      	ldr	r2, [r3, #32]
 8008e00:	1d7b      	adds	r3, r7, #5
 8008e02:	33ff      	adds	r3, #255	; 0xff
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	1ad2      	subs	r2, r2, r3
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	18d3      	adds	r3, r2, r3
 8008e16:	881b      	ldrh	r3, [r3, #0]
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	001a      	movs	r2, r3
 8008e1c:	2340      	movs	r3, #64	; 0x40
 8008e1e:	4013      	ands	r3, r2
 8008e20:	d100      	bne.n	8008e24 <USB_EPStartXfer+0x734>
 8008e22:	e099      	b.n	8008f58 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	673b      	str	r3, [r7, #112]	; 0x70
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	785b      	ldrb	r3, [r3, #1]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d166      	bne.n	8008efe <USB_EPStartXfer+0x80e>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2250      	movs	r2, #80	; 0x50
 8008e38:	5a9b      	ldrh	r3, [r3, r2]
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	001a      	movs	r2, r3
 8008e3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e40:	189b      	adds	r3, r3, r2
 8008e42:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	00da      	lsls	r2, r3, #3
 8008e4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e4c:	18d3      	adds	r3, r2, r3
 8008e4e:	4ad0      	ldr	r2, [pc, #832]	; (8009190 <USB_EPStartXfer+0xaa0>)
 8008e50:	4694      	mov	ip, r2
 8008e52:	4463      	add	r3, ip
 8008e54:	667b      	str	r3, [r7, #100]	; 0x64
 8008e56:	1d7b      	adds	r3, r7, #5
 8008e58:	33ff      	adds	r3, #255	; 0xff
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d110      	bne.n	8008e82 <USB_EPStartXfer+0x792>
 8008e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e62:	881b      	ldrh	r3, [r3, #0]
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	4acb      	ldr	r2, [pc, #812]	; (8009194 <USB_EPStartXfer+0xaa4>)
 8008e68:	4013      	ands	r3, r2
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e6e:	801a      	strh	r2, [r3, #0]
 8008e70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e72:	881b      	ldrh	r3, [r3, #0]
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	4ac8      	ldr	r2, [pc, #800]	; (8009198 <USB_EPStartXfer+0xaa8>)
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e7e:	801a      	strh	r2, [r3, #0]
 8008e80:	e058      	b.n	8008f34 <USB_EPStartXfer+0x844>
 8008e82:	1d7b      	adds	r3, r7, #5
 8008e84:	33ff      	adds	r3, #255	; 0xff
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b3e      	cmp	r3, #62	; 0x3e
 8008e8a:	d81a      	bhi.n	8008ec2 <USB_EPStartXfer+0x7d2>
 8008e8c:	1d7b      	adds	r3, r7, #5
 8008e8e:	33ff      	adds	r3, #255	; 0xff
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	085b      	lsrs	r3, r3, #1
 8008e94:	21f0      	movs	r1, #240	; 0xf0
 8008e96:	187a      	adds	r2, r7, r1
 8008e98:	6013      	str	r3, [r2, #0]
 8008e9a:	1d7b      	adds	r3, r7, #5
 8008e9c:	33ff      	adds	r3, #255	; 0xff
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	d004      	beq.n	8008eb0 <USB_EPStartXfer+0x7c0>
 8008ea6:	187b      	adds	r3, r7, r1
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	187a      	adds	r2, r7, r1
 8008eae:	6013      	str	r3, [r2, #0]
 8008eb0:	23f0      	movs	r3, #240	; 0xf0
 8008eb2:	18fb      	adds	r3, r7, r3
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	029b      	lsls	r3, r3, #10
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ebe:	801a      	strh	r2, [r3, #0]
 8008ec0:	e038      	b.n	8008f34 <USB_EPStartXfer+0x844>
 8008ec2:	1d7b      	adds	r3, r7, #5
 8008ec4:	33ff      	adds	r3, #255	; 0xff
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	095b      	lsrs	r3, r3, #5
 8008eca:	21f0      	movs	r1, #240	; 0xf0
 8008ecc:	187a      	adds	r2, r7, r1
 8008ece:	6013      	str	r3, [r2, #0]
 8008ed0:	1d7b      	adds	r3, r7, #5
 8008ed2:	33ff      	adds	r3, #255	; 0xff
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	221f      	movs	r2, #31
 8008ed8:	4013      	ands	r3, r2
 8008eda:	d104      	bne.n	8008ee6 <USB_EPStartXfer+0x7f6>
 8008edc:	187b      	adds	r3, r7, r1
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	187a      	adds	r2, r7, r1
 8008ee4:	6013      	str	r3, [r2, #0]
 8008ee6:	23f0      	movs	r3, #240	; 0xf0
 8008ee8:	18fb      	adds	r3, r7, r3
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	029b      	lsls	r3, r3, #10
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	4aa9      	ldr	r2, [pc, #676]	; (8009198 <USB_EPStartXfer+0xaa8>)
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008efa:	801a      	strh	r2, [r3, #0]
 8008efc:	e01a      	b.n	8008f34 <USB_EPStartXfer+0x844>
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	785b      	ldrb	r3, [r3, #1]
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d116      	bne.n	8008f34 <USB_EPStartXfer+0x844>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2250      	movs	r2, #80	; 0x50
 8008f0a:	5a9b      	ldrh	r3, [r3, r2]
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	001a      	movs	r2, r3
 8008f10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f12:	189b      	adds	r3, r3, r2
 8008f14:	673b      	str	r3, [r7, #112]	; 0x70
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	00da      	lsls	r2, r3, #3
 8008f1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f1e:	18d3      	adds	r3, r2, r3
 8008f20:	4a9b      	ldr	r2, [pc, #620]	; (8009190 <USB_EPStartXfer+0xaa0>)
 8008f22:	4694      	mov	ip, r2
 8008f24:	4463      	add	r3, ip
 8008f26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f28:	1d7b      	adds	r3, r7, #5
 8008f2a:	33ff      	adds	r3, #255	; 0xff
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f32:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008f34:	2076      	movs	r0, #118	; 0x76
 8008f36:	183b      	adds	r3, r7, r0
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	8952      	ldrh	r2, [r2, #10]
 8008f3c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	6959      	ldr	r1, [r3, #20]
 8008f42:	1d7b      	adds	r3, r7, #5
 8008f44:	33ff      	adds	r3, #255	; 0xff
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	b29c      	uxth	r4, r3
 8008f4a:	183b      	adds	r3, r7, r0
 8008f4c:	881a      	ldrh	r2, [r3, #0]
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	0023      	movs	r3, r4
 8008f52:	f000 fdc1 	bl	8009ad8 <USB_WritePMA>
 8008f56:	e0a0      	b.n	800909a <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	785b      	ldrb	r3, [r3, #1]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d166      	bne.n	800902e <USB_EPStartXfer+0x93e>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2250      	movs	r2, #80	; 0x50
 8008f68:	5a9b      	ldrh	r3, [r3, r2]
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	001a      	movs	r2, r3
 8008f6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f70:	189b      	adds	r3, r3, r2
 8008f72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	00da      	lsls	r2, r3, #3
 8008f7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f7c:	18d3      	adds	r3, r2, r3
 8008f7e:	4a87      	ldr	r2, [pc, #540]	; (800919c <USB_EPStartXfer+0xaac>)
 8008f80:	4694      	mov	ip, r2
 8008f82:	4463      	add	r3, ip
 8008f84:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f86:	1d7b      	adds	r3, r7, #5
 8008f88:	33ff      	adds	r3, #255	; 0xff
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d110      	bne.n	8008fb2 <USB_EPStartXfer+0x8c2>
 8008f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	4a7f      	ldr	r2, [pc, #508]	; (8009194 <USB_EPStartXfer+0xaa4>)
 8008f98:	4013      	ands	r3, r2
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f9e:	801a      	strh	r2, [r3, #0]
 8008fa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	4a7c      	ldr	r2, [pc, #496]	; (8009198 <USB_EPStartXfer+0xaa8>)
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fae:	801a      	strh	r2, [r3, #0]
 8008fb0:	e062      	b.n	8009078 <USB_EPStartXfer+0x988>
 8008fb2:	1d7b      	adds	r3, r7, #5
 8008fb4:	33ff      	adds	r3, #255	; 0xff
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b3e      	cmp	r3, #62	; 0x3e
 8008fba:	d81a      	bhi.n	8008ff2 <USB_EPStartXfer+0x902>
 8008fbc:	1d7b      	adds	r3, r7, #5
 8008fbe:	33ff      	adds	r3, #255	; 0xff
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	085b      	lsrs	r3, r3, #1
 8008fc4:	21ec      	movs	r1, #236	; 0xec
 8008fc6:	187a      	adds	r2, r7, r1
 8008fc8:	6013      	str	r3, [r2, #0]
 8008fca:	1d7b      	adds	r3, r7, #5
 8008fcc:	33ff      	adds	r3, #255	; 0xff
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	d004      	beq.n	8008fe0 <USB_EPStartXfer+0x8f0>
 8008fd6:	187b      	adds	r3, r7, r1
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	187a      	adds	r2, r7, r1
 8008fde:	6013      	str	r3, [r2, #0]
 8008fe0:	23ec      	movs	r3, #236	; 0xec
 8008fe2:	18fb      	adds	r3, r7, r3
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	029b      	lsls	r3, r3, #10
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fee:	801a      	strh	r2, [r3, #0]
 8008ff0:	e042      	b.n	8009078 <USB_EPStartXfer+0x988>
 8008ff2:	1d7b      	adds	r3, r7, #5
 8008ff4:	33ff      	adds	r3, #255	; 0xff
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	095b      	lsrs	r3, r3, #5
 8008ffa:	21ec      	movs	r1, #236	; 0xec
 8008ffc:	187a      	adds	r2, r7, r1
 8008ffe:	6013      	str	r3, [r2, #0]
 8009000:	1d7b      	adds	r3, r7, #5
 8009002:	33ff      	adds	r3, #255	; 0xff
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	221f      	movs	r2, #31
 8009008:	4013      	ands	r3, r2
 800900a:	d104      	bne.n	8009016 <USB_EPStartXfer+0x926>
 800900c:	187b      	adds	r3, r7, r1
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	3b01      	subs	r3, #1
 8009012:	187a      	adds	r2, r7, r1
 8009014:	6013      	str	r3, [r2, #0]
 8009016:	23ec      	movs	r3, #236	; 0xec
 8009018:	18fb      	adds	r3, r7, r3
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	b29b      	uxth	r3, r3
 800901e:	029b      	lsls	r3, r3, #10
 8009020:	b29b      	uxth	r3, r3
 8009022:	4a5d      	ldr	r2, [pc, #372]	; (8009198 <USB_EPStartXfer+0xaa8>)
 8009024:	4313      	orrs	r3, r2
 8009026:	b29a      	uxth	r2, r3
 8009028:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800902a:	801a      	strh	r2, [r3, #0]
 800902c:	e024      	b.n	8009078 <USB_EPStartXfer+0x988>
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	785b      	ldrb	r3, [r3, #1]
 8009032:	2b01      	cmp	r3, #1
 8009034:	d120      	bne.n	8009078 <USB_EPStartXfer+0x988>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2184      	movs	r1, #132	; 0x84
 800903a:	187a      	adds	r2, r7, r1
 800903c:	6013      	str	r3, [r2, #0]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2250      	movs	r2, #80	; 0x50
 8009042:	5a9b      	ldrh	r3, [r3, r2]
 8009044:	b29b      	uxth	r3, r3
 8009046:	001a      	movs	r2, r3
 8009048:	187b      	adds	r3, r7, r1
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	189b      	adds	r3, r3, r2
 800904e:	187a      	adds	r2, r7, r1
 8009050:	6013      	str	r3, [r2, #0]
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	00da      	lsls	r2, r3, #3
 8009058:	187b      	adds	r3, r7, r1
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	18d3      	adds	r3, r2, r3
 800905e:	4a4f      	ldr	r2, [pc, #316]	; (800919c <USB_EPStartXfer+0xaac>)
 8009060:	4694      	mov	ip, r2
 8009062:	4463      	add	r3, ip
 8009064:	2180      	movs	r1, #128	; 0x80
 8009066:	187a      	adds	r2, r7, r1
 8009068:	6013      	str	r3, [r2, #0]
 800906a:	1d7b      	adds	r3, r7, #5
 800906c:	33ff      	adds	r3, #255	; 0xff
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	b29a      	uxth	r2, r3
 8009072:	187b      	adds	r3, r7, r1
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009078:	2076      	movs	r0, #118	; 0x76
 800907a:	183b      	adds	r3, r7, r0
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	8912      	ldrh	r2, [r2, #8]
 8009080:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	6959      	ldr	r1, [r3, #20]
 8009086:	1d7b      	adds	r3, r7, #5
 8009088:	33ff      	adds	r3, #255	; 0xff
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	b29c      	uxth	r4, r3
 800908e:	183b      	adds	r3, r7, r0
 8009090:	881a      	ldrh	r2, [r3, #0]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	0023      	movs	r3, r4
 8009096:	f000 fd1f 	bl	8009ad8 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	18d3      	adds	r3, r2, r3
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	200a      	movs	r0, #10
 80090aa:	183b      	adds	r3, r7, r0
 80090ac:	493c      	ldr	r1, [pc, #240]	; (80091a0 <USB_EPStartXfer+0xab0>)
 80090ae:	400a      	ands	r2, r1
 80090b0:	801a      	strh	r2, [r3, #0]
 80090b2:	183b      	adds	r3, r7, r0
 80090b4:	183a      	adds	r2, r7, r0
 80090b6:	8812      	ldrh	r2, [r2, #0]
 80090b8:	2110      	movs	r1, #16
 80090ba:	404a      	eors	r2, r1
 80090bc:	801a      	strh	r2, [r3, #0]
 80090be:	183b      	adds	r3, r7, r0
 80090c0:	183a      	adds	r2, r7, r0
 80090c2:	8812      	ldrh	r2, [r2, #0]
 80090c4:	2120      	movs	r1, #32
 80090c6:	404a      	eors	r2, r1
 80090c8:	801a      	strh	r2, [r3, #0]
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	18d3      	adds	r3, r2, r3
 80090d4:	183a      	adds	r2, r7, r0
 80090d6:	8812      	ldrh	r2, [r2, #0]
 80090d8:	4932      	ldr	r1, [pc, #200]	; (80091a4 <USB_EPStartXfer+0xab4>)
 80090da:	430a      	orrs	r2, r1
 80090dc:	b292      	uxth	r2, r2
 80090de:	801a      	strh	r2, [r3, #0]
 80090e0:	f000 fbaf 	bl	8009842 <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	7b1b      	ldrb	r3, [r3, #12]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d000      	beq.n	80090ee <USB_EPStartXfer+0x9fe>
 80090ec:	e09e      	b.n	800922c <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	699a      	ldr	r2, [r3, #24]
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d90d      	bls.n	8009116 <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	1d7a      	adds	r2, r7, #5
 8009100:	32ff      	adds	r2, #255	; 0xff
 8009102:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	699a      	ldr	r2, [r3, #24]
 8009108:	1d7b      	adds	r3, r7, #5
 800910a:	33ff      	adds	r3, #255	; 0xff
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	1ad2      	subs	r2, r2, r3
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	619a      	str	r2, [r3, #24]
 8009114:	e007      	b.n	8009126 <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	699b      	ldr	r3, [r3, #24]
 800911a:	1d7a      	adds	r2, r7, #5
 800911c:	32ff      	adds	r2, #255	; 0xff
 800911e:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	2200      	movs	r2, #0
 8009124:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2190      	movs	r1, #144	; 0x90
 800912a:	187a      	adds	r2, r7, r1
 800912c:	6013      	str	r3, [r2, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2250      	movs	r2, #80	; 0x50
 8009132:	5a9b      	ldrh	r3, [r3, r2]
 8009134:	b29b      	uxth	r3, r3
 8009136:	001a      	movs	r2, r3
 8009138:	187b      	adds	r3, r7, r1
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	189b      	adds	r3, r3, r2
 800913e:	187a      	adds	r2, r7, r1
 8009140:	6013      	str	r3, [r2, #0]
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	00da      	lsls	r2, r3, #3
 8009148:	187b      	adds	r3, r7, r1
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	18d3      	adds	r3, r2, r3
 800914e:	4a10      	ldr	r2, [pc, #64]	; (8009190 <USB_EPStartXfer+0xaa0>)
 8009150:	4694      	mov	ip, r2
 8009152:	4463      	add	r3, ip
 8009154:	218c      	movs	r1, #140	; 0x8c
 8009156:	187a      	adds	r2, r7, r1
 8009158:	6013      	str	r3, [r2, #0]
 800915a:	1d7b      	adds	r3, r7, #5
 800915c:	33ff      	adds	r3, #255	; 0xff
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d121      	bne.n	80091a8 <USB_EPStartXfer+0xab8>
 8009164:	187b      	adds	r3, r7, r1
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	b29b      	uxth	r3, r3
 800916c:	4a09      	ldr	r2, [pc, #36]	; (8009194 <USB_EPStartXfer+0xaa4>)
 800916e:	4013      	ands	r3, r2
 8009170:	b29a      	uxth	r2, r3
 8009172:	187b      	adds	r3, r7, r1
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	801a      	strh	r2, [r3, #0]
 8009178:	187b      	adds	r3, r7, r1
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	881b      	ldrh	r3, [r3, #0]
 800917e:	b29b      	uxth	r3, r3
 8009180:	4a05      	ldr	r2, [pc, #20]	; (8009198 <USB_EPStartXfer+0xaa8>)
 8009182:	4313      	orrs	r3, r2
 8009184:	b29a      	uxth	r2, r3
 8009186:	187b      	adds	r3, r7, r1
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	801a      	strh	r2, [r3, #0]
 800918c:	e334      	b.n	80097f8 <USB_EPStartXfer+0x1108>
 800918e:	46c0      	nop			; (mov r8, r8)
 8009190:	00000406 	.word	0x00000406
 8009194:	ffff83ff 	.word	0xffff83ff
 8009198:	ffff8000 	.word	0xffff8000
 800919c:	00000402 	.word	0x00000402
 80091a0:	ffff8fbf 	.word	0xffff8fbf
 80091a4:	ffff8080 	.word	0xffff8080
 80091a8:	1d7b      	adds	r3, r7, #5
 80091aa:	33ff      	adds	r3, #255	; 0xff
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2b3e      	cmp	r3, #62	; 0x3e
 80091b0:	d81c      	bhi.n	80091ec <USB_EPStartXfer+0xafc>
 80091b2:	1d7b      	adds	r3, r7, #5
 80091b4:	33ff      	adds	r3, #255	; 0xff
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	085b      	lsrs	r3, r3, #1
 80091ba:	21e8      	movs	r1, #232	; 0xe8
 80091bc:	187a      	adds	r2, r7, r1
 80091be:	6013      	str	r3, [r2, #0]
 80091c0:	1d7b      	adds	r3, r7, #5
 80091c2:	33ff      	adds	r3, #255	; 0xff
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2201      	movs	r2, #1
 80091c8:	4013      	ands	r3, r2
 80091ca:	d004      	beq.n	80091d6 <USB_EPStartXfer+0xae6>
 80091cc:	187b      	adds	r3, r7, r1
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	3301      	adds	r3, #1
 80091d2:	187a      	adds	r2, r7, r1
 80091d4:	6013      	str	r3, [r2, #0]
 80091d6:	23e8      	movs	r3, #232	; 0xe8
 80091d8:	18fb      	adds	r3, r7, r3
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	b29b      	uxth	r3, r3
 80091de:	029b      	lsls	r3, r3, #10
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	238c      	movs	r3, #140	; 0x8c
 80091e4:	18fb      	adds	r3, r7, r3
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	801a      	strh	r2, [r3, #0]
 80091ea:	e305      	b.n	80097f8 <USB_EPStartXfer+0x1108>
 80091ec:	1d7b      	adds	r3, r7, #5
 80091ee:	33ff      	adds	r3, #255	; 0xff
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	095b      	lsrs	r3, r3, #5
 80091f4:	21e8      	movs	r1, #232	; 0xe8
 80091f6:	187a      	adds	r2, r7, r1
 80091f8:	6013      	str	r3, [r2, #0]
 80091fa:	1d7b      	adds	r3, r7, #5
 80091fc:	33ff      	adds	r3, #255	; 0xff
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	221f      	movs	r2, #31
 8009202:	4013      	ands	r3, r2
 8009204:	d104      	bne.n	8009210 <USB_EPStartXfer+0xb20>
 8009206:	187b      	adds	r3, r7, r1
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	3b01      	subs	r3, #1
 800920c:	187a      	adds	r2, r7, r1
 800920e:	6013      	str	r3, [r2, #0]
 8009210:	23e8      	movs	r3, #232	; 0xe8
 8009212:	18fb      	adds	r3, r7, r3
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	b29b      	uxth	r3, r3
 8009218:	029b      	lsls	r3, r3, #10
 800921a:	b29b      	uxth	r3, r3
 800921c:	4aca      	ldr	r2, [pc, #808]	; (8009548 <USB_EPStartXfer+0xe58>)
 800921e:	4313      	orrs	r3, r2
 8009220:	b29a      	uxth	r2, r3
 8009222:	238c      	movs	r3, #140	; 0x8c
 8009224:	18fb      	adds	r3, r7, r3
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	801a      	strh	r2, [r3, #0]
 800922a:	e2e5      	b.n	80097f8 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	78db      	ldrb	r3, [r3, #3]
 8009230:	2b02      	cmp	r3, #2
 8009232:	d000      	beq.n	8009236 <USB_EPStartXfer+0xb46>
 8009234:	e16f      	b.n	8009516 <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	785b      	ldrb	r3, [r3, #1]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d16f      	bne.n	800931e <USB_EPStartXfer+0xc2e>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	21ac      	movs	r1, #172	; 0xac
 8009242:	187a      	adds	r2, r7, r1
 8009244:	6013      	str	r3, [r2, #0]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2250      	movs	r2, #80	; 0x50
 800924a:	5a9b      	ldrh	r3, [r3, r2]
 800924c:	b29b      	uxth	r3, r3
 800924e:	001a      	movs	r2, r3
 8009250:	187b      	adds	r3, r7, r1
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	189b      	adds	r3, r3, r2
 8009256:	187a      	adds	r2, r7, r1
 8009258:	6013      	str	r3, [r2, #0]
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	00da      	lsls	r2, r3, #3
 8009260:	187b      	adds	r3, r7, r1
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	18d3      	adds	r3, r2, r3
 8009266:	4ab9      	ldr	r2, [pc, #740]	; (800954c <USB_EPStartXfer+0xe5c>)
 8009268:	4694      	mov	ip, r2
 800926a:	4463      	add	r3, ip
 800926c:	21a8      	movs	r1, #168	; 0xa8
 800926e:	187a      	adds	r2, r7, r1
 8009270:	6013      	str	r3, [r2, #0]
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d114      	bne.n	80092a4 <USB_EPStartXfer+0xbb4>
 800927a:	187b      	adds	r3, r7, r1
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	881b      	ldrh	r3, [r3, #0]
 8009280:	b29b      	uxth	r3, r3
 8009282:	4ab3      	ldr	r2, [pc, #716]	; (8009550 <USB_EPStartXfer+0xe60>)
 8009284:	4013      	ands	r3, r2
 8009286:	b29a      	uxth	r2, r3
 8009288:	187b      	adds	r3, r7, r1
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	801a      	strh	r2, [r3, #0]
 800928e:	187b      	adds	r3, r7, r1
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	881b      	ldrh	r3, [r3, #0]
 8009294:	b29b      	uxth	r3, r3
 8009296:	4aac      	ldr	r2, [pc, #688]	; (8009548 <USB_EPStartXfer+0xe58>)
 8009298:	4313      	orrs	r3, r2
 800929a:	b29a      	uxth	r2, r3
 800929c:	187b      	adds	r3, r7, r1
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	801a      	strh	r2, [r3, #0]
 80092a2:	e060      	b.n	8009366 <USB_EPStartXfer+0xc76>
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	2b3e      	cmp	r3, #62	; 0x3e
 80092aa:	d81a      	bhi.n	80092e2 <USB_EPStartXfer+0xbf2>
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	691b      	ldr	r3, [r3, #16]
 80092b0:	085b      	lsrs	r3, r3, #1
 80092b2:	21e4      	movs	r1, #228	; 0xe4
 80092b4:	187a      	adds	r2, r7, r1
 80092b6:	6013      	str	r3, [r2, #0]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	2201      	movs	r2, #1
 80092be:	4013      	ands	r3, r2
 80092c0:	d004      	beq.n	80092cc <USB_EPStartXfer+0xbdc>
 80092c2:	187b      	adds	r3, r7, r1
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3301      	adds	r3, #1
 80092c8:	187a      	adds	r2, r7, r1
 80092ca:	6013      	str	r3, [r2, #0]
 80092cc:	23e4      	movs	r3, #228	; 0xe4
 80092ce:	18fb      	adds	r3, r7, r3
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	029b      	lsls	r3, r3, #10
 80092d6:	b29a      	uxth	r2, r3
 80092d8:	23a8      	movs	r3, #168	; 0xa8
 80092da:	18fb      	adds	r3, r7, r3
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	801a      	strh	r2, [r3, #0]
 80092e0:	e041      	b.n	8009366 <USB_EPStartXfer+0xc76>
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	095b      	lsrs	r3, r3, #5
 80092e8:	21e4      	movs	r1, #228	; 0xe4
 80092ea:	187a      	adds	r2, r7, r1
 80092ec:	6013      	str	r3, [r2, #0]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	221f      	movs	r2, #31
 80092f4:	4013      	ands	r3, r2
 80092f6:	d104      	bne.n	8009302 <USB_EPStartXfer+0xc12>
 80092f8:	187b      	adds	r3, r7, r1
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	3b01      	subs	r3, #1
 80092fe:	187a      	adds	r2, r7, r1
 8009300:	6013      	str	r3, [r2, #0]
 8009302:	23e4      	movs	r3, #228	; 0xe4
 8009304:	18fb      	adds	r3, r7, r3
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	b29b      	uxth	r3, r3
 800930a:	029b      	lsls	r3, r3, #10
 800930c:	b29b      	uxth	r3, r3
 800930e:	4a8e      	ldr	r2, [pc, #568]	; (8009548 <USB_EPStartXfer+0xe58>)
 8009310:	4313      	orrs	r3, r2
 8009312:	b29a      	uxth	r2, r3
 8009314:	23a8      	movs	r3, #168	; 0xa8
 8009316:	18fb      	adds	r3, r7, r3
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	801a      	strh	r2, [r3, #0]
 800931c:	e023      	b.n	8009366 <USB_EPStartXfer+0xc76>
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	785b      	ldrb	r3, [r3, #1]
 8009322:	2b01      	cmp	r3, #1
 8009324:	d11f      	bne.n	8009366 <USB_EPStartXfer+0xc76>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	21b4      	movs	r1, #180	; 0xb4
 800932a:	187a      	adds	r2, r7, r1
 800932c:	6013      	str	r3, [r2, #0]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2250      	movs	r2, #80	; 0x50
 8009332:	5a9b      	ldrh	r3, [r3, r2]
 8009334:	b29b      	uxth	r3, r3
 8009336:	001a      	movs	r2, r3
 8009338:	187b      	adds	r3, r7, r1
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	189b      	adds	r3, r3, r2
 800933e:	187a      	adds	r2, r7, r1
 8009340:	6013      	str	r3, [r2, #0]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	00da      	lsls	r2, r3, #3
 8009348:	187b      	adds	r3, r7, r1
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	18d3      	adds	r3, r2, r3
 800934e:	4a7f      	ldr	r2, [pc, #508]	; (800954c <USB_EPStartXfer+0xe5c>)
 8009350:	4694      	mov	ip, r2
 8009352:	4463      	add	r3, ip
 8009354:	21b0      	movs	r1, #176	; 0xb0
 8009356:	187a      	adds	r2, r7, r1
 8009358:	6013      	str	r3, [r2, #0]
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	b29a      	uxth	r2, r3
 8009360:	187b      	adds	r3, r7, r1
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	801a      	strh	r2, [r3, #0]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	22a4      	movs	r2, #164	; 0xa4
 800936a:	18ba      	adds	r2, r7, r2
 800936c:	6013      	str	r3, [r2, #0]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	785b      	ldrb	r3, [r3, #1]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d16f      	bne.n	8009456 <USB_EPStartXfer+0xd66>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	219c      	movs	r1, #156	; 0x9c
 800937a:	187a      	adds	r2, r7, r1
 800937c:	6013      	str	r3, [r2, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2250      	movs	r2, #80	; 0x50
 8009382:	5a9b      	ldrh	r3, [r3, r2]
 8009384:	b29b      	uxth	r3, r3
 8009386:	001a      	movs	r2, r3
 8009388:	187b      	adds	r3, r7, r1
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	189b      	adds	r3, r3, r2
 800938e:	187a      	adds	r2, r7, r1
 8009390:	6013      	str	r3, [r2, #0]
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	00da      	lsls	r2, r3, #3
 8009398:	187b      	adds	r3, r7, r1
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	18d3      	adds	r3, r2, r3
 800939e:	4a6d      	ldr	r2, [pc, #436]	; (8009554 <USB_EPStartXfer+0xe64>)
 80093a0:	4694      	mov	ip, r2
 80093a2:	4463      	add	r3, ip
 80093a4:	2198      	movs	r1, #152	; 0x98
 80093a6:	187a      	adds	r2, r7, r1
 80093a8:	6013      	str	r3, [r2, #0]
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	691b      	ldr	r3, [r3, #16]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d114      	bne.n	80093dc <USB_EPStartXfer+0xcec>
 80093b2:	187b      	adds	r3, r7, r1
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	881b      	ldrh	r3, [r3, #0]
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	4a65      	ldr	r2, [pc, #404]	; (8009550 <USB_EPStartXfer+0xe60>)
 80093bc:	4013      	ands	r3, r2
 80093be:	b29a      	uxth	r2, r3
 80093c0:	187b      	adds	r3, r7, r1
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	801a      	strh	r2, [r3, #0]
 80093c6:	187b      	adds	r3, r7, r1
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	881b      	ldrh	r3, [r3, #0]
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	4a5e      	ldr	r2, [pc, #376]	; (8009548 <USB_EPStartXfer+0xe58>)
 80093d0:	4313      	orrs	r3, r2
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	187b      	adds	r3, r7, r1
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	801a      	strh	r2, [r3, #0]
 80093da:	e05d      	b.n	8009498 <USB_EPStartXfer+0xda8>
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	2b3e      	cmp	r3, #62	; 0x3e
 80093e2:	d81a      	bhi.n	800941a <USB_EPStartXfer+0xd2a>
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	085b      	lsrs	r3, r3, #1
 80093ea:	21e0      	movs	r1, #224	; 0xe0
 80093ec:	187a      	adds	r2, r7, r1
 80093ee:	6013      	str	r3, [r2, #0]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	2201      	movs	r2, #1
 80093f6:	4013      	ands	r3, r2
 80093f8:	d004      	beq.n	8009404 <USB_EPStartXfer+0xd14>
 80093fa:	187b      	adds	r3, r7, r1
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	3301      	adds	r3, #1
 8009400:	187a      	adds	r2, r7, r1
 8009402:	6013      	str	r3, [r2, #0]
 8009404:	23e0      	movs	r3, #224	; 0xe0
 8009406:	18fb      	adds	r3, r7, r3
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	b29b      	uxth	r3, r3
 800940c:	029b      	lsls	r3, r3, #10
 800940e:	b29a      	uxth	r2, r3
 8009410:	2398      	movs	r3, #152	; 0x98
 8009412:	18fb      	adds	r3, r7, r3
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	801a      	strh	r2, [r3, #0]
 8009418:	e03e      	b.n	8009498 <USB_EPStartXfer+0xda8>
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	095b      	lsrs	r3, r3, #5
 8009420:	21e0      	movs	r1, #224	; 0xe0
 8009422:	187a      	adds	r2, r7, r1
 8009424:	6013      	str	r3, [r2, #0]
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	221f      	movs	r2, #31
 800942c:	4013      	ands	r3, r2
 800942e:	d104      	bne.n	800943a <USB_EPStartXfer+0xd4a>
 8009430:	187b      	adds	r3, r7, r1
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	3b01      	subs	r3, #1
 8009436:	187a      	adds	r2, r7, r1
 8009438:	6013      	str	r3, [r2, #0]
 800943a:	23e0      	movs	r3, #224	; 0xe0
 800943c:	18fb      	adds	r3, r7, r3
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	b29b      	uxth	r3, r3
 8009442:	029b      	lsls	r3, r3, #10
 8009444:	b29b      	uxth	r3, r3
 8009446:	4a40      	ldr	r2, [pc, #256]	; (8009548 <USB_EPStartXfer+0xe58>)
 8009448:	4313      	orrs	r3, r2
 800944a:	b29a      	uxth	r2, r3
 800944c:	2398      	movs	r3, #152	; 0x98
 800944e:	18fb      	adds	r3, r7, r3
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	801a      	strh	r2, [r3, #0]
 8009454:	e020      	b.n	8009498 <USB_EPStartXfer+0xda8>
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	785b      	ldrb	r3, [r3, #1]
 800945a:	2b01      	cmp	r3, #1
 800945c:	d11c      	bne.n	8009498 <USB_EPStartXfer+0xda8>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2250      	movs	r2, #80	; 0x50
 8009462:	5a9b      	ldrh	r3, [r3, r2]
 8009464:	b29b      	uxth	r3, r3
 8009466:	001a      	movs	r2, r3
 8009468:	21a4      	movs	r1, #164	; 0xa4
 800946a:	187b      	adds	r3, r7, r1
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	189b      	adds	r3, r3, r2
 8009470:	187a      	adds	r2, r7, r1
 8009472:	6013      	str	r3, [r2, #0]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	00da      	lsls	r2, r3, #3
 800947a:	187b      	adds	r3, r7, r1
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	18d3      	adds	r3, r2, r3
 8009480:	4a34      	ldr	r2, [pc, #208]	; (8009554 <USB_EPStartXfer+0xe64>)
 8009482:	4694      	mov	ip, r2
 8009484:	4463      	add	r3, ip
 8009486:	21a0      	movs	r1, #160	; 0xa0
 8009488:	187a      	adds	r2, r7, r1
 800948a:	6013      	str	r3, [r2, #0]
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	691b      	ldr	r3, [r3, #16]
 8009490:	b29a      	uxth	r2, r3
 8009492:	187b      	adds	r3, r7, r1
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	69db      	ldr	r3, [r3, #28]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d100      	bne.n	80094a2 <USB_EPStartXfer+0xdb2>
 80094a0:	e1aa      	b.n	80097f8 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	18d2      	adds	r2, r2, r3
 80094ac:	2196      	movs	r1, #150	; 0x96
 80094ae:	187b      	adds	r3, r7, r1
 80094b0:	8812      	ldrh	r2, [r2, #0]
 80094b2:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80094b4:	187b      	adds	r3, r7, r1
 80094b6:	881a      	ldrh	r2, [r3, #0]
 80094b8:	2380      	movs	r3, #128	; 0x80
 80094ba:	01db      	lsls	r3, r3, #7
 80094bc:	4013      	ands	r3, r2
 80094be:	d004      	beq.n	80094ca <USB_EPStartXfer+0xdda>
 80094c0:	187b      	adds	r3, r7, r1
 80094c2:	881b      	ldrh	r3, [r3, #0]
 80094c4:	2240      	movs	r2, #64	; 0x40
 80094c6:	4013      	ands	r3, r2
 80094c8:	d10d      	bne.n	80094e6 <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80094ca:	2196      	movs	r1, #150	; 0x96
 80094cc:	187b      	adds	r3, r7, r1
 80094ce:	881a      	ldrh	r2, [r3, #0]
 80094d0:	2380      	movs	r3, #128	; 0x80
 80094d2:	01db      	lsls	r3, r3, #7
 80094d4:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80094d6:	d000      	beq.n	80094da <USB_EPStartXfer+0xdea>
 80094d8:	e18e      	b.n	80097f8 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80094da:	187b      	adds	r3, r7, r1
 80094dc:	881b      	ldrh	r3, [r3, #0]
 80094de:	2240      	movs	r2, #64	; 0x40
 80094e0:	4013      	ands	r3, r2
 80094e2:	d000      	beq.n	80094e6 <USB_EPStartXfer+0xdf6>
 80094e4:	e188      	b.n	80097f8 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	18d3      	adds	r3, r2, r3
 80094f0:	881b      	ldrh	r3, [r3, #0]
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	2094      	movs	r0, #148	; 0x94
 80094f6:	183b      	adds	r3, r7, r0
 80094f8:	4917      	ldr	r1, [pc, #92]	; (8009558 <USB_EPStartXfer+0xe68>)
 80094fa:	400a      	ands	r2, r1
 80094fc:	801a      	strh	r2, [r3, #0]
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	18d3      	adds	r3, r2, r3
 8009508:	183a      	adds	r2, r7, r0
 800950a:	8812      	ldrh	r2, [r2, #0]
 800950c:	4913      	ldr	r1, [pc, #76]	; (800955c <USB_EPStartXfer+0xe6c>)
 800950e:	430a      	orrs	r2, r1
 8009510:	b292      	uxth	r2, r2
 8009512:	801a      	strh	r2, [r3, #0]
 8009514:	e170      	b.n	80097f8 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	78db      	ldrb	r3, [r3, #3]
 800951a:	2b01      	cmp	r3, #1
 800951c:	d000      	beq.n	8009520 <USB_EPStartXfer+0xe30>
 800951e:	e169      	b.n	80097f4 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	699a      	ldr	r2, [r3, #24]
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	691b      	ldr	r3, [r3, #16]
 8009528:	429a      	cmp	r2, r3
 800952a:	d919      	bls.n	8009560 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	691b      	ldr	r3, [r3, #16]
 8009530:	1d7a      	adds	r2, r7, #5
 8009532:	32ff      	adds	r2, #255	; 0xff
 8009534:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	699a      	ldr	r2, [r3, #24]
 800953a:	1d7b      	adds	r3, r7, #5
 800953c:	33ff      	adds	r3, #255	; 0xff
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	1ad2      	subs	r2, r2, r3
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	619a      	str	r2, [r3, #24]
 8009546:	e013      	b.n	8009570 <USB_EPStartXfer+0xe80>
 8009548:	ffff8000 	.word	0xffff8000
 800954c:	00000402 	.word	0x00000402
 8009550:	ffff83ff 	.word	0xffff83ff
 8009554:	00000406 	.word	0x00000406
 8009558:	ffff8f8f 	.word	0xffff8f8f
 800955c:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	699b      	ldr	r3, [r3, #24]
 8009564:	1d7a      	adds	r2, r7, #5
 8009566:	32ff      	adds	r2, #255	; 0xff
 8009568:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	2200      	movs	r2, #0
 800956e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	785b      	ldrb	r3, [r3, #1]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d000      	beq.n	800957a <USB_EPStartXfer+0xe8a>
 8009578:	e075      	b.n	8009666 <USB_EPStartXfer+0xf76>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	21cc      	movs	r1, #204	; 0xcc
 800957e:	187a      	adds	r2, r7, r1
 8009580:	6013      	str	r3, [r2, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2250      	movs	r2, #80	; 0x50
 8009586:	5a9b      	ldrh	r3, [r3, r2]
 8009588:	b29b      	uxth	r3, r3
 800958a:	001a      	movs	r2, r3
 800958c:	187b      	adds	r3, r7, r1
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	189b      	adds	r3, r3, r2
 8009592:	187a      	adds	r2, r7, r1
 8009594:	6013      	str	r3, [r2, #0]
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	00da      	lsls	r2, r3, #3
 800959c:	187b      	adds	r3, r7, r1
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	18d3      	adds	r3, r2, r3
 80095a2:	4aaa      	ldr	r2, [pc, #680]	; (800984c <USB_EPStartXfer+0x115c>)
 80095a4:	4694      	mov	ip, r2
 80095a6:	4463      	add	r3, ip
 80095a8:	21c8      	movs	r1, #200	; 0xc8
 80095aa:	187a      	adds	r2, r7, r1
 80095ac:	6013      	str	r3, [r2, #0]
 80095ae:	1d7b      	adds	r3, r7, #5
 80095b0:	33ff      	adds	r3, #255	; 0xff
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d114      	bne.n	80095e2 <USB_EPStartXfer+0xef2>
 80095b8:	187b      	adds	r3, r7, r1
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	881b      	ldrh	r3, [r3, #0]
 80095be:	b29b      	uxth	r3, r3
 80095c0:	4aa3      	ldr	r2, [pc, #652]	; (8009850 <USB_EPStartXfer+0x1160>)
 80095c2:	4013      	ands	r3, r2
 80095c4:	b29a      	uxth	r2, r3
 80095c6:	187b      	adds	r3, r7, r1
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	801a      	strh	r2, [r3, #0]
 80095cc:	187b      	adds	r3, r7, r1
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	881b      	ldrh	r3, [r3, #0]
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	4a9f      	ldr	r2, [pc, #636]	; (8009854 <USB_EPStartXfer+0x1164>)
 80095d6:	4313      	orrs	r3, r2
 80095d8:	b29a      	uxth	r2, r3
 80095da:	187b      	adds	r3, r7, r1
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	801a      	strh	r2, [r3, #0]
 80095e0:	e066      	b.n	80096b0 <USB_EPStartXfer+0xfc0>
 80095e2:	1d7b      	adds	r3, r7, #5
 80095e4:	33ff      	adds	r3, #255	; 0xff
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	2b3e      	cmp	r3, #62	; 0x3e
 80095ea:	d81c      	bhi.n	8009626 <USB_EPStartXfer+0xf36>
 80095ec:	1d7b      	adds	r3, r7, #5
 80095ee:	33ff      	adds	r3, #255	; 0xff
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	085b      	lsrs	r3, r3, #1
 80095f4:	21dc      	movs	r1, #220	; 0xdc
 80095f6:	187a      	adds	r2, r7, r1
 80095f8:	6013      	str	r3, [r2, #0]
 80095fa:	1d7b      	adds	r3, r7, #5
 80095fc:	33ff      	adds	r3, #255	; 0xff
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2201      	movs	r2, #1
 8009602:	4013      	ands	r3, r2
 8009604:	d004      	beq.n	8009610 <USB_EPStartXfer+0xf20>
 8009606:	187b      	adds	r3, r7, r1
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	3301      	adds	r3, #1
 800960c:	187a      	adds	r2, r7, r1
 800960e:	6013      	str	r3, [r2, #0]
 8009610:	23dc      	movs	r3, #220	; 0xdc
 8009612:	18fb      	adds	r3, r7, r3
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	b29b      	uxth	r3, r3
 8009618:	029b      	lsls	r3, r3, #10
 800961a:	b29a      	uxth	r2, r3
 800961c:	23c8      	movs	r3, #200	; 0xc8
 800961e:	18fb      	adds	r3, r7, r3
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	801a      	strh	r2, [r3, #0]
 8009624:	e044      	b.n	80096b0 <USB_EPStartXfer+0xfc0>
 8009626:	1d7b      	adds	r3, r7, #5
 8009628:	33ff      	adds	r3, #255	; 0xff
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	095b      	lsrs	r3, r3, #5
 800962e:	21dc      	movs	r1, #220	; 0xdc
 8009630:	187a      	adds	r2, r7, r1
 8009632:	6013      	str	r3, [r2, #0]
 8009634:	1d7b      	adds	r3, r7, #5
 8009636:	33ff      	adds	r3, #255	; 0xff
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	221f      	movs	r2, #31
 800963c:	4013      	ands	r3, r2
 800963e:	d104      	bne.n	800964a <USB_EPStartXfer+0xf5a>
 8009640:	187b      	adds	r3, r7, r1
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	3b01      	subs	r3, #1
 8009646:	187a      	adds	r2, r7, r1
 8009648:	6013      	str	r3, [r2, #0]
 800964a:	23dc      	movs	r3, #220	; 0xdc
 800964c:	18fb      	adds	r3, r7, r3
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	b29b      	uxth	r3, r3
 8009652:	029b      	lsls	r3, r3, #10
 8009654:	b29b      	uxth	r3, r3
 8009656:	4a7f      	ldr	r2, [pc, #508]	; (8009854 <USB_EPStartXfer+0x1164>)
 8009658:	4313      	orrs	r3, r2
 800965a:	b29a      	uxth	r2, r3
 800965c:	23c8      	movs	r3, #200	; 0xc8
 800965e:	18fb      	adds	r3, r7, r3
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	801a      	strh	r2, [r3, #0]
 8009664:	e024      	b.n	80096b0 <USB_EPStartXfer+0xfc0>
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	785b      	ldrb	r3, [r3, #1]
 800966a:	2b01      	cmp	r3, #1
 800966c:	d120      	bne.n	80096b0 <USB_EPStartXfer+0xfc0>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	21d4      	movs	r1, #212	; 0xd4
 8009672:	187a      	adds	r2, r7, r1
 8009674:	6013      	str	r3, [r2, #0]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2250      	movs	r2, #80	; 0x50
 800967a:	5a9b      	ldrh	r3, [r3, r2]
 800967c:	b29b      	uxth	r3, r3
 800967e:	001a      	movs	r2, r3
 8009680:	187b      	adds	r3, r7, r1
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	189b      	adds	r3, r3, r2
 8009686:	187a      	adds	r2, r7, r1
 8009688:	6013      	str	r3, [r2, #0]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	00da      	lsls	r2, r3, #3
 8009690:	187b      	adds	r3, r7, r1
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	18d3      	adds	r3, r2, r3
 8009696:	4a6d      	ldr	r2, [pc, #436]	; (800984c <USB_EPStartXfer+0x115c>)
 8009698:	4694      	mov	ip, r2
 800969a:	4463      	add	r3, ip
 800969c:	21d0      	movs	r1, #208	; 0xd0
 800969e:	187a      	adds	r2, r7, r1
 80096a0:	6013      	str	r3, [r2, #0]
 80096a2:	1d7b      	adds	r3, r7, #5
 80096a4:	33ff      	adds	r3, #255	; 0xff
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	187b      	adds	r3, r7, r1
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	801a      	strh	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	22c4      	movs	r2, #196	; 0xc4
 80096b4:	18ba      	adds	r2, r7, r2
 80096b6:	6013      	str	r3, [r2, #0]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	785b      	ldrb	r3, [r3, #1]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d000      	beq.n	80096c2 <USB_EPStartXfer+0xfd2>
 80096c0:	e075      	b.n	80097ae <USB_EPStartXfer+0x10be>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	21bc      	movs	r1, #188	; 0xbc
 80096c6:	187a      	adds	r2, r7, r1
 80096c8:	6013      	str	r3, [r2, #0]
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2250      	movs	r2, #80	; 0x50
 80096ce:	5a9b      	ldrh	r3, [r3, r2]
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	001a      	movs	r2, r3
 80096d4:	187b      	adds	r3, r7, r1
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	189b      	adds	r3, r3, r2
 80096da:	187a      	adds	r2, r7, r1
 80096dc:	6013      	str	r3, [r2, #0]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	00da      	lsls	r2, r3, #3
 80096e4:	187b      	adds	r3, r7, r1
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	18d3      	adds	r3, r2, r3
 80096ea:	4a5b      	ldr	r2, [pc, #364]	; (8009858 <USB_EPStartXfer+0x1168>)
 80096ec:	4694      	mov	ip, r2
 80096ee:	4463      	add	r3, ip
 80096f0:	21b8      	movs	r1, #184	; 0xb8
 80096f2:	187a      	adds	r2, r7, r1
 80096f4:	6013      	str	r3, [r2, #0]
 80096f6:	1d7b      	adds	r3, r7, #5
 80096f8:	33ff      	adds	r3, #255	; 0xff
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d114      	bne.n	800972a <USB_EPStartXfer+0x103a>
 8009700:	187b      	adds	r3, r7, r1
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	881b      	ldrh	r3, [r3, #0]
 8009706:	b29b      	uxth	r3, r3
 8009708:	4a51      	ldr	r2, [pc, #324]	; (8009850 <USB_EPStartXfer+0x1160>)
 800970a:	4013      	ands	r3, r2
 800970c:	b29a      	uxth	r2, r3
 800970e:	187b      	adds	r3, r7, r1
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	801a      	strh	r2, [r3, #0]
 8009714:	187b      	adds	r3, r7, r1
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	881b      	ldrh	r3, [r3, #0]
 800971a:	b29b      	uxth	r3, r3
 800971c:	4a4d      	ldr	r2, [pc, #308]	; (8009854 <USB_EPStartXfer+0x1164>)
 800971e:	4313      	orrs	r3, r2
 8009720:	b29a      	uxth	r2, r3
 8009722:	187b      	adds	r3, r7, r1
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	801a      	strh	r2, [r3, #0]
 8009728:	e066      	b.n	80097f8 <USB_EPStartXfer+0x1108>
 800972a:	1d7b      	adds	r3, r7, #5
 800972c:	33ff      	adds	r3, #255	; 0xff
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b3e      	cmp	r3, #62	; 0x3e
 8009732:	d81c      	bhi.n	800976e <USB_EPStartXfer+0x107e>
 8009734:	1d7b      	adds	r3, r7, #5
 8009736:	33ff      	adds	r3, #255	; 0xff
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	085b      	lsrs	r3, r3, #1
 800973c:	21d8      	movs	r1, #216	; 0xd8
 800973e:	187a      	adds	r2, r7, r1
 8009740:	6013      	str	r3, [r2, #0]
 8009742:	1d7b      	adds	r3, r7, #5
 8009744:	33ff      	adds	r3, #255	; 0xff
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2201      	movs	r2, #1
 800974a:	4013      	ands	r3, r2
 800974c:	d004      	beq.n	8009758 <USB_EPStartXfer+0x1068>
 800974e:	187b      	adds	r3, r7, r1
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	3301      	adds	r3, #1
 8009754:	187a      	adds	r2, r7, r1
 8009756:	6013      	str	r3, [r2, #0]
 8009758:	23d8      	movs	r3, #216	; 0xd8
 800975a:	18fb      	adds	r3, r7, r3
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	b29b      	uxth	r3, r3
 8009760:	029b      	lsls	r3, r3, #10
 8009762:	b29a      	uxth	r2, r3
 8009764:	23b8      	movs	r3, #184	; 0xb8
 8009766:	18fb      	adds	r3, r7, r3
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	801a      	strh	r2, [r3, #0]
 800976c:	e044      	b.n	80097f8 <USB_EPStartXfer+0x1108>
 800976e:	1d7b      	adds	r3, r7, #5
 8009770:	33ff      	adds	r3, #255	; 0xff
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	095b      	lsrs	r3, r3, #5
 8009776:	21d8      	movs	r1, #216	; 0xd8
 8009778:	187a      	adds	r2, r7, r1
 800977a:	6013      	str	r3, [r2, #0]
 800977c:	1d7b      	adds	r3, r7, #5
 800977e:	33ff      	adds	r3, #255	; 0xff
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	221f      	movs	r2, #31
 8009784:	4013      	ands	r3, r2
 8009786:	d104      	bne.n	8009792 <USB_EPStartXfer+0x10a2>
 8009788:	187b      	adds	r3, r7, r1
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	3b01      	subs	r3, #1
 800978e:	187a      	adds	r2, r7, r1
 8009790:	6013      	str	r3, [r2, #0]
 8009792:	23d8      	movs	r3, #216	; 0xd8
 8009794:	18fb      	adds	r3, r7, r3
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	b29b      	uxth	r3, r3
 800979a:	029b      	lsls	r3, r3, #10
 800979c:	b29b      	uxth	r3, r3
 800979e:	4a2d      	ldr	r2, [pc, #180]	; (8009854 <USB_EPStartXfer+0x1164>)
 80097a0:	4313      	orrs	r3, r2
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	23b8      	movs	r3, #184	; 0xb8
 80097a6:	18fb      	adds	r3, r7, r3
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	801a      	strh	r2, [r3, #0]
 80097ac:	e024      	b.n	80097f8 <USB_EPStartXfer+0x1108>
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	785b      	ldrb	r3, [r3, #1]
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d120      	bne.n	80097f8 <USB_EPStartXfer+0x1108>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2250      	movs	r2, #80	; 0x50
 80097ba:	5a9b      	ldrh	r3, [r3, r2]
 80097bc:	b29b      	uxth	r3, r3
 80097be:	001a      	movs	r2, r3
 80097c0:	21c4      	movs	r1, #196	; 0xc4
 80097c2:	187b      	adds	r3, r7, r1
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	189b      	adds	r3, r3, r2
 80097c8:	187a      	adds	r2, r7, r1
 80097ca:	6013      	str	r3, [r2, #0]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	00da      	lsls	r2, r3, #3
 80097d2:	187b      	adds	r3, r7, r1
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	18d3      	adds	r3, r2, r3
 80097d8:	4a1f      	ldr	r2, [pc, #124]	; (8009858 <USB_EPStartXfer+0x1168>)
 80097da:	4694      	mov	ip, r2
 80097dc:	4463      	add	r3, ip
 80097de:	21c0      	movs	r1, #192	; 0xc0
 80097e0:	187a      	adds	r2, r7, r1
 80097e2:	6013      	str	r3, [r2, #0]
 80097e4:	1d7b      	adds	r3, r7, #5
 80097e6:	33ff      	adds	r3, #255	; 0xff
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	b29a      	uxth	r2, r3
 80097ec:	187b      	adds	r3, r7, r1
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	801a      	strh	r2, [r3, #0]
 80097f2:	e001      	b.n	80097f8 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	e025      	b.n	8009844 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	18d3      	adds	r3, r2, r3
 8009802:	881b      	ldrh	r3, [r3, #0]
 8009804:	b29a      	uxth	r2, r3
 8009806:	208a      	movs	r0, #138	; 0x8a
 8009808:	183b      	adds	r3, r7, r0
 800980a:	4914      	ldr	r1, [pc, #80]	; (800985c <USB_EPStartXfer+0x116c>)
 800980c:	400a      	ands	r2, r1
 800980e:	801a      	strh	r2, [r3, #0]
 8009810:	183b      	adds	r3, r7, r0
 8009812:	183a      	adds	r2, r7, r0
 8009814:	8812      	ldrh	r2, [r2, #0]
 8009816:	2180      	movs	r1, #128	; 0x80
 8009818:	0149      	lsls	r1, r1, #5
 800981a:	404a      	eors	r2, r1
 800981c:	801a      	strh	r2, [r3, #0]
 800981e:	183b      	adds	r3, r7, r0
 8009820:	183a      	adds	r2, r7, r0
 8009822:	8812      	ldrh	r2, [r2, #0]
 8009824:	2180      	movs	r1, #128	; 0x80
 8009826:	0189      	lsls	r1, r1, #6
 8009828:	404a      	eors	r2, r1
 800982a:	801a      	strh	r2, [r3, #0]
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	18d3      	adds	r3, r2, r3
 8009836:	183a      	adds	r2, r7, r0
 8009838:	8812      	ldrh	r2, [r2, #0]
 800983a:	4909      	ldr	r1, [pc, #36]	; (8009860 <USB_EPStartXfer+0x1170>)
 800983c:	430a      	orrs	r2, r1
 800983e:	b292      	uxth	r2, r2
 8009840:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	0018      	movs	r0, r3
 8009846:	46bd      	mov	sp, r7
 8009848:	b043      	add	sp, #268	; 0x10c
 800984a:	bd90      	pop	{r4, r7, pc}
 800984c:	00000402 	.word	0x00000402
 8009850:	ffff83ff 	.word	0xffff83ff
 8009854:	ffff8000 	.word	0xffff8000
 8009858:	00000406 	.word	0x00000406
 800985c:	ffffbf8f 	.word	0xffffbf8f
 8009860:	ffff8080 	.word	0xffff8080

08009864 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	785b      	ldrb	r3, [r3, #1]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d01d      	beq.n	80098b2 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	18d3      	adds	r3, r2, r3
 8009880:	881b      	ldrh	r3, [r3, #0]
 8009882:	b29a      	uxth	r2, r3
 8009884:	200c      	movs	r0, #12
 8009886:	183b      	adds	r3, r7, r0
 8009888:	491b      	ldr	r1, [pc, #108]	; (80098f8 <USB_EPSetStall+0x94>)
 800988a:	400a      	ands	r2, r1
 800988c:	801a      	strh	r2, [r3, #0]
 800988e:	183b      	adds	r3, r7, r0
 8009890:	183a      	adds	r2, r7, r0
 8009892:	8812      	ldrh	r2, [r2, #0]
 8009894:	2110      	movs	r1, #16
 8009896:	404a      	eors	r2, r1
 8009898:	801a      	strh	r2, [r3, #0]
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	781b      	ldrb	r3, [r3, #0]
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	18d3      	adds	r3, r2, r3
 80098a4:	183a      	adds	r2, r7, r0
 80098a6:	8812      	ldrh	r2, [r2, #0]
 80098a8:	4914      	ldr	r1, [pc, #80]	; (80098fc <USB_EPSetStall+0x98>)
 80098aa:	430a      	orrs	r2, r1
 80098ac:	b292      	uxth	r2, r2
 80098ae:	801a      	strh	r2, [r3, #0]
 80098b0:	e01d      	b.n	80098ee <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	18d3      	adds	r3, r2, r3
 80098bc:	881b      	ldrh	r3, [r3, #0]
 80098be:	b29a      	uxth	r2, r3
 80098c0:	200e      	movs	r0, #14
 80098c2:	183b      	adds	r3, r7, r0
 80098c4:	490e      	ldr	r1, [pc, #56]	; (8009900 <USB_EPSetStall+0x9c>)
 80098c6:	400a      	ands	r2, r1
 80098c8:	801a      	strh	r2, [r3, #0]
 80098ca:	183b      	adds	r3, r7, r0
 80098cc:	183a      	adds	r2, r7, r0
 80098ce:	8812      	ldrh	r2, [r2, #0]
 80098d0:	2180      	movs	r1, #128	; 0x80
 80098d2:	0149      	lsls	r1, r1, #5
 80098d4:	404a      	eors	r2, r1
 80098d6:	801a      	strh	r2, [r3, #0]
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	18d3      	adds	r3, r2, r3
 80098e2:	183a      	adds	r2, r7, r0
 80098e4:	8812      	ldrh	r2, [r2, #0]
 80098e6:	4905      	ldr	r1, [pc, #20]	; (80098fc <USB_EPSetStall+0x98>)
 80098e8:	430a      	orrs	r2, r1
 80098ea:	b292      	uxth	r2, r2
 80098ec:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	0018      	movs	r0, r3
 80098f2:	46bd      	mov	sp, r7
 80098f4:	b004      	add	sp, #16
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	ffff8fbf 	.word	0xffff8fbf
 80098fc:	ffff8080 	.word	0xffff8080
 8009900:	ffffbf8f 	.word	0xffffbf8f

08009904 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b086      	sub	sp, #24
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	7b1b      	ldrb	r3, [r3, #12]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d000      	beq.n	8009918 <USB_EPClearStall+0x14>
 8009916:	e095      	b.n	8009a44 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	785b      	ldrb	r3, [r3, #1]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d046      	beq.n	80099ae <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	18d2      	adds	r2, r2, r3
 800992a:	2110      	movs	r1, #16
 800992c:	187b      	adds	r3, r7, r1
 800992e:	8812      	ldrh	r2, [r2, #0]
 8009930:	801a      	strh	r2, [r3, #0]
 8009932:	187b      	adds	r3, r7, r1
 8009934:	881b      	ldrh	r3, [r3, #0]
 8009936:	2240      	movs	r2, #64	; 0x40
 8009938:	4013      	ands	r3, r2
 800993a:	d016      	beq.n	800996a <USB_EPClearStall+0x66>
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	18d3      	adds	r3, r2, r3
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	b29a      	uxth	r2, r3
 800994a:	200e      	movs	r0, #14
 800994c:	183b      	adds	r3, r7, r0
 800994e:	4940      	ldr	r1, [pc, #256]	; (8009a50 <USB_EPClearStall+0x14c>)
 8009950:	400a      	ands	r2, r1
 8009952:	801a      	strh	r2, [r3, #0]
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	18d3      	adds	r3, r2, r3
 800995e:	183a      	adds	r2, r7, r0
 8009960:	8812      	ldrh	r2, [r2, #0]
 8009962:	493c      	ldr	r1, [pc, #240]	; (8009a54 <USB_EPClearStall+0x150>)
 8009964:	430a      	orrs	r2, r1
 8009966:	b292      	uxth	r2, r2
 8009968:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	78db      	ldrb	r3, [r3, #3]
 800996e:	2b01      	cmp	r3, #1
 8009970:	d068      	beq.n	8009a44 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	18d3      	adds	r3, r2, r3
 800997c:	881b      	ldrh	r3, [r3, #0]
 800997e:	b29a      	uxth	r2, r3
 8009980:	200c      	movs	r0, #12
 8009982:	183b      	adds	r3, r7, r0
 8009984:	4934      	ldr	r1, [pc, #208]	; (8009a58 <USB_EPClearStall+0x154>)
 8009986:	400a      	ands	r2, r1
 8009988:	801a      	strh	r2, [r3, #0]
 800998a:	183b      	adds	r3, r7, r0
 800998c:	183a      	adds	r2, r7, r0
 800998e:	8812      	ldrh	r2, [r2, #0]
 8009990:	2120      	movs	r1, #32
 8009992:	404a      	eors	r2, r1
 8009994:	801a      	strh	r2, [r3, #0]
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	18d3      	adds	r3, r2, r3
 80099a0:	183a      	adds	r2, r7, r0
 80099a2:	8812      	ldrh	r2, [r2, #0]
 80099a4:	492d      	ldr	r1, [pc, #180]	; (8009a5c <USB_EPClearStall+0x158>)
 80099a6:	430a      	orrs	r2, r1
 80099a8:	b292      	uxth	r2, r2
 80099aa:	801a      	strh	r2, [r3, #0]
 80099ac:	e04a      	b.n	8009a44 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	18d2      	adds	r2, r2, r3
 80099b8:	2116      	movs	r1, #22
 80099ba:	187b      	adds	r3, r7, r1
 80099bc:	8812      	ldrh	r2, [r2, #0]
 80099be:	801a      	strh	r2, [r3, #0]
 80099c0:	187b      	adds	r3, r7, r1
 80099c2:	881a      	ldrh	r2, [r3, #0]
 80099c4:	2380      	movs	r3, #128	; 0x80
 80099c6:	01db      	lsls	r3, r3, #7
 80099c8:	4013      	ands	r3, r2
 80099ca:	d016      	beq.n	80099fa <USB_EPClearStall+0xf6>
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	009b      	lsls	r3, r3, #2
 80099d4:	18d3      	adds	r3, r2, r3
 80099d6:	881b      	ldrh	r3, [r3, #0]
 80099d8:	b29a      	uxth	r2, r3
 80099da:	2014      	movs	r0, #20
 80099dc:	183b      	adds	r3, r7, r0
 80099de:	491c      	ldr	r1, [pc, #112]	; (8009a50 <USB_EPClearStall+0x14c>)
 80099e0:	400a      	ands	r2, r1
 80099e2:	801a      	strh	r2, [r3, #0]
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	18d3      	adds	r3, r2, r3
 80099ee:	183a      	adds	r2, r7, r0
 80099f0:	8812      	ldrh	r2, [r2, #0]
 80099f2:	491b      	ldr	r1, [pc, #108]	; (8009a60 <USB_EPClearStall+0x15c>)
 80099f4:	430a      	orrs	r2, r1
 80099f6:	b292      	uxth	r2, r2
 80099f8:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	18d3      	adds	r3, r2, r3
 8009a04:	881b      	ldrh	r3, [r3, #0]
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	2012      	movs	r0, #18
 8009a0a:	183b      	adds	r3, r7, r0
 8009a0c:	4915      	ldr	r1, [pc, #84]	; (8009a64 <USB_EPClearStall+0x160>)
 8009a0e:	400a      	ands	r2, r1
 8009a10:	801a      	strh	r2, [r3, #0]
 8009a12:	183b      	adds	r3, r7, r0
 8009a14:	183a      	adds	r2, r7, r0
 8009a16:	8812      	ldrh	r2, [r2, #0]
 8009a18:	2180      	movs	r1, #128	; 0x80
 8009a1a:	0149      	lsls	r1, r1, #5
 8009a1c:	404a      	eors	r2, r1
 8009a1e:	801a      	strh	r2, [r3, #0]
 8009a20:	183b      	adds	r3, r7, r0
 8009a22:	183a      	adds	r2, r7, r0
 8009a24:	8812      	ldrh	r2, [r2, #0]
 8009a26:	2180      	movs	r1, #128	; 0x80
 8009a28:	0189      	lsls	r1, r1, #6
 8009a2a:	404a      	eors	r2, r1
 8009a2c:	801a      	strh	r2, [r3, #0]
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	18d3      	adds	r3, r2, r3
 8009a38:	183a      	adds	r2, r7, r0
 8009a3a:	8812      	ldrh	r2, [r2, #0]
 8009a3c:	4907      	ldr	r1, [pc, #28]	; (8009a5c <USB_EPClearStall+0x158>)
 8009a3e:	430a      	orrs	r2, r1
 8009a40:	b292      	uxth	r2, r2
 8009a42:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	0018      	movs	r0, r3
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	b006      	add	sp, #24
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	46c0      	nop			; (mov r8, r8)
 8009a50:	ffff8f8f 	.word	0xffff8f8f
 8009a54:	ffff80c0 	.word	0xffff80c0
 8009a58:	ffff8fbf 	.word	0xffff8fbf
 8009a5c:	ffff8080 	.word	0xffff8080
 8009a60:	ffffc080 	.word	0xffffc080
 8009a64:	ffffbf8f 	.word	0xffffbf8f

08009a68 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	000a      	movs	r2, r1
 8009a72:	1cfb      	adds	r3, r7, #3
 8009a74:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8009a76:	1cfb      	adds	r3, r7, #3
 8009a78:	781b      	ldrb	r3, [r3, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d103      	bne.n	8009a86 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	224c      	movs	r2, #76	; 0x4c
 8009a82:	2180      	movs	r1, #128	; 0x80
 8009a84:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8009a86:	2300      	movs	r3, #0
}
 8009a88:	0018      	movs	r0, r3
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	b002      	add	sp, #8
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2258      	movs	r2, #88	; 0x58
 8009a9c:	5a9b      	ldrh	r3, [r3, r2]
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	4a05      	ldr	r2, [pc, #20]	; (8009ab8 <USB_DevConnect+0x28>)
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	b299      	uxth	r1, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2258      	movs	r2, #88	; 0x58
 8009aaa:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8009aac:	2300      	movs	r3, #0
}
 8009aae:	0018      	movs	r0, r3
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	b002      	add	sp, #8
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	46c0      	nop			; (mov r8, r8)
 8009ab8:	ffff8000 	.word	0xffff8000

08009abc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2244      	movs	r2, #68	; 0x44
 8009ac8:	5a9b      	ldrh	r3, [r3, r2]
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009ace:	68fb      	ldr	r3, [r7, #12]
}
 8009ad0:	0018      	movs	r0, r3
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	b004      	add	sp, #16
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b08c      	sub	sp, #48	; 0x30
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	0019      	movs	r1, r3
 8009ae4:	1dbb      	adds	r3, r7, #6
 8009ae6:	801a      	strh	r2, [r3, #0]
 8009ae8:	1d3b      	adds	r3, r7, #4
 8009aea:	1c0a      	adds	r2, r1, #0
 8009aec:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009aee:	1d3b      	adds	r3, r7, #4
 8009af0:	881b      	ldrh	r3, [r3, #0]
 8009af2:	3301      	adds	r3, #1
 8009af4:	085b      	lsrs	r3, r3, #1
 8009af6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b00:	1dbb      	adds	r3, r7, #6
 8009b02:	881a      	ldrh	r2, [r3, #0]
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	18d3      	adds	r3, r2, r3
 8009b08:	2280      	movs	r2, #128	; 0x80
 8009b0a:	00d2      	lsls	r2, r2, #3
 8009b0c:	4694      	mov	ip, r2
 8009b0e:	4463      	add	r3, ip
 8009b10:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009b12:	6a3b      	ldr	r3, [r7, #32]
 8009b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b16:	e01b      	b.n	8009b50 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8009b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b20:	3301      	adds	r3, #1
 8009b22:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	021b      	lsls	r3, r3, #8
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	001a      	movs	r2, r3
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b40:	3302      	adds	r3, #2
 8009b42:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8009b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b46:	3301      	adds	r3, #1
 8009b48:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1e0      	bne.n	8009b18 <USB_WritePMA+0x40>
  }
}
 8009b56:	46c0      	nop			; (mov r8, r8)
 8009b58:	46c0      	nop			; (mov r8, r8)
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	b00c      	add	sp, #48	; 0x30
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b08a      	sub	sp, #40	; 0x28
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	60b9      	str	r1, [r7, #8]
 8009b6a:	0019      	movs	r1, r3
 8009b6c:	1dbb      	adds	r3, r7, #6
 8009b6e:	801a      	strh	r2, [r3, #0]
 8009b70:	1d3b      	adds	r3, r7, #4
 8009b72:	1c0a      	adds	r2, r1, #0
 8009b74:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009b76:	1d3b      	adds	r3, r7, #4
 8009b78:	881b      	ldrh	r3, [r3, #0]
 8009b7a:	085b      	lsrs	r3, r3, #1
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009b88:	1dbb      	adds	r3, r7, #6
 8009b8a:	881a      	ldrh	r2, [r3, #0]
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	18d3      	adds	r3, r2, r3
 8009b90:	2280      	movs	r2, #128	; 0x80
 8009b92:	00d2      	lsls	r2, r2, #3
 8009b94:	4694      	mov	ip, r2
 8009b96:	4463      	add	r3, ip
 8009b98:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8009b9e:	e018      	b.n	8009bd2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009ba0:	6a3b      	ldr	r3, [r7, #32]
 8009ba2:	881b      	ldrh	r3, [r3, #0]
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009ba8:	6a3b      	ldr	r3, [r7, #32]
 8009baa:	3302      	adds	r3, #2
 8009bac:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	b2da      	uxtb	r2, r3
 8009bb2:	69fb      	ldr	r3, [r7, #28]
 8009bb4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009bb6:	69fb      	ldr	r3, [r7, #28]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	0a1b      	lsrs	r3, r3, #8
 8009bc0:	b2da      	uxtb	r2, r3
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	3301      	adds	r3, #1
 8009bca:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8009bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1e3      	bne.n	8009ba0 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009bd8:	1d3b      	adds	r3, r7, #4
 8009bda:	881b      	ldrh	r3, [r3, #0]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	4013      	ands	r3, r2
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d007      	beq.n	8009bf6 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8009be6:	6a3b      	ldr	r3, [r7, #32]
 8009be8:	881b      	ldrh	r3, [r3, #0]
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	b2da      	uxtb	r2, r3
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	701a      	strb	r2, [r3, #0]
  }
}
 8009bf6:	46c0      	nop			; (mov r8, r8)
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	b00a      	add	sp, #40	; 0x28
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b084      	sub	sp, #16
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	000a      	movs	r2, r1
 8009c08:	1cfb      	adds	r3, r7, #3
 8009c0a:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8009c0c:	230f      	movs	r3, #15
 8009c0e:	18fb      	adds	r3, r7, r3
 8009c10:	2200      	movs	r2, #0
 8009c12:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	7c1b      	ldrb	r3, [r3, #16]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d116      	bne.n	8009c4a <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c1c:	2380      	movs	r3, #128	; 0x80
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	2202      	movs	r2, #2
 8009c24:	2181      	movs	r1, #129	; 0x81
 8009c26:	f002 f8b4 	bl	800bd92 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c30:	2380      	movs	r3, #128	; 0x80
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	2202      	movs	r2, #2
 8009c38:	2101      	movs	r1, #1
 8009c3a:	f002 f8aa 	bl	800bd92 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	23b6      	movs	r3, #182	; 0xb6
 8009c42:	005b      	lsls	r3, r3, #1
 8009c44:	2101      	movs	r1, #1
 8009c46:	50d1      	str	r1, [r2, r3]
 8009c48:	e013      	b.n	8009c72 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	2340      	movs	r3, #64	; 0x40
 8009c4e:	2202      	movs	r2, #2
 8009c50:	2181      	movs	r1, #129	; 0x81
 8009c52:	f002 f89e 	bl	800bd92 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2201      	movs	r2, #1
 8009c5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	2340      	movs	r3, #64	; 0x40
 8009c60:	2202      	movs	r2, #2
 8009c62:	2101      	movs	r1, #1
 8009c64:	f002 f895 	bl	800bd92 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	23b6      	movs	r3, #182	; 0xb6
 8009c6c:	005b      	lsls	r3, r3, #1
 8009c6e:	2101      	movs	r1, #1
 8009c70:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	2308      	movs	r3, #8
 8009c76:	2203      	movs	r2, #3
 8009c78:	2182      	movs	r1, #130	; 0x82
 8009c7a:	f002 f88a 	bl	800bd92 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2201      	movs	r2, #1
 8009c82:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009c84:	2387      	movs	r3, #135	; 0x87
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	0018      	movs	r0, r3
 8009c8a:	f002 fa1b 	bl	800c0c4 <USBD_static_malloc>
 8009c8e:	0001      	movs	r1, r0
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	23ae      	movs	r3, #174	; 0xae
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	23ae      	movs	r3, #174	; 0xae
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	58d3      	ldr	r3, [r2, r3]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d104      	bne.n	8009cae <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8009ca4:	230f      	movs	r3, #15
 8009ca6:	18fb      	adds	r3, r7, r3
 8009ca8:	2201      	movs	r2, #1
 8009caa:	701a      	strb	r2, [r3, #0]
 8009cac:	e02c      	b.n	8009d08 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	23ae      	movs	r3, #174	; 0xae
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	58d3      	ldr	r3, [r2, r3]
 8009cb6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	23af      	movs	r3, #175	; 0xaf
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	58d3      	ldr	r3, [r2, r3]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009cc4:	68ba      	ldr	r2, [r7, #8]
 8009cc6:	2385      	movs	r3, #133	; 0x85
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	2100      	movs	r1, #0
 8009ccc:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	2386      	movs	r3, #134	; 0x86
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	2100      	movs	r1, #0
 8009cd6:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	7c1b      	ldrb	r3, [r3, #16]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d10a      	bne.n	8009cf6 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009ce0:	68ba      	ldr	r2, [r7, #8]
 8009ce2:	2381      	movs	r3, #129	; 0x81
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	58d2      	ldr	r2, [r2, r3]
 8009ce8:	2380      	movs	r3, #128	; 0x80
 8009cea:	009b      	lsls	r3, r3, #2
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	2101      	movs	r1, #1
 8009cf0:	f002 f99a 	bl	800c028 <USBD_LL_PrepareReceive>
 8009cf4:	e008      	b.n	8009d08 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009cf6:	68ba      	ldr	r2, [r7, #8]
 8009cf8:	2381      	movs	r3, #129	; 0x81
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	58d2      	ldr	r2, [r2, r3]
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	2340      	movs	r3, #64	; 0x40
 8009d02:	2101      	movs	r1, #1
 8009d04:	f002 f990 	bl	800c028 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009d08:	230f      	movs	r3, #15
 8009d0a:	18fb      	adds	r3, r7, r3
 8009d0c:	781b      	ldrb	r3, [r3, #0]
}
 8009d0e:	0018      	movs	r0, r3
 8009d10:	46bd      	mov	sp, r7
 8009d12:	b004      	add	sp, #16
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b084      	sub	sp, #16
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
 8009d1e:	000a      	movs	r2, r1
 8009d20:	1cfb      	adds	r3, r7, #3
 8009d22:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8009d24:	230f      	movs	r3, #15
 8009d26:	18fb      	adds	r3, r7, r3
 8009d28:	2200      	movs	r2, #0
 8009d2a:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2181      	movs	r1, #129	; 0x81
 8009d30:	0018      	movs	r0, r3
 8009d32:	f002 f865 	bl	800be00 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2101      	movs	r1, #1
 8009d40:	0018      	movs	r0, r3
 8009d42:	f002 f85d 	bl	800be00 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	23b6      	movs	r3, #182	; 0xb6
 8009d4a:	005b      	lsls	r3, r3, #1
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2182      	movs	r1, #130	; 0x82
 8009d54:	0018      	movs	r0, r3
 8009d56:	f002 f853 	bl	800be00 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	23ae      	movs	r3, #174	; 0xae
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	58d3      	ldr	r3, [r2, r3]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d011      	beq.n	8009d90 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	23af      	movs	r3, #175	; 0xaf
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	58d3      	ldr	r3, [r2, r3]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	23ae      	movs	r3, #174	; 0xae
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	58d3      	ldr	r3, [r2, r3]
 8009d80:	0018      	movs	r0, r3
 8009d82:	f002 f9ab 	bl	800c0dc <USBD_static_free>
    pdev->pClassData = NULL;
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	23ae      	movs	r3, #174	; 0xae
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8009d90:	230f      	movs	r3, #15
 8009d92:	18fb      	adds	r3, r7, r3
 8009d94:	781b      	ldrb	r3, [r3, #0]
}
 8009d96:	0018      	movs	r0, r3
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	b004      	add	sp, #16
 8009d9c:	bd80      	pop	{r7, pc}
	...

08009da0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b086      	sub	sp, #24
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	23ae      	movs	r3, #174	; 0xae
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	58d3      	ldr	r3, [r2, r3]
 8009db2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009db4:	230f      	movs	r3, #15
 8009db6:	18fb      	adds	r3, r7, r3
 8009db8:	2200      	movs	r2, #0
 8009dba:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8009dbc:	230c      	movs	r3, #12
 8009dbe:	18fb      	adds	r3, r7, r3
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8009dc4:	2317      	movs	r3, #23
 8009dc6:	18fb      	adds	r3, r7, r3
 8009dc8:	2200      	movs	r2, #0
 8009dca:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	001a      	movs	r2, r3
 8009dd2:	2360      	movs	r3, #96	; 0x60
 8009dd4:	4013      	ands	r3, r2
 8009dd6:	d03d      	beq.n	8009e54 <USBD_CDC_Setup+0xb4>
 8009dd8:	2b20      	cmp	r3, #32
 8009dda:	d000      	beq.n	8009dde <USBD_CDC_Setup+0x3e>
 8009ddc:	e094      	b.n	8009f08 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	88db      	ldrh	r3, [r3, #6]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d02b      	beq.n	8009e3e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	b25b      	sxtb	r3, r3
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	da12      	bge.n	8009e16 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	23af      	movs	r3, #175	; 0xaf
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	58d3      	ldr	r3, [r2, r3]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	683a      	ldr	r2, [r7, #0]
 8009dfc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009dfe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e00:	683a      	ldr	r2, [r7, #0]
 8009e02:	88d2      	ldrh	r2, [r2, #6]
 8009e04:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009e06:	6939      	ldr	r1, [r7, #16]
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	88da      	ldrh	r2, [r3, #6]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	0018      	movs	r0, r3
 8009e10:	f001 fbb2 	bl	800b578 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009e14:	e083      	b.n	8009f1e <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	7859      	ldrb	r1, [r3, #1]
 8009e1a:	693a      	ldr	r2, [r7, #16]
 8009e1c:	2380      	movs	r3, #128	; 0x80
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	88db      	ldrh	r3, [r3, #6]
 8009e26:	b2d9      	uxtb	r1, r3
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	4a40      	ldr	r2, [pc, #256]	; (8009f2c <USBD_CDC_Setup+0x18c>)
 8009e2c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009e2e:	6939      	ldr	r1, [r7, #16]
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	88da      	ldrh	r2, [r3, #6]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	0018      	movs	r0, r3
 8009e38:	f001 fbd1 	bl	800b5de <USBD_CtlPrepareRx>
      break;
 8009e3c:	e06f      	b.n	8009f1e <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	23af      	movs	r3, #175	; 0xaf
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	58d3      	ldr	r3, [r2, r3]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	683a      	ldr	r2, [r7, #0]
 8009e4a:	7850      	ldrb	r0, [r2, #1]
 8009e4c:	6839      	ldr	r1, [r7, #0]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	4798      	blx	r3
      break;
 8009e52:	e064      	b.n	8009f1e <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	785b      	ldrb	r3, [r3, #1]
 8009e58:	2b0b      	cmp	r3, #11
 8009e5a:	d037      	beq.n	8009ecc <USBD_CDC_Setup+0x12c>
 8009e5c:	dc47      	bgt.n	8009eee <USBD_CDC_Setup+0x14e>
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d002      	beq.n	8009e68 <USBD_CDC_Setup+0xc8>
 8009e62:	2b0a      	cmp	r3, #10
 8009e64:	d019      	beq.n	8009e9a <USBD_CDC_Setup+0xfa>
 8009e66:	e042      	b.n	8009eee <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	23a7      	movs	r3, #167	; 0xa7
 8009e6c:	009b      	lsls	r3, r3, #2
 8009e6e:	5cd3      	ldrb	r3, [r2, r3]
 8009e70:	2b03      	cmp	r3, #3
 8009e72:	d107      	bne.n	8009e84 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009e74:	230c      	movs	r3, #12
 8009e76:	18f9      	adds	r1, r7, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2202      	movs	r2, #2
 8009e7c:	0018      	movs	r0, r3
 8009e7e:	f001 fb7b 	bl	800b578 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e82:	e040      	b.n	8009f06 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8009e84:	683a      	ldr	r2, [r7, #0]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	0011      	movs	r1, r2
 8009e8a:	0018      	movs	r0, r3
 8009e8c:	f001 faf6 	bl	800b47c <USBD_CtlError>
            ret = USBD_FAIL;
 8009e90:	2317      	movs	r3, #23
 8009e92:	18fb      	adds	r3, r7, r3
 8009e94:	2202      	movs	r2, #2
 8009e96:	701a      	strb	r2, [r3, #0]
          break;
 8009e98:	e035      	b.n	8009f06 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	23a7      	movs	r3, #167	; 0xa7
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	5cd3      	ldrb	r3, [r2, r3]
 8009ea2:	2b03      	cmp	r3, #3
 8009ea4:	d107      	bne.n	8009eb6 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009ea6:	230f      	movs	r3, #15
 8009ea8:	18f9      	adds	r1, r7, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2201      	movs	r2, #1
 8009eae:	0018      	movs	r0, r3
 8009eb0:	f001 fb62 	bl	800b578 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009eb4:	e027      	b.n	8009f06 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	0011      	movs	r1, r2
 8009ebc:	0018      	movs	r0, r3
 8009ebe:	f001 fadd 	bl	800b47c <USBD_CtlError>
            ret = USBD_FAIL;
 8009ec2:	2317      	movs	r3, #23
 8009ec4:	18fb      	adds	r3, r7, r3
 8009ec6:	2202      	movs	r2, #2
 8009ec8:	701a      	strb	r2, [r3, #0]
          break;
 8009eca:	e01c      	b.n	8009f06 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	23a7      	movs	r3, #167	; 0xa7
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	5cd3      	ldrb	r3, [r2, r3]
 8009ed4:	2b03      	cmp	r3, #3
 8009ed6:	d015      	beq.n	8009f04 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8009ed8:	683a      	ldr	r2, [r7, #0]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	0011      	movs	r1, r2
 8009ede:	0018      	movs	r0, r3
 8009ee0:	f001 facc 	bl	800b47c <USBD_CtlError>
            ret = USBD_FAIL;
 8009ee4:	2317      	movs	r3, #23
 8009ee6:	18fb      	adds	r3, r7, r3
 8009ee8:	2202      	movs	r2, #2
 8009eea:	701a      	strb	r2, [r3, #0]
          }
          break;
 8009eec:	e00a      	b.n	8009f04 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8009eee:	683a      	ldr	r2, [r7, #0]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	0011      	movs	r1, r2
 8009ef4:	0018      	movs	r0, r3
 8009ef6:	f001 fac1 	bl	800b47c <USBD_CtlError>
          ret = USBD_FAIL;
 8009efa:	2317      	movs	r3, #23
 8009efc:	18fb      	adds	r3, r7, r3
 8009efe:	2202      	movs	r2, #2
 8009f00:	701a      	strb	r2, [r3, #0]
          break;
 8009f02:	e000      	b.n	8009f06 <USBD_CDC_Setup+0x166>
          break;
 8009f04:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8009f06:	e00a      	b.n	8009f1e <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8009f08:	683a      	ldr	r2, [r7, #0]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	0011      	movs	r1, r2
 8009f0e:	0018      	movs	r0, r3
 8009f10:	f001 fab4 	bl	800b47c <USBD_CtlError>
      ret = USBD_FAIL;
 8009f14:	2317      	movs	r3, #23
 8009f16:	18fb      	adds	r3, r7, r3
 8009f18:	2202      	movs	r2, #2
 8009f1a:	701a      	strb	r2, [r3, #0]
      break;
 8009f1c:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8009f1e:	2317      	movs	r3, #23
 8009f20:	18fb      	adds	r3, r7, r3
 8009f22:	781b      	ldrb	r3, [r3, #0]
}
 8009f24:	0018      	movs	r0, r3
 8009f26:	46bd      	mov	sp, r7
 8009f28:	b006      	add	sp, #24
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	00000201 	.word	0x00000201

08009f30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	000a      	movs	r2, r1
 8009f3a:	1cfb      	adds	r3, r7, #3
 8009f3c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	23ae      	movs	r3, #174	; 0xae
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	58d3      	ldr	r3, [r2, r3]
 8009f46:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	23b0      	movs	r3, #176	; 0xb0
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	58d3      	ldr	r3, [r2, r3]
 8009f50:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	23ae      	movs	r3, #174	; 0xae
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	58d3      	ldr	r3, [r2, r3]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d03e      	beq.n	8009fdc <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009f5e:	1cfb      	adds	r3, r7, #3
 8009f60:	781a      	ldrb	r2, [r3, #0]
 8009f62:	6879      	ldr	r1, [r7, #4]
 8009f64:	0013      	movs	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	189b      	adds	r3, r3, r2
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	18cb      	adds	r3, r1, r3
 8009f6e:	331c      	adds	r3, #28
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d02b      	beq.n	8009fce <USBD_CDC_DataIn+0x9e>
 8009f76:	1cfb      	adds	r3, r7, #3
 8009f78:	781a      	ldrb	r2, [r3, #0]
 8009f7a:	6879      	ldr	r1, [r7, #4]
 8009f7c:	0013      	movs	r3, r2
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	189b      	adds	r3, r3, r2
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	18cb      	adds	r3, r1, r3
 8009f86:	331c      	adds	r3, #28
 8009f88:	6818      	ldr	r0, [r3, #0]
 8009f8a:	1cfb      	adds	r3, r7, #3
 8009f8c:	781a      	ldrb	r2, [r3, #0]
 8009f8e:	68b9      	ldr	r1, [r7, #8]
 8009f90:	0013      	movs	r3, r2
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	189b      	adds	r3, r3, r2
 8009f96:	00db      	lsls	r3, r3, #3
 8009f98:	18cb      	adds	r3, r1, r3
 8009f9a:	3338      	adds	r3, #56	; 0x38
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	0019      	movs	r1, r3
 8009fa0:	f7f6 f94a 	bl	8000238 <__aeabi_uidivmod>
 8009fa4:	1e0b      	subs	r3, r1, #0
 8009fa6:	d112      	bne.n	8009fce <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009fa8:	1cfb      	adds	r3, r7, #3
 8009faa:	781a      	ldrb	r2, [r3, #0]
 8009fac:	6879      	ldr	r1, [r7, #4]
 8009fae:	0013      	movs	r3, r2
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	189b      	adds	r3, r3, r2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	18cb      	adds	r3, r1, r3
 8009fb8:	331c      	adds	r3, #28
 8009fba:	2200      	movs	r2, #0
 8009fbc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009fbe:	1cfb      	adds	r3, r7, #3
 8009fc0:	7819      	ldrb	r1, [r3, #0]
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f001 fff7 	bl	800bfba <USBD_LL_Transmit>
 8009fcc:	e004      	b.n	8009fd8 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	2385      	movs	r3, #133	; 0x85
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	e000      	b.n	8009fde <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8009fdc:	2302      	movs	r3, #2
  }
}
 8009fde:	0018      	movs	r0, r3
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	b004      	add	sp, #16
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b084      	sub	sp, #16
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
 8009fee:	000a      	movs	r2, r1
 8009ff0:	1cfb      	adds	r3, r7, #3
 8009ff2:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	23ae      	movs	r3, #174	; 0xae
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	58d3      	ldr	r3, [r2, r3]
 8009ffc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009ffe:	1cfb      	adds	r3, r7, #3
 800a000:	781a      	ldrb	r2, [r3, #0]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	0011      	movs	r1, r2
 800a006:	0018      	movs	r0, r3
 800a008:	f002 f845 	bl	800c096 <USBD_LL_GetRxDataSize>
 800a00c:	0001      	movs	r1, r0
 800a00e:	68fa      	ldr	r2, [r7, #12]
 800a010:	2383      	movs	r3, #131	; 0x83
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	23ae      	movs	r3, #174	; 0xae
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	58d3      	ldr	r3, [r2, r3]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d011      	beq.n	800a046 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	23af      	movs	r3, #175	; 0xaf
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	58d3      	ldr	r3, [r2, r3]
 800a02a:	68da      	ldr	r2, [r3, #12]
 800a02c:	68f9      	ldr	r1, [r7, #12]
 800a02e:	2381      	movs	r3, #129	; 0x81
 800a030:	009b      	lsls	r3, r3, #2
 800a032:	58c8      	ldr	r0, [r1, r3]
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2183      	movs	r1, #131	; 0x83
 800a038:	0089      	lsls	r1, r1, #2
 800a03a:	468c      	mov	ip, r1
 800a03c:	4463      	add	r3, ip
 800a03e:	0019      	movs	r1, r3
 800a040:	4790      	blx	r2

    return USBD_OK;
 800a042:	2300      	movs	r3, #0
 800a044:	e000      	b.n	800a048 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800a046:	2302      	movs	r3, #2
  }
}
 800a048:	0018      	movs	r0, r3
 800a04a:	46bd      	mov	sp, r7
 800a04c:	b004      	add	sp, #16
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a050:	b590      	push	{r4, r7, lr}
 800a052:	b085      	sub	sp, #20
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	23ae      	movs	r3, #174	; 0xae
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	58d3      	ldr	r3, [r2, r3]
 800a060:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	23af      	movs	r3, #175	; 0xaf
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	58d3      	ldr	r3, [r2, r3]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d019      	beq.n	800a0a2 <USBD_CDC_EP0_RxReady+0x52>
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	2380      	movs	r3, #128	; 0x80
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	5cd3      	ldrb	r3, [r2, r3]
 800a076:	2bff      	cmp	r3, #255	; 0xff
 800a078:	d013      	beq.n	800a0a2 <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	23af      	movs	r3, #175	; 0xaf
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	58d3      	ldr	r3, [r2, r3]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	68f9      	ldr	r1, [r7, #12]
 800a086:	2280      	movs	r2, #128	; 0x80
 800a088:	0092      	lsls	r2, r2, #2
 800a08a:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800a08c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a08e:	68fa      	ldr	r2, [r7, #12]
 800a090:	4c06      	ldr	r4, [pc, #24]	; (800a0ac <USBD_CDC_EP0_RxReady+0x5c>)
 800a092:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a094:	b292      	uxth	r2, r2
 800a096:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a098:	68fa      	ldr	r2, [r7, #12]
 800a09a:	2380      	movs	r3, #128	; 0x80
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	21ff      	movs	r1, #255	; 0xff
 800a0a0:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	0018      	movs	r0, r3
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	b005      	add	sp, #20
 800a0aa:	bd90      	pop	{r4, r7, pc}
 800a0ac:	00000201 	.word	0x00000201

0800a0b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2243      	movs	r2, #67	; 0x43
 800a0bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a0be:	4b02      	ldr	r3, [pc, #8]	; (800a0c8 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800a0c0:	0018      	movs	r0, r3
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	b002      	add	sp, #8
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	20000094 	.word	0x20000094

0800a0cc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2243      	movs	r2, #67	; 0x43
 800a0d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a0da:	4b02      	ldr	r3, [pc, #8]	; (800a0e4 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800a0dc:	0018      	movs	r0, r3
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	b002      	add	sp, #8
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	20000050 	.word	0x20000050

0800a0e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2243      	movs	r2, #67	; 0x43
 800a0f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a0f6:	4b02      	ldr	r3, [pc, #8]	; (800a100 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800a0f8:	0018      	movs	r0, r3
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	b002      	add	sp, #8
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	200000d8 	.word	0x200000d8

0800a104 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	220a      	movs	r2, #10
 800a110:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a112:	4b02      	ldr	r3, [pc, #8]	; (800a11c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800a114:	0018      	movs	r0, r3
 800a116:	46bd      	mov	sp, r7
 800a118:	b002      	add	sp, #8
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	2000000c 	.word	0x2000000c

0800a120 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a12a:	200f      	movs	r0, #15
 800a12c:	183b      	adds	r3, r7, r0
 800a12e:	2202      	movs	r2, #2
 800a130:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d007      	beq.n	800a148 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	23af      	movs	r3, #175	; 0xaf
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	6839      	ldr	r1, [r7, #0]
 800a140:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800a142:	183b      	adds	r3, r7, r0
 800a144:	2200      	movs	r2, #0
 800a146:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800a148:	230f      	movs	r3, #15
 800a14a:	18fb      	adds	r3, r7, r3
 800a14c:	781b      	ldrb	r3, [r3, #0]
}
 800a14e:	0018      	movs	r0, r3
 800a150:	46bd      	mov	sp, r7
 800a152:	b004      	add	sp, #16
 800a154:	bd80      	pop	{r7, pc}

0800a156 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b086      	sub	sp, #24
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	60f8      	str	r0, [r7, #12]
 800a15e:	60b9      	str	r1, [r7, #8]
 800a160:	1dbb      	adds	r3, r7, #6
 800a162:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	23ae      	movs	r3, #174	; 0xae
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	58d3      	ldr	r3, [r2, r3]
 800a16c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a16e:	697a      	ldr	r2, [r7, #20]
 800a170:	2382      	movs	r3, #130	; 0x82
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	68b9      	ldr	r1, [r7, #8]
 800a176:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800a178:	1dbb      	adds	r3, r7, #6
 800a17a:	8819      	ldrh	r1, [r3, #0]
 800a17c:	697a      	ldr	r2, [r7, #20]
 800a17e:	2384      	movs	r3, #132	; 0x84
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	0018      	movs	r0, r3
 800a188:	46bd      	mov	sp, r7
 800a18a:	b006      	add	sp, #24
 800a18c:	bd80      	pop	{r7, pc}

0800a18e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b084      	sub	sp, #16
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
 800a196:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	23ae      	movs	r3, #174	; 0xae
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	58d3      	ldr	r3, [r2, r3]
 800a1a0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	2381      	movs	r3, #129	; 0x81
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	6839      	ldr	r1, [r7, #0]
 800a1aa:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	0018      	movs	r0, r3
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	b004      	add	sp, #16
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b084      	sub	sp, #16
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	23ae      	movs	r3, #174	; 0xae
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	58d3      	ldr	r3, [r2, r3]
 800a1c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	23ae      	movs	r3, #174	; 0xae
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	58d3      	ldr	r3, [r2, r3]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d022      	beq.n	800a21a <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	2385      	movs	r3, #133	; 0x85
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	58d3      	ldr	r3, [r2, r3]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d11a      	bne.n	800a216 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	2385      	movs	r3, #133	; 0x85
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	2101      	movs	r1, #1
 800a1e8:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	2384      	movs	r3, #132	; 0x84
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	58d2      	ldr	r2, [r2, r3]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	2382      	movs	r3, #130	; 0x82
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	2384      	movs	r3, #132	; 0x84
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a206:	b29b      	uxth	r3, r3
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	000a      	movs	r2, r1
 800a20c:	2181      	movs	r1, #129	; 0x81
 800a20e:	f001 fed4 	bl	800bfba <USBD_LL_Transmit>

      return USBD_OK;
 800a212:	2300      	movs	r3, #0
 800a214:	e002      	b.n	800a21c <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800a216:	2301      	movs	r3, #1
 800a218:	e000      	b.n	800a21c <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800a21a:	2302      	movs	r3, #2
  }
}
 800a21c:	0018      	movs	r0, r3
 800a21e:	46bd      	mov	sp, r7
 800a220:	b004      	add	sp, #16
 800a222:	bd80      	pop	{r7, pc}

0800a224 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	23ae      	movs	r3, #174	; 0xae
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	58d3      	ldr	r3, [r2, r3]
 800a234:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	23ae      	movs	r3, #174	; 0xae
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	58d3      	ldr	r3, [r2, r3]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d019      	beq.n	800a276 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	7c1b      	ldrb	r3, [r3, #16]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d10a      	bne.n	800a260 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	2381      	movs	r3, #129	; 0x81
 800a24e:	009b      	lsls	r3, r3, #2
 800a250:	58d2      	ldr	r2, [r2, r3]
 800a252:	2380      	movs	r3, #128	; 0x80
 800a254:	009b      	lsls	r3, r3, #2
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	2101      	movs	r1, #1
 800a25a:	f001 fee5 	bl	800c028 <USBD_LL_PrepareReceive>
 800a25e:	e008      	b.n	800a272 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a260:	68fa      	ldr	r2, [r7, #12]
 800a262:	2381      	movs	r3, #129	; 0x81
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	58d2      	ldr	r2, [r2, r3]
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	2340      	movs	r3, #64	; 0x40
 800a26c:	2101      	movs	r1, #1
 800a26e:	f001 fedb 	bl	800c028 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a272:	2300      	movs	r3, #0
 800a274:	e000      	b.n	800a278 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800a276:	2302      	movs	r3, #2
  }
}
 800a278:	0018      	movs	r0, r3
 800a27a:	46bd      	mov	sp, r7
 800a27c:	b004      	add	sp, #16
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	1dfb      	adds	r3, r7, #7
 800a28c:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d101      	bne.n	800a298 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a294:	2302      	movs	r3, #2
 800a296:	e020      	b.n	800a2da <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	23ad      	movs	r3, #173	; 0xad
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	58d3      	ldr	r3, [r2, r3]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d004      	beq.n	800a2ae <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800a2a4:	68fa      	ldr	r2, [r7, #12]
 800a2a6:	23ad      	movs	r3, #173	; 0xad
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d004      	beq.n	800a2be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	23ac      	movs	r3, #172	; 0xac
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	68b9      	ldr	r1, [r7, #8]
 800a2bc:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a2be:	68fa      	ldr	r2, [r7, #12]
 800a2c0:	23a7      	movs	r3, #167	; 0xa7
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	2101      	movs	r1, #1
 800a2c6:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	1dfa      	adds	r2, r7, #7
 800a2cc:	7812      	ldrb	r2, [r2, #0]
 800a2ce:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	0018      	movs	r0, r3
 800a2d4:	f001 fcd4 	bl	800bc80 <USBD_LL_Init>

  return USBD_OK;
 800a2d8:	2300      	movs	r3, #0
}
 800a2da:	0018      	movs	r0, r3
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	b004      	add	sp, #16
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b084      	sub	sp, #16
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
 800a2ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a2ec:	200f      	movs	r0, #15
 800a2ee:	183b      	adds	r3, r7, r0
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d008      	beq.n	800a30c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	23ad      	movs	r3, #173	; 0xad
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	6839      	ldr	r1, [r7, #0]
 800a302:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800a304:	183b      	adds	r3, r7, r0
 800a306:	2200      	movs	r2, #0
 800a308:	701a      	strb	r2, [r3, #0]
 800a30a:	e003      	b.n	800a314 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a30c:	230f      	movs	r3, #15
 800a30e:	18fb      	adds	r3, r7, r3
 800a310:	2202      	movs	r2, #2
 800a312:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800a314:	230f      	movs	r3, #15
 800a316:	18fb      	adds	r3, r7, r3
 800a318:	781b      	ldrb	r3, [r3, #0]
}
 800a31a:	0018      	movs	r0, r3
 800a31c:	46bd      	mov	sp, r7
 800a31e:	b004      	add	sp, #16
 800a320:	bd80      	pop	{r7, pc}

0800a322 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b082      	sub	sp, #8
 800a326:	af00      	add	r7, sp, #0
 800a328:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	0018      	movs	r0, r3
 800a32e:	f001 fd0b 	bl	800bd48 <USBD_LL_Start>

  return USBD_OK;
 800a332:	2300      	movs	r3, #0
}
 800a334:	0018      	movs	r0, r3
 800a336:	46bd      	mov	sp, r7
 800a338:	b002      	add	sp, #8
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	0018      	movs	r0, r3
 800a348:	46bd      	mov	sp, r7
 800a34a:	b002      	add	sp, #8
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a34e:	b590      	push	{r4, r7, lr}
 800a350:	b085      	sub	sp, #20
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
 800a356:	000a      	movs	r2, r1
 800a358:	1cfb      	adds	r3, r7, #3
 800a35a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a35c:	240f      	movs	r4, #15
 800a35e:	193b      	adds	r3, r7, r4
 800a360:	2202      	movs	r2, #2
 800a362:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	23ad      	movs	r3, #173	; 0xad
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	58d3      	ldr	r3, [r2, r3]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d00e      	beq.n	800a38e <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	23ad      	movs	r3, #173	; 0xad
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	58d3      	ldr	r3, [r2, r3]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	1cfa      	adds	r2, r7, #3
 800a37c:	7811      	ldrb	r1, [r2, #0]
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	0010      	movs	r0, r2
 800a382:	4798      	blx	r3
 800a384:	1e03      	subs	r3, r0, #0
 800a386:	d102      	bne.n	800a38e <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800a388:	193b      	adds	r3, r7, r4
 800a38a:	2200      	movs	r2, #0
 800a38c:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800a38e:	230f      	movs	r3, #15
 800a390:	18fb      	adds	r3, r7, r3
 800a392:	781b      	ldrb	r3, [r3, #0]
}
 800a394:	0018      	movs	r0, r3
 800a396:	46bd      	mov	sp, r7
 800a398:	b005      	add	sp, #20
 800a39a:	bd90      	pop	{r4, r7, pc}

0800a39c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	000a      	movs	r2, r1
 800a3a6:	1cfb      	adds	r3, r7, #3
 800a3a8:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	23ad      	movs	r3, #173	; 0xad
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	58d3      	ldr	r3, [r2, r3]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	1cfa      	adds	r2, r7, #3
 800a3b6:	7811      	ldrb	r1, [r2, #0]
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	0010      	movs	r0, r2
 800a3bc:	4798      	blx	r3

  return USBD_OK;
 800a3be:	2300      	movs	r3, #0
}
 800a3c0:	0018      	movs	r0, r3
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	b002      	add	sp, #8
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	22aa      	movs	r2, #170	; 0xaa
 800a3d6:	0092      	lsls	r2, r2, #2
 800a3d8:	4694      	mov	ip, r2
 800a3da:	4463      	add	r3, ip
 800a3dc:	683a      	ldr	r2, [r7, #0]
 800a3de:	0011      	movs	r1, r2
 800a3e0:	0018      	movs	r0, r3
 800a3e2:	f001 f810 	bl	800b406 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	23a5      	movs	r3, #165	; 0xa5
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	2101      	movs	r1, #1
 800a3ee:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a23      	ldr	r2, [pc, #140]	; (800a480 <USBD_LL_SetupStage+0xb8>)
 800a3f4:	5a9b      	ldrh	r3, [r3, r2]
 800a3f6:	0019      	movs	r1, r3
 800a3f8:	687a      	ldr	r2, [r7, #4]
 800a3fa:	23a6      	movs	r3, #166	; 0xa6
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	23aa      	movs	r3, #170	; 0xaa
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	5cd3      	ldrb	r3, [r2, r3]
 800a408:	001a      	movs	r2, r3
 800a40a:	231f      	movs	r3, #31
 800a40c:	4013      	ands	r3, r2
 800a40e:	2b02      	cmp	r3, #2
 800a410:	d019      	beq.n	800a446 <USBD_LL_SetupStage+0x7e>
 800a412:	d822      	bhi.n	800a45a <USBD_LL_SetupStage+0x92>
 800a414:	2b00      	cmp	r3, #0
 800a416:	d002      	beq.n	800a41e <USBD_LL_SetupStage+0x56>
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d00a      	beq.n	800a432 <USBD_LL_SetupStage+0x6a>
 800a41c:	e01d      	b.n	800a45a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	22aa      	movs	r2, #170	; 0xaa
 800a422:	0092      	lsls	r2, r2, #2
 800a424:	189a      	adds	r2, r3, r2
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	0011      	movs	r1, r2
 800a42a:	0018      	movs	r0, r3
 800a42c:	f000 fa10 	bl	800a850 <USBD_StdDevReq>
      break;
 800a430:	e020      	b.n	800a474 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	22aa      	movs	r2, #170	; 0xaa
 800a436:	0092      	lsls	r2, r2, #2
 800a438:	189a      	adds	r2, r3, r2
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	0011      	movs	r1, r2
 800a43e:	0018      	movs	r0, r3
 800a440:	f000 fa78 	bl	800a934 <USBD_StdItfReq>
      break;
 800a444:	e016      	b.n	800a474 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	22aa      	movs	r2, #170	; 0xaa
 800a44a:	0092      	lsls	r2, r2, #2
 800a44c:	189a      	adds	r2, r3, r2
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	0011      	movs	r1, r2
 800a452:	0018      	movs	r0, r3
 800a454:	f000 fac5 	bl	800a9e2 <USBD_StdEPReq>
      break;
 800a458:	e00c      	b.n	800a474 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	23aa      	movs	r3, #170	; 0xaa
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	5cd3      	ldrb	r3, [r2, r3]
 800a462:	227f      	movs	r2, #127	; 0x7f
 800a464:	4393      	bics	r3, r2
 800a466:	b2da      	uxtb	r2, r3
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	0011      	movs	r1, r2
 800a46c:	0018      	movs	r0, r3
 800a46e:	f001 fcf2 	bl	800be56 <USBD_LL_StallEP>
      break;
 800a472:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	0018      	movs	r0, r3
 800a478:	46bd      	mov	sp, r7
 800a47a:	b002      	add	sp, #8
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	46c0      	nop			; (mov r8, r8)
 800a480:	000002ae 	.word	0x000002ae

0800a484 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b086      	sub	sp, #24
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	607a      	str	r2, [r7, #4]
 800a48e:	200b      	movs	r0, #11
 800a490:	183b      	adds	r3, r7, r0
 800a492:	1c0a      	adds	r2, r1, #0
 800a494:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a496:	183b      	adds	r3, r7, r0
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d154      	bne.n	800a548 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	3355      	adds	r3, #85	; 0x55
 800a4a2:	33ff      	adds	r3, #255	; 0xff
 800a4a4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	23a5      	movs	r3, #165	; 0xa5
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	58d3      	ldr	r3, [r2, r3]
 800a4ae:	2b03      	cmp	r3, #3
 800a4b0:	d139      	bne.n	800a526 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	68da      	ldr	r2, [r3, #12]
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	691b      	ldr	r3, [r3, #16]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d919      	bls.n	800a4f2 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	68da      	ldr	r2, [r3, #12]
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	1ad2      	subs	r2, r2, r3
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	68da      	ldr	r2, [r3, #12]
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d203      	bcs.n	800a4e0 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	e002      	b.n	800a4e6 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	6879      	ldr	r1, [r7, #4]
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	001a      	movs	r2, r3
 800a4ec:	f001 f89b 	bl	800b626 <USBD_CtlContinueRx>
 800a4f0:	e045      	b.n	800a57e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	23ad      	movs	r3, #173	; 0xad
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	58d3      	ldr	r3, [r2, r3]
 800a4fa:	691b      	ldr	r3, [r3, #16]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00d      	beq.n	800a51c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	23a7      	movs	r3, #167	; 0xa7
 800a504:	009b      	lsls	r3, r3, #2
 800a506:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a508:	2b03      	cmp	r3, #3
 800a50a:	d107      	bne.n	800a51c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	23ad      	movs	r3, #173	; 0xad
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	58d3      	ldr	r3, [r2, r3]
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	0010      	movs	r0, r2
 800a51a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	0018      	movs	r0, r3
 800a520:	f001 f894 	bl	800b64c <USBD_CtlSendStatus>
 800a524:	e02b      	b.n	800a57e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	23a5      	movs	r3, #165	; 0xa5
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	58d3      	ldr	r3, [r2, r3]
 800a52e:	2b05      	cmp	r3, #5
 800a530:	d125      	bne.n	800a57e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	23a5      	movs	r3, #165	; 0xa5
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	2100      	movs	r1, #0
 800a53a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2100      	movs	r1, #0
 800a540:	0018      	movs	r0, r3
 800a542:	f001 fc88 	bl	800be56 <USBD_LL_StallEP>
 800a546:	e01a      	b.n	800a57e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	23ad      	movs	r3, #173	; 0xad
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	58d3      	ldr	r3, [r2, r3]
 800a550:	699b      	ldr	r3, [r3, #24]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d011      	beq.n	800a57a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a556:	68fa      	ldr	r2, [r7, #12]
 800a558:	23a7      	movs	r3, #167	; 0xa7
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800a55e:	2b03      	cmp	r3, #3
 800a560:	d10b      	bne.n	800a57a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a562:	68fa      	ldr	r2, [r7, #12]
 800a564:	23ad      	movs	r3, #173	; 0xad
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	58d3      	ldr	r3, [r2, r3]
 800a56a:	699b      	ldr	r3, [r3, #24]
 800a56c:	220b      	movs	r2, #11
 800a56e:	18ba      	adds	r2, r7, r2
 800a570:	7811      	ldrb	r1, [r2, #0]
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	0010      	movs	r0, r2
 800a576:	4798      	blx	r3
 800a578:	e001      	b.n	800a57e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a57a:	2302      	movs	r3, #2
 800a57c:	e000      	b.n	800a580 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800a57e:	2300      	movs	r3, #0
}
 800a580:	0018      	movs	r0, r3
 800a582:	46bd      	mov	sp, r7
 800a584:	b006      	add	sp, #24
 800a586:	bd80      	pop	{r7, pc}

0800a588 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b086      	sub	sp, #24
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	607a      	str	r2, [r7, #4]
 800a592:	200b      	movs	r0, #11
 800a594:	183b      	adds	r3, r7, r0
 800a596:	1c0a      	adds	r2, r1, #0
 800a598:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a59a:	183b      	adds	r3, r7, r0
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d000      	beq.n	800a5a4 <USBD_LL_DataInStage+0x1c>
 800a5a2:	e08e      	b.n	800a6c2 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	3314      	adds	r3, #20
 800a5a8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a5aa:	68fa      	ldr	r2, [r7, #12]
 800a5ac:	23a5      	movs	r3, #165	; 0xa5
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	58d3      	ldr	r3, [r2, r3]
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	d164      	bne.n	800a680 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	68da      	ldr	r2, [r3, #12]
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d915      	bls.n	800a5ee <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	68da      	ldr	r2, [r3, #12]
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	691b      	ldr	r3, [r3, #16]
 800a5ca:	1ad2      	subs	r2, r2, r3
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	6879      	ldr	r1, [r7, #4]
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	0018      	movs	r0, r3
 800a5dc:	f000 ffec 	bl	800b5b8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	f001 fd1e 	bl	800c028 <USBD_LL_PrepareReceive>
 800a5ec:	e059      	b.n	800a6a2 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	689a      	ldr	r2, [r3, #8]
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	691b      	ldr	r3, [r3, #16]
 800a5f6:	0019      	movs	r1, r3
 800a5f8:	0010      	movs	r0, r2
 800a5fa:	f7f5 fe1d 	bl	8000238 <__aeabi_uidivmod>
 800a5fe:	1e0b      	subs	r3, r1, #0
 800a600:	d11f      	bne.n	800a642 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	689a      	ldr	r2, [r3, #8]
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d319      	bcc.n	800a642 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	689a      	ldr	r2, [r3, #8]
 800a612:	68f9      	ldr	r1, [r7, #12]
 800a614:	23a6      	movs	r3, #166	; 0xa6
 800a616:	009b      	lsls	r3, r3, #2
 800a618:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d211      	bcs.n	800a642 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2200      	movs	r2, #0
 800a622:	2100      	movs	r1, #0
 800a624:	0018      	movs	r0, r3
 800a626:	f000 ffc7 	bl	800b5b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	23a6      	movs	r3, #166	; 0xa6
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	2100      	movs	r1, #0
 800a632:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a634:	68f8      	ldr	r0, [r7, #12]
 800a636:	2300      	movs	r3, #0
 800a638:	2200      	movs	r2, #0
 800a63a:	2100      	movs	r1, #0
 800a63c:	f001 fcf4 	bl	800c028 <USBD_LL_PrepareReceive>
 800a640:	e02f      	b.n	800a6a2 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a642:	68fa      	ldr	r2, [r7, #12]
 800a644:	23ad      	movs	r3, #173	; 0xad
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	58d3      	ldr	r3, [r2, r3]
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d00d      	beq.n	800a66c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	23a7      	movs	r3, #167	; 0xa7
 800a654:	009b      	lsls	r3, r3, #2
 800a656:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a658:	2b03      	cmp	r3, #3
 800a65a:	d107      	bne.n	800a66c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a65c:	68fa      	ldr	r2, [r7, #12]
 800a65e:	23ad      	movs	r3, #173	; 0xad
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	58d3      	ldr	r3, [r2, r3]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	68fa      	ldr	r2, [r7, #12]
 800a668:	0010      	movs	r0, r2
 800a66a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2180      	movs	r1, #128	; 0x80
 800a670:	0018      	movs	r0, r3
 800a672:	f001 fbf0 	bl	800be56 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	0018      	movs	r0, r3
 800a67a:	f000 fffb 	bl	800b674 <USBD_CtlReceiveStatus>
 800a67e:	e010      	b.n	800a6a2 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	23a5      	movs	r3, #165	; 0xa5
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	58d3      	ldr	r3, [r2, r3]
 800a688:	2b04      	cmp	r3, #4
 800a68a:	d005      	beq.n	800a698 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	23a5      	movs	r3, #165	; 0xa5
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a694:	2b00      	cmp	r3, #0
 800a696:	d104      	bne.n	800a6a2 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2180      	movs	r1, #128	; 0x80
 800a69c:	0018      	movs	r0, r3
 800a69e:	f001 fbda 	bl	800be56 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	23a8      	movs	r3, #168	; 0xa8
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	5cd3      	ldrb	r3, [r2, r3]
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d124      	bne.n	800a6f8 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	0018      	movs	r0, r3
 800a6b2:	f7ff fe43 	bl	800a33c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a6b6:	68fa      	ldr	r2, [r7, #12]
 800a6b8:	23a8      	movs	r3, #168	; 0xa8
 800a6ba:	009b      	lsls	r3, r3, #2
 800a6bc:	2100      	movs	r1, #0
 800a6be:	54d1      	strb	r1, [r2, r3]
 800a6c0:	e01a      	b.n	800a6f8 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a6c2:	68fa      	ldr	r2, [r7, #12]
 800a6c4:	23ad      	movs	r3, #173	; 0xad
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	58d3      	ldr	r3, [r2, r3]
 800a6ca:	695b      	ldr	r3, [r3, #20]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d011      	beq.n	800a6f4 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	23a7      	movs	r3, #167	; 0xa7
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800a6d8:	2b03      	cmp	r3, #3
 800a6da:	d10b      	bne.n	800a6f4 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a6dc:	68fa      	ldr	r2, [r7, #12]
 800a6de:	23ad      	movs	r3, #173	; 0xad
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	58d3      	ldr	r3, [r2, r3]
 800a6e4:	695b      	ldr	r3, [r3, #20]
 800a6e6:	220b      	movs	r2, #11
 800a6e8:	18ba      	adds	r2, r7, r2
 800a6ea:	7811      	ldrb	r1, [r2, #0]
 800a6ec:	68fa      	ldr	r2, [r7, #12]
 800a6ee:	0010      	movs	r0, r2
 800a6f0:	4798      	blx	r3
 800a6f2:	e001      	b.n	800a6f8 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a6f4:	2302      	movs	r3, #2
 800a6f6:	e000      	b.n	800a6fa <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	0018      	movs	r0, r3
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	b006      	add	sp, #24
 800a700:	bd80      	pop	{r7, pc}

0800a702 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b082      	sub	sp, #8
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	2340      	movs	r3, #64	; 0x40
 800a70e:	2200      	movs	r2, #0
 800a710:	2100      	movs	r1, #0
 800a712:	f001 fb3e 	bl	800bd92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	23ac      	movs	r3, #172	; 0xac
 800a71a:	005b      	lsls	r3, r3, #1
 800a71c:	2101      	movs	r1, #1
 800a71e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	23b2      	movs	r3, #178	; 0xb2
 800a724:	005b      	lsls	r3, r3, #1
 800a726:	2140      	movs	r1, #64	; 0x40
 800a728:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	2340      	movs	r3, #64	; 0x40
 800a72e:	2200      	movs	r2, #0
 800a730:	2180      	movs	r1, #128	; 0x80
 800a732:	f001 fb2e 	bl	800bd92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2201      	movs	r2, #1
 800a73a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2240      	movs	r2, #64	; 0x40
 800a740:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	23a7      	movs	r3, #167	; 0xa7
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	2101      	movs	r1, #1
 800a74a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	23a5      	movs	r3, #165	; 0xa5
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	2100      	movs	r1, #0
 800a754:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	23a9      	movs	r3, #169	; 0xa9
 800a760:	009b      	lsls	r3, r3, #2
 800a762:	2100      	movs	r1, #0
 800a764:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	23ae      	movs	r3, #174	; 0xae
 800a76a:	009b      	lsls	r3, r3, #2
 800a76c:	58d3      	ldr	r3, [r2, r3]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00a      	beq.n	800a788 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	23ad      	movs	r3, #173	; 0xad
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	58d3      	ldr	r3, [r2, r3]
 800a77a:	685a      	ldr	r2, [r3, #4]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	b2d9      	uxtb	r1, r3
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	0018      	movs	r0, r3
 800a786:	4790      	blx	r2
  }

  return USBD_OK;
 800a788:	2300      	movs	r3, #0
}
 800a78a:	0018      	movs	r0, r3
 800a78c:	46bd      	mov	sp, r7
 800a78e:	b002      	add	sp, #8
 800a790:	bd80      	pop	{r7, pc}

0800a792 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a792:	b580      	push	{r7, lr}
 800a794:	b082      	sub	sp, #8
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
 800a79a:	000a      	movs	r2, r1
 800a79c:	1cfb      	adds	r3, r7, #3
 800a79e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	1cfa      	adds	r2, r7, #3
 800a7a4:	7812      	ldrb	r2, [r2, #0]
 800a7a6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	0018      	movs	r0, r3
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	b002      	add	sp, #8
 800a7b0:	bd80      	pop	{r7, pc}
	...

0800a7b4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b082      	sub	sp, #8
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	23a7      	movs	r3, #167	; 0xa7
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	5cd1      	ldrb	r1, [r2, r3]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	4a06      	ldr	r2, [pc, #24]	; (800a7e0 <USBD_LL_Suspend+0x2c>)
 800a7c8:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	23a7      	movs	r3, #167	; 0xa7
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	2104      	movs	r1, #4
 800a7d2:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	0018      	movs	r0, r3
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	b002      	add	sp, #8
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	46c0      	nop			; (mov r8, r8)
 800a7e0:	0000029d 	.word	0x0000029d

0800a7e4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	23a7      	movs	r3, #167	; 0xa7
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	5cd3      	ldrb	r3, [r2, r3]
 800a7f4:	2b04      	cmp	r3, #4
 800a7f6:	d106      	bne.n	800a806 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4a05      	ldr	r2, [pc, #20]	; (800a810 <USBD_LL_Resume+0x2c>)
 800a7fc:	5c99      	ldrb	r1, [r3, r2]
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	23a7      	movs	r3, #167	; 0xa7
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800a806:	2300      	movs	r3, #0
}
 800a808:	0018      	movs	r0, r3
 800a80a:	46bd      	mov	sp, r7
 800a80c:	b002      	add	sp, #8
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	0000029d 	.word	0x0000029d

0800a814 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a81c:	687a      	ldr	r2, [r7, #4]
 800a81e:	23a7      	movs	r3, #167	; 0xa7
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	5cd3      	ldrb	r3, [r2, r3]
 800a824:	2b03      	cmp	r3, #3
 800a826:	d10e      	bne.n	800a846 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	23ad      	movs	r3, #173	; 0xad
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	58d3      	ldr	r3, [r2, r3]
 800a830:	69db      	ldr	r3, [r3, #28]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d007      	beq.n	800a846 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	23ad      	movs	r3, #173	; 0xad
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	58d3      	ldr	r3, [r2, r3]
 800a83e:	69db      	ldr	r3, [r3, #28]
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	0010      	movs	r0, r2
 800a844:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a846:	2300      	movs	r3, #0
}
 800a848:	0018      	movs	r0, r3
 800a84a:	46bd      	mov	sp, r7
 800a84c:	b002      	add	sp, #8
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a85a:	230f      	movs	r3, #15
 800a85c:	18fb      	adds	r3, r7, r3
 800a85e:	2200      	movs	r2, #0
 800a860:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	001a      	movs	r2, r3
 800a868:	2360      	movs	r3, #96	; 0x60
 800a86a:	4013      	ands	r3, r2
 800a86c:	2b40      	cmp	r3, #64	; 0x40
 800a86e:	d004      	beq.n	800a87a <USBD_StdDevReq+0x2a>
 800a870:	d84f      	bhi.n	800a912 <USBD_StdDevReq+0xc2>
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00b      	beq.n	800a88e <USBD_StdDevReq+0x3e>
 800a876:	2b20      	cmp	r3, #32
 800a878:	d14b      	bne.n	800a912 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	23ad      	movs	r3, #173	; 0xad
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	58d3      	ldr	r3, [r2, r3]
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	6839      	ldr	r1, [r7, #0]
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	0010      	movs	r0, r2
 800a88a:	4798      	blx	r3
      break;
 800a88c:	e048      	b.n	800a920 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	785b      	ldrb	r3, [r3, #1]
 800a892:	2b09      	cmp	r3, #9
 800a894:	d835      	bhi.n	800a902 <USBD_StdDevReq+0xb2>
 800a896:	009a      	lsls	r2, r3, #2
 800a898:	4b25      	ldr	r3, [pc, #148]	; (800a930 <USBD_StdDevReq+0xe0>)
 800a89a:	18d3      	adds	r3, r2, r3
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a8a0:	683a      	ldr	r2, [r7, #0]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	0011      	movs	r1, r2
 800a8a6:	0018      	movs	r0, r3
 800a8a8:	f000 fa52 	bl	800ad50 <USBD_GetDescriptor>
          break;
 800a8ac:	e030      	b.n	800a910 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a8ae:	683a      	ldr	r2, [r7, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	0011      	movs	r1, r2
 800a8b4:	0018      	movs	r0, r3
 800a8b6:	f000 fbfd 	bl	800b0b4 <USBD_SetAddress>
          break;
 800a8ba:	e029      	b.n	800a910 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a8bc:	683a      	ldr	r2, [r7, #0]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	0011      	movs	r1, r2
 800a8c2:	0018      	movs	r0, r3
 800a8c4:	f000 fc4a 	bl	800b15c <USBD_SetConfig>
          break;
 800a8c8:	e022      	b.n	800a910 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	0011      	movs	r1, r2
 800a8d0:	0018      	movs	r0, r3
 800a8d2:	f000 fce7 	bl	800b2a4 <USBD_GetConfig>
          break;
 800a8d6:	e01b      	b.n	800a910 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a8d8:	683a      	ldr	r2, [r7, #0]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	0011      	movs	r1, r2
 800a8de:	0018      	movs	r0, r3
 800a8e0:	f000 fd1b 	bl	800b31a <USBD_GetStatus>
          break;
 800a8e4:	e014      	b.n	800a910 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	0011      	movs	r1, r2
 800a8ec:	0018      	movs	r0, r3
 800a8ee:	f000 fd4e 	bl	800b38e <USBD_SetFeature>
          break;
 800a8f2:	e00d      	b.n	800a910 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a8f4:	683a      	ldr	r2, [r7, #0]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	0011      	movs	r1, r2
 800a8fa:	0018      	movs	r0, r3
 800a8fc:	f000 fd5d 	bl	800b3ba <USBD_ClrFeature>
          break;
 800a900:	e006      	b.n	800a910 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a902:	683a      	ldr	r2, [r7, #0]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	0011      	movs	r1, r2
 800a908:	0018      	movs	r0, r3
 800a90a:	f000 fdb7 	bl	800b47c <USBD_CtlError>
          break;
 800a90e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a910:	e006      	b.n	800a920 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a912:	683a      	ldr	r2, [r7, #0]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	0011      	movs	r1, r2
 800a918:	0018      	movs	r0, r3
 800a91a:	f000 fdaf 	bl	800b47c <USBD_CtlError>
      break;
 800a91e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800a920:	230f      	movs	r3, #15
 800a922:	18fb      	adds	r3, r7, r3
 800a924:	781b      	ldrb	r3, [r3, #0]
}
 800a926:	0018      	movs	r0, r3
 800a928:	46bd      	mov	sp, r7
 800a92a:	b004      	add	sp, #16
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	46c0      	nop			; (mov r8, r8)
 800a930:	0800cb88 	.word	0x0800cb88

0800a934 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a934:	b5b0      	push	{r4, r5, r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a93e:	230f      	movs	r3, #15
 800a940:	18fb      	adds	r3, r7, r3
 800a942:	2200      	movs	r2, #0
 800a944:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	001a      	movs	r2, r3
 800a94c:	2360      	movs	r3, #96	; 0x60
 800a94e:	4013      	ands	r3, r2
 800a950:	2b40      	cmp	r3, #64	; 0x40
 800a952:	d004      	beq.n	800a95e <USBD_StdItfReq+0x2a>
 800a954:	d839      	bhi.n	800a9ca <USBD_StdItfReq+0x96>
 800a956:	2b00      	cmp	r3, #0
 800a958:	d001      	beq.n	800a95e <USBD_StdItfReq+0x2a>
 800a95a:	2b20      	cmp	r3, #32
 800a95c:	d135      	bne.n	800a9ca <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	23a7      	movs	r3, #167	; 0xa7
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	5cd3      	ldrb	r3, [r2, r3]
 800a966:	3b01      	subs	r3, #1
 800a968:	2b02      	cmp	r3, #2
 800a96a:	d825      	bhi.n	800a9b8 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	889b      	ldrh	r3, [r3, #4]
 800a970:	b2db      	uxtb	r3, r3
 800a972:	2b01      	cmp	r3, #1
 800a974:	d819      	bhi.n	800a9aa <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	23ad      	movs	r3, #173	; 0xad
 800a97a:	009b      	lsls	r3, r3, #2
 800a97c:	58d3      	ldr	r3, [r2, r3]
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	250f      	movs	r5, #15
 800a982:	197c      	adds	r4, r7, r5
 800a984:	6839      	ldr	r1, [r7, #0]
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	0010      	movs	r0, r2
 800a98a:	4798      	blx	r3
 800a98c:	0003      	movs	r3, r0
 800a98e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	88db      	ldrh	r3, [r3, #6]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d116      	bne.n	800a9c6 <USBD_StdItfReq+0x92>
 800a998:	197b      	adds	r3, r7, r5
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d112      	bne.n	800a9c6 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	0018      	movs	r0, r3
 800a9a4:	f000 fe52 	bl	800b64c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a9a8:	e00d      	b.n	800a9c6 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800a9aa:	683a      	ldr	r2, [r7, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	0011      	movs	r1, r2
 800a9b0:	0018      	movs	r0, r3
 800a9b2:	f000 fd63 	bl	800b47c <USBD_CtlError>
          break;
 800a9b6:	e006      	b.n	800a9c6 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800a9b8:	683a      	ldr	r2, [r7, #0]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	0011      	movs	r1, r2
 800a9be:	0018      	movs	r0, r3
 800a9c0:	f000 fd5c 	bl	800b47c <USBD_CtlError>
          break;
 800a9c4:	e000      	b.n	800a9c8 <USBD_StdItfReq+0x94>
          break;
 800a9c6:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a9c8:	e006      	b.n	800a9d8 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800a9ca:	683a      	ldr	r2, [r7, #0]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	0011      	movs	r1, r2
 800a9d0:	0018      	movs	r0, r3
 800a9d2:	f000 fd53 	bl	800b47c <USBD_CtlError>
      break;
 800a9d6:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800a9d8:	2300      	movs	r3, #0
}
 800a9da:	0018      	movs	r0, r3
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	b004      	add	sp, #16
 800a9e0:	bdb0      	pop	{r4, r5, r7, pc}

0800a9e2 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a9e2:	b5b0      	push	{r4, r5, r7, lr}
 800a9e4:	b084      	sub	sp, #16
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
 800a9ea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a9ec:	230f      	movs	r3, #15
 800a9ee:	18fb      	adds	r3, r7, r3
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	889a      	ldrh	r2, [r3, #4]
 800a9f8:	230e      	movs	r3, #14
 800a9fa:	18fb      	adds	r3, r7, r3
 800a9fc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	001a      	movs	r2, r3
 800aa04:	2360      	movs	r3, #96	; 0x60
 800aa06:	4013      	ands	r3, r2
 800aa08:	2b40      	cmp	r3, #64	; 0x40
 800aa0a:	d006      	beq.n	800aa1a <USBD_StdEPReq+0x38>
 800aa0c:	d900      	bls.n	800aa10 <USBD_StdEPReq+0x2e>
 800aa0e:	e190      	b.n	800ad32 <USBD_StdEPReq+0x350>
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d00c      	beq.n	800aa2e <USBD_StdEPReq+0x4c>
 800aa14:	2b20      	cmp	r3, #32
 800aa16:	d000      	beq.n	800aa1a <USBD_StdEPReq+0x38>
 800aa18:	e18b      	b.n	800ad32 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	23ad      	movs	r3, #173	; 0xad
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	58d3      	ldr	r3, [r2, r3]
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	6839      	ldr	r1, [r7, #0]
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	0010      	movs	r0, r2
 800aa2a:	4798      	blx	r3
      break;
 800aa2c:	e188      	b.n	800ad40 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	781b      	ldrb	r3, [r3, #0]
 800aa32:	001a      	movs	r2, r3
 800aa34:	2360      	movs	r3, #96	; 0x60
 800aa36:	4013      	ands	r3, r2
 800aa38:	2b20      	cmp	r3, #32
 800aa3a:	d10f      	bne.n	800aa5c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	23ad      	movs	r3, #173	; 0xad
 800aa40:	009b      	lsls	r3, r3, #2
 800aa42:	58d3      	ldr	r3, [r2, r3]
 800aa44:	689b      	ldr	r3, [r3, #8]
 800aa46:	250f      	movs	r5, #15
 800aa48:	197c      	adds	r4, r7, r5
 800aa4a:	6839      	ldr	r1, [r7, #0]
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	0010      	movs	r0, r2
 800aa50:	4798      	blx	r3
 800aa52:	0003      	movs	r3, r0
 800aa54:	7023      	strb	r3, [r4, #0]

        return ret;
 800aa56:	197b      	adds	r3, r7, r5
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	e174      	b.n	800ad46 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	785b      	ldrb	r3, [r3, #1]
 800aa60:	2b03      	cmp	r3, #3
 800aa62:	d007      	beq.n	800aa74 <USBD_StdEPReq+0x92>
 800aa64:	dd00      	ble.n	800aa68 <USBD_StdEPReq+0x86>
 800aa66:	e15c      	b.n	800ad22 <USBD_StdEPReq+0x340>
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d100      	bne.n	800aa6e <USBD_StdEPReq+0x8c>
 800aa6c:	e092      	b.n	800ab94 <USBD_StdEPReq+0x1b2>
 800aa6e:	2b01      	cmp	r3, #1
 800aa70:	d04b      	beq.n	800ab0a <USBD_StdEPReq+0x128>
 800aa72:	e156      	b.n	800ad22 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	23a7      	movs	r3, #167	; 0xa7
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	5cd3      	ldrb	r3, [r2, r3]
 800aa7c:	2b02      	cmp	r3, #2
 800aa7e:	d002      	beq.n	800aa86 <USBD_StdEPReq+0xa4>
 800aa80:	2b03      	cmp	r3, #3
 800aa82:	d01d      	beq.n	800aac0 <USBD_StdEPReq+0xde>
 800aa84:	e039      	b.n	800aafa <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa86:	220e      	movs	r2, #14
 800aa88:	18bb      	adds	r3, r7, r2
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d010      	beq.n	800aab2 <USBD_StdEPReq+0xd0>
 800aa90:	18bb      	adds	r3, r7, r2
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	2b80      	cmp	r3, #128	; 0x80
 800aa96:	d00c      	beq.n	800aab2 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800aa98:	18bb      	adds	r3, r7, r2
 800aa9a:	781a      	ldrb	r2, [r3, #0]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	0011      	movs	r1, r2
 800aaa0:	0018      	movs	r0, r3
 800aaa2:	f001 f9d8 	bl	800be56 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2180      	movs	r1, #128	; 0x80
 800aaaa:	0018      	movs	r0, r3
 800aaac:	f001 f9d3 	bl	800be56 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aab0:	e02a      	b.n	800ab08 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800aab2:	683a      	ldr	r2, [r7, #0]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	0011      	movs	r1, r2
 800aab8:	0018      	movs	r0, r3
 800aaba:	f000 fcdf 	bl	800b47c <USBD_CtlError>
              break;
 800aabe:	e023      	b.n	800ab08 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	885b      	ldrh	r3, [r3, #2]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d113      	bne.n	800aaf0 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800aac8:	220e      	movs	r2, #14
 800aaca:	18bb      	adds	r3, r7, r2
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00e      	beq.n	800aaf0 <USBD_StdEPReq+0x10e>
 800aad2:	18bb      	adds	r3, r7, r2
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	2b80      	cmp	r3, #128	; 0x80
 800aad8:	d00a      	beq.n	800aaf0 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	88db      	ldrh	r3, [r3, #6]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d106      	bne.n	800aaf0 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800aae2:	18bb      	adds	r3, r7, r2
 800aae4:	781a      	ldrb	r2, [r3, #0]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	0011      	movs	r1, r2
 800aaea:	0018      	movs	r0, r3
 800aaec:	f001 f9b3 	bl	800be56 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	0018      	movs	r0, r3
 800aaf4:	f000 fdaa 	bl	800b64c <USBD_CtlSendStatus>

              break;
 800aaf8:	e006      	b.n	800ab08 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	0011      	movs	r1, r2
 800ab00:	0018      	movs	r0, r3
 800ab02:	f000 fcbb 	bl	800b47c <USBD_CtlError>
              break;
 800ab06:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800ab08:	e112      	b.n	800ad30 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	23a7      	movs	r3, #167	; 0xa7
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	5cd3      	ldrb	r3, [r2, r3]
 800ab12:	2b02      	cmp	r3, #2
 800ab14:	d002      	beq.n	800ab1c <USBD_StdEPReq+0x13a>
 800ab16:	2b03      	cmp	r3, #3
 800ab18:	d01d      	beq.n	800ab56 <USBD_StdEPReq+0x174>
 800ab1a:	e032      	b.n	800ab82 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab1c:	220e      	movs	r2, #14
 800ab1e:	18bb      	adds	r3, r7, r2
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d010      	beq.n	800ab48 <USBD_StdEPReq+0x166>
 800ab26:	18bb      	adds	r3, r7, r2
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	2b80      	cmp	r3, #128	; 0x80
 800ab2c:	d00c      	beq.n	800ab48 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ab2e:	18bb      	adds	r3, r7, r2
 800ab30:	781a      	ldrb	r2, [r3, #0]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	0011      	movs	r1, r2
 800ab36:	0018      	movs	r0, r3
 800ab38:	f001 f98d 	bl	800be56 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2180      	movs	r1, #128	; 0x80
 800ab40:	0018      	movs	r0, r3
 800ab42:	f001 f988 	bl	800be56 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab46:	e024      	b.n	800ab92 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800ab48:	683a      	ldr	r2, [r7, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	0011      	movs	r1, r2
 800ab4e:	0018      	movs	r0, r3
 800ab50:	f000 fc94 	bl	800b47c <USBD_CtlError>
              break;
 800ab54:	e01d      	b.n	800ab92 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	885b      	ldrh	r3, [r3, #2]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d118      	bne.n	800ab90 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ab5e:	210e      	movs	r1, #14
 800ab60:	187b      	adds	r3, r7, r1
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	227f      	movs	r2, #127	; 0x7f
 800ab66:	4013      	ands	r3, r2
 800ab68:	d006      	beq.n	800ab78 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800ab6a:	187b      	adds	r3, r7, r1
 800ab6c:	781a      	ldrb	r2, [r3, #0]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	0011      	movs	r1, r2
 800ab72:	0018      	movs	r0, r3
 800ab74:	f001 f99a 	bl	800beac <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	0018      	movs	r0, r3
 800ab7c:	f000 fd66 	bl	800b64c <USBD_CtlSendStatus>
              }
              break;
 800ab80:	e006      	b.n	800ab90 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800ab82:	683a      	ldr	r2, [r7, #0]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	0011      	movs	r1, r2
 800ab88:	0018      	movs	r0, r3
 800ab8a:	f000 fc77 	bl	800b47c <USBD_CtlError>
              break;
 800ab8e:	e000      	b.n	800ab92 <USBD_StdEPReq+0x1b0>
              break;
 800ab90:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800ab92:	e0cd      	b.n	800ad30 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	23a7      	movs	r3, #167	; 0xa7
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	5cd3      	ldrb	r3, [r2, r3]
 800ab9c:	2b02      	cmp	r3, #2
 800ab9e:	d002      	beq.n	800aba6 <USBD_StdEPReq+0x1c4>
 800aba0:	2b03      	cmp	r3, #3
 800aba2:	d03c      	beq.n	800ac1e <USBD_StdEPReq+0x23c>
 800aba4:	e0b5      	b.n	800ad12 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aba6:	220e      	movs	r2, #14
 800aba8:	18bb      	adds	r3, r7, r2
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d00a      	beq.n	800abc6 <USBD_StdEPReq+0x1e4>
 800abb0:	18bb      	adds	r3, r7, r2
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	2b80      	cmp	r3, #128	; 0x80
 800abb6:	d006      	beq.n	800abc6 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800abb8:	683a      	ldr	r2, [r7, #0]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	0011      	movs	r1, r2
 800abbe:	0018      	movs	r0, r3
 800abc0:	f000 fc5c 	bl	800b47c <USBD_CtlError>
                break;
 800abc4:	e0ac      	b.n	800ad20 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abc6:	220e      	movs	r2, #14
 800abc8:	18bb      	adds	r3, r7, r2
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	b25b      	sxtb	r3, r3
 800abce:	2b00      	cmp	r3, #0
 800abd0:	da0c      	bge.n	800abec <USBD_StdEPReq+0x20a>
 800abd2:	18bb      	adds	r3, r7, r2
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	227f      	movs	r2, #127	; 0x7f
 800abd8:	401a      	ands	r2, r3
 800abda:	0013      	movs	r3, r2
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	189b      	adds	r3, r3, r2
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	3310      	adds	r3, #16
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	18d3      	adds	r3, r2, r3
 800abe8:	3304      	adds	r3, #4
 800abea:	e00d      	b.n	800ac08 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800abec:	230e      	movs	r3, #14
 800abee:	18fb      	adds	r3, r7, r3
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	227f      	movs	r2, #127	; 0x7f
 800abf4:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abf6:	0013      	movs	r3, r2
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	189b      	adds	r3, r3, r2
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	3351      	adds	r3, #81	; 0x51
 800ac00:	33ff      	adds	r3, #255	; 0xff
 800ac02:	687a      	ldr	r2, [r7, #4]
 800ac04:	18d3      	adds	r3, r2, r3
 800ac06:	3304      	adds	r3, #4
 800ac08:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ac10:	68b9      	ldr	r1, [r7, #8]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2202      	movs	r2, #2
 800ac16:	0018      	movs	r0, r3
 800ac18:	f000 fcae 	bl	800b578 <USBD_CtlSendData>
              break;
 800ac1c:	e080      	b.n	800ad20 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ac1e:	220e      	movs	r2, #14
 800ac20:	18bb      	adds	r3, r7, r2
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	b25b      	sxtb	r3, r3
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	da14      	bge.n	800ac54 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ac2a:	18bb      	adds	r3, r7, r2
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	220f      	movs	r2, #15
 800ac30:	401a      	ands	r2, r3
 800ac32:	6879      	ldr	r1, [r7, #4]
 800ac34:	0013      	movs	r3, r2
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	189b      	adds	r3, r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	18cb      	adds	r3, r1, r3
 800ac3e:	3318      	adds	r3, #24
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d11e      	bne.n	800ac84 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800ac46:	683a      	ldr	r2, [r7, #0]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	0011      	movs	r1, r2
 800ac4c:	0018      	movs	r0, r3
 800ac4e:	f000 fc15 	bl	800b47c <USBD_CtlError>
                  break;
 800ac52:	e065      	b.n	800ad20 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ac54:	230e      	movs	r3, #14
 800ac56:	18fb      	adds	r3, r7, r3
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	220f      	movs	r2, #15
 800ac5c:	401a      	ands	r2, r3
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	23ac      	movs	r3, #172	; 0xac
 800ac62:	0059      	lsls	r1, r3, #1
 800ac64:	0013      	movs	r3, r2
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	189b      	adds	r3, r3, r2
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	18c3      	adds	r3, r0, r3
 800ac6e:	185b      	adds	r3, r3, r1
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d106      	bne.n	800ac84 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800ac76:	683a      	ldr	r2, [r7, #0]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	0011      	movs	r1, r2
 800ac7c:	0018      	movs	r0, r3
 800ac7e:	f000 fbfd 	bl	800b47c <USBD_CtlError>
                  break;
 800ac82:	e04d      	b.n	800ad20 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac84:	220e      	movs	r2, #14
 800ac86:	18bb      	adds	r3, r7, r2
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	b25b      	sxtb	r3, r3
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	da0c      	bge.n	800acaa <USBD_StdEPReq+0x2c8>
 800ac90:	18bb      	adds	r3, r7, r2
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	227f      	movs	r2, #127	; 0x7f
 800ac96:	401a      	ands	r2, r3
 800ac98:	0013      	movs	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	189b      	adds	r3, r3, r2
 800ac9e:	009b      	lsls	r3, r3, #2
 800aca0:	3310      	adds	r3, #16
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	18d3      	adds	r3, r2, r3
 800aca6:	3304      	adds	r3, #4
 800aca8:	e00d      	b.n	800acc6 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800acaa:	230e      	movs	r3, #14
 800acac:	18fb      	adds	r3, r7, r3
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	227f      	movs	r2, #127	; 0x7f
 800acb2:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acb4:	0013      	movs	r3, r2
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	189b      	adds	r3, r3, r2
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	3351      	adds	r3, #81	; 0x51
 800acbe:	33ff      	adds	r3, #255	; 0xff
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	18d3      	adds	r3, r2, r3
 800acc4:	3304      	adds	r3, #4
 800acc6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800acc8:	220e      	movs	r2, #14
 800acca:	18bb      	adds	r3, r7, r2
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d003      	beq.n	800acda <USBD_StdEPReq+0x2f8>
 800acd2:	18bb      	adds	r3, r7, r2
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	2b80      	cmp	r3, #128	; 0x80
 800acd8:	d103      	bne.n	800ace2 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	2200      	movs	r2, #0
 800acde:	601a      	str	r2, [r3, #0]
 800ace0:	e010      	b.n	800ad04 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ace2:	230e      	movs	r3, #14
 800ace4:	18fb      	adds	r3, r7, r3
 800ace6:	781a      	ldrb	r2, [r3, #0]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	0011      	movs	r1, r2
 800acec:	0018      	movs	r0, r3
 800acee:	f001 f908 	bl	800bf02 <USBD_LL_IsStallEP>
 800acf2:	1e03      	subs	r3, r0, #0
 800acf4:	d003      	beq.n	800acfe <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	2201      	movs	r2, #1
 800acfa:	601a      	str	r2, [r3, #0]
 800acfc:	e002      	b.n	800ad04 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	2200      	movs	r2, #0
 800ad02:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ad04:	68b9      	ldr	r1, [r7, #8]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2202      	movs	r2, #2
 800ad0a:	0018      	movs	r0, r3
 800ad0c:	f000 fc34 	bl	800b578 <USBD_CtlSendData>
              break;
 800ad10:	e006      	b.n	800ad20 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800ad12:	683a      	ldr	r2, [r7, #0]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	0011      	movs	r1, r2
 800ad18:	0018      	movs	r0, r3
 800ad1a:	f000 fbaf 	bl	800b47c <USBD_CtlError>
              break;
 800ad1e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800ad20:	e006      	b.n	800ad30 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800ad22:	683a      	ldr	r2, [r7, #0]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	0011      	movs	r1, r2
 800ad28:	0018      	movs	r0, r3
 800ad2a:	f000 fba7 	bl	800b47c <USBD_CtlError>
          break;
 800ad2e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800ad30:	e006      	b.n	800ad40 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800ad32:	683a      	ldr	r2, [r7, #0]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	0011      	movs	r1, r2
 800ad38:	0018      	movs	r0, r3
 800ad3a:	f000 fb9f 	bl	800b47c <USBD_CtlError>
      break;
 800ad3e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800ad40:	230f      	movs	r3, #15
 800ad42:	18fb      	adds	r3, r7, r3
 800ad44:	781b      	ldrb	r3, [r3, #0]
}
 800ad46:	0018      	movs	r0, r3
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	b004      	add	sp, #16
 800ad4c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ad50 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad5a:	2308      	movs	r3, #8
 800ad5c:	18fb      	adds	r3, r7, r3
 800ad5e:	2200      	movs	r2, #0
 800ad60:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800ad62:	2300      	movs	r3, #0
 800ad64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ad66:	230b      	movs	r3, #11
 800ad68:	18fb      	adds	r3, r7, r3
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	885b      	ldrh	r3, [r3, #2]
 800ad72:	0a1b      	lsrs	r3, r3, #8
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	2b07      	cmp	r3, #7
 800ad78:	d900      	bls.n	800ad7c <USBD_GetDescriptor+0x2c>
 800ad7a:	e159      	b.n	800b030 <USBD_GetDescriptor+0x2e0>
 800ad7c:	009a      	lsls	r2, r3, #2
 800ad7e:	4bcb      	ldr	r3, [pc, #812]	; (800b0ac <USBD_GetDescriptor+0x35c>)
 800ad80:	18d3      	adds	r3, r2, r3
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	23ac      	movs	r3, #172	; 0xac
 800ad8a:	009b      	lsls	r3, r3, #2
 800ad8c:	58d3      	ldr	r3, [r2, r3]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	687a      	ldr	r2, [r7, #4]
 800ad92:	7c12      	ldrb	r2, [r2, #16]
 800ad94:	2108      	movs	r1, #8
 800ad96:	1879      	adds	r1, r7, r1
 800ad98:	0010      	movs	r0, r2
 800ad9a:	4798      	blx	r3
 800ad9c:	0003      	movs	r3, r0
 800ad9e:	60fb      	str	r3, [r7, #12]
      break;
 800ada0:	e153      	b.n	800b04a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	7c1b      	ldrb	r3, [r3, #16]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d10f      	bne.n	800adca <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	23ad      	movs	r3, #173	; 0xad
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	58d3      	ldr	r3, [r2, r3]
 800adb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adb4:	2208      	movs	r2, #8
 800adb6:	18ba      	adds	r2, r7, r2
 800adb8:	0010      	movs	r0, r2
 800adba:	4798      	blx	r3
 800adbc:	0003      	movs	r3, r0
 800adbe:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	3301      	adds	r3, #1
 800adc4:	2202      	movs	r2, #2
 800adc6:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800adc8:	e13f      	b.n	800b04a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	23ad      	movs	r3, #173	; 0xad
 800adce:	009b      	lsls	r3, r3, #2
 800add0:	58d3      	ldr	r3, [r2, r3]
 800add2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add4:	2208      	movs	r2, #8
 800add6:	18ba      	adds	r2, r7, r2
 800add8:	0010      	movs	r0, r2
 800adda:	4798      	blx	r3
 800addc:	0003      	movs	r3, r0
 800adde:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	3301      	adds	r3, #1
 800ade4:	2202      	movs	r2, #2
 800ade6:	701a      	strb	r2, [r3, #0]
      break;
 800ade8:	e12f      	b.n	800b04a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	885b      	ldrh	r3, [r3, #2]
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	2b05      	cmp	r3, #5
 800adf2:	d900      	bls.n	800adf6 <USBD_GetDescriptor+0xa6>
 800adf4:	e0d0      	b.n	800af98 <USBD_GetDescriptor+0x248>
 800adf6:	009a      	lsls	r2, r3, #2
 800adf8:	4bad      	ldr	r3, [pc, #692]	; (800b0b0 <USBD_GetDescriptor+0x360>)
 800adfa:	18d3      	adds	r3, r2, r3
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	23ac      	movs	r3, #172	; 0xac
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	58d3      	ldr	r3, [r2, r3]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d00d      	beq.n	800ae2a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	23ac      	movs	r3, #172	; 0xac
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	58d3      	ldr	r3, [r2, r3]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	7c12      	ldrb	r2, [r2, #16]
 800ae1c:	2108      	movs	r1, #8
 800ae1e:	1879      	adds	r1, r7, r1
 800ae20:	0010      	movs	r0, r2
 800ae22:	4798      	blx	r3
 800ae24:	0003      	movs	r3, r0
 800ae26:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae28:	e0c3      	b.n	800afb2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800ae2a:	683a      	ldr	r2, [r7, #0]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	0011      	movs	r1, r2
 800ae30:	0018      	movs	r0, r3
 800ae32:	f000 fb23 	bl	800b47c <USBD_CtlError>
            err++;
 800ae36:	210b      	movs	r1, #11
 800ae38:	187b      	adds	r3, r7, r1
 800ae3a:	781a      	ldrb	r2, [r3, #0]
 800ae3c:	187b      	adds	r3, r7, r1
 800ae3e:	3201      	adds	r2, #1
 800ae40:	701a      	strb	r2, [r3, #0]
          break;
 800ae42:	e0b6      	b.n	800afb2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	23ac      	movs	r3, #172	; 0xac
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	58d3      	ldr	r3, [r2, r3]
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d00d      	beq.n	800ae6e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	23ac      	movs	r3, #172	; 0xac
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	58d3      	ldr	r3, [r2, r3]
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	7c12      	ldrb	r2, [r2, #16]
 800ae60:	2108      	movs	r1, #8
 800ae62:	1879      	adds	r1, r7, r1
 800ae64:	0010      	movs	r0, r2
 800ae66:	4798      	blx	r3
 800ae68:	0003      	movs	r3, r0
 800ae6a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae6c:	e0a1      	b.n	800afb2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800ae6e:	683a      	ldr	r2, [r7, #0]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	0011      	movs	r1, r2
 800ae74:	0018      	movs	r0, r3
 800ae76:	f000 fb01 	bl	800b47c <USBD_CtlError>
            err++;
 800ae7a:	210b      	movs	r1, #11
 800ae7c:	187b      	adds	r3, r7, r1
 800ae7e:	781a      	ldrb	r2, [r3, #0]
 800ae80:	187b      	adds	r3, r7, r1
 800ae82:	3201      	adds	r2, #1
 800ae84:	701a      	strb	r2, [r3, #0]
          break;
 800ae86:	e094      	b.n	800afb2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	23ac      	movs	r3, #172	; 0xac
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	58d3      	ldr	r3, [r2, r3]
 800ae90:	68db      	ldr	r3, [r3, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d00d      	beq.n	800aeb2 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	23ac      	movs	r3, #172	; 0xac
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	58d3      	ldr	r3, [r2, r3]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	7c12      	ldrb	r2, [r2, #16]
 800aea4:	2108      	movs	r1, #8
 800aea6:	1879      	adds	r1, r7, r1
 800aea8:	0010      	movs	r0, r2
 800aeaa:	4798      	blx	r3
 800aeac:	0003      	movs	r3, r0
 800aeae:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeb0:	e07f      	b.n	800afb2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800aeb2:	683a      	ldr	r2, [r7, #0]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	0011      	movs	r1, r2
 800aeb8:	0018      	movs	r0, r3
 800aeba:	f000 fadf 	bl	800b47c <USBD_CtlError>
            err++;
 800aebe:	210b      	movs	r1, #11
 800aec0:	187b      	adds	r3, r7, r1
 800aec2:	781a      	ldrb	r2, [r3, #0]
 800aec4:	187b      	adds	r3, r7, r1
 800aec6:	3201      	adds	r2, #1
 800aec8:	701a      	strb	r2, [r3, #0]
          break;
 800aeca:	e072      	b.n	800afb2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	23ac      	movs	r3, #172	; 0xac
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	58d3      	ldr	r3, [r2, r3]
 800aed4:	691b      	ldr	r3, [r3, #16]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00d      	beq.n	800aef6 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	23ac      	movs	r3, #172	; 0xac
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	58d3      	ldr	r3, [r2, r3]
 800aee2:	691b      	ldr	r3, [r3, #16]
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	7c12      	ldrb	r2, [r2, #16]
 800aee8:	2108      	movs	r1, #8
 800aeea:	1879      	adds	r1, r7, r1
 800aeec:	0010      	movs	r0, r2
 800aeee:	4798      	blx	r3
 800aef0:	0003      	movs	r3, r0
 800aef2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aef4:	e05d      	b.n	800afb2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800aef6:	683a      	ldr	r2, [r7, #0]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	0011      	movs	r1, r2
 800aefc:	0018      	movs	r0, r3
 800aefe:	f000 fabd 	bl	800b47c <USBD_CtlError>
            err++;
 800af02:	210b      	movs	r1, #11
 800af04:	187b      	adds	r3, r7, r1
 800af06:	781a      	ldrb	r2, [r3, #0]
 800af08:	187b      	adds	r3, r7, r1
 800af0a:	3201      	adds	r2, #1
 800af0c:	701a      	strb	r2, [r3, #0]
          break;
 800af0e:	e050      	b.n	800afb2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	23ac      	movs	r3, #172	; 0xac
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	58d3      	ldr	r3, [r2, r3]
 800af18:	695b      	ldr	r3, [r3, #20]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d00d      	beq.n	800af3a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	23ac      	movs	r3, #172	; 0xac
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	58d3      	ldr	r3, [r2, r3]
 800af26:	695b      	ldr	r3, [r3, #20]
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	7c12      	ldrb	r2, [r2, #16]
 800af2c:	2108      	movs	r1, #8
 800af2e:	1879      	adds	r1, r7, r1
 800af30:	0010      	movs	r0, r2
 800af32:	4798      	blx	r3
 800af34:	0003      	movs	r3, r0
 800af36:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af38:	e03b      	b.n	800afb2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800af3a:	683a      	ldr	r2, [r7, #0]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	0011      	movs	r1, r2
 800af40:	0018      	movs	r0, r3
 800af42:	f000 fa9b 	bl	800b47c <USBD_CtlError>
            err++;
 800af46:	210b      	movs	r1, #11
 800af48:	187b      	adds	r3, r7, r1
 800af4a:	781a      	ldrb	r2, [r3, #0]
 800af4c:	187b      	adds	r3, r7, r1
 800af4e:	3201      	adds	r2, #1
 800af50:	701a      	strb	r2, [r3, #0]
          break;
 800af52:	e02e      	b.n	800afb2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	23ac      	movs	r3, #172	; 0xac
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	58d3      	ldr	r3, [r2, r3]
 800af5c:	699b      	ldr	r3, [r3, #24]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d00d      	beq.n	800af7e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	23ac      	movs	r3, #172	; 0xac
 800af66:	009b      	lsls	r3, r3, #2
 800af68:	58d3      	ldr	r3, [r2, r3]
 800af6a:	699b      	ldr	r3, [r3, #24]
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	7c12      	ldrb	r2, [r2, #16]
 800af70:	2108      	movs	r1, #8
 800af72:	1879      	adds	r1, r7, r1
 800af74:	0010      	movs	r0, r2
 800af76:	4798      	blx	r3
 800af78:	0003      	movs	r3, r0
 800af7a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af7c:	e019      	b.n	800afb2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800af7e:	683a      	ldr	r2, [r7, #0]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	0011      	movs	r1, r2
 800af84:	0018      	movs	r0, r3
 800af86:	f000 fa79 	bl	800b47c <USBD_CtlError>
            err++;
 800af8a:	210b      	movs	r1, #11
 800af8c:	187b      	adds	r3, r7, r1
 800af8e:	781a      	ldrb	r2, [r3, #0]
 800af90:	187b      	adds	r3, r7, r1
 800af92:	3201      	adds	r2, #1
 800af94:	701a      	strb	r2, [r3, #0]
          break;
 800af96:	e00c      	b.n	800afb2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800af98:	683a      	ldr	r2, [r7, #0]
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	0011      	movs	r1, r2
 800af9e:	0018      	movs	r0, r3
 800afa0:	f000 fa6c 	bl	800b47c <USBD_CtlError>
          err++;
 800afa4:	210b      	movs	r1, #11
 800afa6:	187b      	adds	r3, r7, r1
 800afa8:	781a      	ldrb	r2, [r3, #0]
 800afaa:	187b      	adds	r3, r7, r1
 800afac:	3201      	adds	r2, #1
 800afae:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800afb0:	e04b      	b.n	800b04a <USBD_GetDescriptor+0x2fa>
 800afb2:	e04a      	b.n	800b04a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	7c1b      	ldrb	r3, [r3, #16]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d10b      	bne.n	800afd4 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	23ad      	movs	r3, #173	; 0xad
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	58d3      	ldr	r3, [r2, r3]
 800afc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afc6:	2208      	movs	r2, #8
 800afc8:	18ba      	adds	r2, r7, r2
 800afca:	0010      	movs	r0, r2
 800afcc:	4798      	blx	r3
 800afce:	0003      	movs	r3, r0
 800afd0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afd2:	e03a      	b.n	800b04a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800afd4:	683a      	ldr	r2, [r7, #0]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	0011      	movs	r1, r2
 800afda:	0018      	movs	r0, r3
 800afdc:	f000 fa4e 	bl	800b47c <USBD_CtlError>
        err++;
 800afe0:	210b      	movs	r1, #11
 800afe2:	187b      	adds	r3, r7, r1
 800afe4:	781a      	ldrb	r2, [r3, #0]
 800afe6:	187b      	adds	r3, r7, r1
 800afe8:	3201      	adds	r2, #1
 800afea:	701a      	strb	r2, [r3, #0]
      break;
 800afec:	e02d      	b.n	800b04a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	7c1b      	ldrb	r3, [r3, #16]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d10f      	bne.n	800b016 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	23ad      	movs	r3, #173	; 0xad
 800affa:	009b      	lsls	r3, r3, #2
 800affc:	58d3      	ldr	r3, [r2, r3]
 800affe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b000:	2208      	movs	r2, #8
 800b002:	18ba      	adds	r2, r7, r2
 800b004:	0010      	movs	r0, r2
 800b006:	4798      	blx	r3
 800b008:	0003      	movs	r3, r0
 800b00a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	3301      	adds	r3, #1
 800b010:	2207      	movs	r2, #7
 800b012:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b014:	e019      	b.n	800b04a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800b016:	683a      	ldr	r2, [r7, #0]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	0011      	movs	r1, r2
 800b01c:	0018      	movs	r0, r3
 800b01e:	f000 fa2d 	bl	800b47c <USBD_CtlError>
        err++;
 800b022:	210b      	movs	r1, #11
 800b024:	187b      	adds	r3, r7, r1
 800b026:	781a      	ldrb	r2, [r3, #0]
 800b028:	187b      	adds	r3, r7, r1
 800b02a:	3201      	adds	r2, #1
 800b02c:	701a      	strb	r2, [r3, #0]
      break;
 800b02e:	e00c      	b.n	800b04a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800b030:	683a      	ldr	r2, [r7, #0]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	0011      	movs	r1, r2
 800b036:	0018      	movs	r0, r3
 800b038:	f000 fa20 	bl	800b47c <USBD_CtlError>
      err++;
 800b03c:	210b      	movs	r1, #11
 800b03e:	187b      	adds	r3, r7, r1
 800b040:	781a      	ldrb	r2, [r3, #0]
 800b042:	187b      	adds	r3, r7, r1
 800b044:	3201      	adds	r2, #1
 800b046:	701a      	strb	r2, [r3, #0]
      break;
 800b048:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800b04a:	230b      	movs	r3, #11
 800b04c:	18fb      	adds	r3, r7, r3
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d127      	bne.n	800b0a4 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b054:	2108      	movs	r1, #8
 800b056:	187b      	adds	r3, r7, r1
 800b058:	881b      	ldrh	r3, [r3, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d019      	beq.n	800b092 <USBD_GetDescriptor+0x342>
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	88db      	ldrh	r3, [r3, #6]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d015      	beq.n	800b092 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	88da      	ldrh	r2, [r3, #6]
 800b06a:	187b      	adds	r3, r7, r1
 800b06c:	881b      	ldrh	r3, [r3, #0]
 800b06e:	1c18      	adds	r0, r3, #0
 800b070:	1c11      	adds	r1, r2, #0
 800b072:	b28a      	uxth	r2, r1
 800b074:	b283      	uxth	r3, r0
 800b076:	429a      	cmp	r2, r3
 800b078:	d900      	bls.n	800b07c <USBD_GetDescriptor+0x32c>
 800b07a:	1c01      	adds	r1, r0, #0
 800b07c:	b28a      	uxth	r2, r1
 800b07e:	2108      	movs	r1, #8
 800b080:	187b      	adds	r3, r7, r1
 800b082:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b084:	187b      	adds	r3, r7, r1
 800b086:	881a      	ldrh	r2, [r3, #0]
 800b088:	68f9      	ldr	r1, [r7, #12]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	0018      	movs	r0, r3
 800b08e:	f000 fa73 	bl	800b578 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	88db      	ldrh	r3, [r3, #6]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d105      	bne.n	800b0a6 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	0018      	movs	r0, r3
 800b09e:	f000 fad5 	bl	800b64c <USBD_CtlSendStatus>
 800b0a2:	e000      	b.n	800b0a6 <USBD_GetDescriptor+0x356>
    return;
 800b0a4:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	b004      	add	sp, #16
 800b0aa:	bd80      	pop	{r7, pc}
 800b0ac:	0800cbb0 	.word	0x0800cbb0
 800b0b0:	0800cbd0 	.word	0x0800cbd0

0800b0b4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b0b4:	b590      	push	{r4, r7, lr}
 800b0b6:	b085      	sub	sp, #20
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	889b      	ldrh	r3, [r3, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d13d      	bne.n	800b142 <USBD_SetAddress+0x8e>
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	88db      	ldrh	r3, [r3, #6]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d139      	bne.n	800b142 <USBD_SetAddress+0x8e>
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	885b      	ldrh	r3, [r3, #2]
 800b0d2:	2b7f      	cmp	r3, #127	; 0x7f
 800b0d4:	d835      	bhi.n	800b142 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	885b      	ldrh	r3, [r3, #2]
 800b0da:	b2da      	uxtb	r2, r3
 800b0dc:	230f      	movs	r3, #15
 800b0de:	18fb      	adds	r3, r7, r3
 800b0e0:	217f      	movs	r1, #127	; 0x7f
 800b0e2:	400a      	ands	r2, r1
 800b0e4:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	23a7      	movs	r3, #167	; 0xa7
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	5cd3      	ldrb	r3, [r2, r3]
 800b0ee:	2b03      	cmp	r3, #3
 800b0f0:	d106      	bne.n	800b100 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800b0f2:	683a      	ldr	r2, [r7, #0]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	0011      	movs	r1, r2
 800b0f8:	0018      	movs	r0, r3
 800b0fa:	f000 f9bf 	bl	800b47c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0fe:	e027      	b.n	800b150 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	240f      	movs	r4, #15
 800b104:	193a      	adds	r2, r7, r4
 800b106:	4914      	ldr	r1, [pc, #80]	; (800b158 <USBD_SetAddress+0xa4>)
 800b108:	7812      	ldrb	r2, [r2, #0]
 800b10a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b10c:	193b      	adds	r3, r7, r4
 800b10e:	781a      	ldrb	r2, [r3, #0]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	0011      	movs	r1, r2
 800b114:	0018      	movs	r0, r3
 800b116:	f000 ff25 	bl	800bf64 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	0018      	movs	r0, r3
 800b11e:	f000 fa95 	bl	800b64c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b122:	193b      	adds	r3, r7, r4
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d005      	beq.n	800b136 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	23a7      	movs	r3, #167	; 0xa7
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	2102      	movs	r1, #2
 800b132:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b134:	e00c      	b.n	800b150 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	23a7      	movs	r3, #167	; 0xa7
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	2101      	movs	r1, #1
 800b13e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b140:	e006      	b.n	800b150 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b142:	683a      	ldr	r2, [r7, #0]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	0011      	movs	r1, r2
 800b148:	0018      	movs	r0, r3
 800b14a:	f000 f997 	bl	800b47c <USBD_CtlError>
  }
}
 800b14e:	46c0      	nop			; (mov r8, r8)
 800b150:	46c0      	nop			; (mov r8, r8)
 800b152:	46bd      	mov	sp, r7
 800b154:	b005      	add	sp, #20
 800b156:	bd90      	pop	{r4, r7, pc}
 800b158:	0000029e 	.word	0x0000029e

0800b15c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	885b      	ldrh	r3, [r3, #2]
 800b16a:	b2da      	uxtb	r2, r3
 800b16c:	4b4c      	ldr	r3, [pc, #304]	; (800b2a0 <USBD_SetConfig+0x144>)
 800b16e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b170:	4b4b      	ldr	r3, [pc, #300]	; (800b2a0 <USBD_SetConfig+0x144>)
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	2b01      	cmp	r3, #1
 800b176:	d906      	bls.n	800b186 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800b178:	683a      	ldr	r2, [r7, #0]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	0011      	movs	r1, r2
 800b17e:	0018      	movs	r0, r3
 800b180:	f000 f97c 	bl	800b47c <USBD_CtlError>
 800b184:	e088      	b.n	800b298 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	23a7      	movs	r3, #167	; 0xa7
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	5cd3      	ldrb	r3, [r2, r3]
 800b18e:	2b02      	cmp	r3, #2
 800b190:	d002      	beq.n	800b198 <USBD_SetConfig+0x3c>
 800b192:	2b03      	cmp	r3, #3
 800b194:	d029      	beq.n	800b1ea <USBD_SetConfig+0x8e>
 800b196:	e071      	b.n	800b27c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b198:	4b41      	ldr	r3, [pc, #260]	; (800b2a0 <USBD_SetConfig+0x144>)
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d01f      	beq.n	800b1e0 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800b1a0:	4b3f      	ldr	r3, [pc, #252]	; (800b2a0 <USBD_SetConfig+0x144>)
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	001a      	movs	r2, r3
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	23a7      	movs	r3, #167	; 0xa7
 800b1ae:	009b      	lsls	r3, r3, #2
 800b1b0:	2103      	movs	r1, #3
 800b1b2:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b1b4:	4b3a      	ldr	r3, [pc, #232]	; (800b2a0 <USBD_SetConfig+0x144>)
 800b1b6:	781a      	ldrb	r2, [r3, #0]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	0011      	movs	r1, r2
 800b1bc:	0018      	movs	r0, r3
 800b1be:	f7ff f8c6 	bl	800a34e <USBD_SetClassConfig>
 800b1c2:	0003      	movs	r3, r0
 800b1c4:	2b02      	cmp	r3, #2
 800b1c6:	d106      	bne.n	800b1d6 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800b1c8:	683a      	ldr	r2, [r7, #0]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	0011      	movs	r1, r2
 800b1ce:	0018      	movs	r0, r3
 800b1d0:	f000 f954 	bl	800b47c <USBD_CtlError>
            return;
 800b1d4:	e060      	b.n	800b298 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	0018      	movs	r0, r3
 800b1da:	f000 fa37 	bl	800b64c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b1de:	e05b      	b.n	800b298 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	0018      	movs	r0, r3
 800b1e4:	f000 fa32 	bl	800b64c <USBD_CtlSendStatus>
        break;
 800b1e8:	e056      	b.n	800b298 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b1ea:	4b2d      	ldr	r3, [pc, #180]	; (800b2a0 <USBD_SetConfig+0x144>)
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d115      	bne.n	800b21e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	23a7      	movs	r3, #167	; 0xa7
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	2102      	movs	r1, #2
 800b1fa:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800b1fc:	4b28      	ldr	r3, [pc, #160]	; (800b2a0 <USBD_SetConfig+0x144>)
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	001a      	movs	r2, r3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b206:	4b26      	ldr	r3, [pc, #152]	; (800b2a0 <USBD_SetConfig+0x144>)
 800b208:	781a      	ldrb	r2, [r3, #0]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	0011      	movs	r1, r2
 800b20e:	0018      	movs	r0, r3
 800b210:	f7ff f8c4 	bl	800a39c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	0018      	movs	r0, r3
 800b218:	f000 fa18 	bl	800b64c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b21c:	e03c      	b.n	800b298 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800b21e:	4b20      	ldr	r3, [pc, #128]	; (800b2a0 <USBD_SetConfig+0x144>)
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	001a      	movs	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d022      	beq.n	800b272 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	b2da      	uxtb	r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	0011      	movs	r1, r2
 800b236:	0018      	movs	r0, r3
 800b238:	f7ff f8b0 	bl	800a39c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b23c:	4b18      	ldr	r3, [pc, #96]	; (800b2a0 <USBD_SetConfig+0x144>)
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	001a      	movs	r2, r3
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b246:	4b16      	ldr	r3, [pc, #88]	; (800b2a0 <USBD_SetConfig+0x144>)
 800b248:	781a      	ldrb	r2, [r3, #0]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	0011      	movs	r1, r2
 800b24e:	0018      	movs	r0, r3
 800b250:	f7ff f87d 	bl	800a34e <USBD_SetClassConfig>
 800b254:	0003      	movs	r3, r0
 800b256:	2b02      	cmp	r3, #2
 800b258:	d106      	bne.n	800b268 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800b25a:	683a      	ldr	r2, [r7, #0]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	0011      	movs	r1, r2
 800b260:	0018      	movs	r0, r3
 800b262:	f000 f90b 	bl	800b47c <USBD_CtlError>
            return;
 800b266:	e017      	b.n	800b298 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	0018      	movs	r0, r3
 800b26c:	f000 f9ee 	bl	800b64c <USBD_CtlSendStatus>
        break;
 800b270:	e012      	b.n	800b298 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	0018      	movs	r0, r3
 800b276:	f000 f9e9 	bl	800b64c <USBD_CtlSendStatus>
        break;
 800b27a:	e00d      	b.n	800b298 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800b27c:	683a      	ldr	r2, [r7, #0]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	0011      	movs	r1, r2
 800b282:	0018      	movs	r0, r3
 800b284:	f000 f8fa 	bl	800b47c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b288:	4b05      	ldr	r3, [pc, #20]	; (800b2a0 <USBD_SetConfig+0x144>)
 800b28a:	781a      	ldrb	r2, [r3, #0]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	0011      	movs	r1, r2
 800b290:	0018      	movs	r0, r3
 800b292:	f7ff f883 	bl	800a39c <USBD_ClrClassConfig>
        break;
 800b296:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800b298:	46bd      	mov	sp, r7
 800b29a:	b002      	add	sp, #8
 800b29c:	bd80      	pop	{r7, pc}
 800b29e:	46c0      	nop			; (mov r8, r8)
 800b2a0:	2000025d 	.word	0x2000025d

0800b2a4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	88db      	ldrh	r3, [r3, #6]
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d006      	beq.n	800b2c4 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800b2b6:	683a      	ldr	r2, [r7, #0]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	0011      	movs	r1, r2
 800b2bc:	0018      	movs	r0, r3
 800b2be:	f000 f8dd 	bl	800b47c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b2c2:	e026      	b.n	800b312 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	23a7      	movs	r3, #167	; 0xa7
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	5cd3      	ldrb	r3, [r2, r3]
 800b2cc:	2b02      	cmp	r3, #2
 800b2ce:	dc02      	bgt.n	800b2d6 <USBD_GetConfig+0x32>
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	dc03      	bgt.n	800b2dc <USBD_GetConfig+0x38>
 800b2d4:	e016      	b.n	800b304 <USBD_GetConfig+0x60>
 800b2d6:	2b03      	cmp	r3, #3
 800b2d8:	d00c      	beq.n	800b2f4 <USBD_GetConfig+0x50>
 800b2da:	e013      	b.n	800b304 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	3308      	adds	r3, #8
 800b2e6:	0019      	movs	r1, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	0018      	movs	r0, r3
 800b2ee:	f000 f943 	bl	800b578 <USBD_CtlSendData>
        break;
 800b2f2:	e00e      	b.n	800b312 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	1d19      	adds	r1, r3, #4
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	0018      	movs	r0, r3
 800b2fe:	f000 f93b 	bl	800b578 <USBD_CtlSendData>
        break;
 800b302:	e006      	b.n	800b312 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800b304:	683a      	ldr	r2, [r7, #0]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	0011      	movs	r1, r2
 800b30a:	0018      	movs	r0, r3
 800b30c:	f000 f8b6 	bl	800b47c <USBD_CtlError>
        break;
 800b310:	46c0      	nop			; (mov r8, r8)
}
 800b312:	46c0      	nop			; (mov r8, r8)
 800b314:	46bd      	mov	sp, r7
 800b316:	b002      	add	sp, #8
 800b318:	bd80      	pop	{r7, pc}

0800b31a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b082      	sub	sp, #8
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
 800b322:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	23a7      	movs	r3, #167	; 0xa7
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	5cd3      	ldrb	r3, [r2, r3]
 800b32c:	3b01      	subs	r3, #1
 800b32e:	2b02      	cmp	r3, #2
 800b330:	d822      	bhi.n	800b378 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	88db      	ldrh	r3, [r3, #6]
 800b336:	2b02      	cmp	r3, #2
 800b338:	d006      	beq.n	800b348 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800b33a:	683a      	ldr	r2, [r7, #0]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	0011      	movs	r1, r2
 800b340:	0018      	movs	r0, r3
 800b342:	f000 f89b 	bl	800b47c <USBD_CtlError>
        break;
 800b346:	e01e      	b.n	800b386 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	23a9      	movs	r3, #169	; 0xa9
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	58d3      	ldr	r3, [r2, r3]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d005      	beq.n	800b366 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	2202      	movs	r2, #2
 800b360:	431a      	orrs	r2, r3
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	330c      	adds	r3, #12
 800b36a:	0019      	movs	r1, r3
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2202      	movs	r2, #2
 800b370:	0018      	movs	r0, r3
 800b372:	f000 f901 	bl	800b578 <USBD_CtlSendData>
      break;
 800b376:	e006      	b.n	800b386 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800b378:	683a      	ldr	r2, [r7, #0]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	0011      	movs	r1, r2
 800b37e:	0018      	movs	r0, r3
 800b380:	f000 f87c 	bl	800b47c <USBD_CtlError>
      break;
 800b384:	46c0      	nop			; (mov r8, r8)
  }
}
 800b386:	46c0      	nop			; (mov r8, r8)
 800b388:	46bd      	mov	sp, r7
 800b38a:	b002      	add	sp, #8
 800b38c:	bd80      	pop	{r7, pc}

0800b38e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b38e:	b580      	push	{r7, lr}
 800b390:	b082      	sub	sp, #8
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
 800b396:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	885b      	ldrh	r3, [r3, #2]
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d108      	bne.n	800b3b2 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	23a9      	movs	r3, #169	; 0xa9
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	2101      	movs	r1, #1
 800b3a8:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	0018      	movs	r0, r3
 800b3ae:	f000 f94d 	bl	800b64c <USBD_CtlSendStatus>
  }
}
 800b3b2:	46c0      	nop			; (mov r8, r8)
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	b002      	add	sp, #8
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b3ba:	b580      	push	{r7, lr}
 800b3bc:	b082      	sub	sp, #8
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
 800b3c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	23a7      	movs	r3, #167	; 0xa7
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	5cd3      	ldrb	r3, [r2, r3]
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	2b02      	cmp	r3, #2
 800b3d0:	d80d      	bhi.n	800b3ee <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	885b      	ldrh	r3, [r3, #2]
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d110      	bne.n	800b3fc <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	23a9      	movs	r3, #169	; 0xa9
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	2100      	movs	r1, #0
 800b3e2:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	0018      	movs	r0, r3
 800b3e8:	f000 f930 	bl	800b64c <USBD_CtlSendStatus>
      }
      break;
 800b3ec:	e006      	b.n	800b3fc <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800b3ee:	683a      	ldr	r2, [r7, #0]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	0011      	movs	r1, r2
 800b3f4:	0018      	movs	r0, r3
 800b3f6:	f000 f841 	bl	800b47c <USBD_CtlError>
      break;
 800b3fa:	e000      	b.n	800b3fe <USBD_ClrFeature+0x44>
      break;
 800b3fc:	46c0      	nop			; (mov r8, r8)
  }
}
 800b3fe:	46c0      	nop			; (mov r8, r8)
 800b400:	46bd      	mov	sp, r7
 800b402:	b002      	add	sp, #8
 800b404:	bd80      	pop	{r7, pc}

0800b406 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b406:	b580      	push	{r7, lr}
 800b408:	b082      	sub	sp, #8
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
 800b40e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	781a      	ldrb	r2, [r3, #0]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	785a      	ldrb	r2, [r3, #1]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	3302      	adds	r3, #2
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	b29a      	uxth	r2, r3
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	3303      	adds	r3, #3
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	b29b      	uxth	r3, r3
 800b430:	021b      	lsls	r3, r3, #8
 800b432:	b29b      	uxth	r3, r3
 800b434:	18d3      	adds	r3, r2, r3
 800b436:	b29a      	uxth	r2, r3
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	3304      	adds	r3, #4
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	b29a      	uxth	r2, r3
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	3305      	adds	r3, #5
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	021b      	lsls	r3, r3, #8
 800b44e:	b29b      	uxth	r3, r3
 800b450:	18d3      	adds	r3, r2, r3
 800b452:	b29a      	uxth	r2, r3
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	3306      	adds	r3, #6
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	b29a      	uxth	r2, r3
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	3307      	adds	r3, #7
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	b29b      	uxth	r3, r3
 800b468:	021b      	lsls	r3, r3, #8
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	18d3      	adds	r3, r2, r3
 800b46e:	b29a      	uxth	r2, r3
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	80da      	strh	r2, [r3, #6]

}
 800b474:	46c0      	nop			; (mov r8, r8)
 800b476:	46bd      	mov	sp, r7
 800b478:	b002      	add	sp, #8
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2180      	movs	r1, #128	; 0x80
 800b48a:	0018      	movs	r0, r3
 800b48c:	f000 fce3 	bl	800be56 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2100      	movs	r1, #0
 800b494:	0018      	movs	r0, r3
 800b496:	f000 fcde 	bl	800be56 <USBD_LL_StallEP>
}
 800b49a:	46c0      	nop			; (mov r8, r8)
 800b49c:	46bd      	mov	sp, r7
 800b49e:	b002      	add	sp, #8
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b4a2:	b590      	push	{r4, r7, lr}
 800b4a4:	b087      	sub	sp, #28
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	60f8      	str	r0, [r7, #12]
 800b4aa:	60b9      	str	r1, [r7, #8]
 800b4ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b4ae:	2417      	movs	r4, #23
 800b4b0:	193b      	adds	r3, r7, r4
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d03c      	beq.n	800b536 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	0018      	movs	r0, r3
 800b4c0:	f000 f83d 	bl	800b53e <USBD_GetLen>
 800b4c4:	0003      	movs	r3, r0
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	18db      	adds	r3, r3, r3
 800b4cc:	b29a      	uxth	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b4d2:	193b      	adds	r3, r7, r4
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	193a      	adds	r2, r7, r4
 800b4d8:	1c59      	adds	r1, r3, #1
 800b4da:	7011      	strb	r1, [r2, #0]
 800b4dc:	001a      	movs	r2, r3
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	189b      	adds	r3, r3, r2
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	7812      	ldrb	r2, [r2, #0]
 800b4e6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b4e8:	193b      	adds	r3, r7, r4
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	193a      	adds	r2, r7, r4
 800b4ee:	1c59      	adds	r1, r3, #1
 800b4f0:	7011      	strb	r1, [r2, #0]
 800b4f2:	001a      	movs	r2, r3
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	189b      	adds	r3, r3, r2
 800b4f8:	2203      	movs	r2, #3
 800b4fa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b4fc:	e017      	b.n	800b52e <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	1c5a      	adds	r2, r3, #1
 800b502:	60fa      	str	r2, [r7, #12]
 800b504:	2417      	movs	r4, #23
 800b506:	193a      	adds	r2, r7, r4
 800b508:	7812      	ldrb	r2, [r2, #0]
 800b50a:	1939      	adds	r1, r7, r4
 800b50c:	1c50      	adds	r0, r2, #1
 800b50e:	7008      	strb	r0, [r1, #0]
 800b510:	0011      	movs	r1, r2
 800b512:	68ba      	ldr	r2, [r7, #8]
 800b514:	1852      	adds	r2, r2, r1
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b51a:	193b      	adds	r3, r7, r4
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	193a      	adds	r2, r7, r4
 800b520:	1c59      	adds	r1, r3, #1
 800b522:	7011      	strb	r1, [r2, #0]
 800b524:	001a      	movs	r2, r3
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	189b      	adds	r3, r3, r2
 800b52a:	2200      	movs	r2, #0
 800b52c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	781b      	ldrb	r3, [r3, #0]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d1e3      	bne.n	800b4fe <USBD_GetString+0x5c>
    }
  }
}
 800b536:	46c0      	nop			; (mov r8, r8)
 800b538:	46bd      	mov	sp, r7
 800b53a:	b007      	add	sp, #28
 800b53c:	bd90      	pop	{r4, r7, pc}

0800b53e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b53e:	b580      	push	{r7, lr}
 800b540:	b084      	sub	sp, #16
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b546:	230f      	movs	r3, #15
 800b548:	18fb      	adds	r3, r7, r3
 800b54a:	2200      	movs	r2, #0
 800b54c:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800b54e:	e008      	b.n	800b562 <USBD_GetLen+0x24>
  {
    len++;
 800b550:	210f      	movs	r1, #15
 800b552:	187b      	adds	r3, r7, r1
 800b554:	781a      	ldrb	r2, [r3, #0]
 800b556:	187b      	adds	r3, r7, r1
 800b558:	3201      	adds	r2, #1
 800b55a:	701a      	strb	r2, [r3, #0]
    buf++;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	3301      	adds	r3, #1
 800b560:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	781b      	ldrb	r3, [r3, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1f2      	bne.n	800b550 <USBD_GetLen+0x12>
  }

  return len;
 800b56a:	230f      	movs	r3, #15
 800b56c:	18fb      	adds	r3, r7, r3
 800b56e:	781b      	ldrb	r3, [r3, #0]
}
 800b570:	0018      	movs	r0, r3
 800b572:	46bd      	mov	sp, r7
 800b574:	b004      	add	sp, #16
 800b576:	bd80      	pop	{r7, pc}

0800b578 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	1dbb      	adds	r3, r7, #6
 800b584:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b586:	68fa      	ldr	r2, [r7, #12]
 800b588:	23a5      	movs	r3, #165	; 0xa5
 800b58a:	009b      	lsls	r3, r3, #2
 800b58c:	2102      	movs	r1, #2
 800b58e:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800b590:	1dbb      	adds	r3, r7, #6
 800b592:	881a      	ldrh	r2, [r3, #0]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b598:	1dbb      	adds	r3, r7, #6
 800b59a:	881a      	ldrh	r2, [r3, #0]
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b5a0:	1dbb      	adds	r3, r7, #6
 800b5a2:	881b      	ldrh	r3, [r3, #0]
 800b5a4:	68ba      	ldr	r2, [r7, #8]
 800b5a6:	68f8      	ldr	r0, [r7, #12]
 800b5a8:	2100      	movs	r1, #0
 800b5aa:	f000 fd06 	bl	800bfba <USBD_LL_Transmit>

  return USBD_OK;
 800b5ae:	2300      	movs	r3, #0
}
 800b5b0:	0018      	movs	r0, r3
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	b004      	add	sp, #16
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	1dbb      	adds	r3, r7, #6
 800b5c4:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b5c6:	1dbb      	adds	r3, r7, #6
 800b5c8:	881b      	ldrh	r3, [r3, #0]
 800b5ca:	68ba      	ldr	r2, [r7, #8]
 800b5cc:	68f8      	ldr	r0, [r7, #12]
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	f000 fcf3 	bl	800bfba <USBD_LL_Transmit>

  return USBD_OK;
 800b5d4:	2300      	movs	r3, #0
}
 800b5d6:	0018      	movs	r0, r3
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	b004      	add	sp, #16
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b084      	sub	sp, #16
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	60f8      	str	r0, [r7, #12]
 800b5e6:	60b9      	str	r1, [r7, #8]
 800b5e8:	1dbb      	adds	r3, r7, #6
 800b5ea:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b5ec:	68fa      	ldr	r2, [r7, #12]
 800b5ee:	23a5      	movs	r3, #165	; 0xa5
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	2103      	movs	r1, #3
 800b5f4:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800b5f6:	1dbb      	adds	r3, r7, #6
 800b5f8:	8819      	ldrh	r1, [r3, #0]
 800b5fa:	68fa      	ldr	r2, [r7, #12]
 800b5fc:	23ae      	movs	r3, #174	; 0xae
 800b5fe:	005b      	lsls	r3, r3, #1
 800b600:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800b602:	1dbb      	adds	r3, r7, #6
 800b604:	8819      	ldrh	r1, [r3, #0]
 800b606:	68fa      	ldr	r2, [r7, #12]
 800b608:	23b0      	movs	r3, #176	; 0xb0
 800b60a:	005b      	lsls	r3, r3, #1
 800b60c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b60e:	1dbb      	adds	r3, r7, #6
 800b610:	881b      	ldrh	r3, [r3, #0]
 800b612:	68ba      	ldr	r2, [r7, #8]
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	2100      	movs	r1, #0
 800b618:	f000 fd06 	bl	800c028 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b61c:	2300      	movs	r3, #0
}
 800b61e:	0018      	movs	r0, r3
 800b620:	46bd      	mov	sp, r7
 800b622:	b004      	add	sp, #16
 800b624:	bd80      	pop	{r7, pc}

0800b626 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b626:	b580      	push	{r7, lr}
 800b628:	b084      	sub	sp, #16
 800b62a:	af00      	add	r7, sp, #0
 800b62c:	60f8      	str	r0, [r7, #12]
 800b62e:	60b9      	str	r1, [r7, #8]
 800b630:	1dbb      	adds	r3, r7, #6
 800b632:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b634:	1dbb      	adds	r3, r7, #6
 800b636:	881b      	ldrh	r3, [r3, #0]
 800b638:	68ba      	ldr	r2, [r7, #8]
 800b63a:	68f8      	ldr	r0, [r7, #12]
 800b63c:	2100      	movs	r1, #0
 800b63e:	f000 fcf3 	bl	800c028 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b642:	2300      	movs	r3, #0
}
 800b644:	0018      	movs	r0, r3
 800b646:	46bd      	mov	sp, r7
 800b648:	b004      	add	sp, #16
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	23a5      	movs	r3, #165	; 0xa5
 800b658:	009b      	lsls	r3, r3, #2
 800b65a:	2104      	movs	r1, #4
 800b65c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	2300      	movs	r3, #0
 800b662:	2200      	movs	r2, #0
 800b664:	2100      	movs	r1, #0
 800b666:	f000 fca8 	bl	800bfba <USBD_LL_Transmit>

  return USBD_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	0018      	movs	r0, r3
 800b66e:	46bd      	mov	sp, r7
 800b670:	b002      	add	sp, #8
 800b672:	bd80      	pop	{r7, pc}

0800b674 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b67c:	687a      	ldr	r2, [r7, #4]
 800b67e:	23a5      	movs	r3, #165	; 0xa5
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	2105      	movs	r1, #5
 800b684:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	2300      	movs	r3, #0
 800b68a:	2200      	movs	r2, #0
 800b68c:	2100      	movs	r1, #0
 800b68e:	f000 fccb 	bl	800c028 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b692:	2300      	movs	r3, #0
}
 800b694:	0018      	movs	r0, r3
 800b696:	46bd      	mov	sp, r7
 800b698:	b002      	add	sp, #8
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b6a0:	4914      	ldr	r1, [pc, #80]	; (800b6f4 <MX_USB_DEVICE_Init+0x58>)
 800b6a2:	4b15      	ldr	r3, [pc, #84]	; (800b6f8 <MX_USB_DEVICE_Init+0x5c>)
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	0018      	movs	r0, r3
 800b6a8:	f7fe fdea 	bl	800a280 <USBD_Init>
 800b6ac:	1e03      	subs	r3, r0, #0
 800b6ae:	d001      	beq.n	800b6b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b6b0:	f7f5 ffa8 	bl	8001604 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b6b4:	4a11      	ldr	r2, [pc, #68]	; (800b6fc <MX_USB_DEVICE_Init+0x60>)
 800b6b6:	4b10      	ldr	r3, [pc, #64]	; (800b6f8 <MX_USB_DEVICE_Init+0x5c>)
 800b6b8:	0011      	movs	r1, r2
 800b6ba:	0018      	movs	r0, r3
 800b6bc:	f7fe fe11 	bl	800a2e2 <USBD_RegisterClass>
 800b6c0:	1e03      	subs	r3, r0, #0
 800b6c2:	d001      	beq.n	800b6c8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800b6c4:	f7f5 ff9e 	bl	8001604 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b6c8:	4a0d      	ldr	r2, [pc, #52]	; (800b700 <MX_USB_DEVICE_Init+0x64>)
 800b6ca:	4b0b      	ldr	r3, [pc, #44]	; (800b6f8 <MX_USB_DEVICE_Init+0x5c>)
 800b6cc:	0011      	movs	r1, r2
 800b6ce:	0018      	movs	r0, r3
 800b6d0:	f7fe fd26 	bl	800a120 <USBD_CDC_RegisterInterface>
 800b6d4:	1e03      	subs	r3, r0, #0
 800b6d6:	d001      	beq.n	800b6dc <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800b6d8:	f7f5 ff94 	bl	8001604 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b6dc:	4b06      	ldr	r3, [pc, #24]	; (800b6f8 <MX_USB_DEVICE_Init+0x5c>)
 800b6de:	0018      	movs	r0, r3
 800b6e0:	f7fe fe1f 	bl	800a322 <USBD_Start>
 800b6e4:	1e03      	subs	r3, r0, #0
 800b6e6:	d001      	beq.n	800b6ec <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800b6e8:	f7f5 ff8c 	bl	8001604 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b6ec:	46c0      	nop			; (mov r8, r8)
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	46c0      	nop			; (mov r8, r8)
 800b6f4:	2000012c 	.word	0x2000012c
 800b6f8:	200006d0 	.word	0x200006d0
 800b6fc:	20000018 	.word	0x20000018
 800b700:	2000011c 	.word	0x2000011c

0800b704 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b708:	4907      	ldr	r1, [pc, #28]	; (800b728 <CDC_Init_FS+0x24>)
 800b70a:	4b08      	ldr	r3, [pc, #32]	; (800b72c <CDC_Init_FS+0x28>)
 800b70c:	2200      	movs	r2, #0
 800b70e:	0018      	movs	r0, r3
 800b710:	f7fe fd21 	bl	800a156 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b714:	4a06      	ldr	r2, [pc, #24]	; (800b730 <CDC_Init_FS+0x2c>)
 800b716:	4b05      	ldr	r3, [pc, #20]	; (800b72c <CDC_Init_FS+0x28>)
 800b718:	0011      	movs	r1, r2
 800b71a:	0018      	movs	r0, r3
 800b71c:	f7fe fd37 	bl	800a18e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b720:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b722:	0018      	movs	r0, r3
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}
 800b728:	20000d7c 	.word	0x20000d7c
 800b72c:	200006d0 	.word	0x200006d0
 800b730:	20000994 	.word	0x20000994

0800b734 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b738:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b73a:	0018      	movs	r0, r3
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	6039      	str	r1, [r7, #0]
 800b748:	0011      	movs	r1, r2
 800b74a:	1dfb      	adds	r3, r7, #7
 800b74c:	1c02      	adds	r2, r0, #0
 800b74e:	701a      	strb	r2, [r3, #0]
 800b750:	1d3b      	adds	r3, r7, #4
 800b752:	1c0a      	adds	r2, r1, #0
 800b754:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b756:	1dfb      	adds	r3, r7, #7
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	2b23      	cmp	r3, #35	; 0x23
 800b75c:	d804      	bhi.n	800b768 <CDC_Control_FS+0x28>
 800b75e:	009a      	lsls	r2, r3, #2
 800b760:	4b04      	ldr	r3, [pc, #16]	; (800b774 <CDC_Control_FS+0x34>)
 800b762:	18d3      	adds	r3, r2, r3
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b768:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800b76a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b76c:	0018      	movs	r0, r3
 800b76e:	46bd      	mov	sp, r7
 800b770:	b002      	add	sp, #8
 800b772:	bd80      	pop	{r7, pc}
 800b774:	0800cbe8 	.word	0x0800cbe8

0800b778 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b778:	b590      	push	{r4, r7, lr}
 800b77a:	b085      	sub	sp, #20
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
 800b780:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  flags.data_received = 1;
 800b782:	4b18      	ldr	r3, [pc, #96]	; (800b7e4 <CDC_Receive_FS+0x6c>)
 800b784:	7a1a      	ldrb	r2, [r3, #8]
 800b786:	2101      	movs	r1, #1
 800b788:	430a      	orrs	r2, r1
 800b78a:	721a      	strb	r2, [r3, #8]

  for(uint8_t i = 0; i < *Len; i++)
 800b78c:	230f      	movs	r3, #15
 800b78e:	18fb      	adds	r3, r7, r3
 800b790:	2200      	movs	r2, #0
 800b792:	701a      	strb	r2, [r3, #0]
 800b794:	e00f      	b.n	800b7b6 <CDC_Receive_FS+0x3e>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800b796:	4b14      	ldr	r3, [pc, #80]	; (800b7e8 <CDC_Receive_FS+0x70>)
 800b798:	6818      	ldr	r0, [r3, #0]
 800b79a:	240f      	movs	r4, #15
 800b79c:	193b      	adds	r3, r7, r4
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	18d3      	adds	r3, r2, r3
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	0019      	movs	r1, r3
 800b7a8:	f7f5 ff66 	bl	8001678 <push>
  for(uint8_t i = 0; i < *Len; i++)
 800b7ac:	193b      	adds	r3, r7, r4
 800b7ae:	781a      	ldrb	r2, [r3, #0]
 800b7b0:	193b      	adds	r3, r7, r4
 800b7b2:	3201      	adds	r2, #1
 800b7b4:	701a      	strb	r2, [r3, #0]
 800b7b6:	230f      	movs	r3, #15
 800b7b8:	18fb      	adds	r3, r7, r3
 800b7ba:	781a      	ldrb	r2, [r3, #0]
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d3e8      	bcc.n	800b796 <CDC_Receive_FS+0x1e>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	4b09      	ldr	r3, [pc, #36]	; (800b7ec <CDC_Receive_FS+0x74>)
 800b7c8:	0011      	movs	r1, r2
 800b7ca:	0018      	movs	r0, r3
 800b7cc:	f7fe fcdf 	bl	800a18e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b7d0:	4b06      	ldr	r3, [pc, #24]	; (800b7ec <CDC_Receive_FS+0x74>)
 800b7d2:	0018      	movs	r0, r3
 800b7d4:	f7fe fd26 	bl	800a224 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b7d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b7da:	0018      	movs	r0, r3
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	b005      	add	sp, #20
 800b7e0:	bd90      	pop	{r4, r7, pc}
 800b7e2:	46c0      	nop			; (mov r8, r8)
 800b7e4:	20000618 	.word	0x20000618
 800b7e8:	20001164 	.word	0x20001164
 800b7ec:	200006d0 	.word	0x200006d0

0800b7f0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b7f0:	b5b0      	push	{r4, r5, r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	000a      	movs	r2, r1
 800b7fa:	1cbb      	adds	r3, r7, #2
 800b7fc:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800b7fe:	230f      	movs	r3, #15
 800b800:	18fb      	adds	r3, r7, r3
 800b802:	2200      	movs	r2, #0
 800b804:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b806:	4a11      	ldr	r2, [pc, #68]	; (800b84c <CDC_Transmit_FS+0x5c>)
 800b808:	23ae      	movs	r3, #174	; 0xae
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	58d3      	ldr	r3, [r2, r3]
 800b80e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	2385      	movs	r3, #133	; 0x85
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	58d3      	ldr	r3, [r2, r3]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d001      	beq.n	800b820 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800b81c:	2301      	movs	r3, #1
 800b81e:	e010      	b.n	800b842 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b820:	1cbb      	adds	r3, r7, #2
 800b822:	881a      	ldrh	r2, [r3, #0]
 800b824:	6879      	ldr	r1, [r7, #4]
 800b826:	4b09      	ldr	r3, [pc, #36]	; (800b84c <CDC_Transmit_FS+0x5c>)
 800b828:	0018      	movs	r0, r3
 800b82a:	f7fe fc94 	bl	800a156 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b82e:	250f      	movs	r5, #15
 800b830:	197c      	adds	r4, r7, r5
 800b832:	4b06      	ldr	r3, [pc, #24]	; (800b84c <CDC_Transmit_FS+0x5c>)
 800b834:	0018      	movs	r0, r3
 800b836:	f7fe fcbe 	bl	800a1b6 <USBD_CDC_TransmitPacket>
 800b83a:	0003      	movs	r3, r0
 800b83c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800b83e:	197b      	adds	r3, r7, r5
 800b840:	781b      	ldrb	r3, [r3, #0]
}
 800b842:	0018      	movs	r0, r3
 800b844:	46bd      	mov	sp, r7
 800b846:	b004      	add	sp, #16
 800b848:	bdb0      	pop	{r4, r5, r7, pc}
 800b84a:	46c0      	nop			; (mov r8, r8)
 800b84c:	200006d0 	.word	0x200006d0

0800b850 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	0002      	movs	r2, r0
 800b858:	6039      	str	r1, [r7, #0]
 800b85a:	1dfb      	adds	r3, r7, #7
 800b85c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	2212      	movs	r2, #18
 800b862:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b864:	4b02      	ldr	r3, [pc, #8]	; (800b870 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b866:	0018      	movs	r0, r3
 800b868:	46bd      	mov	sp, r7
 800b86a:	b002      	add	sp, #8
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	46c0      	nop			; (mov r8, r8)
 800b870:	20000148 	.word	0x20000148

0800b874 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	0002      	movs	r2, r0
 800b87c:	6039      	str	r1, [r7, #0]
 800b87e:	1dfb      	adds	r3, r7, #7
 800b880:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	2204      	movs	r2, #4
 800b886:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b888:	4b02      	ldr	r3, [pc, #8]	; (800b894 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b88a:	0018      	movs	r0, r3
 800b88c:	46bd      	mov	sp, r7
 800b88e:	b002      	add	sp, #8
 800b890:	bd80      	pop	{r7, pc}
 800b892:	46c0      	nop			; (mov r8, r8)
 800b894:	2000015c 	.word	0x2000015c

0800b898 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	0002      	movs	r2, r0
 800b8a0:	6039      	str	r1, [r7, #0]
 800b8a2:	1dfb      	adds	r3, r7, #7
 800b8a4:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800b8a6:	1dfb      	adds	r3, r7, #7
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d106      	bne.n	800b8bc <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b8ae:	683a      	ldr	r2, [r7, #0]
 800b8b0:	4908      	ldr	r1, [pc, #32]	; (800b8d4 <USBD_FS_ProductStrDescriptor+0x3c>)
 800b8b2:	4b09      	ldr	r3, [pc, #36]	; (800b8d8 <USBD_FS_ProductStrDescriptor+0x40>)
 800b8b4:	0018      	movs	r0, r3
 800b8b6:	f7ff fdf4 	bl	800b4a2 <USBD_GetString>
 800b8ba:	e005      	b.n	800b8c8 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b8bc:	683a      	ldr	r2, [r7, #0]
 800b8be:	4905      	ldr	r1, [pc, #20]	; (800b8d4 <USBD_FS_ProductStrDescriptor+0x3c>)
 800b8c0:	4b05      	ldr	r3, [pc, #20]	; (800b8d8 <USBD_FS_ProductStrDescriptor+0x40>)
 800b8c2:	0018      	movs	r0, r3
 800b8c4:	f7ff fded 	bl	800b4a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8c8:	4b02      	ldr	r3, [pc, #8]	; (800b8d4 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800b8ca:	0018      	movs	r0, r3
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	b002      	add	sp, #8
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	46c0      	nop			; (mov r8, r8)
 800b8d4:	20001168 	.word	0x20001168
 800b8d8:	0800cab0 	.word	0x0800cab0

0800b8dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b082      	sub	sp, #8
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	0002      	movs	r2, r0
 800b8e4:	6039      	str	r1, [r7, #0]
 800b8e6:	1dfb      	adds	r3, r7, #7
 800b8e8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b8ea:	683a      	ldr	r2, [r7, #0]
 800b8ec:	4904      	ldr	r1, [pc, #16]	; (800b900 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b8ee:	4b05      	ldr	r3, [pc, #20]	; (800b904 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800b8f0:	0018      	movs	r0, r3
 800b8f2:	f7ff fdd6 	bl	800b4a2 <USBD_GetString>
  return USBD_StrDesc;
 800b8f6:	4b02      	ldr	r3, [pc, #8]	; (800b900 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800b8f8:	0018      	movs	r0, r3
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	b002      	add	sp, #8
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	20001168 	.word	0x20001168
 800b904:	0800cac8 	.word	0x0800cac8

0800b908 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	0002      	movs	r2, r0
 800b910:	6039      	str	r1, [r7, #0]
 800b912:	1dfb      	adds	r3, r7, #7
 800b914:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	221a      	movs	r2, #26
 800b91a:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b91c:	f000 f84c 	bl	800b9b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b920:	4b02      	ldr	r3, [pc, #8]	; (800b92c <USBD_FS_SerialStrDescriptor+0x24>)
}
 800b922:	0018      	movs	r0, r3
 800b924:	46bd      	mov	sp, r7
 800b926:	b002      	add	sp, #8
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	46c0      	nop			; (mov r8, r8)
 800b92c:	20000160 	.word	0x20000160

0800b930 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	0002      	movs	r2, r0
 800b938:	6039      	str	r1, [r7, #0]
 800b93a:	1dfb      	adds	r3, r7, #7
 800b93c:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800b93e:	1dfb      	adds	r3, r7, #7
 800b940:	781b      	ldrb	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d106      	bne.n	800b954 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b946:	683a      	ldr	r2, [r7, #0]
 800b948:	4908      	ldr	r1, [pc, #32]	; (800b96c <USBD_FS_ConfigStrDescriptor+0x3c>)
 800b94a:	4b09      	ldr	r3, [pc, #36]	; (800b970 <USBD_FS_ConfigStrDescriptor+0x40>)
 800b94c:	0018      	movs	r0, r3
 800b94e:	f7ff fda8 	bl	800b4a2 <USBD_GetString>
 800b952:	e005      	b.n	800b960 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b954:	683a      	ldr	r2, [r7, #0]
 800b956:	4905      	ldr	r1, [pc, #20]	; (800b96c <USBD_FS_ConfigStrDescriptor+0x3c>)
 800b958:	4b05      	ldr	r3, [pc, #20]	; (800b970 <USBD_FS_ConfigStrDescriptor+0x40>)
 800b95a:	0018      	movs	r0, r3
 800b95c:	f7ff fda1 	bl	800b4a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b960:	4b02      	ldr	r3, [pc, #8]	; (800b96c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800b962:	0018      	movs	r0, r3
 800b964:	46bd      	mov	sp, r7
 800b966:	b002      	add	sp, #8
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	46c0      	nop			; (mov r8, r8)
 800b96c:	20001168 	.word	0x20001168
 800b970:	0800cadc 	.word	0x0800cadc

0800b974 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	0002      	movs	r2, r0
 800b97c:	6039      	str	r1, [r7, #0]
 800b97e:	1dfb      	adds	r3, r7, #7
 800b980:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800b982:	1dfb      	adds	r3, r7, #7
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d106      	bne.n	800b998 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b98a:	683a      	ldr	r2, [r7, #0]
 800b98c:	4908      	ldr	r1, [pc, #32]	; (800b9b0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800b98e:	4b09      	ldr	r3, [pc, #36]	; (800b9b4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800b990:	0018      	movs	r0, r3
 800b992:	f7ff fd86 	bl	800b4a2 <USBD_GetString>
 800b996:	e005      	b.n	800b9a4 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b998:	683a      	ldr	r2, [r7, #0]
 800b99a:	4905      	ldr	r1, [pc, #20]	; (800b9b0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800b99c:	4b05      	ldr	r3, [pc, #20]	; (800b9b4 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800b99e:	0018      	movs	r0, r3
 800b9a0:	f7ff fd7f 	bl	800b4a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9a4:	4b02      	ldr	r3, [pc, #8]	; (800b9b0 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800b9a6:	0018      	movs	r0, r3
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	b002      	add	sp, #8
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	46c0      	nop			; (mov r8, r8)
 800b9b0:	20001168 	.word	0x20001168
 800b9b4:	0800cae8 	.word	0x0800cae8

0800b9b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b9be:	4b10      	ldr	r3, [pc, #64]	; (800ba00 <Get_SerialNum+0x48>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b9c4:	4b0f      	ldr	r3, [pc, #60]	; (800ba04 <Get_SerialNum+0x4c>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b9ca:	4b0f      	ldr	r3, [pc, #60]	; (800ba08 <Get_SerialNum+0x50>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b9d0:	68fa      	ldr	r2, [r7, #12]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	18d3      	adds	r3, r2, r3
 800b9d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00b      	beq.n	800b9f6 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b9de:	490b      	ldr	r1, [pc, #44]	; (800ba0c <Get_SerialNum+0x54>)
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2208      	movs	r2, #8
 800b9e4:	0018      	movs	r0, r3
 800b9e6:	f000 f815 	bl	800ba14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b9ea:	4909      	ldr	r1, [pc, #36]	; (800ba10 <Get_SerialNum+0x58>)
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	2204      	movs	r2, #4
 800b9f0:	0018      	movs	r0, r3
 800b9f2:	f000 f80f 	bl	800ba14 <IntToUnicode>
  }
}
 800b9f6:	46c0      	nop			; (mov r8, r8)
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	b004      	add	sp, #16
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	46c0      	nop			; (mov r8, r8)
 800ba00:	1ffff7ac 	.word	0x1ffff7ac
 800ba04:	1ffff7b0 	.word	0x1ffff7b0
 800ba08:	1ffff7b4 	.word	0x1ffff7b4
 800ba0c:	20000162 	.word	0x20000162
 800ba10:	20000172 	.word	0x20000172

0800ba14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b086      	sub	sp, #24
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	60b9      	str	r1, [r7, #8]
 800ba1e:	1dfb      	adds	r3, r7, #7
 800ba20:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800ba22:	2117      	movs	r1, #23
 800ba24:	187b      	adds	r3, r7, r1
 800ba26:	2200      	movs	r2, #0
 800ba28:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800ba2a:	187b      	adds	r3, r7, r1
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	701a      	strb	r2, [r3, #0]
 800ba30:	e02f      	b.n	800ba92 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	0f1b      	lsrs	r3, r3, #28
 800ba36:	2b09      	cmp	r3, #9
 800ba38:	d80d      	bhi.n	800ba56 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	0f1b      	lsrs	r3, r3, #28
 800ba3e:	b2da      	uxtb	r2, r3
 800ba40:	2317      	movs	r3, #23
 800ba42:	18fb      	adds	r3, r7, r3
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	005b      	lsls	r3, r3, #1
 800ba48:	0019      	movs	r1, r3
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	185b      	adds	r3, r3, r1
 800ba4e:	3230      	adds	r2, #48	; 0x30
 800ba50:	b2d2      	uxtb	r2, r2
 800ba52:	701a      	strb	r2, [r3, #0]
 800ba54:	e00c      	b.n	800ba70 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	0f1b      	lsrs	r3, r3, #28
 800ba5a:	b2da      	uxtb	r2, r3
 800ba5c:	2317      	movs	r3, #23
 800ba5e:	18fb      	adds	r3, r7, r3
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	005b      	lsls	r3, r3, #1
 800ba64:	0019      	movs	r1, r3
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	185b      	adds	r3, r3, r1
 800ba6a:	3237      	adds	r2, #55	; 0x37
 800ba6c:	b2d2      	uxtb	r2, r2
 800ba6e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	011b      	lsls	r3, r3, #4
 800ba74:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ba76:	2117      	movs	r1, #23
 800ba78:	187b      	adds	r3, r7, r1
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	005b      	lsls	r3, r3, #1
 800ba7e:	3301      	adds	r3, #1
 800ba80:	68ba      	ldr	r2, [r7, #8]
 800ba82:	18d3      	adds	r3, r2, r3
 800ba84:	2200      	movs	r2, #0
 800ba86:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ba88:	187b      	adds	r3, r7, r1
 800ba8a:	781a      	ldrb	r2, [r3, #0]
 800ba8c:	187b      	adds	r3, r7, r1
 800ba8e:	3201      	adds	r2, #1
 800ba90:	701a      	strb	r2, [r3, #0]
 800ba92:	2317      	movs	r3, #23
 800ba94:	18fa      	adds	r2, r7, r3
 800ba96:	1dfb      	adds	r3, r7, #7
 800ba98:	7812      	ldrb	r2, [r2, #0]
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d3c8      	bcc.n	800ba32 <IntToUnicode+0x1e>
  }
}
 800baa0:	46c0      	nop			; (mov r8, r8)
 800baa2:	46c0      	nop			; (mov r8, r8)
 800baa4:	46bd      	mov	sp, r7
 800baa6:	b006      	add	sp, #24
 800baa8:	bd80      	pop	{r7, pc}
	...

0800baac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	4a0e      	ldr	r2, [pc, #56]	; (800baf4 <HAL_PCD_MspInit+0x48>)
 800baba:	4293      	cmp	r3, r2
 800babc:	d115      	bne.n	800baea <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800babe:	4b0e      	ldr	r3, [pc, #56]	; (800baf8 <HAL_PCD_MspInit+0x4c>)
 800bac0:	69da      	ldr	r2, [r3, #28]
 800bac2:	4b0d      	ldr	r3, [pc, #52]	; (800baf8 <HAL_PCD_MspInit+0x4c>)
 800bac4:	2180      	movs	r1, #128	; 0x80
 800bac6:	0409      	lsls	r1, r1, #16
 800bac8:	430a      	orrs	r2, r1
 800baca:	61da      	str	r2, [r3, #28]
 800bacc:	4b0a      	ldr	r3, [pc, #40]	; (800baf8 <HAL_PCD_MspInit+0x4c>)
 800bace:	69da      	ldr	r2, [r3, #28]
 800bad0:	2380      	movs	r3, #128	; 0x80
 800bad2:	041b      	lsls	r3, r3, #16
 800bad4:	4013      	ands	r3, r2
 800bad6:	60fb      	str	r3, [r7, #12]
 800bad8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800bada:	2200      	movs	r2, #0
 800badc:	2100      	movs	r1, #0
 800bade:	201f      	movs	r0, #31
 800bae0:	f7f6 fffc 	bl	8002adc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800bae4:	201f      	movs	r0, #31
 800bae6:	f7f7 f80e 	bl	8002b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800baea:	46c0      	nop			; (mov r8, r8)
 800baec:	46bd      	mov	sp, r7
 800baee:	b004      	add	sp, #16
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	46c0      	nop			; (mov r8, r8)
 800baf4:	40005c00 	.word	0x40005c00
 800baf8:	40021000 	.word	0x40021000

0800bafc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b082      	sub	sp, #8
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	23bc      	movs	r3, #188	; 0xbc
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	58d2      	ldr	r2, [r2, r3]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	21ac      	movs	r1, #172	; 0xac
 800bb10:	0089      	lsls	r1, r1, #2
 800bb12:	468c      	mov	ip, r1
 800bb14:	4463      	add	r3, ip
 800bb16:	0019      	movs	r1, r3
 800bb18:	0010      	movs	r0, r2
 800bb1a:	f7fe fc55 	bl	800a3c8 <USBD_LL_SetupStage>
}
 800bb1e:	46c0      	nop			; (mov r8, r8)
 800bb20:	46bd      	mov	sp, r7
 800bb22:	b002      	add	sp, #8
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb26:	b590      	push	{r4, r7, lr}
 800bb28:	b083      	sub	sp, #12
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
 800bb2e:	000a      	movs	r2, r1
 800bb30:	1cfb      	adds	r3, r7, #3
 800bb32:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	23bc      	movs	r3, #188	; 0xbc
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	58d4      	ldr	r4, [r2, r3]
 800bb3c:	1cfb      	adds	r3, r7, #3
 800bb3e:	781a      	ldrb	r2, [r3, #0]
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	23be      	movs	r3, #190	; 0xbe
 800bb44:	0059      	lsls	r1, r3, #1
 800bb46:	0013      	movs	r3, r2
 800bb48:	009b      	lsls	r3, r3, #2
 800bb4a:	189b      	adds	r3, r3, r2
 800bb4c:	00db      	lsls	r3, r3, #3
 800bb4e:	18c3      	adds	r3, r0, r3
 800bb50:	185b      	adds	r3, r3, r1
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	1cfb      	adds	r3, r7, #3
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	0019      	movs	r1, r3
 800bb5a:	0020      	movs	r0, r4
 800bb5c:	f7fe fc92 	bl	800a484 <USBD_LL_DataOutStage>
}
 800bb60:	46c0      	nop			; (mov r8, r8)
 800bb62:	46bd      	mov	sp, r7
 800bb64:	b003      	add	sp, #12
 800bb66:	bd90      	pop	{r4, r7, pc}

0800bb68 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	000a      	movs	r2, r1
 800bb72:	1cfb      	adds	r3, r7, #3
 800bb74:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	23bc      	movs	r3, #188	; 0xbc
 800bb7a:	009b      	lsls	r3, r3, #2
 800bb7c:	58d0      	ldr	r0, [r2, r3]
 800bb7e:	1cfb      	adds	r3, r7, #3
 800bb80:	781a      	ldrb	r2, [r3, #0]
 800bb82:	6879      	ldr	r1, [r7, #4]
 800bb84:	0013      	movs	r3, r2
 800bb86:	009b      	lsls	r3, r3, #2
 800bb88:	189b      	adds	r3, r3, r2
 800bb8a:	00db      	lsls	r3, r3, #3
 800bb8c:	18cb      	adds	r3, r1, r3
 800bb8e:	333c      	adds	r3, #60	; 0x3c
 800bb90:	681a      	ldr	r2, [r3, #0]
 800bb92:	1cfb      	adds	r3, r7, #3
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	0019      	movs	r1, r3
 800bb98:	f7fe fcf6 	bl	800a588 <USBD_LL_DataInStage>
}
 800bb9c:	46c0      	nop			; (mov r8, r8)
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	b002      	add	sp, #8
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bbac:	687a      	ldr	r2, [r7, #4]
 800bbae:	23bc      	movs	r3, #188	; 0xbc
 800bbb0:	009b      	lsls	r3, r3, #2
 800bbb2:	58d3      	ldr	r3, [r2, r3]
 800bbb4:	0018      	movs	r0, r3
 800bbb6:	f7fe fe2d 	bl	800a814 <USBD_LL_SOF>
}
 800bbba:	46c0      	nop			; (mov r8, r8)
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	b002      	add	sp, #8
 800bbc0:	bd80      	pop	{r7, pc}

0800bbc2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbc2:	b580      	push	{r7, lr}
 800bbc4:	b084      	sub	sp, #16
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bbca:	230f      	movs	r3, #15
 800bbcc:	18fb      	adds	r3, r7, r3
 800bbce:	2201      	movs	r2, #1
 800bbd0:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	689b      	ldr	r3, [r3, #8]
 800bbd6:	2b02      	cmp	r3, #2
 800bbd8:	d001      	beq.n	800bbde <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800bbda:	f7f5 fd13 	bl	8001604 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	23bc      	movs	r3, #188	; 0xbc
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	58d2      	ldr	r2, [r2, r3]
 800bbe6:	230f      	movs	r3, #15
 800bbe8:	18fb      	adds	r3, r7, r3
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	0019      	movs	r1, r3
 800bbee:	0010      	movs	r0, r2
 800bbf0:	f7fe fdcf 	bl	800a792 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	23bc      	movs	r3, #188	; 0xbc
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	58d3      	ldr	r3, [r2, r3]
 800bbfc:	0018      	movs	r0, r3
 800bbfe:	f7fe fd80 	bl	800a702 <USBD_LL_Reset>
}
 800bc02:	46c0      	nop			; (mov r8, r8)
 800bc04:	46bd      	mov	sp, r7
 800bc06:	b004      	add	sp, #16
 800bc08:	bd80      	pop	{r7, pc}
	...

0800bc0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	23bc      	movs	r3, #188	; 0xbc
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	58d3      	ldr	r3, [r2, r3]
 800bc1c:	0018      	movs	r0, r3
 800bc1e:	f7fe fdc9 	bl	800a7b4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	699b      	ldr	r3, [r3, #24]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d005      	beq.n	800bc36 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc2a:	4b05      	ldr	r3, [pc, #20]	; (800bc40 <HAL_PCD_SuspendCallback+0x34>)
 800bc2c:	691a      	ldr	r2, [r3, #16]
 800bc2e:	4b04      	ldr	r3, [pc, #16]	; (800bc40 <HAL_PCD_SuspendCallback+0x34>)
 800bc30:	2106      	movs	r1, #6
 800bc32:	430a      	orrs	r2, r1
 800bc34:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800bc36:	46c0      	nop			; (mov r8, r8)
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	b002      	add	sp, #8
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	46c0      	nop			; (mov r8, r8)
 800bc40:	e000ed00 	.word	0xe000ed00

0800bc44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	699b      	ldr	r3, [r3, #24]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d007      	beq.n	800bc64 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc54:	4b09      	ldr	r3, [pc, #36]	; (800bc7c <HAL_PCD_ResumeCallback+0x38>)
 800bc56:	691a      	ldr	r2, [r3, #16]
 800bc58:	4b08      	ldr	r3, [pc, #32]	; (800bc7c <HAL_PCD_ResumeCallback+0x38>)
 800bc5a:	2106      	movs	r1, #6
 800bc5c:	438a      	bics	r2, r1
 800bc5e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800bc60:	f000 fa44 	bl	800c0ec <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bc64:	687a      	ldr	r2, [r7, #4]
 800bc66:	23bc      	movs	r3, #188	; 0xbc
 800bc68:	009b      	lsls	r3, r3, #2
 800bc6a:	58d3      	ldr	r3, [r2, r3]
 800bc6c:	0018      	movs	r0, r3
 800bc6e:	f7fe fdb9 	bl	800a7e4 <USBD_LL_Resume>
}
 800bc72:	46c0      	nop			; (mov r8, r8)
 800bc74:	46bd      	mov	sp, r7
 800bc76:	b002      	add	sp, #8
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	46c0      	nop			; (mov r8, r8)
 800bc7c:	e000ed00 	.word	0xe000ed00

0800bc80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bc88:	4a2d      	ldr	r2, [pc, #180]	; (800bd40 <USBD_LL_Init+0xc0>)
 800bc8a:	23bc      	movs	r3, #188	; 0xbc
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	6879      	ldr	r1, [r7, #4]
 800bc90:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	23b0      	movs	r3, #176	; 0xb0
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	4929      	ldr	r1, [pc, #164]	; (800bd40 <USBD_LL_Init+0xc0>)
 800bc9a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800bc9c:	4b28      	ldr	r3, [pc, #160]	; (800bd40 <USBD_LL_Init+0xc0>)
 800bc9e:	4a29      	ldr	r2, [pc, #164]	; (800bd44 <USBD_LL_Init+0xc4>)
 800bca0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bca2:	4b27      	ldr	r3, [pc, #156]	; (800bd40 <USBD_LL_Init+0xc0>)
 800bca4:	2208      	movs	r2, #8
 800bca6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bca8:	4b25      	ldr	r3, [pc, #148]	; (800bd40 <USBD_LL_Init+0xc0>)
 800bcaa:	2202      	movs	r2, #2
 800bcac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bcae:	4b24      	ldr	r3, [pc, #144]	; (800bd40 <USBD_LL_Init+0xc0>)
 800bcb0:	2202      	movs	r2, #2
 800bcb2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bcb4:	4b22      	ldr	r3, [pc, #136]	; (800bd40 <USBD_LL_Init+0xc0>)
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bcba:	4b21      	ldr	r3, [pc, #132]	; (800bd40 <USBD_LL_Init+0xc0>)
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bcc0:	4b1f      	ldr	r3, [pc, #124]	; (800bd40 <USBD_LL_Init+0xc0>)
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bcc6:	4b1e      	ldr	r3, [pc, #120]	; (800bd40 <USBD_LL_Init+0xc0>)
 800bcc8:	0018      	movs	r0, r3
 800bcca:	f7f7 fb39 	bl	8003340 <HAL_PCD_Init>
 800bcce:	1e03      	subs	r3, r0, #0
 800bcd0:	d001      	beq.n	800bcd6 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800bcd2:	f7f5 fc97 	bl	8001604 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	23b0      	movs	r3, #176	; 0xb0
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	58d0      	ldr	r0, [r2, r3]
 800bcde:	2318      	movs	r3, #24
 800bce0:	2200      	movs	r2, #0
 800bce2:	2100      	movs	r1, #0
 800bce4:	f7f9 f91a 	bl	8004f1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	23b0      	movs	r3, #176	; 0xb0
 800bcec:	009b      	lsls	r3, r3, #2
 800bcee:	58d0      	ldr	r0, [r2, r3]
 800bcf0:	2358      	movs	r3, #88	; 0x58
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	2180      	movs	r1, #128	; 0x80
 800bcf6:	f7f9 f911 	bl	8004f1c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	23b0      	movs	r3, #176	; 0xb0
 800bcfe:	009b      	lsls	r3, r3, #2
 800bd00:	58d0      	ldr	r0, [r2, r3]
 800bd02:	23c0      	movs	r3, #192	; 0xc0
 800bd04:	2200      	movs	r2, #0
 800bd06:	2181      	movs	r1, #129	; 0x81
 800bd08:	f7f9 f908 	bl	8004f1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	23b0      	movs	r3, #176	; 0xb0
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	58d0      	ldr	r0, [r2, r3]
 800bd14:	2388      	movs	r3, #136	; 0x88
 800bd16:	005b      	lsls	r3, r3, #1
 800bd18:	2200      	movs	r2, #0
 800bd1a:	2101      	movs	r1, #1
 800bd1c:	f7f9 f8fe 	bl	8004f1c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	23b0      	movs	r3, #176	; 0xb0
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	58d0      	ldr	r0, [r2, r3]
 800bd28:	2380      	movs	r3, #128	; 0x80
 800bd2a:	005b      	lsls	r3, r3, #1
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	2182      	movs	r1, #130	; 0x82
 800bd30:	f7f9 f8f4 	bl	8004f1c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bd34:	2300      	movs	r3, #0
}
 800bd36:	0018      	movs	r0, r3
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	b002      	add	sp, #8
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	46c0      	nop			; (mov r8, r8)
 800bd40:	20001368 	.word	0x20001368
 800bd44:	40005c00 	.word	0x40005c00

0800bd48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bd48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd4a:	b085      	sub	sp, #20
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd50:	210f      	movs	r1, #15
 800bd52:	187b      	adds	r3, r7, r1
 800bd54:	2200      	movs	r2, #0
 800bd56:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd58:	260e      	movs	r6, #14
 800bd5a:	19bb      	adds	r3, r7, r6
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	23b0      	movs	r3, #176	; 0xb0
 800bd64:	009b      	lsls	r3, r3, #2
 800bd66:	58d3      	ldr	r3, [r2, r3]
 800bd68:	000d      	movs	r5, r1
 800bd6a:	187c      	adds	r4, r7, r1
 800bd6c:	0018      	movs	r0, r3
 800bd6e:	f7f7 fbf7 	bl	8003560 <HAL_PCD_Start>
 800bd72:	0003      	movs	r3, r0
 800bd74:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd76:	19bc      	adds	r4, r7, r6
 800bd78:	197b      	adds	r3, r7, r5
 800bd7a:	781b      	ldrb	r3, [r3, #0]
 800bd7c:	0018      	movs	r0, r3
 800bd7e:	f000 f9bc 	bl	800c0fa <USBD_Get_USB_Status>
 800bd82:	0003      	movs	r3, r0
 800bd84:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800bd86:	19bb      	adds	r3, r7, r6
 800bd88:	781b      	ldrb	r3, [r3, #0]
}
 800bd8a:	0018      	movs	r0, r3
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	b005      	add	sp, #20
 800bd90:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bd92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd92:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd94:	b085      	sub	sp, #20
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
 800bd9a:	000c      	movs	r4, r1
 800bd9c:	0010      	movs	r0, r2
 800bd9e:	0019      	movs	r1, r3
 800bda0:	1cfb      	adds	r3, r7, #3
 800bda2:	1c22      	adds	r2, r4, #0
 800bda4:	701a      	strb	r2, [r3, #0]
 800bda6:	1cbb      	adds	r3, r7, #2
 800bda8:	1c02      	adds	r2, r0, #0
 800bdaa:	701a      	strb	r2, [r3, #0]
 800bdac:	003b      	movs	r3, r7
 800bdae:	1c0a      	adds	r2, r1, #0
 800bdb0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdb2:	260f      	movs	r6, #15
 800bdb4:	19bb      	adds	r3, r7, r6
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdba:	250e      	movs	r5, #14
 800bdbc:	197b      	adds	r3, r7, r5
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	23b0      	movs	r3, #176	; 0xb0
 800bdc6:	009b      	lsls	r3, r3, #2
 800bdc8:	58d0      	ldr	r0, [r2, r3]
 800bdca:	19bc      	adds	r4, r7, r6
 800bdcc:	1cbb      	adds	r3, r7, #2
 800bdce:	781d      	ldrb	r5, [r3, #0]
 800bdd0:	003b      	movs	r3, r7
 800bdd2:	881a      	ldrh	r2, [r3, #0]
 800bdd4:	1cfb      	adds	r3, r7, #3
 800bdd6:	7819      	ldrb	r1, [r3, #0]
 800bdd8:	002b      	movs	r3, r5
 800bdda:	f7f7 fd8e 	bl	80038fa <HAL_PCD_EP_Open>
 800bdde:	0003      	movs	r3, r0
 800bde0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bde2:	250e      	movs	r5, #14
 800bde4:	197c      	adds	r4, r7, r5
 800bde6:	19bb      	adds	r3, r7, r6
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	0018      	movs	r0, r3
 800bdec:	f000 f985 	bl	800c0fa <USBD_Get_USB_Status>
 800bdf0:	0003      	movs	r3, r0
 800bdf2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800bdf4:	197b      	adds	r3, r7, r5
 800bdf6:	781b      	ldrb	r3, [r3, #0]
}
 800bdf8:	0018      	movs	r0, r3
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	b005      	add	sp, #20
 800bdfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be00 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be02:	b085      	sub	sp, #20
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	000a      	movs	r2, r1
 800be0a:	1cfb      	adds	r3, r7, #3
 800be0c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be0e:	210f      	movs	r1, #15
 800be10:	187b      	adds	r3, r7, r1
 800be12:	2200      	movs	r2, #0
 800be14:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be16:	260e      	movs	r6, #14
 800be18:	19bb      	adds	r3, r7, r6
 800be1a:	2200      	movs	r2, #0
 800be1c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	23b0      	movs	r3, #176	; 0xb0
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	58d2      	ldr	r2, [r2, r3]
 800be26:	000d      	movs	r5, r1
 800be28:	187c      	adds	r4, r7, r1
 800be2a:	1cfb      	adds	r3, r7, #3
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	0019      	movs	r1, r3
 800be30:	0010      	movs	r0, r2
 800be32:	f7f7 fdda 	bl	80039ea <HAL_PCD_EP_Close>
 800be36:	0003      	movs	r3, r0
 800be38:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be3a:	19bc      	adds	r4, r7, r6
 800be3c:	197b      	adds	r3, r7, r5
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	0018      	movs	r0, r3
 800be42:	f000 f95a 	bl	800c0fa <USBD_Get_USB_Status>
 800be46:	0003      	movs	r3, r0
 800be48:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800be4a:	19bb      	adds	r3, r7, r6
 800be4c:	781b      	ldrb	r3, [r3, #0]
}
 800be4e:	0018      	movs	r0, r3
 800be50:	46bd      	mov	sp, r7
 800be52:	b005      	add	sp, #20
 800be54:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be56 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be56:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be58:	b085      	sub	sp, #20
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
 800be5e:	000a      	movs	r2, r1
 800be60:	1cfb      	adds	r3, r7, #3
 800be62:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be64:	210f      	movs	r1, #15
 800be66:	187b      	adds	r3, r7, r1
 800be68:	2200      	movs	r2, #0
 800be6a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be6c:	260e      	movs	r6, #14
 800be6e:	19bb      	adds	r3, r7, r6
 800be70:	2200      	movs	r2, #0
 800be72:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	23b0      	movs	r3, #176	; 0xb0
 800be78:	009b      	lsls	r3, r3, #2
 800be7a:	58d2      	ldr	r2, [r2, r3]
 800be7c:	000d      	movs	r5, r1
 800be7e:	187c      	adds	r4, r7, r1
 800be80:	1cfb      	adds	r3, r7, #3
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	0019      	movs	r1, r3
 800be86:	0010      	movs	r0, r2
 800be88:	f7f7 fea6 	bl	8003bd8 <HAL_PCD_EP_SetStall>
 800be8c:	0003      	movs	r3, r0
 800be8e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be90:	19bc      	adds	r4, r7, r6
 800be92:	197b      	adds	r3, r7, r5
 800be94:	781b      	ldrb	r3, [r3, #0]
 800be96:	0018      	movs	r0, r3
 800be98:	f000 f92f 	bl	800c0fa <USBD_Get_USB_Status>
 800be9c:	0003      	movs	r3, r0
 800be9e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800bea0:	19bb      	adds	r3, r7, r6
 800bea2:	781b      	ldrb	r3, [r3, #0]
}
 800bea4:	0018      	movs	r0, r3
 800bea6:	46bd      	mov	sp, r7
 800bea8:	b005      	add	sp, #20
 800beaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800beac <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800beac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beae:	b085      	sub	sp, #20
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	000a      	movs	r2, r1
 800beb6:	1cfb      	adds	r3, r7, #3
 800beb8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800beba:	210f      	movs	r1, #15
 800bebc:	187b      	adds	r3, r7, r1
 800bebe:	2200      	movs	r2, #0
 800bec0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bec2:	260e      	movs	r6, #14
 800bec4:	19bb      	adds	r3, r7, r6
 800bec6:	2200      	movs	r2, #0
 800bec8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	23b0      	movs	r3, #176	; 0xb0
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	58d2      	ldr	r2, [r2, r3]
 800bed2:	000d      	movs	r5, r1
 800bed4:	187c      	adds	r4, r7, r1
 800bed6:	1cfb      	adds	r3, r7, #3
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	0019      	movs	r1, r3
 800bedc:	0010      	movs	r0, r2
 800bede:	f7f7 fed7 	bl	8003c90 <HAL_PCD_EP_ClrStall>
 800bee2:	0003      	movs	r3, r0
 800bee4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bee6:	19bc      	adds	r4, r7, r6
 800bee8:	197b      	adds	r3, r7, r5
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	0018      	movs	r0, r3
 800beee:	f000 f904 	bl	800c0fa <USBD_Get_USB_Status>
 800bef2:	0003      	movs	r3, r0
 800bef4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800bef6:	19bb      	adds	r3, r7, r6
 800bef8:	781b      	ldrb	r3, [r3, #0]
}
 800befa:	0018      	movs	r0, r3
 800befc:	46bd      	mov	sp, r7
 800befe:	b005      	add	sp, #20
 800bf00:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf02 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b084      	sub	sp, #16
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
 800bf0a:	000a      	movs	r2, r1
 800bf0c:	1cfb      	adds	r3, r7, #3
 800bf0e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	23b0      	movs	r3, #176	; 0xb0
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	58d3      	ldr	r3, [r2, r3]
 800bf18:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bf1a:	1cfb      	adds	r3, r7, #3
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	b25b      	sxtb	r3, r3
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	da0d      	bge.n	800bf40 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bf24:	1cfb      	adds	r3, r7, #3
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	227f      	movs	r2, #127	; 0x7f
 800bf2a:	4013      	ands	r3, r2
 800bf2c:	68f9      	ldr	r1, [r7, #12]
 800bf2e:	1c5a      	adds	r2, r3, #1
 800bf30:	0013      	movs	r3, r2
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	189b      	adds	r3, r3, r2
 800bf36:	00db      	lsls	r3, r3, #3
 800bf38:	18cb      	adds	r3, r1, r3
 800bf3a:	3302      	adds	r3, #2
 800bf3c:	781b      	ldrb	r3, [r3, #0]
 800bf3e:	e00d      	b.n	800bf5c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bf40:	1cfb      	adds	r3, r7, #3
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	227f      	movs	r2, #127	; 0x7f
 800bf46:	401a      	ands	r2, r3
 800bf48:	68f8      	ldr	r0, [r7, #12]
 800bf4a:	23b5      	movs	r3, #181	; 0xb5
 800bf4c:	0059      	lsls	r1, r3, #1
 800bf4e:	0013      	movs	r3, r2
 800bf50:	009b      	lsls	r3, r3, #2
 800bf52:	189b      	adds	r3, r3, r2
 800bf54:	00db      	lsls	r3, r3, #3
 800bf56:	18c3      	adds	r3, r0, r3
 800bf58:	185b      	adds	r3, r3, r1
 800bf5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bf5c:	0018      	movs	r0, r3
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	b004      	add	sp, #16
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bf64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf66:	b085      	sub	sp, #20
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	000a      	movs	r2, r1
 800bf6e:	1cfb      	adds	r3, r7, #3
 800bf70:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf72:	210f      	movs	r1, #15
 800bf74:	187b      	adds	r3, r7, r1
 800bf76:	2200      	movs	r2, #0
 800bf78:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf7a:	260e      	movs	r6, #14
 800bf7c:	19bb      	adds	r3, r7, r6
 800bf7e:	2200      	movs	r2, #0
 800bf80:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bf82:	687a      	ldr	r2, [r7, #4]
 800bf84:	23b0      	movs	r3, #176	; 0xb0
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	58d2      	ldr	r2, [r2, r3]
 800bf8a:	000d      	movs	r5, r1
 800bf8c:	187c      	adds	r4, r7, r1
 800bf8e:	1cfb      	adds	r3, r7, #3
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	0019      	movs	r1, r3
 800bf94:	0010      	movs	r0, r2
 800bf96:	f7f7 fc85 	bl	80038a4 <HAL_PCD_SetAddress>
 800bf9a:	0003      	movs	r3, r0
 800bf9c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf9e:	19bc      	adds	r4, r7, r6
 800bfa0:	197b      	adds	r3, r7, r5
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	0018      	movs	r0, r3
 800bfa6:	f000 f8a8 	bl	800c0fa <USBD_Get_USB_Status>
 800bfaa:	0003      	movs	r3, r0
 800bfac:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800bfae:	19bb      	adds	r3, r7, r6
 800bfb0:	781b      	ldrb	r3, [r3, #0]
}
 800bfb2:	0018      	movs	r0, r3
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	b005      	add	sp, #20
 800bfb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bfba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bfba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfbc:	b087      	sub	sp, #28
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	60f8      	str	r0, [r7, #12]
 800bfc2:	0008      	movs	r0, r1
 800bfc4:	607a      	str	r2, [r7, #4]
 800bfc6:	0019      	movs	r1, r3
 800bfc8:	230b      	movs	r3, #11
 800bfca:	18fb      	adds	r3, r7, r3
 800bfcc:	1c02      	adds	r2, r0, #0
 800bfce:	701a      	strb	r2, [r3, #0]
 800bfd0:	2408      	movs	r4, #8
 800bfd2:	193b      	adds	r3, r7, r4
 800bfd4:	1c0a      	adds	r2, r1, #0
 800bfd6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfd8:	2117      	movs	r1, #23
 800bfda:	187b      	adds	r3, r7, r1
 800bfdc:	2200      	movs	r2, #0
 800bfde:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfe0:	2516      	movs	r5, #22
 800bfe2:	197b      	adds	r3, r7, r5
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bfe8:	68fa      	ldr	r2, [r7, #12]
 800bfea:	23b0      	movs	r3, #176	; 0xb0
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	58d0      	ldr	r0, [r2, r3]
 800bff0:	193b      	adds	r3, r7, r4
 800bff2:	881d      	ldrh	r5, [r3, #0]
 800bff4:	000e      	movs	r6, r1
 800bff6:	187c      	adds	r4, r7, r1
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	230b      	movs	r3, #11
 800bffc:	18fb      	adds	r3, r7, r3
 800bffe:	7819      	ldrb	r1, [r3, #0]
 800c000:	002b      	movs	r3, r5
 800c002:	f7f7 fda0 	bl	8003b46 <HAL_PCD_EP_Transmit>
 800c006:	0003      	movs	r3, r0
 800c008:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c00a:	2516      	movs	r5, #22
 800c00c:	197c      	adds	r4, r7, r5
 800c00e:	19bb      	adds	r3, r7, r6
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	0018      	movs	r0, r3
 800c014:	f000 f871 	bl	800c0fa <USBD_Get_USB_Status>
 800c018:	0003      	movs	r3, r0
 800c01a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c01c:	197b      	adds	r3, r7, r5
 800c01e:	781b      	ldrb	r3, [r3, #0]
}
 800c020:	0018      	movs	r0, r3
 800c022:	46bd      	mov	sp, r7
 800c024:	b007      	add	sp, #28
 800c026:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c028 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c02a:	b087      	sub	sp, #28
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	60f8      	str	r0, [r7, #12]
 800c030:	0008      	movs	r0, r1
 800c032:	607a      	str	r2, [r7, #4]
 800c034:	0019      	movs	r1, r3
 800c036:	230b      	movs	r3, #11
 800c038:	18fb      	adds	r3, r7, r3
 800c03a:	1c02      	adds	r2, r0, #0
 800c03c:	701a      	strb	r2, [r3, #0]
 800c03e:	2408      	movs	r4, #8
 800c040:	193b      	adds	r3, r7, r4
 800c042:	1c0a      	adds	r2, r1, #0
 800c044:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c046:	2117      	movs	r1, #23
 800c048:	187b      	adds	r3, r7, r1
 800c04a:	2200      	movs	r2, #0
 800c04c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c04e:	2516      	movs	r5, #22
 800c050:	197b      	adds	r3, r7, r5
 800c052:	2200      	movs	r2, #0
 800c054:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c056:	68fa      	ldr	r2, [r7, #12]
 800c058:	23b0      	movs	r3, #176	; 0xb0
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	58d0      	ldr	r0, [r2, r3]
 800c05e:	193b      	adds	r3, r7, r4
 800c060:	881d      	ldrh	r5, [r3, #0]
 800c062:	000e      	movs	r6, r1
 800c064:	187c      	adds	r4, r7, r1
 800c066:	687a      	ldr	r2, [r7, #4]
 800c068:	230b      	movs	r3, #11
 800c06a:	18fb      	adds	r3, r7, r3
 800c06c:	7819      	ldrb	r1, [r3, #0]
 800c06e:	002b      	movs	r3, r5
 800c070:	f7f7 fd0c 	bl	8003a8c <HAL_PCD_EP_Receive>
 800c074:	0003      	movs	r3, r0
 800c076:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c078:	2516      	movs	r5, #22
 800c07a:	197c      	adds	r4, r7, r5
 800c07c:	19bb      	adds	r3, r7, r6
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	0018      	movs	r0, r3
 800c082:	f000 f83a 	bl	800c0fa <USBD_Get_USB_Status>
 800c086:	0003      	movs	r3, r0
 800c088:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c08a:	197b      	adds	r3, r7, r5
 800c08c:	781b      	ldrb	r3, [r3, #0]
}
 800c08e:	0018      	movs	r0, r3
 800c090:	46bd      	mov	sp, r7
 800c092:	b007      	add	sp, #28
 800c094:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c096 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c096:	b580      	push	{r7, lr}
 800c098:	b082      	sub	sp, #8
 800c09a:	af00      	add	r7, sp, #0
 800c09c:	6078      	str	r0, [r7, #4]
 800c09e:	000a      	movs	r2, r1
 800c0a0:	1cfb      	adds	r3, r7, #3
 800c0a2:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c0a4:	687a      	ldr	r2, [r7, #4]
 800c0a6:	23b0      	movs	r3, #176	; 0xb0
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	58d2      	ldr	r2, [r2, r3]
 800c0ac:	1cfb      	adds	r3, r7, #3
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	0019      	movs	r1, r3
 800c0b2:	0010      	movs	r0, r2
 800c0b4:	f7f7 fd2e 	bl	8003b14 <HAL_PCD_EP_GetRxCount>
 800c0b8:	0003      	movs	r3, r0
}
 800c0ba:	0018      	movs	r0, r3
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	b002      	add	sp, #8
 800c0c0:	bd80      	pop	{r7, pc}
	...

0800c0c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c0cc:	4b02      	ldr	r3, [pc, #8]	; (800c0d8 <USBD_static_malloc+0x14>)
}
 800c0ce:	0018      	movs	r0, r3
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	b002      	add	sp, #8
 800c0d4:	bd80      	pop	{r7, pc}
 800c0d6:	46c0      	nop			; (mov r8, r8)
 800c0d8:	20000260 	.word	0x20000260

0800c0dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b082      	sub	sp, #8
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]

}
 800c0e4:	46c0      	nop			; (mov r8, r8)
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	b002      	add	sp, #8
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c0f0:	f7f4 fab4 	bl	800065c <SystemClock_Config>
}
 800c0f4:	46c0      	nop			; (mov r8, r8)
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}

0800c0fa <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c0fa:	b580      	push	{r7, lr}
 800c0fc:	b084      	sub	sp, #16
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	0002      	movs	r2, r0
 800c102:	1dfb      	adds	r3, r7, #7
 800c104:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c106:	230f      	movs	r3, #15
 800c108:	18fb      	adds	r3, r7, r3
 800c10a:	2200      	movs	r2, #0
 800c10c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800c10e:	1dfb      	adds	r3, r7, #7
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	2b03      	cmp	r3, #3
 800c114:	d017      	beq.n	800c146 <USBD_Get_USB_Status+0x4c>
 800c116:	dc1b      	bgt.n	800c150 <USBD_Get_USB_Status+0x56>
 800c118:	2b02      	cmp	r3, #2
 800c11a:	d00f      	beq.n	800c13c <USBD_Get_USB_Status+0x42>
 800c11c:	dc18      	bgt.n	800c150 <USBD_Get_USB_Status+0x56>
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d002      	beq.n	800c128 <USBD_Get_USB_Status+0x2e>
 800c122:	2b01      	cmp	r3, #1
 800c124:	d005      	beq.n	800c132 <USBD_Get_USB_Status+0x38>
 800c126:	e013      	b.n	800c150 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c128:	230f      	movs	r3, #15
 800c12a:	18fb      	adds	r3, r7, r3
 800c12c:	2200      	movs	r2, #0
 800c12e:	701a      	strb	r2, [r3, #0]
    break;
 800c130:	e013      	b.n	800c15a <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c132:	230f      	movs	r3, #15
 800c134:	18fb      	adds	r3, r7, r3
 800c136:	2202      	movs	r2, #2
 800c138:	701a      	strb	r2, [r3, #0]
    break;
 800c13a:	e00e      	b.n	800c15a <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c13c:	230f      	movs	r3, #15
 800c13e:	18fb      	adds	r3, r7, r3
 800c140:	2201      	movs	r2, #1
 800c142:	701a      	strb	r2, [r3, #0]
    break;
 800c144:	e009      	b.n	800c15a <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c146:	230f      	movs	r3, #15
 800c148:	18fb      	adds	r3, r7, r3
 800c14a:	2202      	movs	r2, #2
 800c14c:	701a      	strb	r2, [r3, #0]
    break;
 800c14e:	e004      	b.n	800c15a <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800c150:	230f      	movs	r3, #15
 800c152:	18fb      	adds	r3, r7, r3
 800c154:	2202      	movs	r2, #2
 800c156:	701a      	strb	r2, [r3, #0]
    break;
 800c158:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800c15a:	230f      	movs	r3, #15
 800c15c:	18fb      	adds	r3, r7, r3
 800c15e:	781b      	ldrb	r3, [r3, #0]
}
 800c160:	0018      	movs	r0, r3
 800c162:	46bd      	mov	sp, r7
 800c164:	b004      	add	sp, #16
 800c166:	bd80      	pop	{r7, pc}

0800c168 <__errno>:
 800c168:	4b01      	ldr	r3, [pc, #4]	; (800c170 <__errno+0x8>)
 800c16a:	6818      	ldr	r0, [r3, #0]
 800c16c:	4770      	bx	lr
 800c16e:	46c0      	nop			; (mov r8, r8)
 800c170:	2000017c 	.word	0x2000017c

0800c174 <__libc_init_array>:
 800c174:	b570      	push	{r4, r5, r6, lr}
 800c176:	2600      	movs	r6, #0
 800c178:	4d0c      	ldr	r5, [pc, #48]	; (800c1ac <__libc_init_array+0x38>)
 800c17a:	4c0d      	ldr	r4, [pc, #52]	; (800c1b0 <__libc_init_array+0x3c>)
 800c17c:	1b64      	subs	r4, r4, r5
 800c17e:	10a4      	asrs	r4, r4, #2
 800c180:	42a6      	cmp	r6, r4
 800c182:	d109      	bne.n	800c198 <__libc_init_array+0x24>
 800c184:	2600      	movs	r6, #0
 800c186:	f000 fc5b 	bl	800ca40 <_init>
 800c18a:	4d0a      	ldr	r5, [pc, #40]	; (800c1b4 <__libc_init_array+0x40>)
 800c18c:	4c0a      	ldr	r4, [pc, #40]	; (800c1b8 <__libc_init_array+0x44>)
 800c18e:	1b64      	subs	r4, r4, r5
 800c190:	10a4      	asrs	r4, r4, #2
 800c192:	42a6      	cmp	r6, r4
 800c194:	d105      	bne.n	800c1a2 <__libc_init_array+0x2e>
 800c196:	bd70      	pop	{r4, r5, r6, pc}
 800c198:	00b3      	lsls	r3, r6, #2
 800c19a:	58eb      	ldr	r3, [r5, r3]
 800c19c:	4798      	blx	r3
 800c19e:	3601      	adds	r6, #1
 800c1a0:	e7ee      	b.n	800c180 <__libc_init_array+0xc>
 800c1a2:	00b3      	lsls	r3, r6, #2
 800c1a4:	58eb      	ldr	r3, [r5, r3]
 800c1a6:	4798      	blx	r3
 800c1a8:	3601      	adds	r6, #1
 800c1aa:	e7f2      	b.n	800c192 <__libc_init_array+0x1e>
 800c1ac:	0800ccac 	.word	0x0800ccac
 800c1b0:	0800ccac 	.word	0x0800ccac
 800c1b4:	0800ccac 	.word	0x0800ccac
 800c1b8:	0800ccb0 	.word	0x0800ccb0

0800c1bc <malloc>:
 800c1bc:	b510      	push	{r4, lr}
 800c1be:	4b03      	ldr	r3, [pc, #12]	; (800c1cc <malloc+0x10>)
 800c1c0:	0001      	movs	r1, r0
 800c1c2:	6818      	ldr	r0, [r3, #0]
 800c1c4:	f000 f860 	bl	800c288 <_malloc_r>
 800c1c8:	bd10      	pop	{r4, pc}
 800c1ca:	46c0      	nop			; (mov r8, r8)
 800c1cc:	2000017c 	.word	0x2000017c

0800c1d0 <free>:
 800c1d0:	b510      	push	{r4, lr}
 800c1d2:	4b03      	ldr	r3, [pc, #12]	; (800c1e0 <free+0x10>)
 800c1d4:	0001      	movs	r1, r0
 800c1d6:	6818      	ldr	r0, [r3, #0]
 800c1d8:	f000 f80c 	bl	800c1f4 <_free_r>
 800c1dc:	bd10      	pop	{r4, pc}
 800c1de:	46c0      	nop			; (mov r8, r8)
 800c1e0:	2000017c 	.word	0x2000017c

0800c1e4 <memset>:
 800c1e4:	0003      	movs	r3, r0
 800c1e6:	1882      	adds	r2, r0, r2
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d100      	bne.n	800c1ee <memset+0xa>
 800c1ec:	4770      	bx	lr
 800c1ee:	7019      	strb	r1, [r3, #0]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	e7f9      	b.n	800c1e8 <memset+0x4>

0800c1f4 <_free_r>:
 800c1f4:	b570      	push	{r4, r5, r6, lr}
 800c1f6:	0005      	movs	r5, r0
 800c1f8:	2900      	cmp	r1, #0
 800c1fa:	d010      	beq.n	800c21e <_free_r+0x2a>
 800c1fc:	1f0c      	subs	r4, r1, #4
 800c1fe:	6823      	ldr	r3, [r4, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	da00      	bge.n	800c206 <_free_r+0x12>
 800c204:	18e4      	adds	r4, r4, r3
 800c206:	0028      	movs	r0, r5
 800c208:	f000 f8ce 	bl	800c3a8 <__malloc_lock>
 800c20c:	4a1d      	ldr	r2, [pc, #116]	; (800c284 <_free_r+0x90>)
 800c20e:	6813      	ldr	r3, [r2, #0]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d105      	bne.n	800c220 <_free_r+0x2c>
 800c214:	6063      	str	r3, [r4, #4]
 800c216:	6014      	str	r4, [r2, #0]
 800c218:	0028      	movs	r0, r5
 800c21a:	f000 f8cd 	bl	800c3b8 <__malloc_unlock>
 800c21e:	bd70      	pop	{r4, r5, r6, pc}
 800c220:	42a3      	cmp	r3, r4
 800c222:	d908      	bls.n	800c236 <_free_r+0x42>
 800c224:	6821      	ldr	r1, [r4, #0]
 800c226:	1860      	adds	r0, r4, r1
 800c228:	4283      	cmp	r3, r0
 800c22a:	d1f3      	bne.n	800c214 <_free_r+0x20>
 800c22c:	6818      	ldr	r0, [r3, #0]
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	1841      	adds	r1, r0, r1
 800c232:	6021      	str	r1, [r4, #0]
 800c234:	e7ee      	b.n	800c214 <_free_r+0x20>
 800c236:	001a      	movs	r2, r3
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d001      	beq.n	800c242 <_free_r+0x4e>
 800c23e:	42a3      	cmp	r3, r4
 800c240:	d9f9      	bls.n	800c236 <_free_r+0x42>
 800c242:	6811      	ldr	r1, [r2, #0]
 800c244:	1850      	adds	r0, r2, r1
 800c246:	42a0      	cmp	r0, r4
 800c248:	d10b      	bne.n	800c262 <_free_r+0x6e>
 800c24a:	6820      	ldr	r0, [r4, #0]
 800c24c:	1809      	adds	r1, r1, r0
 800c24e:	1850      	adds	r0, r2, r1
 800c250:	6011      	str	r1, [r2, #0]
 800c252:	4283      	cmp	r3, r0
 800c254:	d1e0      	bne.n	800c218 <_free_r+0x24>
 800c256:	6818      	ldr	r0, [r3, #0]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	1841      	adds	r1, r0, r1
 800c25c:	6011      	str	r1, [r2, #0]
 800c25e:	6053      	str	r3, [r2, #4]
 800c260:	e7da      	b.n	800c218 <_free_r+0x24>
 800c262:	42a0      	cmp	r0, r4
 800c264:	d902      	bls.n	800c26c <_free_r+0x78>
 800c266:	230c      	movs	r3, #12
 800c268:	602b      	str	r3, [r5, #0]
 800c26a:	e7d5      	b.n	800c218 <_free_r+0x24>
 800c26c:	6821      	ldr	r1, [r4, #0]
 800c26e:	1860      	adds	r0, r4, r1
 800c270:	4283      	cmp	r3, r0
 800c272:	d103      	bne.n	800c27c <_free_r+0x88>
 800c274:	6818      	ldr	r0, [r3, #0]
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	1841      	adds	r1, r0, r1
 800c27a:	6021      	str	r1, [r4, #0]
 800c27c:	6063      	str	r3, [r4, #4]
 800c27e:	6054      	str	r4, [r2, #4]
 800c280:	e7ca      	b.n	800c218 <_free_r+0x24>
 800c282:	46c0      	nop			; (mov r8, r8)
 800c284:	20000480 	.word	0x20000480

0800c288 <_malloc_r>:
 800c288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c28a:	2303      	movs	r3, #3
 800c28c:	1ccd      	adds	r5, r1, #3
 800c28e:	439d      	bics	r5, r3
 800c290:	3508      	adds	r5, #8
 800c292:	0006      	movs	r6, r0
 800c294:	2d0c      	cmp	r5, #12
 800c296:	d21f      	bcs.n	800c2d8 <_malloc_r+0x50>
 800c298:	250c      	movs	r5, #12
 800c29a:	42a9      	cmp	r1, r5
 800c29c:	d81e      	bhi.n	800c2dc <_malloc_r+0x54>
 800c29e:	0030      	movs	r0, r6
 800c2a0:	f000 f882 	bl	800c3a8 <__malloc_lock>
 800c2a4:	4925      	ldr	r1, [pc, #148]	; (800c33c <_malloc_r+0xb4>)
 800c2a6:	680a      	ldr	r2, [r1, #0]
 800c2a8:	0014      	movs	r4, r2
 800c2aa:	2c00      	cmp	r4, #0
 800c2ac:	d11a      	bne.n	800c2e4 <_malloc_r+0x5c>
 800c2ae:	4f24      	ldr	r7, [pc, #144]	; (800c340 <_malloc_r+0xb8>)
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d104      	bne.n	800c2c0 <_malloc_r+0x38>
 800c2b6:	0021      	movs	r1, r4
 800c2b8:	0030      	movs	r0, r6
 800c2ba:	f000 f843 	bl	800c344 <_sbrk_r>
 800c2be:	6038      	str	r0, [r7, #0]
 800c2c0:	0029      	movs	r1, r5
 800c2c2:	0030      	movs	r0, r6
 800c2c4:	f000 f83e 	bl	800c344 <_sbrk_r>
 800c2c8:	1c43      	adds	r3, r0, #1
 800c2ca:	d12b      	bne.n	800c324 <_malloc_r+0x9c>
 800c2cc:	230c      	movs	r3, #12
 800c2ce:	0030      	movs	r0, r6
 800c2d0:	6033      	str	r3, [r6, #0]
 800c2d2:	f000 f871 	bl	800c3b8 <__malloc_unlock>
 800c2d6:	e003      	b.n	800c2e0 <_malloc_r+0x58>
 800c2d8:	2d00      	cmp	r5, #0
 800c2da:	dade      	bge.n	800c29a <_malloc_r+0x12>
 800c2dc:	230c      	movs	r3, #12
 800c2de:	6033      	str	r3, [r6, #0]
 800c2e0:	2000      	movs	r0, #0
 800c2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2e4:	6823      	ldr	r3, [r4, #0]
 800c2e6:	1b5b      	subs	r3, r3, r5
 800c2e8:	d419      	bmi.n	800c31e <_malloc_r+0x96>
 800c2ea:	2b0b      	cmp	r3, #11
 800c2ec:	d903      	bls.n	800c2f6 <_malloc_r+0x6e>
 800c2ee:	6023      	str	r3, [r4, #0]
 800c2f0:	18e4      	adds	r4, r4, r3
 800c2f2:	6025      	str	r5, [r4, #0]
 800c2f4:	e003      	b.n	800c2fe <_malloc_r+0x76>
 800c2f6:	6863      	ldr	r3, [r4, #4]
 800c2f8:	42a2      	cmp	r2, r4
 800c2fa:	d10e      	bne.n	800c31a <_malloc_r+0x92>
 800c2fc:	600b      	str	r3, [r1, #0]
 800c2fe:	0030      	movs	r0, r6
 800c300:	f000 f85a 	bl	800c3b8 <__malloc_unlock>
 800c304:	0020      	movs	r0, r4
 800c306:	2207      	movs	r2, #7
 800c308:	300b      	adds	r0, #11
 800c30a:	1d23      	adds	r3, r4, #4
 800c30c:	4390      	bics	r0, r2
 800c30e:	1ac2      	subs	r2, r0, r3
 800c310:	4298      	cmp	r0, r3
 800c312:	d0e6      	beq.n	800c2e2 <_malloc_r+0x5a>
 800c314:	1a1b      	subs	r3, r3, r0
 800c316:	50a3      	str	r3, [r4, r2]
 800c318:	e7e3      	b.n	800c2e2 <_malloc_r+0x5a>
 800c31a:	6053      	str	r3, [r2, #4]
 800c31c:	e7ef      	b.n	800c2fe <_malloc_r+0x76>
 800c31e:	0022      	movs	r2, r4
 800c320:	6864      	ldr	r4, [r4, #4]
 800c322:	e7c2      	b.n	800c2aa <_malloc_r+0x22>
 800c324:	2303      	movs	r3, #3
 800c326:	1cc4      	adds	r4, r0, #3
 800c328:	439c      	bics	r4, r3
 800c32a:	42a0      	cmp	r0, r4
 800c32c:	d0e1      	beq.n	800c2f2 <_malloc_r+0x6a>
 800c32e:	1a21      	subs	r1, r4, r0
 800c330:	0030      	movs	r0, r6
 800c332:	f000 f807 	bl	800c344 <_sbrk_r>
 800c336:	1c43      	adds	r3, r0, #1
 800c338:	d1db      	bne.n	800c2f2 <_malloc_r+0x6a>
 800c33a:	e7c7      	b.n	800c2cc <_malloc_r+0x44>
 800c33c:	20000480 	.word	0x20000480
 800c340:	20000484 	.word	0x20000484

0800c344 <_sbrk_r>:
 800c344:	2300      	movs	r3, #0
 800c346:	b570      	push	{r4, r5, r6, lr}
 800c348:	4d06      	ldr	r5, [pc, #24]	; (800c364 <_sbrk_r+0x20>)
 800c34a:	0004      	movs	r4, r0
 800c34c:	0008      	movs	r0, r1
 800c34e:	602b      	str	r3, [r5, #0]
 800c350:	f7f5 fc4e 	bl	8001bf0 <_sbrk>
 800c354:	1c43      	adds	r3, r0, #1
 800c356:	d103      	bne.n	800c360 <_sbrk_r+0x1c>
 800c358:	682b      	ldr	r3, [r5, #0]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d000      	beq.n	800c360 <_sbrk_r+0x1c>
 800c35e:	6023      	str	r3, [r4, #0]
 800c360:	bd70      	pop	{r4, r5, r6, pc}
 800c362:	46c0      	nop			; (mov r8, r8)
 800c364:	2000165c 	.word	0x2000165c

0800c368 <siprintf>:
 800c368:	b40e      	push	{r1, r2, r3}
 800c36a:	b500      	push	{lr}
 800c36c:	490b      	ldr	r1, [pc, #44]	; (800c39c <siprintf+0x34>)
 800c36e:	b09c      	sub	sp, #112	; 0x70
 800c370:	ab1d      	add	r3, sp, #116	; 0x74
 800c372:	9002      	str	r0, [sp, #8]
 800c374:	9006      	str	r0, [sp, #24]
 800c376:	9107      	str	r1, [sp, #28]
 800c378:	9104      	str	r1, [sp, #16]
 800c37a:	4809      	ldr	r0, [pc, #36]	; (800c3a0 <siprintf+0x38>)
 800c37c:	4909      	ldr	r1, [pc, #36]	; (800c3a4 <siprintf+0x3c>)
 800c37e:	cb04      	ldmia	r3!, {r2}
 800c380:	9105      	str	r1, [sp, #20]
 800c382:	6800      	ldr	r0, [r0, #0]
 800c384:	a902      	add	r1, sp, #8
 800c386:	9301      	str	r3, [sp, #4]
 800c388:	f000 f880 	bl	800c48c <_svfiprintf_r>
 800c38c:	2300      	movs	r3, #0
 800c38e:	9a02      	ldr	r2, [sp, #8]
 800c390:	7013      	strb	r3, [r2, #0]
 800c392:	b01c      	add	sp, #112	; 0x70
 800c394:	bc08      	pop	{r3}
 800c396:	b003      	add	sp, #12
 800c398:	4718      	bx	r3
 800c39a:	46c0      	nop			; (mov r8, r8)
 800c39c:	7fffffff 	.word	0x7fffffff
 800c3a0:	2000017c 	.word	0x2000017c
 800c3a4:	ffff0208 	.word	0xffff0208

0800c3a8 <__malloc_lock>:
 800c3a8:	b510      	push	{r4, lr}
 800c3aa:	4802      	ldr	r0, [pc, #8]	; (800c3b4 <__malloc_lock+0xc>)
 800c3ac:	f000 faf0 	bl	800c990 <__retarget_lock_acquire_recursive>
 800c3b0:	bd10      	pop	{r4, pc}
 800c3b2:	46c0      	nop			; (mov r8, r8)
 800c3b4:	20001664 	.word	0x20001664

0800c3b8 <__malloc_unlock>:
 800c3b8:	b510      	push	{r4, lr}
 800c3ba:	4802      	ldr	r0, [pc, #8]	; (800c3c4 <__malloc_unlock+0xc>)
 800c3bc:	f000 fae9 	bl	800c992 <__retarget_lock_release_recursive>
 800c3c0:	bd10      	pop	{r4, pc}
 800c3c2:	46c0      	nop			; (mov r8, r8)
 800c3c4:	20001664 	.word	0x20001664

0800c3c8 <__ssputs_r>:
 800c3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3ca:	688e      	ldr	r6, [r1, #8]
 800c3cc:	b085      	sub	sp, #20
 800c3ce:	0007      	movs	r7, r0
 800c3d0:	000c      	movs	r4, r1
 800c3d2:	9203      	str	r2, [sp, #12]
 800c3d4:	9301      	str	r3, [sp, #4]
 800c3d6:	429e      	cmp	r6, r3
 800c3d8:	d83c      	bhi.n	800c454 <__ssputs_r+0x8c>
 800c3da:	2390      	movs	r3, #144	; 0x90
 800c3dc:	898a      	ldrh	r2, [r1, #12]
 800c3de:	00db      	lsls	r3, r3, #3
 800c3e0:	421a      	tst	r2, r3
 800c3e2:	d034      	beq.n	800c44e <__ssputs_r+0x86>
 800c3e4:	2503      	movs	r5, #3
 800c3e6:	6909      	ldr	r1, [r1, #16]
 800c3e8:	6823      	ldr	r3, [r4, #0]
 800c3ea:	1a5b      	subs	r3, r3, r1
 800c3ec:	9302      	str	r3, [sp, #8]
 800c3ee:	6963      	ldr	r3, [r4, #20]
 800c3f0:	9802      	ldr	r0, [sp, #8]
 800c3f2:	435d      	muls	r5, r3
 800c3f4:	0feb      	lsrs	r3, r5, #31
 800c3f6:	195d      	adds	r5, r3, r5
 800c3f8:	9b01      	ldr	r3, [sp, #4]
 800c3fa:	106d      	asrs	r5, r5, #1
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	181b      	adds	r3, r3, r0
 800c400:	42ab      	cmp	r3, r5
 800c402:	d900      	bls.n	800c406 <__ssputs_r+0x3e>
 800c404:	001d      	movs	r5, r3
 800c406:	0553      	lsls	r3, r2, #21
 800c408:	d532      	bpl.n	800c470 <__ssputs_r+0xa8>
 800c40a:	0029      	movs	r1, r5
 800c40c:	0038      	movs	r0, r7
 800c40e:	f7ff ff3b 	bl	800c288 <_malloc_r>
 800c412:	1e06      	subs	r6, r0, #0
 800c414:	d109      	bne.n	800c42a <__ssputs_r+0x62>
 800c416:	230c      	movs	r3, #12
 800c418:	603b      	str	r3, [r7, #0]
 800c41a:	2340      	movs	r3, #64	; 0x40
 800c41c:	2001      	movs	r0, #1
 800c41e:	89a2      	ldrh	r2, [r4, #12]
 800c420:	4240      	negs	r0, r0
 800c422:	4313      	orrs	r3, r2
 800c424:	81a3      	strh	r3, [r4, #12]
 800c426:	b005      	add	sp, #20
 800c428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c42a:	9a02      	ldr	r2, [sp, #8]
 800c42c:	6921      	ldr	r1, [r4, #16]
 800c42e:	f000 fabc 	bl	800c9aa <memcpy>
 800c432:	89a3      	ldrh	r3, [r4, #12]
 800c434:	4a14      	ldr	r2, [pc, #80]	; (800c488 <__ssputs_r+0xc0>)
 800c436:	401a      	ands	r2, r3
 800c438:	2380      	movs	r3, #128	; 0x80
 800c43a:	4313      	orrs	r3, r2
 800c43c:	81a3      	strh	r3, [r4, #12]
 800c43e:	9b02      	ldr	r3, [sp, #8]
 800c440:	6126      	str	r6, [r4, #16]
 800c442:	18f6      	adds	r6, r6, r3
 800c444:	6026      	str	r6, [r4, #0]
 800c446:	6165      	str	r5, [r4, #20]
 800c448:	9e01      	ldr	r6, [sp, #4]
 800c44a:	1aed      	subs	r5, r5, r3
 800c44c:	60a5      	str	r5, [r4, #8]
 800c44e:	9b01      	ldr	r3, [sp, #4]
 800c450:	429e      	cmp	r6, r3
 800c452:	d900      	bls.n	800c456 <__ssputs_r+0x8e>
 800c454:	9e01      	ldr	r6, [sp, #4]
 800c456:	0032      	movs	r2, r6
 800c458:	9903      	ldr	r1, [sp, #12]
 800c45a:	6820      	ldr	r0, [r4, #0]
 800c45c:	f000 faae 	bl	800c9bc <memmove>
 800c460:	68a3      	ldr	r3, [r4, #8]
 800c462:	2000      	movs	r0, #0
 800c464:	1b9b      	subs	r3, r3, r6
 800c466:	60a3      	str	r3, [r4, #8]
 800c468:	6823      	ldr	r3, [r4, #0]
 800c46a:	199e      	adds	r6, r3, r6
 800c46c:	6026      	str	r6, [r4, #0]
 800c46e:	e7da      	b.n	800c426 <__ssputs_r+0x5e>
 800c470:	002a      	movs	r2, r5
 800c472:	0038      	movs	r0, r7
 800c474:	f000 fab5 	bl	800c9e2 <_realloc_r>
 800c478:	1e06      	subs	r6, r0, #0
 800c47a:	d1e0      	bne.n	800c43e <__ssputs_r+0x76>
 800c47c:	0038      	movs	r0, r7
 800c47e:	6921      	ldr	r1, [r4, #16]
 800c480:	f7ff feb8 	bl	800c1f4 <_free_r>
 800c484:	e7c7      	b.n	800c416 <__ssputs_r+0x4e>
 800c486:	46c0      	nop			; (mov r8, r8)
 800c488:	fffffb7f 	.word	0xfffffb7f

0800c48c <_svfiprintf_r>:
 800c48c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c48e:	b0a1      	sub	sp, #132	; 0x84
 800c490:	9003      	str	r0, [sp, #12]
 800c492:	001d      	movs	r5, r3
 800c494:	898b      	ldrh	r3, [r1, #12]
 800c496:	000f      	movs	r7, r1
 800c498:	0016      	movs	r6, r2
 800c49a:	061b      	lsls	r3, r3, #24
 800c49c:	d511      	bpl.n	800c4c2 <_svfiprintf_r+0x36>
 800c49e:	690b      	ldr	r3, [r1, #16]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d10e      	bne.n	800c4c2 <_svfiprintf_r+0x36>
 800c4a4:	2140      	movs	r1, #64	; 0x40
 800c4a6:	f7ff feef 	bl	800c288 <_malloc_r>
 800c4aa:	6038      	str	r0, [r7, #0]
 800c4ac:	6138      	str	r0, [r7, #16]
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	d105      	bne.n	800c4be <_svfiprintf_r+0x32>
 800c4b2:	230c      	movs	r3, #12
 800c4b4:	9a03      	ldr	r2, [sp, #12]
 800c4b6:	3801      	subs	r0, #1
 800c4b8:	6013      	str	r3, [r2, #0]
 800c4ba:	b021      	add	sp, #132	; 0x84
 800c4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4be:	2340      	movs	r3, #64	; 0x40
 800c4c0:	617b      	str	r3, [r7, #20]
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	ac08      	add	r4, sp, #32
 800c4c6:	6163      	str	r3, [r4, #20]
 800c4c8:	3320      	adds	r3, #32
 800c4ca:	7663      	strb	r3, [r4, #25]
 800c4cc:	3310      	adds	r3, #16
 800c4ce:	76a3      	strb	r3, [r4, #26]
 800c4d0:	9507      	str	r5, [sp, #28]
 800c4d2:	0035      	movs	r5, r6
 800c4d4:	782b      	ldrb	r3, [r5, #0]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d001      	beq.n	800c4de <_svfiprintf_r+0x52>
 800c4da:	2b25      	cmp	r3, #37	; 0x25
 800c4dc:	d147      	bne.n	800c56e <_svfiprintf_r+0xe2>
 800c4de:	1bab      	subs	r3, r5, r6
 800c4e0:	9305      	str	r3, [sp, #20]
 800c4e2:	42b5      	cmp	r5, r6
 800c4e4:	d00c      	beq.n	800c500 <_svfiprintf_r+0x74>
 800c4e6:	0032      	movs	r2, r6
 800c4e8:	0039      	movs	r1, r7
 800c4ea:	9803      	ldr	r0, [sp, #12]
 800c4ec:	f7ff ff6c 	bl	800c3c8 <__ssputs_r>
 800c4f0:	1c43      	adds	r3, r0, #1
 800c4f2:	d100      	bne.n	800c4f6 <_svfiprintf_r+0x6a>
 800c4f4:	e0ae      	b.n	800c654 <_svfiprintf_r+0x1c8>
 800c4f6:	6962      	ldr	r2, [r4, #20]
 800c4f8:	9b05      	ldr	r3, [sp, #20]
 800c4fa:	4694      	mov	ip, r2
 800c4fc:	4463      	add	r3, ip
 800c4fe:	6163      	str	r3, [r4, #20]
 800c500:	782b      	ldrb	r3, [r5, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d100      	bne.n	800c508 <_svfiprintf_r+0x7c>
 800c506:	e0a5      	b.n	800c654 <_svfiprintf_r+0x1c8>
 800c508:	2201      	movs	r2, #1
 800c50a:	2300      	movs	r3, #0
 800c50c:	4252      	negs	r2, r2
 800c50e:	6062      	str	r2, [r4, #4]
 800c510:	a904      	add	r1, sp, #16
 800c512:	3254      	adds	r2, #84	; 0x54
 800c514:	1852      	adds	r2, r2, r1
 800c516:	1c6e      	adds	r6, r5, #1
 800c518:	6023      	str	r3, [r4, #0]
 800c51a:	60e3      	str	r3, [r4, #12]
 800c51c:	60a3      	str	r3, [r4, #8]
 800c51e:	7013      	strb	r3, [r2, #0]
 800c520:	65a3      	str	r3, [r4, #88]	; 0x58
 800c522:	2205      	movs	r2, #5
 800c524:	7831      	ldrb	r1, [r6, #0]
 800c526:	4854      	ldr	r0, [pc, #336]	; (800c678 <_svfiprintf_r+0x1ec>)
 800c528:	f000 fa34 	bl	800c994 <memchr>
 800c52c:	1c75      	adds	r5, r6, #1
 800c52e:	2800      	cmp	r0, #0
 800c530:	d11f      	bne.n	800c572 <_svfiprintf_r+0xe6>
 800c532:	6822      	ldr	r2, [r4, #0]
 800c534:	06d3      	lsls	r3, r2, #27
 800c536:	d504      	bpl.n	800c542 <_svfiprintf_r+0xb6>
 800c538:	2353      	movs	r3, #83	; 0x53
 800c53a:	a904      	add	r1, sp, #16
 800c53c:	185b      	adds	r3, r3, r1
 800c53e:	2120      	movs	r1, #32
 800c540:	7019      	strb	r1, [r3, #0]
 800c542:	0713      	lsls	r3, r2, #28
 800c544:	d504      	bpl.n	800c550 <_svfiprintf_r+0xc4>
 800c546:	2353      	movs	r3, #83	; 0x53
 800c548:	a904      	add	r1, sp, #16
 800c54a:	185b      	adds	r3, r3, r1
 800c54c:	212b      	movs	r1, #43	; 0x2b
 800c54e:	7019      	strb	r1, [r3, #0]
 800c550:	7833      	ldrb	r3, [r6, #0]
 800c552:	2b2a      	cmp	r3, #42	; 0x2a
 800c554:	d016      	beq.n	800c584 <_svfiprintf_r+0xf8>
 800c556:	0035      	movs	r5, r6
 800c558:	2100      	movs	r1, #0
 800c55a:	200a      	movs	r0, #10
 800c55c:	68e3      	ldr	r3, [r4, #12]
 800c55e:	782a      	ldrb	r2, [r5, #0]
 800c560:	1c6e      	adds	r6, r5, #1
 800c562:	3a30      	subs	r2, #48	; 0x30
 800c564:	2a09      	cmp	r2, #9
 800c566:	d94e      	bls.n	800c606 <_svfiprintf_r+0x17a>
 800c568:	2900      	cmp	r1, #0
 800c56a:	d111      	bne.n	800c590 <_svfiprintf_r+0x104>
 800c56c:	e017      	b.n	800c59e <_svfiprintf_r+0x112>
 800c56e:	3501      	adds	r5, #1
 800c570:	e7b0      	b.n	800c4d4 <_svfiprintf_r+0x48>
 800c572:	4b41      	ldr	r3, [pc, #260]	; (800c678 <_svfiprintf_r+0x1ec>)
 800c574:	6822      	ldr	r2, [r4, #0]
 800c576:	1ac0      	subs	r0, r0, r3
 800c578:	2301      	movs	r3, #1
 800c57a:	4083      	lsls	r3, r0
 800c57c:	4313      	orrs	r3, r2
 800c57e:	002e      	movs	r6, r5
 800c580:	6023      	str	r3, [r4, #0]
 800c582:	e7ce      	b.n	800c522 <_svfiprintf_r+0x96>
 800c584:	9b07      	ldr	r3, [sp, #28]
 800c586:	1d19      	adds	r1, r3, #4
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	9107      	str	r1, [sp, #28]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	db01      	blt.n	800c594 <_svfiprintf_r+0x108>
 800c590:	930b      	str	r3, [sp, #44]	; 0x2c
 800c592:	e004      	b.n	800c59e <_svfiprintf_r+0x112>
 800c594:	425b      	negs	r3, r3
 800c596:	60e3      	str	r3, [r4, #12]
 800c598:	2302      	movs	r3, #2
 800c59a:	4313      	orrs	r3, r2
 800c59c:	6023      	str	r3, [r4, #0]
 800c59e:	782b      	ldrb	r3, [r5, #0]
 800c5a0:	2b2e      	cmp	r3, #46	; 0x2e
 800c5a2:	d10a      	bne.n	800c5ba <_svfiprintf_r+0x12e>
 800c5a4:	786b      	ldrb	r3, [r5, #1]
 800c5a6:	2b2a      	cmp	r3, #42	; 0x2a
 800c5a8:	d135      	bne.n	800c616 <_svfiprintf_r+0x18a>
 800c5aa:	9b07      	ldr	r3, [sp, #28]
 800c5ac:	3502      	adds	r5, #2
 800c5ae:	1d1a      	adds	r2, r3, #4
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	9207      	str	r2, [sp, #28]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	db2b      	blt.n	800c610 <_svfiprintf_r+0x184>
 800c5b8:	9309      	str	r3, [sp, #36]	; 0x24
 800c5ba:	4e30      	ldr	r6, [pc, #192]	; (800c67c <_svfiprintf_r+0x1f0>)
 800c5bc:	2203      	movs	r2, #3
 800c5be:	0030      	movs	r0, r6
 800c5c0:	7829      	ldrb	r1, [r5, #0]
 800c5c2:	f000 f9e7 	bl	800c994 <memchr>
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	d006      	beq.n	800c5d8 <_svfiprintf_r+0x14c>
 800c5ca:	2340      	movs	r3, #64	; 0x40
 800c5cc:	1b80      	subs	r0, r0, r6
 800c5ce:	4083      	lsls	r3, r0
 800c5d0:	6822      	ldr	r2, [r4, #0]
 800c5d2:	3501      	adds	r5, #1
 800c5d4:	4313      	orrs	r3, r2
 800c5d6:	6023      	str	r3, [r4, #0]
 800c5d8:	7829      	ldrb	r1, [r5, #0]
 800c5da:	2206      	movs	r2, #6
 800c5dc:	4828      	ldr	r0, [pc, #160]	; (800c680 <_svfiprintf_r+0x1f4>)
 800c5de:	1c6e      	adds	r6, r5, #1
 800c5e0:	7621      	strb	r1, [r4, #24]
 800c5e2:	f000 f9d7 	bl	800c994 <memchr>
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	d03c      	beq.n	800c664 <_svfiprintf_r+0x1d8>
 800c5ea:	4b26      	ldr	r3, [pc, #152]	; (800c684 <_svfiprintf_r+0x1f8>)
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d125      	bne.n	800c63c <_svfiprintf_r+0x1b0>
 800c5f0:	2207      	movs	r2, #7
 800c5f2:	9b07      	ldr	r3, [sp, #28]
 800c5f4:	3307      	adds	r3, #7
 800c5f6:	4393      	bics	r3, r2
 800c5f8:	3308      	adds	r3, #8
 800c5fa:	9307      	str	r3, [sp, #28]
 800c5fc:	6963      	ldr	r3, [r4, #20]
 800c5fe:	9a04      	ldr	r2, [sp, #16]
 800c600:	189b      	adds	r3, r3, r2
 800c602:	6163      	str	r3, [r4, #20]
 800c604:	e765      	b.n	800c4d2 <_svfiprintf_r+0x46>
 800c606:	4343      	muls	r3, r0
 800c608:	0035      	movs	r5, r6
 800c60a:	2101      	movs	r1, #1
 800c60c:	189b      	adds	r3, r3, r2
 800c60e:	e7a6      	b.n	800c55e <_svfiprintf_r+0xd2>
 800c610:	2301      	movs	r3, #1
 800c612:	425b      	negs	r3, r3
 800c614:	e7d0      	b.n	800c5b8 <_svfiprintf_r+0x12c>
 800c616:	2300      	movs	r3, #0
 800c618:	200a      	movs	r0, #10
 800c61a:	001a      	movs	r2, r3
 800c61c:	3501      	adds	r5, #1
 800c61e:	6063      	str	r3, [r4, #4]
 800c620:	7829      	ldrb	r1, [r5, #0]
 800c622:	1c6e      	adds	r6, r5, #1
 800c624:	3930      	subs	r1, #48	; 0x30
 800c626:	2909      	cmp	r1, #9
 800c628:	d903      	bls.n	800c632 <_svfiprintf_r+0x1a6>
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d0c5      	beq.n	800c5ba <_svfiprintf_r+0x12e>
 800c62e:	9209      	str	r2, [sp, #36]	; 0x24
 800c630:	e7c3      	b.n	800c5ba <_svfiprintf_r+0x12e>
 800c632:	4342      	muls	r2, r0
 800c634:	0035      	movs	r5, r6
 800c636:	2301      	movs	r3, #1
 800c638:	1852      	adds	r2, r2, r1
 800c63a:	e7f1      	b.n	800c620 <_svfiprintf_r+0x194>
 800c63c:	ab07      	add	r3, sp, #28
 800c63e:	9300      	str	r3, [sp, #0]
 800c640:	003a      	movs	r2, r7
 800c642:	0021      	movs	r1, r4
 800c644:	4b10      	ldr	r3, [pc, #64]	; (800c688 <_svfiprintf_r+0x1fc>)
 800c646:	9803      	ldr	r0, [sp, #12]
 800c648:	e000      	b.n	800c64c <_svfiprintf_r+0x1c0>
 800c64a:	bf00      	nop
 800c64c:	9004      	str	r0, [sp, #16]
 800c64e:	9b04      	ldr	r3, [sp, #16]
 800c650:	3301      	adds	r3, #1
 800c652:	d1d3      	bne.n	800c5fc <_svfiprintf_r+0x170>
 800c654:	89bb      	ldrh	r3, [r7, #12]
 800c656:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c658:	065b      	lsls	r3, r3, #25
 800c65a:	d400      	bmi.n	800c65e <_svfiprintf_r+0x1d2>
 800c65c:	e72d      	b.n	800c4ba <_svfiprintf_r+0x2e>
 800c65e:	2001      	movs	r0, #1
 800c660:	4240      	negs	r0, r0
 800c662:	e72a      	b.n	800c4ba <_svfiprintf_r+0x2e>
 800c664:	ab07      	add	r3, sp, #28
 800c666:	9300      	str	r3, [sp, #0]
 800c668:	003a      	movs	r2, r7
 800c66a:	0021      	movs	r1, r4
 800c66c:	4b06      	ldr	r3, [pc, #24]	; (800c688 <_svfiprintf_r+0x1fc>)
 800c66e:	9803      	ldr	r0, [sp, #12]
 800c670:	f000 f87c 	bl	800c76c <_printf_i>
 800c674:	e7ea      	b.n	800c64c <_svfiprintf_r+0x1c0>
 800c676:	46c0      	nop			; (mov r8, r8)
 800c678:	0800cc78 	.word	0x0800cc78
 800c67c:	0800cc7e 	.word	0x0800cc7e
 800c680:	0800cc82 	.word	0x0800cc82
 800c684:	00000000 	.word	0x00000000
 800c688:	0800c3c9 	.word	0x0800c3c9

0800c68c <_printf_common>:
 800c68c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c68e:	0015      	movs	r5, r2
 800c690:	9301      	str	r3, [sp, #4]
 800c692:	688a      	ldr	r2, [r1, #8]
 800c694:	690b      	ldr	r3, [r1, #16]
 800c696:	000c      	movs	r4, r1
 800c698:	9000      	str	r0, [sp, #0]
 800c69a:	4293      	cmp	r3, r2
 800c69c:	da00      	bge.n	800c6a0 <_printf_common+0x14>
 800c69e:	0013      	movs	r3, r2
 800c6a0:	0022      	movs	r2, r4
 800c6a2:	602b      	str	r3, [r5, #0]
 800c6a4:	3243      	adds	r2, #67	; 0x43
 800c6a6:	7812      	ldrb	r2, [r2, #0]
 800c6a8:	2a00      	cmp	r2, #0
 800c6aa:	d001      	beq.n	800c6b0 <_printf_common+0x24>
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	602b      	str	r3, [r5, #0]
 800c6b0:	6823      	ldr	r3, [r4, #0]
 800c6b2:	069b      	lsls	r3, r3, #26
 800c6b4:	d502      	bpl.n	800c6bc <_printf_common+0x30>
 800c6b6:	682b      	ldr	r3, [r5, #0]
 800c6b8:	3302      	adds	r3, #2
 800c6ba:	602b      	str	r3, [r5, #0]
 800c6bc:	6822      	ldr	r2, [r4, #0]
 800c6be:	2306      	movs	r3, #6
 800c6c0:	0017      	movs	r7, r2
 800c6c2:	401f      	ands	r7, r3
 800c6c4:	421a      	tst	r2, r3
 800c6c6:	d027      	beq.n	800c718 <_printf_common+0x8c>
 800c6c8:	0023      	movs	r3, r4
 800c6ca:	3343      	adds	r3, #67	; 0x43
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	1e5a      	subs	r2, r3, #1
 800c6d0:	4193      	sbcs	r3, r2
 800c6d2:	6822      	ldr	r2, [r4, #0]
 800c6d4:	0692      	lsls	r2, r2, #26
 800c6d6:	d430      	bmi.n	800c73a <_printf_common+0xae>
 800c6d8:	0022      	movs	r2, r4
 800c6da:	9901      	ldr	r1, [sp, #4]
 800c6dc:	9800      	ldr	r0, [sp, #0]
 800c6de:	9e08      	ldr	r6, [sp, #32]
 800c6e0:	3243      	adds	r2, #67	; 0x43
 800c6e2:	47b0      	blx	r6
 800c6e4:	1c43      	adds	r3, r0, #1
 800c6e6:	d025      	beq.n	800c734 <_printf_common+0xa8>
 800c6e8:	2306      	movs	r3, #6
 800c6ea:	6820      	ldr	r0, [r4, #0]
 800c6ec:	682a      	ldr	r2, [r5, #0]
 800c6ee:	68e1      	ldr	r1, [r4, #12]
 800c6f0:	2500      	movs	r5, #0
 800c6f2:	4003      	ands	r3, r0
 800c6f4:	2b04      	cmp	r3, #4
 800c6f6:	d103      	bne.n	800c700 <_printf_common+0x74>
 800c6f8:	1a8d      	subs	r5, r1, r2
 800c6fa:	43eb      	mvns	r3, r5
 800c6fc:	17db      	asrs	r3, r3, #31
 800c6fe:	401d      	ands	r5, r3
 800c700:	68a3      	ldr	r3, [r4, #8]
 800c702:	6922      	ldr	r2, [r4, #16]
 800c704:	4293      	cmp	r3, r2
 800c706:	dd01      	ble.n	800c70c <_printf_common+0x80>
 800c708:	1a9b      	subs	r3, r3, r2
 800c70a:	18ed      	adds	r5, r5, r3
 800c70c:	2700      	movs	r7, #0
 800c70e:	42bd      	cmp	r5, r7
 800c710:	d120      	bne.n	800c754 <_printf_common+0xc8>
 800c712:	2000      	movs	r0, #0
 800c714:	e010      	b.n	800c738 <_printf_common+0xac>
 800c716:	3701      	adds	r7, #1
 800c718:	68e3      	ldr	r3, [r4, #12]
 800c71a:	682a      	ldr	r2, [r5, #0]
 800c71c:	1a9b      	subs	r3, r3, r2
 800c71e:	42bb      	cmp	r3, r7
 800c720:	ddd2      	ble.n	800c6c8 <_printf_common+0x3c>
 800c722:	0022      	movs	r2, r4
 800c724:	2301      	movs	r3, #1
 800c726:	9901      	ldr	r1, [sp, #4]
 800c728:	9800      	ldr	r0, [sp, #0]
 800c72a:	9e08      	ldr	r6, [sp, #32]
 800c72c:	3219      	adds	r2, #25
 800c72e:	47b0      	blx	r6
 800c730:	1c43      	adds	r3, r0, #1
 800c732:	d1f0      	bne.n	800c716 <_printf_common+0x8a>
 800c734:	2001      	movs	r0, #1
 800c736:	4240      	negs	r0, r0
 800c738:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c73a:	2030      	movs	r0, #48	; 0x30
 800c73c:	18e1      	adds	r1, r4, r3
 800c73e:	3143      	adds	r1, #67	; 0x43
 800c740:	7008      	strb	r0, [r1, #0]
 800c742:	0021      	movs	r1, r4
 800c744:	1c5a      	adds	r2, r3, #1
 800c746:	3145      	adds	r1, #69	; 0x45
 800c748:	7809      	ldrb	r1, [r1, #0]
 800c74a:	18a2      	adds	r2, r4, r2
 800c74c:	3243      	adds	r2, #67	; 0x43
 800c74e:	3302      	adds	r3, #2
 800c750:	7011      	strb	r1, [r2, #0]
 800c752:	e7c1      	b.n	800c6d8 <_printf_common+0x4c>
 800c754:	0022      	movs	r2, r4
 800c756:	2301      	movs	r3, #1
 800c758:	9901      	ldr	r1, [sp, #4]
 800c75a:	9800      	ldr	r0, [sp, #0]
 800c75c:	9e08      	ldr	r6, [sp, #32]
 800c75e:	321a      	adds	r2, #26
 800c760:	47b0      	blx	r6
 800c762:	1c43      	adds	r3, r0, #1
 800c764:	d0e6      	beq.n	800c734 <_printf_common+0xa8>
 800c766:	3701      	adds	r7, #1
 800c768:	e7d1      	b.n	800c70e <_printf_common+0x82>
	...

0800c76c <_printf_i>:
 800c76c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c76e:	b08b      	sub	sp, #44	; 0x2c
 800c770:	9206      	str	r2, [sp, #24]
 800c772:	000a      	movs	r2, r1
 800c774:	3243      	adds	r2, #67	; 0x43
 800c776:	9307      	str	r3, [sp, #28]
 800c778:	9005      	str	r0, [sp, #20]
 800c77a:	9204      	str	r2, [sp, #16]
 800c77c:	7e0a      	ldrb	r2, [r1, #24]
 800c77e:	000c      	movs	r4, r1
 800c780:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c782:	2a78      	cmp	r2, #120	; 0x78
 800c784:	d806      	bhi.n	800c794 <_printf_i+0x28>
 800c786:	2a62      	cmp	r2, #98	; 0x62
 800c788:	d808      	bhi.n	800c79c <_printf_i+0x30>
 800c78a:	2a00      	cmp	r2, #0
 800c78c:	d100      	bne.n	800c790 <_printf_i+0x24>
 800c78e:	e0c0      	b.n	800c912 <_printf_i+0x1a6>
 800c790:	2a58      	cmp	r2, #88	; 0x58
 800c792:	d052      	beq.n	800c83a <_printf_i+0xce>
 800c794:	0026      	movs	r6, r4
 800c796:	3642      	adds	r6, #66	; 0x42
 800c798:	7032      	strb	r2, [r6, #0]
 800c79a:	e022      	b.n	800c7e2 <_printf_i+0x76>
 800c79c:	0010      	movs	r0, r2
 800c79e:	3863      	subs	r0, #99	; 0x63
 800c7a0:	2815      	cmp	r0, #21
 800c7a2:	d8f7      	bhi.n	800c794 <_printf_i+0x28>
 800c7a4:	f7f3 fcb8 	bl	8000118 <__gnu_thumb1_case_shi>
 800c7a8:	001f0016 	.word	0x001f0016
 800c7ac:	fff6fff6 	.word	0xfff6fff6
 800c7b0:	fff6fff6 	.word	0xfff6fff6
 800c7b4:	fff6001f 	.word	0xfff6001f
 800c7b8:	fff6fff6 	.word	0xfff6fff6
 800c7bc:	00a8fff6 	.word	0x00a8fff6
 800c7c0:	009a0036 	.word	0x009a0036
 800c7c4:	fff6fff6 	.word	0xfff6fff6
 800c7c8:	fff600b9 	.word	0xfff600b9
 800c7cc:	fff60036 	.word	0xfff60036
 800c7d0:	009efff6 	.word	0x009efff6
 800c7d4:	0026      	movs	r6, r4
 800c7d6:	681a      	ldr	r2, [r3, #0]
 800c7d8:	3642      	adds	r6, #66	; 0x42
 800c7da:	1d11      	adds	r1, r2, #4
 800c7dc:	6019      	str	r1, [r3, #0]
 800c7de:	6813      	ldr	r3, [r2, #0]
 800c7e0:	7033      	strb	r3, [r6, #0]
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e0a7      	b.n	800c936 <_printf_i+0x1ca>
 800c7e6:	6808      	ldr	r0, [r1, #0]
 800c7e8:	6819      	ldr	r1, [r3, #0]
 800c7ea:	1d0a      	adds	r2, r1, #4
 800c7ec:	0605      	lsls	r5, r0, #24
 800c7ee:	d50b      	bpl.n	800c808 <_printf_i+0x9c>
 800c7f0:	680d      	ldr	r5, [r1, #0]
 800c7f2:	601a      	str	r2, [r3, #0]
 800c7f4:	2d00      	cmp	r5, #0
 800c7f6:	da03      	bge.n	800c800 <_printf_i+0x94>
 800c7f8:	232d      	movs	r3, #45	; 0x2d
 800c7fa:	9a04      	ldr	r2, [sp, #16]
 800c7fc:	426d      	negs	r5, r5
 800c7fe:	7013      	strb	r3, [r2, #0]
 800c800:	4b61      	ldr	r3, [pc, #388]	; (800c988 <_printf_i+0x21c>)
 800c802:	270a      	movs	r7, #10
 800c804:	9303      	str	r3, [sp, #12]
 800c806:	e032      	b.n	800c86e <_printf_i+0x102>
 800c808:	680d      	ldr	r5, [r1, #0]
 800c80a:	601a      	str	r2, [r3, #0]
 800c80c:	0641      	lsls	r1, r0, #25
 800c80e:	d5f1      	bpl.n	800c7f4 <_printf_i+0x88>
 800c810:	b22d      	sxth	r5, r5
 800c812:	e7ef      	b.n	800c7f4 <_printf_i+0x88>
 800c814:	680d      	ldr	r5, [r1, #0]
 800c816:	6819      	ldr	r1, [r3, #0]
 800c818:	1d08      	adds	r0, r1, #4
 800c81a:	6018      	str	r0, [r3, #0]
 800c81c:	062e      	lsls	r6, r5, #24
 800c81e:	d501      	bpl.n	800c824 <_printf_i+0xb8>
 800c820:	680d      	ldr	r5, [r1, #0]
 800c822:	e003      	b.n	800c82c <_printf_i+0xc0>
 800c824:	066d      	lsls	r5, r5, #25
 800c826:	d5fb      	bpl.n	800c820 <_printf_i+0xb4>
 800c828:	680d      	ldr	r5, [r1, #0]
 800c82a:	b2ad      	uxth	r5, r5
 800c82c:	4b56      	ldr	r3, [pc, #344]	; (800c988 <_printf_i+0x21c>)
 800c82e:	270a      	movs	r7, #10
 800c830:	9303      	str	r3, [sp, #12]
 800c832:	2a6f      	cmp	r2, #111	; 0x6f
 800c834:	d117      	bne.n	800c866 <_printf_i+0xfa>
 800c836:	2708      	movs	r7, #8
 800c838:	e015      	b.n	800c866 <_printf_i+0xfa>
 800c83a:	3145      	adds	r1, #69	; 0x45
 800c83c:	700a      	strb	r2, [r1, #0]
 800c83e:	4a52      	ldr	r2, [pc, #328]	; (800c988 <_printf_i+0x21c>)
 800c840:	9203      	str	r2, [sp, #12]
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	6821      	ldr	r1, [r4, #0]
 800c846:	ca20      	ldmia	r2!, {r5}
 800c848:	601a      	str	r2, [r3, #0]
 800c84a:	0608      	lsls	r0, r1, #24
 800c84c:	d550      	bpl.n	800c8f0 <_printf_i+0x184>
 800c84e:	07cb      	lsls	r3, r1, #31
 800c850:	d502      	bpl.n	800c858 <_printf_i+0xec>
 800c852:	2320      	movs	r3, #32
 800c854:	4319      	orrs	r1, r3
 800c856:	6021      	str	r1, [r4, #0]
 800c858:	2710      	movs	r7, #16
 800c85a:	2d00      	cmp	r5, #0
 800c85c:	d103      	bne.n	800c866 <_printf_i+0xfa>
 800c85e:	2320      	movs	r3, #32
 800c860:	6822      	ldr	r2, [r4, #0]
 800c862:	439a      	bics	r2, r3
 800c864:	6022      	str	r2, [r4, #0]
 800c866:	0023      	movs	r3, r4
 800c868:	2200      	movs	r2, #0
 800c86a:	3343      	adds	r3, #67	; 0x43
 800c86c:	701a      	strb	r2, [r3, #0]
 800c86e:	6863      	ldr	r3, [r4, #4]
 800c870:	60a3      	str	r3, [r4, #8]
 800c872:	2b00      	cmp	r3, #0
 800c874:	db03      	blt.n	800c87e <_printf_i+0x112>
 800c876:	2204      	movs	r2, #4
 800c878:	6821      	ldr	r1, [r4, #0]
 800c87a:	4391      	bics	r1, r2
 800c87c:	6021      	str	r1, [r4, #0]
 800c87e:	2d00      	cmp	r5, #0
 800c880:	d102      	bne.n	800c888 <_printf_i+0x11c>
 800c882:	9e04      	ldr	r6, [sp, #16]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d00c      	beq.n	800c8a2 <_printf_i+0x136>
 800c888:	9e04      	ldr	r6, [sp, #16]
 800c88a:	0028      	movs	r0, r5
 800c88c:	0039      	movs	r1, r7
 800c88e:	f7f3 fcd3 	bl	8000238 <__aeabi_uidivmod>
 800c892:	9b03      	ldr	r3, [sp, #12]
 800c894:	3e01      	subs	r6, #1
 800c896:	5c5b      	ldrb	r3, [r3, r1]
 800c898:	7033      	strb	r3, [r6, #0]
 800c89a:	002b      	movs	r3, r5
 800c89c:	0005      	movs	r5, r0
 800c89e:	429f      	cmp	r7, r3
 800c8a0:	d9f3      	bls.n	800c88a <_printf_i+0x11e>
 800c8a2:	2f08      	cmp	r7, #8
 800c8a4:	d109      	bne.n	800c8ba <_printf_i+0x14e>
 800c8a6:	6823      	ldr	r3, [r4, #0]
 800c8a8:	07db      	lsls	r3, r3, #31
 800c8aa:	d506      	bpl.n	800c8ba <_printf_i+0x14e>
 800c8ac:	6863      	ldr	r3, [r4, #4]
 800c8ae:	6922      	ldr	r2, [r4, #16]
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	dc02      	bgt.n	800c8ba <_printf_i+0x14e>
 800c8b4:	2330      	movs	r3, #48	; 0x30
 800c8b6:	3e01      	subs	r6, #1
 800c8b8:	7033      	strb	r3, [r6, #0]
 800c8ba:	9b04      	ldr	r3, [sp, #16]
 800c8bc:	1b9b      	subs	r3, r3, r6
 800c8be:	6123      	str	r3, [r4, #16]
 800c8c0:	9b07      	ldr	r3, [sp, #28]
 800c8c2:	0021      	movs	r1, r4
 800c8c4:	9300      	str	r3, [sp, #0]
 800c8c6:	9805      	ldr	r0, [sp, #20]
 800c8c8:	9b06      	ldr	r3, [sp, #24]
 800c8ca:	aa09      	add	r2, sp, #36	; 0x24
 800c8cc:	f7ff fede 	bl	800c68c <_printf_common>
 800c8d0:	1c43      	adds	r3, r0, #1
 800c8d2:	d135      	bne.n	800c940 <_printf_i+0x1d4>
 800c8d4:	2001      	movs	r0, #1
 800c8d6:	4240      	negs	r0, r0
 800c8d8:	b00b      	add	sp, #44	; 0x2c
 800c8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8dc:	2220      	movs	r2, #32
 800c8de:	6809      	ldr	r1, [r1, #0]
 800c8e0:	430a      	orrs	r2, r1
 800c8e2:	6022      	str	r2, [r4, #0]
 800c8e4:	0022      	movs	r2, r4
 800c8e6:	2178      	movs	r1, #120	; 0x78
 800c8e8:	3245      	adds	r2, #69	; 0x45
 800c8ea:	7011      	strb	r1, [r2, #0]
 800c8ec:	4a27      	ldr	r2, [pc, #156]	; (800c98c <_printf_i+0x220>)
 800c8ee:	e7a7      	b.n	800c840 <_printf_i+0xd4>
 800c8f0:	0648      	lsls	r0, r1, #25
 800c8f2:	d5ac      	bpl.n	800c84e <_printf_i+0xe2>
 800c8f4:	b2ad      	uxth	r5, r5
 800c8f6:	e7aa      	b.n	800c84e <_printf_i+0xe2>
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	680d      	ldr	r5, [r1, #0]
 800c8fc:	1d10      	adds	r0, r2, #4
 800c8fe:	6949      	ldr	r1, [r1, #20]
 800c900:	6018      	str	r0, [r3, #0]
 800c902:	6813      	ldr	r3, [r2, #0]
 800c904:	062e      	lsls	r6, r5, #24
 800c906:	d501      	bpl.n	800c90c <_printf_i+0x1a0>
 800c908:	6019      	str	r1, [r3, #0]
 800c90a:	e002      	b.n	800c912 <_printf_i+0x1a6>
 800c90c:	066d      	lsls	r5, r5, #25
 800c90e:	d5fb      	bpl.n	800c908 <_printf_i+0x19c>
 800c910:	8019      	strh	r1, [r3, #0]
 800c912:	2300      	movs	r3, #0
 800c914:	9e04      	ldr	r6, [sp, #16]
 800c916:	6123      	str	r3, [r4, #16]
 800c918:	e7d2      	b.n	800c8c0 <_printf_i+0x154>
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	1d11      	adds	r1, r2, #4
 800c91e:	6019      	str	r1, [r3, #0]
 800c920:	6816      	ldr	r6, [r2, #0]
 800c922:	2100      	movs	r1, #0
 800c924:	0030      	movs	r0, r6
 800c926:	6862      	ldr	r2, [r4, #4]
 800c928:	f000 f834 	bl	800c994 <memchr>
 800c92c:	2800      	cmp	r0, #0
 800c92e:	d001      	beq.n	800c934 <_printf_i+0x1c8>
 800c930:	1b80      	subs	r0, r0, r6
 800c932:	6060      	str	r0, [r4, #4]
 800c934:	6863      	ldr	r3, [r4, #4]
 800c936:	6123      	str	r3, [r4, #16]
 800c938:	2300      	movs	r3, #0
 800c93a:	9a04      	ldr	r2, [sp, #16]
 800c93c:	7013      	strb	r3, [r2, #0]
 800c93e:	e7bf      	b.n	800c8c0 <_printf_i+0x154>
 800c940:	6923      	ldr	r3, [r4, #16]
 800c942:	0032      	movs	r2, r6
 800c944:	9906      	ldr	r1, [sp, #24]
 800c946:	9805      	ldr	r0, [sp, #20]
 800c948:	9d07      	ldr	r5, [sp, #28]
 800c94a:	47a8      	blx	r5
 800c94c:	1c43      	adds	r3, r0, #1
 800c94e:	d0c1      	beq.n	800c8d4 <_printf_i+0x168>
 800c950:	6823      	ldr	r3, [r4, #0]
 800c952:	079b      	lsls	r3, r3, #30
 800c954:	d415      	bmi.n	800c982 <_printf_i+0x216>
 800c956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c958:	68e0      	ldr	r0, [r4, #12]
 800c95a:	4298      	cmp	r0, r3
 800c95c:	dabc      	bge.n	800c8d8 <_printf_i+0x16c>
 800c95e:	0018      	movs	r0, r3
 800c960:	e7ba      	b.n	800c8d8 <_printf_i+0x16c>
 800c962:	0022      	movs	r2, r4
 800c964:	2301      	movs	r3, #1
 800c966:	9906      	ldr	r1, [sp, #24]
 800c968:	9805      	ldr	r0, [sp, #20]
 800c96a:	9e07      	ldr	r6, [sp, #28]
 800c96c:	3219      	adds	r2, #25
 800c96e:	47b0      	blx	r6
 800c970:	1c43      	adds	r3, r0, #1
 800c972:	d0af      	beq.n	800c8d4 <_printf_i+0x168>
 800c974:	3501      	adds	r5, #1
 800c976:	68e3      	ldr	r3, [r4, #12]
 800c978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c97a:	1a9b      	subs	r3, r3, r2
 800c97c:	42ab      	cmp	r3, r5
 800c97e:	dcf0      	bgt.n	800c962 <_printf_i+0x1f6>
 800c980:	e7e9      	b.n	800c956 <_printf_i+0x1ea>
 800c982:	2500      	movs	r5, #0
 800c984:	e7f7      	b.n	800c976 <_printf_i+0x20a>
 800c986:	46c0      	nop			; (mov r8, r8)
 800c988:	0800cc89 	.word	0x0800cc89
 800c98c:	0800cc9a 	.word	0x0800cc9a

0800c990 <__retarget_lock_acquire_recursive>:
 800c990:	4770      	bx	lr

0800c992 <__retarget_lock_release_recursive>:
 800c992:	4770      	bx	lr

0800c994 <memchr>:
 800c994:	b2c9      	uxtb	r1, r1
 800c996:	1882      	adds	r2, r0, r2
 800c998:	4290      	cmp	r0, r2
 800c99a:	d101      	bne.n	800c9a0 <memchr+0xc>
 800c99c:	2000      	movs	r0, #0
 800c99e:	4770      	bx	lr
 800c9a0:	7803      	ldrb	r3, [r0, #0]
 800c9a2:	428b      	cmp	r3, r1
 800c9a4:	d0fb      	beq.n	800c99e <memchr+0xa>
 800c9a6:	3001      	adds	r0, #1
 800c9a8:	e7f6      	b.n	800c998 <memchr+0x4>

0800c9aa <memcpy>:
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	b510      	push	{r4, lr}
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d100      	bne.n	800c9b4 <memcpy+0xa>
 800c9b2:	bd10      	pop	{r4, pc}
 800c9b4:	5ccc      	ldrb	r4, [r1, r3]
 800c9b6:	54c4      	strb	r4, [r0, r3]
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	e7f8      	b.n	800c9ae <memcpy+0x4>

0800c9bc <memmove>:
 800c9bc:	b510      	push	{r4, lr}
 800c9be:	4288      	cmp	r0, r1
 800c9c0:	d902      	bls.n	800c9c8 <memmove+0xc>
 800c9c2:	188b      	adds	r3, r1, r2
 800c9c4:	4298      	cmp	r0, r3
 800c9c6:	d303      	bcc.n	800c9d0 <memmove+0x14>
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	e007      	b.n	800c9dc <memmove+0x20>
 800c9cc:	5c8b      	ldrb	r3, [r1, r2]
 800c9ce:	5483      	strb	r3, [r0, r2]
 800c9d0:	3a01      	subs	r2, #1
 800c9d2:	d2fb      	bcs.n	800c9cc <memmove+0x10>
 800c9d4:	bd10      	pop	{r4, pc}
 800c9d6:	5ccc      	ldrb	r4, [r1, r3]
 800c9d8:	54c4      	strb	r4, [r0, r3]
 800c9da:	3301      	adds	r3, #1
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	d1fa      	bne.n	800c9d6 <memmove+0x1a>
 800c9e0:	e7f8      	b.n	800c9d4 <memmove+0x18>

0800c9e2 <_realloc_r>:
 800c9e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9e4:	0007      	movs	r7, r0
 800c9e6:	000d      	movs	r5, r1
 800c9e8:	0016      	movs	r6, r2
 800c9ea:	2900      	cmp	r1, #0
 800c9ec:	d105      	bne.n	800c9fa <_realloc_r+0x18>
 800c9ee:	0011      	movs	r1, r2
 800c9f0:	f7ff fc4a 	bl	800c288 <_malloc_r>
 800c9f4:	0004      	movs	r4, r0
 800c9f6:	0020      	movs	r0, r4
 800c9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9fa:	2a00      	cmp	r2, #0
 800c9fc:	d103      	bne.n	800ca06 <_realloc_r+0x24>
 800c9fe:	f7ff fbf9 	bl	800c1f4 <_free_r>
 800ca02:	0034      	movs	r4, r6
 800ca04:	e7f7      	b.n	800c9f6 <_realloc_r+0x14>
 800ca06:	f000 f812 	bl	800ca2e <_malloc_usable_size_r>
 800ca0a:	002c      	movs	r4, r5
 800ca0c:	42b0      	cmp	r0, r6
 800ca0e:	d2f2      	bcs.n	800c9f6 <_realloc_r+0x14>
 800ca10:	0031      	movs	r1, r6
 800ca12:	0038      	movs	r0, r7
 800ca14:	f7ff fc38 	bl	800c288 <_malloc_r>
 800ca18:	1e04      	subs	r4, r0, #0
 800ca1a:	d0ec      	beq.n	800c9f6 <_realloc_r+0x14>
 800ca1c:	0029      	movs	r1, r5
 800ca1e:	0032      	movs	r2, r6
 800ca20:	f7ff ffc3 	bl	800c9aa <memcpy>
 800ca24:	0029      	movs	r1, r5
 800ca26:	0038      	movs	r0, r7
 800ca28:	f7ff fbe4 	bl	800c1f4 <_free_r>
 800ca2c:	e7e3      	b.n	800c9f6 <_realloc_r+0x14>

0800ca2e <_malloc_usable_size_r>:
 800ca2e:	1f0b      	subs	r3, r1, #4
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	1f18      	subs	r0, r3, #4
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	da01      	bge.n	800ca3c <_malloc_usable_size_r+0xe>
 800ca38:	580b      	ldr	r3, [r1, r0]
 800ca3a:	18c0      	adds	r0, r0, r3
 800ca3c:	4770      	bx	lr
	...

0800ca40 <_init>:
 800ca40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca42:	46c0      	nop			; (mov r8, r8)
 800ca44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca46:	bc08      	pop	{r3}
 800ca48:	469e      	mov	lr, r3
 800ca4a:	4770      	bx	lr

0800ca4c <_fini>:
 800ca4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca4e:	46c0      	nop			; (mov r8, r8)
 800ca50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca52:	bc08      	pop	{r3}
 800ca54:	469e      	mov	lr, r3
 800ca56:	4770      	bx	lr
