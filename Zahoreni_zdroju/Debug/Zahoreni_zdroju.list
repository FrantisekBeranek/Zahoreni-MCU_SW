
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c25c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  0800c31c  0800c31c  0001c31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c52c  0800c52c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800c52c  0800c52c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c52c  0800c52c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c52c  0800c52c  0001c52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c530  0800c530  0001c530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013f8  200001e0  0800c714  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015d8  0800c714  000215d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a09d  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e39  00000000  00000000  0004a2a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001720  00000000  00000000  0004f0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001548  00000000  00000000  00050800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ffd8  00000000  00000000  00051d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fb2b  00000000  00000000  00071d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a429e  00000000  00000000  0009184b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00135ae9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005604  00000000  00000000  00135b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c304 	.word	0x0800c304

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800c304 	.word	0x0800c304

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <setColour>:
#include "lcd.h"

//_____Rozvítí podsvícení dané argumentem_____//
//-> argument: Barva podsvícení
void setColour(BACKLIGHT colour)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	0002      	movs	r2, r0
 8000420:	1dfb      	adds	r3, r7, #7
 8000422:	701a      	strb	r2, [r3, #0]
	switch(colour)
 8000424:	1dfb      	adds	r3, r7, #7
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b02      	cmp	r3, #2
 800042a:	d033      	beq.n	8000494 <setColour+0x7c>
 800042c:	dc49      	bgt.n	80004c2 <setColour+0xaa>
 800042e:	2b00      	cmp	r3, #0
 8000430:	d002      	beq.n	8000438 <setColour+0x20>
 8000432:	2b01      	cmp	r3, #1
 8000434:	d017      	beq.n	8000466 <setColour+0x4e>
 8000436:	e044      	b.n	80004c2 <setColour+0xaa>
	{
	case BACKLIGHT_WHITE:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_SET);
 8000438:	2380      	movs	r3, #128	; 0x80
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	482e      	ldr	r0, [pc, #184]	; (80004f8 <setColour+0xe0>)
 800043e:	2201      	movs	r2, #1
 8000440:	0019      	movs	r1, r3
 8000442:	f002 fb8a 	bl	8002b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000446:	2380      	movs	r3, #128	; 0x80
 8000448:	0219      	lsls	r1, r3, #8
 800044a:	2390      	movs	r3, #144	; 0x90
 800044c:	05db      	lsls	r3, r3, #23
 800044e:	2200      	movs	r2, #0
 8000450:	0018      	movs	r0, r3
 8000452:	f002 fb82 	bl	8002b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000456:	2380      	movs	r3, #128	; 0x80
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	4827      	ldr	r0, [pc, #156]	; (80004f8 <setColour+0xe0>)
 800045c:	2200      	movs	r2, #0
 800045e:	0019      	movs	r1, r3
 8000460:	f002 fb7b 	bl	8002b5a <HAL_GPIO_WritePin>
		break;
 8000464:	e044      	b.n	80004f0 <setColour+0xd8>

	case BACKLIGHT_GREEN:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	4823      	ldr	r0, [pc, #140]	; (80004f8 <setColour+0xe0>)
 800046c:	2200      	movs	r2, #0
 800046e:	0019      	movs	r1, r3
 8000470:	f002 fb73 	bl	8002b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	0219      	lsls	r1, r3, #8
 8000478:	2390      	movs	r3, #144	; 0x90
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	2200      	movs	r2, #0
 800047e:	0018      	movs	r0, r3
 8000480:	f002 fb6b 	bl	8002b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_SET);
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	005b      	lsls	r3, r3, #1
 8000488:	481b      	ldr	r0, [pc, #108]	; (80004f8 <setColour+0xe0>)
 800048a:	2201      	movs	r2, #1
 800048c:	0019      	movs	r1, r3
 800048e:	f002 fb64 	bl	8002b5a <HAL_GPIO_WritePin>
		break;
 8000492:	e02d      	b.n	80004f0 <setColour+0xd8>

	case BACKLIGHT_RED:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000494:	2380      	movs	r3, #128	; 0x80
 8000496:	009b      	lsls	r3, r3, #2
 8000498:	4817      	ldr	r0, [pc, #92]	; (80004f8 <setColour+0xe0>)
 800049a:	2200      	movs	r2, #0
 800049c:	0019      	movs	r1, r3
 800049e:	f002 fb5c 	bl	8002b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_SET);
 80004a2:	2380      	movs	r3, #128	; 0x80
 80004a4:	0219      	lsls	r1, r3, #8
 80004a6:	2390      	movs	r3, #144	; 0x90
 80004a8:	05db      	lsls	r3, r3, #23
 80004aa:	2201      	movs	r2, #1
 80004ac:	0018      	movs	r0, r3
 80004ae:	f002 fb54 	bl	8002b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 80004b2:	2380      	movs	r3, #128	; 0x80
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	4810      	ldr	r0, [pc, #64]	; (80004f8 <setColour+0xe0>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	0019      	movs	r1, r3
 80004bc:	f002 fb4d 	bl	8002b5a <HAL_GPIO_WritePin>
		break;
 80004c0:	e016      	b.n	80004f0 <setColour+0xd8>

	default:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 80004c2:	2380      	movs	r3, #128	; 0x80
 80004c4:	009b      	lsls	r3, r3, #2
 80004c6:	480c      	ldr	r0, [pc, #48]	; (80004f8 <setColour+0xe0>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	0019      	movs	r1, r3
 80004cc:	f002 fb45 	bl	8002b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 80004d0:	2380      	movs	r3, #128	; 0x80
 80004d2:	0219      	lsls	r1, r3, #8
 80004d4:	2390      	movs	r3, #144	; 0x90
 80004d6:	05db      	lsls	r3, r3, #23
 80004d8:	2200      	movs	r2, #0
 80004da:	0018      	movs	r0, r3
 80004dc:	f002 fb3d 	bl	8002b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 80004e0:	2380      	movs	r3, #128	; 0x80
 80004e2:	005b      	lsls	r3, r3, #1
 80004e4:	4804      	ldr	r0, [pc, #16]	; (80004f8 <setColour+0xe0>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	0019      	movs	r1, r3
 80004ea:	f002 fb36 	bl	8002b5a <HAL_GPIO_WritePin>
		break;
 80004ee:	46c0      	nop			; (mov r8, r8)
	}
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	48000400 	.word	0x48000400

080004fc <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	0002      	movs	r2, r0
 8000504:	1dbb      	adds	r3, r7, #6
 8000506:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 8000508:	1dbb      	adds	r3, r7, #6
 800050a:	881a      	ldrh	r2, [r3, #0]
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	009b      	lsls	r3, r3, #2
 8000510:	429a      	cmp	r2, r3
 8000512:	d104      	bne.n	800051e <HAL_GPIO_EXTI_Callback+0x22>
	{
		flags.buttons.butt0_int = 1;
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <HAL_GPIO_EXTI_Callback+0x40>)
 8000516:	791a      	ldrb	r2, [r3, #4]
 8000518:	2101      	movs	r1, #1
 800051a:	430a      	orrs	r2, r1
 800051c:	711a      	strb	r2, [r3, #4]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 800051e:	1dbb      	adds	r3, r7, #6
 8000520:	881a      	ldrh	r2, [r3, #0]
 8000522:	2380      	movs	r3, #128	; 0x80
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	429a      	cmp	r2, r3
 8000528:	d104      	bne.n	8000534 <HAL_GPIO_EXTI_Callback+0x38>
	{
		flags.buttons.butt1_int = 1;
 800052a:	4b04      	ldr	r3, [pc, #16]	; (800053c <HAL_GPIO_EXTI_Callback+0x40>)
 800052c:	791a      	ldrb	r2, [r3, #4]
 800052e:	2104      	movs	r1, #4
 8000530:	430a      	orrs	r2, r1
 8000532:	711a      	strb	r2, [r3, #4]
	}
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b002      	add	sp, #8
 800053a:	bd80      	pop	{r7, pc}
 800053c:	20000584 	.word	0x20000584

08000540 <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800054c:	429a      	cmp	r2, r3
 800054e:	d104      	bne.n	800055a <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		flags.time.ten_ms = 1;
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000552:	781a      	ldrb	r2, [r3, #0]
 8000554:	2101      	movs	r1, #1
 8000556:	430a      	orrs	r2, r1
 8000558:	701a      	strb	r2, [r3, #0]
	}
}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b002      	add	sp, #8
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			; (mov r8, r8)
 8000564:	2000053c 	.word	0x2000053c
 8000568:	20000584 	.word	0x20000584

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f001 fc26 	bl	8001dc0 <HAL_Init>

  /* USER CODE BEGIN Init */

  //__Buffery___//
  dispBuffer = createBuffer(100);
 8000574:	2064      	movs	r0, #100	; 0x64
 8000576:	f000 feea 	bl	800134e <createBuffer>
 800057a:	0002      	movs	r2, r0
 800057c:	4b32      	ldr	r3, [pc, #200]	; (8000648 <main+0xdc>)
 800057e:	601a      	str	r2, [r3, #0]
  regBuffer = createBuffer(100);
 8000580:	2064      	movs	r0, #100	; 0x64
 8000582:	f000 fee4 	bl	800134e <createBuffer>
 8000586:	0002      	movs	r2, r0
 8000588:	4b30      	ldr	r3, [pc, #192]	; (800064c <main+0xe0>)
 800058a:	601a      	str	r2, [r3, #0]
  USB_Rx_Buffer = createBuffer(500);
 800058c:	23fa      	movs	r3, #250	; 0xfa
 800058e:	005b      	lsls	r3, r3, #1
 8000590:	0018      	movs	r0, r3
 8000592:	f000 fedc 	bl	800134e <createBuffer>
 8000596:	0002      	movs	r2, r0
 8000598:	4b2d      	ldr	r3, [pc, #180]	; (8000650 <main+0xe4>)
 800059a:	601a      	str	r2, [r3, #0]
  USB_Tx_Buffer = createBuffer(500);
 800059c:	23fa      	movs	r3, #250	; 0xfa
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 fed4 	bl	800134e <createBuffer>
 80005a6:	0002      	movs	r2, r0
 80005a8:	4b2a      	ldr	r3, [pc, #168]	; (8000654 <main+0xe8>)
 80005aa:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f85a 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 fac2 	bl	8000b38 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005b4:	f00a fcd4 	bl	800af60 <MX_USB_DEVICE_Init>
  MX_DMA_Init();
 80005b8:	f000 faa0 	bl	8000afc <MX_DMA_Init>
  MX_ADC_Init();
 80005bc:	f000 f8be 	bl	800073c <MX_ADC_Init>
  MX_SPI1_Init();
 80005c0:	f000 f9da 	bl	8000978 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80005c4:	f000 fa6a 	bl	8000a9c <MX_USART3_UART_Init>
  MX_TIM14_Init();
 80005c8:	f000 fa1c 	bl	8000a04 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Inicializace displeje___//
  //dispInit();
  //writeChar('a', 1, 5);

  LOAD_MIN_OFF;
 80005cc:	4b22      	ldr	r3, [pc, #136]	; (8000658 <main+0xec>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	2180      	movs	r1, #128	; 0x80
 80005d2:	0018      	movs	r0, r3
 80005d4:	f002 fac1 	bl	8002b5a <HAL_GPIO_WritePin>
  LOAD_MAX_OFF;
 80005d8:	4b1f      	ldr	r3, [pc, #124]	; (8000658 <main+0xec>)
 80005da:	2200      	movs	r2, #0
 80005dc:	2140      	movs	r1, #64	; 0x40
 80005de:	0018      	movs	r0, r3
 80005e0:	f002 fabb 	bl	8002b5a <HAL_GPIO_WritePin>

  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 80005e4:	4b1d      	ldr	r3, [pc, #116]	; (800065c <main+0xf0>)
 80005e6:	0018      	movs	r0, r3
 80005e8:	f005 fb54 	bl	8005c94 <HAL_TIM_Base_Start_IT>

  flags.ui.longBeep = 1;
 80005ec:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <main+0xf4>)
 80005ee:	7c1a      	ldrb	r2, [r3, #16]
 80005f0:	2102      	movs	r1, #2
 80005f2:	430a      	orrs	r2, r1
 80005f4:	741a      	strb	r2, [r3, #16]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flags.time.ten_ms)	// 10 ms
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <main+0xf4>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	2201      	movs	r2, #1
 80005fc:	4013      	ands	r3, r2
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d0f8      	beq.n	80005f6 <main+0x8a>
	  {
		  clkHandler();
 8000604:	f000 fb84 	bl	8000d10 <clkHandler>
		  buttonDebounce();
 8000608:	f000 fc00 	bl	8000e0c <buttonDebounce>
		  comHandler();
 800060c:	f000 fc6e 	bl	8000eec <comHandler>
		  UI_Handler();
 8000610:	f000 fd7e 	bl	8001110 <UI_Handler>
		  testHandler();
 8000614:	f001 f9c8 	bl	80019a8 <testHandler>

		  flags.meas.measComplete = 0;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <main+0xf4>)
 800061a:	7d1a      	ldrb	r2, [r3, #20]
 800061c:	2102      	movs	r1, #2
 800061e:	438a      	bics	r2, r1
 8000620:	751a      	strb	r2, [r3, #20]
		  if(flags.meas.measRequest)
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <main+0xf4>)
 8000624:	7d1b      	ldrb	r3, [r3, #20]
 8000626:	2201      	movs	r2, #1
 8000628:	4013      	ands	r3, r2
 800062a:	b2db      	uxtb	r3, r3
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0e2      	beq.n	80005f6 <main+0x8a>
		  {
			  flags.meas.measRequest = 0;
 8000630:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <main+0xf4>)
 8000632:	7d1a      	ldrb	r2, [r3, #20]
 8000634:	2101      	movs	r1, #1
 8000636:	438a      	bics	r2, r1
 8000638:	751a      	strb	r2, [r3, #20]
			  flags.meas.measComplete = 1;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <main+0xf4>)
 800063c:	7d1a      	ldrb	r2, [r3, #20]
 800063e:	2102      	movs	r1, #2
 8000640:	430a      	orrs	r2, r1
 8000642:	751a      	strb	r2, [r3, #20]
	  if(flags.time.ten_ms)	// 10 ms
 8000644:	e7d7      	b.n	80005f6 <main+0x8a>
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	20000444 	.word	0x20000444
 800064c:	2000062c 	.word	0x2000062c
 8000650:	200010d0 	.word	0x200010d0
 8000654:	200004d4 	.word	0x200004d4
 8000658:	48000800 	.word	0x48000800
 800065c:	2000053c 	.word	0x2000053c
 8000660:	20000584 	.word	0x20000584

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b099      	sub	sp, #100	; 0x64
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	242c      	movs	r4, #44	; 0x2c
 800066c:	193b      	adds	r3, r7, r4
 800066e:	0018      	movs	r0, r3
 8000670:	2334      	movs	r3, #52	; 0x34
 8000672:	001a      	movs	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	f00b fa17 	bl	800baa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067a:	231c      	movs	r3, #28
 800067c:	18fb      	adds	r3, r7, r3
 800067e:	0018      	movs	r0, r3
 8000680:	2310      	movs	r3, #16
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f00b fa0f 	bl	800baa8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800068a:	003b      	movs	r3, r7
 800068c:	0018      	movs	r0, r3
 800068e:	231c      	movs	r3, #28
 8000690:	001a      	movs	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f00b fa08 	bl	800baa8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000698:	0021      	movs	r1, r4
 800069a:	187b      	adds	r3, r7, r1
 800069c:	2232      	movs	r2, #50	; 0x32
 800069e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	2201      	movs	r2, #1
 80006a4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	2201      	movs	r2, #1
 80006aa:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2201      	movs	r2, #1
 80006b0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2210      	movs	r2, #16
 80006b6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2210      	movs	r2, #16
 80006bc:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2202      	movs	r2, #2
 80006c2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	0212      	lsls	r2, r2, #8
 80006ca:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	0352      	lsls	r2, r2, #13
 80006d2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2200      	movs	r2, #0
 80006d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	0018      	movs	r0, r3
 80006de:	f004 f903 	bl	80048e8 <HAL_RCC_OscConfig>
 80006e2:	1e03      	subs	r3, r0, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x86>
  {
    Error_Handler();
 80006e6:	f000 fe2d 	bl	8001344 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	211c      	movs	r1, #28
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2207      	movs	r2, #7
 80006f0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2202      	movs	r2, #2
 80006f6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2101      	movs	r1, #1
 8000708:	0018      	movs	r0, r3
 800070a:	f004 fc73 	bl	8004ff4 <HAL_RCC_ClockConfig>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000712:	f000 fe17 	bl	8001344 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000716:	003b      	movs	r3, r7
 8000718:	2280      	movs	r2, #128	; 0x80
 800071a:	0292      	lsls	r2, r2, #10
 800071c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800071e:	003b      	movs	r3, r7
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000724:	003b      	movs	r3, r7
 8000726:	0018      	movs	r0, r3
 8000728:	f004 fde0 	bl	80052ec <HAL_RCCEx_PeriphCLKConfig>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000730:	f000 fe08 	bl	8001344 <Error_Handler>
  }
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b019      	add	sp, #100	; 0x64
 800073a:	bd90      	pop	{r4, r7, pc}

0800073c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	0018      	movs	r0, r3
 8000746:	230c      	movs	r3, #12
 8000748:	001a      	movs	r2, r3
 800074a:	2100      	movs	r1, #0
 800074c:	f00b f9ac 	bl	800baa8 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000750:	4b87      	ldr	r3, [pc, #540]	; (8000970 <MX_ADC_Init+0x234>)
 8000752:	4a88      	ldr	r2, [pc, #544]	; (8000974 <MX_ADC_Init+0x238>)
 8000754:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000756:	4b86      	ldr	r3, [pc, #536]	; (8000970 <MX_ADC_Init+0x234>)
 8000758:	2200      	movs	r2, #0
 800075a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800075c:	4b84      	ldr	r3, [pc, #528]	; (8000970 <MX_ADC_Init+0x234>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000762:	4b83      	ldr	r3, [pc, #524]	; (8000970 <MX_ADC_Init+0x234>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000768:	4b81      	ldr	r3, [pc, #516]	; (8000970 <MX_ADC_Init+0x234>)
 800076a:	2201      	movs	r2, #1
 800076c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800076e:	4b80      	ldr	r3, [pc, #512]	; (8000970 <MX_ADC_Init+0x234>)
 8000770:	2204      	movs	r2, #4
 8000772:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000774:	4b7e      	ldr	r3, [pc, #504]	; (8000970 <MX_ADC_Init+0x234>)
 8000776:	2200      	movs	r2, #0
 8000778:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800077a:	4b7d      	ldr	r3, [pc, #500]	; (8000970 <MX_ADC_Init+0x234>)
 800077c:	2200      	movs	r2, #0
 800077e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000780:	4b7b      	ldr	r3, [pc, #492]	; (8000970 <MX_ADC_Init+0x234>)
 8000782:	2200      	movs	r2, #0
 8000784:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000786:	4b7a      	ldr	r3, [pc, #488]	; (8000970 <MX_ADC_Init+0x234>)
 8000788:	2200      	movs	r2, #0
 800078a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800078c:	4b78      	ldr	r3, [pc, #480]	; (8000970 <MX_ADC_Init+0x234>)
 800078e:	22c2      	movs	r2, #194	; 0xc2
 8000790:	32ff      	adds	r2, #255	; 0xff
 8000792:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000794:	4b76      	ldr	r3, [pc, #472]	; (8000970 <MX_ADC_Init+0x234>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800079a:	4b75      	ldr	r3, [pc, #468]	; (8000970 <MX_ADC_Init+0x234>)
 800079c:	2224      	movs	r2, #36	; 0x24
 800079e:	2100      	movs	r1, #0
 80007a0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007a2:	4b73      	ldr	r3, [pc, #460]	; (8000970 <MX_ADC_Init+0x234>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80007a8:	4b71      	ldr	r3, [pc, #452]	; (8000970 <MX_ADC_Init+0x234>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f001 fb90 	bl	8001ed0 <HAL_ADC_Init>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80007b4:	f000 fdc6 	bl	8001344 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2280      	movs	r2, #128	; 0x80
 80007c2:	0152      	lsls	r2, r2, #5
 80007c4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2280      	movs	r2, #128	; 0x80
 80007ca:	0552      	lsls	r2, r2, #21
 80007cc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007ce:	1d3a      	adds	r2, r7, #4
 80007d0:	4b67      	ldr	r3, [pc, #412]	; (8000970 <MX_ADC_Init+0x234>)
 80007d2:	0011      	movs	r1, r2
 80007d4:	0018      	movs	r0, r3
 80007d6:	f001 fcbb 	bl	8002150 <HAL_ADC_ConfigChannel>
 80007da:	1e03      	subs	r3, r0, #0
 80007dc:	d001      	beq.n	80007e2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80007de:	f000 fdb1 	bl	8001344 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2201      	movs	r2, #1
 80007e6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007e8:	1d3a      	adds	r2, r7, #4
 80007ea:	4b61      	ldr	r3, [pc, #388]	; (8000970 <MX_ADC_Init+0x234>)
 80007ec:	0011      	movs	r1, r2
 80007ee:	0018      	movs	r0, r3
 80007f0:	f001 fcae 	bl	8002150 <HAL_ADC_ConfigChannel>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 80007f8:	f000 fda4 	bl	8001344 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2202      	movs	r2, #2
 8000800:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000802:	1d3a      	adds	r2, r7, #4
 8000804:	4b5a      	ldr	r3, [pc, #360]	; (8000970 <MX_ADC_Init+0x234>)
 8000806:	0011      	movs	r1, r2
 8000808:	0018      	movs	r0, r3
 800080a:	f001 fca1 	bl	8002150 <HAL_ADC_ConfigChannel>
 800080e:	1e03      	subs	r3, r0, #0
 8000810:	d001      	beq.n	8000816 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8000812:	f000 fd97 	bl	8001344 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2203      	movs	r2, #3
 800081a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800081c:	1d3a      	adds	r2, r7, #4
 800081e:	4b54      	ldr	r3, [pc, #336]	; (8000970 <MX_ADC_Init+0x234>)
 8000820:	0011      	movs	r1, r2
 8000822:	0018      	movs	r0, r3
 8000824:	f001 fc94 	bl	8002150 <HAL_ADC_ConfigChannel>
 8000828:	1e03      	subs	r3, r0, #0
 800082a:	d001      	beq.n	8000830 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 800082c:	f000 fd8a 	bl	8001344 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000830:	1d3b      	adds	r3, r7, #4
 8000832:	2204      	movs	r2, #4
 8000834:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000836:	1d3a      	adds	r2, r7, #4
 8000838:	4b4d      	ldr	r3, [pc, #308]	; (8000970 <MX_ADC_Init+0x234>)
 800083a:	0011      	movs	r1, r2
 800083c:	0018      	movs	r0, r3
 800083e:	f001 fc87 	bl	8002150 <HAL_ADC_ConfigChannel>
 8000842:	1e03      	subs	r3, r0, #0
 8000844:	d001      	beq.n	800084a <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8000846:	f000 fd7d 	bl	8001344 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	2205      	movs	r2, #5
 800084e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000850:	1d3a      	adds	r2, r7, #4
 8000852:	4b47      	ldr	r3, [pc, #284]	; (8000970 <MX_ADC_Init+0x234>)
 8000854:	0011      	movs	r1, r2
 8000856:	0018      	movs	r0, r3
 8000858:	f001 fc7a 	bl	8002150 <HAL_ADC_ConfigChannel>
 800085c:	1e03      	subs	r3, r0, #0
 800085e:	d001      	beq.n	8000864 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8000860:	f000 fd70 	bl	8001344 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2206      	movs	r2, #6
 8000868:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800086a:	1d3a      	adds	r2, r7, #4
 800086c:	4b40      	ldr	r3, [pc, #256]	; (8000970 <MX_ADC_Init+0x234>)
 800086e:	0011      	movs	r1, r2
 8000870:	0018      	movs	r0, r3
 8000872:	f001 fc6d 	bl	8002150 <HAL_ADC_ConfigChannel>
 8000876:	1e03      	subs	r3, r0, #0
 8000878:	d001      	beq.n	800087e <MX_ADC_Init+0x142>
  {
    Error_Handler();
 800087a:	f000 fd63 	bl	8001344 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2207      	movs	r2, #7
 8000882:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000884:	1d3a      	adds	r2, r7, #4
 8000886:	4b3a      	ldr	r3, [pc, #232]	; (8000970 <MX_ADC_Init+0x234>)
 8000888:	0011      	movs	r1, r2
 800088a:	0018      	movs	r0, r3
 800088c:	f001 fc60 	bl	8002150 <HAL_ADC_ConfigChannel>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC_Init+0x15c>
  {
    Error_Handler();
 8000894:	f000 fd56 	bl	8001344 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	2208      	movs	r2, #8
 800089c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800089e:	1d3a      	adds	r2, r7, #4
 80008a0:	4b33      	ldr	r3, [pc, #204]	; (8000970 <MX_ADC_Init+0x234>)
 80008a2:	0011      	movs	r1, r2
 80008a4:	0018      	movs	r0, r3
 80008a6:	f001 fc53 	bl	8002150 <HAL_ADC_ConfigChannel>
 80008aa:	1e03      	subs	r3, r0, #0
 80008ac:	d001      	beq.n	80008b2 <MX_ADC_Init+0x176>
  {
    Error_Handler();
 80008ae:	f000 fd49 	bl	8001344 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	2209      	movs	r2, #9
 80008b6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008b8:	1d3a      	adds	r2, r7, #4
 80008ba:	4b2d      	ldr	r3, [pc, #180]	; (8000970 <MX_ADC_Init+0x234>)
 80008bc:	0011      	movs	r1, r2
 80008be:	0018      	movs	r0, r3
 80008c0:	f001 fc46 	bl	8002150 <HAL_ADC_ConfigChannel>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC_Init+0x190>
  {
    Error_Handler();
 80008c8:	f000 fd3c 	bl	8001344 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	220a      	movs	r2, #10
 80008d0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008d2:	1d3a      	adds	r2, r7, #4
 80008d4:	4b26      	ldr	r3, [pc, #152]	; (8000970 <MX_ADC_Init+0x234>)
 80008d6:	0011      	movs	r1, r2
 80008d8:	0018      	movs	r0, r3
 80008da:	f001 fc39 	bl	8002150 <HAL_ADC_ConfigChannel>
 80008de:	1e03      	subs	r3, r0, #0
 80008e0:	d001      	beq.n	80008e6 <MX_ADC_Init+0x1aa>
  {
    Error_Handler();
 80008e2:	f000 fd2f 	bl	8001344 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	220b      	movs	r2, #11
 80008ea:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008ec:	1d3a      	adds	r2, r7, #4
 80008ee:	4b20      	ldr	r3, [pc, #128]	; (8000970 <MX_ADC_Init+0x234>)
 80008f0:	0011      	movs	r1, r2
 80008f2:	0018      	movs	r0, r3
 80008f4:	f001 fc2c 	bl	8002150 <HAL_ADC_ConfigChannel>
 80008f8:	1e03      	subs	r3, r0, #0
 80008fa:	d001      	beq.n	8000900 <MX_ADC_Init+0x1c4>
  {
    Error_Handler();
 80008fc:	f000 fd22 	bl	8001344 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	220c      	movs	r2, #12
 8000904:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000906:	1d3a      	adds	r2, r7, #4
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_ADC_Init+0x234>)
 800090a:	0011      	movs	r1, r2
 800090c:	0018      	movs	r0, r3
 800090e:	f001 fc1f 	bl	8002150 <HAL_ADC_ConfigChannel>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d001      	beq.n	800091a <MX_ADC_Init+0x1de>
  {
    Error_Handler();
 8000916:	f000 fd15 	bl	8001344 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	220d      	movs	r2, #13
 800091e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000920:	1d3a      	adds	r2, r7, #4
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_ADC_Init+0x234>)
 8000924:	0011      	movs	r1, r2
 8000926:	0018      	movs	r0, r3
 8000928:	f001 fc12 	bl	8002150 <HAL_ADC_ConfigChannel>
 800092c:	1e03      	subs	r3, r0, #0
 800092e:	d001      	beq.n	8000934 <MX_ADC_Init+0x1f8>
  {
    Error_Handler();
 8000930:	f000 fd08 	bl	8001344 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	220e      	movs	r2, #14
 8000938:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800093a:	1d3a      	adds	r2, r7, #4
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_ADC_Init+0x234>)
 800093e:	0011      	movs	r1, r2
 8000940:	0018      	movs	r0, r3
 8000942:	f001 fc05 	bl	8002150 <HAL_ADC_ConfigChannel>
 8000946:	1e03      	subs	r3, r0, #0
 8000948:	d001      	beq.n	800094e <MX_ADC_Init+0x212>
  {
    Error_Handler();
 800094a:	f000 fcfb 	bl	8001344 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	220f      	movs	r2, #15
 8000952:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000954:	1d3a      	adds	r2, r7, #4
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_ADC_Init+0x234>)
 8000958:	0011      	movs	r1, r2
 800095a:	0018      	movs	r0, r3
 800095c:	f001 fbf8 	bl	8002150 <HAL_ADC_ConfigChannel>
 8000960:	1e03      	subs	r3, r0, #0
 8000962:	d001      	beq.n	8000968 <MX_ADC_Init+0x22c>
  {
    Error_Handler();
 8000964:	f000 fcee 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b004      	add	sp, #16
 800096e:	bd80      	pop	{r7, pc}
 8000970:	200005e4 	.word	0x200005e4
 8000974:	40012400 	.word	0x40012400

08000978 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800097c:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <MX_SPI1_Init+0x80>)
 800097e:	4a1f      	ldr	r2, [pc, #124]	; (80009fc <MX_SPI1_Init+0x84>)
 8000980:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000982:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <MX_SPI1_Init+0x80>)
 8000984:	2282      	movs	r2, #130	; 0x82
 8000986:	0052      	lsls	r2, r2, #1
 8000988:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800098a:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <MX_SPI1_Init+0x80>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <MX_SPI1_Init+0x80>)
 8000992:	22e0      	movs	r2, #224	; 0xe0
 8000994:	00d2      	lsls	r2, r2, #3
 8000996:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_SPI1_Init+0x80>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_SPI1_Init+0x80>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_SPI1_Init+0x80>)
 80009a6:	2280      	movs	r2, #128	; 0x80
 80009a8:	0092      	lsls	r2, r2, #2
 80009aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_SPI1_Init+0x80>)
 80009ae:	2238      	movs	r2, #56	; 0x38
 80009b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_SPI1_Init+0x80>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_SPI1_Init+0x80>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_SPI1_Init+0x80>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_SPI1_Init+0x80>)
 80009c6:	2207      	movs	r2, #7
 80009c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_SPI1_Init+0x80>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_SPI1_Init+0x80>)
 80009d2:	2208      	movs	r2, #8
 80009d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_SPI1_Init+0x80>)
 80009d8:	0018      	movs	r0, r3
 80009da:	f004 fd85 	bl	80054e8 <HAL_SPI_Init>
 80009de:	1e03      	subs	r3, r0, #0
 80009e0:	d001      	beq.n	80009e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009e2:	f000 fcaf 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_SPI1_Init+0x88>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	2140      	movs	r1, #64	; 0x40
 80009ec:	0018      	movs	r0, r3
 80009ee:	f002 f8b4 	bl	8002b5a <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	200004d8 	.word	0x200004d8
 80009fc:	40013000 	.word	0x40013000
 8000a00:	48000400 	.word	0x48000400

08000a04 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	231c      	movs	r3, #28
 8000a10:	001a      	movs	r2, r3
 8000a12:	2100      	movs	r1, #0
 8000a14:	f00b f848 	bl	800baa8 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000a18:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <MX_TIM14_Init+0x8c>)
 8000a1a:	4a1e      	ldr	r2, [pc, #120]	; (8000a94 <MX_TIM14_Init+0x90>)
 8000a1c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 48-1;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_TIM14_Init+0x8c>)
 8000a20:	222f      	movs	r2, #47	; 0x2f
 8000a22:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_TIM14_Init+0x8c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_TIM14_Init+0x8c>)
 8000a2c:	4a1a      	ldr	r2, [pc, #104]	; (8000a98 <MX_TIM14_Init+0x94>)
 8000a2e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_TIM14_Init+0x8c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_TIM14_Init+0x8c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_TIM14_Init+0x8c>)
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f005 f8d8 	bl	8005bf4 <HAL_TIM_Base_Init>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000a48:	f000 fc7c 	bl	8001344 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <MX_TIM14_Init+0x8c>)
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f005 f972 	bl	8005d38 <HAL_TIM_OC_Init>
 8000a54:	1e03      	subs	r3, r0, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000a58:	f000 fc74 	bl	8001344 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a74:	1d39      	adds	r1, r7, #4
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_TIM14_Init+0x8c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f005 faca 	bl	8006014 <HAL_TIM_OC_ConfigChannel>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000a84:	f000 fc5e 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b008      	add	sp, #32
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	2000053c 	.word	0x2000053c
 8000a94:	40002000 	.word	0x40002000
 8000a98:	0000270f 	.word	0x0000270f

08000a9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000aa2:	4a15      	ldr	r2, [pc, #84]	; (8000af8 <MX_USART3_UART_Init+0x5c>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000aa8:	2296      	movs	r2, #150	; 0x96
 8000aaa:	0212      	lsls	r2, r2, #8
 8000aac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <MX_USART3_UART_Init+0x58>)
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f005 fd9b 	bl	800661c <HAL_UART_Init>
 8000ae6:	1e03      	subs	r3, r0, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000aea:	f000 fc2b 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000450 	.word	0x20000450
 8000af8:	40004800 	.word	0x40004800

08000afc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b02:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <MX_DMA_Init+0x38>)
 8000b04:	695a      	ldr	r2, [r3, #20]
 8000b06:	4b0b      	ldr	r3, [pc, #44]	; (8000b34 <MX_DMA_Init+0x38>)
 8000b08:	2101      	movs	r1, #1
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	615a      	str	r2, [r3, #20]
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_DMA_Init+0x38>)
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	2201      	movs	r2, #1
 8000b14:	4013      	ands	r3, r2
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2009      	movs	r0, #9
 8000b20:	f001 fcd0 	bl	80024c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b24:	2009      	movs	r0, #9
 8000b26:	f001 fce2 	bl	80024ee <HAL_NVIC_EnableIRQ>

}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b002      	add	sp, #8
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	40021000 	.word	0x40021000

08000b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b08b      	sub	sp, #44	; 0x2c
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	2414      	movs	r4, #20
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	0018      	movs	r0, r3
 8000b44:	2314      	movs	r3, #20
 8000b46:	001a      	movs	r2, r3
 8000b48:	2100      	movs	r1, #0
 8000b4a:	f00a ffad 	bl	800baa8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b4e:	4b6b      	ldr	r3, [pc, #428]	; (8000cfc <MX_GPIO_Init+0x1c4>)
 8000b50:	695a      	ldr	r2, [r3, #20]
 8000b52:	4b6a      	ldr	r3, [pc, #424]	; (8000cfc <MX_GPIO_Init+0x1c4>)
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	03c9      	lsls	r1, r1, #15
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	615a      	str	r2, [r3, #20]
 8000b5c:	4b67      	ldr	r3, [pc, #412]	; (8000cfc <MX_GPIO_Init+0x1c4>)
 8000b5e:	695a      	ldr	r2, [r3, #20]
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	03db      	lsls	r3, r3, #15
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6a:	4b64      	ldr	r3, [pc, #400]	; (8000cfc <MX_GPIO_Init+0x1c4>)
 8000b6c:	695a      	ldr	r2, [r3, #20]
 8000b6e:	4b63      	ldr	r3, [pc, #396]	; (8000cfc <MX_GPIO_Init+0x1c4>)
 8000b70:	2180      	movs	r1, #128	; 0x80
 8000b72:	0309      	lsls	r1, r1, #12
 8000b74:	430a      	orrs	r2, r1
 8000b76:	615a      	str	r2, [r3, #20]
 8000b78:	4b60      	ldr	r3, [pc, #384]	; (8000cfc <MX_GPIO_Init+0x1c4>)
 8000b7a:	695a      	ldr	r2, [r3, #20]
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	031b      	lsls	r3, r3, #12
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b5d      	ldr	r3, [pc, #372]	; (8000cfc <MX_GPIO_Init+0x1c4>)
 8000b88:	695a      	ldr	r2, [r3, #20]
 8000b8a:	4b5c      	ldr	r3, [pc, #368]	; (8000cfc <MX_GPIO_Init+0x1c4>)
 8000b8c:	2180      	movs	r1, #128	; 0x80
 8000b8e:	0289      	lsls	r1, r1, #10
 8000b90:	430a      	orrs	r2, r1
 8000b92:	615a      	str	r2, [r3, #20]
 8000b94:	4b59      	ldr	r3, [pc, #356]	; (8000cfc <MX_GPIO_Init+0x1c4>)
 8000b96:	695a      	ldr	r2, [r3, #20]
 8000b98:	2380      	movs	r3, #128	; 0x80
 8000b9a:	029b      	lsls	r3, r3, #10
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	4b56      	ldr	r3, [pc, #344]	; (8000cfc <MX_GPIO_Init+0x1c4>)
 8000ba4:	695a      	ldr	r2, [r3, #20]
 8000ba6:	4b55      	ldr	r3, [pc, #340]	; (8000cfc <MX_GPIO_Init+0x1c4>)
 8000ba8:	2180      	movs	r1, #128	; 0x80
 8000baa:	02c9      	lsls	r1, r1, #11
 8000bac:	430a      	orrs	r2, r1
 8000bae:	615a      	str	r2, [r3, #20]
 8000bb0:	4b52      	ldr	r3, [pc, #328]	; (8000cfc <MX_GPIO_Init+0x1c4>)
 8000bb2:	695a      	ldr	r2, [r3, #20]
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	02db      	lsls	r3, r3, #11
 8000bb8:	4013      	ands	r3, r2
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bbe:	4b4f      	ldr	r3, [pc, #316]	; (8000cfc <MX_GPIO_Init+0x1c4>)
 8000bc0:	695a      	ldr	r2, [r3, #20]
 8000bc2:	4b4e      	ldr	r3, [pc, #312]	; (8000cfc <MX_GPIO_Init+0x1c4>)
 8000bc4:	2180      	movs	r1, #128	; 0x80
 8000bc6:	0349      	lsls	r1, r1, #13
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	615a      	str	r2, [r3, #20]
 8000bcc:	4b4b      	ldr	r3, [pc, #300]	; (8000cfc <MX_GPIO_Init+0x1c4>)
 8000bce:	695a      	ldr	r2, [r3, #20]
 8000bd0:	2380      	movs	r3, #128	; 0x80
 8000bd2:	035b      	lsls	r3, r3, #13
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000bda:	4949      	ldr	r1, [pc, #292]	; (8000d00 <MX_GPIO_Init+0x1c8>)
 8000bdc:	4b49      	ldr	r3, [pc, #292]	; (8000d04 <MX_GPIO_Init+0x1cc>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	0018      	movs	r0, r3
 8000be2:	f001 ffba 	bl	8002b5a <HAL_GPIO_WritePin>
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000be6:	239e      	movs	r3, #158	; 0x9e
 8000be8:	015b      	lsls	r3, r3, #5
 8000bea:	4847      	ldr	r0, [pc, #284]	; (8000d08 <MX_GPIO_Init+0x1d0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	0019      	movs	r1, r3
 8000bf0:	f001 ffb3 	bl	8002b5a <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000bf4:	2380      	movs	r3, #128	; 0x80
 8000bf6:	0219      	lsls	r1, r3, #8
 8000bf8:	2390      	movs	r3, #144	; 0x90
 8000bfa:	05db      	lsls	r3, r3, #23
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f001 ffab 	bl	8002b5a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin DEBUG_Pin SR_CLR_Pin SR_RCLK_Pin
                           SR_OE_Pin DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin
                           BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|DEBUG_Pin|SR_CLR_Pin|SR_RCLK_Pin
 8000c04:	193b      	adds	r3, r7, r4
 8000c06:	4a3e      	ldr	r2, [pc, #248]	; (8000d00 <MX_GPIO_Init+0x1c8>)
 8000c08:	601a      	str	r2, [r3, #0]
                          |SR_OE_Pin|DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin
                          |BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	193b      	adds	r3, r7, r4
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	193b      	adds	r3, r7, r4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1c:	193b      	adds	r3, r7, r4
 8000c1e:	4a39      	ldr	r2, [pc, #228]	; (8000d04 <MX_GPIO_Init+0x1cc>)
 8000c20:	0019      	movs	r1, r3
 8000c22:	0010      	movs	r0, r2
 8000c24:	f001 fe04 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8000c28:	0021      	movs	r1, r4
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	229e      	movs	r2, #158	; 0x9e
 8000c2e:	0152      	lsls	r2, r2, #5
 8000c30:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	000c      	movs	r4, r1
 8000c34:	193b      	adds	r3, r7, r4
 8000c36:	2201      	movs	r2, #1
 8000c38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	193b      	adds	r3, r7, r4
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	193b      	adds	r3, r7, r4
 8000c48:	4a2f      	ldr	r2, [pc, #188]	; (8000d08 <MX_GPIO_Init+0x1d0>)
 8000c4a:	0019      	movs	r1, r3
 8000c4c:	0010      	movs	r0, r2
 8000c4e:	f001 fdef 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	22c0      	movs	r2, #192	; 0xc0
 8000c56:	0092      	lsls	r2, r2, #2
 8000c58:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c5a:	193b      	adds	r3, r7, r4
 8000c5c:	2288      	movs	r2, #136	; 0x88
 8000c5e:	0352      	lsls	r2, r2, #13
 8000c60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c62:	193b      	adds	r3, r7, r4
 8000c64:	2202      	movs	r2, #2
 8000c66:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	193a      	adds	r2, r7, r4
 8000c6a:	2390      	movs	r3, #144	; 0x90
 8000c6c:	05db      	lsls	r3, r3, #23
 8000c6e:	0011      	movs	r1, r2
 8000c70:	0018      	movs	r0, r3
 8000c72:	f001 fddd 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c76:	193b      	adds	r3, r7, r4
 8000c78:	2280      	movs	r2, #128	; 0x80
 8000c7a:	00d2      	lsls	r2, r2, #3
 8000c7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	2200      	movs	r2, #0
 8000c82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	193a      	adds	r2, r7, r4
 8000c8c:	2390      	movs	r3, #144	; 0x90
 8000c8e:	05db      	lsls	r3, r3, #23
 8000c90:	0011      	movs	r1, r2
 8000c92:	0018      	movs	r0, r3
 8000c94:	f001 fdcc 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 8000c98:	0021      	movs	r1, r4
 8000c9a:	187b      	adds	r3, r7, r1
 8000c9c:	2280      	movs	r2, #128	; 0x80
 8000c9e:	0212      	lsls	r2, r2, #8
 8000ca0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	000c      	movs	r4, r1
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	193b      	adds	r3, r7, r4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 8000cb6:	193a      	adds	r2, r7, r4
 8000cb8:	2390      	movs	r3, #144	; 0x90
 8000cba:	05db      	lsls	r3, r3, #23
 8000cbc:	0011      	movs	r1, r2
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f001 fdb6 	bl	8002830 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 8000cc4:	193b      	adds	r3, r7, r4
 8000cc6:	2204      	movs	r2, #4
 8000cc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	193b      	adds	r3, r7, r4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	193b      	adds	r3, r7, r4
 8000cd8:	4a0c      	ldr	r2, [pc, #48]	; (8000d0c <MX_GPIO_Init+0x1d4>)
 8000cda:	0019      	movs	r1, r3
 8000cdc:	0010      	movs	r0, r2
 8000cde:	f001 fda7 	bl	8002830 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2007      	movs	r0, #7
 8000ce8:	f001 fbec 	bl	80024c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000cec:	2007      	movs	r0, #7
 8000cee:	f001 fbfe 	bl	80024ee <HAL_NVIC_EnableIRQ>

}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b00b      	add	sp, #44	; 0x2c
 8000cf8:	bd90      	pop	{r4, r7, pc}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	0000f3c4 	.word	0x0000f3c4
 8000d04:	48000400 	.word	0x48000400
 8000d08:	48000800 	.word	0x48000800
 8000d0c:	48000c00 	.word	0x48000c00

08000d10 <clkHandler>:

/* USER CODE BEGIN 4 */

void clkHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
	flags.time.ten_ms = 0;
 8000d14:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <clkHandler+0xf4>)
 8000d16:	781a      	ldrb	r2, [r3, #0]
 8000d18:	2101      	movs	r1, #1
 8000d1a:	438a      	bics	r2, r1
 8000d1c:	701a      	strb	r2, [r3, #0]
	flags.time.sec	= 0;
 8000d1e:	4b39      	ldr	r3, [pc, #228]	; (8000e04 <clkHandler+0xf4>)
 8000d20:	781a      	ldrb	r2, [r3, #0]
 8000d22:	2102      	movs	r1, #2
 8000d24:	438a      	bics	r2, r1
 8000d26:	701a      	strb	r2, [r3, #0]
	flags.time.min	= 0;
 8000d28:	4b36      	ldr	r3, [pc, #216]	; (8000e04 <clkHandler+0xf4>)
 8000d2a:	781a      	ldrb	r2, [r3, #0]
 8000d2c:	2104      	movs	r1, #4
 8000d2e:	438a      	bics	r2, r1
 8000d30:	701a      	strb	r2, [r3, #0]
	flags.time.hour	= 0;
 8000d32:	4b34      	ldr	r3, [pc, #208]	; (8000e04 <clkHandler+0xf4>)
 8000d34:	781a      	ldrb	r2, [r3, #0]
 8000d36:	2108      	movs	r1, #8
 8000d38:	438a      	bics	r2, r1
 8000d3a:	701a      	strb	r2, [r3, #0]
	sysTime[SYSTIME_TEN_MS]++;
 8000d3c:	4b32      	ldr	r3, [pc, #200]	; (8000e08 <clkHandler+0xf8>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	1c5a      	adds	r2, r3, #1
 8000d42:	4b31      	ldr	r3, [pc, #196]	; (8000e08 <clkHandler+0xf8>)
 8000d44:	601a      	str	r2, [r3, #0]
	if((sysTime[SYSTIME_TEN_MS] % 10) == 0)	//1 s
 8000d46:	4b30      	ldr	r3, [pc, #192]	; (8000e08 <clkHandler+0xf8>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	210a      	movs	r1, #10
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f7ff fa73 	bl	8000238 <__aeabi_uidivmod>
 8000d52:	1e0b      	subs	r3, r1, #0
 8000d54:	d109      	bne.n	8000d6a <clkHandler+0x5a>
	{
		sysTime[SYSTIME_SEC]++;
 8000d56:	4b2c      	ldr	r3, [pc, #176]	; (8000e08 <clkHandler+0xf8>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	1c5a      	adds	r2, r3, #1
 8000d5c:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <clkHandler+0xf8>)
 8000d5e:	605a      	str	r2, [r3, #4]
		flags.time.sec = 1;
 8000d60:	4b28      	ldr	r3, [pc, #160]	; (8000e04 <clkHandler+0xf4>)
 8000d62:	781a      	ldrb	r2, [r3, #0]
 8000d64:	2102      	movs	r1, #2
 8000d66:	430a      	orrs	r2, r1
 8000d68:	701a      	strb	r2, [r3, #0]
	}

	if(flags.time.sec)
 8000d6a:	4b26      	ldr	r3, [pc, #152]	; (8000e04 <clkHandler+0xf4>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	2202      	movs	r2, #2
 8000d70:	4013      	ands	r3, r2
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d042      	beq.n	8000dfe <clkHandler+0xee>
	{
		if((sysTime[SYSTIME_SEC] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8000d78:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <clkHandler+0xf8>)
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	213c      	movs	r1, #60	; 0x3c
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f7ff fa5a 	bl	8000238 <__aeabi_uidivmod>
 8000d84:	1e0b      	subs	r3, r1, #0
 8000d86:	d110      	bne.n	8000daa <clkHandler+0x9a>
 8000d88:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <clkHandler+0xf8>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d00c      	beq.n	8000daa <clkHandler+0x9a>
		{
			sysTime[SYSTIME_SEC] = 0;
 8000d90:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <clkHandler+0xf8>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	605a      	str	r2, [r3, #4]
			sysTime[SYSTIME_MIN]++;
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <clkHandler+0xf8>)
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	1c5a      	adds	r2, r3, #1
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <clkHandler+0xf8>)
 8000d9e:	609a      	str	r2, [r3, #8]
			flags.time.min = 1;
 8000da0:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <clkHandler+0xf4>)
 8000da2:	781a      	ldrb	r2, [r3, #0]
 8000da4:	2104      	movs	r1, #4
 8000da6:	430a      	orrs	r2, r1
 8000da8:	701a      	strb	r2, [r3, #0]
		}

		if(flags.time.min)
 8000daa:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <clkHandler+0xf4>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2204      	movs	r2, #4
 8000db0:	4013      	ands	r3, r2
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d022      	beq.n	8000dfe <clkHandler+0xee>
		{
			if((sysTime[SYSTIME_MIN] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8000db8:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <clkHandler+0xf8>)
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	213c      	movs	r1, #60	; 0x3c
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f7ff fa3a 	bl	8000238 <__aeabi_uidivmod>
 8000dc4:	1e0b      	subs	r3, r1, #0
 8000dc6:	d11a      	bne.n	8000dfe <clkHandler+0xee>
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <clkHandler+0xf8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d016      	beq.n	8000dfe <clkHandler+0xee>
			{

				sysTime[SYSTIME_SEC] = 0;
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <clkHandler+0xf8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	605a      	str	r2, [r3, #4]
				sysTime[SYSTIME_MIN] = 0;
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <clkHandler+0xf8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
				sysTime[SYSTIME_HOUR]++;
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <clkHandler+0xf8>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	1c5a      	adds	r2, r3, #1
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <clkHandler+0xf8>)
 8000de4:	60da      	str	r2, [r3, #12]
				flags.time.hour = 1;
 8000de6:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <clkHandler+0xf4>)
 8000de8:	781a      	ldrb	r2, [r3, #0]
 8000dea:	2108      	movs	r1, #8
 8000dec:	430a      	orrs	r2, r1
 8000dee:	701a      	strb	r2, [r3, #0]
				if(sysTime[SYSTIME_HOUR] >= 23)
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <clkHandler+0xf8>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	2b16      	cmp	r3, #22
 8000df6:	d902      	bls.n	8000dfe <clkHandler+0xee>
					sysTime[SYSTIME_HOUR] = 0;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <clkHandler+0xf8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime[SYSTIME_HOUR], sysTime[SYSTIME_MIN], sysTime[SYSTIME_SEC]);
		pushStr(USB_Tx_Buffer, timeStamp, strlen(timeStamp));	//odešli čas
	}
#endif
}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000584 	.word	0x20000584
 8000e08:	200001fc 	.word	0x200001fc

08000e0c <buttonDebounce>:

void buttonDebounce(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	if(flags.buttons.butt0_int)
 8000e10:	4b33      	ldr	r3, [pc, #204]	; (8000ee0 <buttonDebounce+0xd4>)
 8000e12:	791b      	ldrb	r3, [r3, #4]
 8000e14:	2201      	movs	r2, #1
 8000e16:	4013      	ands	r3, r2
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d02a      	beq.n	8000e74 <buttonDebounce+0x68>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 8000e1e:	2380      	movs	r3, #128	; 0x80
 8000e20:	009a      	lsls	r2, r3, #2
 8000e22:	2390      	movs	r3, #144	; 0x90
 8000e24:	05db      	lsls	r3, r3, #23
 8000e26:	0011      	movs	r1, r2
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f001 fe79 	bl	8002b20 <HAL_GPIO_ReadPin>
 8000e2e:	0003      	movs	r3, r0
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d106      	bne.n	8000e42 <buttonDebounce+0x36>
		{
			button0_Debounce++;
 8000e34:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <buttonDebounce+0xd8>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	4b29      	ldr	r3, [pc, #164]	; (8000ee4 <buttonDebounce+0xd8>)
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	e007      	b.n	8000e52 <buttonDebounce+0x46>
		}
		else
		{
			button0_Debounce = 0;
 8000e42:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <buttonDebounce+0xd8>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt0_int = 0;
 8000e48:	4b25      	ldr	r3, [pc, #148]	; (8000ee0 <buttonDebounce+0xd4>)
 8000e4a:	791a      	ldrb	r2, [r3, #4]
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	438a      	bics	r2, r1
 8000e50:	711a      	strb	r2, [r3, #4]
		}
		if(button0_Debounce >= 5)
 8000e52:	4b24      	ldr	r3, [pc, #144]	; (8000ee4 <buttonDebounce+0xd8>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	d90c      	bls.n	8000e74 <buttonDebounce+0x68>
		{
			flags.buttons.butt0_ver = 1;
 8000e5a:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <buttonDebounce+0xd4>)
 8000e5c:	791a      	ldrb	r2, [r3, #4]
 8000e5e:	2102      	movs	r1, #2
 8000e60:	430a      	orrs	r2, r1
 8000e62:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt0_int = 0;
 8000e64:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <buttonDebounce+0xd4>)
 8000e66:	791a      	ldrb	r2, [r3, #4]
 8000e68:	2101      	movs	r1, #1
 8000e6a:	438a      	bics	r2, r1
 8000e6c:	711a      	strb	r2, [r3, #4]
			button0_Debounce = 0;
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <buttonDebounce+0xd8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
			//writeChar('a', 1, 5);
#endif
		}
	}

	if(flags.buttons.butt1_int)
 8000e74:	4b1a      	ldr	r3, [pc, #104]	; (8000ee0 <buttonDebounce+0xd4>)
 8000e76:	791b      	ldrb	r3, [r3, #4]
 8000e78:	2204      	movs	r2, #4
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d02a      	beq.n	8000ed8 <buttonDebounce+0xcc>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 8000e82:	2380      	movs	r3, #128	; 0x80
 8000e84:	005a      	lsls	r2, r3, #1
 8000e86:	2390      	movs	r3, #144	; 0x90
 8000e88:	05db      	lsls	r3, r3, #23
 8000e8a:	0011      	movs	r1, r2
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f001 fe47 	bl	8002b20 <HAL_GPIO_ReadPin>
 8000e92:	0003      	movs	r3, r0
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d106      	bne.n	8000ea6 <buttonDebounce+0x9a>
		{
			button1_Debounce++;
 8000e98:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <buttonDebounce+0xdc>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <buttonDebounce+0xdc>)
 8000ea2:	701a      	strb	r2, [r3, #0]
 8000ea4:	e007      	b.n	8000eb6 <buttonDebounce+0xaa>
		}
		else
		{
			button1_Debounce = 0;
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <buttonDebounce+0xdc>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt1_int = 0;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <buttonDebounce+0xd4>)
 8000eae:	791a      	ldrb	r2, [r3, #4]
 8000eb0:	2104      	movs	r1, #4
 8000eb2:	438a      	bics	r2, r1
 8000eb4:	711a      	strb	r2, [r3, #4]
		}
		if(button1_Debounce >= 5)
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <buttonDebounce+0xdc>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	d90c      	bls.n	8000ed8 <buttonDebounce+0xcc>
		{
			flags.buttons.butt1_ver = 1;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <buttonDebounce+0xd4>)
 8000ec0:	791a      	ldrb	r2, [r3, #4]
 8000ec2:	2108      	movs	r1, #8
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt1_int = 0;
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <buttonDebounce+0xd4>)
 8000eca:	791a      	ldrb	r2, [r3, #4]
 8000ecc:	2104      	movs	r1, #4
 8000ece:	438a      	bics	r2, r1
 8000ed0:	711a      	strb	r2, [r3, #4]
			button1_Debounce = 0;
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <buttonDebounce+0xdc>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]
#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
#endif
		}
	}
}
 8000ed8:	46c0      	nop			; (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	20000584 	.word	0x20000584
 8000ee4:	2000020c 	.word	0x2000020c
 8000ee8:	2000020d 	.word	0x2000020d

08000eec <comHandler>:
 *
 * Při přijmutí instrukce nedochází k zpracování, ale pouze k nastavení adekvátního flagu.
 * Vykonání instrukce musí být zařízeno v jiné části hlavního programu.
 */
void comHandler(void)
{
 8000eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eee:	b099      	sub	sp, #100	; 0x64
 8000ef0:	af00      	add	r7, sp, #0
	//___Příjem dat___//
	if(flags.data_received)
 8000ef2:	4b81      	ldr	r3, [pc, #516]	; (80010f8 <comHandler+0x20c>)
 8000ef4:	7a1b      	ldrb	r3, [r3, #8]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	4013      	ands	r3, r2
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d042      	beq.n	8000f86 <comHandler+0x9a>
	{
		char instruction;
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 8000f00:	e02e      	b.n	8000f60 <comHandler+0x74>
		{
#ifdef __DEBUG_INST__
			uint8_t txt[30];
#endif

			switch(instruction)
 8000f02:	232f      	movs	r3, #47	; 0x2f
 8000f04:	2220      	movs	r2, #32
 8000f06:	4694      	mov	ip, r2
 8000f08:	44bc      	add	ip, r7
 8000f0a:	4463      	add	r3, ip
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b73      	cmp	r3, #115	; 0x73
 8000f10:	d008      	beq.n	8000f24 <comHandler+0x38>
 8000f12:	dc1f      	bgt.n	8000f54 <comHandler+0x68>
 8000f14:	2b70      	cmp	r3, #112	; 0x70
 8000f16:	d011      	beq.n	8000f3c <comHandler+0x50>
 8000f18:	dc1c      	bgt.n	8000f54 <comHandler+0x68>
 8000f1a:	2b63      	cmp	r3, #99	; 0x63
 8000f1c:	d008      	beq.n	8000f30 <comHandler+0x44>
 8000f1e:	2b6b      	cmp	r3, #107	; 0x6b
 8000f20:	d012      	beq.n	8000f48 <comHandler+0x5c>
 8000f22:	e017      	b.n	8000f54 <comHandler+0x68>
			{
			case 's': ;
				//___Start testu___//
				flags.instructions.startRequest = 1;
 8000f24:	4b74      	ldr	r3, [pc, #464]	; (80010f8 <comHandler+0x20c>)
 8000f26:	7b1a      	ldrb	r2, [r3, #12]
 8000f28:	2101      	movs	r1, #1
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Start\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000f2e:	e017      	b.n	8000f60 <comHandler+0x74>

			case'c': ;
				//___Ukončení___//
				flags.instructions.stopRequest = 1;
 8000f30:	4b71      	ldr	r3, [pc, #452]	; (80010f8 <comHandler+0x20c>)
 8000f32:	7b1a      	ldrb	r2, [r3, #12]
 8000f34:	2102      	movs	r1, #2
 8000f36:	430a      	orrs	r2, r1
 8000f38:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Ukonceni\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000f3a:	e011      	b.n	8000f60 <comHandler+0x74>

			case'p': ;
				//___Pauza___//
				flags.instructions.pauseRequest = 1;
 8000f3c:	4b6e      	ldr	r3, [pc, #440]	; (80010f8 <comHandler+0x20c>)
 8000f3e:	7b1a      	ldrb	r2, [r3, #12]
 8000f40:	2104      	movs	r1, #4
 8000f42:	430a      	orrs	r2, r1
 8000f44:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Pauza\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000f46:	e00b      	b.n	8000f60 <comHandler+0x74>

			case'k': ;
				//___Kalibrace___//
				flags.instructions.calibRequest = 1;
 8000f48:	4b6b      	ldr	r3, [pc, #428]	; (80010f8 <comHandler+0x20c>)
 8000f4a:	7b1a      	ldrb	r2, [r3, #12]
 8000f4c:	2108      	movs	r1, #8
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Kalibrace\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000f52:	e005      	b.n	8000f60 <comHandler+0x74>

			default: ;
				//___Neplatný příkaz___//
				flags.instructions.unknownInst = 1;
 8000f54:	4b68      	ldr	r3, [pc, #416]	; (80010f8 <comHandler+0x20c>)
 8000f56:	7b1a      	ldrb	r2, [r3, #12]
 8000f58:	2110      	movs	r1, #16
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
				sprintf(txt, "Neplatna instrukce\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				break;
 8000f5e:	46c0      	nop			; (mov r8, r8)
		while(pop(USB_Rx_Buffer, &instruction) != BUFFER_EMPTY)
 8000f60:	4b66      	ldr	r3, [pc, #408]	; (80010fc <comHandler+0x210>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	222f      	movs	r2, #47	; 0x2f
 8000f66:	2120      	movs	r1, #32
 8000f68:	468c      	mov	ip, r1
 8000f6a:	44bc      	add	ip, r7
 8000f6c:	4462      	add	r2, ip
 8000f6e:	0011      	movs	r1, r2
 8000f70:	0018      	movs	r0, r3
 8000f72:	f000 fa80 	bl	8001476 <pop>
 8000f76:	0003      	movs	r3, r0
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d1c2      	bne.n	8000f02 <comHandler+0x16>
			}
		}
		flags.data_received = 0;
 8000f7c:	4b5e      	ldr	r3, [pc, #376]	; (80010f8 <comHandler+0x20c>)
 8000f7e:	7a1a      	ldrb	r2, [r3, #8]
 8000f80:	2101      	movs	r1, #1
 8000f82:	438a      	bics	r2, r1
 8000f84:	721a      	strb	r2, [r3, #8]
	}

	if(flags.testProgress)
 8000f86:	4b5c      	ldr	r3, [pc, #368]	; (80010f8 <comHandler+0x20c>)
 8000f88:	7e1b      	ldrb	r3, [r3, #24]
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d01d      	beq.n	8000fd0 <comHandler+0xe4>
	{
		char txt[] = {"Test progress\n"};
 8000f94:	2020      	movs	r0, #32
 8000f96:	2320      	movs	r3, #32
 8000f98:	18fb      	adds	r3, r7, r3
 8000f9a:	181b      	adds	r3, r3, r0
 8000f9c:	4a58      	ldr	r2, [pc, #352]	; (8001100 <comHandler+0x214>)
 8000f9e:	ca32      	ldmia	r2!, {r1, r4, r5}
 8000fa0:	c332      	stmia	r3!, {r1, r4, r5}
 8000fa2:	8811      	ldrh	r1, [r2, #0]
 8000fa4:	8019      	strh	r1, [r3, #0]
 8000fa6:	7892      	ldrb	r2, [r2, #2]
 8000fa8:	709a      	strb	r2, [r3, #2]
		pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000faa:	4b56      	ldr	r3, [pc, #344]	; (8001104 <comHandler+0x218>)
 8000fac:	681e      	ldr	r6, [r3, #0]
 8000fae:	0004      	movs	r4, r0
 8000fb0:	2320      	movs	r3, #32
 8000fb2:	18fb      	adds	r3, r7, r3
 8000fb4:	181b      	adds	r3, r3, r0
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f7ff f8a6 	bl	8000108 <strlen>
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	001a      	movs	r2, r3
 8000fc0:	0020      	movs	r0, r4
 8000fc2:	2320      	movs	r3, #32
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	181b      	adds	r3, r3, r0
 8000fc8:	0019      	movs	r1, r3
 8000fca:	0030      	movs	r0, r6
 8000fcc:	f000 fa2b 	bl	8001426 <pushStr>
	}

	if(flags.meas.measComplete)
 8000fd0:	4b49      	ldr	r3, [pc, #292]	; (80010f8 <comHandler+0x20c>)
 8000fd2:	7d1b      	ldrb	r3, [r3, #20]
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d01b      	beq.n	8001016 <comHandler+0x12a>
	{
		char txt[] = {"Measure\n"};
 8000fde:	2114      	movs	r1, #20
 8000fe0:	2320      	movs	r3, #32
 8000fe2:	18fb      	adds	r3, r7, r3
 8000fe4:	185b      	adds	r3, r3, r1
 8000fe6:	4a48      	ldr	r2, [pc, #288]	; (8001108 <comHandler+0x21c>)
 8000fe8:	ca11      	ldmia	r2!, {r0, r4}
 8000fea:	c311      	stmia	r3!, {r0, r4}
 8000fec:	7812      	ldrb	r2, [r2, #0]
 8000fee:	701a      	strb	r2, [r3, #0]
		pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8000ff0:	4b44      	ldr	r3, [pc, #272]	; (8001104 <comHandler+0x218>)
 8000ff2:	681e      	ldr	r6, [r3, #0]
 8000ff4:	000c      	movs	r4, r1
 8000ff6:	2320      	movs	r3, #32
 8000ff8:	18fb      	adds	r3, r7, r3
 8000ffa:	185b      	adds	r3, r3, r1
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff f883 	bl	8000108 <strlen>
 8001002:	0003      	movs	r3, r0
 8001004:	001a      	movs	r2, r3
 8001006:	0021      	movs	r1, r4
 8001008:	2320      	movs	r3, #32
 800100a:	18fb      	adds	r3, r7, r3
 800100c:	185b      	adds	r3, r3, r1
 800100e:	0019      	movs	r1, r3
 8001010:	0030      	movs	r0, r6
 8001012:	f000 fa08 	bl	8001426 <pushStr>
	}

	//___Odesílání dat___//
	//_Ošetření plného bufferu_//
	if(USB_Tx_Buffer->status == BUFFER_FULL)
 8001016:	4b3b      	ldr	r3, [pc, #236]	; (8001104 <comHandler+0x218>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	7d1b      	ldrb	r3, [r3, #20]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d113      	bne.n	8001048 <comHandler+0x15c>
	{
		char msg[] = {"Buffer full\n"};
 8001020:	2324      	movs	r3, #36	; 0x24
 8001022:	18fb      	adds	r3, r7, r3
 8001024:	4a39      	ldr	r2, [pc, #228]	; (800110c <comHandler+0x220>)
 8001026:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001028:	c313      	stmia	r3!, {r0, r1, r4}
 800102a:	7812      	ldrb	r2, [r2, #0]
 800102c:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(msg, strlen(msg));
 800102e:	2324      	movs	r3, #36	; 0x24
 8001030:	18fb      	adds	r3, r7, r3
 8001032:	0018      	movs	r0, r3
 8001034:	f7ff f868 	bl	8000108 <strlen>
 8001038:	0003      	movs	r3, r0
 800103a:	b29a      	uxth	r2, r3
 800103c:	2324      	movs	r3, #36	; 0x24
 800103e:	18fb      	adds	r3, r7, r3
 8001040:	0011      	movs	r1, r2
 8001042:	0018      	movs	r0, r3
 8001044:	f00a f836 	bl	800b0b4 <CDC_Transmit_FS>
	}
	//_Samotné odesílání_//
	if(USB_Tx_Buffer->filled)
 8001048:	4b2e      	ldr	r3, [pc, #184]	; (8001104 <comHandler+0x218>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d04e      	beq.n	80010f0 <comHandler+0x204>
	{
 8001052:	466b      	mov	r3, sp
 8001054:	001e      	movs	r6, r3
		int size = USB_Tx_Buffer->filled;
 8001056:	4b2b      	ldr	r3, [pc, #172]	; (8001104 <comHandler+0x218>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	65bb      	str	r3, [r7, #88]	; 0x58
		char tmpStr[size+1];
 800105e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001060:	3301      	adds	r3, #1
 8001062:	1e5a      	subs	r2, r3, #1
 8001064:	657a      	str	r2, [r7, #84]	; 0x54
 8001066:	001a      	movs	r2, r3
 8001068:	60ba      	str	r2, [r7, #8]
 800106a:	2200      	movs	r2, #0
 800106c:	60fa      	str	r2, [r7, #12]
 800106e:	68b8      	ldr	r0, [r7, #8]
 8001070:	68f9      	ldr	r1, [r7, #12]
 8001072:	0002      	movs	r2, r0
 8001074:	0f52      	lsrs	r2, r2, #29
 8001076:	000c      	movs	r4, r1
 8001078:	00e4      	lsls	r4, r4, #3
 800107a:	61fc      	str	r4, [r7, #28]
 800107c:	69fc      	ldr	r4, [r7, #28]
 800107e:	4314      	orrs	r4, r2
 8001080:	61fc      	str	r4, [r7, #28]
 8001082:	0002      	movs	r2, r0
 8001084:	00d2      	lsls	r2, r2, #3
 8001086:	61ba      	str	r2, [r7, #24]
 8001088:	001a      	movs	r2, r3
 800108a:	603a      	str	r2, [r7, #0]
 800108c:	2200      	movs	r2, #0
 800108e:	607a      	str	r2, [r7, #4]
 8001090:	6838      	ldr	r0, [r7, #0]
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	0002      	movs	r2, r0
 8001096:	0f52      	lsrs	r2, r2, #29
 8001098:	000c      	movs	r4, r1
 800109a:	00e4      	lsls	r4, r4, #3
 800109c:	617c      	str	r4, [r7, #20]
 800109e:	697c      	ldr	r4, [r7, #20]
 80010a0:	4314      	orrs	r4, r2
 80010a2:	617c      	str	r4, [r7, #20]
 80010a4:	0002      	movs	r2, r0
 80010a6:	00d2      	lsls	r2, r2, #3
 80010a8:	613a      	str	r2, [r7, #16]
 80010aa:	3307      	adds	r3, #7
 80010ac:	08db      	lsrs	r3, r3, #3
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	466a      	mov	r2, sp
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	469d      	mov	sp, r3
 80010b6:	466b      	mov	r3, sp
 80010b8:	3300      	adds	r3, #0
 80010ba:	653b      	str	r3, [r7, #80]	; 0x50
		for(int i = 0; i < size; i++)
 80010bc:	2300      	movs	r3, #0
 80010be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010c0:	e00a      	b.n	80010d8 <comHandler+0x1ec>
		{
			pop(USB_Tx_Buffer, &tmpStr[i]);
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <comHandler+0x218>)
 80010c4:	6818      	ldr	r0, [r3, #0]
 80010c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80010c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010ca:	18d3      	adds	r3, r2, r3
 80010cc:	0019      	movs	r1, r3
 80010ce:	f000 f9d2 	bl	8001476 <pop>
		for(int i = 0; i < size; i++)
 80010d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010d4:	3301      	adds	r3, #1
 80010d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80010da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010dc:	429a      	cmp	r2, r3
 80010de:	dbf0      	blt.n	80010c2 <comHandler+0x1d6>
		}
		CDC_Transmit_FS(tmpStr, size);
 80010e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80010e4:	b292      	uxth	r2, r2
 80010e6:	0011      	movs	r1, r2
 80010e8:	0018      	movs	r0, r3
 80010ea:	f009 ffe3 	bl	800b0b4 <CDC_Transmit_FS>
 80010ee:	46b5      	mov	sp, r6
	}

}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b019      	add	sp, #100	; 0x64
 80010f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f8:	20000584 	.word	0x20000584
 80010fc:	200010d0 	.word	0x200010d0
 8001100:	0800c31c 	.word	0x0800c31c
 8001104:	200004d4 	.word	0x200004d4
 8001108:	0800c32c 	.word	0x0800c32c
 800110c:	0800c338 	.word	0x0800c338

08001110 <UI_Handler>:

//_____Obsluha piezo + podsvícení displeje_____//
void UI_Handler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
		DONE,
	}UI_State;

	static uint32_t startTime;

	if(flags.ui.error && (UI_State != ERROR))
 8001114:	4b84      	ldr	r3, [pc, #528]	; (8001328 <UI_Handler+0x218>)
 8001116:	7c1b      	ldrb	r3, [r3, #16]
 8001118:	2204      	movs	r2, #4
 800111a:	4013      	ands	r3, r2
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d00b      	beq.n	800113a <UI_Handler+0x2a>
 8001122:	4b82      	ldr	r3, [pc, #520]	; (800132c <UI_Handler+0x21c>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b03      	cmp	r3, #3
 8001128:	d007      	beq.n	800113a <UI_Handler+0x2a>
	{
		UI_State = ERROR;
 800112a:	4b80      	ldr	r3, [pc, #512]	; (800132c <UI_Handler+0x21c>)
 800112c:	2203      	movs	r2, #3
 800112e:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001130:	4b7f      	ldr	r3, [pc, #508]	; (8001330 <UI_Handler+0x220>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b7f      	ldr	r3, [pc, #508]	; (8001334 <UI_Handler+0x224>)
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	e05e      	b.n	80011f8 <UI_Handler+0xe8>
	}
	else if(flags.ui.notice && (UI_State == OFF))
 800113a:	4b7b      	ldr	r3, [pc, #492]	; (8001328 <UI_Handler+0x218>)
 800113c:	7c1b      	ldrb	r3, [r3, #16]
 800113e:	2208      	movs	r2, #8
 8001140:	4013      	ands	r3, r2
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	d010      	beq.n	800116a <UI_Handler+0x5a>
 8001148:	4b78      	ldr	r3, [pc, #480]	; (800132c <UI_Handler+0x21c>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d10c      	bne.n	800116a <UI_Handler+0x5a>
	{
		UI_State = NOTICE;
 8001150:	4b76      	ldr	r3, [pc, #472]	; (800132c <UI_Handler+0x21c>)
 8001152:	2204      	movs	r2, #4
 8001154:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001156:	4b76      	ldr	r3, [pc, #472]	; (8001330 <UI_Handler+0x220>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4b76      	ldr	r3, [pc, #472]	; (8001334 <UI_Handler+0x224>)
 800115c:	601a      	str	r2, [r3, #0]
		flags.ui.notice = 0;
 800115e:	4b72      	ldr	r3, [pc, #456]	; (8001328 <UI_Handler+0x218>)
 8001160:	7c1a      	ldrb	r2, [r3, #16]
 8001162:	2108      	movs	r1, #8
 8001164:	438a      	bics	r2, r1
 8001166:	741a      	strb	r2, [r3, #16]
 8001168:	e046      	b.n	80011f8 <UI_Handler+0xe8>
	}
	else if(flags.ui.done && (UI_State == OFF))
 800116a:	4b6f      	ldr	r3, [pc, #444]	; (8001328 <UI_Handler+0x218>)
 800116c:	7c1b      	ldrb	r3, [r3, #16]
 800116e:	2210      	movs	r2, #16
 8001170:	4013      	ands	r3, r2
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d010      	beq.n	800119a <UI_Handler+0x8a>
 8001178:	4b6c      	ldr	r3, [pc, #432]	; (800132c <UI_Handler+0x21c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10c      	bne.n	800119a <UI_Handler+0x8a>
	{
		UI_State = DONE;
 8001180:	4b6a      	ldr	r3, [pc, #424]	; (800132c <UI_Handler+0x21c>)
 8001182:	2205      	movs	r2, #5
 8001184:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8001186:	4b6a      	ldr	r3, [pc, #424]	; (8001330 <UI_Handler+0x220>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4b6a      	ldr	r3, [pc, #424]	; (8001334 <UI_Handler+0x224>)
 800118c:	601a      	str	r2, [r3, #0]
		flags.ui.done = 0;
 800118e:	4b66      	ldr	r3, [pc, #408]	; (8001328 <UI_Handler+0x218>)
 8001190:	7c1a      	ldrb	r2, [r3, #16]
 8001192:	2110      	movs	r1, #16
 8001194:	438a      	bics	r2, r1
 8001196:	741a      	strb	r2, [r3, #16]
 8001198:	e02e      	b.n	80011f8 <UI_Handler+0xe8>
	}
	else if(flags.ui.longBeep && (UI_State == OFF))
 800119a:	4b63      	ldr	r3, [pc, #396]	; (8001328 <UI_Handler+0x218>)
 800119c:	7c1b      	ldrb	r3, [r3, #16]
 800119e:	2202      	movs	r2, #2
 80011a0:	4013      	ands	r3, r2
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d010      	beq.n	80011ca <UI_Handler+0xba>
 80011a8:	4b60      	ldr	r3, [pc, #384]	; (800132c <UI_Handler+0x21c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10c      	bne.n	80011ca <UI_Handler+0xba>
	{
		UI_State = LONG_BEEP;
 80011b0:	4b5e      	ldr	r3, [pc, #376]	; (800132c <UI_Handler+0x21c>)
 80011b2:	2202      	movs	r2, #2
 80011b4:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80011b6:	4b5e      	ldr	r3, [pc, #376]	; (8001330 <UI_Handler+0x220>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	4b5e      	ldr	r3, [pc, #376]	; (8001334 <UI_Handler+0x224>)
 80011bc:	601a      	str	r2, [r3, #0]
		flags.ui.longBeep = 0;
 80011be:	4b5a      	ldr	r3, [pc, #360]	; (8001328 <UI_Handler+0x218>)
 80011c0:	7c1a      	ldrb	r2, [r3, #16]
 80011c2:	2102      	movs	r1, #2
 80011c4:	438a      	bics	r2, r1
 80011c6:	741a      	strb	r2, [r3, #16]
 80011c8:	e016      	b.n	80011f8 <UI_Handler+0xe8>
	}
	else if(flags.ui.shortBeep && (UI_State == OFF))
 80011ca:	4b57      	ldr	r3, [pc, #348]	; (8001328 <UI_Handler+0x218>)
 80011cc:	7c1b      	ldrb	r3, [r3, #16]
 80011ce:	2201      	movs	r2, #1
 80011d0:	4013      	ands	r3, r2
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d00f      	beq.n	80011f8 <UI_Handler+0xe8>
 80011d8:	4b54      	ldr	r3, [pc, #336]	; (800132c <UI_Handler+0x21c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d10b      	bne.n	80011f8 <UI_Handler+0xe8>
	{
		UI_State = SHORT_BEEP;
 80011e0:	4b52      	ldr	r3, [pc, #328]	; (800132c <UI_Handler+0x21c>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80011e6:	4b52      	ldr	r3, [pc, #328]	; (8001330 <UI_Handler+0x220>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4b52      	ldr	r3, [pc, #328]	; (8001334 <UI_Handler+0x224>)
 80011ec:	601a      	str	r2, [r3, #0]
		flags.ui.shortBeep = 0;
 80011ee:	4b4e      	ldr	r3, [pc, #312]	; (8001328 <UI_Handler+0x218>)
 80011f0:	7c1a      	ldrb	r2, [r3, #16]
 80011f2:	2101      	movs	r1, #1
 80011f4:	438a      	bics	r2, r1
 80011f6:	741a      	strb	r2, [r3, #16]
	}

	switch(UI_State)
 80011f8:	4b4c      	ldr	r3, [pc, #304]	; (800132c <UI_Handler+0x21c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b05      	cmp	r3, #5
 80011fe:	d900      	bls.n	8001202 <UI_Handler+0xf2>
 8001200:	e07a      	b.n	80012f8 <UI_Handler+0x1e8>
 8001202:	009a      	lsls	r2, r3, #2
 8001204:	4b4c      	ldr	r3, [pc, #304]	; (8001338 <UI_Handler+0x228>)
 8001206:	18d3      	adds	r3, r2, r3
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	469f      	mov	pc, r3
	{
	case SHORT_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 50)
 800120c:	4b48      	ldr	r3, [pc, #288]	; (8001330 <UI_Handler+0x220>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b48      	ldr	r3, [pc, #288]	; (8001334 <UI_Handler+0x224>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b31      	cmp	r3, #49	; 0x31
 8001218:	d800      	bhi.n	800121c <UI_Handler+0x10c>
 800121a:	e078      	b.n	800130e <UI_Handler+0x1fe>
		{
			UI_State = OFF;
 800121c:	4b43      	ldr	r3, [pc, #268]	; (800132c <UI_Handler+0x21c>)
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8001222:	2380      	movs	r3, #128	; 0x80
 8001224:	015b      	lsls	r3, r3, #5
 8001226:	4845      	ldr	r0, [pc, #276]	; (800133c <UI_Handler+0x22c>)
 8001228:	2200      	movs	r2, #0
 800122a:	0019      	movs	r1, r3
 800122c:	f001 fc95 	bl	8002b5a <HAL_GPIO_WritePin>
		}
		break;
 8001230:	e06d      	b.n	800130e <UI_Handler+0x1fe>

	case LONG_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 100)
 8001232:	4b3f      	ldr	r3, [pc, #252]	; (8001330 <UI_Handler+0x220>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	4b3f      	ldr	r3, [pc, #252]	; (8001334 <UI_Handler+0x224>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b63      	cmp	r3, #99	; 0x63
 800123e:	d968      	bls.n	8001312 <UI_Handler+0x202>
		{
			UI_State = OFF;
 8001240:	4b3a      	ldr	r3, [pc, #232]	; (800132c <UI_Handler+0x21c>)
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	015b      	lsls	r3, r3, #5
 800124a:	483c      	ldr	r0, [pc, #240]	; (800133c <UI_Handler+0x22c>)
 800124c:	2200      	movs	r2, #0
 800124e:	0019      	movs	r1, r3
 8001250:	f001 fc83 	bl	8002b5a <HAL_GPIO_WritePin>
		}
		break;
 8001254:	e05d      	b.n	8001312 <UI_Handler+0x202>

	case ERROR:
		if(!flags.ui.error)
 8001256:	4b34      	ldr	r3, [pc, #208]	; (8001328 <UI_Handler+0x218>)
 8001258:	7c1b      	ldrb	r3, [r3, #16]
 800125a:	2204      	movs	r2, #4
 800125c:	4013      	ands	r3, r2
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	d102      	bne.n	800126a <UI_Handler+0x15a>
			UI_State = OFF;
 8001264:	4b31      	ldr	r3, [pc, #196]	; (800132c <UI_Handler+0x21c>)
 8001266:	2200      	movs	r2, #0
 8001268:	701a      	strb	r2, [r3, #0]
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))
 800126a:	4b31      	ldr	r3, [pc, #196]	; (8001330 <UI_Handler+0x220>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4b31      	ldr	r3, [pc, #196]	; (8001334 <UI_Handler+0x224>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2132      	movs	r1, #50	; 0x32
 8001276:	0018      	movs	r0, r3
 8001278:	f7fe ffde 	bl	8000238 <__aeabi_uidivmod>
 800127c:	1e0b      	subs	r3, r1, #0
 800127e:	d14a      	bne.n	8001316 <UI_Handler+0x206>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
#endif
			BACKLIGHT_RED_Toggle;
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	021a      	lsls	r2, r3, #8
 8001284:	2390      	movs	r3, #144	; 0x90
 8001286:	05db      	lsls	r3, r3, #23
 8001288:	0011      	movs	r1, r2
 800128a:	0018      	movs	r0, r3
 800128c:	f001 fc82 	bl	8002b94 <HAL_GPIO_TogglePin>
		}
		break;
 8001290:	e041      	b.n	8001316 <UI_Handler+0x206>

	case NOTICE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 35))
 8001292:	4b27      	ldr	r3, [pc, #156]	; (8001330 <UI_Handler+0x220>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4b27      	ldr	r3, [pc, #156]	; (8001334 <UI_Handler+0x224>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2123      	movs	r1, #35	; 0x23
 800129e:	0018      	movs	r0, r3
 80012a0:	f7fe ffca 	bl	8000238 <__aeabi_uidivmod>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
#endif
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 209)
 80012a4:	4b22      	ldr	r3, [pc, #136]	; (8001330 <UI_Handler+0x220>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b22      	ldr	r3, [pc, #136]	; (8001334 <UI_Handler+0x224>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2bd0      	cmp	r3, #208	; 0xd0
 80012b0:	d933      	bls.n	800131a <UI_Handler+0x20a>
			UI_State = OFF;
 80012b2:	4b1e      	ldr	r3, [pc, #120]	; (800132c <UI_Handler+0x21c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
		break;
 80012b8:	e02f      	b.n	800131a <UI_Handler+0x20a>

	case DONE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))
 80012ba:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <UI_Handler+0x220>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4b1d      	ldr	r3, [pc, #116]	; (8001334 <UI_Handler+0x224>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2132      	movs	r1, #50	; 0x32
 80012c6:	0018      	movs	r0, r3
 80012c8:	f7fe ffb6 	bl	8000238 <__aeabi_uidivmod>
 80012cc:	1e0b      	subs	r3, r1, #0
 80012ce:	d106      	bne.n	80012de <UI_Handler+0x1ce>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
#endif
			BACKLIGHT_GREEN_Toggle;
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	4a1a      	ldr	r2, [pc, #104]	; (8001340 <UI_Handler+0x230>)
 80012d6:	0019      	movs	r1, r3
 80012d8:	0010      	movs	r0, r2
 80012da:	f001 fc5b 	bl	8002b94 <HAL_GPIO_TogglePin>
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 299)
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <UI_Handler+0x220>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4b14      	ldr	r3, [pc, #80]	; (8001334 <UI_Handler+0x224>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	1ad2      	subs	r2, r2, r3
 80012e8:	2395      	movs	r3, #149	; 0x95
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d916      	bls.n	800131e <UI_Handler+0x20e>
			UI_State = OFF;
 80012f0:	4b0e      	ldr	r3, [pc, #56]	; (800132c <UI_Handler+0x21c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]
		break;
 80012f6:	e012      	b.n	800131e <UI_Handler+0x20e>

	default:	//Ošetřuje i UI_State == OFF
		BUZZER_OFF;
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	015b      	lsls	r3, r3, #5
 80012fc:	480f      	ldr	r0, [pc, #60]	; (800133c <UI_Handler+0x22c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	0019      	movs	r1, r3
 8001302:	f001 fc2a 	bl	8002b5a <HAL_GPIO_WritePin>
#ifndef __DEBUG_BUTT__
		setColour(BACKLIGHT_OFF);
 8001306:	2003      	movs	r0, #3
 8001308:	f7ff f886 	bl	8000418 <setColour>
#endif
		break;
 800130c:	e008      	b.n	8001320 <UI_Handler+0x210>
		break;
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	e006      	b.n	8001320 <UI_Handler+0x210>
		break;
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	e004      	b.n	8001320 <UI_Handler+0x210>
		break;
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	e002      	b.n	8001320 <UI_Handler+0x210>
		break;
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	e000      	b.n	8001320 <UI_Handler+0x210>
		break;
 800131e:	46c0      	nop			; (mov r8, r8)

	}
}
 8001320:	46c0      	nop			; (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	20000584 	.word	0x20000584
 800132c:	2000020e 	.word	0x2000020e
 8001330:	200001fc 	.word	0x200001fc
 8001334:	20000210 	.word	0x20000210
 8001338:	0800c3bc 	.word	0x0800c3bc
 800133c:	48000800 	.word	0x48000800
 8001340:	48000400 	.word	0x48000400

08001344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001348:	b672      	cpsid	i
}
 800134a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800134c:	e7fe      	b.n	800134c <Error_Handler+0x8>

0800134e <createBuffer>:

//_____Vytvoří buffer v dynamické paměti_____//
//Návratová hodnota - ukazatel na vytvořený buffer (NULL = chyba)
//Argument - velikost bufferu
RING_BUFFER* createBuffer(int size)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b084      	sub	sp, #16
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
	RING_BUFFER* buffer = (RING_BUFFER*) malloc(sizeof(RING_BUFFER));
 8001356:	2018      	movs	r0, #24
 8001358:	f00a fb92 	bl	800ba80 <malloc>
 800135c:	0003      	movs	r3, r0
 800135e:	60fb      	str	r3, [r7, #12]
	if(buffer == NULL)			//Nepodařilo se alokovat paměť
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <createBuffer+0x1c>
	{
		return NULL;
 8001366:	2300      	movs	r3, #0
 8001368:	e022      	b.n	80013b0 <createBuffer+0x62>
	}
	buffer->buffer = (char*) malloc(size * sizeof(char));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	0018      	movs	r0, r3
 800136e:	f00a fb87 	bl	800ba80 <malloc>
 8001372:	0003      	movs	r3, r0
 8001374:	001a      	movs	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	601a      	str	r2, [r3, #0]
	if(buffer->buffer == NULL)	//Nepodařilo se alokovat paměť
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d105      	bne.n	800138e <createBuffer+0x40>
	{
		free(buffer);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	0018      	movs	r0, r3
 8001386:	f00a fb85 	bl	800ba94 <free>
		return NULL;
 800138a:	2300      	movs	r3, #0
 800138c:	e010      	b.n	80013b0 <createBuffer+0x62>
	}

	buffer->bufferSize = size;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	605a      	str	r2, [r3, #4]
	buffer->filled = 0;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
	buffer->first = 0;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2200      	movs	r2, #0
 800139e:	60da      	str	r2, [r3, #12]
	buffer->last = size-1;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	1e5a      	subs	r2, r3, #1
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	611a      	str	r2, [r3, #16]
	buffer->status = BUFFER_EMPTY;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2201      	movs	r2, #1
 80013ac:	751a      	strb	r2, [r3, #20]

	return buffer;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	0018      	movs	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b004      	add	sp, #16
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <push>:
	return buffer->status;
}

//_____Uloží znak do bufferu_____//
BUFFER_STATE push(RING_BUFFER* buffer, char character)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	000a      	movs	r2, r1
 80013c2:	1cfb      	adds	r3, r7, #3
 80013c4:	701a      	strb	r2, [r3, #0]
	if(buffer->status == BUFFER_FULL)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7d1b      	ldrb	r3, [r3, #20]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d101      	bne.n	80013d2 <push+0x1a>
		return BUFFER_FULL;
 80013ce:	2302      	movs	r3, #2
 80013d0:	e025      	b.n	800141e <push+0x66>

	buffer->last = (buffer->last + 1) % (buffer->bufferSize);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	1c5a      	adds	r2, r3, #1
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	0019      	movs	r1, r3
 80013de:	0010      	movs	r0, r2
 80013e0:	f7ff f814 	bl	800040c <__aeabi_idivmod>
 80013e4:	000b      	movs	r3, r1
 80013e6:	001a      	movs	r2, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	611a      	str	r2, [r3, #16]
	buffer->filled++;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	1c5a      	adds	r2, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	609a      	str	r2, [r3, #8]
	buffer->buffer[buffer->last] = character;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	18d3      	adds	r3, r2, r3
 8001400:	1cfa      	adds	r2, r7, #3
 8001402:	7812      	ldrb	r2, [r2, #0]
 8001404:	701a      	strb	r2, [r3, #0]
	buffer->status = (buffer->filled >= buffer->bufferSize)? BUFFER_FULL : BUFFER_OK;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	429a      	cmp	r2, r3
 8001410:	db01      	blt.n	8001416 <push+0x5e>
 8001412:	2202      	movs	r2, #2
 8001414:	e000      	b.n	8001418 <push+0x60>
 8001416:	2200      	movs	r2, #0
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	0018      	movs	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	b002      	add	sp, #8
 8001424:	bd80      	pop	{r7, pc}

08001426 <pushStr>:

//_____Uloží řetězec do bufferu_____//
BUFFER_STATE pushStr(RING_BUFFER* buffer, char* str, int len)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	60f8      	str	r0, [r7, #12]
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
	if(buffer->bufferSize < (buffer->filled + len))
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	6899      	ldr	r1, [r3, #8]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	18cb      	adds	r3, r1, r3
 800143e:	429a      	cmp	r2, r3
 8001440:	da01      	bge.n	8001446 <pushStr+0x20>
		return BUFFER_FULL;
 8001442:	2302      	movs	r3, #2
 8001444:	e013      	b.n	800146e <pushStr+0x48>

	for(int i = 0; i < len; i++)
 8001446:	2300      	movs	r3, #0
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	e00b      	b.n	8001464 <pushStr+0x3e>
	{
		push(buffer, str[i]);
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	18d3      	adds	r3, r2, r3
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	0011      	movs	r1, r2
 8001458:	0018      	movs	r0, r3
 800145a:	f7ff ffad 	bl	80013b8 <push>
	for(int i = 0; i < len; i++)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbef      	blt.n	800144c <pushStr+0x26>
	}

	return BUFFER_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	0018      	movs	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	b006      	add	sp, #24
 8001474:	bd80      	pop	{r7, pc}

08001476 <pop>:

//_____Přečte a odstraní poslední znak z bufferu_____//
//Znak bude uložen na adresu v argumentu
BUFFER_STATE pop(RING_BUFFER* buffer, char* character)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
 800147e:	6039      	str	r1, [r7, #0]
	if(buffer->status == BUFFER_EMPTY)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7d1b      	ldrb	r3, [r3, #20]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d101      	bne.n	800148c <pop+0x16>
		return BUFFER_EMPTY;
 8001488:	2301      	movs	r3, #1
 800148a:	e023      	b.n	80014d4 <pop+0x5e>

	*character = buffer->buffer[buffer->first];
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	18d3      	adds	r3, r2, r3
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	701a      	strb	r2, [r3, #0]
	buffer->first = (buffer->first + 1) % (buffer->bufferSize);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	1c5a      	adds	r2, r3, #1
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	0019      	movs	r1, r3
 80014a8:	0010      	movs	r0, r2
 80014aa:	f7fe ffaf 	bl	800040c <__aeabi_idivmod>
 80014ae:	000b      	movs	r3, r1
 80014b0:	001a      	movs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	60da      	str	r2, [r3, #12]
	buffer->filled--;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	1e5a      	subs	r2, r3, #1
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	609a      	str	r2, [r3, #8]
	buffer->status = (buffer->filled <= 0)? BUFFER_EMPTY : BUFFER_OK;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	1e5a      	subs	r2, r3, #1
 80014c6:	4313      	orrs	r3, r2
 80014c8:	0fdb      	lsrs	r3, r3, #31
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	001a      	movs	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	751a      	strb	r2, [r3, #20]

	return BUFFER_OK;
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	0018      	movs	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	b002      	add	sp, #8
 80014da:	bd80      	pop	{r7, pc}

080014dc <sendData>:
	return regState;
}

//_____Pošle data z regValues do registrů_____//
REG_STATE sendData(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	if(HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <sendData+0x54>)
 80014e2:	6819      	ldr	r1, [r3, #0]
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <sendData+0x58>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	4813      	ldr	r0, [pc, #76]	; (8001538 <sendData+0x5c>)
 80014ec:	2364      	movs	r3, #100	; 0x64
 80014ee:	f004 f8b3 	bl	8005658 <HAL_SPI_Transmit>
 80014f2:	1e03      	subs	r3, r0, #0
 80014f4:	d114      	bne.n	8001520 <sendData+0x44>
	{
		//vytvoř pulz na RCLK¨
		REG_RCLK_HIGH;
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	01db      	lsls	r3, r3, #7
 80014fa:	4810      	ldr	r0, [pc, #64]	; (800153c <sendData+0x60>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	0019      	movs	r1, r3
 8001500:	f001 fb2b 	bl	8002b5a <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8001504:	2005      	movs	r0, #5
 8001506:	f000 fcbf 	bl	8001e88 <HAL_Delay>
		REG_RCLK_LOW;
 800150a:	2380      	movs	r3, #128	; 0x80
 800150c:	01db      	lsls	r3, r3, #7
 800150e:	480b      	ldr	r0, [pc, #44]	; (800153c <sendData+0x60>)
 8001510:	2200      	movs	r2, #0
 8001512:	0019      	movs	r1, r3
 8001514:	f001 fb21 	bl	8002b5a <HAL_GPIO_WritePin>

		regState = REG_OK;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <sendData+0x64>)
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
 800151e:	e002      	b.n	8001526 <sendData+0x4a>
	}
	else
	{
		regState = REG_ERR;
 8001520:	4b07      	ldr	r3, [pc, #28]	; (8001540 <sendData+0x64>)
 8001522:	2202      	movs	r2, #2
 8001524:	701a      	strb	r2, [r3, #0]
	}

	return regState;
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <sendData+0x64>)
 8001528:	781b      	ldrb	r3, [r3, #0]
}
 800152a:	0018      	movs	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000624 	.word	0x20000624
 8001534:	20000629 	.word	0x20000629
 8001538:	200004d8 	.word	0x200004d8
 800153c:	48000400 	.word	0x48000400
 8001540:	20000628 	.word	0x20000628

08001544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <HAL_MspInit+0x44>)
 800154c:	699a      	ldr	r2, [r3, #24]
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_MspInit+0x44>)
 8001550:	2101      	movs	r1, #1
 8001552:	430a      	orrs	r2, r1
 8001554:	619a      	str	r2, [r3, #24]
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <HAL_MspInit+0x44>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	2201      	movs	r2, #1
 800155c:	4013      	ands	r3, r2
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_MspInit+0x44>)
 8001564:	69da      	ldr	r2, [r3, #28]
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_MspInit+0x44>)
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	0549      	lsls	r1, r1, #21
 800156c:	430a      	orrs	r2, r1
 800156e:	61da      	str	r2, [r3, #28]
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_MspInit+0x44>)
 8001572:	69da      	ldr	r2, [r3, #28]
 8001574:	2380      	movs	r3, #128	; 0x80
 8001576:	055b      	lsls	r3, r3, #21
 8001578:	4013      	ands	r3, r2
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	46bd      	mov	sp, r7
 8001582:	b002      	add	sp, #8
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	40021000 	.word	0x40021000

0800158c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b08d      	sub	sp, #52	; 0x34
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	241c      	movs	r4, #28
 8001596:	193b      	adds	r3, r7, r4
 8001598:	0018      	movs	r0, r3
 800159a:	2314      	movs	r3, #20
 800159c:	001a      	movs	r2, r3
 800159e:	2100      	movs	r1, #0
 80015a0:	f00a fa82 	bl	800baa8 <memset>
  if(hadc->Instance==ADC1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a4a      	ldr	r2, [pc, #296]	; (80016d4 <HAL_ADC_MspInit+0x148>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d000      	beq.n	80015b0 <HAL_ADC_MspInit+0x24>
 80015ae:	e08d      	b.n	80016cc <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015b0:	4b49      	ldr	r3, [pc, #292]	; (80016d8 <HAL_ADC_MspInit+0x14c>)
 80015b2:	699a      	ldr	r2, [r3, #24]
 80015b4:	4b48      	ldr	r3, [pc, #288]	; (80016d8 <HAL_ADC_MspInit+0x14c>)
 80015b6:	2180      	movs	r1, #128	; 0x80
 80015b8:	0089      	lsls	r1, r1, #2
 80015ba:	430a      	orrs	r2, r1
 80015bc:	619a      	str	r2, [r3, #24]
 80015be:	4b46      	ldr	r3, [pc, #280]	; (80016d8 <HAL_ADC_MspInit+0x14c>)
 80015c0:	699a      	ldr	r2, [r3, #24]
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
 80015ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015cc:	4b42      	ldr	r3, [pc, #264]	; (80016d8 <HAL_ADC_MspInit+0x14c>)
 80015ce:	695a      	ldr	r2, [r3, #20]
 80015d0:	4b41      	ldr	r3, [pc, #260]	; (80016d8 <HAL_ADC_MspInit+0x14c>)
 80015d2:	2180      	movs	r1, #128	; 0x80
 80015d4:	0309      	lsls	r1, r1, #12
 80015d6:	430a      	orrs	r2, r1
 80015d8:	615a      	str	r2, [r3, #20]
 80015da:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <HAL_ADC_MspInit+0x14c>)
 80015dc:	695a      	ldr	r2, [r3, #20]
 80015de:	2380      	movs	r3, #128	; 0x80
 80015e0:	031b      	lsls	r3, r3, #12
 80015e2:	4013      	ands	r3, r2
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e8:	4b3b      	ldr	r3, [pc, #236]	; (80016d8 <HAL_ADC_MspInit+0x14c>)
 80015ea:	695a      	ldr	r2, [r3, #20]
 80015ec:	4b3a      	ldr	r3, [pc, #232]	; (80016d8 <HAL_ADC_MspInit+0x14c>)
 80015ee:	2180      	movs	r1, #128	; 0x80
 80015f0:	0289      	lsls	r1, r1, #10
 80015f2:	430a      	orrs	r2, r1
 80015f4:	615a      	str	r2, [r3, #20]
 80015f6:	4b38      	ldr	r3, [pc, #224]	; (80016d8 <HAL_ADC_MspInit+0x14c>)
 80015f8:	695a      	ldr	r2, [r3, #20]
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	029b      	lsls	r3, r3, #10
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001604:	4b34      	ldr	r3, [pc, #208]	; (80016d8 <HAL_ADC_MspInit+0x14c>)
 8001606:	695a      	ldr	r2, [r3, #20]
 8001608:	4b33      	ldr	r3, [pc, #204]	; (80016d8 <HAL_ADC_MspInit+0x14c>)
 800160a:	2180      	movs	r1, #128	; 0x80
 800160c:	02c9      	lsls	r1, r1, #11
 800160e:	430a      	orrs	r2, r1
 8001610:	615a      	str	r2, [r3, #20]
 8001612:	4b31      	ldr	r3, [pc, #196]	; (80016d8 <HAL_ADC_MspInit+0x14c>)
 8001614:	695a      	ldr	r2, [r3, #20]
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	02db      	lsls	r3, r3, #11
 800161a:	4013      	ands	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001620:	193b      	adds	r3, r7, r4
 8001622:	223f      	movs	r2, #63	; 0x3f
 8001624:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001626:	193b      	adds	r3, r7, r4
 8001628:	2203      	movs	r2, #3
 800162a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	193b      	adds	r3, r7, r4
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001632:	193b      	adds	r3, r7, r4
 8001634:	4a29      	ldr	r2, [pc, #164]	; (80016dc <HAL_ADC_MspInit+0x150>)
 8001636:	0019      	movs	r1, r3
 8001638:	0010      	movs	r0, r2
 800163a:	f001 f8f9 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800163e:	193b      	adds	r3, r7, r4
 8001640:	22ff      	movs	r2, #255	; 0xff
 8001642:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001644:	193b      	adds	r3, r7, r4
 8001646:	2203      	movs	r2, #3
 8001648:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	193b      	adds	r3, r7, r4
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	193a      	adds	r2, r7, r4
 8001652:	2390      	movs	r3, #144	; 0x90
 8001654:	05db      	lsls	r3, r3, #23
 8001656:	0011      	movs	r1, r2
 8001658:	0018      	movs	r0, r3
 800165a:	f001 f8e9 	bl	8002830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800165e:	193b      	adds	r3, r7, r4
 8001660:	2203      	movs	r2, #3
 8001662:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001664:	193b      	adds	r3, r7, r4
 8001666:	2203      	movs	r2, #3
 8001668:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	193b      	adds	r3, r7, r4
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001670:	193b      	adds	r3, r7, r4
 8001672:	4a1b      	ldr	r2, [pc, #108]	; (80016e0 <HAL_ADC_MspInit+0x154>)
 8001674:	0019      	movs	r1, r3
 8001676:	0010      	movs	r0, r2
 8001678:	f001 f8da 	bl	8002830 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 800167c:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <HAL_ADC_MspInit+0x158>)
 800167e:	4a1a      	ldr	r2, [pc, #104]	; (80016e8 <HAL_ADC_MspInit+0x15c>)
 8001680:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <HAL_ADC_MspInit+0x158>)
 8001684:	2200      	movs	r2, #0
 8001686:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <HAL_ADC_MspInit+0x158>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_ADC_MspInit+0x158>)
 8001690:	2280      	movs	r2, #128	; 0x80
 8001692:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001694:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <HAL_ADC_MspInit+0x158>)
 8001696:	2280      	movs	r2, #128	; 0x80
 8001698:	0052      	lsls	r2, r2, #1
 800169a:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <HAL_ADC_MspInit+0x158>)
 800169e:	2280      	movs	r2, #128	; 0x80
 80016a0:	00d2      	lsls	r2, r2, #3
 80016a2:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <HAL_ADC_MspInit+0x158>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <HAL_ADC_MspInit+0x158>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <HAL_ADC_MspInit+0x158>)
 80016b2:	0018      	movs	r0, r3
 80016b4:	f000 ff38 	bl	8002528 <HAL_DMA_Init>
 80016b8:	1e03      	subs	r3, r0, #0
 80016ba:	d001      	beq.n	80016c0 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80016bc:	f7ff fe42 	bl	8001344 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a08      	ldr	r2, [pc, #32]	; (80016e4 <HAL_ADC_MspInit+0x158>)
 80016c4:	631a      	str	r2, [r3, #48]	; 0x30
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <HAL_ADC_MspInit+0x158>)
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016cc:	46c0      	nop			; (mov r8, r8)
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b00d      	add	sp, #52	; 0x34
 80016d2:	bd90      	pop	{r4, r7, pc}
 80016d4:	40012400 	.word	0x40012400
 80016d8:	40021000 	.word	0x40021000
 80016dc:	48000800 	.word	0x48000800
 80016e0:	48000400 	.word	0x48000400
 80016e4:	200005a0 	.word	0x200005a0
 80016e8:	40020008 	.word	0x40020008

080016ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016ec:	b590      	push	{r4, r7, lr}
 80016ee:	b08b      	sub	sp, #44	; 0x2c
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	2414      	movs	r4, #20
 80016f6:	193b      	adds	r3, r7, r4
 80016f8:	0018      	movs	r0, r3
 80016fa:	2314      	movs	r3, #20
 80016fc:	001a      	movs	r2, r3
 80016fe:	2100      	movs	r1, #0
 8001700:	f00a f9d2 	bl	800baa8 <memset>
  if(hspi->Instance==SPI1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a1c      	ldr	r2, [pc, #112]	; (800177c <HAL_SPI_MspInit+0x90>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d131      	bne.n	8001772 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <HAL_SPI_MspInit+0x94>)
 8001710:	699a      	ldr	r2, [r3, #24]
 8001712:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <HAL_SPI_MspInit+0x94>)
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	0149      	lsls	r1, r1, #5
 8001718:	430a      	orrs	r2, r1
 800171a:	619a      	str	r2, [r3, #24]
 800171c:	4b18      	ldr	r3, [pc, #96]	; (8001780 <HAL_SPI_MspInit+0x94>)
 800171e:	699a      	ldr	r2, [r3, #24]
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	015b      	lsls	r3, r3, #5
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
 8001728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_SPI_MspInit+0x94>)
 800172c:	695a      	ldr	r2, [r3, #20]
 800172e:	4b14      	ldr	r3, [pc, #80]	; (8001780 <HAL_SPI_MspInit+0x94>)
 8001730:	2180      	movs	r1, #128	; 0x80
 8001732:	02c9      	lsls	r1, r1, #11
 8001734:	430a      	orrs	r2, r1
 8001736:	615a      	str	r2, [r3, #20]
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_SPI_MspInit+0x94>)
 800173a:	695a      	ldr	r2, [r3, #20]
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	02db      	lsls	r3, r3, #11
 8001740:	4013      	ands	r3, r2
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001746:	0021      	movs	r1, r4
 8001748:	187b      	adds	r3, r7, r1
 800174a:	2238      	movs	r2, #56	; 0x38
 800174c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	187b      	adds	r3, r7, r1
 8001750:	2202      	movs	r2, #2
 8001752:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	187b      	adds	r3, r7, r1
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800175a:	187b      	adds	r3, r7, r1
 800175c:	2203      	movs	r2, #3
 800175e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001760:	187b      	adds	r3, r7, r1
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001766:	187b      	adds	r3, r7, r1
 8001768:	4a06      	ldr	r2, [pc, #24]	; (8001784 <HAL_SPI_MspInit+0x98>)
 800176a:	0019      	movs	r1, r3
 800176c:	0010      	movs	r0, r2
 800176e:	f001 f85f 	bl	8002830 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	46bd      	mov	sp, r7
 8001776:	b00b      	add	sp, #44	; 0x2c
 8001778:	bd90      	pop	{r4, r7, pc}
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	40013000 	.word	0x40013000
 8001780:	40021000 	.word	0x40021000
 8001784:	48000400 	.word	0x48000400

08001788 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0e      	ldr	r2, [pc, #56]	; (80017d0 <HAL_TIM_Base_MspInit+0x48>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d115      	bne.n	80017c6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <HAL_TIM_Base_MspInit+0x4c>)
 800179c:	69da      	ldr	r2, [r3, #28]
 800179e:	4b0d      	ldr	r3, [pc, #52]	; (80017d4 <HAL_TIM_Base_MspInit+0x4c>)
 80017a0:	2180      	movs	r1, #128	; 0x80
 80017a2:	0049      	lsls	r1, r1, #1
 80017a4:	430a      	orrs	r2, r1
 80017a6:	61da      	str	r2, [r3, #28]
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_TIM_Base_MspInit+0x4c>)
 80017aa:	69da      	ldr	r2, [r3, #28]
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4013      	ands	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	2013      	movs	r0, #19
 80017bc:	f000 fe82 	bl	80024c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80017c0:	2013      	movs	r0, #19
 80017c2:	f000 fe94 	bl	80024ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b004      	add	sp, #16
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	40002000 	.word	0x40002000
 80017d4:	40021000 	.word	0x40021000

080017d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b08b      	sub	sp, #44	; 0x2c
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	2414      	movs	r4, #20
 80017e2:	193b      	adds	r3, r7, r4
 80017e4:	0018      	movs	r0, r3
 80017e6:	2314      	movs	r3, #20
 80017e8:	001a      	movs	r2, r3
 80017ea:	2100      	movs	r1, #0
 80017ec:	f00a f95c 	bl	800baa8 <memset>
  if(huart->Instance==USART3)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a20      	ldr	r2, [pc, #128]	; (8001878 <HAL_UART_MspInit+0xa0>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d13a      	bne.n	8001870 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <HAL_UART_MspInit+0xa4>)
 80017fc:	69da      	ldr	r2, [r3, #28]
 80017fe:	4b1f      	ldr	r3, [pc, #124]	; (800187c <HAL_UART_MspInit+0xa4>)
 8001800:	2180      	movs	r1, #128	; 0x80
 8001802:	02c9      	lsls	r1, r1, #11
 8001804:	430a      	orrs	r2, r1
 8001806:	61da      	str	r2, [r3, #28]
 8001808:	4b1c      	ldr	r3, [pc, #112]	; (800187c <HAL_UART_MspInit+0xa4>)
 800180a:	69da      	ldr	r2, [r3, #28]
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	02db      	lsls	r3, r3, #11
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001816:	4b19      	ldr	r3, [pc, #100]	; (800187c <HAL_UART_MspInit+0xa4>)
 8001818:	695a      	ldr	r2, [r3, #20]
 800181a:	4b18      	ldr	r3, [pc, #96]	; (800187c <HAL_UART_MspInit+0xa4>)
 800181c:	2180      	movs	r1, #128	; 0x80
 800181e:	0309      	lsls	r1, r1, #12
 8001820:	430a      	orrs	r2, r1
 8001822:	615a      	str	r2, [r3, #20]
 8001824:	4b15      	ldr	r3, [pc, #84]	; (800187c <HAL_UART_MspInit+0xa4>)
 8001826:	695a      	ldr	r2, [r3, #20]
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	031b      	lsls	r3, r3, #12
 800182c:	4013      	ands	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001832:	193b      	adds	r3, r7, r4
 8001834:	22c0      	movs	r2, #192	; 0xc0
 8001836:	0112      	lsls	r2, r2, #4
 8001838:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	0021      	movs	r1, r4
 800183c:	187b      	adds	r3, r7, r1
 800183e:	2202      	movs	r2, #2
 8001840:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	187b      	adds	r3, r7, r1
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001848:	187b      	adds	r3, r7, r1
 800184a:	2203      	movs	r2, #3
 800184c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 800184e:	187b      	adds	r3, r7, r1
 8001850:	2201      	movs	r2, #1
 8001852:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001854:	187b      	adds	r3, r7, r1
 8001856:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <HAL_UART_MspInit+0xa8>)
 8001858:	0019      	movs	r1, r3
 800185a:	0010      	movs	r0, r2
 800185c:	f000 ffe8 	bl	8002830 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	2100      	movs	r1, #0
 8001864:	201d      	movs	r0, #29
 8001866:	f000 fe2d 	bl	80024c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 800186a:	201d      	movs	r0, #29
 800186c:	f000 fe3f 	bl	80024ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001870:	46c0      	nop			; (mov r8, r8)
 8001872:	46bd      	mov	sp, r7
 8001874:	b00b      	add	sp, #44	; 0x2c
 8001876:	bd90      	pop	{r4, r7, pc}
 8001878:	40004800 	.word	0x40004800
 800187c:	40021000 	.word	0x40021000
 8001880:	48000800 	.word	0x48000800

08001884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <NMI_Handler+0x4>

0800188a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188e:	e7fe      	b.n	800188e <HardFault_Handler+0x4>

08001890 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001894:	46c0      	nop			; (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a8:	f000 fad2 	bl	8001e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ac:	46c0      	nop			; (mov r8, r8)
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	0018      	movs	r0, r3
 80018bc:	f001 f986 	bl	8002bcc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	0018      	movs	r0, r3
 80018c6:	f001 f981 	bl	8002bcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80018ca:	46c0      	nop			; (mov r8, r8)
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <DMA1_Channel1_IRQHandler+0x14>)
 80018d6:	0018      	movs	r0, r3
 80018d8:	f000 feeb 	bl	80026b2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018dc:	46c0      	nop			; (mov r8, r8)
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	200005a0 	.word	0x200005a0

080018e8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <TIM14_IRQHandler+0x14>)
 80018ee:	0018      	movs	r0, r3
 80018f0:	f004 fa7a 	bl	8005de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80018f4:	46c0      	nop			; (mov r8, r8)
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	2000053c 	.word	0x2000053c

08001900 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <USART3_4_IRQHandler+0x14>)
 8001906:	0018      	movs	r0, r3
 8001908:	f004 fedc 	bl	80066c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	20000450 	.word	0x20000450

08001918 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <USB_IRQHandler+0x14>)
 800191e:	0018      	movs	r0, r3
 8001920:	f001 faa6 	bl	8002e70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001924:	46c0      	nop			; (mov r8, r8)
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	200012d4 	.word	0x200012d4

08001930 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001938:	4a14      	ldr	r2, [pc, #80]	; (800198c <_sbrk+0x5c>)
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <_sbrk+0x60>)
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001944:	4b13      	ldr	r3, [pc, #76]	; (8001994 <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d102      	bne.n	8001952 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <_sbrk+0x64>)
 800194e:	4a12      	ldr	r2, [pc, #72]	; (8001998 <_sbrk+0x68>)
 8001950:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <_sbrk+0x64>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	18d3      	adds	r3, r2, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	429a      	cmp	r2, r3
 800195e:	d207      	bcs.n	8001970 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001960:	f00a f864 	bl	800ba2c <__errno>
 8001964:	0003      	movs	r3, r0
 8001966:	220c      	movs	r2, #12
 8001968:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800196a:	2301      	movs	r3, #1
 800196c:	425b      	negs	r3, r3
 800196e:	e009      	b.n	8001984 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <_sbrk+0x64>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001976:	4b07      	ldr	r3, [pc, #28]	; (8001994 <_sbrk+0x64>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	18d2      	adds	r2, r2, r3
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <_sbrk+0x64>)
 8001980:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001982:	68fb      	ldr	r3, [r7, #12]
}
 8001984:	0018      	movs	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	b006      	add	sp, #24
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20004000 	.word	0x20004000
 8001990:	00000400 	.word	0x00000400
 8001994:	20000214 	.word	0x20000214
 8001998:	200015d8 	.word	0x200015d8

0800199c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80019a0:	46c0      	nop			; (mov r8, r8)
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <testHandler>:
	return testPhase;
}

//_____Funkce pro řízení testu_____//
void testHandler()
{
 80019a8:	b5b0      	push	{r4, r5, r7, lr}
 80019aa:	b08a      	sub	sp, #40	; 0x28
 80019ac:	af02      	add	r7, sp, #8
	flags.testProgress = 0;
 80019ae:	4bc6      	ldr	r3, [pc, #792]	; (8001cc8 <testHandler+0x320>)
 80019b0:	7e1a      	ldrb	r2, [r3, #24]
 80019b2:	2102      	movs	r1, #2
 80019b4:	438a      	bics	r2, r1
 80019b6:	761a      	strb	r2, [r3, #24]

	if(flags.instructions.startRequest)
 80019b8:	4bc3      	ldr	r3, [pc, #780]	; (8001cc8 <testHandler+0x320>)
 80019ba:	7b1b      	ldrb	r3, [r3, #12]
 80019bc:	2201      	movs	r2, #1
 80019be:	4013      	ands	r3, r2
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00b      	beq.n	80019de <testHandler+0x36>
	{
		if(testPhase == WAITING)
 80019c6:	4bc1      	ldr	r3, [pc, #772]	; (8001ccc <testHandler+0x324>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d102      	bne.n	80019d4 <testHandler+0x2c>
		{
			startTest();
 80019ce:	f000 f989 	bl	8001ce4 <startTest>
 80019d2:	e004      	b.n	80019de <testHandler+0x36>
		}
		else
		{
			flags.startConflict = 1;
 80019d4:	4bbc      	ldr	r3, [pc, #752]	; (8001cc8 <testHandler+0x320>)
 80019d6:	7e1a      	ldrb	r2, [r3, #24]
 80019d8:	2101      	movs	r1, #1
 80019da:	430a      	orrs	r2, r1
 80019dc:	761a      	strb	r2, [r3, #24]
		}
	}
	if(flags.instructions.stopRequest)
 80019de:	4bba      	ldr	r3, [pc, #744]	; (8001cc8 <testHandler+0x320>)
 80019e0:	7b1b      	ldrb	r3, [r3, #12]
 80019e2:	2202      	movs	r2, #2
 80019e4:	4013      	ands	r3, r2
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <testHandler+0x48>
	{
		stopTest();
 80019ec:	f000 f99a 	bl	8001d24 <stopTest>
	}

	switch(testPhase)
 80019f0:	4bb6      	ldr	r3, [pc, #728]	; (8001ccc <testHandler+0x324>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b06      	cmp	r3, #6
 80019f6:	d900      	bls.n	80019fa <testHandler+0x52>
 80019f8:	e162      	b.n	8001cc0 <testHandler+0x318>
 80019fa:	009a      	lsls	r2, r3, #2
 80019fc:	4bb4      	ldr	r3, [pc, #720]	; (8001cd0 <testHandler+0x328>)
 80019fe:	18d3      	adds	r3, r2, r3
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	469f      	mov	pc, r3
	{
	case WAITING:
		flags.testProgress = 0;
 8001a04:	4bb0      	ldr	r3, [pc, #704]	; (8001cc8 <testHandler+0x320>)
 8001a06:	7e1a      	ldrb	r2, [r3, #24]
 8001a08:	2102      	movs	r1, #2
 8001a0a:	438a      	bics	r2, r1
 8001a0c:	761a      	strb	r2, [r3, #24]
		flags.meas.measRequest = 0;
 8001a0e:	4bae      	ldr	r3, [pc, #696]	; (8001cc8 <testHandler+0x320>)
 8001a10:	7d1a      	ldrb	r2, [r3, #20]
 8001a12:	2101      	movs	r1, #1
 8001a14:	438a      	bics	r2, r1
 8001a16:	751a      	strb	r2, [r3, #20]
		break;
 8001a18:	e152      	b.n	8001cc0 <testHandler+0x318>
	case START:

		//___Pokud je dokončeno měření napětí naprázdno...____//
		if(flags.meas.measComplete)
 8001a1a:	4bab      	ldr	r3, [pc, #684]	; (8001cc8 <testHandler+0x320>)
 8001a1c:	7d1b      	ldrb	r3, [r3, #20]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	4013      	ands	r3, r2
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d100      	bne.n	8001a2a <testHandler+0x82>
 8001a28:	e141      	b.n	8001cae <testHandler+0x306>
		{
			testPhase++;
 8001a2a:	4ba8      	ldr	r3, [pc, #672]	; (8001ccc <testHandler+0x324>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4ba6      	ldr	r3, [pc, #664]	; (8001ccc <testHandler+0x324>)
 8001a34:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001a36:	e13a      	b.n	8001cae <testHandler+0x306>
	case START_DONE:
		//___Připojení zátěže___//
		LOAD_MIN_ON;
 8001a38:	4ba6      	ldr	r3, [pc, #664]	; (8001cd4 <testHandler+0x32c>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	2180      	movs	r1, #128	; 0x80
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f001 f88b 	bl	8002b5a <HAL_GPIO_WritePin>
		LOAD_MAX_ON;
 8001a44:	4ba3      	ldr	r3, [pc, #652]	; (8001cd4 <testHandler+0x32c>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	2140      	movs	r1, #64	; 0x40
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f001 f885 	bl	8002b5a <HAL_GPIO_WritePin>

		testPhase++;
 8001a50:	4b9e      	ldr	r3, [pc, #632]	; (8001ccc <testHandler+0x324>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	3301      	adds	r3, #1
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	4b9c      	ldr	r3, [pc, #624]	; (8001ccc <testHandler+0x324>)
 8001a5a:	701a      	strb	r2, [r3, #0]
		flags.testProgress = 1;
 8001a5c:	4b9a      	ldr	r3, [pc, #616]	; (8001cc8 <testHandler+0x320>)
 8001a5e:	7e1a      	ldrb	r2, [r3, #24]
 8001a60:	2102      	movs	r1, #2
 8001a62:	430a      	orrs	r2, r1
 8001a64:	761a      	strb	r2, [r3, #24]
		flags.ui.shortBeep = 1;
 8001a66:	4b98      	ldr	r3, [pc, #608]	; (8001cc8 <testHandler+0x320>)
 8001a68:	7c1a      	ldrb	r2, [r3, #16]
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	741a      	strb	r2, [r3, #16]

		//___Nulování času___//
		for(int i = 1; i < 4; i++)
 8001a70:	2301      	movs	r3, #1
 8001a72:	61fb      	str	r3, [r7, #28]
 8001a74:	e007      	b.n	8001a86 <testHandler+0xde>
		{
			sysTime[i] = 0;
 8001a76:	4b98      	ldr	r3, [pc, #608]	; (8001cd8 <testHandler+0x330>)
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	0092      	lsls	r2, r2, #2
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	50d1      	str	r1, [r2, r3]
		for(int i = 1; i < 4; i++)
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	3301      	adds	r3, #1
 8001a84:	61fb      	str	r3, [r7, #28]
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	ddf4      	ble.n	8001a76 <testHandler+0xce>
		}
		break;
 8001a8c:	e118      	b.n	8001cc0 <testHandler+0x318>
	case MAIN_TEST:
		if(flags.time.sec)	//___Změna času___//
 8001a8e:	4b8e      	ldr	r3, [pc, #568]	; (8001cc8 <testHandler+0x320>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2202      	movs	r2, #2
 8001a94:	4013      	ands	r3, r2
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d024      	beq.n	8001ae6 <testHandler+0x13e>
		{
			char time[9] = {0};
 8001a9c:	250c      	movs	r5, #12
 8001a9e:	197b      	adds	r3, r7, r5
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	2205      	movs	r2, #5
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f009 fffc 	bl	800baa8 <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 8001ab0:	4b89      	ldr	r3, [pc, #548]	; (8001cd8 <testHandler+0x330>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	223c      	movs	r2, #60	; 0x3c
 8001ab6:	1ad2      	subs	r2, r2, r3
 8001ab8:	4b87      	ldr	r3, [pc, #540]	; (8001cd8 <testHandler+0x330>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	213c      	movs	r1, #60	; 0x3c
 8001abe:	1acc      	subs	r4, r1, r3
 8001ac0:	4b85      	ldr	r3, [pc, #532]	; (8001cd8 <testHandler+0x330>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	2103      	movs	r1, #3
 8001ac6:	1acb      	subs	r3, r1, r3
 8001ac8:	4984      	ldr	r1, [pc, #528]	; (8001cdc <testHandler+0x334>)
 8001aca:	1978      	adds	r0, r7, r5
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	0023      	movs	r3, r4
 8001ad0:	f00a f8ac 	bl	800bc2c <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED2);	//blikání druhé progress led
 8001ad4:	4b82      	ldr	r3, [pc, #520]	; (8001ce0 <testHandler+0x338>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	781a      	ldrb	r2, [r3, #0]
 8001ada:	4b81      	ldr	r3, [pc, #516]	; (8001ce0 <testHandler+0x338>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2110      	movs	r1, #16
 8001ae0:	404a      	eors	r2, r1
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	701a      	strb	r2, [r3, #0]
			//sendData();
		}
		if(!(sysTime[SYSTIME_MIN] % 10) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých deset minut___//
 8001ae6:	4b7c      	ldr	r3, [pc, #496]	; (8001cd8 <testHandler+0x330>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	210a      	movs	r1, #10
 8001aec:	0018      	movs	r0, r3
 8001aee:	f7fe fc8d 	bl	800040c <__aeabi_idivmod>
 8001af2:	1e0b      	subs	r3, r1, #0
 8001af4:	d10f      	bne.n	8001b16 <testHandler+0x16e>
 8001af6:	4b78      	ldr	r3, [pc, #480]	; (8001cd8 <testHandler+0x330>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00b      	beq.n	8001b16 <testHandler+0x16e>
 8001afe:	4b72      	ldr	r3, [pc, #456]	; (8001cc8 <testHandler+0x320>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2204      	movs	r2, #4
 8001b04:	4013      	ands	r3, r2
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d004      	beq.n	8001b16 <testHandler+0x16e>
		{
			flags.meas.measRequest = 1;
 8001b0c:	4b6e      	ldr	r3, [pc, #440]	; (8001cc8 <testHandler+0x320>)
 8001b0e:	7d1a      	ldrb	r2, [r3, #20]
 8001b10:	2101      	movs	r1, #1
 8001b12:	430a      	orrs	r2, r1
 8001b14:	751a      	strb	r2, [r3, #20]
		}
		if(sysTime[SYSTIME_HOUR] >= 3)	//___Po třech hodinách je měření u konce___//
 8001b16:	4b70      	ldr	r3, [pc, #448]	; (8001cd8 <testHandler+0x330>)
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	dc00      	bgt.n	8001b20 <testHandler+0x178>
 8001b1e:	e0c8      	b.n	8001cb2 <testHandler+0x30a>
		{
			testPhase++;
 8001b20:	4b6a      	ldr	r3, [pc, #424]	; (8001ccc <testHandler+0x324>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	3301      	adds	r3, #1
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	4b68      	ldr	r3, [pc, #416]	; (8001ccc <testHandler+0x324>)
 8001b2a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001b2c:	e0c1      	b.n	8001cb2 <testHandler+0x30a>
	case MAIN_TEST_DONE:
		if(flags.meas.measComplete)
 8001b2e:	4b66      	ldr	r3, [pc, #408]	; (8001cc8 <testHandler+0x320>)
 8001b30:	7d1b      	ldrb	r3, [r3, #20]
 8001b32:	2202      	movs	r2, #2
 8001b34:	4013      	ands	r3, r2
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d100      	bne.n	8001b3e <testHandler+0x196>
 8001b3c:	e0bb      	b.n	8001cb6 <testHandler+0x30e>
		{
			flags.ui.notice = 1;
 8001b3e:	4b62      	ldr	r3, [pc, #392]	; (8001cc8 <testHandler+0x320>)
 8001b40:	7c1a      	ldrb	r2, [r3, #16]
 8001b42:	2108      	movs	r1, #8
 8001b44:	430a      	orrs	r2, r1
 8001b46:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8001b48:	4b5f      	ldr	r3, [pc, #380]	; (8001cc8 <testHandler+0x320>)
 8001b4a:	7e1a      	ldrb	r2, [r3, #24]
 8001b4c:	2102      	movs	r1, #2
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	761a      	strb	r2, [r3, #24]

			testPhase++;
 8001b52:	4b5e      	ldr	r3, [pc, #376]	; (8001ccc <testHandler+0x324>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	3301      	adds	r3, #1
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	4b5c      	ldr	r3, [pc, #368]	; (8001ccc <testHandler+0x324>)
 8001b5c:	701a      	strb	r2, [r3, #0]

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED2);
 8001b5e:	4b60      	ldr	r3, [pc, #384]	; (8001ce0 <testHandler+0x338>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	781a      	ldrb	r2, [r3, #0]
 8001b64:	4b5e      	ldr	r3, [pc, #376]	; (8001ce0 <testHandler+0x338>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2110      	movs	r1, #16
 8001b6a:	438a      	bics	r2, r1
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	701a      	strb	r2, [r3, #0]
			PWR_OFF(*sourceInTesting);
 8001b70:	4b5b      	ldr	r3, [pc, #364]	; (8001ce0 <testHandler+0x338>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	781a      	ldrb	r2, [r3, #0]
 8001b76:	4b5a      	ldr	r3, [pc, #360]	; (8001ce0 <testHandler+0x338>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	701a      	strb	r2, [r3, #0]
			sendData();
 8001b82:	f7ff fcab 	bl	80014dc <sendData>

			//___Nulování času___//
			for(int i = 1; i < 4; i++)
 8001b86:	2301      	movs	r3, #1
 8001b88:	61bb      	str	r3, [r7, #24]
 8001b8a:	e007      	b.n	8001b9c <testHandler+0x1f4>
			{
				sysTime[i] = 0;
 8001b8c:	4b52      	ldr	r3, [pc, #328]	; (8001cd8 <testHandler+0x330>)
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	0092      	lsls	r2, r2, #2
 8001b92:	2100      	movs	r1, #0
 8001b94:	50d1      	str	r1, [r2, r3]
			for(int i = 1; i < 4; i++)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	61bb      	str	r3, [r7, #24]
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	ddf4      	ble.n	8001b8c <testHandler+0x1e4>
			}
		}
		break;
 8001ba2:	e088      	b.n	8001cb6 <testHandler+0x30e>
	case BATTERY_TEST:
		if(flags.time.sec)	//___Změna času___//
 8001ba4:	4b48      	ldr	r3, [pc, #288]	; (8001cc8 <testHandler+0x320>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2202      	movs	r2, #2
 8001baa:	4013      	ands	r3, r2
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d025      	beq.n	8001bfe <testHandler+0x256>
		{
			char time[9] = {0};
 8001bb2:	003b      	movs	r3, r7
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	2205      	movs	r2, #5
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f009 ff72 	bl	800baa8 <memset>
			sprintf(time, "%d:%d:%d", 60-sysTime[SYSTIME_SEC], 60-sysTime[SYSTIME_MIN], 3-sysTime[SYSTIME_HOUR]);
 8001bc4:	4b44      	ldr	r3, [pc, #272]	; (8001cd8 <testHandler+0x330>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	223c      	movs	r2, #60	; 0x3c
 8001bca:	1ad2      	subs	r2, r2, r3
 8001bcc:	4b42      	ldr	r3, [pc, #264]	; (8001cd8 <testHandler+0x330>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	213c      	movs	r1, #60	; 0x3c
 8001bd2:	1acc      	subs	r4, r1, r3
 8001bd4:	4b40      	ldr	r3, [pc, #256]	; (8001cd8 <testHandler+0x330>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2103      	movs	r1, #3
 8001bda:	1acb      	subs	r3, r1, r3
 8001bdc:	493f      	ldr	r1, [pc, #252]	; (8001cdc <testHandler+0x334>)
 8001bde:	0038      	movs	r0, r7
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	0023      	movs	r3, r4
 8001be4:	f00a f822 	bl	800bc2c <siprintf>
			//writeRow(time, strlen(time), 0, LEFT);

			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED3);	//blikání třetí progress led
 8001be8:	4b3d      	ldr	r3, [pc, #244]	; (8001ce0 <testHandler+0x338>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	4b3c      	ldr	r3, [pc, #240]	; (8001ce0 <testHandler+0x338>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2108      	movs	r1, #8
 8001bf4:	404a      	eors	r2, r1
 8001bf6:	b2d2      	uxtb	r2, r2
 8001bf8:	701a      	strb	r2, [r3, #0]
			sendData();
 8001bfa:	f7ff fc6f 	bl	80014dc <sendData>
		}
		if(!(sysTime[SYSTIME_MIN] % 5) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých pět minut___//
 8001bfe:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <testHandler+0x330>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2105      	movs	r1, #5
 8001c04:	0018      	movs	r0, r3
 8001c06:	f7fe fc01 	bl	800040c <__aeabi_idivmod>
 8001c0a:	1e0b      	subs	r3, r1, #0
 8001c0c:	d10f      	bne.n	8001c2e <testHandler+0x286>
 8001c0e:	4b32      	ldr	r3, [pc, #200]	; (8001cd8 <testHandler+0x330>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00b      	beq.n	8001c2e <testHandler+0x286>
 8001c16:	4b2c      	ldr	r3, [pc, #176]	; (8001cc8 <testHandler+0x320>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d004      	beq.n	8001c2e <testHandler+0x286>
		{
			flags.meas.measRequest = 1;
 8001c24:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <testHandler+0x320>)
 8001c26:	7d1a      	ldrb	r2, [r3, #20]
 8001c28:	2101      	movs	r1, #1
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	751a      	strb	r2, [r3, #20]
		}
		if(sysTime[SYSTIME_MIN] >= 15)	//___Po třech hodinách je měření u konce___//
 8001c2e:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <testHandler+0x330>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b0e      	cmp	r3, #14
 8001c34:	dd41      	ble.n	8001cba <testHandler+0x312>
		{
			testPhase++;
 8001c36:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <testHandler+0x324>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <testHandler+0x324>)
 8001c40:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001c42:	e03a      	b.n	8001cba <testHandler+0x312>
	case BATTERY_TEST_DONE:
		if(flags.meas.measComplete)
 8001c44:	4b20      	ldr	r3, [pc, #128]	; (8001cc8 <testHandler+0x320>)
 8001c46:	7d1b      	ldrb	r3, [r3, #20]
 8001c48:	2202      	movs	r2, #2
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d035      	beq.n	8001cbe <testHandler+0x316>
		{
			flags.ui.done = 1;
 8001c52:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <testHandler+0x320>)
 8001c54:	7c1a      	ldrb	r2, [r3, #16]
 8001c56:	2110      	movs	r1, #16
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 8001c5c:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <testHandler+0x320>)
 8001c5e:	7e1a      	ldrb	r2, [r3, #24]
 8001c60:	2102      	movs	r1, #2
 8001c62:	430a      	orrs	r2, r1
 8001c64:	761a      	strb	r2, [r3, #24]

			//poslat data shift registrům
			//Zobrazit text na displej

			LOAD_MIN_OFF;
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <testHandler+0x32c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2180      	movs	r1, #128	; 0x80
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f000 ff74 	bl	8002b5a <HAL_GPIO_WritePin>
			LOAD_MAX_OFF;
 8001c72:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <testHandler+0x32c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	2140      	movs	r1, #64	; 0x40
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f000 ff6e 	bl	8002b5a <HAL_GPIO_WritePin>

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED3);
 8001c7e:	4b18      	ldr	r3, [pc, #96]	; (8001ce0 <testHandler+0x338>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	781a      	ldrb	r2, [r3, #0]
 8001c84:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <testHandler+0x338>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2108      	movs	r1, #8
 8001c8a:	438a      	bics	r2, r1
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	701a      	strb	r2, [r3, #0]
			PWR_ON(*sourceInTesting);
 8001c90:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <testHandler+0x338>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	781a      	ldrb	r2, [r3, #0]
 8001c96:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <testHandler+0x338>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	438a      	bics	r2, r1
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]
			sendData();
 8001ca2:	f7ff fc1b 	bl	80014dc <sendData>

			testPhase = WAITING;
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <testHandler+0x324>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001cac:	e007      	b.n	8001cbe <testHandler+0x316>
		break;
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	e006      	b.n	8001cc0 <testHandler+0x318>
		break;
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	e004      	b.n	8001cc0 <testHandler+0x318>
		break;
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	e002      	b.n	8001cc0 <testHandler+0x318>
		break;
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	e000      	b.n	8001cc0 <testHandler+0x318>
		break;
 8001cbe:	46c0      	nop			; (mov r8, r8)

	}
}
 8001cc0:	46c0      	nop			; (mov r8, r8)
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b008      	add	sp, #32
 8001cc6:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc8:	20000584 	.word	0x20000584
 8001ccc:	20000218 	.word	0x20000218
 8001cd0:	0800c3ec 	.word	0x0800c3ec
 8001cd4:	48000800 	.word	0x48000800
 8001cd8:	200001fc 	.word	0x200001fc
 8001cdc:	0800c348 	.word	0x0800c348
 8001ce0:	20000634 	.word	0x20000634

08001ce4 <startTest>:

//_____Funkce pro zahájení testu_____//
static void startTest(/*ukazatel na zdroj*/)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
	flags.ui.shortBeep = 1;
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <startTest+0x38>)
 8001cea:	7c1a      	ldrb	r2, [r3, #16]
 8001cec:	2101      	movs	r1, #1
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	741a      	strb	r2, [r3, #16]
	testPhase = START;
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <startTest+0x3c>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	701a      	strb	r2, [r3, #0]
	flags.testProgress = 1;
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <startTest+0x38>)
 8001cfa:	7e1a      	ldrb	r2, [r3, #24]
 8001cfc:	2102      	movs	r1, #2
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	761a      	strb	r2, [r3, #24]
	 * RELAY_ON(*sourceInTesting);	//připojit relé
	 *
	 * sendData();	//poslat konfiguraci shift registrům
	 */
	//Zobrazit text na displej
	flags.meas.measRequest = 1;	//spustit měření
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <startTest+0x38>)
 8001d04:	7d1a      	ldrb	r2, [r3, #20]
 8001d06:	2101      	movs	r1, #1
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	751a      	strb	r2, [r3, #20]

	flags.instructions.startRequest = 0;
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <startTest+0x38>)
 8001d0e:	7b1a      	ldrb	r2, [r3, #12]
 8001d10:	2101      	movs	r1, #1
 8001d12:	438a      	bics	r2, r1
 8001d14:	731a      	strb	r2, [r3, #12]
}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000584 	.word	0x20000584
 8001d20:	20000218 	.word	0x20000218

08001d24 <stopTest>:

//_____Funkce pro ukončení testu_____//
static void stopTest()
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
	flags.ui.longBeep = 1;
 8001d28:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <stopTest+0x3c>)
 8001d2a:	7c1a      	ldrb	r2, [r3, #16]
 8001d2c:	2102      	movs	r1, #2
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	741a      	strb	r2, [r3, #16]
	testPhase = WAITING;
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <stopTest+0x40>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]

	//Poslat data shift registrům
	//Zobrazit text na displej
	LOAD_MIN_OFF;
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <stopTest+0x44>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2180      	movs	r1, #128	; 0x80
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f000 ff0b 	bl	8002b5a <HAL_GPIO_WritePin>
	LOAD_MAX_OFF;
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <stopTest+0x44>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	2140      	movs	r1, #64	; 0x40
 8001d4a:	0018      	movs	r0, r3
 8001d4c:	f000 ff05 	bl	8002b5a <HAL_GPIO_WritePin>

	flags.instructions.stopRequest = 0;
 8001d50:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <stopTest+0x3c>)
 8001d52:	7b1a      	ldrb	r2, [r3, #12]
 8001d54:	2102      	movs	r1, #2
 8001d56:	438a      	bics	r2, r1
 8001d58:	731a      	strb	r2, [r3, #12]
}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000584 	.word	0x20000584
 8001d64:	20000218 	.word	0x20000218
 8001d68:	48000800 	.word	0x48000800

08001d6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d6c:	480d      	ldr	r0, [pc, #52]	; (8001da4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d70:	480d      	ldr	r0, [pc, #52]	; (8001da8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d72:	490e      	ldr	r1, [pc, #56]	; (8001dac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d74:	4a0e      	ldr	r2, [pc, #56]	; (8001db0 <LoopForever+0xe>)
  movs r3, #0
 8001d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d78:	e002      	b.n	8001d80 <LoopCopyDataInit>

08001d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7e:	3304      	adds	r3, #4

08001d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d84:	d3f9      	bcc.n	8001d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d86:	4a0b      	ldr	r2, [pc, #44]	; (8001db4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d88:	4c0b      	ldr	r4, [pc, #44]	; (8001db8 <LoopForever+0x16>)
  movs r3, #0
 8001d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d8c:	e001      	b.n	8001d92 <LoopFillZerobss>

08001d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d90:	3204      	adds	r2, #4

08001d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d94:	d3fb      	bcc.n	8001d8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d96:	f7ff fe01 	bl	800199c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001d9a:	f009 fe4d 	bl	800ba38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d9e:	f7fe fbe5 	bl	800056c <main>

08001da2 <LoopForever>:

LoopForever:
    b LoopForever
 8001da2:	e7fe      	b.n	8001da2 <LoopForever>
  ldr   r0, =_estack
 8001da4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dac:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001db0:	0800c534 	.word	0x0800c534
  ldr r2, =_sbss
 8001db4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001db8:	200015d8 	.word	0x200015d8

08001dbc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dbc:	e7fe      	b.n	8001dbc <ADC1_COMP_IRQHandler>
	...

08001dc0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc4:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <HAL_Init+0x24>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_Init+0x24>)
 8001dca:	2110      	movs	r1, #16
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001dd0:	2003      	movs	r0, #3
 8001dd2:	f000 f809 	bl	8001de8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd6:	f7ff fbb5 	bl	8001544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	0018      	movs	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	40022000 	.word	0x40022000

08001de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df0:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <HAL_InitTick+0x5c>)
 8001df2:	681c      	ldr	r4, [r3, #0]
 8001df4:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <HAL_InitTick+0x60>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	0019      	movs	r1, r3
 8001dfa:	23fa      	movs	r3, #250	; 0xfa
 8001dfc:	0098      	lsls	r0, r3, #2
 8001dfe:	f7fe f995 	bl	800012c <__udivsi3>
 8001e02:	0003      	movs	r3, r0
 8001e04:	0019      	movs	r1, r3
 8001e06:	0020      	movs	r0, r4
 8001e08:	f7fe f990 	bl	800012c <__udivsi3>
 8001e0c:	0003      	movs	r3, r0
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f000 fb7d 	bl	800250e <HAL_SYSTICK_Config>
 8001e14:	1e03      	subs	r3, r0, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e00f      	b.n	8001e3c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	d80b      	bhi.n	8001e3a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	2301      	movs	r3, #1
 8001e26:	425b      	negs	r3, r3
 8001e28:	2200      	movs	r2, #0
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f000 fb4a 	bl	80024c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_InitTick+0x64>)
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	e000      	b.n	8001e3c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
}
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b003      	add	sp, #12
 8001e42:	bd90      	pop	{r4, r7, pc}
 8001e44:	20000000 	.word	0x20000000
 8001e48:	20000008 	.word	0x20000008
 8001e4c:	20000004 	.word	0x20000004

08001e50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_IncTick+0x1c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	001a      	movs	r2, r3
 8001e5a:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_IncTick+0x20>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	18d2      	adds	r2, r2, r3
 8001e60:	4b03      	ldr	r3, [pc, #12]	; (8001e70 <HAL_IncTick+0x20>)
 8001e62:	601a      	str	r2, [r3, #0]
}
 8001e64:	46c0      	nop			; (mov r8, r8)
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	20000008 	.word	0x20000008
 8001e70:	20000638 	.word	0x20000638

08001e74 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  return uwTick;
 8001e78:	4b02      	ldr	r3, [pc, #8]	; (8001e84 <HAL_GetTick+0x10>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
}
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	20000638 	.word	0x20000638

08001e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e90:	f7ff fff0 	bl	8001e74 <HAL_GetTick>
 8001e94:	0003      	movs	r3, r0
 8001e96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	d005      	beq.n	8001eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_Delay+0x44>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	001a      	movs	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	189b      	adds	r3, r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001eae:	46c0      	nop			; (mov r8, r8)
 8001eb0:	f7ff ffe0 	bl	8001e74 <HAL_GetTick>
 8001eb4:	0002      	movs	r2, r0
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d8f7      	bhi.n	8001eb0 <HAL_Delay+0x28>
  {
  }
}
 8001ec0:	46c0      	nop			; (mov r8, r8)
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b004      	add	sp, #16
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	20000008 	.word	0x20000008

08001ed0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed8:	230f      	movs	r3, #15
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e125      	b.n	800213a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10a      	bne.n	8001f0c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2234      	movs	r2, #52	; 0x34
 8001f00:	2100      	movs	r1, #0
 8001f02:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	0018      	movs	r0, r3
 8001f08:	f7ff fb40 	bl	800158c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f10:	2210      	movs	r2, #16
 8001f12:	4013      	ands	r3, r2
 8001f14:	d000      	beq.n	8001f18 <HAL_ADC_Init+0x48>
 8001f16:	e103      	b.n	8002120 <HAL_ADC_Init+0x250>
 8001f18:	230f      	movs	r3, #15
 8001f1a:	18fb      	adds	r3, r7, r3
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d000      	beq.n	8001f24 <HAL_ADC_Init+0x54>
 8001f22:	e0fd      	b.n	8002120 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001f2e:	d000      	beq.n	8001f32 <HAL_ADC_Init+0x62>
 8001f30:	e0f6      	b.n	8002120 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f36:	4a83      	ldr	r2, [pc, #524]	; (8002144 <HAL_ADC_Init+0x274>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2203      	movs	r2, #3
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d112      	bne.n	8001f76 <HAL_ADC_Init+0xa6>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2201      	movs	r2, #1
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d009      	beq.n	8001f72 <HAL_ADC_Init+0xa2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	2380      	movs	r3, #128	; 0x80
 8001f66:	021b      	lsls	r3, r3, #8
 8001f68:	401a      	ands	r2, r3
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d101      	bne.n	8001f76 <HAL_ADC_Init+0xa6>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <HAL_ADC_Init+0xa8>
 8001f76:	2300      	movs	r3, #0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d116      	bne.n	8001faa <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2218      	movs	r2, #24
 8001f84:	4393      	bics	r3, r2
 8001f86:	0019      	movs	r1, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	0899      	lsrs	r1, r3, #2
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4964      	ldr	r1, [pc, #400]	; (8002148 <HAL_ADC_Init+0x278>)
 8001fb6:	400a      	ands	r2, r1
 8001fb8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	7e1b      	ldrb	r3, [r3, #24]
 8001fbe:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7e5b      	ldrb	r3, [r3, #25]
 8001fc4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001fc6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7e9b      	ldrb	r3, [r3, #26]
 8001fcc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001fce:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d002      	beq.n	8001fde <HAL_ADC_Init+0x10e>
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	015b      	lsls	r3, r3, #5
 8001fdc:	e000      	b.n	8001fe0 <HAL_ADC_Init+0x110>
 8001fde:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001fe0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001fe6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	691b      	ldr	r3, [r3, #16]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d101      	bne.n	8001ff4 <HAL_ADC_Init+0x124>
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	e000      	b.n	8001ff6 <HAL_ADC_Init+0x126>
 8001ff4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001ff6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2124      	movs	r1, #36	; 0x24
 8001ffc:	5c5b      	ldrb	r3, [r3, r1]
 8001ffe:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002000:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	4313      	orrs	r3, r2
 8002006:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7edb      	ldrb	r3, [r3, #27]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d115      	bne.n	800203c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7e9b      	ldrb	r3, [r3, #26]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d105      	bne.n	8002024 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2280      	movs	r2, #128	; 0x80
 800201c:	0252      	lsls	r2, r2, #9
 800201e:	4313      	orrs	r3, r2
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	e00b      	b.n	800203c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002028:	2220      	movs	r2, #32
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002034:	2201      	movs	r2, #1
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69da      	ldr	r2, [r3, #28]
 8002040:	23c2      	movs	r3, #194	; 0xc2
 8002042:	33ff      	adds	r3, #255	; 0xff
 8002044:	429a      	cmp	r2, r3
 8002046:	d007      	beq.n	8002058 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002050:	4313      	orrs	r3, r2
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	4313      	orrs	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68d9      	ldr	r1, [r3, #12]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	430a      	orrs	r2, r1
 8002066:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	055b      	lsls	r3, r3, #21
 8002070:	429a      	cmp	r2, r3
 8002072:	d01b      	beq.n	80020ac <HAL_ADC_Init+0x1dc>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002078:	2b01      	cmp	r3, #1
 800207a:	d017      	beq.n	80020ac <HAL_ADC_Init+0x1dc>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002080:	2b02      	cmp	r3, #2
 8002082:	d013      	beq.n	80020ac <HAL_ADC_Init+0x1dc>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	2b03      	cmp	r3, #3
 800208a:	d00f      	beq.n	80020ac <HAL_ADC_Init+0x1dc>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	2b04      	cmp	r3, #4
 8002092:	d00b      	beq.n	80020ac <HAL_ADC_Init+0x1dc>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	2b05      	cmp	r3, #5
 800209a:	d007      	beq.n	80020ac <HAL_ADC_Init+0x1dc>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	2b06      	cmp	r3, #6
 80020a2:	d003      	beq.n	80020ac <HAL_ADC_Init+0x1dc>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	2b07      	cmp	r3, #7
 80020aa:	d112      	bne.n	80020d2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2107      	movs	r1, #7
 80020b8:	438a      	bics	r2, r1
 80020ba:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6959      	ldr	r1, [r3, #20]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c6:	2207      	movs	r2, #7
 80020c8:	401a      	ands	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4a1c      	ldr	r2, [pc, #112]	; (800214c <HAL_ADC_Init+0x27c>)
 80020da:	4013      	ands	r3, r2
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d10b      	bne.n	80020fa <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ec:	2203      	movs	r2, #3
 80020ee:	4393      	bics	r3, r2
 80020f0:	2201      	movs	r2, #1
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80020f8:	e01c      	b.n	8002134 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fe:	2212      	movs	r2, #18
 8002100:	4393      	bics	r3, r2
 8002102:	2210      	movs	r2, #16
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800210e:	2201      	movs	r2, #1
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002116:	230f      	movs	r3, #15
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	2201      	movs	r2, #1
 800211c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800211e:	e009      	b.n	8002134 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002124:	2210      	movs	r2, #16
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800212c:	230f      	movs	r3, #15
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	2201      	movs	r2, #1
 8002132:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002134:	230f      	movs	r3, #15
 8002136:	18fb      	adds	r3, r7, r3
 8002138:	781b      	ldrb	r3, [r3, #0]
}
 800213a:	0018      	movs	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	b004      	add	sp, #16
 8002140:	bd80      	pop	{r7, pc}
 8002142:	46c0      	nop			; (mov r8, r8)
 8002144:	fffffefd 	.word	0xfffffefd
 8002148:	fffe0219 	.word	0xfffe0219
 800214c:	833fffe7 	.word	0x833fffe7

08002150 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800215a:	230f      	movs	r3, #15
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	055b      	lsls	r3, r3, #21
 800216e:	429a      	cmp	r2, r3
 8002170:	d011      	beq.n	8002196 <HAL_ADC_ConfigChannel+0x46>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002176:	2b01      	cmp	r3, #1
 8002178:	d00d      	beq.n	8002196 <HAL_ADC_ConfigChannel+0x46>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800217e:	2b02      	cmp	r3, #2
 8002180:	d009      	beq.n	8002196 <HAL_ADC_ConfigChannel+0x46>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	2b03      	cmp	r3, #3
 8002188:	d005      	beq.n	8002196 <HAL_ADC_ConfigChannel+0x46>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218e:	2b04      	cmp	r3, #4
 8002190:	d001      	beq.n	8002196 <HAL_ADC_ConfigChannel+0x46>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2234      	movs	r2, #52	; 0x34
 800219a:	5c9b      	ldrb	r3, [r3, r2]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x54>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e0d0      	b.n	8002346 <HAL_ADC_ConfigChannel+0x1f6>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2234      	movs	r2, #52	; 0x34
 80021a8:	2101      	movs	r1, #1
 80021aa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2204      	movs	r2, #4
 80021b4:	4013      	ands	r3, r2
 80021b6:	d000      	beq.n	80021ba <HAL_ADC_ConfigChannel+0x6a>
 80021b8:	e0b4      	b.n	8002324 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	4a64      	ldr	r2, [pc, #400]	; (8002350 <HAL_ADC_ConfigChannel+0x200>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d100      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x76>
 80021c4:	e082      	b.n	80022cc <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2201      	movs	r2, #1
 80021d2:	409a      	lsls	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	055b      	lsls	r3, r3, #21
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d037      	beq.n	8002258 <HAL_ADC_ConfigChannel+0x108>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d033      	beq.n	8002258 <HAL_ADC_ConfigChannel+0x108>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d02f      	beq.n	8002258 <HAL_ADC_ConfigChannel+0x108>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d02b      	beq.n	8002258 <HAL_ADC_ConfigChannel+0x108>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002204:	2b04      	cmp	r3, #4
 8002206:	d027      	beq.n	8002258 <HAL_ADC_ConfigChannel+0x108>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	2b05      	cmp	r3, #5
 800220e:	d023      	beq.n	8002258 <HAL_ADC_ConfigChannel+0x108>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002214:	2b06      	cmp	r3, #6
 8002216:	d01f      	beq.n	8002258 <HAL_ADC_ConfigChannel+0x108>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	2b07      	cmp	r3, #7
 800221e:	d01b      	beq.n	8002258 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	2107      	movs	r1, #7
 800222c:	400b      	ands	r3, r1
 800222e:	429a      	cmp	r2, r3
 8002230:	d012      	beq.n	8002258 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695a      	ldr	r2, [r3, #20]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2107      	movs	r1, #7
 800223e:	438a      	bics	r2, r1
 8002240:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6959      	ldr	r1, [r3, #20]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2207      	movs	r2, #7
 800224e:	401a      	ands	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2b10      	cmp	r3, #16
 800225e:	d007      	beq.n	8002270 <HAL_ADC_ConfigChannel+0x120>
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b11      	cmp	r3, #17
 8002266:	d003      	beq.n	8002270 <HAL_ADC_ConfigChannel+0x120>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2b12      	cmp	r3, #18
 800226e:	d163      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002270:	4b38      	ldr	r3, [pc, #224]	; (8002354 <HAL_ADC_ConfigChannel+0x204>)
 8002272:	6819      	ldr	r1, [r3, #0]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b10      	cmp	r3, #16
 800227a:	d009      	beq.n	8002290 <HAL_ADC_ConfigChannel+0x140>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b11      	cmp	r3, #17
 8002282:	d102      	bne.n	800228a <HAL_ADC_ConfigChannel+0x13a>
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	03db      	lsls	r3, r3, #15
 8002288:	e004      	b.n	8002294 <HAL_ADC_ConfigChannel+0x144>
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	045b      	lsls	r3, r3, #17
 800228e:	e001      	b.n	8002294 <HAL_ADC_ConfigChannel+0x144>
 8002290:	2380      	movs	r3, #128	; 0x80
 8002292:	041b      	lsls	r3, r3, #16
 8002294:	4a2f      	ldr	r2, [pc, #188]	; (8002354 <HAL_ADC_ConfigChannel+0x204>)
 8002296:	430b      	orrs	r3, r1
 8002298:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b10      	cmp	r3, #16
 80022a0:	d14a      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022a2:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <HAL_ADC_ConfigChannel+0x208>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	492d      	ldr	r1, [pc, #180]	; (800235c <HAL_ADC_ConfigChannel+0x20c>)
 80022a8:	0018      	movs	r0, r3
 80022aa:	f7fd ff3f 	bl	800012c <__udivsi3>
 80022ae:	0003      	movs	r3, r0
 80022b0:	001a      	movs	r2, r3
 80022b2:	0013      	movs	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	189b      	adds	r3, r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022bc:	e002      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f9      	bne.n	80022be <HAL_ADC_ConfigChannel+0x16e>
 80022ca:	e035      	b.n	8002338 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2101      	movs	r1, #1
 80022d8:	4099      	lsls	r1, r3
 80022da:	000b      	movs	r3, r1
 80022dc:	43d9      	mvns	r1, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	400a      	ands	r2, r1
 80022e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2b10      	cmp	r3, #16
 80022ec:	d007      	beq.n	80022fe <HAL_ADC_ConfigChannel+0x1ae>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2b11      	cmp	r3, #17
 80022f4:	d003      	beq.n	80022fe <HAL_ADC_ConfigChannel+0x1ae>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b12      	cmp	r3, #18
 80022fc:	d11c      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <HAL_ADC_ConfigChannel+0x204>)
 8002300:	6819      	ldr	r1, [r3, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b10      	cmp	r3, #16
 8002308:	d007      	beq.n	800231a <HAL_ADC_ConfigChannel+0x1ca>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2b11      	cmp	r3, #17
 8002310:	d101      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x1c6>
 8002312:	4b13      	ldr	r3, [pc, #76]	; (8002360 <HAL_ADC_ConfigChannel+0x210>)
 8002314:	e002      	b.n	800231c <HAL_ADC_ConfigChannel+0x1cc>
 8002316:	4b13      	ldr	r3, [pc, #76]	; (8002364 <HAL_ADC_ConfigChannel+0x214>)
 8002318:	e000      	b.n	800231c <HAL_ADC_ConfigChannel+0x1cc>
 800231a:	4b13      	ldr	r3, [pc, #76]	; (8002368 <HAL_ADC_ConfigChannel+0x218>)
 800231c:	4a0d      	ldr	r2, [pc, #52]	; (8002354 <HAL_ADC_ConfigChannel+0x204>)
 800231e:	400b      	ands	r3, r1
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	e009      	b.n	8002338 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002328:	2220      	movs	r2, #32
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002330:	230f      	movs	r3, #15
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	2201      	movs	r2, #1
 8002336:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2234      	movs	r2, #52	; 0x34
 800233c:	2100      	movs	r1, #0
 800233e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002340:	230f      	movs	r3, #15
 8002342:	18fb      	adds	r3, r7, r3
 8002344:	781b      	ldrb	r3, [r3, #0]
}
 8002346:	0018      	movs	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	b004      	add	sp, #16
 800234c:	bd80      	pop	{r7, pc}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	00001001 	.word	0x00001001
 8002354:	40012708 	.word	0x40012708
 8002358:	20000000 	.word	0x20000000
 800235c:	000f4240 	.word	0x000f4240
 8002360:	ffbfffff 	.word	0xffbfffff
 8002364:	feffffff 	.word	0xfeffffff
 8002368:	ff7fffff 	.word	0xff7fffff

0800236c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	0002      	movs	r2, r0
 8002374:	1dfb      	adds	r3, r7, #7
 8002376:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002378:	1dfb      	adds	r3, r7, #7
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b7f      	cmp	r3, #127	; 0x7f
 800237e:	d809      	bhi.n	8002394 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002380:	1dfb      	adds	r3, r7, #7
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	001a      	movs	r2, r3
 8002386:	231f      	movs	r3, #31
 8002388:	401a      	ands	r2, r3
 800238a:	4b04      	ldr	r3, [pc, #16]	; (800239c <__NVIC_EnableIRQ+0x30>)
 800238c:	2101      	movs	r1, #1
 800238e:	4091      	lsls	r1, r2
 8002390:	000a      	movs	r2, r1
 8002392:	601a      	str	r2, [r3, #0]
  }
}
 8002394:	46c0      	nop			; (mov r8, r8)
 8002396:	46bd      	mov	sp, r7
 8002398:	b002      	add	sp, #8
 800239a:	bd80      	pop	{r7, pc}
 800239c:	e000e100 	.word	0xe000e100

080023a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	0002      	movs	r2, r0
 80023a8:	6039      	str	r1, [r7, #0]
 80023aa:	1dfb      	adds	r3, r7, #7
 80023ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023ae:	1dfb      	adds	r3, r7, #7
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b7f      	cmp	r3, #127	; 0x7f
 80023b4:	d828      	bhi.n	8002408 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023b6:	4a2f      	ldr	r2, [pc, #188]	; (8002474 <__NVIC_SetPriority+0xd4>)
 80023b8:	1dfb      	adds	r3, r7, #7
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	b25b      	sxtb	r3, r3
 80023be:	089b      	lsrs	r3, r3, #2
 80023c0:	33c0      	adds	r3, #192	; 0xc0
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	589b      	ldr	r3, [r3, r2]
 80023c6:	1dfa      	adds	r2, r7, #7
 80023c8:	7812      	ldrb	r2, [r2, #0]
 80023ca:	0011      	movs	r1, r2
 80023cc:	2203      	movs	r2, #3
 80023ce:	400a      	ands	r2, r1
 80023d0:	00d2      	lsls	r2, r2, #3
 80023d2:	21ff      	movs	r1, #255	; 0xff
 80023d4:	4091      	lsls	r1, r2
 80023d6:	000a      	movs	r2, r1
 80023d8:	43d2      	mvns	r2, r2
 80023da:	401a      	ands	r2, r3
 80023dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	019b      	lsls	r3, r3, #6
 80023e2:	22ff      	movs	r2, #255	; 0xff
 80023e4:	401a      	ands	r2, r3
 80023e6:	1dfb      	adds	r3, r7, #7
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	0018      	movs	r0, r3
 80023ec:	2303      	movs	r3, #3
 80023ee:	4003      	ands	r3, r0
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023f4:	481f      	ldr	r0, [pc, #124]	; (8002474 <__NVIC_SetPriority+0xd4>)
 80023f6:	1dfb      	adds	r3, r7, #7
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	b25b      	sxtb	r3, r3
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	430a      	orrs	r2, r1
 8002400:	33c0      	adds	r3, #192	; 0xc0
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002406:	e031      	b.n	800246c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002408:	4a1b      	ldr	r2, [pc, #108]	; (8002478 <__NVIC_SetPriority+0xd8>)
 800240a:	1dfb      	adds	r3, r7, #7
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	0019      	movs	r1, r3
 8002410:	230f      	movs	r3, #15
 8002412:	400b      	ands	r3, r1
 8002414:	3b08      	subs	r3, #8
 8002416:	089b      	lsrs	r3, r3, #2
 8002418:	3306      	adds	r3, #6
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	18d3      	adds	r3, r2, r3
 800241e:	3304      	adds	r3, #4
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	1dfa      	adds	r2, r7, #7
 8002424:	7812      	ldrb	r2, [r2, #0]
 8002426:	0011      	movs	r1, r2
 8002428:	2203      	movs	r2, #3
 800242a:	400a      	ands	r2, r1
 800242c:	00d2      	lsls	r2, r2, #3
 800242e:	21ff      	movs	r1, #255	; 0xff
 8002430:	4091      	lsls	r1, r2
 8002432:	000a      	movs	r2, r1
 8002434:	43d2      	mvns	r2, r2
 8002436:	401a      	ands	r2, r3
 8002438:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	019b      	lsls	r3, r3, #6
 800243e:	22ff      	movs	r2, #255	; 0xff
 8002440:	401a      	ands	r2, r3
 8002442:	1dfb      	adds	r3, r7, #7
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	0018      	movs	r0, r3
 8002448:	2303      	movs	r3, #3
 800244a:	4003      	ands	r3, r0
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002450:	4809      	ldr	r0, [pc, #36]	; (8002478 <__NVIC_SetPriority+0xd8>)
 8002452:	1dfb      	adds	r3, r7, #7
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	001c      	movs	r4, r3
 8002458:	230f      	movs	r3, #15
 800245a:	4023      	ands	r3, r4
 800245c:	3b08      	subs	r3, #8
 800245e:	089b      	lsrs	r3, r3, #2
 8002460:	430a      	orrs	r2, r1
 8002462:	3306      	adds	r3, #6
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	18c3      	adds	r3, r0, r3
 8002468:	3304      	adds	r3, #4
 800246a:	601a      	str	r2, [r3, #0]
}
 800246c:	46c0      	nop			; (mov r8, r8)
 800246e:	46bd      	mov	sp, r7
 8002470:	b003      	add	sp, #12
 8002472:	bd90      	pop	{r4, r7, pc}
 8002474:	e000e100 	.word	0xe000e100
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	1e5a      	subs	r2, r3, #1
 8002488:	2380      	movs	r3, #128	; 0x80
 800248a:	045b      	lsls	r3, r3, #17
 800248c:	429a      	cmp	r2, r3
 800248e:	d301      	bcc.n	8002494 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002490:	2301      	movs	r3, #1
 8002492:	e010      	b.n	80024b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002494:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <SysTick_Config+0x44>)
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	3a01      	subs	r2, #1
 800249a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800249c:	2301      	movs	r3, #1
 800249e:	425b      	negs	r3, r3
 80024a0:	2103      	movs	r1, #3
 80024a2:	0018      	movs	r0, r3
 80024a4:	f7ff ff7c 	bl	80023a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024a8:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <SysTick_Config+0x44>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ae:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <SysTick_Config+0x44>)
 80024b0:	2207      	movs	r2, #7
 80024b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	0018      	movs	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b002      	add	sp, #8
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	e000e010 	.word	0xe000e010

080024c4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	210f      	movs	r1, #15
 80024d0:	187b      	adds	r3, r7, r1
 80024d2:	1c02      	adds	r2, r0, #0
 80024d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	187b      	adds	r3, r7, r1
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	b25b      	sxtb	r3, r3
 80024de:	0011      	movs	r1, r2
 80024e0:	0018      	movs	r0, r3
 80024e2:	f7ff ff5d 	bl	80023a0 <__NVIC_SetPriority>
}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b004      	add	sp, #16
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b082      	sub	sp, #8
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	0002      	movs	r2, r0
 80024f6:	1dfb      	adds	r3, r7, #7
 80024f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024fa:	1dfb      	adds	r3, r7, #7
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	b25b      	sxtb	r3, r3
 8002500:	0018      	movs	r0, r3
 8002502:	f7ff ff33 	bl	800236c <__NVIC_EnableIRQ>
}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	46bd      	mov	sp, r7
 800250a:	b002      	add	sp, #8
 800250c:	bd80      	pop	{r7, pc}

0800250e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	0018      	movs	r0, r3
 800251a:	f7ff ffaf 	bl	800247c <SysTick_Config>
 800251e:	0003      	movs	r3, r0
}
 8002520:	0018      	movs	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	b002      	add	sp, #8
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e036      	b.n	80025ac <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2221      	movs	r2, #33	; 0x21
 8002542:	2102      	movs	r1, #2
 8002544:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4a18      	ldr	r2, [pc, #96]	; (80025b4 <HAL_DMA_Init+0x8c>)
 8002552:	4013      	ands	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800255e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800256a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	695b      	ldr	r3, [r3, #20]
 8002570:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002576:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4313      	orrs	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	0018      	movs	r0, r3
 8002590:	f000 f932 	bl	80027f8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2221      	movs	r2, #33	; 0x21
 800259e:	2101      	movs	r1, #1
 80025a0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2220      	movs	r2, #32
 80025a6:	2100      	movs	r1, #0
 80025a8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}  
 80025ac:	0018      	movs	r0, r3
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b004      	add	sp, #16
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	ffffc00f 	.word	0xffffc00f

080025b8 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2221      	movs	r2, #33	; 0x21
 80025c4:	5c9b      	ldrb	r3, [r3, r2]
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d008      	beq.n	80025de <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2204      	movs	r2, #4
 80025d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2220      	movs	r2, #32
 80025d6:	2100      	movs	r1, #0
 80025d8:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e020      	b.n	8002620 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	210e      	movs	r1, #14
 80025ea:	438a      	bics	r2, r1
 80025ec:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2101      	movs	r1, #1
 80025fa:	438a      	bics	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002606:	2101      	movs	r1, #1
 8002608:	4091      	lsls	r1, r2
 800260a:	000a      	movs	r2, r1
 800260c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2221      	movs	r2, #33	; 0x21
 8002612:	2101      	movs	r1, #1
 8002614:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2220      	movs	r2, #32
 800261a:	2100      	movs	r1, #0
 800261c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	0018      	movs	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	b002      	add	sp, #8
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002630:	210f      	movs	r1, #15
 8002632:	187b      	adds	r3, r7, r1
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2221      	movs	r2, #33	; 0x21
 800263c:	5c9b      	ldrb	r3, [r3, r2]
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d006      	beq.n	8002652 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2204      	movs	r2, #4
 8002648:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800264a:	187b      	adds	r3, r7, r1
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
 8002650:	e028      	b.n	80026a4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	210e      	movs	r1, #14
 800265e:	438a      	bics	r2, r1
 8002660:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2101      	movs	r1, #1
 800266e:	438a      	bics	r2, r1
 8002670:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267a:	2101      	movs	r1, #1
 800267c:	4091      	lsls	r1, r2
 800267e:	000a      	movs	r2, r1
 8002680:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2221      	movs	r2, #33	; 0x21
 8002686:	2101      	movs	r1, #1
 8002688:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2220      	movs	r2, #32
 800268e:	2100      	movs	r1, #0
 8002690:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002696:	2b00      	cmp	r3, #0
 8002698:	d004      	beq.n	80026a4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	0010      	movs	r0, r2
 80026a2:	4798      	blx	r3
    } 
  }
  return status;
 80026a4:	230f      	movs	r3, #15
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	781b      	ldrb	r3, [r3, #0]
}
 80026aa:	0018      	movs	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b004      	add	sp, #16
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	2204      	movs	r2, #4
 80026d0:	409a      	lsls	r2, r3
 80026d2:	0013      	movs	r3, r2
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4013      	ands	r3, r2
 80026d8:	d024      	beq.n	8002724 <HAL_DMA_IRQHandler+0x72>
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2204      	movs	r2, #4
 80026de:	4013      	ands	r3, r2
 80026e0:	d020      	beq.n	8002724 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2220      	movs	r2, #32
 80026ea:	4013      	ands	r3, r2
 80026ec:	d107      	bne.n	80026fe <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2104      	movs	r1, #4
 80026fa:	438a      	bics	r2, r1
 80026fc:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002706:	2104      	movs	r1, #4
 8002708:	4091      	lsls	r1, r2
 800270a:	000a      	movs	r2, r1
 800270c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002712:	2b00      	cmp	r3, #0
 8002714:	d100      	bne.n	8002718 <HAL_DMA_IRQHandler+0x66>
 8002716:	e06a      	b.n	80027ee <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	0010      	movs	r0, r2
 8002720:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002722:	e064      	b.n	80027ee <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	2202      	movs	r2, #2
 800272a:	409a      	lsls	r2, r3
 800272c:	0013      	movs	r3, r2
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	4013      	ands	r3, r2
 8002732:	d02b      	beq.n	800278c <HAL_DMA_IRQHandler+0xda>
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2202      	movs	r2, #2
 8002738:	4013      	ands	r3, r2
 800273a:	d027      	beq.n	800278c <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2220      	movs	r2, #32
 8002744:	4013      	ands	r3, r2
 8002746:	d10b      	bne.n	8002760 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	210a      	movs	r1, #10
 8002754:	438a      	bics	r2, r1
 8002756:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2221      	movs	r2, #33	; 0x21
 800275c:	2101      	movs	r1, #1
 800275e:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002768:	2102      	movs	r1, #2
 800276a:	4091      	lsls	r1, r2
 800276c:	000a      	movs	r2, r1
 800276e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2220      	movs	r2, #32
 8002774:	2100      	movs	r1, #0
 8002776:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277c:	2b00      	cmp	r3, #0
 800277e:	d036      	beq.n	80027ee <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	0010      	movs	r0, r2
 8002788:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800278a:	e030      	b.n	80027ee <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	2208      	movs	r2, #8
 8002792:	409a      	lsls	r2, r3
 8002794:	0013      	movs	r3, r2
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4013      	ands	r3, r2
 800279a:	d028      	beq.n	80027ee <HAL_DMA_IRQHandler+0x13c>
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2208      	movs	r2, #8
 80027a0:	4013      	ands	r3, r2
 80027a2:	d024      	beq.n	80027ee <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	210e      	movs	r1, #14
 80027b0:	438a      	bics	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027bc:	2101      	movs	r1, #1
 80027be:	4091      	lsls	r1, r2
 80027c0:	000a      	movs	r2, r1
 80027c2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2221      	movs	r2, #33	; 0x21
 80027ce:	2101      	movs	r1, #1
 80027d0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2220      	movs	r2, #32
 80027d6:	2100      	movs	r1, #0
 80027d8:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	0010      	movs	r0, r2
 80027ea:	4798      	blx	r3
    }
   }
}  
 80027ec:	e7ff      	b.n	80027ee <HAL_DMA_IRQHandler+0x13c>
 80027ee:	46c0      	nop			; (mov r8, r8)
 80027f0:	46bd      	mov	sp, r7
 80027f2:	b004      	add	sp, #16
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a08      	ldr	r2, [pc, #32]	; (8002828 <DMA_CalcBaseAndBitshift+0x30>)
 8002806:	4694      	mov	ip, r2
 8002808:	4463      	add	r3, ip
 800280a:	2114      	movs	r1, #20
 800280c:	0018      	movs	r0, r3
 800280e:	f7fd fc8d 	bl	800012c <__udivsi3>
 8002812:	0003      	movs	r3, r0
 8002814:	009a      	lsls	r2, r3, #2
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a03      	ldr	r2, [pc, #12]	; (800282c <DMA_CalcBaseAndBitshift+0x34>)
 800281e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002820:	46c0      	nop			; (mov r8, r8)
 8002822:	46bd      	mov	sp, r7
 8002824:	b002      	add	sp, #8
 8002826:	bd80      	pop	{r7, pc}
 8002828:	bffdfff8 	.word	0xbffdfff8
 800282c:	40020000 	.word	0x40020000

08002830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800283e:	e155      	b.n	8002aec <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2101      	movs	r1, #1
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4091      	lsls	r1, r2
 800284a:	000a      	movs	r2, r1
 800284c:	4013      	ands	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d100      	bne.n	8002858 <HAL_GPIO_Init+0x28>
 8002856:	e146      	b.n	8002ae6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2203      	movs	r2, #3
 800285e:	4013      	ands	r3, r2
 8002860:	2b01      	cmp	r3, #1
 8002862:	d005      	beq.n	8002870 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2203      	movs	r2, #3
 800286a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800286c:	2b02      	cmp	r3, #2
 800286e:	d130      	bne.n	80028d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	2203      	movs	r2, #3
 800287c:	409a      	lsls	r2, r3
 800287e:	0013      	movs	r3, r2
 8002880:	43da      	mvns	r2, r3
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	409a      	lsls	r2, r3
 8002892:	0013      	movs	r3, r2
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028a6:	2201      	movs	r2, #1
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	409a      	lsls	r2, r3
 80028ac:	0013      	movs	r3, r2
 80028ae:	43da      	mvns	r2, r3
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	091b      	lsrs	r3, r3, #4
 80028bc:	2201      	movs	r2, #1
 80028be:	401a      	ands	r2, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	409a      	lsls	r2, r3
 80028c4:	0013      	movs	r3, r2
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2203      	movs	r2, #3
 80028d8:	4013      	ands	r3, r2
 80028da:	2b03      	cmp	r3, #3
 80028dc:	d017      	beq.n	800290e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	2203      	movs	r2, #3
 80028ea:	409a      	lsls	r2, r3
 80028ec:	0013      	movs	r3, r2
 80028ee:	43da      	mvns	r2, r3
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4013      	ands	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	689a      	ldr	r2, [r3, #8]
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	409a      	lsls	r2, r3
 8002900:	0013      	movs	r3, r2
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2203      	movs	r2, #3
 8002914:	4013      	ands	r3, r2
 8002916:	2b02      	cmp	r3, #2
 8002918:	d123      	bne.n	8002962 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	08da      	lsrs	r2, r3, #3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3208      	adds	r2, #8
 8002922:	0092      	lsls	r2, r2, #2
 8002924:	58d3      	ldr	r3, [r2, r3]
 8002926:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2207      	movs	r2, #7
 800292c:	4013      	ands	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	220f      	movs	r2, #15
 8002932:	409a      	lsls	r2, r3
 8002934:	0013      	movs	r3, r2
 8002936:	43da      	mvns	r2, r3
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4013      	ands	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	691a      	ldr	r2, [r3, #16]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2107      	movs	r1, #7
 8002946:	400b      	ands	r3, r1
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	409a      	lsls	r2, r3
 800294c:	0013      	movs	r3, r2
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	08da      	lsrs	r2, r3, #3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	3208      	adds	r2, #8
 800295c:	0092      	lsls	r2, r2, #2
 800295e:	6939      	ldr	r1, [r7, #16]
 8002960:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	2203      	movs	r2, #3
 800296e:	409a      	lsls	r2, r3
 8002970:	0013      	movs	r3, r2
 8002972:	43da      	mvns	r2, r3
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	4013      	ands	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2203      	movs	r2, #3
 8002980:	401a      	ands	r2, r3
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	409a      	lsls	r2, r3
 8002988:	0013      	movs	r3, r2
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	23c0      	movs	r3, #192	; 0xc0
 800299c:	029b      	lsls	r3, r3, #10
 800299e:	4013      	ands	r3, r2
 80029a0:	d100      	bne.n	80029a4 <HAL_GPIO_Init+0x174>
 80029a2:	e0a0      	b.n	8002ae6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a4:	4b57      	ldr	r3, [pc, #348]	; (8002b04 <HAL_GPIO_Init+0x2d4>)
 80029a6:	699a      	ldr	r2, [r3, #24]
 80029a8:	4b56      	ldr	r3, [pc, #344]	; (8002b04 <HAL_GPIO_Init+0x2d4>)
 80029aa:	2101      	movs	r1, #1
 80029ac:	430a      	orrs	r2, r1
 80029ae:	619a      	str	r2, [r3, #24]
 80029b0:	4b54      	ldr	r3, [pc, #336]	; (8002b04 <HAL_GPIO_Init+0x2d4>)
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	2201      	movs	r2, #1
 80029b6:	4013      	ands	r3, r2
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029bc:	4a52      	ldr	r2, [pc, #328]	; (8002b08 <HAL_GPIO_Init+0x2d8>)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	089b      	lsrs	r3, r3, #2
 80029c2:	3302      	adds	r3, #2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	589b      	ldr	r3, [r3, r2]
 80029c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2203      	movs	r2, #3
 80029ce:	4013      	ands	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	220f      	movs	r2, #15
 80029d4:	409a      	lsls	r2, r3
 80029d6:	0013      	movs	r3, r2
 80029d8:	43da      	mvns	r2, r3
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	2390      	movs	r3, #144	; 0x90
 80029e4:	05db      	lsls	r3, r3, #23
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d019      	beq.n	8002a1e <HAL_GPIO_Init+0x1ee>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a47      	ldr	r2, [pc, #284]	; (8002b0c <HAL_GPIO_Init+0x2dc>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d013      	beq.n	8002a1a <HAL_GPIO_Init+0x1ea>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a46      	ldr	r2, [pc, #280]	; (8002b10 <HAL_GPIO_Init+0x2e0>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d00d      	beq.n	8002a16 <HAL_GPIO_Init+0x1e6>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a45      	ldr	r2, [pc, #276]	; (8002b14 <HAL_GPIO_Init+0x2e4>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d007      	beq.n	8002a12 <HAL_GPIO_Init+0x1e2>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a44      	ldr	r2, [pc, #272]	; (8002b18 <HAL_GPIO_Init+0x2e8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d101      	bne.n	8002a0e <HAL_GPIO_Init+0x1de>
 8002a0a:	2304      	movs	r3, #4
 8002a0c:	e008      	b.n	8002a20 <HAL_GPIO_Init+0x1f0>
 8002a0e:	2305      	movs	r3, #5
 8002a10:	e006      	b.n	8002a20 <HAL_GPIO_Init+0x1f0>
 8002a12:	2303      	movs	r3, #3
 8002a14:	e004      	b.n	8002a20 <HAL_GPIO_Init+0x1f0>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e002      	b.n	8002a20 <HAL_GPIO_Init+0x1f0>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <HAL_GPIO_Init+0x1f0>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	2103      	movs	r1, #3
 8002a24:	400a      	ands	r2, r1
 8002a26:	0092      	lsls	r2, r2, #2
 8002a28:	4093      	lsls	r3, r2
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a30:	4935      	ldr	r1, [pc, #212]	; (8002b08 <HAL_GPIO_Init+0x2d8>)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	089b      	lsrs	r3, r3, #2
 8002a36:	3302      	adds	r3, #2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a3e:	4b37      	ldr	r3, [pc, #220]	; (8002b1c <HAL_GPIO_Init+0x2ec>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	43da      	mvns	r2, r3
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	2380      	movs	r3, #128	; 0x80
 8002a54:	025b      	lsls	r3, r3, #9
 8002a56:	4013      	ands	r3, r2
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a62:	4b2e      	ldr	r3, [pc, #184]	; (8002b1c <HAL_GPIO_Init+0x2ec>)
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002a68:	4b2c      	ldr	r3, [pc, #176]	; (8002b1c <HAL_GPIO_Init+0x2ec>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	43da      	mvns	r2, r3
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685a      	ldr	r2, [r3, #4]
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	029b      	lsls	r3, r3, #10
 8002a80:	4013      	ands	r3, r2
 8002a82:	d003      	beq.n	8002a8c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a8c:	4b23      	ldr	r3, [pc, #140]	; (8002b1c <HAL_GPIO_Init+0x2ec>)
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a92:	4b22      	ldr	r3, [pc, #136]	; (8002b1c <HAL_GPIO_Init+0x2ec>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	035b      	lsls	r3, r3, #13
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ab6:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <HAL_GPIO_Init+0x2ec>)
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002abc:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <HAL_GPIO_Init+0x2ec>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	43da      	mvns	r2, r3
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	039b      	lsls	r3, r3, #14
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d003      	beq.n	8002ae0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002ae0:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <HAL_GPIO_Init+0x2ec>)
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	40da      	lsrs	r2, r3
 8002af4:	1e13      	subs	r3, r2, #0
 8002af6:	d000      	beq.n	8002afa <HAL_GPIO_Init+0x2ca>
 8002af8:	e6a2      	b.n	8002840 <HAL_GPIO_Init+0x10>
  } 
}
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	46c0      	nop			; (mov r8, r8)
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b006      	add	sp, #24
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	40021000 	.word	0x40021000
 8002b08:	40010000 	.word	0x40010000
 8002b0c:	48000400 	.word	0x48000400
 8002b10:	48000800 	.word	0x48000800
 8002b14:	48000c00 	.word	0x48000c00
 8002b18:	48001000 	.word	0x48001000
 8002b1c:	40010400 	.word	0x40010400

08002b20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	000a      	movs	r2, r1
 8002b2a:	1cbb      	adds	r3, r7, #2
 8002b2c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	1cba      	adds	r2, r7, #2
 8002b34:	8812      	ldrh	r2, [r2, #0]
 8002b36:	4013      	ands	r3, r2
 8002b38:	d004      	beq.n	8002b44 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002b3a:	230f      	movs	r3, #15
 8002b3c:	18fb      	adds	r3, r7, r3
 8002b3e:	2201      	movs	r2, #1
 8002b40:	701a      	strb	r2, [r3, #0]
 8002b42:	e003      	b.n	8002b4c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b44:	230f      	movs	r3, #15
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002b4c:	230f      	movs	r3, #15
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	781b      	ldrb	r3, [r3, #0]
  }
 8002b52:	0018      	movs	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b004      	add	sp, #16
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	0008      	movs	r0, r1
 8002b64:	0011      	movs	r1, r2
 8002b66:	1cbb      	adds	r3, r7, #2
 8002b68:	1c02      	adds	r2, r0, #0
 8002b6a:	801a      	strh	r2, [r3, #0]
 8002b6c:	1c7b      	adds	r3, r7, #1
 8002b6e:	1c0a      	adds	r2, r1, #0
 8002b70:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b72:	1c7b      	adds	r3, r7, #1
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d004      	beq.n	8002b84 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b7a:	1cbb      	adds	r3, r7, #2
 8002b7c:	881a      	ldrh	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b82:	e003      	b.n	8002b8c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b84:	1cbb      	adds	r3, r7, #2
 8002b86:	881a      	ldrh	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b8c:	46c0      	nop			; (mov r8, r8)
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b002      	add	sp, #8
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	000a      	movs	r2, r1
 8002b9e:	1cbb      	adds	r3, r7, #2
 8002ba0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ba8:	1cbb      	adds	r3, r7, #2
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	041a      	lsls	r2, r3, #16
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	1cb9      	adds	r1, r7, #2
 8002bb8:	8809      	ldrh	r1, [r1, #0]
 8002bba:	400b      	ands	r3, r1
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	619a      	str	r2, [r3, #24]
}
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	b004      	add	sp, #16
 8002bc8:	bd80      	pop	{r7, pc}
	...

08002bcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	0002      	movs	r2, r0
 8002bd4:	1dbb      	adds	r3, r7, #6
 8002bd6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002bd8:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	1dba      	adds	r2, r7, #6
 8002bde:	8812      	ldrh	r2, [r2, #0]
 8002be0:	4013      	ands	r3, r2
 8002be2:	d008      	beq.n	8002bf6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002be6:	1dba      	adds	r2, r7, #6
 8002be8:	8812      	ldrh	r2, [r2, #0]
 8002bea:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bec:	1dbb      	adds	r3, r7, #6
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f7fd fc83 	bl	80004fc <HAL_GPIO_EXTI_Callback>
  }
}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	b002      	add	sp, #8
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	46c0      	nop			; (mov r8, r8)
 8002c00:	40010400 	.word	0x40010400

08002c04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c06:	b08b      	sub	sp, #44	; 0x2c
 8002c08:	af06      	add	r7, sp, #24
 8002c0a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e0ff      	b.n	8002e16 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a81      	ldr	r2, [pc, #516]	; (8002e20 <HAL_PCD_Init+0x21c>)
 8002c1a:	5c9b      	ldrb	r3, [r3, r2]
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d108      	bne.n	8002c34 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	23aa      	movs	r3, #170	; 0xaa
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	2100      	movs	r1, #0
 8002c2a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f008 fb9e 	bl	800b370 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a7a      	ldr	r2, [pc, #488]	; (8002e20 <HAL_PCD_Init+0x21c>)
 8002c38:	2103      	movs	r1, #3
 8002c3a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	0018      	movs	r0, r3
 8002c42:	f004 fc3d 	bl	80074c0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c46:	230f      	movs	r3, #15
 8002c48:	18fb      	adds	r3, r7, r3
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
 8002c4e:	e058      	b.n	8002d02 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c50:	200f      	movs	r0, #15
 8002c52:	183b      	adds	r3, r7, r0
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	0013      	movs	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	189b      	adds	r3, r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	18cb      	adds	r3, r1, r3
 8002c64:	3301      	adds	r3, #1
 8002c66:	2201      	movs	r2, #1
 8002c68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c6a:	183b      	adds	r3, r7, r0
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	0013      	movs	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	189b      	adds	r3, r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	183a      	adds	r2, r7, r0
 8002c7c:	7812      	ldrb	r2, [r2, #0]
 8002c7e:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c80:	0004      	movs	r4, r0
 8002c82:	183b      	adds	r3, r7, r0
 8002c84:	781a      	ldrb	r2, [r3, #0]
 8002c86:	193b      	adds	r3, r7, r4
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	b298      	uxth	r0, r3
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	0013      	movs	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	189b      	adds	r3, r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	18cb      	adds	r3, r1, r3
 8002c98:	3336      	adds	r3, #54	; 0x36
 8002c9a:	1c02      	adds	r2, r0, #0
 8002c9c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c9e:	193b      	adds	r3, r7, r4
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	6879      	ldr	r1, [r7, #4]
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	0013      	movs	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	189b      	adds	r3, r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	18cb      	adds	r3, r1, r3
 8002cb0:	3303      	adds	r3, #3
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cb6:	193b      	adds	r3, r7, r4
 8002cb8:	781a      	ldrb	r2, [r3, #0]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	0013      	movs	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	189b      	adds	r3, r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	18cb      	adds	r3, r1, r3
 8002cc6:	3338      	adds	r3, #56	; 0x38
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ccc:	193b      	adds	r3, r7, r4
 8002cce:	781a      	ldrb	r2, [r3, #0]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	0013      	movs	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	189b      	adds	r3, r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	18cb      	adds	r3, r1, r3
 8002cdc:	333c      	adds	r3, #60	; 0x3c
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ce2:	193b      	adds	r3, r7, r4
 8002ce4:	781a      	ldrb	r2, [r3, #0]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	0013      	movs	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	189b      	adds	r3, r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	18cb      	adds	r3, r1, r3
 8002cf2:	3340      	adds	r3, #64	; 0x40
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf8:	193b      	adds	r3, r7, r4
 8002cfa:	781a      	ldrb	r2, [r3, #0]
 8002cfc:	193b      	adds	r3, r7, r4
 8002cfe:	3201      	adds	r2, #1
 8002d00:	701a      	strb	r2, [r3, #0]
 8002d02:	210f      	movs	r1, #15
 8002d04:	187b      	adds	r3, r7, r1
 8002d06:	781a      	ldrb	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d39f      	bcc.n	8002c50 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d10:	187b      	adds	r3, r7, r1
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]
 8002d16:	e056      	b.n	8002dc6 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d18:	240f      	movs	r4, #15
 8002d1a:	193b      	adds	r3, r7, r4
 8002d1c:	781a      	ldrb	r2, [r3, #0]
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	236a      	movs	r3, #106	; 0x6a
 8002d22:	33ff      	adds	r3, #255	; 0xff
 8002d24:	0019      	movs	r1, r3
 8002d26:	0013      	movs	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	189b      	adds	r3, r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	18c3      	adds	r3, r0, r3
 8002d30:	185b      	adds	r3, r3, r1
 8002d32:	2200      	movs	r2, #0
 8002d34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d36:	193b      	adds	r3, r7, r4
 8002d38:	781a      	ldrb	r2, [r3, #0]
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	23b4      	movs	r3, #180	; 0xb4
 8002d3e:	0059      	lsls	r1, r3, #1
 8002d40:	0013      	movs	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	189b      	adds	r3, r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	18c3      	adds	r3, r0, r3
 8002d4a:	185b      	adds	r3, r3, r1
 8002d4c:	193a      	adds	r2, r7, r4
 8002d4e:	7812      	ldrb	r2, [r2, #0]
 8002d50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d52:	193b      	adds	r3, r7, r4
 8002d54:	781a      	ldrb	r2, [r3, #0]
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	236c      	movs	r3, #108	; 0x6c
 8002d5a:	33ff      	adds	r3, #255	; 0xff
 8002d5c:	0019      	movs	r1, r3
 8002d5e:	0013      	movs	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	189b      	adds	r3, r3, r2
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	18c3      	adds	r3, r0, r3
 8002d68:	185b      	adds	r3, r3, r1
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d6e:	193b      	adds	r3, r7, r4
 8002d70:	781a      	ldrb	r2, [r3, #0]
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	23bc      	movs	r3, #188	; 0xbc
 8002d76:	0059      	lsls	r1, r3, #1
 8002d78:	0013      	movs	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	189b      	adds	r3, r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	18c3      	adds	r3, r0, r3
 8002d82:	185b      	adds	r3, r3, r1
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d88:	193b      	adds	r3, r7, r4
 8002d8a:	781a      	ldrb	r2, [r3, #0]
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	23be      	movs	r3, #190	; 0xbe
 8002d90:	0059      	lsls	r1, r3, #1
 8002d92:	0013      	movs	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	189b      	adds	r3, r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	18c3      	adds	r3, r0, r3
 8002d9c:	185b      	adds	r3, r3, r1
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002da2:	193b      	adds	r3, r7, r4
 8002da4:	781a      	ldrb	r2, [r3, #0]
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	23c0      	movs	r3, #192	; 0xc0
 8002daa:	0059      	lsls	r1, r3, #1
 8002dac:	0013      	movs	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	189b      	adds	r3, r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	18c3      	adds	r3, r0, r3
 8002db6:	185b      	adds	r3, r3, r1
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dbc:	193b      	adds	r3, r7, r4
 8002dbe:	781a      	ldrb	r2, [r3, #0]
 8002dc0:	193b      	adds	r3, r7, r4
 8002dc2:	3201      	adds	r2, #1
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	230f      	movs	r3, #15
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	781a      	ldrb	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d3a1      	bcc.n	8002d18 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	466a      	mov	r2, sp
 8002ddc:	0011      	movs	r1, r2
 8002dde:	001a      	movs	r2, r3
 8002de0:	3210      	adds	r2, #16
 8002de2:	ca70      	ldmia	r2!, {r4, r5, r6}
 8002de4:	c170      	stmia	r1!, {r4, r5, r6}
 8002de6:	ca30      	ldmia	r2!, {r4, r5}
 8002de8:	c130      	stmia	r1!, {r4, r5}
 8002dea:	6859      	ldr	r1, [r3, #4]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f004 fb80 	bl	80074f4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2224      	movs	r2, #36	; 0x24
 8002df8:	2100      	movs	r1, #0
 8002dfa:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a08      	ldr	r2, [pc, #32]	; (8002e20 <HAL_PCD_Init+0x21c>)
 8002e00:	2101      	movs	r1, #1
 8002e02:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d103      	bne.n	8002e14 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f001 fd34 	bl	800487c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	0018      	movs	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	b005      	add	sp, #20
 8002e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	000002a9 	.word	0x000002a9

08002e24 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	23aa      	movs	r3, #170	; 0xaa
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	5cd3      	ldrb	r3, [r2, r3]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_PCD_Start+0x18>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e014      	b.n	8002e66 <HAL_PCD_Start+0x42>
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	23aa      	movs	r3, #170	; 0xaa
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	2101      	movs	r1, #1
 8002e44:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f004 fb22 	bl	8007494 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	0018      	movs	r0, r3
 8002e56:	f006 fa7d 	bl	8009354 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	23aa      	movs	r3, #170	; 0xaa
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	2100      	movs	r1, #0
 8002e62:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b002      	add	sp, #8
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f006 fa7f 	bl	8009380 <USB_ReadInterrupts>
 8002e82:	0002      	movs	r2, r0
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	021b      	lsls	r3, r3, #8
 8002e88:	401a      	ands	r2, r3
 8002e8a:	2380      	movs	r3, #128	; 0x80
 8002e8c:	021b      	lsls	r3, r3, #8
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d103      	bne.n	8002e9a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	0018      	movs	r0, r3
 8002e96:	f000 fbbb 	bl	8003610 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f006 fa6e 	bl	8009380 <USB_ReadInterrupts>
 8002ea4:	0002      	movs	r2, r0
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	401a      	ands	r2, r3
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d114      	bne.n	8002ede <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2244      	movs	r2, #68	; 0x44
 8002eba:	5a9b      	ldrh	r3, [r3, r2]
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	49a2      	ldr	r1, [pc, #648]	; (800314c <HAL_PCD_IRQHandler+0x2dc>)
 8002ec4:	400a      	ands	r2, r1
 8002ec6:	b291      	uxth	r1, r2
 8002ec8:	2244      	movs	r2, #68	; 0x44
 8002eca:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f008 fad9 	bl	800b486 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f000 f945 	bl	8003168 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f006 fa4c 	bl	8009380 <USB_ReadInterrupts>
 8002ee8:	0002      	movs	r2, r0
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	01db      	lsls	r3, r3, #7
 8002eee:	401a      	ands	r2, r3
 8002ef0:	2380      	movs	r3, #128	; 0x80
 8002ef2:	01db      	lsls	r3, r3, #7
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d10b      	bne.n	8002f10 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2244      	movs	r2, #68	; 0x44
 8002efe:	5a9b      	ldrh	r3, [r3, r2]
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4992      	ldr	r1, [pc, #584]	; (8003150 <HAL_PCD_IRQHandler+0x2e0>)
 8002f08:	400a      	ands	r2, r1
 8002f0a:	b291      	uxth	r1, r2
 8002f0c:	2244      	movs	r2, #68	; 0x44
 8002f0e:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	0018      	movs	r0, r3
 8002f16:	f006 fa33 	bl	8009380 <USB_ReadInterrupts>
 8002f1a:	0002      	movs	r2, r0
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	019b      	lsls	r3, r3, #6
 8002f20:	401a      	ands	r2, r3
 8002f22:	2380      	movs	r3, #128	; 0x80
 8002f24:	019b      	lsls	r3, r3, #6
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d10b      	bne.n	8002f42 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2244      	movs	r2, #68	; 0x44
 8002f30:	5a9b      	ldrh	r3, [r3, r2]
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4986      	ldr	r1, [pc, #536]	; (8003154 <HAL_PCD_IRQHandler+0x2e4>)
 8002f3a:	400a      	ands	r2, r1
 8002f3c:	b291      	uxth	r1, r2
 8002f3e:	2244      	movs	r2, #68	; 0x44
 8002f40:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	0018      	movs	r0, r3
 8002f48:	f006 fa1a 	bl	8009380 <USB_ReadInterrupts>
 8002f4c:	0002      	movs	r2, r0
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	015b      	lsls	r3, r3, #5
 8002f52:	401a      	ands	r2, r3
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	015b      	lsls	r3, r3, #5
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d137      	bne.n	8002fcc <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2240      	movs	r2, #64	; 0x40
 8002f62:	5a9b      	ldrh	r3, [r3, r2]
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2104      	movs	r1, #4
 8002f6c:	438a      	bics	r2, r1
 8002f6e:	b291      	uxth	r1, r2
 8002f70:	2240      	movs	r2, #64	; 0x40
 8002f72:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2240      	movs	r2, #64	; 0x40
 8002f7a:	5a9b      	ldrh	r3, [r3, r2]
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2108      	movs	r1, #8
 8002f84:	438a      	bics	r2, r1
 8002f86:	b291      	uxth	r1, r2
 8002f88:	2240      	movs	r2, #64	; 0x40
 8002f8a:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	23b8      	movs	r3, #184	; 0xb8
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	5cd3      	ldrb	r3, [r2, r3]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d109      	bne.n	8002fac <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	23b8      	movs	r3, #184	; 0xb8
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f001 fc92 	bl	80048d0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f008 faaa 	bl	800b508 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2244      	movs	r2, #68	; 0x44
 8002fba:	5a9b      	ldrh	r3, [r3, r2]
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4965      	ldr	r1, [pc, #404]	; (8003158 <HAL_PCD_IRQHandler+0x2e8>)
 8002fc4:	400a      	ands	r2, r1
 8002fc6:	b291      	uxth	r1, r2
 8002fc8:	2244      	movs	r2, #68	; 0x44
 8002fca:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f006 f9d5 	bl	8009380 <USB_ReadInterrupts>
 8002fd6:	0002      	movs	r2, r0
 8002fd8:	2380      	movs	r3, #128	; 0x80
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	401a      	ands	r2, r3
 8002fde:	2380      	movs	r3, #128	; 0x80
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d127      	bne.n	8003036 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2240      	movs	r2, #64	; 0x40
 8002fec:	5a9b      	ldrh	r3, [r3, r2]
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2108      	movs	r1, #8
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	b291      	uxth	r1, r2
 8002ffa:	2240      	movs	r2, #64	; 0x40
 8002ffc:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2244      	movs	r2, #68	; 0x44
 8003004:	5a9b      	ldrh	r3, [r3, r2]
 8003006:	b29a      	uxth	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4953      	ldr	r1, [pc, #332]	; (800315c <HAL_PCD_IRQHandler+0x2ec>)
 800300e:	400a      	ands	r2, r1
 8003010:	b291      	uxth	r1, r2
 8003012:	2244      	movs	r2, #68	; 0x44
 8003014:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2240      	movs	r2, #64	; 0x40
 800301c:	5a9b      	ldrh	r3, [r3, r2]
 800301e:	b29a      	uxth	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2104      	movs	r1, #4
 8003026:	430a      	orrs	r2, r1
 8003028:	b291      	uxth	r1, r2
 800302a:	2240      	movs	r2, #64	; 0x40
 800302c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	0018      	movs	r0, r3
 8003032:	f008 fa4d 	bl	800b4d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	0018      	movs	r0, r3
 800303c:	f006 f9a0 	bl	8009380 <USB_ReadInterrupts>
 8003040:	0003      	movs	r3, r0
 8003042:	2280      	movs	r2, #128	; 0x80
 8003044:	4013      	ands	r3, r2
 8003046:	2b80      	cmp	r3, #128	; 0x80
 8003048:	d145      	bne.n	80030d6 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2244      	movs	r2, #68	; 0x44
 8003050:	5a9b      	ldrh	r3, [r3, r2]
 8003052:	b29a      	uxth	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2180      	movs	r1, #128	; 0x80
 800305a:	438a      	bics	r2, r1
 800305c:	b291      	uxth	r1, r2
 800305e:	2244      	movs	r2, #68	; 0x44
 8003060:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	23b8      	movs	r3, #184	; 0xb8
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	5cd3      	ldrb	r3, [r2, r3]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d12f      	bne.n	80030ce <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2240      	movs	r2, #64	; 0x40
 8003074:	5a9b      	ldrh	r3, [r3, r2]
 8003076:	b29a      	uxth	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2104      	movs	r1, #4
 800307e:	430a      	orrs	r2, r1
 8003080:	b291      	uxth	r1, r2
 8003082:	2240      	movs	r2, #64	; 0x40
 8003084:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2240      	movs	r2, #64	; 0x40
 800308c:	5a9b      	ldrh	r3, [r3, r2]
 800308e:	b29a      	uxth	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2108      	movs	r1, #8
 8003096:	430a      	orrs	r2, r1
 8003098:	b291      	uxth	r1, r2
 800309a:	2240      	movs	r2, #64	; 0x40
 800309c:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	23b8      	movs	r3, #184	; 0xb8
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	2101      	movs	r1, #1
 80030a6:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2254      	movs	r2, #84	; 0x54
 80030ae:	5a9b      	ldrh	r3, [r3, r2]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	223c      	movs	r2, #60	; 0x3c
 80030b6:	4013      	ands	r3, r2
 80030b8:	0019      	movs	r1, r3
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	23b9      	movs	r3, #185	; 0xb9
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2101      	movs	r1, #1
 80030c6:	0018      	movs	r0, r3
 80030c8:	f001 fc02 	bl	80048d0 <HAL_PCDEx_LPM_Callback>
 80030cc:	e003      	b.n	80030d6 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	0018      	movs	r0, r3
 80030d2:	f008 f9fd 	bl	800b4d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	0018      	movs	r0, r3
 80030dc:	f006 f950 	bl	8009380 <USB_ReadInterrupts>
 80030e0:	0002      	movs	r2, r0
 80030e2:	2380      	movs	r3, #128	; 0x80
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	401a      	ands	r2, r3
 80030e8:	2380      	movs	r3, #128	; 0x80
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d10f      	bne.n	8003110 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2244      	movs	r2, #68	; 0x44
 80030f6:	5a9b      	ldrh	r3, [r3, r2]
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4918      	ldr	r1, [pc, #96]	; (8003160 <HAL_PCD_IRQHandler+0x2f0>)
 8003100:	400a      	ands	r2, r1
 8003102:	b291      	uxth	r1, r2
 8003104:	2244      	movs	r2, #68	; 0x44
 8003106:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	0018      	movs	r0, r3
 800310c:	f008 f9ac 	bl	800b468 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	0018      	movs	r0, r3
 8003116:	f006 f933 	bl	8009380 <USB_ReadInterrupts>
 800311a:	0002      	movs	r2, r0
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	401a      	ands	r2, r3
 8003122:	2380      	movs	r3, #128	; 0x80
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	429a      	cmp	r2, r3
 8003128:	d10b      	bne.n	8003142 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2244      	movs	r2, #68	; 0x44
 8003130:	5a9b      	ldrh	r3, [r3, r2]
 8003132:	b29a      	uxth	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	490a      	ldr	r1, [pc, #40]	; (8003164 <HAL_PCD_IRQHandler+0x2f4>)
 800313a:	400a      	ands	r2, r1
 800313c:	b291      	uxth	r1, r2
 800313e:	2244      	movs	r2, #68	; 0x44
 8003140:	5299      	strh	r1, [r3, r2]
  }
}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	46bd      	mov	sp, r7
 8003146:	b002      	add	sp, #8
 8003148:	bd80      	pop	{r7, pc}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	fffffbff 	.word	0xfffffbff
 8003150:	ffffbfff 	.word	0xffffbfff
 8003154:	ffffdfff 	.word	0xffffdfff
 8003158:	ffffefff 	.word	0xffffefff
 800315c:	fffff7ff 	.word	0xfffff7ff
 8003160:	fffffdff 	.word	0xfffffdff
 8003164:	fffffeff 	.word	0xfffffeff

08003168 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	000a      	movs	r2, r1
 8003172:	1cfb      	adds	r3, r7, #3
 8003174:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	23aa      	movs	r3, #170	; 0xaa
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	5cd3      	ldrb	r3, [r2, r3]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_PCD_SetAddress+0x1e>
 8003182:	2302      	movs	r3, #2
 8003184:	e017      	b.n	80031b6 <HAL_PCD_SetAddress+0x4e>
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	23aa      	movs	r3, #170	; 0xaa
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	2101      	movs	r1, #1
 800318e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	1cfa      	adds	r2, r7, #3
 8003194:	2124      	movs	r1, #36	; 0x24
 8003196:	7812      	ldrb	r2, [r2, #0]
 8003198:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	1cfb      	adds	r3, r7, #3
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	0019      	movs	r1, r3
 80031a4:	0010      	movs	r0, r2
 80031a6:	f006 f8c1 	bl	800932c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	23aa      	movs	r3, #170	; 0xaa
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	2100      	movs	r1, #0
 80031b2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	0018      	movs	r0, r3
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b002      	add	sp, #8
 80031bc:	bd80      	pop	{r7, pc}

080031be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031be:	b590      	push	{r4, r7, lr}
 80031c0:	b085      	sub	sp, #20
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	000c      	movs	r4, r1
 80031c8:	0010      	movs	r0, r2
 80031ca:	0019      	movs	r1, r3
 80031cc:	1cfb      	adds	r3, r7, #3
 80031ce:	1c22      	adds	r2, r4, #0
 80031d0:	701a      	strb	r2, [r3, #0]
 80031d2:	003b      	movs	r3, r7
 80031d4:	1c02      	adds	r2, r0, #0
 80031d6:	801a      	strh	r2, [r3, #0]
 80031d8:	1cbb      	adds	r3, r7, #2
 80031da:	1c0a      	adds	r2, r1, #0
 80031dc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80031de:	230b      	movs	r3, #11
 80031e0:	18fb      	adds	r3, r7, r3
 80031e2:	2200      	movs	r2, #0
 80031e4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031e6:	1cfb      	adds	r3, r7, #3
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	b25b      	sxtb	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	da0f      	bge.n	8003210 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031f0:	1cfb      	adds	r3, r7, #3
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2207      	movs	r2, #7
 80031f6:	4013      	ands	r3, r2
 80031f8:	1c5a      	adds	r2, r3, #1
 80031fa:	0013      	movs	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	189b      	adds	r3, r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	18d3      	adds	r3, r2, r3
 8003206:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2201      	movs	r2, #1
 800320c:	705a      	strb	r2, [r3, #1]
 800320e:	e00f      	b.n	8003230 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003210:	1cfb      	adds	r3, r7, #3
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2207      	movs	r2, #7
 8003216:	401a      	ands	r2, r3
 8003218:	0013      	movs	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	189b      	adds	r3, r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	3369      	adds	r3, #105	; 0x69
 8003222:	33ff      	adds	r3, #255	; 0xff
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	18d3      	adds	r3, r2, r3
 8003228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003230:	1cfb      	adds	r3, r7, #3
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2207      	movs	r2, #7
 8003236:	4013      	ands	r3, r2
 8003238:	b2da      	uxtb	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800323e:	003b      	movs	r3, r7
 8003240:	881a      	ldrh	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1cba      	adds	r2, r7, #2
 800324a:	7812      	ldrb	r2, [r2, #0]
 800324c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	785b      	ldrb	r3, [r3, #1]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d004      	beq.n	8003260 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003260:	1cbb      	adds	r3, r7, #2
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d102      	bne.n	800326e <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	23aa      	movs	r3, #170	; 0xaa
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	5cd3      	ldrb	r3, [r2, r3]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_PCD_EP_Open+0xc0>
 800327a:	2302      	movs	r3, #2
 800327c:	e013      	b.n	80032a6 <HAL_PCD_EP_Open+0xe8>
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	23aa      	movs	r3, #170	; 0xaa
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	2101      	movs	r1, #1
 8003286:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	0011      	movs	r1, r2
 8003290:	0018      	movs	r0, r3
 8003292:	f004 f95b 	bl	800754c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	23aa      	movs	r3, #170	; 0xaa
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	2100      	movs	r1, #0
 800329e:	54d1      	strb	r1, [r2, r3]

  return ret;
 80032a0:	230b      	movs	r3, #11
 80032a2:	18fb      	adds	r3, r7, r3
 80032a4:	781b      	ldrb	r3, [r3, #0]
}
 80032a6:	0018      	movs	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b005      	add	sp, #20
 80032ac:	bd90      	pop	{r4, r7, pc}

080032ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b084      	sub	sp, #16
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
 80032b6:	000a      	movs	r2, r1
 80032b8:	1cfb      	adds	r3, r7, #3
 80032ba:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80032bc:	1cfb      	adds	r3, r7, #3
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	b25b      	sxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	da0f      	bge.n	80032e6 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c6:	1cfb      	adds	r3, r7, #3
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2207      	movs	r2, #7
 80032cc:	4013      	ands	r3, r2
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	0013      	movs	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	189b      	adds	r3, r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	18d3      	adds	r3, r2, r3
 80032dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2201      	movs	r2, #1
 80032e2:	705a      	strb	r2, [r3, #1]
 80032e4:	e00f      	b.n	8003306 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032e6:	1cfb      	adds	r3, r7, #3
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2207      	movs	r2, #7
 80032ec:	401a      	ands	r2, r3
 80032ee:	0013      	movs	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	189b      	adds	r3, r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	3369      	adds	r3, #105	; 0x69
 80032f8:	33ff      	adds	r3, #255	; 0xff
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	18d3      	adds	r3, r2, r3
 80032fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003306:	1cfb      	adds	r3, r7, #3
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2207      	movs	r2, #7
 800330c:	4013      	ands	r3, r2
 800330e:	b2da      	uxtb	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	23aa      	movs	r3, #170	; 0xaa
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	5cd3      	ldrb	r3, [r2, r3]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d101      	bne.n	8003324 <HAL_PCD_EP_Close+0x76>
 8003320:	2302      	movs	r3, #2
 8003322:	e011      	b.n	8003348 <HAL_PCD_EP_Close+0x9a>
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	23aa      	movs	r3, #170	; 0xaa
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	2101      	movs	r1, #1
 800332c:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	0011      	movs	r1, r2
 8003336:	0018      	movs	r0, r3
 8003338:	f004 fc7c 	bl	8007c34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	23aa      	movs	r3, #170	; 0xaa
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	2100      	movs	r1, #0
 8003344:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	0018      	movs	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	b004      	add	sp, #16
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	607a      	str	r2, [r7, #4]
 800335a:	603b      	str	r3, [r7, #0]
 800335c:	200b      	movs	r0, #11
 800335e:	183b      	adds	r3, r7, r0
 8003360:	1c0a      	adds	r2, r1, #0
 8003362:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003364:	0001      	movs	r1, r0
 8003366:	187b      	adds	r3, r7, r1
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2207      	movs	r2, #7
 800336c:	401a      	ands	r2, r3
 800336e:	0013      	movs	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	189b      	adds	r3, r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	3369      	adds	r3, #105	; 0x69
 8003378:	33ff      	adds	r3, #255	; 0xff
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	18d3      	adds	r3, r2, r3
 800337e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2200      	movs	r2, #0
 8003390:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2200      	movs	r2, #0
 8003396:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003398:	187b      	adds	r3, r7, r1
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2207      	movs	r2, #7
 800339e:	4013      	ands	r3, r2
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033a6:	187b      	adds	r3, r7, r1
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2207      	movs	r2, #7
 80033ac:	4013      	ands	r3, r2
 80033ae:	d107      	bne.n	80033c0 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	0011      	movs	r1, r2
 80033b8:	0018      	movs	r0, r3
 80033ba:	f004 fdfb 	bl	8007fb4 <USB_EPStartXfer>
 80033be:	e006      	b.n	80033ce <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	0011      	movs	r1, r2
 80033c8:	0018      	movs	r0, r3
 80033ca:	f004 fdf3 	bl	8007fb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	0018      	movs	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b006      	add	sp, #24
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	000a      	movs	r2, r1
 80033e2:	1cfb      	adds	r3, r7, #3
 80033e4:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033e6:	1cfb      	adds	r3, r7, #3
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2207      	movs	r2, #7
 80033ec:	401a      	ands	r2, r3
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	23c2      	movs	r3, #194	; 0xc2
 80033f2:	0059      	lsls	r1, r3, #1
 80033f4:	0013      	movs	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	189b      	adds	r3, r3, r2
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	18c3      	adds	r3, r0, r3
 80033fe:	185b      	adds	r3, r3, r1
 8003400:	681b      	ldr	r3, [r3, #0]
}
 8003402:	0018      	movs	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	b002      	add	sp, #8
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b086      	sub	sp, #24
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	603b      	str	r3, [r7, #0]
 8003416:	200b      	movs	r0, #11
 8003418:	183b      	adds	r3, r7, r0
 800341a:	1c0a      	adds	r2, r1, #0
 800341c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800341e:	183b      	adds	r3, r7, r0
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2207      	movs	r2, #7
 8003424:	4013      	ands	r3, r2
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	0013      	movs	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	189b      	adds	r3, r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	18d3      	adds	r3, r2, r3
 8003434:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2224      	movs	r2, #36	; 0x24
 8003446:	2101      	movs	r1, #1
 8003448:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2200      	movs	r2, #0
 8003454:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2201      	movs	r2, #1
 800345a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800345c:	183b      	adds	r3, r7, r0
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2207      	movs	r2, #7
 8003462:	4013      	ands	r3, r2
 8003464:	b2da      	uxtb	r2, r3
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800346a:	183b      	adds	r3, r7, r0
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2207      	movs	r2, #7
 8003470:	4013      	ands	r3, r2
 8003472:	d107      	bne.n	8003484 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	0011      	movs	r1, r2
 800347c:	0018      	movs	r0, r3
 800347e:	f004 fd99 	bl	8007fb4 <USB_EPStartXfer>
 8003482:	e006      	b.n	8003492 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	0011      	movs	r1, r2
 800348c:	0018      	movs	r0, r3
 800348e:	f004 fd91 	bl	8007fb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	0018      	movs	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	b006      	add	sp, #24
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	000a      	movs	r2, r1
 80034a6:	1cfb      	adds	r3, r7, #3
 80034a8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034aa:	1cfb      	adds	r3, r7, #3
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2207      	movs	r2, #7
 80034b0:	401a      	ands	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d901      	bls.n	80034be <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e046      	b.n	800354c <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034be:	1cfb      	adds	r3, r7, #3
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	b25b      	sxtb	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	da0f      	bge.n	80034e8 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034c8:	1cfb      	adds	r3, r7, #3
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2207      	movs	r2, #7
 80034ce:	4013      	ands	r3, r2
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	0013      	movs	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	189b      	adds	r3, r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	18d3      	adds	r3, r2, r3
 80034de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	705a      	strb	r2, [r3, #1]
 80034e6:	e00d      	b.n	8003504 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80034e8:	1cfb      	adds	r3, r7, #3
 80034ea:	781a      	ldrb	r2, [r3, #0]
 80034ec:	0013      	movs	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	189b      	adds	r3, r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	3369      	adds	r3, #105	; 0x69
 80034f6:	33ff      	adds	r3, #255	; 0xff
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	18d3      	adds	r3, r2, r3
 80034fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2201      	movs	r2, #1
 8003508:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800350a:	1cfb      	adds	r3, r7, #3
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2207      	movs	r2, #7
 8003510:	4013      	ands	r3, r2
 8003512:	b2da      	uxtb	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	23aa      	movs	r3, #170	; 0xaa
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	5cd3      	ldrb	r3, [r2, r3]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_PCD_EP_SetStall+0x8c>
 8003524:	2302      	movs	r3, #2
 8003526:	e011      	b.n	800354c <HAL_PCD_EP_SetStall+0xb0>
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	23aa      	movs	r3, #170	; 0xaa
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	2101      	movs	r1, #1
 8003530:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	0011      	movs	r1, r2
 800353a:	0018      	movs	r0, r3
 800353c:	f005 fdf4 	bl	8009128 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	23aa      	movs	r3, #170	; 0xaa
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	2100      	movs	r1, #0
 8003548:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	0018      	movs	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	b004      	add	sp, #16
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	000a      	movs	r2, r1
 800355e:	1cfb      	adds	r3, r7, #3
 8003560:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003562:	1cfb      	adds	r3, r7, #3
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	220f      	movs	r2, #15
 8003568:	401a      	ands	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	429a      	cmp	r2, r3
 8003570:	d901      	bls.n	8003576 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e048      	b.n	8003608 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003576:	1cfb      	adds	r3, r7, #3
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	b25b      	sxtb	r3, r3
 800357c:	2b00      	cmp	r3, #0
 800357e:	da0f      	bge.n	80035a0 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003580:	1cfb      	adds	r3, r7, #3
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2207      	movs	r2, #7
 8003586:	4013      	ands	r3, r2
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	0013      	movs	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	189b      	adds	r3, r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	18d3      	adds	r3, r2, r3
 8003596:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2201      	movs	r2, #1
 800359c:	705a      	strb	r2, [r3, #1]
 800359e:	e00f      	b.n	80035c0 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035a0:	1cfb      	adds	r3, r7, #3
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2207      	movs	r2, #7
 80035a6:	401a      	ands	r2, r3
 80035a8:	0013      	movs	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	189b      	adds	r3, r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	3369      	adds	r3, #105	; 0x69
 80035b2:	33ff      	adds	r3, #255	; 0xff
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	18d3      	adds	r3, r2, r3
 80035b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035c6:	1cfb      	adds	r3, r7, #3
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2207      	movs	r2, #7
 80035cc:	4013      	ands	r3, r2
 80035ce:	b2da      	uxtb	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	23aa      	movs	r3, #170	; 0xaa
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	5cd3      	ldrb	r3, [r2, r3]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_PCD_EP_ClrStall+0x90>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e011      	b.n	8003608 <HAL_PCD_EP_ClrStall+0xb4>
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	23aa      	movs	r3, #170	; 0xaa
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	2101      	movs	r1, #1
 80035ec:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	0011      	movs	r1, r2
 80035f6:	0018      	movs	r0, r3
 80035f8:	f005 fde6 	bl	80091c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	23aa      	movs	r3, #170	; 0xaa
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	2100      	movs	r1, #0
 8003604:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	0018      	movs	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	b004      	add	sp, #16
 800360e:	bd80      	pop	{r7, pc}

08003610 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003610:	b5b0      	push	{r4, r5, r7, lr}
 8003612:	b096      	sub	sp, #88	; 0x58
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003618:	f000 fbd8 	bl	8003dcc <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	2056      	movs	r0, #86	; 0x56
 8003622:	183b      	adds	r3, r7, r0
 8003624:	2144      	movs	r1, #68	; 0x44
 8003626:	5a52      	ldrh	r2, [r2, r1]
 8003628:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800362a:	183b      	adds	r3, r7, r0
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	b2da      	uxtb	r2, r3
 8003630:	2455      	movs	r4, #85	; 0x55
 8003632:	193b      	adds	r3, r7, r4
 8003634:	210f      	movs	r1, #15
 8003636:	400a      	ands	r2, r1
 8003638:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800363a:	193b      	adds	r3, r7, r4
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d000      	beq.n	8003644 <PCD_EP_ISR_Handler+0x34>
 8003642:	e179      	b.n	8003938 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003644:	183b      	adds	r3, r7, r0
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	2210      	movs	r2, #16
 800364a:	4013      	ands	r3, r2
 800364c:	d154      	bne.n	80036f8 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	b29a      	uxth	r2, r3
 8003656:	200e      	movs	r0, #14
 8003658:	183b      	adds	r3, r7, r0
 800365a:	49af      	ldr	r1, [pc, #700]	; (8003918 <PCD_EP_ISR_Handler+0x308>)
 800365c:	400a      	ands	r2, r1
 800365e:	801a      	strh	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	183a      	adds	r2, r7, r0
 8003666:	8812      	ldrh	r2, [r2, #0]
 8003668:	49ac      	ldr	r1, [pc, #688]	; (800391c <PCD_EP_ISR_Handler+0x30c>)
 800366a:	430a      	orrs	r2, r1
 800366c:	b292      	uxth	r2, r2
 800366e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3328      	adds	r3, #40	; 0x28
 8003674:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2250      	movs	r2, #80	; 0x50
 800367c:	5a9b      	ldrh	r3, [r3, r2]
 800367e:	b29b      	uxth	r3, r3
 8003680:	001a      	movs	r2, r3
 8003682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	18d2      	adds	r2, r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	18d3      	adds	r3, r2, r3
 8003690:	4aa3      	ldr	r2, [pc, #652]	; (8003920 <PCD_EP_ISR_Handler+0x310>)
 8003692:	4694      	mov	ip, r2
 8003694:	4463      	add	r3, ip
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	059b      	lsls	r3, r3, #22
 800369a:	0d9a      	lsrs	r2, r3, #22
 800369c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800369e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80036a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a2:	695a      	ldr	r2, [r3, #20]
 80036a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036a6:	69db      	ldr	r3, [r3, #28]
 80036a8:	18d2      	adds	r2, r2, r3
 80036aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ac:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2100      	movs	r1, #0
 80036b2:	0018      	movs	r0, r3
 80036b4:	f007 feba 	bl	800b42c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2224      	movs	r2, #36	; 0x24
 80036bc:	5c9b      	ldrb	r3, [r3, r2]
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <PCD_EP_ISR_Handler+0xb8>
 80036c4:	f000 fb82 	bl	8003dcc <PCD_EP_ISR_Handler+0x7bc>
 80036c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <PCD_EP_ISR_Handler+0xc4>
 80036d0:	f000 fb7c 	bl	8003dcc <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2224      	movs	r2, #36	; 0x24
 80036d8:	5c9b      	ldrb	r3, [r3, r2]
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2280      	movs	r2, #128	; 0x80
 80036de:	4252      	negs	r2, r2
 80036e0:	4313      	orrs	r3, r2
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	b291      	uxth	r1, r2
 80036ea:	224c      	movs	r2, #76	; 0x4c
 80036ec:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2224      	movs	r2, #36	; 0x24
 80036f2:	2100      	movs	r1, #0
 80036f4:	5499      	strb	r1, [r3, r2]
 80036f6:	e369      	b.n	8003dcc <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3369      	adds	r3, #105	; 0x69
 80036fc:	33ff      	adds	r3, #255	; 0xff
 80036fe:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	2152      	movs	r1, #82	; 0x52
 8003706:	187b      	adds	r3, r7, r1
 8003708:	8812      	ldrh	r2, [r2, #0]
 800370a:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800370c:	187b      	adds	r3, r7, r1
 800370e:	881a      	ldrh	r2, [r3, #0]
 8003710:	2380      	movs	r3, #128	; 0x80
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	4013      	ands	r3, r2
 8003716:	d037      	beq.n	8003788 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2250      	movs	r2, #80	; 0x50
 800371e:	5a9b      	ldrh	r3, [r3, r2]
 8003720:	b29b      	uxth	r3, r3
 8003722:	001a      	movs	r2, r3
 8003724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	18d2      	adds	r2, r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	18d3      	adds	r3, r2, r3
 8003732:	4a7c      	ldr	r2, [pc, #496]	; (8003924 <PCD_EP_ISR_Handler+0x314>)
 8003734:	4694      	mov	ip, r2
 8003736:	4463      	add	r3, ip
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	059b      	lsls	r3, r3, #22
 800373c:	0d9a      	lsrs	r2, r3, #22
 800373e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003740:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	22ac      	movs	r2, #172	; 0xac
 800374a:	0092      	lsls	r2, r2, #2
 800374c:	1899      	adds	r1, r3, r2
 800374e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003750:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003754:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003756:	b29b      	uxth	r3, r3
 8003758:	f005 fe64 	bl	8009424 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	b29a      	uxth	r2, r3
 8003764:	2010      	movs	r0, #16
 8003766:	183b      	adds	r3, r7, r0
 8003768:	496f      	ldr	r1, [pc, #444]	; (8003928 <PCD_EP_ISR_Handler+0x318>)
 800376a:	400a      	ands	r2, r1
 800376c:	801a      	strh	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	183a      	adds	r2, r7, r0
 8003774:	8812      	ldrh	r2, [r2, #0]
 8003776:	2180      	movs	r1, #128	; 0x80
 8003778:	430a      	orrs	r2, r1
 800377a:	b292      	uxth	r2, r2
 800377c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	0018      	movs	r0, r3
 8003782:	f007 fe1d 	bl	800b3c0 <HAL_PCD_SetupStageCallback>
 8003786:	e321      	b.n	8003dcc <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003788:	2352      	movs	r3, #82	; 0x52
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	2200      	movs	r2, #0
 800378e:	5e9b      	ldrsh	r3, [r3, r2]
 8003790:	2b00      	cmp	r3, #0
 8003792:	db00      	blt.n	8003796 <PCD_EP_ISR_Handler+0x186>
 8003794:	e31a      	b.n	8003dcc <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	b29a      	uxth	r2, r3
 800379e:	201e      	movs	r0, #30
 80037a0:	183b      	adds	r3, r7, r0
 80037a2:	4961      	ldr	r1, [pc, #388]	; (8003928 <PCD_EP_ISR_Handler+0x318>)
 80037a4:	400a      	ands	r2, r1
 80037a6:	801a      	strh	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	183a      	adds	r2, r7, r0
 80037ae:	8812      	ldrh	r2, [r2, #0]
 80037b0:	2180      	movs	r1, #128	; 0x80
 80037b2:	430a      	orrs	r2, r1
 80037b4:	b292      	uxth	r2, r2
 80037b6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2250      	movs	r2, #80	; 0x50
 80037be:	5a9b      	ldrh	r3, [r3, r2]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	001a      	movs	r2, r3
 80037c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	18d2      	adds	r2, r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	18d3      	adds	r3, r2, r3
 80037d2:	4a54      	ldr	r2, [pc, #336]	; (8003924 <PCD_EP_ISR_Handler+0x314>)
 80037d4:	4694      	mov	ip, r2
 80037d6:	4463      	add	r3, ip
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	059b      	lsls	r3, r3, #22
 80037dc:	0d9a      	lsrs	r2, r3, #22
 80037de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80037e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01a      	beq.n	8003820 <PCD_EP_ISR_Handler+0x210>
 80037ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d016      	beq.n	8003820 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f8:	6959      	ldr	r1, [r3, #20]
 80037fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037fc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80037fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003800:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003802:	b29b      	uxth	r3, r3
 8003804:	f005 fe0e 	bl	8009424 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800380a:	695a      	ldr	r2, [r3, #20]
 800380c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	18d2      	adds	r2, r2, r3
 8003812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003814:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2100      	movs	r1, #0
 800381a:	0018      	movs	r0, r3
 800381c:	f007 fde5 	bl	800b3ea <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	b29b      	uxth	r3, r3
 8003828:	001a      	movs	r2, r3
 800382a:	2380      	movs	r3, #128	; 0x80
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	4013      	ands	r3, r2
 8003830:	d000      	beq.n	8003834 <PCD_EP_ISR_Handler+0x224>
 8003832:	e2cb      	b.n	8003dcc <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	61bb      	str	r3, [r7, #24]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2250      	movs	r2, #80	; 0x50
 8003840:	5a9b      	ldrh	r3, [r3, r2]
 8003842:	b29b      	uxth	r3, r3
 8003844:	001a      	movs	r2, r3
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	189b      	adds	r3, r3, r2
 800384a:	61bb      	str	r3, [r7, #24]
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	4a35      	ldr	r2, [pc, #212]	; (8003924 <PCD_EP_ISR_Handler+0x314>)
 8003850:	4694      	mov	ip, r2
 8003852:	4463      	add	r3, ip
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d110      	bne.n	8003880 <PCD_EP_ISR_Handler+0x270>
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	b29b      	uxth	r3, r3
 8003864:	4a31      	ldr	r2, [pc, #196]	; (800392c <PCD_EP_ISR_Handler+0x31c>)
 8003866:	4013      	ands	r3, r2
 8003868:	b29a      	uxth	r2, r3
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	801a      	strh	r2, [r3, #0]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	b29b      	uxth	r3, r3
 8003874:	4a29      	ldr	r2, [pc, #164]	; (800391c <PCD_EP_ISR_Handler+0x30c>)
 8003876:	4313      	orrs	r3, r2
 8003878:	b29a      	uxth	r2, r3
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	801a      	strh	r2, [r3, #0]
 800387e:	e02b      	b.n	80038d8 <PCD_EP_ISR_Handler+0x2c8>
 8003880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	2b3e      	cmp	r3, #62	; 0x3e
 8003886:	d812      	bhi.n	80038ae <PCD_EP_ISR_Handler+0x29e>
 8003888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	085b      	lsrs	r3, r3, #1
 800388e:	647b      	str	r3, [r7, #68]	; 0x44
 8003890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	2201      	movs	r2, #1
 8003896:	4013      	ands	r3, r2
 8003898:	d002      	beq.n	80038a0 <PCD_EP_ISR_Handler+0x290>
 800389a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800389c:	3301      	adds	r3, #1
 800389e:	647b      	str	r3, [r7, #68]	; 0x44
 80038a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	029b      	lsls	r3, r3, #10
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	801a      	strh	r2, [r3, #0]
 80038ac:	e014      	b.n	80038d8 <PCD_EP_ISR_Handler+0x2c8>
 80038ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	647b      	str	r3, [r7, #68]	; 0x44
 80038b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	221f      	movs	r2, #31
 80038bc:	4013      	ands	r3, r2
 80038be:	d102      	bne.n	80038c6 <PCD_EP_ISR_Handler+0x2b6>
 80038c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038c2:	3b01      	subs	r3, #1
 80038c4:	647b      	str	r3, [r7, #68]	; 0x44
 80038c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	029b      	lsls	r3, r3, #10
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	4a13      	ldr	r2, [pc, #76]	; (800391c <PCD_EP_ISR_Handler+0x30c>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	b29a      	uxth	r2, r3
 80038e0:	2012      	movs	r0, #18
 80038e2:	183b      	adds	r3, r7, r0
 80038e4:	4912      	ldr	r1, [pc, #72]	; (8003930 <PCD_EP_ISR_Handler+0x320>)
 80038e6:	400a      	ands	r2, r1
 80038e8:	801a      	strh	r2, [r3, #0]
 80038ea:	183b      	adds	r3, r7, r0
 80038ec:	183a      	adds	r2, r7, r0
 80038ee:	8812      	ldrh	r2, [r2, #0]
 80038f0:	2180      	movs	r1, #128	; 0x80
 80038f2:	0149      	lsls	r1, r1, #5
 80038f4:	404a      	eors	r2, r1
 80038f6:	801a      	strh	r2, [r3, #0]
 80038f8:	183b      	adds	r3, r7, r0
 80038fa:	183a      	adds	r2, r7, r0
 80038fc:	8812      	ldrh	r2, [r2, #0]
 80038fe:	2180      	movs	r1, #128	; 0x80
 8003900:	0189      	lsls	r1, r1, #6
 8003902:	404a      	eors	r2, r1
 8003904:	801a      	strh	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	183a      	adds	r2, r7, r0
 800390c:	8812      	ldrh	r2, [r2, #0]
 800390e:	4909      	ldr	r1, [pc, #36]	; (8003934 <PCD_EP_ISR_Handler+0x324>)
 8003910:	430a      	orrs	r2, r1
 8003912:	b292      	uxth	r2, r2
 8003914:	801a      	strh	r2, [r3, #0]
 8003916:	e259      	b.n	8003dcc <PCD_EP_ISR_Handler+0x7bc>
 8003918:	ffff8f0f 	.word	0xffff8f0f
 800391c:	ffff8000 	.word	0xffff8000
 8003920:	00000402 	.word	0x00000402
 8003924:	00000406 	.word	0x00000406
 8003928:	00000f8f 	.word	0x00000f8f
 800392c:	ffff83ff 	.word	0xffff83ff
 8003930:	ffffbf8f 	.word	0xffffbf8f
 8003934:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	001a      	movs	r2, r3
 800393e:	2055      	movs	r0, #85	; 0x55
 8003940:	183b      	adds	r3, r7, r0
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	18d2      	adds	r2, r2, r3
 8003948:	2152      	movs	r1, #82	; 0x52
 800394a:	187b      	adds	r3, r7, r1
 800394c:	8812      	ldrh	r2, [r2, #0]
 800394e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003950:	187b      	adds	r3, r7, r1
 8003952:	2200      	movs	r2, #0
 8003954:	5e9b      	ldrsh	r3, [r3, r2]
 8003956:	2b00      	cmp	r3, #0
 8003958:	db00      	blt.n	800395c <PCD_EP_ISR_Handler+0x34c>
 800395a:	e0fa      	b.n	8003b52 <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	001a      	movs	r2, r3
 8003962:	183b      	adds	r3, r7, r0
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	18d3      	adds	r3, r2, r3
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	b29a      	uxth	r2, r3
 800396e:	2450      	movs	r4, #80	; 0x50
 8003970:	193b      	adds	r3, r7, r4
 8003972:	49cf      	ldr	r1, [pc, #828]	; (8003cb0 <PCD_EP_ISR_Handler+0x6a0>)
 8003974:	400a      	ands	r2, r1
 8003976:	801a      	strh	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	001a      	movs	r2, r3
 800397e:	183b      	adds	r3, r7, r0
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	18d3      	adds	r3, r2, r3
 8003986:	193a      	adds	r2, r7, r4
 8003988:	8812      	ldrh	r2, [r2, #0]
 800398a:	2180      	movs	r1, #128	; 0x80
 800398c:	430a      	orrs	r2, r1
 800398e:	b292      	uxth	r2, r2
 8003990:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003992:	183b      	adds	r3, r7, r0
 8003994:	781a      	ldrb	r2, [r3, #0]
 8003996:	0013      	movs	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	189b      	adds	r3, r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	3369      	adds	r3, #105	; 0x69
 80039a0:	33ff      	adds	r3, #255	; 0xff
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	18d3      	adds	r3, r2, r3
 80039a6:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80039a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039aa:	7b1b      	ldrb	r3, [r3, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d125      	bne.n	80039fc <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2250      	movs	r2, #80	; 0x50
 80039b6:	5a9b      	ldrh	r3, [r3, r2]
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	001a      	movs	r2, r3
 80039bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	18d2      	adds	r2, r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	18d3      	adds	r3, r2, r3
 80039ca:	4aba      	ldr	r2, [pc, #744]	; (8003cb4 <PCD_EP_ISR_Handler+0x6a4>)
 80039cc:	4694      	mov	ip, r2
 80039ce:	4463      	add	r3, ip
 80039d0:	881a      	ldrh	r2, [r3, #0]
 80039d2:	2448      	movs	r4, #72	; 0x48
 80039d4:	193b      	adds	r3, r7, r4
 80039d6:	0592      	lsls	r2, r2, #22
 80039d8:	0d92      	lsrs	r2, r2, #22
 80039da:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80039dc:	193b      	adds	r3, r7, r4
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d100      	bne.n	80039e6 <PCD_EP_ISR_Handler+0x3d6>
 80039e4:	e08d      	b.n	8003b02 <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6818      	ldr	r0, [r3, #0]
 80039ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039ec:	6959      	ldr	r1, [r3, #20]
 80039ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f0:	88da      	ldrh	r2, [r3, #6]
 80039f2:	193b      	adds	r3, r7, r4
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	f005 fd15 	bl	8009424 <USB_ReadPMA>
 80039fa:	e082      	b.n	8003b02 <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80039fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039fe:	78db      	ldrb	r3, [r3, #3]
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d10c      	bne.n	8003a1e <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003a04:	2348      	movs	r3, #72	; 0x48
 8003a06:	18fc      	adds	r4, r7, r3
 8003a08:	2352      	movs	r3, #82	; 0x52
 8003a0a:	18fb      	adds	r3, r7, r3
 8003a0c:	881a      	ldrh	r2, [r3, #0]
 8003a0e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	0018      	movs	r0, r3
 8003a14:	f000 f9ee 	bl	8003df4 <HAL_PCD_EP_DB_Receive>
 8003a18:	0003      	movs	r3, r0
 8003a1a:	8023      	strh	r3, [r4, #0]
 8003a1c:	e071      	b.n	8003b02 <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	001a      	movs	r2, r3
 8003a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	18d3      	adds	r3, r2, r3
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	204a      	movs	r0, #74	; 0x4a
 8003a32:	183b      	adds	r3, r7, r0
 8003a34:	49a0      	ldr	r1, [pc, #640]	; (8003cb8 <PCD_EP_ISR_Handler+0x6a8>)
 8003a36:	400a      	ands	r2, r1
 8003a38:	801a      	strh	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	001a      	movs	r2, r3
 8003a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	18d3      	adds	r3, r2, r3
 8003a48:	183a      	adds	r2, r7, r0
 8003a4a:	8812      	ldrh	r2, [r2, #0]
 8003a4c:	499b      	ldr	r1, [pc, #620]	; (8003cbc <PCD_EP_ISR_Handler+0x6ac>)
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	b292      	uxth	r2, r2
 8003a52:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	001a      	movs	r2, r3
 8003a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	18d3      	adds	r3, r2, r3
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	001a      	movs	r2, r3
 8003a68:	2380      	movs	r3, #128	; 0x80
 8003a6a:	01db      	lsls	r3, r3, #7
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d024      	beq.n	8003aba <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2250      	movs	r2, #80	; 0x50
 8003a76:	5a9b      	ldrh	r3, [r3, r2]
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	001a      	movs	r2, r3
 8003a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	18d2      	adds	r2, r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	18d3      	adds	r3, r2, r3
 8003a8a:	4a8d      	ldr	r2, [pc, #564]	; (8003cc0 <PCD_EP_ISR_Handler+0x6b0>)
 8003a8c:	4694      	mov	ip, r2
 8003a8e:	4463      	add	r3, ip
 8003a90:	881a      	ldrh	r2, [r3, #0]
 8003a92:	2448      	movs	r4, #72	; 0x48
 8003a94:	193b      	adds	r3, r7, r4
 8003a96:	0592      	lsls	r2, r2, #22
 8003a98:	0d92      	lsrs	r2, r2, #22
 8003a9a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003a9c:	193b      	adds	r3, r7, r4
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d02e      	beq.n	8003b02 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aaa:	6959      	ldr	r1, [r3, #20]
 8003aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aae:	891a      	ldrh	r2, [r3, #8]
 8003ab0:	193b      	adds	r3, r7, r4
 8003ab2:	881b      	ldrh	r3, [r3, #0]
 8003ab4:	f005 fcb6 	bl	8009424 <USB_ReadPMA>
 8003ab8:	e023      	b.n	8003b02 <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2250      	movs	r2, #80	; 0x50
 8003ac0:	5a9b      	ldrh	r3, [r3, r2]
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	001a      	movs	r2, r3
 8003ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	18d2      	adds	r2, r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	18d3      	adds	r3, r2, r3
 8003ad4:	4a77      	ldr	r2, [pc, #476]	; (8003cb4 <PCD_EP_ISR_Handler+0x6a4>)
 8003ad6:	4694      	mov	ip, r2
 8003ad8:	4463      	add	r3, ip
 8003ada:	881a      	ldrh	r2, [r3, #0]
 8003adc:	2448      	movs	r4, #72	; 0x48
 8003ade:	193b      	adds	r3, r7, r4
 8003ae0:	0592      	lsls	r2, r2, #22
 8003ae2:	0d92      	lsrs	r2, r2, #22
 8003ae4:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003ae6:	193b      	adds	r3, r7, r4
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d009      	beq.n	8003b02 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6818      	ldr	r0, [r3, #0]
 8003af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af4:	6959      	ldr	r1, [r3, #20]
 8003af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af8:	895a      	ldrh	r2, [r3, #10]
 8003afa:	193b      	adds	r3, r7, r4
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	f005 fc91 	bl	8009424 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b04:	69da      	ldr	r2, [r3, #28]
 8003b06:	2148      	movs	r1, #72	; 0x48
 8003b08:	187b      	adds	r3, r7, r1
 8003b0a:	881b      	ldrh	r3, [r3, #0]
 8003b0c:	18d2      	adds	r2, r2, r3
 8003b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b10:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b14:	695a      	ldr	r2, [r3, #20]
 8003b16:	187b      	adds	r3, r7, r1
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	18d2      	adds	r2, r2, r3
 8003b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b1e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <PCD_EP_ISR_Handler+0x524>
 8003b28:	187b      	adds	r3, r7, r1
 8003b2a:	881a      	ldrh	r2, [r3, #0]
 8003b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d207      	bcs.n	8003b44 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b36:	781a      	ldrb	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	0011      	movs	r1, r2
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f007 fc54 	bl	800b3ea <HAL_PCD_DataOutStageCallback>
 8003b42:	e006      	b.n	8003b52 <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b4a:	0011      	movs	r1, r2
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f004 fa31 	bl	8007fb4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003b52:	2452      	movs	r4, #82	; 0x52
 8003b54:	193b      	adds	r3, r7, r4
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	2280      	movs	r2, #128	; 0x80
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	d100      	bne.n	8003b60 <PCD_EP_ISR_Handler+0x550>
 8003b5e:	e135      	b.n	8003dcc <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 8003b60:	2055      	movs	r0, #85	; 0x55
 8003b62:	183b      	adds	r3, r7, r0
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	0013      	movs	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	189b      	adds	r3, r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	18d3      	adds	r3, r2, r3
 8003b74:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	001a      	movs	r2, r3
 8003b7c:	183b      	adds	r3, r7, r0
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	18d3      	adds	r3, r2, r3
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	2542      	movs	r5, #66	; 0x42
 8003b8a:	197b      	adds	r3, r7, r5
 8003b8c:	494d      	ldr	r1, [pc, #308]	; (8003cc4 <PCD_EP_ISR_Handler+0x6b4>)
 8003b8e:	400a      	ands	r2, r1
 8003b90:	801a      	strh	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	001a      	movs	r2, r3
 8003b98:	183b      	adds	r3, r7, r0
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	18d3      	adds	r3, r2, r3
 8003ba0:	197a      	adds	r2, r7, r5
 8003ba2:	8812      	ldrh	r2, [r2, #0]
 8003ba4:	4948      	ldr	r1, [pc, #288]	; (8003cc8 <PCD_EP_ISR_Handler+0x6b8>)
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	b292      	uxth	r2, r2
 8003baa:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 8003bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bae:	78db      	ldrb	r3, [r3, #3]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d100      	bne.n	8003bb6 <PCD_EP_ISR_Handler+0x5a6>
 8003bb4:	e0ad      	b.n	8003d12 <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 8003bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb8:	2200      	movs	r2, #0
 8003bba:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003bbc:	193b      	adds	r3, r7, r4
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	2240      	movs	r2, #64	; 0x40
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	d046      	beq.n	8003c54 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc8:	785b      	ldrb	r3, [r3, #1]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d125      	bne.n	8003c1a <PCD_EP_ISR_Handler+0x60a>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2250      	movs	r2, #80	; 0x50
 8003bda:	5a9b      	ldrh	r3, [r3, r2]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	001a      	movs	r2, r3
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	189b      	adds	r3, r3, r2
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
 8003be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	00da      	lsls	r2, r3, #3
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	18d3      	adds	r3, r2, r3
 8003bf0:	4a33      	ldr	r2, [pc, #204]	; (8003cc0 <PCD_EP_ISR_Handler+0x6b0>)
 8003bf2:	4694      	mov	ip, r2
 8003bf4:	4463      	add	r3, ip
 8003bf6:	623b      	str	r3, [r7, #32]
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	4a33      	ldr	r2, [pc, #204]	; (8003ccc <PCD_EP_ISR_Handler+0x6bc>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	801a      	strh	r2, [r3, #0]
 8003c08:	6a3b      	ldr	r3, [r7, #32]
 8003c0a:	881b      	ldrh	r3, [r3, #0]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	4a2e      	ldr	r2, [pc, #184]	; (8003cc8 <PCD_EP_ISR_Handler+0x6b8>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	801a      	strh	r2, [r3, #0]
 8003c18:	e073      	b.n	8003d02 <PCD_EP_ISR_Handler+0x6f2>
 8003c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c1c:	785b      	ldrb	r3, [r3, #1]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d16f      	bne.n	8003d02 <PCD_EP_ISR_Handler+0x6f2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2250      	movs	r2, #80	; 0x50
 8003c2e:	5a9b      	ldrh	r3, [r3, r2]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	001a      	movs	r2, r3
 8003c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c36:	189b      	adds	r3, r3, r2
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	00da      	lsls	r2, r3, #3
 8003c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c42:	18d3      	adds	r3, r2, r3
 8003c44:	4a1e      	ldr	r2, [pc, #120]	; (8003cc0 <PCD_EP_ISR_Handler+0x6b0>)
 8003c46:	4694      	mov	ip, r2
 8003c48:	4463      	add	r3, ip
 8003c4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	2200      	movs	r2, #0
 8003c50:	801a      	strh	r2, [r3, #0]
 8003c52:	e056      	b.n	8003d02 <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c5c:	785b      	ldrb	r3, [r3, #1]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d136      	bne.n	8003cd0 <PCD_EP_ISR_Handler+0x6c0>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	637b      	str	r3, [r7, #52]	; 0x34
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2250      	movs	r2, #80	; 0x50
 8003c6e:	5a9b      	ldrh	r3, [r3, r2]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	001a      	movs	r2, r3
 8003c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c76:	189b      	adds	r3, r3, r2
 8003c78:	637b      	str	r3, [r7, #52]	; 0x34
 8003c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	00da      	lsls	r2, r3, #3
 8003c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c82:	18d3      	adds	r3, r2, r3
 8003c84:	4a0b      	ldr	r2, [pc, #44]	; (8003cb4 <PCD_EP_ISR_Handler+0x6a4>)
 8003c86:	4694      	mov	ip, r2
 8003c88:	4463      	add	r3, ip
 8003c8a:	633b      	str	r3, [r7, #48]	; 0x30
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	4a0e      	ldr	r2, [pc, #56]	; (8003ccc <PCD_EP_ISR_Handler+0x6bc>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	801a      	strh	r2, [r3, #0]
 8003c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	4a09      	ldr	r2, [pc, #36]	; (8003cc8 <PCD_EP_ISR_Handler+0x6b8>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003caa:	801a      	strh	r2, [r3, #0]
 8003cac:	e029      	b.n	8003d02 <PCD_EP_ISR_Handler+0x6f2>
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	00000f8f 	.word	0x00000f8f
 8003cb4:	00000406 	.word	0x00000406
 8003cb8:	ffff8f8f 	.word	0xffff8f8f
 8003cbc:	ffff80c0 	.word	0xffff80c0
 8003cc0:	00000402 	.word	0x00000402
 8003cc4:	ffff8f0f 	.word	0xffff8f0f
 8003cc8:	ffff8000 	.word	0xffff8000
 8003ccc:	ffff83ff 	.word	0xffff83ff
 8003cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd2:	785b      	ldrb	r3, [r3, #1]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d114      	bne.n	8003d02 <PCD_EP_ISR_Handler+0x6f2>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2250      	movs	r2, #80	; 0x50
 8003cde:	5a9b      	ldrh	r3, [r3, r2]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	001a      	movs	r2, r3
 8003ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce6:	189b      	adds	r3, r3, r2
 8003ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	00da      	lsls	r2, r3, #3
 8003cf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf2:	18d3      	adds	r3, r2, r3
 8003cf4:	4a3d      	ldr	r2, [pc, #244]	; (8003dec <PCD_EP_ISR_Handler+0x7dc>)
 8003cf6:	4694      	mov	ip, r2
 8003cf8:	4463      	add	r3, ip
 8003cfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfe:	2200      	movs	r2, #0
 8003d00:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d04:	781a      	ldrb	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	0011      	movs	r1, r2
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	f007 fb8e 	bl	800b42c <HAL_PCD_DataInStageCallback>
 8003d10:	e05c      	b.n	8003dcc <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8003d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d14:	78db      	ldrb	r3, [r3, #3]
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d150      	bne.n	8003dbc <PCD_EP_ISR_Handler+0x7ac>
 8003d1a:	2352      	movs	r3, #82	; 0x52
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	881a      	ldrh	r2, [r3, #0]
 8003d20:	2380      	movs	r3, #128	; 0x80
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	4013      	ands	r3, r2
 8003d26:	d149      	bne.n	8003dbc <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2250      	movs	r2, #80	; 0x50
 8003d2e:	5a9b      	ldrh	r3, [r3, r2]
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	001a      	movs	r2, r3
 8003d34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	18d2      	adds	r2, r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	18d3      	adds	r3, r2, r3
 8003d42:	4a2b      	ldr	r2, [pc, #172]	; (8003df0 <PCD_EP_ISR_Handler+0x7e0>)
 8003d44:	4694      	mov	ip, r2
 8003d46:	4463      	add	r3, ip
 8003d48:	881a      	ldrh	r2, [r3, #0]
 8003d4a:	2140      	movs	r1, #64	; 0x40
 8003d4c:	187b      	adds	r3, r7, r1
 8003d4e:	0592      	lsls	r2, r2, #22
 8003d50:	0d92      	lsrs	r2, r2, #22
 8003d52:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8003d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d56:	699a      	ldr	r2, [r3, #24]
 8003d58:	187b      	adds	r3, r7, r1
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d907      	bls.n	8003d70 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8003d60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d62:	699a      	ldr	r2, [r3, #24]
 8003d64:	187b      	adds	r3, r7, r1
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	1ad2      	subs	r2, r2, r3
 8003d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d6c:	619a      	str	r2, [r3, #24]
 8003d6e:	e002      	b.n	8003d76 <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 8003d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d72:	2200      	movs	r2, #0
 8003d74:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d107      	bne.n	8003d8e <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d80:	781a      	ldrb	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	0011      	movs	r1, r2
 8003d86:	0018      	movs	r0, r3
 8003d88:	f007 fb50 	bl	800b42c <HAL_PCD_DataInStageCallback>
 8003d8c:	e01e      	b.n	8003dcc <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d90:	695a      	ldr	r2, [r3, #20]
 8003d92:	2140      	movs	r1, #64	; 0x40
 8003d94:	187b      	adds	r3, r7, r1
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	18d2      	adds	r2, r2, r3
 8003d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d9c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003d9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da0:	69da      	ldr	r2, [r3, #28]
 8003da2:	187b      	adds	r3, r7, r1
 8003da4:	881b      	ldrh	r3, [r3, #0]
 8003da6:	18d2      	adds	r2, r2, r3
 8003da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003daa:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003db2:	0011      	movs	r1, r2
 8003db4:	0018      	movs	r0, r3
 8003db6:	f004 f8fd 	bl	8007fb4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003dba:	e007      	b.n	8003dcc <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003dbc:	2352      	movs	r3, #82	; 0x52
 8003dbe:	18fb      	adds	r3, r7, r3
 8003dc0:	881a      	ldrh	r2, [r3, #0]
 8003dc2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	f000 f930 	bl	800402c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2244      	movs	r2, #68	; 0x44
 8003dd2:	5a9b      	ldrh	r3, [r3, r2]
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	b21b      	sxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	da01      	bge.n	8003de0 <PCD_EP_ISR_Handler+0x7d0>
 8003ddc:	f7ff fc1e 	bl	800361c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	0018      	movs	r0, r3
 8003de4:	46bd      	mov	sp, r7
 8003de6:	b016      	add	sp, #88	; 0x58
 8003de8:	bdb0      	pop	{r4, r5, r7, pc}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	00000406 	.word	0x00000406
 8003df0:	00000402 	.word	0x00000402

08003df4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003df4:	b590      	push	{r4, r7, lr}
 8003df6:	b089      	sub	sp, #36	; 0x24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	1dbb      	adds	r3, r7, #6
 8003e00:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e02:	1dbb      	adds	r3, r7, #6
 8003e04:	881a      	ldrh	r2, [r3, #0]
 8003e06:	2380      	movs	r3, #128	; 0x80
 8003e08:	01db      	lsls	r3, r3, #7
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	d100      	bne.n	8003e10 <HAL_PCD_EP_DB_Receive+0x1c>
 8003e0e:	e07d      	b.n	8003f0c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2250      	movs	r2, #80	; 0x50
 8003e16:	5a9b      	ldrh	r3, [r3, r2]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	001a      	movs	r2, r3
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	18d2      	adds	r2, r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	18d3      	adds	r3, r2, r3
 8003e2a:	4a7a      	ldr	r2, [pc, #488]	; (8004014 <HAL_PCD_EP_DB_Receive+0x220>)
 8003e2c:	4694      	mov	ip, r2
 8003e2e:	4463      	add	r3, ip
 8003e30:	881a      	ldrh	r2, [r3, #0]
 8003e32:	211a      	movs	r1, #26
 8003e34:	187b      	adds	r3, r7, r1
 8003e36:	0592      	lsls	r2, r2, #22
 8003e38:	0d92      	lsrs	r2, r2, #22
 8003e3a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	699a      	ldr	r2, [r3, #24]
 8003e40:	187b      	adds	r3, r7, r1
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d307      	bcc.n	8003e58 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	699a      	ldr	r2, [r3, #24]
 8003e4c:	187b      	adds	r3, r7, r1
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	1ad2      	subs	r2, r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	619a      	str	r2, [r3, #24]
 8003e56:	e002      	b.n	8003e5e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d121      	bne.n	8003eaa <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	001a      	movs	r2, r3
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	18d3      	adds	r3, r2, r3
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	2018      	movs	r0, #24
 8003e7a:	183b      	adds	r3, r7, r0
 8003e7c:	4966      	ldr	r1, [pc, #408]	; (8004018 <HAL_PCD_EP_DB_Receive+0x224>)
 8003e7e:	400a      	ands	r2, r1
 8003e80:	801a      	strh	r2, [r3, #0]
 8003e82:	183b      	adds	r3, r7, r0
 8003e84:	183a      	adds	r2, r7, r0
 8003e86:	8812      	ldrh	r2, [r2, #0]
 8003e88:	2180      	movs	r1, #128	; 0x80
 8003e8a:	0189      	lsls	r1, r1, #6
 8003e8c:	404a      	eors	r2, r1
 8003e8e:	801a      	strh	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	001a      	movs	r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	18d3      	adds	r3, r2, r3
 8003e9e:	183a      	adds	r2, r7, r0
 8003ea0:	8812      	ldrh	r2, [r2, #0]
 8003ea2:	495e      	ldr	r1, [pc, #376]	; (800401c <HAL_PCD_EP_DB_Receive+0x228>)
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	b292      	uxth	r2, r2
 8003ea8:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003eaa:	1dbb      	adds	r3, r7, #6
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	2240      	movs	r2, #64	; 0x40
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	d01a      	beq.n	8003eea <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	001a      	movs	r2, r3
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	18d3      	adds	r3, r2, r3
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	2016      	movs	r0, #22
 8003ec8:	183b      	adds	r3, r7, r0
 8003eca:	4955      	ldr	r1, [pc, #340]	; (8004020 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003ecc:	400a      	ands	r2, r1
 8003ece:	801a      	strh	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	001a      	movs	r2, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	18d3      	adds	r3, r2, r3
 8003ede:	183a      	adds	r2, r7, r0
 8003ee0:	8812      	ldrh	r2, [r2, #0]
 8003ee2:	4950      	ldr	r1, [pc, #320]	; (8004024 <HAL_PCD_EP_DB_Receive+0x230>)
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	b292      	uxth	r2, r2
 8003ee8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8003eea:	241a      	movs	r4, #26
 8003eec:	193b      	adds	r3, r7, r4
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d100      	bne.n	8003ef6 <HAL_PCD_EP_DB_Receive+0x102>
 8003ef4:	e086      	b.n	8004004 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	6959      	ldr	r1, [r3, #20]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	891a      	ldrh	r2, [r3, #8]
 8003f02:	193b      	adds	r3, r7, r4
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	f005 fa8d 	bl	8009424 <USB_ReadPMA>
 8003f0a:	e07b      	b.n	8004004 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2250      	movs	r2, #80	; 0x50
 8003f12:	5a9b      	ldrh	r3, [r3, r2]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	001a      	movs	r2, r3
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	18d2      	adds	r2, r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	18d3      	adds	r3, r2, r3
 8003f26:	4a40      	ldr	r2, [pc, #256]	; (8004028 <HAL_PCD_EP_DB_Receive+0x234>)
 8003f28:	4694      	mov	ip, r2
 8003f2a:	4463      	add	r3, ip
 8003f2c:	881a      	ldrh	r2, [r3, #0]
 8003f2e:	211a      	movs	r1, #26
 8003f30:	187b      	adds	r3, r7, r1
 8003f32:	0592      	lsls	r2, r2, #22
 8003f34:	0d92      	lsrs	r2, r2, #22
 8003f36:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	699a      	ldr	r2, [r3, #24]
 8003f3c:	187b      	adds	r3, r7, r1
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d307      	bcc.n	8003f54 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	699a      	ldr	r2, [r3, #24]
 8003f48:	187b      	adds	r3, r7, r1
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	1ad2      	subs	r2, r2, r3
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	619a      	str	r2, [r3, #24]
 8003f52:	e002      	b.n	8003f5a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2200      	movs	r2, #0
 8003f58:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d121      	bne.n	8003fa6 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	001a      	movs	r2, r3
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	18d3      	adds	r3, r2, r3
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	201e      	movs	r0, #30
 8003f76:	183b      	adds	r3, r7, r0
 8003f78:	4927      	ldr	r1, [pc, #156]	; (8004018 <HAL_PCD_EP_DB_Receive+0x224>)
 8003f7a:	400a      	ands	r2, r1
 8003f7c:	801a      	strh	r2, [r3, #0]
 8003f7e:	183b      	adds	r3, r7, r0
 8003f80:	183a      	adds	r2, r7, r0
 8003f82:	8812      	ldrh	r2, [r2, #0]
 8003f84:	2180      	movs	r1, #128	; 0x80
 8003f86:	0189      	lsls	r1, r1, #6
 8003f88:	404a      	eors	r2, r1
 8003f8a:	801a      	strh	r2, [r3, #0]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	001a      	movs	r2, r3
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	18d3      	adds	r3, r2, r3
 8003f9a:	183a      	adds	r2, r7, r0
 8003f9c:	8812      	ldrh	r2, [r2, #0]
 8003f9e:	491f      	ldr	r1, [pc, #124]	; (800401c <HAL_PCD_EP_DB_Receive+0x228>)
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	b292      	uxth	r2, r2
 8003fa4:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003fa6:	1dbb      	adds	r3, r7, #6
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	2240      	movs	r2, #64	; 0x40
 8003fac:	4013      	ands	r3, r2
 8003fae:	d11a      	bne.n	8003fe6 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	001a      	movs	r2, r3
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	18d3      	adds	r3, r2, r3
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	201c      	movs	r0, #28
 8003fc4:	183b      	adds	r3, r7, r0
 8003fc6:	4916      	ldr	r1, [pc, #88]	; (8004020 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003fc8:	400a      	ands	r2, r1
 8003fca:	801a      	strh	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	001a      	movs	r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	18d3      	adds	r3, r2, r3
 8003fda:	183a      	adds	r2, r7, r0
 8003fdc:	8812      	ldrh	r2, [r2, #0]
 8003fde:	4911      	ldr	r1, [pc, #68]	; (8004024 <HAL_PCD_EP_DB_Receive+0x230>)
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	b292      	uxth	r2, r2
 8003fe4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8003fe6:	241a      	movs	r4, #26
 8003fe8:	193b      	adds	r3, r7, r4
 8003fea:	881b      	ldrh	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6818      	ldr	r0, [r3, #0]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	6959      	ldr	r1, [r3, #20]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	895a      	ldrh	r2, [r3, #10]
 8003ffc:	193b      	adds	r3, r7, r4
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	f005 fa10 	bl	8009424 <USB_ReadPMA>
    }
  }

  return count;
 8004004:	231a      	movs	r3, #26
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	881b      	ldrh	r3, [r3, #0]
}
 800400a:	0018      	movs	r0, r3
 800400c:	46bd      	mov	sp, r7
 800400e:	b009      	add	sp, #36	; 0x24
 8004010:	bd90      	pop	{r4, r7, pc}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	00000402 	.word	0x00000402
 8004018:	ffffbf8f 	.word	0xffffbf8f
 800401c:	ffff8080 	.word	0xffff8080
 8004020:	ffff8f8f 	.word	0xffff8f8f
 8004024:	ffff80c0 	.word	0xffff80c0
 8004028:	00000406 	.word	0x00000406

0800402c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b0a2      	sub	sp, #136	; 0x88
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	1dbb      	adds	r3, r7, #6
 8004038:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800403a:	1dbb      	adds	r3, r7, #6
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	2240      	movs	r2, #64	; 0x40
 8004040:	4013      	ands	r3, r2
 8004042:	d100      	bne.n	8004046 <HAL_PCD_EP_DB_Transmit+0x1a>
 8004044:	e1c8      	b.n	80043d8 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2250      	movs	r2, #80	; 0x50
 800404c:	5a9b      	ldrh	r3, [r3, r2]
 800404e:	b29b      	uxth	r3, r3
 8004050:	001a      	movs	r2, r3
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	18d2      	adds	r2, r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	18d3      	adds	r3, r2, r3
 8004060:	4ad7      	ldr	r2, [pc, #860]	; (80043c0 <HAL_PCD_EP_DB_Transmit+0x394>)
 8004062:	4694      	mov	ip, r2
 8004064:	4463      	add	r3, ip
 8004066:	881a      	ldrh	r2, [r3, #0]
 8004068:	214e      	movs	r1, #78	; 0x4e
 800406a:	187b      	adds	r3, r7, r1
 800406c:	0592      	lsls	r2, r2, #22
 800406e:	0d92      	lsrs	r2, r2, #22
 8004070:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	187b      	adds	r3, r7, r1
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d907      	bls.n	800408e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	187b      	adds	r3, r7, r1
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	1ad2      	subs	r2, r2, r3
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	619a      	str	r2, [r3, #24]
 800408c:	e002      	b.n	8004094 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2200      	movs	r2, #0
 8004092:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d000      	beq.n	800409e <HAL_PCD_EP_DB_Transmit+0x72>
 800409c:	e0b5      	b.n	800420a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	785b      	ldrb	r3, [r3, #1]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d125      	bne.n	80040f2 <HAL_PCD_EP_DB_Transmit+0xc6>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2250      	movs	r2, #80	; 0x50
 80040b2:	5a9b      	ldrh	r3, [r3, r2]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	001a      	movs	r2, r3
 80040b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ba:	189b      	adds	r3, r3, r2
 80040bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	00da      	lsls	r2, r3, #3
 80040c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c6:	18d3      	adds	r3, r2, r3
 80040c8:	4abd      	ldr	r2, [pc, #756]	; (80043c0 <HAL_PCD_EP_DB_Transmit+0x394>)
 80040ca:	4694      	mov	ip, r2
 80040cc:	4463      	add	r3, ip
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	4abb      	ldr	r2, [pc, #748]	; (80043c4 <HAL_PCD_EP_DB_Transmit+0x398>)
 80040d8:	4013      	ands	r3, r2
 80040da:	b29a      	uxth	r2, r3
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	801a      	strh	r2, [r3, #0]
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	4ab8      	ldr	r2, [pc, #736]	; (80043c8 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	801a      	strh	r2, [r3, #0]
 80040f0:	e01b      	b.n	800412a <HAL_PCD_EP_DB_Transmit+0xfe>
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	785b      	ldrb	r3, [r3, #1]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d117      	bne.n	800412a <HAL_PCD_EP_DB_Transmit+0xfe>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	633b      	str	r3, [r7, #48]	; 0x30
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2250      	movs	r2, #80	; 0x50
 8004106:	5a9b      	ldrh	r3, [r3, r2]
 8004108:	b29b      	uxth	r3, r3
 800410a:	001a      	movs	r2, r3
 800410c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410e:	189b      	adds	r3, r3, r2
 8004110:	633b      	str	r3, [r7, #48]	; 0x30
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	00da      	lsls	r2, r3, #3
 8004118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411a:	18d3      	adds	r3, r2, r3
 800411c:	4aa8      	ldr	r2, [pc, #672]	; (80043c0 <HAL_PCD_EP_DB_Transmit+0x394>)
 800411e:	4694      	mov	ip, r2
 8004120:	4463      	add	r3, ip
 8004122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004126:	2200      	movs	r2, #0
 8004128:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	623b      	str	r3, [r7, #32]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	785b      	ldrb	r3, [r3, #1]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d125      	bne.n	8004184 <HAL_PCD_EP_DB_Transmit+0x158>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2250      	movs	r2, #80	; 0x50
 8004144:	5a9b      	ldrh	r3, [r3, r2]
 8004146:	b29b      	uxth	r3, r3
 8004148:	001a      	movs	r2, r3
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	189b      	adds	r3, r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	00da      	lsls	r2, r3, #3
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	18d3      	adds	r3, r2, r3
 800415a:	4a9c      	ldr	r2, [pc, #624]	; (80043cc <HAL_PCD_EP_DB_Transmit+0x3a0>)
 800415c:	4694      	mov	ip, r2
 800415e:	4463      	add	r3, ip
 8004160:	617b      	str	r3, [r7, #20]
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	b29b      	uxth	r3, r3
 8004168:	4a96      	ldr	r2, [pc, #600]	; (80043c4 <HAL_PCD_EP_DB_Transmit+0x398>)
 800416a:	4013      	ands	r3, r2
 800416c:	b29a      	uxth	r2, r3
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	801a      	strh	r2, [r3, #0]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	b29b      	uxth	r3, r3
 8004178:	4a93      	ldr	r2, [pc, #588]	; (80043c8 <HAL_PCD_EP_DB_Transmit+0x39c>)
 800417a:	4313      	orrs	r3, r2
 800417c:	b29a      	uxth	r2, r3
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	801a      	strh	r2, [r3, #0]
 8004182:	e018      	b.n	80041b6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	785b      	ldrb	r3, [r3, #1]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d114      	bne.n	80041b6 <HAL_PCD_EP_DB_Transmit+0x18a>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2250      	movs	r2, #80	; 0x50
 8004192:	5a9b      	ldrh	r3, [r3, r2]
 8004194:	b29b      	uxth	r3, r3
 8004196:	001a      	movs	r2, r3
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	189b      	adds	r3, r3, r2
 800419c:	623b      	str	r3, [r7, #32]
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	00da      	lsls	r2, r3, #3
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	18d3      	adds	r3, r2, r3
 80041a8:	4a88      	ldr	r2, [pc, #544]	; (80043cc <HAL_PCD_EP_DB_Transmit+0x3a0>)
 80041aa:	4694      	mov	ip, r2
 80041ac:	4463      	add	r3, ip
 80041ae:	61fb      	str	r3, [r7, #28]
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	2200      	movs	r2, #0
 80041b4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	781a      	ldrb	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	0011      	movs	r1, r2
 80041be:	0018      	movs	r0, r3
 80041c0:	f007 f934 	bl	800b42c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80041c4:	1dbb      	adds	r3, r7, #6
 80041c6:	881a      	ldrh	r2, [r3, #0]
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	01db      	lsls	r3, r3, #7
 80041cc:	4013      	ands	r3, r2
 80041ce:	d100      	bne.n	80041d2 <HAL_PCD_EP_DB_Transmit+0x1a6>
 80041d0:	e2d4      	b.n	800477c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	001a      	movs	r2, r3
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	18d3      	adds	r3, r2, r3
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	2012      	movs	r0, #18
 80041e6:	183b      	adds	r3, r7, r0
 80041e8:	4979      	ldr	r1, [pc, #484]	; (80043d0 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 80041ea:	400a      	ands	r2, r1
 80041ec:	801a      	strh	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	001a      	movs	r2, r3
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	18d3      	adds	r3, r2, r3
 80041fc:	183a      	adds	r2, r7, r0
 80041fe:	8812      	ldrh	r2, [r2, #0]
 8004200:	4974      	ldr	r1, [pc, #464]	; (80043d4 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8004202:	430a      	orrs	r2, r1
 8004204:	b292      	uxth	r2, r2
 8004206:	801a      	strh	r2, [r3, #0]
 8004208:	e2b8      	b.n	800477c <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800420a:	1dbb      	adds	r3, r7, #6
 800420c:	881a      	ldrh	r2, [r3, #0]
 800420e:	2380      	movs	r3, #128	; 0x80
 8004210:	01db      	lsls	r3, r3, #7
 8004212:	4013      	ands	r3, r2
 8004214:	d01a      	beq.n	800424c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	001a      	movs	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	18d3      	adds	r3, r2, r3
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	b29a      	uxth	r2, r3
 8004228:	2044      	movs	r0, #68	; 0x44
 800422a:	183b      	adds	r3, r7, r0
 800422c:	4968      	ldr	r1, [pc, #416]	; (80043d0 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 800422e:	400a      	ands	r2, r1
 8004230:	801a      	strh	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	001a      	movs	r2, r3
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	18d3      	adds	r3, r2, r3
 8004240:	183a      	adds	r2, r7, r0
 8004242:	8812      	ldrh	r2, [r2, #0]
 8004244:	4963      	ldr	r1, [pc, #396]	; (80043d4 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8004246:	430a      	orrs	r2, r1
 8004248:	b292      	uxth	r2, r2
 800424a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2224      	movs	r2, #36	; 0x24
 8004250:	5c9b      	ldrb	r3, [r3, r2]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d000      	beq.n	8004258 <HAL_PCD_EP_DB_Transmit+0x22c>
 8004256:	e291      	b.n	800477c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	695a      	ldr	r2, [r3, #20]
 800425c:	214e      	movs	r1, #78	; 0x4e
 800425e:	187b      	adds	r3, r7, r1
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	18d2      	adds	r2, r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	69da      	ldr	r2, [r3, #28]
 800426c:	187b      	adds	r3, r7, r1
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	18d2      	adds	r2, r2, r3
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	6a1a      	ldr	r2, [r3, #32]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	429a      	cmp	r2, r3
 8004280:	d309      	bcc.n	8004296 <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	6a1a      	ldr	r2, [r3, #32]
 800428c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800428e:	1ad2      	subs	r2, r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	621a      	str	r2, [r3, #32]
 8004294:	e016      	b.n	80042c4 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d108      	bne.n	80042b0 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 800429e:	234e      	movs	r3, #78	; 0x4e
 80042a0:	18fb      	adds	r3, r7, r3
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2224      	movs	r2, #36	; 0x24
 80042aa:	2100      	movs	r1, #0
 80042ac:	5499      	strb	r1, [r3, r2]
 80042ae:	e009      	b.n	80042c4 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2224      	movs	r2, #36	; 0x24
 80042b4:	2100      	movs	r1, #0
 80042b6:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2200      	movs	r2, #0
 80042c2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	785b      	ldrb	r3, [r3, #1]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d150      	bne.n	800436e <HAL_PCD_EP_DB_Transmit+0x342>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2250      	movs	r2, #80	; 0x50
 80042d8:	5a9b      	ldrh	r3, [r3, r2]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	001a      	movs	r2, r3
 80042de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e0:	189b      	adds	r3, r3, r2
 80042e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	00da      	lsls	r2, r3, #3
 80042ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ec:	18d3      	adds	r3, r2, r3
 80042ee:	4a34      	ldr	r2, [pc, #208]	; (80043c0 <HAL_PCD_EP_DB_Transmit+0x394>)
 80042f0:	4694      	mov	ip, r2
 80042f2:	4463      	add	r3, ip
 80042f4:	637b      	str	r3, [r7, #52]	; 0x34
 80042f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d110      	bne.n	800431e <HAL_PCD_EP_DB_Transmit+0x2f2>
 80042fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	b29b      	uxth	r3, r3
 8004302:	4a30      	ldr	r2, [pc, #192]	; (80043c4 <HAL_PCD_EP_DB_Transmit+0x398>)
 8004304:	4013      	ands	r3, r2
 8004306:	b29a      	uxth	r2, r3
 8004308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430a:	801a      	strh	r2, [r3, #0]
 800430c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	b29b      	uxth	r3, r3
 8004312:	4a2d      	ldr	r2, [pc, #180]	; (80043c8 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004314:	4313      	orrs	r3, r2
 8004316:	b29a      	uxth	r2, r3
 8004318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431a:	801a      	strh	r2, [r3, #0]
 800431c:	e044      	b.n	80043a8 <HAL_PCD_EP_DB_Transmit+0x37c>
 800431e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004320:	2b3e      	cmp	r3, #62	; 0x3e
 8004322:	d810      	bhi.n	8004346 <HAL_PCD_EP_DB_Transmit+0x31a>
 8004324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004326:	085b      	lsrs	r3, r3, #1
 8004328:	64bb      	str	r3, [r7, #72]	; 0x48
 800432a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800432c:	2201      	movs	r2, #1
 800432e:	4013      	ands	r3, r2
 8004330:	d002      	beq.n	8004338 <HAL_PCD_EP_DB_Transmit+0x30c>
 8004332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004334:	3301      	adds	r3, #1
 8004336:	64bb      	str	r3, [r7, #72]	; 0x48
 8004338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800433a:	b29b      	uxth	r3, r3
 800433c:	029b      	lsls	r3, r3, #10
 800433e:	b29a      	uxth	r2, r3
 8004340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004342:	801a      	strh	r2, [r3, #0]
 8004344:	e030      	b.n	80043a8 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004348:	095b      	lsrs	r3, r3, #5
 800434a:	64bb      	str	r3, [r7, #72]	; 0x48
 800434c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800434e:	221f      	movs	r2, #31
 8004350:	4013      	ands	r3, r2
 8004352:	d102      	bne.n	800435a <HAL_PCD_EP_DB_Transmit+0x32e>
 8004354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004356:	3b01      	subs	r3, #1
 8004358:	64bb      	str	r3, [r7, #72]	; 0x48
 800435a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800435c:	b29b      	uxth	r3, r3
 800435e:	029b      	lsls	r3, r3, #10
 8004360:	b29b      	uxth	r3, r3
 8004362:	4a19      	ldr	r2, [pc, #100]	; (80043c8 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8004364:	4313      	orrs	r3, r2
 8004366:	b29a      	uxth	r2, r3
 8004368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436a:	801a      	strh	r2, [r3, #0]
 800436c:	e01c      	b.n	80043a8 <HAL_PCD_EP_DB_Transmit+0x37c>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	785b      	ldrb	r3, [r3, #1]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d118      	bne.n	80043a8 <HAL_PCD_EP_DB_Transmit+0x37c>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	643b      	str	r3, [r7, #64]	; 0x40
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2250      	movs	r2, #80	; 0x50
 8004382:	5a9b      	ldrh	r3, [r3, r2]
 8004384:	b29b      	uxth	r3, r3
 8004386:	001a      	movs	r2, r3
 8004388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800438a:	189b      	adds	r3, r3, r2
 800438c:	643b      	str	r3, [r7, #64]	; 0x40
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	00da      	lsls	r2, r3, #3
 8004394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004396:	18d3      	adds	r3, r2, r3
 8004398:	4a09      	ldr	r2, [pc, #36]	; (80043c0 <HAL_PCD_EP_DB_Transmit+0x394>)
 800439a:	4694      	mov	ip, r2
 800439c:	4463      	add	r3, ip
 800439e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043a6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	6959      	ldr	r1, [r3, #20]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	891a      	ldrh	r2, [r3, #8]
 80043b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	f004 fff0 	bl	800939c <USB_WritePMA>
 80043bc:	e1de      	b.n	800477c <HAL_PCD_EP_DB_Transmit+0x750>
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	00000402 	.word	0x00000402
 80043c4:	ffff83ff 	.word	0xffff83ff
 80043c8:	ffff8000 	.word	0xffff8000
 80043cc:	00000406 	.word	0x00000406
 80043d0:	ffff8f8f 	.word	0xffff8f8f
 80043d4:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2250      	movs	r2, #80	; 0x50
 80043de:	5a9b      	ldrh	r3, [r3, r2]
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	001a      	movs	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	18d2      	adds	r2, r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	18d3      	adds	r3, r2, r3
 80043f2:	4aca      	ldr	r2, [pc, #808]	; (800471c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80043f4:	4694      	mov	ip, r2
 80043f6:	4463      	add	r3, ip
 80043f8:	881a      	ldrh	r2, [r3, #0]
 80043fa:	214e      	movs	r1, #78	; 0x4e
 80043fc:	187b      	adds	r3, r7, r1
 80043fe:	0592      	lsls	r2, r2, #22
 8004400:	0d92      	lsrs	r2, r2, #22
 8004402:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	699a      	ldr	r2, [r3, #24]
 8004408:	187b      	adds	r3, r7, r1
 800440a:	881b      	ldrh	r3, [r3, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d307      	bcc.n	8004420 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	699a      	ldr	r2, [r3, #24]
 8004414:	187b      	adds	r3, r7, r1
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	1ad2      	subs	r2, r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	619a      	str	r2, [r3, #24]
 800441e:	e002      	b.n	8004426 <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2200      	movs	r2, #0
 8004424:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d000      	beq.n	8004430 <HAL_PCD_EP_DB_Transmit+0x404>
 800442e:	e0c0      	b.n	80045b2 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	785b      	ldrb	r3, [r3, #1]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d125      	bne.n	8004484 <HAL_PCD_EP_DB_Transmit+0x458>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2250      	movs	r2, #80	; 0x50
 8004444:	5a9b      	ldrh	r3, [r3, r2]
 8004446:	b29b      	uxth	r3, r3
 8004448:	001a      	movs	r2, r3
 800444a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800444c:	189b      	adds	r3, r3, r2
 800444e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	00da      	lsls	r2, r3, #3
 8004456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004458:	18d3      	adds	r3, r2, r3
 800445a:	4ab1      	ldr	r2, [pc, #708]	; (8004720 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 800445c:	4694      	mov	ip, r2
 800445e:	4463      	add	r3, ip
 8004460:	66bb      	str	r3, [r7, #104]	; 0x68
 8004462:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	b29b      	uxth	r3, r3
 8004468:	4aae      	ldr	r2, [pc, #696]	; (8004724 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 800446a:	4013      	ands	r3, r2
 800446c:	b29a      	uxth	r2, r3
 800446e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004470:	801a      	strh	r2, [r3, #0]
 8004472:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	b29b      	uxth	r3, r3
 8004478:	4aab      	ldr	r2, [pc, #684]	; (8004728 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800447a:	4313      	orrs	r3, r2
 800447c:	b29a      	uxth	r2, r3
 800447e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004480:	801a      	strh	r2, [r3, #0]
 8004482:	e01b      	b.n	80044bc <HAL_PCD_EP_DB_Transmit+0x490>
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	785b      	ldrb	r3, [r3, #1]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d117      	bne.n	80044bc <HAL_PCD_EP_DB_Transmit+0x490>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	677b      	str	r3, [r7, #116]	; 0x74
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2250      	movs	r2, #80	; 0x50
 8004498:	5a9b      	ldrh	r3, [r3, r2]
 800449a:	b29b      	uxth	r3, r3
 800449c:	001a      	movs	r2, r3
 800449e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044a0:	189b      	adds	r3, r3, r2
 80044a2:	677b      	str	r3, [r7, #116]	; 0x74
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	00da      	lsls	r2, r3, #3
 80044aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ac:	18d3      	adds	r3, r2, r3
 80044ae:	4a9c      	ldr	r2, [pc, #624]	; (8004720 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80044b0:	4694      	mov	ip, r2
 80044b2:	4463      	add	r3, ip
 80044b4:	673b      	str	r3, [r7, #112]	; 0x70
 80044b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044b8:	2200      	movs	r2, #0
 80044ba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	785b      	ldrb	r3, [r3, #1]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d130      	bne.n	800452c <HAL_PCD_EP_DB_Transmit+0x500>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2180      	movs	r1, #128	; 0x80
 80044d0:	187a      	adds	r2, r7, r1
 80044d2:	6013      	str	r3, [r2, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2250      	movs	r2, #80	; 0x50
 80044da:	5a9b      	ldrh	r3, [r3, r2]
 80044dc:	b29b      	uxth	r3, r3
 80044de:	001a      	movs	r2, r3
 80044e0:	187b      	adds	r3, r7, r1
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	189b      	adds	r3, r3, r2
 80044e6:	187a      	adds	r2, r7, r1
 80044e8:	6013      	str	r3, [r2, #0]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	00da      	lsls	r2, r3, #3
 80044f0:	187b      	adds	r3, r7, r1
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	18d3      	adds	r3, r2, r3
 80044f6:	4a89      	ldr	r2, [pc, #548]	; (800471c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80044f8:	4694      	mov	ip, r2
 80044fa:	4463      	add	r3, ip
 80044fc:	2184      	movs	r1, #132	; 0x84
 80044fe:	187a      	adds	r2, r7, r1
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	187b      	adds	r3, r7, r1
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	b29b      	uxth	r3, r3
 800450a:	4a86      	ldr	r2, [pc, #536]	; (8004724 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 800450c:	4013      	ands	r3, r2
 800450e:	b29a      	uxth	r2, r3
 8004510:	187b      	adds	r3, r7, r1
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	801a      	strh	r2, [r3, #0]
 8004516:	187b      	adds	r3, r7, r1
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	b29b      	uxth	r3, r3
 800451e:	4a82      	ldr	r2, [pc, #520]	; (8004728 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004520:	4313      	orrs	r3, r2
 8004522:	b29a      	uxth	r2, r3
 8004524:	187b      	adds	r3, r7, r1
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	801a      	strh	r2, [r3, #0]
 800452a:	e018      	b.n	800455e <HAL_PCD_EP_DB_Transmit+0x532>
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	785b      	ldrb	r3, [r3, #1]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d114      	bne.n	800455e <HAL_PCD_EP_DB_Transmit+0x532>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2250      	movs	r2, #80	; 0x50
 800453a:	5a9b      	ldrh	r3, [r3, r2]
 800453c:	b29b      	uxth	r3, r3
 800453e:	001a      	movs	r2, r3
 8004540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004542:	189b      	adds	r3, r3, r2
 8004544:	67bb      	str	r3, [r7, #120]	; 0x78
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	00da      	lsls	r2, r3, #3
 800454c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800454e:	18d3      	adds	r3, r2, r3
 8004550:	4a72      	ldr	r2, [pc, #456]	; (800471c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8004552:	4694      	mov	ip, r2
 8004554:	4463      	add	r3, ip
 8004556:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004558:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800455a:	2200      	movs	r2, #0
 800455c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	781a      	ldrb	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	0011      	movs	r1, r2
 8004566:	0018      	movs	r0, r3
 8004568:	f006 ff60 	bl	800b42c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800456c:	1dbb      	adds	r3, r7, #6
 800456e:	881a      	ldrh	r2, [r3, #0]
 8004570:	2380      	movs	r3, #128	; 0x80
 8004572:	01db      	lsls	r3, r3, #7
 8004574:	4013      	ands	r3, r2
 8004576:	d000      	beq.n	800457a <HAL_PCD_EP_DB_Transmit+0x54e>
 8004578:	e100      	b.n	800477c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	001a      	movs	r2, r3
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	18d3      	adds	r3, r2, r3
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	b29a      	uxth	r2, r3
 800458c:	2046      	movs	r0, #70	; 0x46
 800458e:	183b      	adds	r3, r7, r0
 8004590:	4966      	ldr	r1, [pc, #408]	; (800472c <HAL_PCD_EP_DB_Transmit+0x700>)
 8004592:	400a      	ands	r2, r1
 8004594:	801a      	strh	r2, [r3, #0]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	001a      	movs	r2, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	18d3      	adds	r3, r2, r3
 80045a4:	183a      	adds	r2, r7, r0
 80045a6:	8812      	ldrh	r2, [r2, #0]
 80045a8:	4961      	ldr	r1, [pc, #388]	; (8004730 <HAL_PCD_EP_DB_Transmit+0x704>)
 80045aa:	430a      	orrs	r2, r1
 80045ac:	b292      	uxth	r2, r2
 80045ae:	801a      	strh	r2, [r3, #0]
 80045b0:	e0e4      	b.n	800477c <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80045b2:	1dbb      	adds	r3, r7, #6
 80045b4:	881a      	ldrh	r2, [r3, #0]
 80045b6:	2380      	movs	r3, #128	; 0x80
 80045b8:	01db      	lsls	r3, r3, #7
 80045ba:	4013      	ands	r3, r2
 80045bc:	d11a      	bne.n	80045f4 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	001a      	movs	r2, r3
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	18d3      	adds	r3, r2, r3
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	204c      	movs	r0, #76	; 0x4c
 80045d2:	183b      	adds	r3, r7, r0
 80045d4:	4955      	ldr	r1, [pc, #340]	; (800472c <HAL_PCD_EP_DB_Transmit+0x700>)
 80045d6:	400a      	ands	r2, r1
 80045d8:	801a      	strh	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	001a      	movs	r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	18d3      	adds	r3, r2, r3
 80045e8:	183a      	adds	r2, r7, r0
 80045ea:	8812      	ldrh	r2, [r2, #0]
 80045ec:	4950      	ldr	r1, [pc, #320]	; (8004730 <HAL_PCD_EP_DB_Transmit+0x704>)
 80045ee:	430a      	orrs	r2, r1
 80045f0:	b292      	uxth	r2, r2
 80045f2:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2224      	movs	r2, #36	; 0x24
 80045f8:	5c9b      	ldrb	r3, [r3, r2]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d000      	beq.n	8004600 <HAL_PCD_EP_DB_Transmit+0x5d4>
 80045fe:	e0bd      	b.n	800477c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	695a      	ldr	r2, [r3, #20]
 8004604:	214e      	movs	r1, #78	; 0x4e
 8004606:	187b      	adds	r3, r7, r1
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	18d2      	adds	r2, r2, r3
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	69da      	ldr	r2, [r3, #28]
 8004614:	187b      	adds	r3, r7, r1
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	18d2      	adds	r2, r2, r3
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	6a1a      	ldr	r2, [r3, #32]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	429a      	cmp	r2, r3
 8004628:	d309      	bcc.n	800463e <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	6a1a      	ldr	r2, [r3, #32]
 8004634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004636:	1ad2      	subs	r2, r2, r3
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	621a      	str	r2, [r3, #32]
 800463c:	e016      	b.n	800466c <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d108      	bne.n	8004658 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8004646:	234e      	movs	r3, #78	; 0x4e
 8004648:	18fb      	adds	r3, r7, r3
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2224      	movs	r2, #36	; 0x24
 8004652:	2100      	movs	r1, #0
 8004654:	5499      	strb	r1, [r3, r2]
 8004656:	e009      	b.n	800466c <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2200      	movs	r2, #0
 8004662:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2224      	movs	r2, #36	; 0x24
 8004668:	2100      	movs	r1, #0
 800466a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	667b      	str	r3, [r7, #100]	; 0x64
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	785b      	ldrb	r3, [r3, #1]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d15c      	bne.n	8004734 <HAL_PCD_EP_DB_Transmit+0x708>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2250      	movs	r2, #80	; 0x50
 8004686:	5a9b      	ldrh	r3, [r3, r2]
 8004688:	b29b      	uxth	r3, r3
 800468a:	001a      	movs	r2, r3
 800468c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800468e:	189b      	adds	r3, r3, r2
 8004690:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	00da      	lsls	r2, r3, #3
 8004698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800469a:	18d3      	adds	r3, r2, r3
 800469c:	4a1f      	ldr	r2, [pc, #124]	; (800471c <HAL_PCD_EP_DB_Transmit+0x6f0>)
 800469e:	4694      	mov	ip, r2
 80046a0:	4463      	add	r3, ip
 80046a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80046a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d110      	bne.n	80046cc <HAL_PCD_EP_DB_Transmit+0x6a0>
 80046aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	4a1c      	ldr	r2, [pc, #112]	; (8004724 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80046b2:	4013      	ands	r3, r2
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046b8:	801a      	strh	r2, [r3, #0]
 80046ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	b29b      	uxth	r3, r3
 80046c0:	4a19      	ldr	r2, [pc, #100]	; (8004728 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046c8:	801a      	strh	r2, [r3, #0]
 80046ca:	e04d      	b.n	8004768 <HAL_PCD_EP_DB_Transmit+0x73c>
 80046cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046ce:	2b3e      	cmp	r3, #62	; 0x3e
 80046d0:	d810      	bhi.n	80046f4 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80046d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046d4:	085b      	lsrs	r3, r3, #1
 80046d6:	657b      	str	r3, [r7, #84]	; 0x54
 80046d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046da:	2201      	movs	r2, #1
 80046dc:	4013      	ands	r3, r2
 80046de:	d002      	beq.n	80046e6 <HAL_PCD_EP_DB_Transmit+0x6ba>
 80046e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046e2:	3301      	adds	r3, #1
 80046e4:	657b      	str	r3, [r7, #84]	; 0x54
 80046e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	029b      	lsls	r3, r3, #10
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046f0:	801a      	strh	r2, [r3, #0]
 80046f2:	e039      	b.n	8004768 <HAL_PCD_EP_DB_Transmit+0x73c>
 80046f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046f6:	095b      	lsrs	r3, r3, #5
 80046f8:	657b      	str	r3, [r7, #84]	; 0x54
 80046fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046fc:	221f      	movs	r2, #31
 80046fe:	4013      	ands	r3, r2
 8004700:	d102      	bne.n	8004708 <HAL_PCD_EP_DB_Transmit+0x6dc>
 8004702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004704:	3b01      	subs	r3, #1
 8004706:	657b      	str	r3, [r7, #84]	; 0x54
 8004708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800470a:	b29b      	uxth	r3, r3
 800470c:	029b      	lsls	r3, r3, #10
 800470e:	b29b      	uxth	r3, r3
 8004710:	4a05      	ldr	r2, [pc, #20]	; (8004728 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8004712:	4313      	orrs	r3, r2
 8004714:	b29a      	uxth	r2, r3
 8004716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004718:	801a      	strh	r2, [r3, #0]
 800471a:	e025      	b.n	8004768 <HAL_PCD_EP_DB_Transmit+0x73c>
 800471c:	00000406 	.word	0x00000406
 8004720:	00000402 	.word	0x00000402
 8004724:	ffff83ff 	.word	0xffff83ff
 8004728:	ffff8000 	.word	0xffff8000
 800472c:	ffff8f8f 	.word	0xffff8f8f
 8004730:	ffffc080 	.word	0xffffc080
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	785b      	ldrb	r3, [r3, #1]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d115      	bne.n	8004768 <HAL_PCD_EP_DB_Transmit+0x73c>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2250      	movs	r2, #80	; 0x50
 8004742:	5a9b      	ldrh	r3, [r3, r2]
 8004744:	b29b      	uxth	r3, r3
 8004746:	001a      	movs	r2, r3
 8004748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800474a:	189b      	adds	r3, r3, r2
 800474c:	667b      	str	r3, [r7, #100]	; 0x64
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	00da      	lsls	r2, r3, #3
 8004754:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004756:	18d3      	adds	r3, r2, r3
 8004758:	4a1e      	ldr	r2, [pc, #120]	; (80047d4 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 800475a:	4694      	mov	ip, r2
 800475c:	4463      	add	r3, ip
 800475e:	663b      	str	r3, [r7, #96]	; 0x60
 8004760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004762:	b29a      	uxth	r2, r3
 8004764:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004766:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6818      	ldr	r0, [r3, #0]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	6959      	ldr	r1, [r3, #20]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	895a      	ldrh	r2, [r3, #10]
 8004774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004776:	b29b      	uxth	r3, r3
 8004778:	f004 fe10 	bl	800939c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	001a      	movs	r2, r3
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	18d3      	adds	r3, r2, r3
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	b29a      	uxth	r2, r3
 800478e:	2010      	movs	r0, #16
 8004790:	183b      	adds	r3, r7, r0
 8004792:	4911      	ldr	r1, [pc, #68]	; (80047d8 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8004794:	400a      	ands	r2, r1
 8004796:	801a      	strh	r2, [r3, #0]
 8004798:	183b      	adds	r3, r7, r0
 800479a:	183a      	adds	r2, r7, r0
 800479c:	8812      	ldrh	r2, [r2, #0]
 800479e:	2110      	movs	r1, #16
 80047a0:	404a      	eors	r2, r1
 80047a2:	801a      	strh	r2, [r3, #0]
 80047a4:	183b      	adds	r3, r7, r0
 80047a6:	183a      	adds	r2, r7, r0
 80047a8:	8812      	ldrh	r2, [r2, #0]
 80047aa:	2120      	movs	r1, #32
 80047ac:	404a      	eors	r2, r1
 80047ae:	801a      	strh	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	001a      	movs	r2, r3
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	18d3      	adds	r3, r2, r3
 80047be:	183a      	adds	r2, r7, r0
 80047c0:	8812      	ldrh	r2, [r2, #0]
 80047c2:	4906      	ldr	r1, [pc, #24]	; (80047dc <HAL_PCD_EP_DB_Transmit+0x7b0>)
 80047c4:	430a      	orrs	r2, r1
 80047c6:	b292      	uxth	r2, r2
 80047c8:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	0018      	movs	r0, r3
 80047ce:	46bd      	mov	sp, r7
 80047d0:	b022      	add	sp, #136	; 0x88
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	00000406 	.word	0x00000406
 80047d8:	ffff8fbf 	.word	0xffff8fbf
 80047dc:	ffff8080 	.word	0xffff8080

080047e0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80047e0:	b590      	push	{r4, r7, lr}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	0008      	movs	r0, r1
 80047ea:	0011      	movs	r1, r2
 80047ec:	607b      	str	r3, [r7, #4]
 80047ee:	240a      	movs	r4, #10
 80047f0:	193b      	adds	r3, r7, r4
 80047f2:	1c02      	adds	r2, r0, #0
 80047f4:	801a      	strh	r2, [r3, #0]
 80047f6:	2308      	movs	r3, #8
 80047f8:	18fb      	adds	r3, r7, r3
 80047fa:	1c0a      	adds	r2, r1, #0
 80047fc:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80047fe:	0021      	movs	r1, r4
 8004800:	187b      	adds	r3, r7, r1
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	2280      	movs	r2, #128	; 0x80
 8004806:	4013      	ands	r3, r2
 8004808:	b29b      	uxth	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00c      	beq.n	8004828 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800480e:	187b      	adds	r3, r7, r1
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	2207      	movs	r2, #7
 8004814:	4013      	ands	r3, r2
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	0013      	movs	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	189b      	adds	r3, r3, r2
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	18d3      	adds	r3, r2, r3
 8004824:	617b      	str	r3, [r7, #20]
 8004826:	e00b      	b.n	8004840 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004828:	230a      	movs	r3, #10
 800482a:	18fb      	adds	r3, r7, r3
 800482c:	881a      	ldrh	r2, [r3, #0]
 800482e:	0013      	movs	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	189b      	adds	r3, r3, r2
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	3369      	adds	r3, #105	; 0x69
 8004838:	33ff      	adds	r3, #255	; 0xff
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	18d3      	adds	r3, r2, r3
 800483e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004840:	2308      	movs	r3, #8
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d107      	bne.n	800485a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2200      	movs	r2, #0
 800484e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	b29a      	uxth	r2, r3
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	80da      	strh	r2, [r3, #6]
 8004858:	e00b      	b.n	8004872 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2201      	movs	r2, #1
 800485e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	b29a      	uxth	r2, r3
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	0c1b      	lsrs	r3, r3, #16
 800486c:	b29a      	uxth	r2, r3
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	0018      	movs	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	b007      	add	sp, #28
 800487a:	bd90      	pop	{r4, r7, pc}

0800487c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	23ba      	movs	r3, #186	; 0xba
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	2101      	movs	r1, #1
 8004892:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	23b8      	movs	r3, #184	; 0xb8
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	2100      	movs	r1, #0
 800489c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2254      	movs	r2, #84	; 0x54
 80048a2:	5a9b      	ldrh	r3, [r3, r2]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2201      	movs	r2, #1
 80048a8:	4313      	orrs	r3, r2
 80048aa:	b299      	uxth	r1, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2254      	movs	r2, #84	; 0x54
 80048b0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2254      	movs	r2, #84	; 0x54
 80048b6:	5a9b      	ldrh	r3, [r3, r2]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2202      	movs	r2, #2
 80048bc:	4313      	orrs	r3, r2
 80048be:	b299      	uxth	r1, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2254      	movs	r2, #84	; 0x54
 80048c4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	0018      	movs	r0, r3
 80048ca:	46bd      	mov	sp, r7
 80048cc:	b004      	add	sp, #16
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	000a      	movs	r2, r1
 80048da:	1cfb      	adds	r3, r7, #3
 80048dc:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80048de:	46c0      	nop			; (mov r8, r8)
 80048e0:	46bd      	mov	sp, r7
 80048e2:	b002      	add	sp, #8
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d102      	bne.n	80048fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	f000 fb76 	bl	8004fe8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2201      	movs	r2, #1
 8004902:	4013      	ands	r3, r2
 8004904:	d100      	bne.n	8004908 <HAL_RCC_OscConfig+0x20>
 8004906:	e08e      	b.n	8004a26 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004908:	4bc5      	ldr	r3, [pc, #788]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	220c      	movs	r2, #12
 800490e:	4013      	ands	r3, r2
 8004910:	2b04      	cmp	r3, #4
 8004912:	d00e      	beq.n	8004932 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004914:	4bc2      	ldr	r3, [pc, #776]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	220c      	movs	r2, #12
 800491a:	4013      	ands	r3, r2
 800491c:	2b08      	cmp	r3, #8
 800491e:	d117      	bne.n	8004950 <HAL_RCC_OscConfig+0x68>
 8004920:	4bbf      	ldr	r3, [pc, #764]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	23c0      	movs	r3, #192	; 0xc0
 8004926:	025b      	lsls	r3, r3, #9
 8004928:	401a      	ands	r2, r3
 800492a:	2380      	movs	r3, #128	; 0x80
 800492c:	025b      	lsls	r3, r3, #9
 800492e:	429a      	cmp	r2, r3
 8004930:	d10e      	bne.n	8004950 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004932:	4bbb      	ldr	r3, [pc, #748]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	2380      	movs	r3, #128	; 0x80
 8004938:	029b      	lsls	r3, r3, #10
 800493a:	4013      	ands	r3, r2
 800493c:	d100      	bne.n	8004940 <HAL_RCC_OscConfig+0x58>
 800493e:	e071      	b.n	8004a24 <HAL_RCC_OscConfig+0x13c>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d000      	beq.n	800494a <HAL_RCC_OscConfig+0x62>
 8004948:	e06c      	b.n	8004a24 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	f000 fb4c 	bl	8004fe8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d107      	bne.n	8004968 <HAL_RCC_OscConfig+0x80>
 8004958:	4bb1      	ldr	r3, [pc, #708]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	4bb0      	ldr	r3, [pc, #704]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 800495e:	2180      	movs	r1, #128	; 0x80
 8004960:	0249      	lsls	r1, r1, #9
 8004962:	430a      	orrs	r2, r1
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	e02f      	b.n	80049c8 <HAL_RCC_OscConfig+0xe0>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10c      	bne.n	800498a <HAL_RCC_OscConfig+0xa2>
 8004970:	4bab      	ldr	r3, [pc, #684]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	4baa      	ldr	r3, [pc, #680]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004976:	49ab      	ldr	r1, [pc, #684]	; (8004c24 <HAL_RCC_OscConfig+0x33c>)
 8004978:	400a      	ands	r2, r1
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	4ba8      	ldr	r3, [pc, #672]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	4ba7      	ldr	r3, [pc, #668]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004982:	49a9      	ldr	r1, [pc, #676]	; (8004c28 <HAL_RCC_OscConfig+0x340>)
 8004984:	400a      	ands	r2, r1
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	e01e      	b.n	80049c8 <HAL_RCC_OscConfig+0xe0>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2b05      	cmp	r3, #5
 8004990:	d10e      	bne.n	80049b0 <HAL_RCC_OscConfig+0xc8>
 8004992:	4ba3      	ldr	r3, [pc, #652]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	4ba2      	ldr	r3, [pc, #648]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004998:	2180      	movs	r1, #128	; 0x80
 800499a:	02c9      	lsls	r1, r1, #11
 800499c:	430a      	orrs	r2, r1
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	4b9f      	ldr	r3, [pc, #636]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	4b9e      	ldr	r3, [pc, #632]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 80049a6:	2180      	movs	r1, #128	; 0x80
 80049a8:	0249      	lsls	r1, r1, #9
 80049aa:	430a      	orrs	r2, r1
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	e00b      	b.n	80049c8 <HAL_RCC_OscConfig+0xe0>
 80049b0:	4b9b      	ldr	r3, [pc, #620]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	4b9a      	ldr	r3, [pc, #616]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 80049b6:	499b      	ldr	r1, [pc, #620]	; (8004c24 <HAL_RCC_OscConfig+0x33c>)
 80049b8:	400a      	ands	r2, r1
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	4b98      	ldr	r3, [pc, #608]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	4b97      	ldr	r3, [pc, #604]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 80049c2:	4999      	ldr	r1, [pc, #612]	; (8004c28 <HAL_RCC_OscConfig+0x340>)
 80049c4:	400a      	ands	r2, r1
 80049c6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d014      	beq.n	80049fa <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d0:	f7fd fa50 	bl	8001e74 <HAL_GetTick>
 80049d4:	0003      	movs	r3, r0
 80049d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049d8:	e008      	b.n	80049ec <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049da:	f7fd fa4b 	bl	8001e74 <HAL_GetTick>
 80049de:	0002      	movs	r2, r0
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b64      	cmp	r3, #100	; 0x64
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e2fd      	b.n	8004fe8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ec:	4b8c      	ldr	r3, [pc, #560]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	2380      	movs	r3, #128	; 0x80
 80049f2:	029b      	lsls	r3, r3, #10
 80049f4:	4013      	ands	r3, r2
 80049f6:	d0f0      	beq.n	80049da <HAL_RCC_OscConfig+0xf2>
 80049f8:	e015      	b.n	8004a26 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049fa:	f7fd fa3b 	bl	8001e74 <HAL_GetTick>
 80049fe:	0003      	movs	r3, r0
 8004a00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a04:	f7fd fa36 	bl	8001e74 <HAL_GetTick>
 8004a08:	0002      	movs	r2, r0
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b64      	cmp	r3, #100	; 0x64
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e2e8      	b.n	8004fe8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a16:	4b82      	ldr	r3, [pc, #520]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	2380      	movs	r3, #128	; 0x80
 8004a1c:	029b      	lsls	r3, r3, #10
 8004a1e:	4013      	ands	r3, r2
 8004a20:	d1f0      	bne.n	8004a04 <HAL_RCC_OscConfig+0x11c>
 8004a22:	e000      	b.n	8004a26 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a24:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	d100      	bne.n	8004a32 <HAL_RCC_OscConfig+0x14a>
 8004a30:	e06c      	b.n	8004b0c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004a32:	4b7b      	ldr	r3, [pc, #492]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	220c      	movs	r2, #12
 8004a38:	4013      	ands	r3, r2
 8004a3a:	d00e      	beq.n	8004a5a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004a3c:	4b78      	ldr	r3, [pc, #480]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	220c      	movs	r2, #12
 8004a42:	4013      	ands	r3, r2
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d11f      	bne.n	8004a88 <HAL_RCC_OscConfig+0x1a0>
 8004a48:	4b75      	ldr	r3, [pc, #468]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	23c0      	movs	r3, #192	; 0xc0
 8004a4e:	025b      	lsls	r3, r3, #9
 8004a50:	401a      	ands	r2, r3
 8004a52:	2380      	movs	r3, #128	; 0x80
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d116      	bne.n	8004a88 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a5a:	4b71      	ldr	r3, [pc, #452]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	4013      	ands	r3, r2
 8004a62:	d005      	beq.n	8004a70 <HAL_RCC_OscConfig+0x188>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d001      	beq.n	8004a70 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e2bb      	b.n	8004fe8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a70:	4b6b      	ldr	r3, [pc, #428]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	22f8      	movs	r2, #248	; 0xf8
 8004a76:	4393      	bics	r3, r2
 8004a78:	0019      	movs	r1, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	00da      	lsls	r2, r3, #3
 8004a80:	4b67      	ldr	r3, [pc, #412]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004a82:	430a      	orrs	r2, r1
 8004a84:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a86:	e041      	b.n	8004b0c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d024      	beq.n	8004ada <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a90:	4b63      	ldr	r3, [pc, #396]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	4b62      	ldr	r3, [pc, #392]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004a96:	2101      	movs	r1, #1
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9c:	f7fd f9ea 	bl	8001e74 <HAL_GetTick>
 8004aa0:	0003      	movs	r3, r0
 8004aa2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aa6:	f7fd f9e5 	bl	8001e74 <HAL_GetTick>
 8004aaa:	0002      	movs	r2, r0
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e297      	b.n	8004fe8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab8:	4b59      	ldr	r3, [pc, #356]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2202      	movs	r2, #2
 8004abe:	4013      	ands	r3, r2
 8004ac0:	d0f1      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac2:	4b57      	ldr	r3, [pc, #348]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	22f8      	movs	r2, #248	; 0xf8
 8004ac8:	4393      	bics	r3, r2
 8004aca:	0019      	movs	r1, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	00da      	lsls	r2, r3, #3
 8004ad2:	4b53      	ldr	r3, [pc, #332]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	e018      	b.n	8004b0c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ada:	4b51      	ldr	r3, [pc, #324]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	4b50      	ldr	r3, [pc, #320]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	438a      	bics	r2, r1
 8004ae4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae6:	f7fd f9c5 	bl	8001e74 <HAL_GetTick>
 8004aea:	0003      	movs	r3, r0
 8004aec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004af0:	f7fd f9c0 	bl	8001e74 <HAL_GetTick>
 8004af4:	0002      	movs	r2, r0
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e272      	b.n	8004fe8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b02:	4b47      	ldr	r3, [pc, #284]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2202      	movs	r2, #2
 8004b08:	4013      	ands	r3, r2
 8004b0a:	d1f1      	bne.n	8004af0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2208      	movs	r2, #8
 8004b12:	4013      	ands	r3, r2
 8004b14:	d036      	beq.n	8004b84 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d019      	beq.n	8004b52 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b1e:	4b40      	ldr	r3, [pc, #256]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004b20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b22:	4b3f      	ldr	r3, [pc, #252]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004b24:	2101      	movs	r1, #1
 8004b26:	430a      	orrs	r2, r1
 8004b28:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b2a:	f7fd f9a3 	bl	8001e74 <HAL_GetTick>
 8004b2e:	0003      	movs	r3, r0
 8004b30:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b34:	f7fd f99e 	bl	8001e74 <HAL_GetTick>
 8004b38:	0002      	movs	r2, r0
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e250      	b.n	8004fe8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b46:	4b36      	ldr	r3, [pc, #216]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	d0f1      	beq.n	8004b34 <HAL_RCC_OscConfig+0x24c>
 8004b50:	e018      	b.n	8004b84 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b52:	4b33      	ldr	r3, [pc, #204]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004b54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b56:	4b32      	ldr	r3, [pc, #200]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004b58:	2101      	movs	r1, #1
 8004b5a:	438a      	bics	r2, r1
 8004b5c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b5e:	f7fd f989 	bl	8001e74 <HAL_GetTick>
 8004b62:	0003      	movs	r3, r0
 8004b64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b68:	f7fd f984 	bl	8001e74 <HAL_GetTick>
 8004b6c:	0002      	movs	r2, r0
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e236      	b.n	8004fe8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b7a:	4b29      	ldr	r3, [pc, #164]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	2202      	movs	r2, #2
 8004b80:	4013      	ands	r3, r2
 8004b82:	d1f1      	bne.n	8004b68 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2204      	movs	r2, #4
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	d100      	bne.n	8004b90 <HAL_RCC_OscConfig+0x2a8>
 8004b8e:	e0b5      	b.n	8004cfc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b90:	201f      	movs	r0, #31
 8004b92:	183b      	adds	r3, r7, r0
 8004b94:	2200      	movs	r2, #0
 8004b96:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b98:	4b21      	ldr	r3, [pc, #132]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004b9a:	69da      	ldr	r2, [r3, #28]
 8004b9c:	2380      	movs	r3, #128	; 0x80
 8004b9e:	055b      	lsls	r3, r3, #21
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d110      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ba4:	4b1e      	ldr	r3, [pc, #120]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004ba6:	69da      	ldr	r2, [r3, #28]
 8004ba8:	4b1d      	ldr	r3, [pc, #116]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004baa:	2180      	movs	r1, #128	; 0x80
 8004bac:	0549      	lsls	r1, r1, #21
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	61da      	str	r2, [r3, #28]
 8004bb2:	4b1b      	ldr	r3, [pc, #108]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004bb4:	69da      	ldr	r2, [r3, #28]
 8004bb6:	2380      	movs	r3, #128	; 0x80
 8004bb8:	055b      	lsls	r3, r3, #21
 8004bba:	4013      	ands	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004bc0:	183b      	adds	r3, r7, r0
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc6:	4b19      	ldr	r3, [pc, #100]	; (8004c2c <HAL_RCC_OscConfig+0x344>)
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	2380      	movs	r3, #128	; 0x80
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d11a      	bne.n	8004c08 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bd2:	4b16      	ldr	r3, [pc, #88]	; (8004c2c <HAL_RCC_OscConfig+0x344>)
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	4b15      	ldr	r3, [pc, #84]	; (8004c2c <HAL_RCC_OscConfig+0x344>)
 8004bd8:	2180      	movs	r1, #128	; 0x80
 8004bda:	0049      	lsls	r1, r1, #1
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004be0:	f7fd f948 	bl	8001e74 <HAL_GetTick>
 8004be4:	0003      	movs	r3, r0
 8004be6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bea:	f7fd f943 	bl	8001e74 <HAL_GetTick>
 8004bee:	0002      	movs	r2, r0
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b64      	cmp	r3, #100	; 0x64
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e1f5      	b.n	8004fe8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bfc:	4b0b      	ldr	r3, [pc, #44]	; (8004c2c <HAL_RCC_OscConfig+0x344>)
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	2380      	movs	r3, #128	; 0x80
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	4013      	ands	r3, r2
 8004c06:	d0f0      	beq.n	8004bea <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d10f      	bne.n	8004c30 <HAL_RCC_OscConfig+0x348>
 8004c10:	4b03      	ldr	r3, [pc, #12]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004c12:	6a1a      	ldr	r2, [r3, #32]
 8004c14:	4b02      	ldr	r3, [pc, #8]	; (8004c20 <HAL_RCC_OscConfig+0x338>)
 8004c16:	2101      	movs	r1, #1
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	621a      	str	r2, [r3, #32]
 8004c1c:	e036      	b.n	8004c8c <HAL_RCC_OscConfig+0x3a4>
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	40021000 	.word	0x40021000
 8004c24:	fffeffff 	.word	0xfffeffff
 8004c28:	fffbffff 	.word	0xfffbffff
 8004c2c:	40007000 	.word	0x40007000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10c      	bne.n	8004c52 <HAL_RCC_OscConfig+0x36a>
 8004c38:	4bca      	ldr	r3, [pc, #808]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004c3a:	6a1a      	ldr	r2, [r3, #32]
 8004c3c:	4bc9      	ldr	r3, [pc, #804]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004c3e:	2101      	movs	r1, #1
 8004c40:	438a      	bics	r2, r1
 8004c42:	621a      	str	r2, [r3, #32]
 8004c44:	4bc7      	ldr	r3, [pc, #796]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004c46:	6a1a      	ldr	r2, [r3, #32]
 8004c48:	4bc6      	ldr	r3, [pc, #792]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004c4a:	2104      	movs	r1, #4
 8004c4c:	438a      	bics	r2, r1
 8004c4e:	621a      	str	r2, [r3, #32]
 8004c50:	e01c      	b.n	8004c8c <HAL_RCC_OscConfig+0x3a4>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	2b05      	cmp	r3, #5
 8004c58:	d10c      	bne.n	8004c74 <HAL_RCC_OscConfig+0x38c>
 8004c5a:	4bc2      	ldr	r3, [pc, #776]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004c5c:	6a1a      	ldr	r2, [r3, #32]
 8004c5e:	4bc1      	ldr	r3, [pc, #772]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004c60:	2104      	movs	r1, #4
 8004c62:	430a      	orrs	r2, r1
 8004c64:	621a      	str	r2, [r3, #32]
 8004c66:	4bbf      	ldr	r3, [pc, #764]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004c68:	6a1a      	ldr	r2, [r3, #32]
 8004c6a:	4bbe      	ldr	r3, [pc, #760]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	621a      	str	r2, [r3, #32]
 8004c72:	e00b      	b.n	8004c8c <HAL_RCC_OscConfig+0x3a4>
 8004c74:	4bbb      	ldr	r3, [pc, #748]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004c76:	6a1a      	ldr	r2, [r3, #32]
 8004c78:	4bba      	ldr	r3, [pc, #744]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	438a      	bics	r2, r1
 8004c7e:	621a      	str	r2, [r3, #32]
 8004c80:	4bb8      	ldr	r3, [pc, #736]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004c82:	6a1a      	ldr	r2, [r3, #32]
 8004c84:	4bb7      	ldr	r3, [pc, #732]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004c86:	2104      	movs	r1, #4
 8004c88:	438a      	bics	r2, r1
 8004c8a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d014      	beq.n	8004cbe <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c94:	f7fd f8ee 	bl	8001e74 <HAL_GetTick>
 8004c98:	0003      	movs	r3, r0
 8004c9a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c9c:	e009      	b.n	8004cb2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c9e:	f7fd f8e9 	bl	8001e74 <HAL_GetTick>
 8004ca2:	0002      	movs	r2, r0
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	4aaf      	ldr	r2, [pc, #700]	; (8004f68 <HAL_RCC_OscConfig+0x680>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e19a      	b.n	8004fe8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cb2:	4bac      	ldr	r3, [pc, #688]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	4013      	ands	r3, r2
 8004cba:	d0f0      	beq.n	8004c9e <HAL_RCC_OscConfig+0x3b6>
 8004cbc:	e013      	b.n	8004ce6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cbe:	f7fd f8d9 	bl	8001e74 <HAL_GetTick>
 8004cc2:	0003      	movs	r3, r0
 8004cc4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cc6:	e009      	b.n	8004cdc <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cc8:	f7fd f8d4 	bl	8001e74 <HAL_GetTick>
 8004ccc:	0002      	movs	r2, r0
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	4aa5      	ldr	r2, [pc, #660]	; (8004f68 <HAL_RCC_OscConfig+0x680>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e185      	b.n	8004fe8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cdc:	4ba1      	ldr	r3, [pc, #644]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d1f0      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ce6:	231f      	movs	r3, #31
 8004ce8:	18fb      	adds	r3, r7, r3
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d105      	bne.n	8004cfc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cf0:	4b9c      	ldr	r3, [pc, #624]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004cf2:	69da      	ldr	r2, [r3, #28]
 8004cf4:	4b9b      	ldr	r3, [pc, #620]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004cf6:	499d      	ldr	r1, [pc, #628]	; (8004f6c <HAL_RCC_OscConfig+0x684>)
 8004cf8:	400a      	ands	r2, r1
 8004cfa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2210      	movs	r2, #16
 8004d02:	4013      	ands	r3, r2
 8004d04:	d063      	beq.n	8004dce <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d12a      	bne.n	8004d64 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004d0e:	4b95      	ldr	r3, [pc, #596]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d12:	4b94      	ldr	r3, [pc, #592]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004d14:	2104      	movs	r1, #4
 8004d16:	430a      	orrs	r2, r1
 8004d18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004d1a:	4b92      	ldr	r3, [pc, #584]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d1e:	4b91      	ldr	r3, [pc, #580]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004d20:	2101      	movs	r1, #1
 8004d22:	430a      	orrs	r2, r1
 8004d24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d26:	f7fd f8a5 	bl	8001e74 <HAL_GetTick>
 8004d2a:	0003      	movs	r3, r0
 8004d2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004d30:	f7fd f8a0 	bl	8001e74 <HAL_GetTick>
 8004d34:	0002      	movs	r2, r0
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e152      	b.n	8004fe8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004d42:	4b88      	ldr	r3, [pc, #544]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d46:	2202      	movs	r2, #2
 8004d48:	4013      	ands	r3, r2
 8004d4a:	d0f1      	beq.n	8004d30 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004d4c:	4b85      	ldr	r3, [pc, #532]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d50:	22f8      	movs	r2, #248	; 0xf8
 8004d52:	4393      	bics	r3, r2
 8004d54:	0019      	movs	r1, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	00da      	lsls	r2, r3, #3
 8004d5c:	4b81      	ldr	r3, [pc, #516]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	635a      	str	r2, [r3, #52]	; 0x34
 8004d62:	e034      	b.n	8004dce <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	695b      	ldr	r3, [r3, #20]
 8004d68:	3305      	adds	r3, #5
 8004d6a:	d111      	bne.n	8004d90 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004d6c:	4b7d      	ldr	r3, [pc, #500]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d70:	4b7c      	ldr	r3, [pc, #496]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004d72:	2104      	movs	r1, #4
 8004d74:	438a      	bics	r2, r1
 8004d76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004d78:	4b7a      	ldr	r3, [pc, #488]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7c:	22f8      	movs	r2, #248	; 0xf8
 8004d7e:	4393      	bics	r3, r2
 8004d80:	0019      	movs	r1, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	00da      	lsls	r2, r3, #3
 8004d88:	4b76      	ldr	r3, [pc, #472]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	635a      	str	r2, [r3, #52]	; 0x34
 8004d8e:	e01e      	b.n	8004dce <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004d90:	4b74      	ldr	r3, [pc, #464]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d94:	4b73      	ldr	r3, [pc, #460]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004d96:	2104      	movs	r1, #4
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004d9c:	4b71      	ldr	r3, [pc, #452]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004da0:	4b70      	ldr	r3, [pc, #448]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004da2:	2101      	movs	r1, #1
 8004da4:	438a      	bics	r2, r1
 8004da6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004da8:	f7fd f864 	bl	8001e74 <HAL_GetTick>
 8004dac:	0003      	movs	r3, r0
 8004dae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004db2:	f7fd f85f 	bl	8001e74 <HAL_GetTick>
 8004db6:	0002      	movs	r2, r0
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e111      	b.n	8004fe8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004dc4:	4b67      	ldr	r3, [pc, #412]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc8:	2202      	movs	r2, #2
 8004dca:	4013      	ands	r3, r2
 8004dcc:	d1f1      	bne.n	8004db2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2220      	movs	r2, #32
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	d05c      	beq.n	8004e92 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004dd8:	4b62      	ldr	r3, [pc, #392]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	220c      	movs	r2, #12
 8004dde:	4013      	ands	r3, r2
 8004de0:	2b0c      	cmp	r3, #12
 8004de2:	d00e      	beq.n	8004e02 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004de4:	4b5f      	ldr	r3, [pc, #380]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	220c      	movs	r2, #12
 8004dea:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d114      	bne.n	8004e1a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004df0:	4b5c      	ldr	r3, [pc, #368]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	23c0      	movs	r3, #192	; 0xc0
 8004df6:	025b      	lsls	r3, r3, #9
 8004df8:	401a      	ands	r2, r3
 8004dfa:	23c0      	movs	r3, #192	; 0xc0
 8004dfc:	025b      	lsls	r3, r3, #9
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d10b      	bne.n	8004e1a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004e02:	4b58      	ldr	r3, [pc, #352]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e06:	2380      	movs	r3, #128	; 0x80
 8004e08:	025b      	lsls	r3, r3, #9
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	d040      	beq.n	8004e90 <HAL_RCC_OscConfig+0x5a8>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d03c      	beq.n	8004e90 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e0e6      	b.n	8004fe8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d01b      	beq.n	8004e5a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004e22:	4b50      	ldr	r3, [pc, #320]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e26:	4b4f      	ldr	r3, [pc, #316]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004e28:	2180      	movs	r1, #128	; 0x80
 8004e2a:	0249      	lsls	r1, r1, #9
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e30:	f7fd f820 	bl	8001e74 <HAL_GetTick>
 8004e34:	0003      	movs	r3, r0
 8004e36:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e3a:	f7fd f81b 	bl	8001e74 <HAL_GetTick>
 8004e3e:	0002      	movs	r2, r0
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e0cd      	b.n	8004fe8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004e4c:	4b45      	ldr	r3, [pc, #276]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004e4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e50:	2380      	movs	r3, #128	; 0x80
 8004e52:	025b      	lsls	r3, r3, #9
 8004e54:	4013      	ands	r3, r2
 8004e56:	d0f0      	beq.n	8004e3a <HAL_RCC_OscConfig+0x552>
 8004e58:	e01b      	b.n	8004e92 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004e5a:	4b42      	ldr	r3, [pc, #264]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e5e:	4b41      	ldr	r3, [pc, #260]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004e60:	4943      	ldr	r1, [pc, #268]	; (8004f70 <HAL_RCC_OscConfig+0x688>)
 8004e62:	400a      	ands	r2, r1
 8004e64:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e66:	f7fd f805 	bl	8001e74 <HAL_GetTick>
 8004e6a:	0003      	movs	r3, r0
 8004e6c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e70:	f7fd f800 	bl	8001e74 <HAL_GetTick>
 8004e74:	0002      	movs	r2, r0
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e0b2      	b.n	8004fe8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004e82:	4b38      	ldr	r3, [pc, #224]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e86:	2380      	movs	r3, #128	; 0x80
 8004e88:	025b      	lsls	r3, r3, #9
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	d1f0      	bne.n	8004e70 <HAL_RCC_OscConfig+0x588>
 8004e8e:	e000      	b.n	8004e92 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004e90:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d100      	bne.n	8004e9c <HAL_RCC_OscConfig+0x5b4>
 8004e9a:	e0a4      	b.n	8004fe6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e9c:	4b31      	ldr	r3, [pc, #196]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	220c      	movs	r2, #12
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	2b08      	cmp	r3, #8
 8004ea6:	d100      	bne.n	8004eaa <HAL_RCC_OscConfig+0x5c2>
 8004ea8:	e078      	b.n	8004f9c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d14c      	bne.n	8004f4c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb2:	4b2c      	ldr	r3, [pc, #176]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	4b2b      	ldr	r3, [pc, #172]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004eb8:	492e      	ldr	r1, [pc, #184]	; (8004f74 <HAL_RCC_OscConfig+0x68c>)
 8004eba:	400a      	ands	r2, r1
 8004ebc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ebe:	f7fc ffd9 	bl	8001e74 <HAL_GetTick>
 8004ec2:	0003      	movs	r3, r0
 8004ec4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ec8:	f7fc ffd4 	bl	8001e74 <HAL_GetTick>
 8004ecc:	0002      	movs	r2, r0
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e086      	b.n	8004fe8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eda:	4b22      	ldr	r3, [pc, #136]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	2380      	movs	r3, #128	; 0x80
 8004ee0:	049b      	lsls	r3, r3, #18
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	d1f0      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ee6:	4b1f      	ldr	r3, [pc, #124]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eea:	220f      	movs	r2, #15
 8004eec:	4393      	bics	r3, r2
 8004eee:	0019      	movs	r1, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ef4:	4b1b      	ldr	r3, [pc, #108]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	62da      	str	r2, [r3, #44]	; 0x2c
 8004efa:	4b1a      	ldr	r3, [pc, #104]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	4a1e      	ldr	r2, [pc, #120]	; (8004f78 <HAL_RCC_OscConfig+0x690>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	0019      	movs	r1, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	4b15      	ldr	r3, [pc, #84]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004f10:	430a      	orrs	r2, r1
 8004f12:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f14:	4b13      	ldr	r3, [pc, #76]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	4b12      	ldr	r3, [pc, #72]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004f1a:	2180      	movs	r1, #128	; 0x80
 8004f1c:	0449      	lsls	r1, r1, #17
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f22:	f7fc ffa7 	bl	8001e74 <HAL_GetTick>
 8004f26:	0003      	movs	r3, r0
 8004f28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f2c:	f7fc ffa2 	bl	8001e74 <HAL_GetTick>
 8004f30:	0002      	movs	r2, r0
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e054      	b.n	8004fe8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f3e:	4b09      	ldr	r3, [pc, #36]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	049b      	lsls	r3, r3, #18
 8004f46:	4013      	ands	r3, r2
 8004f48:	d0f0      	beq.n	8004f2c <HAL_RCC_OscConfig+0x644>
 8004f4a:	e04c      	b.n	8004fe6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f4c:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	4b04      	ldr	r3, [pc, #16]	; (8004f64 <HAL_RCC_OscConfig+0x67c>)
 8004f52:	4908      	ldr	r1, [pc, #32]	; (8004f74 <HAL_RCC_OscConfig+0x68c>)
 8004f54:	400a      	ands	r2, r1
 8004f56:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f58:	f7fc ff8c 	bl	8001e74 <HAL_GetTick>
 8004f5c:	0003      	movs	r3, r0
 8004f5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f60:	e015      	b.n	8004f8e <HAL_RCC_OscConfig+0x6a6>
 8004f62:	46c0      	nop			; (mov r8, r8)
 8004f64:	40021000 	.word	0x40021000
 8004f68:	00001388 	.word	0x00001388
 8004f6c:	efffffff 	.word	0xefffffff
 8004f70:	fffeffff 	.word	0xfffeffff
 8004f74:	feffffff 	.word	0xfeffffff
 8004f78:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f7c:	f7fc ff7a 	bl	8001e74 <HAL_GetTick>
 8004f80:	0002      	movs	r2, r0
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e02c      	b.n	8004fe8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f8e:	4b18      	ldr	r3, [pc, #96]	; (8004ff0 <HAL_RCC_OscConfig+0x708>)
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	2380      	movs	r3, #128	; 0x80
 8004f94:	049b      	lsls	r3, r3, #18
 8004f96:	4013      	ands	r3, r2
 8004f98:	d1f0      	bne.n	8004f7c <HAL_RCC_OscConfig+0x694>
 8004f9a:	e024      	b.n	8004fe6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e01f      	b.n	8004fe8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004fa8:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <HAL_RCC_OscConfig+0x708>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004fae:	4b10      	ldr	r3, [pc, #64]	; (8004ff0 <HAL_RCC_OscConfig+0x708>)
 8004fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	23c0      	movs	r3, #192	; 0xc0
 8004fb8:	025b      	lsls	r3, r3, #9
 8004fba:	401a      	ands	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d10e      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	220f      	movs	r2, #15
 8004fc8:	401a      	ands	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d107      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004fd2:	697a      	ldr	r2, [r7, #20]
 8004fd4:	23f0      	movs	r3, #240	; 0xf0
 8004fd6:	039b      	lsls	r3, r3, #14
 8004fd8:	401a      	ands	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d001      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	0018      	movs	r0, r3
 8004fea:	46bd      	mov	sp, r7
 8004fec:	b008      	add	sp, #32
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	40021000 	.word	0x40021000

08004ff4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0bf      	b.n	8005188 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005008:	4b61      	ldr	r3, [pc, #388]	; (8005190 <HAL_RCC_ClockConfig+0x19c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2201      	movs	r2, #1
 800500e:	4013      	ands	r3, r2
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d911      	bls.n	800503a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005016:	4b5e      	ldr	r3, [pc, #376]	; (8005190 <HAL_RCC_ClockConfig+0x19c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2201      	movs	r2, #1
 800501c:	4393      	bics	r3, r2
 800501e:	0019      	movs	r1, r3
 8005020:	4b5b      	ldr	r3, [pc, #364]	; (8005190 <HAL_RCC_ClockConfig+0x19c>)
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005028:	4b59      	ldr	r3, [pc, #356]	; (8005190 <HAL_RCC_ClockConfig+0x19c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2201      	movs	r2, #1
 800502e:	4013      	ands	r3, r2
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	d001      	beq.n	800503a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e0a6      	b.n	8005188 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2202      	movs	r2, #2
 8005040:	4013      	ands	r3, r2
 8005042:	d015      	beq.n	8005070 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2204      	movs	r2, #4
 800504a:	4013      	ands	r3, r2
 800504c:	d006      	beq.n	800505c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800504e:	4b51      	ldr	r3, [pc, #324]	; (8005194 <HAL_RCC_ClockConfig+0x1a0>)
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	4b50      	ldr	r3, [pc, #320]	; (8005194 <HAL_RCC_ClockConfig+0x1a0>)
 8005054:	21e0      	movs	r1, #224	; 0xe0
 8005056:	00c9      	lsls	r1, r1, #3
 8005058:	430a      	orrs	r2, r1
 800505a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800505c:	4b4d      	ldr	r3, [pc, #308]	; (8005194 <HAL_RCC_ClockConfig+0x1a0>)
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	22f0      	movs	r2, #240	; 0xf0
 8005062:	4393      	bics	r3, r2
 8005064:	0019      	movs	r1, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689a      	ldr	r2, [r3, #8]
 800506a:	4b4a      	ldr	r3, [pc, #296]	; (8005194 <HAL_RCC_ClockConfig+0x1a0>)
 800506c:	430a      	orrs	r2, r1
 800506e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2201      	movs	r2, #1
 8005076:	4013      	ands	r3, r2
 8005078:	d04c      	beq.n	8005114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d107      	bne.n	8005092 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005082:	4b44      	ldr	r3, [pc, #272]	; (8005194 <HAL_RCC_ClockConfig+0x1a0>)
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	2380      	movs	r3, #128	; 0x80
 8005088:	029b      	lsls	r3, r3, #10
 800508a:	4013      	ands	r3, r2
 800508c:	d120      	bne.n	80050d0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e07a      	b.n	8005188 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	2b02      	cmp	r3, #2
 8005098:	d107      	bne.n	80050aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800509a:	4b3e      	ldr	r3, [pc, #248]	; (8005194 <HAL_RCC_ClockConfig+0x1a0>)
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	2380      	movs	r3, #128	; 0x80
 80050a0:	049b      	lsls	r3, r3, #18
 80050a2:	4013      	ands	r3, r2
 80050a4:	d114      	bne.n	80050d0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e06e      	b.n	8005188 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d107      	bne.n	80050c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80050b2:	4b38      	ldr	r3, [pc, #224]	; (8005194 <HAL_RCC_ClockConfig+0x1a0>)
 80050b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b6:	2380      	movs	r3, #128	; 0x80
 80050b8:	025b      	lsls	r3, r3, #9
 80050ba:	4013      	ands	r3, r2
 80050bc:	d108      	bne.n	80050d0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e062      	b.n	8005188 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c2:	4b34      	ldr	r3, [pc, #208]	; (8005194 <HAL_RCC_ClockConfig+0x1a0>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2202      	movs	r2, #2
 80050c8:	4013      	ands	r3, r2
 80050ca:	d101      	bne.n	80050d0 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e05b      	b.n	8005188 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050d0:	4b30      	ldr	r3, [pc, #192]	; (8005194 <HAL_RCC_ClockConfig+0x1a0>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	2203      	movs	r2, #3
 80050d6:	4393      	bics	r3, r2
 80050d8:	0019      	movs	r1, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	4b2d      	ldr	r3, [pc, #180]	; (8005194 <HAL_RCC_ClockConfig+0x1a0>)
 80050e0:	430a      	orrs	r2, r1
 80050e2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050e4:	f7fc fec6 	bl	8001e74 <HAL_GetTick>
 80050e8:	0003      	movs	r3, r0
 80050ea:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ec:	e009      	b.n	8005102 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ee:	f7fc fec1 	bl	8001e74 <HAL_GetTick>
 80050f2:	0002      	movs	r2, r0
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	4a27      	ldr	r2, [pc, #156]	; (8005198 <HAL_RCC_ClockConfig+0x1a4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e042      	b.n	8005188 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005102:	4b24      	ldr	r3, [pc, #144]	; (8005194 <HAL_RCC_ClockConfig+0x1a0>)
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	220c      	movs	r2, #12
 8005108:	401a      	ands	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	429a      	cmp	r2, r3
 8005112:	d1ec      	bne.n	80050ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005114:	4b1e      	ldr	r3, [pc, #120]	; (8005190 <HAL_RCC_ClockConfig+0x19c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2201      	movs	r2, #1
 800511a:	4013      	ands	r3, r2
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	429a      	cmp	r2, r3
 8005120:	d211      	bcs.n	8005146 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005122:	4b1b      	ldr	r3, [pc, #108]	; (8005190 <HAL_RCC_ClockConfig+0x19c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2201      	movs	r2, #1
 8005128:	4393      	bics	r3, r2
 800512a:	0019      	movs	r1, r3
 800512c:	4b18      	ldr	r3, [pc, #96]	; (8005190 <HAL_RCC_ClockConfig+0x19c>)
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005134:	4b16      	ldr	r3, [pc, #88]	; (8005190 <HAL_RCC_ClockConfig+0x19c>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2201      	movs	r2, #1
 800513a:	4013      	ands	r3, r2
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	429a      	cmp	r2, r3
 8005140:	d001      	beq.n	8005146 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e020      	b.n	8005188 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2204      	movs	r2, #4
 800514c:	4013      	ands	r3, r2
 800514e:	d009      	beq.n	8005164 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005150:	4b10      	ldr	r3, [pc, #64]	; (8005194 <HAL_RCC_ClockConfig+0x1a0>)
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	4a11      	ldr	r2, [pc, #68]	; (800519c <HAL_RCC_ClockConfig+0x1a8>)
 8005156:	4013      	ands	r3, r2
 8005158:	0019      	movs	r1, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	4b0d      	ldr	r3, [pc, #52]	; (8005194 <HAL_RCC_ClockConfig+0x1a0>)
 8005160:	430a      	orrs	r2, r1
 8005162:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005164:	f000 f820 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 8005168:	0001      	movs	r1, r0
 800516a:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <HAL_RCC_ClockConfig+0x1a0>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	091b      	lsrs	r3, r3, #4
 8005170:	220f      	movs	r2, #15
 8005172:	4013      	ands	r3, r2
 8005174:	4a0a      	ldr	r2, [pc, #40]	; (80051a0 <HAL_RCC_ClockConfig+0x1ac>)
 8005176:	5cd3      	ldrb	r3, [r2, r3]
 8005178:	000a      	movs	r2, r1
 800517a:	40da      	lsrs	r2, r3
 800517c:	4b09      	ldr	r3, [pc, #36]	; (80051a4 <HAL_RCC_ClockConfig+0x1b0>)
 800517e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005180:	2003      	movs	r0, #3
 8005182:	f7fc fe31 	bl	8001de8 <HAL_InitTick>
  
  return HAL_OK;
 8005186:	2300      	movs	r3, #0
}
 8005188:	0018      	movs	r0, r3
 800518a:	46bd      	mov	sp, r7
 800518c:	b004      	add	sp, #16
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40022000 	.word	0x40022000
 8005194:	40021000 	.word	0x40021000
 8005198:	00001388 	.word	0x00001388
 800519c:	fffff8ff 	.word	0xfffff8ff
 80051a0:	0800c3d4 	.word	0x0800c3d4
 80051a4:	20000000 	.word	0x20000000

080051a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a8:	b590      	push	{r4, r7, lr}
 80051aa:	b08f      	sub	sp, #60	; 0x3c
 80051ac:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80051ae:	2314      	movs	r3, #20
 80051b0:	18fb      	adds	r3, r7, r3
 80051b2:	4a38      	ldr	r2, [pc, #224]	; (8005294 <HAL_RCC_GetSysClockFreq+0xec>)
 80051b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80051b6:	c313      	stmia	r3!, {r0, r1, r4}
 80051b8:	6812      	ldr	r2, [r2, #0]
 80051ba:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80051bc:	1d3b      	adds	r3, r7, #4
 80051be:	4a36      	ldr	r2, [pc, #216]	; (8005298 <HAL_RCC_GetSysClockFreq+0xf0>)
 80051c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80051c2:	c313      	stmia	r3!, {r0, r1, r4}
 80051c4:	6812      	ldr	r2, [r2, #0]
 80051c6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051cc:	2300      	movs	r3, #0
 80051ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80051d0:	2300      	movs	r3, #0
 80051d2:	637b      	str	r3, [r7, #52]	; 0x34
 80051d4:	2300      	movs	r3, #0
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80051dc:	4b2f      	ldr	r3, [pc, #188]	; (800529c <HAL_RCC_GetSysClockFreq+0xf4>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80051e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e4:	220c      	movs	r2, #12
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b0c      	cmp	r3, #12
 80051ea:	d047      	beq.n	800527c <HAL_RCC_GetSysClockFreq+0xd4>
 80051ec:	d849      	bhi.n	8005282 <HAL_RCC_GetSysClockFreq+0xda>
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d002      	beq.n	80051f8 <HAL_RCC_GetSysClockFreq+0x50>
 80051f2:	2b08      	cmp	r3, #8
 80051f4:	d003      	beq.n	80051fe <HAL_RCC_GetSysClockFreq+0x56>
 80051f6:	e044      	b.n	8005282 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80051f8:	4b29      	ldr	r3, [pc, #164]	; (80052a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80051fc:	e044      	b.n	8005288 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80051fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005200:	0c9b      	lsrs	r3, r3, #18
 8005202:	220f      	movs	r2, #15
 8005204:	4013      	ands	r3, r2
 8005206:	2214      	movs	r2, #20
 8005208:	18ba      	adds	r2, r7, r2
 800520a:	5cd3      	ldrb	r3, [r2, r3]
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800520e:	4b23      	ldr	r3, [pc, #140]	; (800529c <HAL_RCC_GetSysClockFreq+0xf4>)
 8005210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005212:	220f      	movs	r2, #15
 8005214:	4013      	ands	r3, r2
 8005216:	1d3a      	adds	r2, r7, #4
 8005218:	5cd3      	ldrb	r3, [r2, r3]
 800521a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800521c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800521e:	23c0      	movs	r3, #192	; 0xc0
 8005220:	025b      	lsls	r3, r3, #9
 8005222:	401a      	ands	r2, r3
 8005224:	2380      	movs	r3, #128	; 0x80
 8005226:	025b      	lsls	r3, r3, #9
 8005228:	429a      	cmp	r2, r3
 800522a:	d109      	bne.n	8005240 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800522c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800522e:	481c      	ldr	r0, [pc, #112]	; (80052a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005230:	f7fa ff7c 	bl	800012c <__udivsi3>
 8005234:	0003      	movs	r3, r0
 8005236:	001a      	movs	r2, r3
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	4353      	muls	r3, r2
 800523c:	637b      	str	r3, [r7, #52]	; 0x34
 800523e:	e01a      	b.n	8005276 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005242:	23c0      	movs	r3, #192	; 0xc0
 8005244:	025b      	lsls	r3, r3, #9
 8005246:	401a      	ands	r2, r3
 8005248:	23c0      	movs	r3, #192	; 0xc0
 800524a:	025b      	lsls	r3, r3, #9
 800524c:	429a      	cmp	r2, r3
 800524e:	d109      	bne.n	8005264 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005252:	4814      	ldr	r0, [pc, #80]	; (80052a4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005254:	f7fa ff6a 	bl	800012c <__udivsi3>
 8005258:	0003      	movs	r3, r0
 800525a:	001a      	movs	r2, r3
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	4353      	muls	r3, r2
 8005260:	637b      	str	r3, [r7, #52]	; 0x34
 8005262:	e008      	b.n	8005276 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005264:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005266:	4810      	ldr	r0, [pc, #64]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x100>)
 8005268:	f7fa ff60 	bl	800012c <__udivsi3>
 800526c:	0003      	movs	r3, r0
 800526e:	001a      	movs	r2, r3
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	4353      	muls	r3, r2
 8005274:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005278:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800527a:	e005      	b.n	8005288 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800527c:	4b09      	ldr	r3, [pc, #36]	; (80052a4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800527e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005280:	e002      	b.n	8005288 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005282:	4b09      	ldr	r3, [pc, #36]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x100>)
 8005284:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005286:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800528a:	0018      	movs	r0, r3
 800528c:	46bd      	mov	sp, r7
 800528e:	b00f      	add	sp, #60	; 0x3c
 8005290:	bd90      	pop	{r4, r7, pc}
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	0800c354 	.word	0x0800c354
 8005298:	0800c364 	.word	0x0800c364
 800529c:	40021000 	.word	0x40021000
 80052a0:	00f42400 	.word	0x00f42400
 80052a4:	02dc6c00 	.word	0x02dc6c00
 80052a8:	007a1200 	.word	0x007a1200

080052ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052b0:	4b02      	ldr	r3, [pc, #8]	; (80052bc <HAL_RCC_GetHCLKFreq+0x10>)
 80052b2:	681b      	ldr	r3, [r3, #0]
}
 80052b4:	0018      	movs	r0, r3
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	46c0      	nop			; (mov r8, r8)
 80052bc:	20000000 	.word	0x20000000

080052c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80052c4:	f7ff fff2 	bl	80052ac <HAL_RCC_GetHCLKFreq>
 80052c8:	0001      	movs	r1, r0
 80052ca:	4b06      	ldr	r3, [pc, #24]	; (80052e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	0a1b      	lsrs	r3, r3, #8
 80052d0:	2207      	movs	r2, #7
 80052d2:	4013      	ands	r3, r2
 80052d4:	4a04      	ldr	r2, [pc, #16]	; (80052e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052d6:	5cd3      	ldrb	r3, [r2, r3]
 80052d8:	40d9      	lsrs	r1, r3
 80052da:	000b      	movs	r3, r1
}    
 80052dc:	0018      	movs	r0, r3
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	40021000 	.word	0x40021000
 80052e8:	0800c3e4 	.word	0x0800c3e4

080052ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80052f8:	2300      	movs	r3, #0
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	2380      	movs	r3, #128	; 0x80
 8005302:	025b      	lsls	r3, r3, #9
 8005304:	4013      	ands	r3, r2
 8005306:	d100      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005308:	e08e      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800530a:	2017      	movs	r0, #23
 800530c:	183b      	adds	r3, r7, r0
 800530e:	2200      	movs	r2, #0
 8005310:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005312:	4b6e      	ldr	r3, [pc, #440]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005314:	69da      	ldr	r2, [r3, #28]
 8005316:	2380      	movs	r3, #128	; 0x80
 8005318:	055b      	lsls	r3, r3, #21
 800531a:	4013      	ands	r3, r2
 800531c:	d110      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800531e:	4b6b      	ldr	r3, [pc, #428]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005320:	69da      	ldr	r2, [r3, #28]
 8005322:	4b6a      	ldr	r3, [pc, #424]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005324:	2180      	movs	r1, #128	; 0x80
 8005326:	0549      	lsls	r1, r1, #21
 8005328:	430a      	orrs	r2, r1
 800532a:	61da      	str	r2, [r3, #28]
 800532c:	4b67      	ldr	r3, [pc, #412]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800532e:	69da      	ldr	r2, [r3, #28]
 8005330:	2380      	movs	r3, #128	; 0x80
 8005332:	055b      	lsls	r3, r3, #21
 8005334:	4013      	ands	r3, r2
 8005336:	60bb      	str	r3, [r7, #8]
 8005338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800533a:	183b      	adds	r3, r7, r0
 800533c:	2201      	movs	r2, #1
 800533e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005340:	4b63      	ldr	r3, [pc, #396]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	2380      	movs	r3, #128	; 0x80
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	4013      	ands	r3, r2
 800534a:	d11a      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800534c:	4b60      	ldr	r3, [pc, #384]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	4b5f      	ldr	r3, [pc, #380]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005352:	2180      	movs	r1, #128	; 0x80
 8005354:	0049      	lsls	r1, r1, #1
 8005356:	430a      	orrs	r2, r1
 8005358:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800535a:	f7fc fd8b 	bl	8001e74 <HAL_GetTick>
 800535e:	0003      	movs	r3, r0
 8005360:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005362:	e008      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005364:	f7fc fd86 	bl	8001e74 <HAL_GetTick>
 8005368:	0002      	movs	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b64      	cmp	r3, #100	; 0x64
 8005370:	d901      	bls.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e0a6      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005376:	4b56      	ldr	r3, [pc, #344]	; (80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	2380      	movs	r3, #128	; 0x80
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	4013      	ands	r3, r2
 8005380:	d0f0      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005382:	4b52      	ldr	r3, [pc, #328]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005384:	6a1a      	ldr	r2, [r3, #32]
 8005386:	23c0      	movs	r3, #192	; 0xc0
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4013      	ands	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d034      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	23c0      	movs	r3, #192	; 0xc0
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4013      	ands	r3, r2
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d02c      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053a4:	4b49      	ldr	r3, [pc, #292]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	4a4a      	ldr	r2, [pc, #296]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80053aa:	4013      	ands	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053ae:	4b47      	ldr	r3, [pc, #284]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053b0:	6a1a      	ldr	r2, [r3, #32]
 80053b2:	4b46      	ldr	r3, [pc, #280]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053b4:	2180      	movs	r1, #128	; 0x80
 80053b6:	0249      	lsls	r1, r1, #9
 80053b8:	430a      	orrs	r2, r1
 80053ba:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053bc:	4b43      	ldr	r3, [pc, #268]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053be:	6a1a      	ldr	r2, [r3, #32]
 80053c0:	4b42      	ldr	r3, [pc, #264]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053c2:	4945      	ldr	r1, [pc, #276]	; (80054d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80053c4:	400a      	ands	r2, r1
 80053c6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80053c8:	4b40      	ldr	r3, [pc, #256]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2201      	movs	r2, #1
 80053d2:	4013      	ands	r3, r2
 80053d4:	d013      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d6:	f7fc fd4d 	bl	8001e74 <HAL_GetTick>
 80053da:	0003      	movs	r3, r0
 80053dc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053de:	e009      	b.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e0:	f7fc fd48 	bl	8001e74 <HAL_GetTick>
 80053e4:	0002      	movs	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	4a3c      	ldr	r2, [pc, #240]	; (80054dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e067      	b.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f4:	4b35      	ldr	r3, [pc, #212]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	2202      	movs	r2, #2
 80053fa:	4013      	ands	r3, r2
 80053fc:	d0f0      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053fe:	4b33      	ldr	r3, [pc, #204]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	4a34      	ldr	r2, [pc, #208]	; (80054d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005404:	4013      	ands	r3, r2
 8005406:	0019      	movs	r1, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	4b2f      	ldr	r3, [pc, #188]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800540e:	430a      	orrs	r2, r1
 8005410:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005412:	2317      	movs	r3, #23
 8005414:	18fb      	adds	r3, r7, r3
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d105      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800541c:	4b2b      	ldr	r3, [pc, #172]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800541e:	69da      	ldr	r2, [r3, #28]
 8005420:	4b2a      	ldr	r3, [pc, #168]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005422:	492f      	ldr	r1, [pc, #188]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005424:	400a      	ands	r2, r1
 8005426:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2201      	movs	r2, #1
 800542e:	4013      	ands	r3, r2
 8005430:	d009      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005432:	4b26      	ldr	r3, [pc, #152]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	2203      	movs	r2, #3
 8005438:	4393      	bics	r3, r2
 800543a:	0019      	movs	r1, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	4b22      	ldr	r3, [pc, #136]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005442:	430a      	orrs	r2, r1
 8005444:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2202      	movs	r2, #2
 800544c:	4013      	ands	r3, r2
 800544e:	d009      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005450:	4b1e      	ldr	r3, [pc, #120]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005454:	4a23      	ldr	r2, [pc, #140]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005456:	4013      	ands	r3, r2
 8005458:	0019      	movs	r1, r3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68da      	ldr	r2, [r3, #12]
 800545e:	4b1b      	ldr	r3, [pc, #108]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005460:	430a      	orrs	r2, r1
 8005462:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2220      	movs	r2, #32
 800546a:	4013      	ands	r3, r2
 800546c:	d009      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800546e:	4b17      	ldr	r3, [pc, #92]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005472:	2210      	movs	r2, #16
 8005474:	4393      	bics	r3, r2
 8005476:	0019      	movs	r1, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691a      	ldr	r2, [r3, #16]
 800547c:	4b13      	ldr	r3, [pc, #76]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800547e:	430a      	orrs	r2, r1
 8005480:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	2380      	movs	r3, #128	; 0x80
 8005488:	029b      	lsls	r3, r3, #10
 800548a:	4013      	ands	r3, r2
 800548c:	d009      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800548e:	4b0f      	ldr	r3, [pc, #60]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005492:	2280      	movs	r2, #128	; 0x80
 8005494:	4393      	bics	r3, r2
 8005496:	0019      	movs	r1, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	699a      	ldr	r2, [r3, #24]
 800549c:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800549e:	430a      	orrs	r2, r1
 80054a0:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	2380      	movs	r3, #128	; 0x80
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	4013      	ands	r3, r2
 80054ac:	d009      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054ae:	4b07      	ldr	r3, [pc, #28]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b2:	2240      	movs	r2, #64	; 0x40
 80054b4:	4393      	bics	r3, r2
 80054b6:	0019      	movs	r1, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	695a      	ldr	r2, [r3, #20]
 80054bc:	4b03      	ldr	r3, [pc, #12]	; (80054cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054be:	430a      	orrs	r2, r1
 80054c0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	0018      	movs	r0, r3
 80054c6:	46bd      	mov	sp, r7
 80054c8:	b006      	add	sp, #24
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40021000 	.word	0x40021000
 80054d0:	40007000 	.word	0x40007000
 80054d4:	fffffcff 	.word	0xfffffcff
 80054d8:	fffeffff 	.word	0xfffeffff
 80054dc:	00001388 	.word	0x00001388
 80054e0:	efffffff 	.word	0xefffffff
 80054e4:	fffcffff 	.word	0xfffcffff

080054e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e0a8      	b.n	800564c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d109      	bne.n	8005516 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	2382      	movs	r3, #130	; 0x82
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	429a      	cmp	r2, r3
 800550c:	d009      	beq.n	8005522 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	61da      	str	r2, [r3, #28]
 8005514:	e005      	b.n	8005522 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	225d      	movs	r2, #93	; 0x5d
 800552c:	5c9b      	ldrb	r3, [r3, r2]
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	d107      	bne.n	8005544 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	225c      	movs	r2, #92	; 0x5c
 8005538:	2100      	movs	r1, #0
 800553a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	0018      	movs	r0, r3
 8005540:	f7fc f8d4 	bl	80016ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	225d      	movs	r2, #93	; 0x5d
 8005548:	2102      	movs	r1, #2
 800554a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2140      	movs	r1, #64	; 0x40
 8005558:	438a      	bics	r2, r1
 800555a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	23e0      	movs	r3, #224	; 0xe0
 8005562:	00db      	lsls	r3, r3, #3
 8005564:	429a      	cmp	r2, r3
 8005566:	d902      	bls.n	800556e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005568:	2300      	movs	r3, #0
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	e002      	b.n	8005574 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800556e:	2380      	movs	r3, #128	; 0x80
 8005570:	015b      	lsls	r3, r3, #5
 8005572:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	68da      	ldr	r2, [r3, #12]
 8005578:	23f0      	movs	r3, #240	; 0xf0
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	429a      	cmp	r2, r3
 800557e:	d008      	beq.n	8005592 <HAL_SPI_Init+0xaa>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	23e0      	movs	r3, #224	; 0xe0
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	429a      	cmp	r2, r3
 800558a:	d002      	beq.n	8005592 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	2382      	movs	r3, #130	; 0x82
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	401a      	ands	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6899      	ldr	r1, [r3, #8]
 80055a0:	2384      	movs	r3, #132	; 0x84
 80055a2:	021b      	lsls	r3, r3, #8
 80055a4:	400b      	ands	r3, r1
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	2102      	movs	r1, #2
 80055ae:	400b      	ands	r3, r1
 80055b0:	431a      	orrs	r2, r3
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	2101      	movs	r1, #1
 80055b8:	400b      	ands	r3, r1
 80055ba:	431a      	orrs	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6999      	ldr	r1, [r3, #24]
 80055c0:	2380      	movs	r3, #128	; 0x80
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	400b      	ands	r3, r1
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	2138      	movs	r1, #56	; 0x38
 80055ce:	400b      	ands	r3, r1
 80055d0:	431a      	orrs	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	2180      	movs	r1, #128	; 0x80
 80055d8:	400b      	ands	r3, r1
 80055da:	431a      	orrs	r2, r3
 80055dc:	0011      	movs	r1, r2
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055e2:	2380      	movs	r3, #128	; 0x80
 80055e4:	019b      	lsls	r3, r3, #6
 80055e6:	401a      	ands	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	0c1b      	lsrs	r3, r3, #16
 80055f6:	2204      	movs	r2, #4
 80055f8:	401a      	ands	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	2110      	movs	r1, #16
 8005600:	400b      	ands	r3, r1
 8005602:	431a      	orrs	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005608:	2108      	movs	r1, #8
 800560a:	400b      	ands	r3, r1
 800560c:	431a      	orrs	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68d9      	ldr	r1, [r3, #12]
 8005612:	23f0      	movs	r3, #240	; 0xf0
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	400b      	ands	r3, r1
 8005618:	431a      	orrs	r2, r3
 800561a:	0011      	movs	r1, r2
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	2380      	movs	r3, #128	; 0x80
 8005620:	015b      	lsls	r3, r3, #5
 8005622:	401a      	ands	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69da      	ldr	r2, [r3, #28]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4907      	ldr	r1, [pc, #28]	; (8005654 <HAL_SPI_Init+0x16c>)
 8005638:	400a      	ands	r2, r1
 800563a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	225d      	movs	r2, #93	; 0x5d
 8005646:	2101      	movs	r1, #1
 8005648:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	0018      	movs	r0, r3
 800564e:	46bd      	mov	sp, r7
 8005650:	b004      	add	sp, #16
 8005652:	bd80      	pop	{r7, pc}
 8005654:	fffff7ff 	.word	0xfffff7ff

08005658 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	1dbb      	adds	r3, r7, #6
 8005666:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005668:	231f      	movs	r3, #31
 800566a:	18fb      	adds	r3, r7, r3
 800566c:	2200      	movs	r2, #0
 800566e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	225c      	movs	r2, #92	; 0x5c
 8005674:	5c9b      	ldrb	r3, [r3, r2]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d101      	bne.n	800567e <HAL_SPI_Transmit+0x26>
 800567a:	2302      	movs	r3, #2
 800567c:	e140      	b.n	8005900 <HAL_SPI_Transmit+0x2a8>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	225c      	movs	r2, #92	; 0x5c
 8005682:	2101      	movs	r1, #1
 8005684:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005686:	f7fc fbf5 	bl	8001e74 <HAL_GetTick>
 800568a:	0003      	movs	r3, r0
 800568c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800568e:	2316      	movs	r3, #22
 8005690:	18fb      	adds	r3, r7, r3
 8005692:	1dba      	adds	r2, r7, #6
 8005694:	8812      	ldrh	r2, [r2, #0]
 8005696:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	225d      	movs	r2, #93	; 0x5d
 800569c:	5c9b      	ldrb	r3, [r3, r2]
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d004      	beq.n	80056ae <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80056a4:	231f      	movs	r3, #31
 80056a6:	18fb      	adds	r3, r7, r3
 80056a8:	2202      	movs	r2, #2
 80056aa:	701a      	strb	r2, [r3, #0]
    goto error;
 80056ac:	e11d      	b.n	80058ea <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <HAL_SPI_Transmit+0x64>
 80056b4:	1dbb      	adds	r3, r7, #6
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d104      	bne.n	80056c6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80056bc:	231f      	movs	r3, #31
 80056be:	18fb      	adds	r3, r7, r3
 80056c0:	2201      	movs	r2, #1
 80056c2:	701a      	strb	r2, [r3, #0]
    goto error;
 80056c4:	e111      	b.n	80058ea <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	225d      	movs	r2, #93	; 0x5d
 80056ca:	2103      	movs	r1, #3
 80056cc:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	1dba      	adds	r2, r7, #6
 80056de:	8812      	ldrh	r2, [r2, #0]
 80056e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	1dba      	adds	r2, r7, #6
 80056e6:	8812      	ldrh	r2, [r2, #0]
 80056e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2244      	movs	r2, #68	; 0x44
 80056f4:	2100      	movs	r1, #0
 80056f6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2246      	movs	r2, #70	; 0x46
 80056fc:	2100      	movs	r1, #0
 80056fe:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	2380      	movs	r3, #128	; 0x80
 8005712:	021b      	lsls	r3, r3, #8
 8005714:	429a      	cmp	r2, r3
 8005716:	d110      	bne.n	800573a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2140      	movs	r1, #64	; 0x40
 8005724:	438a      	bics	r2, r1
 8005726:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2180      	movs	r1, #128	; 0x80
 8005734:	01c9      	lsls	r1, r1, #7
 8005736:	430a      	orrs	r2, r1
 8005738:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2240      	movs	r2, #64	; 0x40
 8005742:	4013      	ands	r3, r2
 8005744:	2b40      	cmp	r3, #64	; 0x40
 8005746:	d007      	beq.n	8005758 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2140      	movs	r1, #64	; 0x40
 8005754:	430a      	orrs	r2, r1
 8005756:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	23e0      	movs	r3, #224	; 0xe0
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	429a      	cmp	r2, r3
 8005762:	d94e      	bls.n	8005802 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d004      	beq.n	8005776 <HAL_SPI_Transmit+0x11e>
 800576c:	2316      	movs	r3, #22
 800576e:	18fb      	adds	r3, r7, r3
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d13f      	bne.n	80057f6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577a:	881a      	ldrh	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005786:	1c9a      	adds	r2, r3, #2
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005790:	b29b      	uxth	r3, r3
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800579a:	e02c      	b.n	80057f6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	2202      	movs	r2, #2
 80057a4:	4013      	ands	r3, r2
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d112      	bne.n	80057d0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	881a      	ldrh	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ba:	1c9a      	adds	r2, r3, #2
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	3b01      	subs	r3, #1
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057ce:	e012      	b.n	80057f6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057d0:	f7fc fb50 	bl	8001e74 <HAL_GetTick>
 80057d4:	0002      	movs	r2, r0
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d802      	bhi.n	80057e6 <HAL_SPI_Transmit+0x18e>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	3301      	adds	r3, #1
 80057e4:	d102      	bne.n	80057ec <HAL_SPI_Transmit+0x194>
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d104      	bne.n	80057f6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80057ec:	231f      	movs	r3, #31
 80057ee:	18fb      	adds	r3, r7, r3
 80057f0:	2203      	movs	r2, #3
 80057f2:	701a      	strb	r2, [r3, #0]
          goto error;
 80057f4:	e079      	b.n	80058ea <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1cd      	bne.n	800579c <HAL_SPI_Transmit+0x144>
 8005800:	e04f      	b.n	80058a2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d004      	beq.n	8005814 <HAL_SPI_Transmit+0x1bc>
 800580a:	2316      	movs	r3, #22
 800580c:	18fb      	adds	r3, r7, r3
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d141      	bne.n	8005898 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	330c      	adds	r3, #12
 800581e:	7812      	ldrb	r2, [r2, #0]
 8005820:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800583a:	e02d      	b.n	8005898 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	2202      	movs	r2, #2
 8005844:	4013      	ands	r3, r2
 8005846:	2b02      	cmp	r3, #2
 8005848:	d113      	bne.n	8005872 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	330c      	adds	r3, #12
 8005854:	7812      	ldrb	r2, [r2, #0]
 8005856:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	1c5a      	adds	r2, r3, #1
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005866:	b29b      	uxth	r3, r3
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005870:	e012      	b.n	8005898 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005872:	f7fc faff 	bl	8001e74 <HAL_GetTick>
 8005876:	0002      	movs	r2, r0
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d802      	bhi.n	8005888 <HAL_SPI_Transmit+0x230>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	3301      	adds	r3, #1
 8005886:	d102      	bne.n	800588e <HAL_SPI_Transmit+0x236>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d104      	bne.n	8005898 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800588e:	231f      	movs	r3, #31
 8005890:	18fb      	adds	r3, r7, r3
 8005892:	2203      	movs	r2, #3
 8005894:	701a      	strb	r2, [r3, #0]
          goto error;
 8005896:	e028      	b.n	80058ea <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800589c:	b29b      	uxth	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1cc      	bne.n	800583c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	6839      	ldr	r1, [r7, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	0018      	movs	r0, r3
 80058aa:	f000 f95d 	bl	8005b68 <SPI_EndRxTxTransaction>
 80058ae:	1e03      	subs	r3, r0, #0
 80058b0:	d002      	beq.n	80058b8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2220      	movs	r2, #32
 80058b6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058c0:	2300      	movs	r3, #0
 80058c2:	613b      	str	r3, [r7, #16]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	613b      	str	r3, [r7, #16]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	613b      	str	r3, [r7, #16]
 80058d4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d004      	beq.n	80058e8 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80058de:	231f      	movs	r3, #31
 80058e0:	18fb      	adds	r3, r7, r3
 80058e2:	2201      	movs	r2, #1
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	e000      	b.n	80058ea <HAL_SPI_Transmit+0x292>
  }

error:
 80058e8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	225d      	movs	r2, #93	; 0x5d
 80058ee:	2101      	movs	r1, #1
 80058f0:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	225c      	movs	r2, #92	; 0x5c
 80058f6:	2100      	movs	r1, #0
 80058f8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80058fa:	231f      	movs	r3, #31
 80058fc:	18fb      	adds	r3, r7, r3
 80058fe:	781b      	ldrb	r3, [r3, #0]
}
 8005900:	0018      	movs	r0, r3
 8005902:	46bd      	mov	sp, r7
 8005904:	b008      	add	sp, #32
 8005906:	bd80      	pop	{r7, pc}

08005908 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b088      	sub	sp, #32
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	603b      	str	r3, [r7, #0]
 8005914:	1dfb      	adds	r3, r7, #7
 8005916:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005918:	f7fc faac 	bl	8001e74 <HAL_GetTick>
 800591c:	0002      	movs	r2, r0
 800591e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005920:	1a9b      	subs	r3, r3, r2
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	18d3      	adds	r3, r2, r3
 8005926:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005928:	f7fc faa4 	bl	8001e74 <HAL_GetTick>
 800592c:	0003      	movs	r3, r0
 800592e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005930:	4b3a      	ldr	r3, [pc, #232]	; (8005a1c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	015b      	lsls	r3, r3, #5
 8005936:	0d1b      	lsrs	r3, r3, #20
 8005938:	69fa      	ldr	r2, [r7, #28]
 800593a:	4353      	muls	r3, r2
 800593c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800593e:	e058      	b.n	80059f2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	3301      	adds	r3, #1
 8005944:	d055      	beq.n	80059f2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005946:	f7fc fa95 	bl	8001e74 <HAL_GetTick>
 800594a:	0002      	movs	r2, r0
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	69fa      	ldr	r2, [r7, #28]
 8005952:	429a      	cmp	r2, r3
 8005954:	d902      	bls.n	800595c <SPI_WaitFlagStateUntilTimeout+0x54>
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d142      	bne.n	80059e2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	21e0      	movs	r1, #224	; 0xe0
 8005968:	438a      	bics	r2, r1
 800596a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	2382      	movs	r3, #130	; 0x82
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	429a      	cmp	r2, r3
 8005976:	d113      	bne.n	80059a0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	2380      	movs	r3, #128	; 0x80
 800597e:	021b      	lsls	r3, r3, #8
 8005980:	429a      	cmp	r2, r3
 8005982:	d005      	beq.n	8005990 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	2380      	movs	r3, #128	; 0x80
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	429a      	cmp	r2, r3
 800598e:	d107      	bne.n	80059a0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2140      	movs	r1, #64	; 0x40
 800599c:	438a      	bics	r2, r1
 800599e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059a4:	2380      	movs	r3, #128	; 0x80
 80059a6:	019b      	lsls	r3, r3, #6
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d110      	bne.n	80059ce <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	491a      	ldr	r1, [pc, #104]	; (8005a20 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80059b8:	400a      	ands	r2, r1
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2180      	movs	r1, #128	; 0x80
 80059c8:	0189      	lsls	r1, r1, #6
 80059ca:	430a      	orrs	r2, r1
 80059cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	225d      	movs	r2, #93	; 0x5d
 80059d2:	2101      	movs	r1, #1
 80059d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	225c      	movs	r2, #92	; 0x5c
 80059da:	2100      	movs	r1, #0
 80059dc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e017      	b.n	8005a12 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	4013      	ands	r3, r2
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	425a      	negs	r2, r3
 8005a02:	4153      	adcs	r3, r2
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	001a      	movs	r2, r3
 8005a08:	1dfb      	adds	r3, r7, #7
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d197      	bne.n	8005940 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	0018      	movs	r0, r3
 8005a14:	46bd      	mov	sp, r7
 8005a16:	b008      	add	sp, #32
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	46c0      	nop			; (mov r8, r8)
 8005a1c:	20000000 	.word	0x20000000
 8005a20:	ffffdfff 	.word	0xffffdfff

08005a24 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08a      	sub	sp, #40	; 0x28
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005a32:	2317      	movs	r3, #23
 8005a34:	18fb      	adds	r3, r7, r3
 8005a36:	2200      	movs	r2, #0
 8005a38:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005a3a:	f7fc fa1b 	bl	8001e74 <HAL_GetTick>
 8005a3e:	0002      	movs	r2, r0
 8005a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a42:	1a9b      	subs	r3, r3, r2
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	18d3      	adds	r3, r2, r3
 8005a48:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005a4a:	f7fc fa13 	bl	8001e74 <HAL_GetTick>
 8005a4e:	0003      	movs	r3, r0
 8005a50:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	330c      	adds	r3, #12
 8005a58:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a5a:	4b41      	ldr	r3, [pc, #260]	; (8005b60 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	0013      	movs	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	189b      	adds	r3, r3, r2
 8005a64:	00da      	lsls	r2, r3, #3
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	0d1b      	lsrs	r3, r3, #20
 8005a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a6c:	4353      	muls	r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005a70:	e068      	b.n	8005b44 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	23c0      	movs	r3, #192	; 0xc0
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d10a      	bne.n	8005a92 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d107      	bne.n	8005a92 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	2117      	movs	r1, #23
 8005a8a:	187b      	adds	r3, r7, r1
 8005a8c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005a8e:	187b      	adds	r3, r7, r1
 8005a90:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	3301      	adds	r3, #1
 8005a96:	d055      	beq.n	8005b44 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a98:	f7fc f9ec 	bl	8001e74 <HAL_GetTick>
 8005a9c:	0002      	movs	r2, r0
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d902      	bls.n	8005aae <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d142      	bne.n	8005b34 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	21e0      	movs	r1, #224	; 0xe0
 8005aba:	438a      	bics	r2, r1
 8005abc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	2382      	movs	r3, #130	; 0x82
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d113      	bne.n	8005af2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	2380      	movs	r3, #128	; 0x80
 8005ad0:	021b      	lsls	r3, r3, #8
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d005      	beq.n	8005ae2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	689a      	ldr	r2, [r3, #8]
 8005ada:	2380      	movs	r3, #128	; 0x80
 8005adc:	00db      	lsls	r3, r3, #3
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d107      	bne.n	8005af2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2140      	movs	r1, #64	; 0x40
 8005aee:	438a      	bics	r2, r1
 8005af0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005af6:	2380      	movs	r3, #128	; 0x80
 8005af8:	019b      	lsls	r3, r3, #6
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d110      	bne.n	8005b20 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4916      	ldr	r1, [pc, #88]	; (8005b64 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005b0a:	400a      	ands	r2, r1
 8005b0c:	601a      	str	r2, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2180      	movs	r1, #128	; 0x80
 8005b1a:	0189      	lsls	r1, r1, #6
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	225d      	movs	r2, #93	; 0x5d
 8005b24:	2101      	movs	r1, #1
 8005b26:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	225c      	movs	r2, #92	; 0x5c
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e010      	b.n	8005b56 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	3b01      	subs	r3, #1
 8005b42:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d18e      	bne.n	8005a72 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	0018      	movs	r0, r3
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	b00a      	add	sp, #40	; 0x28
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	46c0      	nop			; (mov r8, r8)
 8005b60:	20000000 	.word	0x20000000
 8005b64:	ffffdfff 	.word	0xffffdfff

08005b68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af02      	add	r7, sp, #8
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b74:	68ba      	ldr	r2, [r7, #8]
 8005b76:	23c0      	movs	r3, #192	; 0xc0
 8005b78:	0159      	lsls	r1, r3, #5
 8005b7a:	68f8      	ldr	r0, [r7, #12]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	0013      	movs	r3, r2
 8005b82:	2200      	movs	r2, #0
 8005b84:	f7ff ff4e 	bl	8005a24 <SPI_WaitFifoStateUntilTimeout>
 8005b88:	1e03      	subs	r3, r0, #0
 8005b8a:	d007      	beq.n	8005b9c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b90:	2220      	movs	r2, #32
 8005b92:	431a      	orrs	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e027      	b.n	8005bec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	0013      	movs	r3, r2
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	2180      	movs	r1, #128	; 0x80
 8005baa:	f7ff fead 	bl	8005908 <SPI_WaitFlagStateUntilTimeout>
 8005bae:	1e03      	subs	r3, r0, #0
 8005bb0:	d007      	beq.n	8005bc2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e014      	b.n	8005bec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	23c0      	movs	r3, #192	; 0xc0
 8005bc6:	00d9      	lsls	r1, r3, #3
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	0013      	movs	r3, r2
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f7ff ff27 	bl	8005a24 <SPI_WaitFifoStateUntilTimeout>
 8005bd6:	1e03      	subs	r3, r0, #0
 8005bd8:	d007      	beq.n	8005bea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bde:	2220      	movs	r2, #32
 8005be0:	431a      	orrs	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e000      	b.n	8005bec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	0018      	movs	r0, r3
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	b004      	add	sp, #16
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e042      	b.n	8005c8c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	223d      	movs	r2, #61	; 0x3d
 8005c0a:	5c9b      	ldrb	r3, [r3, r2]
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d107      	bne.n	8005c22 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	223c      	movs	r2, #60	; 0x3c
 8005c16:	2100      	movs	r1, #0
 8005c18:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	f7fb fdb3 	bl	8001788 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	223d      	movs	r2, #61	; 0x3d
 8005c26:	2102      	movs	r1, #2
 8005c28:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	3304      	adds	r3, #4
 8005c32:	0019      	movs	r1, r3
 8005c34:	0010      	movs	r0, r2
 8005c36:	f000 fa65 	bl	8006104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2246      	movs	r2, #70	; 0x46
 8005c3e:	2101      	movs	r1, #1
 8005c40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	223e      	movs	r2, #62	; 0x3e
 8005c46:	2101      	movs	r1, #1
 8005c48:	5499      	strb	r1, [r3, r2]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	223f      	movs	r2, #63	; 0x3f
 8005c4e:	2101      	movs	r1, #1
 8005c50:	5499      	strb	r1, [r3, r2]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2240      	movs	r2, #64	; 0x40
 8005c56:	2101      	movs	r1, #1
 8005c58:	5499      	strb	r1, [r3, r2]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2241      	movs	r2, #65	; 0x41
 8005c5e:	2101      	movs	r1, #1
 8005c60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2242      	movs	r2, #66	; 0x42
 8005c66:	2101      	movs	r1, #1
 8005c68:	5499      	strb	r1, [r3, r2]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2243      	movs	r2, #67	; 0x43
 8005c6e:	2101      	movs	r1, #1
 8005c70:	5499      	strb	r1, [r3, r2]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2244      	movs	r2, #68	; 0x44
 8005c76:	2101      	movs	r1, #1
 8005c78:	5499      	strb	r1, [r3, r2]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2245      	movs	r2, #69	; 0x45
 8005c7e:	2101      	movs	r1, #1
 8005c80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	223d      	movs	r2, #61	; 0x3d
 8005c86:	2101      	movs	r1, #1
 8005c88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	0018      	movs	r0, r3
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	b002      	add	sp, #8
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	223d      	movs	r2, #61	; 0x3d
 8005ca0:	5c9b      	ldrb	r3, [r3, r2]
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d001      	beq.n	8005cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e03b      	b.n	8005d24 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	223d      	movs	r2, #61	; 0x3d
 8005cb0:	2102      	movs	r1, #2
 8005cb2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a18      	ldr	r2, [pc, #96]	; (8005d2c <HAL_TIM_Base_Start_IT+0x98>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00f      	beq.n	8005cee <HAL_TIM_Base_Start_IT+0x5a>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	2380      	movs	r3, #128	; 0x80
 8005cd4:	05db      	lsls	r3, r3, #23
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d009      	beq.n	8005cee <HAL_TIM_Base_Start_IT+0x5a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a14      	ldr	r2, [pc, #80]	; (8005d30 <HAL_TIM_Base_Start_IT+0x9c>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d004      	beq.n	8005cee <HAL_TIM_Base_Start_IT+0x5a>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a12      	ldr	r2, [pc, #72]	; (8005d34 <HAL_TIM_Base_Start_IT+0xa0>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d111      	bne.n	8005d12 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	2207      	movs	r2, #7
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2b06      	cmp	r3, #6
 8005cfe:	d010      	beq.n	8005d22 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d10:	e007      	b.n	8005d22 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	0018      	movs	r0, r3
 8005d26:	46bd      	mov	sp, r7
 8005d28:	b004      	add	sp, #16
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	40012c00 	.word	0x40012c00
 8005d30:	40000400 	.word	0x40000400
 8005d34:	40014000 	.word	0x40014000

08005d38 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e042      	b.n	8005dd0 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	223d      	movs	r2, #61	; 0x3d
 8005d4e:	5c9b      	ldrb	r3, [r3, r2]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d107      	bne.n	8005d66 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	223c      	movs	r2, #60	; 0x3c
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	0018      	movs	r0, r3
 8005d62:	f000 f839 	bl	8005dd8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	223d      	movs	r2, #61	; 0x3d
 8005d6a:	2102      	movs	r1, #2
 8005d6c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	3304      	adds	r3, #4
 8005d76:	0019      	movs	r1, r3
 8005d78:	0010      	movs	r0, r2
 8005d7a:	f000 f9c3 	bl	8006104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2246      	movs	r2, #70	; 0x46
 8005d82:	2101      	movs	r1, #1
 8005d84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	223e      	movs	r2, #62	; 0x3e
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	5499      	strb	r1, [r3, r2]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	223f      	movs	r2, #63	; 0x3f
 8005d92:	2101      	movs	r1, #1
 8005d94:	5499      	strb	r1, [r3, r2]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2240      	movs	r2, #64	; 0x40
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	5499      	strb	r1, [r3, r2]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2241      	movs	r2, #65	; 0x41
 8005da2:	2101      	movs	r1, #1
 8005da4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2242      	movs	r2, #66	; 0x42
 8005daa:	2101      	movs	r1, #1
 8005dac:	5499      	strb	r1, [r3, r2]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2243      	movs	r2, #67	; 0x43
 8005db2:	2101      	movs	r1, #1
 8005db4:	5499      	strb	r1, [r3, r2]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2244      	movs	r2, #68	; 0x44
 8005dba:	2101      	movs	r1, #1
 8005dbc:	5499      	strb	r1, [r3, r2]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2245      	movs	r2, #69	; 0x45
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	223d      	movs	r2, #61	; 0x3d
 8005dca:	2101      	movs	r1, #1
 8005dcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	b002      	add	sp, #8
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005de0:	46c0      	nop			; (mov r8, r8)
 8005de2:	46bd      	mov	sp, r7
 8005de4:	b002      	add	sp, #8
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	2202      	movs	r2, #2
 8005df8:	4013      	ands	r3, r2
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d124      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	2202      	movs	r2, #2
 8005e06:	4013      	ands	r3, r2
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d11d      	bne.n	8005e48 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2203      	movs	r2, #3
 8005e12:	4252      	negs	r2, r2
 8005e14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	2203      	movs	r2, #3
 8005e24:	4013      	ands	r3, r2
 8005e26:	d004      	beq.n	8005e32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	0018      	movs	r0, r3
 8005e2c:	f000 f952 	bl	80060d4 <HAL_TIM_IC_CaptureCallback>
 8005e30:	e007      	b.n	8005e42 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	0018      	movs	r0, r3
 8005e36:	f000 f945 	bl	80060c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	0018      	movs	r0, r3
 8005e3e:	f000 f951 	bl	80060e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	2204      	movs	r2, #4
 8005e50:	4013      	ands	r3, r2
 8005e52:	2b04      	cmp	r3, #4
 8005e54:	d125      	bne.n	8005ea2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	2204      	movs	r2, #4
 8005e5e:	4013      	ands	r3, r2
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d11e      	bne.n	8005ea2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2205      	movs	r2, #5
 8005e6a:	4252      	negs	r2, r2
 8005e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2202      	movs	r2, #2
 8005e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	699a      	ldr	r2, [r3, #24]
 8005e7a:	23c0      	movs	r3, #192	; 0xc0
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4013      	ands	r3, r2
 8005e80:	d004      	beq.n	8005e8c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	0018      	movs	r0, r3
 8005e86:	f000 f925 	bl	80060d4 <HAL_TIM_IC_CaptureCallback>
 8005e8a:	e007      	b.n	8005e9c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	0018      	movs	r0, r3
 8005e90:	f000 f918 	bl	80060c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	0018      	movs	r0, r3
 8005e98:	f000 f924 	bl	80060e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	2208      	movs	r2, #8
 8005eaa:	4013      	ands	r3, r2
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	d124      	bne.n	8005efa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	2208      	movs	r2, #8
 8005eb8:	4013      	ands	r3, r2
 8005eba:	2b08      	cmp	r3, #8
 8005ebc:	d11d      	bne.n	8005efa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2209      	movs	r2, #9
 8005ec4:	4252      	negs	r2, r2
 8005ec6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2204      	movs	r2, #4
 8005ecc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	2203      	movs	r2, #3
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	d004      	beq.n	8005ee4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	0018      	movs	r0, r3
 8005ede:	f000 f8f9 	bl	80060d4 <HAL_TIM_IC_CaptureCallback>
 8005ee2:	e007      	b.n	8005ef4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	f000 f8ec 	bl	80060c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f000 f8f8 	bl	80060e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	2210      	movs	r2, #16
 8005f02:	4013      	ands	r3, r2
 8005f04:	2b10      	cmp	r3, #16
 8005f06:	d125      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	2210      	movs	r2, #16
 8005f10:	4013      	ands	r3, r2
 8005f12:	2b10      	cmp	r3, #16
 8005f14:	d11e      	bne.n	8005f54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2211      	movs	r2, #17
 8005f1c:	4252      	negs	r2, r2
 8005f1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2208      	movs	r2, #8
 8005f24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	69da      	ldr	r2, [r3, #28]
 8005f2c:	23c0      	movs	r3, #192	; 0xc0
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4013      	ands	r3, r2
 8005f32:	d004      	beq.n	8005f3e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	0018      	movs	r0, r3
 8005f38:	f000 f8cc 	bl	80060d4 <HAL_TIM_IC_CaptureCallback>
 8005f3c:	e007      	b.n	8005f4e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	0018      	movs	r0, r3
 8005f42:	f000 f8bf 	bl	80060c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	0018      	movs	r0, r3
 8005f4a:	f000 f8cb 	bl	80060e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d10f      	bne.n	8005f82 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d108      	bne.n	8005f82 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2202      	movs	r2, #2
 8005f76:	4252      	negs	r2, r2
 8005f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	f7fa fadf 	bl	8000540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	2280      	movs	r2, #128	; 0x80
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	2b80      	cmp	r3, #128	; 0x80
 8005f8e:	d10f      	bne.n	8005fb0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	2280      	movs	r2, #128	; 0x80
 8005f98:	4013      	ands	r3, r2
 8005f9a:	2b80      	cmp	r3, #128	; 0x80
 8005f9c:	d108      	bne.n	8005fb0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2281      	movs	r2, #129	; 0x81
 8005fa4:	4252      	negs	r2, r2
 8005fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	0018      	movs	r0, r3
 8005fac:	f000 fb2e 	bl	800660c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	2240      	movs	r2, #64	; 0x40
 8005fb8:	4013      	ands	r3, r2
 8005fba:	2b40      	cmp	r3, #64	; 0x40
 8005fbc:	d10f      	bne.n	8005fde <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	2240      	movs	r2, #64	; 0x40
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	2b40      	cmp	r3, #64	; 0x40
 8005fca:	d108      	bne.n	8005fde <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2241      	movs	r2, #65	; 0x41
 8005fd2:	4252      	negs	r2, r2
 8005fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	0018      	movs	r0, r3
 8005fda:	f000 f88b 	bl	80060f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	2b20      	cmp	r3, #32
 8005fea:	d10f      	bne.n	800600c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	2b20      	cmp	r3, #32
 8005ff8:	d108      	bne.n	800600c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2221      	movs	r2, #33	; 0x21
 8006000:	4252      	negs	r2, r2
 8006002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	0018      	movs	r0, r3
 8006008:	f000 faf8 	bl	80065fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800600c:	46c0      	nop			; (mov r8, r8)
 800600e:	46bd      	mov	sp, r7
 8006010:	b002      	add	sp, #8
 8006012:	bd80      	pop	{r7, pc}

08006014 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b086      	sub	sp, #24
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006020:	2317      	movs	r3, #23
 8006022:	18fb      	adds	r3, r7, r3
 8006024:	2200      	movs	r2, #0
 8006026:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	223c      	movs	r2, #60	; 0x3c
 800602c:	5c9b      	ldrb	r3, [r3, r2]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <HAL_TIM_OC_ConfigChannel+0x22>
 8006032:	2302      	movs	r3, #2
 8006034:	e042      	b.n	80060bc <HAL_TIM_OC_ConfigChannel+0xa8>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	223c      	movs	r2, #60	; 0x3c
 800603a:	2101      	movs	r1, #1
 800603c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b0c      	cmp	r3, #12
 8006042:	d027      	beq.n	8006094 <HAL_TIM_OC_ConfigChannel+0x80>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b0c      	cmp	r3, #12
 8006048:	d82c      	bhi.n	80060a4 <HAL_TIM_OC_ConfigChannel+0x90>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b08      	cmp	r3, #8
 800604e:	d019      	beq.n	8006084 <HAL_TIM_OC_ConfigChannel+0x70>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b08      	cmp	r3, #8
 8006054:	d826      	bhi.n	80060a4 <HAL_TIM_OC_ConfigChannel+0x90>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d003      	beq.n	8006064 <HAL_TIM_OC_ConfigChannel+0x50>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b04      	cmp	r3, #4
 8006060:	d008      	beq.n	8006074 <HAL_TIM_OC_ConfigChannel+0x60>
 8006062:	e01f      	b.n	80060a4 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68ba      	ldr	r2, [r7, #8]
 800606a:	0011      	movs	r1, r2
 800606c:	0018      	movs	r0, r3
 800606e:	f000 f8c9 	bl	8006204 <TIM_OC1_SetConfig>
      break;
 8006072:	e01c      	b.n	80060ae <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	0011      	movs	r1, r2
 800607c:	0018      	movs	r0, r3
 800607e:	f000 f949 	bl	8006314 <TIM_OC2_SetConfig>
      break;
 8006082:	e014      	b.n	80060ae <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	0011      	movs	r1, r2
 800608c:	0018      	movs	r0, r3
 800608e:	f000 f9c5 	bl	800641c <TIM_OC3_SetConfig>
      break;
 8006092:	e00c      	b.n	80060ae <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	0011      	movs	r1, r2
 800609c:	0018      	movs	r0, r3
 800609e:	f000 fa43 	bl	8006528 <TIM_OC4_SetConfig>
      break;
 80060a2:	e004      	b.n	80060ae <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 80060a4:	2317      	movs	r3, #23
 80060a6:	18fb      	adds	r3, r7, r3
 80060a8:	2201      	movs	r2, #1
 80060aa:	701a      	strb	r2, [r3, #0]
      break;
 80060ac:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	223c      	movs	r2, #60	; 0x3c
 80060b2:	2100      	movs	r1, #0
 80060b4:	5499      	strb	r1, [r3, r2]

  return status;
 80060b6:	2317      	movs	r3, #23
 80060b8:	18fb      	adds	r3, r7, r3
 80060ba:	781b      	ldrb	r3, [r3, #0]
}
 80060bc:	0018      	movs	r0, r3
 80060be:	46bd      	mov	sp, r7
 80060c0:	b006      	add	sp, #24
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060cc:	46c0      	nop			; (mov r8, r8)
 80060ce:	46bd      	mov	sp, r7
 80060d0:	b002      	add	sp, #8
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060dc:	46c0      	nop			; (mov r8, r8)
 80060de:	46bd      	mov	sp, r7
 80060e0:	b002      	add	sp, #8
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060ec:	46c0      	nop			; (mov r8, r8)
 80060ee:	46bd      	mov	sp, r7
 80060f0:	b002      	add	sp, #8
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060fc:	46c0      	nop			; (mov r8, r8)
 80060fe:	46bd      	mov	sp, r7
 8006100:	b002      	add	sp, #8
 8006102:	bd80      	pop	{r7, pc}

08006104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a34      	ldr	r2, [pc, #208]	; (80061e8 <TIM_Base_SetConfig+0xe4>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d008      	beq.n	800612e <TIM_Base_SetConfig+0x2a>
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	2380      	movs	r3, #128	; 0x80
 8006120:	05db      	lsls	r3, r3, #23
 8006122:	429a      	cmp	r2, r3
 8006124:	d003      	beq.n	800612e <TIM_Base_SetConfig+0x2a>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a30      	ldr	r2, [pc, #192]	; (80061ec <TIM_Base_SetConfig+0xe8>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d108      	bne.n	8006140 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2270      	movs	r2, #112	; 0x70
 8006132:	4393      	bics	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	4313      	orrs	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a29      	ldr	r2, [pc, #164]	; (80061e8 <TIM_Base_SetConfig+0xe4>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d018      	beq.n	800617a <TIM_Base_SetConfig+0x76>
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	2380      	movs	r3, #128	; 0x80
 800614c:	05db      	lsls	r3, r3, #23
 800614e:	429a      	cmp	r2, r3
 8006150:	d013      	beq.n	800617a <TIM_Base_SetConfig+0x76>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a25      	ldr	r2, [pc, #148]	; (80061ec <TIM_Base_SetConfig+0xe8>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00f      	beq.n	800617a <TIM_Base_SetConfig+0x76>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a24      	ldr	r2, [pc, #144]	; (80061f0 <TIM_Base_SetConfig+0xec>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00b      	beq.n	800617a <TIM_Base_SetConfig+0x76>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a23      	ldr	r2, [pc, #140]	; (80061f4 <TIM_Base_SetConfig+0xf0>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d007      	beq.n	800617a <TIM_Base_SetConfig+0x76>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a22      	ldr	r2, [pc, #136]	; (80061f8 <TIM_Base_SetConfig+0xf4>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d003      	beq.n	800617a <TIM_Base_SetConfig+0x76>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a21      	ldr	r2, [pc, #132]	; (80061fc <TIM_Base_SetConfig+0xf8>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d108      	bne.n	800618c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	4a20      	ldr	r2, [pc, #128]	; (8006200 <TIM_Base_SetConfig+0xfc>)
 800617e:	4013      	ands	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	4313      	orrs	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2280      	movs	r2, #128	; 0x80
 8006190:	4393      	bics	r3, r2
 8006192:	001a      	movs	r2, r3
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	4313      	orrs	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	689a      	ldr	r2, [r3, #8]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a0c      	ldr	r2, [pc, #48]	; (80061e8 <TIM_Base_SetConfig+0xe4>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d00b      	beq.n	80061d2 <TIM_Base_SetConfig+0xce>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a0d      	ldr	r2, [pc, #52]	; (80061f4 <TIM_Base_SetConfig+0xf0>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d007      	beq.n	80061d2 <TIM_Base_SetConfig+0xce>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a0c      	ldr	r2, [pc, #48]	; (80061f8 <TIM_Base_SetConfig+0xf4>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d003      	beq.n	80061d2 <TIM_Base_SetConfig+0xce>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a0b      	ldr	r2, [pc, #44]	; (80061fc <TIM_Base_SetConfig+0xf8>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d103      	bne.n	80061da <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	691a      	ldr	r2, [r3, #16]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	615a      	str	r2, [r3, #20]
}
 80061e0:	46c0      	nop			; (mov r8, r8)
 80061e2:	46bd      	mov	sp, r7
 80061e4:	b004      	add	sp, #16
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	40012c00 	.word	0x40012c00
 80061ec:	40000400 	.word	0x40000400
 80061f0:	40002000 	.word	0x40002000
 80061f4:	40014000 	.word	0x40014000
 80061f8:	40014400 	.word	0x40014400
 80061fc:	40014800 	.word	0x40014800
 8006200:	fffffcff 	.word	0xfffffcff

08006204 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	2201      	movs	r2, #1
 8006214:	4393      	bics	r3, r2
 8006216:	001a      	movs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2270      	movs	r2, #112	; 0x70
 8006232:	4393      	bics	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2203      	movs	r2, #3
 800623a:	4393      	bics	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	4313      	orrs	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2202      	movs	r2, #2
 800624c:	4393      	bics	r3, r2
 800624e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	4313      	orrs	r3, r2
 8006258:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a27      	ldr	r2, [pc, #156]	; (80062fc <TIM_OC1_SetConfig+0xf8>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00b      	beq.n	800627a <TIM_OC1_SetConfig+0x76>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a26      	ldr	r2, [pc, #152]	; (8006300 <TIM_OC1_SetConfig+0xfc>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d007      	beq.n	800627a <TIM_OC1_SetConfig+0x76>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a25      	ldr	r2, [pc, #148]	; (8006304 <TIM_OC1_SetConfig+0x100>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d003      	beq.n	800627a <TIM_OC1_SetConfig+0x76>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a24      	ldr	r2, [pc, #144]	; (8006308 <TIM_OC1_SetConfig+0x104>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d10c      	bne.n	8006294 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2208      	movs	r2, #8
 800627e:	4393      	bics	r3, r2
 8006280:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	4313      	orrs	r3, r2
 800628a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	2204      	movs	r2, #4
 8006290:	4393      	bics	r3, r2
 8006292:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a19      	ldr	r2, [pc, #100]	; (80062fc <TIM_OC1_SetConfig+0xf8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d00b      	beq.n	80062b4 <TIM_OC1_SetConfig+0xb0>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a18      	ldr	r2, [pc, #96]	; (8006300 <TIM_OC1_SetConfig+0xfc>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d007      	beq.n	80062b4 <TIM_OC1_SetConfig+0xb0>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a17      	ldr	r2, [pc, #92]	; (8006304 <TIM_OC1_SetConfig+0x100>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d003      	beq.n	80062b4 <TIM_OC1_SetConfig+0xb0>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a16      	ldr	r2, [pc, #88]	; (8006308 <TIM_OC1_SetConfig+0x104>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d111      	bne.n	80062d8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	4a15      	ldr	r2, [pc, #84]	; (800630c <TIM_OC1_SetConfig+0x108>)
 80062b8:	4013      	ands	r3, r2
 80062ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	4a14      	ldr	r2, [pc, #80]	; (8006310 <TIM_OC1_SetConfig+0x10c>)
 80062c0:	4013      	ands	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	621a      	str	r2, [r3, #32]
}
 80062f2:	46c0      	nop			; (mov r8, r8)
 80062f4:	46bd      	mov	sp, r7
 80062f6:	b006      	add	sp, #24
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	46c0      	nop			; (mov r8, r8)
 80062fc:	40012c00 	.word	0x40012c00
 8006300:	40014000 	.word	0x40014000
 8006304:	40014400 	.word	0x40014400
 8006308:	40014800 	.word	0x40014800
 800630c:	fffffeff 	.word	0xfffffeff
 8006310:	fffffdff 	.word	0xfffffdff

08006314 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	2210      	movs	r2, #16
 8006324:	4393      	bics	r3, r2
 8006326:	001a      	movs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4a2e      	ldr	r2, [pc, #184]	; (80063fc <TIM_OC2_SetConfig+0xe8>)
 8006342:	4013      	ands	r3, r2
 8006344:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4a2d      	ldr	r2, [pc, #180]	; (8006400 <TIM_OC2_SetConfig+0xec>)
 800634a:	4013      	ands	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	021b      	lsls	r3, r3, #8
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	4313      	orrs	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	2220      	movs	r2, #32
 800635e:	4393      	bics	r3, r2
 8006360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	011b      	lsls	r3, r3, #4
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	4313      	orrs	r3, r2
 800636c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a24      	ldr	r2, [pc, #144]	; (8006404 <TIM_OC2_SetConfig+0xf0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d10d      	bne.n	8006392 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2280      	movs	r2, #128	; 0x80
 800637a:	4393      	bics	r3, r2
 800637c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	011b      	lsls	r3, r3, #4
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	4313      	orrs	r3, r2
 8006388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2240      	movs	r2, #64	; 0x40
 800638e:	4393      	bics	r3, r2
 8006390:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a1b      	ldr	r2, [pc, #108]	; (8006404 <TIM_OC2_SetConfig+0xf0>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d00b      	beq.n	80063b2 <TIM_OC2_SetConfig+0x9e>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a1a      	ldr	r2, [pc, #104]	; (8006408 <TIM_OC2_SetConfig+0xf4>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d007      	beq.n	80063b2 <TIM_OC2_SetConfig+0x9e>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a19      	ldr	r2, [pc, #100]	; (800640c <TIM_OC2_SetConfig+0xf8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d003      	beq.n	80063b2 <TIM_OC2_SetConfig+0x9e>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a18      	ldr	r2, [pc, #96]	; (8006410 <TIM_OC2_SetConfig+0xfc>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d113      	bne.n	80063da <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	4a17      	ldr	r2, [pc, #92]	; (8006414 <TIM_OC2_SetConfig+0x100>)
 80063b6:	4013      	ands	r3, r2
 80063b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	4a16      	ldr	r2, [pc, #88]	; (8006418 <TIM_OC2_SetConfig+0x104>)
 80063be:	4013      	ands	r3, r2
 80063c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	621a      	str	r2, [r3, #32]
}
 80063f4:	46c0      	nop			; (mov r8, r8)
 80063f6:	46bd      	mov	sp, r7
 80063f8:	b006      	add	sp, #24
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	ffff8fff 	.word	0xffff8fff
 8006400:	fffffcff 	.word	0xfffffcff
 8006404:	40012c00 	.word	0x40012c00
 8006408:	40014000 	.word	0x40014000
 800640c:	40014400 	.word	0x40014400
 8006410:	40014800 	.word	0x40014800
 8006414:	fffffbff 	.word	0xfffffbff
 8006418:	fffff7ff 	.word	0xfffff7ff

0800641c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	4a35      	ldr	r2, [pc, #212]	; (8006500 <TIM_OC3_SetConfig+0xe4>)
 800642c:	401a      	ands	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2270      	movs	r2, #112	; 0x70
 8006448:	4393      	bics	r3, r2
 800644a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2203      	movs	r2, #3
 8006450:	4393      	bics	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	4a28      	ldr	r2, [pc, #160]	; (8006504 <TIM_OC3_SetConfig+0xe8>)
 8006462:	4013      	ands	r3, r2
 8006464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	021b      	lsls	r3, r3, #8
 800646c:	697a      	ldr	r2, [r7, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a24      	ldr	r2, [pc, #144]	; (8006508 <TIM_OC3_SetConfig+0xec>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d10d      	bne.n	8006496 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	4a23      	ldr	r2, [pc, #140]	; (800650c <TIM_OC3_SetConfig+0xf0>)
 800647e:	4013      	ands	r3, r2
 8006480:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	021b      	lsls	r3, r3, #8
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	4313      	orrs	r3, r2
 800648c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	4a1f      	ldr	r2, [pc, #124]	; (8006510 <TIM_OC3_SetConfig+0xf4>)
 8006492:	4013      	ands	r3, r2
 8006494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a1b      	ldr	r2, [pc, #108]	; (8006508 <TIM_OC3_SetConfig+0xec>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d00b      	beq.n	80064b6 <TIM_OC3_SetConfig+0x9a>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a1c      	ldr	r2, [pc, #112]	; (8006514 <TIM_OC3_SetConfig+0xf8>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d007      	beq.n	80064b6 <TIM_OC3_SetConfig+0x9a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a1b      	ldr	r2, [pc, #108]	; (8006518 <TIM_OC3_SetConfig+0xfc>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d003      	beq.n	80064b6 <TIM_OC3_SetConfig+0x9a>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a1a      	ldr	r2, [pc, #104]	; (800651c <TIM_OC3_SetConfig+0x100>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d113      	bne.n	80064de <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	4a19      	ldr	r2, [pc, #100]	; (8006520 <TIM_OC3_SetConfig+0x104>)
 80064ba:	4013      	ands	r3, r2
 80064bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	4a18      	ldr	r2, [pc, #96]	; (8006524 <TIM_OC3_SetConfig+0x108>)
 80064c2:	4013      	ands	r3, r2
 80064c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	011b      	lsls	r3, r3, #4
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	011b      	lsls	r3, r3, #4
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	4313      	orrs	r3, r2
 80064dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	697a      	ldr	r2, [r7, #20]
 80064f6:	621a      	str	r2, [r3, #32]
}
 80064f8:	46c0      	nop			; (mov r8, r8)
 80064fa:	46bd      	mov	sp, r7
 80064fc:	b006      	add	sp, #24
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	fffffeff 	.word	0xfffffeff
 8006504:	fffffdff 	.word	0xfffffdff
 8006508:	40012c00 	.word	0x40012c00
 800650c:	fffff7ff 	.word	0xfffff7ff
 8006510:	fffffbff 	.word	0xfffffbff
 8006514:	40014000 	.word	0x40014000
 8006518:	40014400 	.word	0x40014400
 800651c:	40014800 	.word	0x40014800
 8006520:	ffffefff 	.word	0xffffefff
 8006524:	ffffdfff 	.word	0xffffdfff

08006528 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	4a28      	ldr	r2, [pc, #160]	; (80065d8 <TIM_OC4_SetConfig+0xb0>)
 8006538:	401a      	ands	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4a22      	ldr	r2, [pc, #136]	; (80065dc <TIM_OC4_SetConfig+0xb4>)
 8006554:	4013      	ands	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4a21      	ldr	r2, [pc, #132]	; (80065e0 <TIM_OC4_SetConfig+0xb8>)
 800655c:	4013      	ands	r3, r2
 800655e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	021b      	lsls	r3, r3, #8
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	4313      	orrs	r3, r2
 800656a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	4a1d      	ldr	r2, [pc, #116]	; (80065e4 <TIM_OC4_SetConfig+0xbc>)
 8006570:	4013      	ands	r3, r2
 8006572:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	031b      	lsls	r3, r3, #12
 800657a:	693a      	ldr	r2, [r7, #16]
 800657c:	4313      	orrs	r3, r2
 800657e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a19      	ldr	r2, [pc, #100]	; (80065e8 <TIM_OC4_SetConfig+0xc0>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d00b      	beq.n	80065a0 <TIM_OC4_SetConfig+0x78>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a18      	ldr	r2, [pc, #96]	; (80065ec <TIM_OC4_SetConfig+0xc4>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d007      	beq.n	80065a0 <TIM_OC4_SetConfig+0x78>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a17      	ldr	r2, [pc, #92]	; (80065f0 <TIM_OC4_SetConfig+0xc8>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d003      	beq.n	80065a0 <TIM_OC4_SetConfig+0x78>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a16      	ldr	r2, [pc, #88]	; (80065f4 <TIM_OC4_SetConfig+0xcc>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d109      	bne.n	80065b4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	4a15      	ldr	r2, [pc, #84]	; (80065f8 <TIM_OC4_SetConfig+0xd0>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	019b      	lsls	r3, r3, #6
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	621a      	str	r2, [r3, #32]
}
 80065ce:	46c0      	nop			; (mov r8, r8)
 80065d0:	46bd      	mov	sp, r7
 80065d2:	b006      	add	sp, #24
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	46c0      	nop			; (mov r8, r8)
 80065d8:	ffffefff 	.word	0xffffefff
 80065dc:	ffff8fff 	.word	0xffff8fff
 80065e0:	fffffcff 	.word	0xfffffcff
 80065e4:	ffffdfff 	.word	0xffffdfff
 80065e8:	40012c00 	.word	0x40012c00
 80065ec:	40014000 	.word	0x40014000
 80065f0:	40014400 	.word	0x40014400
 80065f4:	40014800 	.word	0x40014800
 80065f8:	ffffbfff 	.word	0xffffbfff

080065fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006604:	46c0      	nop			; (mov r8, r8)
 8006606:	46bd      	mov	sp, r7
 8006608:	b002      	add	sp, #8
 800660a:	bd80      	pop	{r7, pc}

0800660c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006614:	46c0      	nop			; (mov r8, r8)
 8006616:	46bd      	mov	sp, r7
 8006618:	b002      	add	sp, #8
 800661a:	bd80      	pop	{r7, pc}

0800661c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e044      	b.n	80066b8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006632:	2b00      	cmp	r3, #0
 8006634:	d107      	bne.n	8006646 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2274      	movs	r2, #116	; 0x74
 800663a:	2100      	movs	r1, #0
 800663c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	0018      	movs	r0, r3
 8006642:	f7fb f8c9 	bl	80017d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2224      	movs	r2, #36	; 0x24
 800664a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2101      	movs	r1, #1
 8006658:	438a      	bics	r2, r1
 800665a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	0018      	movs	r0, r3
 8006660:	f000 fb24 	bl	8006cac <UART_SetConfig>
 8006664:	0003      	movs	r3, r0
 8006666:	2b01      	cmp	r3, #1
 8006668:	d101      	bne.n	800666e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e024      	b.n	80066b8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	0018      	movs	r0, r3
 800667a:	f000 fc9f 	bl	8006fbc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	490d      	ldr	r1, [pc, #52]	; (80066c0 <HAL_UART_Init+0xa4>)
 800668a:	400a      	ands	r2, r1
 800668c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	212a      	movs	r1, #42	; 0x2a
 800669a:	438a      	bics	r2, r1
 800669c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2101      	movs	r1, #1
 80066aa:	430a      	orrs	r2, r1
 80066ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	0018      	movs	r0, r3
 80066b2:	f000 fd37 	bl	8007124 <UART_CheckIdleState>
 80066b6:	0003      	movs	r3, r0
}
 80066b8:	0018      	movs	r0, r3
 80066ba:	46bd      	mov	sp, r7
 80066bc:	b002      	add	sp, #8
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	ffffb7ff 	.word	0xffffb7ff

080066c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80066c4:	b590      	push	{r4, r7, lr}
 80066c6:	b0ab      	sub	sp, #172	; 0xac
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	22a4      	movs	r2, #164	; 0xa4
 80066d4:	18b9      	adds	r1, r7, r2
 80066d6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	20a0      	movs	r0, #160	; 0xa0
 80066e0:	1839      	adds	r1, r7, r0
 80066e2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	219c      	movs	r1, #156	; 0x9c
 80066ec:	1879      	adds	r1, r7, r1
 80066ee:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066f0:	0011      	movs	r1, r2
 80066f2:	18bb      	adds	r3, r7, r2
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a99      	ldr	r2, [pc, #612]	; (800695c <HAL_UART_IRQHandler+0x298>)
 80066f8:	4013      	ands	r3, r2
 80066fa:	2298      	movs	r2, #152	; 0x98
 80066fc:	18bc      	adds	r4, r7, r2
 80066fe:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006700:	18bb      	adds	r3, r7, r2
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d114      	bne.n	8006732 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006708:	187b      	adds	r3, r7, r1
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2220      	movs	r2, #32
 800670e:	4013      	ands	r3, r2
 8006710:	d00f      	beq.n	8006732 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006712:	183b      	adds	r3, r7, r0
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2220      	movs	r2, #32
 8006718:	4013      	ands	r3, r2
 800671a:	d00a      	beq.n	8006732 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006720:	2b00      	cmp	r3, #0
 8006722:	d100      	bne.n	8006726 <HAL_UART_IRQHandler+0x62>
 8006724:	e296      	b.n	8006c54 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	0010      	movs	r0, r2
 800672e:	4798      	blx	r3
      }
      return;
 8006730:	e290      	b.n	8006c54 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006732:	2398      	movs	r3, #152	; 0x98
 8006734:	18fb      	adds	r3, r7, r3
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d100      	bne.n	800673e <HAL_UART_IRQHandler+0x7a>
 800673c:	e114      	b.n	8006968 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800673e:	239c      	movs	r3, #156	; 0x9c
 8006740:	18fb      	adds	r3, r7, r3
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2201      	movs	r2, #1
 8006746:	4013      	ands	r3, r2
 8006748:	d106      	bne.n	8006758 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800674a:	23a0      	movs	r3, #160	; 0xa0
 800674c:	18fb      	adds	r3, r7, r3
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a83      	ldr	r2, [pc, #524]	; (8006960 <HAL_UART_IRQHandler+0x29c>)
 8006752:	4013      	ands	r3, r2
 8006754:	d100      	bne.n	8006758 <HAL_UART_IRQHandler+0x94>
 8006756:	e107      	b.n	8006968 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006758:	23a4      	movs	r3, #164	; 0xa4
 800675a:	18fb      	adds	r3, r7, r3
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2201      	movs	r2, #1
 8006760:	4013      	ands	r3, r2
 8006762:	d012      	beq.n	800678a <HAL_UART_IRQHandler+0xc6>
 8006764:	23a0      	movs	r3, #160	; 0xa0
 8006766:	18fb      	adds	r3, r7, r3
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	2380      	movs	r3, #128	; 0x80
 800676c:	005b      	lsls	r3, r3, #1
 800676e:	4013      	ands	r3, r2
 8006770:	d00b      	beq.n	800678a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2201      	movs	r2, #1
 8006778:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2280      	movs	r2, #128	; 0x80
 800677e:	589b      	ldr	r3, [r3, r2]
 8006780:	2201      	movs	r2, #1
 8006782:	431a      	orrs	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2180      	movs	r1, #128	; 0x80
 8006788:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800678a:	23a4      	movs	r3, #164	; 0xa4
 800678c:	18fb      	adds	r3, r7, r3
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2202      	movs	r2, #2
 8006792:	4013      	ands	r3, r2
 8006794:	d011      	beq.n	80067ba <HAL_UART_IRQHandler+0xf6>
 8006796:	239c      	movs	r3, #156	; 0x9c
 8006798:	18fb      	adds	r3, r7, r3
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2201      	movs	r2, #1
 800679e:	4013      	ands	r3, r2
 80067a0:	d00b      	beq.n	80067ba <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2202      	movs	r2, #2
 80067a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2280      	movs	r2, #128	; 0x80
 80067ae:	589b      	ldr	r3, [r3, r2]
 80067b0:	2204      	movs	r2, #4
 80067b2:	431a      	orrs	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2180      	movs	r1, #128	; 0x80
 80067b8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067ba:	23a4      	movs	r3, #164	; 0xa4
 80067bc:	18fb      	adds	r3, r7, r3
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2204      	movs	r2, #4
 80067c2:	4013      	ands	r3, r2
 80067c4:	d011      	beq.n	80067ea <HAL_UART_IRQHandler+0x126>
 80067c6:	239c      	movs	r3, #156	; 0x9c
 80067c8:	18fb      	adds	r3, r7, r3
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2201      	movs	r2, #1
 80067ce:	4013      	ands	r3, r2
 80067d0:	d00b      	beq.n	80067ea <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2204      	movs	r2, #4
 80067d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2280      	movs	r2, #128	; 0x80
 80067de:	589b      	ldr	r3, [r3, r2]
 80067e0:	2202      	movs	r2, #2
 80067e2:	431a      	orrs	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2180      	movs	r1, #128	; 0x80
 80067e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067ea:	23a4      	movs	r3, #164	; 0xa4
 80067ec:	18fb      	adds	r3, r7, r3
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2208      	movs	r2, #8
 80067f2:	4013      	ands	r3, r2
 80067f4:	d017      	beq.n	8006826 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80067f6:	23a0      	movs	r3, #160	; 0xa0
 80067f8:	18fb      	adds	r3, r7, r3
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2220      	movs	r2, #32
 80067fe:	4013      	ands	r3, r2
 8006800:	d105      	bne.n	800680e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006802:	239c      	movs	r3, #156	; 0x9c
 8006804:	18fb      	adds	r3, r7, r3
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	2201      	movs	r2, #1
 800680a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800680c:	d00b      	beq.n	8006826 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2208      	movs	r2, #8
 8006814:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2280      	movs	r2, #128	; 0x80
 800681a:	589b      	ldr	r3, [r3, r2]
 800681c:	2208      	movs	r2, #8
 800681e:	431a      	orrs	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2180      	movs	r1, #128	; 0x80
 8006824:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006826:	23a4      	movs	r3, #164	; 0xa4
 8006828:	18fb      	adds	r3, r7, r3
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	2380      	movs	r3, #128	; 0x80
 800682e:	011b      	lsls	r3, r3, #4
 8006830:	4013      	ands	r3, r2
 8006832:	d013      	beq.n	800685c <HAL_UART_IRQHandler+0x198>
 8006834:	23a0      	movs	r3, #160	; 0xa0
 8006836:	18fb      	adds	r3, r7, r3
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	2380      	movs	r3, #128	; 0x80
 800683c:	04db      	lsls	r3, r3, #19
 800683e:	4013      	ands	r3, r2
 8006840:	d00c      	beq.n	800685c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2280      	movs	r2, #128	; 0x80
 8006848:	0112      	lsls	r2, r2, #4
 800684a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2280      	movs	r2, #128	; 0x80
 8006850:	589b      	ldr	r3, [r3, r2]
 8006852:	2220      	movs	r2, #32
 8006854:	431a      	orrs	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2180      	movs	r1, #128	; 0x80
 800685a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2280      	movs	r2, #128	; 0x80
 8006860:	589b      	ldr	r3, [r3, r2]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d100      	bne.n	8006868 <HAL_UART_IRQHandler+0x1a4>
 8006866:	e1f7      	b.n	8006c58 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006868:	23a4      	movs	r3, #164	; 0xa4
 800686a:	18fb      	adds	r3, r7, r3
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2220      	movs	r2, #32
 8006870:	4013      	ands	r3, r2
 8006872:	d00e      	beq.n	8006892 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006874:	23a0      	movs	r3, #160	; 0xa0
 8006876:	18fb      	adds	r3, r7, r3
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2220      	movs	r2, #32
 800687c:	4013      	ands	r3, r2
 800687e:	d008      	beq.n	8006892 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006884:	2b00      	cmp	r3, #0
 8006886:	d004      	beq.n	8006892 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	0010      	movs	r0, r2
 8006890:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2280      	movs	r2, #128	; 0x80
 8006896:	589b      	ldr	r3, [r3, r2]
 8006898:	2194      	movs	r1, #148	; 0x94
 800689a:	187a      	adds	r2, r7, r1
 800689c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	2240      	movs	r2, #64	; 0x40
 80068a6:	4013      	ands	r3, r2
 80068a8:	2b40      	cmp	r3, #64	; 0x40
 80068aa:	d004      	beq.n	80068b6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80068ac:	187b      	adds	r3, r7, r1
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2228      	movs	r2, #40	; 0x28
 80068b2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068b4:	d047      	beq.n	8006946 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	0018      	movs	r0, r3
 80068ba:	f000 fd3f 	bl	800733c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	2240      	movs	r2, #64	; 0x40
 80068c6:	4013      	ands	r3, r2
 80068c8:	2b40      	cmp	r3, #64	; 0x40
 80068ca:	d137      	bne.n	800693c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068cc:	f3ef 8310 	mrs	r3, PRIMASK
 80068d0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80068d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068d4:	2090      	movs	r0, #144	; 0x90
 80068d6:	183a      	adds	r2, r7, r0
 80068d8:	6013      	str	r3, [r2, #0]
 80068da:	2301      	movs	r3, #1
 80068dc:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068e0:	f383 8810 	msr	PRIMASK, r3
}
 80068e4:	46c0      	nop			; (mov r8, r8)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689a      	ldr	r2, [r3, #8]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2140      	movs	r1, #64	; 0x40
 80068f2:	438a      	bics	r2, r1
 80068f4:	609a      	str	r2, [r3, #8]
 80068f6:	183b      	adds	r3, r7, r0
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068fe:	f383 8810 	msr	PRIMASK, r3
}
 8006902:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006908:	2b00      	cmp	r3, #0
 800690a:	d012      	beq.n	8006932 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006910:	4a14      	ldr	r2, [pc, #80]	; (8006964 <HAL_UART_IRQHandler+0x2a0>)
 8006912:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006918:	0018      	movs	r0, r3
 800691a:	f7fb fe85 	bl	8002628 <HAL_DMA_Abort_IT>
 800691e:	1e03      	subs	r3, r0, #0
 8006920:	d01a      	beq.n	8006958 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692c:	0018      	movs	r0, r3
 800692e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006930:	e012      	b.n	8006958 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	0018      	movs	r0, r3
 8006936:	f000 f9a5 	bl	8006c84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800693a:	e00d      	b.n	8006958 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	0018      	movs	r0, r3
 8006940:	f000 f9a0 	bl	8006c84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006944:	e008      	b.n	8006958 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	0018      	movs	r0, r3
 800694a:	f000 f99b 	bl	8006c84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2280      	movs	r2, #128	; 0x80
 8006952:	2100      	movs	r1, #0
 8006954:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006956:	e17f      	b.n	8006c58 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006958:	46c0      	nop			; (mov r8, r8)
    return;
 800695a:	e17d      	b.n	8006c58 <HAL_UART_IRQHandler+0x594>
 800695c:	0000080f 	.word	0x0000080f
 8006960:	04000120 	.word	0x04000120
 8006964:	08007401 	.word	0x08007401

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800696c:	2b01      	cmp	r3, #1
 800696e:	d000      	beq.n	8006972 <HAL_UART_IRQHandler+0x2ae>
 8006970:	e131      	b.n	8006bd6 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006972:	23a4      	movs	r3, #164	; 0xa4
 8006974:	18fb      	adds	r3, r7, r3
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2210      	movs	r2, #16
 800697a:	4013      	ands	r3, r2
 800697c:	d100      	bne.n	8006980 <HAL_UART_IRQHandler+0x2bc>
 800697e:	e12a      	b.n	8006bd6 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006980:	23a0      	movs	r3, #160	; 0xa0
 8006982:	18fb      	adds	r3, r7, r3
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2210      	movs	r2, #16
 8006988:	4013      	ands	r3, r2
 800698a:	d100      	bne.n	800698e <HAL_UART_IRQHandler+0x2ca>
 800698c:	e123      	b.n	8006bd6 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2210      	movs	r2, #16
 8006994:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	2240      	movs	r2, #64	; 0x40
 800699e:	4013      	ands	r3, r2
 80069a0:	2b40      	cmp	r3, #64	; 0x40
 80069a2:	d000      	beq.n	80069a6 <HAL_UART_IRQHandler+0x2e2>
 80069a4:	e09b      	b.n	8006ade <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685a      	ldr	r2, [r3, #4]
 80069ae:	217e      	movs	r1, #126	; 0x7e
 80069b0:	187b      	adds	r3, r7, r1
 80069b2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80069b4:	187b      	adds	r3, r7, r1
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d100      	bne.n	80069be <HAL_UART_IRQHandler+0x2fa>
 80069bc:	e14e      	b.n	8006c5c <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2258      	movs	r2, #88	; 0x58
 80069c2:	5a9b      	ldrh	r3, [r3, r2]
 80069c4:	187a      	adds	r2, r7, r1
 80069c6:	8812      	ldrh	r2, [r2, #0]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d300      	bcc.n	80069ce <HAL_UART_IRQHandler+0x30a>
 80069cc:	e146      	b.n	8006c5c <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	187a      	adds	r2, r7, r1
 80069d2:	215a      	movs	r1, #90	; 0x5a
 80069d4:	8812      	ldrh	r2, [r2, #0]
 80069d6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	2b20      	cmp	r3, #32
 80069e0:	d06e      	beq.n	8006ac0 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069e2:	f3ef 8310 	mrs	r3, PRIMASK
 80069e6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80069e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80069ec:	2301      	movs	r3, #1
 80069ee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f2:	f383 8810 	msr	PRIMASK, r3
}
 80069f6:	46c0      	nop			; (mov r8, r8)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	499a      	ldr	r1, [pc, #616]	; (8006c6c <HAL_UART_IRQHandler+0x5a8>)
 8006a04:	400a      	ands	r2, r1
 8006a06:	601a      	str	r2, [r3, #0]
 8006a08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0e:	f383 8810 	msr	PRIMASK, r3
}
 8006a12:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a14:	f3ef 8310 	mrs	r3, PRIMASK
 8006a18:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a1c:	677b      	str	r3, [r7, #116]	; 0x74
 8006a1e:	2301      	movs	r3, #1
 8006a20:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a24:	f383 8810 	msr	PRIMASK, r3
}
 8006a28:	46c0      	nop			; (mov r8, r8)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	689a      	ldr	r2, [r3, #8]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2101      	movs	r1, #1
 8006a36:	438a      	bics	r2, r1
 8006a38:	609a      	str	r2, [r3, #8]
 8006a3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a3c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a40:	f383 8810 	msr	PRIMASK, r3
}
 8006a44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a46:	f3ef 8310 	mrs	r3, PRIMASK
 8006a4a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a4e:	673b      	str	r3, [r7, #112]	; 0x70
 8006a50:	2301      	movs	r3, #1
 8006a52:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a56:	f383 8810 	msr	PRIMASK, r3
}
 8006a5a:	46c0      	nop			; (mov r8, r8)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689a      	ldr	r2, [r3, #8]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2140      	movs	r1, #64	; 0x40
 8006a68:	438a      	bics	r2, r1
 8006a6a:	609a      	str	r2, [r3, #8]
 8006a6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a6e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a72:	f383 8810 	msr	PRIMASK, r3
}
 8006a76:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a84:	f3ef 8310 	mrs	r3, PRIMASK
 8006a88:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a8e:	2301      	movs	r3, #1
 8006a90:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a94:	f383 8810 	msr	PRIMASK, r3
}
 8006a98:	46c0      	nop			; (mov r8, r8)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2110      	movs	r1, #16
 8006aa6:	438a      	bics	r2, r1
 8006aa8:	601a      	str	r2, [r3, #0]
 8006aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aac:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ab0:	f383 8810 	msr	PRIMASK, r3
}
 8006ab4:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aba:	0018      	movs	r0, r3
 8006abc:	f7fb fd7c 	bl	80025b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2258      	movs	r2, #88	; 0x58
 8006ac4:	5a9a      	ldrh	r2, [r3, r2]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	215a      	movs	r1, #90	; 0x5a
 8006aca:	5a5b      	ldrh	r3, [r3, r1]
 8006acc:	b29b      	uxth	r3, r3
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	0011      	movs	r1, r2
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	f000 f8dc 	bl	8006c94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006adc:	e0be      	b.n	8006c5c <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2258      	movs	r2, #88	; 0x58
 8006ae2:	5a99      	ldrh	r1, [r3, r2]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	225a      	movs	r2, #90	; 0x5a
 8006ae8:	5a9b      	ldrh	r3, [r3, r2]
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	208e      	movs	r0, #142	; 0x8e
 8006aee:	183b      	adds	r3, r7, r0
 8006af0:	1a8a      	subs	r2, r1, r2
 8006af2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	225a      	movs	r2, #90	; 0x5a
 8006af8:	5a9b      	ldrh	r3, [r3, r2]
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d100      	bne.n	8006b02 <HAL_UART_IRQHandler+0x43e>
 8006b00:	e0ae      	b.n	8006c60 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8006b02:	183b      	adds	r3, r7, r0
 8006b04:	881b      	ldrh	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d100      	bne.n	8006b0c <HAL_UART_IRQHandler+0x448>
 8006b0a:	e0a9      	b.n	8006c60 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b10:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b12:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b14:	2488      	movs	r4, #136	; 0x88
 8006b16:	193a      	adds	r2, r7, r4
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f383 8810 	msr	PRIMASK, r3
}
 8006b24:	46c0      	nop			; (mov r8, r8)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	494f      	ldr	r1, [pc, #316]	; (8006c70 <HAL_UART_IRQHandler+0x5ac>)
 8006b32:	400a      	ands	r2, r1
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	193b      	adds	r3, r7, r4
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f383 8810 	msr	PRIMASK, r3
}
 8006b42:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b44:	f3ef 8310 	mrs	r3, PRIMASK
 8006b48:	61bb      	str	r3, [r7, #24]
  return(result);
 8006b4a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b4c:	2484      	movs	r4, #132	; 0x84
 8006b4e:	193a      	adds	r2, r7, r4
 8006b50:	6013      	str	r3, [r2, #0]
 8006b52:	2301      	movs	r3, #1
 8006b54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	f383 8810 	msr	PRIMASK, r3
}
 8006b5c:	46c0      	nop			; (mov r8, r8)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689a      	ldr	r2, [r3, #8]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2101      	movs	r1, #1
 8006b6a:	438a      	bics	r2, r1
 8006b6c:	609a      	str	r2, [r3, #8]
 8006b6e:	193b      	adds	r3, r7, r4
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	f383 8810 	msr	PRIMASK, r3
}
 8006b7a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b8e:	f3ef 8310 	mrs	r3, PRIMASK
 8006b92:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b96:	2480      	movs	r4, #128	; 0x80
 8006b98:	193a      	adds	r2, r7, r4
 8006b9a:	6013      	str	r3, [r2, #0]
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba2:	f383 8810 	msr	PRIMASK, r3
}
 8006ba6:	46c0      	nop			; (mov r8, r8)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2110      	movs	r1, #16
 8006bb4:	438a      	bics	r2, r1
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	193b      	adds	r3, r7, r4
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc0:	f383 8810 	msr	PRIMASK, r3
}
 8006bc4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bc6:	183b      	adds	r3, r7, r0
 8006bc8:	881a      	ldrh	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	0011      	movs	r1, r2
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f000 f860 	bl	8006c94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bd4:	e044      	b.n	8006c60 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006bd6:	23a4      	movs	r3, #164	; 0xa4
 8006bd8:	18fb      	adds	r3, r7, r3
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	2380      	movs	r3, #128	; 0x80
 8006bde:	035b      	lsls	r3, r3, #13
 8006be0:	4013      	ands	r3, r2
 8006be2:	d010      	beq.n	8006c06 <HAL_UART_IRQHandler+0x542>
 8006be4:	239c      	movs	r3, #156	; 0x9c
 8006be6:	18fb      	adds	r3, r7, r3
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	2380      	movs	r3, #128	; 0x80
 8006bec:	03db      	lsls	r3, r3, #15
 8006bee:	4013      	ands	r3, r2
 8006bf0:	d009      	beq.n	8006c06 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2280      	movs	r2, #128	; 0x80
 8006bf8:	0352      	lsls	r2, r2, #13
 8006bfa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	0018      	movs	r0, r3
 8006c00:	f000 fc40 	bl	8007484 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c04:	e02f      	b.n	8006c66 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006c06:	23a4      	movs	r3, #164	; 0xa4
 8006c08:	18fb      	adds	r3, r7, r3
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2280      	movs	r2, #128	; 0x80
 8006c0e:	4013      	ands	r3, r2
 8006c10:	d00f      	beq.n	8006c32 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006c12:	23a0      	movs	r3, #160	; 0xa0
 8006c14:	18fb      	adds	r3, r7, r3
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2280      	movs	r2, #128	; 0x80
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	d009      	beq.n	8006c32 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d01e      	beq.n	8006c64 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	0010      	movs	r0, r2
 8006c2e:	4798      	blx	r3
    }
    return;
 8006c30:	e018      	b.n	8006c64 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c32:	23a4      	movs	r3, #164	; 0xa4
 8006c34:	18fb      	adds	r3, r7, r3
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2240      	movs	r2, #64	; 0x40
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	d013      	beq.n	8006c66 <HAL_UART_IRQHandler+0x5a2>
 8006c3e:	23a0      	movs	r3, #160	; 0xa0
 8006c40:	18fb      	adds	r3, r7, r3
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2240      	movs	r2, #64	; 0x40
 8006c46:	4013      	ands	r3, r2
 8006c48:	d00d      	beq.n	8006c66 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	f000 fbee 	bl	800742e <UART_EndTransmit_IT>
    return;
 8006c52:	e008      	b.n	8006c66 <HAL_UART_IRQHandler+0x5a2>
      return;
 8006c54:	46c0      	nop			; (mov r8, r8)
 8006c56:	e006      	b.n	8006c66 <HAL_UART_IRQHandler+0x5a2>
    return;
 8006c58:	46c0      	nop			; (mov r8, r8)
 8006c5a:	e004      	b.n	8006c66 <HAL_UART_IRQHandler+0x5a2>
      return;
 8006c5c:	46c0      	nop			; (mov r8, r8)
 8006c5e:	e002      	b.n	8006c66 <HAL_UART_IRQHandler+0x5a2>
      return;
 8006c60:	46c0      	nop			; (mov r8, r8)
 8006c62:	e000      	b.n	8006c66 <HAL_UART_IRQHandler+0x5a2>
    return;
 8006c64:	46c0      	nop			; (mov r8, r8)
  }

}
 8006c66:	46bd      	mov	sp, r7
 8006c68:	b02b      	add	sp, #172	; 0xac
 8006c6a:	bd90      	pop	{r4, r7, pc}
 8006c6c:	fffffeff 	.word	0xfffffeff
 8006c70:	fffffedf 	.word	0xfffffedf

08006c74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c7c:	46c0      	nop			; (mov r8, r8)
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	b002      	add	sp, #8
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c8c:	46c0      	nop			; (mov r8, r8)
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	b002      	add	sp, #8
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	000a      	movs	r2, r1
 8006c9e:	1cbb      	adds	r3, r7, #2
 8006ca0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ca2:	46c0      	nop			; (mov r8, r8)
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	b002      	add	sp, #8
 8006ca8:	bd80      	pop	{r7, pc}
	...

08006cac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b088      	sub	sp, #32
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006cb4:	231e      	movs	r3, #30
 8006cb6:	18fb      	adds	r3, r7, r3
 8006cb8:	2200      	movs	r2, #0
 8006cba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689a      	ldr	r2, [r3, #8]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	431a      	orrs	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4aaf      	ldr	r2, [pc, #700]	; (8006f98 <UART_SetConfig+0x2ec>)
 8006cdc:	4013      	ands	r3, r2
 8006cde:	0019      	movs	r1, r3
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	4aaa      	ldr	r2, [pc, #680]	; (8006f9c <UART_SetConfig+0x2f0>)
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	0019      	movs	r1, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	697a      	ldr	r2, [r7, #20]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	4aa1      	ldr	r2, [pc, #644]	; (8006fa0 <UART_SetConfig+0x2f4>)
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	0019      	movs	r1, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	430a      	orrs	r2, r1
 8006d26:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a9d      	ldr	r2, [pc, #628]	; (8006fa4 <UART_SetConfig+0x2f8>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d127      	bne.n	8006d82 <UART_SetConfig+0xd6>
 8006d32:	4b9d      	ldr	r3, [pc, #628]	; (8006fa8 <UART_SetConfig+0x2fc>)
 8006d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d36:	2203      	movs	r2, #3
 8006d38:	4013      	ands	r3, r2
 8006d3a:	2b03      	cmp	r3, #3
 8006d3c:	d00d      	beq.n	8006d5a <UART_SetConfig+0xae>
 8006d3e:	d81b      	bhi.n	8006d78 <UART_SetConfig+0xcc>
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d014      	beq.n	8006d6e <UART_SetConfig+0xc2>
 8006d44:	d818      	bhi.n	8006d78 <UART_SetConfig+0xcc>
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d002      	beq.n	8006d50 <UART_SetConfig+0xa4>
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d00a      	beq.n	8006d64 <UART_SetConfig+0xb8>
 8006d4e:	e013      	b.n	8006d78 <UART_SetConfig+0xcc>
 8006d50:	231f      	movs	r3, #31
 8006d52:	18fb      	adds	r3, r7, r3
 8006d54:	2200      	movs	r2, #0
 8006d56:	701a      	strb	r2, [r3, #0]
 8006d58:	e065      	b.n	8006e26 <UART_SetConfig+0x17a>
 8006d5a:	231f      	movs	r3, #31
 8006d5c:	18fb      	adds	r3, r7, r3
 8006d5e:	2202      	movs	r2, #2
 8006d60:	701a      	strb	r2, [r3, #0]
 8006d62:	e060      	b.n	8006e26 <UART_SetConfig+0x17a>
 8006d64:	231f      	movs	r3, #31
 8006d66:	18fb      	adds	r3, r7, r3
 8006d68:	2204      	movs	r2, #4
 8006d6a:	701a      	strb	r2, [r3, #0]
 8006d6c:	e05b      	b.n	8006e26 <UART_SetConfig+0x17a>
 8006d6e:	231f      	movs	r3, #31
 8006d70:	18fb      	adds	r3, r7, r3
 8006d72:	2208      	movs	r2, #8
 8006d74:	701a      	strb	r2, [r3, #0]
 8006d76:	e056      	b.n	8006e26 <UART_SetConfig+0x17a>
 8006d78:	231f      	movs	r3, #31
 8006d7a:	18fb      	adds	r3, r7, r3
 8006d7c:	2210      	movs	r2, #16
 8006d7e:	701a      	strb	r2, [r3, #0]
 8006d80:	e051      	b.n	8006e26 <UART_SetConfig+0x17a>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a89      	ldr	r2, [pc, #548]	; (8006fac <UART_SetConfig+0x300>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d134      	bne.n	8006df6 <UART_SetConfig+0x14a>
 8006d8c:	4b86      	ldr	r3, [pc, #536]	; (8006fa8 <UART_SetConfig+0x2fc>)
 8006d8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d90:	23c0      	movs	r3, #192	; 0xc0
 8006d92:	029b      	lsls	r3, r3, #10
 8006d94:	4013      	ands	r3, r2
 8006d96:	22c0      	movs	r2, #192	; 0xc0
 8006d98:	0292      	lsls	r2, r2, #10
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d017      	beq.n	8006dce <UART_SetConfig+0x122>
 8006d9e:	22c0      	movs	r2, #192	; 0xc0
 8006da0:	0292      	lsls	r2, r2, #10
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d822      	bhi.n	8006dec <UART_SetConfig+0x140>
 8006da6:	2280      	movs	r2, #128	; 0x80
 8006da8:	0292      	lsls	r2, r2, #10
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d019      	beq.n	8006de2 <UART_SetConfig+0x136>
 8006dae:	2280      	movs	r2, #128	; 0x80
 8006db0:	0292      	lsls	r2, r2, #10
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d81a      	bhi.n	8006dec <UART_SetConfig+0x140>
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d004      	beq.n	8006dc4 <UART_SetConfig+0x118>
 8006dba:	2280      	movs	r2, #128	; 0x80
 8006dbc:	0252      	lsls	r2, r2, #9
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d00a      	beq.n	8006dd8 <UART_SetConfig+0x12c>
 8006dc2:	e013      	b.n	8006dec <UART_SetConfig+0x140>
 8006dc4:	231f      	movs	r3, #31
 8006dc6:	18fb      	adds	r3, r7, r3
 8006dc8:	2200      	movs	r2, #0
 8006dca:	701a      	strb	r2, [r3, #0]
 8006dcc:	e02b      	b.n	8006e26 <UART_SetConfig+0x17a>
 8006dce:	231f      	movs	r3, #31
 8006dd0:	18fb      	adds	r3, r7, r3
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	701a      	strb	r2, [r3, #0]
 8006dd6:	e026      	b.n	8006e26 <UART_SetConfig+0x17a>
 8006dd8:	231f      	movs	r3, #31
 8006dda:	18fb      	adds	r3, r7, r3
 8006ddc:	2204      	movs	r2, #4
 8006dde:	701a      	strb	r2, [r3, #0]
 8006de0:	e021      	b.n	8006e26 <UART_SetConfig+0x17a>
 8006de2:	231f      	movs	r3, #31
 8006de4:	18fb      	adds	r3, r7, r3
 8006de6:	2208      	movs	r2, #8
 8006de8:	701a      	strb	r2, [r3, #0]
 8006dea:	e01c      	b.n	8006e26 <UART_SetConfig+0x17a>
 8006dec:	231f      	movs	r3, #31
 8006dee:	18fb      	adds	r3, r7, r3
 8006df0:	2210      	movs	r2, #16
 8006df2:	701a      	strb	r2, [r3, #0]
 8006df4:	e017      	b.n	8006e26 <UART_SetConfig+0x17a>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a6d      	ldr	r2, [pc, #436]	; (8006fb0 <UART_SetConfig+0x304>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d104      	bne.n	8006e0a <UART_SetConfig+0x15e>
 8006e00:	231f      	movs	r3, #31
 8006e02:	18fb      	adds	r3, r7, r3
 8006e04:	2200      	movs	r2, #0
 8006e06:	701a      	strb	r2, [r3, #0]
 8006e08:	e00d      	b.n	8006e26 <UART_SetConfig+0x17a>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a69      	ldr	r2, [pc, #420]	; (8006fb4 <UART_SetConfig+0x308>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d104      	bne.n	8006e1e <UART_SetConfig+0x172>
 8006e14:	231f      	movs	r3, #31
 8006e16:	18fb      	adds	r3, r7, r3
 8006e18:	2200      	movs	r2, #0
 8006e1a:	701a      	strb	r2, [r3, #0]
 8006e1c:	e003      	b.n	8006e26 <UART_SetConfig+0x17a>
 8006e1e:	231f      	movs	r3, #31
 8006e20:	18fb      	adds	r3, r7, r3
 8006e22:	2210      	movs	r2, #16
 8006e24:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	69da      	ldr	r2, [r3, #28]
 8006e2a:	2380      	movs	r3, #128	; 0x80
 8006e2c:	021b      	lsls	r3, r3, #8
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d15d      	bne.n	8006eee <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8006e32:	231f      	movs	r3, #31
 8006e34:	18fb      	adds	r3, r7, r3
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	2b08      	cmp	r3, #8
 8006e3a:	d015      	beq.n	8006e68 <UART_SetConfig+0x1bc>
 8006e3c:	dc18      	bgt.n	8006e70 <UART_SetConfig+0x1c4>
 8006e3e:	2b04      	cmp	r3, #4
 8006e40:	d00d      	beq.n	8006e5e <UART_SetConfig+0x1b2>
 8006e42:	dc15      	bgt.n	8006e70 <UART_SetConfig+0x1c4>
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <UART_SetConfig+0x1a2>
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d005      	beq.n	8006e58 <UART_SetConfig+0x1ac>
 8006e4c:	e010      	b.n	8006e70 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e4e:	f7fe fa37 	bl	80052c0 <HAL_RCC_GetPCLK1Freq>
 8006e52:	0003      	movs	r3, r0
 8006e54:	61bb      	str	r3, [r7, #24]
        break;
 8006e56:	e012      	b.n	8006e7e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e58:	4b57      	ldr	r3, [pc, #348]	; (8006fb8 <UART_SetConfig+0x30c>)
 8006e5a:	61bb      	str	r3, [r7, #24]
        break;
 8006e5c:	e00f      	b.n	8006e7e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e5e:	f7fe f9a3 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 8006e62:	0003      	movs	r3, r0
 8006e64:	61bb      	str	r3, [r7, #24]
        break;
 8006e66:	e00a      	b.n	8006e7e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e68:	2380      	movs	r3, #128	; 0x80
 8006e6a:	021b      	lsls	r3, r3, #8
 8006e6c:	61bb      	str	r3, [r7, #24]
        break;
 8006e6e:	e006      	b.n	8006e7e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006e70:	2300      	movs	r3, #0
 8006e72:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e74:	231e      	movs	r3, #30
 8006e76:	18fb      	adds	r3, r7, r3
 8006e78:	2201      	movs	r2, #1
 8006e7a:	701a      	strb	r2, [r3, #0]
        break;
 8006e7c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d100      	bne.n	8006e86 <UART_SetConfig+0x1da>
 8006e84:	e07b      	b.n	8006f7e <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	005a      	lsls	r2, r3, #1
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	085b      	lsrs	r3, r3, #1
 8006e90:	18d2      	adds	r2, r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	0019      	movs	r1, r3
 8006e98:	0010      	movs	r0, r2
 8006e9a:	f7f9 f947 	bl	800012c <__udivsi3>
 8006e9e:	0003      	movs	r3, r0
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	2b0f      	cmp	r3, #15
 8006ea8:	d91c      	bls.n	8006ee4 <UART_SetConfig+0x238>
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	2380      	movs	r3, #128	; 0x80
 8006eae:	025b      	lsls	r3, r3, #9
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d217      	bcs.n	8006ee4 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	200e      	movs	r0, #14
 8006eba:	183b      	adds	r3, r7, r0
 8006ebc:	210f      	movs	r1, #15
 8006ebe:	438a      	bics	r2, r1
 8006ec0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	085b      	lsrs	r3, r3, #1
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	2207      	movs	r2, #7
 8006eca:	4013      	ands	r3, r2
 8006ecc:	b299      	uxth	r1, r3
 8006ece:	183b      	adds	r3, r7, r0
 8006ed0:	183a      	adds	r2, r7, r0
 8006ed2:	8812      	ldrh	r2, [r2, #0]
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	183a      	adds	r2, r7, r0
 8006ede:	8812      	ldrh	r2, [r2, #0]
 8006ee0:	60da      	str	r2, [r3, #12]
 8006ee2:	e04c      	b.n	8006f7e <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8006ee4:	231e      	movs	r3, #30
 8006ee6:	18fb      	adds	r3, r7, r3
 8006ee8:	2201      	movs	r2, #1
 8006eea:	701a      	strb	r2, [r3, #0]
 8006eec:	e047      	b.n	8006f7e <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006eee:	231f      	movs	r3, #31
 8006ef0:	18fb      	adds	r3, r7, r3
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	d015      	beq.n	8006f24 <UART_SetConfig+0x278>
 8006ef8:	dc18      	bgt.n	8006f2c <UART_SetConfig+0x280>
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	d00d      	beq.n	8006f1a <UART_SetConfig+0x26e>
 8006efe:	dc15      	bgt.n	8006f2c <UART_SetConfig+0x280>
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d002      	beq.n	8006f0a <UART_SetConfig+0x25e>
 8006f04:	2b02      	cmp	r3, #2
 8006f06:	d005      	beq.n	8006f14 <UART_SetConfig+0x268>
 8006f08:	e010      	b.n	8006f2c <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f0a:	f7fe f9d9 	bl	80052c0 <HAL_RCC_GetPCLK1Freq>
 8006f0e:	0003      	movs	r3, r0
 8006f10:	61bb      	str	r3, [r7, #24]
        break;
 8006f12:	e012      	b.n	8006f3a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f14:	4b28      	ldr	r3, [pc, #160]	; (8006fb8 <UART_SetConfig+0x30c>)
 8006f16:	61bb      	str	r3, [r7, #24]
        break;
 8006f18:	e00f      	b.n	8006f3a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f1a:	f7fe f945 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 8006f1e:	0003      	movs	r3, r0
 8006f20:	61bb      	str	r3, [r7, #24]
        break;
 8006f22:	e00a      	b.n	8006f3a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f24:	2380      	movs	r3, #128	; 0x80
 8006f26:	021b      	lsls	r3, r3, #8
 8006f28:	61bb      	str	r3, [r7, #24]
        break;
 8006f2a:	e006      	b.n	8006f3a <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f30:	231e      	movs	r3, #30
 8006f32:	18fb      	adds	r3, r7, r3
 8006f34:	2201      	movs	r2, #1
 8006f36:	701a      	strb	r2, [r3, #0]
        break;
 8006f38:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d01e      	beq.n	8006f7e <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	085a      	lsrs	r2, r3, #1
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	18d2      	adds	r2, r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	0019      	movs	r1, r3
 8006f50:	0010      	movs	r0, r2
 8006f52:	f7f9 f8eb 	bl	800012c <__udivsi3>
 8006f56:	0003      	movs	r3, r0
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	2b0f      	cmp	r3, #15
 8006f60:	d909      	bls.n	8006f76 <UART_SetConfig+0x2ca>
 8006f62:	693a      	ldr	r2, [r7, #16]
 8006f64:	2380      	movs	r3, #128	; 0x80
 8006f66:	025b      	lsls	r3, r3, #9
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d204      	bcs.n	8006f76 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	60da      	str	r2, [r3, #12]
 8006f74:	e003      	b.n	8006f7e <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8006f76:	231e      	movs	r3, #30
 8006f78:	18fb      	adds	r3, r7, r3
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006f8a:	231e      	movs	r3, #30
 8006f8c:	18fb      	adds	r3, r7, r3
 8006f8e:	781b      	ldrb	r3, [r3, #0]
}
 8006f90:	0018      	movs	r0, r3
 8006f92:	46bd      	mov	sp, r7
 8006f94:	b008      	add	sp, #32
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	efff69f3 	.word	0xefff69f3
 8006f9c:	ffffcfff 	.word	0xffffcfff
 8006fa0:	fffff4ff 	.word	0xfffff4ff
 8006fa4:	40013800 	.word	0x40013800
 8006fa8:	40021000 	.word	0x40021000
 8006fac:	40004400 	.word	0x40004400
 8006fb0:	40004800 	.word	0x40004800
 8006fb4:	40004c00 	.word	0x40004c00
 8006fb8:	007a1200 	.word	0x007a1200

08006fbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	2201      	movs	r2, #1
 8006fca:	4013      	ands	r3, r2
 8006fcc:	d00b      	beq.n	8006fe6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	4a4a      	ldr	r2, [pc, #296]	; (8007100 <UART_AdvFeatureConfig+0x144>)
 8006fd6:	4013      	ands	r3, r2
 8006fd8:	0019      	movs	r1, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	430a      	orrs	r2, r1
 8006fe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	2202      	movs	r2, #2
 8006fec:	4013      	ands	r3, r2
 8006fee:	d00b      	beq.n	8007008 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	4a43      	ldr	r2, [pc, #268]	; (8007104 <UART_AdvFeatureConfig+0x148>)
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	0019      	movs	r1, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	430a      	orrs	r2, r1
 8007006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700c:	2204      	movs	r2, #4
 800700e:	4013      	ands	r3, r2
 8007010:	d00b      	beq.n	800702a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	4a3b      	ldr	r2, [pc, #236]	; (8007108 <UART_AdvFeatureConfig+0x14c>)
 800701a:	4013      	ands	r3, r2
 800701c:	0019      	movs	r1, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	430a      	orrs	r2, r1
 8007028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702e:	2208      	movs	r2, #8
 8007030:	4013      	ands	r3, r2
 8007032:	d00b      	beq.n	800704c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	4a34      	ldr	r2, [pc, #208]	; (800710c <UART_AdvFeatureConfig+0x150>)
 800703c:	4013      	ands	r3, r2
 800703e:	0019      	movs	r1, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	430a      	orrs	r2, r1
 800704a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007050:	2210      	movs	r2, #16
 8007052:	4013      	ands	r3, r2
 8007054:	d00b      	beq.n	800706e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	4a2c      	ldr	r2, [pc, #176]	; (8007110 <UART_AdvFeatureConfig+0x154>)
 800705e:	4013      	ands	r3, r2
 8007060:	0019      	movs	r1, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007072:	2220      	movs	r2, #32
 8007074:	4013      	ands	r3, r2
 8007076:	d00b      	beq.n	8007090 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	4a25      	ldr	r2, [pc, #148]	; (8007114 <UART_AdvFeatureConfig+0x158>)
 8007080:	4013      	ands	r3, r2
 8007082:	0019      	movs	r1, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	430a      	orrs	r2, r1
 800708e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007094:	2240      	movs	r2, #64	; 0x40
 8007096:	4013      	ands	r3, r2
 8007098:	d01d      	beq.n	80070d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	4a1d      	ldr	r2, [pc, #116]	; (8007118 <UART_AdvFeatureConfig+0x15c>)
 80070a2:	4013      	ands	r3, r2
 80070a4:	0019      	movs	r1, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070b6:	2380      	movs	r3, #128	; 0x80
 80070b8:	035b      	lsls	r3, r3, #13
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d10b      	bne.n	80070d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	4a15      	ldr	r2, [pc, #84]	; (800711c <UART_AdvFeatureConfig+0x160>)
 80070c6:	4013      	ands	r3, r2
 80070c8:	0019      	movs	r1, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	2280      	movs	r2, #128	; 0x80
 80070dc:	4013      	ands	r3, r2
 80070de:	d00b      	beq.n	80070f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	4a0e      	ldr	r2, [pc, #56]	; (8007120 <UART_AdvFeatureConfig+0x164>)
 80070e8:	4013      	ands	r3, r2
 80070ea:	0019      	movs	r1, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	605a      	str	r2, [r3, #4]
  }
}
 80070f8:	46c0      	nop			; (mov r8, r8)
 80070fa:	46bd      	mov	sp, r7
 80070fc:	b002      	add	sp, #8
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	fffdffff 	.word	0xfffdffff
 8007104:	fffeffff 	.word	0xfffeffff
 8007108:	fffbffff 	.word	0xfffbffff
 800710c:	ffff7fff 	.word	0xffff7fff
 8007110:	ffffefff 	.word	0xffffefff
 8007114:	ffffdfff 	.word	0xffffdfff
 8007118:	ffefffff 	.word	0xffefffff
 800711c:	ff9fffff 	.word	0xff9fffff
 8007120:	fff7ffff 	.word	0xfff7ffff

08007124 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af02      	add	r7, sp, #8
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2280      	movs	r2, #128	; 0x80
 8007130:	2100      	movs	r1, #0
 8007132:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007134:	f7fa fe9e 	bl	8001e74 <HAL_GetTick>
 8007138:	0003      	movs	r3, r0
 800713a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2208      	movs	r2, #8
 8007144:	4013      	ands	r3, r2
 8007146:	2b08      	cmp	r3, #8
 8007148:	d10c      	bne.n	8007164 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2280      	movs	r2, #128	; 0x80
 800714e:	0391      	lsls	r1, r2, #14
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	4a17      	ldr	r2, [pc, #92]	; (80071b0 <UART_CheckIdleState+0x8c>)
 8007154:	9200      	str	r2, [sp, #0]
 8007156:	2200      	movs	r2, #0
 8007158:	f000 f82c 	bl	80071b4 <UART_WaitOnFlagUntilTimeout>
 800715c:	1e03      	subs	r3, r0, #0
 800715e:	d001      	beq.n	8007164 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007160:	2303      	movs	r3, #3
 8007162:	e021      	b.n	80071a8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2204      	movs	r2, #4
 800716c:	4013      	ands	r3, r2
 800716e:	2b04      	cmp	r3, #4
 8007170:	d10c      	bne.n	800718c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2280      	movs	r2, #128	; 0x80
 8007176:	03d1      	lsls	r1, r2, #15
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	4a0d      	ldr	r2, [pc, #52]	; (80071b0 <UART_CheckIdleState+0x8c>)
 800717c:	9200      	str	r2, [sp, #0]
 800717e:	2200      	movs	r2, #0
 8007180:	f000 f818 	bl	80071b4 <UART_WaitOnFlagUntilTimeout>
 8007184:	1e03      	subs	r3, r0, #0
 8007186:	d001      	beq.n	800718c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e00d      	b.n	80071a8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2220      	movs	r2, #32
 8007190:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2220      	movs	r2, #32
 8007196:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2274      	movs	r2, #116	; 0x74
 80071a2:	2100      	movs	r1, #0
 80071a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	0018      	movs	r0, r3
 80071aa:	46bd      	mov	sp, r7
 80071ac:	b004      	add	sp, #16
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	01ffffff 	.word	0x01ffffff

080071b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b094      	sub	sp, #80	; 0x50
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	603b      	str	r3, [r7, #0]
 80071c0:	1dfb      	adds	r3, r7, #7
 80071c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071c4:	e0a3      	b.n	800730e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071c8:	3301      	adds	r3, #1
 80071ca:	d100      	bne.n	80071ce <UART_WaitOnFlagUntilTimeout+0x1a>
 80071cc:	e09f      	b.n	800730e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ce:	f7fa fe51 	bl	8001e74 <HAL_GetTick>
 80071d2:	0002      	movs	r2, r0
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071da:	429a      	cmp	r2, r3
 80071dc:	d302      	bcc.n	80071e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80071de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d13d      	bne.n	8007260 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071e4:	f3ef 8310 	mrs	r3, PRIMASK
 80071e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80071ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071ec:	647b      	str	r3, [r7, #68]	; 0x44
 80071ee:	2301      	movs	r3, #1
 80071f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f4:	f383 8810 	msr	PRIMASK, r3
}
 80071f8:	46c0      	nop			; (mov r8, r8)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	494c      	ldr	r1, [pc, #304]	; (8007338 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007206:	400a      	ands	r2, r1
 8007208:	601a      	str	r2, [r3, #0]
 800720a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800720c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007210:	f383 8810 	msr	PRIMASK, r3
}
 8007214:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007216:	f3ef 8310 	mrs	r3, PRIMASK
 800721a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800721c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800721e:	643b      	str	r3, [r7, #64]	; 0x40
 8007220:	2301      	movs	r3, #1
 8007222:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007226:	f383 8810 	msr	PRIMASK, r3
}
 800722a:	46c0      	nop			; (mov r8, r8)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	689a      	ldr	r2, [r3, #8]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2101      	movs	r1, #1
 8007238:	438a      	bics	r2, r1
 800723a:	609a      	str	r2, [r3, #8]
 800723c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800723e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007242:	f383 8810 	msr	PRIMASK, r3
}
 8007246:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2220      	movs	r2, #32
 800724c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2220      	movs	r2, #32
 8007252:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2274      	movs	r2, #116	; 0x74
 8007258:	2100      	movs	r1, #0
 800725a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e067      	b.n	8007330 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2204      	movs	r2, #4
 8007268:	4013      	ands	r3, r2
 800726a:	d050      	beq.n	800730e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	69da      	ldr	r2, [r3, #28]
 8007272:	2380      	movs	r3, #128	; 0x80
 8007274:	011b      	lsls	r3, r3, #4
 8007276:	401a      	ands	r2, r3
 8007278:	2380      	movs	r3, #128	; 0x80
 800727a:	011b      	lsls	r3, r3, #4
 800727c:	429a      	cmp	r2, r3
 800727e:	d146      	bne.n	800730e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	2280      	movs	r2, #128	; 0x80
 8007286:	0112      	lsls	r2, r2, #4
 8007288:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800728a:	f3ef 8310 	mrs	r3, PRIMASK
 800728e:	613b      	str	r3, [r7, #16]
  return(result);
 8007290:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007294:	2301      	movs	r3, #1
 8007296:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	f383 8810 	msr	PRIMASK, r3
}
 800729e:	46c0      	nop			; (mov r8, r8)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4923      	ldr	r1, [pc, #140]	; (8007338 <UART_WaitOnFlagUntilTimeout+0x184>)
 80072ac:	400a      	ands	r2, r1
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	f383 8810 	msr	PRIMASK, r3
}
 80072ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072bc:	f3ef 8310 	mrs	r3, PRIMASK
 80072c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80072c2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80072c6:	2301      	movs	r3, #1
 80072c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072ca:	6a3b      	ldr	r3, [r7, #32]
 80072cc:	f383 8810 	msr	PRIMASK, r3
}
 80072d0:	46c0      	nop			; (mov r8, r8)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	689a      	ldr	r2, [r3, #8]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2101      	movs	r1, #1
 80072de:	438a      	bics	r2, r1
 80072e0:	609a      	str	r2, [r3, #8]
 80072e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072e4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	f383 8810 	msr	PRIMASK, r3
}
 80072ec:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2220      	movs	r2, #32
 80072f2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2220      	movs	r2, #32
 80072f8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2280      	movs	r2, #128	; 0x80
 80072fe:	2120      	movs	r1, #32
 8007300:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2274      	movs	r2, #116	; 0x74
 8007306:	2100      	movs	r1, #0
 8007308:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e010      	b.n	8007330 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	69db      	ldr	r3, [r3, #28]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	4013      	ands	r3, r2
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	425a      	negs	r2, r3
 800731e:	4153      	adcs	r3, r2
 8007320:	b2db      	uxtb	r3, r3
 8007322:	001a      	movs	r2, r3
 8007324:	1dfb      	adds	r3, r7, #7
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d100      	bne.n	800732e <UART_WaitOnFlagUntilTimeout+0x17a>
 800732c:	e74b      	b.n	80071c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	0018      	movs	r0, r3
 8007332:	46bd      	mov	sp, r7
 8007334:	b014      	add	sp, #80	; 0x50
 8007336:	bd80      	pop	{r7, pc}
 8007338:	fffffe5f 	.word	0xfffffe5f

0800733c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b08e      	sub	sp, #56	; 0x38
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007344:	f3ef 8310 	mrs	r3, PRIMASK
 8007348:	617b      	str	r3, [r7, #20]
  return(result);
 800734a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800734c:	637b      	str	r3, [r7, #52]	; 0x34
 800734e:	2301      	movs	r3, #1
 8007350:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	f383 8810 	msr	PRIMASK, r3
}
 8007358:	46c0      	nop			; (mov r8, r8)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4925      	ldr	r1, [pc, #148]	; (80073fc <UART_EndRxTransfer+0xc0>)
 8007366:	400a      	ands	r2, r1
 8007368:	601a      	str	r2, [r3, #0]
 800736a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800736c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	f383 8810 	msr	PRIMASK, r3
}
 8007374:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007376:	f3ef 8310 	mrs	r3, PRIMASK
 800737a:	623b      	str	r3, [r7, #32]
  return(result);
 800737c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800737e:	633b      	str	r3, [r7, #48]	; 0x30
 8007380:	2301      	movs	r3, #1
 8007382:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	f383 8810 	msr	PRIMASK, r3
}
 800738a:	46c0      	nop			; (mov r8, r8)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	689a      	ldr	r2, [r3, #8]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2101      	movs	r1, #1
 8007398:	438a      	bics	r2, r1
 800739a:	609a      	str	r2, [r3, #8]
 800739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a2:	f383 8810 	msr	PRIMASK, r3
}
 80073a6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d118      	bne.n	80073e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073b0:	f3ef 8310 	mrs	r3, PRIMASK
 80073b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80073b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073ba:	2301      	movs	r3, #1
 80073bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f383 8810 	msr	PRIMASK, r3
}
 80073c4:	46c0      	nop			; (mov r8, r8)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2110      	movs	r1, #16
 80073d2:	438a      	bics	r2, r1
 80073d4:	601a      	str	r2, [r3, #0]
 80073d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	f383 8810 	msr	PRIMASK, r3
}
 80073e0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2220      	movs	r2, #32
 80073e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80073f4:	46c0      	nop			; (mov r8, r8)
 80073f6:	46bd      	mov	sp, r7
 80073f8:	b00e      	add	sp, #56	; 0x38
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	fffffedf 	.word	0xfffffedf

08007400 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	225a      	movs	r2, #90	; 0x5a
 8007412:	2100      	movs	r1, #0
 8007414:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2252      	movs	r2, #82	; 0x52
 800741a:	2100      	movs	r1, #0
 800741c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	0018      	movs	r0, r3
 8007422:	f7ff fc2f 	bl	8006c84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007426:	46c0      	nop			; (mov r8, r8)
 8007428:	46bd      	mov	sp, r7
 800742a:	b004      	add	sp, #16
 800742c:	bd80      	pop	{r7, pc}

0800742e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b086      	sub	sp, #24
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007436:	f3ef 8310 	mrs	r3, PRIMASK
 800743a:	60bb      	str	r3, [r7, #8]
  return(result);
 800743c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	2301      	movs	r3, #1
 8007442:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f383 8810 	msr	PRIMASK, r3
}
 800744a:	46c0      	nop			; (mov r8, r8)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2140      	movs	r1, #64	; 0x40
 8007458:	438a      	bics	r2, r1
 800745a:	601a      	str	r2, [r3, #0]
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	f383 8810 	msr	PRIMASK, r3
}
 8007466:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2220      	movs	r2, #32
 800746c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	0018      	movs	r0, r3
 8007478:	f7ff fbfc 	bl	8006c74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800747c:	46c0      	nop			; (mov r8, r8)
 800747e:	46bd      	mov	sp, r7
 8007480:	b006      	add	sp, #24
 8007482:	bd80      	pop	{r7, pc}

08007484 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800748c:	46c0      	nop			; (mov r8, r8)
 800748e:	46bd      	mov	sp, r7
 8007490:	b002      	add	sp, #8
 8007492:	bd80      	pop	{r7, pc}

08007494 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2244      	movs	r2, #68	; 0x44
 80074a0:	2100      	movs	r1, #0
 80074a2:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80074a4:	4b05      	ldr	r3, [pc, #20]	; (80074bc <USB_EnableGlobalInt+0x28>)
 80074a6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	b299      	uxth	r1, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2240      	movs	r2, #64	; 0x40
 80074b0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	0018      	movs	r0, r3
 80074b6:	46bd      	mov	sp, r7
 80074b8:	b004      	add	sp, #16
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	0000bf80 	.word	0x0000bf80

080074c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80074c8:	4b09      	ldr	r3, [pc, #36]	; (80074f0 <USB_DisableGlobalInt+0x30>)
 80074ca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2240      	movs	r2, #64	; 0x40
 80074d0:	5a9b      	ldrh	r3, [r3, r2]
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	b292      	uxth	r2, r2
 80074d8:	43d2      	mvns	r2, r2
 80074da:	b292      	uxth	r2, r2
 80074dc:	4013      	ands	r3, r2
 80074de:	b299      	uxth	r1, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2240      	movs	r2, #64	; 0x40
 80074e4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	0018      	movs	r0, r3
 80074ea:	46bd      	mov	sp, r7
 80074ec:	b004      	add	sp, #16
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	0000bf80 	.word	0x0000bf80

080074f4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80074f4:	b084      	sub	sp, #16
 80074f6:	b590      	push	{r4, r7, lr}
 80074f8:	46c6      	mov	lr, r8
 80074fa:	b500      	push	{lr}
 80074fc:	b082      	sub	sp, #8
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
 8007502:	2004      	movs	r0, #4
 8007504:	2410      	movs	r4, #16
 8007506:	46a4      	mov	ip, r4
 8007508:	2408      	movs	r4, #8
 800750a:	46a0      	mov	r8, r4
 800750c:	44b8      	add	r8, r7
 800750e:	44c4      	add	ip, r8
 8007510:	4460      	add	r0, ip
 8007512:	6001      	str	r1, [r0, #0]
 8007514:	6042      	str	r2, [r0, #4]
 8007516:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2240      	movs	r2, #64	; 0x40
 800751c:	2101      	movs	r1, #1
 800751e:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2240      	movs	r2, #64	; 0x40
 8007524:	2100      	movs	r1, #0
 8007526:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2244      	movs	r2, #68	; 0x44
 800752c:	2100      	movs	r1, #0
 800752e:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2250      	movs	r2, #80	; 0x50
 8007534:	2100      	movs	r1, #0
 8007536:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	0018      	movs	r0, r3
 800753c:	46bd      	mov	sp, r7
 800753e:	b002      	add	sp, #8
 8007540:	bc80      	pop	{r7}
 8007542:	46b8      	mov	r8, r7
 8007544:	bc90      	pop	{r4, r7}
 8007546:	bc08      	pop	{r3}
 8007548:	b004      	add	sp, #16
 800754a:	4718      	bx	r3

0800754c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b09c      	sub	sp, #112	; 0x70
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007556:	236f      	movs	r3, #111	; 0x6f
 8007558:	18fb      	adds	r3, r7, r3
 800755a:	2200      	movs	r2, #0
 800755c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	18d3      	adds	r3, r2, r3
 8007568:	881b      	ldrh	r3, [r3, #0]
 800756a:	b29a      	uxth	r2, r3
 800756c:	236c      	movs	r3, #108	; 0x6c
 800756e:	18fb      	adds	r3, r7, r3
 8007570:	49cf      	ldr	r1, [pc, #828]	; (80078b0 <USB_ActivateEndpoint+0x364>)
 8007572:	400a      	ands	r2, r1
 8007574:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	78db      	ldrb	r3, [r3, #3]
 800757a:	2b03      	cmp	r3, #3
 800757c:	d017      	beq.n	80075ae <USB_ActivateEndpoint+0x62>
 800757e:	dc28      	bgt.n	80075d2 <USB_ActivateEndpoint+0x86>
 8007580:	2b02      	cmp	r3, #2
 8007582:	d00e      	beq.n	80075a2 <USB_ActivateEndpoint+0x56>
 8007584:	dc25      	bgt.n	80075d2 <USB_ActivateEndpoint+0x86>
 8007586:	2b00      	cmp	r3, #0
 8007588:	d002      	beq.n	8007590 <USB_ActivateEndpoint+0x44>
 800758a:	2b01      	cmp	r3, #1
 800758c:	d018      	beq.n	80075c0 <USB_ActivateEndpoint+0x74>
 800758e:	e020      	b.n	80075d2 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007590:	226c      	movs	r2, #108	; 0x6c
 8007592:	18bb      	adds	r3, r7, r2
 8007594:	18ba      	adds	r2, r7, r2
 8007596:	8812      	ldrh	r2, [r2, #0]
 8007598:	2180      	movs	r1, #128	; 0x80
 800759a:	0089      	lsls	r1, r1, #2
 800759c:	430a      	orrs	r2, r1
 800759e:	801a      	strh	r2, [r3, #0]
      break;
 80075a0:	e01c      	b.n	80075dc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80075a2:	226c      	movs	r2, #108	; 0x6c
 80075a4:	18bb      	adds	r3, r7, r2
 80075a6:	18ba      	adds	r2, r7, r2
 80075a8:	8812      	ldrh	r2, [r2, #0]
 80075aa:	801a      	strh	r2, [r3, #0]
      break;
 80075ac:	e016      	b.n	80075dc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80075ae:	226c      	movs	r2, #108	; 0x6c
 80075b0:	18bb      	adds	r3, r7, r2
 80075b2:	18ba      	adds	r2, r7, r2
 80075b4:	8812      	ldrh	r2, [r2, #0]
 80075b6:	21c0      	movs	r1, #192	; 0xc0
 80075b8:	00c9      	lsls	r1, r1, #3
 80075ba:	430a      	orrs	r2, r1
 80075bc:	801a      	strh	r2, [r3, #0]
      break;
 80075be:	e00d      	b.n	80075dc <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80075c0:	226c      	movs	r2, #108	; 0x6c
 80075c2:	18bb      	adds	r3, r7, r2
 80075c4:	18ba      	adds	r2, r7, r2
 80075c6:	8812      	ldrh	r2, [r2, #0]
 80075c8:	2180      	movs	r1, #128	; 0x80
 80075ca:	00c9      	lsls	r1, r1, #3
 80075cc:	430a      	orrs	r2, r1
 80075ce:	801a      	strh	r2, [r3, #0]
      break;
 80075d0:	e004      	b.n	80075dc <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80075d2:	236f      	movs	r3, #111	; 0x6f
 80075d4:	18fb      	adds	r3, r7, r3
 80075d6:	2201      	movs	r2, #1
 80075d8:	701a      	strb	r2, [r3, #0]
      break;
 80075da:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	18d3      	adds	r3, r2, r3
 80075e6:	226c      	movs	r2, #108	; 0x6c
 80075e8:	18ba      	adds	r2, r7, r2
 80075ea:	8812      	ldrh	r2, [r2, #0]
 80075ec:	49b1      	ldr	r1, [pc, #708]	; (80078b4 <USB_ActivateEndpoint+0x368>)
 80075ee:	430a      	orrs	r2, r1
 80075f0:	b292      	uxth	r2, r2
 80075f2:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	18d3      	adds	r3, r2, r3
 80075fe:	881b      	ldrh	r3, [r3, #0]
 8007600:	b29b      	uxth	r3, r3
 8007602:	b21b      	sxth	r3, r3
 8007604:	4aac      	ldr	r2, [pc, #688]	; (80078b8 <USB_ActivateEndpoint+0x36c>)
 8007606:	4013      	ands	r3, r2
 8007608:	b21a      	sxth	r2, r3
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	b21b      	sxth	r3, r3
 8007610:	4313      	orrs	r3, r2
 8007612:	b21a      	sxth	r2, r3
 8007614:	2166      	movs	r1, #102	; 0x66
 8007616:	187b      	adds	r3, r7, r1
 8007618:	801a      	strh	r2, [r3, #0]
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	18d3      	adds	r3, r2, r3
 8007624:	187a      	adds	r2, r7, r1
 8007626:	8812      	ldrh	r2, [r2, #0]
 8007628:	49a2      	ldr	r1, [pc, #648]	; (80078b4 <USB_ActivateEndpoint+0x368>)
 800762a:	430a      	orrs	r2, r1
 800762c:	b292      	uxth	r2, r2
 800762e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	7b1b      	ldrb	r3, [r3, #12]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d000      	beq.n	800763a <USB_ActivateEndpoint+0xee>
 8007638:	e150      	b.n	80078dc <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	785b      	ldrb	r3, [r3, #1]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d100      	bne.n	8007644 <USB_ActivateEndpoint+0xf8>
 8007642:	e07a      	b.n	800773a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	61bb      	str	r3, [r7, #24]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2250      	movs	r2, #80	; 0x50
 800764c:	5a9b      	ldrh	r3, [r3, r2]
 800764e:	b29b      	uxth	r3, r3
 8007650:	001a      	movs	r2, r3
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	189b      	adds	r3, r3, r2
 8007656:	61bb      	str	r3, [r7, #24]
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	00da      	lsls	r2, r3, #3
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	18d3      	adds	r3, r2, r3
 8007662:	2280      	movs	r2, #128	; 0x80
 8007664:	00d2      	lsls	r2, r2, #3
 8007666:	4694      	mov	ip, r2
 8007668:	4463      	add	r3, ip
 800766a:	617b      	str	r3, [r7, #20]
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	88db      	ldrh	r3, [r3, #6]
 8007670:	085b      	lsrs	r3, r3, #1
 8007672:	b29b      	uxth	r3, r3
 8007674:	18db      	adds	r3, r3, r3
 8007676:	b29a      	uxth	r2, r3
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	18d2      	adds	r2, r2, r3
 8007686:	2112      	movs	r1, #18
 8007688:	187b      	adds	r3, r7, r1
 800768a:	8812      	ldrh	r2, [r2, #0]
 800768c:	801a      	strh	r2, [r3, #0]
 800768e:	187b      	adds	r3, r7, r1
 8007690:	881b      	ldrh	r3, [r3, #0]
 8007692:	2240      	movs	r2, #64	; 0x40
 8007694:	4013      	ands	r3, r2
 8007696:	d016      	beq.n	80076c6 <USB_ActivateEndpoint+0x17a>
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	18d3      	adds	r3, r2, r3
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	2010      	movs	r0, #16
 80076a8:	183b      	adds	r3, r7, r0
 80076aa:	4983      	ldr	r1, [pc, #524]	; (80078b8 <USB_ActivateEndpoint+0x36c>)
 80076ac:	400a      	ands	r2, r1
 80076ae:	801a      	strh	r2, [r3, #0]
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	18d3      	adds	r3, r2, r3
 80076ba:	183a      	adds	r2, r7, r0
 80076bc:	8812      	ldrh	r2, [r2, #0]
 80076be:	497f      	ldr	r1, [pc, #508]	; (80078bc <USB_ActivateEndpoint+0x370>)
 80076c0:	430a      	orrs	r2, r1
 80076c2:	b292      	uxth	r2, r2
 80076c4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	78db      	ldrb	r3, [r3, #3]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d01d      	beq.n	800770a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	18d3      	adds	r3, r2, r3
 80076d8:	881b      	ldrh	r3, [r3, #0]
 80076da:	b29a      	uxth	r2, r3
 80076dc:	200c      	movs	r0, #12
 80076de:	183b      	adds	r3, r7, r0
 80076e0:	4977      	ldr	r1, [pc, #476]	; (80078c0 <USB_ActivateEndpoint+0x374>)
 80076e2:	400a      	ands	r2, r1
 80076e4:	801a      	strh	r2, [r3, #0]
 80076e6:	183b      	adds	r3, r7, r0
 80076e8:	183a      	adds	r2, r7, r0
 80076ea:	8812      	ldrh	r2, [r2, #0]
 80076ec:	2120      	movs	r1, #32
 80076ee:	404a      	eors	r2, r1
 80076f0:	801a      	strh	r2, [r3, #0]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	18d3      	adds	r3, r2, r3
 80076fc:	183a      	adds	r2, r7, r0
 80076fe:	8812      	ldrh	r2, [r2, #0]
 8007700:	496c      	ldr	r1, [pc, #432]	; (80078b4 <USB_ActivateEndpoint+0x368>)
 8007702:	430a      	orrs	r2, r1
 8007704:	b292      	uxth	r2, r2
 8007706:	801a      	strh	r2, [r3, #0]
 8007708:	e27a      	b.n	8007c00 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	18d3      	adds	r3, r2, r3
 8007714:	881b      	ldrh	r3, [r3, #0]
 8007716:	b29a      	uxth	r2, r3
 8007718:	200e      	movs	r0, #14
 800771a:	183b      	adds	r3, r7, r0
 800771c:	4968      	ldr	r1, [pc, #416]	; (80078c0 <USB_ActivateEndpoint+0x374>)
 800771e:	400a      	ands	r2, r1
 8007720:	801a      	strh	r2, [r3, #0]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	18d3      	adds	r3, r2, r3
 800772c:	183a      	adds	r2, r7, r0
 800772e:	8812      	ldrh	r2, [r2, #0]
 8007730:	4960      	ldr	r1, [pc, #384]	; (80078b4 <USB_ActivateEndpoint+0x368>)
 8007732:	430a      	orrs	r2, r1
 8007734:	b292      	uxth	r2, r2
 8007736:	801a      	strh	r2, [r3, #0]
 8007738:	e262      	b.n	8007c00 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	633b      	str	r3, [r7, #48]	; 0x30
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2250      	movs	r2, #80	; 0x50
 8007742:	5a9b      	ldrh	r3, [r3, r2]
 8007744:	b29b      	uxth	r3, r3
 8007746:	001a      	movs	r2, r3
 8007748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774a:	189b      	adds	r3, r3, r2
 800774c:	633b      	str	r3, [r7, #48]	; 0x30
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	00da      	lsls	r2, r3, #3
 8007754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007756:	18d3      	adds	r3, r2, r3
 8007758:	4a5a      	ldr	r2, [pc, #360]	; (80078c4 <USB_ActivateEndpoint+0x378>)
 800775a:	4694      	mov	ip, r2
 800775c:	4463      	add	r3, ip
 800775e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	88db      	ldrh	r3, [r3, #6]
 8007764:	085b      	lsrs	r3, r3, #1
 8007766:	b29b      	uxth	r3, r3
 8007768:	18db      	adds	r3, r3, r3
 800776a:	b29a      	uxth	r2, r3
 800776c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	62bb      	str	r3, [r7, #40]	; 0x28
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2250      	movs	r2, #80	; 0x50
 8007778:	5a9b      	ldrh	r3, [r3, r2]
 800777a:	b29b      	uxth	r3, r3
 800777c:	001a      	movs	r2, r3
 800777e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007780:	189b      	adds	r3, r3, r2
 8007782:	62bb      	str	r3, [r7, #40]	; 0x28
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	00da      	lsls	r2, r3, #3
 800778a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778c:	18d3      	adds	r3, r2, r3
 800778e:	4a4e      	ldr	r2, [pc, #312]	; (80078c8 <USB_ActivateEndpoint+0x37c>)
 8007790:	4694      	mov	ip, r2
 8007792:	4463      	add	r3, ip
 8007794:	627b      	str	r3, [r7, #36]	; 0x24
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d110      	bne.n	80077c0 <USB_ActivateEndpoint+0x274>
 800779e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	4a49      	ldr	r2, [pc, #292]	; (80078cc <USB_ActivateEndpoint+0x380>)
 80077a6:	4013      	ands	r3, r2
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ac:	801a      	strh	r2, [r3, #0]
 80077ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	4a46      	ldr	r2, [pc, #280]	; (80078d0 <USB_ActivateEndpoint+0x384>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	801a      	strh	r2, [r3, #0]
 80077be:	e02b      	b.n	8007818 <USB_ActivateEndpoint+0x2cc>
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	2b3e      	cmp	r3, #62	; 0x3e
 80077c6:	d812      	bhi.n	80077ee <USB_ActivateEndpoint+0x2a2>
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	085b      	lsrs	r3, r3, #1
 80077ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	2201      	movs	r2, #1
 80077d6:	4013      	ands	r3, r2
 80077d8:	d002      	beq.n	80077e0 <USB_ActivateEndpoint+0x294>
 80077da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077dc:	3301      	adds	r3, #1
 80077de:	66bb      	str	r3, [r7, #104]	; 0x68
 80077e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	029b      	lsls	r3, r3, #10
 80077e6:	b29a      	uxth	r2, r3
 80077e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ea:	801a      	strh	r2, [r3, #0]
 80077ec:	e014      	b.n	8007818 <USB_ActivateEndpoint+0x2cc>
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	095b      	lsrs	r3, r3, #5
 80077f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	221f      	movs	r2, #31
 80077fc:	4013      	ands	r3, r2
 80077fe:	d102      	bne.n	8007806 <USB_ActivateEndpoint+0x2ba>
 8007800:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007802:	3b01      	subs	r3, #1
 8007804:	66bb      	str	r3, [r7, #104]	; 0x68
 8007806:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007808:	b29b      	uxth	r3, r3
 800780a:	029b      	lsls	r3, r3, #10
 800780c:	b29b      	uxth	r3, r3
 800780e:	4a30      	ldr	r2, [pc, #192]	; (80078d0 <USB_ActivateEndpoint+0x384>)
 8007810:	4313      	orrs	r3, r2
 8007812:	b29a      	uxth	r2, r3
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	18d2      	adds	r2, r2, r3
 8007822:	2122      	movs	r1, #34	; 0x22
 8007824:	187b      	adds	r3, r7, r1
 8007826:	8812      	ldrh	r2, [r2, #0]
 8007828:	801a      	strh	r2, [r3, #0]
 800782a:	187b      	adds	r3, r7, r1
 800782c:	881a      	ldrh	r2, [r3, #0]
 800782e:	2380      	movs	r3, #128	; 0x80
 8007830:	01db      	lsls	r3, r3, #7
 8007832:	4013      	ands	r3, r2
 8007834:	d016      	beq.n	8007864 <USB_ActivateEndpoint+0x318>
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	18d3      	adds	r3, r2, r3
 8007840:	881b      	ldrh	r3, [r3, #0]
 8007842:	b29a      	uxth	r2, r3
 8007844:	2020      	movs	r0, #32
 8007846:	183b      	adds	r3, r7, r0
 8007848:	491b      	ldr	r1, [pc, #108]	; (80078b8 <USB_ActivateEndpoint+0x36c>)
 800784a:	400a      	ands	r2, r1
 800784c:	801a      	strh	r2, [r3, #0]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	18d3      	adds	r3, r2, r3
 8007858:	183a      	adds	r2, r7, r0
 800785a:	8812      	ldrh	r2, [r2, #0]
 800785c:	491d      	ldr	r1, [pc, #116]	; (80078d4 <USB_ActivateEndpoint+0x388>)
 800785e:	430a      	orrs	r2, r1
 8007860:	b292      	uxth	r2, r2
 8007862:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	18d3      	adds	r3, r2, r3
 800786e:	881b      	ldrh	r3, [r3, #0]
 8007870:	b29a      	uxth	r2, r3
 8007872:	201e      	movs	r0, #30
 8007874:	183b      	adds	r3, r7, r0
 8007876:	4918      	ldr	r1, [pc, #96]	; (80078d8 <USB_ActivateEndpoint+0x38c>)
 8007878:	400a      	ands	r2, r1
 800787a:	801a      	strh	r2, [r3, #0]
 800787c:	183b      	adds	r3, r7, r0
 800787e:	183a      	adds	r2, r7, r0
 8007880:	8812      	ldrh	r2, [r2, #0]
 8007882:	2180      	movs	r1, #128	; 0x80
 8007884:	0149      	lsls	r1, r1, #5
 8007886:	404a      	eors	r2, r1
 8007888:	801a      	strh	r2, [r3, #0]
 800788a:	183b      	adds	r3, r7, r0
 800788c:	183a      	adds	r2, r7, r0
 800788e:	8812      	ldrh	r2, [r2, #0]
 8007890:	2180      	movs	r1, #128	; 0x80
 8007892:	0189      	lsls	r1, r1, #6
 8007894:	404a      	eors	r2, r1
 8007896:	801a      	strh	r2, [r3, #0]
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	18d3      	adds	r3, r2, r3
 80078a2:	183a      	adds	r2, r7, r0
 80078a4:	8812      	ldrh	r2, [r2, #0]
 80078a6:	4903      	ldr	r1, [pc, #12]	; (80078b4 <USB_ActivateEndpoint+0x368>)
 80078a8:	430a      	orrs	r2, r1
 80078aa:	b292      	uxth	r2, r2
 80078ac:	801a      	strh	r2, [r3, #0]
 80078ae:	e1a7      	b.n	8007c00 <USB_ActivateEndpoint+0x6b4>
 80078b0:	ffff898f 	.word	0xffff898f
 80078b4:	ffff8080 	.word	0xffff8080
 80078b8:	ffff8f8f 	.word	0xffff8f8f
 80078bc:	ffff80c0 	.word	0xffff80c0
 80078c0:	ffff8fbf 	.word	0xffff8fbf
 80078c4:	00000404 	.word	0x00000404
 80078c8:	00000406 	.word	0x00000406
 80078cc:	ffff83ff 	.word	0xffff83ff
 80078d0:	ffff8000 	.word	0xffff8000
 80078d4:	ffffc080 	.word	0xffffc080
 80078d8:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	78db      	ldrb	r3, [r3, #3]
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d117      	bne.n	8007914 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	18d3      	adds	r3, r2, r3
 80078ee:	881b      	ldrh	r3, [r3, #0]
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	2062      	movs	r0, #98	; 0x62
 80078f4:	183b      	adds	r3, r7, r0
 80078f6:	49c6      	ldr	r1, [pc, #792]	; (8007c10 <USB_ActivateEndpoint+0x6c4>)
 80078f8:	400a      	ands	r2, r1
 80078fa:	801a      	strh	r2, [r3, #0]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	009b      	lsls	r3, r3, #2
 8007904:	18d3      	adds	r3, r2, r3
 8007906:	183a      	adds	r2, r7, r0
 8007908:	8812      	ldrh	r2, [r2, #0]
 800790a:	49c2      	ldr	r1, [pc, #776]	; (8007c14 <USB_ActivateEndpoint+0x6c8>)
 800790c:	430a      	orrs	r2, r1
 800790e:	b292      	uxth	r2, r2
 8007910:	801a      	strh	r2, [r3, #0]
 8007912:	e016      	b.n	8007942 <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	18d3      	adds	r3, r2, r3
 800791e:	881b      	ldrh	r3, [r3, #0]
 8007920:	b29a      	uxth	r2, r3
 8007922:	2064      	movs	r0, #100	; 0x64
 8007924:	183b      	adds	r3, r7, r0
 8007926:	49bc      	ldr	r1, [pc, #752]	; (8007c18 <USB_ActivateEndpoint+0x6cc>)
 8007928:	400a      	ands	r2, r1
 800792a:	801a      	strh	r2, [r3, #0]
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	18d3      	adds	r3, r2, r3
 8007936:	183a      	adds	r2, r7, r0
 8007938:	8812      	ldrh	r2, [r2, #0]
 800793a:	49b8      	ldr	r1, [pc, #736]	; (8007c1c <USB_ActivateEndpoint+0x6d0>)
 800793c:	430a      	orrs	r2, r1
 800793e:	b292      	uxth	r2, r2
 8007940:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2250      	movs	r2, #80	; 0x50
 800794a:	5a9b      	ldrh	r3, [r3, r2]
 800794c:	b29b      	uxth	r3, r3
 800794e:	001a      	movs	r2, r3
 8007950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007952:	189b      	adds	r3, r3, r2
 8007954:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	00da      	lsls	r2, r3, #3
 800795c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800795e:	18d3      	adds	r3, r2, r3
 8007960:	2280      	movs	r2, #128	; 0x80
 8007962:	00d2      	lsls	r2, r2, #3
 8007964:	4694      	mov	ip, r2
 8007966:	4463      	add	r3, ip
 8007968:	65bb      	str	r3, [r7, #88]	; 0x58
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	891b      	ldrh	r3, [r3, #8]
 800796e:	085b      	lsrs	r3, r3, #1
 8007970:	b29b      	uxth	r3, r3
 8007972:	18db      	adds	r3, r3, r3
 8007974:	b29a      	uxth	r2, r3
 8007976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007978:	801a      	strh	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	657b      	str	r3, [r7, #84]	; 0x54
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2250      	movs	r2, #80	; 0x50
 8007982:	5a9b      	ldrh	r3, [r3, r2]
 8007984:	b29b      	uxth	r3, r3
 8007986:	001a      	movs	r2, r3
 8007988:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800798a:	189b      	adds	r3, r3, r2
 800798c:	657b      	str	r3, [r7, #84]	; 0x54
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	00da      	lsls	r2, r3, #3
 8007994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007996:	18d3      	adds	r3, r2, r3
 8007998:	4aa1      	ldr	r2, [pc, #644]	; (8007c20 <USB_ActivateEndpoint+0x6d4>)
 800799a:	4694      	mov	ip, r2
 800799c:	4463      	add	r3, ip
 800799e:	653b      	str	r3, [r7, #80]	; 0x50
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	895b      	ldrh	r3, [r3, #10]
 80079a4:	085b      	lsrs	r3, r3, #1
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	18db      	adds	r3, r3, r3
 80079aa:	b29a      	uxth	r2, r3
 80079ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	785b      	ldrb	r3, [r3, #1]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d000      	beq.n	80079ba <USB_ActivateEndpoint+0x46e>
 80079b8:	e087      	b.n	8007aca <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	18d2      	adds	r2, r2, r3
 80079c4:	2140      	movs	r1, #64	; 0x40
 80079c6:	187b      	adds	r3, r7, r1
 80079c8:	8812      	ldrh	r2, [r2, #0]
 80079ca:	801a      	strh	r2, [r3, #0]
 80079cc:	187b      	adds	r3, r7, r1
 80079ce:	881a      	ldrh	r2, [r3, #0]
 80079d0:	2380      	movs	r3, #128	; 0x80
 80079d2:	01db      	lsls	r3, r3, #7
 80079d4:	4013      	ands	r3, r2
 80079d6:	d016      	beq.n	8007a06 <USB_ActivateEndpoint+0x4ba>
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	18d3      	adds	r3, r2, r3
 80079e2:	881b      	ldrh	r3, [r3, #0]
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	203e      	movs	r0, #62	; 0x3e
 80079e8:	183b      	adds	r3, r7, r0
 80079ea:	4989      	ldr	r1, [pc, #548]	; (8007c10 <USB_ActivateEndpoint+0x6c4>)
 80079ec:	400a      	ands	r2, r1
 80079ee:	801a      	strh	r2, [r3, #0]
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	18d3      	adds	r3, r2, r3
 80079fa:	183a      	adds	r2, r7, r0
 80079fc:	8812      	ldrh	r2, [r2, #0]
 80079fe:	4989      	ldr	r1, [pc, #548]	; (8007c24 <USB_ActivateEndpoint+0x6d8>)
 8007a00:	430a      	orrs	r2, r1
 8007a02:	b292      	uxth	r2, r2
 8007a04:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	18d2      	adds	r2, r2, r3
 8007a10:	213c      	movs	r1, #60	; 0x3c
 8007a12:	187b      	adds	r3, r7, r1
 8007a14:	8812      	ldrh	r2, [r2, #0]
 8007a16:	801a      	strh	r2, [r3, #0]
 8007a18:	187b      	adds	r3, r7, r1
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	2240      	movs	r2, #64	; 0x40
 8007a1e:	4013      	ands	r3, r2
 8007a20:	d016      	beq.n	8007a50 <USB_ActivateEndpoint+0x504>
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	18d3      	adds	r3, r2, r3
 8007a2c:	881b      	ldrh	r3, [r3, #0]
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	203a      	movs	r0, #58	; 0x3a
 8007a32:	183b      	adds	r3, r7, r0
 8007a34:	4976      	ldr	r1, [pc, #472]	; (8007c10 <USB_ActivateEndpoint+0x6c4>)
 8007a36:	400a      	ands	r2, r1
 8007a38:	801a      	strh	r2, [r3, #0]
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	18d3      	adds	r3, r2, r3
 8007a44:	183a      	adds	r2, r7, r0
 8007a46:	8812      	ldrh	r2, [r2, #0]
 8007a48:	4977      	ldr	r1, [pc, #476]	; (8007c28 <USB_ActivateEndpoint+0x6dc>)
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	b292      	uxth	r2, r2
 8007a4e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	18d3      	adds	r3, r2, r3
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	2038      	movs	r0, #56	; 0x38
 8007a60:	183b      	adds	r3, r7, r0
 8007a62:	4972      	ldr	r1, [pc, #456]	; (8007c2c <USB_ActivateEndpoint+0x6e0>)
 8007a64:	400a      	ands	r2, r1
 8007a66:	801a      	strh	r2, [r3, #0]
 8007a68:	183b      	adds	r3, r7, r0
 8007a6a:	183a      	adds	r2, r7, r0
 8007a6c:	8812      	ldrh	r2, [r2, #0]
 8007a6e:	2180      	movs	r1, #128	; 0x80
 8007a70:	0149      	lsls	r1, r1, #5
 8007a72:	404a      	eors	r2, r1
 8007a74:	801a      	strh	r2, [r3, #0]
 8007a76:	183b      	adds	r3, r7, r0
 8007a78:	183a      	adds	r2, r7, r0
 8007a7a:	8812      	ldrh	r2, [r2, #0]
 8007a7c:	2180      	movs	r1, #128	; 0x80
 8007a7e:	0189      	lsls	r1, r1, #6
 8007a80:	404a      	eors	r2, r1
 8007a82:	801a      	strh	r2, [r3, #0]
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	18d3      	adds	r3, r2, r3
 8007a8e:	183a      	adds	r2, r7, r0
 8007a90:	8812      	ldrh	r2, [r2, #0]
 8007a92:	4962      	ldr	r1, [pc, #392]	; (8007c1c <USB_ActivateEndpoint+0x6d0>)
 8007a94:	430a      	orrs	r2, r1
 8007a96:	b292      	uxth	r2, r2
 8007a98:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	18d3      	adds	r3, r2, r3
 8007aa4:	881b      	ldrh	r3, [r3, #0]
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	2036      	movs	r0, #54	; 0x36
 8007aaa:	183b      	adds	r3, r7, r0
 8007aac:	4960      	ldr	r1, [pc, #384]	; (8007c30 <USB_ActivateEndpoint+0x6e4>)
 8007aae:	400a      	ands	r2, r1
 8007ab0:	801a      	strh	r2, [r3, #0]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	18d3      	adds	r3, r2, r3
 8007abc:	183a      	adds	r2, r7, r0
 8007abe:	8812      	ldrh	r2, [r2, #0]
 8007ac0:	4956      	ldr	r1, [pc, #344]	; (8007c1c <USB_ActivateEndpoint+0x6d0>)
 8007ac2:	430a      	orrs	r2, r1
 8007ac4:	b292      	uxth	r2, r2
 8007ac6:	801a      	strh	r2, [r3, #0]
 8007ac8:	e09a      	b.n	8007c00 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	18d2      	adds	r2, r2, r3
 8007ad4:	214e      	movs	r1, #78	; 0x4e
 8007ad6:	187b      	adds	r3, r7, r1
 8007ad8:	8812      	ldrh	r2, [r2, #0]
 8007ada:	801a      	strh	r2, [r3, #0]
 8007adc:	187b      	adds	r3, r7, r1
 8007ade:	881a      	ldrh	r2, [r3, #0]
 8007ae0:	2380      	movs	r3, #128	; 0x80
 8007ae2:	01db      	lsls	r3, r3, #7
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	d016      	beq.n	8007b16 <USB_ActivateEndpoint+0x5ca>
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	18d3      	adds	r3, r2, r3
 8007af2:	881b      	ldrh	r3, [r3, #0]
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	204c      	movs	r0, #76	; 0x4c
 8007af8:	183b      	adds	r3, r7, r0
 8007afa:	4945      	ldr	r1, [pc, #276]	; (8007c10 <USB_ActivateEndpoint+0x6c4>)
 8007afc:	400a      	ands	r2, r1
 8007afe:	801a      	strh	r2, [r3, #0]
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	18d3      	adds	r3, r2, r3
 8007b0a:	183a      	adds	r2, r7, r0
 8007b0c:	8812      	ldrh	r2, [r2, #0]
 8007b0e:	4945      	ldr	r1, [pc, #276]	; (8007c24 <USB_ActivateEndpoint+0x6d8>)
 8007b10:	430a      	orrs	r2, r1
 8007b12:	b292      	uxth	r2, r2
 8007b14:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	18d2      	adds	r2, r2, r3
 8007b20:	214a      	movs	r1, #74	; 0x4a
 8007b22:	187b      	adds	r3, r7, r1
 8007b24:	8812      	ldrh	r2, [r2, #0]
 8007b26:	801a      	strh	r2, [r3, #0]
 8007b28:	187b      	adds	r3, r7, r1
 8007b2a:	881b      	ldrh	r3, [r3, #0]
 8007b2c:	2240      	movs	r2, #64	; 0x40
 8007b2e:	4013      	ands	r3, r2
 8007b30:	d016      	beq.n	8007b60 <USB_ActivateEndpoint+0x614>
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	18d3      	adds	r3, r2, r3
 8007b3c:	881b      	ldrh	r3, [r3, #0]
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	2048      	movs	r0, #72	; 0x48
 8007b42:	183b      	adds	r3, r7, r0
 8007b44:	4932      	ldr	r1, [pc, #200]	; (8007c10 <USB_ActivateEndpoint+0x6c4>)
 8007b46:	400a      	ands	r2, r1
 8007b48:	801a      	strh	r2, [r3, #0]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	18d3      	adds	r3, r2, r3
 8007b54:	183a      	adds	r2, r7, r0
 8007b56:	8812      	ldrh	r2, [r2, #0]
 8007b58:	4933      	ldr	r1, [pc, #204]	; (8007c28 <USB_ActivateEndpoint+0x6dc>)
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	b292      	uxth	r2, r2
 8007b5e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	78db      	ldrb	r3, [r3, #3]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d01d      	beq.n	8007ba4 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	18d3      	adds	r3, r2, r3
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	2044      	movs	r0, #68	; 0x44
 8007b78:	183b      	adds	r3, r7, r0
 8007b7a:	492d      	ldr	r1, [pc, #180]	; (8007c30 <USB_ActivateEndpoint+0x6e4>)
 8007b7c:	400a      	ands	r2, r1
 8007b7e:	801a      	strh	r2, [r3, #0]
 8007b80:	183b      	adds	r3, r7, r0
 8007b82:	183a      	adds	r2, r7, r0
 8007b84:	8812      	ldrh	r2, [r2, #0]
 8007b86:	2120      	movs	r1, #32
 8007b88:	404a      	eors	r2, r1
 8007b8a:	801a      	strh	r2, [r3, #0]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	18d3      	adds	r3, r2, r3
 8007b96:	183a      	adds	r2, r7, r0
 8007b98:	8812      	ldrh	r2, [r2, #0]
 8007b9a:	4920      	ldr	r1, [pc, #128]	; (8007c1c <USB_ActivateEndpoint+0x6d0>)
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	b292      	uxth	r2, r2
 8007ba0:	801a      	strh	r2, [r3, #0]
 8007ba2:	e016      	b.n	8007bd2 <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	18d3      	adds	r3, r2, r3
 8007bae:	881b      	ldrh	r3, [r3, #0]
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	2046      	movs	r0, #70	; 0x46
 8007bb4:	183b      	adds	r3, r7, r0
 8007bb6:	491e      	ldr	r1, [pc, #120]	; (8007c30 <USB_ActivateEndpoint+0x6e4>)
 8007bb8:	400a      	ands	r2, r1
 8007bba:	801a      	strh	r2, [r3, #0]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	18d3      	adds	r3, r2, r3
 8007bc6:	183a      	adds	r2, r7, r0
 8007bc8:	8812      	ldrh	r2, [r2, #0]
 8007bca:	4914      	ldr	r1, [pc, #80]	; (8007c1c <USB_ActivateEndpoint+0x6d0>)
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	b292      	uxth	r2, r2
 8007bd0:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	18d3      	adds	r3, r2, r3
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	b29a      	uxth	r2, r3
 8007be0:	2042      	movs	r0, #66	; 0x42
 8007be2:	183b      	adds	r3, r7, r0
 8007be4:	4911      	ldr	r1, [pc, #68]	; (8007c2c <USB_ActivateEndpoint+0x6e0>)
 8007be6:	400a      	ands	r2, r1
 8007be8:	801a      	strh	r2, [r3, #0]
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	18d3      	adds	r3, r2, r3
 8007bf4:	183a      	adds	r2, r7, r0
 8007bf6:	8812      	ldrh	r2, [r2, #0]
 8007bf8:	4908      	ldr	r1, [pc, #32]	; (8007c1c <USB_ActivateEndpoint+0x6d0>)
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	b292      	uxth	r2, r2
 8007bfe:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8007c00:	236f      	movs	r3, #111	; 0x6f
 8007c02:	18fb      	adds	r3, r7, r3
 8007c04:	781b      	ldrb	r3, [r3, #0]
}
 8007c06:	0018      	movs	r0, r3
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	b01c      	add	sp, #112	; 0x70
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	46c0      	nop			; (mov r8, r8)
 8007c10:	ffff8f8f 	.word	0xffff8f8f
 8007c14:	ffff8180 	.word	0xffff8180
 8007c18:	ffff8e8f 	.word	0xffff8e8f
 8007c1c:	ffff8080 	.word	0xffff8080
 8007c20:	00000404 	.word	0x00000404
 8007c24:	ffffc080 	.word	0xffffc080
 8007c28:	ffff80c0 	.word	0xffff80c0
 8007c2c:	ffffbf8f 	.word	0xffffbf8f
 8007c30:	ffff8fbf 	.word	0xffff8fbf

08007c34 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b08c      	sub	sp, #48	; 0x30
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	7b1b      	ldrb	r3, [r3, #12]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d000      	beq.n	8007c48 <USB_DeactivateEndpoint+0x14>
 8007c46:	e07e      	b.n	8007d46 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	785b      	ldrb	r3, [r3, #1]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d03c      	beq.n	8007cca <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	18d2      	adds	r2, r2, r3
 8007c5a:	210c      	movs	r1, #12
 8007c5c:	187b      	adds	r3, r7, r1
 8007c5e:	8812      	ldrh	r2, [r2, #0]
 8007c60:	801a      	strh	r2, [r3, #0]
 8007c62:	187b      	adds	r3, r7, r1
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	2240      	movs	r2, #64	; 0x40
 8007c68:	4013      	ands	r3, r2
 8007c6a:	d016      	beq.n	8007c9a <USB_DeactivateEndpoint+0x66>
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	18d3      	adds	r3, r2, r3
 8007c76:	881b      	ldrh	r3, [r3, #0]
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	200a      	movs	r0, #10
 8007c7c:	183b      	adds	r3, r7, r0
 8007c7e:	49c7      	ldr	r1, [pc, #796]	; (8007f9c <USB_DeactivateEndpoint+0x368>)
 8007c80:	400a      	ands	r2, r1
 8007c82:	801a      	strh	r2, [r3, #0]
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	18d3      	adds	r3, r2, r3
 8007c8e:	183a      	adds	r2, r7, r0
 8007c90:	8812      	ldrh	r2, [r2, #0]
 8007c92:	49c3      	ldr	r1, [pc, #780]	; (8007fa0 <USB_DeactivateEndpoint+0x36c>)
 8007c94:	430a      	orrs	r2, r1
 8007c96:	b292      	uxth	r2, r2
 8007c98:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	18d3      	adds	r3, r2, r3
 8007ca4:	881b      	ldrh	r3, [r3, #0]
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	2008      	movs	r0, #8
 8007caa:	183b      	adds	r3, r7, r0
 8007cac:	49bd      	ldr	r1, [pc, #756]	; (8007fa4 <USB_DeactivateEndpoint+0x370>)
 8007cae:	400a      	ands	r2, r1
 8007cb0:	801a      	strh	r2, [r3, #0]
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	18d3      	adds	r3, r2, r3
 8007cbc:	183a      	adds	r2, r7, r0
 8007cbe:	8812      	ldrh	r2, [r2, #0]
 8007cc0:	49b9      	ldr	r1, [pc, #740]	; (8007fa8 <USB_DeactivateEndpoint+0x374>)
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	b292      	uxth	r2, r2
 8007cc6:	801a      	strh	r2, [r3, #0]
 8007cc8:	e163      	b.n	8007f92 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	18d2      	adds	r2, r2, r3
 8007cd4:	2112      	movs	r1, #18
 8007cd6:	187b      	adds	r3, r7, r1
 8007cd8:	8812      	ldrh	r2, [r2, #0]
 8007cda:	801a      	strh	r2, [r3, #0]
 8007cdc:	187b      	adds	r3, r7, r1
 8007cde:	881a      	ldrh	r2, [r3, #0]
 8007ce0:	2380      	movs	r3, #128	; 0x80
 8007ce2:	01db      	lsls	r3, r3, #7
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	d016      	beq.n	8007d16 <USB_DeactivateEndpoint+0xe2>
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	18d3      	adds	r3, r2, r3
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	b29a      	uxth	r2, r3
 8007cf6:	2010      	movs	r0, #16
 8007cf8:	183b      	adds	r3, r7, r0
 8007cfa:	49a8      	ldr	r1, [pc, #672]	; (8007f9c <USB_DeactivateEndpoint+0x368>)
 8007cfc:	400a      	ands	r2, r1
 8007cfe:	801a      	strh	r2, [r3, #0]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	18d3      	adds	r3, r2, r3
 8007d0a:	183a      	adds	r2, r7, r0
 8007d0c:	8812      	ldrh	r2, [r2, #0]
 8007d0e:	49a7      	ldr	r1, [pc, #668]	; (8007fac <USB_DeactivateEndpoint+0x378>)
 8007d10:	430a      	orrs	r2, r1
 8007d12:	b292      	uxth	r2, r2
 8007d14:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	18d3      	adds	r3, r2, r3
 8007d20:	881b      	ldrh	r3, [r3, #0]
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	200e      	movs	r0, #14
 8007d26:	183b      	adds	r3, r7, r0
 8007d28:	49a1      	ldr	r1, [pc, #644]	; (8007fb0 <USB_DeactivateEndpoint+0x37c>)
 8007d2a:	400a      	ands	r2, r1
 8007d2c:	801a      	strh	r2, [r3, #0]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	18d3      	adds	r3, r2, r3
 8007d38:	183a      	adds	r2, r7, r0
 8007d3a:	8812      	ldrh	r2, [r2, #0]
 8007d3c:	499a      	ldr	r1, [pc, #616]	; (8007fa8 <USB_DeactivateEndpoint+0x374>)
 8007d3e:	430a      	orrs	r2, r1
 8007d40:	b292      	uxth	r2, r2
 8007d42:	801a      	strh	r2, [r3, #0]
 8007d44:	e125      	b.n	8007f92 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	785b      	ldrb	r3, [r3, #1]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d000      	beq.n	8007d50 <USB_DeactivateEndpoint+0x11c>
 8007d4e:	e090      	b.n	8007e72 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	18d2      	adds	r2, r2, r3
 8007d5a:	2120      	movs	r1, #32
 8007d5c:	187b      	adds	r3, r7, r1
 8007d5e:	8812      	ldrh	r2, [r2, #0]
 8007d60:	801a      	strh	r2, [r3, #0]
 8007d62:	187b      	adds	r3, r7, r1
 8007d64:	881a      	ldrh	r2, [r3, #0]
 8007d66:	2380      	movs	r3, #128	; 0x80
 8007d68:	01db      	lsls	r3, r3, #7
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	d016      	beq.n	8007d9c <USB_DeactivateEndpoint+0x168>
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	18d3      	adds	r3, r2, r3
 8007d78:	881b      	ldrh	r3, [r3, #0]
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	201e      	movs	r0, #30
 8007d7e:	183b      	adds	r3, r7, r0
 8007d80:	4986      	ldr	r1, [pc, #536]	; (8007f9c <USB_DeactivateEndpoint+0x368>)
 8007d82:	400a      	ands	r2, r1
 8007d84:	801a      	strh	r2, [r3, #0]
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	18d3      	adds	r3, r2, r3
 8007d90:	183a      	adds	r2, r7, r0
 8007d92:	8812      	ldrh	r2, [r2, #0]
 8007d94:	4985      	ldr	r1, [pc, #532]	; (8007fac <USB_DeactivateEndpoint+0x378>)
 8007d96:	430a      	orrs	r2, r1
 8007d98:	b292      	uxth	r2, r2
 8007d9a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	18d2      	adds	r2, r2, r3
 8007da6:	211c      	movs	r1, #28
 8007da8:	187b      	adds	r3, r7, r1
 8007daa:	8812      	ldrh	r2, [r2, #0]
 8007dac:	801a      	strh	r2, [r3, #0]
 8007dae:	187b      	adds	r3, r7, r1
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	2240      	movs	r2, #64	; 0x40
 8007db4:	4013      	ands	r3, r2
 8007db6:	d016      	beq.n	8007de6 <USB_DeactivateEndpoint+0x1b2>
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	18d3      	adds	r3, r2, r3
 8007dc2:	881b      	ldrh	r3, [r3, #0]
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	201a      	movs	r0, #26
 8007dc8:	183b      	adds	r3, r7, r0
 8007dca:	4974      	ldr	r1, [pc, #464]	; (8007f9c <USB_DeactivateEndpoint+0x368>)
 8007dcc:	400a      	ands	r2, r1
 8007dce:	801a      	strh	r2, [r3, #0]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	18d3      	adds	r3, r2, r3
 8007dda:	183a      	adds	r2, r7, r0
 8007ddc:	8812      	ldrh	r2, [r2, #0]
 8007dde:	4970      	ldr	r1, [pc, #448]	; (8007fa0 <USB_DeactivateEndpoint+0x36c>)
 8007de0:	430a      	orrs	r2, r1
 8007de2:	b292      	uxth	r2, r2
 8007de4:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	18d3      	adds	r3, r2, r3
 8007df0:	881b      	ldrh	r3, [r3, #0]
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	2018      	movs	r0, #24
 8007df6:	183b      	adds	r3, r7, r0
 8007df8:	4968      	ldr	r1, [pc, #416]	; (8007f9c <USB_DeactivateEndpoint+0x368>)
 8007dfa:	400a      	ands	r2, r1
 8007dfc:	801a      	strh	r2, [r3, #0]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	18d3      	adds	r3, r2, r3
 8007e08:	183a      	adds	r2, r7, r0
 8007e0a:	8812      	ldrh	r2, [r2, #0]
 8007e0c:	4964      	ldr	r1, [pc, #400]	; (8007fa0 <USB_DeactivateEndpoint+0x36c>)
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	b292      	uxth	r2, r2
 8007e12:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	18d3      	adds	r3, r2, r3
 8007e1e:	881b      	ldrh	r3, [r3, #0]
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	2016      	movs	r0, #22
 8007e24:	183b      	adds	r3, r7, r0
 8007e26:	4962      	ldr	r1, [pc, #392]	; (8007fb0 <USB_DeactivateEndpoint+0x37c>)
 8007e28:	400a      	ands	r2, r1
 8007e2a:	801a      	strh	r2, [r3, #0]
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	009b      	lsls	r3, r3, #2
 8007e34:	18d3      	adds	r3, r2, r3
 8007e36:	183a      	adds	r2, r7, r0
 8007e38:	8812      	ldrh	r2, [r2, #0]
 8007e3a:	495b      	ldr	r1, [pc, #364]	; (8007fa8 <USB_DeactivateEndpoint+0x374>)
 8007e3c:	430a      	orrs	r2, r1
 8007e3e:	b292      	uxth	r2, r2
 8007e40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	18d3      	adds	r3, r2, r3
 8007e4c:	881b      	ldrh	r3, [r3, #0]
 8007e4e:	b29a      	uxth	r2, r3
 8007e50:	2014      	movs	r0, #20
 8007e52:	183b      	adds	r3, r7, r0
 8007e54:	4953      	ldr	r1, [pc, #332]	; (8007fa4 <USB_DeactivateEndpoint+0x370>)
 8007e56:	400a      	ands	r2, r1
 8007e58:	801a      	strh	r2, [r3, #0]
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	18d3      	adds	r3, r2, r3
 8007e64:	183a      	adds	r2, r7, r0
 8007e66:	8812      	ldrh	r2, [r2, #0]
 8007e68:	494f      	ldr	r1, [pc, #316]	; (8007fa8 <USB_DeactivateEndpoint+0x374>)
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	b292      	uxth	r2, r2
 8007e6e:	801a      	strh	r2, [r3, #0]
 8007e70:	e08f      	b.n	8007f92 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	18d2      	adds	r2, r2, r3
 8007e7c:	212e      	movs	r1, #46	; 0x2e
 8007e7e:	187b      	adds	r3, r7, r1
 8007e80:	8812      	ldrh	r2, [r2, #0]
 8007e82:	801a      	strh	r2, [r3, #0]
 8007e84:	187b      	adds	r3, r7, r1
 8007e86:	881a      	ldrh	r2, [r3, #0]
 8007e88:	2380      	movs	r3, #128	; 0x80
 8007e8a:	01db      	lsls	r3, r3, #7
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	d016      	beq.n	8007ebe <USB_DeactivateEndpoint+0x28a>
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	18d3      	adds	r3, r2, r3
 8007e9a:	881b      	ldrh	r3, [r3, #0]
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	202c      	movs	r0, #44	; 0x2c
 8007ea0:	183b      	adds	r3, r7, r0
 8007ea2:	493e      	ldr	r1, [pc, #248]	; (8007f9c <USB_DeactivateEndpoint+0x368>)
 8007ea4:	400a      	ands	r2, r1
 8007ea6:	801a      	strh	r2, [r3, #0]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	18d3      	adds	r3, r2, r3
 8007eb2:	183a      	adds	r2, r7, r0
 8007eb4:	8812      	ldrh	r2, [r2, #0]
 8007eb6:	493d      	ldr	r1, [pc, #244]	; (8007fac <USB_DeactivateEndpoint+0x378>)
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	b292      	uxth	r2, r2
 8007ebc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	18d2      	adds	r2, r2, r3
 8007ec8:	212a      	movs	r1, #42	; 0x2a
 8007eca:	187b      	adds	r3, r7, r1
 8007ecc:	8812      	ldrh	r2, [r2, #0]
 8007ece:	801a      	strh	r2, [r3, #0]
 8007ed0:	187b      	adds	r3, r7, r1
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	2240      	movs	r2, #64	; 0x40
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	d016      	beq.n	8007f08 <USB_DeactivateEndpoint+0x2d4>
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	18d3      	adds	r3, r2, r3
 8007ee4:	881b      	ldrh	r3, [r3, #0]
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	2028      	movs	r0, #40	; 0x28
 8007eea:	183b      	adds	r3, r7, r0
 8007eec:	492b      	ldr	r1, [pc, #172]	; (8007f9c <USB_DeactivateEndpoint+0x368>)
 8007eee:	400a      	ands	r2, r1
 8007ef0:	801a      	strh	r2, [r3, #0]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	18d3      	adds	r3, r2, r3
 8007efc:	183a      	adds	r2, r7, r0
 8007efe:	8812      	ldrh	r2, [r2, #0]
 8007f00:	4927      	ldr	r1, [pc, #156]	; (8007fa0 <USB_DeactivateEndpoint+0x36c>)
 8007f02:	430a      	orrs	r2, r1
 8007f04:	b292      	uxth	r2, r2
 8007f06:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	18d3      	adds	r3, r2, r3
 8007f12:	881b      	ldrh	r3, [r3, #0]
 8007f14:	b29a      	uxth	r2, r3
 8007f16:	2026      	movs	r0, #38	; 0x26
 8007f18:	183b      	adds	r3, r7, r0
 8007f1a:	4920      	ldr	r1, [pc, #128]	; (8007f9c <USB_DeactivateEndpoint+0x368>)
 8007f1c:	400a      	ands	r2, r1
 8007f1e:	801a      	strh	r2, [r3, #0]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	18d3      	adds	r3, r2, r3
 8007f2a:	183a      	adds	r2, r7, r0
 8007f2c:	8812      	ldrh	r2, [r2, #0]
 8007f2e:	491f      	ldr	r1, [pc, #124]	; (8007fac <USB_DeactivateEndpoint+0x378>)
 8007f30:	430a      	orrs	r2, r1
 8007f32:	b292      	uxth	r2, r2
 8007f34:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	18d3      	adds	r3, r2, r3
 8007f40:	881b      	ldrh	r3, [r3, #0]
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	2024      	movs	r0, #36	; 0x24
 8007f46:	183b      	adds	r3, r7, r0
 8007f48:	4916      	ldr	r1, [pc, #88]	; (8007fa4 <USB_DeactivateEndpoint+0x370>)
 8007f4a:	400a      	ands	r2, r1
 8007f4c:	801a      	strh	r2, [r3, #0]
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	18d3      	adds	r3, r2, r3
 8007f58:	183a      	adds	r2, r7, r0
 8007f5a:	8812      	ldrh	r2, [r2, #0]
 8007f5c:	4912      	ldr	r1, [pc, #72]	; (8007fa8 <USB_DeactivateEndpoint+0x374>)
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	b292      	uxth	r2, r2
 8007f62:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	18d3      	adds	r3, r2, r3
 8007f6e:	881b      	ldrh	r3, [r3, #0]
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	2022      	movs	r0, #34	; 0x22
 8007f74:	183b      	adds	r3, r7, r0
 8007f76:	490e      	ldr	r1, [pc, #56]	; (8007fb0 <USB_DeactivateEndpoint+0x37c>)
 8007f78:	400a      	ands	r2, r1
 8007f7a:	801a      	strh	r2, [r3, #0]
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	18d3      	adds	r3, r2, r3
 8007f86:	183a      	adds	r2, r7, r0
 8007f88:	8812      	ldrh	r2, [r2, #0]
 8007f8a:	4907      	ldr	r1, [pc, #28]	; (8007fa8 <USB_DeactivateEndpoint+0x374>)
 8007f8c:	430a      	orrs	r2, r1
 8007f8e:	b292      	uxth	r2, r2
 8007f90:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	0018      	movs	r0, r3
 8007f96:	46bd      	mov	sp, r7
 8007f98:	b00c      	add	sp, #48	; 0x30
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	ffff8f8f 	.word	0xffff8f8f
 8007fa0:	ffff80c0 	.word	0xffff80c0
 8007fa4:	ffff8fbf 	.word	0xffff8fbf
 8007fa8:	ffff8080 	.word	0xffff8080
 8007fac:	ffffc080 	.word	0xffffc080
 8007fb0:	ffffbf8f 	.word	0xffffbf8f

08007fb4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fb4:	b590      	push	{r4, r7, lr}
 8007fb6:	b0c3      	sub	sp, #268	; 0x10c
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	785b      	ldrb	r3, [r3, #1]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d001      	beq.n	8007fca <USB_EPStartXfer+0x16>
 8007fc6:	f000 fcef 	bl	80089a8 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	699a      	ldr	r2, [r3, #24]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d905      	bls.n	8007fe2 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	1d7a      	adds	r2, r7, #5
 8007fdc:	32ff      	adds	r2, #255	; 0xff
 8007fde:	6013      	str	r3, [r2, #0]
 8007fe0:	e004      	b.n	8007fec <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	1d7a      	adds	r2, r7, #5
 8007fe8:	32ff      	adds	r2, #255	; 0xff
 8007fea:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	7b1b      	ldrb	r3, [r3, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d125      	bne.n	8008040 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	6959      	ldr	r1, [r3, #20]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	88da      	ldrh	r2, [r3, #6]
 8007ffc:	1d7b      	adds	r3, r7, #5
 8007ffe:	33ff      	adds	r3, #255	; 0xff
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	b29b      	uxth	r3, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f001 f9c9 	bl	800939c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	613b      	str	r3, [r7, #16]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2250      	movs	r2, #80	; 0x50
 8008012:	5a9b      	ldrh	r3, [r3, r2]
 8008014:	b29b      	uxth	r3, r3
 8008016:	001a      	movs	r2, r3
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	189b      	adds	r3, r3, r2
 800801c:	613b      	str	r3, [r7, #16]
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	00da      	lsls	r2, r3, #3
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	18d3      	adds	r3, r2, r3
 8008028:	4acc      	ldr	r2, [pc, #816]	; (800835c <USB_EPStartXfer+0x3a8>)
 800802a:	4694      	mov	ip, r2
 800802c:	4463      	add	r3, ip
 800802e:	60fb      	str	r3, [r7, #12]
 8008030:	1d7b      	adds	r3, r7, #5
 8008032:	33ff      	adds	r3, #255	; 0xff
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	b29a      	uxth	r2, r3
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	801a      	strh	r2, [r3, #0]
 800803c:	f000 fc8f 	bl	800895e <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	78db      	ldrb	r3, [r3, #3]
 8008044:	2b02      	cmp	r3, #2
 8008046:	d000      	beq.n	800804a <USB_EPStartXfer+0x96>
 8008048:	e33a      	b.n	80086c0 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	6a1a      	ldr	r2, [r3, #32]
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	429a      	cmp	r2, r3
 8008054:	d800      	bhi.n	8008058 <USB_EPStartXfer+0xa4>
 8008056:	e2df      	b.n	8008618 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	18d3      	adds	r3, r2, r3
 8008062:	881b      	ldrh	r3, [r3, #0]
 8008064:	b29a      	uxth	r2, r3
 8008066:	2056      	movs	r0, #86	; 0x56
 8008068:	183b      	adds	r3, r7, r0
 800806a:	49bd      	ldr	r1, [pc, #756]	; (8008360 <USB_EPStartXfer+0x3ac>)
 800806c:	400a      	ands	r2, r1
 800806e:	801a      	strh	r2, [r3, #0]
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	18d3      	adds	r3, r2, r3
 800807a:	183a      	adds	r2, r7, r0
 800807c:	8812      	ldrh	r2, [r2, #0]
 800807e:	49b9      	ldr	r1, [pc, #740]	; (8008364 <USB_EPStartXfer+0x3b0>)
 8008080:	430a      	orrs	r2, r1
 8008082:	b292      	uxth	r2, r2
 8008084:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	6a1a      	ldr	r2, [r3, #32]
 800808a:	1d7b      	adds	r3, r7, #5
 800808c:	33ff      	adds	r3, #255	; 0xff
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	1ad2      	subs	r2, r2, r3
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	18d3      	adds	r3, r2, r3
 80080a0:	881b      	ldrh	r3, [r3, #0]
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	001a      	movs	r2, r3
 80080a6:	2340      	movs	r3, #64	; 0x40
 80080a8:	4013      	ands	r3, r2
 80080aa:	d100      	bne.n	80080ae <USB_EPStartXfer+0xfa>
 80080ac:	e162      	b.n	8008374 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	633b      	str	r3, [r7, #48]	; 0x30
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	785b      	ldrb	r3, [r3, #1]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d16a      	bne.n	8008190 <USB_EPStartXfer+0x1dc>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2250      	movs	r2, #80	; 0x50
 80080c2:	5a9b      	ldrh	r3, [r3, r2]
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	001a      	movs	r2, r3
 80080c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ca:	189b      	adds	r3, r3, r2
 80080cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	00da      	lsls	r2, r3, #3
 80080d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d6:	18d3      	adds	r3, r2, r3
 80080d8:	4aa3      	ldr	r2, [pc, #652]	; (8008368 <USB_EPStartXfer+0x3b4>)
 80080da:	4694      	mov	ip, r2
 80080dc:	4463      	add	r3, ip
 80080de:	627b      	str	r3, [r7, #36]	; 0x24
 80080e0:	1d7b      	adds	r3, r7, #5
 80080e2:	33ff      	adds	r3, #255	; 0xff
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d110      	bne.n	800810c <USB_EPStartXfer+0x158>
 80080ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ec:	881b      	ldrh	r3, [r3, #0]
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	4a9e      	ldr	r2, [pc, #632]	; (800836c <USB_EPStartXfer+0x3b8>)
 80080f2:	4013      	ands	r3, r2
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	801a      	strh	r2, [r3, #0]
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	b29b      	uxth	r3, r3
 8008100:	4a9b      	ldr	r2, [pc, #620]	; (8008370 <USB_EPStartXfer+0x3bc>)
 8008102:	4313      	orrs	r3, r2
 8008104:	b29a      	uxth	r2, r3
 8008106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008108:	801a      	strh	r2, [r3, #0]
 800810a:	e05c      	b.n	80081c6 <USB_EPStartXfer+0x212>
 800810c:	1d7b      	adds	r3, r7, #5
 800810e:	33ff      	adds	r3, #255	; 0xff
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2b3e      	cmp	r3, #62	; 0x3e
 8008114:	d81c      	bhi.n	8008150 <USB_EPStartXfer+0x19c>
 8008116:	1d7b      	adds	r3, r7, #5
 8008118:	33ff      	adds	r3, #255	; 0xff
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	085b      	lsrs	r3, r3, #1
 800811e:	1c7a      	adds	r2, r7, #1
 8008120:	32ff      	adds	r2, #255	; 0xff
 8008122:	6013      	str	r3, [r2, #0]
 8008124:	1d7b      	adds	r3, r7, #5
 8008126:	33ff      	adds	r3, #255	; 0xff
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2201      	movs	r2, #1
 800812c:	4013      	ands	r3, r2
 800812e:	d006      	beq.n	800813e <USB_EPStartXfer+0x18a>
 8008130:	1c7b      	adds	r3, r7, #1
 8008132:	33ff      	adds	r3, #255	; 0xff
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	3301      	adds	r3, #1
 8008138:	1c7a      	adds	r2, r7, #1
 800813a:	32ff      	adds	r2, #255	; 0xff
 800813c:	6013      	str	r3, [r2, #0]
 800813e:	1c7b      	adds	r3, r7, #1
 8008140:	33ff      	adds	r3, #255	; 0xff
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	b29b      	uxth	r3, r3
 8008146:	029b      	lsls	r3, r3, #10
 8008148:	b29a      	uxth	r2, r3
 800814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814c:	801a      	strh	r2, [r3, #0]
 800814e:	e03a      	b.n	80081c6 <USB_EPStartXfer+0x212>
 8008150:	1d7b      	adds	r3, r7, #5
 8008152:	33ff      	adds	r3, #255	; 0xff
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	095b      	lsrs	r3, r3, #5
 8008158:	1c7a      	adds	r2, r7, #1
 800815a:	32ff      	adds	r2, #255	; 0xff
 800815c:	6013      	str	r3, [r2, #0]
 800815e:	1d7b      	adds	r3, r7, #5
 8008160:	33ff      	adds	r3, #255	; 0xff
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	221f      	movs	r2, #31
 8008166:	4013      	ands	r3, r2
 8008168:	d106      	bne.n	8008178 <USB_EPStartXfer+0x1c4>
 800816a:	1c7b      	adds	r3, r7, #1
 800816c:	33ff      	adds	r3, #255	; 0xff
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	3b01      	subs	r3, #1
 8008172:	1c7a      	adds	r2, r7, #1
 8008174:	32ff      	adds	r2, #255	; 0xff
 8008176:	6013      	str	r3, [r2, #0]
 8008178:	1c7b      	adds	r3, r7, #1
 800817a:	33ff      	adds	r3, #255	; 0xff
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	b29b      	uxth	r3, r3
 8008180:	029b      	lsls	r3, r3, #10
 8008182:	b29b      	uxth	r3, r3
 8008184:	4a7a      	ldr	r2, [pc, #488]	; (8008370 <USB_EPStartXfer+0x3bc>)
 8008186:	4313      	orrs	r3, r2
 8008188:	b29a      	uxth	r2, r3
 800818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818c:	801a      	strh	r2, [r3, #0]
 800818e:	e01a      	b.n	80081c6 <USB_EPStartXfer+0x212>
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	785b      	ldrb	r3, [r3, #1]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d116      	bne.n	80081c6 <USB_EPStartXfer+0x212>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2250      	movs	r2, #80	; 0x50
 800819c:	5a9b      	ldrh	r3, [r3, r2]
 800819e:	b29b      	uxth	r3, r3
 80081a0:	001a      	movs	r2, r3
 80081a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a4:	189b      	adds	r3, r3, r2
 80081a6:	633b      	str	r3, [r7, #48]	; 0x30
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	00da      	lsls	r2, r3, #3
 80081ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b0:	18d3      	adds	r3, r2, r3
 80081b2:	4a6d      	ldr	r2, [pc, #436]	; (8008368 <USB_EPStartXfer+0x3b4>)
 80081b4:	4694      	mov	ip, r2
 80081b6:	4463      	add	r3, ip
 80081b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081ba:	1d7b      	adds	r3, r7, #5
 80081bc:	33ff      	adds	r3, #255	; 0xff
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	b29a      	uxth	r2, r3
 80081c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80081c6:	2076      	movs	r0, #118	; 0x76
 80081c8:	183b      	adds	r3, r7, r0
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	8952      	ldrh	r2, [r2, #10]
 80081ce:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	6959      	ldr	r1, [r3, #20]
 80081d4:	1d7b      	adds	r3, r7, #5
 80081d6:	33ff      	adds	r3, #255	; 0xff
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	b29c      	uxth	r4, r3
 80081dc:	183b      	adds	r3, r7, r0
 80081de:	881a      	ldrh	r2, [r3, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	0023      	movs	r3, r4
 80081e4:	f001 f8da 	bl	800939c <USB_WritePMA>
            ep->xfer_buff += len;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	695a      	ldr	r2, [r3, #20]
 80081ec:	1d7b      	adds	r3, r7, #5
 80081ee:	33ff      	adds	r3, #255	; 0xff
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	18d2      	adds	r2, r2, r3
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	6a1a      	ldr	r2, [r3, #32]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	429a      	cmp	r2, r3
 8008202:	d908      	bls.n	8008216 <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	6a1a      	ldr	r2, [r3, #32]
 8008208:	1d7b      	adds	r3, r7, #5
 800820a:	33ff      	adds	r3, #255	; 0xff
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	1ad2      	subs	r2, r2, r3
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	621a      	str	r2, [r3, #32]
 8008214:	e007      	b.n	8008226 <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	6a1b      	ldr	r3, [r3, #32]
 800821a:	1d7a      	adds	r2, r7, #5
 800821c:	32ff      	adds	r2, #255	; 0xff
 800821e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	2200      	movs	r2, #0
 8008224:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	785b      	ldrb	r3, [r3, #1]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d166      	bne.n	80082fc <USB_EPStartXfer+0x348>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	61bb      	str	r3, [r7, #24]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2250      	movs	r2, #80	; 0x50
 8008236:	5a9b      	ldrh	r3, [r3, r2]
 8008238:	b29b      	uxth	r3, r3
 800823a:	001a      	movs	r2, r3
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	189b      	adds	r3, r3, r2
 8008240:	61bb      	str	r3, [r7, #24]
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	00da      	lsls	r2, r3, #3
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	18d3      	adds	r3, r2, r3
 800824c:	4a43      	ldr	r2, [pc, #268]	; (800835c <USB_EPStartXfer+0x3a8>)
 800824e:	4694      	mov	ip, r2
 8008250:	4463      	add	r3, ip
 8008252:	617b      	str	r3, [r7, #20]
 8008254:	1d7b      	adds	r3, r7, #5
 8008256:	33ff      	adds	r3, #255	; 0xff
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d110      	bne.n	8008280 <USB_EPStartXfer+0x2cc>
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	881b      	ldrh	r3, [r3, #0]
 8008262:	b29b      	uxth	r3, r3
 8008264:	4a41      	ldr	r2, [pc, #260]	; (800836c <USB_EPStartXfer+0x3b8>)
 8008266:	4013      	ands	r3, r2
 8008268:	b29a      	uxth	r2, r3
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	801a      	strh	r2, [r3, #0]
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	b29b      	uxth	r3, r3
 8008274:	4a3e      	ldr	r2, [pc, #248]	; (8008370 <USB_EPStartXfer+0x3bc>)
 8008276:	4313      	orrs	r3, r2
 8008278:	b29a      	uxth	r2, r3
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	801a      	strh	r2, [r3, #0]
 800827e:	e05a      	b.n	8008336 <USB_EPStartXfer+0x382>
 8008280:	1d7b      	adds	r3, r7, #5
 8008282:	33ff      	adds	r3, #255	; 0xff
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b3e      	cmp	r3, #62	; 0x3e
 8008288:	d81a      	bhi.n	80082c0 <USB_EPStartXfer+0x30c>
 800828a:	1d7b      	adds	r3, r7, #5
 800828c:	33ff      	adds	r3, #255	; 0xff
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	085b      	lsrs	r3, r3, #1
 8008292:	21fc      	movs	r1, #252	; 0xfc
 8008294:	187a      	adds	r2, r7, r1
 8008296:	6013      	str	r3, [r2, #0]
 8008298:	1d7b      	adds	r3, r7, #5
 800829a:	33ff      	adds	r3, #255	; 0xff
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2201      	movs	r2, #1
 80082a0:	4013      	ands	r3, r2
 80082a2:	d004      	beq.n	80082ae <USB_EPStartXfer+0x2fa>
 80082a4:	187b      	adds	r3, r7, r1
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3301      	adds	r3, #1
 80082aa:	187a      	adds	r2, r7, r1
 80082ac:	6013      	str	r3, [r2, #0]
 80082ae:	23fc      	movs	r3, #252	; 0xfc
 80082b0:	18fb      	adds	r3, r7, r3
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	029b      	lsls	r3, r3, #10
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	801a      	strh	r2, [r3, #0]
 80082be:	e03a      	b.n	8008336 <USB_EPStartXfer+0x382>
 80082c0:	1d7b      	adds	r3, r7, #5
 80082c2:	33ff      	adds	r3, #255	; 0xff
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	095b      	lsrs	r3, r3, #5
 80082c8:	21fc      	movs	r1, #252	; 0xfc
 80082ca:	187a      	adds	r2, r7, r1
 80082cc:	6013      	str	r3, [r2, #0]
 80082ce:	1d7b      	adds	r3, r7, #5
 80082d0:	33ff      	adds	r3, #255	; 0xff
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	221f      	movs	r2, #31
 80082d6:	4013      	ands	r3, r2
 80082d8:	d104      	bne.n	80082e4 <USB_EPStartXfer+0x330>
 80082da:	187b      	adds	r3, r7, r1
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	3b01      	subs	r3, #1
 80082e0:	187a      	adds	r2, r7, r1
 80082e2:	6013      	str	r3, [r2, #0]
 80082e4:	23fc      	movs	r3, #252	; 0xfc
 80082e6:	18fb      	adds	r3, r7, r3
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	029b      	lsls	r3, r3, #10
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	4a1f      	ldr	r2, [pc, #124]	; (8008370 <USB_EPStartXfer+0x3bc>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	801a      	strh	r2, [r3, #0]
 80082fa:	e01c      	b.n	8008336 <USB_EPStartXfer+0x382>
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	785b      	ldrb	r3, [r3, #1]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d118      	bne.n	8008336 <USB_EPStartXfer+0x382>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	623b      	str	r3, [r7, #32]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2250      	movs	r2, #80	; 0x50
 800830c:	5a9b      	ldrh	r3, [r3, r2]
 800830e:	b29b      	uxth	r3, r3
 8008310:	001a      	movs	r2, r3
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	189b      	adds	r3, r3, r2
 8008316:	623b      	str	r3, [r7, #32]
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	00da      	lsls	r2, r3, #3
 800831e:	6a3b      	ldr	r3, [r7, #32]
 8008320:	18d3      	adds	r3, r2, r3
 8008322:	4a0e      	ldr	r2, [pc, #56]	; (800835c <USB_EPStartXfer+0x3a8>)
 8008324:	4694      	mov	ip, r2
 8008326:	4463      	add	r3, ip
 8008328:	61fb      	str	r3, [r7, #28]
 800832a:	1d7b      	adds	r3, r7, #5
 800832c:	33ff      	adds	r3, #255	; 0xff
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	b29a      	uxth	r2, r3
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008336:	2076      	movs	r0, #118	; 0x76
 8008338:	183b      	adds	r3, r7, r0
 800833a:	683a      	ldr	r2, [r7, #0]
 800833c:	8912      	ldrh	r2, [r2, #8]
 800833e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	6959      	ldr	r1, [r3, #20]
 8008344:	1d7b      	adds	r3, r7, #5
 8008346:	33ff      	adds	r3, #255	; 0xff
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	b29c      	uxth	r4, r3
 800834c:	183b      	adds	r3, r7, r0
 800834e:	881a      	ldrh	r2, [r3, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	0023      	movs	r3, r4
 8008354:	f001 f822 	bl	800939c <USB_WritePMA>
 8008358:	e301      	b.n	800895e <USB_EPStartXfer+0x9aa>
 800835a:	46c0      	nop			; (mov r8, r8)
 800835c:	00000402 	.word	0x00000402
 8008360:	ffff8f8f 	.word	0xffff8f8f
 8008364:	ffff8180 	.word	0xffff8180
 8008368:	00000406 	.word	0x00000406
 800836c:	ffff83ff 	.word	0xffff83ff
 8008370:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	785b      	ldrb	r3, [r3, #1]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d166      	bne.n	800844a <USB_EPStartXfer+0x496>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2250      	movs	r2, #80	; 0x50
 8008384:	5a9b      	ldrh	r3, [r3, r2]
 8008386:	b29b      	uxth	r3, r3
 8008388:	001a      	movs	r2, r3
 800838a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800838c:	189b      	adds	r3, r3, r2
 800838e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	00da      	lsls	r2, r3, #3
 8008396:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008398:	18d3      	adds	r3, r2, r3
 800839a:	4ac3      	ldr	r2, [pc, #780]	; (80086a8 <USB_EPStartXfer+0x6f4>)
 800839c:	4694      	mov	ip, r2
 800839e:	4463      	add	r3, ip
 80083a0:	647b      	str	r3, [r7, #68]	; 0x44
 80083a2:	1d7b      	adds	r3, r7, #5
 80083a4:	33ff      	adds	r3, #255	; 0xff
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d110      	bne.n	80083ce <USB_EPStartXfer+0x41a>
 80083ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	4abe      	ldr	r2, [pc, #760]	; (80086ac <USB_EPStartXfer+0x6f8>)
 80083b4:	4013      	ands	r3, r2
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083ba:	801a      	strh	r2, [r3, #0]
 80083bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083be:	881b      	ldrh	r3, [r3, #0]
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	4abb      	ldr	r2, [pc, #748]	; (80086b0 <USB_EPStartXfer+0x6fc>)
 80083c4:	4313      	orrs	r3, r2
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083ca:	801a      	strh	r2, [r3, #0]
 80083cc:	e05a      	b.n	8008484 <USB_EPStartXfer+0x4d0>
 80083ce:	1d7b      	adds	r3, r7, #5
 80083d0:	33ff      	adds	r3, #255	; 0xff
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2b3e      	cmp	r3, #62	; 0x3e
 80083d6:	d81a      	bhi.n	800840e <USB_EPStartXfer+0x45a>
 80083d8:	1d7b      	adds	r3, r7, #5
 80083da:	33ff      	adds	r3, #255	; 0xff
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	085b      	lsrs	r3, r3, #1
 80083e0:	21f8      	movs	r1, #248	; 0xf8
 80083e2:	187a      	adds	r2, r7, r1
 80083e4:	6013      	str	r3, [r2, #0]
 80083e6:	1d7b      	adds	r3, r7, #5
 80083e8:	33ff      	adds	r3, #255	; 0xff
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2201      	movs	r2, #1
 80083ee:	4013      	ands	r3, r2
 80083f0:	d004      	beq.n	80083fc <USB_EPStartXfer+0x448>
 80083f2:	187b      	adds	r3, r7, r1
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	3301      	adds	r3, #1
 80083f8:	187a      	adds	r2, r7, r1
 80083fa:	6013      	str	r3, [r2, #0]
 80083fc:	23f8      	movs	r3, #248	; 0xf8
 80083fe:	18fb      	adds	r3, r7, r3
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	b29b      	uxth	r3, r3
 8008404:	029b      	lsls	r3, r3, #10
 8008406:	b29a      	uxth	r2, r3
 8008408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800840a:	801a      	strh	r2, [r3, #0]
 800840c:	e03a      	b.n	8008484 <USB_EPStartXfer+0x4d0>
 800840e:	1d7b      	adds	r3, r7, #5
 8008410:	33ff      	adds	r3, #255	; 0xff
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	095b      	lsrs	r3, r3, #5
 8008416:	21f8      	movs	r1, #248	; 0xf8
 8008418:	187a      	adds	r2, r7, r1
 800841a:	6013      	str	r3, [r2, #0]
 800841c:	1d7b      	adds	r3, r7, #5
 800841e:	33ff      	adds	r3, #255	; 0xff
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	221f      	movs	r2, #31
 8008424:	4013      	ands	r3, r2
 8008426:	d104      	bne.n	8008432 <USB_EPStartXfer+0x47e>
 8008428:	187b      	adds	r3, r7, r1
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	3b01      	subs	r3, #1
 800842e:	187a      	adds	r2, r7, r1
 8008430:	6013      	str	r3, [r2, #0]
 8008432:	23f8      	movs	r3, #248	; 0xf8
 8008434:	18fb      	adds	r3, r7, r3
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	b29b      	uxth	r3, r3
 800843a:	029b      	lsls	r3, r3, #10
 800843c:	b29b      	uxth	r3, r3
 800843e:	4a9c      	ldr	r2, [pc, #624]	; (80086b0 <USB_EPStartXfer+0x6fc>)
 8008440:	4313      	orrs	r3, r2
 8008442:	b29a      	uxth	r2, r3
 8008444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008446:	801a      	strh	r2, [r3, #0]
 8008448:	e01c      	b.n	8008484 <USB_EPStartXfer+0x4d0>
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	785b      	ldrb	r3, [r3, #1]
 800844e:	2b01      	cmp	r3, #1
 8008450:	d118      	bne.n	8008484 <USB_EPStartXfer+0x4d0>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	653b      	str	r3, [r7, #80]	; 0x50
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2250      	movs	r2, #80	; 0x50
 800845a:	5a9b      	ldrh	r3, [r3, r2]
 800845c:	b29b      	uxth	r3, r3
 800845e:	001a      	movs	r2, r3
 8008460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008462:	189b      	adds	r3, r3, r2
 8008464:	653b      	str	r3, [r7, #80]	; 0x50
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	00da      	lsls	r2, r3, #3
 800846c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800846e:	18d3      	adds	r3, r2, r3
 8008470:	4a8d      	ldr	r2, [pc, #564]	; (80086a8 <USB_EPStartXfer+0x6f4>)
 8008472:	4694      	mov	ip, r2
 8008474:	4463      	add	r3, ip
 8008476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008478:	1d7b      	adds	r3, r7, #5
 800847a:	33ff      	adds	r3, #255	; 0xff
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	b29a      	uxth	r2, r3
 8008480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008482:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008484:	2076      	movs	r0, #118	; 0x76
 8008486:	183b      	adds	r3, r7, r0
 8008488:	683a      	ldr	r2, [r7, #0]
 800848a:	8912      	ldrh	r2, [r2, #8]
 800848c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	6959      	ldr	r1, [r3, #20]
 8008492:	1d7b      	adds	r3, r7, #5
 8008494:	33ff      	adds	r3, #255	; 0xff
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	b29c      	uxth	r4, r3
 800849a:	183b      	adds	r3, r7, r0
 800849c:	881a      	ldrh	r2, [r3, #0]
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	0023      	movs	r3, r4
 80084a2:	f000 ff7b 	bl	800939c <USB_WritePMA>
            ep->xfer_buff += len;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	695a      	ldr	r2, [r3, #20]
 80084aa:	1d7b      	adds	r3, r7, #5
 80084ac:	33ff      	adds	r3, #255	; 0xff
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	18d2      	adds	r2, r2, r3
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	6a1a      	ldr	r2, [r3, #32]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d908      	bls.n	80084d4 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	6a1a      	ldr	r2, [r3, #32]
 80084c6:	1d7b      	adds	r3, r7, #5
 80084c8:	33ff      	adds	r3, #255	; 0xff
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	1ad2      	subs	r2, r2, r3
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	621a      	str	r2, [r3, #32]
 80084d2:	e007      	b.n	80084e4 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	6a1b      	ldr	r3, [r3, #32]
 80084d8:	1d7a      	adds	r2, r7, #5
 80084da:	32ff      	adds	r2, #255	; 0xff
 80084dc:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	2200      	movs	r2, #0
 80084e2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	643b      	str	r3, [r7, #64]	; 0x40
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	785b      	ldrb	r3, [r3, #1]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d166      	bne.n	80085be <USB_EPStartXfer+0x60a>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2250      	movs	r2, #80	; 0x50
 80084f8:	5a9b      	ldrh	r3, [r3, r2]
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	001a      	movs	r2, r3
 80084fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008500:	189b      	adds	r3, r3, r2
 8008502:	63bb      	str	r3, [r7, #56]	; 0x38
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	00da      	lsls	r2, r3, #3
 800850a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850c:	18d3      	adds	r3, r2, r3
 800850e:	4a69      	ldr	r2, [pc, #420]	; (80086b4 <USB_EPStartXfer+0x700>)
 8008510:	4694      	mov	ip, r2
 8008512:	4463      	add	r3, ip
 8008514:	637b      	str	r3, [r7, #52]	; 0x34
 8008516:	1d7b      	adds	r3, r7, #5
 8008518:	33ff      	adds	r3, #255	; 0xff
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d110      	bne.n	8008542 <USB_EPStartXfer+0x58e>
 8008520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008522:	881b      	ldrh	r3, [r3, #0]
 8008524:	b29b      	uxth	r3, r3
 8008526:	4a61      	ldr	r2, [pc, #388]	; (80086ac <USB_EPStartXfer+0x6f8>)
 8008528:	4013      	ands	r3, r2
 800852a:	b29a      	uxth	r2, r3
 800852c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800852e:	801a      	strh	r2, [r3, #0]
 8008530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008532:	881b      	ldrh	r3, [r3, #0]
 8008534:	b29b      	uxth	r3, r3
 8008536:	4a5e      	ldr	r2, [pc, #376]	; (80086b0 <USB_EPStartXfer+0x6fc>)
 8008538:	4313      	orrs	r3, r2
 800853a:	b29a      	uxth	r2, r3
 800853c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800853e:	801a      	strh	r2, [r3, #0]
 8008540:	e058      	b.n	80085f4 <USB_EPStartXfer+0x640>
 8008542:	1d7b      	adds	r3, r7, #5
 8008544:	33ff      	adds	r3, #255	; 0xff
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	2b3e      	cmp	r3, #62	; 0x3e
 800854a:	d81a      	bhi.n	8008582 <USB_EPStartXfer+0x5ce>
 800854c:	1d7b      	adds	r3, r7, #5
 800854e:	33ff      	adds	r3, #255	; 0xff
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	085b      	lsrs	r3, r3, #1
 8008554:	21f4      	movs	r1, #244	; 0xf4
 8008556:	187a      	adds	r2, r7, r1
 8008558:	6013      	str	r3, [r2, #0]
 800855a:	1d7b      	adds	r3, r7, #5
 800855c:	33ff      	adds	r3, #255	; 0xff
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	2201      	movs	r2, #1
 8008562:	4013      	ands	r3, r2
 8008564:	d004      	beq.n	8008570 <USB_EPStartXfer+0x5bc>
 8008566:	187b      	adds	r3, r7, r1
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	3301      	adds	r3, #1
 800856c:	187a      	adds	r2, r7, r1
 800856e:	6013      	str	r3, [r2, #0]
 8008570:	23f4      	movs	r3, #244	; 0xf4
 8008572:	18fb      	adds	r3, r7, r3
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	b29b      	uxth	r3, r3
 8008578:	029b      	lsls	r3, r3, #10
 800857a:	b29a      	uxth	r2, r3
 800857c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800857e:	801a      	strh	r2, [r3, #0]
 8008580:	e038      	b.n	80085f4 <USB_EPStartXfer+0x640>
 8008582:	1d7b      	adds	r3, r7, #5
 8008584:	33ff      	adds	r3, #255	; 0xff
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	095b      	lsrs	r3, r3, #5
 800858a:	21f4      	movs	r1, #244	; 0xf4
 800858c:	187a      	adds	r2, r7, r1
 800858e:	6013      	str	r3, [r2, #0]
 8008590:	1d7b      	adds	r3, r7, #5
 8008592:	33ff      	adds	r3, #255	; 0xff
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	221f      	movs	r2, #31
 8008598:	4013      	ands	r3, r2
 800859a:	d104      	bne.n	80085a6 <USB_EPStartXfer+0x5f2>
 800859c:	187b      	adds	r3, r7, r1
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	3b01      	subs	r3, #1
 80085a2:	187a      	adds	r2, r7, r1
 80085a4:	6013      	str	r3, [r2, #0]
 80085a6:	23f4      	movs	r3, #244	; 0xf4
 80085a8:	18fb      	adds	r3, r7, r3
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	029b      	lsls	r3, r3, #10
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	4a3f      	ldr	r2, [pc, #252]	; (80086b0 <USB_EPStartXfer+0x6fc>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ba:	801a      	strh	r2, [r3, #0]
 80085bc:	e01a      	b.n	80085f4 <USB_EPStartXfer+0x640>
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	785b      	ldrb	r3, [r3, #1]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d116      	bne.n	80085f4 <USB_EPStartXfer+0x640>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2250      	movs	r2, #80	; 0x50
 80085ca:	5a9b      	ldrh	r3, [r3, r2]
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	001a      	movs	r2, r3
 80085d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085d2:	189b      	adds	r3, r3, r2
 80085d4:	643b      	str	r3, [r7, #64]	; 0x40
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	00da      	lsls	r2, r3, #3
 80085dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085de:	18d3      	adds	r3, r2, r3
 80085e0:	4a34      	ldr	r2, [pc, #208]	; (80086b4 <USB_EPStartXfer+0x700>)
 80085e2:	4694      	mov	ip, r2
 80085e4:	4463      	add	r3, ip
 80085e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80085e8:	1d7b      	adds	r3, r7, #5
 80085ea:	33ff      	adds	r3, #255	; 0xff
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	b29a      	uxth	r2, r3
 80085f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80085f4:	2076      	movs	r0, #118	; 0x76
 80085f6:	183b      	adds	r3, r7, r0
 80085f8:	683a      	ldr	r2, [r7, #0]
 80085fa:	8952      	ldrh	r2, [r2, #10]
 80085fc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	6959      	ldr	r1, [r3, #20]
 8008602:	1d7b      	adds	r3, r7, #5
 8008604:	33ff      	adds	r3, #255	; 0xff
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	b29c      	uxth	r4, r3
 800860a:	183b      	adds	r3, r7, r0
 800860c:	881a      	ldrh	r2, [r3, #0]
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	0023      	movs	r3, r4
 8008612:	f000 fec3 	bl	800939c <USB_WritePMA>
 8008616:	e1a2      	b.n	800895e <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	6a1b      	ldr	r3, [r3, #32]
 800861c:	1d7a      	adds	r2, r7, #5
 800861e:	32ff      	adds	r2, #255	; 0xff
 8008620:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	18d3      	adds	r3, r2, r3
 800862c:	881b      	ldrh	r3, [r3, #0]
 800862e:	b29a      	uxth	r2, r3
 8008630:	2062      	movs	r0, #98	; 0x62
 8008632:	183b      	adds	r3, r7, r0
 8008634:	4920      	ldr	r1, [pc, #128]	; (80086b8 <USB_EPStartXfer+0x704>)
 8008636:	400a      	ands	r2, r1
 8008638:	801a      	strh	r2, [r3, #0]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	18d3      	adds	r3, r2, r3
 8008644:	183a      	adds	r2, r7, r0
 8008646:	8812      	ldrh	r2, [r2, #0]
 8008648:	491c      	ldr	r1, [pc, #112]	; (80086bc <USB_EPStartXfer+0x708>)
 800864a:	430a      	orrs	r2, r1
 800864c:	b292      	uxth	r2, r2
 800864e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2250      	movs	r2, #80	; 0x50
 8008658:	5a9b      	ldrh	r3, [r3, r2]
 800865a:	b29b      	uxth	r3, r3
 800865c:	001a      	movs	r2, r3
 800865e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008660:	189b      	adds	r3, r3, r2
 8008662:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	00da      	lsls	r2, r3, #3
 800866a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800866c:	18d3      	adds	r3, r2, r3
 800866e:	4a0e      	ldr	r2, [pc, #56]	; (80086a8 <USB_EPStartXfer+0x6f4>)
 8008670:	4694      	mov	ip, r2
 8008672:	4463      	add	r3, ip
 8008674:	65bb      	str	r3, [r7, #88]	; 0x58
 8008676:	1d7b      	adds	r3, r7, #5
 8008678:	33ff      	adds	r3, #255	; 0xff
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	b29a      	uxth	r2, r3
 800867e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008680:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008682:	2076      	movs	r0, #118	; 0x76
 8008684:	183b      	adds	r3, r7, r0
 8008686:	683a      	ldr	r2, [r7, #0]
 8008688:	8912      	ldrh	r2, [r2, #8]
 800868a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	6959      	ldr	r1, [r3, #20]
 8008690:	1d7b      	adds	r3, r7, #5
 8008692:	33ff      	adds	r3, #255	; 0xff
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	b29c      	uxth	r4, r3
 8008698:	183b      	adds	r3, r7, r0
 800869a:	881a      	ldrh	r2, [r3, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	0023      	movs	r3, r4
 80086a0:	f000 fe7c 	bl	800939c <USB_WritePMA>
 80086a4:	e15b      	b.n	800895e <USB_EPStartXfer+0x9aa>
 80086a6:	46c0      	nop			; (mov r8, r8)
 80086a8:	00000402 	.word	0x00000402
 80086ac:	ffff83ff 	.word	0xffff83ff
 80086b0:	ffff8000 	.word	0xffff8000
 80086b4:	00000406 	.word	0x00000406
 80086b8:	ffff8e8f 	.word	0xffff8e8f
 80086bc:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	6a1a      	ldr	r2, [r3, #32]
 80086c4:	1d7b      	adds	r3, r7, #5
 80086c6:	33ff      	adds	r3, #255	; 0xff
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	1ad2      	subs	r2, r2, r3
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80086d0:	687a      	ldr	r2, [r7, #4]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	18d3      	adds	r3, r2, r3
 80086da:	881b      	ldrh	r3, [r3, #0]
 80086dc:	b29b      	uxth	r3, r3
 80086de:	001a      	movs	r2, r3
 80086e0:	2340      	movs	r3, #64	; 0x40
 80086e2:	4013      	ands	r3, r2
 80086e4:	d100      	bne.n	80086e8 <USB_EPStartXfer+0x734>
 80086e6:	e099      	b.n	800881c <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	673b      	str	r3, [r7, #112]	; 0x70
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	785b      	ldrb	r3, [r3, #1]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d166      	bne.n	80087c2 <USB_EPStartXfer+0x80e>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2250      	movs	r2, #80	; 0x50
 80086fc:	5a9b      	ldrh	r3, [r3, r2]
 80086fe:	b29b      	uxth	r3, r3
 8008700:	001a      	movs	r2, r3
 8008702:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008704:	189b      	adds	r3, r3, r2
 8008706:	66bb      	str	r3, [r7, #104]	; 0x68
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	00da      	lsls	r2, r3, #3
 800870e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008710:	18d3      	adds	r3, r2, r3
 8008712:	4ad0      	ldr	r2, [pc, #832]	; (8008a54 <USB_EPStartXfer+0xaa0>)
 8008714:	4694      	mov	ip, r2
 8008716:	4463      	add	r3, ip
 8008718:	667b      	str	r3, [r7, #100]	; 0x64
 800871a:	1d7b      	adds	r3, r7, #5
 800871c:	33ff      	adds	r3, #255	; 0xff
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d110      	bne.n	8008746 <USB_EPStartXfer+0x792>
 8008724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	b29b      	uxth	r3, r3
 800872a:	4acb      	ldr	r2, [pc, #812]	; (8008a58 <USB_EPStartXfer+0xaa4>)
 800872c:	4013      	ands	r3, r2
 800872e:	b29a      	uxth	r2, r3
 8008730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008732:	801a      	strh	r2, [r3, #0]
 8008734:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008736:	881b      	ldrh	r3, [r3, #0]
 8008738:	b29b      	uxth	r3, r3
 800873a:	4ac8      	ldr	r2, [pc, #800]	; (8008a5c <USB_EPStartXfer+0xaa8>)
 800873c:	4313      	orrs	r3, r2
 800873e:	b29a      	uxth	r2, r3
 8008740:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008742:	801a      	strh	r2, [r3, #0]
 8008744:	e058      	b.n	80087f8 <USB_EPStartXfer+0x844>
 8008746:	1d7b      	adds	r3, r7, #5
 8008748:	33ff      	adds	r3, #255	; 0xff
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b3e      	cmp	r3, #62	; 0x3e
 800874e:	d81a      	bhi.n	8008786 <USB_EPStartXfer+0x7d2>
 8008750:	1d7b      	adds	r3, r7, #5
 8008752:	33ff      	adds	r3, #255	; 0xff
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	085b      	lsrs	r3, r3, #1
 8008758:	21f0      	movs	r1, #240	; 0xf0
 800875a:	187a      	adds	r2, r7, r1
 800875c:	6013      	str	r3, [r2, #0]
 800875e:	1d7b      	adds	r3, r7, #5
 8008760:	33ff      	adds	r3, #255	; 0xff
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2201      	movs	r2, #1
 8008766:	4013      	ands	r3, r2
 8008768:	d004      	beq.n	8008774 <USB_EPStartXfer+0x7c0>
 800876a:	187b      	adds	r3, r7, r1
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	3301      	adds	r3, #1
 8008770:	187a      	adds	r2, r7, r1
 8008772:	6013      	str	r3, [r2, #0]
 8008774:	23f0      	movs	r3, #240	; 0xf0
 8008776:	18fb      	adds	r3, r7, r3
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	b29b      	uxth	r3, r3
 800877c:	029b      	lsls	r3, r3, #10
 800877e:	b29a      	uxth	r2, r3
 8008780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008782:	801a      	strh	r2, [r3, #0]
 8008784:	e038      	b.n	80087f8 <USB_EPStartXfer+0x844>
 8008786:	1d7b      	adds	r3, r7, #5
 8008788:	33ff      	adds	r3, #255	; 0xff
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	095b      	lsrs	r3, r3, #5
 800878e:	21f0      	movs	r1, #240	; 0xf0
 8008790:	187a      	adds	r2, r7, r1
 8008792:	6013      	str	r3, [r2, #0]
 8008794:	1d7b      	adds	r3, r7, #5
 8008796:	33ff      	adds	r3, #255	; 0xff
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	221f      	movs	r2, #31
 800879c:	4013      	ands	r3, r2
 800879e:	d104      	bne.n	80087aa <USB_EPStartXfer+0x7f6>
 80087a0:	187b      	adds	r3, r7, r1
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	3b01      	subs	r3, #1
 80087a6:	187a      	adds	r2, r7, r1
 80087a8:	6013      	str	r3, [r2, #0]
 80087aa:	23f0      	movs	r3, #240	; 0xf0
 80087ac:	18fb      	adds	r3, r7, r3
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	029b      	lsls	r3, r3, #10
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	4aa9      	ldr	r2, [pc, #676]	; (8008a5c <USB_EPStartXfer+0xaa8>)
 80087b8:	4313      	orrs	r3, r2
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087be:	801a      	strh	r2, [r3, #0]
 80087c0:	e01a      	b.n	80087f8 <USB_EPStartXfer+0x844>
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	785b      	ldrb	r3, [r3, #1]
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d116      	bne.n	80087f8 <USB_EPStartXfer+0x844>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2250      	movs	r2, #80	; 0x50
 80087ce:	5a9b      	ldrh	r3, [r3, r2]
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	001a      	movs	r2, r3
 80087d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087d6:	189b      	adds	r3, r3, r2
 80087d8:	673b      	str	r3, [r7, #112]	; 0x70
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	00da      	lsls	r2, r3, #3
 80087e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087e2:	18d3      	adds	r3, r2, r3
 80087e4:	4a9b      	ldr	r2, [pc, #620]	; (8008a54 <USB_EPStartXfer+0xaa0>)
 80087e6:	4694      	mov	ip, r2
 80087e8:	4463      	add	r3, ip
 80087ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087ec:	1d7b      	adds	r3, r7, #5
 80087ee:	33ff      	adds	r3, #255	; 0xff
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80087f8:	2076      	movs	r0, #118	; 0x76
 80087fa:	183b      	adds	r3, r7, r0
 80087fc:	683a      	ldr	r2, [r7, #0]
 80087fe:	8952      	ldrh	r2, [r2, #10]
 8008800:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	6959      	ldr	r1, [r3, #20]
 8008806:	1d7b      	adds	r3, r7, #5
 8008808:	33ff      	adds	r3, #255	; 0xff
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	b29c      	uxth	r4, r3
 800880e:	183b      	adds	r3, r7, r0
 8008810:	881a      	ldrh	r2, [r3, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	0023      	movs	r3, r4
 8008816:	f000 fdc1 	bl	800939c <USB_WritePMA>
 800881a:	e0a0      	b.n	800895e <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	785b      	ldrb	r3, [r3, #1]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d166      	bne.n	80088f2 <USB_EPStartXfer+0x93e>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2250      	movs	r2, #80	; 0x50
 800882c:	5a9b      	ldrh	r3, [r3, r2]
 800882e:	b29b      	uxth	r3, r3
 8008830:	001a      	movs	r2, r3
 8008832:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008834:	189b      	adds	r3, r3, r2
 8008836:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	00da      	lsls	r2, r3, #3
 800883e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008840:	18d3      	adds	r3, r2, r3
 8008842:	4a87      	ldr	r2, [pc, #540]	; (8008a60 <USB_EPStartXfer+0xaac>)
 8008844:	4694      	mov	ip, r2
 8008846:	4463      	add	r3, ip
 8008848:	67bb      	str	r3, [r7, #120]	; 0x78
 800884a:	1d7b      	adds	r3, r7, #5
 800884c:	33ff      	adds	r3, #255	; 0xff
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d110      	bne.n	8008876 <USB_EPStartXfer+0x8c2>
 8008854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008856:	881b      	ldrh	r3, [r3, #0]
 8008858:	b29b      	uxth	r3, r3
 800885a:	4a7f      	ldr	r2, [pc, #508]	; (8008a58 <USB_EPStartXfer+0xaa4>)
 800885c:	4013      	ands	r3, r2
 800885e:	b29a      	uxth	r2, r3
 8008860:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008862:	801a      	strh	r2, [r3, #0]
 8008864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008866:	881b      	ldrh	r3, [r3, #0]
 8008868:	b29b      	uxth	r3, r3
 800886a:	4a7c      	ldr	r2, [pc, #496]	; (8008a5c <USB_EPStartXfer+0xaa8>)
 800886c:	4313      	orrs	r3, r2
 800886e:	b29a      	uxth	r2, r3
 8008870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008872:	801a      	strh	r2, [r3, #0]
 8008874:	e062      	b.n	800893c <USB_EPStartXfer+0x988>
 8008876:	1d7b      	adds	r3, r7, #5
 8008878:	33ff      	adds	r3, #255	; 0xff
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2b3e      	cmp	r3, #62	; 0x3e
 800887e:	d81a      	bhi.n	80088b6 <USB_EPStartXfer+0x902>
 8008880:	1d7b      	adds	r3, r7, #5
 8008882:	33ff      	adds	r3, #255	; 0xff
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	085b      	lsrs	r3, r3, #1
 8008888:	21ec      	movs	r1, #236	; 0xec
 800888a:	187a      	adds	r2, r7, r1
 800888c:	6013      	str	r3, [r2, #0]
 800888e:	1d7b      	adds	r3, r7, #5
 8008890:	33ff      	adds	r3, #255	; 0xff
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2201      	movs	r2, #1
 8008896:	4013      	ands	r3, r2
 8008898:	d004      	beq.n	80088a4 <USB_EPStartXfer+0x8f0>
 800889a:	187b      	adds	r3, r7, r1
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	3301      	adds	r3, #1
 80088a0:	187a      	adds	r2, r7, r1
 80088a2:	6013      	str	r3, [r2, #0]
 80088a4:	23ec      	movs	r3, #236	; 0xec
 80088a6:	18fb      	adds	r3, r7, r3
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	029b      	lsls	r3, r3, #10
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088b2:	801a      	strh	r2, [r3, #0]
 80088b4:	e042      	b.n	800893c <USB_EPStartXfer+0x988>
 80088b6:	1d7b      	adds	r3, r7, #5
 80088b8:	33ff      	adds	r3, #255	; 0xff
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	095b      	lsrs	r3, r3, #5
 80088be:	21ec      	movs	r1, #236	; 0xec
 80088c0:	187a      	adds	r2, r7, r1
 80088c2:	6013      	str	r3, [r2, #0]
 80088c4:	1d7b      	adds	r3, r7, #5
 80088c6:	33ff      	adds	r3, #255	; 0xff
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	221f      	movs	r2, #31
 80088cc:	4013      	ands	r3, r2
 80088ce:	d104      	bne.n	80088da <USB_EPStartXfer+0x926>
 80088d0:	187b      	adds	r3, r7, r1
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	3b01      	subs	r3, #1
 80088d6:	187a      	adds	r2, r7, r1
 80088d8:	6013      	str	r3, [r2, #0]
 80088da:	23ec      	movs	r3, #236	; 0xec
 80088dc:	18fb      	adds	r3, r7, r3
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	029b      	lsls	r3, r3, #10
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	4a5d      	ldr	r2, [pc, #372]	; (8008a5c <USB_EPStartXfer+0xaa8>)
 80088e8:	4313      	orrs	r3, r2
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088ee:	801a      	strh	r2, [r3, #0]
 80088f0:	e024      	b.n	800893c <USB_EPStartXfer+0x988>
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	785b      	ldrb	r3, [r3, #1]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d120      	bne.n	800893c <USB_EPStartXfer+0x988>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2184      	movs	r1, #132	; 0x84
 80088fe:	187a      	adds	r2, r7, r1
 8008900:	6013      	str	r3, [r2, #0]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2250      	movs	r2, #80	; 0x50
 8008906:	5a9b      	ldrh	r3, [r3, r2]
 8008908:	b29b      	uxth	r3, r3
 800890a:	001a      	movs	r2, r3
 800890c:	187b      	adds	r3, r7, r1
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	189b      	adds	r3, r3, r2
 8008912:	187a      	adds	r2, r7, r1
 8008914:	6013      	str	r3, [r2, #0]
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	00da      	lsls	r2, r3, #3
 800891c:	187b      	adds	r3, r7, r1
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	18d3      	adds	r3, r2, r3
 8008922:	4a4f      	ldr	r2, [pc, #316]	; (8008a60 <USB_EPStartXfer+0xaac>)
 8008924:	4694      	mov	ip, r2
 8008926:	4463      	add	r3, ip
 8008928:	2180      	movs	r1, #128	; 0x80
 800892a:	187a      	adds	r2, r7, r1
 800892c:	6013      	str	r3, [r2, #0]
 800892e:	1d7b      	adds	r3, r7, #5
 8008930:	33ff      	adds	r3, #255	; 0xff
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	b29a      	uxth	r2, r3
 8008936:	187b      	adds	r3, r7, r1
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800893c:	2076      	movs	r0, #118	; 0x76
 800893e:	183b      	adds	r3, r7, r0
 8008940:	683a      	ldr	r2, [r7, #0]
 8008942:	8912      	ldrh	r2, [r2, #8]
 8008944:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	6959      	ldr	r1, [r3, #20]
 800894a:	1d7b      	adds	r3, r7, #5
 800894c:	33ff      	adds	r3, #255	; 0xff
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	b29c      	uxth	r4, r3
 8008952:	183b      	adds	r3, r7, r0
 8008954:	881a      	ldrh	r2, [r3, #0]
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	0023      	movs	r3, r4
 800895a:	f000 fd1f 	bl	800939c <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	18d3      	adds	r3, r2, r3
 8008968:	881b      	ldrh	r3, [r3, #0]
 800896a:	b29a      	uxth	r2, r3
 800896c:	200a      	movs	r0, #10
 800896e:	183b      	adds	r3, r7, r0
 8008970:	493c      	ldr	r1, [pc, #240]	; (8008a64 <USB_EPStartXfer+0xab0>)
 8008972:	400a      	ands	r2, r1
 8008974:	801a      	strh	r2, [r3, #0]
 8008976:	183b      	adds	r3, r7, r0
 8008978:	183a      	adds	r2, r7, r0
 800897a:	8812      	ldrh	r2, [r2, #0]
 800897c:	2110      	movs	r1, #16
 800897e:	404a      	eors	r2, r1
 8008980:	801a      	strh	r2, [r3, #0]
 8008982:	183b      	adds	r3, r7, r0
 8008984:	183a      	adds	r2, r7, r0
 8008986:	8812      	ldrh	r2, [r2, #0]
 8008988:	2120      	movs	r1, #32
 800898a:	404a      	eors	r2, r1
 800898c:	801a      	strh	r2, [r3, #0]
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	18d3      	adds	r3, r2, r3
 8008998:	183a      	adds	r2, r7, r0
 800899a:	8812      	ldrh	r2, [r2, #0]
 800899c:	4932      	ldr	r1, [pc, #200]	; (8008a68 <USB_EPStartXfer+0xab4>)
 800899e:	430a      	orrs	r2, r1
 80089a0:	b292      	uxth	r2, r2
 80089a2:	801a      	strh	r2, [r3, #0]
 80089a4:	f000 fbaf 	bl	8009106 <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	7b1b      	ldrb	r3, [r3, #12]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d000      	beq.n	80089b2 <USB_EPStartXfer+0x9fe>
 80089b0:	e09e      	b.n	8008af0 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	699a      	ldr	r2, [r3, #24]
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d90d      	bls.n	80089da <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	1d7a      	adds	r2, r7, #5
 80089c4:	32ff      	adds	r2, #255	; 0xff
 80089c6:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	699a      	ldr	r2, [r3, #24]
 80089cc:	1d7b      	adds	r3, r7, #5
 80089ce:	33ff      	adds	r3, #255	; 0xff
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	1ad2      	subs	r2, r2, r3
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	619a      	str	r2, [r3, #24]
 80089d8:	e007      	b.n	80089ea <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	1d7a      	adds	r2, r7, #5
 80089e0:	32ff      	adds	r2, #255	; 0xff
 80089e2:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	2200      	movs	r2, #0
 80089e8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2190      	movs	r1, #144	; 0x90
 80089ee:	187a      	adds	r2, r7, r1
 80089f0:	6013      	str	r3, [r2, #0]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2250      	movs	r2, #80	; 0x50
 80089f6:	5a9b      	ldrh	r3, [r3, r2]
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	001a      	movs	r2, r3
 80089fc:	187b      	adds	r3, r7, r1
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	189b      	adds	r3, r3, r2
 8008a02:	187a      	adds	r2, r7, r1
 8008a04:	6013      	str	r3, [r2, #0]
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	00da      	lsls	r2, r3, #3
 8008a0c:	187b      	adds	r3, r7, r1
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	18d3      	adds	r3, r2, r3
 8008a12:	4a10      	ldr	r2, [pc, #64]	; (8008a54 <USB_EPStartXfer+0xaa0>)
 8008a14:	4694      	mov	ip, r2
 8008a16:	4463      	add	r3, ip
 8008a18:	218c      	movs	r1, #140	; 0x8c
 8008a1a:	187a      	adds	r2, r7, r1
 8008a1c:	6013      	str	r3, [r2, #0]
 8008a1e:	1d7b      	adds	r3, r7, #5
 8008a20:	33ff      	adds	r3, #255	; 0xff
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d121      	bne.n	8008a6c <USB_EPStartXfer+0xab8>
 8008a28:	187b      	adds	r3, r7, r1
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	881b      	ldrh	r3, [r3, #0]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	4a09      	ldr	r2, [pc, #36]	; (8008a58 <USB_EPStartXfer+0xaa4>)
 8008a32:	4013      	ands	r3, r2
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	187b      	adds	r3, r7, r1
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	801a      	strh	r2, [r3, #0]
 8008a3c:	187b      	adds	r3, r7, r1
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	881b      	ldrh	r3, [r3, #0]
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	4a05      	ldr	r2, [pc, #20]	; (8008a5c <USB_EPStartXfer+0xaa8>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	187b      	adds	r3, r7, r1
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	801a      	strh	r2, [r3, #0]
 8008a50:	e334      	b.n	80090bc <USB_EPStartXfer+0x1108>
 8008a52:	46c0      	nop			; (mov r8, r8)
 8008a54:	00000406 	.word	0x00000406
 8008a58:	ffff83ff 	.word	0xffff83ff
 8008a5c:	ffff8000 	.word	0xffff8000
 8008a60:	00000402 	.word	0x00000402
 8008a64:	ffff8fbf 	.word	0xffff8fbf
 8008a68:	ffff8080 	.word	0xffff8080
 8008a6c:	1d7b      	adds	r3, r7, #5
 8008a6e:	33ff      	adds	r3, #255	; 0xff
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2b3e      	cmp	r3, #62	; 0x3e
 8008a74:	d81c      	bhi.n	8008ab0 <USB_EPStartXfer+0xafc>
 8008a76:	1d7b      	adds	r3, r7, #5
 8008a78:	33ff      	adds	r3, #255	; 0xff
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	085b      	lsrs	r3, r3, #1
 8008a7e:	21e8      	movs	r1, #232	; 0xe8
 8008a80:	187a      	adds	r2, r7, r1
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	1d7b      	adds	r3, r7, #5
 8008a86:	33ff      	adds	r3, #255	; 0xff
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	d004      	beq.n	8008a9a <USB_EPStartXfer+0xae6>
 8008a90:	187b      	adds	r3, r7, r1
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3301      	adds	r3, #1
 8008a96:	187a      	adds	r2, r7, r1
 8008a98:	6013      	str	r3, [r2, #0]
 8008a9a:	23e8      	movs	r3, #232	; 0xe8
 8008a9c:	18fb      	adds	r3, r7, r3
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	029b      	lsls	r3, r3, #10
 8008aa4:	b29a      	uxth	r2, r3
 8008aa6:	238c      	movs	r3, #140	; 0x8c
 8008aa8:	18fb      	adds	r3, r7, r3
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	801a      	strh	r2, [r3, #0]
 8008aae:	e305      	b.n	80090bc <USB_EPStartXfer+0x1108>
 8008ab0:	1d7b      	adds	r3, r7, #5
 8008ab2:	33ff      	adds	r3, #255	; 0xff
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	095b      	lsrs	r3, r3, #5
 8008ab8:	21e8      	movs	r1, #232	; 0xe8
 8008aba:	187a      	adds	r2, r7, r1
 8008abc:	6013      	str	r3, [r2, #0]
 8008abe:	1d7b      	adds	r3, r7, #5
 8008ac0:	33ff      	adds	r3, #255	; 0xff
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	221f      	movs	r2, #31
 8008ac6:	4013      	ands	r3, r2
 8008ac8:	d104      	bne.n	8008ad4 <USB_EPStartXfer+0xb20>
 8008aca:	187b      	adds	r3, r7, r1
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3b01      	subs	r3, #1
 8008ad0:	187a      	adds	r2, r7, r1
 8008ad2:	6013      	str	r3, [r2, #0]
 8008ad4:	23e8      	movs	r3, #232	; 0xe8
 8008ad6:	18fb      	adds	r3, r7, r3
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	029b      	lsls	r3, r3, #10
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	4aca      	ldr	r2, [pc, #808]	; (8008e0c <USB_EPStartXfer+0xe58>)
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	b29a      	uxth	r2, r3
 8008ae6:	238c      	movs	r3, #140	; 0x8c
 8008ae8:	18fb      	adds	r3, r7, r3
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	801a      	strh	r2, [r3, #0]
 8008aee:	e2e5      	b.n	80090bc <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	78db      	ldrb	r3, [r3, #3]
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d000      	beq.n	8008afa <USB_EPStartXfer+0xb46>
 8008af8:	e16f      	b.n	8008dda <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	785b      	ldrb	r3, [r3, #1]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d16f      	bne.n	8008be2 <USB_EPStartXfer+0xc2e>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	21ac      	movs	r1, #172	; 0xac
 8008b06:	187a      	adds	r2, r7, r1
 8008b08:	6013      	str	r3, [r2, #0]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2250      	movs	r2, #80	; 0x50
 8008b0e:	5a9b      	ldrh	r3, [r3, r2]
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	001a      	movs	r2, r3
 8008b14:	187b      	adds	r3, r7, r1
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	189b      	adds	r3, r3, r2
 8008b1a:	187a      	adds	r2, r7, r1
 8008b1c:	6013      	str	r3, [r2, #0]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	00da      	lsls	r2, r3, #3
 8008b24:	187b      	adds	r3, r7, r1
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	18d3      	adds	r3, r2, r3
 8008b2a:	4ab9      	ldr	r2, [pc, #740]	; (8008e10 <USB_EPStartXfer+0xe5c>)
 8008b2c:	4694      	mov	ip, r2
 8008b2e:	4463      	add	r3, ip
 8008b30:	21a8      	movs	r1, #168	; 0xa8
 8008b32:	187a      	adds	r2, r7, r1
 8008b34:	6013      	str	r3, [r2, #0]
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d114      	bne.n	8008b68 <USB_EPStartXfer+0xbb4>
 8008b3e:	187b      	adds	r3, r7, r1
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	881b      	ldrh	r3, [r3, #0]
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	4ab3      	ldr	r2, [pc, #716]	; (8008e14 <USB_EPStartXfer+0xe60>)
 8008b48:	4013      	ands	r3, r2
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	187b      	adds	r3, r7, r1
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	801a      	strh	r2, [r3, #0]
 8008b52:	187b      	adds	r3, r7, r1
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	881b      	ldrh	r3, [r3, #0]
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	4aac      	ldr	r2, [pc, #688]	; (8008e0c <USB_EPStartXfer+0xe58>)
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	187b      	adds	r3, r7, r1
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	801a      	strh	r2, [r3, #0]
 8008b66:	e060      	b.n	8008c2a <USB_EPStartXfer+0xc76>
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	691b      	ldr	r3, [r3, #16]
 8008b6c:	2b3e      	cmp	r3, #62	; 0x3e
 8008b6e:	d81a      	bhi.n	8008ba6 <USB_EPStartXfer+0xbf2>
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	085b      	lsrs	r3, r3, #1
 8008b76:	21e4      	movs	r1, #228	; 0xe4
 8008b78:	187a      	adds	r2, r7, r1
 8008b7a:	6013      	str	r3, [r2, #0]
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	2201      	movs	r2, #1
 8008b82:	4013      	ands	r3, r2
 8008b84:	d004      	beq.n	8008b90 <USB_EPStartXfer+0xbdc>
 8008b86:	187b      	adds	r3, r7, r1
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	187a      	adds	r2, r7, r1
 8008b8e:	6013      	str	r3, [r2, #0]
 8008b90:	23e4      	movs	r3, #228	; 0xe4
 8008b92:	18fb      	adds	r3, r7, r3
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	029b      	lsls	r3, r3, #10
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	23a8      	movs	r3, #168	; 0xa8
 8008b9e:	18fb      	adds	r3, r7, r3
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	801a      	strh	r2, [r3, #0]
 8008ba4:	e041      	b.n	8008c2a <USB_EPStartXfer+0xc76>
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	691b      	ldr	r3, [r3, #16]
 8008baa:	095b      	lsrs	r3, r3, #5
 8008bac:	21e4      	movs	r1, #228	; 0xe4
 8008bae:	187a      	adds	r2, r7, r1
 8008bb0:	6013      	str	r3, [r2, #0]
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	221f      	movs	r2, #31
 8008bb8:	4013      	ands	r3, r2
 8008bba:	d104      	bne.n	8008bc6 <USB_EPStartXfer+0xc12>
 8008bbc:	187b      	adds	r3, r7, r1
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	187a      	adds	r2, r7, r1
 8008bc4:	6013      	str	r3, [r2, #0]
 8008bc6:	23e4      	movs	r3, #228	; 0xe4
 8008bc8:	18fb      	adds	r3, r7, r3
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	029b      	lsls	r3, r3, #10
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	4a8e      	ldr	r2, [pc, #568]	; (8008e0c <USB_EPStartXfer+0xe58>)
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	23a8      	movs	r3, #168	; 0xa8
 8008bda:	18fb      	adds	r3, r7, r3
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	801a      	strh	r2, [r3, #0]
 8008be0:	e023      	b.n	8008c2a <USB_EPStartXfer+0xc76>
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	785b      	ldrb	r3, [r3, #1]
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d11f      	bne.n	8008c2a <USB_EPStartXfer+0xc76>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	21b4      	movs	r1, #180	; 0xb4
 8008bee:	187a      	adds	r2, r7, r1
 8008bf0:	6013      	str	r3, [r2, #0]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2250      	movs	r2, #80	; 0x50
 8008bf6:	5a9b      	ldrh	r3, [r3, r2]
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	001a      	movs	r2, r3
 8008bfc:	187b      	adds	r3, r7, r1
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	189b      	adds	r3, r3, r2
 8008c02:	187a      	adds	r2, r7, r1
 8008c04:	6013      	str	r3, [r2, #0]
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	00da      	lsls	r2, r3, #3
 8008c0c:	187b      	adds	r3, r7, r1
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	18d3      	adds	r3, r2, r3
 8008c12:	4a7f      	ldr	r2, [pc, #508]	; (8008e10 <USB_EPStartXfer+0xe5c>)
 8008c14:	4694      	mov	ip, r2
 8008c16:	4463      	add	r3, ip
 8008c18:	21b0      	movs	r1, #176	; 0xb0
 8008c1a:	187a      	adds	r2, r7, r1
 8008c1c:	6013      	str	r3, [r2, #0]
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	b29a      	uxth	r2, r3
 8008c24:	187b      	adds	r3, r7, r1
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	801a      	strh	r2, [r3, #0]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	22a4      	movs	r2, #164	; 0xa4
 8008c2e:	18ba      	adds	r2, r7, r2
 8008c30:	6013      	str	r3, [r2, #0]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	785b      	ldrb	r3, [r3, #1]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d16f      	bne.n	8008d1a <USB_EPStartXfer+0xd66>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	219c      	movs	r1, #156	; 0x9c
 8008c3e:	187a      	adds	r2, r7, r1
 8008c40:	6013      	str	r3, [r2, #0]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2250      	movs	r2, #80	; 0x50
 8008c46:	5a9b      	ldrh	r3, [r3, r2]
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	001a      	movs	r2, r3
 8008c4c:	187b      	adds	r3, r7, r1
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	189b      	adds	r3, r3, r2
 8008c52:	187a      	adds	r2, r7, r1
 8008c54:	6013      	str	r3, [r2, #0]
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	00da      	lsls	r2, r3, #3
 8008c5c:	187b      	adds	r3, r7, r1
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	18d3      	adds	r3, r2, r3
 8008c62:	4a6d      	ldr	r2, [pc, #436]	; (8008e18 <USB_EPStartXfer+0xe64>)
 8008c64:	4694      	mov	ip, r2
 8008c66:	4463      	add	r3, ip
 8008c68:	2198      	movs	r1, #152	; 0x98
 8008c6a:	187a      	adds	r2, r7, r1
 8008c6c:	6013      	str	r3, [r2, #0]
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d114      	bne.n	8008ca0 <USB_EPStartXfer+0xcec>
 8008c76:	187b      	adds	r3, r7, r1
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	881b      	ldrh	r3, [r3, #0]
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	4a65      	ldr	r2, [pc, #404]	; (8008e14 <USB_EPStartXfer+0xe60>)
 8008c80:	4013      	ands	r3, r2
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	187b      	adds	r3, r7, r1
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	801a      	strh	r2, [r3, #0]
 8008c8a:	187b      	adds	r3, r7, r1
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	881b      	ldrh	r3, [r3, #0]
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	4a5e      	ldr	r2, [pc, #376]	; (8008e0c <USB_EPStartXfer+0xe58>)
 8008c94:	4313      	orrs	r3, r2
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	187b      	adds	r3, r7, r1
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	801a      	strh	r2, [r3, #0]
 8008c9e:	e05d      	b.n	8008d5c <USB_EPStartXfer+0xda8>
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	2b3e      	cmp	r3, #62	; 0x3e
 8008ca6:	d81a      	bhi.n	8008cde <USB_EPStartXfer+0xd2a>
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	085b      	lsrs	r3, r3, #1
 8008cae:	21e0      	movs	r1, #224	; 0xe0
 8008cb0:	187a      	adds	r2, r7, r1
 8008cb2:	6013      	str	r3, [r2, #0]
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	4013      	ands	r3, r2
 8008cbc:	d004      	beq.n	8008cc8 <USB_EPStartXfer+0xd14>
 8008cbe:	187b      	adds	r3, r7, r1
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	187a      	adds	r2, r7, r1
 8008cc6:	6013      	str	r3, [r2, #0]
 8008cc8:	23e0      	movs	r3, #224	; 0xe0
 8008cca:	18fb      	adds	r3, r7, r3
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	029b      	lsls	r3, r3, #10
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	2398      	movs	r3, #152	; 0x98
 8008cd6:	18fb      	adds	r3, r7, r3
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	801a      	strh	r2, [r3, #0]
 8008cdc:	e03e      	b.n	8008d5c <USB_EPStartXfer+0xda8>
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	095b      	lsrs	r3, r3, #5
 8008ce4:	21e0      	movs	r1, #224	; 0xe0
 8008ce6:	187a      	adds	r2, r7, r1
 8008ce8:	6013      	str	r3, [r2, #0]
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	221f      	movs	r2, #31
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	d104      	bne.n	8008cfe <USB_EPStartXfer+0xd4a>
 8008cf4:	187b      	adds	r3, r7, r1
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	187a      	adds	r2, r7, r1
 8008cfc:	6013      	str	r3, [r2, #0]
 8008cfe:	23e0      	movs	r3, #224	; 0xe0
 8008d00:	18fb      	adds	r3, r7, r3
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	029b      	lsls	r3, r3, #10
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	4a40      	ldr	r2, [pc, #256]	; (8008e0c <USB_EPStartXfer+0xe58>)
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	2398      	movs	r3, #152	; 0x98
 8008d12:	18fb      	adds	r3, r7, r3
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	801a      	strh	r2, [r3, #0]
 8008d18:	e020      	b.n	8008d5c <USB_EPStartXfer+0xda8>
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	785b      	ldrb	r3, [r3, #1]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d11c      	bne.n	8008d5c <USB_EPStartXfer+0xda8>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2250      	movs	r2, #80	; 0x50
 8008d26:	5a9b      	ldrh	r3, [r3, r2]
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	001a      	movs	r2, r3
 8008d2c:	21a4      	movs	r1, #164	; 0xa4
 8008d2e:	187b      	adds	r3, r7, r1
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	189b      	adds	r3, r3, r2
 8008d34:	187a      	adds	r2, r7, r1
 8008d36:	6013      	str	r3, [r2, #0]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	00da      	lsls	r2, r3, #3
 8008d3e:	187b      	adds	r3, r7, r1
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	18d3      	adds	r3, r2, r3
 8008d44:	4a34      	ldr	r2, [pc, #208]	; (8008e18 <USB_EPStartXfer+0xe64>)
 8008d46:	4694      	mov	ip, r2
 8008d48:	4463      	add	r3, ip
 8008d4a:	21a0      	movs	r1, #160	; 0xa0
 8008d4c:	187a      	adds	r2, r7, r1
 8008d4e:	6013      	str	r3, [r2, #0]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	b29a      	uxth	r2, r3
 8008d56:	187b      	adds	r3, r7, r1
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	69db      	ldr	r3, [r3, #28]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d100      	bne.n	8008d66 <USB_EPStartXfer+0xdb2>
 8008d64:	e1aa      	b.n	80090bc <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	18d2      	adds	r2, r2, r3
 8008d70:	2196      	movs	r1, #150	; 0x96
 8008d72:	187b      	adds	r3, r7, r1
 8008d74:	8812      	ldrh	r2, [r2, #0]
 8008d76:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008d78:	187b      	adds	r3, r7, r1
 8008d7a:	881a      	ldrh	r2, [r3, #0]
 8008d7c:	2380      	movs	r3, #128	; 0x80
 8008d7e:	01db      	lsls	r3, r3, #7
 8008d80:	4013      	ands	r3, r2
 8008d82:	d004      	beq.n	8008d8e <USB_EPStartXfer+0xdda>
 8008d84:	187b      	adds	r3, r7, r1
 8008d86:	881b      	ldrh	r3, [r3, #0]
 8008d88:	2240      	movs	r2, #64	; 0x40
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	d10d      	bne.n	8008daa <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008d8e:	2196      	movs	r1, #150	; 0x96
 8008d90:	187b      	adds	r3, r7, r1
 8008d92:	881a      	ldrh	r2, [r3, #0]
 8008d94:	2380      	movs	r3, #128	; 0x80
 8008d96:	01db      	lsls	r3, r3, #7
 8008d98:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008d9a:	d000      	beq.n	8008d9e <USB_EPStartXfer+0xdea>
 8008d9c:	e18e      	b.n	80090bc <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008d9e:	187b      	adds	r3, r7, r1
 8008da0:	881b      	ldrh	r3, [r3, #0]
 8008da2:	2240      	movs	r2, #64	; 0x40
 8008da4:	4013      	ands	r3, r2
 8008da6:	d000      	beq.n	8008daa <USB_EPStartXfer+0xdf6>
 8008da8:	e188      	b.n	80090bc <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	18d3      	adds	r3, r2, r3
 8008db4:	881b      	ldrh	r3, [r3, #0]
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	2094      	movs	r0, #148	; 0x94
 8008dba:	183b      	adds	r3, r7, r0
 8008dbc:	4917      	ldr	r1, [pc, #92]	; (8008e1c <USB_EPStartXfer+0xe68>)
 8008dbe:	400a      	ands	r2, r1
 8008dc0:	801a      	strh	r2, [r3, #0]
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	18d3      	adds	r3, r2, r3
 8008dcc:	183a      	adds	r2, r7, r0
 8008dce:	8812      	ldrh	r2, [r2, #0]
 8008dd0:	4913      	ldr	r1, [pc, #76]	; (8008e20 <USB_EPStartXfer+0xe6c>)
 8008dd2:	430a      	orrs	r2, r1
 8008dd4:	b292      	uxth	r2, r2
 8008dd6:	801a      	strh	r2, [r3, #0]
 8008dd8:	e170      	b.n	80090bc <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	78db      	ldrb	r3, [r3, #3]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d000      	beq.n	8008de4 <USB_EPStartXfer+0xe30>
 8008de2:	e169      	b.n	80090b8 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	699a      	ldr	r2, [r3, #24]
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d919      	bls.n	8008e24 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	1d7a      	adds	r2, r7, #5
 8008df6:	32ff      	adds	r2, #255	; 0xff
 8008df8:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	699a      	ldr	r2, [r3, #24]
 8008dfe:	1d7b      	adds	r3, r7, #5
 8008e00:	33ff      	adds	r3, #255	; 0xff
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	1ad2      	subs	r2, r2, r3
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	619a      	str	r2, [r3, #24]
 8008e0a:	e013      	b.n	8008e34 <USB_EPStartXfer+0xe80>
 8008e0c:	ffff8000 	.word	0xffff8000
 8008e10:	00000402 	.word	0x00000402
 8008e14:	ffff83ff 	.word	0xffff83ff
 8008e18:	00000406 	.word	0x00000406
 8008e1c:	ffff8f8f 	.word	0xffff8f8f
 8008e20:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	699b      	ldr	r3, [r3, #24]
 8008e28:	1d7a      	adds	r2, r7, #5
 8008e2a:	32ff      	adds	r2, #255	; 0xff
 8008e2c:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	2200      	movs	r2, #0
 8008e32:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	785b      	ldrb	r3, [r3, #1]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d000      	beq.n	8008e3e <USB_EPStartXfer+0xe8a>
 8008e3c:	e075      	b.n	8008f2a <USB_EPStartXfer+0xf76>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	21cc      	movs	r1, #204	; 0xcc
 8008e42:	187a      	adds	r2, r7, r1
 8008e44:	6013      	str	r3, [r2, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2250      	movs	r2, #80	; 0x50
 8008e4a:	5a9b      	ldrh	r3, [r3, r2]
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	001a      	movs	r2, r3
 8008e50:	187b      	adds	r3, r7, r1
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	189b      	adds	r3, r3, r2
 8008e56:	187a      	adds	r2, r7, r1
 8008e58:	6013      	str	r3, [r2, #0]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	00da      	lsls	r2, r3, #3
 8008e60:	187b      	adds	r3, r7, r1
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	18d3      	adds	r3, r2, r3
 8008e66:	4aaa      	ldr	r2, [pc, #680]	; (8009110 <USB_EPStartXfer+0x115c>)
 8008e68:	4694      	mov	ip, r2
 8008e6a:	4463      	add	r3, ip
 8008e6c:	21c8      	movs	r1, #200	; 0xc8
 8008e6e:	187a      	adds	r2, r7, r1
 8008e70:	6013      	str	r3, [r2, #0]
 8008e72:	1d7b      	adds	r3, r7, #5
 8008e74:	33ff      	adds	r3, #255	; 0xff
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d114      	bne.n	8008ea6 <USB_EPStartXfer+0xef2>
 8008e7c:	187b      	adds	r3, r7, r1
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	881b      	ldrh	r3, [r3, #0]
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	4aa3      	ldr	r2, [pc, #652]	; (8009114 <USB_EPStartXfer+0x1160>)
 8008e86:	4013      	ands	r3, r2
 8008e88:	b29a      	uxth	r2, r3
 8008e8a:	187b      	adds	r3, r7, r1
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	801a      	strh	r2, [r3, #0]
 8008e90:	187b      	adds	r3, r7, r1
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	881b      	ldrh	r3, [r3, #0]
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	4a9f      	ldr	r2, [pc, #636]	; (8009118 <USB_EPStartXfer+0x1164>)
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	187b      	adds	r3, r7, r1
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	801a      	strh	r2, [r3, #0]
 8008ea4:	e066      	b.n	8008f74 <USB_EPStartXfer+0xfc0>
 8008ea6:	1d7b      	adds	r3, r7, #5
 8008ea8:	33ff      	adds	r3, #255	; 0xff
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2b3e      	cmp	r3, #62	; 0x3e
 8008eae:	d81c      	bhi.n	8008eea <USB_EPStartXfer+0xf36>
 8008eb0:	1d7b      	adds	r3, r7, #5
 8008eb2:	33ff      	adds	r3, #255	; 0xff
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	085b      	lsrs	r3, r3, #1
 8008eb8:	21dc      	movs	r1, #220	; 0xdc
 8008eba:	187a      	adds	r2, r7, r1
 8008ebc:	6013      	str	r3, [r2, #0]
 8008ebe:	1d7b      	adds	r3, r7, #5
 8008ec0:	33ff      	adds	r3, #255	; 0xff
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	d004      	beq.n	8008ed4 <USB_EPStartXfer+0xf20>
 8008eca:	187b      	adds	r3, r7, r1
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	187a      	adds	r2, r7, r1
 8008ed2:	6013      	str	r3, [r2, #0]
 8008ed4:	23dc      	movs	r3, #220	; 0xdc
 8008ed6:	18fb      	adds	r3, r7, r3
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	029b      	lsls	r3, r3, #10
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	23c8      	movs	r3, #200	; 0xc8
 8008ee2:	18fb      	adds	r3, r7, r3
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	801a      	strh	r2, [r3, #0]
 8008ee8:	e044      	b.n	8008f74 <USB_EPStartXfer+0xfc0>
 8008eea:	1d7b      	adds	r3, r7, #5
 8008eec:	33ff      	adds	r3, #255	; 0xff
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	095b      	lsrs	r3, r3, #5
 8008ef2:	21dc      	movs	r1, #220	; 0xdc
 8008ef4:	187a      	adds	r2, r7, r1
 8008ef6:	6013      	str	r3, [r2, #0]
 8008ef8:	1d7b      	adds	r3, r7, #5
 8008efa:	33ff      	adds	r3, #255	; 0xff
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	221f      	movs	r2, #31
 8008f00:	4013      	ands	r3, r2
 8008f02:	d104      	bne.n	8008f0e <USB_EPStartXfer+0xf5a>
 8008f04:	187b      	adds	r3, r7, r1
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	187a      	adds	r2, r7, r1
 8008f0c:	6013      	str	r3, [r2, #0]
 8008f0e:	23dc      	movs	r3, #220	; 0xdc
 8008f10:	18fb      	adds	r3, r7, r3
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	029b      	lsls	r3, r3, #10
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	4a7f      	ldr	r2, [pc, #508]	; (8009118 <USB_EPStartXfer+0x1164>)
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	23c8      	movs	r3, #200	; 0xc8
 8008f22:	18fb      	adds	r3, r7, r3
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	801a      	strh	r2, [r3, #0]
 8008f28:	e024      	b.n	8008f74 <USB_EPStartXfer+0xfc0>
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	785b      	ldrb	r3, [r3, #1]
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d120      	bne.n	8008f74 <USB_EPStartXfer+0xfc0>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	21d4      	movs	r1, #212	; 0xd4
 8008f36:	187a      	adds	r2, r7, r1
 8008f38:	6013      	str	r3, [r2, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2250      	movs	r2, #80	; 0x50
 8008f3e:	5a9b      	ldrh	r3, [r3, r2]
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	001a      	movs	r2, r3
 8008f44:	187b      	adds	r3, r7, r1
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	189b      	adds	r3, r3, r2
 8008f4a:	187a      	adds	r2, r7, r1
 8008f4c:	6013      	str	r3, [r2, #0]
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	00da      	lsls	r2, r3, #3
 8008f54:	187b      	adds	r3, r7, r1
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	18d3      	adds	r3, r2, r3
 8008f5a:	4a6d      	ldr	r2, [pc, #436]	; (8009110 <USB_EPStartXfer+0x115c>)
 8008f5c:	4694      	mov	ip, r2
 8008f5e:	4463      	add	r3, ip
 8008f60:	21d0      	movs	r1, #208	; 0xd0
 8008f62:	187a      	adds	r2, r7, r1
 8008f64:	6013      	str	r3, [r2, #0]
 8008f66:	1d7b      	adds	r3, r7, #5
 8008f68:	33ff      	adds	r3, #255	; 0xff
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	187b      	adds	r3, r7, r1
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	801a      	strh	r2, [r3, #0]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	22c4      	movs	r2, #196	; 0xc4
 8008f78:	18ba      	adds	r2, r7, r2
 8008f7a:	6013      	str	r3, [r2, #0]
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	785b      	ldrb	r3, [r3, #1]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d000      	beq.n	8008f86 <USB_EPStartXfer+0xfd2>
 8008f84:	e075      	b.n	8009072 <USB_EPStartXfer+0x10be>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	21bc      	movs	r1, #188	; 0xbc
 8008f8a:	187a      	adds	r2, r7, r1
 8008f8c:	6013      	str	r3, [r2, #0]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2250      	movs	r2, #80	; 0x50
 8008f92:	5a9b      	ldrh	r3, [r3, r2]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	001a      	movs	r2, r3
 8008f98:	187b      	adds	r3, r7, r1
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	189b      	adds	r3, r3, r2
 8008f9e:	187a      	adds	r2, r7, r1
 8008fa0:	6013      	str	r3, [r2, #0]
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	00da      	lsls	r2, r3, #3
 8008fa8:	187b      	adds	r3, r7, r1
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	18d3      	adds	r3, r2, r3
 8008fae:	4a5b      	ldr	r2, [pc, #364]	; (800911c <USB_EPStartXfer+0x1168>)
 8008fb0:	4694      	mov	ip, r2
 8008fb2:	4463      	add	r3, ip
 8008fb4:	21b8      	movs	r1, #184	; 0xb8
 8008fb6:	187a      	adds	r2, r7, r1
 8008fb8:	6013      	str	r3, [r2, #0]
 8008fba:	1d7b      	adds	r3, r7, #5
 8008fbc:	33ff      	adds	r3, #255	; 0xff
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d114      	bne.n	8008fee <USB_EPStartXfer+0x103a>
 8008fc4:	187b      	adds	r3, r7, r1
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	881b      	ldrh	r3, [r3, #0]
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	4a51      	ldr	r2, [pc, #324]	; (8009114 <USB_EPStartXfer+0x1160>)
 8008fce:	4013      	ands	r3, r2
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	187b      	adds	r3, r7, r1
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	801a      	strh	r2, [r3, #0]
 8008fd8:	187b      	adds	r3, r7, r1
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	881b      	ldrh	r3, [r3, #0]
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	4a4d      	ldr	r2, [pc, #308]	; (8009118 <USB_EPStartXfer+0x1164>)
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	187b      	adds	r3, r7, r1
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	801a      	strh	r2, [r3, #0]
 8008fec:	e066      	b.n	80090bc <USB_EPStartXfer+0x1108>
 8008fee:	1d7b      	adds	r3, r7, #5
 8008ff0:	33ff      	adds	r3, #255	; 0xff
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	2b3e      	cmp	r3, #62	; 0x3e
 8008ff6:	d81c      	bhi.n	8009032 <USB_EPStartXfer+0x107e>
 8008ff8:	1d7b      	adds	r3, r7, #5
 8008ffa:	33ff      	adds	r3, #255	; 0xff
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	085b      	lsrs	r3, r3, #1
 8009000:	21d8      	movs	r1, #216	; 0xd8
 8009002:	187a      	adds	r2, r7, r1
 8009004:	6013      	str	r3, [r2, #0]
 8009006:	1d7b      	adds	r3, r7, #5
 8009008:	33ff      	adds	r3, #255	; 0xff
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2201      	movs	r2, #1
 800900e:	4013      	ands	r3, r2
 8009010:	d004      	beq.n	800901c <USB_EPStartXfer+0x1068>
 8009012:	187b      	adds	r3, r7, r1
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	3301      	adds	r3, #1
 8009018:	187a      	adds	r2, r7, r1
 800901a:	6013      	str	r3, [r2, #0]
 800901c:	23d8      	movs	r3, #216	; 0xd8
 800901e:	18fb      	adds	r3, r7, r3
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	b29b      	uxth	r3, r3
 8009024:	029b      	lsls	r3, r3, #10
 8009026:	b29a      	uxth	r2, r3
 8009028:	23b8      	movs	r3, #184	; 0xb8
 800902a:	18fb      	adds	r3, r7, r3
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	801a      	strh	r2, [r3, #0]
 8009030:	e044      	b.n	80090bc <USB_EPStartXfer+0x1108>
 8009032:	1d7b      	adds	r3, r7, #5
 8009034:	33ff      	adds	r3, #255	; 0xff
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	095b      	lsrs	r3, r3, #5
 800903a:	21d8      	movs	r1, #216	; 0xd8
 800903c:	187a      	adds	r2, r7, r1
 800903e:	6013      	str	r3, [r2, #0]
 8009040:	1d7b      	adds	r3, r7, #5
 8009042:	33ff      	adds	r3, #255	; 0xff
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	221f      	movs	r2, #31
 8009048:	4013      	ands	r3, r2
 800904a:	d104      	bne.n	8009056 <USB_EPStartXfer+0x10a2>
 800904c:	187b      	adds	r3, r7, r1
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3b01      	subs	r3, #1
 8009052:	187a      	adds	r2, r7, r1
 8009054:	6013      	str	r3, [r2, #0]
 8009056:	23d8      	movs	r3, #216	; 0xd8
 8009058:	18fb      	adds	r3, r7, r3
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	b29b      	uxth	r3, r3
 800905e:	029b      	lsls	r3, r3, #10
 8009060:	b29b      	uxth	r3, r3
 8009062:	4a2d      	ldr	r2, [pc, #180]	; (8009118 <USB_EPStartXfer+0x1164>)
 8009064:	4313      	orrs	r3, r2
 8009066:	b29a      	uxth	r2, r3
 8009068:	23b8      	movs	r3, #184	; 0xb8
 800906a:	18fb      	adds	r3, r7, r3
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	801a      	strh	r2, [r3, #0]
 8009070:	e024      	b.n	80090bc <USB_EPStartXfer+0x1108>
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	785b      	ldrb	r3, [r3, #1]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d120      	bne.n	80090bc <USB_EPStartXfer+0x1108>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2250      	movs	r2, #80	; 0x50
 800907e:	5a9b      	ldrh	r3, [r3, r2]
 8009080:	b29b      	uxth	r3, r3
 8009082:	001a      	movs	r2, r3
 8009084:	21c4      	movs	r1, #196	; 0xc4
 8009086:	187b      	adds	r3, r7, r1
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	189b      	adds	r3, r3, r2
 800908c:	187a      	adds	r2, r7, r1
 800908e:	6013      	str	r3, [r2, #0]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	00da      	lsls	r2, r3, #3
 8009096:	187b      	adds	r3, r7, r1
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	18d3      	adds	r3, r2, r3
 800909c:	4a1f      	ldr	r2, [pc, #124]	; (800911c <USB_EPStartXfer+0x1168>)
 800909e:	4694      	mov	ip, r2
 80090a0:	4463      	add	r3, ip
 80090a2:	21c0      	movs	r1, #192	; 0xc0
 80090a4:	187a      	adds	r2, r7, r1
 80090a6:	6013      	str	r3, [r2, #0]
 80090a8:	1d7b      	adds	r3, r7, #5
 80090aa:	33ff      	adds	r3, #255	; 0xff
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	187b      	adds	r3, r7, r1
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	801a      	strh	r2, [r3, #0]
 80090b6:	e001      	b.n	80090bc <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	e025      	b.n	8009108 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	781b      	ldrb	r3, [r3, #0]
 80090c2:	009b      	lsls	r3, r3, #2
 80090c4:	18d3      	adds	r3, r2, r3
 80090c6:	881b      	ldrh	r3, [r3, #0]
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	208a      	movs	r0, #138	; 0x8a
 80090cc:	183b      	adds	r3, r7, r0
 80090ce:	4914      	ldr	r1, [pc, #80]	; (8009120 <USB_EPStartXfer+0x116c>)
 80090d0:	400a      	ands	r2, r1
 80090d2:	801a      	strh	r2, [r3, #0]
 80090d4:	183b      	adds	r3, r7, r0
 80090d6:	183a      	adds	r2, r7, r0
 80090d8:	8812      	ldrh	r2, [r2, #0]
 80090da:	2180      	movs	r1, #128	; 0x80
 80090dc:	0149      	lsls	r1, r1, #5
 80090de:	404a      	eors	r2, r1
 80090e0:	801a      	strh	r2, [r3, #0]
 80090e2:	183b      	adds	r3, r7, r0
 80090e4:	183a      	adds	r2, r7, r0
 80090e6:	8812      	ldrh	r2, [r2, #0]
 80090e8:	2180      	movs	r1, #128	; 0x80
 80090ea:	0189      	lsls	r1, r1, #6
 80090ec:	404a      	eors	r2, r1
 80090ee:	801a      	strh	r2, [r3, #0]
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	18d3      	adds	r3, r2, r3
 80090fa:	183a      	adds	r2, r7, r0
 80090fc:	8812      	ldrh	r2, [r2, #0]
 80090fe:	4909      	ldr	r1, [pc, #36]	; (8009124 <USB_EPStartXfer+0x1170>)
 8009100:	430a      	orrs	r2, r1
 8009102:	b292      	uxth	r2, r2
 8009104:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	0018      	movs	r0, r3
 800910a:	46bd      	mov	sp, r7
 800910c:	b043      	add	sp, #268	; 0x10c
 800910e:	bd90      	pop	{r4, r7, pc}
 8009110:	00000402 	.word	0x00000402
 8009114:	ffff83ff 	.word	0xffff83ff
 8009118:	ffff8000 	.word	0xffff8000
 800911c:	00000406 	.word	0x00000406
 8009120:	ffffbf8f 	.word	0xffffbf8f
 8009124:	ffff8080 	.word	0xffff8080

08009128 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	785b      	ldrb	r3, [r3, #1]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d01d      	beq.n	8009176 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	18d3      	adds	r3, r2, r3
 8009144:	881b      	ldrh	r3, [r3, #0]
 8009146:	b29a      	uxth	r2, r3
 8009148:	200c      	movs	r0, #12
 800914a:	183b      	adds	r3, r7, r0
 800914c:	491b      	ldr	r1, [pc, #108]	; (80091bc <USB_EPSetStall+0x94>)
 800914e:	400a      	ands	r2, r1
 8009150:	801a      	strh	r2, [r3, #0]
 8009152:	183b      	adds	r3, r7, r0
 8009154:	183a      	adds	r2, r7, r0
 8009156:	8812      	ldrh	r2, [r2, #0]
 8009158:	2110      	movs	r1, #16
 800915a:	404a      	eors	r2, r1
 800915c:	801a      	strh	r2, [r3, #0]
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	18d3      	adds	r3, r2, r3
 8009168:	183a      	adds	r2, r7, r0
 800916a:	8812      	ldrh	r2, [r2, #0]
 800916c:	4914      	ldr	r1, [pc, #80]	; (80091c0 <USB_EPSetStall+0x98>)
 800916e:	430a      	orrs	r2, r1
 8009170:	b292      	uxth	r2, r2
 8009172:	801a      	strh	r2, [r3, #0]
 8009174:	e01d      	b.n	80091b2 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	18d3      	adds	r3, r2, r3
 8009180:	881b      	ldrh	r3, [r3, #0]
 8009182:	b29a      	uxth	r2, r3
 8009184:	200e      	movs	r0, #14
 8009186:	183b      	adds	r3, r7, r0
 8009188:	490e      	ldr	r1, [pc, #56]	; (80091c4 <USB_EPSetStall+0x9c>)
 800918a:	400a      	ands	r2, r1
 800918c:	801a      	strh	r2, [r3, #0]
 800918e:	183b      	adds	r3, r7, r0
 8009190:	183a      	adds	r2, r7, r0
 8009192:	8812      	ldrh	r2, [r2, #0]
 8009194:	2180      	movs	r1, #128	; 0x80
 8009196:	0149      	lsls	r1, r1, #5
 8009198:	404a      	eors	r2, r1
 800919a:	801a      	strh	r2, [r3, #0]
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	18d3      	adds	r3, r2, r3
 80091a6:	183a      	adds	r2, r7, r0
 80091a8:	8812      	ldrh	r2, [r2, #0]
 80091aa:	4905      	ldr	r1, [pc, #20]	; (80091c0 <USB_EPSetStall+0x98>)
 80091ac:	430a      	orrs	r2, r1
 80091ae:	b292      	uxth	r2, r2
 80091b0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	0018      	movs	r0, r3
 80091b6:	46bd      	mov	sp, r7
 80091b8:	b004      	add	sp, #16
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	ffff8fbf 	.word	0xffff8fbf
 80091c0:	ffff8080 	.word	0xffff8080
 80091c4:	ffffbf8f 	.word	0xffffbf8f

080091c8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b086      	sub	sp, #24
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	7b1b      	ldrb	r3, [r3, #12]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d000      	beq.n	80091dc <USB_EPClearStall+0x14>
 80091da:	e095      	b.n	8009308 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	785b      	ldrb	r3, [r3, #1]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d046      	beq.n	8009272 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	18d2      	adds	r2, r2, r3
 80091ee:	2110      	movs	r1, #16
 80091f0:	187b      	adds	r3, r7, r1
 80091f2:	8812      	ldrh	r2, [r2, #0]
 80091f4:	801a      	strh	r2, [r3, #0]
 80091f6:	187b      	adds	r3, r7, r1
 80091f8:	881b      	ldrh	r3, [r3, #0]
 80091fa:	2240      	movs	r2, #64	; 0x40
 80091fc:	4013      	ands	r3, r2
 80091fe:	d016      	beq.n	800922e <USB_EPClearStall+0x66>
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	18d3      	adds	r3, r2, r3
 800920a:	881b      	ldrh	r3, [r3, #0]
 800920c:	b29a      	uxth	r2, r3
 800920e:	200e      	movs	r0, #14
 8009210:	183b      	adds	r3, r7, r0
 8009212:	4940      	ldr	r1, [pc, #256]	; (8009314 <USB_EPClearStall+0x14c>)
 8009214:	400a      	ands	r2, r1
 8009216:	801a      	strh	r2, [r3, #0]
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	18d3      	adds	r3, r2, r3
 8009222:	183a      	adds	r2, r7, r0
 8009224:	8812      	ldrh	r2, [r2, #0]
 8009226:	493c      	ldr	r1, [pc, #240]	; (8009318 <USB_EPClearStall+0x150>)
 8009228:	430a      	orrs	r2, r1
 800922a:	b292      	uxth	r2, r2
 800922c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	78db      	ldrb	r3, [r3, #3]
 8009232:	2b01      	cmp	r3, #1
 8009234:	d068      	beq.n	8009308 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	18d3      	adds	r3, r2, r3
 8009240:	881b      	ldrh	r3, [r3, #0]
 8009242:	b29a      	uxth	r2, r3
 8009244:	200c      	movs	r0, #12
 8009246:	183b      	adds	r3, r7, r0
 8009248:	4934      	ldr	r1, [pc, #208]	; (800931c <USB_EPClearStall+0x154>)
 800924a:	400a      	ands	r2, r1
 800924c:	801a      	strh	r2, [r3, #0]
 800924e:	183b      	adds	r3, r7, r0
 8009250:	183a      	adds	r2, r7, r0
 8009252:	8812      	ldrh	r2, [r2, #0]
 8009254:	2120      	movs	r1, #32
 8009256:	404a      	eors	r2, r1
 8009258:	801a      	strh	r2, [r3, #0]
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	18d3      	adds	r3, r2, r3
 8009264:	183a      	adds	r2, r7, r0
 8009266:	8812      	ldrh	r2, [r2, #0]
 8009268:	492d      	ldr	r1, [pc, #180]	; (8009320 <USB_EPClearStall+0x158>)
 800926a:	430a      	orrs	r2, r1
 800926c:	b292      	uxth	r2, r2
 800926e:	801a      	strh	r2, [r3, #0]
 8009270:	e04a      	b.n	8009308 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	18d2      	adds	r2, r2, r3
 800927c:	2116      	movs	r1, #22
 800927e:	187b      	adds	r3, r7, r1
 8009280:	8812      	ldrh	r2, [r2, #0]
 8009282:	801a      	strh	r2, [r3, #0]
 8009284:	187b      	adds	r3, r7, r1
 8009286:	881a      	ldrh	r2, [r3, #0]
 8009288:	2380      	movs	r3, #128	; 0x80
 800928a:	01db      	lsls	r3, r3, #7
 800928c:	4013      	ands	r3, r2
 800928e:	d016      	beq.n	80092be <USB_EPClearStall+0xf6>
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	18d3      	adds	r3, r2, r3
 800929a:	881b      	ldrh	r3, [r3, #0]
 800929c:	b29a      	uxth	r2, r3
 800929e:	2014      	movs	r0, #20
 80092a0:	183b      	adds	r3, r7, r0
 80092a2:	491c      	ldr	r1, [pc, #112]	; (8009314 <USB_EPClearStall+0x14c>)
 80092a4:	400a      	ands	r2, r1
 80092a6:	801a      	strh	r2, [r3, #0]
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	18d3      	adds	r3, r2, r3
 80092b2:	183a      	adds	r2, r7, r0
 80092b4:	8812      	ldrh	r2, [r2, #0]
 80092b6:	491b      	ldr	r1, [pc, #108]	; (8009324 <USB_EPClearStall+0x15c>)
 80092b8:	430a      	orrs	r2, r1
 80092ba:	b292      	uxth	r2, r2
 80092bc:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	18d3      	adds	r3, r2, r3
 80092c8:	881b      	ldrh	r3, [r3, #0]
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	2012      	movs	r0, #18
 80092ce:	183b      	adds	r3, r7, r0
 80092d0:	4915      	ldr	r1, [pc, #84]	; (8009328 <USB_EPClearStall+0x160>)
 80092d2:	400a      	ands	r2, r1
 80092d4:	801a      	strh	r2, [r3, #0]
 80092d6:	183b      	adds	r3, r7, r0
 80092d8:	183a      	adds	r2, r7, r0
 80092da:	8812      	ldrh	r2, [r2, #0]
 80092dc:	2180      	movs	r1, #128	; 0x80
 80092de:	0149      	lsls	r1, r1, #5
 80092e0:	404a      	eors	r2, r1
 80092e2:	801a      	strh	r2, [r3, #0]
 80092e4:	183b      	adds	r3, r7, r0
 80092e6:	183a      	adds	r2, r7, r0
 80092e8:	8812      	ldrh	r2, [r2, #0]
 80092ea:	2180      	movs	r1, #128	; 0x80
 80092ec:	0189      	lsls	r1, r1, #6
 80092ee:	404a      	eors	r2, r1
 80092f0:	801a      	strh	r2, [r3, #0]
 80092f2:	687a      	ldr	r2, [r7, #4]
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	18d3      	adds	r3, r2, r3
 80092fc:	183a      	adds	r2, r7, r0
 80092fe:	8812      	ldrh	r2, [r2, #0]
 8009300:	4907      	ldr	r1, [pc, #28]	; (8009320 <USB_EPClearStall+0x158>)
 8009302:	430a      	orrs	r2, r1
 8009304:	b292      	uxth	r2, r2
 8009306:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8009308:	2300      	movs	r3, #0
}
 800930a:	0018      	movs	r0, r3
 800930c:	46bd      	mov	sp, r7
 800930e:	b006      	add	sp, #24
 8009310:	bd80      	pop	{r7, pc}
 8009312:	46c0      	nop			; (mov r8, r8)
 8009314:	ffff8f8f 	.word	0xffff8f8f
 8009318:	ffff80c0 	.word	0xffff80c0
 800931c:	ffff8fbf 	.word	0xffff8fbf
 8009320:	ffff8080 	.word	0xffff8080
 8009324:	ffffc080 	.word	0xffffc080
 8009328:	ffffbf8f 	.word	0xffffbf8f

0800932c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	000a      	movs	r2, r1
 8009336:	1cfb      	adds	r3, r7, #3
 8009338:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800933a:	1cfb      	adds	r3, r7, #3
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d103      	bne.n	800934a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	224c      	movs	r2, #76	; 0x4c
 8009346:	2180      	movs	r1, #128	; 0x80
 8009348:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	0018      	movs	r0, r3
 800934e:	46bd      	mov	sp, r7
 8009350:	b002      	add	sp, #8
 8009352:	bd80      	pop	{r7, pc}

08009354 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2258      	movs	r2, #88	; 0x58
 8009360:	5a9b      	ldrh	r3, [r3, r2]
 8009362:	b29b      	uxth	r3, r3
 8009364:	4a05      	ldr	r2, [pc, #20]	; (800937c <USB_DevConnect+0x28>)
 8009366:	4313      	orrs	r3, r2
 8009368:	b299      	uxth	r1, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2258      	movs	r2, #88	; 0x58
 800936e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	0018      	movs	r0, r3
 8009374:	46bd      	mov	sp, r7
 8009376:	b002      	add	sp, #8
 8009378:	bd80      	pop	{r7, pc}
 800937a:	46c0      	nop			; (mov r8, r8)
 800937c:	ffff8000 	.word	0xffff8000

08009380 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2244      	movs	r2, #68	; 0x44
 800938c:	5a9b      	ldrh	r3, [r3, r2]
 800938e:	b29b      	uxth	r3, r3
 8009390:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009392:	68fb      	ldr	r3, [r7, #12]
}
 8009394:	0018      	movs	r0, r3
 8009396:	46bd      	mov	sp, r7
 8009398:	b004      	add	sp, #16
 800939a:	bd80      	pop	{r7, pc}

0800939c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b08c      	sub	sp, #48	; 0x30
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	0019      	movs	r1, r3
 80093a8:	1dbb      	adds	r3, r7, #6
 80093aa:	801a      	strh	r2, [r3, #0]
 80093ac:	1d3b      	adds	r3, r7, #4
 80093ae:	1c0a      	adds	r2, r1, #0
 80093b0:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80093b2:	1d3b      	adds	r3, r7, #4
 80093b4:	881b      	ldrh	r3, [r3, #0]
 80093b6:	3301      	adds	r3, #1
 80093b8:	085b      	lsrs	r3, r3, #1
 80093ba:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80093c4:	1dbb      	adds	r3, r7, #6
 80093c6:	881a      	ldrh	r2, [r3, #0]
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	18d3      	adds	r3, r2, r3
 80093cc:	2280      	movs	r2, #128	; 0x80
 80093ce:	00d2      	lsls	r2, r2, #3
 80093d0:	4694      	mov	ip, r2
 80093d2:	4463      	add	r3, ip
 80093d4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80093d6:	6a3b      	ldr	r3, [r7, #32]
 80093d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093da:	e01b      	b.n	8009414 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80093dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80093e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e4:	3301      	adds	r3, #1
 80093e6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80093e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	021b      	lsls	r3, r3, #8
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	001a      	movs	r2, r3
 80093f4:	69bb      	ldr	r3, [r7, #24]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	b29a      	uxth	r2, r3
 80093fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009400:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009404:	3302      	adds	r3, #2
 8009406:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8009408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940a:	3301      	adds	r3, #1
 800940c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800940e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009410:	3b01      	subs	r3, #1
 8009412:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009416:	2b00      	cmp	r3, #0
 8009418:	d1e0      	bne.n	80093dc <USB_WritePMA+0x40>
  }
}
 800941a:	46c0      	nop			; (mov r8, r8)
 800941c:	46c0      	nop			; (mov r8, r8)
 800941e:	46bd      	mov	sp, r7
 8009420:	b00c      	add	sp, #48	; 0x30
 8009422:	bd80      	pop	{r7, pc}

08009424 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b08a      	sub	sp, #40	; 0x28
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	0019      	movs	r1, r3
 8009430:	1dbb      	adds	r3, r7, #6
 8009432:	801a      	strh	r2, [r3, #0]
 8009434:	1d3b      	adds	r3, r7, #4
 8009436:	1c0a      	adds	r2, r1, #0
 8009438:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800943a:	1d3b      	adds	r3, r7, #4
 800943c:	881b      	ldrh	r3, [r3, #0]
 800943e:	085b      	lsrs	r3, r3, #1
 8009440:	b29b      	uxth	r3, r3
 8009442:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800944c:	1dbb      	adds	r3, r7, #6
 800944e:	881a      	ldrh	r2, [r3, #0]
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	18d3      	adds	r3, r2, r3
 8009454:	2280      	movs	r2, #128	; 0x80
 8009456:	00d2      	lsls	r2, r2, #3
 8009458:	4694      	mov	ip, r2
 800945a:	4463      	add	r3, ip
 800945c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800945e:	69bb      	ldr	r3, [r7, #24]
 8009460:	627b      	str	r3, [r7, #36]	; 0x24
 8009462:	e018      	b.n	8009496 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8009464:	6a3b      	ldr	r3, [r7, #32]
 8009466:	881b      	ldrh	r3, [r3, #0]
 8009468:	b29b      	uxth	r3, r3
 800946a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800946c:	6a3b      	ldr	r3, [r7, #32]
 800946e:	3302      	adds	r3, #2
 8009470:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	b2da      	uxtb	r2, r3
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	3301      	adds	r3, #1
 800947e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	0a1b      	lsrs	r3, r3, #8
 8009484:	b2da      	uxtb	r2, r3
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	3301      	adds	r3, #1
 800948e:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8009490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009492:	3b01      	subs	r3, #1
 8009494:	627b      	str	r3, [r7, #36]	; 0x24
 8009496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1e3      	bne.n	8009464 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800949c:	1d3b      	adds	r3, r7, #4
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	2201      	movs	r2, #1
 80094a2:	4013      	ands	r3, r2
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d007      	beq.n	80094ba <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 80094aa:	6a3b      	ldr	r3, [r7, #32]
 80094ac:	881b      	ldrh	r3, [r3, #0]
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	b2da      	uxtb	r2, r3
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	701a      	strb	r2, [r3, #0]
  }
}
 80094ba:	46c0      	nop			; (mov r8, r8)
 80094bc:	46bd      	mov	sp, r7
 80094be:	b00a      	add	sp, #40	; 0x28
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b084      	sub	sp, #16
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	000a      	movs	r2, r1
 80094cc:	1cfb      	adds	r3, r7, #3
 80094ce:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80094d0:	230f      	movs	r3, #15
 80094d2:	18fb      	adds	r3, r7, r3
 80094d4:	2200      	movs	r2, #0
 80094d6:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	7c1b      	ldrb	r3, [r3, #16]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d116      	bne.n	800950e <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80094e0:	2380      	movs	r3, #128	; 0x80
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	2202      	movs	r2, #2
 80094e8:	2181      	movs	r1, #129	; 0x81
 80094ea:	f002 f8b4 	bl	800b656 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2201      	movs	r2, #1
 80094f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80094f4:	2380      	movs	r3, #128	; 0x80
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	2202      	movs	r2, #2
 80094fc:	2101      	movs	r1, #1
 80094fe:	f002 f8aa 	bl	800b656 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	23b6      	movs	r3, #182	; 0xb6
 8009506:	005b      	lsls	r3, r3, #1
 8009508:	2101      	movs	r1, #1
 800950a:	50d1      	str	r1, [r2, r3]
 800950c:	e013      	b.n	8009536 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	2340      	movs	r3, #64	; 0x40
 8009512:	2202      	movs	r2, #2
 8009514:	2181      	movs	r1, #129	; 0x81
 8009516:	f002 f89e 	bl	800b656 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2201      	movs	r2, #1
 800951e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	2340      	movs	r3, #64	; 0x40
 8009524:	2202      	movs	r2, #2
 8009526:	2101      	movs	r1, #1
 8009528:	f002 f895 	bl	800b656 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	23b6      	movs	r3, #182	; 0xb6
 8009530:	005b      	lsls	r3, r3, #1
 8009532:	2101      	movs	r1, #1
 8009534:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	2308      	movs	r3, #8
 800953a:	2203      	movs	r2, #3
 800953c:	2182      	movs	r1, #130	; 0x82
 800953e:	f002 f88a 	bl	800b656 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2201      	movs	r2, #1
 8009546:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009548:	2387      	movs	r3, #135	; 0x87
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	0018      	movs	r0, r3
 800954e:	f002 fa1b 	bl	800b988 <USBD_static_malloc>
 8009552:	0001      	movs	r1, r0
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	23ae      	movs	r3, #174	; 0xae
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	23ae      	movs	r3, #174	; 0xae
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	58d3      	ldr	r3, [r2, r3]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d104      	bne.n	8009572 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8009568:	230f      	movs	r3, #15
 800956a:	18fb      	adds	r3, r7, r3
 800956c:	2201      	movs	r2, #1
 800956e:	701a      	strb	r2, [r3, #0]
 8009570:	e02c      	b.n	80095cc <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	23ae      	movs	r3, #174	; 0xae
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	58d3      	ldr	r3, [r2, r3]
 800957a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	23af      	movs	r3, #175	; 0xaf
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	58d3      	ldr	r3, [r2, r3]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009588:	68ba      	ldr	r2, [r7, #8]
 800958a:	2385      	movs	r3, #133	; 0x85
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	2100      	movs	r1, #0
 8009590:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	2386      	movs	r3, #134	; 0x86
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	2100      	movs	r1, #0
 800959a:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	7c1b      	ldrb	r3, [r3, #16]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10a      	bne.n	80095ba <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80095a4:	68ba      	ldr	r2, [r7, #8]
 80095a6:	2381      	movs	r3, #129	; 0x81
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	58d2      	ldr	r2, [r2, r3]
 80095ac:	2380      	movs	r3, #128	; 0x80
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	2101      	movs	r1, #1
 80095b4:	f002 f99a 	bl	800b8ec <USBD_LL_PrepareReceive>
 80095b8:	e008      	b.n	80095cc <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80095ba:	68ba      	ldr	r2, [r7, #8]
 80095bc:	2381      	movs	r3, #129	; 0x81
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	58d2      	ldr	r2, [r2, r3]
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	2340      	movs	r3, #64	; 0x40
 80095c6:	2101      	movs	r1, #1
 80095c8:	f002 f990 	bl	800b8ec <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80095cc:	230f      	movs	r3, #15
 80095ce:	18fb      	adds	r3, r7, r3
 80095d0:	781b      	ldrb	r3, [r3, #0]
}
 80095d2:	0018      	movs	r0, r3
 80095d4:	46bd      	mov	sp, r7
 80095d6:	b004      	add	sp, #16
 80095d8:	bd80      	pop	{r7, pc}

080095da <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b084      	sub	sp, #16
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	000a      	movs	r2, r1
 80095e4:	1cfb      	adds	r3, r7, #3
 80095e6:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80095e8:	230f      	movs	r3, #15
 80095ea:	18fb      	adds	r3, r7, r3
 80095ec:	2200      	movs	r2, #0
 80095ee:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2181      	movs	r1, #129	; 0x81
 80095f4:	0018      	movs	r0, r3
 80095f6:	f002 f865 	bl	800b6c4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2200      	movs	r2, #0
 80095fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2101      	movs	r1, #1
 8009604:	0018      	movs	r0, r3
 8009606:	f002 f85d 	bl	800b6c4 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	23b6      	movs	r3, #182	; 0xb6
 800960e:	005b      	lsls	r3, r3, #1
 8009610:	2100      	movs	r1, #0
 8009612:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2182      	movs	r1, #130	; 0x82
 8009618:	0018      	movs	r0, r3
 800961a:	f002 f853 	bl	800b6c4 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	23ae      	movs	r3, #174	; 0xae
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	58d3      	ldr	r3, [r2, r3]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d011      	beq.n	8009654 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	23af      	movs	r3, #175	; 0xaf
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	58d3      	ldr	r3, [r2, r3]
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	23ae      	movs	r3, #174	; 0xae
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	58d3      	ldr	r3, [r2, r3]
 8009644:	0018      	movs	r0, r3
 8009646:	f002 f9ab 	bl	800b9a0 <USBD_static_free>
    pdev->pClassData = NULL;
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	23ae      	movs	r3, #174	; 0xae
 800964e:	009b      	lsls	r3, r3, #2
 8009650:	2100      	movs	r1, #0
 8009652:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 8009654:	230f      	movs	r3, #15
 8009656:	18fb      	adds	r3, r7, r3
 8009658:	781b      	ldrb	r3, [r3, #0]
}
 800965a:	0018      	movs	r0, r3
 800965c:	46bd      	mov	sp, r7
 800965e:	b004      	add	sp, #16
 8009660:	bd80      	pop	{r7, pc}
	...

08009664 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b086      	sub	sp, #24
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	23ae      	movs	r3, #174	; 0xae
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	58d3      	ldr	r3, [r2, r3]
 8009676:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009678:	230f      	movs	r3, #15
 800967a:	18fb      	adds	r3, r7, r3
 800967c:	2200      	movs	r2, #0
 800967e:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8009680:	230c      	movs	r3, #12
 8009682:	18fb      	adds	r3, r7, r3
 8009684:	2200      	movs	r2, #0
 8009686:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8009688:	2317      	movs	r3, #23
 800968a:	18fb      	adds	r3, r7, r3
 800968c:	2200      	movs	r2, #0
 800968e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	001a      	movs	r2, r3
 8009696:	2360      	movs	r3, #96	; 0x60
 8009698:	4013      	ands	r3, r2
 800969a:	d03d      	beq.n	8009718 <USBD_CDC_Setup+0xb4>
 800969c:	2b20      	cmp	r3, #32
 800969e:	d000      	beq.n	80096a2 <USBD_CDC_Setup+0x3e>
 80096a0:	e094      	b.n	80097cc <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	88db      	ldrh	r3, [r3, #6]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d02b      	beq.n	8009702 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	b25b      	sxtb	r3, r3
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	da12      	bge.n	80096da <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	23af      	movs	r3, #175	; 0xaf
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	58d3      	ldr	r3, [r2, r3]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	683a      	ldr	r2, [r7, #0]
 80096c0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80096c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80096c4:	683a      	ldr	r2, [r7, #0]
 80096c6:	88d2      	ldrh	r2, [r2, #6]
 80096c8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80096ca:	6939      	ldr	r1, [r7, #16]
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	88da      	ldrh	r2, [r3, #6]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	0018      	movs	r0, r3
 80096d4:	f001 fbb2 	bl	800ae3c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80096d8:	e083      	b.n	80097e2 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	7859      	ldrb	r1, [r3, #1]
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	2380      	movs	r3, #128	; 0x80
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	88db      	ldrh	r3, [r3, #6]
 80096ea:	b2d9      	uxtb	r1, r3
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	4a40      	ldr	r2, [pc, #256]	; (80097f0 <USBD_CDC_Setup+0x18c>)
 80096f0:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80096f2:	6939      	ldr	r1, [r7, #16]
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	88da      	ldrh	r2, [r3, #6]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	0018      	movs	r0, r3
 80096fc:	f001 fbd1 	bl	800aea2 <USBD_CtlPrepareRx>
      break;
 8009700:	e06f      	b.n	80097e2 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	23af      	movs	r3, #175	; 0xaf
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	58d3      	ldr	r3, [r2, r3]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	683a      	ldr	r2, [r7, #0]
 800970e:	7850      	ldrb	r0, [r2, #1]
 8009710:	6839      	ldr	r1, [r7, #0]
 8009712:	2200      	movs	r2, #0
 8009714:	4798      	blx	r3
      break;
 8009716:	e064      	b.n	80097e2 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	785b      	ldrb	r3, [r3, #1]
 800971c:	2b0b      	cmp	r3, #11
 800971e:	d037      	beq.n	8009790 <USBD_CDC_Setup+0x12c>
 8009720:	dc47      	bgt.n	80097b2 <USBD_CDC_Setup+0x14e>
 8009722:	2b00      	cmp	r3, #0
 8009724:	d002      	beq.n	800972c <USBD_CDC_Setup+0xc8>
 8009726:	2b0a      	cmp	r3, #10
 8009728:	d019      	beq.n	800975e <USBD_CDC_Setup+0xfa>
 800972a:	e042      	b.n	80097b2 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	23a7      	movs	r3, #167	; 0xa7
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	5cd3      	ldrb	r3, [r2, r3]
 8009734:	2b03      	cmp	r3, #3
 8009736:	d107      	bne.n	8009748 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009738:	230c      	movs	r3, #12
 800973a:	18f9      	adds	r1, r7, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2202      	movs	r2, #2
 8009740:	0018      	movs	r0, r3
 8009742:	f001 fb7b 	bl	800ae3c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009746:	e040      	b.n	80097ca <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8009748:	683a      	ldr	r2, [r7, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	0011      	movs	r1, r2
 800974e:	0018      	movs	r0, r3
 8009750:	f001 faf6 	bl	800ad40 <USBD_CtlError>
            ret = USBD_FAIL;
 8009754:	2317      	movs	r3, #23
 8009756:	18fb      	adds	r3, r7, r3
 8009758:	2202      	movs	r2, #2
 800975a:	701a      	strb	r2, [r3, #0]
          break;
 800975c:	e035      	b.n	80097ca <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	23a7      	movs	r3, #167	; 0xa7
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	5cd3      	ldrb	r3, [r2, r3]
 8009766:	2b03      	cmp	r3, #3
 8009768:	d107      	bne.n	800977a <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800976a:	230f      	movs	r3, #15
 800976c:	18f9      	adds	r1, r7, r3
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2201      	movs	r2, #1
 8009772:	0018      	movs	r0, r3
 8009774:	f001 fb62 	bl	800ae3c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009778:	e027      	b.n	80097ca <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800977a:	683a      	ldr	r2, [r7, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	0011      	movs	r1, r2
 8009780:	0018      	movs	r0, r3
 8009782:	f001 fadd 	bl	800ad40 <USBD_CtlError>
            ret = USBD_FAIL;
 8009786:	2317      	movs	r3, #23
 8009788:	18fb      	adds	r3, r7, r3
 800978a:	2202      	movs	r2, #2
 800978c:	701a      	strb	r2, [r3, #0]
          break;
 800978e:	e01c      	b.n	80097ca <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	23a7      	movs	r3, #167	; 0xa7
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	5cd3      	ldrb	r3, [r2, r3]
 8009798:	2b03      	cmp	r3, #3
 800979a:	d015      	beq.n	80097c8 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800979c:	683a      	ldr	r2, [r7, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	0011      	movs	r1, r2
 80097a2:	0018      	movs	r0, r3
 80097a4:	f001 facc 	bl	800ad40 <USBD_CtlError>
            ret = USBD_FAIL;
 80097a8:	2317      	movs	r3, #23
 80097aa:	18fb      	adds	r3, r7, r3
 80097ac:	2202      	movs	r2, #2
 80097ae:	701a      	strb	r2, [r3, #0]
          }
          break;
 80097b0:	e00a      	b.n	80097c8 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 80097b2:	683a      	ldr	r2, [r7, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	0011      	movs	r1, r2
 80097b8:	0018      	movs	r0, r3
 80097ba:	f001 fac1 	bl	800ad40 <USBD_CtlError>
          ret = USBD_FAIL;
 80097be:	2317      	movs	r3, #23
 80097c0:	18fb      	adds	r3, r7, r3
 80097c2:	2202      	movs	r2, #2
 80097c4:	701a      	strb	r2, [r3, #0]
          break;
 80097c6:	e000      	b.n	80097ca <USBD_CDC_Setup+0x166>
          break;
 80097c8:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80097ca:	e00a      	b.n	80097e2 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	0011      	movs	r1, r2
 80097d2:	0018      	movs	r0, r3
 80097d4:	f001 fab4 	bl	800ad40 <USBD_CtlError>
      ret = USBD_FAIL;
 80097d8:	2317      	movs	r3, #23
 80097da:	18fb      	adds	r3, r7, r3
 80097dc:	2202      	movs	r2, #2
 80097de:	701a      	strb	r2, [r3, #0]
      break;
 80097e0:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80097e2:	2317      	movs	r3, #23
 80097e4:	18fb      	adds	r3, r7, r3
 80097e6:	781b      	ldrb	r3, [r3, #0]
}
 80097e8:	0018      	movs	r0, r3
 80097ea:	46bd      	mov	sp, r7
 80097ec:	b006      	add	sp, #24
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	00000201 	.word	0x00000201

080097f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	000a      	movs	r2, r1
 80097fe:	1cfb      	adds	r3, r7, #3
 8009800:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	23ae      	movs	r3, #174	; 0xae
 8009806:	009b      	lsls	r3, r3, #2
 8009808:	58d3      	ldr	r3, [r2, r3]
 800980a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	23b0      	movs	r3, #176	; 0xb0
 8009810:	009b      	lsls	r3, r3, #2
 8009812:	58d3      	ldr	r3, [r2, r3]
 8009814:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	23ae      	movs	r3, #174	; 0xae
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	58d3      	ldr	r3, [r2, r3]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d03e      	beq.n	80098a0 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009822:	1cfb      	adds	r3, r7, #3
 8009824:	781a      	ldrb	r2, [r3, #0]
 8009826:	6879      	ldr	r1, [r7, #4]
 8009828:	0013      	movs	r3, r2
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	189b      	adds	r3, r3, r2
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	18cb      	adds	r3, r1, r3
 8009832:	331c      	adds	r3, #28
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d02b      	beq.n	8009892 <USBD_CDC_DataIn+0x9e>
 800983a:	1cfb      	adds	r3, r7, #3
 800983c:	781a      	ldrb	r2, [r3, #0]
 800983e:	6879      	ldr	r1, [r7, #4]
 8009840:	0013      	movs	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	189b      	adds	r3, r3, r2
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	18cb      	adds	r3, r1, r3
 800984a:	331c      	adds	r3, #28
 800984c:	6818      	ldr	r0, [r3, #0]
 800984e:	1cfb      	adds	r3, r7, #3
 8009850:	781a      	ldrb	r2, [r3, #0]
 8009852:	68b9      	ldr	r1, [r7, #8]
 8009854:	0013      	movs	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	189b      	adds	r3, r3, r2
 800985a:	00db      	lsls	r3, r3, #3
 800985c:	18cb      	adds	r3, r1, r3
 800985e:	3338      	adds	r3, #56	; 0x38
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	0019      	movs	r1, r3
 8009864:	f7f6 fce8 	bl	8000238 <__aeabi_uidivmod>
 8009868:	1e0b      	subs	r3, r1, #0
 800986a:	d112      	bne.n	8009892 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800986c:	1cfb      	adds	r3, r7, #3
 800986e:	781a      	ldrb	r2, [r3, #0]
 8009870:	6879      	ldr	r1, [r7, #4]
 8009872:	0013      	movs	r3, r2
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	189b      	adds	r3, r3, r2
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	18cb      	adds	r3, r1, r3
 800987c:	331c      	adds	r3, #28
 800987e:	2200      	movs	r2, #0
 8009880:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009882:	1cfb      	adds	r3, r7, #3
 8009884:	7819      	ldrb	r1, [r3, #0]
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	2300      	movs	r3, #0
 800988a:	2200      	movs	r2, #0
 800988c:	f001 fff7 	bl	800b87e <USBD_LL_Transmit>
 8009890:	e004      	b.n	800989c <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	2385      	movs	r3, #133	; 0x85
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	2100      	movs	r1, #0
 800989a:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800989c:	2300      	movs	r3, #0
 800989e:	e000      	b.n	80098a2 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 80098a0:	2302      	movs	r3, #2
  }
}
 80098a2:	0018      	movs	r0, r3
 80098a4:	46bd      	mov	sp, r7
 80098a6:	b004      	add	sp, #16
 80098a8:	bd80      	pop	{r7, pc}

080098aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b084      	sub	sp, #16
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	000a      	movs	r2, r1
 80098b4:	1cfb      	adds	r3, r7, #3
 80098b6:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098b8:	687a      	ldr	r2, [r7, #4]
 80098ba:	23ae      	movs	r3, #174	; 0xae
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	58d3      	ldr	r3, [r2, r3]
 80098c0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80098c2:	1cfb      	adds	r3, r7, #3
 80098c4:	781a      	ldrb	r2, [r3, #0]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	0011      	movs	r1, r2
 80098ca:	0018      	movs	r0, r3
 80098cc:	f002 f845 	bl	800b95a <USBD_LL_GetRxDataSize>
 80098d0:	0001      	movs	r1, r0
 80098d2:	68fa      	ldr	r2, [r7, #12]
 80098d4:	2383      	movs	r3, #131	; 0x83
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	23ae      	movs	r3, #174	; 0xae
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	58d3      	ldr	r3, [r2, r3]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d011      	beq.n	800990a <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	23af      	movs	r3, #175	; 0xaf
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	58d3      	ldr	r3, [r2, r3]
 80098ee:	68da      	ldr	r2, [r3, #12]
 80098f0:	68f9      	ldr	r1, [r7, #12]
 80098f2:	2381      	movs	r3, #129	; 0x81
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	58c8      	ldr	r0, [r1, r3]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2183      	movs	r1, #131	; 0x83
 80098fc:	0089      	lsls	r1, r1, #2
 80098fe:	468c      	mov	ip, r1
 8009900:	4463      	add	r3, ip
 8009902:	0019      	movs	r1, r3
 8009904:	4790      	blx	r2

    return USBD_OK;
 8009906:	2300      	movs	r3, #0
 8009908:	e000      	b.n	800990c <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800990a:	2302      	movs	r3, #2
  }
}
 800990c:	0018      	movs	r0, r3
 800990e:	46bd      	mov	sp, r7
 8009910:	b004      	add	sp, #16
 8009912:	bd80      	pop	{r7, pc}

08009914 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009914:	b590      	push	{r4, r7, lr}
 8009916:	b085      	sub	sp, #20
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	23ae      	movs	r3, #174	; 0xae
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	58d3      	ldr	r3, [r2, r3]
 8009924:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	23af      	movs	r3, #175	; 0xaf
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	58d3      	ldr	r3, [r2, r3]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d019      	beq.n	8009966 <USBD_CDC_EP0_RxReady+0x52>
 8009932:	68fa      	ldr	r2, [r7, #12]
 8009934:	2380      	movs	r3, #128	; 0x80
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	5cd3      	ldrb	r3, [r2, r3]
 800993a:	2bff      	cmp	r3, #255	; 0xff
 800993c:	d013      	beq.n	8009966 <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	23af      	movs	r3, #175	; 0xaf
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	58d3      	ldr	r3, [r2, r3]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	68f9      	ldr	r1, [r7, #12]
 800994a:	2280      	movs	r2, #128	; 0x80
 800994c:	0092      	lsls	r2, r2, #2
 800994e:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8009950:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	4c06      	ldr	r4, [pc, #24]	; (8009970 <USBD_CDC_EP0_RxReady+0x5c>)
 8009956:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009958:	b292      	uxth	r2, r2
 800995a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	2380      	movs	r3, #128	; 0x80
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	21ff      	movs	r1, #255	; 0xff
 8009964:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8009966:	2300      	movs	r3, #0
}
 8009968:	0018      	movs	r0, r3
 800996a:	46bd      	mov	sp, r7
 800996c:	b005      	add	sp, #20
 800996e:	bd90      	pop	{r4, r7, pc}
 8009970:	00000201 	.word	0x00000201

08009974 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2243      	movs	r2, #67	; 0x43
 8009980:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009982:	4b02      	ldr	r3, [pc, #8]	; (800998c <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8009984:	0018      	movs	r0, r3
 8009986:	46bd      	mov	sp, r7
 8009988:	b002      	add	sp, #8
 800998a:	bd80      	pop	{r7, pc}
 800998c:	20000094 	.word	0x20000094

08009990 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2243      	movs	r2, #67	; 0x43
 800999c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800999e:	4b02      	ldr	r3, [pc, #8]	; (80099a8 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 80099a0:	0018      	movs	r0, r3
 80099a2:	46bd      	mov	sp, r7
 80099a4:	b002      	add	sp, #8
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	20000050 	.word	0x20000050

080099ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2243      	movs	r2, #67	; 0x43
 80099b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80099ba:	4b02      	ldr	r3, [pc, #8]	; (80099c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 80099bc:	0018      	movs	r0, r3
 80099be:	46bd      	mov	sp, r7
 80099c0:	b002      	add	sp, #8
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	200000d8 	.word	0x200000d8

080099c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	220a      	movs	r2, #10
 80099d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80099d6:	4b02      	ldr	r3, [pc, #8]	; (80099e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 80099d8:	0018      	movs	r0, r3
 80099da:	46bd      	mov	sp, r7
 80099dc:	b002      	add	sp, #8
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	2000000c 	.word	0x2000000c

080099e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80099ee:	200f      	movs	r0, #15
 80099f0:	183b      	adds	r3, r7, r0
 80099f2:	2202      	movs	r2, #2
 80099f4:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d007      	beq.n	8009a0c <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	23af      	movs	r3, #175	; 0xaf
 8009a00:	009b      	lsls	r3, r3, #2
 8009a02:	6839      	ldr	r1, [r7, #0]
 8009a04:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8009a06:	183b      	adds	r3, r7, r0
 8009a08:	2200      	movs	r2, #0
 8009a0a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8009a0c:	230f      	movs	r3, #15
 8009a0e:	18fb      	adds	r3, r7, r3
 8009a10:	781b      	ldrb	r3, [r3, #0]
}
 8009a12:	0018      	movs	r0, r3
 8009a14:	46bd      	mov	sp, r7
 8009a16:	b004      	add	sp, #16
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b086      	sub	sp, #24
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	60f8      	str	r0, [r7, #12]
 8009a22:	60b9      	str	r1, [r7, #8]
 8009a24:	1dbb      	adds	r3, r7, #6
 8009a26:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	23ae      	movs	r3, #174	; 0xae
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	58d3      	ldr	r3, [r2, r3]
 8009a30:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009a32:	697a      	ldr	r2, [r7, #20]
 8009a34:	2382      	movs	r3, #130	; 0x82
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	68b9      	ldr	r1, [r7, #8]
 8009a3a:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8009a3c:	1dbb      	adds	r3, r7, #6
 8009a3e:	8819      	ldrh	r1, [r3, #0]
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	2384      	movs	r3, #132	; 0x84
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	0018      	movs	r0, r3
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	b006      	add	sp, #24
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b084      	sub	sp, #16
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	23ae      	movs	r3, #174	; 0xae
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	58d3      	ldr	r3, [r2, r3]
 8009a64:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	2381      	movs	r3, #129	; 0x81
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	6839      	ldr	r1, [r7, #0]
 8009a6e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	0018      	movs	r0, r3
 8009a74:	46bd      	mov	sp, r7
 8009a76:	b004      	add	sp, #16
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b084      	sub	sp, #16
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	23ae      	movs	r3, #174	; 0xae
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	58d3      	ldr	r3, [r2, r3]
 8009a8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	23ae      	movs	r3, #174	; 0xae
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	58d3      	ldr	r3, [r2, r3]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d022      	beq.n	8009ade <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	2385      	movs	r3, #133	; 0x85
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	58d3      	ldr	r3, [r2, r3]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d11a      	bne.n	8009ada <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	2385      	movs	r3, #133	; 0x85
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	2101      	movs	r1, #1
 8009aac:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009aae:	68fa      	ldr	r2, [r7, #12]
 8009ab0:	2384      	movs	r3, #132	; 0x84
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	58d2      	ldr	r2, [r2, r3]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	2382      	movs	r3, #130	; 0x82
 8009abe:	009b      	lsls	r3, r3, #2
 8009ac0:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8009ac2:	68fa      	ldr	r2, [r7, #12]
 8009ac4:	2384      	movs	r3, #132	; 0x84
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	000a      	movs	r2, r1
 8009ad0:	2181      	movs	r1, #129	; 0x81
 8009ad2:	f001 fed4 	bl	800b87e <USBD_LL_Transmit>

      return USBD_OK;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	e002      	b.n	8009ae0 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8009ada:	2301      	movs	r3, #1
 8009adc:	e000      	b.n	8009ae0 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8009ade:	2302      	movs	r3, #2
  }
}
 8009ae0:	0018      	movs	r0, r3
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	b004      	add	sp, #16
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	23ae      	movs	r3, #174	; 0xae
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	58d3      	ldr	r3, [r2, r3]
 8009af8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	23ae      	movs	r3, #174	; 0xae
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	58d3      	ldr	r3, [r2, r3]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d019      	beq.n	8009b3a <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	7c1b      	ldrb	r3, [r3, #16]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10a      	bne.n	8009b24 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	2381      	movs	r3, #129	; 0x81
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	58d2      	ldr	r2, [r2, r3]
 8009b16:	2380      	movs	r3, #128	; 0x80
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	2101      	movs	r1, #1
 8009b1e:	f001 fee5 	bl	800b8ec <USBD_LL_PrepareReceive>
 8009b22:	e008      	b.n	8009b36 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	2381      	movs	r3, #129	; 0x81
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	58d2      	ldr	r2, [r2, r3]
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	2340      	movs	r3, #64	; 0x40
 8009b30:	2101      	movs	r1, #1
 8009b32:	f001 fedb 	bl	800b8ec <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009b36:	2300      	movs	r3, #0
 8009b38:	e000      	b.n	8009b3c <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8009b3a:	2302      	movs	r3, #2
  }
}
 8009b3c:	0018      	movs	r0, r3
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	b004      	add	sp, #16
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	1dfb      	adds	r3, r7, #7
 8009b50:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d101      	bne.n	8009b5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009b58:	2302      	movs	r3, #2
 8009b5a:	e020      	b.n	8009b9e <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	23ad      	movs	r3, #173	; 0xad
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	58d3      	ldr	r3, [r2, r3]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d004      	beq.n	8009b72 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	23ad      	movs	r3, #173	; 0xad
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	2100      	movs	r1, #0
 8009b70:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d004      	beq.n	8009b82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	23ac      	movs	r3, #172	; 0xac
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	68b9      	ldr	r1, [r7, #8]
 8009b80:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	23a7      	movs	r3, #167	; 0xa7
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	2101      	movs	r1, #1
 8009b8a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	1dfa      	adds	r2, r7, #7
 8009b90:	7812      	ldrb	r2, [r2, #0]
 8009b92:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	0018      	movs	r0, r3
 8009b98:	f001 fcd4 	bl	800b544 <USBD_LL_Init>

  return USBD_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	0018      	movs	r0, r3
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	b004      	add	sp, #16
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b084      	sub	sp, #16
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009bb0:	200f      	movs	r0, #15
 8009bb2:	183b      	adds	r3, r7, r0
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d008      	beq.n	8009bd0 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	23ad      	movs	r3, #173	; 0xad
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	6839      	ldr	r1, [r7, #0]
 8009bc6:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8009bc8:	183b      	adds	r3, r7, r0
 8009bca:	2200      	movs	r2, #0
 8009bcc:	701a      	strb	r2, [r3, #0]
 8009bce:	e003      	b.n	8009bd8 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009bd0:	230f      	movs	r3, #15
 8009bd2:	18fb      	adds	r3, r7, r3
 8009bd4:	2202      	movs	r2, #2
 8009bd6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8009bd8:	230f      	movs	r3, #15
 8009bda:	18fb      	adds	r3, r7, r3
 8009bdc:	781b      	ldrb	r3, [r3, #0]
}
 8009bde:	0018      	movs	r0, r3
 8009be0:	46bd      	mov	sp, r7
 8009be2:	b004      	add	sp, #16
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b082      	sub	sp, #8
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	0018      	movs	r0, r3
 8009bf2:	f001 fd0b 	bl	800b60c <USBD_LL_Start>

  return USBD_OK;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	0018      	movs	r0, r3
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	b002      	add	sp, #8
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009c08:	2300      	movs	r3, #0
}
 8009c0a:	0018      	movs	r0, r3
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	b002      	add	sp, #8
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009c12:	b590      	push	{r4, r7, lr}
 8009c14:	b085      	sub	sp, #20
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
 8009c1a:	000a      	movs	r2, r1
 8009c1c:	1cfb      	adds	r3, r7, #3
 8009c1e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009c20:	240f      	movs	r4, #15
 8009c22:	193b      	adds	r3, r7, r4
 8009c24:	2202      	movs	r2, #2
 8009c26:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	23ad      	movs	r3, #173	; 0xad
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	58d3      	ldr	r3, [r2, r3]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d00e      	beq.n	8009c52 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	23ad      	movs	r3, #173	; 0xad
 8009c38:	009b      	lsls	r3, r3, #2
 8009c3a:	58d3      	ldr	r3, [r2, r3]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	1cfa      	adds	r2, r7, #3
 8009c40:	7811      	ldrb	r1, [r2, #0]
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	0010      	movs	r0, r2
 8009c46:	4798      	blx	r3
 8009c48:	1e03      	subs	r3, r0, #0
 8009c4a:	d102      	bne.n	8009c52 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8009c4c:	193b      	adds	r3, r7, r4
 8009c4e:	2200      	movs	r2, #0
 8009c50:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8009c52:	230f      	movs	r3, #15
 8009c54:	18fb      	adds	r3, r7, r3
 8009c56:	781b      	ldrb	r3, [r3, #0]
}
 8009c58:	0018      	movs	r0, r3
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	b005      	add	sp, #20
 8009c5e:	bd90      	pop	{r4, r7, pc}

08009c60 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	000a      	movs	r2, r1
 8009c6a:	1cfb      	adds	r3, r7, #3
 8009c6c:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	23ad      	movs	r3, #173	; 0xad
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	58d3      	ldr	r3, [r2, r3]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	1cfa      	adds	r2, r7, #3
 8009c7a:	7811      	ldrb	r1, [r2, #0]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	0010      	movs	r0, r2
 8009c80:	4798      	blx	r3

  return USBD_OK;
 8009c82:	2300      	movs	r3, #0
}
 8009c84:	0018      	movs	r0, r3
 8009c86:	46bd      	mov	sp, r7
 8009c88:	b002      	add	sp, #8
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	22aa      	movs	r2, #170	; 0xaa
 8009c9a:	0092      	lsls	r2, r2, #2
 8009c9c:	4694      	mov	ip, r2
 8009c9e:	4463      	add	r3, ip
 8009ca0:	683a      	ldr	r2, [r7, #0]
 8009ca2:	0011      	movs	r1, r2
 8009ca4:	0018      	movs	r0, r3
 8009ca6:	f001 f810 	bl	800acca <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009caa:	687a      	ldr	r2, [r7, #4]
 8009cac:	23a5      	movs	r3, #165	; 0xa5
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	2101      	movs	r1, #1
 8009cb2:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a23      	ldr	r2, [pc, #140]	; (8009d44 <USBD_LL_SetupStage+0xb8>)
 8009cb8:	5a9b      	ldrh	r3, [r3, r2]
 8009cba:	0019      	movs	r1, r3
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	23a6      	movs	r3, #166	; 0xa6
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	23aa      	movs	r3, #170	; 0xaa
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	5cd3      	ldrb	r3, [r2, r3]
 8009ccc:	001a      	movs	r2, r3
 8009cce:	231f      	movs	r3, #31
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d019      	beq.n	8009d0a <USBD_LL_SetupStage+0x7e>
 8009cd6:	d822      	bhi.n	8009d1e <USBD_LL_SetupStage+0x92>
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d002      	beq.n	8009ce2 <USBD_LL_SetupStage+0x56>
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d00a      	beq.n	8009cf6 <USBD_LL_SetupStage+0x6a>
 8009ce0:	e01d      	b.n	8009d1e <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	22aa      	movs	r2, #170	; 0xaa
 8009ce6:	0092      	lsls	r2, r2, #2
 8009ce8:	189a      	adds	r2, r3, r2
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	0011      	movs	r1, r2
 8009cee:	0018      	movs	r0, r3
 8009cf0:	f000 fa10 	bl	800a114 <USBD_StdDevReq>
      break;
 8009cf4:	e020      	b.n	8009d38 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	22aa      	movs	r2, #170	; 0xaa
 8009cfa:	0092      	lsls	r2, r2, #2
 8009cfc:	189a      	adds	r2, r3, r2
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	0011      	movs	r1, r2
 8009d02:	0018      	movs	r0, r3
 8009d04:	f000 fa78 	bl	800a1f8 <USBD_StdItfReq>
      break;
 8009d08:	e016      	b.n	8009d38 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	22aa      	movs	r2, #170	; 0xaa
 8009d0e:	0092      	lsls	r2, r2, #2
 8009d10:	189a      	adds	r2, r3, r2
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	0011      	movs	r1, r2
 8009d16:	0018      	movs	r0, r3
 8009d18:	f000 fac5 	bl	800a2a6 <USBD_StdEPReq>
      break;
 8009d1c:	e00c      	b.n	8009d38 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	23aa      	movs	r3, #170	; 0xaa
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	5cd3      	ldrb	r3, [r2, r3]
 8009d26:	227f      	movs	r2, #127	; 0x7f
 8009d28:	4393      	bics	r3, r2
 8009d2a:	b2da      	uxtb	r2, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	0011      	movs	r1, r2
 8009d30:	0018      	movs	r0, r3
 8009d32:	f001 fcf2 	bl	800b71a <USBD_LL_StallEP>
      break;
 8009d36:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	0018      	movs	r0, r3
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	b002      	add	sp, #8
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	46c0      	nop			; (mov r8, r8)
 8009d44:	000002ae 	.word	0x000002ae

08009d48 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b086      	sub	sp, #24
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	60f8      	str	r0, [r7, #12]
 8009d50:	607a      	str	r2, [r7, #4]
 8009d52:	200b      	movs	r0, #11
 8009d54:	183b      	adds	r3, r7, r0
 8009d56:	1c0a      	adds	r2, r1, #0
 8009d58:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009d5a:	183b      	adds	r3, r7, r0
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d154      	bne.n	8009e0c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	3355      	adds	r3, #85	; 0x55
 8009d66:	33ff      	adds	r3, #255	; 0xff
 8009d68:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	23a5      	movs	r3, #165	; 0xa5
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	58d3      	ldr	r3, [r2, r3]
 8009d72:	2b03      	cmp	r3, #3
 8009d74:	d139      	bne.n	8009dea <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	68da      	ldr	r2, [r3, #12]
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d919      	bls.n	8009db6 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	68da      	ldr	r2, [r3, #12]
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	691b      	ldr	r3, [r3, #16]
 8009d8a:	1ad2      	subs	r2, r2, r3
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	68da      	ldr	r2, [r3, #12]
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d203      	bcs.n	8009da4 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	e002      	b.n	8009daa <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009da8:	b29b      	uxth	r3, r3
 8009daa:	6879      	ldr	r1, [r7, #4]
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	001a      	movs	r2, r3
 8009db0:	f001 f89b 	bl	800aeea <USBD_CtlContinueRx>
 8009db4:	e045      	b.n	8009e42 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009db6:	68fa      	ldr	r2, [r7, #12]
 8009db8:	23ad      	movs	r3, #173	; 0xad
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	58d3      	ldr	r3, [r2, r3]
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00d      	beq.n	8009de0 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	23a7      	movs	r3, #167	; 0xa7
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009dcc:	2b03      	cmp	r3, #3
 8009dce:	d107      	bne.n	8009de0 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	23ad      	movs	r3, #173	; 0xad
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	58d3      	ldr	r3, [r2, r3]
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	0010      	movs	r0, r2
 8009dde:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	0018      	movs	r0, r3
 8009de4:	f001 f894 	bl	800af10 <USBD_CtlSendStatus>
 8009de8:	e02b      	b.n	8009e42 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009dea:	68fa      	ldr	r2, [r7, #12]
 8009dec:	23a5      	movs	r3, #165	; 0xa5
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	58d3      	ldr	r3, [r2, r3]
 8009df2:	2b05      	cmp	r3, #5
 8009df4:	d125      	bne.n	8009e42 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009df6:	68fa      	ldr	r2, [r7, #12]
 8009df8:	23a5      	movs	r3, #165	; 0xa5
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2100      	movs	r1, #0
 8009e04:	0018      	movs	r0, r3
 8009e06:	f001 fc88 	bl	800b71a <USBD_LL_StallEP>
 8009e0a:	e01a      	b.n	8009e42 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	23ad      	movs	r3, #173	; 0xad
 8009e10:	009b      	lsls	r3, r3, #2
 8009e12:	58d3      	ldr	r3, [r2, r3]
 8009e14:	699b      	ldr	r3, [r3, #24]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d011      	beq.n	8009e3e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	23a7      	movs	r3, #167	; 0xa7
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8009e22:	2b03      	cmp	r3, #3
 8009e24:	d10b      	bne.n	8009e3e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	23ad      	movs	r3, #173	; 0xad
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	58d3      	ldr	r3, [r2, r3]
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	220b      	movs	r2, #11
 8009e32:	18ba      	adds	r2, r7, r2
 8009e34:	7811      	ldrb	r1, [r2, #0]
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	0010      	movs	r0, r2
 8009e3a:	4798      	blx	r3
 8009e3c:	e001      	b.n	8009e42 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009e3e:	2302      	movs	r3, #2
 8009e40:	e000      	b.n	8009e44 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	0018      	movs	r0, r3
 8009e46:	46bd      	mov	sp, r7
 8009e48:	b006      	add	sp, #24
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b086      	sub	sp, #24
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	607a      	str	r2, [r7, #4]
 8009e56:	200b      	movs	r0, #11
 8009e58:	183b      	adds	r3, r7, r0
 8009e5a:	1c0a      	adds	r2, r1, #0
 8009e5c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009e5e:	183b      	adds	r3, r7, r0
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d000      	beq.n	8009e68 <USBD_LL_DataInStage+0x1c>
 8009e66:	e08e      	b.n	8009f86 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	3314      	adds	r3, #20
 8009e6c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	23a5      	movs	r3, #165	; 0xa5
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	58d3      	ldr	r3, [r2, r3]
 8009e76:	2b02      	cmp	r3, #2
 8009e78:	d164      	bne.n	8009f44 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	68da      	ldr	r2, [r3, #12]
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d915      	bls.n	8009eb2 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009e86:	697b      	ldr	r3, [r7, #20]
 8009e88:	68da      	ldr	r2, [r3, #12]
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	691b      	ldr	r3, [r3, #16]
 8009e8e:	1ad2      	subs	r2, r2, r3
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	6879      	ldr	r1, [r7, #4]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	0018      	movs	r0, r3
 8009ea0:	f000 ffec 	bl	800ae7c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ea4:	68f8      	ldr	r0, [r7, #12]
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	2100      	movs	r1, #0
 8009eac:	f001 fd1e 	bl	800b8ec <USBD_LL_PrepareReceive>
 8009eb0:	e059      	b.n	8009f66 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	689a      	ldr	r2, [r3, #8]
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	0019      	movs	r1, r3
 8009ebc:	0010      	movs	r0, r2
 8009ebe:	f7f6 f9bb 	bl	8000238 <__aeabi_uidivmod>
 8009ec2:	1e0b      	subs	r3, r1, #0
 8009ec4:	d11f      	bne.n	8009f06 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	689a      	ldr	r2, [r3, #8]
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d319      	bcc.n	8009f06 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	689a      	ldr	r2, [r3, #8]
 8009ed6:	68f9      	ldr	r1, [r7, #12]
 8009ed8:	23a6      	movs	r3, #166	; 0xa6
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d211      	bcs.n	8009f06 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	0018      	movs	r0, r3
 8009eea:	f000 ffc7 	bl	800ae7c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	23a6      	movs	r3, #166	; 0xa6
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	2300      	movs	r3, #0
 8009efc:	2200      	movs	r2, #0
 8009efe:	2100      	movs	r1, #0
 8009f00:	f001 fcf4 	bl	800b8ec <USBD_LL_PrepareReceive>
 8009f04:	e02f      	b.n	8009f66 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009f06:	68fa      	ldr	r2, [r7, #12]
 8009f08:	23ad      	movs	r3, #173	; 0xad
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	58d3      	ldr	r3, [r2, r3]
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00d      	beq.n	8009f30 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f14:	68fa      	ldr	r2, [r7, #12]
 8009f16:	23a7      	movs	r3, #167	; 0xa7
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009f1c:	2b03      	cmp	r3, #3
 8009f1e:	d107      	bne.n	8009f30 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009f20:	68fa      	ldr	r2, [r7, #12]
 8009f22:	23ad      	movs	r3, #173	; 0xad
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	58d3      	ldr	r3, [r2, r3]
 8009f28:	68db      	ldr	r3, [r3, #12]
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	0010      	movs	r0, r2
 8009f2e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2180      	movs	r1, #128	; 0x80
 8009f34:	0018      	movs	r0, r3
 8009f36:	f001 fbf0 	bl	800b71a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	0018      	movs	r0, r3
 8009f3e:	f000 fffb 	bl	800af38 <USBD_CtlReceiveStatus>
 8009f42:	e010      	b.n	8009f66 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	23a5      	movs	r3, #165	; 0xa5
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	58d3      	ldr	r3, [r2, r3]
 8009f4c:	2b04      	cmp	r3, #4
 8009f4e:	d005      	beq.n	8009f5c <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	23a5      	movs	r3, #165	; 0xa5
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d104      	bne.n	8009f66 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2180      	movs	r1, #128	; 0x80
 8009f60:	0018      	movs	r0, r3
 8009f62:	f001 fbda 	bl	800b71a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	23a8      	movs	r3, #168	; 0xa8
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	5cd3      	ldrb	r3, [r2, r3]
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d124      	bne.n	8009fbc <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	0018      	movs	r0, r3
 8009f76:	f7ff fe43 	bl	8009c00 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	23a8      	movs	r3, #168	; 0xa8
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	2100      	movs	r1, #0
 8009f82:	54d1      	strb	r1, [r2, r3]
 8009f84:	e01a      	b.n	8009fbc <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009f86:	68fa      	ldr	r2, [r7, #12]
 8009f88:	23ad      	movs	r3, #173	; 0xad
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	58d3      	ldr	r3, [r2, r3]
 8009f8e:	695b      	ldr	r3, [r3, #20]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d011      	beq.n	8009fb8 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	23a7      	movs	r3, #167	; 0xa7
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8009f9c:	2b03      	cmp	r3, #3
 8009f9e:	d10b      	bne.n	8009fb8 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	23ad      	movs	r3, #173	; 0xad
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	58d3      	ldr	r3, [r2, r3]
 8009fa8:	695b      	ldr	r3, [r3, #20]
 8009faa:	220b      	movs	r2, #11
 8009fac:	18ba      	adds	r2, r7, r2
 8009fae:	7811      	ldrb	r1, [r2, #0]
 8009fb0:	68fa      	ldr	r2, [r7, #12]
 8009fb2:	0010      	movs	r0, r2
 8009fb4:	4798      	blx	r3
 8009fb6:	e001      	b.n	8009fbc <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009fb8:	2302      	movs	r3, #2
 8009fba:	e000      	b.n	8009fbe <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	0018      	movs	r0, r3
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	b006      	add	sp, #24
 8009fc4:	bd80      	pop	{r7, pc}

08009fc6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b082      	sub	sp, #8
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	2340      	movs	r3, #64	; 0x40
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	f001 fb3e 	bl	800b656 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	23ac      	movs	r3, #172	; 0xac
 8009fde:	005b      	lsls	r3, r3, #1
 8009fe0:	2101      	movs	r1, #1
 8009fe2:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	23b2      	movs	r3, #178	; 0xb2
 8009fe8:	005b      	lsls	r3, r3, #1
 8009fea:	2140      	movs	r1, #64	; 0x40
 8009fec:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	2340      	movs	r3, #64	; 0x40
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	2180      	movs	r1, #128	; 0x80
 8009ff6:	f001 fb2e 	bl	800b656 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2240      	movs	r2, #64	; 0x40
 800a004:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	23a7      	movs	r3, #167	; 0xa7
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	2101      	movs	r1, #1
 800a00e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	23a5      	movs	r3, #165	; 0xa5
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	2100      	movs	r1, #0
 800a018:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	23a9      	movs	r3, #169	; 0xa9
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	2100      	movs	r1, #0
 800a028:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	23ae      	movs	r3, #174	; 0xae
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	58d3      	ldr	r3, [r2, r3]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00a      	beq.n	800a04c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	23ad      	movs	r3, #173	; 0xad
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	58d3      	ldr	r3, [r2, r3]
 800a03e:	685a      	ldr	r2, [r3, #4]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	b2d9      	uxtb	r1, r3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	0018      	movs	r0, r3
 800a04a:	4790      	blx	r2
  }

  return USBD_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	0018      	movs	r0, r3
 800a050:	46bd      	mov	sp, r7
 800a052:	b002      	add	sp, #8
 800a054:	bd80      	pop	{r7, pc}

0800a056 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a056:	b580      	push	{r7, lr}
 800a058:	b082      	sub	sp, #8
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
 800a05e:	000a      	movs	r2, r1
 800a060:	1cfb      	adds	r3, r7, #3
 800a062:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	1cfa      	adds	r2, r7, #3
 800a068:	7812      	ldrb	r2, [r2, #0]
 800a06a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	0018      	movs	r0, r3
 800a070:	46bd      	mov	sp, r7
 800a072:	b002      	add	sp, #8
 800a074:	bd80      	pop	{r7, pc}
	...

0800a078 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b082      	sub	sp, #8
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	23a7      	movs	r3, #167	; 0xa7
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	5cd1      	ldrb	r1, [r2, r3]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a06      	ldr	r2, [pc, #24]	; (800a0a4 <USBD_LL_Suspend+0x2c>)
 800a08c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	23a7      	movs	r3, #167	; 0xa7
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	2104      	movs	r1, #4
 800a096:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	0018      	movs	r0, r3
 800a09c:	46bd      	mov	sp, r7
 800a09e:	b002      	add	sp, #8
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	46c0      	nop			; (mov r8, r8)
 800a0a4:	0000029d 	.word	0x0000029d

0800a0a8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	23a7      	movs	r3, #167	; 0xa7
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	5cd3      	ldrb	r3, [r2, r3]
 800a0b8:	2b04      	cmp	r3, #4
 800a0ba:	d106      	bne.n	800a0ca <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	4a05      	ldr	r2, [pc, #20]	; (800a0d4 <USBD_LL_Resume+0x2c>)
 800a0c0:	5c99      	ldrb	r1, [r3, r2]
 800a0c2:	687a      	ldr	r2, [r7, #4]
 800a0c4:	23a7      	movs	r3, #167	; 0xa7
 800a0c6:	009b      	lsls	r3, r3, #2
 800a0c8:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	0018      	movs	r0, r3
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	b002      	add	sp, #8
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	0000029d 	.word	0x0000029d

0800a0d8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	23a7      	movs	r3, #167	; 0xa7
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	5cd3      	ldrb	r3, [r2, r3]
 800a0e8:	2b03      	cmp	r3, #3
 800a0ea:	d10e      	bne.n	800a10a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	23ad      	movs	r3, #173	; 0xad
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	58d3      	ldr	r3, [r2, r3]
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d007      	beq.n	800a10a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	23ad      	movs	r3, #173	; 0xad
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	58d3      	ldr	r3, [r2, r3]
 800a102:	69db      	ldr	r3, [r3, #28]
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	0010      	movs	r0, r2
 800a108:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	0018      	movs	r0, r3
 800a10e:	46bd      	mov	sp, r7
 800a110:	b002      	add	sp, #8
 800a112:	bd80      	pop	{r7, pc}

0800a114 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a11e:	230f      	movs	r3, #15
 800a120:	18fb      	adds	r3, r7, r3
 800a122:	2200      	movs	r2, #0
 800a124:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	001a      	movs	r2, r3
 800a12c:	2360      	movs	r3, #96	; 0x60
 800a12e:	4013      	ands	r3, r2
 800a130:	2b40      	cmp	r3, #64	; 0x40
 800a132:	d004      	beq.n	800a13e <USBD_StdDevReq+0x2a>
 800a134:	d84f      	bhi.n	800a1d6 <USBD_StdDevReq+0xc2>
 800a136:	2b00      	cmp	r3, #0
 800a138:	d00b      	beq.n	800a152 <USBD_StdDevReq+0x3e>
 800a13a:	2b20      	cmp	r3, #32
 800a13c:	d14b      	bne.n	800a1d6 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	23ad      	movs	r3, #173	; 0xad
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	58d3      	ldr	r3, [r2, r3]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	6839      	ldr	r1, [r7, #0]
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	0010      	movs	r0, r2
 800a14e:	4798      	blx	r3
      break;
 800a150:	e048      	b.n	800a1e4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	785b      	ldrb	r3, [r3, #1]
 800a156:	2b09      	cmp	r3, #9
 800a158:	d835      	bhi.n	800a1c6 <USBD_StdDevReq+0xb2>
 800a15a:	009a      	lsls	r2, r3, #2
 800a15c:	4b25      	ldr	r3, [pc, #148]	; (800a1f4 <USBD_StdDevReq+0xe0>)
 800a15e:	18d3      	adds	r3, r2, r3
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	0011      	movs	r1, r2
 800a16a:	0018      	movs	r0, r3
 800a16c:	f000 fa52 	bl	800a614 <USBD_GetDescriptor>
          break;
 800a170:	e030      	b.n	800a1d4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a172:	683a      	ldr	r2, [r7, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	0011      	movs	r1, r2
 800a178:	0018      	movs	r0, r3
 800a17a:	f000 fbfd 	bl	800a978 <USBD_SetAddress>
          break;
 800a17e:	e029      	b.n	800a1d4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a180:	683a      	ldr	r2, [r7, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	0011      	movs	r1, r2
 800a186:	0018      	movs	r0, r3
 800a188:	f000 fc4a 	bl	800aa20 <USBD_SetConfig>
          break;
 800a18c:	e022      	b.n	800a1d4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a18e:	683a      	ldr	r2, [r7, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	0011      	movs	r1, r2
 800a194:	0018      	movs	r0, r3
 800a196:	f000 fce7 	bl	800ab68 <USBD_GetConfig>
          break;
 800a19a:	e01b      	b.n	800a1d4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a19c:	683a      	ldr	r2, [r7, #0]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	0011      	movs	r1, r2
 800a1a2:	0018      	movs	r0, r3
 800a1a4:	f000 fd1b 	bl	800abde <USBD_GetStatus>
          break;
 800a1a8:	e014      	b.n	800a1d4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a1aa:	683a      	ldr	r2, [r7, #0]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	0011      	movs	r1, r2
 800a1b0:	0018      	movs	r0, r3
 800a1b2:	f000 fd4e 	bl	800ac52 <USBD_SetFeature>
          break;
 800a1b6:	e00d      	b.n	800a1d4 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a1b8:	683a      	ldr	r2, [r7, #0]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	0011      	movs	r1, r2
 800a1be:	0018      	movs	r0, r3
 800a1c0:	f000 fd5d 	bl	800ac7e <USBD_ClrFeature>
          break;
 800a1c4:	e006      	b.n	800a1d4 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a1c6:	683a      	ldr	r2, [r7, #0]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	0011      	movs	r1, r2
 800a1cc:	0018      	movs	r0, r3
 800a1ce:	f000 fdb7 	bl	800ad40 <USBD_CtlError>
          break;
 800a1d2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a1d4:	e006      	b.n	800a1e4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a1d6:	683a      	ldr	r2, [r7, #0]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	0011      	movs	r1, r2
 800a1dc:	0018      	movs	r0, r3
 800a1de:	f000 fdaf 	bl	800ad40 <USBD_CtlError>
      break;
 800a1e2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800a1e4:	230f      	movs	r3, #15
 800a1e6:	18fb      	adds	r3, r7, r3
 800a1e8:	781b      	ldrb	r3, [r3, #0]
}
 800a1ea:	0018      	movs	r0, r3
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	b004      	add	sp, #16
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	46c0      	nop			; (mov r8, r8)
 800a1f4:	0800c408 	.word	0x0800c408

0800a1f8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a1f8:	b5b0      	push	{r4, r5, r7, lr}
 800a1fa:	b084      	sub	sp, #16
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a202:	230f      	movs	r3, #15
 800a204:	18fb      	adds	r3, r7, r3
 800a206:	2200      	movs	r2, #0
 800a208:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	001a      	movs	r2, r3
 800a210:	2360      	movs	r3, #96	; 0x60
 800a212:	4013      	ands	r3, r2
 800a214:	2b40      	cmp	r3, #64	; 0x40
 800a216:	d004      	beq.n	800a222 <USBD_StdItfReq+0x2a>
 800a218:	d839      	bhi.n	800a28e <USBD_StdItfReq+0x96>
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d001      	beq.n	800a222 <USBD_StdItfReq+0x2a>
 800a21e:	2b20      	cmp	r3, #32
 800a220:	d135      	bne.n	800a28e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	23a7      	movs	r3, #167	; 0xa7
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	5cd3      	ldrb	r3, [r2, r3]
 800a22a:	3b01      	subs	r3, #1
 800a22c:	2b02      	cmp	r3, #2
 800a22e:	d825      	bhi.n	800a27c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	889b      	ldrh	r3, [r3, #4]
 800a234:	b2db      	uxtb	r3, r3
 800a236:	2b01      	cmp	r3, #1
 800a238:	d819      	bhi.n	800a26e <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	23ad      	movs	r3, #173	; 0xad
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	58d3      	ldr	r3, [r2, r3]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	250f      	movs	r5, #15
 800a246:	197c      	adds	r4, r7, r5
 800a248:	6839      	ldr	r1, [r7, #0]
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	0010      	movs	r0, r2
 800a24e:	4798      	blx	r3
 800a250:	0003      	movs	r3, r0
 800a252:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	88db      	ldrh	r3, [r3, #6]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d116      	bne.n	800a28a <USBD_StdItfReq+0x92>
 800a25c:	197b      	adds	r3, r7, r5
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d112      	bne.n	800a28a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	0018      	movs	r0, r3
 800a268:	f000 fe52 	bl	800af10 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a26c:	e00d      	b.n	800a28a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800a26e:	683a      	ldr	r2, [r7, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	0011      	movs	r1, r2
 800a274:	0018      	movs	r0, r3
 800a276:	f000 fd63 	bl	800ad40 <USBD_CtlError>
          break;
 800a27a:	e006      	b.n	800a28a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800a27c:	683a      	ldr	r2, [r7, #0]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	0011      	movs	r1, r2
 800a282:	0018      	movs	r0, r3
 800a284:	f000 fd5c 	bl	800ad40 <USBD_CtlError>
          break;
 800a288:	e000      	b.n	800a28c <USBD_StdItfReq+0x94>
          break;
 800a28a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a28c:	e006      	b.n	800a29c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800a28e:	683a      	ldr	r2, [r7, #0]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	0011      	movs	r1, r2
 800a294:	0018      	movs	r0, r3
 800a296:	f000 fd53 	bl	800ad40 <USBD_CtlError>
      break;
 800a29a:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	0018      	movs	r0, r3
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	b004      	add	sp, #16
 800a2a4:	bdb0      	pop	{r4, r5, r7, pc}

0800a2a6 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a2a6:	b5b0      	push	{r4, r5, r7, lr}
 800a2a8:	b084      	sub	sp, #16
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a2b0:	230f      	movs	r3, #15
 800a2b2:	18fb      	adds	r3, r7, r3
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	889a      	ldrh	r2, [r3, #4]
 800a2bc:	230e      	movs	r3, #14
 800a2be:	18fb      	adds	r3, r7, r3
 800a2c0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	001a      	movs	r2, r3
 800a2c8:	2360      	movs	r3, #96	; 0x60
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	2b40      	cmp	r3, #64	; 0x40
 800a2ce:	d006      	beq.n	800a2de <USBD_StdEPReq+0x38>
 800a2d0:	d900      	bls.n	800a2d4 <USBD_StdEPReq+0x2e>
 800a2d2:	e190      	b.n	800a5f6 <USBD_StdEPReq+0x350>
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00c      	beq.n	800a2f2 <USBD_StdEPReq+0x4c>
 800a2d8:	2b20      	cmp	r3, #32
 800a2da:	d000      	beq.n	800a2de <USBD_StdEPReq+0x38>
 800a2dc:	e18b      	b.n	800a5f6 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	23ad      	movs	r3, #173	; 0xad
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	58d3      	ldr	r3, [r2, r3]
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	6839      	ldr	r1, [r7, #0]
 800a2ea:	687a      	ldr	r2, [r7, #4]
 800a2ec:	0010      	movs	r0, r2
 800a2ee:	4798      	blx	r3
      break;
 800a2f0:	e188      	b.n	800a604 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	001a      	movs	r2, r3
 800a2f8:	2360      	movs	r3, #96	; 0x60
 800a2fa:	4013      	ands	r3, r2
 800a2fc:	2b20      	cmp	r3, #32
 800a2fe:	d10f      	bne.n	800a320 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	23ad      	movs	r3, #173	; 0xad
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	58d3      	ldr	r3, [r2, r3]
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	250f      	movs	r5, #15
 800a30c:	197c      	adds	r4, r7, r5
 800a30e:	6839      	ldr	r1, [r7, #0]
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	0010      	movs	r0, r2
 800a314:	4798      	blx	r3
 800a316:	0003      	movs	r3, r0
 800a318:	7023      	strb	r3, [r4, #0]

        return ret;
 800a31a:	197b      	adds	r3, r7, r5
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	e174      	b.n	800a60a <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	785b      	ldrb	r3, [r3, #1]
 800a324:	2b03      	cmp	r3, #3
 800a326:	d007      	beq.n	800a338 <USBD_StdEPReq+0x92>
 800a328:	dd00      	ble.n	800a32c <USBD_StdEPReq+0x86>
 800a32a:	e15c      	b.n	800a5e6 <USBD_StdEPReq+0x340>
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d100      	bne.n	800a332 <USBD_StdEPReq+0x8c>
 800a330:	e092      	b.n	800a458 <USBD_StdEPReq+0x1b2>
 800a332:	2b01      	cmp	r3, #1
 800a334:	d04b      	beq.n	800a3ce <USBD_StdEPReq+0x128>
 800a336:	e156      	b.n	800a5e6 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	23a7      	movs	r3, #167	; 0xa7
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	5cd3      	ldrb	r3, [r2, r3]
 800a340:	2b02      	cmp	r3, #2
 800a342:	d002      	beq.n	800a34a <USBD_StdEPReq+0xa4>
 800a344:	2b03      	cmp	r3, #3
 800a346:	d01d      	beq.n	800a384 <USBD_StdEPReq+0xde>
 800a348:	e039      	b.n	800a3be <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a34a:	220e      	movs	r2, #14
 800a34c:	18bb      	adds	r3, r7, r2
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d010      	beq.n	800a376 <USBD_StdEPReq+0xd0>
 800a354:	18bb      	adds	r3, r7, r2
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	2b80      	cmp	r3, #128	; 0x80
 800a35a:	d00c      	beq.n	800a376 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a35c:	18bb      	adds	r3, r7, r2
 800a35e:	781a      	ldrb	r2, [r3, #0]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	0011      	movs	r1, r2
 800a364:	0018      	movs	r0, r3
 800a366:	f001 f9d8 	bl	800b71a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2180      	movs	r1, #128	; 0x80
 800a36e:	0018      	movs	r0, r3
 800a370:	f001 f9d3 	bl	800b71a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a374:	e02a      	b.n	800a3cc <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800a376:	683a      	ldr	r2, [r7, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	0011      	movs	r1, r2
 800a37c:	0018      	movs	r0, r3
 800a37e:	f000 fcdf 	bl	800ad40 <USBD_CtlError>
              break;
 800a382:	e023      	b.n	800a3cc <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	885b      	ldrh	r3, [r3, #2]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d113      	bne.n	800a3b4 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800a38c:	220e      	movs	r2, #14
 800a38e:	18bb      	adds	r3, r7, r2
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d00e      	beq.n	800a3b4 <USBD_StdEPReq+0x10e>
 800a396:	18bb      	adds	r3, r7, r2
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	2b80      	cmp	r3, #128	; 0x80
 800a39c:	d00a      	beq.n	800a3b4 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	88db      	ldrh	r3, [r3, #6]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d106      	bne.n	800a3b4 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a3a6:	18bb      	adds	r3, r7, r2
 800a3a8:	781a      	ldrb	r2, [r3, #0]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	0011      	movs	r1, r2
 800a3ae:	0018      	movs	r0, r3
 800a3b0:	f001 f9b3 	bl	800b71a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	0018      	movs	r0, r3
 800a3b8:	f000 fdaa 	bl	800af10 <USBD_CtlSendStatus>

              break;
 800a3bc:	e006      	b.n	800a3cc <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800a3be:	683a      	ldr	r2, [r7, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	0011      	movs	r1, r2
 800a3c4:	0018      	movs	r0, r3
 800a3c6:	f000 fcbb 	bl	800ad40 <USBD_CtlError>
              break;
 800a3ca:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800a3cc:	e112      	b.n	800a5f4 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	23a7      	movs	r3, #167	; 0xa7
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	5cd3      	ldrb	r3, [r2, r3]
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	d002      	beq.n	800a3e0 <USBD_StdEPReq+0x13a>
 800a3da:	2b03      	cmp	r3, #3
 800a3dc:	d01d      	beq.n	800a41a <USBD_StdEPReq+0x174>
 800a3de:	e032      	b.n	800a446 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a3e0:	220e      	movs	r2, #14
 800a3e2:	18bb      	adds	r3, r7, r2
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d010      	beq.n	800a40c <USBD_StdEPReq+0x166>
 800a3ea:	18bb      	adds	r3, r7, r2
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	2b80      	cmp	r3, #128	; 0x80
 800a3f0:	d00c      	beq.n	800a40c <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a3f2:	18bb      	adds	r3, r7, r2
 800a3f4:	781a      	ldrb	r2, [r3, #0]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	0011      	movs	r1, r2
 800a3fa:	0018      	movs	r0, r3
 800a3fc:	f001 f98d 	bl	800b71a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2180      	movs	r1, #128	; 0x80
 800a404:	0018      	movs	r0, r3
 800a406:	f001 f988 	bl	800b71a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a40a:	e024      	b.n	800a456 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800a40c:	683a      	ldr	r2, [r7, #0]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	0011      	movs	r1, r2
 800a412:	0018      	movs	r0, r3
 800a414:	f000 fc94 	bl	800ad40 <USBD_CtlError>
              break;
 800a418:	e01d      	b.n	800a456 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	885b      	ldrh	r3, [r3, #2]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d118      	bne.n	800a454 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a422:	210e      	movs	r1, #14
 800a424:	187b      	adds	r3, r7, r1
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	227f      	movs	r2, #127	; 0x7f
 800a42a:	4013      	ands	r3, r2
 800a42c:	d006      	beq.n	800a43c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a42e:	187b      	adds	r3, r7, r1
 800a430:	781a      	ldrb	r2, [r3, #0]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	0011      	movs	r1, r2
 800a436:	0018      	movs	r0, r3
 800a438:	f001 f99a 	bl	800b770 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	0018      	movs	r0, r3
 800a440:	f000 fd66 	bl	800af10 <USBD_CtlSendStatus>
              }
              break;
 800a444:	e006      	b.n	800a454 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800a446:	683a      	ldr	r2, [r7, #0]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	0011      	movs	r1, r2
 800a44c:	0018      	movs	r0, r3
 800a44e:	f000 fc77 	bl	800ad40 <USBD_CtlError>
              break;
 800a452:	e000      	b.n	800a456 <USBD_StdEPReq+0x1b0>
              break;
 800a454:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800a456:	e0cd      	b.n	800a5f4 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	23a7      	movs	r3, #167	; 0xa7
 800a45c:	009b      	lsls	r3, r3, #2
 800a45e:	5cd3      	ldrb	r3, [r2, r3]
 800a460:	2b02      	cmp	r3, #2
 800a462:	d002      	beq.n	800a46a <USBD_StdEPReq+0x1c4>
 800a464:	2b03      	cmp	r3, #3
 800a466:	d03c      	beq.n	800a4e2 <USBD_StdEPReq+0x23c>
 800a468:	e0b5      	b.n	800a5d6 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a46a:	220e      	movs	r2, #14
 800a46c:	18bb      	adds	r3, r7, r2
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00a      	beq.n	800a48a <USBD_StdEPReq+0x1e4>
 800a474:	18bb      	adds	r3, r7, r2
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	2b80      	cmp	r3, #128	; 0x80
 800a47a:	d006      	beq.n	800a48a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800a47c:	683a      	ldr	r2, [r7, #0]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	0011      	movs	r1, r2
 800a482:	0018      	movs	r0, r3
 800a484:	f000 fc5c 	bl	800ad40 <USBD_CtlError>
                break;
 800a488:	e0ac      	b.n	800a5e4 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a48a:	220e      	movs	r2, #14
 800a48c:	18bb      	adds	r3, r7, r2
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	b25b      	sxtb	r3, r3
 800a492:	2b00      	cmp	r3, #0
 800a494:	da0c      	bge.n	800a4b0 <USBD_StdEPReq+0x20a>
 800a496:	18bb      	adds	r3, r7, r2
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	227f      	movs	r2, #127	; 0x7f
 800a49c:	401a      	ands	r2, r3
 800a49e:	0013      	movs	r3, r2
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	189b      	adds	r3, r3, r2
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	3310      	adds	r3, #16
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	18d3      	adds	r3, r2, r3
 800a4ac:	3304      	adds	r3, #4
 800a4ae:	e00d      	b.n	800a4cc <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a4b0:	230e      	movs	r3, #14
 800a4b2:	18fb      	adds	r3, r7, r3
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	227f      	movs	r2, #127	; 0x7f
 800a4b8:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a4ba:	0013      	movs	r3, r2
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	189b      	adds	r3, r3, r2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	3351      	adds	r3, #81	; 0x51
 800a4c4:	33ff      	adds	r3, #255	; 0xff
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	18d3      	adds	r3, r2, r3
 800a4ca:	3304      	adds	r3, #4
 800a4cc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a4d4:	68b9      	ldr	r1, [r7, #8]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2202      	movs	r2, #2
 800a4da:	0018      	movs	r0, r3
 800a4dc:	f000 fcae 	bl	800ae3c <USBD_CtlSendData>
              break;
 800a4e0:	e080      	b.n	800a5e4 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a4e2:	220e      	movs	r2, #14
 800a4e4:	18bb      	adds	r3, r7, r2
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	b25b      	sxtb	r3, r3
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	da14      	bge.n	800a518 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a4ee:	18bb      	adds	r3, r7, r2
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	220f      	movs	r2, #15
 800a4f4:	401a      	ands	r2, r3
 800a4f6:	6879      	ldr	r1, [r7, #4]
 800a4f8:	0013      	movs	r3, r2
 800a4fa:	009b      	lsls	r3, r3, #2
 800a4fc:	189b      	adds	r3, r3, r2
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	18cb      	adds	r3, r1, r3
 800a502:	3318      	adds	r3, #24
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d11e      	bne.n	800a548 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800a50a:	683a      	ldr	r2, [r7, #0]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	0011      	movs	r1, r2
 800a510:	0018      	movs	r0, r3
 800a512:	f000 fc15 	bl	800ad40 <USBD_CtlError>
                  break;
 800a516:	e065      	b.n	800a5e4 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a518:	230e      	movs	r3, #14
 800a51a:	18fb      	adds	r3, r7, r3
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	220f      	movs	r2, #15
 800a520:	401a      	ands	r2, r3
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	23ac      	movs	r3, #172	; 0xac
 800a526:	0059      	lsls	r1, r3, #1
 800a528:	0013      	movs	r3, r2
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	189b      	adds	r3, r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	18c3      	adds	r3, r0, r3
 800a532:	185b      	adds	r3, r3, r1
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d106      	bne.n	800a548 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800a53a:	683a      	ldr	r2, [r7, #0]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	0011      	movs	r1, r2
 800a540:	0018      	movs	r0, r3
 800a542:	f000 fbfd 	bl	800ad40 <USBD_CtlError>
                  break;
 800a546:	e04d      	b.n	800a5e4 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a548:	220e      	movs	r2, #14
 800a54a:	18bb      	adds	r3, r7, r2
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	b25b      	sxtb	r3, r3
 800a550:	2b00      	cmp	r3, #0
 800a552:	da0c      	bge.n	800a56e <USBD_StdEPReq+0x2c8>
 800a554:	18bb      	adds	r3, r7, r2
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	227f      	movs	r2, #127	; 0x7f
 800a55a:	401a      	ands	r2, r3
 800a55c:	0013      	movs	r3, r2
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	189b      	adds	r3, r3, r2
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	3310      	adds	r3, #16
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	18d3      	adds	r3, r2, r3
 800a56a:	3304      	adds	r3, #4
 800a56c:	e00d      	b.n	800a58a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a56e:	230e      	movs	r3, #14
 800a570:	18fb      	adds	r3, r7, r3
 800a572:	781b      	ldrb	r3, [r3, #0]
 800a574:	227f      	movs	r2, #127	; 0x7f
 800a576:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a578:	0013      	movs	r3, r2
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	189b      	adds	r3, r3, r2
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	3351      	adds	r3, #81	; 0x51
 800a582:	33ff      	adds	r3, #255	; 0xff
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	18d3      	adds	r3, r2, r3
 800a588:	3304      	adds	r3, #4
 800a58a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a58c:	220e      	movs	r2, #14
 800a58e:	18bb      	adds	r3, r7, r2
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d003      	beq.n	800a59e <USBD_StdEPReq+0x2f8>
 800a596:	18bb      	adds	r3, r7, r2
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	2b80      	cmp	r3, #128	; 0x80
 800a59c:	d103      	bne.n	800a5a6 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	601a      	str	r2, [r3, #0]
 800a5a4:	e010      	b.n	800a5c8 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a5a6:	230e      	movs	r3, #14
 800a5a8:	18fb      	adds	r3, r7, r3
 800a5aa:	781a      	ldrb	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	0011      	movs	r1, r2
 800a5b0:	0018      	movs	r0, r3
 800a5b2:	f001 f908 	bl	800b7c6 <USBD_LL_IsStallEP>
 800a5b6:	1e03      	subs	r3, r0, #0
 800a5b8:	d003      	beq.n	800a5c2 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	601a      	str	r2, [r3, #0]
 800a5c0:	e002      	b.n	800a5c8 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a5c8:	68b9      	ldr	r1, [r7, #8]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2202      	movs	r2, #2
 800a5ce:	0018      	movs	r0, r3
 800a5d0:	f000 fc34 	bl	800ae3c <USBD_CtlSendData>
              break;
 800a5d4:	e006      	b.n	800a5e4 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800a5d6:	683a      	ldr	r2, [r7, #0]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	0011      	movs	r1, r2
 800a5dc:	0018      	movs	r0, r3
 800a5de:	f000 fbaf 	bl	800ad40 <USBD_CtlError>
              break;
 800a5e2:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800a5e4:	e006      	b.n	800a5f4 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800a5e6:	683a      	ldr	r2, [r7, #0]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	0011      	movs	r1, r2
 800a5ec:	0018      	movs	r0, r3
 800a5ee:	f000 fba7 	bl	800ad40 <USBD_CtlError>
          break;
 800a5f2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a5f4:	e006      	b.n	800a604 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800a5f6:	683a      	ldr	r2, [r7, #0]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	0011      	movs	r1, r2
 800a5fc:	0018      	movs	r0, r3
 800a5fe:	f000 fb9f 	bl	800ad40 <USBD_CtlError>
      break;
 800a602:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800a604:	230f      	movs	r3, #15
 800a606:	18fb      	adds	r3, r7, r3
 800a608:	781b      	ldrb	r3, [r3, #0]
}
 800a60a:	0018      	movs	r0, r3
 800a60c:	46bd      	mov	sp, r7
 800a60e:	b004      	add	sp, #16
 800a610:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a614 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a61e:	2308      	movs	r3, #8
 800a620:	18fb      	adds	r3, r7, r3
 800a622:	2200      	movs	r2, #0
 800a624:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800a626:	2300      	movs	r3, #0
 800a628:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a62a:	230b      	movs	r3, #11
 800a62c:	18fb      	adds	r3, r7, r3
 800a62e:	2200      	movs	r2, #0
 800a630:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	885b      	ldrh	r3, [r3, #2]
 800a636:	0a1b      	lsrs	r3, r3, #8
 800a638:	b29b      	uxth	r3, r3
 800a63a:	2b07      	cmp	r3, #7
 800a63c:	d900      	bls.n	800a640 <USBD_GetDescriptor+0x2c>
 800a63e:	e159      	b.n	800a8f4 <USBD_GetDescriptor+0x2e0>
 800a640:	009a      	lsls	r2, r3, #2
 800a642:	4bcb      	ldr	r3, [pc, #812]	; (800a970 <USBD_GetDescriptor+0x35c>)
 800a644:	18d3      	adds	r3, r2, r3
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	23ac      	movs	r3, #172	; 0xac
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	58d3      	ldr	r3, [r2, r3]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	7c12      	ldrb	r2, [r2, #16]
 800a658:	2108      	movs	r1, #8
 800a65a:	1879      	adds	r1, r7, r1
 800a65c:	0010      	movs	r0, r2
 800a65e:	4798      	blx	r3
 800a660:	0003      	movs	r3, r0
 800a662:	60fb      	str	r3, [r7, #12]
      break;
 800a664:	e153      	b.n	800a90e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	7c1b      	ldrb	r3, [r3, #16]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d10f      	bne.n	800a68e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	23ad      	movs	r3, #173	; 0xad
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	58d3      	ldr	r3, [r2, r3]
 800a676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a678:	2208      	movs	r2, #8
 800a67a:	18ba      	adds	r2, r7, r2
 800a67c:	0010      	movs	r0, r2
 800a67e:	4798      	blx	r3
 800a680:	0003      	movs	r3, r0
 800a682:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	3301      	adds	r3, #1
 800a688:	2202      	movs	r2, #2
 800a68a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a68c:	e13f      	b.n	800a90e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	23ad      	movs	r3, #173	; 0xad
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	58d3      	ldr	r3, [r2, r3]
 800a696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a698:	2208      	movs	r2, #8
 800a69a:	18ba      	adds	r2, r7, r2
 800a69c:	0010      	movs	r0, r2
 800a69e:	4798      	blx	r3
 800a6a0:	0003      	movs	r3, r0
 800a6a2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	2202      	movs	r2, #2
 800a6aa:	701a      	strb	r2, [r3, #0]
      break;
 800a6ac:	e12f      	b.n	800a90e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	885b      	ldrh	r3, [r3, #2]
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	2b05      	cmp	r3, #5
 800a6b6:	d900      	bls.n	800a6ba <USBD_GetDescriptor+0xa6>
 800a6b8:	e0d0      	b.n	800a85c <USBD_GetDescriptor+0x248>
 800a6ba:	009a      	lsls	r2, r3, #2
 800a6bc:	4bad      	ldr	r3, [pc, #692]	; (800a974 <USBD_GetDescriptor+0x360>)
 800a6be:	18d3      	adds	r3, r2, r3
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	23ac      	movs	r3, #172	; 0xac
 800a6c8:	009b      	lsls	r3, r3, #2
 800a6ca:	58d3      	ldr	r3, [r2, r3]
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00d      	beq.n	800a6ee <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	23ac      	movs	r3, #172	; 0xac
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	58d3      	ldr	r3, [r2, r3]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	7c12      	ldrb	r2, [r2, #16]
 800a6e0:	2108      	movs	r1, #8
 800a6e2:	1879      	adds	r1, r7, r1
 800a6e4:	0010      	movs	r0, r2
 800a6e6:	4798      	blx	r3
 800a6e8:	0003      	movs	r3, r0
 800a6ea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a6ec:	e0c3      	b.n	800a876 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a6ee:	683a      	ldr	r2, [r7, #0]
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	0011      	movs	r1, r2
 800a6f4:	0018      	movs	r0, r3
 800a6f6:	f000 fb23 	bl	800ad40 <USBD_CtlError>
            err++;
 800a6fa:	210b      	movs	r1, #11
 800a6fc:	187b      	adds	r3, r7, r1
 800a6fe:	781a      	ldrb	r2, [r3, #0]
 800a700:	187b      	adds	r3, r7, r1
 800a702:	3201      	adds	r2, #1
 800a704:	701a      	strb	r2, [r3, #0]
          break;
 800a706:	e0b6      	b.n	800a876 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	23ac      	movs	r3, #172	; 0xac
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	58d3      	ldr	r3, [r2, r3]
 800a710:	689b      	ldr	r3, [r3, #8]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00d      	beq.n	800a732 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	23ac      	movs	r3, #172	; 0xac
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	58d3      	ldr	r3, [r2, r3]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	7c12      	ldrb	r2, [r2, #16]
 800a724:	2108      	movs	r1, #8
 800a726:	1879      	adds	r1, r7, r1
 800a728:	0010      	movs	r0, r2
 800a72a:	4798      	blx	r3
 800a72c:	0003      	movs	r3, r0
 800a72e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a730:	e0a1      	b.n	800a876 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a732:	683a      	ldr	r2, [r7, #0]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	0011      	movs	r1, r2
 800a738:	0018      	movs	r0, r3
 800a73a:	f000 fb01 	bl	800ad40 <USBD_CtlError>
            err++;
 800a73e:	210b      	movs	r1, #11
 800a740:	187b      	adds	r3, r7, r1
 800a742:	781a      	ldrb	r2, [r3, #0]
 800a744:	187b      	adds	r3, r7, r1
 800a746:	3201      	adds	r2, #1
 800a748:	701a      	strb	r2, [r3, #0]
          break;
 800a74a:	e094      	b.n	800a876 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	23ac      	movs	r3, #172	; 0xac
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	58d3      	ldr	r3, [r2, r3]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00d      	beq.n	800a776 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	23ac      	movs	r3, #172	; 0xac
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	58d3      	ldr	r3, [r2, r3]
 800a762:	68db      	ldr	r3, [r3, #12]
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	7c12      	ldrb	r2, [r2, #16]
 800a768:	2108      	movs	r1, #8
 800a76a:	1879      	adds	r1, r7, r1
 800a76c:	0010      	movs	r0, r2
 800a76e:	4798      	blx	r3
 800a770:	0003      	movs	r3, r0
 800a772:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a774:	e07f      	b.n	800a876 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a776:	683a      	ldr	r2, [r7, #0]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	0011      	movs	r1, r2
 800a77c:	0018      	movs	r0, r3
 800a77e:	f000 fadf 	bl	800ad40 <USBD_CtlError>
            err++;
 800a782:	210b      	movs	r1, #11
 800a784:	187b      	adds	r3, r7, r1
 800a786:	781a      	ldrb	r2, [r3, #0]
 800a788:	187b      	adds	r3, r7, r1
 800a78a:	3201      	adds	r2, #1
 800a78c:	701a      	strb	r2, [r3, #0]
          break;
 800a78e:	e072      	b.n	800a876 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	23ac      	movs	r3, #172	; 0xac
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	58d3      	ldr	r3, [r2, r3]
 800a798:	691b      	ldr	r3, [r3, #16]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d00d      	beq.n	800a7ba <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	23ac      	movs	r3, #172	; 0xac
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	58d3      	ldr	r3, [r2, r3]
 800a7a6:	691b      	ldr	r3, [r3, #16]
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	7c12      	ldrb	r2, [r2, #16]
 800a7ac:	2108      	movs	r1, #8
 800a7ae:	1879      	adds	r1, r7, r1
 800a7b0:	0010      	movs	r0, r2
 800a7b2:	4798      	blx	r3
 800a7b4:	0003      	movs	r3, r0
 800a7b6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7b8:	e05d      	b.n	800a876 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a7ba:	683a      	ldr	r2, [r7, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	0011      	movs	r1, r2
 800a7c0:	0018      	movs	r0, r3
 800a7c2:	f000 fabd 	bl	800ad40 <USBD_CtlError>
            err++;
 800a7c6:	210b      	movs	r1, #11
 800a7c8:	187b      	adds	r3, r7, r1
 800a7ca:	781a      	ldrb	r2, [r3, #0]
 800a7cc:	187b      	adds	r3, r7, r1
 800a7ce:	3201      	adds	r2, #1
 800a7d0:	701a      	strb	r2, [r3, #0]
          break;
 800a7d2:	e050      	b.n	800a876 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	23ac      	movs	r3, #172	; 0xac
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	58d3      	ldr	r3, [r2, r3]
 800a7dc:	695b      	ldr	r3, [r3, #20]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00d      	beq.n	800a7fe <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a7e2:	687a      	ldr	r2, [r7, #4]
 800a7e4:	23ac      	movs	r3, #172	; 0xac
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	58d3      	ldr	r3, [r2, r3]
 800a7ea:	695b      	ldr	r3, [r3, #20]
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	7c12      	ldrb	r2, [r2, #16]
 800a7f0:	2108      	movs	r1, #8
 800a7f2:	1879      	adds	r1, r7, r1
 800a7f4:	0010      	movs	r0, r2
 800a7f6:	4798      	blx	r3
 800a7f8:	0003      	movs	r3, r0
 800a7fa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7fc:	e03b      	b.n	800a876 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a7fe:	683a      	ldr	r2, [r7, #0]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	0011      	movs	r1, r2
 800a804:	0018      	movs	r0, r3
 800a806:	f000 fa9b 	bl	800ad40 <USBD_CtlError>
            err++;
 800a80a:	210b      	movs	r1, #11
 800a80c:	187b      	adds	r3, r7, r1
 800a80e:	781a      	ldrb	r2, [r3, #0]
 800a810:	187b      	adds	r3, r7, r1
 800a812:	3201      	adds	r2, #1
 800a814:	701a      	strb	r2, [r3, #0]
          break;
 800a816:	e02e      	b.n	800a876 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	23ac      	movs	r3, #172	; 0xac
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	58d3      	ldr	r3, [r2, r3]
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d00d      	beq.n	800a842 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	23ac      	movs	r3, #172	; 0xac
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	58d3      	ldr	r3, [r2, r3]
 800a82e:	699b      	ldr	r3, [r3, #24]
 800a830:	687a      	ldr	r2, [r7, #4]
 800a832:	7c12      	ldrb	r2, [r2, #16]
 800a834:	2108      	movs	r1, #8
 800a836:	1879      	adds	r1, r7, r1
 800a838:	0010      	movs	r0, r2
 800a83a:	4798      	blx	r3
 800a83c:	0003      	movs	r3, r0
 800a83e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a840:	e019      	b.n	800a876 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800a842:	683a      	ldr	r2, [r7, #0]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	0011      	movs	r1, r2
 800a848:	0018      	movs	r0, r3
 800a84a:	f000 fa79 	bl	800ad40 <USBD_CtlError>
            err++;
 800a84e:	210b      	movs	r1, #11
 800a850:	187b      	adds	r3, r7, r1
 800a852:	781a      	ldrb	r2, [r3, #0]
 800a854:	187b      	adds	r3, r7, r1
 800a856:	3201      	adds	r2, #1
 800a858:	701a      	strb	r2, [r3, #0]
          break;
 800a85a:	e00c      	b.n	800a876 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a85c:	683a      	ldr	r2, [r7, #0]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	0011      	movs	r1, r2
 800a862:	0018      	movs	r0, r3
 800a864:	f000 fa6c 	bl	800ad40 <USBD_CtlError>
          err++;
 800a868:	210b      	movs	r1, #11
 800a86a:	187b      	adds	r3, r7, r1
 800a86c:	781a      	ldrb	r2, [r3, #0]
 800a86e:	187b      	adds	r3, r7, r1
 800a870:	3201      	adds	r2, #1
 800a872:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800a874:	e04b      	b.n	800a90e <USBD_GetDescriptor+0x2fa>
 800a876:	e04a      	b.n	800a90e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	7c1b      	ldrb	r3, [r3, #16]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d10b      	bne.n	800a898 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	23ad      	movs	r3, #173	; 0xad
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	58d3      	ldr	r3, [r2, r3]
 800a888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a88a:	2208      	movs	r2, #8
 800a88c:	18ba      	adds	r2, r7, r2
 800a88e:	0010      	movs	r0, r2
 800a890:	4798      	blx	r3
 800a892:	0003      	movs	r3, r0
 800a894:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a896:	e03a      	b.n	800a90e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800a898:	683a      	ldr	r2, [r7, #0]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	0011      	movs	r1, r2
 800a89e:	0018      	movs	r0, r3
 800a8a0:	f000 fa4e 	bl	800ad40 <USBD_CtlError>
        err++;
 800a8a4:	210b      	movs	r1, #11
 800a8a6:	187b      	adds	r3, r7, r1
 800a8a8:	781a      	ldrb	r2, [r3, #0]
 800a8aa:	187b      	adds	r3, r7, r1
 800a8ac:	3201      	adds	r2, #1
 800a8ae:	701a      	strb	r2, [r3, #0]
      break;
 800a8b0:	e02d      	b.n	800a90e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	7c1b      	ldrb	r3, [r3, #16]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10f      	bne.n	800a8da <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	23ad      	movs	r3, #173	; 0xad
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	58d3      	ldr	r3, [r2, r3]
 800a8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c4:	2208      	movs	r2, #8
 800a8c6:	18ba      	adds	r2, r7, r2
 800a8c8:	0010      	movs	r0, r2
 800a8ca:	4798      	blx	r3
 800a8cc:	0003      	movs	r3, r0
 800a8ce:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	2207      	movs	r2, #7
 800a8d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8d8:	e019      	b.n	800a90e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800a8da:	683a      	ldr	r2, [r7, #0]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	0011      	movs	r1, r2
 800a8e0:	0018      	movs	r0, r3
 800a8e2:	f000 fa2d 	bl	800ad40 <USBD_CtlError>
        err++;
 800a8e6:	210b      	movs	r1, #11
 800a8e8:	187b      	adds	r3, r7, r1
 800a8ea:	781a      	ldrb	r2, [r3, #0]
 800a8ec:	187b      	adds	r3, r7, r1
 800a8ee:	3201      	adds	r2, #1
 800a8f0:	701a      	strb	r2, [r3, #0]
      break;
 800a8f2:	e00c      	b.n	800a90e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800a8f4:	683a      	ldr	r2, [r7, #0]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	0011      	movs	r1, r2
 800a8fa:	0018      	movs	r0, r3
 800a8fc:	f000 fa20 	bl	800ad40 <USBD_CtlError>
      err++;
 800a900:	210b      	movs	r1, #11
 800a902:	187b      	adds	r3, r7, r1
 800a904:	781a      	ldrb	r2, [r3, #0]
 800a906:	187b      	adds	r3, r7, r1
 800a908:	3201      	adds	r2, #1
 800a90a:	701a      	strb	r2, [r3, #0]
      break;
 800a90c:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800a90e:	230b      	movs	r3, #11
 800a910:	18fb      	adds	r3, r7, r3
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d127      	bne.n	800a968 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a918:	2108      	movs	r1, #8
 800a91a:	187b      	adds	r3, r7, r1
 800a91c:	881b      	ldrh	r3, [r3, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d019      	beq.n	800a956 <USBD_GetDescriptor+0x342>
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	88db      	ldrh	r3, [r3, #6]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d015      	beq.n	800a956 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	88da      	ldrh	r2, [r3, #6]
 800a92e:	187b      	adds	r3, r7, r1
 800a930:	881b      	ldrh	r3, [r3, #0]
 800a932:	1c18      	adds	r0, r3, #0
 800a934:	1c11      	adds	r1, r2, #0
 800a936:	b28a      	uxth	r2, r1
 800a938:	b283      	uxth	r3, r0
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d900      	bls.n	800a940 <USBD_GetDescriptor+0x32c>
 800a93e:	1c01      	adds	r1, r0, #0
 800a940:	b28a      	uxth	r2, r1
 800a942:	2108      	movs	r1, #8
 800a944:	187b      	adds	r3, r7, r1
 800a946:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a948:	187b      	adds	r3, r7, r1
 800a94a:	881a      	ldrh	r2, [r3, #0]
 800a94c:	68f9      	ldr	r1, [r7, #12]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	0018      	movs	r0, r3
 800a952:	f000 fa73 	bl	800ae3c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	88db      	ldrh	r3, [r3, #6]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d105      	bne.n	800a96a <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	0018      	movs	r0, r3
 800a962:	f000 fad5 	bl	800af10 <USBD_CtlSendStatus>
 800a966:	e000      	b.n	800a96a <USBD_GetDescriptor+0x356>
    return;
 800a968:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800a96a:	46bd      	mov	sp, r7
 800a96c:	b004      	add	sp, #16
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	0800c430 	.word	0x0800c430
 800a974:	0800c450 	.word	0x0800c450

0800a978 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a978:	b590      	push	{r4, r7, lr}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	889b      	ldrh	r3, [r3, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d13d      	bne.n	800aa06 <USBD_SetAddress+0x8e>
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	88db      	ldrh	r3, [r3, #6]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d139      	bne.n	800aa06 <USBD_SetAddress+0x8e>
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	885b      	ldrh	r3, [r3, #2]
 800a996:	2b7f      	cmp	r3, #127	; 0x7f
 800a998:	d835      	bhi.n	800aa06 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	885b      	ldrh	r3, [r3, #2]
 800a99e:	b2da      	uxtb	r2, r3
 800a9a0:	230f      	movs	r3, #15
 800a9a2:	18fb      	adds	r3, r7, r3
 800a9a4:	217f      	movs	r1, #127	; 0x7f
 800a9a6:	400a      	ands	r2, r1
 800a9a8:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	23a7      	movs	r3, #167	; 0xa7
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	5cd3      	ldrb	r3, [r2, r3]
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	d106      	bne.n	800a9c4 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800a9b6:	683a      	ldr	r2, [r7, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	0011      	movs	r1, r2
 800a9bc:	0018      	movs	r0, r3
 800a9be:	f000 f9bf 	bl	800ad40 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9c2:	e027      	b.n	800aa14 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	240f      	movs	r4, #15
 800a9c8:	193a      	adds	r2, r7, r4
 800a9ca:	4914      	ldr	r1, [pc, #80]	; (800aa1c <USBD_SetAddress+0xa4>)
 800a9cc:	7812      	ldrb	r2, [r2, #0]
 800a9ce:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a9d0:	193b      	adds	r3, r7, r4
 800a9d2:	781a      	ldrb	r2, [r3, #0]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	0011      	movs	r1, r2
 800a9d8:	0018      	movs	r0, r3
 800a9da:	f000 ff25 	bl	800b828 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	0018      	movs	r0, r3
 800a9e2:	f000 fa95 	bl	800af10 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a9e6:	193b      	adds	r3, r7, r4
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d005      	beq.n	800a9fa <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	23a7      	movs	r3, #167	; 0xa7
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	2102      	movs	r1, #2
 800a9f6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9f8:	e00c      	b.n	800aa14 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	23a7      	movs	r3, #167	; 0xa7
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	2101      	movs	r1, #1
 800aa02:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa04:	e006      	b.n	800aa14 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aa06:	683a      	ldr	r2, [r7, #0]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	0011      	movs	r1, r2
 800aa0c:	0018      	movs	r0, r3
 800aa0e:	f000 f997 	bl	800ad40 <USBD_CtlError>
  }
}
 800aa12:	46c0      	nop			; (mov r8, r8)
 800aa14:	46c0      	nop			; (mov r8, r8)
 800aa16:	46bd      	mov	sp, r7
 800aa18:	b005      	add	sp, #20
 800aa1a:	bd90      	pop	{r4, r7, pc}
 800aa1c:	0000029e 	.word	0x0000029e

0800aa20 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	885b      	ldrh	r3, [r3, #2]
 800aa2e:	b2da      	uxtb	r2, r3
 800aa30:	4b4c      	ldr	r3, [pc, #304]	; (800ab64 <USBD_SetConfig+0x144>)
 800aa32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aa34:	4b4b      	ldr	r3, [pc, #300]	; (800ab64 <USBD_SetConfig+0x144>)
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d906      	bls.n	800aa4a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800aa3c:	683a      	ldr	r2, [r7, #0]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	0011      	movs	r1, r2
 800aa42:	0018      	movs	r0, r3
 800aa44:	f000 f97c 	bl	800ad40 <USBD_CtlError>
 800aa48:	e088      	b.n	800ab5c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	23a7      	movs	r3, #167	; 0xa7
 800aa4e:	009b      	lsls	r3, r3, #2
 800aa50:	5cd3      	ldrb	r3, [r2, r3]
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	d002      	beq.n	800aa5c <USBD_SetConfig+0x3c>
 800aa56:	2b03      	cmp	r3, #3
 800aa58:	d029      	beq.n	800aaae <USBD_SetConfig+0x8e>
 800aa5a:	e071      	b.n	800ab40 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800aa5c:	4b41      	ldr	r3, [pc, #260]	; (800ab64 <USBD_SetConfig+0x144>)
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d01f      	beq.n	800aaa4 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800aa64:	4b3f      	ldr	r3, [pc, #252]	; (800ab64 <USBD_SetConfig+0x144>)
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	001a      	movs	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	23a7      	movs	r3, #167	; 0xa7
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	2103      	movs	r1, #3
 800aa76:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aa78:	4b3a      	ldr	r3, [pc, #232]	; (800ab64 <USBD_SetConfig+0x144>)
 800aa7a:	781a      	ldrb	r2, [r3, #0]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	0011      	movs	r1, r2
 800aa80:	0018      	movs	r0, r3
 800aa82:	f7ff f8c6 	bl	8009c12 <USBD_SetClassConfig>
 800aa86:	0003      	movs	r3, r0
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	d106      	bne.n	800aa9a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800aa8c:	683a      	ldr	r2, [r7, #0]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	0011      	movs	r1, r2
 800aa92:	0018      	movs	r0, r3
 800aa94:	f000 f954 	bl	800ad40 <USBD_CtlError>
            return;
 800aa98:	e060      	b.n	800ab5c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	0018      	movs	r0, r3
 800aa9e:	f000 fa37 	bl	800af10 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aaa2:	e05b      	b.n	800ab5c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	0018      	movs	r0, r3
 800aaa8:	f000 fa32 	bl	800af10 <USBD_CtlSendStatus>
        break;
 800aaac:	e056      	b.n	800ab5c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800aaae:	4b2d      	ldr	r3, [pc, #180]	; (800ab64 <USBD_SetConfig+0x144>)
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d115      	bne.n	800aae2 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	23a7      	movs	r3, #167	; 0xa7
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	2102      	movs	r1, #2
 800aabe:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800aac0:	4b28      	ldr	r3, [pc, #160]	; (800ab64 <USBD_SetConfig+0x144>)
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	001a      	movs	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800aaca:	4b26      	ldr	r3, [pc, #152]	; (800ab64 <USBD_SetConfig+0x144>)
 800aacc:	781a      	ldrb	r2, [r3, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	0011      	movs	r1, r2
 800aad2:	0018      	movs	r0, r3
 800aad4:	f7ff f8c4 	bl	8009c60 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	0018      	movs	r0, r3
 800aadc:	f000 fa18 	bl	800af10 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aae0:	e03c      	b.n	800ab5c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800aae2:	4b20      	ldr	r3, [pc, #128]	; (800ab64 <USBD_SetConfig+0x144>)
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	001a      	movs	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d022      	beq.n	800ab36 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	b2da      	uxtb	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	0011      	movs	r1, r2
 800aafa:	0018      	movs	r0, r3
 800aafc:	f7ff f8b0 	bl	8009c60 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800ab00:	4b18      	ldr	r3, [pc, #96]	; (800ab64 <USBD_SetConfig+0x144>)
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	001a      	movs	r2, r3
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ab0a:	4b16      	ldr	r3, [pc, #88]	; (800ab64 <USBD_SetConfig+0x144>)
 800ab0c:	781a      	ldrb	r2, [r3, #0]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	0011      	movs	r1, r2
 800ab12:	0018      	movs	r0, r3
 800ab14:	f7ff f87d 	bl	8009c12 <USBD_SetClassConfig>
 800ab18:	0003      	movs	r3, r0
 800ab1a:	2b02      	cmp	r3, #2
 800ab1c:	d106      	bne.n	800ab2c <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800ab1e:	683a      	ldr	r2, [r7, #0]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	0011      	movs	r1, r2
 800ab24:	0018      	movs	r0, r3
 800ab26:	f000 f90b 	bl	800ad40 <USBD_CtlError>
            return;
 800ab2a:	e017      	b.n	800ab5c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	0018      	movs	r0, r3
 800ab30:	f000 f9ee 	bl	800af10 <USBD_CtlSendStatus>
        break;
 800ab34:	e012      	b.n	800ab5c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	0018      	movs	r0, r3
 800ab3a:	f000 f9e9 	bl	800af10 <USBD_CtlSendStatus>
        break;
 800ab3e:	e00d      	b.n	800ab5c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800ab40:	683a      	ldr	r2, [r7, #0]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	0011      	movs	r1, r2
 800ab46:	0018      	movs	r0, r3
 800ab48:	f000 f8fa 	bl	800ad40 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ab4c:	4b05      	ldr	r3, [pc, #20]	; (800ab64 <USBD_SetConfig+0x144>)
 800ab4e:	781a      	ldrb	r2, [r3, #0]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	0011      	movs	r1, r2
 800ab54:	0018      	movs	r0, r3
 800ab56:	f7ff f883 	bl	8009c60 <USBD_ClrClassConfig>
        break;
 800ab5a:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	b002      	add	sp, #8
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	46c0      	nop			; (mov r8, r8)
 800ab64:	20000219 	.word	0x20000219

0800ab68 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b082      	sub	sp, #8
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	88db      	ldrh	r3, [r3, #6]
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d006      	beq.n	800ab88 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800ab7a:	683a      	ldr	r2, [r7, #0]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	0011      	movs	r1, r2
 800ab80:	0018      	movs	r0, r3
 800ab82:	f000 f8dd 	bl	800ad40 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ab86:	e026      	b.n	800abd6 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	23a7      	movs	r3, #167	; 0xa7
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	5cd3      	ldrb	r3, [r2, r3]
 800ab90:	2b02      	cmp	r3, #2
 800ab92:	dc02      	bgt.n	800ab9a <USBD_GetConfig+0x32>
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	dc03      	bgt.n	800aba0 <USBD_GetConfig+0x38>
 800ab98:	e016      	b.n	800abc8 <USBD_GetConfig+0x60>
 800ab9a:	2b03      	cmp	r3, #3
 800ab9c:	d00c      	beq.n	800abb8 <USBD_GetConfig+0x50>
 800ab9e:	e013      	b.n	800abc8 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2200      	movs	r2, #0
 800aba4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	3308      	adds	r3, #8
 800abaa:	0019      	movs	r1, r3
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	0018      	movs	r0, r3
 800abb2:	f000 f943 	bl	800ae3c <USBD_CtlSendData>
        break;
 800abb6:	e00e      	b.n	800abd6 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	1d19      	adds	r1, r3, #4
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	0018      	movs	r0, r3
 800abc2:	f000 f93b 	bl	800ae3c <USBD_CtlSendData>
        break;
 800abc6:	e006      	b.n	800abd6 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800abc8:	683a      	ldr	r2, [r7, #0]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	0011      	movs	r1, r2
 800abce:	0018      	movs	r0, r3
 800abd0:	f000 f8b6 	bl	800ad40 <USBD_CtlError>
        break;
 800abd4:	46c0      	nop			; (mov r8, r8)
}
 800abd6:	46c0      	nop			; (mov r8, r8)
 800abd8:	46bd      	mov	sp, r7
 800abda:	b002      	add	sp, #8
 800abdc:	bd80      	pop	{r7, pc}

0800abde <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abde:	b580      	push	{r7, lr}
 800abe0:	b082      	sub	sp, #8
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
 800abe6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	23a7      	movs	r3, #167	; 0xa7
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	5cd3      	ldrb	r3, [r2, r3]
 800abf0:	3b01      	subs	r3, #1
 800abf2:	2b02      	cmp	r3, #2
 800abf4:	d822      	bhi.n	800ac3c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	88db      	ldrh	r3, [r3, #6]
 800abfa:	2b02      	cmp	r3, #2
 800abfc:	d006      	beq.n	800ac0c <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800abfe:	683a      	ldr	r2, [r7, #0]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	0011      	movs	r1, r2
 800ac04:	0018      	movs	r0, r3
 800ac06:	f000 f89b 	bl	800ad40 <USBD_CtlError>
        break;
 800ac0a:	e01e      	b.n	800ac4a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	23a9      	movs	r3, #169	; 0xa9
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	58d3      	ldr	r3, [r2, r3]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d005      	beq.n	800ac2a <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	68db      	ldr	r3, [r3, #12]
 800ac22:	2202      	movs	r2, #2
 800ac24:	431a      	orrs	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	330c      	adds	r3, #12
 800ac2e:	0019      	movs	r1, r3
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2202      	movs	r2, #2
 800ac34:	0018      	movs	r0, r3
 800ac36:	f000 f901 	bl	800ae3c <USBD_CtlSendData>
      break;
 800ac3a:	e006      	b.n	800ac4a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800ac3c:	683a      	ldr	r2, [r7, #0]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	0011      	movs	r1, r2
 800ac42:	0018      	movs	r0, r3
 800ac44:	f000 f87c 	bl	800ad40 <USBD_CtlError>
      break;
 800ac48:	46c0      	nop			; (mov r8, r8)
  }
}
 800ac4a:	46c0      	nop			; (mov r8, r8)
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	b002      	add	sp, #8
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b082      	sub	sp, #8
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
 800ac5a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	885b      	ldrh	r3, [r3, #2]
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d108      	bne.n	800ac76 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	23a9      	movs	r3, #169	; 0xa9
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	2101      	movs	r1, #1
 800ac6c:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	0018      	movs	r0, r3
 800ac72:	f000 f94d 	bl	800af10 <USBD_CtlSendStatus>
  }
}
 800ac76:	46c0      	nop			; (mov r8, r8)
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	b002      	add	sp, #8
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b082      	sub	sp, #8
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
 800ac86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	23a7      	movs	r3, #167	; 0xa7
 800ac8c:	009b      	lsls	r3, r3, #2
 800ac8e:	5cd3      	ldrb	r3, [r2, r3]
 800ac90:	3b01      	subs	r3, #1
 800ac92:	2b02      	cmp	r3, #2
 800ac94:	d80d      	bhi.n	800acb2 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	885b      	ldrh	r3, [r3, #2]
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d110      	bne.n	800acc0 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	23a9      	movs	r3, #169	; 0xa9
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	2100      	movs	r1, #0
 800aca6:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	0018      	movs	r0, r3
 800acac:	f000 f930 	bl	800af10 <USBD_CtlSendStatus>
      }
      break;
 800acb0:	e006      	b.n	800acc0 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800acb2:	683a      	ldr	r2, [r7, #0]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	0011      	movs	r1, r2
 800acb8:	0018      	movs	r0, r3
 800acba:	f000 f841 	bl	800ad40 <USBD_CtlError>
      break;
 800acbe:	e000      	b.n	800acc2 <USBD_ClrFeature+0x44>
      break;
 800acc0:	46c0      	nop			; (mov r8, r8)
  }
}
 800acc2:	46c0      	nop			; (mov r8, r8)
 800acc4:	46bd      	mov	sp, r7
 800acc6:	b002      	add	sp, #8
 800acc8:	bd80      	pop	{r7, pc}

0800acca <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800acca:	b580      	push	{r7, lr}
 800accc:	b082      	sub	sp, #8
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
 800acd2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	781a      	ldrb	r2, [r3, #0]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	785a      	ldrb	r2, [r3, #1]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	3302      	adds	r3, #2
 800ace8:	781b      	ldrb	r3, [r3, #0]
 800acea:	b29a      	uxth	r2, r3
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	3303      	adds	r3, #3
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	021b      	lsls	r3, r3, #8
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	18d3      	adds	r3, r2, r3
 800acfa:	b29a      	uxth	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	3304      	adds	r3, #4
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	b29a      	uxth	r2, r3
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	3305      	adds	r3, #5
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	021b      	lsls	r3, r3, #8
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	18d3      	adds	r3, r2, r3
 800ad16:	b29a      	uxth	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	3306      	adds	r3, #6
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	b29a      	uxth	r2, r3
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	3307      	adds	r3, #7
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	021b      	lsls	r3, r3, #8
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	18d3      	adds	r3, r2, r3
 800ad32:	b29a      	uxth	r2, r3
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	80da      	strh	r2, [r3, #6]

}
 800ad38:	46c0      	nop			; (mov r8, r8)
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	b002      	add	sp, #8
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2180      	movs	r1, #128	; 0x80
 800ad4e:	0018      	movs	r0, r3
 800ad50:	f000 fce3 	bl	800b71a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2100      	movs	r1, #0
 800ad58:	0018      	movs	r0, r3
 800ad5a:	f000 fcde 	bl	800b71a <USBD_LL_StallEP>
}
 800ad5e:	46c0      	nop			; (mov r8, r8)
 800ad60:	46bd      	mov	sp, r7
 800ad62:	b002      	add	sp, #8
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ad66:	b590      	push	{r4, r7, lr}
 800ad68:	b087      	sub	sp, #28
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	60f8      	str	r0, [r7, #12]
 800ad6e:	60b9      	str	r1, [r7, #8]
 800ad70:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ad72:	2417      	movs	r4, #23
 800ad74:	193b      	adds	r3, r7, r4
 800ad76:	2200      	movs	r2, #0
 800ad78:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d03c      	beq.n	800adfa <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	0018      	movs	r0, r3
 800ad84:	f000 f83d 	bl	800ae02 <USBD_GetLen>
 800ad88:	0003      	movs	r3, r0
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	18db      	adds	r3, r3, r3
 800ad90:	b29a      	uxth	r2, r3
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ad96:	193b      	adds	r3, r7, r4
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	193a      	adds	r2, r7, r4
 800ad9c:	1c59      	adds	r1, r3, #1
 800ad9e:	7011      	strb	r1, [r2, #0]
 800ada0:	001a      	movs	r2, r3
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	189b      	adds	r3, r3, r2
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	7812      	ldrb	r2, [r2, #0]
 800adaa:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800adac:	193b      	adds	r3, r7, r4
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	193a      	adds	r2, r7, r4
 800adb2:	1c59      	adds	r1, r3, #1
 800adb4:	7011      	strb	r1, [r2, #0]
 800adb6:	001a      	movs	r2, r3
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	189b      	adds	r3, r3, r2
 800adbc:	2203      	movs	r2, #3
 800adbe:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800adc0:	e017      	b.n	800adf2 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	1c5a      	adds	r2, r3, #1
 800adc6:	60fa      	str	r2, [r7, #12]
 800adc8:	2417      	movs	r4, #23
 800adca:	193a      	adds	r2, r7, r4
 800adcc:	7812      	ldrb	r2, [r2, #0]
 800adce:	1939      	adds	r1, r7, r4
 800add0:	1c50      	adds	r0, r2, #1
 800add2:	7008      	strb	r0, [r1, #0]
 800add4:	0011      	movs	r1, r2
 800add6:	68ba      	ldr	r2, [r7, #8]
 800add8:	1852      	adds	r2, r2, r1
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800adde:	193b      	adds	r3, r7, r4
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	193a      	adds	r2, r7, r4
 800ade4:	1c59      	adds	r1, r3, #1
 800ade6:	7011      	strb	r1, [r2, #0]
 800ade8:	001a      	movs	r2, r3
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	189b      	adds	r3, r3, r2
 800adee:	2200      	movs	r2, #0
 800adf0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d1e3      	bne.n	800adc2 <USBD_GetString+0x5c>
    }
  }
}
 800adfa:	46c0      	nop			; (mov r8, r8)
 800adfc:	46bd      	mov	sp, r7
 800adfe:	b007      	add	sp, #28
 800ae00:	bd90      	pop	{r4, r7, pc}

0800ae02 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ae02:	b580      	push	{r7, lr}
 800ae04:	b084      	sub	sp, #16
 800ae06:	af00      	add	r7, sp, #0
 800ae08:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ae0a:	230f      	movs	r3, #15
 800ae0c:	18fb      	adds	r3, r7, r3
 800ae0e:	2200      	movs	r2, #0
 800ae10:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800ae12:	e008      	b.n	800ae26 <USBD_GetLen+0x24>
  {
    len++;
 800ae14:	210f      	movs	r1, #15
 800ae16:	187b      	adds	r3, r7, r1
 800ae18:	781a      	ldrb	r2, [r3, #0]
 800ae1a:	187b      	adds	r3, r7, r1
 800ae1c:	3201      	adds	r2, #1
 800ae1e:	701a      	strb	r2, [r3, #0]
    buf++;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	3301      	adds	r3, #1
 800ae24:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d1f2      	bne.n	800ae14 <USBD_GetLen+0x12>
  }

  return len;
 800ae2e:	230f      	movs	r3, #15
 800ae30:	18fb      	adds	r3, r7, r3
 800ae32:	781b      	ldrb	r3, [r3, #0]
}
 800ae34:	0018      	movs	r0, r3
 800ae36:	46bd      	mov	sp, r7
 800ae38:	b004      	add	sp, #16
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	1dbb      	adds	r3, r7, #6
 800ae48:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	23a5      	movs	r3, #165	; 0xa5
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	2102      	movs	r1, #2
 800ae52:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800ae54:	1dbb      	adds	r3, r7, #6
 800ae56:	881a      	ldrh	r2, [r3, #0]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ae5c:	1dbb      	adds	r3, r7, #6
 800ae5e:	881a      	ldrh	r2, [r3, #0]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae64:	1dbb      	adds	r3, r7, #6
 800ae66:	881b      	ldrh	r3, [r3, #0]
 800ae68:	68ba      	ldr	r2, [r7, #8]
 800ae6a:	68f8      	ldr	r0, [r7, #12]
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	f000 fd06 	bl	800b87e <USBD_LL_Transmit>

  return USBD_OK;
 800ae72:	2300      	movs	r3, #0
}
 800ae74:	0018      	movs	r0, r3
 800ae76:	46bd      	mov	sp, r7
 800ae78:	b004      	add	sp, #16
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	1dbb      	adds	r3, r7, #6
 800ae88:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae8a:	1dbb      	adds	r3, r7, #6
 800ae8c:	881b      	ldrh	r3, [r3, #0]
 800ae8e:	68ba      	ldr	r2, [r7, #8]
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	2100      	movs	r1, #0
 800ae94:	f000 fcf3 	bl	800b87e <USBD_LL_Transmit>

  return USBD_OK;
 800ae98:	2300      	movs	r3, #0
}
 800ae9a:	0018      	movs	r0, r3
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	b004      	add	sp, #16
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b084      	sub	sp, #16
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	60f8      	str	r0, [r7, #12]
 800aeaa:	60b9      	str	r1, [r7, #8]
 800aeac:	1dbb      	adds	r3, r7, #6
 800aeae:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aeb0:	68fa      	ldr	r2, [r7, #12]
 800aeb2:	23a5      	movs	r3, #165	; 0xa5
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	2103      	movs	r1, #3
 800aeb8:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800aeba:	1dbb      	adds	r3, r7, #6
 800aebc:	8819      	ldrh	r1, [r3, #0]
 800aebe:	68fa      	ldr	r2, [r7, #12]
 800aec0:	23ae      	movs	r3, #174	; 0xae
 800aec2:	005b      	lsls	r3, r3, #1
 800aec4:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800aec6:	1dbb      	adds	r3, r7, #6
 800aec8:	8819      	ldrh	r1, [r3, #0]
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	23b0      	movs	r3, #176	; 0xb0
 800aece:	005b      	lsls	r3, r3, #1
 800aed0:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aed2:	1dbb      	adds	r3, r7, #6
 800aed4:	881b      	ldrh	r3, [r3, #0]
 800aed6:	68ba      	ldr	r2, [r7, #8]
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	2100      	movs	r1, #0
 800aedc:	f000 fd06 	bl	800b8ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	0018      	movs	r0, r3
 800aee4:	46bd      	mov	sp, r7
 800aee6:	b004      	add	sp, #16
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b084      	sub	sp, #16
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	60f8      	str	r0, [r7, #12]
 800aef2:	60b9      	str	r1, [r7, #8]
 800aef4:	1dbb      	adds	r3, r7, #6
 800aef6:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aef8:	1dbb      	adds	r3, r7, #6
 800aefa:	881b      	ldrh	r3, [r3, #0]
 800aefc:	68ba      	ldr	r2, [r7, #8]
 800aefe:	68f8      	ldr	r0, [r7, #12]
 800af00:	2100      	movs	r1, #0
 800af02:	f000 fcf3 	bl	800b8ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af06:	2300      	movs	r3, #0
}
 800af08:	0018      	movs	r0, r3
 800af0a:	46bd      	mov	sp, r7
 800af0c:	b004      	add	sp, #16
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	23a5      	movs	r3, #165	; 0xa5
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	2104      	movs	r1, #4
 800af20:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	2300      	movs	r3, #0
 800af26:	2200      	movs	r2, #0
 800af28:	2100      	movs	r1, #0
 800af2a:	f000 fca8 	bl	800b87e <USBD_LL_Transmit>

  return USBD_OK;
 800af2e:	2300      	movs	r3, #0
}
 800af30:	0018      	movs	r0, r3
 800af32:	46bd      	mov	sp, r7
 800af34:	b002      	add	sp, #8
 800af36:	bd80      	pop	{r7, pc}

0800af38 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	23a5      	movs	r3, #165	; 0xa5
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	2105      	movs	r1, #5
 800af48:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	2300      	movs	r3, #0
 800af4e:	2200      	movs	r2, #0
 800af50:	2100      	movs	r1, #0
 800af52:	f000 fccb 	bl	800b8ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af56:	2300      	movs	r3, #0
}
 800af58:	0018      	movs	r0, r3
 800af5a:	46bd      	mov	sp, r7
 800af5c:	b002      	add	sp, #8
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800af64:	4914      	ldr	r1, [pc, #80]	; (800afb8 <MX_USB_DEVICE_Init+0x58>)
 800af66:	4b15      	ldr	r3, [pc, #84]	; (800afbc <MX_USB_DEVICE_Init+0x5c>)
 800af68:	2200      	movs	r2, #0
 800af6a:	0018      	movs	r0, r3
 800af6c:	f7fe fdea 	bl	8009b44 <USBD_Init>
 800af70:	1e03      	subs	r3, r0, #0
 800af72:	d001      	beq.n	800af78 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800af74:	f7f6 f9e6 	bl	8001344 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800af78:	4a11      	ldr	r2, [pc, #68]	; (800afc0 <MX_USB_DEVICE_Init+0x60>)
 800af7a:	4b10      	ldr	r3, [pc, #64]	; (800afbc <MX_USB_DEVICE_Init+0x5c>)
 800af7c:	0011      	movs	r1, r2
 800af7e:	0018      	movs	r0, r3
 800af80:	f7fe fe11 	bl	8009ba6 <USBD_RegisterClass>
 800af84:	1e03      	subs	r3, r0, #0
 800af86:	d001      	beq.n	800af8c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800af88:	f7f6 f9dc 	bl	8001344 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800af8c:	4a0d      	ldr	r2, [pc, #52]	; (800afc4 <MX_USB_DEVICE_Init+0x64>)
 800af8e:	4b0b      	ldr	r3, [pc, #44]	; (800afbc <MX_USB_DEVICE_Init+0x5c>)
 800af90:	0011      	movs	r1, r2
 800af92:	0018      	movs	r0, r3
 800af94:	f7fe fd26 	bl	80099e4 <USBD_CDC_RegisterInterface>
 800af98:	1e03      	subs	r3, r0, #0
 800af9a:	d001      	beq.n	800afa0 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800af9c:	f7f6 f9d2 	bl	8001344 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800afa0:	4b06      	ldr	r3, [pc, #24]	; (800afbc <MX_USB_DEVICE_Init+0x5c>)
 800afa2:	0018      	movs	r0, r3
 800afa4:	f7fe fe1f 	bl	8009be6 <USBD_Start>
 800afa8:	1e03      	subs	r3, r0, #0
 800afaa:	d001      	beq.n	800afb0 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800afac:	f7f6 f9ca 	bl	8001344 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800afb0:	46c0      	nop			; (mov r8, r8)
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	46c0      	nop			; (mov r8, r8)
 800afb8:	2000012c 	.word	0x2000012c
 800afbc:	2000063c 	.word	0x2000063c
 800afc0:	20000018 	.word	0x20000018
 800afc4:	2000011c 	.word	0x2000011c

0800afc8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800afcc:	4907      	ldr	r1, [pc, #28]	; (800afec <CDC_Init_FS+0x24>)
 800afce:	4b08      	ldr	r3, [pc, #32]	; (800aff0 <CDC_Init_FS+0x28>)
 800afd0:	2200      	movs	r2, #0
 800afd2:	0018      	movs	r0, r3
 800afd4:	f7fe fd21 	bl	8009a1a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800afd8:	4a06      	ldr	r2, [pc, #24]	; (800aff4 <CDC_Init_FS+0x2c>)
 800afda:	4b05      	ldr	r3, [pc, #20]	; (800aff0 <CDC_Init_FS+0x28>)
 800afdc:	0011      	movs	r1, r2
 800afde:	0018      	movs	r0, r3
 800afe0:	f7fe fd37 	bl	8009a52 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800afe4:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800afe6:	0018      	movs	r0, r3
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}
 800afec:	20000ce8 	.word	0x20000ce8
 800aff0:	2000063c 	.word	0x2000063c
 800aff4:	20000900 	.word	0x20000900

0800aff8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800affc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800affe:	0018      	movs	r0, r3
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6039      	str	r1, [r7, #0]
 800b00c:	0011      	movs	r1, r2
 800b00e:	1dfb      	adds	r3, r7, #7
 800b010:	1c02      	adds	r2, r0, #0
 800b012:	701a      	strb	r2, [r3, #0]
 800b014:	1d3b      	adds	r3, r7, #4
 800b016:	1c0a      	adds	r2, r1, #0
 800b018:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b01a:	1dfb      	adds	r3, r7, #7
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	2b23      	cmp	r3, #35	; 0x23
 800b020:	d804      	bhi.n	800b02c <CDC_Control_FS+0x28>
 800b022:	009a      	lsls	r2, r3, #2
 800b024:	4b04      	ldr	r3, [pc, #16]	; (800b038 <CDC_Control_FS+0x34>)
 800b026:	18d3      	adds	r3, r2, r3
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b02c:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800b02e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b030:	0018      	movs	r0, r3
 800b032:	46bd      	mov	sp, r7
 800b034:	b002      	add	sp, #8
 800b036:	bd80      	pop	{r7, pc}
 800b038:	0800c468 	.word	0x0800c468

0800b03c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b03c:	b590      	push	{r4, r7, lr}
 800b03e:	b085      	sub	sp, #20
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  flags.data_received = 1;
 800b046:	4b18      	ldr	r3, [pc, #96]	; (800b0a8 <CDC_Receive_FS+0x6c>)
 800b048:	7a1a      	ldrb	r2, [r3, #8]
 800b04a:	2101      	movs	r1, #1
 800b04c:	430a      	orrs	r2, r1
 800b04e:	721a      	strb	r2, [r3, #8]

  for(uint8_t i = 0; i < *Len; i++)
 800b050:	230f      	movs	r3, #15
 800b052:	18fb      	adds	r3, r7, r3
 800b054:	2200      	movs	r2, #0
 800b056:	701a      	strb	r2, [r3, #0]
 800b058:	e00f      	b.n	800b07a <CDC_Receive_FS+0x3e>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800b05a:	4b14      	ldr	r3, [pc, #80]	; (800b0ac <CDC_Receive_FS+0x70>)
 800b05c:	6818      	ldr	r0, [r3, #0]
 800b05e:	240f      	movs	r4, #15
 800b060:	193b      	adds	r3, r7, r4
 800b062:	781b      	ldrb	r3, [r3, #0]
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	18d3      	adds	r3, r2, r3
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	0019      	movs	r1, r3
 800b06c:	f7f6 f9a4 	bl	80013b8 <push>
  for(uint8_t i = 0; i < *Len; i++)
 800b070:	193b      	adds	r3, r7, r4
 800b072:	781a      	ldrb	r2, [r3, #0]
 800b074:	193b      	adds	r3, r7, r4
 800b076:	3201      	adds	r2, #1
 800b078:	701a      	strb	r2, [r3, #0]
 800b07a:	230f      	movs	r3, #15
 800b07c:	18fb      	adds	r3, r7, r3
 800b07e:	781a      	ldrb	r2, [r3, #0]
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	429a      	cmp	r2, r3
 800b086:	d3e8      	bcc.n	800b05a <CDC_Receive_FS+0x1e>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	4b09      	ldr	r3, [pc, #36]	; (800b0b0 <CDC_Receive_FS+0x74>)
 800b08c:	0011      	movs	r1, r2
 800b08e:	0018      	movs	r0, r3
 800b090:	f7fe fcdf 	bl	8009a52 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b094:	4b06      	ldr	r3, [pc, #24]	; (800b0b0 <CDC_Receive_FS+0x74>)
 800b096:	0018      	movs	r0, r3
 800b098:	f7fe fd26 	bl	8009ae8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b09c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b09e:	0018      	movs	r0, r3
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	b005      	add	sp, #20
 800b0a4:	bd90      	pop	{r4, r7, pc}
 800b0a6:	46c0      	nop			; (mov r8, r8)
 800b0a8:	20000584 	.word	0x20000584
 800b0ac:	200010d0 	.word	0x200010d0
 800b0b0:	2000063c 	.word	0x2000063c

0800b0b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b0b4:	b5b0      	push	{r4, r5, r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	000a      	movs	r2, r1
 800b0be:	1cbb      	adds	r3, r7, #2
 800b0c0:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800b0c2:	230f      	movs	r3, #15
 800b0c4:	18fb      	adds	r3, r7, r3
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b0ca:	4a11      	ldr	r2, [pc, #68]	; (800b110 <CDC_Transmit_FS+0x5c>)
 800b0cc:	23ae      	movs	r3, #174	; 0xae
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	58d3      	ldr	r3, [r2, r3]
 800b0d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b0d4:	68ba      	ldr	r2, [r7, #8]
 800b0d6:	2385      	movs	r3, #133	; 0x85
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	58d3      	ldr	r3, [r2, r3]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d001      	beq.n	800b0e4 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e010      	b.n	800b106 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b0e4:	1cbb      	adds	r3, r7, #2
 800b0e6:	881a      	ldrh	r2, [r3, #0]
 800b0e8:	6879      	ldr	r1, [r7, #4]
 800b0ea:	4b09      	ldr	r3, [pc, #36]	; (800b110 <CDC_Transmit_FS+0x5c>)
 800b0ec:	0018      	movs	r0, r3
 800b0ee:	f7fe fc94 	bl	8009a1a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b0f2:	250f      	movs	r5, #15
 800b0f4:	197c      	adds	r4, r7, r5
 800b0f6:	4b06      	ldr	r3, [pc, #24]	; (800b110 <CDC_Transmit_FS+0x5c>)
 800b0f8:	0018      	movs	r0, r3
 800b0fa:	f7fe fcbe 	bl	8009a7a <USBD_CDC_TransmitPacket>
 800b0fe:	0003      	movs	r3, r0
 800b100:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800b102:	197b      	adds	r3, r7, r5
 800b104:	781b      	ldrb	r3, [r3, #0]
}
 800b106:	0018      	movs	r0, r3
 800b108:	46bd      	mov	sp, r7
 800b10a:	b004      	add	sp, #16
 800b10c:	bdb0      	pop	{r4, r5, r7, pc}
 800b10e:	46c0      	nop			; (mov r8, r8)
 800b110:	2000063c 	.word	0x2000063c

0800b114 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	0002      	movs	r2, r0
 800b11c:	6039      	str	r1, [r7, #0]
 800b11e:	1dfb      	adds	r3, r7, #7
 800b120:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	2212      	movs	r2, #18
 800b126:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b128:	4b02      	ldr	r3, [pc, #8]	; (800b134 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b12a:	0018      	movs	r0, r3
 800b12c:	46bd      	mov	sp, r7
 800b12e:	b002      	add	sp, #8
 800b130:	bd80      	pop	{r7, pc}
 800b132:	46c0      	nop			; (mov r8, r8)
 800b134:	20000148 	.word	0x20000148

0800b138 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	0002      	movs	r2, r0
 800b140:	6039      	str	r1, [r7, #0]
 800b142:	1dfb      	adds	r3, r7, #7
 800b144:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	2204      	movs	r2, #4
 800b14a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b14c:	4b02      	ldr	r3, [pc, #8]	; (800b158 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b14e:	0018      	movs	r0, r3
 800b150:	46bd      	mov	sp, r7
 800b152:	b002      	add	sp, #8
 800b154:	bd80      	pop	{r7, pc}
 800b156:	46c0      	nop			; (mov r8, r8)
 800b158:	2000015c 	.word	0x2000015c

0800b15c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	0002      	movs	r2, r0
 800b164:	6039      	str	r1, [r7, #0]
 800b166:	1dfb      	adds	r3, r7, #7
 800b168:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800b16a:	1dfb      	adds	r3, r7, #7
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d106      	bne.n	800b180 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b172:	683a      	ldr	r2, [r7, #0]
 800b174:	4908      	ldr	r1, [pc, #32]	; (800b198 <USBD_FS_ProductStrDescriptor+0x3c>)
 800b176:	4b09      	ldr	r3, [pc, #36]	; (800b19c <USBD_FS_ProductStrDescriptor+0x40>)
 800b178:	0018      	movs	r0, r3
 800b17a:	f7ff fdf4 	bl	800ad66 <USBD_GetString>
 800b17e:	e005      	b.n	800b18c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b180:	683a      	ldr	r2, [r7, #0]
 800b182:	4905      	ldr	r1, [pc, #20]	; (800b198 <USBD_FS_ProductStrDescriptor+0x3c>)
 800b184:	4b05      	ldr	r3, [pc, #20]	; (800b19c <USBD_FS_ProductStrDescriptor+0x40>)
 800b186:	0018      	movs	r0, r3
 800b188:	f7ff fded 	bl	800ad66 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b18c:	4b02      	ldr	r3, [pc, #8]	; (800b198 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800b18e:	0018      	movs	r0, r3
 800b190:	46bd      	mov	sp, r7
 800b192:	b002      	add	sp, #8
 800b194:	bd80      	pop	{r7, pc}
 800b196:	46c0      	nop			; (mov r8, r8)
 800b198:	200010d4 	.word	0x200010d4
 800b19c:	0800c374 	.word	0x0800c374

0800b1a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b082      	sub	sp, #8
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	0002      	movs	r2, r0
 800b1a8:	6039      	str	r1, [r7, #0]
 800b1aa:	1dfb      	adds	r3, r7, #7
 800b1ac:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b1ae:	683a      	ldr	r2, [r7, #0]
 800b1b0:	4904      	ldr	r1, [pc, #16]	; (800b1c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b1b2:	4b05      	ldr	r3, [pc, #20]	; (800b1c8 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800b1b4:	0018      	movs	r0, r3
 800b1b6:	f7ff fdd6 	bl	800ad66 <USBD_GetString>
  return USBD_StrDesc;
 800b1ba:	4b02      	ldr	r3, [pc, #8]	; (800b1c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800b1bc:	0018      	movs	r0, r3
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	b002      	add	sp, #8
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	200010d4 	.word	0x200010d4
 800b1c8:	0800c38c 	.word	0x0800c38c

0800b1cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	0002      	movs	r2, r0
 800b1d4:	6039      	str	r1, [r7, #0]
 800b1d6:	1dfb      	adds	r3, r7, #7
 800b1d8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	221a      	movs	r2, #26
 800b1de:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b1e0:	f000 f84c 	bl	800b27c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b1e4:	4b02      	ldr	r3, [pc, #8]	; (800b1f0 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800b1e6:	0018      	movs	r0, r3
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	b002      	add	sp, #8
 800b1ec:	bd80      	pop	{r7, pc}
 800b1ee:	46c0      	nop			; (mov r8, r8)
 800b1f0:	20000160 	.word	0x20000160

0800b1f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b082      	sub	sp, #8
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	0002      	movs	r2, r0
 800b1fc:	6039      	str	r1, [r7, #0]
 800b1fe:	1dfb      	adds	r3, r7, #7
 800b200:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800b202:	1dfb      	adds	r3, r7, #7
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d106      	bne.n	800b218 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b20a:	683a      	ldr	r2, [r7, #0]
 800b20c:	4908      	ldr	r1, [pc, #32]	; (800b230 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800b20e:	4b09      	ldr	r3, [pc, #36]	; (800b234 <USBD_FS_ConfigStrDescriptor+0x40>)
 800b210:	0018      	movs	r0, r3
 800b212:	f7ff fda8 	bl	800ad66 <USBD_GetString>
 800b216:	e005      	b.n	800b224 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b218:	683a      	ldr	r2, [r7, #0]
 800b21a:	4905      	ldr	r1, [pc, #20]	; (800b230 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800b21c:	4b05      	ldr	r3, [pc, #20]	; (800b234 <USBD_FS_ConfigStrDescriptor+0x40>)
 800b21e:	0018      	movs	r0, r3
 800b220:	f7ff fda1 	bl	800ad66 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b224:	4b02      	ldr	r3, [pc, #8]	; (800b230 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800b226:	0018      	movs	r0, r3
 800b228:	46bd      	mov	sp, r7
 800b22a:	b002      	add	sp, #8
 800b22c:	bd80      	pop	{r7, pc}
 800b22e:	46c0      	nop			; (mov r8, r8)
 800b230:	200010d4 	.word	0x200010d4
 800b234:	0800c3a0 	.word	0x0800c3a0

0800b238 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	0002      	movs	r2, r0
 800b240:	6039      	str	r1, [r7, #0]
 800b242:	1dfb      	adds	r3, r7, #7
 800b244:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800b246:	1dfb      	adds	r3, r7, #7
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d106      	bne.n	800b25c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b24e:	683a      	ldr	r2, [r7, #0]
 800b250:	4908      	ldr	r1, [pc, #32]	; (800b274 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800b252:	4b09      	ldr	r3, [pc, #36]	; (800b278 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800b254:	0018      	movs	r0, r3
 800b256:	f7ff fd86 	bl	800ad66 <USBD_GetString>
 800b25a:	e005      	b.n	800b268 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b25c:	683a      	ldr	r2, [r7, #0]
 800b25e:	4905      	ldr	r1, [pc, #20]	; (800b274 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800b260:	4b05      	ldr	r3, [pc, #20]	; (800b278 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800b262:	0018      	movs	r0, r3
 800b264:	f7ff fd7f 	bl	800ad66 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b268:	4b02      	ldr	r3, [pc, #8]	; (800b274 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800b26a:	0018      	movs	r0, r3
 800b26c:	46bd      	mov	sp, r7
 800b26e:	b002      	add	sp, #8
 800b270:	bd80      	pop	{r7, pc}
 800b272:	46c0      	nop			; (mov r8, r8)
 800b274:	200010d4 	.word	0x200010d4
 800b278:	0800c3ac 	.word	0x0800c3ac

0800b27c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b282:	4b10      	ldr	r3, [pc, #64]	; (800b2c4 <Get_SerialNum+0x48>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b288:	4b0f      	ldr	r3, [pc, #60]	; (800b2c8 <Get_SerialNum+0x4c>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b28e:	4b0f      	ldr	r3, [pc, #60]	; (800b2cc <Get_SerialNum+0x50>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	18d3      	adds	r3, r2, r3
 800b29a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d00b      	beq.n	800b2ba <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b2a2:	490b      	ldr	r1, [pc, #44]	; (800b2d0 <Get_SerialNum+0x54>)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2208      	movs	r2, #8
 800b2a8:	0018      	movs	r0, r3
 800b2aa:	f000 f815 	bl	800b2d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b2ae:	4909      	ldr	r1, [pc, #36]	; (800b2d4 <Get_SerialNum+0x58>)
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	2204      	movs	r2, #4
 800b2b4:	0018      	movs	r0, r3
 800b2b6:	f000 f80f 	bl	800b2d8 <IntToUnicode>
  }
}
 800b2ba:	46c0      	nop			; (mov r8, r8)
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	b004      	add	sp, #16
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	46c0      	nop			; (mov r8, r8)
 800b2c4:	1ffff7ac 	.word	0x1ffff7ac
 800b2c8:	1ffff7b0 	.word	0x1ffff7b0
 800b2cc:	1ffff7b4 	.word	0x1ffff7b4
 800b2d0:	20000162 	.word	0x20000162
 800b2d4:	20000172 	.word	0x20000172

0800b2d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b086      	sub	sp, #24
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	60b9      	str	r1, [r7, #8]
 800b2e2:	1dfb      	adds	r3, r7, #7
 800b2e4:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800b2e6:	2117      	movs	r1, #23
 800b2e8:	187b      	adds	r3, r7, r1
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800b2ee:	187b      	adds	r3, r7, r1
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	701a      	strb	r2, [r3, #0]
 800b2f4:	e02f      	b.n	800b356 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	0f1b      	lsrs	r3, r3, #28
 800b2fa:	2b09      	cmp	r3, #9
 800b2fc:	d80d      	bhi.n	800b31a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	0f1b      	lsrs	r3, r3, #28
 800b302:	b2da      	uxtb	r2, r3
 800b304:	2317      	movs	r3, #23
 800b306:	18fb      	adds	r3, r7, r3
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	005b      	lsls	r3, r3, #1
 800b30c:	0019      	movs	r1, r3
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	185b      	adds	r3, r3, r1
 800b312:	3230      	adds	r2, #48	; 0x30
 800b314:	b2d2      	uxtb	r2, r2
 800b316:	701a      	strb	r2, [r3, #0]
 800b318:	e00c      	b.n	800b334 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	0f1b      	lsrs	r3, r3, #28
 800b31e:	b2da      	uxtb	r2, r3
 800b320:	2317      	movs	r3, #23
 800b322:	18fb      	adds	r3, r7, r3
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	005b      	lsls	r3, r3, #1
 800b328:	0019      	movs	r1, r3
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	185b      	adds	r3, r3, r1
 800b32e:	3237      	adds	r2, #55	; 0x37
 800b330:	b2d2      	uxtb	r2, r2
 800b332:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	011b      	lsls	r3, r3, #4
 800b338:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b33a:	2117      	movs	r1, #23
 800b33c:	187b      	adds	r3, r7, r1
 800b33e:	781b      	ldrb	r3, [r3, #0]
 800b340:	005b      	lsls	r3, r3, #1
 800b342:	3301      	adds	r3, #1
 800b344:	68ba      	ldr	r2, [r7, #8]
 800b346:	18d3      	adds	r3, r2, r3
 800b348:	2200      	movs	r2, #0
 800b34a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b34c:	187b      	adds	r3, r7, r1
 800b34e:	781a      	ldrb	r2, [r3, #0]
 800b350:	187b      	adds	r3, r7, r1
 800b352:	3201      	adds	r2, #1
 800b354:	701a      	strb	r2, [r3, #0]
 800b356:	2317      	movs	r3, #23
 800b358:	18fa      	adds	r2, r7, r3
 800b35a:	1dfb      	adds	r3, r7, #7
 800b35c:	7812      	ldrb	r2, [r2, #0]
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	429a      	cmp	r2, r3
 800b362:	d3c8      	bcc.n	800b2f6 <IntToUnicode+0x1e>
  }
}
 800b364:	46c0      	nop			; (mov r8, r8)
 800b366:	46c0      	nop			; (mov r8, r8)
 800b368:	46bd      	mov	sp, r7
 800b36a:	b006      	add	sp, #24
 800b36c:	bd80      	pop	{r7, pc}
	...

0800b370 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a0e      	ldr	r2, [pc, #56]	; (800b3b8 <HAL_PCD_MspInit+0x48>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d115      	bne.n	800b3ae <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b382:	4b0e      	ldr	r3, [pc, #56]	; (800b3bc <HAL_PCD_MspInit+0x4c>)
 800b384:	69da      	ldr	r2, [r3, #28]
 800b386:	4b0d      	ldr	r3, [pc, #52]	; (800b3bc <HAL_PCD_MspInit+0x4c>)
 800b388:	2180      	movs	r1, #128	; 0x80
 800b38a:	0409      	lsls	r1, r1, #16
 800b38c:	430a      	orrs	r2, r1
 800b38e:	61da      	str	r2, [r3, #28]
 800b390:	4b0a      	ldr	r3, [pc, #40]	; (800b3bc <HAL_PCD_MspInit+0x4c>)
 800b392:	69da      	ldr	r2, [r3, #28]
 800b394:	2380      	movs	r3, #128	; 0x80
 800b396:	041b      	lsls	r3, r3, #16
 800b398:	4013      	ands	r3, r2
 800b39a:	60fb      	str	r3, [r7, #12]
 800b39c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800b39e:	2200      	movs	r2, #0
 800b3a0:	2100      	movs	r1, #0
 800b3a2:	201f      	movs	r0, #31
 800b3a4:	f7f7 f88e 	bl	80024c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800b3a8:	201f      	movs	r0, #31
 800b3aa:	f7f7 f8a0 	bl	80024ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b3ae:	46c0      	nop			; (mov r8, r8)
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	b004      	add	sp, #16
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	46c0      	nop			; (mov r8, r8)
 800b3b8:	40005c00 	.word	0x40005c00
 800b3bc:	40021000 	.word	0x40021000

0800b3c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	23bc      	movs	r3, #188	; 0xbc
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	58d2      	ldr	r2, [r2, r3]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	21ac      	movs	r1, #172	; 0xac
 800b3d4:	0089      	lsls	r1, r1, #2
 800b3d6:	468c      	mov	ip, r1
 800b3d8:	4463      	add	r3, ip
 800b3da:	0019      	movs	r1, r3
 800b3dc:	0010      	movs	r0, r2
 800b3de:	f7fe fc55 	bl	8009c8c <USBD_LL_SetupStage>
}
 800b3e2:	46c0      	nop			; (mov r8, r8)
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	b002      	add	sp, #8
 800b3e8:	bd80      	pop	{r7, pc}

0800b3ea <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3ea:	b590      	push	{r4, r7, lr}
 800b3ec:	b083      	sub	sp, #12
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
 800b3f2:	000a      	movs	r2, r1
 800b3f4:	1cfb      	adds	r3, r7, #3
 800b3f6:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b3f8:	687a      	ldr	r2, [r7, #4]
 800b3fa:	23bc      	movs	r3, #188	; 0xbc
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	58d4      	ldr	r4, [r2, r3]
 800b400:	1cfb      	adds	r3, r7, #3
 800b402:	781a      	ldrb	r2, [r3, #0]
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	23be      	movs	r3, #190	; 0xbe
 800b408:	0059      	lsls	r1, r3, #1
 800b40a:	0013      	movs	r3, r2
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	189b      	adds	r3, r3, r2
 800b410:	00db      	lsls	r3, r3, #3
 800b412:	18c3      	adds	r3, r0, r3
 800b414:	185b      	adds	r3, r3, r1
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	1cfb      	adds	r3, r7, #3
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	0019      	movs	r1, r3
 800b41e:	0020      	movs	r0, r4
 800b420:	f7fe fc92 	bl	8009d48 <USBD_LL_DataOutStage>
}
 800b424:	46c0      	nop			; (mov r8, r8)
 800b426:	46bd      	mov	sp, r7
 800b428:	b003      	add	sp, #12
 800b42a:	bd90      	pop	{r4, r7, pc}

0800b42c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	000a      	movs	r2, r1
 800b436:	1cfb      	adds	r3, r7, #3
 800b438:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b43a:	687a      	ldr	r2, [r7, #4]
 800b43c:	23bc      	movs	r3, #188	; 0xbc
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	58d0      	ldr	r0, [r2, r3]
 800b442:	1cfb      	adds	r3, r7, #3
 800b444:	781a      	ldrb	r2, [r3, #0]
 800b446:	6879      	ldr	r1, [r7, #4]
 800b448:	0013      	movs	r3, r2
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	189b      	adds	r3, r3, r2
 800b44e:	00db      	lsls	r3, r3, #3
 800b450:	18cb      	adds	r3, r1, r3
 800b452:	333c      	adds	r3, #60	; 0x3c
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	1cfb      	adds	r3, r7, #3
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	0019      	movs	r1, r3
 800b45c:	f7fe fcf6 	bl	8009e4c <USBD_LL_DataInStage>
}
 800b460:	46c0      	nop			; (mov r8, r8)
 800b462:	46bd      	mov	sp, r7
 800b464:	b002      	add	sp, #8
 800b466:	bd80      	pop	{r7, pc}

0800b468 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	23bc      	movs	r3, #188	; 0xbc
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	58d3      	ldr	r3, [r2, r3]
 800b478:	0018      	movs	r0, r3
 800b47a:	f7fe fe2d 	bl	800a0d8 <USBD_LL_SOF>
}
 800b47e:	46c0      	nop			; (mov r8, r8)
 800b480:	46bd      	mov	sp, r7
 800b482:	b002      	add	sp, #8
 800b484:	bd80      	pop	{r7, pc}

0800b486 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b486:	b580      	push	{r7, lr}
 800b488:	b084      	sub	sp, #16
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b48e:	230f      	movs	r3, #15
 800b490:	18fb      	adds	r3, r7, r3
 800b492:	2201      	movs	r2, #1
 800b494:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	2b02      	cmp	r3, #2
 800b49c:	d001      	beq.n	800b4a2 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800b49e:	f7f5 ff51 	bl	8001344 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	23bc      	movs	r3, #188	; 0xbc
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	58d2      	ldr	r2, [r2, r3]
 800b4aa:	230f      	movs	r3, #15
 800b4ac:	18fb      	adds	r3, r7, r3
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	0019      	movs	r1, r3
 800b4b2:	0010      	movs	r0, r2
 800b4b4:	f7fe fdcf 	bl	800a056 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	23bc      	movs	r3, #188	; 0xbc
 800b4bc:	009b      	lsls	r3, r3, #2
 800b4be:	58d3      	ldr	r3, [r2, r3]
 800b4c0:	0018      	movs	r0, r3
 800b4c2:	f7fe fd80 	bl	8009fc6 <USBD_LL_Reset>
}
 800b4c6:	46c0      	nop			; (mov r8, r8)
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	b004      	add	sp, #16
 800b4cc:	bd80      	pop	{r7, pc}
	...

0800b4d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	23bc      	movs	r3, #188	; 0xbc
 800b4dc:	009b      	lsls	r3, r3, #2
 800b4de:	58d3      	ldr	r3, [r2, r3]
 800b4e0:	0018      	movs	r0, r3
 800b4e2:	f7fe fdc9 	bl	800a078 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	699b      	ldr	r3, [r3, #24]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d005      	beq.n	800b4fa <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b4ee:	4b05      	ldr	r3, [pc, #20]	; (800b504 <HAL_PCD_SuspendCallback+0x34>)
 800b4f0:	691a      	ldr	r2, [r3, #16]
 800b4f2:	4b04      	ldr	r3, [pc, #16]	; (800b504 <HAL_PCD_SuspendCallback+0x34>)
 800b4f4:	2106      	movs	r1, #6
 800b4f6:	430a      	orrs	r2, r1
 800b4f8:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800b4fa:	46c0      	nop			; (mov r8, r8)
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	b002      	add	sp, #8
 800b500:	bd80      	pop	{r7, pc}
 800b502:	46c0      	nop			; (mov r8, r8)
 800b504:	e000ed00 	.word	0xe000ed00

0800b508 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	699b      	ldr	r3, [r3, #24]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d007      	beq.n	800b528 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b518:	4b09      	ldr	r3, [pc, #36]	; (800b540 <HAL_PCD_ResumeCallback+0x38>)
 800b51a:	691a      	ldr	r2, [r3, #16]
 800b51c:	4b08      	ldr	r3, [pc, #32]	; (800b540 <HAL_PCD_ResumeCallback+0x38>)
 800b51e:	2106      	movs	r1, #6
 800b520:	438a      	bics	r2, r1
 800b522:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800b524:	f000 fa44 	bl	800b9b0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	23bc      	movs	r3, #188	; 0xbc
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	58d3      	ldr	r3, [r2, r3]
 800b530:	0018      	movs	r0, r3
 800b532:	f7fe fdb9 	bl	800a0a8 <USBD_LL_Resume>
}
 800b536:	46c0      	nop			; (mov r8, r8)
 800b538:	46bd      	mov	sp, r7
 800b53a:	b002      	add	sp, #8
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	46c0      	nop			; (mov r8, r8)
 800b540:	e000ed00 	.word	0xe000ed00

0800b544 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b54c:	4a2d      	ldr	r2, [pc, #180]	; (800b604 <USBD_LL_Init+0xc0>)
 800b54e:	23bc      	movs	r3, #188	; 0xbc
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	6879      	ldr	r1, [r7, #4]
 800b554:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	23b0      	movs	r3, #176	; 0xb0
 800b55a:	009b      	lsls	r3, r3, #2
 800b55c:	4929      	ldr	r1, [pc, #164]	; (800b604 <USBD_LL_Init+0xc0>)
 800b55e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800b560:	4b28      	ldr	r3, [pc, #160]	; (800b604 <USBD_LL_Init+0xc0>)
 800b562:	4a29      	ldr	r2, [pc, #164]	; (800b608 <USBD_LL_Init+0xc4>)
 800b564:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b566:	4b27      	ldr	r3, [pc, #156]	; (800b604 <USBD_LL_Init+0xc0>)
 800b568:	2208      	movs	r2, #8
 800b56a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b56c:	4b25      	ldr	r3, [pc, #148]	; (800b604 <USBD_LL_Init+0xc0>)
 800b56e:	2202      	movs	r2, #2
 800b570:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b572:	4b24      	ldr	r3, [pc, #144]	; (800b604 <USBD_LL_Init+0xc0>)
 800b574:	2202      	movs	r2, #2
 800b576:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b578:	4b22      	ldr	r3, [pc, #136]	; (800b604 <USBD_LL_Init+0xc0>)
 800b57a:	2200      	movs	r2, #0
 800b57c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b57e:	4b21      	ldr	r3, [pc, #132]	; (800b604 <USBD_LL_Init+0xc0>)
 800b580:	2200      	movs	r2, #0
 800b582:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b584:	4b1f      	ldr	r3, [pc, #124]	; (800b604 <USBD_LL_Init+0xc0>)
 800b586:	2200      	movs	r2, #0
 800b588:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b58a:	4b1e      	ldr	r3, [pc, #120]	; (800b604 <USBD_LL_Init+0xc0>)
 800b58c:	0018      	movs	r0, r3
 800b58e:	f7f7 fb39 	bl	8002c04 <HAL_PCD_Init>
 800b592:	1e03      	subs	r3, r0, #0
 800b594:	d001      	beq.n	800b59a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800b596:	f7f5 fed5 	bl	8001344 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b59a:	687a      	ldr	r2, [r7, #4]
 800b59c:	23b0      	movs	r3, #176	; 0xb0
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	58d0      	ldr	r0, [r2, r3]
 800b5a2:	2318      	movs	r3, #24
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	2100      	movs	r1, #0
 800b5a8:	f7f9 f91a 	bl	80047e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b5ac:	687a      	ldr	r2, [r7, #4]
 800b5ae:	23b0      	movs	r3, #176	; 0xb0
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	58d0      	ldr	r0, [r2, r3]
 800b5b4:	2358      	movs	r3, #88	; 0x58
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	2180      	movs	r1, #128	; 0x80
 800b5ba:	f7f9 f911 	bl	80047e0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b5be:	687a      	ldr	r2, [r7, #4]
 800b5c0:	23b0      	movs	r3, #176	; 0xb0
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	58d0      	ldr	r0, [r2, r3]
 800b5c6:	23c0      	movs	r3, #192	; 0xc0
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	2181      	movs	r1, #129	; 0x81
 800b5cc:	f7f9 f908 	bl	80047e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	23b0      	movs	r3, #176	; 0xb0
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	58d0      	ldr	r0, [r2, r3]
 800b5d8:	2388      	movs	r3, #136	; 0x88
 800b5da:	005b      	lsls	r3, r3, #1
 800b5dc:	2200      	movs	r2, #0
 800b5de:	2101      	movs	r1, #1
 800b5e0:	f7f9 f8fe 	bl	80047e0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	23b0      	movs	r3, #176	; 0xb0
 800b5e8:	009b      	lsls	r3, r3, #2
 800b5ea:	58d0      	ldr	r0, [r2, r3]
 800b5ec:	2380      	movs	r3, #128	; 0x80
 800b5ee:	005b      	lsls	r3, r3, #1
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	2182      	movs	r1, #130	; 0x82
 800b5f4:	f7f9 f8f4 	bl	80047e0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b5f8:	2300      	movs	r3, #0
}
 800b5fa:	0018      	movs	r0, r3
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	b002      	add	sp, #8
 800b600:	bd80      	pop	{r7, pc}
 800b602:	46c0      	nop			; (mov r8, r8)
 800b604:	200012d4 	.word	0x200012d4
 800b608:	40005c00 	.word	0x40005c00

0800b60c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b60c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b60e:	b085      	sub	sp, #20
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b614:	210f      	movs	r1, #15
 800b616:	187b      	adds	r3, r7, r1
 800b618:	2200      	movs	r2, #0
 800b61a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b61c:	260e      	movs	r6, #14
 800b61e:	19bb      	adds	r3, r7, r6
 800b620:	2200      	movs	r2, #0
 800b622:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	23b0      	movs	r3, #176	; 0xb0
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	58d3      	ldr	r3, [r2, r3]
 800b62c:	000d      	movs	r5, r1
 800b62e:	187c      	adds	r4, r7, r1
 800b630:	0018      	movs	r0, r3
 800b632:	f7f7 fbf7 	bl	8002e24 <HAL_PCD_Start>
 800b636:	0003      	movs	r3, r0
 800b638:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b63a:	19bc      	adds	r4, r7, r6
 800b63c:	197b      	adds	r3, r7, r5
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	0018      	movs	r0, r3
 800b642:	f000 f9bc 	bl	800b9be <USBD_Get_USB_Status>
 800b646:	0003      	movs	r3, r0
 800b648:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b64a:	19bb      	adds	r3, r7, r6
 800b64c:	781b      	ldrb	r3, [r3, #0]
}
 800b64e:	0018      	movs	r0, r3
 800b650:	46bd      	mov	sp, r7
 800b652:	b005      	add	sp, #20
 800b654:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b656 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b656:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b658:	b085      	sub	sp, #20
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
 800b65e:	000c      	movs	r4, r1
 800b660:	0010      	movs	r0, r2
 800b662:	0019      	movs	r1, r3
 800b664:	1cfb      	adds	r3, r7, #3
 800b666:	1c22      	adds	r2, r4, #0
 800b668:	701a      	strb	r2, [r3, #0]
 800b66a:	1cbb      	adds	r3, r7, #2
 800b66c:	1c02      	adds	r2, r0, #0
 800b66e:	701a      	strb	r2, [r3, #0]
 800b670:	003b      	movs	r3, r7
 800b672:	1c0a      	adds	r2, r1, #0
 800b674:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b676:	260f      	movs	r6, #15
 800b678:	19bb      	adds	r3, r7, r6
 800b67a:	2200      	movs	r2, #0
 800b67c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b67e:	250e      	movs	r5, #14
 800b680:	197b      	adds	r3, r7, r5
 800b682:	2200      	movs	r2, #0
 800b684:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	23b0      	movs	r3, #176	; 0xb0
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	58d0      	ldr	r0, [r2, r3]
 800b68e:	19bc      	adds	r4, r7, r6
 800b690:	1cbb      	adds	r3, r7, #2
 800b692:	781d      	ldrb	r5, [r3, #0]
 800b694:	003b      	movs	r3, r7
 800b696:	881a      	ldrh	r2, [r3, #0]
 800b698:	1cfb      	adds	r3, r7, #3
 800b69a:	7819      	ldrb	r1, [r3, #0]
 800b69c:	002b      	movs	r3, r5
 800b69e:	f7f7 fd8e 	bl	80031be <HAL_PCD_EP_Open>
 800b6a2:	0003      	movs	r3, r0
 800b6a4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6a6:	250e      	movs	r5, #14
 800b6a8:	197c      	adds	r4, r7, r5
 800b6aa:	19bb      	adds	r3, r7, r6
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	0018      	movs	r0, r3
 800b6b0:	f000 f985 	bl	800b9be <USBD_Get_USB_Status>
 800b6b4:	0003      	movs	r3, r0
 800b6b6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b6b8:	197b      	adds	r3, r7, r5
 800b6ba:	781b      	ldrb	r3, [r3, #0]
}
 800b6bc:	0018      	movs	r0, r3
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	b005      	add	sp, #20
 800b6c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b6c4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6c6:	b085      	sub	sp, #20
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	000a      	movs	r2, r1
 800b6ce:	1cfb      	adds	r3, r7, #3
 800b6d0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6d2:	210f      	movs	r1, #15
 800b6d4:	187b      	adds	r3, r7, r1
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6da:	260e      	movs	r6, #14
 800b6dc:	19bb      	adds	r3, r7, r6
 800b6de:	2200      	movs	r2, #0
 800b6e0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b6e2:	687a      	ldr	r2, [r7, #4]
 800b6e4:	23b0      	movs	r3, #176	; 0xb0
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	58d2      	ldr	r2, [r2, r3]
 800b6ea:	000d      	movs	r5, r1
 800b6ec:	187c      	adds	r4, r7, r1
 800b6ee:	1cfb      	adds	r3, r7, #3
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	0019      	movs	r1, r3
 800b6f4:	0010      	movs	r0, r2
 800b6f6:	f7f7 fdda 	bl	80032ae <HAL_PCD_EP_Close>
 800b6fa:	0003      	movs	r3, r0
 800b6fc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6fe:	19bc      	adds	r4, r7, r6
 800b700:	197b      	adds	r3, r7, r5
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	0018      	movs	r0, r3
 800b706:	f000 f95a 	bl	800b9be <USBD_Get_USB_Status>
 800b70a:	0003      	movs	r3, r0
 800b70c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b70e:	19bb      	adds	r3, r7, r6
 800b710:	781b      	ldrb	r3, [r3, #0]
}
 800b712:	0018      	movs	r0, r3
 800b714:	46bd      	mov	sp, r7
 800b716:	b005      	add	sp, #20
 800b718:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b71a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b71a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b71c:	b085      	sub	sp, #20
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
 800b722:	000a      	movs	r2, r1
 800b724:	1cfb      	adds	r3, r7, #3
 800b726:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b728:	210f      	movs	r1, #15
 800b72a:	187b      	adds	r3, r7, r1
 800b72c:	2200      	movs	r2, #0
 800b72e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b730:	260e      	movs	r6, #14
 800b732:	19bb      	adds	r3, r7, r6
 800b734:	2200      	movs	r2, #0
 800b736:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b738:	687a      	ldr	r2, [r7, #4]
 800b73a:	23b0      	movs	r3, #176	; 0xb0
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	58d2      	ldr	r2, [r2, r3]
 800b740:	000d      	movs	r5, r1
 800b742:	187c      	adds	r4, r7, r1
 800b744:	1cfb      	adds	r3, r7, #3
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	0019      	movs	r1, r3
 800b74a:	0010      	movs	r0, r2
 800b74c:	f7f7 fea6 	bl	800349c <HAL_PCD_EP_SetStall>
 800b750:	0003      	movs	r3, r0
 800b752:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b754:	19bc      	adds	r4, r7, r6
 800b756:	197b      	adds	r3, r7, r5
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	0018      	movs	r0, r3
 800b75c:	f000 f92f 	bl	800b9be <USBD_Get_USB_Status>
 800b760:	0003      	movs	r3, r0
 800b762:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b764:	19bb      	adds	r3, r7, r6
 800b766:	781b      	ldrb	r3, [r3, #0]
}
 800b768:	0018      	movs	r0, r3
 800b76a:	46bd      	mov	sp, r7
 800b76c:	b005      	add	sp, #20
 800b76e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b770 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b770:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b772:	b085      	sub	sp, #20
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	000a      	movs	r2, r1
 800b77a:	1cfb      	adds	r3, r7, #3
 800b77c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b77e:	210f      	movs	r1, #15
 800b780:	187b      	adds	r3, r7, r1
 800b782:	2200      	movs	r2, #0
 800b784:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b786:	260e      	movs	r6, #14
 800b788:	19bb      	adds	r3, r7, r6
 800b78a:	2200      	movs	r2, #0
 800b78c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	23b0      	movs	r3, #176	; 0xb0
 800b792:	009b      	lsls	r3, r3, #2
 800b794:	58d2      	ldr	r2, [r2, r3]
 800b796:	000d      	movs	r5, r1
 800b798:	187c      	adds	r4, r7, r1
 800b79a:	1cfb      	adds	r3, r7, #3
 800b79c:	781b      	ldrb	r3, [r3, #0]
 800b79e:	0019      	movs	r1, r3
 800b7a0:	0010      	movs	r0, r2
 800b7a2:	f7f7 fed7 	bl	8003554 <HAL_PCD_EP_ClrStall>
 800b7a6:	0003      	movs	r3, r0
 800b7a8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7aa:	19bc      	adds	r4, r7, r6
 800b7ac:	197b      	adds	r3, r7, r5
 800b7ae:	781b      	ldrb	r3, [r3, #0]
 800b7b0:	0018      	movs	r0, r3
 800b7b2:	f000 f904 	bl	800b9be <USBD_Get_USB_Status>
 800b7b6:	0003      	movs	r3, r0
 800b7b8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b7ba:	19bb      	adds	r3, r7, r6
 800b7bc:	781b      	ldrb	r3, [r3, #0]
}
 800b7be:	0018      	movs	r0, r3
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	b005      	add	sp, #20
 800b7c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b7c6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b084      	sub	sp, #16
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
 800b7ce:	000a      	movs	r2, r1
 800b7d0:	1cfb      	adds	r3, r7, #3
 800b7d2:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	23b0      	movs	r3, #176	; 0xb0
 800b7d8:	009b      	lsls	r3, r3, #2
 800b7da:	58d3      	ldr	r3, [r2, r3]
 800b7dc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b7de:	1cfb      	adds	r3, r7, #3
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	b25b      	sxtb	r3, r3
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	da0d      	bge.n	800b804 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b7e8:	1cfb      	adds	r3, r7, #3
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	227f      	movs	r2, #127	; 0x7f
 800b7ee:	4013      	ands	r3, r2
 800b7f0:	68f9      	ldr	r1, [r7, #12]
 800b7f2:	1c5a      	adds	r2, r3, #1
 800b7f4:	0013      	movs	r3, r2
 800b7f6:	009b      	lsls	r3, r3, #2
 800b7f8:	189b      	adds	r3, r3, r2
 800b7fa:	00db      	lsls	r3, r3, #3
 800b7fc:	18cb      	adds	r3, r1, r3
 800b7fe:	3302      	adds	r3, #2
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	e00d      	b.n	800b820 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b804:	1cfb      	adds	r3, r7, #3
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	227f      	movs	r2, #127	; 0x7f
 800b80a:	401a      	ands	r2, r3
 800b80c:	68f8      	ldr	r0, [r7, #12]
 800b80e:	23b5      	movs	r3, #181	; 0xb5
 800b810:	0059      	lsls	r1, r3, #1
 800b812:	0013      	movs	r3, r2
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	189b      	adds	r3, r3, r2
 800b818:	00db      	lsls	r3, r3, #3
 800b81a:	18c3      	adds	r3, r0, r3
 800b81c:	185b      	adds	r3, r3, r1
 800b81e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b820:	0018      	movs	r0, r3
 800b822:	46bd      	mov	sp, r7
 800b824:	b004      	add	sp, #16
 800b826:	bd80      	pop	{r7, pc}

0800b828 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b82a:	b085      	sub	sp, #20
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	000a      	movs	r2, r1
 800b832:	1cfb      	adds	r3, r7, #3
 800b834:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b836:	210f      	movs	r1, #15
 800b838:	187b      	adds	r3, r7, r1
 800b83a:	2200      	movs	r2, #0
 800b83c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b83e:	260e      	movs	r6, #14
 800b840:	19bb      	adds	r3, r7, r6
 800b842:	2200      	movs	r2, #0
 800b844:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	23b0      	movs	r3, #176	; 0xb0
 800b84a:	009b      	lsls	r3, r3, #2
 800b84c:	58d2      	ldr	r2, [r2, r3]
 800b84e:	000d      	movs	r5, r1
 800b850:	187c      	adds	r4, r7, r1
 800b852:	1cfb      	adds	r3, r7, #3
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	0019      	movs	r1, r3
 800b858:	0010      	movs	r0, r2
 800b85a:	f7f7 fc85 	bl	8003168 <HAL_PCD_SetAddress>
 800b85e:	0003      	movs	r3, r0
 800b860:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b862:	19bc      	adds	r4, r7, r6
 800b864:	197b      	adds	r3, r7, r5
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	0018      	movs	r0, r3
 800b86a:	f000 f8a8 	bl	800b9be <USBD_Get_USB_Status>
 800b86e:	0003      	movs	r3, r0
 800b870:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b872:	19bb      	adds	r3, r7, r6
 800b874:	781b      	ldrb	r3, [r3, #0]
}
 800b876:	0018      	movs	r0, r3
 800b878:	46bd      	mov	sp, r7
 800b87a:	b005      	add	sp, #20
 800b87c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b87e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b87e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b880:	b087      	sub	sp, #28
 800b882:	af00      	add	r7, sp, #0
 800b884:	60f8      	str	r0, [r7, #12]
 800b886:	0008      	movs	r0, r1
 800b888:	607a      	str	r2, [r7, #4]
 800b88a:	0019      	movs	r1, r3
 800b88c:	230b      	movs	r3, #11
 800b88e:	18fb      	adds	r3, r7, r3
 800b890:	1c02      	adds	r2, r0, #0
 800b892:	701a      	strb	r2, [r3, #0]
 800b894:	2408      	movs	r4, #8
 800b896:	193b      	adds	r3, r7, r4
 800b898:	1c0a      	adds	r2, r1, #0
 800b89a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b89c:	2117      	movs	r1, #23
 800b89e:	187b      	adds	r3, r7, r1
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8a4:	2516      	movs	r5, #22
 800b8a6:	197b      	adds	r3, r7, r5
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	23b0      	movs	r3, #176	; 0xb0
 800b8b0:	009b      	lsls	r3, r3, #2
 800b8b2:	58d0      	ldr	r0, [r2, r3]
 800b8b4:	193b      	adds	r3, r7, r4
 800b8b6:	881d      	ldrh	r5, [r3, #0]
 800b8b8:	000e      	movs	r6, r1
 800b8ba:	187c      	adds	r4, r7, r1
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	230b      	movs	r3, #11
 800b8c0:	18fb      	adds	r3, r7, r3
 800b8c2:	7819      	ldrb	r1, [r3, #0]
 800b8c4:	002b      	movs	r3, r5
 800b8c6:	f7f7 fda0 	bl	800340a <HAL_PCD_EP_Transmit>
 800b8ca:	0003      	movs	r3, r0
 800b8cc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8ce:	2516      	movs	r5, #22
 800b8d0:	197c      	adds	r4, r7, r5
 800b8d2:	19bb      	adds	r3, r7, r6
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	0018      	movs	r0, r3
 800b8d8:	f000 f871 	bl	800b9be <USBD_Get_USB_Status>
 800b8dc:	0003      	movs	r3, r0
 800b8de:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b8e0:	197b      	adds	r3, r7, r5
 800b8e2:	781b      	ldrb	r3, [r3, #0]
}
 800b8e4:	0018      	movs	r0, r3
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	b007      	add	sp, #28
 800b8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b8ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8ee:	b087      	sub	sp, #28
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	0008      	movs	r0, r1
 800b8f6:	607a      	str	r2, [r7, #4]
 800b8f8:	0019      	movs	r1, r3
 800b8fa:	230b      	movs	r3, #11
 800b8fc:	18fb      	adds	r3, r7, r3
 800b8fe:	1c02      	adds	r2, r0, #0
 800b900:	701a      	strb	r2, [r3, #0]
 800b902:	2408      	movs	r4, #8
 800b904:	193b      	adds	r3, r7, r4
 800b906:	1c0a      	adds	r2, r1, #0
 800b908:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b90a:	2117      	movs	r1, #23
 800b90c:	187b      	adds	r3, r7, r1
 800b90e:	2200      	movs	r2, #0
 800b910:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b912:	2516      	movs	r5, #22
 800b914:	197b      	adds	r3, r7, r5
 800b916:	2200      	movs	r2, #0
 800b918:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b91a:	68fa      	ldr	r2, [r7, #12]
 800b91c:	23b0      	movs	r3, #176	; 0xb0
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	58d0      	ldr	r0, [r2, r3]
 800b922:	193b      	adds	r3, r7, r4
 800b924:	881d      	ldrh	r5, [r3, #0]
 800b926:	000e      	movs	r6, r1
 800b928:	187c      	adds	r4, r7, r1
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	230b      	movs	r3, #11
 800b92e:	18fb      	adds	r3, r7, r3
 800b930:	7819      	ldrb	r1, [r3, #0]
 800b932:	002b      	movs	r3, r5
 800b934:	f7f7 fd0c 	bl	8003350 <HAL_PCD_EP_Receive>
 800b938:	0003      	movs	r3, r0
 800b93a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b93c:	2516      	movs	r5, #22
 800b93e:	197c      	adds	r4, r7, r5
 800b940:	19bb      	adds	r3, r7, r6
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	0018      	movs	r0, r3
 800b946:	f000 f83a 	bl	800b9be <USBD_Get_USB_Status>
 800b94a:	0003      	movs	r3, r0
 800b94c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800b94e:	197b      	adds	r3, r7, r5
 800b950:	781b      	ldrb	r3, [r3, #0]
}
 800b952:	0018      	movs	r0, r3
 800b954:	46bd      	mov	sp, r7
 800b956:	b007      	add	sp, #28
 800b958:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b95a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b95a:	b580      	push	{r7, lr}
 800b95c:	b082      	sub	sp, #8
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
 800b962:	000a      	movs	r2, r1
 800b964:	1cfb      	adds	r3, r7, #3
 800b966:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	23b0      	movs	r3, #176	; 0xb0
 800b96c:	009b      	lsls	r3, r3, #2
 800b96e:	58d2      	ldr	r2, [r2, r3]
 800b970:	1cfb      	adds	r3, r7, #3
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	0019      	movs	r1, r3
 800b976:	0010      	movs	r0, r2
 800b978:	f7f7 fd2e 	bl	80033d8 <HAL_PCD_EP_GetRxCount>
 800b97c:	0003      	movs	r3, r0
}
 800b97e:	0018      	movs	r0, r3
 800b980:	46bd      	mov	sp, r7
 800b982:	b002      	add	sp, #8
 800b984:	bd80      	pop	{r7, pc}
	...

0800b988 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b990:	4b02      	ldr	r3, [pc, #8]	; (800b99c <USBD_static_malloc+0x14>)
}
 800b992:	0018      	movs	r0, r3
 800b994:	46bd      	mov	sp, r7
 800b996:	b002      	add	sp, #8
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	46c0      	nop			; (mov r8, r8)
 800b99c:	2000021c 	.word	0x2000021c

0800b9a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]

}
 800b9a8:	46c0      	nop			; (mov r8, r8)
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	b002      	add	sp, #8
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b9b4:	f7f4 fe56 	bl	8000664 <SystemClock_Config>
}
 800b9b8:	46c0      	nop			; (mov r8, r8)
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}

0800b9be <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b084      	sub	sp, #16
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	0002      	movs	r2, r0
 800b9c6:	1dfb      	adds	r3, r7, #7
 800b9c8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9ca:	230f      	movs	r3, #15
 800b9cc:	18fb      	adds	r3, r7, r3
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800b9d2:	1dfb      	adds	r3, r7, #7
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	2b03      	cmp	r3, #3
 800b9d8:	d017      	beq.n	800ba0a <USBD_Get_USB_Status+0x4c>
 800b9da:	dc1b      	bgt.n	800ba14 <USBD_Get_USB_Status+0x56>
 800b9dc:	2b02      	cmp	r3, #2
 800b9de:	d00f      	beq.n	800ba00 <USBD_Get_USB_Status+0x42>
 800b9e0:	dc18      	bgt.n	800ba14 <USBD_Get_USB_Status+0x56>
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d002      	beq.n	800b9ec <USBD_Get_USB_Status+0x2e>
 800b9e6:	2b01      	cmp	r3, #1
 800b9e8:	d005      	beq.n	800b9f6 <USBD_Get_USB_Status+0x38>
 800b9ea:	e013      	b.n	800ba14 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b9ec:	230f      	movs	r3, #15
 800b9ee:	18fb      	adds	r3, r7, r3
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	701a      	strb	r2, [r3, #0]
    break;
 800b9f4:	e013      	b.n	800ba1e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b9f6:	230f      	movs	r3, #15
 800b9f8:	18fb      	adds	r3, r7, r3
 800b9fa:	2202      	movs	r2, #2
 800b9fc:	701a      	strb	r2, [r3, #0]
    break;
 800b9fe:	e00e      	b.n	800ba1e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba00:	230f      	movs	r3, #15
 800ba02:	18fb      	adds	r3, r7, r3
 800ba04:	2201      	movs	r2, #1
 800ba06:	701a      	strb	r2, [r3, #0]
    break;
 800ba08:	e009      	b.n	800ba1e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba0a:	230f      	movs	r3, #15
 800ba0c:	18fb      	adds	r3, r7, r3
 800ba0e:	2202      	movs	r2, #2
 800ba10:	701a      	strb	r2, [r3, #0]
    break;
 800ba12:	e004      	b.n	800ba1e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800ba14:	230f      	movs	r3, #15
 800ba16:	18fb      	adds	r3, r7, r3
 800ba18:	2202      	movs	r2, #2
 800ba1a:	701a      	strb	r2, [r3, #0]
    break;
 800ba1c:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800ba1e:	230f      	movs	r3, #15
 800ba20:	18fb      	adds	r3, r7, r3
 800ba22:	781b      	ldrb	r3, [r3, #0]
}
 800ba24:	0018      	movs	r0, r3
 800ba26:	46bd      	mov	sp, r7
 800ba28:	b004      	add	sp, #16
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <__errno>:
 800ba2c:	4b01      	ldr	r3, [pc, #4]	; (800ba34 <__errno+0x8>)
 800ba2e:	6818      	ldr	r0, [r3, #0]
 800ba30:	4770      	bx	lr
 800ba32:	46c0      	nop			; (mov r8, r8)
 800ba34:	2000017c 	.word	0x2000017c

0800ba38 <__libc_init_array>:
 800ba38:	b570      	push	{r4, r5, r6, lr}
 800ba3a:	2600      	movs	r6, #0
 800ba3c:	4d0c      	ldr	r5, [pc, #48]	; (800ba70 <__libc_init_array+0x38>)
 800ba3e:	4c0d      	ldr	r4, [pc, #52]	; (800ba74 <__libc_init_array+0x3c>)
 800ba40:	1b64      	subs	r4, r4, r5
 800ba42:	10a4      	asrs	r4, r4, #2
 800ba44:	42a6      	cmp	r6, r4
 800ba46:	d109      	bne.n	800ba5c <__libc_init_array+0x24>
 800ba48:	2600      	movs	r6, #0
 800ba4a:	f000 fc5b 	bl	800c304 <_init>
 800ba4e:	4d0a      	ldr	r5, [pc, #40]	; (800ba78 <__libc_init_array+0x40>)
 800ba50:	4c0a      	ldr	r4, [pc, #40]	; (800ba7c <__libc_init_array+0x44>)
 800ba52:	1b64      	subs	r4, r4, r5
 800ba54:	10a4      	asrs	r4, r4, #2
 800ba56:	42a6      	cmp	r6, r4
 800ba58:	d105      	bne.n	800ba66 <__libc_init_array+0x2e>
 800ba5a:	bd70      	pop	{r4, r5, r6, pc}
 800ba5c:	00b3      	lsls	r3, r6, #2
 800ba5e:	58eb      	ldr	r3, [r5, r3]
 800ba60:	4798      	blx	r3
 800ba62:	3601      	adds	r6, #1
 800ba64:	e7ee      	b.n	800ba44 <__libc_init_array+0xc>
 800ba66:	00b3      	lsls	r3, r6, #2
 800ba68:	58eb      	ldr	r3, [r5, r3]
 800ba6a:	4798      	blx	r3
 800ba6c:	3601      	adds	r6, #1
 800ba6e:	e7f2      	b.n	800ba56 <__libc_init_array+0x1e>
 800ba70:	0800c52c 	.word	0x0800c52c
 800ba74:	0800c52c 	.word	0x0800c52c
 800ba78:	0800c52c 	.word	0x0800c52c
 800ba7c:	0800c530 	.word	0x0800c530

0800ba80 <malloc>:
 800ba80:	b510      	push	{r4, lr}
 800ba82:	4b03      	ldr	r3, [pc, #12]	; (800ba90 <malloc+0x10>)
 800ba84:	0001      	movs	r1, r0
 800ba86:	6818      	ldr	r0, [r3, #0]
 800ba88:	f000 f860 	bl	800bb4c <_malloc_r>
 800ba8c:	bd10      	pop	{r4, pc}
 800ba8e:	46c0      	nop			; (mov r8, r8)
 800ba90:	2000017c 	.word	0x2000017c

0800ba94 <free>:
 800ba94:	b510      	push	{r4, lr}
 800ba96:	4b03      	ldr	r3, [pc, #12]	; (800baa4 <free+0x10>)
 800ba98:	0001      	movs	r1, r0
 800ba9a:	6818      	ldr	r0, [r3, #0]
 800ba9c:	f000 f80c 	bl	800bab8 <_free_r>
 800baa0:	bd10      	pop	{r4, pc}
 800baa2:	46c0      	nop			; (mov r8, r8)
 800baa4:	2000017c 	.word	0x2000017c

0800baa8 <memset>:
 800baa8:	0003      	movs	r3, r0
 800baaa:	1882      	adds	r2, r0, r2
 800baac:	4293      	cmp	r3, r2
 800baae:	d100      	bne.n	800bab2 <memset+0xa>
 800bab0:	4770      	bx	lr
 800bab2:	7019      	strb	r1, [r3, #0]
 800bab4:	3301      	adds	r3, #1
 800bab6:	e7f9      	b.n	800baac <memset+0x4>

0800bab8 <_free_r>:
 800bab8:	b570      	push	{r4, r5, r6, lr}
 800baba:	0005      	movs	r5, r0
 800babc:	2900      	cmp	r1, #0
 800babe:	d010      	beq.n	800bae2 <_free_r+0x2a>
 800bac0:	1f0c      	subs	r4, r1, #4
 800bac2:	6823      	ldr	r3, [r4, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	da00      	bge.n	800baca <_free_r+0x12>
 800bac8:	18e4      	adds	r4, r4, r3
 800baca:	0028      	movs	r0, r5
 800bacc:	f000 f8ce 	bl	800bc6c <__malloc_lock>
 800bad0:	4a1d      	ldr	r2, [pc, #116]	; (800bb48 <_free_r+0x90>)
 800bad2:	6813      	ldr	r3, [r2, #0]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d105      	bne.n	800bae4 <_free_r+0x2c>
 800bad8:	6063      	str	r3, [r4, #4]
 800bada:	6014      	str	r4, [r2, #0]
 800badc:	0028      	movs	r0, r5
 800bade:	f000 f8cd 	bl	800bc7c <__malloc_unlock>
 800bae2:	bd70      	pop	{r4, r5, r6, pc}
 800bae4:	42a3      	cmp	r3, r4
 800bae6:	d908      	bls.n	800bafa <_free_r+0x42>
 800bae8:	6821      	ldr	r1, [r4, #0]
 800baea:	1860      	adds	r0, r4, r1
 800baec:	4283      	cmp	r3, r0
 800baee:	d1f3      	bne.n	800bad8 <_free_r+0x20>
 800baf0:	6818      	ldr	r0, [r3, #0]
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	1841      	adds	r1, r0, r1
 800baf6:	6021      	str	r1, [r4, #0]
 800baf8:	e7ee      	b.n	800bad8 <_free_r+0x20>
 800bafa:	001a      	movs	r2, r3
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d001      	beq.n	800bb06 <_free_r+0x4e>
 800bb02:	42a3      	cmp	r3, r4
 800bb04:	d9f9      	bls.n	800bafa <_free_r+0x42>
 800bb06:	6811      	ldr	r1, [r2, #0]
 800bb08:	1850      	adds	r0, r2, r1
 800bb0a:	42a0      	cmp	r0, r4
 800bb0c:	d10b      	bne.n	800bb26 <_free_r+0x6e>
 800bb0e:	6820      	ldr	r0, [r4, #0]
 800bb10:	1809      	adds	r1, r1, r0
 800bb12:	1850      	adds	r0, r2, r1
 800bb14:	6011      	str	r1, [r2, #0]
 800bb16:	4283      	cmp	r3, r0
 800bb18:	d1e0      	bne.n	800badc <_free_r+0x24>
 800bb1a:	6818      	ldr	r0, [r3, #0]
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	1841      	adds	r1, r0, r1
 800bb20:	6011      	str	r1, [r2, #0]
 800bb22:	6053      	str	r3, [r2, #4]
 800bb24:	e7da      	b.n	800badc <_free_r+0x24>
 800bb26:	42a0      	cmp	r0, r4
 800bb28:	d902      	bls.n	800bb30 <_free_r+0x78>
 800bb2a:	230c      	movs	r3, #12
 800bb2c:	602b      	str	r3, [r5, #0]
 800bb2e:	e7d5      	b.n	800badc <_free_r+0x24>
 800bb30:	6821      	ldr	r1, [r4, #0]
 800bb32:	1860      	adds	r0, r4, r1
 800bb34:	4283      	cmp	r3, r0
 800bb36:	d103      	bne.n	800bb40 <_free_r+0x88>
 800bb38:	6818      	ldr	r0, [r3, #0]
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	1841      	adds	r1, r0, r1
 800bb3e:	6021      	str	r1, [r4, #0]
 800bb40:	6063      	str	r3, [r4, #4]
 800bb42:	6054      	str	r4, [r2, #4]
 800bb44:	e7ca      	b.n	800badc <_free_r+0x24>
 800bb46:	46c0      	nop			; (mov r8, r8)
 800bb48:	2000043c 	.word	0x2000043c

0800bb4c <_malloc_r>:
 800bb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4e:	2303      	movs	r3, #3
 800bb50:	1ccd      	adds	r5, r1, #3
 800bb52:	439d      	bics	r5, r3
 800bb54:	3508      	adds	r5, #8
 800bb56:	0006      	movs	r6, r0
 800bb58:	2d0c      	cmp	r5, #12
 800bb5a:	d21f      	bcs.n	800bb9c <_malloc_r+0x50>
 800bb5c:	250c      	movs	r5, #12
 800bb5e:	42a9      	cmp	r1, r5
 800bb60:	d81e      	bhi.n	800bba0 <_malloc_r+0x54>
 800bb62:	0030      	movs	r0, r6
 800bb64:	f000 f882 	bl	800bc6c <__malloc_lock>
 800bb68:	4925      	ldr	r1, [pc, #148]	; (800bc00 <_malloc_r+0xb4>)
 800bb6a:	680a      	ldr	r2, [r1, #0]
 800bb6c:	0014      	movs	r4, r2
 800bb6e:	2c00      	cmp	r4, #0
 800bb70:	d11a      	bne.n	800bba8 <_malloc_r+0x5c>
 800bb72:	4f24      	ldr	r7, [pc, #144]	; (800bc04 <_malloc_r+0xb8>)
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d104      	bne.n	800bb84 <_malloc_r+0x38>
 800bb7a:	0021      	movs	r1, r4
 800bb7c:	0030      	movs	r0, r6
 800bb7e:	f000 f843 	bl	800bc08 <_sbrk_r>
 800bb82:	6038      	str	r0, [r7, #0]
 800bb84:	0029      	movs	r1, r5
 800bb86:	0030      	movs	r0, r6
 800bb88:	f000 f83e 	bl	800bc08 <_sbrk_r>
 800bb8c:	1c43      	adds	r3, r0, #1
 800bb8e:	d12b      	bne.n	800bbe8 <_malloc_r+0x9c>
 800bb90:	230c      	movs	r3, #12
 800bb92:	0030      	movs	r0, r6
 800bb94:	6033      	str	r3, [r6, #0]
 800bb96:	f000 f871 	bl	800bc7c <__malloc_unlock>
 800bb9a:	e003      	b.n	800bba4 <_malloc_r+0x58>
 800bb9c:	2d00      	cmp	r5, #0
 800bb9e:	dade      	bge.n	800bb5e <_malloc_r+0x12>
 800bba0:	230c      	movs	r3, #12
 800bba2:	6033      	str	r3, [r6, #0]
 800bba4:	2000      	movs	r0, #0
 800bba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bba8:	6823      	ldr	r3, [r4, #0]
 800bbaa:	1b5b      	subs	r3, r3, r5
 800bbac:	d419      	bmi.n	800bbe2 <_malloc_r+0x96>
 800bbae:	2b0b      	cmp	r3, #11
 800bbb0:	d903      	bls.n	800bbba <_malloc_r+0x6e>
 800bbb2:	6023      	str	r3, [r4, #0]
 800bbb4:	18e4      	adds	r4, r4, r3
 800bbb6:	6025      	str	r5, [r4, #0]
 800bbb8:	e003      	b.n	800bbc2 <_malloc_r+0x76>
 800bbba:	6863      	ldr	r3, [r4, #4]
 800bbbc:	42a2      	cmp	r2, r4
 800bbbe:	d10e      	bne.n	800bbde <_malloc_r+0x92>
 800bbc0:	600b      	str	r3, [r1, #0]
 800bbc2:	0030      	movs	r0, r6
 800bbc4:	f000 f85a 	bl	800bc7c <__malloc_unlock>
 800bbc8:	0020      	movs	r0, r4
 800bbca:	2207      	movs	r2, #7
 800bbcc:	300b      	adds	r0, #11
 800bbce:	1d23      	adds	r3, r4, #4
 800bbd0:	4390      	bics	r0, r2
 800bbd2:	1ac2      	subs	r2, r0, r3
 800bbd4:	4298      	cmp	r0, r3
 800bbd6:	d0e6      	beq.n	800bba6 <_malloc_r+0x5a>
 800bbd8:	1a1b      	subs	r3, r3, r0
 800bbda:	50a3      	str	r3, [r4, r2]
 800bbdc:	e7e3      	b.n	800bba6 <_malloc_r+0x5a>
 800bbde:	6053      	str	r3, [r2, #4]
 800bbe0:	e7ef      	b.n	800bbc2 <_malloc_r+0x76>
 800bbe2:	0022      	movs	r2, r4
 800bbe4:	6864      	ldr	r4, [r4, #4]
 800bbe6:	e7c2      	b.n	800bb6e <_malloc_r+0x22>
 800bbe8:	2303      	movs	r3, #3
 800bbea:	1cc4      	adds	r4, r0, #3
 800bbec:	439c      	bics	r4, r3
 800bbee:	42a0      	cmp	r0, r4
 800bbf0:	d0e1      	beq.n	800bbb6 <_malloc_r+0x6a>
 800bbf2:	1a21      	subs	r1, r4, r0
 800bbf4:	0030      	movs	r0, r6
 800bbf6:	f000 f807 	bl	800bc08 <_sbrk_r>
 800bbfa:	1c43      	adds	r3, r0, #1
 800bbfc:	d1db      	bne.n	800bbb6 <_malloc_r+0x6a>
 800bbfe:	e7c7      	b.n	800bb90 <_malloc_r+0x44>
 800bc00:	2000043c 	.word	0x2000043c
 800bc04:	20000440 	.word	0x20000440

0800bc08 <_sbrk_r>:
 800bc08:	2300      	movs	r3, #0
 800bc0a:	b570      	push	{r4, r5, r6, lr}
 800bc0c:	4d06      	ldr	r5, [pc, #24]	; (800bc28 <_sbrk_r+0x20>)
 800bc0e:	0004      	movs	r4, r0
 800bc10:	0008      	movs	r0, r1
 800bc12:	602b      	str	r3, [r5, #0]
 800bc14:	f7f5 fe8c 	bl	8001930 <_sbrk>
 800bc18:	1c43      	adds	r3, r0, #1
 800bc1a:	d103      	bne.n	800bc24 <_sbrk_r+0x1c>
 800bc1c:	682b      	ldr	r3, [r5, #0]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d000      	beq.n	800bc24 <_sbrk_r+0x1c>
 800bc22:	6023      	str	r3, [r4, #0]
 800bc24:	bd70      	pop	{r4, r5, r6, pc}
 800bc26:	46c0      	nop			; (mov r8, r8)
 800bc28:	200015c8 	.word	0x200015c8

0800bc2c <siprintf>:
 800bc2c:	b40e      	push	{r1, r2, r3}
 800bc2e:	b500      	push	{lr}
 800bc30:	490b      	ldr	r1, [pc, #44]	; (800bc60 <siprintf+0x34>)
 800bc32:	b09c      	sub	sp, #112	; 0x70
 800bc34:	ab1d      	add	r3, sp, #116	; 0x74
 800bc36:	9002      	str	r0, [sp, #8]
 800bc38:	9006      	str	r0, [sp, #24]
 800bc3a:	9107      	str	r1, [sp, #28]
 800bc3c:	9104      	str	r1, [sp, #16]
 800bc3e:	4809      	ldr	r0, [pc, #36]	; (800bc64 <siprintf+0x38>)
 800bc40:	4909      	ldr	r1, [pc, #36]	; (800bc68 <siprintf+0x3c>)
 800bc42:	cb04      	ldmia	r3!, {r2}
 800bc44:	9105      	str	r1, [sp, #20]
 800bc46:	6800      	ldr	r0, [r0, #0]
 800bc48:	a902      	add	r1, sp, #8
 800bc4a:	9301      	str	r3, [sp, #4]
 800bc4c:	f000 f880 	bl	800bd50 <_svfiprintf_r>
 800bc50:	2300      	movs	r3, #0
 800bc52:	9a02      	ldr	r2, [sp, #8]
 800bc54:	7013      	strb	r3, [r2, #0]
 800bc56:	b01c      	add	sp, #112	; 0x70
 800bc58:	bc08      	pop	{r3}
 800bc5a:	b003      	add	sp, #12
 800bc5c:	4718      	bx	r3
 800bc5e:	46c0      	nop			; (mov r8, r8)
 800bc60:	7fffffff 	.word	0x7fffffff
 800bc64:	2000017c 	.word	0x2000017c
 800bc68:	ffff0208 	.word	0xffff0208

0800bc6c <__malloc_lock>:
 800bc6c:	b510      	push	{r4, lr}
 800bc6e:	4802      	ldr	r0, [pc, #8]	; (800bc78 <__malloc_lock+0xc>)
 800bc70:	f000 faf0 	bl	800c254 <__retarget_lock_acquire_recursive>
 800bc74:	bd10      	pop	{r4, pc}
 800bc76:	46c0      	nop			; (mov r8, r8)
 800bc78:	200015d0 	.word	0x200015d0

0800bc7c <__malloc_unlock>:
 800bc7c:	b510      	push	{r4, lr}
 800bc7e:	4802      	ldr	r0, [pc, #8]	; (800bc88 <__malloc_unlock+0xc>)
 800bc80:	f000 fae9 	bl	800c256 <__retarget_lock_release_recursive>
 800bc84:	bd10      	pop	{r4, pc}
 800bc86:	46c0      	nop			; (mov r8, r8)
 800bc88:	200015d0 	.word	0x200015d0

0800bc8c <__ssputs_r>:
 800bc8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc8e:	688e      	ldr	r6, [r1, #8]
 800bc90:	b085      	sub	sp, #20
 800bc92:	0007      	movs	r7, r0
 800bc94:	000c      	movs	r4, r1
 800bc96:	9203      	str	r2, [sp, #12]
 800bc98:	9301      	str	r3, [sp, #4]
 800bc9a:	429e      	cmp	r6, r3
 800bc9c:	d83c      	bhi.n	800bd18 <__ssputs_r+0x8c>
 800bc9e:	2390      	movs	r3, #144	; 0x90
 800bca0:	898a      	ldrh	r2, [r1, #12]
 800bca2:	00db      	lsls	r3, r3, #3
 800bca4:	421a      	tst	r2, r3
 800bca6:	d034      	beq.n	800bd12 <__ssputs_r+0x86>
 800bca8:	2503      	movs	r5, #3
 800bcaa:	6909      	ldr	r1, [r1, #16]
 800bcac:	6823      	ldr	r3, [r4, #0]
 800bcae:	1a5b      	subs	r3, r3, r1
 800bcb0:	9302      	str	r3, [sp, #8]
 800bcb2:	6963      	ldr	r3, [r4, #20]
 800bcb4:	9802      	ldr	r0, [sp, #8]
 800bcb6:	435d      	muls	r5, r3
 800bcb8:	0feb      	lsrs	r3, r5, #31
 800bcba:	195d      	adds	r5, r3, r5
 800bcbc:	9b01      	ldr	r3, [sp, #4]
 800bcbe:	106d      	asrs	r5, r5, #1
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	181b      	adds	r3, r3, r0
 800bcc4:	42ab      	cmp	r3, r5
 800bcc6:	d900      	bls.n	800bcca <__ssputs_r+0x3e>
 800bcc8:	001d      	movs	r5, r3
 800bcca:	0553      	lsls	r3, r2, #21
 800bccc:	d532      	bpl.n	800bd34 <__ssputs_r+0xa8>
 800bcce:	0029      	movs	r1, r5
 800bcd0:	0038      	movs	r0, r7
 800bcd2:	f7ff ff3b 	bl	800bb4c <_malloc_r>
 800bcd6:	1e06      	subs	r6, r0, #0
 800bcd8:	d109      	bne.n	800bcee <__ssputs_r+0x62>
 800bcda:	230c      	movs	r3, #12
 800bcdc:	603b      	str	r3, [r7, #0]
 800bcde:	2340      	movs	r3, #64	; 0x40
 800bce0:	2001      	movs	r0, #1
 800bce2:	89a2      	ldrh	r2, [r4, #12]
 800bce4:	4240      	negs	r0, r0
 800bce6:	4313      	orrs	r3, r2
 800bce8:	81a3      	strh	r3, [r4, #12]
 800bcea:	b005      	add	sp, #20
 800bcec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcee:	9a02      	ldr	r2, [sp, #8]
 800bcf0:	6921      	ldr	r1, [r4, #16]
 800bcf2:	f000 fabc 	bl	800c26e <memcpy>
 800bcf6:	89a3      	ldrh	r3, [r4, #12]
 800bcf8:	4a14      	ldr	r2, [pc, #80]	; (800bd4c <__ssputs_r+0xc0>)
 800bcfa:	401a      	ands	r2, r3
 800bcfc:	2380      	movs	r3, #128	; 0x80
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	81a3      	strh	r3, [r4, #12]
 800bd02:	9b02      	ldr	r3, [sp, #8]
 800bd04:	6126      	str	r6, [r4, #16]
 800bd06:	18f6      	adds	r6, r6, r3
 800bd08:	6026      	str	r6, [r4, #0]
 800bd0a:	6165      	str	r5, [r4, #20]
 800bd0c:	9e01      	ldr	r6, [sp, #4]
 800bd0e:	1aed      	subs	r5, r5, r3
 800bd10:	60a5      	str	r5, [r4, #8]
 800bd12:	9b01      	ldr	r3, [sp, #4]
 800bd14:	429e      	cmp	r6, r3
 800bd16:	d900      	bls.n	800bd1a <__ssputs_r+0x8e>
 800bd18:	9e01      	ldr	r6, [sp, #4]
 800bd1a:	0032      	movs	r2, r6
 800bd1c:	9903      	ldr	r1, [sp, #12]
 800bd1e:	6820      	ldr	r0, [r4, #0]
 800bd20:	f000 faae 	bl	800c280 <memmove>
 800bd24:	68a3      	ldr	r3, [r4, #8]
 800bd26:	2000      	movs	r0, #0
 800bd28:	1b9b      	subs	r3, r3, r6
 800bd2a:	60a3      	str	r3, [r4, #8]
 800bd2c:	6823      	ldr	r3, [r4, #0]
 800bd2e:	199e      	adds	r6, r3, r6
 800bd30:	6026      	str	r6, [r4, #0]
 800bd32:	e7da      	b.n	800bcea <__ssputs_r+0x5e>
 800bd34:	002a      	movs	r2, r5
 800bd36:	0038      	movs	r0, r7
 800bd38:	f000 fab5 	bl	800c2a6 <_realloc_r>
 800bd3c:	1e06      	subs	r6, r0, #0
 800bd3e:	d1e0      	bne.n	800bd02 <__ssputs_r+0x76>
 800bd40:	0038      	movs	r0, r7
 800bd42:	6921      	ldr	r1, [r4, #16]
 800bd44:	f7ff feb8 	bl	800bab8 <_free_r>
 800bd48:	e7c7      	b.n	800bcda <__ssputs_r+0x4e>
 800bd4a:	46c0      	nop			; (mov r8, r8)
 800bd4c:	fffffb7f 	.word	0xfffffb7f

0800bd50 <_svfiprintf_r>:
 800bd50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd52:	b0a1      	sub	sp, #132	; 0x84
 800bd54:	9003      	str	r0, [sp, #12]
 800bd56:	001d      	movs	r5, r3
 800bd58:	898b      	ldrh	r3, [r1, #12]
 800bd5a:	000f      	movs	r7, r1
 800bd5c:	0016      	movs	r6, r2
 800bd5e:	061b      	lsls	r3, r3, #24
 800bd60:	d511      	bpl.n	800bd86 <_svfiprintf_r+0x36>
 800bd62:	690b      	ldr	r3, [r1, #16]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d10e      	bne.n	800bd86 <_svfiprintf_r+0x36>
 800bd68:	2140      	movs	r1, #64	; 0x40
 800bd6a:	f7ff feef 	bl	800bb4c <_malloc_r>
 800bd6e:	6038      	str	r0, [r7, #0]
 800bd70:	6138      	str	r0, [r7, #16]
 800bd72:	2800      	cmp	r0, #0
 800bd74:	d105      	bne.n	800bd82 <_svfiprintf_r+0x32>
 800bd76:	230c      	movs	r3, #12
 800bd78:	9a03      	ldr	r2, [sp, #12]
 800bd7a:	3801      	subs	r0, #1
 800bd7c:	6013      	str	r3, [r2, #0]
 800bd7e:	b021      	add	sp, #132	; 0x84
 800bd80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd82:	2340      	movs	r3, #64	; 0x40
 800bd84:	617b      	str	r3, [r7, #20]
 800bd86:	2300      	movs	r3, #0
 800bd88:	ac08      	add	r4, sp, #32
 800bd8a:	6163      	str	r3, [r4, #20]
 800bd8c:	3320      	adds	r3, #32
 800bd8e:	7663      	strb	r3, [r4, #25]
 800bd90:	3310      	adds	r3, #16
 800bd92:	76a3      	strb	r3, [r4, #26]
 800bd94:	9507      	str	r5, [sp, #28]
 800bd96:	0035      	movs	r5, r6
 800bd98:	782b      	ldrb	r3, [r5, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d001      	beq.n	800bda2 <_svfiprintf_r+0x52>
 800bd9e:	2b25      	cmp	r3, #37	; 0x25
 800bda0:	d147      	bne.n	800be32 <_svfiprintf_r+0xe2>
 800bda2:	1bab      	subs	r3, r5, r6
 800bda4:	9305      	str	r3, [sp, #20]
 800bda6:	42b5      	cmp	r5, r6
 800bda8:	d00c      	beq.n	800bdc4 <_svfiprintf_r+0x74>
 800bdaa:	0032      	movs	r2, r6
 800bdac:	0039      	movs	r1, r7
 800bdae:	9803      	ldr	r0, [sp, #12]
 800bdb0:	f7ff ff6c 	bl	800bc8c <__ssputs_r>
 800bdb4:	1c43      	adds	r3, r0, #1
 800bdb6:	d100      	bne.n	800bdba <_svfiprintf_r+0x6a>
 800bdb8:	e0ae      	b.n	800bf18 <_svfiprintf_r+0x1c8>
 800bdba:	6962      	ldr	r2, [r4, #20]
 800bdbc:	9b05      	ldr	r3, [sp, #20]
 800bdbe:	4694      	mov	ip, r2
 800bdc0:	4463      	add	r3, ip
 800bdc2:	6163      	str	r3, [r4, #20]
 800bdc4:	782b      	ldrb	r3, [r5, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d100      	bne.n	800bdcc <_svfiprintf_r+0x7c>
 800bdca:	e0a5      	b.n	800bf18 <_svfiprintf_r+0x1c8>
 800bdcc:	2201      	movs	r2, #1
 800bdce:	2300      	movs	r3, #0
 800bdd0:	4252      	negs	r2, r2
 800bdd2:	6062      	str	r2, [r4, #4]
 800bdd4:	a904      	add	r1, sp, #16
 800bdd6:	3254      	adds	r2, #84	; 0x54
 800bdd8:	1852      	adds	r2, r2, r1
 800bdda:	1c6e      	adds	r6, r5, #1
 800bddc:	6023      	str	r3, [r4, #0]
 800bdde:	60e3      	str	r3, [r4, #12]
 800bde0:	60a3      	str	r3, [r4, #8]
 800bde2:	7013      	strb	r3, [r2, #0]
 800bde4:	65a3      	str	r3, [r4, #88]	; 0x58
 800bde6:	2205      	movs	r2, #5
 800bde8:	7831      	ldrb	r1, [r6, #0]
 800bdea:	4854      	ldr	r0, [pc, #336]	; (800bf3c <_svfiprintf_r+0x1ec>)
 800bdec:	f000 fa34 	bl	800c258 <memchr>
 800bdf0:	1c75      	adds	r5, r6, #1
 800bdf2:	2800      	cmp	r0, #0
 800bdf4:	d11f      	bne.n	800be36 <_svfiprintf_r+0xe6>
 800bdf6:	6822      	ldr	r2, [r4, #0]
 800bdf8:	06d3      	lsls	r3, r2, #27
 800bdfa:	d504      	bpl.n	800be06 <_svfiprintf_r+0xb6>
 800bdfc:	2353      	movs	r3, #83	; 0x53
 800bdfe:	a904      	add	r1, sp, #16
 800be00:	185b      	adds	r3, r3, r1
 800be02:	2120      	movs	r1, #32
 800be04:	7019      	strb	r1, [r3, #0]
 800be06:	0713      	lsls	r3, r2, #28
 800be08:	d504      	bpl.n	800be14 <_svfiprintf_r+0xc4>
 800be0a:	2353      	movs	r3, #83	; 0x53
 800be0c:	a904      	add	r1, sp, #16
 800be0e:	185b      	adds	r3, r3, r1
 800be10:	212b      	movs	r1, #43	; 0x2b
 800be12:	7019      	strb	r1, [r3, #0]
 800be14:	7833      	ldrb	r3, [r6, #0]
 800be16:	2b2a      	cmp	r3, #42	; 0x2a
 800be18:	d016      	beq.n	800be48 <_svfiprintf_r+0xf8>
 800be1a:	0035      	movs	r5, r6
 800be1c:	2100      	movs	r1, #0
 800be1e:	200a      	movs	r0, #10
 800be20:	68e3      	ldr	r3, [r4, #12]
 800be22:	782a      	ldrb	r2, [r5, #0]
 800be24:	1c6e      	adds	r6, r5, #1
 800be26:	3a30      	subs	r2, #48	; 0x30
 800be28:	2a09      	cmp	r2, #9
 800be2a:	d94e      	bls.n	800beca <_svfiprintf_r+0x17a>
 800be2c:	2900      	cmp	r1, #0
 800be2e:	d111      	bne.n	800be54 <_svfiprintf_r+0x104>
 800be30:	e017      	b.n	800be62 <_svfiprintf_r+0x112>
 800be32:	3501      	adds	r5, #1
 800be34:	e7b0      	b.n	800bd98 <_svfiprintf_r+0x48>
 800be36:	4b41      	ldr	r3, [pc, #260]	; (800bf3c <_svfiprintf_r+0x1ec>)
 800be38:	6822      	ldr	r2, [r4, #0]
 800be3a:	1ac0      	subs	r0, r0, r3
 800be3c:	2301      	movs	r3, #1
 800be3e:	4083      	lsls	r3, r0
 800be40:	4313      	orrs	r3, r2
 800be42:	002e      	movs	r6, r5
 800be44:	6023      	str	r3, [r4, #0]
 800be46:	e7ce      	b.n	800bde6 <_svfiprintf_r+0x96>
 800be48:	9b07      	ldr	r3, [sp, #28]
 800be4a:	1d19      	adds	r1, r3, #4
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	9107      	str	r1, [sp, #28]
 800be50:	2b00      	cmp	r3, #0
 800be52:	db01      	blt.n	800be58 <_svfiprintf_r+0x108>
 800be54:	930b      	str	r3, [sp, #44]	; 0x2c
 800be56:	e004      	b.n	800be62 <_svfiprintf_r+0x112>
 800be58:	425b      	negs	r3, r3
 800be5a:	60e3      	str	r3, [r4, #12]
 800be5c:	2302      	movs	r3, #2
 800be5e:	4313      	orrs	r3, r2
 800be60:	6023      	str	r3, [r4, #0]
 800be62:	782b      	ldrb	r3, [r5, #0]
 800be64:	2b2e      	cmp	r3, #46	; 0x2e
 800be66:	d10a      	bne.n	800be7e <_svfiprintf_r+0x12e>
 800be68:	786b      	ldrb	r3, [r5, #1]
 800be6a:	2b2a      	cmp	r3, #42	; 0x2a
 800be6c:	d135      	bne.n	800beda <_svfiprintf_r+0x18a>
 800be6e:	9b07      	ldr	r3, [sp, #28]
 800be70:	3502      	adds	r5, #2
 800be72:	1d1a      	adds	r2, r3, #4
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	9207      	str	r2, [sp, #28]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	db2b      	blt.n	800bed4 <_svfiprintf_r+0x184>
 800be7c:	9309      	str	r3, [sp, #36]	; 0x24
 800be7e:	4e30      	ldr	r6, [pc, #192]	; (800bf40 <_svfiprintf_r+0x1f0>)
 800be80:	2203      	movs	r2, #3
 800be82:	0030      	movs	r0, r6
 800be84:	7829      	ldrb	r1, [r5, #0]
 800be86:	f000 f9e7 	bl	800c258 <memchr>
 800be8a:	2800      	cmp	r0, #0
 800be8c:	d006      	beq.n	800be9c <_svfiprintf_r+0x14c>
 800be8e:	2340      	movs	r3, #64	; 0x40
 800be90:	1b80      	subs	r0, r0, r6
 800be92:	4083      	lsls	r3, r0
 800be94:	6822      	ldr	r2, [r4, #0]
 800be96:	3501      	adds	r5, #1
 800be98:	4313      	orrs	r3, r2
 800be9a:	6023      	str	r3, [r4, #0]
 800be9c:	7829      	ldrb	r1, [r5, #0]
 800be9e:	2206      	movs	r2, #6
 800bea0:	4828      	ldr	r0, [pc, #160]	; (800bf44 <_svfiprintf_r+0x1f4>)
 800bea2:	1c6e      	adds	r6, r5, #1
 800bea4:	7621      	strb	r1, [r4, #24]
 800bea6:	f000 f9d7 	bl	800c258 <memchr>
 800beaa:	2800      	cmp	r0, #0
 800beac:	d03c      	beq.n	800bf28 <_svfiprintf_r+0x1d8>
 800beae:	4b26      	ldr	r3, [pc, #152]	; (800bf48 <_svfiprintf_r+0x1f8>)
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d125      	bne.n	800bf00 <_svfiprintf_r+0x1b0>
 800beb4:	2207      	movs	r2, #7
 800beb6:	9b07      	ldr	r3, [sp, #28]
 800beb8:	3307      	adds	r3, #7
 800beba:	4393      	bics	r3, r2
 800bebc:	3308      	adds	r3, #8
 800bebe:	9307      	str	r3, [sp, #28]
 800bec0:	6963      	ldr	r3, [r4, #20]
 800bec2:	9a04      	ldr	r2, [sp, #16]
 800bec4:	189b      	adds	r3, r3, r2
 800bec6:	6163      	str	r3, [r4, #20]
 800bec8:	e765      	b.n	800bd96 <_svfiprintf_r+0x46>
 800beca:	4343      	muls	r3, r0
 800becc:	0035      	movs	r5, r6
 800bece:	2101      	movs	r1, #1
 800bed0:	189b      	adds	r3, r3, r2
 800bed2:	e7a6      	b.n	800be22 <_svfiprintf_r+0xd2>
 800bed4:	2301      	movs	r3, #1
 800bed6:	425b      	negs	r3, r3
 800bed8:	e7d0      	b.n	800be7c <_svfiprintf_r+0x12c>
 800beda:	2300      	movs	r3, #0
 800bedc:	200a      	movs	r0, #10
 800bede:	001a      	movs	r2, r3
 800bee0:	3501      	adds	r5, #1
 800bee2:	6063      	str	r3, [r4, #4]
 800bee4:	7829      	ldrb	r1, [r5, #0]
 800bee6:	1c6e      	adds	r6, r5, #1
 800bee8:	3930      	subs	r1, #48	; 0x30
 800beea:	2909      	cmp	r1, #9
 800beec:	d903      	bls.n	800bef6 <_svfiprintf_r+0x1a6>
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d0c5      	beq.n	800be7e <_svfiprintf_r+0x12e>
 800bef2:	9209      	str	r2, [sp, #36]	; 0x24
 800bef4:	e7c3      	b.n	800be7e <_svfiprintf_r+0x12e>
 800bef6:	4342      	muls	r2, r0
 800bef8:	0035      	movs	r5, r6
 800befa:	2301      	movs	r3, #1
 800befc:	1852      	adds	r2, r2, r1
 800befe:	e7f1      	b.n	800bee4 <_svfiprintf_r+0x194>
 800bf00:	ab07      	add	r3, sp, #28
 800bf02:	9300      	str	r3, [sp, #0]
 800bf04:	003a      	movs	r2, r7
 800bf06:	0021      	movs	r1, r4
 800bf08:	4b10      	ldr	r3, [pc, #64]	; (800bf4c <_svfiprintf_r+0x1fc>)
 800bf0a:	9803      	ldr	r0, [sp, #12]
 800bf0c:	e000      	b.n	800bf10 <_svfiprintf_r+0x1c0>
 800bf0e:	bf00      	nop
 800bf10:	9004      	str	r0, [sp, #16]
 800bf12:	9b04      	ldr	r3, [sp, #16]
 800bf14:	3301      	adds	r3, #1
 800bf16:	d1d3      	bne.n	800bec0 <_svfiprintf_r+0x170>
 800bf18:	89bb      	ldrh	r3, [r7, #12]
 800bf1a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bf1c:	065b      	lsls	r3, r3, #25
 800bf1e:	d400      	bmi.n	800bf22 <_svfiprintf_r+0x1d2>
 800bf20:	e72d      	b.n	800bd7e <_svfiprintf_r+0x2e>
 800bf22:	2001      	movs	r0, #1
 800bf24:	4240      	negs	r0, r0
 800bf26:	e72a      	b.n	800bd7e <_svfiprintf_r+0x2e>
 800bf28:	ab07      	add	r3, sp, #28
 800bf2a:	9300      	str	r3, [sp, #0]
 800bf2c:	003a      	movs	r2, r7
 800bf2e:	0021      	movs	r1, r4
 800bf30:	4b06      	ldr	r3, [pc, #24]	; (800bf4c <_svfiprintf_r+0x1fc>)
 800bf32:	9803      	ldr	r0, [sp, #12]
 800bf34:	f000 f87c 	bl	800c030 <_printf_i>
 800bf38:	e7ea      	b.n	800bf10 <_svfiprintf_r+0x1c0>
 800bf3a:	46c0      	nop			; (mov r8, r8)
 800bf3c:	0800c4f8 	.word	0x0800c4f8
 800bf40:	0800c4fe 	.word	0x0800c4fe
 800bf44:	0800c502 	.word	0x0800c502
 800bf48:	00000000 	.word	0x00000000
 800bf4c:	0800bc8d 	.word	0x0800bc8d

0800bf50 <_printf_common>:
 800bf50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf52:	0015      	movs	r5, r2
 800bf54:	9301      	str	r3, [sp, #4]
 800bf56:	688a      	ldr	r2, [r1, #8]
 800bf58:	690b      	ldr	r3, [r1, #16]
 800bf5a:	000c      	movs	r4, r1
 800bf5c:	9000      	str	r0, [sp, #0]
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	da00      	bge.n	800bf64 <_printf_common+0x14>
 800bf62:	0013      	movs	r3, r2
 800bf64:	0022      	movs	r2, r4
 800bf66:	602b      	str	r3, [r5, #0]
 800bf68:	3243      	adds	r2, #67	; 0x43
 800bf6a:	7812      	ldrb	r2, [r2, #0]
 800bf6c:	2a00      	cmp	r2, #0
 800bf6e:	d001      	beq.n	800bf74 <_printf_common+0x24>
 800bf70:	3301      	adds	r3, #1
 800bf72:	602b      	str	r3, [r5, #0]
 800bf74:	6823      	ldr	r3, [r4, #0]
 800bf76:	069b      	lsls	r3, r3, #26
 800bf78:	d502      	bpl.n	800bf80 <_printf_common+0x30>
 800bf7a:	682b      	ldr	r3, [r5, #0]
 800bf7c:	3302      	adds	r3, #2
 800bf7e:	602b      	str	r3, [r5, #0]
 800bf80:	6822      	ldr	r2, [r4, #0]
 800bf82:	2306      	movs	r3, #6
 800bf84:	0017      	movs	r7, r2
 800bf86:	401f      	ands	r7, r3
 800bf88:	421a      	tst	r2, r3
 800bf8a:	d027      	beq.n	800bfdc <_printf_common+0x8c>
 800bf8c:	0023      	movs	r3, r4
 800bf8e:	3343      	adds	r3, #67	; 0x43
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	1e5a      	subs	r2, r3, #1
 800bf94:	4193      	sbcs	r3, r2
 800bf96:	6822      	ldr	r2, [r4, #0]
 800bf98:	0692      	lsls	r2, r2, #26
 800bf9a:	d430      	bmi.n	800bffe <_printf_common+0xae>
 800bf9c:	0022      	movs	r2, r4
 800bf9e:	9901      	ldr	r1, [sp, #4]
 800bfa0:	9800      	ldr	r0, [sp, #0]
 800bfa2:	9e08      	ldr	r6, [sp, #32]
 800bfa4:	3243      	adds	r2, #67	; 0x43
 800bfa6:	47b0      	blx	r6
 800bfa8:	1c43      	adds	r3, r0, #1
 800bfaa:	d025      	beq.n	800bff8 <_printf_common+0xa8>
 800bfac:	2306      	movs	r3, #6
 800bfae:	6820      	ldr	r0, [r4, #0]
 800bfb0:	682a      	ldr	r2, [r5, #0]
 800bfb2:	68e1      	ldr	r1, [r4, #12]
 800bfb4:	2500      	movs	r5, #0
 800bfb6:	4003      	ands	r3, r0
 800bfb8:	2b04      	cmp	r3, #4
 800bfba:	d103      	bne.n	800bfc4 <_printf_common+0x74>
 800bfbc:	1a8d      	subs	r5, r1, r2
 800bfbe:	43eb      	mvns	r3, r5
 800bfc0:	17db      	asrs	r3, r3, #31
 800bfc2:	401d      	ands	r5, r3
 800bfc4:	68a3      	ldr	r3, [r4, #8]
 800bfc6:	6922      	ldr	r2, [r4, #16]
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	dd01      	ble.n	800bfd0 <_printf_common+0x80>
 800bfcc:	1a9b      	subs	r3, r3, r2
 800bfce:	18ed      	adds	r5, r5, r3
 800bfd0:	2700      	movs	r7, #0
 800bfd2:	42bd      	cmp	r5, r7
 800bfd4:	d120      	bne.n	800c018 <_printf_common+0xc8>
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	e010      	b.n	800bffc <_printf_common+0xac>
 800bfda:	3701      	adds	r7, #1
 800bfdc:	68e3      	ldr	r3, [r4, #12]
 800bfde:	682a      	ldr	r2, [r5, #0]
 800bfe0:	1a9b      	subs	r3, r3, r2
 800bfe2:	42bb      	cmp	r3, r7
 800bfe4:	ddd2      	ble.n	800bf8c <_printf_common+0x3c>
 800bfe6:	0022      	movs	r2, r4
 800bfe8:	2301      	movs	r3, #1
 800bfea:	9901      	ldr	r1, [sp, #4]
 800bfec:	9800      	ldr	r0, [sp, #0]
 800bfee:	9e08      	ldr	r6, [sp, #32]
 800bff0:	3219      	adds	r2, #25
 800bff2:	47b0      	blx	r6
 800bff4:	1c43      	adds	r3, r0, #1
 800bff6:	d1f0      	bne.n	800bfda <_printf_common+0x8a>
 800bff8:	2001      	movs	r0, #1
 800bffa:	4240      	negs	r0, r0
 800bffc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bffe:	2030      	movs	r0, #48	; 0x30
 800c000:	18e1      	adds	r1, r4, r3
 800c002:	3143      	adds	r1, #67	; 0x43
 800c004:	7008      	strb	r0, [r1, #0]
 800c006:	0021      	movs	r1, r4
 800c008:	1c5a      	adds	r2, r3, #1
 800c00a:	3145      	adds	r1, #69	; 0x45
 800c00c:	7809      	ldrb	r1, [r1, #0]
 800c00e:	18a2      	adds	r2, r4, r2
 800c010:	3243      	adds	r2, #67	; 0x43
 800c012:	3302      	adds	r3, #2
 800c014:	7011      	strb	r1, [r2, #0]
 800c016:	e7c1      	b.n	800bf9c <_printf_common+0x4c>
 800c018:	0022      	movs	r2, r4
 800c01a:	2301      	movs	r3, #1
 800c01c:	9901      	ldr	r1, [sp, #4]
 800c01e:	9800      	ldr	r0, [sp, #0]
 800c020:	9e08      	ldr	r6, [sp, #32]
 800c022:	321a      	adds	r2, #26
 800c024:	47b0      	blx	r6
 800c026:	1c43      	adds	r3, r0, #1
 800c028:	d0e6      	beq.n	800bff8 <_printf_common+0xa8>
 800c02a:	3701      	adds	r7, #1
 800c02c:	e7d1      	b.n	800bfd2 <_printf_common+0x82>
	...

0800c030 <_printf_i>:
 800c030:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c032:	b08b      	sub	sp, #44	; 0x2c
 800c034:	9206      	str	r2, [sp, #24]
 800c036:	000a      	movs	r2, r1
 800c038:	3243      	adds	r2, #67	; 0x43
 800c03a:	9307      	str	r3, [sp, #28]
 800c03c:	9005      	str	r0, [sp, #20]
 800c03e:	9204      	str	r2, [sp, #16]
 800c040:	7e0a      	ldrb	r2, [r1, #24]
 800c042:	000c      	movs	r4, r1
 800c044:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c046:	2a78      	cmp	r2, #120	; 0x78
 800c048:	d806      	bhi.n	800c058 <_printf_i+0x28>
 800c04a:	2a62      	cmp	r2, #98	; 0x62
 800c04c:	d808      	bhi.n	800c060 <_printf_i+0x30>
 800c04e:	2a00      	cmp	r2, #0
 800c050:	d100      	bne.n	800c054 <_printf_i+0x24>
 800c052:	e0c0      	b.n	800c1d6 <_printf_i+0x1a6>
 800c054:	2a58      	cmp	r2, #88	; 0x58
 800c056:	d052      	beq.n	800c0fe <_printf_i+0xce>
 800c058:	0026      	movs	r6, r4
 800c05a:	3642      	adds	r6, #66	; 0x42
 800c05c:	7032      	strb	r2, [r6, #0]
 800c05e:	e022      	b.n	800c0a6 <_printf_i+0x76>
 800c060:	0010      	movs	r0, r2
 800c062:	3863      	subs	r0, #99	; 0x63
 800c064:	2815      	cmp	r0, #21
 800c066:	d8f7      	bhi.n	800c058 <_printf_i+0x28>
 800c068:	f7f4 f856 	bl	8000118 <__gnu_thumb1_case_shi>
 800c06c:	001f0016 	.word	0x001f0016
 800c070:	fff6fff6 	.word	0xfff6fff6
 800c074:	fff6fff6 	.word	0xfff6fff6
 800c078:	fff6001f 	.word	0xfff6001f
 800c07c:	fff6fff6 	.word	0xfff6fff6
 800c080:	00a8fff6 	.word	0x00a8fff6
 800c084:	009a0036 	.word	0x009a0036
 800c088:	fff6fff6 	.word	0xfff6fff6
 800c08c:	fff600b9 	.word	0xfff600b9
 800c090:	fff60036 	.word	0xfff60036
 800c094:	009efff6 	.word	0x009efff6
 800c098:	0026      	movs	r6, r4
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	3642      	adds	r6, #66	; 0x42
 800c09e:	1d11      	adds	r1, r2, #4
 800c0a0:	6019      	str	r1, [r3, #0]
 800c0a2:	6813      	ldr	r3, [r2, #0]
 800c0a4:	7033      	strb	r3, [r6, #0]
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e0a7      	b.n	800c1fa <_printf_i+0x1ca>
 800c0aa:	6808      	ldr	r0, [r1, #0]
 800c0ac:	6819      	ldr	r1, [r3, #0]
 800c0ae:	1d0a      	adds	r2, r1, #4
 800c0b0:	0605      	lsls	r5, r0, #24
 800c0b2:	d50b      	bpl.n	800c0cc <_printf_i+0x9c>
 800c0b4:	680d      	ldr	r5, [r1, #0]
 800c0b6:	601a      	str	r2, [r3, #0]
 800c0b8:	2d00      	cmp	r5, #0
 800c0ba:	da03      	bge.n	800c0c4 <_printf_i+0x94>
 800c0bc:	232d      	movs	r3, #45	; 0x2d
 800c0be:	9a04      	ldr	r2, [sp, #16]
 800c0c0:	426d      	negs	r5, r5
 800c0c2:	7013      	strb	r3, [r2, #0]
 800c0c4:	4b61      	ldr	r3, [pc, #388]	; (800c24c <_printf_i+0x21c>)
 800c0c6:	270a      	movs	r7, #10
 800c0c8:	9303      	str	r3, [sp, #12]
 800c0ca:	e032      	b.n	800c132 <_printf_i+0x102>
 800c0cc:	680d      	ldr	r5, [r1, #0]
 800c0ce:	601a      	str	r2, [r3, #0]
 800c0d0:	0641      	lsls	r1, r0, #25
 800c0d2:	d5f1      	bpl.n	800c0b8 <_printf_i+0x88>
 800c0d4:	b22d      	sxth	r5, r5
 800c0d6:	e7ef      	b.n	800c0b8 <_printf_i+0x88>
 800c0d8:	680d      	ldr	r5, [r1, #0]
 800c0da:	6819      	ldr	r1, [r3, #0]
 800c0dc:	1d08      	adds	r0, r1, #4
 800c0de:	6018      	str	r0, [r3, #0]
 800c0e0:	062e      	lsls	r6, r5, #24
 800c0e2:	d501      	bpl.n	800c0e8 <_printf_i+0xb8>
 800c0e4:	680d      	ldr	r5, [r1, #0]
 800c0e6:	e003      	b.n	800c0f0 <_printf_i+0xc0>
 800c0e8:	066d      	lsls	r5, r5, #25
 800c0ea:	d5fb      	bpl.n	800c0e4 <_printf_i+0xb4>
 800c0ec:	680d      	ldr	r5, [r1, #0]
 800c0ee:	b2ad      	uxth	r5, r5
 800c0f0:	4b56      	ldr	r3, [pc, #344]	; (800c24c <_printf_i+0x21c>)
 800c0f2:	270a      	movs	r7, #10
 800c0f4:	9303      	str	r3, [sp, #12]
 800c0f6:	2a6f      	cmp	r2, #111	; 0x6f
 800c0f8:	d117      	bne.n	800c12a <_printf_i+0xfa>
 800c0fa:	2708      	movs	r7, #8
 800c0fc:	e015      	b.n	800c12a <_printf_i+0xfa>
 800c0fe:	3145      	adds	r1, #69	; 0x45
 800c100:	700a      	strb	r2, [r1, #0]
 800c102:	4a52      	ldr	r2, [pc, #328]	; (800c24c <_printf_i+0x21c>)
 800c104:	9203      	str	r2, [sp, #12]
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	6821      	ldr	r1, [r4, #0]
 800c10a:	ca20      	ldmia	r2!, {r5}
 800c10c:	601a      	str	r2, [r3, #0]
 800c10e:	0608      	lsls	r0, r1, #24
 800c110:	d550      	bpl.n	800c1b4 <_printf_i+0x184>
 800c112:	07cb      	lsls	r3, r1, #31
 800c114:	d502      	bpl.n	800c11c <_printf_i+0xec>
 800c116:	2320      	movs	r3, #32
 800c118:	4319      	orrs	r1, r3
 800c11a:	6021      	str	r1, [r4, #0]
 800c11c:	2710      	movs	r7, #16
 800c11e:	2d00      	cmp	r5, #0
 800c120:	d103      	bne.n	800c12a <_printf_i+0xfa>
 800c122:	2320      	movs	r3, #32
 800c124:	6822      	ldr	r2, [r4, #0]
 800c126:	439a      	bics	r2, r3
 800c128:	6022      	str	r2, [r4, #0]
 800c12a:	0023      	movs	r3, r4
 800c12c:	2200      	movs	r2, #0
 800c12e:	3343      	adds	r3, #67	; 0x43
 800c130:	701a      	strb	r2, [r3, #0]
 800c132:	6863      	ldr	r3, [r4, #4]
 800c134:	60a3      	str	r3, [r4, #8]
 800c136:	2b00      	cmp	r3, #0
 800c138:	db03      	blt.n	800c142 <_printf_i+0x112>
 800c13a:	2204      	movs	r2, #4
 800c13c:	6821      	ldr	r1, [r4, #0]
 800c13e:	4391      	bics	r1, r2
 800c140:	6021      	str	r1, [r4, #0]
 800c142:	2d00      	cmp	r5, #0
 800c144:	d102      	bne.n	800c14c <_printf_i+0x11c>
 800c146:	9e04      	ldr	r6, [sp, #16]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d00c      	beq.n	800c166 <_printf_i+0x136>
 800c14c:	9e04      	ldr	r6, [sp, #16]
 800c14e:	0028      	movs	r0, r5
 800c150:	0039      	movs	r1, r7
 800c152:	f7f4 f871 	bl	8000238 <__aeabi_uidivmod>
 800c156:	9b03      	ldr	r3, [sp, #12]
 800c158:	3e01      	subs	r6, #1
 800c15a:	5c5b      	ldrb	r3, [r3, r1]
 800c15c:	7033      	strb	r3, [r6, #0]
 800c15e:	002b      	movs	r3, r5
 800c160:	0005      	movs	r5, r0
 800c162:	429f      	cmp	r7, r3
 800c164:	d9f3      	bls.n	800c14e <_printf_i+0x11e>
 800c166:	2f08      	cmp	r7, #8
 800c168:	d109      	bne.n	800c17e <_printf_i+0x14e>
 800c16a:	6823      	ldr	r3, [r4, #0]
 800c16c:	07db      	lsls	r3, r3, #31
 800c16e:	d506      	bpl.n	800c17e <_printf_i+0x14e>
 800c170:	6863      	ldr	r3, [r4, #4]
 800c172:	6922      	ldr	r2, [r4, #16]
 800c174:	4293      	cmp	r3, r2
 800c176:	dc02      	bgt.n	800c17e <_printf_i+0x14e>
 800c178:	2330      	movs	r3, #48	; 0x30
 800c17a:	3e01      	subs	r6, #1
 800c17c:	7033      	strb	r3, [r6, #0]
 800c17e:	9b04      	ldr	r3, [sp, #16]
 800c180:	1b9b      	subs	r3, r3, r6
 800c182:	6123      	str	r3, [r4, #16]
 800c184:	9b07      	ldr	r3, [sp, #28]
 800c186:	0021      	movs	r1, r4
 800c188:	9300      	str	r3, [sp, #0]
 800c18a:	9805      	ldr	r0, [sp, #20]
 800c18c:	9b06      	ldr	r3, [sp, #24]
 800c18e:	aa09      	add	r2, sp, #36	; 0x24
 800c190:	f7ff fede 	bl	800bf50 <_printf_common>
 800c194:	1c43      	adds	r3, r0, #1
 800c196:	d135      	bne.n	800c204 <_printf_i+0x1d4>
 800c198:	2001      	movs	r0, #1
 800c19a:	4240      	negs	r0, r0
 800c19c:	b00b      	add	sp, #44	; 0x2c
 800c19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1a0:	2220      	movs	r2, #32
 800c1a2:	6809      	ldr	r1, [r1, #0]
 800c1a4:	430a      	orrs	r2, r1
 800c1a6:	6022      	str	r2, [r4, #0]
 800c1a8:	0022      	movs	r2, r4
 800c1aa:	2178      	movs	r1, #120	; 0x78
 800c1ac:	3245      	adds	r2, #69	; 0x45
 800c1ae:	7011      	strb	r1, [r2, #0]
 800c1b0:	4a27      	ldr	r2, [pc, #156]	; (800c250 <_printf_i+0x220>)
 800c1b2:	e7a7      	b.n	800c104 <_printf_i+0xd4>
 800c1b4:	0648      	lsls	r0, r1, #25
 800c1b6:	d5ac      	bpl.n	800c112 <_printf_i+0xe2>
 800c1b8:	b2ad      	uxth	r5, r5
 800c1ba:	e7aa      	b.n	800c112 <_printf_i+0xe2>
 800c1bc:	681a      	ldr	r2, [r3, #0]
 800c1be:	680d      	ldr	r5, [r1, #0]
 800c1c0:	1d10      	adds	r0, r2, #4
 800c1c2:	6949      	ldr	r1, [r1, #20]
 800c1c4:	6018      	str	r0, [r3, #0]
 800c1c6:	6813      	ldr	r3, [r2, #0]
 800c1c8:	062e      	lsls	r6, r5, #24
 800c1ca:	d501      	bpl.n	800c1d0 <_printf_i+0x1a0>
 800c1cc:	6019      	str	r1, [r3, #0]
 800c1ce:	e002      	b.n	800c1d6 <_printf_i+0x1a6>
 800c1d0:	066d      	lsls	r5, r5, #25
 800c1d2:	d5fb      	bpl.n	800c1cc <_printf_i+0x19c>
 800c1d4:	8019      	strh	r1, [r3, #0]
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	9e04      	ldr	r6, [sp, #16]
 800c1da:	6123      	str	r3, [r4, #16]
 800c1dc:	e7d2      	b.n	800c184 <_printf_i+0x154>
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	1d11      	adds	r1, r2, #4
 800c1e2:	6019      	str	r1, [r3, #0]
 800c1e4:	6816      	ldr	r6, [r2, #0]
 800c1e6:	2100      	movs	r1, #0
 800c1e8:	0030      	movs	r0, r6
 800c1ea:	6862      	ldr	r2, [r4, #4]
 800c1ec:	f000 f834 	bl	800c258 <memchr>
 800c1f0:	2800      	cmp	r0, #0
 800c1f2:	d001      	beq.n	800c1f8 <_printf_i+0x1c8>
 800c1f4:	1b80      	subs	r0, r0, r6
 800c1f6:	6060      	str	r0, [r4, #4]
 800c1f8:	6863      	ldr	r3, [r4, #4]
 800c1fa:	6123      	str	r3, [r4, #16]
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	9a04      	ldr	r2, [sp, #16]
 800c200:	7013      	strb	r3, [r2, #0]
 800c202:	e7bf      	b.n	800c184 <_printf_i+0x154>
 800c204:	6923      	ldr	r3, [r4, #16]
 800c206:	0032      	movs	r2, r6
 800c208:	9906      	ldr	r1, [sp, #24]
 800c20a:	9805      	ldr	r0, [sp, #20]
 800c20c:	9d07      	ldr	r5, [sp, #28]
 800c20e:	47a8      	blx	r5
 800c210:	1c43      	adds	r3, r0, #1
 800c212:	d0c1      	beq.n	800c198 <_printf_i+0x168>
 800c214:	6823      	ldr	r3, [r4, #0]
 800c216:	079b      	lsls	r3, r3, #30
 800c218:	d415      	bmi.n	800c246 <_printf_i+0x216>
 800c21a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c21c:	68e0      	ldr	r0, [r4, #12]
 800c21e:	4298      	cmp	r0, r3
 800c220:	dabc      	bge.n	800c19c <_printf_i+0x16c>
 800c222:	0018      	movs	r0, r3
 800c224:	e7ba      	b.n	800c19c <_printf_i+0x16c>
 800c226:	0022      	movs	r2, r4
 800c228:	2301      	movs	r3, #1
 800c22a:	9906      	ldr	r1, [sp, #24]
 800c22c:	9805      	ldr	r0, [sp, #20]
 800c22e:	9e07      	ldr	r6, [sp, #28]
 800c230:	3219      	adds	r2, #25
 800c232:	47b0      	blx	r6
 800c234:	1c43      	adds	r3, r0, #1
 800c236:	d0af      	beq.n	800c198 <_printf_i+0x168>
 800c238:	3501      	adds	r5, #1
 800c23a:	68e3      	ldr	r3, [r4, #12]
 800c23c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c23e:	1a9b      	subs	r3, r3, r2
 800c240:	42ab      	cmp	r3, r5
 800c242:	dcf0      	bgt.n	800c226 <_printf_i+0x1f6>
 800c244:	e7e9      	b.n	800c21a <_printf_i+0x1ea>
 800c246:	2500      	movs	r5, #0
 800c248:	e7f7      	b.n	800c23a <_printf_i+0x20a>
 800c24a:	46c0      	nop			; (mov r8, r8)
 800c24c:	0800c509 	.word	0x0800c509
 800c250:	0800c51a 	.word	0x0800c51a

0800c254 <__retarget_lock_acquire_recursive>:
 800c254:	4770      	bx	lr

0800c256 <__retarget_lock_release_recursive>:
 800c256:	4770      	bx	lr

0800c258 <memchr>:
 800c258:	b2c9      	uxtb	r1, r1
 800c25a:	1882      	adds	r2, r0, r2
 800c25c:	4290      	cmp	r0, r2
 800c25e:	d101      	bne.n	800c264 <memchr+0xc>
 800c260:	2000      	movs	r0, #0
 800c262:	4770      	bx	lr
 800c264:	7803      	ldrb	r3, [r0, #0]
 800c266:	428b      	cmp	r3, r1
 800c268:	d0fb      	beq.n	800c262 <memchr+0xa>
 800c26a:	3001      	adds	r0, #1
 800c26c:	e7f6      	b.n	800c25c <memchr+0x4>

0800c26e <memcpy>:
 800c26e:	2300      	movs	r3, #0
 800c270:	b510      	push	{r4, lr}
 800c272:	429a      	cmp	r2, r3
 800c274:	d100      	bne.n	800c278 <memcpy+0xa>
 800c276:	bd10      	pop	{r4, pc}
 800c278:	5ccc      	ldrb	r4, [r1, r3]
 800c27a:	54c4      	strb	r4, [r0, r3]
 800c27c:	3301      	adds	r3, #1
 800c27e:	e7f8      	b.n	800c272 <memcpy+0x4>

0800c280 <memmove>:
 800c280:	b510      	push	{r4, lr}
 800c282:	4288      	cmp	r0, r1
 800c284:	d902      	bls.n	800c28c <memmove+0xc>
 800c286:	188b      	adds	r3, r1, r2
 800c288:	4298      	cmp	r0, r3
 800c28a:	d303      	bcc.n	800c294 <memmove+0x14>
 800c28c:	2300      	movs	r3, #0
 800c28e:	e007      	b.n	800c2a0 <memmove+0x20>
 800c290:	5c8b      	ldrb	r3, [r1, r2]
 800c292:	5483      	strb	r3, [r0, r2]
 800c294:	3a01      	subs	r2, #1
 800c296:	d2fb      	bcs.n	800c290 <memmove+0x10>
 800c298:	bd10      	pop	{r4, pc}
 800c29a:	5ccc      	ldrb	r4, [r1, r3]
 800c29c:	54c4      	strb	r4, [r0, r3]
 800c29e:	3301      	adds	r3, #1
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d1fa      	bne.n	800c29a <memmove+0x1a>
 800c2a4:	e7f8      	b.n	800c298 <memmove+0x18>

0800c2a6 <_realloc_r>:
 800c2a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2a8:	0007      	movs	r7, r0
 800c2aa:	000d      	movs	r5, r1
 800c2ac:	0016      	movs	r6, r2
 800c2ae:	2900      	cmp	r1, #0
 800c2b0:	d105      	bne.n	800c2be <_realloc_r+0x18>
 800c2b2:	0011      	movs	r1, r2
 800c2b4:	f7ff fc4a 	bl	800bb4c <_malloc_r>
 800c2b8:	0004      	movs	r4, r0
 800c2ba:	0020      	movs	r0, r4
 800c2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2be:	2a00      	cmp	r2, #0
 800c2c0:	d103      	bne.n	800c2ca <_realloc_r+0x24>
 800c2c2:	f7ff fbf9 	bl	800bab8 <_free_r>
 800c2c6:	0034      	movs	r4, r6
 800c2c8:	e7f7      	b.n	800c2ba <_realloc_r+0x14>
 800c2ca:	f000 f812 	bl	800c2f2 <_malloc_usable_size_r>
 800c2ce:	002c      	movs	r4, r5
 800c2d0:	42b0      	cmp	r0, r6
 800c2d2:	d2f2      	bcs.n	800c2ba <_realloc_r+0x14>
 800c2d4:	0031      	movs	r1, r6
 800c2d6:	0038      	movs	r0, r7
 800c2d8:	f7ff fc38 	bl	800bb4c <_malloc_r>
 800c2dc:	1e04      	subs	r4, r0, #0
 800c2de:	d0ec      	beq.n	800c2ba <_realloc_r+0x14>
 800c2e0:	0029      	movs	r1, r5
 800c2e2:	0032      	movs	r2, r6
 800c2e4:	f7ff ffc3 	bl	800c26e <memcpy>
 800c2e8:	0029      	movs	r1, r5
 800c2ea:	0038      	movs	r0, r7
 800c2ec:	f7ff fbe4 	bl	800bab8 <_free_r>
 800c2f0:	e7e3      	b.n	800c2ba <_realloc_r+0x14>

0800c2f2 <_malloc_usable_size_r>:
 800c2f2:	1f0b      	subs	r3, r1, #4
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	1f18      	subs	r0, r3, #4
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	da01      	bge.n	800c300 <_malloc_usable_size_r+0xe>
 800c2fc:	580b      	ldr	r3, [r1, r0]
 800c2fe:	18c0      	adds	r0, r0, r3
 800c300:	4770      	bx	lr
	...

0800c304 <_init>:
 800c304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c306:	46c0      	nop			; (mov r8, r8)
 800c308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c30a:	bc08      	pop	{r3}
 800c30c:	469e      	mov	lr, r3
 800c30e:	4770      	bx	lr

0800c310 <_fini>:
 800c310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c312:	46c0      	nop			; (mov r8, r8)
 800c314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c316:	bc08      	pop	{r3}
 800c318:	469e      	mov	lr, r3
 800c31a:	4770      	bx	lr
