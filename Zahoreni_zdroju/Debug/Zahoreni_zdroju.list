
Zahoreni_zdroju.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1dc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  0800e29c  0800e29c  0001e29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e614  0800e614  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800e614  0800e614  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e614  0800e614  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e614  0800e614  0001e614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e618  0800e618  0001e618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e61c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016b0  200001e0  0800e7fc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001890  0800e7fc  00021890  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ecc8  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a5b  00000000  00000000  0003eed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  00043930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b8  00000000  00000000  000450e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000204e1  00000000  00000000  00046698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002140b  00000000  00000000  00066b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4798  00000000  00000000  00087f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012c71c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057d0  00000000  00000000  0012c76c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e284 	.word	0x0800e284

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800e284 	.word	0x0800e284

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <comHandler>:
 *
 * Při přijmutí instrukce nedochází k zpracování, ale pouze k nastavení adekvátního flagu.
 * Vykonání instrukce musí být zařízeno v jiné části hlavního programu.
 */
void comHandler(void)
{
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	b0ab      	sub	sp, #172	; 0xac
 800041c:	af00      	add	r7, sp, #0
	//___Ošetření plného bufferu___//
	if(USB_Rx_Buffer->status == BUFFER_FULL)
 800041e:	4bdb      	ldr	r3, [pc, #876]	; (800078c <comHandler+0x374>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	7d1b      	ldrb	r3, [r3, #20]
 8000424:	2b02      	cmp	r3, #2
 8000426:	d109      	bne.n	800043c <comHandler+0x24>
	{
		flags.data_received = 0;
 8000428:	4bd9      	ldr	r3, [pc, #868]	; (8000790 <comHandler+0x378>)
 800042a:	7a1a      	ldrb	r2, [r3, #8]
 800042c:	2101      	movs	r1, #1
 800042e:	438a      	bics	r2, r1
 8000430:	721a      	strb	r2, [r3, #8]
		clearBuffer(USB_Rx_Buffer);
 8000432:	4bd6      	ldr	r3, [pc, #856]	; (800078c <comHandler+0x374>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	0018      	movs	r0, r3
 8000438:	f002 f8f8 	bl	800262c <clearBuffer>
	}

	//___Příjem dat___//
	//if(flags.data_received)
	//{
		int start = 0;	//flag o nalezení počátku paketu
 800043c:	2300      	movs	r3, #0
 800043e:	2294      	movs	r2, #148	; 0x94
 8000440:	18ba      	adds	r2, r7, r2
 8000442:	6013      	str	r3, [r2, #0]

		for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 8000444:	2300      	movs	r3, #0
 8000446:	2280      	movs	r2, #128	; 0x80
 8000448:	2118      	movs	r1, #24
 800044a:	1852      	adds	r2, r2, r1
 800044c:	19d2      	adds	r2, r2, r7
 800044e:	6013      	str	r3, [r2, #0]
 8000450:	e05e      	b.n	8000510 <comHandler+0xf8>
		{
			//Přečti znaky na pozici i a i+1
			char tmp1, tmp2;
			at(USB_Rx_Buffer, i, &tmp1);
 8000452:	4bce      	ldr	r3, [pc, #824]	; (800078c <comHandler+0x374>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	2467      	movs	r4, #103	; 0x67
 8000458:	2218      	movs	r2, #24
 800045a:	18a2      	adds	r2, r4, r2
 800045c:	19d2      	adds	r2, r2, r7
 800045e:	2180      	movs	r1, #128	; 0x80
 8000460:	2018      	movs	r0, #24
 8000462:	1809      	adds	r1, r1, r0
 8000464:	19c8      	adds	r0, r1, r7
 8000466:	6801      	ldr	r1, [r0, #0]
 8000468:	0018      	movs	r0, r3
 800046a:	f002 f987 	bl	800277c <at>
			at(USB_Rx_Buffer, i+1, &tmp2);
 800046e:	4bc7      	ldr	r3, [pc, #796]	; (800078c <comHandler+0x374>)
 8000470:	6818      	ldr	r0, [r3, #0]
 8000472:	2180      	movs	r1, #128	; 0x80
 8000474:	2318      	movs	r3, #24
 8000476:	18cb      	adds	r3, r1, r3
 8000478:	19db      	adds	r3, r3, r7
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	3301      	adds	r3, #1
 800047e:	2266      	movs	r2, #102	; 0x66
 8000480:	2118      	movs	r1, #24
 8000482:	1852      	adds	r2, r2, r1
 8000484:	19d2      	adds	r2, r2, r7
 8000486:	0019      	movs	r1, r3
 8000488:	f002 f978 	bl	800277c <at>

			if(tmp1 == '>' && tmp1 == '>')	//začátek paketu
 800048c:	2318      	movs	r3, #24
 800048e:	18e3      	adds	r3, r4, r3
 8000490:	19db      	adds	r3, r3, r7
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b3e      	cmp	r3, #62	; 0x3e
 8000496:	d131      	bne.n	80004fc <comHandler+0xe4>
 8000498:	2318      	movs	r3, #24
 800049a:	18e3      	adds	r3, r4, r3
 800049c:	19db      	adds	r3, r3, r7
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b3e      	cmp	r3, #62	; 0x3e
 80004a2:	d12b      	bne.n	80004fc <comHandler+0xe4>
			{
				for(int y = 0; y < i; y++)	//vymazání obsahu buuferu před začátkem paketu (neplatná data)
 80004a4:	2300      	movs	r3, #0
 80004a6:	2284      	movs	r2, #132	; 0x84
 80004a8:	2118      	movs	r1, #24
 80004aa:	1852      	adds	r2, r2, r1
 80004ac:	19d2      	adds	r2, r2, r7
 80004ae:	6013      	str	r3, [r2, #0]
 80004b0:	e013      	b.n	80004da <comHandler+0xc2>
				{
					char tmp;
					pop(USB_Rx_Buffer, &tmp);
 80004b2:	4bb6      	ldr	r3, [pc, #728]	; (800078c <comHandler+0x374>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	2265      	movs	r2, #101	; 0x65
 80004b8:	2118      	movs	r1, #24
 80004ba:	1852      	adds	r2, r2, r1
 80004bc:	19d2      	adds	r2, r2, r7
 80004be:	0011      	movs	r1, r2
 80004c0:	0018      	movs	r0, r3
 80004c2:	f002 f928 	bl	8002716 <pop>
				for(int y = 0; y < i; y++)	//vymazání obsahu buuferu před začátkem paketu (neplatná data)
 80004c6:	2284      	movs	r2, #132	; 0x84
 80004c8:	2318      	movs	r3, #24
 80004ca:	18d3      	adds	r3, r2, r3
 80004cc:	19db      	adds	r3, r3, r7
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	3301      	adds	r3, #1
 80004d2:	2118      	movs	r1, #24
 80004d4:	1852      	adds	r2, r2, r1
 80004d6:	19d2      	adds	r2, r2, r7
 80004d8:	6013      	str	r3, [r2, #0]
 80004da:	2384      	movs	r3, #132	; 0x84
 80004dc:	2218      	movs	r2, #24
 80004de:	189b      	adds	r3, r3, r2
 80004e0:	19db      	adds	r3, r3, r7
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	2118      	movs	r1, #24
 80004e8:	185b      	adds	r3, r3, r1
 80004ea:	19db      	adds	r3, r3, r7
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	dbdf      	blt.n	80004b2 <comHandler+0x9a>
				}
				start = 1;	//nastav flag o nalezení počátku
 80004f2:	2301      	movs	r3, #1
 80004f4:	2294      	movs	r2, #148	; 0x94
 80004f6:	18ba      	adds	r2, r7, r2
 80004f8:	6013      	str	r3, [r2, #0]
 80004fa:	e013      	b.n	8000524 <comHandler+0x10c>
		for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 80004fc:	2280      	movs	r2, #128	; 0x80
 80004fe:	2318      	movs	r3, #24
 8000500:	18d3      	adds	r3, r2, r3
 8000502:	19db      	adds	r3, r3, r7
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	3301      	adds	r3, #1
 8000508:	2118      	movs	r1, #24
 800050a:	1852      	adds	r2, r2, r1
 800050c:	19d2      	adds	r2, r2, r7
 800050e:	6013      	str	r3, [r2, #0]
 8000510:	4b9e      	ldr	r3, [pc, #632]	; (800078c <comHandler+0x374>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	689b      	ldr	r3, [r3, #8]
 8000516:	2280      	movs	r2, #128	; 0x80
 8000518:	2118      	movs	r1, #24
 800051a:	1852      	adds	r2, r2, r1
 800051c:	19d2      	adds	r2, r2, r7
 800051e:	6812      	ldr	r2, [r2, #0]
 8000520:	429a      	cmp	r2, r3
 8000522:	db96      	blt.n	8000452 <comHandler+0x3a>
				break;
			}
		}

		if(start)	//počátek byl nalezen
 8000524:	2394      	movs	r3, #148	; 0x94
 8000526:	18fb      	adds	r3, r7, r3
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d100      	bne.n	8000530 <comHandler+0x118>
 800052e:	e097      	b.n	8000660 <comHandler+0x248>
		{
			for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 8000530:	2300      	movs	r3, #0
 8000532:	2288      	movs	r2, #136	; 0x88
 8000534:	2118      	movs	r1, #24
 8000536:	1852      	adds	r2, r2, r1
 8000538:	19d2      	adds	r2, r2, r7
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	e080      	b.n	8000640 <comHandler+0x228>
			{
				//Přečti znaky na pozici i a i+1
				char tmp1, tmp2;
				at(USB_Rx_Buffer, i, &tmp1);
 800053e:	4b93      	ldr	r3, [pc, #588]	; (800078c <comHandler+0x374>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2464      	movs	r4, #100	; 0x64
 8000544:	2218      	movs	r2, #24
 8000546:	18a2      	adds	r2, r4, r2
 8000548:	19d2      	adds	r2, r2, r7
 800054a:	2188      	movs	r1, #136	; 0x88
 800054c:	2018      	movs	r0, #24
 800054e:	1809      	adds	r1, r1, r0
 8000550:	19c8      	adds	r0, r1, r7
 8000552:	6801      	ldr	r1, [r0, #0]
 8000554:	0018      	movs	r0, r3
 8000556:	f002 f911 	bl	800277c <at>
				at(USB_Rx_Buffer, i+1, &tmp2);
 800055a:	4b8c      	ldr	r3, [pc, #560]	; (800078c <comHandler+0x374>)
 800055c:	6818      	ldr	r0, [r3, #0]
 800055e:	2188      	movs	r1, #136	; 0x88
 8000560:	2318      	movs	r3, #24
 8000562:	18cb      	adds	r3, r1, r3
 8000564:	19db      	adds	r3, r3, r7
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	3301      	adds	r3, #1
 800056a:	2263      	movs	r2, #99	; 0x63
 800056c:	2118      	movs	r1, #24
 800056e:	1852      	adds	r2, r2, r1
 8000570:	19d2      	adds	r2, r2, r7
 8000572:	0019      	movs	r1, r3
 8000574:	f002 f902 	bl	800277c <at>

				if(tmp1 == '<' && tmp1 == '<')	//konec paketu
 8000578:	2318      	movs	r3, #24
 800057a:	18e3      	adds	r3, r4, r3
 800057c:	19db      	adds	r3, r3, r7
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b3c      	cmp	r3, #60	; 0x3c
 8000582:	d153      	bne.n	800062c <comHandler+0x214>
 8000584:	2318      	movs	r3, #24
 8000586:	18e3      	adds	r3, r4, r3
 8000588:	19db      	adds	r3, r3, r7
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2b3c      	cmp	r3, #60	; 0x3c
 800058e:	d14d      	bne.n	800062c <comHandler+0x214>
				{
					uint8_t* tmp = (uint8_t*)malloc((i+2)*sizeof(uint8_t));
 8000590:	2188      	movs	r1, #136	; 0x88
 8000592:	2318      	movs	r3, #24
 8000594:	18cb      	adds	r3, r1, r3
 8000596:	19db      	adds	r3, r3, r7
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	3302      	adds	r3, #2
 800059c:	0018      	movs	r0, r3
 800059e:	f00d f9eb 	bl	800d978 <malloc>
 80005a2:	0003      	movs	r3, r0
 80005a4:	228c      	movs	r2, #140	; 0x8c
 80005a6:	18ba      	adds	r2, r7, r2
 80005a8:	6013      	str	r3, [r2, #0]
					for(int y = 0; y < i+2; y++)	//překopírování zprávy
 80005aa:	2300      	movs	r3, #0
 80005ac:	228c      	movs	r2, #140	; 0x8c
 80005ae:	2118      	movs	r1, #24
 80005b0:	1852      	adds	r2, r2, r1
 80005b2:	19d2      	adds	r2, r2, r7
 80005b4:	6013      	str	r3, [r2, #0]
 80005b6:	e017      	b.n	80005e8 <comHandler+0x1d0>
					{
						pop(USB_Rx_Buffer, &tmp[y]);
 80005b8:	4b74      	ldr	r3, [pc, #464]	; (800078c <comHandler+0x374>)
 80005ba:	6818      	ldr	r0, [r3, #0]
 80005bc:	248c      	movs	r4, #140	; 0x8c
 80005be:	2318      	movs	r3, #24
 80005c0:	18e3      	adds	r3, r4, r3
 80005c2:	19db      	adds	r3, r3, r7
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	228c      	movs	r2, #140	; 0x8c
 80005c8:	18ba      	adds	r2, r7, r2
 80005ca:	6812      	ldr	r2, [r2, #0]
 80005cc:	18d3      	adds	r3, r2, r3
 80005ce:	0019      	movs	r1, r3
 80005d0:	f002 f8a1 	bl	8002716 <pop>
					for(int y = 0; y < i+2; y++)	//překopírování zprávy
 80005d4:	0022      	movs	r2, r4
 80005d6:	2318      	movs	r3, #24
 80005d8:	18d3      	adds	r3, r2, r3
 80005da:	19db      	adds	r3, r3, r7
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	3301      	adds	r3, #1
 80005e0:	2118      	movs	r1, #24
 80005e2:	1852      	adds	r2, r2, r1
 80005e4:	19d2      	adds	r2, r2, r7
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	2188      	movs	r1, #136	; 0x88
 80005ea:	2318      	movs	r3, #24
 80005ec:	18cb      	adds	r3, r1, r3
 80005ee:	19db      	adds	r3, r3, r7
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	228c      	movs	r2, #140	; 0x8c
 80005f6:	2018      	movs	r0, #24
 80005f8:	1812      	adds	r2, r2, r0
 80005fa:	19d2      	adds	r2, r2, r7
 80005fc:	6812      	ldr	r2, [r2, #0]
 80005fe:	429a      	cmp	r2, r3
 8000600:	ddda      	ble.n	80005b8 <comHandler+0x1a0>
					}

					decodePaket(tmp, i+2);
 8000602:	2318      	movs	r3, #24
 8000604:	18cb      	adds	r3, r1, r3
 8000606:	19db      	adds	r3, r3, r7
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	b2db      	uxtb	r3, r3
 800060c:	3302      	adds	r3, #2
 800060e:	b2da      	uxtb	r2, r3
 8000610:	238c      	movs	r3, #140	; 0x8c
 8000612:	18fb      	adds	r3, r7, r3
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	0011      	movs	r1, r2
 8000618:	0018      	movs	r0, r3
 800061a:	f000 faf7 	bl	8000c0c <decodePaket>
					free(tmp);
 800061e:	238c      	movs	r3, #140	; 0x8c
 8000620:	18fb      	adds	r3, r7, r3
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	0018      	movs	r0, r3
 8000626:	f00d f9b1 	bl	800d98c <free>
					break;
 800062a:	e014      	b.n	8000656 <comHandler+0x23e>
			for(int i = 0; i < USB_Rx_Buffer->filled; i++)	//Projdi celou obsazenou část bufferu
 800062c:	2288      	movs	r2, #136	; 0x88
 800062e:	2318      	movs	r3, #24
 8000630:	18d3      	adds	r3, r2, r3
 8000632:	19db      	adds	r3, r3, r7
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	3301      	adds	r3, #1
 8000638:	2118      	movs	r1, #24
 800063a:	1852      	adds	r2, r2, r1
 800063c:	19d2      	adds	r2, r2, r7
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	4b52      	ldr	r3, [pc, #328]	; (800078c <comHandler+0x374>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	2288      	movs	r2, #136	; 0x88
 8000648:	2118      	movs	r1, #24
 800064a:	1852      	adds	r2, r2, r1
 800064c:	19d2      	adds	r2, r2, r7
 800064e:	6812      	ldr	r2, [r2, #0]
 8000650:	429a      	cmp	r2, r3
 8000652:	da00      	bge.n	8000656 <comHandler+0x23e>
 8000654:	e773      	b.n	800053e <comHandler+0x126>
				}
			}
		//}

		flags.data_received = 0;
 8000656:	4b4e      	ldr	r3, [pc, #312]	; (8000790 <comHandler+0x378>)
 8000658:	7a1a      	ldrb	r2, [r3, #8]
 800065a:	2101      	movs	r1, #1
 800065c:	438a      	bics	r2, r1
 800065e:	721a      	strb	r2, [r3, #8]
	}

	if(flags.testProgress)	//Pokud test pokročil...
 8000660:	4b4b      	ldr	r3, [pc, #300]	; (8000790 <comHandler+0x378>)
 8000662:	7e1b      	ldrb	r3, [r3, #24]
 8000664:	2202      	movs	r2, #2
 8000666:	4013      	ands	r3, r2
 8000668:	b2db      	uxtb	r3, r3
 800066a:	2b00      	cmp	r3, #0
 800066c:	d04f      	beq.n	800070e <comHandler+0x2f6>
	{
		//...zjisti v jaké je fázi...
		char testPhaseChr;
		switch(currentPhase())
 800066e:	f002 fb9b 	bl	8002da8 <currentPhase>
 8000672:	0003      	movs	r3, r0
 8000674:	2b06      	cmp	r3, #6
 8000676:	d82e      	bhi.n	80006d6 <comHandler+0x2be>
 8000678:	009a      	lsls	r2, r3, #2
 800067a:	4b46      	ldr	r3, [pc, #280]	; (8000794 <comHandler+0x37c>)
 800067c:	18d3      	adds	r3, r2, r3
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	469f      	mov	pc, r3
		{
		case START:
			testPhaseChr = 's';
 8000682:	2362      	movs	r3, #98	; 0x62
 8000684:	2218      	movs	r2, #24
 8000686:	189b      	adds	r3, r3, r2
 8000688:	19db      	adds	r3, r3, r7
 800068a:	2273      	movs	r2, #115	; 0x73
 800068c:	701a      	strb	r2, [r3, #0]
			break;
 800068e:	e029      	b.n	80006e4 <comHandler+0x2cc>
		case START_DONE:
			testPhaseChr = 's';
 8000690:	2362      	movs	r3, #98	; 0x62
 8000692:	2218      	movs	r2, #24
 8000694:	189b      	adds	r3, r3, r2
 8000696:	19db      	adds	r3, r3, r7
 8000698:	2273      	movs	r2, #115	; 0x73
 800069a:	701a      	strb	r2, [r3, #0]
			break;
 800069c:	e022      	b.n	80006e4 <comHandler+0x2cc>
		case MAIN_TEST:
			testPhaseChr = 'm';
 800069e:	2362      	movs	r3, #98	; 0x62
 80006a0:	2218      	movs	r2, #24
 80006a2:	189b      	adds	r3, r3, r2
 80006a4:	19db      	adds	r3, r3, r7
 80006a6:	226d      	movs	r2, #109	; 0x6d
 80006a8:	701a      	strb	r2, [r3, #0]
			break;
 80006aa:	e01b      	b.n	80006e4 <comHandler+0x2cc>
		case MAIN_TEST_DONE:
			testPhaseChr = 'm';
 80006ac:	2362      	movs	r3, #98	; 0x62
 80006ae:	2218      	movs	r2, #24
 80006b0:	189b      	adds	r3, r3, r2
 80006b2:	19db      	adds	r3, r3, r7
 80006b4:	226d      	movs	r2, #109	; 0x6d
 80006b6:	701a      	strb	r2, [r3, #0]
			break;
 80006b8:	e014      	b.n	80006e4 <comHandler+0x2cc>
		case BATTERY_TEST:
			testPhaseChr = 'b';
 80006ba:	2362      	movs	r3, #98	; 0x62
 80006bc:	2218      	movs	r2, #24
 80006be:	189b      	adds	r3, r3, r2
 80006c0:	19db      	adds	r3, r3, r7
 80006c2:	2262      	movs	r2, #98	; 0x62
 80006c4:	701a      	strb	r2, [r3, #0]
			break;
 80006c6:	e00d      	b.n	80006e4 <comHandler+0x2cc>
		case BATTERY_TEST_DONE:
			testPhaseChr = 'M';
 80006c8:	2362      	movs	r3, #98	; 0x62
 80006ca:	2218      	movs	r2, #24
 80006cc:	189b      	adds	r3, r3, r2
 80006ce:	19db      	adds	r3, r3, r7
 80006d0:	224d      	movs	r2, #77	; 0x4d
 80006d2:	701a      	strb	r2, [r3, #0]
			break;
 80006d4:	e006      	b.n	80006e4 <comHandler+0x2cc>
		default:
			testPhaseChr = 'e';
 80006d6:	2362      	movs	r3, #98	; 0x62
 80006d8:	2218      	movs	r2, #24
 80006da:	189b      	adds	r3, r3, r2
 80006dc:	19db      	adds	r3, r3, r7
 80006de:	2265      	movs	r2, #101	; 0x65
 80006e0:	701a      	strb	r2, [r3, #0]
			break;
 80006e2:	46c0      	nop			; (mov r8, r8)
		}

		//...a upozorni na to PC
		Paket paket;
		fillPaket(&paket, TEST_PHASE_PAKET, &testPhaseChr, 1);
 80006e4:	2362      	movs	r3, #98	; 0x62
 80006e6:	2218      	movs	r2, #24
 80006e8:	189b      	adds	r3, r3, r2
 80006ea:	19da      	adds	r2, r3, r7
 80006ec:	2454      	movs	r4, #84	; 0x54
 80006ee:	2318      	movs	r3, #24
 80006f0:	18e3      	adds	r3, r4, r3
 80006f2:	19d8      	adds	r0, r3, r7
 80006f4:	2301      	movs	r3, #1
 80006f6:	2104      	movs	r1, #4
 80006f8:	f000 f98c 	bl	8000a14 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 80006fc:	4b26      	ldr	r3, [pc, #152]	; (8000798 <comHandler+0x380>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2218      	movs	r2, #24
 8000702:	18a2      	adds	r2, r4, r2
 8000704:	19d2      	adds	r2, r2, r7
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f000 f9c3 	bl	8000a94 <pushPaket>
	}

	if(flags.meas.measComplete)	//Jsou připravena data k odeslání
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <comHandler+0x378>)
 8000710:	7d1b      	ldrb	r3, [r3, #20]
 8000712:	2202      	movs	r2, #2
 8000714:	4013      	ands	r3, r2
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2b00      	cmp	r3, #0
 800071a:	d056      	beq.n	80007ca <comHandler+0x3b2>
	{
		if(!flags.meas.calibMeas)
 800071c:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <comHandler+0x378>)
 800071e:	7d1b      	ldrb	r3, [r3, #20]
 8000720:	2240      	movs	r2, #64	; 0x40
 8000722:	4013      	ands	r3, r2
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d117      	bne.n	800075a <comHandler+0x342>
		{
			//Nejde o kalibrační data -> pošli číslo dat
			Paket paket;
			fillPaket(&paket, TEST_NUM_PAKET, &testNum, 1);
 800072a:	4a1c      	ldr	r2, [pc, #112]	; (800079c <comHandler+0x384>)
 800072c:	243c      	movs	r4, #60	; 0x3c
 800072e:	2318      	movs	r3, #24
 8000730:	18e3      	adds	r3, r4, r3
 8000732:	19d8      	adds	r0, r3, r7
 8000734:	2301      	movs	r3, #1
 8000736:	2103      	movs	r1, #3
 8000738:	f000 f96c 	bl	8000a14 <fillPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 800073c:	4b16      	ldr	r3, [pc, #88]	; (8000798 <comHandler+0x380>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	2218      	movs	r2, #24
 8000742:	18a2      	adds	r2, r4, r2
 8000744:	19d2      	adds	r2, r2, r7
 8000746:	0011      	movs	r1, r2
 8000748:	0018      	movs	r0, r3
 800074a:	f000 f9a3 	bl	8000a94 <pushPaket>
			testNum++;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <comHandler+0x384>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	1c5a      	adds	r2, r3, #1
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <comHandler+0x384>)
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	e004      	b.n	8000764 <comHandler+0x34c>
		}
		else
		{
			flags.meas.calibMeas = 0;
 800075a:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <comHandler+0x378>)
 800075c:	7d1a      	ldrb	r2, [r3, #20]
 800075e:	2140      	movs	r1, #64	; 0x40
 8000760:	438a      	bics	r2, r1
 8000762:	751a      	strb	r2, [r3, #20]
		}

		//___Připrav a odešli paket___//
		makeByteArray();
 8000764:	f000 f92a 	bl	80009bc <makeByteArray>
		Paket paket;
		if(flags.meas.onlyBattery)
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <comHandler+0x378>)
 800076a:	7d1b      	ldrb	r3, [r3, #20]
 800076c:	2220      	movs	r2, #32
 800076e:	4013      	ands	r3, r2
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2b00      	cmp	r3, #0
 8000774:	d016      	beq.n	80007a4 <comHandler+0x38c>
		{
			fillPaket(&paket, DATA_BAT_PAKET, data+12, BAT_DATA_PAKET_LENGHT);
 8000776:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <comHandler+0x388>)
 8000778:	2348      	movs	r3, #72	; 0x48
 800077a:	2118      	movs	r1, #24
 800077c:	185b      	adds	r3, r3, r1
 800077e:	19d8      	adds	r0, r3, r7
 8000780:	2304      	movs	r3, #4
 8000782:	2102      	movs	r1, #2
 8000784:	f000 f946 	bl	8000a14 <fillPaket>
 8000788:	e015      	b.n	80007b6 <comHandler+0x39e>
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	20001168 	.word	0x20001168
 8000790:	20000680 	.word	0x20000680
 8000794:	0800e3c4 	.word	0x0800e3c4
 8000798:	200001fc 	.word	0x200001fc
 800079c:	200006c4 	.word	0x200006c4
 80007a0:	2000020c 	.word	0x2000020c
		}
		else
		{
			fillPaket(&paket, DATA_PAKET, data, DATA_PAKET_LENGHT);
 80007a4:	4a81      	ldr	r2, [pc, #516]	; (80009ac <comHandler+0x594>)
 80007a6:	2348      	movs	r3, #72	; 0x48
 80007a8:	2118      	movs	r1, #24
 80007aa:	185b      	adds	r3, r3, r1
 80007ac:	19d8      	adds	r0, r3, r7
 80007ae:	2310      	movs	r3, #16
 80007b0:	2101      	movs	r1, #1
 80007b2:	f000 f92f 	bl	8000a14 <fillPaket>
		}
		pushPaket(USB_Tx_Buffer, &paket);
 80007b6:	4b7e      	ldr	r3, [pc, #504]	; (80009b0 <comHandler+0x598>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2248      	movs	r2, #72	; 0x48
 80007bc:	2118      	movs	r1, #24
 80007be:	1852      	adds	r2, r2, r1
 80007c0:	19d2      	adds	r2, r2, r7
 80007c2:	0011      	movs	r1, r2
 80007c4:	0018      	movs	r0, r3
 80007c6:	f000 f965 	bl	8000a94 <pushPaket>
	}

#ifdef __APP_COMPATIBILITY__
	//___Odesílání refresh zprávy___//
	if(flags.time.sec)
 80007ca:	4b7a      	ldr	r3, [pc, #488]	; (80009b4 <comHandler+0x59c>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2202      	movs	r2, #2
 80007d0:	4013      	ands	r3, r2
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d011      	beq.n	80007fc <comHandler+0x3e4>
	{
		Paket paket;
		fillPaket(&paket, REFRESH_PAKET, NULL, 0);
 80007d8:	2430      	movs	r4, #48	; 0x30
 80007da:	2318      	movs	r3, #24
 80007dc:	18e3      	adds	r3, r4, r3
 80007de:	19d8      	adds	r0, r3, r7
 80007e0:	2300      	movs	r3, #0
 80007e2:	2200      	movs	r2, #0
 80007e4:	2106      	movs	r1, #6
 80007e6:	f000 f915 	bl	8000a14 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 80007ea:	4b71      	ldr	r3, [pc, #452]	; (80009b0 <comHandler+0x598>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	2218      	movs	r2, #24
 80007f0:	18a2      	adds	r2, r4, r2
 80007f2:	19d2      	adds	r2, r2, r7
 80007f4:	0011      	movs	r1, r2
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 f94c 	bl	8000a94 <pushPaket>
	}
#endif

	//___Upozornění o stavu topení___//
	if(flags.heaterState)
 80007fc:	4b6d      	ldr	r3, [pc, #436]	; (80009b4 <comHandler+0x59c>)
 80007fe:	7e1b      	ldrb	r3, [r3, #24]
 8000800:	2230      	movs	r2, #48	; 0x30
 8000802:	4013      	ands	r3, r2
 8000804:	b2db      	uxtb	r3, r3
 8000806:	2b00      	cmp	r3, #0
 8000808:	d024      	beq.n	8000854 <comHandler+0x43c>
	{
		Paket paket;
		uint8_t data;
		data = flags.heaterState - 1;
 800080a:	4b6a      	ldr	r3, [pc, #424]	; (80009b4 <comHandler+0x59c>)
 800080c:	7e1b      	ldrb	r3, [r3, #24]
 800080e:	069b      	lsls	r3, r3, #26
 8000810:	0f9b      	lsrs	r3, r3, #30
 8000812:	b2db      	uxtb	r3, r3
 8000814:	3b01      	subs	r3, #1
 8000816:	b2da      	uxtb	r2, r3
 8000818:	2123      	movs	r1, #35	; 0x23
 800081a:	2318      	movs	r3, #24
 800081c:	18cb      	adds	r3, r1, r3
 800081e:	19db      	adds	r3, r3, r7
 8000820:	701a      	strb	r2, [r3, #0]
		fillPaket(&paket, HEATER_PAKET, &data, 1);
 8000822:	2318      	movs	r3, #24
 8000824:	18cb      	adds	r3, r1, r3
 8000826:	19da      	adds	r2, r3, r7
 8000828:	2424      	movs	r4, #36	; 0x24
 800082a:	2318      	movs	r3, #24
 800082c:	18e3      	adds	r3, r4, r3
 800082e:	19d8      	adds	r0, r3, r7
 8000830:	2301      	movs	r3, #1
 8000832:	2107      	movs	r1, #7
 8000834:	f000 f8ee 	bl	8000a14 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 8000838:	4b5d      	ldr	r3, [pc, #372]	; (80009b0 <comHandler+0x598>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2218      	movs	r2, #24
 800083e:	18a2      	adds	r2, r4, r2
 8000840:	19d2      	adds	r2, r2, r7
 8000842:	0011      	movs	r1, r2
 8000844:	0018      	movs	r0, r3
 8000846:	f000 f925 	bl	8000a94 <pushPaket>
		flags.heaterState = 0;
 800084a:	4b5a      	ldr	r3, [pc, #360]	; (80009b4 <comHandler+0x59c>)
 800084c:	7e1a      	ldrb	r2, [r3, #24]
 800084e:	2130      	movs	r1, #48	; 0x30
 8000850:	438a      	bics	r2, r1
 8000852:	761a      	strb	r2, [r3, #24]
	}

	if(flags.buttons.butt0_ver)
 8000854:	4b57      	ldr	r3, [pc, #348]	; (80009b4 <comHandler+0x59c>)
 8000856:	791b      	ldrb	r3, [r3, #4]
 8000858:	2202      	movs	r2, #2
 800085a:	4013      	ands	r3, r2
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d011      	beq.n	8000886 <comHandler+0x46e>
	{
		Paket paket;
		fillPaket(&paket, CANCEL_FROM_USER_PAKET, NULL, 0);
 8000862:	2414      	movs	r4, #20
 8000864:	2318      	movs	r3, #24
 8000866:	18e3      	adds	r3, r4, r3
 8000868:	19d8      	adds	r0, r3, r7
 800086a:	2300      	movs	r3, #0
 800086c:	2200      	movs	r2, #0
 800086e:	2108      	movs	r1, #8
 8000870:	f000 f8d0 	bl	8000a14 <fillPaket>
		pushPaket(USB_Tx_Buffer, &paket);
 8000874:	4b4e      	ldr	r3, [pc, #312]	; (80009b0 <comHandler+0x598>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2218      	movs	r2, #24
 800087a:	18a2      	adds	r2, r4, r2
 800087c:	19d2      	adds	r2, r2, r7
 800087e:	0011      	movs	r1, r2
 8000880:	0018      	movs	r0, r3
 8000882:	f000 f907 	bl	8000a94 <pushPaket>
	}

	//___Odesílání dat___//
	//_Ošetření plného bufferu_//
	if(USB_Tx_Buffer->status == BUFFER_FULL)
 8000886:	4b4a      	ldr	r3, [pc, #296]	; (80009b0 <comHandler+0x598>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	7d1b      	ldrb	r3, [r3, #20]
 800088c:	2b02      	cmp	r3, #2
 800088e:	d11c      	bne.n	80008ca <comHandler+0x4b2>
	{
		flags.ui.shortBeep = 1;
 8000890:	4b48      	ldr	r3, [pc, #288]	; (80009b4 <comHandler+0x59c>)
 8000892:	7c1a      	ldrb	r2, [r3, #16]
 8000894:	2101      	movs	r1, #1
 8000896:	430a      	orrs	r2, r1
 8000898:	741a      	strb	r2, [r3, #16]
		char msg[] = {"Buffer full\n"};
 800089a:	231c      	movs	r3, #28
 800089c:	18fb      	adds	r3, r7, r3
 800089e:	4a46      	ldr	r2, [pc, #280]	; (80009b8 <comHandler+0x5a0>)
 80008a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008a2:	c313      	stmia	r3!, {r0, r1, r4}
 80008a4:	7812      	ldrb	r2, [r2, #0]
 80008a6:	701a      	strb	r2, [r3, #0]
		CDC_Transmit_FS(msg, strlen(msg));
 80008a8:	231c      	movs	r3, #28
 80008aa:	18fb      	adds	r3, r7, r3
 80008ac:	0018      	movs	r0, r3
 80008ae:	f7ff fc2b 	bl	8000108 <strlen>
 80008b2:	0002      	movs	r2, r0
 80008b4:	231c      	movs	r3, #28
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	0011      	movs	r1, r2
 80008ba:	0018      	movs	r0, r3
 80008bc:	f00c fb76 	bl	800cfac <CDC_Transmit_FS>
		clearBuffer(USB_Tx_Buffer);
 80008c0:	4b3b      	ldr	r3, [pc, #236]	; (80009b0 <comHandler+0x598>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	0018      	movs	r0, r3
 80008c6:	f001 feb1 	bl	800262c <clearBuffer>
	}
	//_Samotné odesílání_//
	if(USB_Tx_Buffer->filled)
 80008ca:	4b39      	ldr	r3, [pc, #228]	; (80009b0 <comHandler+0x598>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d066      	beq.n	80009a2 <comHandler+0x58a>
	{
 80008d4:	466b      	mov	r3, sp
 80008d6:	001c      	movs	r4, r3
		int size = USB_Tx_Buffer->filled;
 80008d8:	4b35      	ldr	r3, [pc, #212]	; (80009b0 <comHandler+0x598>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	2288      	movs	r2, #136	; 0x88
 80008e0:	18ba      	adds	r2, r7, r2
 80008e2:	6013      	str	r3, [r2, #0]
		char tmpStr[size];
 80008e4:	2388      	movs	r3, #136	; 0x88
 80008e6:	18fb      	adds	r3, r7, r3
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	1e5a      	subs	r2, r3, #1
 80008ec:	2184      	movs	r1, #132	; 0x84
 80008ee:	1879      	adds	r1, r7, r1
 80008f0:	600a      	str	r2, [r1, #0]
 80008f2:	001a      	movs	r2, r3
 80008f4:	0015      	movs	r5, r2
 80008f6:	2200      	movs	r2, #0
 80008f8:	0016      	movs	r6, r2
 80008fa:	0028      	movs	r0, r5
 80008fc:	0031      	movs	r1, r6
 80008fe:	0002      	movs	r2, r0
 8000900:	0f52      	lsrs	r2, r2, #29
 8000902:	000d      	movs	r5, r1
 8000904:	00ed      	lsls	r5, r5, #3
 8000906:	617d      	str	r5, [r7, #20]
 8000908:	697d      	ldr	r5, [r7, #20]
 800090a:	4315      	orrs	r5, r2
 800090c:	617d      	str	r5, [r7, #20]
 800090e:	0002      	movs	r2, r0
 8000910:	00d2      	lsls	r2, r2, #3
 8000912:	613a      	str	r2, [r7, #16]
 8000914:	001a      	movs	r2, r3
 8000916:	603a      	str	r2, [r7, #0]
 8000918:	2200      	movs	r2, #0
 800091a:	607a      	str	r2, [r7, #4]
 800091c:	6838      	ldr	r0, [r7, #0]
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	0002      	movs	r2, r0
 8000922:	0f52      	lsrs	r2, r2, #29
 8000924:	000d      	movs	r5, r1
 8000926:	00ed      	lsls	r5, r5, #3
 8000928:	60fd      	str	r5, [r7, #12]
 800092a:	68fd      	ldr	r5, [r7, #12]
 800092c:	4315      	orrs	r5, r2
 800092e:	60fd      	str	r5, [r7, #12]
 8000930:	0002      	movs	r2, r0
 8000932:	00d2      	lsls	r2, r2, #3
 8000934:	60ba      	str	r2, [r7, #8]
 8000936:	3307      	adds	r3, #7
 8000938:	08db      	lsrs	r3, r3, #3
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	466a      	mov	r2, sp
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	469d      	mov	sp, r3
 8000942:	466b      	mov	r3, sp
 8000944:	3300      	adds	r3, #0
 8000946:	2280      	movs	r2, #128	; 0x80
 8000948:	18ba      	adds	r2, r7, r2
 800094a:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < size; i++)
 800094c:	2300      	movs	r3, #0
 800094e:	2290      	movs	r2, #144	; 0x90
 8000950:	18ba      	adds	r2, r7, r2
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	e012      	b.n	800097c <comHandler+0x564>
		{
			pop(USB_Tx_Buffer, &tmpStr[i]);
 8000956:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <comHandler+0x598>)
 8000958:	6818      	ldr	r0, [r3, #0]
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	18fb      	adds	r3, r7, r3
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	2390      	movs	r3, #144	; 0x90
 8000962:	18fb      	adds	r3, r7, r3
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	18d3      	adds	r3, r2, r3
 8000968:	0019      	movs	r1, r3
 800096a:	f001 fed4 	bl	8002716 <pop>
		for(int i = 0; i < size; i++)
 800096e:	2390      	movs	r3, #144	; 0x90
 8000970:	18fb      	adds	r3, r7, r3
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	3301      	adds	r3, #1
 8000976:	2290      	movs	r2, #144	; 0x90
 8000978:	18ba      	adds	r2, r7, r2
 800097a:	6013      	str	r3, [r2, #0]
 800097c:	2390      	movs	r3, #144	; 0x90
 800097e:	18fb      	adds	r3, r7, r3
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	2388      	movs	r3, #136	; 0x88
 8000984:	18fb      	adds	r3, r7, r3
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	429a      	cmp	r2, r3
 800098a:	dbe4      	blt.n	8000956 <comHandler+0x53e>
		}
		CDC_Transmit_FS(tmpStr, size);
 800098c:	2388      	movs	r3, #136	; 0x88
 800098e:	18fb      	adds	r3, r7, r3
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	2380      	movs	r3, #128	; 0x80
 8000994:	18fb      	adds	r3, r7, r3
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	0011      	movs	r1, r2
 800099a:	0018      	movs	r0, r3
 800099c:	f00c fb06 	bl	800cfac <CDC_Transmit_FS>
 80009a0:	46a5      	mov	sp, r4
	}

}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b02b      	add	sp, #172	; 0xac
 80009a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	20000200 	.word	0x20000200
 80009b0:	200001fc 	.word	0x200001fc
 80009b4:	20000680 	.word	0x20000680
 80009b8:	0800e29c 	.word	0x0800e29c

080009bc <makeByteArray>:

//_____Zpracuje ADC_Results do pole data_____//
static void makeByteArray()
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++)
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	e018      	b.n	80009fa <makeByteArray+0x3e>
	{
		data[2*i] = MaskByte(ADC_Results[2*i], 1);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	005a      	lsls	r2, r3, #1
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <makeByteArray+0x50>)
 80009ce:	0092      	lsls	r2, r2, #2
 80009d0:	58d3      	ldr	r3, [r2, r3]
 80009d2:	0a1a      	lsrs	r2, r3, #8
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	b2d1      	uxtb	r1, r2
 80009da:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <makeByteArray+0x54>)
 80009dc:	54d1      	strb	r1, [r2, r3]
		data[2*i+1] = MaskByte(ADC_Results[2*i], 0);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	005a      	lsls	r2, r3, #1
 80009e2:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <makeByteArray+0x50>)
 80009e4:	0092      	lsls	r2, r2, #2
 80009e6:	58d2      	ldr	r2, [r2, r3]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	3301      	adds	r3, #1
 80009ee:	b2d1      	uxtb	r1, r2
 80009f0:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <makeByteArray+0x54>)
 80009f2:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i < 8; i++)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3301      	adds	r3, #1
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2b07      	cmp	r3, #7
 80009fe:	dde3      	ble.n	80009c8 <makeByteArray+0xc>
	}
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	b002      	add	sp, #8
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	2000062c 	.word	0x2000062c
 8000a10:	20000200 	.word	0x20000200

08000a14 <fillPaket>:

//_____Vytvoří strukturu Paket z dat v argumentech_____//
static void fillPaket(Paket* paket, outPaketType type, uint8_t* data, uint8_t dataLength)
{
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b087      	sub	sp, #28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	0008      	movs	r0, r1
 8000a1e:	607a      	str	r2, [r7, #4]
 8000a20:	0019      	movs	r1, r3
 8000a22:	240b      	movs	r4, #11
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	1c02      	adds	r2, r0, #0
 8000a28:	701a      	strb	r2, [r3, #0]
 8000a2a:	200a      	movs	r0, #10
 8000a2c:	183b      	adds	r3, r7, r0
 8000a2e:	1c0a      	adds	r2, r1, #0
 8000a30:	701a      	strb	r2, [r3, #0]
	paket->type = type;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	0021      	movs	r1, r4
 8000a36:	187a      	adds	r2, r7, r1
 8000a38:	7812      	ldrb	r2, [r2, #0]
 8000a3a:	701a      	strb	r2, [r3, #0]
	paket->data = data;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	605a      	str	r2, [r3, #4]
	paket->dataLength = dataLength;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	183a      	adds	r2, r7, r0
 8000a46:	7812      	ldrb	r2, [r2, #0]
 8000a48:	721a      	strb	r2, [r3, #8]
	uint8_t CA = type;
 8000a4a:	2317      	movs	r3, #23
 8000a4c:	18fb      	adds	r3, r7, r3
 8000a4e:	187a      	adds	r2, r7, r1
 8000a50:	7812      	ldrb	r2, [r2, #0]
 8000a52:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataLength; i++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	e00c      	b.n	8000a74 <fillPaket+0x60>
		CA += data[i];
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	18d3      	adds	r3, r2, r3
 8000a60:	7819      	ldrb	r1, [r3, #0]
 8000a62:	2217      	movs	r2, #23
 8000a64:	18bb      	adds	r3, r7, r2
 8000a66:	18ba      	adds	r2, r7, r2
 8000a68:	7812      	ldrb	r2, [r2, #0]
 8000a6a:	188a      	adds	r2, r1, r2
 8000a6c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < dataLength; i++)
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	3301      	adds	r3, #1
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	230a      	movs	r3, #10
 8000a76:	18fb      	adds	r3, r7, r3
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	dbec      	blt.n	8000a5a <fillPaket+0x46>
	paket->CA_value = CA;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	2217      	movs	r2, #23
 8000a84:	18ba      	adds	r2, r7, r2
 8000a86:	7812      	ldrb	r2, [r2, #0]
 8000a88:	725a      	strb	r2, [r3, #9]
}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b007      	add	sp, #28
 8000a90:	bd90      	pop	{r4, r7, pc}
	...

08000a94 <pushPaket>:

//_____Vloží do bufferu řetězec odpovídající sestavenému paketu_____//
static void pushPaket(RING_BUFFER* buffer, Paket* paket)
{
 8000a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a96:	46c6      	mov	lr, r8
 8000a98:	b500      	push	{lr}
 8000a9a:	b096      	sub	sp, #88	; 0x58
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000aa0:	63b9      	str	r1, [r7, #56]	; 0x38
 8000aa2:	466b      	mov	r3, sp
 8000aa4:	4698      	mov	r8, r3
	uint8_t msg[paket->dataLength + 2];
 8000aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aa8:	7a1b      	ldrb	r3, [r3, #8]
 8000aaa:	1c9a      	adds	r2, r3, #2
 8000aac:	1e53      	subs	r3, r2, #1
 8000aae:	657b      	str	r3, [r7, #84]	; 0x54
 8000ab0:	0013      	movs	r3, r2
 8000ab2:	61bb      	str	r3, [r7, #24]
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
 8000ab8:	69b8      	ldr	r0, [r7, #24]
 8000aba:	69f9      	ldr	r1, [r7, #28]
 8000abc:	0003      	movs	r3, r0
 8000abe:	0f5b      	lsrs	r3, r3, #29
 8000ac0:	000e      	movs	r6, r1
 8000ac2:	00f5      	lsls	r5, r6, #3
 8000ac4:	431d      	orrs	r5, r3
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	00dc      	lsls	r4, r3, #3
 8000aca:	0013      	movs	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	6938      	ldr	r0, [r7, #16]
 8000ad4:	6979      	ldr	r1, [r7, #20]
 8000ad6:	0003      	movs	r3, r0
 8000ad8:	0f5b      	lsrs	r3, r3, #29
 8000ada:	000c      	movs	r4, r1
 8000adc:	00e4      	lsls	r4, r4, #3
 8000ade:	637c      	str	r4, [r7, #52]	; 0x34
 8000ae0:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8000ae2:	431c      	orrs	r4, r3
 8000ae4:	637c      	str	r4, [r7, #52]	; 0x34
 8000ae6:	0003      	movs	r3, r0
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	633b      	str	r3, [r7, #48]	; 0x30
 8000aec:	0013      	movs	r3, r2
 8000aee:	3307      	adds	r3, #7
 8000af0:	08db      	lsrs	r3, r3, #3
 8000af2:	00db      	lsls	r3, r3, #3
 8000af4:	466a      	mov	r2, sp
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	469d      	mov	sp, r3
 8000afa:	466b      	mov	r3, sp
 8000afc:	3300      	adds	r3, #0
 8000afe:	653b      	str	r3, [r7, #80]	; 0x50
	msg[0] = paket->type;
 8000b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b02:	781a      	ldrb	r2, [r3, #0]
 8000b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b06:	701a      	strb	r2, [r3, #0]
	memcpy(msg+1, paket->data, paket->dataLength);
 8000b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000b0a:	1c58      	adds	r0, r3, #1
 8000b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b0e:	6859      	ldr	r1, [r3, #4]
 8000b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b12:	7a1b      	ldrb	r3, [r3, #8]
 8000b14:	001a      	movs	r2, r3
 8000b16:	f00c ff43 	bl	800d9a0 <memcpy>
	msg[paket->dataLength+1] = paket->CA_value;
 8000b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b1c:	7a1b      	ldrb	r3, [r3, #8]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b22:	7a51      	ldrb	r1, [r2, #9]
 8000b24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000b26:	54d1      	strb	r1, [r2, r3]
	//msg[paket->dataLength+2] = 0U;

	uint8_t str[] = {">>"};
 8000b28:	200c      	movs	r0, #12
 8000b2a:	2638      	movs	r6, #56	; 0x38
 8000b2c:	1983      	adds	r3, r0, r6
 8000b2e:	19db      	adds	r3, r3, r7
 8000b30:	4a34      	ldr	r2, [pc, #208]	; (8000c04 <pushPaket+0x170>)
 8000b32:	8811      	ldrh	r1, [r2, #0]
 8000b34:	8019      	strh	r1, [r3, #0]
 8000b36:	7892      	ldrb	r2, [r2, #2]
 8000b38:	709a      	strb	r2, [r3, #2]
	uint8_t end[] = {"<<\n"};
 8000b3a:	2508      	movs	r5, #8
 8000b3c:	19ab      	adds	r3, r5, r6
 8000b3e:	19db      	adds	r3, r3, r7
 8000b40:	4a31      	ldr	r2, [pc, #196]	; (8000c08 <pushPaket+0x174>)
 8000b42:	601a      	str	r2, [r3, #0]

	uint8_t toSend[6+paket->dataLength + 2];
 8000b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b46:	7a1b      	ldrb	r3, [r3, #8]
 8000b48:	3308      	adds	r3, #8
 8000b4a:	001c      	movs	r4, r3
 8000b4c:	1e63      	subs	r3, r4, #1
 8000b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b50:	0023      	movs	r3, r4
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	000b      	movs	r3, r1
 8000b5e:	0f5b      	lsrs	r3, r3, #29
 8000b60:	0016      	movs	r6, r2
 8000b62:	00f6      	lsls	r6, r6, #3
 8000b64:	62fe      	str	r6, [r7, #44]	; 0x2c
 8000b66:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8000b68:	431e      	orrs	r6, r3
 8000b6a:	62fe      	str	r6, [r7, #44]	; 0x2c
 8000b6c:	000b      	movs	r3, r1
 8000b6e:	00db      	lsls	r3, r3, #3
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b72:	0023      	movs	r3, r4
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	6839      	ldr	r1, [r7, #0]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	000b      	movs	r3, r1
 8000b80:	0f5b      	lsrs	r3, r3, #29
 8000b82:	0016      	movs	r6, r2
 8000b84:	00f6      	lsls	r6, r6, #3
 8000b86:	627e      	str	r6, [r7, #36]	; 0x24
 8000b88:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8000b8a:	431e      	orrs	r6, r3
 8000b8c:	627e      	str	r6, [r7, #36]	; 0x24
 8000b8e:	000b      	movs	r3, r1
 8000b90:	00db      	lsls	r3, r3, #3
 8000b92:	623b      	str	r3, [r7, #32]
 8000b94:	0023      	movs	r3, r4
 8000b96:	3307      	adds	r3, #7
 8000b98:	08db      	lsrs	r3, r3, #3
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	466a      	mov	r2, sp
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	469d      	mov	sp, r3
 8000ba2:	466b      	mov	r3, sp
 8000ba4:	3300      	adds	r3, #0
 8000ba6:	64bb      	str	r3, [r7, #72]	; 0x48
	//sprintf(toSend, "%s%s%s\n", str, msg, end);	//pro testNum = 0 se vytiskne jen paket->type, jelikož sprintf pak narazí na nulu
	memcpy(toSend, str, 2);
 8000ba8:	2638      	movs	r6, #56	; 0x38
 8000baa:	1983      	adds	r3, r0, r6
 8000bac:	19d9      	adds	r1, r3, r7
 8000bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f00c fef4 	bl	800d9a0 <memcpy>
	memcpy(toSend+2, msg, paket->dataLength + 2);
 8000bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000bba:	1c98      	adds	r0, r3, #2
 8000bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bbe:	7a1b      	ldrb	r3, [r3, #8]
 8000bc0:	3302      	adds	r3, #2
 8000bc2:	001a      	movs	r2, r3
 8000bc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000bc6:	0019      	movs	r1, r3
 8000bc8:	f00c feea 	bl	800d9a0 <memcpy>
	memcpy(toSend+2+paket->dataLength + 2, end, 4);
 8000bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bce:	7a1b      	ldrb	r3, [r3, #8]
 8000bd0:	3304      	adds	r3, #4
 8000bd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000bd4:	18d2      	adds	r2, r2, r3
 8000bd6:	19ab      	adds	r3, r5, r6
 8000bd8:	19db      	adds	r3, r3, r7
 8000bda:	0010      	movs	r0, r2
 8000bdc:	0019      	movs	r1, r3
 8000bde:	2304      	movs	r3, #4
 8000be0:	001a      	movs	r2, r3
 8000be2:	f00c fedd 	bl	800d9a0 <memcpy>
	pushStr(buffer, toSend, sizeof(toSend)-1);
 8000be6:	0023      	movs	r3, r4
 8000be8:	3b01      	subs	r3, #1
 8000bea:	001a      	movs	r2, r3
 8000bec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f001 fd68 	bl	80026c6 <pushStr>
 8000bf6:	46c5      	mov	sp, r8
}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b016      	add	sp, #88	; 0x58
 8000bfe:	bc80      	pop	{r7}
 8000c00:	46b8      	mov	r8, r7
 8000c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c04:	0800e2ac 	.word	0x0800e2ac
 8000c08:	000a3c3c 	.word	0x000a3c3c

08000c0c <decodePaket>:

//_____Příchozí řetězec přepracuje do struktury typu paket (pokud to lze)_____//
static uint8_t decodePaket(/*Paket* paket,*/ uint8_t* data, uint8_t dataLenght)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b089      	sub	sp, #36	; 0x24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	000a      	movs	r2, r1
 8000c16:	1cfb      	adds	r3, r7, #3
 8000c18:	701a      	strb	r2, [r3, #0]
	int sum = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
	for(int i = 2; i < dataLenght - 3; i++)
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
 8000c22:	e00a      	b.n	8000c3a <decodePaket+0x2e>
	{
		sum += data[i];
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	18d3      	adds	r3, r2, r3
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	001a      	movs	r2, r3
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	189b      	adds	r3, r3, r2
 8000c32:	61fb      	str	r3, [r7, #28]
	for(int i = 2; i < dataLenght - 3; i++)
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	3301      	adds	r3, #1
 8000c38:	61bb      	str	r3, [r7, #24]
 8000c3a:	1cfb      	adds	r3, r7, #3
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	3b03      	subs	r3, #3
 8000c40:	69ba      	ldr	r2, [r7, #24]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	dbee      	blt.n	8000c24 <decodePaket+0x18>
	}
	if(sum == data[dataLenght - 3])	//kontorlní součet odpovídá
 8000c46:	1cfb      	adds	r3, r7, #3
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	3b03      	subs	r3, #3
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	18d3      	adds	r3, r2, r3
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	001a      	movs	r2, r3
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d000      	beq.n	8000c5c <decodePaket+0x50>
 8000c5a:	e06a      	b.n	8000d32 <decodePaket+0x126>
	{
		switch(data[2])	//Na třetím místě je instrukce
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3302      	adds	r3, #2
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	3b61      	subs	r3, #97	; 0x61
 8000c64:	2b12      	cmp	r3, #18
 8000c66:	d85e      	bhi.n	8000d26 <decodePaket+0x11a>
 8000c68:	009a      	lsls	r2, r3, #2
 8000c6a:	4b39      	ldr	r3, [pc, #228]	; (8000d50 <decodePaket+0x144>)
 8000c6c:	18d3      	adds	r3, r2, r3
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	469f      	mov	pc, r3
		{
		case 's': ;
			//___Start testu___//
			if(dataLenght == 7)
 8000c72:	1cfb      	adds	r3, r7, #3
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b07      	cmp	r3, #7
 8000c78:	d15d      	bne.n	8000d36 <decodePaket+0x12a>
			{
				flags.instructions.startRequest = 1;
 8000c7a:	4b36      	ldr	r3, [pc, #216]	; (8000d54 <decodePaket+0x148>)
 8000c7c:	7b1a      	ldrb	r2, [r3, #12]
 8000c7e:	2101      	movs	r1, #1
 8000c80:	430a      	orrs	r2, r1
 8000c82:	731a      	strb	r2, [r3, #12]
				supplyToTest = data[3];
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	78da      	ldrb	r2, [r3, #3]
 8000c88:	4b33      	ldr	r3, [pc, #204]	; (8000d58 <decodePaket+0x14c>)
 8000c8a:	701a      	strb	r2, [r3, #0]
				sprintf(txt, "Start\n");
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
				//Na pozici data je ukazatel na testovaný zdroj
			}
			break;
 8000c8c:	e053      	b.n	8000d36 <decodePaket+0x12a>

		case'c': ;
			//___Ukončení___//
		if(dataLenght == 7)
 8000c8e:	1cfb      	adds	r3, r7, #3
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b07      	cmp	r3, #7
 8000c94:	d151      	bne.n	8000d3a <decodePaket+0x12e>
		{
			flags.instructions.stopRequest = 1;
 8000c96:	4b2f      	ldr	r3, [pc, #188]	; (8000d54 <decodePaket+0x148>)
 8000c98:	7b1a      	ldrb	r2, [r3, #12]
 8000c9a:	2102      	movs	r1, #2
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Ukonceni\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000ca0:	e04b      	b.n	8000d3a <decodePaket+0x12e>

		case'p': ;
			//___Pauza___//
		if(dataLenght == 7)
 8000ca2:	1cfb      	adds	r3, r7, #3
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b07      	cmp	r3, #7
 8000ca8:	d149      	bne.n	8000d3e <decodePaket+0x132>
		{
			flags.instructions.pauseRequest = 1;
 8000caa:	4b2a      	ldr	r3, [pc, #168]	; (8000d54 <decodePaket+0x148>)
 8000cac:	7b1a      	ldrb	r2, [r3, #12]
 8000cae:	2104      	movs	r1, #4
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Pauza\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000cb4:	e043      	b.n	8000d3e <decodePaket+0x132>

		case'k': ;
			//___Kalibrace___//
		if(dataLenght == 7)
 8000cb6:	1cfb      	adds	r3, r7, #3
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b07      	cmp	r3, #7
 8000cbc:	d141      	bne.n	8000d42 <decodePaket+0x136>
		{
			if(data[3] == 0)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3303      	adds	r3, #3
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d105      	bne.n	8000cd4 <decodePaket+0xc8>
				flags.instructions.calibRequest = 1;
 8000cc8:	4b22      	ldr	r3, [pc, #136]	; (8000d54 <decodePaket+0x148>)
 8000cca:	7b1a      	ldrb	r2, [r3, #12]
 8000ccc:	2108      	movs	r1, #8
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	731a      	strb	r2, [r3, #12]
			sprintf(txt, "Kalibrace\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			//Na pozici data je ukazatel na testovaný zdroj
		}
			break;
 8000cd2:	e036      	b.n	8000d42 <decodePaket+0x136>
			else if(data[3] == 1)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3303      	adds	r3, #3
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d131      	bne.n	8000d42 <decodePaket+0x136>
				flags.instructions.calibDone = 1;
 8000cde:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <decodePaket+0x148>)
 8000ce0:	7b1a      	ldrb	r2, [r3, #12]
 8000ce2:	2110      	movs	r1, #16
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	731a      	strb	r2, [r3, #12]
			break;
 8000ce8:	e02b      	b.n	8000d42 <decodePaket+0x136>

		case 'a' : ;
			//___Navázání komunikace___//
		if(dataLenght == 7)
 8000cea:	1cfb      	adds	r3, r7, #3
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b07      	cmp	r3, #7
 8000cf0:	d119      	bne.n	8000d26 <decodePaket+0x11a>
		{
			uint8_t data = regCount;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <decodePaket+0x150>)
 8000cf4:	781a      	ldrb	r2, [r3, #0]
 8000cf6:	2117      	movs	r1, #23
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	701a      	strb	r2, [r3, #0]
			Paket paket;
			fillPaket(&paket, ACK_PAKET, &data, 1);
 8000cfc:	187a      	adds	r2, r7, r1
 8000cfe:	2408      	movs	r4, #8
 8000d00:	1938      	adds	r0, r7, r4
 8000d02:	2301      	movs	r3, #1
 8000d04:	2105      	movs	r1, #5
 8000d06:	f7ff fe85 	bl	8000a14 <fillPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 8000d0a:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <decodePaket+0x154>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	193a      	adds	r2, r7, r4
 8000d10:	0011      	movs	r1, r2
 8000d12:	0018      	movs	r0, r3
 8000d14:	f7ff febe 	bl	8000a94 <pushPaket>
			pushPaket(USB_Tx_Buffer, &paket);
 8000d18:	4b11      	ldr	r3, [pc, #68]	; (8000d60 <decodePaket+0x154>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	193a      	adds	r2, r7, r4
 8000d1e:	0011      	movs	r1, r2
 8000d20:	0018      	movs	r0, r3
 8000d22:	f7ff feb7 	bl	8000a94 <pushPaket>
		}

		default: ;
			//___Neplatný příkaz___//
			flags.instructions.unknownInst = 1;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <decodePaket+0x148>)
 8000d28:	7b1a      	ldrb	r2, [r3, #12]
 8000d2a:	2120      	movs	r1, #32
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	731a      	strb	r2, [r3, #12]
#ifdef __DEBUG_INST__
			sprintf(txt, "Neplatna instrukce\n");
			pushStr(USB_Tx_Buffer, txt, strlen(txt));
#endif
			break;
 8000d30:	e008      	b.n	8000d44 <decodePaket+0x138>
		}
	}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	e006      	b.n	8000d44 <decodePaket+0x138>
			break;
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	e004      	b.n	8000d44 <decodePaket+0x138>
			break;
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	e002      	b.n	8000d44 <decodePaket+0x138>
			break;
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	e000      	b.n	8000d44 <decodePaket+0x138>
			break;
 8000d42:	46c0      	nop			; (mov r8, r8)
	return 1;
 8000d44:	2301      	movs	r3, #1
}
 8000d46:	0018      	movs	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b009      	add	sp, #36	; 0x24
 8000d4c:	bd90      	pop	{r4, r7, pc}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	0800e3e0 	.word	0x0800e3e0
 8000d54:	20000680 	.word	0x20000680
 8000d58:	2000069e 	.word	0x2000069e
 8000d5c:	200006b8 	.word	0x200006b8
 8000d60:	200001fc 	.word	0x200001fc

08000d64 <setColour>:
static BACKLIGHT colour;

//_____Rozvítí podsvícení dané argumentem_____//
//-> argument: Barva podsvícení
void setColour(BACKLIGHT colourToSet)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	0002      	movs	r2, r0
 8000d6c:	1dfb      	adds	r3, r7, #7
 8000d6e:	701a      	strb	r2, [r3, #0]
	switch(colourToSet)
 8000d70:	1dfb      	adds	r3, r7, #7
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d033      	beq.n	8000de0 <setColour+0x7c>
 8000d78:	dc49      	bgt.n	8000e0e <setColour+0xaa>
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <setColour+0x20>
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d017      	beq.n	8000db2 <setColour+0x4e>
 8000d82:	e044      	b.n	8000e0e <setColour+0xaa>
	{
	case BACKLIGHT_WHITE:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_SET);
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4830      	ldr	r0, [pc, #192]	; (8000e4c <setColour+0xe8>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	0019      	movs	r1, r3
 8000d8e:	f003 fc92 	bl	80046b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000d92:	2380      	movs	r3, #128	; 0x80
 8000d94:	0219      	lsls	r1, r3, #8
 8000d96:	2390      	movs	r3, #144	; 0x90
 8000d98:	05db      	lsls	r3, r3, #23
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f003 fc8a 	bl	80046b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000da2:	2380      	movs	r3, #128	; 0x80
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	4829      	ldr	r0, [pc, #164]	; (8000e4c <setColour+0xe8>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	0019      	movs	r1, r3
 8000dac:	f003 fc83 	bl	80046b6 <HAL_GPIO_WritePin>
		break;
 8000db0:	e044      	b.n	8000e3c <setColour+0xd8>

	case BACKLIGHT_GREEN:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4825      	ldr	r0, [pc, #148]	; (8000e4c <setColour+0xe8>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	0019      	movs	r1, r3
 8000dbc:	f003 fc7b 	bl	80046b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	0219      	lsls	r1, r3, #8
 8000dc4:	2390      	movs	r3, #144	; 0x90
 8000dc6:	05db      	lsls	r3, r3, #23
 8000dc8:	2200      	movs	r2, #0
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f003 fc73 	bl	80046b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_SET);
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	481d      	ldr	r0, [pc, #116]	; (8000e4c <setColour+0xe8>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	0019      	movs	r1, r3
 8000dda:	f003 fc6c 	bl	80046b6 <HAL_GPIO_WritePin>
		break;
 8000dde:	e02d      	b.n	8000e3c <setColour+0xd8>

	case BACKLIGHT_RED:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	4819      	ldr	r0, [pc, #100]	; (8000e4c <setColour+0xe8>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	0019      	movs	r1, r3
 8000dea:	f003 fc64 	bl	80046b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_SET);
 8000dee:	2380      	movs	r3, #128	; 0x80
 8000df0:	0219      	lsls	r1, r3, #8
 8000df2:	2390      	movs	r3, #144	; 0x90
 8000df4:	05db      	lsls	r3, r3, #23
 8000df6:	2201      	movs	r2, #1
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f003 fc5c 	bl	80046b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	4812      	ldr	r0, [pc, #72]	; (8000e4c <setColour+0xe8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	0019      	movs	r1, r3
 8000e08:	f003 fc55 	bl	80046b6 <HAL_GPIO_WritePin>
		break;
 8000e0c:	e016      	b.n	8000e3c <setColour+0xd8>

	default:
		HAL_GPIO_WritePin(BACKLIGHT_WHITE_GPIO_Port, BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	480e      	ldr	r0, [pc, #56]	; (8000e4c <setColour+0xe8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	0019      	movs	r1, r3
 8000e18:	f003 fc4d 	bl	80046b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	0219      	lsls	r1, r3, #8
 8000e20:	2390      	movs	r3, #144	; 0x90
 8000e22:	05db      	lsls	r3, r3, #23
 8000e24:	2200      	movs	r2, #0
 8000e26:	0018      	movs	r0, r3
 8000e28:	f003 fc45 	bl	80046b6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BACKLIGHT_GREEN_GPIO_Port, BACKLIGHT_GREEN_Pin, GPIO_PIN_RESET);
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	4806      	ldr	r0, [pc, #24]	; (8000e4c <setColour+0xe8>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	0019      	movs	r1, r3
 8000e36:	f003 fc3e 	bl	80046b6 <HAL_GPIO_WritePin>
		break;
 8000e3a:	46c0      	nop			; (mov r8, r8)
	}

	colour = colourToSet;
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <setColour+0xec>)
 8000e3e:	1dfa      	adds	r2, r7, #7
 8000e40:	7812      	ldrb	r2, [r2, #0]
 8000e42:	701a      	strb	r2, [r3, #0]
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	b002      	add	sp, #8
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	48000400 	.word	0x48000400
 8000e50:	20000210 	.word	0x20000210

08000e54 <sendByte>:

//_____Pošle byte dat_____//
//-> argumenty: char - posílaný byte, Start_byte definuje zda jde o instrukci nebo data
// !!! Pracuje v blokujícím módu !!!
static DISP_STATE sendByte(char byte, START_BYTE type)
{
 8000e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	0002      	movs	r2, r0
 8000e5c:	1dfb      	adds	r3, r7, #7
 8000e5e:	701a      	strb	r2, [r3, #0]
 8000e60:	1dbb      	adds	r3, r7, #6
 8000e62:	1c0a      	adds	r2, r1, #0
 8000e64:	701a      	strb	r2, [r3, #0]
		{
			return SPI_ERR;
		}
	}*/
	uint8_t buffer[3];
	switch(type)
 8000e66:	1dbb      	adds	r3, r7, #6
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d002      	beq.n	8000e74 <sendByte+0x20>
 8000e6e:	2b02      	cmp	r3, #2
 8000e70:	d005      	beq.n	8000e7e <sendByte+0x2a>
 8000e72:	e009      	b.n	8000e88 <sendByte+0x34>
	{
		case INSTRUCTION:
			buffer[0] = 0xF8;
 8000e74:	2308      	movs	r3, #8
 8000e76:	18fb      	adds	r3, r7, r3
 8000e78:	22f8      	movs	r2, #248	; 0xf8
 8000e7a:	701a      	strb	r2, [r3, #0]
			break;
 8000e7c:	e006      	b.n	8000e8c <sendByte+0x38>
		case DATA:
			buffer[0] = 0xFA;
 8000e7e:	2308      	movs	r3, #8
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	22fa      	movs	r2, #250	; 0xfa
 8000e84:	701a      	strb	r2, [r3, #0]
			break;
 8000e86:	e001      	b.n	8000e8c <sendByte+0x38>
		default:	//neošetřené možnosti
			return SPI_ERR;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	e074      	b.n	8000f76 <sendByte+0x122>
			break;
	}
	uint8_t tmp1 = 0U, tmp2 = 0U;
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	18fb      	adds	r3, r7, r3
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
 8000e94:	230e      	movs	r3, #14
 8000e96:	18fb      	adds	r3, r7, r3
 8000e98:	2200      	movs	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8000e9c:	230d      	movs	r3, #13
 8000e9e:	18fb      	adds	r3, r7, r3
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
 8000ea4:	e03a      	b.n	8000f1c <sendByte+0xc8>
	{
		if(MaskBit(byte, i))
 8000ea6:	1dfb      	adds	r3, r7, #7
 8000ea8:	781a      	ldrb	r2, [r3, #0]
 8000eaa:	210d      	movs	r1, #13
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	411a      	asrs	r2, r3
 8000eb2:	0013      	movs	r3, r2
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	d00f      	beq.n	8000eda <sendByte+0x86>
		{
			SetBit(tmp1, (7-i));
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	2207      	movs	r2, #7
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	409a      	lsls	r2, r3
 8000ec6:	0013      	movs	r3, r2
 8000ec8:	b25a      	sxtb	r2, r3
 8000eca:	210f      	movs	r1, #15
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	b25a      	sxtb	r2, r3
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	701a      	strb	r2, [r3, #0]
		}
		if(MaskBit(byte, (i+4)))
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	781a      	ldrb	r2, [r3, #0]
 8000ede:	210d      	movs	r1, #13
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	411a      	asrs	r2, r3
 8000ee8:	0013      	movs	r3, r2
 8000eea:	2201      	movs	r2, #1
 8000eec:	4013      	ands	r3, r2
 8000eee:	d00f      	beq.n	8000f10 <sendByte+0xbc>
		{
			SetBit(tmp2, (7-i));
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	2201      	movs	r2, #1
 8000efa:	409a      	lsls	r2, r3
 8000efc:	0013      	movs	r3, r2
 8000efe:	b25a      	sxtb	r2, r3
 8000f00:	210e      	movs	r1, #14
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b25a      	sxtb	r2, r3
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < 4; i++)
 8000f10:	210d      	movs	r1, #13
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	781a      	ldrb	r2, [r3, #0]
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	3201      	adds	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
 8000f1c:	230d      	movs	r3, #13
 8000f1e:	18fb      	adds	r3, r7, r3
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d9bf      	bls.n	8000ea6 <sendByte+0x52>
		}
	}
	buffer[1] = tmp1;
 8000f26:	2508      	movs	r5, #8
 8000f28:	197b      	adds	r3, r7, r5
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	18ba      	adds	r2, r7, r2
 8000f2e:	7812      	ldrb	r2, [r2, #0]
 8000f30:	705a      	strb	r2, [r3, #1]
	buffer[2] = tmp2;
 8000f32:	197b      	adds	r3, r7, r5
 8000f34:	220e      	movs	r2, #14
 8000f36:	18ba      	adds	r2, r7, r2
 8000f38:	7812      	ldrb	r2, [r2, #0]
 8000f3a:	709a      	strb	r2, [r3, #2]

	DISP_CS_ON;
 8000f3c:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <sendByte+0x12c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2140      	movs	r1, #64	; 0x40
 8000f42:	0018      	movs	r0, r3
 8000f44:	f003 fbb7 	bl	80046b6 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi1, buffer, 3, 100);
 8000f48:	260c      	movs	r6, #12
 8000f4a:	19bc      	adds	r4, r7, r6
 8000f4c:	1979      	adds	r1, r7, r5
 8000f4e:	480d      	ldr	r0, [pc, #52]	; (8000f84 <sendByte+0x130>)
 8000f50:	2364      	movs	r3, #100	; 0x64
 8000f52:	2203      	movs	r2, #3
 8000f54:	f006 f92e 	bl	80071b4 <HAL_SPI_Transmit>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	7023      	strb	r3, [r4, #0]
	DISP_CS_OFF;
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <sendByte+0x12c>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2140      	movs	r1, #64	; 0x40
 8000f62:	0018      	movs	r0, r3
 8000f64:	f003 fba7 	bl	80046b6 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	if(ret == HAL_OK)
 8000f68:	19bb      	adds	r3, r7, r6
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d101      	bne.n	8000f74 <sendByte+0x120>
		return DISP_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	e000      	b.n	8000f76 <sendByte+0x122>
	else
		return SPI_ERR;
 8000f74:	2302      	movs	r3, #2
}
 8000f76:	0018      	movs	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b005      	add	sp, #20
 8000f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	48000400 	.word	0x48000400
 8000f84:	20000254 	.word	0x20000254

08000f88 <dispInit>:
}

//_____Provede reset displeje a defaultní nastavení_____//
// !!! Pracuje v blokujícím módu !!!
void dispInit(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	//_____Reset displeje po startu_____//
	HAL_Delay(10);
 8000f8c:	200a      	movs	r0, #10
 8000f8e:	f002 fab5 	bl	80034fc <HAL_Delay>
	HAL_GPIO_WritePin(DISP_RST_GPIO_Port,DISP_RST_Pin, GPIO_PIN_RESET);
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <dispInit+0x8c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f003 fb8c 	bl	80046b6 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000f9e:	2014      	movs	r0, #20
 8000fa0:	f002 faac 	bl	80034fc <HAL_Delay>
	HAL_GPIO_WritePin(DISP_RST_GPIO_Port,DISP_RST_Pin, GPIO_PIN_SET);
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <dispInit+0x8c>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2180      	movs	r1, #128	; 0x80
 8000faa:	0018      	movs	r0, r3
 8000fac:	f003 fb83 	bl	80046b6 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000fb0:	2005      	movs	r0, #5
 8000fb2:	f002 faa3 	bl	80034fc <HAL_Delay>

	//_____Nastavit parametry_____//
	sendByte(0x31, INSTRUCTION);	//Function set IS = 1, RE = 0
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	2031      	movs	r0, #49	; 0x31
 8000fba:	f7ff ff4b 	bl	8000e54 <sendByte>
	sendByte(0x01, INSTRUCTION);	//Clear display
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	f7ff ff47 	bl	8000e54 <sendByte>
	sendByte(0x13, INSTRUCTION);	//Oscilator
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	2013      	movs	r0, #19
 8000fca:	f7ff ff43 	bl	8000e54 <sendByte>
	sendByte(0x7A, INSTRUCTION);	//Contrast
 8000fce:	2101      	movs	r1, #1
 8000fd0:	207a      	movs	r0, #122	; 0x7a
 8000fd2:	f7ff ff3f 	bl	8000e54 <sendByte>
	sendByte(0x56, INSTRUCTION);	//Power/Icon/Contrast
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	2056      	movs	r0, #86	; 0x56
 8000fda:	f7ff ff3b 	bl	8000e54 <sendByte>
	sendByte(0x6B, INSTRUCTION);	//Follower control
 8000fde:	2101      	movs	r1, #1
 8000fe0:	206b      	movs	r0, #107	; 0x6b
 8000fe2:	f7ff ff37 	bl	8000e54 <sendByte>
	sendByte(0x0F, INSTRUCTION);	//Display on
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	200f      	movs	r0, #15
 8000fea:	f7ff ff33 	bl	8000e54 <sendByte>
	sendByte(0x32, INSTRUCTION);	//Function set RE = 1
 8000fee:	2101      	movs	r1, #1
 8000ff0:	2032      	movs	r0, #50	; 0x32
 8000ff2:	f7ff ff2f 	bl	8000e54 <sendByte>
	sendByte(0x1F, INSTRUCTION);	//Shift enable
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	201f      	movs	r0, #31
 8000ffa:	f7ff ff2b 	bl	8000e54 <sendByte>
	sendByte(0x38, INSTRUCTION);	//Function set RE = 0
 8000ffe:	2101      	movs	r1, #1
 8001000:	2038      	movs	r0, #56	; 0x38
 8001002:	f7ff ff27 	bl	8000e54 <sendByte>

	//_____Zapnout podsvícení_____//
	setColour(BACKLIGHT_WHITE);
 8001006:	2000      	movs	r0, #0
 8001008:	f7ff feac 	bl	8000d64 <setColour>
}
 800100c:	46c0      	nop			; (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	48000400 	.word	0x48000400

08001018 <setCursor>:
//_____Nastaví kurzor_____//
//pozice počítána od nuly//
//-> argumenty: řádek, sloupec
// !!! Pracuje v blokujícím módu !!!
DISP_STATE setCursor(uint8_t row, uint8_t col)
{
 8001018:	b5b0      	push	{r4, r5, r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	0002      	movs	r2, r0
 8001020:	1dfb      	adds	r3, r7, #7
 8001022:	701a      	strb	r2, [r3, #0]
 8001024:	1dbb      	adds	r3, r7, #6
 8001026:	1c0a      	adds	r2, r1, #0
 8001028:	701a      	strb	r2, [r3, #0]
	uint8_t addres = 0x80;	//DDRAM adresa
 800102a:	230f      	movs	r3, #15
 800102c:	18fb      	adds	r3, r7, r3
 800102e:	2280      	movs	r2, #128	; 0x80
 8001030:	701a      	strb	r2, [r3, #0]
	if(row > 3 || col > 15)	//displej 4x16
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	2b03      	cmp	r3, #3
 8001038:	d803      	bhi.n	8001042 <setCursor+0x2a>
 800103a:	1dbb      	adds	r3, r7, #6
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b0f      	cmp	r3, #15
 8001040:	d901      	bls.n	8001046 <setCursor+0x2e>
		return DISP_ERR;
 8001042:	2304      	movs	r3, #4
 8001044:	e01c      	b.n	8001080 <setCursor+0x68>
	addres += row*0x20;
 8001046:	1dfb      	adds	r3, r7, #7
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	015b      	lsls	r3, r3, #5
 800104c:	b2d9      	uxtb	r1, r3
 800104e:	200f      	movs	r0, #15
 8001050:	183b      	adds	r3, r7, r0
 8001052:	183a      	adds	r2, r7, r0
 8001054:	7812      	ldrb	r2, [r2, #0]
 8001056:	188a      	adds	r2, r1, r2
 8001058:	701a      	strb	r2, [r3, #0]
	addres += col;
 800105a:	183b      	adds	r3, r7, r0
 800105c:	1839      	adds	r1, r7, r0
 800105e:	1dba      	adds	r2, r7, #6
 8001060:	7809      	ldrb	r1, [r1, #0]
 8001062:	7812      	ldrb	r2, [r2, #0]
 8001064:	188a      	adds	r2, r1, r2
 8001066:	701a      	strb	r2, [r3, #0]

	//HAL_Delay(5);
	DISP_STATE ret = sendByte(addres, INSTRUCTION);
 8001068:	250e      	movs	r5, #14
 800106a:	197c      	adds	r4, r7, r5
 800106c:	183b      	adds	r3, r7, r0
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2101      	movs	r1, #1
 8001072:	0018      	movs	r0, r3
 8001074:	f7ff feee 	bl	8000e54 <sendByte>
 8001078:	0003      	movs	r3, r0
 800107a:	7023      	strb	r3, [r4, #0]
	//HAL_Delay(5);
	return ret;
 800107c:	197b      	adds	r3, r7, r5
 800107e:	781b      	ldrb	r3, [r3, #0]
}
 8001080:	0018      	movs	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	b004      	add	sp, #16
 8001086:	bdb0      	pop	{r4, r5, r7, pc}

08001088 <writeRow>:
//_____Zapiš řetězec na daný řádek_____//
//znaky přečnívající znaky budou smazány//
//-> argumenty: pole znaků, délka řetězce, řádek, zarovnání
// !!! Pracuje v blokujícím módu !!!
DISP_STATE writeRow(char* string, uint8_t lenght, uint8_t row, ALIGN align)
{
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	000c      	movs	r4, r1
 8001092:	0010      	movs	r0, r2
 8001094:	0019      	movs	r1, r3
 8001096:	1cfb      	adds	r3, r7, #3
 8001098:	1c22      	adds	r2, r4, #0
 800109a:	701a      	strb	r2, [r3, #0]
 800109c:	1cbb      	adds	r3, r7, #2
 800109e:	1c02      	adds	r2, r0, #0
 80010a0:	701a      	strb	r2, [r3, #0]
 80010a2:	1c7b      	adds	r3, r7, #1
 80010a4:	1c0a      	adds	r2, r1, #0
 80010a6:	701a      	strb	r2, [r3, #0]
	if(lenght > 16)	//neplatná délka řetězce
 80010a8:	1cfb      	adds	r3, r7, #3
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b10      	cmp	r3, #16
 80010ae:	d901      	bls.n	80010b4 <writeRow+0x2c>
		return DISP_ERR;
 80010b0:	2304      	movs	r3, #4
 80010b2:	e083      	b.n	80011bc <writeRow+0x134>
	uint8_t col;
	char newString[16];
	for(uint8_t i = 0; i < 16; i++)
 80010b4:	231e      	movs	r3, #30
 80010b6:	18fb      	adds	r3, r7, r3
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
 80010bc:	e00b      	b.n	80010d6 <writeRow+0x4e>
	{
		newString[i] = ' ';
 80010be:	201e      	movs	r0, #30
 80010c0:	183b      	adds	r3, r7, r0
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	220c      	movs	r2, #12
 80010c6:	18ba      	adds	r2, r7, r2
 80010c8:	2120      	movs	r1, #32
 80010ca:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 16; i++)
 80010cc:	183b      	adds	r3, r7, r0
 80010ce:	781a      	ldrb	r2, [r3, #0]
 80010d0:	183b      	adds	r3, r7, r0
 80010d2:	3201      	adds	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	231e      	movs	r3, #30
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d9ee      	bls.n	80010be <writeRow+0x36>
	}
	switch(align)
 80010e0:	1c7b      	adds	r3, r7, #1
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d012      	beq.n	800110e <writeRow+0x86>
 80010e8:	dc1e      	bgt.n	8001128 <writeRow+0xa0>
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <writeRow+0x6c>
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d005      	beq.n	80010fe <writeRow+0x76>
 80010f2:	e019      	b.n	8001128 <writeRow+0xa0>
	{
		case LEFT:	//zarovnání doleva
			col = 0;
 80010f4:	231f      	movs	r3, #31
 80010f6:	18fb      	adds	r3, r7, r3
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
			break;
 80010fc:	e019      	b.n	8001132 <writeRow+0xaa>
		case RIGHT:
			col = 15 - lenght;
 80010fe:	231f      	movs	r3, #31
 8001100:	18fb      	adds	r3, r7, r3
 8001102:	1cfa      	adds	r2, r7, #3
 8001104:	7812      	ldrb	r2, [r2, #0]
 8001106:	210f      	movs	r1, #15
 8001108:	1a8a      	subs	r2, r1, r2
 800110a:	701a      	strb	r2, [r3, #0]
			break;
 800110c:	e011      	b.n	8001132 <writeRow+0xaa>
		case CENTER:
			col = (15 - lenght)/2 + 1;
 800110e:	1cfb      	adds	r3, r7, #3
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	220f      	movs	r2, #15
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	d500      	bpl.n	800111a <writeRow+0x92>
 8001118:	3301      	adds	r3, #1
 800111a:	105b      	asrs	r3, r3, #1
 800111c:	b2da      	uxtb	r2, r3
 800111e:	231f      	movs	r3, #31
 8001120:	18fb      	adds	r3, r7, r3
 8001122:	3201      	adds	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
			break;
 8001126:	e004      	b.n	8001132 <writeRow+0xaa>
		default:
			col = 0;
 8001128:	231f      	movs	r3, #31
 800112a:	18fb      	adds	r3, r7, r3
 800112c:	2200      	movs	r2, #0
 800112e:	701a      	strb	r2, [r3, #0]
			break;
 8001130:	46c0      	nop			; (mov r8, r8)
	}
	for(uint8_t i = 0; i < lenght; i++)
 8001132:	231d      	movs	r3, #29
 8001134:	18fb      	adds	r3, r7, r3
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	e013      	b.n	8001164 <writeRow+0xdc>
	{
		newString[col + i] = string[i];
 800113c:	201d      	movs	r0, #29
 800113e:	183b      	adds	r3, r7, r0
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	18d2      	adds	r2, r2, r3
 8001146:	231f      	movs	r3, #31
 8001148:	18fb      	adds	r3, r7, r3
 800114a:	7819      	ldrb	r1, [r3, #0]
 800114c:	183b      	adds	r3, r7, r0
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	18cb      	adds	r3, r1, r3
 8001152:	7811      	ldrb	r1, [r2, #0]
 8001154:	220c      	movs	r2, #12
 8001156:	18ba      	adds	r2, r7, r2
 8001158:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < lenght; i++)
 800115a:	183b      	adds	r3, r7, r0
 800115c:	781a      	ldrb	r2, [r3, #0]
 800115e:	183b      	adds	r3, r7, r0
 8001160:	3201      	adds	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
 8001164:	231d      	movs	r3, #29
 8001166:	18fa      	adds	r2, r7, r3
 8001168:	1cfb      	adds	r3, r7, #3
 800116a:	7812      	ldrb	r2, [r2, #0]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d3e4      	bcc.n	800113c <writeRow+0xb4>
	}
	setCursor(row, 0);
 8001172:	1cbb      	adds	r3, r7, #2
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2100      	movs	r1, #0
 8001178:	0018      	movs	r0, r3
 800117a:	f7ff ff4d 	bl	8001018 <setCursor>
	for(uint8_t i = 0; i < 16; i++)
 800117e:	231c      	movs	r3, #28
 8001180:	18fb      	adds	r3, r7, r3
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]
 8001186:	e013      	b.n	80011b0 <writeRow+0x128>
	{
		if(sendByte(newString[i], DATA) != DISP_OK)
 8001188:	231c      	movs	r3, #28
 800118a:	18fb      	adds	r3, r7, r3
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	220c      	movs	r2, #12
 8001190:	18ba      	adds	r2, r7, r2
 8001192:	5cd3      	ldrb	r3, [r2, r3]
 8001194:	2102      	movs	r1, #2
 8001196:	0018      	movs	r0, r3
 8001198:	f7ff fe5c 	bl	8000e54 <sendByte>
 800119c:	1e03      	subs	r3, r0, #0
 800119e:	d001      	beq.n	80011a4 <writeRow+0x11c>
					return SPI_ERR;
 80011a0:	2302      	movs	r3, #2
 80011a2:	e00b      	b.n	80011bc <writeRow+0x134>
	for(uint8_t i = 0; i < 16; i++)
 80011a4:	211c      	movs	r1, #28
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	781a      	ldrb	r2, [r3, #0]
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	3201      	adds	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
 80011b0:	231c      	movs	r3, #28
 80011b2:	18fb      	adds	r3, r7, r3
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b0f      	cmp	r3, #15
 80011b8:	d9e6      	bls.n	8001188 <writeRow+0x100>
	}
	return DISP_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	0018      	movs	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	b009      	add	sp, #36	; 0x24
 80011c2:	bd90      	pop	{r4, r7, pc}

080011c4 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//_____Buttons interrupt callback_____//
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	0002      	movs	r2, r0
 80011cc:	1dbb      	adds	r3, r7, #6
 80011ce:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == BUTTON_0_Pin)
 80011d0:	1dbb      	adds	r3, r7, #6
 80011d2:	881a      	ldrh	r2, [r3, #0]
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	429a      	cmp	r2, r3
 80011da:	d104      	bne.n	80011e6 <HAL_GPIO_EXTI_Callback+0x22>
	{
		flags.buttons.butt0_int = 1;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_GPIO_EXTI_Callback+0x40>)
 80011de:	791a      	ldrb	r2, [r3, #4]
 80011e0:	2101      	movs	r1, #1
 80011e2:	430a      	orrs	r2, r1
 80011e4:	711a      	strb	r2, [r3, #4]
	}
	if(GPIO_Pin == BUTTON_1_Pin)
 80011e6:	1dbb      	adds	r3, r7, #6
 80011e8:	881a      	ldrh	r2, [r3, #0]
 80011ea:	2380      	movs	r3, #128	; 0x80
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d104      	bne.n	80011fc <HAL_GPIO_EXTI_Callback+0x38>
	{
		flags.buttons.butt1_int = 1;
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <HAL_GPIO_EXTI_Callback+0x40>)
 80011f4:	791a      	ldrb	r2, [r3, #4]
 80011f6:	2104      	movs	r1, #4
 80011f8:	430a      	orrs	r2, r1
 80011fa:	711a      	strb	r2, [r3, #4]
	}
}
 80011fc:	46c0      	nop			; (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	b002      	add	sp, #8
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000680 	.word	0x20000680

08001208 <HAL_TIM_PeriodElapsedCallback>:

//_____Timer interrupt callback_____//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	if(htim == &htim14)	//Timer 14 -> každých 10 ms
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001214:	429a      	cmp	r2, r3
 8001216:	d110      	bne.n	800123a <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		//Krátké pípnutí signalizuje vykonávání hlavní smy�?ky programu
		//delší než deset ms
		if(flags.time.ten_ms == 1)
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	07db      	lsls	r3, r3, #31
 800121e:	0fdb      	lsrs	r3, r3, #31
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b01      	cmp	r3, #1
 8001224:	d104      	bne.n	8001230 <HAL_TIM_PeriodElapsedCallback+0x28>
			flags.ui.shortBeep = 1;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001228:	7c1a      	ldrb	r2, [r3, #16]
 800122a:	2101      	movs	r1, #1
 800122c:	430a      	orrs	r2, r1
 800122e:	741a      	strb	r2, [r3, #16]
		flags.time.ten_ms = 1;
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001232:	781a      	ldrb	r2, [r3, #0]
 8001234:	2101      	movs	r1, #1
 8001236:	430a      	orrs	r2, r1
 8001238:	701a      	strb	r2, [r3, #0]
	}
}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	b002      	add	sp, #8
 8001240:	bd80      	pop	{r7, pc}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	200002b8 	.word	0x200002b8
 8001248:	20000680 	.word	0x20000680

0800124c <HAL_ADC_ConvCpltCallback>:

//_____ADC data ready callback_____//
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_IT(hadc);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	0018      	movs	r0, r3
 8001258:	f002 fb26 	bl	80038a8 <HAL_ADC_Stop_IT>
	flags.meas.measDataReady = 1;
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <HAL_ADC_ConvCpltCallback+0x24>)
 800125e:	7d1a      	ldrb	r2, [r3, #20]
 8001260:	2104      	movs	r1, #4
 8001262:	430a      	orrs	r2, r1
 8001264:	751a      	strb	r2, [r3, #20]
}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	20000680 	.word	0x20000680

08001274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b087      	sub	sp, #28
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127a:	f002 f8db 	bl	8003434 <HAL_Init>
  /* USER CODE BEGIN Init */

  //__Buffery___//
  //dispBuffer = createBuffer(100);
  //regBuffer = createBuffer(100);
  USB_Rx_Buffer = createBuffer(500);
 800127e:	23fa      	movs	r3, #250	; 0xfa
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	0018      	movs	r0, r3
 8001284:	f001 f99d 	bl	80025c2 <createBuffer>
 8001288:	0002      	movs	r2, r0
 800128a:	4b37      	ldr	r3, [pc, #220]	; (8001368 <main+0xf4>)
 800128c:	601a      	str	r2, [r3, #0]
  USB_Tx_Buffer = createBuffer(500);
 800128e:	23fa      	movs	r3, #250	; 0xfa
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	0018      	movs	r0, r3
 8001294:	f001 f995 	bl	80025c2 <createBuffer>
 8001298:	0002      	movs	r2, r0
 800129a:	4b34      	ldr	r3, [pc, #208]	; (800136c <main+0xf8>)
 800129c:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800129e:	f000 f875 	bl	800138c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a2:	f000 facf 	bl	8001844 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80012a6:	f00b fdd7 	bl	800ce58 <MX_USB_DEVICE_Init>
  MX_ADC_Init();
 80012aa:	f000 f8db 	bl	8001464 <MX_ADC_Init>
  MX_SPI1_Init();
 80012ae:	f000 fa07 	bl	80016c0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80012b2:	f000 fa97 	bl	80017e4 <MX_USART3_UART_Init>
  MX_TIM14_Init();
 80012b6:	f000 fa49 	bl	800174c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //___Nacteni kalibracni konstanty___//
  calibValue = *((uint16_t*)CALIB_VALUE_PTR);
 80012ba:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <main+0xfc>)
 80012bc:	881a      	ldrh	r2, [r3, #0]
 80012be:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <main+0x100>)
 80012c0:	801a      	strh	r2, [r3, #0]

  //___Inicializace displeje___//
  dispInit();
 80012c2:	f7ff fe61 	bl	8000f88 <dispInit>
  char line1[] = "Zahoreni";
 80012c6:	200c      	movs	r0, #12
 80012c8:	183b      	adds	r3, r7, r0
 80012ca:	4a2b      	ldr	r2, [pc, #172]	; (8001378 <main+0x104>)
 80012cc:	ca12      	ldmia	r2!, {r1, r4}
 80012ce:	c312      	stmia	r3!, {r1, r4}
 80012d0:	7812      	ldrb	r2, [r2, #0]
 80012d2:	701a      	strb	r2, [r3, #0]
  char line2[] = "zdroju";
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	4a29      	ldr	r2, [pc, #164]	; (800137c <main+0x108>)
 80012d8:	6811      	ldr	r1, [r2, #0]
 80012da:	6019      	str	r1, [r3, #0]
 80012dc:	8891      	ldrh	r1, [r2, #4]
 80012de:	8099      	strh	r1, [r3, #4]
 80012e0:	7992      	ldrb	r2, [r2, #6]
 80012e2:	719a      	strb	r2, [r3, #6]
  writeRow(line1, 8, 1, CENTER);
 80012e4:	1838      	adds	r0, r7, r0
 80012e6:	2302      	movs	r3, #2
 80012e8:	2201      	movs	r2, #1
 80012ea:	2108      	movs	r1, #8
 80012ec:	f7ff fecc 	bl	8001088 <writeRow>
  writeRow(line2, 6, 2, CENTER);
 80012f0:	1d38      	adds	r0, r7, #4
 80012f2:	2302      	movs	r3, #2
 80012f4:	2202      	movs	r2, #2
 80012f6:	2106      	movs	r1, #6
 80012f8:	f7ff fec6 	bl	8001088 <writeRow>

  LOAD_MIN_OFF;
 80012fc:	4b20      	ldr	r3, [pc, #128]	; (8001380 <main+0x10c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	2180      	movs	r1, #128	; 0x80
 8001302:	0018      	movs	r0, r3
 8001304:	f003 f9d7 	bl	80046b6 <HAL_GPIO_WritePin>
  LOAD_MAX_OFF;
 8001308:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <main+0x10c>)
 800130a:	2200      	movs	r2, #0
 800130c:	2140      	movs	r1, #64	; 0x40
 800130e:	0018      	movs	r0, r3
 8001310:	f003 f9d1 	bl	80046b6 <HAL_GPIO_WritePin>

  if(regInit() != REG_OK)	//inicializace shift registrů
 8001314:	f001 faa6 	bl	8002864 <regInit>
 8001318:	1e03      	subs	r3, r0, #0
 800131a:	d004      	beq.n	8001326 <main+0xb2>
  {
	  flags.conErr = 1;
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <main+0x110>)
 800131e:	7e1a      	ldrb	r2, [r3, #24]
 8001320:	2140      	movs	r1, #64	; 0x40
 8001322:	430a      	orrs	r2, r1
 8001324:	761a      	strb	r2, [r3, #24]
	  //Odešli zprávu do PC
  }

  // Start timer
  HAL_TIM_Base_Start_IT(&htim14);
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <main+0x114>)
 8001328:	0018      	movs	r0, r3
 800132a:	f006 fc33 	bl	8007b94 <HAL_TIM_Base_Start_IT>

  flags.ui.longBeep = 1;
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <main+0x110>)
 8001330:	7c1a      	ldrb	r2, [r3, #16]
 8001332:	2102      	movs	r1, #2
 8001334:	430a      	orrs	r2, r1
 8001336:	741a      	strb	r2, [r3, #16]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flags.time.ten_ms)	// 10 ms
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <main+0x110>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	07db      	lsls	r3, r3, #31
 800133e:	0fdb      	lsrs	r3, r3, #31
 8001340:	b2db      	uxtb	r3, r3
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f8      	beq.n	8001338 <main+0xc4>
	  {
		  clkHandler();
 8001346:	f000 fb7b 	bl	8001a40 <clkHandler>
		  buttonDebounce();
 800134a:	f000 fbf7 	bl	8001b3c <buttonDebounce>
		  comHandler();
 800134e:	f7ff f863 	bl	8000418 <comHandler>
		  calibHandler();
 8001352:	f001 f87b 	bl	800244c <calibHandler>
		  dispHandler();
 8001356:	f000 fc79 	bl	8001c4c <dispHandler>
		  UI_Handler();
 800135a:	f000 fe53 	bl	8002004 <UI_Handler>
		  testHandler();
 800135e:	f001 fd2d 	bl	8002dbc <testHandler>
		  measHandler();
 8001362:	f000 ff9d 	bl	80022a0 <measHandler>
	  if(flags.time.ten_ms)	// 10 ms
 8001366:	e7e7      	b.n	8001338 <main+0xc4>
 8001368:	20001168 	.word	0x20001168
 800136c:	200001fc 	.word	0x200001fc
 8001370:	1ffff7ba 	.word	0x1ffff7ba
 8001374:	200006a0 	.word	0x200006a0
 8001378:	0800e2b0 	.word	0x0800e2b0
 800137c:	0800e2bc 	.word	0x0800e2bc
 8001380:	48000800 	.word	0x48000800
 8001384:	20000680 	.word	0x20000680
 8001388:	200002b8 	.word	0x200002b8

0800138c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b099      	sub	sp, #100	; 0x64
 8001390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001392:	242c      	movs	r4, #44	; 0x2c
 8001394:	193b      	adds	r3, r7, r4
 8001396:	0018      	movs	r0, r3
 8001398:	2334      	movs	r3, #52	; 0x34
 800139a:	001a      	movs	r2, r3
 800139c:	2100      	movs	r1, #0
 800139e:	f00c fb08 	bl	800d9b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a2:	231c      	movs	r3, #28
 80013a4:	18fb      	adds	r3, r7, r3
 80013a6:	0018      	movs	r0, r3
 80013a8:	2310      	movs	r3, #16
 80013aa:	001a      	movs	r2, r3
 80013ac:	2100      	movs	r1, #0
 80013ae:	f00c fb00 	bl	800d9b2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b2:	003b      	movs	r3, r7
 80013b4:	0018      	movs	r0, r3
 80013b6:	231c      	movs	r3, #28
 80013b8:	001a      	movs	r2, r3
 80013ba:	2100      	movs	r1, #0
 80013bc:	f00c faf9 	bl	800d9b2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80013c0:	0021      	movs	r1, r4
 80013c2:	187b      	adds	r3, r7, r1
 80013c4:	2232      	movs	r2, #50	; 0x32
 80013c6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c8:	187b      	adds	r3, r7, r1
 80013ca:	2201      	movs	r2, #1
 80013cc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013ce:	187b      	adds	r3, r7, r1
 80013d0:	2201      	movs	r2, #1
 80013d2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	2201      	movs	r2, #1
 80013d8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013da:	187b      	adds	r3, r7, r1
 80013dc:	2210      	movs	r2, #16
 80013de:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80013e0:	187b      	adds	r3, r7, r1
 80013e2:	2210      	movs	r2, #16
 80013e4:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e6:	187b      	adds	r3, r7, r1
 80013e8:	2202      	movs	r2, #2
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	2280      	movs	r2, #128	; 0x80
 80013f0:	0212      	lsls	r2, r2, #8
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80013f4:	187b      	adds	r3, r7, r1
 80013f6:	2200      	movs	r2, #0
 80013f8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80013fa:	187b      	adds	r3, r7, r1
 80013fc:	2200      	movs	r2, #0
 80013fe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001400:	187b      	adds	r3, r7, r1
 8001402:	0018      	movs	r0, r3
 8001404:	f005 f81e 	bl	8006444 <HAL_RCC_OscConfig>
 8001408:	1e03      	subs	r3, r0, #0
 800140a:	d001      	beq.n	8001410 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800140c:	f001 f8d4 	bl	80025b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001410:	211c      	movs	r1, #28
 8001412:	187b      	adds	r3, r7, r1
 8001414:	2207      	movs	r2, #7
 8001416:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001418:	187b      	adds	r3, r7, r1
 800141a:	2202      	movs	r2, #2
 800141c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141e:	187b      	adds	r3, r7, r1
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001424:	187b      	adds	r3, r7, r1
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800142a:	187b      	adds	r3, r7, r1
 800142c:	2100      	movs	r1, #0
 800142e:	0018      	movs	r0, r3
 8001430:	f005 fb8e 	bl	8006b50 <HAL_RCC_ClockConfig>
 8001434:	1e03      	subs	r3, r0, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001438:	f001 f8be 	bl	80025b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800143c:	003b      	movs	r3, r7
 800143e:	2280      	movs	r2, #128	; 0x80
 8001440:	0292      	lsls	r2, r2, #10
 8001442:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001444:	003b      	movs	r3, r7
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800144a:	003b      	movs	r3, r7
 800144c:	0018      	movs	r0, r3
 800144e:	f005 fcfb 	bl	8006e48 <HAL_RCCEx_PeriphCLKConfig>
 8001452:	1e03      	subs	r3, r0, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001456:	f001 f8af 	bl	80025b8 <Error_Handler>
  }
}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	46bd      	mov	sp, r7
 800145e:	b019      	add	sp, #100	; 0x64
 8001460:	bd90      	pop	{r4, r7, pc}
	...

08001464 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	0018      	movs	r0, r3
 800146e:	230c      	movs	r3, #12
 8001470:	001a      	movs	r2, r3
 8001472:	2100      	movs	r1, #0
 8001474:	f00c fa9d 	bl	800d9b2 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001478:	4b8f      	ldr	r3, [pc, #572]	; (80016b8 <MX_ADC_Init+0x254>)
 800147a:	4a90      	ldr	r2, [pc, #576]	; (80016bc <MX_ADC_Init+0x258>)
 800147c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800147e:	4b8e      	ldr	r3, [pc, #568]	; (80016b8 <MX_ADC_Init+0x254>)
 8001480:	2200      	movs	r2, #0
 8001482:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001484:	4b8c      	ldr	r3, [pc, #560]	; (80016b8 <MX_ADC_Init+0x254>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800148a:	4b8b      	ldr	r3, [pc, #556]	; (80016b8 <MX_ADC_Init+0x254>)
 800148c:	2200      	movs	r2, #0
 800148e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001490:	4b89      	ldr	r3, [pc, #548]	; (80016b8 <MX_ADC_Init+0x254>)
 8001492:	2201      	movs	r2, #1
 8001494:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001496:	4b88      	ldr	r3, [pc, #544]	; (80016b8 <MX_ADC_Init+0x254>)
 8001498:	2204      	movs	r2, #4
 800149a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800149c:	4b86      	ldr	r3, [pc, #536]	; (80016b8 <MX_ADC_Init+0x254>)
 800149e:	2200      	movs	r2, #0
 80014a0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80014a2:	4b85      	ldr	r3, [pc, #532]	; (80016b8 <MX_ADC_Init+0x254>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80014a8:	4b83      	ldr	r3, [pc, #524]	; (80016b8 <MX_ADC_Init+0x254>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80014ae:	4b82      	ldr	r3, [pc, #520]	; (80016b8 <MX_ADC_Init+0x254>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014b4:	4b80      	ldr	r3, [pc, #512]	; (80016b8 <MX_ADC_Init+0x254>)
 80014b6:	22c2      	movs	r2, #194	; 0xc2
 80014b8:	32ff      	adds	r2, #255	; 0xff
 80014ba:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014bc:	4b7e      	ldr	r3, [pc, #504]	; (80016b8 <MX_ADC_Init+0x254>)
 80014be:	2200      	movs	r2, #0
 80014c0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80014c2:	4b7d      	ldr	r3, [pc, #500]	; (80016b8 <MX_ADC_Init+0x254>)
 80014c4:	2224      	movs	r2, #36	; 0x24
 80014c6:	2100      	movs	r1, #0
 80014c8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014ca:	4b7b      	ldr	r3, [pc, #492]	; (80016b8 <MX_ADC_Init+0x254>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80014d0:	4b79      	ldr	r3, [pc, #484]	; (80016b8 <MX_ADC_Init+0x254>)
 80014d2:	0018      	movs	r0, r3
 80014d4:	f002 f836 	bl	8003544 <HAL_ADC_Init>
 80014d8:	1e03      	subs	r3, r0, #0
 80014da:	d001      	beq.n	80014e0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80014dc:	f001 f86c 	bl	80025b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	2280      	movs	r2, #128	; 0x80
 80014ea:	0152      	lsls	r2, r2, #5
 80014ec:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	2205      	movs	r2, #5
 80014f2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014f4:	1d3a      	adds	r2, r7, #4
 80014f6:	4b70      	ldr	r3, [pc, #448]	; (80016b8 <MX_ADC_Init+0x254>)
 80014f8:	0011      	movs	r1, r2
 80014fa:	0018      	movs	r0, r3
 80014fc:	f002 faf2 	bl	8003ae4 <HAL_ADC_ConfigChannel>
 8001500:	1e03      	subs	r3, r0, #0
 8001502:	d001      	beq.n	8001508 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8001504:	f001 f858 	bl	80025b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800150e:	1d3a      	adds	r2, r7, #4
 8001510:	4b69      	ldr	r3, [pc, #420]	; (80016b8 <MX_ADC_Init+0x254>)
 8001512:	0011      	movs	r1, r2
 8001514:	0018      	movs	r0, r3
 8001516:	f002 fae5 	bl	8003ae4 <HAL_ADC_ConfigChannel>
 800151a:	1e03      	subs	r3, r0, #0
 800151c:	d001      	beq.n	8001522 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 800151e:	f001 f84b 	bl	80025b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2202      	movs	r2, #2
 8001526:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001528:	1d3a      	adds	r2, r7, #4
 800152a:	4b63      	ldr	r3, [pc, #396]	; (80016b8 <MX_ADC_Init+0x254>)
 800152c:	0011      	movs	r1, r2
 800152e:	0018      	movs	r0, r3
 8001530:	f002 fad8 	bl	8003ae4 <HAL_ADC_ConfigChannel>
 8001534:	1e03      	subs	r3, r0, #0
 8001536:	d001      	beq.n	800153c <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8001538:	f001 f83e 	bl	80025b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	2203      	movs	r2, #3
 8001540:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001542:	1d3a      	adds	r2, r7, #4
 8001544:	4b5c      	ldr	r3, [pc, #368]	; (80016b8 <MX_ADC_Init+0x254>)
 8001546:	0011      	movs	r1, r2
 8001548:	0018      	movs	r0, r3
 800154a:	f002 facb 	bl	8003ae4 <HAL_ADC_ConfigChannel>
 800154e:	1e03      	subs	r3, r0, #0
 8001550:	d001      	beq.n	8001556 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8001552:	f001 f831 	bl	80025b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	2204      	movs	r2, #4
 800155a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800155c:	1d3a      	adds	r2, r7, #4
 800155e:	4b56      	ldr	r3, [pc, #344]	; (80016b8 <MX_ADC_Init+0x254>)
 8001560:	0011      	movs	r1, r2
 8001562:	0018      	movs	r0, r3
 8001564:	f002 fabe 	bl	8003ae4 <HAL_ADC_ConfigChannel>
 8001568:	1e03      	subs	r3, r0, #0
 800156a:	d001      	beq.n	8001570 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 800156c:	f001 f824 	bl	80025b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2205      	movs	r2, #5
 8001574:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001576:	1d3a      	adds	r2, r7, #4
 8001578:	4b4f      	ldr	r3, [pc, #316]	; (80016b8 <MX_ADC_Init+0x254>)
 800157a:	0011      	movs	r1, r2
 800157c:	0018      	movs	r0, r3
 800157e:	f002 fab1 	bl	8003ae4 <HAL_ADC_ConfigChannel>
 8001582:	1e03      	subs	r3, r0, #0
 8001584:	d001      	beq.n	800158a <MX_ADC_Init+0x126>
  {
    Error_Handler();
 8001586:	f001 f817 	bl	80025b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	2206      	movs	r2, #6
 800158e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001590:	1d3a      	adds	r2, r7, #4
 8001592:	4b49      	ldr	r3, [pc, #292]	; (80016b8 <MX_ADC_Init+0x254>)
 8001594:	0011      	movs	r1, r2
 8001596:	0018      	movs	r0, r3
 8001598:	f002 faa4 	bl	8003ae4 <HAL_ADC_ConfigChannel>
 800159c:	1e03      	subs	r3, r0, #0
 800159e:	d001      	beq.n	80015a4 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 80015a0:	f001 f80a 	bl	80025b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	2207      	movs	r2, #7
 80015a8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015aa:	1d3a      	adds	r2, r7, #4
 80015ac:	4b42      	ldr	r3, [pc, #264]	; (80016b8 <MX_ADC_Init+0x254>)
 80015ae:	0011      	movs	r1, r2
 80015b0:	0018      	movs	r0, r3
 80015b2:	f002 fa97 	bl	8003ae4 <HAL_ADC_ConfigChannel>
 80015b6:	1e03      	subs	r3, r0, #0
 80015b8:	d001      	beq.n	80015be <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 80015ba:	f000 fffd 	bl	80025b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	2208      	movs	r2, #8
 80015c2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015c4:	1d3a      	adds	r2, r7, #4
 80015c6:	4b3c      	ldr	r3, [pc, #240]	; (80016b8 <MX_ADC_Init+0x254>)
 80015c8:	0011      	movs	r1, r2
 80015ca:	0018      	movs	r0, r3
 80015cc:	f002 fa8a 	bl	8003ae4 <HAL_ADC_ConfigChannel>
 80015d0:	1e03      	subs	r3, r0, #0
 80015d2:	d001      	beq.n	80015d8 <MX_ADC_Init+0x174>
  {
    Error_Handler();
 80015d4:	f000 fff0 	bl	80025b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2209      	movs	r2, #9
 80015dc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015de:	1d3a      	adds	r2, r7, #4
 80015e0:	4b35      	ldr	r3, [pc, #212]	; (80016b8 <MX_ADC_Init+0x254>)
 80015e2:	0011      	movs	r1, r2
 80015e4:	0018      	movs	r0, r3
 80015e6:	f002 fa7d 	bl	8003ae4 <HAL_ADC_ConfigChannel>
 80015ea:	1e03      	subs	r3, r0, #0
 80015ec:	d001      	beq.n	80015f2 <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 80015ee:	f000 ffe3 	bl	80025b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	220a      	movs	r2, #10
 80015f6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80015f8:	1d3a      	adds	r2, r7, #4
 80015fa:	4b2f      	ldr	r3, [pc, #188]	; (80016b8 <MX_ADC_Init+0x254>)
 80015fc:	0011      	movs	r1, r2
 80015fe:	0018      	movs	r0, r3
 8001600:	f002 fa70 	bl	8003ae4 <HAL_ADC_ConfigChannel>
 8001604:	1e03      	subs	r3, r0, #0
 8001606:	d001      	beq.n	800160c <MX_ADC_Init+0x1a8>
  {
    Error_Handler();
 8001608:	f000 ffd6 	bl	80025b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	220b      	movs	r2, #11
 8001610:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001612:	1d3a      	adds	r2, r7, #4
 8001614:	4b28      	ldr	r3, [pc, #160]	; (80016b8 <MX_ADC_Init+0x254>)
 8001616:	0011      	movs	r1, r2
 8001618:	0018      	movs	r0, r3
 800161a:	f002 fa63 	bl	8003ae4 <HAL_ADC_ConfigChannel>
 800161e:	1e03      	subs	r3, r0, #0
 8001620:	d001      	beq.n	8001626 <MX_ADC_Init+0x1c2>
  {
    Error_Handler();
 8001622:	f000 ffc9 	bl	80025b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	220c      	movs	r2, #12
 800162a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800162c:	1d3a      	adds	r2, r7, #4
 800162e:	4b22      	ldr	r3, [pc, #136]	; (80016b8 <MX_ADC_Init+0x254>)
 8001630:	0011      	movs	r1, r2
 8001632:	0018      	movs	r0, r3
 8001634:	f002 fa56 	bl	8003ae4 <HAL_ADC_ConfigChannel>
 8001638:	1e03      	subs	r3, r0, #0
 800163a:	d001      	beq.n	8001640 <MX_ADC_Init+0x1dc>
  {
    Error_Handler();
 800163c:	f000 ffbc 	bl	80025b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	220d      	movs	r2, #13
 8001644:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001646:	1d3a      	adds	r2, r7, #4
 8001648:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <MX_ADC_Init+0x254>)
 800164a:	0011      	movs	r1, r2
 800164c:	0018      	movs	r0, r3
 800164e:	f002 fa49 	bl	8003ae4 <HAL_ADC_ConfigChannel>
 8001652:	1e03      	subs	r3, r0, #0
 8001654:	d001      	beq.n	800165a <MX_ADC_Init+0x1f6>
  {
    Error_Handler();
 8001656:	f000 ffaf 	bl	80025b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	220e      	movs	r2, #14
 800165e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001660:	1d3a      	adds	r2, r7, #4
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <MX_ADC_Init+0x254>)
 8001664:	0011      	movs	r1, r2
 8001666:	0018      	movs	r0, r3
 8001668:	f002 fa3c 	bl	8003ae4 <HAL_ADC_ConfigChannel>
 800166c:	1e03      	subs	r3, r0, #0
 800166e:	d001      	beq.n	8001674 <MX_ADC_Init+0x210>
  {
    Error_Handler();
 8001670:	f000 ffa2 	bl	80025b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	220f      	movs	r2, #15
 8001678:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800167a:	1d3a      	adds	r2, r7, #4
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_ADC_Init+0x254>)
 800167e:	0011      	movs	r1, r2
 8001680:	0018      	movs	r0, r3
 8001682:	f002 fa2f 	bl	8003ae4 <HAL_ADC_ConfigChannel>
 8001686:	1e03      	subs	r3, r0, #0
 8001688:	d001      	beq.n	800168e <MX_ADC_Init+0x22a>
  {
    Error_Handler();
 800168a:	f000 ff95 	bl	80025b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2211      	movs	r2, #17
 8001692:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001694:	1d3a      	adds	r2, r7, #4
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <MX_ADC_Init+0x254>)
 8001698:	0011      	movs	r1, r2
 800169a:	0018      	movs	r0, r3
 800169c:	f002 fa22 	bl	8003ae4 <HAL_ADC_ConfigChannel>
 80016a0:	1e03      	subs	r3, r0, #0
 80016a2:	d001      	beq.n	80016a8 <MX_ADC_Init+0x244>
  {
    Error_Handler();
 80016a4:	f000 ff88 	bl	80025b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
  HAL_ADCEx_Calibration_Start(&hadc);
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <MX_ADC_Init+0x254>)
 80016aa:	0018      	movs	r0, r3
 80016ac:	f002 fc6a 	bl	8003f84 <HAL_ADCEx_Calibration_Start>
  /* USER CODE END ADC_Init 2 */

}
 80016b0:	46c0      	nop			; (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b004      	add	sp, #16
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000214 	.word	0x20000214
 80016bc:	40012400 	.word	0x40012400

080016c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <MX_SPI1_Init+0x80>)
 80016c6:	4a1f      	ldr	r2, [pc, #124]	; (8001744 <MX_SPI1_Init+0x84>)
 80016c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ca:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <MX_SPI1_Init+0x80>)
 80016cc:	2282      	movs	r2, #130	; 0x82
 80016ce:	0052      	lsls	r2, r2, #1
 80016d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016d2:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <MX_SPI1_Init+0x80>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016d8:	4b19      	ldr	r3, [pc, #100]	; (8001740 <MX_SPI1_Init+0x80>)
 80016da:	22e0      	movs	r2, #224	; 0xe0
 80016dc:	00d2      	lsls	r2, r2, #3
 80016de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80016e0:	4b17      	ldr	r3, [pc, #92]	; (8001740 <MX_SPI1_Init+0x80>)
 80016e2:	2202      	movs	r2, #2
 80016e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016e6:	4b16      	ldr	r3, [pc, #88]	; (8001740 <MX_SPI1_Init+0x80>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016ec:	4b14      	ldr	r3, [pc, #80]	; (8001740 <MX_SPI1_Init+0x80>)
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	0092      	lsls	r2, r2, #2
 80016f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <MX_SPI1_Init+0x80>)
 80016f6:	2230      	movs	r2, #48	; 0x30
 80016f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016fa:	4b11      	ldr	r3, [pc, #68]	; (8001740 <MX_SPI1_Init+0x80>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <MX_SPI1_Init+0x80>)
 8001702:	2200      	movs	r2, #0
 8001704:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <MX_SPI1_Init+0x80>)
 8001708:	2200      	movs	r2, #0
 800170a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <MX_SPI1_Init+0x80>)
 800170e:	2207      	movs	r2, #7
 8001710:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <MX_SPI1_Init+0x80>)
 8001714:	2200      	movs	r2, #0
 8001716:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <MX_SPI1_Init+0x80>)
 800171a:	2200      	movs	r2, #0
 800171c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <MX_SPI1_Init+0x80>)
 8001720:	0018      	movs	r0, r3
 8001722:	f005 fc8f 	bl	8007044 <HAL_SPI_Init>
 8001726:	1e03      	subs	r3, r0, #0
 8001728:	d001      	beq.n	800172e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800172a:	f000 ff45 	bl	80025b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  DISP_CS_OFF;
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_SPI1_Init+0x88>)
 8001730:	2201      	movs	r2, #1
 8001732:	2140      	movs	r1, #64	; 0x40
 8001734:	0018      	movs	r0, r3
 8001736:	f002 ffbe 	bl	80046b6 <HAL_GPIO_WritePin>
  /* USER CODE END SPI1_Init 2 */

}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000254 	.word	0x20000254
 8001744:	40013000 	.word	0x40013000
 8001748:	48000400 	.word	0x48000400

0800174c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	0018      	movs	r0, r3
 8001756:	231c      	movs	r3, #28
 8001758:	001a      	movs	r2, r3
 800175a:	2100      	movs	r1, #0
 800175c:	f00c f929 	bl	800d9b2 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <MX_TIM14_Init+0x8c>)
 8001762:	4a1e      	ldr	r2, [pc, #120]	; (80017dc <MX_TIM14_Init+0x90>)
 8001764:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16-1;
 8001766:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <MX_TIM14_Init+0x8c>)
 8001768:	220f      	movs	r2, #15
 800176a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <MX_TIM14_Init+0x8c>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10000-1;
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <MX_TIM14_Init+0x8c>)
 8001774:	4a1a      	ldr	r2, [pc, #104]	; (80017e0 <MX_TIM14_Init+0x94>)
 8001776:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <MX_TIM14_Init+0x8c>)
 800177a:	2200      	movs	r2, #0
 800177c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <MX_TIM14_Init+0x8c>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <MX_TIM14_Init+0x8c>)
 8001786:	0018      	movs	r0, r3
 8001788:	f006 f9b4 	bl	8007af4 <HAL_TIM_Base_Init>
 800178c:	1e03      	subs	r3, r0, #0
 800178e:	d001      	beq.n	8001794 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8001790:	f000 ff12 	bl	80025b8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8001794:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <MX_TIM14_Init+0x8c>)
 8001796:	0018      	movs	r0, r3
 8001798:	f006 fa4e 	bl	8007c38 <HAL_TIM_OC_Init>
 800179c:	1e03      	subs	r3, r0, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 80017a0:	f000 ff0a 	bl	80025b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	2200      	movs	r2, #0
 80017ae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b6:	1d3b      	adds	r3, r7, #4
 80017b8:	2200      	movs	r2, #0
 80017ba:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017bc:	1d39      	adds	r1, r7, #4
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_TIM14_Init+0x8c>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	0018      	movs	r0, r3
 80017c4:	f006 fba6 	bl	8007f14 <HAL_TIM_OC_ConfigChannel>
 80017c8:	1e03      	subs	r3, r0, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80017cc:	f000 fef4 	bl	80025b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80017d0:	46c0      	nop			; (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b008      	add	sp, #32
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200002b8 	.word	0x200002b8
 80017dc:	40002000 	.word	0x40002000
 80017e0:	0000270f 	.word	0x0000270f

080017e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_USART3_UART_Init+0x58>)
 80017ea:	4a15      	ldr	r2, [pc, #84]	; (8001840 <MX_USART3_UART_Init+0x5c>)
 80017ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <MX_USART3_UART_Init+0x58>)
 80017f0:	2296      	movs	r2, #150	; 0x96
 80017f2:	0212      	lsls	r2, r2, #8
 80017f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_USART3_UART_Init+0x58>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_USART3_UART_Init+0x58>)
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_USART3_UART_Init+0x58>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <MX_USART3_UART_Init+0x58>)
 800180a:	220c      	movs	r2, #12
 800180c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <MX_USART3_UART_Init+0x58>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <MX_USART3_UART_Init+0x58>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <MX_USART3_UART_Init+0x58>)
 800181c:	2200      	movs	r2, #0
 800181e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <MX_USART3_UART_Init+0x58>)
 8001822:	2200      	movs	r2, #0
 8001824:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001826:	4b05      	ldr	r3, [pc, #20]	; (800183c <MX_USART3_UART_Init+0x58>)
 8001828:	0018      	movs	r0, r3
 800182a:	f006 fe77 	bl	800851c <HAL_UART_Init>
 800182e:	1e03      	subs	r3, r0, #0
 8001830:	d001      	beq.n	8001836 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001832:	f000 fec1 	bl	80025b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000300 	.word	0x20000300
 8001840:	40004800 	.word	0x40004800

08001844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b08b      	sub	sp, #44	; 0x2c
 8001848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184a:	2414      	movs	r4, #20
 800184c:	193b      	adds	r3, r7, r4
 800184e:	0018      	movs	r0, r3
 8001850:	2314      	movs	r3, #20
 8001852:	001a      	movs	r2, r3
 8001854:	2100      	movs	r1, #0
 8001856:	f00c f8ac 	bl	800d9b2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800185a:	4b74      	ldr	r3, [pc, #464]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 800185c:	695a      	ldr	r2, [r3, #20]
 800185e:	4b73      	ldr	r3, [pc, #460]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 8001860:	2180      	movs	r1, #128	; 0x80
 8001862:	03c9      	lsls	r1, r1, #15
 8001864:	430a      	orrs	r2, r1
 8001866:	615a      	str	r2, [r3, #20]
 8001868:	4b70      	ldr	r3, [pc, #448]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 800186a:	695a      	ldr	r2, [r3, #20]
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	03db      	lsls	r3, r3, #15
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001876:	4b6d      	ldr	r3, [pc, #436]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 8001878:	695a      	ldr	r2, [r3, #20]
 800187a:	4b6c      	ldr	r3, [pc, #432]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 800187c:	2180      	movs	r1, #128	; 0x80
 800187e:	0309      	lsls	r1, r1, #12
 8001880:	430a      	orrs	r2, r1
 8001882:	615a      	str	r2, [r3, #20]
 8001884:	4b69      	ldr	r3, [pc, #420]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 8001886:	695a      	ldr	r2, [r3, #20]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	031b      	lsls	r3, r3, #12
 800188c:	4013      	ands	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	4b66      	ldr	r3, [pc, #408]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 8001894:	695a      	ldr	r2, [r3, #20]
 8001896:	4b65      	ldr	r3, [pc, #404]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 8001898:	2180      	movs	r1, #128	; 0x80
 800189a:	0289      	lsls	r1, r1, #10
 800189c:	430a      	orrs	r2, r1
 800189e:	615a      	str	r2, [r3, #20]
 80018a0:	4b62      	ldr	r3, [pc, #392]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 80018a2:	695a      	ldr	r2, [r3, #20]
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	029b      	lsls	r3, r3, #10
 80018a8:	4013      	ands	r3, r2
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	4b5f      	ldr	r3, [pc, #380]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 80018b0:	695a      	ldr	r2, [r3, #20]
 80018b2:	4b5e      	ldr	r3, [pc, #376]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	02c9      	lsls	r1, r1, #11
 80018b8:	430a      	orrs	r2, r1
 80018ba:	615a      	str	r2, [r3, #20]
 80018bc:	4b5b      	ldr	r3, [pc, #364]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 80018be:	695a      	ldr	r2, [r3, #20]
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	02db      	lsls	r3, r3, #11
 80018c4:	4013      	ands	r3, r2
 80018c6:	607b      	str	r3, [r7, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ca:	4b58      	ldr	r3, [pc, #352]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 80018cc:	695a      	ldr	r2, [r3, #20]
 80018ce:	4b57      	ldr	r3, [pc, #348]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 80018d0:	2180      	movs	r1, #128	; 0x80
 80018d2:	0349      	lsls	r1, r1, #13
 80018d4:	430a      	orrs	r2, r1
 80018d6:	615a      	str	r2, [r3, #20]
 80018d8:	4b54      	ldr	r3, [pc, #336]	; (8001a2c <MX_GPIO_Init+0x1e8>)
 80018da:	695a      	ldr	r2, [r3, #20]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	035b      	lsls	r3, r3, #13
 80018e0:	4013      	ands	r3, r2
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, _5V_BAT_OFF_Pin|SR_CLR_Pin|SR_RCLK_Pin|SR_OE_Pin
 80018e6:	4952      	ldr	r1, [pc, #328]	; (8001a30 <MX_GPIO_Init+0x1ec>)
 80018e8:	4b52      	ldr	r3, [pc, #328]	; (8001a34 <MX_GPIO_Init+0x1f0>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	0018      	movs	r0, r3
 80018ee:	f002 fee2 	bl	80046b6 <HAL_GPIO_WritePin>
                          |DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin|BACKLIGHT_WHITE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 80018f2:	239e      	movs	r3, #158	; 0x9e
 80018f4:	015b      	lsls	r3, r3, #5
 80018f6:	4850      	ldr	r0, [pc, #320]	; (8001a38 <MX_GPIO_Init+0x1f4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	0019      	movs	r1, r3
 80018fc:	f002 fedb 	bl	80046b6 <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin, GPIO_PIN_RESET);
 8001900:	2380      	movs	r3, #128	; 0x80
 8001902:	0219      	lsls	r1, r3, #8
 8001904:	2390      	movs	r3, #144	; 0x90
 8001906:	05db      	lsls	r3, r3, #23
 8001908:	2200      	movs	r2, #0
 800190a:	0018      	movs	r0, r3
 800190c:	f002 fed3 	bl	80046b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : _5V_BAT_OFF_Pin SR_CLR_Pin SR_RCLK_Pin SR_OE_Pin
                           DISP_CS_Pin DISP_RST_Pin BACKLIGHT_GREEN_Pin BACKLIGHT_WHITE_Pin */
  GPIO_InitStruct.Pin = _5V_BAT_OFF_Pin|SR_CLR_Pin|SR_RCLK_Pin|SR_OE_Pin
 8001910:	193b      	adds	r3, r7, r4
 8001912:	4a47      	ldr	r2, [pc, #284]	; (8001a30 <MX_GPIO_Init+0x1ec>)
 8001914:	601a      	str	r2, [r3, #0]
                          |DISP_CS_Pin|DISP_RST_Pin|BACKLIGHT_GREEN_Pin|BACKLIGHT_WHITE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001916:	193b      	adds	r3, r7, r4
 8001918:	2201      	movs	r2, #1
 800191a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	193b      	adds	r3, r7, r4
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	193b      	adds	r3, r7, r4
 8001924:	2200      	movs	r2, #0
 8001926:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001928:	193b      	adds	r3, r7, r4
 800192a:	4a42      	ldr	r2, [pc, #264]	; (8001a34 <MX_GPIO_Init+0x1f0>)
 800192c:	0019      	movs	r1, r3
 800192e:	0010      	movs	r0, r2
 8001930:	f002 fd2c 	bl	800438c <HAL_GPIO_Init>

  /*Configure GPIO pin : HEATER_STATE_Pin */
  GPIO_InitStruct.Pin = HEATER_STATE_Pin;
 8001934:	0021      	movs	r1, r4
 8001936:	187b      	adds	r3, r7, r1
 8001938:	2280      	movs	r2, #128	; 0x80
 800193a:	0152      	lsls	r2, r2, #5
 800193c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193e:	000c      	movs	r4, r1
 8001940:	193b      	adds	r3, r7, r4
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	193b      	adds	r3, r7, r4
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(HEATER_STATE_GPIO_Port, &GPIO_InitStruct);
 800194c:	193b      	adds	r3, r7, r4
 800194e:	4a39      	ldr	r2, [pc, #228]	; (8001a34 <MX_GPIO_Init+0x1f0>)
 8001950:	0019      	movs	r1, r3
 8001952:	0010      	movs	r0, r2
 8001954:	f002 fd1a 	bl	800438c <HAL_GPIO_Init>

  /*Configure GPIO pins : LOAD_MAX_Pin LOAD_MIN_Pin EM_HEATER_CTRL_Pin HEATER_CTRL_Pin
                           BUZZER_Pin */
  GPIO_InitStruct.Pin = LOAD_MAX_Pin|LOAD_MIN_Pin|EM_HEATER_CTRL_Pin|HEATER_CTRL_Pin
 8001958:	0021      	movs	r1, r4
 800195a:	187b      	adds	r3, r7, r1
 800195c:	229e      	movs	r2, #158	; 0x9e
 800195e:	0152      	lsls	r2, r2, #5
 8001960:	601a      	str	r2, [r3, #0]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001962:	000c      	movs	r4, r1
 8001964:	193b      	adds	r3, r7, r4
 8001966:	2201      	movs	r2, #1
 8001968:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	193b      	adds	r3, r7, r4
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001970:	193b      	adds	r3, r7, r4
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001976:	193b      	adds	r3, r7, r4
 8001978:	4a2f      	ldr	r2, [pc, #188]	; (8001a38 <MX_GPIO_Init+0x1f4>)
 800197a:	0019      	movs	r1, r3
 800197c:	0010      	movs	r0, r2
 800197e:	f002 fd05 	bl	800438c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_0_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_0_Pin;
 8001982:	193b      	adds	r3, r7, r4
 8001984:	22c0      	movs	r2, #192	; 0xc0
 8001986:	0092      	lsls	r2, r2, #2
 8001988:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800198a:	193b      	adds	r3, r7, r4
 800198c:	2288      	movs	r2, #136	; 0x88
 800198e:	0352      	lsls	r2, r2, #13
 8001990:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001992:	193b      	adds	r3, r7, r4
 8001994:	2202      	movs	r2, #2
 8001996:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	193a      	adds	r2, r7, r4
 800199a:	2390      	movs	r3, #144	; 0x90
 800199c:	05db      	lsls	r3, r3, #23
 800199e:	0011      	movs	r1, r2
 80019a0:	0018      	movs	r0, r3
 80019a2:	f002 fcf3 	bl	800438c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80019a6:	193b      	adds	r3, r7, r4
 80019a8:	2280      	movs	r2, #128	; 0x80
 80019aa:	00d2      	lsls	r2, r2, #3
 80019ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ae:	193b      	adds	r3, r7, r4
 80019b0:	2200      	movs	r2, #0
 80019b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	193b      	adds	r3, r7, r4
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019ba:	193a      	adds	r2, r7, r4
 80019bc:	2390      	movs	r3, #144	; 0x90
 80019be:	05db      	lsls	r3, r3, #23
 80019c0:	0011      	movs	r1, r2
 80019c2:	0018      	movs	r0, r3
 80019c4:	f002 fce2 	bl	800438c <HAL_GPIO_Init>

  /*Configure GPIO pin : BACKLIGHT_RED_Pin */
  GPIO_InitStruct.Pin = BACKLIGHT_RED_Pin;
 80019c8:	0021      	movs	r1, r4
 80019ca:	187b      	adds	r3, r7, r1
 80019cc:	2280      	movs	r2, #128	; 0x80
 80019ce:	0212      	lsls	r2, r2, #8
 80019d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d2:	000c      	movs	r4, r1
 80019d4:	193b      	adds	r3, r7, r4
 80019d6:	2201      	movs	r2, #1
 80019d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	193b      	adds	r3, r7, r4
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	193b      	adds	r3, r7, r4
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BACKLIGHT_RED_GPIO_Port, &GPIO_InitStruct);
 80019e6:	193a      	adds	r2, r7, r4
 80019e8:	2390      	movs	r3, #144	; 0x90
 80019ea:	05db      	lsls	r3, r3, #23
 80019ec:	0011      	movs	r1, r2
 80019ee:	0018      	movs	r0, r3
 80019f0:	f002 fccc 	bl	800438c <HAL_GPIO_Init>

  /*Configure GPIO pin : CONNECTION_ERR_Pin */
  GPIO_InitStruct.Pin = CONNECTION_ERR_Pin;
 80019f4:	193b      	adds	r3, r7, r4
 80019f6:	2204      	movs	r2, #4
 80019f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fa:	193b      	adds	r3, r7, r4
 80019fc:	2200      	movs	r2, #0
 80019fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	193b      	adds	r3, r7, r4
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CONNECTION_ERR_GPIO_Port, &GPIO_InitStruct);
 8001a06:	193b      	adds	r3, r7, r4
 8001a08:	4a0c      	ldr	r2, [pc, #48]	; (8001a3c <MX_GPIO_Init+0x1f8>)
 8001a0a:	0019      	movs	r1, r3
 8001a0c:	0010      	movs	r0, r2
 8001a0e:	f002 fcbd 	bl	800438c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	2007      	movs	r0, #7
 8001a18:	f002 fc08 	bl	800422c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001a1c:	2007      	movs	r0, #7
 8001a1e:	f002 fc1a 	bl	8004256 <HAL_NVIC_EnableIRQ>

}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	46bd      	mov	sp, r7
 8001a26:	b00b      	add	sp, #44	; 0x2c
 8001a28:	bd90      	pop	{r4, r7, pc}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	0000e3c4 	.word	0x0000e3c4
 8001a34:	48000400 	.word	0x48000400
 8001a38:	48000800 	.word	0x48000800
 8001a3c:	48000c00 	.word	0x48000c00

08001a40 <clkHandler>:

/* USER CODE BEGIN 4 */

//_____Hodiny_____//
static void clkHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	//___nulování všech flagů___//
	flags.time.ten_ms = 0;
 8001a44:	4b3b      	ldr	r3, [pc, #236]	; (8001b34 <clkHandler+0xf4>)
 8001a46:	781a      	ldrb	r2, [r3, #0]
 8001a48:	2101      	movs	r1, #1
 8001a4a:	438a      	bics	r2, r1
 8001a4c:	701a      	strb	r2, [r3, #0]
	flags.time.sec	= 0;
 8001a4e:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <clkHandler+0xf4>)
 8001a50:	781a      	ldrb	r2, [r3, #0]
 8001a52:	2102      	movs	r1, #2
 8001a54:	438a      	bics	r2, r1
 8001a56:	701a      	strb	r2, [r3, #0]
	flags.time.min	= 0;
 8001a58:	4b36      	ldr	r3, [pc, #216]	; (8001b34 <clkHandler+0xf4>)
 8001a5a:	781a      	ldrb	r2, [r3, #0]
 8001a5c:	2104      	movs	r1, #4
 8001a5e:	438a      	bics	r2, r1
 8001a60:	701a      	strb	r2, [r3, #0]
	flags.time.hour	= 0;
 8001a62:	4b34      	ldr	r3, [pc, #208]	; (8001b34 <clkHandler+0xf4>)
 8001a64:	781a      	ldrb	r2, [r3, #0]
 8001a66:	2108      	movs	r1, #8
 8001a68:	438a      	bics	r2, r1
 8001a6a:	701a      	strb	r2, [r3, #0]

	sysTime[SYSTIME_TEN_MS]++;	//uplynulo dalších 10 ms
 8001a6c:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <clkHandler+0xf8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	4b31      	ldr	r3, [pc, #196]	; (8001b38 <clkHandler+0xf8>)
 8001a74:	601a      	str	r2, [r3, #0]

#ifdef __DEBUG_FAST__
	if((sysTime[SYSTIME_TEN_MS] % 10) == 0)	//0,1 s
#else
	if((sysTime[SYSTIME_TEN_MS] % 100) == 0)	//1 s
 8001a76:	4b30      	ldr	r3, [pc, #192]	; (8001b38 <clkHandler+0xf8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2164      	movs	r1, #100	; 0x64
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7fe fbdb 	bl	8000238 <__aeabi_uidivmod>
 8001a82:	1e0b      	subs	r3, r1, #0
 8001a84:	d109      	bne.n	8001a9a <clkHandler+0x5a>
#endif
	{
		sysTime[SYSTIME_SEC]++;
 8001a86:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <clkHandler+0xf8>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <clkHandler+0xf8>)
 8001a8e:	605a      	str	r2, [r3, #4]
		flags.time.sec = 1;
 8001a90:	4b28      	ldr	r3, [pc, #160]	; (8001b34 <clkHandler+0xf4>)
 8001a92:	781a      	ldrb	r2, [r3, #0]
 8001a94:	2102      	movs	r1, #2
 8001a96:	430a      	orrs	r2, r1
 8001a98:	701a      	strb	r2, [r3, #0]
	}

	if(flags.time.sec)	//Uplynula 1 s
 8001a9a:	4b26      	ldr	r3, [pc, #152]	; (8001b34 <clkHandler+0xf4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	079b      	lsls	r3, r3, #30
 8001aa0:	0fdb      	lsrs	r3, r3, #31
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d042      	beq.n	8001b2e <clkHandler+0xee>
	{
		if((sysTime[SYSTIME_SEC] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8001aa8:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <clkHandler+0xf8>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	213c      	movs	r1, #60	; 0x3c
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f7fe fbc2 	bl	8000238 <__aeabi_uidivmod>
 8001ab4:	1e0b      	subs	r3, r1, #0
 8001ab6:	d110      	bne.n	8001ada <clkHandler+0x9a>
 8001ab8:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <clkHandler+0xf8>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00c      	beq.n	8001ada <clkHandler+0x9a>
		{
			sysTime[SYSTIME_SEC] = 0;
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <clkHandler+0xf8>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	605a      	str	r2, [r3, #4]
			sysTime[SYSTIME_MIN]++;
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <clkHandler+0xf8>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <clkHandler+0xf8>)
 8001ace:	609a      	str	r2, [r3, #8]
			flags.time.min = 1;
 8001ad0:	4b18      	ldr	r3, [pc, #96]	; (8001b34 <clkHandler+0xf4>)
 8001ad2:	781a      	ldrb	r2, [r3, #0]
 8001ad4:	2104      	movs	r1, #4
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	701a      	strb	r2, [r3, #0]
		}

		if(flags.time.min)	//Uplynula 1 min
 8001ada:	4b16      	ldr	r3, [pc, #88]	; (8001b34 <clkHandler+0xf4>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	075b      	lsls	r3, r3, #29
 8001ae0:	0fdb      	lsrs	r3, r3, #31
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d022      	beq.n	8001b2e <clkHandler+0xee>
		{
			if((sysTime[SYSTIME_MIN] % 60) == 0 && sysTime[SYSTIME_TEN_MS] != 0)	//1 min
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <clkHandler+0xf8>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	213c      	movs	r1, #60	; 0x3c
 8001aee:	0018      	movs	r0, r3
 8001af0:	f7fe fba2 	bl	8000238 <__aeabi_uidivmod>
 8001af4:	1e0b      	subs	r3, r1, #0
 8001af6:	d11a      	bne.n	8001b2e <clkHandler+0xee>
 8001af8:	4b0f      	ldr	r3, [pc, #60]	; (8001b38 <clkHandler+0xf8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d016      	beq.n	8001b2e <clkHandler+0xee>
			{

				sysTime[SYSTIME_SEC] = 0;
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <clkHandler+0xf8>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	605a      	str	r2, [r3, #4]
				sysTime[SYSTIME_MIN] = 0;
 8001b06:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <clkHandler+0xf8>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
				sysTime[SYSTIME_HOUR]++;
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <clkHandler+0xf8>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	4b09      	ldr	r3, [pc, #36]	; (8001b38 <clkHandler+0xf8>)
 8001b14:	60da      	str	r2, [r3, #12]
				flags.time.hour = 1;
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <clkHandler+0xf4>)
 8001b18:	781a      	ldrb	r2, [r3, #0]
 8001b1a:	2108      	movs	r1, #8
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	701a      	strb	r2, [r3, #0]
				if(sysTime[SYSTIME_HOUR] >= 23)
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <clkHandler+0xf8>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	2b16      	cmp	r3, #22
 8001b26:	d902      	bls.n	8001b2e <clkHandler+0xee>
					sysTime[SYSTIME_HOUR] = 0;
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <clkHandler+0xf8>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
		char timeStamp[30];
		sprintf(timeStamp, "%d : %d : %d\n", sysTime[SYSTIME_HOUR], sysTime[SYSTIME_MIN], sysTime[SYSTIME_SEC]);
		pushStr(USB_Tx_Buffer, timeStamp, strlen(timeStamp));	//odešli �?as
	}
#endif
}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000680 	.word	0x20000680
 8001b38:	20000670 	.word	0x20000670

08001b3c <buttonDebounce>:

//_____Debounce tla�?ítek_____//
static void buttonDebounce(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
	//___nulování flagů___//
	flags.buttons.butt0_ver = 0;
 8001b40:	4b3f      	ldr	r3, [pc, #252]	; (8001c40 <buttonDebounce+0x104>)
 8001b42:	791a      	ldrb	r2, [r3, #4]
 8001b44:	2102      	movs	r1, #2
 8001b46:	438a      	bics	r2, r1
 8001b48:	711a      	strb	r2, [r3, #4]
	flags.buttons.butt1_ver = 0;
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <buttonDebounce+0x104>)
 8001b4c:	791a      	ldrb	r2, [r3, #4]
 8001b4e:	2108      	movs	r1, #8
 8001b50:	438a      	bics	r2, r1
 8001b52:	711a      	strb	r2, [r3, #4]

	if(flags.buttons.butt0_int)	//interrupt tla�?ítka 0
 8001b54:	4b3a      	ldr	r3, [pc, #232]	; (8001c40 <buttonDebounce+0x104>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	07db      	lsls	r3, r3, #31
 8001b5a:	0fdb      	lsrs	r3, r3, #31
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d031      	beq.n	8001bc6 <buttonDebounce+0x8a>
	{
		if(HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port,BUTTON_0_Pin) == GPIO_PIN_SET)
 8001b62:	2380      	movs	r3, #128	; 0x80
 8001b64:	009a      	lsls	r2, r3, #2
 8001b66:	2390      	movs	r3, #144	; 0x90
 8001b68:	05db      	lsls	r3, r3, #23
 8001b6a:	0011      	movs	r1, r2
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	f002 fd85 	bl	800467c <HAL_GPIO_ReadPin>
 8001b72:	0003      	movs	r3, r0
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d107      	bne.n	8001b88 <buttonDebounce+0x4c>
		{
			button0_Debounce++;
 8001b78:	4b32      	ldr	r3, [pc, #200]	; (8001c44 <buttonDebounce+0x108>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <buttonDebounce+0x108>)
 8001b84:	701a      	strb	r2, [r3, #0]
 8001b86:	e007      	b.n	8001b98 <buttonDebounce+0x5c>
		}
		else	//pin tla�?ítka na Low -> šlo o zákmit
		{
			button0_Debounce = 0;
 8001b88:	4b2e      	ldr	r3, [pc, #184]	; (8001c44 <buttonDebounce+0x108>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt0_int = 0;
 8001b8e:	4b2c      	ldr	r3, [pc, #176]	; (8001c40 <buttonDebounce+0x104>)
 8001b90:	791a      	ldrb	r2, [r3, #4]
 8001b92:	2101      	movs	r1, #1
 8001b94:	438a      	bics	r2, r1
 8001b96:	711a      	strb	r2, [r3, #4]
		}
		if(button0_Debounce >= 5)	//pin tla�?ítka na High 5*10 ms -> ustálený stisk
 8001b98:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <buttonDebounce+0x108>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d911      	bls.n	8001bc6 <buttonDebounce+0x8a>
		{
			flags.buttons.butt0_ver = 1;
 8001ba2:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <buttonDebounce+0x104>)
 8001ba4:	791a      	ldrb	r2, [r3, #4]
 8001ba6:	2102      	movs	r1, #2
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt0_int = 0;
 8001bac:	4b24      	ldr	r3, [pc, #144]	; (8001c40 <buttonDebounce+0x104>)
 8001bae:	791a      	ldrb	r2, [r3, #4]
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	438a      	bics	r2, r1
 8001bb4:	711a      	strb	r2, [r3, #4]
			button0_Debounce = 0;
 8001bb6:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <buttonDebounce+0x108>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]

			flags.ui.active = 1;
 8001bbc:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <buttonDebounce+0x104>)
 8001bbe:	7c1a      	ldrb	r2, [r3, #16]
 8001bc0:	2120      	movs	r1, #32
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	741a      	strb	r2, [r3, #16]
			//writeChar('a', 1, 5);
#endif
		}
	}

	if(flags.buttons.butt1_int)	//interrupt tla�?ítka 1
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <buttonDebounce+0x104>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	075b      	lsls	r3, r3, #29
 8001bcc:	0fdb      	lsrs	r3, r3, #31
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d031      	beq.n	8001c38 <buttonDebounce+0xfc>
	{
		if(HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port,BUTTON_1_Pin) == GPIO_PIN_SET)
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	005a      	lsls	r2, r3, #1
 8001bd8:	2390      	movs	r3, #144	; 0x90
 8001bda:	05db      	lsls	r3, r3, #23
 8001bdc:	0011      	movs	r1, r2
 8001bde:	0018      	movs	r0, r3
 8001be0:	f002 fd4c 	bl	800467c <HAL_GPIO_ReadPin>
 8001be4:	0003      	movs	r3, r0
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d107      	bne.n	8001bfa <buttonDebounce+0xbe>
		{
			button1_Debounce++;
 8001bea:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <buttonDebounce+0x10c>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <buttonDebounce+0x10c>)
 8001bf6:	701a      	strb	r2, [r3, #0]
 8001bf8:	e007      	b.n	8001c0a <buttonDebounce+0xce>
		}
		else	//pin tla�?ítka na Low -> šlo o zákmit
		{
			button1_Debounce = 0;
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <buttonDebounce+0x10c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
			flags.buttons.butt1_int = 0;
 8001c00:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <buttonDebounce+0x104>)
 8001c02:	791a      	ldrb	r2, [r3, #4]
 8001c04:	2104      	movs	r1, #4
 8001c06:	438a      	bics	r2, r1
 8001c08:	711a      	strb	r2, [r3, #4]
		}
		if(button1_Debounce >= 5)	//pin tla�?ítka na High 5*10 ms -> ustálený stisk
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <buttonDebounce+0x10c>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d911      	bls.n	8001c38 <buttonDebounce+0xfc>
		{
			flags.buttons.butt1_ver = 1;
 8001c14:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <buttonDebounce+0x104>)
 8001c16:	791a      	ldrb	r2, [r3, #4]
 8001c18:	2108      	movs	r1, #8
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	711a      	strb	r2, [r3, #4]
			flags.buttons.butt1_int = 0;
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <buttonDebounce+0x104>)
 8001c20:	791a      	ldrb	r2, [r3, #4]
 8001c22:	2104      	movs	r1, #4
 8001c24:	438a      	bics	r2, r1
 8001c26:	711a      	strb	r2, [r3, #4]
			button1_Debounce = 0;
 8001c28:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <buttonDebounce+0x10c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]

			flags.ui.active = 1;
 8001c2e:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <buttonDebounce+0x104>)
 8001c30:	7c1a      	ldrb	r2, [r3, #16]
 8001c32:	2120      	movs	r1, #32
 8001c34:	430a      	orrs	r2, r1
 8001c36:	741a      	strb	r2, [r3, #16]
#ifdef __DEBUG_BUTT__
			HAL_GPIO_TogglePin(BACKLIGHT_RED_GPIO_Port, BACKLIGHT_RED_Pin);
#endif
		}
	}
}
 8001c38:	46c0      	nop			; (mov r8, r8)
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	20000680 	.word	0x20000680
 8001c44:	2000069c 	.word	0x2000069c
 8001c48:	2000069d 	.word	0x2000069d

08001c4c <dispHandler>:

//_____Obsluha výtisků textu na displej_____//
static void dispHandler()
{
 8001c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4e:	b0bd      	sub	sp, #244	; 0xf4
 8001c50:	af02      	add	r7, sp, #8
	char emptyString[] = "                ";
 8001c52:	25cc      	movs	r5, #204	; 0xcc
 8001c54:	197b      	adds	r3, r7, r5
 8001c56:	4ada      	ldr	r2, [pc, #872]	; (8001fc0 <dispHandler+0x374>)
 8001c58:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c5a:	c313      	stmia	r3!, {r0, r1, r4}
 8001c5c:	6811      	ldr	r1, [r2, #0]
 8001c5e:	6019      	str	r1, [r3, #0]
 8001c60:	7912      	ldrb	r2, [r2, #4]
 8001c62:	711a      	strb	r2, [r3, #4]
	char* strings[4] = {emptyString};
 8001c64:	24bc      	movs	r4, #188	; 0xbc
 8001c66:	193b      	adds	r3, r7, r4
 8001c68:	0018      	movs	r0, r3
 8001c6a:	2310      	movs	r3, #16
 8001c6c:	001a      	movs	r2, r3
 8001c6e:	2100      	movs	r1, #0
 8001c70:	f00b fe9f 	bl	800d9b2 <memset>
 8001c74:	193b      	adds	r3, r7, r4
 8001c76:	197a      	adds	r2, r7, r5
 8001c78:	601a      	str	r2, [r3, #0]
	ALIGN align[4] = {CENTER};
 8001c7a:	25b8      	movs	r5, #184	; 0xb8
 8001c7c:	197b      	adds	r3, r7, r5
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	197b      	adds	r3, r7, r5
 8001c84:	2202      	movs	r2, #2
 8001c86:	701a      	strb	r2, [r3, #0]
		strings[3] = ADC_value;
		writeRow(strings[3], strlen(strings[3]), 3, align[3]);
	}
#endif

	if(flags.testProgress && !flags.instructions.stopRequest)
 8001c88:	4bce      	ldr	r3, [pc, #824]	; (8001fc4 <dispHandler+0x378>)
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	079b      	lsls	r3, r3, #30
 8001c8e:	0fdb      	lsrs	r3, r3, #31
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d100      	bne.n	8001c98 <dispHandler+0x4c>
 8001c96:	e0f6      	b.n	8001e86 <dispHandler+0x23a>
 8001c98:	4bca      	ldr	r3, [pc, #808]	; (8001fc4 <dispHandler+0x378>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	079b      	lsls	r3, r3, #30
 8001c9e:	0fdb      	lsrs	r3, r3, #31
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d000      	beq.n	8001ca8 <dispHandler+0x5c>
 8001ca6:	e0ee      	b.n	8001e86 <dispHandler+0x23a>
	{
		if(currentPhase() != WAITING)
 8001ca8:	f001 f87e 	bl	8002da8 <currentPhase>
 8001cac:	1e03      	subs	r3, r0, #0
 8001cae:	d010      	beq.n	8001cd2 <dispHandler+0x86>
		{
			char supplyInTestingNum[6];
			sprintf(supplyInTestingNum, "%d/%d", supplyToTest+1, regCount);
 8001cb0:	4bc5      	ldr	r3, [pc, #788]	; (8001fc8 <dispHandler+0x37c>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	4bc4      	ldr	r3, [pc, #784]	; (8001fcc <dispHandler+0x380>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	49c4      	ldr	r1, [pc, #784]	; (8001fd0 <dispHandler+0x384>)
 8001cbe:	26b0      	movs	r6, #176	; 0xb0
 8001cc0:	19b8      	adds	r0, r7, r6
 8001cc2:	f00b ff73 	bl	800dbac <siprintf>

			strings[0] = supplyInTestingNum;
 8001cc6:	193b      	adds	r3, r7, r4
 8001cc8:	19ba      	adds	r2, r7, r6
 8001cca:	601a      	str	r2, [r3, #0]
			align[0] = LEFT;
 8001ccc:	197b      	adds	r3, r7, r5
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
		}

		switch(currentPhase())
 8001cd2:	f001 f869 	bl	8002da8 <currentPhase>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	2b06      	cmp	r3, #6
 8001cda:	d900      	bls.n	8001cde <dispHandler+0x92>
 8001cdc:	e087      	b.n	8001dee <dispHandler+0x1a2>
 8001cde:	009a      	lsls	r2, r3, #2
 8001ce0:	4bbc      	ldr	r3, [pc, #752]	; (8001fd4 <dispHandler+0x388>)
 8001ce2:	18d3      	adds	r3, r2, r3
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	469f      	mov	pc, r3
		{
		case START:
		{
			char start1[] = "Spousteni";
 8001ce8:	21a4      	movs	r1, #164	; 0xa4
 8001cea:	187b      	adds	r3, r7, r1
 8001cec:	4aba      	ldr	r2, [pc, #744]	; (8001fd8 <dispHandler+0x38c>)
 8001cee:	ca11      	ldmia	r2!, {r0, r4}
 8001cf0:	c311      	stmia	r3!, {r0, r4}
 8001cf2:	8812      	ldrh	r2, [r2, #0]
 8001cf4:	801a      	strh	r2, [r3, #0]
			strings[1] = start1;
 8001cf6:	23bc      	movs	r3, #188	; 0xbc
 8001cf8:	18fb      	adds	r3, r7, r3
 8001cfa:	187a      	adds	r2, r7, r1
 8001cfc:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001cfe:	23b8      	movs	r3, #184	; 0xb8
 8001d00:	18fb      	adds	r3, r7, r3
 8001d02:	2202      	movs	r2, #2
 8001d04:	705a      	strb	r2, [r3, #1]

			break;
 8001d06:	e091      	b.n	8001e2c <dispHandler+0x1e0>
		}
		case START_DONE:
		{
			char start1[] = "Spousteni";
 8001d08:	2198      	movs	r1, #152	; 0x98
 8001d0a:	187b      	adds	r3, r7, r1
 8001d0c:	4ab2      	ldr	r2, [pc, #712]	; (8001fd8 <dispHandler+0x38c>)
 8001d0e:	ca11      	ldmia	r2!, {r0, r4}
 8001d10:	c311      	stmia	r3!, {r0, r4}
 8001d12:	8812      	ldrh	r2, [r2, #0]
 8001d14:	801a      	strh	r2, [r3, #0]
			char start2[] = "dokonceno";
 8001d16:	208c      	movs	r0, #140	; 0x8c
 8001d18:	183b      	adds	r3, r7, r0
 8001d1a:	4ab0      	ldr	r2, [pc, #704]	; (8001fdc <dispHandler+0x390>)
 8001d1c:	ca30      	ldmia	r2!, {r4, r5}
 8001d1e:	c330      	stmia	r3!, {r4, r5}
 8001d20:	8812      	ldrh	r2, [r2, #0]
 8001d22:	801a      	strh	r2, [r3, #0]
			strings[1] = start1;
 8001d24:	24bc      	movs	r4, #188	; 0xbc
 8001d26:	193b      	adds	r3, r7, r4
 8001d28:	187a      	adds	r2, r7, r1
 8001d2a:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001d2c:	21b8      	movs	r1, #184	; 0xb8
 8001d2e:	187b      	adds	r3, r7, r1
 8001d30:	2202      	movs	r2, #2
 8001d32:	705a      	strb	r2, [r3, #1]
			strings[2] = start2;
 8001d34:	193b      	adds	r3, r7, r4
 8001d36:	183a      	adds	r2, r7, r0
 8001d38:	609a      	str	r2, [r3, #8]
			align[2] = CENTER;
 8001d3a:	187b      	adds	r3, r7, r1
 8001d3c:	2202      	movs	r2, #2
 8001d3e:	709a      	strb	r2, [r3, #2]
			break;
 8001d40:	e074      	b.n	8001e2c <dispHandler+0x1e0>
		}
		case MAIN_TEST:
		{
			char main1[] = "Hlavni test";
 8001d42:	2180      	movs	r1, #128	; 0x80
 8001d44:	187b      	adds	r3, r7, r1
 8001d46:	4aa6      	ldr	r2, [pc, #664]	; (8001fe0 <dispHandler+0x394>)
 8001d48:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001d4a:	c331      	stmia	r3!, {r0, r4, r5}
			strings[1] = main1;
 8001d4c:	23bc      	movs	r3, #188	; 0xbc
 8001d4e:	18fb      	adds	r3, r7, r3
 8001d50:	187a      	adds	r2, r7, r1
 8001d52:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001d54:	23b8      	movs	r3, #184	; 0xb8
 8001d56:	18fb      	adds	r3, r7, r3
 8001d58:	2202      	movs	r2, #2
 8001d5a:	705a      	strb	r2, [r3, #1]
			break;
 8001d5c:	e066      	b.n	8001e2c <dispHandler+0x1e0>
		}
		case MAIN_TEST_DONE:
		{
			char main1[] = "Hlavni test";
 8001d5e:	2174      	movs	r1, #116	; 0x74
 8001d60:	187b      	adds	r3, r7, r1
 8001d62:	4a9f      	ldr	r2, [pc, #636]	; (8001fe0 <dispHandler+0x394>)
 8001d64:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001d66:	c331      	stmia	r3!, {r0, r4, r5}
			char main2[] = "dokoncen";
 8001d68:	2068      	movs	r0, #104	; 0x68
 8001d6a:	183b      	adds	r3, r7, r0
 8001d6c:	4a9d      	ldr	r2, [pc, #628]	; (8001fe4 <dispHandler+0x398>)
 8001d6e:	ca30      	ldmia	r2!, {r4, r5}
 8001d70:	c330      	stmia	r3!, {r4, r5}
 8001d72:	7812      	ldrb	r2, [r2, #0]
 8001d74:	701a      	strb	r2, [r3, #0]
			strings[1] = main1;
 8001d76:	24bc      	movs	r4, #188	; 0xbc
 8001d78:	193b      	adds	r3, r7, r4
 8001d7a:	187a      	adds	r2, r7, r1
 8001d7c:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001d7e:	21b8      	movs	r1, #184	; 0xb8
 8001d80:	187b      	adds	r3, r7, r1
 8001d82:	2202      	movs	r2, #2
 8001d84:	705a      	strb	r2, [r3, #1]
			strings[2] = main2;
 8001d86:	193b      	adds	r3, r7, r4
 8001d88:	183a      	adds	r2, r7, r0
 8001d8a:	609a      	str	r2, [r3, #8]
			align[2] = CENTER;
 8001d8c:	187b      	adds	r3, r7, r1
 8001d8e:	2202      	movs	r2, #2
 8001d90:	709a      	strb	r2, [r3, #2]
			break;
 8001d92:	e04b      	b.n	8001e2c <dispHandler+0x1e0>
		}
		case BATTERY_TEST:
		{
			char bat1[] = "Test baterie";
 8001d94:	2158      	movs	r1, #88	; 0x58
 8001d96:	187b      	adds	r3, r7, r1
 8001d98:	4a93      	ldr	r2, [pc, #588]	; (8001fe8 <dispHandler+0x39c>)
 8001d9a:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001d9c:	c331      	stmia	r3!, {r0, r4, r5}
 8001d9e:	7812      	ldrb	r2, [r2, #0]
 8001da0:	701a      	strb	r2, [r3, #0]
			strings[1] = bat1;
 8001da2:	23bc      	movs	r3, #188	; 0xbc
 8001da4:	18fb      	adds	r3, r7, r3
 8001da6:	187a      	adds	r2, r7, r1
 8001da8:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001daa:	23b8      	movs	r3, #184	; 0xb8
 8001dac:	18fb      	adds	r3, r7, r3
 8001dae:	2202      	movs	r2, #2
 8001db0:	705a      	strb	r2, [r3, #1]
			break;
 8001db2:	e03b      	b.n	8001e2c <dispHandler+0x1e0>
		}
		case BATTERY_TEST_DONE:
		{
			char bat1[] = "Test baterie";
 8001db4:	2148      	movs	r1, #72	; 0x48
 8001db6:	187b      	adds	r3, r7, r1
 8001db8:	4a8b      	ldr	r2, [pc, #556]	; (8001fe8 <dispHandler+0x39c>)
 8001dba:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001dbc:	c331      	stmia	r3!, {r0, r4, r5}
 8001dbe:	7812      	ldrb	r2, [r2, #0]
 8001dc0:	701a      	strb	r2, [r3, #0]
			char bat2[] = "dokoncen";
 8001dc2:	203c      	movs	r0, #60	; 0x3c
 8001dc4:	183b      	adds	r3, r7, r0
 8001dc6:	4a87      	ldr	r2, [pc, #540]	; (8001fe4 <dispHandler+0x398>)
 8001dc8:	ca30      	ldmia	r2!, {r4, r5}
 8001dca:	c330      	stmia	r3!, {r4, r5}
 8001dcc:	7812      	ldrb	r2, [r2, #0]
 8001dce:	701a      	strb	r2, [r3, #0]
			strings[1] = bat1;
 8001dd0:	24bc      	movs	r4, #188	; 0xbc
 8001dd2:	193b      	adds	r3, r7, r4
 8001dd4:	187a      	adds	r2, r7, r1
 8001dd6:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001dd8:	21b8      	movs	r1, #184	; 0xb8
 8001dda:	187b      	adds	r3, r7, r1
 8001ddc:	2202      	movs	r2, #2
 8001dde:	705a      	strb	r2, [r3, #1]
			strings[2] = bat2;
 8001de0:	193b      	adds	r3, r7, r4
 8001de2:	183a      	adds	r2, r7, r0
 8001de4:	609a      	str	r2, [r3, #8]
			align[2] = CENTER;
 8001de6:	187b      	adds	r3, r7, r1
 8001de8:	2202      	movs	r2, #2
 8001dea:	709a      	strb	r2, [r3, #2]
			break;
 8001dec:	e01e      	b.n	8001e2c <dispHandler+0x1e0>
		}
		default:
		{
			char default1[] = "Zahoreni";
 8001dee:	2030      	movs	r0, #48	; 0x30
 8001df0:	183b      	adds	r3, r7, r0
 8001df2:	4a7e      	ldr	r2, [pc, #504]	; (8001fec <dispHandler+0x3a0>)
 8001df4:	ca12      	ldmia	r2!, {r1, r4}
 8001df6:	c312      	stmia	r3!, {r1, r4}
 8001df8:	7812      	ldrb	r2, [r2, #0]
 8001dfa:	701a      	strb	r2, [r3, #0]
			char default2[] = "zdroju";
 8001dfc:	2428      	movs	r4, #40	; 0x28
 8001dfe:	193b      	adds	r3, r7, r4
 8001e00:	4a7b      	ldr	r2, [pc, #492]	; (8001ff0 <dispHandler+0x3a4>)
 8001e02:	6811      	ldr	r1, [r2, #0]
 8001e04:	6019      	str	r1, [r3, #0]
 8001e06:	8891      	ldrh	r1, [r2, #4]
 8001e08:	8099      	strh	r1, [r3, #4]
 8001e0a:	7992      	ldrb	r2, [r2, #6]
 8001e0c:	719a      	strb	r2, [r3, #6]
			strings[1] = default1;
 8001e0e:	21bc      	movs	r1, #188	; 0xbc
 8001e10:	187b      	adds	r3, r7, r1
 8001e12:	183a      	adds	r2, r7, r0
 8001e14:	605a      	str	r2, [r3, #4]
			align[1] = CENTER;
 8001e16:	20b8      	movs	r0, #184	; 0xb8
 8001e18:	183b      	adds	r3, r7, r0
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	705a      	strb	r2, [r3, #1]
			strings[2] = default2;
 8001e1e:	187b      	adds	r3, r7, r1
 8001e20:	193a      	adds	r2, r7, r4
 8001e22:	609a      	str	r2, [r3, #8]
			align[2] = CENTER;
 8001e24:	183b      	adds	r3, r7, r0
 8001e26:	2202      	movs	r2, #2
 8001e28:	709a      	strb	r2, [r3, #2]

			break;
 8001e2a:	46c0      	nop			; (mov r8, r8)
		}
		}

		for(int i = 0; i < 4; i++)
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	22e4      	movs	r2, #228	; 0xe4
 8001e30:	18ba      	adds	r2, r7, r2
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	e022      	b.n	8001e7c <dispHandler+0x230>
		{
			writeRow(strings[i], strlen(strings[i]), i, align[i]);
 8001e36:	21bc      	movs	r1, #188	; 0xbc
 8001e38:	187b      	adds	r3, r7, r1
 8001e3a:	25e4      	movs	r5, #228	; 0xe4
 8001e3c:	197a      	adds	r2, r7, r5
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	0092      	lsls	r2, r2, #2
 8001e42:	58d4      	ldr	r4, [r2, r3]
 8001e44:	187b      	adds	r3, r7, r1
 8001e46:	197a      	adds	r2, r7, r5
 8001e48:	6812      	ldr	r2, [r2, #0]
 8001e4a:	0092      	lsls	r2, r2, #2
 8001e4c:	58d3      	ldr	r3, [r2, r3]
 8001e4e:	0018      	movs	r0, r3
 8001e50:	f7fe f95a 	bl	8000108 <strlen>
 8001e54:	0003      	movs	r3, r0
 8001e56:	b2d9      	uxtb	r1, r3
 8001e58:	197b      	adds	r3, r7, r5
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	b2d8      	uxtb	r0, r3
 8001e5e:	23b8      	movs	r3, #184	; 0xb8
 8001e60:	18fa      	adds	r2, r7, r3
 8001e62:	197b      	adds	r3, r7, r5
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	18d3      	adds	r3, r2, r3
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	0002      	movs	r2, r0
 8001e6c:	0020      	movs	r0, r4
 8001e6e:	f7ff f90b 	bl	8001088 <writeRow>
		for(int i = 0; i < 4; i++)
 8001e72:	197b      	adds	r3, r7, r5
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	3301      	adds	r3, #1
 8001e78:	197a      	adds	r2, r7, r5
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	23e4      	movs	r3, #228	; 0xe4
 8001e7e:	18fb      	adds	r3, r7, r3
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	ddd7      	ble.n	8001e36 <dispHandler+0x1ea>
		}
	}

	//_____Zobrazení �?asu u hlavních testů_____//
	if(flags.time.sec)
 8001e86:	4b4f      	ldr	r3, [pc, #316]	; (8001fc4 <dispHandler+0x378>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	079b      	lsls	r3, r3, #30
 8001e8c:	0fdb      	lsrs	r3, r3, #31
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d051      	beq.n	8001f38 <dispHandler+0x2ec>
	{
		switch(currentPhase())
 8001e94:	f000 ff88 	bl	8002da8 <currentPhase>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d002      	beq.n	8001ea4 <dispHandler+0x258>
 8001e9e:	2b05      	cmp	r3, #5
 8001ea0:	d028      	beq.n	8001ef4 <dispHandler+0x2a8>
			sprintf(time, "%lu:%lu", 14-sysTime[SYSTIME_MIN], 59-sysTime[SYSTIME_SEC]);
			writeRow(time, strlen(time), 2, CENTER);
			break;
		}
		default:
			break;
 8001ea2:	e04a      	b.n	8001f3a <dispHandler+0x2ee>
			char time[9] = {0};
 8001ea4:	251c      	movs	r5, #28
 8001ea6:	197b      	adds	r3, r7, r5
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	3304      	adds	r3, #4
 8001eae:	2205      	movs	r2, #5
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f00b fd7d 	bl	800d9b2 <memset>
			sprintf(time, "%lu:%lu:%lu", 2-sysTime[SYSTIME_HOUR], 59-sysTime[SYSTIME_MIN], 59-sysTime[SYSTIME_SEC]);
 8001eb8:	4b4e      	ldr	r3, [pc, #312]	; (8001ff4 <dispHandler+0x3a8>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	1ad2      	subs	r2, r2, r3
 8001ec0:	4b4c      	ldr	r3, [pc, #304]	; (8001ff4 <dispHandler+0x3a8>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	213b      	movs	r1, #59	; 0x3b
 8001ec6:	1acc      	subs	r4, r1, r3
 8001ec8:	4b4a      	ldr	r3, [pc, #296]	; (8001ff4 <dispHandler+0x3a8>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	213b      	movs	r1, #59	; 0x3b
 8001ece:	1acb      	subs	r3, r1, r3
 8001ed0:	4949      	ldr	r1, [pc, #292]	; (8001ff8 <dispHandler+0x3ac>)
 8001ed2:	1978      	adds	r0, r7, r5
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	0023      	movs	r3, r4
 8001ed8:	f00b fe68 	bl	800dbac <siprintf>
			writeRow(time, strlen(time), 2, CENTER);
 8001edc:	197b      	adds	r3, r7, r5
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f7fe f912 	bl	8000108 <strlen>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	b2d9      	uxtb	r1, r3
 8001ee8:	1978      	adds	r0, r7, r5
 8001eea:	2302      	movs	r3, #2
 8001eec:	2202      	movs	r2, #2
 8001eee:	f7ff f8cb 	bl	8001088 <writeRow>
			break;
 8001ef2:	e022      	b.n	8001f3a <dispHandler+0x2ee>
			char time[9] = {0};
 8001ef4:	2410      	movs	r4, #16
 8001ef6:	193b      	adds	r3, r7, r4
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	3304      	adds	r3, #4
 8001efe:	2205      	movs	r2, #5
 8001f00:	2100      	movs	r1, #0
 8001f02:	0018      	movs	r0, r3
 8001f04:	f00b fd55 	bl	800d9b2 <memset>
			sprintf(time, "%lu:%lu", 14-sysTime[SYSTIME_MIN], 59-sysTime[SYSTIME_SEC]);
 8001f08:	4b3a      	ldr	r3, [pc, #232]	; (8001ff4 <dispHandler+0x3a8>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	220e      	movs	r2, #14
 8001f0e:	1ad2      	subs	r2, r2, r3
 8001f10:	4b38      	ldr	r3, [pc, #224]	; (8001ff4 <dispHandler+0x3a8>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	213b      	movs	r1, #59	; 0x3b
 8001f16:	1acb      	subs	r3, r1, r3
 8001f18:	4938      	ldr	r1, [pc, #224]	; (8001ffc <dispHandler+0x3b0>)
 8001f1a:	1938      	adds	r0, r7, r4
 8001f1c:	f00b fe46 	bl	800dbac <siprintf>
			writeRow(time, strlen(time), 2, CENTER);
 8001f20:	193b      	adds	r3, r7, r4
 8001f22:	0018      	movs	r0, r3
 8001f24:	f7fe f8f0 	bl	8000108 <strlen>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	b2d9      	uxtb	r1, r3
 8001f2c:	1938      	adds	r0, r7, r4
 8001f2e:	2302      	movs	r3, #2
 8001f30:	2202      	movs	r2, #2
 8001f32:	f7ff f8a9 	bl	8001088 <writeRow>
			break;
 8001f36:	e000      	b.n	8001f3a <dispHandler+0x2ee>
		}
	}
 8001f38:	46c0      	nop			; (mov r8, r8)

	if(flags.instructions.stopRequest || flags.testCanceled)
 8001f3a:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <dispHandler+0x378>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	079b      	lsls	r3, r3, #30
 8001f40:	0fdb      	lsrs	r3, r3, #31
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d106      	bne.n	8001f56 <dispHandler+0x30a>
 8001f48:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <dispHandler+0x378>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	075b      	lsls	r3, r3, #29
 8001f4e:	0fdb      	lsrs	r3, r3, #31
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d030      	beq.n	8001fb8 <dispHandler+0x36c>
	{
		char err[] = "Preruseni";
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	4a29      	ldr	r2, [pc, #164]	; (8002000 <dispHandler+0x3b4>)
 8001f5a:	ca03      	ldmia	r2!, {r0, r1}
 8001f5c:	c303      	stmia	r3!, {r0, r1}
 8001f5e:	8812      	ldrh	r2, [r2, #0]
 8001f60:	801a      	strh	r2, [r3, #0]
		strings[1] = err;
 8001f62:	23bc      	movs	r3, #188	; 0xbc
 8001f64:	18fb      	adds	r3, r7, r3
 8001f66:	1d3a      	adds	r2, r7, #4
 8001f68:	605a      	str	r2, [r3, #4]

		for(int i = 0; i < 4; i++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	22e0      	movs	r2, #224	; 0xe0
 8001f6e:	18ba      	adds	r2, r7, r2
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e01c      	b.n	8001fae <dispHandler+0x362>
		{
			writeRow(strings[i], strlen(strings[i]), i, CENTER);
 8001f74:	21bc      	movs	r1, #188	; 0xbc
 8001f76:	187b      	adds	r3, r7, r1
 8001f78:	25e0      	movs	r5, #224	; 0xe0
 8001f7a:	197a      	adds	r2, r7, r5
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	0092      	lsls	r2, r2, #2
 8001f80:	58d4      	ldr	r4, [r2, r3]
 8001f82:	187b      	adds	r3, r7, r1
 8001f84:	197a      	adds	r2, r7, r5
 8001f86:	6812      	ldr	r2, [r2, #0]
 8001f88:	0092      	lsls	r2, r2, #2
 8001f8a:	58d3      	ldr	r3, [r2, r3]
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f7fe f8bb 	bl	8000108 <strlen>
 8001f92:	0003      	movs	r3, r0
 8001f94:	b2d9      	uxtb	r1, r3
 8001f96:	197b      	adds	r3, r7, r5
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	0020      	movs	r0, r4
 8001fa0:	f7ff f872 	bl	8001088 <writeRow>
		for(int i = 0; i < 4; i++)
 8001fa4:	197b      	adds	r3, r7, r5
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	197a      	adds	r2, r7, r5
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	23e0      	movs	r3, #224	; 0xe0
 8001fb0:	18fb      	adds	r3, r7, r3
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b03      	cmp	r3, #3
 8001fb6:	dddd      	ble.n	8001f74 <dispHandler+0x328>
		}
	}
}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b03b      	add	sp, #236	; 0xec
 8001fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fc0:	0800e2e0 	.word	0x0800e2e0
 8001fc4:	20000680 	.word	0x20000680
 8001fc8:	2000069e 	.word	0x2000069e
 8001fcc:	200006b8 	.word	0x200006b8
 8001fd0:	0800e2c4 	.word	0x0800e2c4
 8001fd4:	0800e470 	.word	0x0800e470
 8001fd8:	0800e2f4 	.word	0x0800e2f4
 8001fdc:	0800e300 	.word	0x0800e300
 8001fe0:	0800e30c 	.word	0x0800e30c
 8001fe4:	0800e318 	.word	0x0800e318
 8001fe8:	0800e324 	.word	0x0800e324
 8001fec:	0800e2b0 	.word	0x0800e2b0
 8001ff0:	0800e2bc 	.word	0x0800e2bc
 8001ff4:	20000670 	.word	0x20000670
 8001ff8:	0800e2cc 	.word	0x0800e2cc
 8001ffc:	0800e2d8 	.word	0x0800e2d8
 8002000:	0800e334 	.word	0x0800e334

08002004 <UI_Handler>:

//_____Obsluha piezo + podsvícení displeje_____//
static void UI_Handler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
	if((sysTime[SYSTIME_TEN_MS] - startTime_LCD) >= 6000)	//1min
	{
		setColour(BACKLIGHT_OFF);
	}*/

	if(flags.conErr)
 8002008:	4b9e      	ldr	r3, [pc, #632]	; (8002284 <UI_Handler+0x280>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	065b      	lsls	r3, r3, #25
 800200e:	0fdb      	lsrs	r3, r3, #31
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d004      	beq.n	8002020 <UI_Handler+0x1c>
		flags.ui.error = 1;
 8002016:	4b9b      	ldr	r3, [pc, #620]	; (8002284 <UI_Handler+0x280>)
 8002018:	7c1a      	ldrb	r2, [r3, #16]
 800201a:	2104      	movs	r1, #4
 800201c:	430a      	orrs	r2, r1
 800201e:	741a      	strb	r2, [r3, #16]

	flags.ui.active = 0;
 8002020:	4b98      	ldr	r3, [pc, #608]	; (8002284 <UI_Handler+0x280>)
 8002022:	7c1a      	ldrb	r2, [r3, #16]
 8002024:	2120      	movs	r1, #32
 8002026:	438a      	bics	r2, r1
 8002028:	741a      	strb	r2, [r3, #16]

	static uint32_t startTime;	//proměnná pro �?asování dějů

	//___Nastavení stavu podle požadavků___//
	//___Stavy výše mají vyšší prioritu (error nejvyšší)___//
	if(flags.ui.error && (UI_State != ERROR))
 800202a:	4b96      	ldr	r3, [pc, #600]	; (8002284 <UI_Handler+0x280>)
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	075b      	lsls	r3, r3, #29
 8002030:	0fdb      	lsrs	r3, r3, #31
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00b      	beq.n	8002050 <UI_Handler+0x4c>
 8002038:	4b93      	ldr	r3, [pc, #588]	; (8002288 <UI_Handler+0x284>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b03      	cmp	r3, #3
 800203e:	d007      	beq.n	8002050 <UI_Handler+0x4c>
	{
		UI_State = ERROR;
 8002040:	4b91      	ldr	r3, [pc, #580]	; (8002288 <UI_Handler+0x284>)
 8002042:	2203      	movs	r2, #3
 8002044:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 8002046:	4b91      	ldr	r3, [pc, #580]	; (800228c <UI_Handler+0x288>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4b91      	ldr	r3, [pc, #580]	; (8002290 <UI_Handler+0x28c>)
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	e05e      	b.n	800210e <UI_Handler+0x10a>
	}
	else if(flags.ui.notice && (UI_State == OFF))
 8002050:	4b8c      	ldr	r3, [pc, #560]	; (8002284 <UI_Handler+0x280>)
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	071b      	lsls	r3, r3, #28
 8002056:	0fdb      	lsrs	r3, r3, #31
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d010      	beq.n	8002080 <UI_Handler+0x7c>
 800205e:	4b8a      	ldr	r3, [pc, #552]	; (8002288 <UI_Handler+0x284>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10c      	bne.n	8002080 <UI_Handler+0x7c>
	{
		UI_State = NOTICE;
 8002066:	4b88      	ldr	r3, [pc, #544]	; (8002288 <UI_Handler+0x284>)
 8002068:	2204      	movs	r2, #4
 800206a:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 800206c:	4b87      	ldr	r3, [pc, #540]	; (800228c <UI_Handler+0x288>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b87      	ldr	r3, [pc, #540]	; (8002290 <UI_Handler+0x28c>)
 8002072:	601a      	str	r2, [r3, #0]
		flags.ui.notice = 0;
 8002074:	4b83      	ldr	r3, [pc, #524]	; (8002284 <UI_Handler+0x280>)
 8002076:	7c1a      	ldrb	r2, [r3, #16]
 8002078:	2108      	movs	r1, #8
 800207a:	438a      	bics	r2, r1
 800207c:	741a      	strb	r2, [r3, #16]
 800207e:	e046      	b.n	800210e <UI_Handler+0x10a>
	}
	else if(flags.ui.done && (UI_State == OFF))
 8002080:	4b80      	ldr	r3, [pc, #512]	; (8002284 <UI_Handler+0x280>)
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	06db      	lsls	r3, r3, #27
 8002086:	0fdb      	lsrs	r3, r3, #31
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d010      	beq.n	80020b0 <UI_Handler+0xac>
 800208e:	4b7e      	ldr	r3, [pc, #504]	; (8002288 <UI_Handler+0x284>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10c      	bne.n	80020b0 <UI_Handler+0xac>
	{
		UI_State = DONE;
 8002096:	4b7c      	ldr	r3, [pc, #496]	; (8002288 <UI_Handler+0x284>)
 8002098:	2205      	movs	r2, #5
 800209a:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 800209c:	4b7b      	ldr	r3, [pc, #492]	; (800228c <UI_Handler+0x288>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4b7b      	ldr	r3, [pc, #492]	; (8002290 <UI_Handler+0x28c>)
 80020a2:	601a      	str	r2, [r3, #0]
		flags.ui.done = 0;
 80020a4:	4b77      	ldr	r3, [pc, #476]	; (8002284 <UI_Handler+0x280>)
 80020a6:	7c1a      	ldrb	r2, [r3, #16]
 80020a8:	2110      	movs	r1, #16
 80020aa:	438a      	bics	r2, r1
 80020ac:	741a      	strb	r2, [r3, #16]
 80020ae:	e02e      	b.n	800210e <UI_Handler+0x10a>
	}
	else if(flags.ui.longBeep && (UI_State == OFF))
 80020b0:	4b74      	ldr	r3, [pc, #464]	; (8002284 <UI_Handler+0x280>)
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	079b      	lsls	r3, r3, #30
 80020b6:	0fdb      	lsrs	r3, r3, #31
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d010      	beq.n	80020e0 <UI_Handler+0xdc>
 80020be:	4b72      	ldr	r3, [pc, #456]	; (8002288 <UI_Handler+0x284>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10c      	bne.n	80020e0 <UI_Handler+0xdc>
	{
		UI_State = LONG_BEEP;
 80020c6:	4b70      	ldr	r3, [pc, #448]	; (8002288 <UI_Handler+0x284>)
 80020c8:	2202      	movs	r2, #2
 80020ca:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80020cc:	4b6f      	ldr	r3, [pc, #444]	; (800228c <UI_Handler+0x288>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b6f      	ldr	r3, [pc, #444]	; (8002290 <UI_Handler+0x28c>)
 80020d2:	601a      	str	r2, [r3, #0]
		flags.ui.longBeep = 0;
 80020d4:	4b6b      	ldr	r3, [pc, #428]	; (8002284 <UI_Handler+0x280>)
 80020d6:	7c1a      	ldrb	r2, [r3, #16]
 80020d8:	2102      	movs	r1, #2
 80020da:	438a      	bics	r2, r1
 80020dc:	741a      	strb	r2, [r3, #16]
 80020de:	e016      	b.n	800210e <UI_Handler+0x10a>
	}
	else if(flags.ui.shortBeep && (UI_State == OFF))
 80020e0:	4b68      	ldr	r3, [pc, #416]	; (8002284 <UI_Handler+0x280>)
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	07db      	lsls	r3, r3, #31
 80020e6:	0fdb      	lsrs	r3, r3, #31
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00f      	beq.n	800210e <UI_Handler+0x10a>
 80020ee:	4b66      	ldr	r3, [pc, #408]	; (8002288 <UI_Handler+0x284>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10b      	bne.n	800210e <UI_Handler+0x10a>
	{
		UI_State = SHORT_BEEP;
 80020f6:	4b64      	ldr	r3, [pc, #400]	; (8002288 <UI_Handler+0x284>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
		startTime = sysTime[SYSTIME_TEN_MS];
 80020fc:	4b63      	ldr	r3, [pc, #396]	; (800228c <UI_Handler+0x288>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b63      	ldr	r3, [pc, #396]	; (8002290 <UI_Handler+0x28c>)
 8002102:	601a      	str	r2, [r3, #0]
		flags.ui.shortBeep = 0;
 8002104:	4b5f      	ldr	r3, [pc, #380]	; (8002284 <UI_Handler+0x280>)
 8002106:	7c1a      	ldrb	r2, [r3, #16]
 8002108:	2101      	movs	r1, #1
 800210a:	438a      	bics	r2, r1
 800210c:	741a      	strb	r2, [r3, #16]
	}

	switch(UI_State)
 800210e:	4b5e      	ldr	r3, [pc, #376]	; (8002288 <UI_Handler+0x284>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b05      	cmp	r3, #5
 8002114:	d900      	bls.n	8002118 <UI_Handler+0x114>
 8002116:	e0a0      	b.n	800225a <UI_Handler+0x256>
 8002118:	009a      	lsls	r2, r3, #2
 800211a:	4b5e      	ldr	r3, [pc, #376]	; (8002294 <UI_Handler+0x290>)
 800211c:	18d3      	adds	r3, r2, r3
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	469f      	mov	pc, r3
	{
	case SHORT_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	015b      	lsls	r3, r3, #5
 8002126:	485c      	ldr	r0, [pc, #368]	; (8002298 <UI_Handler+0x294>)
 8002128:	2201      	movs	r2, #1
 800212a:	0019      	movs	r1, r3
 800212c:	f002 fac3 	bl	80046b6 <HAL_GPIO_WritePin>
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 50)		//0,5s
 8002130:	4b56      	ldr	r3, [pc, #344]	; (800228c <UI_Handler+0x288>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b56      	ldr	r3, [pc, #344]	; (8002290 <UI_Handler+0x28c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b31      	cmp	r3, #49	; 0x31
 800213c:	d800      	bhi.n	8002140 <UI_Handler+0x13c>
 800213e:	e094      	b.n	800226a <UI_Handler+0x266>
		{
			UI_State = OFF;
 8002140:	4b51      	ldr	r3, [pc, #324]	; (8002288 <UI_Handler+0x284>)
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	015b      	lsls	r3, r3, #5
 800214a:	4853      	ldr	r0, [pc, #332]	; (8002298 <UI_Handler+0x294>)
 800214c:	2200      	movs	r2, #0
 800214e:	0019      	movs	r1, r3
 8002150:	f002 fab1 	bl	80046b6 <HAL_GPIO_WritePin>
		}
		break;
 8002154:	e089      	b.n	800226a <UI_Handler+0x266>

	case LONG_BEEP:
#ifndef __SILENT__
			BUZZER_ON;
 8002156:	2380      	movs	r3, #128	; 0x80
 8002158:	015b      	lsls	r3, r3, #5
 800215a:	484f      	ldr	r0, [pc, #316]	; (8002298 <UI_Handler+0x294>)
 800215c:	2201      	movs	r2, #1
 800215e:	0019      	movs	r1, r3
 8002160:	f002 faa9 	bl	80046b6 <HAL_GPIO_WritePin>
#endif
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 100)	//1s
 8002164:	4b49      	ldr	r3, [pc, #292]	; (800228c <UI_Handler+0x288>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b49      	ldr	r3, [pc, #292]	; (8002290 <UI_Handler+0x28c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b63      	cmp	r3, #99	; 0x63
 8002170:	d800      	bhi.n	8002174 <UI_Handler+0x170>
 8002172:	e07c      	b.n	800226e <UI_Handler+0x26a>
		{
			UI_State = OFF;
 8002174:	4b44      	ldr	r3, [pc, #272]	; (8002288 <UI_Handler+0x284>)
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
			BUZZER_OFF;
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	015b      	lsls	r3, r3, #5
 800217e:	4846      	ldr	r0, [pc, #280]	; (8002298 <UI_Handler+0x294>)
 8002180:	2200      	movs	r2, #0
 8002182:	0019      	movs	r1, r3
 8002184:	f002 fa97 	bl	80046b6 <HAL_GPIO_WritePin>
		}
		break;
 8002188:	e071      	b.n	800226e <UI_Handler+0x26a>

	case ERROR:
		if(!flags.ui.error)	//dokud není požadavek zrušen provádí se error
 800218a:	4b3e      	ldr	r3, [pc, #248]	; (8002284 <UI_Handler+0x280>)
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	075b      	lsls	r3, r3, #29
 8002190:	0fdb      	lsrs	r3, r3, #31
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d102      	bne.n	800219e <UI_Handler+0x19a>
			UI_State = OFF;
 8002198:	4b3b      	ldr	r3, [pc, #236]	; (8002288 <UI_Handler+0x284>)
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))	//každých 0,5s
 800219e:	4b3b      	ldr	r3, [pc, #236]	; (800228c <UI_Handler+0x288>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	4b3b      	ldr	r3, [pc, #236]	; (8002290 <UI_Handler+0x28c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2132      	movs	r1, #50	; 0x32
 80021aa:	0018      	movs	r0, r3
 80021ac:	f7fe f844 	bl	8000238 <__aeabi_uidivmod>
 80021b0:	1e0b      	subs	r3, r1, #0
 80021b2:	d15e      	bne.n	8002272 <UI_Handler+0x26e>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	015b      	lsls	r3, r3, #5
 80021b8:	4a37      	ldr	r2, [pc, #220]	; (8002298 <UI_Handler+0x294>)
 80021ba:	0019      	movs	r1, r3
 80021bc:	0010      	movs	r0, r2
 80021be:	f002 fa97 	bl	80046f0 <HAL_GPIO_TogglePin>
#endif
			BACKLIGHT_RED_Toggle;
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	021a      	lsls	r2, r3, #8
 80021c6:	2390      	movs	r3, #144	; 0x90
 80021c8:	05db      	lsls	r3, r3, #23
 80021ca:	0011      	movs	r1, r2
 80021cc:	0018      	movs	r0, r3
 80021ce:	f002 fa8f 	bl	80046f0 <HAL_GPIO_TogglePin>
		}
		break;
 80021d2:	e04e      	b.n	8002272 <UI_Handler+0x26e>

	case NOTICE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 35))	//každých 0,35s
 80021d4:	4b2d      	ldr	r3, [pc, #180]	; (800228c <UI_Handler+0x288>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <UI_Handler+0x28c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2123      	movs	r1, #35	; 0x23
 80021e0:	0018      	movs	r0, r3
 80021e2:	f7fe f829 	bl	8000238 <__aeabi_uidivmod>
 80021e6:	1e0b      	subs	r3, r1, #0
 80021e8:	d106      	bne.n	80021f8 <UI_Handler+0x1f4>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	015b      	lsls	r3, r3, #5
 80021ee:	4a2a      	ldr	r2, [pc, #168]	; (8002298 <UI_Handler+0x294>)
 80021f0:	0019      	movs	r1, r3
 80021f2:	0010      	movs	r0, r2
 80021f4:	f002 fa7c 	bl	80046f0 <HAL_GPIO_TogglePin>
#endif
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 209)	//Po 2,1s ukon�?i
 80021f8:	4b24      	ldr	r3, [pc, #144]	; (800228c <UI_Handler+0x288>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b24      	ldr	r3, [pc, #144]	; (8002290 <UI_Handler+0x28c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2bd0      	cmp	r3, #208	; 0xd0
 8002204:	d937      	bls.n	8002276 <UI_Handler+0x272>
			UI_State = OFF;
 8002206:	4b20      	ldr	r3, [pc, #128]	; (8002288 <UI_Handler+0x284>)
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]
		break;
 800220c:	e033      	b.n	8002276 <UI_Handler+0x272>

	case DONE:
		if(!((sysTime[SYSTIME_TEN_MS] - startTime) % 50))	//každých 0,5s
 800220e:	4b1f      	ldr	r3, [pc, #124]	; (800228c <UI_Handler+0x288>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <UI_Handler+0x28c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2132      	movs	r1, #50	; 0x32
 800221a:	0018      	movs	r0, r3
 800221c:	f7fe f80c 	bl	8000238 <__aeabi_uidivmod>
 8002220:	1e0b      	subs	r3, r1, #0
 8002222:	d10d      	bne.n	8002240 <UI_Handler+0x23c>
		{
#ifndef __SILENT__
			BUZZER_Toggle;
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	015b      	lsls	r3, r3, #5
 8002228:	4a1b      	ldr	r2, [pc, #108]	; (8002298 <UI_Handler+0x294>)
 800222a:	0019      	movs	r1, r3
 800222c:	0010      	movs	r0, r2
 800222e:	f002 fa5f 	bl	80046f0 <HAL_GPIO_TogglePin>
#endif
			BACKLIGHT_GREEN_Toggle;
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4a19      	ldr	r2, [pc, #100]	; (800229c <UI_Handler+0x298>)
 8002238:	0019      	movs	r1, r3
 800223a:	0010      	movs	r0, r2
 800223c:	f002 fa58 	bl	80046f0 <HAL_GPIO_TogglePin>
		}
		if((sysTime[SYSTIME_TEN_MS] - startTime) >= 299)	//Po 3s ukon�?i
 8002240:	4b12      	ldr	r3, [pc, #72]	; (800228c <UI_Handler+0x288>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <UI_Handler+0x28c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	1ad2      	subs	r2, r2, r3
 800224a:	2395      	movs	r3, #149	; 0x95
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	429a      	cmp	r2, r3
 8002250:	d913      	bls.n	800227a <UI_Handler+0x276>
			UI_State = OFF;
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <UI_Handler+0x284>)
 8002254:	2200      	movs	r2, #0
 8002256:	701a      	strb	r2, [r3, #0]
		break;
 8002258:	e00f      	b.n	800227a <UI_Handler+0x276>

	default:	//Ošetřuje i UI_State == OFF
		BUZZER_OFF;
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	015b      	lsls	r3, r3, #5
 800225e:	480e      	ldr	r0, [pc, #56]	; (8002298 <UI_Handler+0x294>)
 8002260:	2200      	movs	r2, #0
 8002262:	0019      	movs	r1, r3
 8002264:	f002 fa27 	bl	80046b6 <HAL_GPIO_WritePin>
#ifndef __DEBUG_BUTT__
		//setColour(BACKLIGHT_OFF);
#endif
		break;
 8002268:	e008      	b.n	800227c <UI_Handler+0x278>
		break;
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	e006      	b.n	800227c <UI_Handler+0x278>
		break;
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	e004      	b.n	800227c <UI_Handler+0x278>
		break;
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	e002      	b.n	800227c <UI_Handler+0x278>
		break;
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	e000      	b.n	800227c <UI_Handler+0x278>
		break;
 800227a:	46c0      	nop			; (mov r8, r8)

	}
}
 800227c:	46c0      	nop			; (mov r8, r8)
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	20000680 	.word	0x20000680
 8002288:	200006a2 	.word	0x200006a2
 800228c:	20000670 	.word	0x20000670
 8002290:	200006a4 	.word	0x200006a4
 8002294:	0800e48c 	.word	0x0800e48c
 8002298:	48000800 	.word	0x48000800
 800229c:	48000400 	.word	0x48000400

080022a0 <measHandler>:

//_____Osluha AD převodníků_____//
static void measHandler(void)
{
 80022a0:	b5b0      	push	{r4, r5, r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	static ADC_State_Type ADC_State;
	static uint8_t numOfSamples = 0;

	//___Nulování flagů___//
	flags.meas.measComplete = 0;
 80022a4:	4b62      	ldr	r3, [pc, #392]	; (8002430 <measHandler+0x190>)
 80022a6:	7d1a      	ldrb	r2, [r3, #20]
 80022a8:	2102      	movs	r1, #2
 80022aa:	438a      	bics	r2, r1
 80022ac:	751a      	strb	r2, [r3, #20]
	flags.meas.measConflict = 0;
 80022ae:	4b60      	ldr	r3, [pc, #384]	; (8002430 <measHandler+0x190>)
 80022b0:	7d1a      	ldrb	r2, [r3, #20]
 80022b2:	2110      	movs	r1, #16
 80022b4:	438a      	bics	r2, r1
 80022b6:	751a      	strb	r2, [r3, #20]

	if(flags.meas.measRequest)
 80022b8:	4b5d      	ldr	r3, [pc, #372]	; (8002430 <measHandler+0x190>)
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	07db      	lsls	r3, r3, #31
 80022be:	0fdb      	lsrs	r3, r3, #31
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d041      	beq.n	800234a <measHandler+0xaa>
	{
		if(!flags.meas.measRunning)
 80022c6:	4b5a      	ldr	r3, [pc, #360]	; (8002430 <measHandler+0x190>)
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	071b      	lsls	r3, r3, #28
 80022cc:	0fdb      	lsrs	r3, r3, #31
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d130      	bne.n	8002336 <measHandler+0x96>
		{
			//hadc->Instance->CR = 0;	//Will disable ADC so calibrtion can start
			HAL_ADCEx_Calibration_Start(&hadc);	//Calibration process
 80022d4:	4b57      	ldr	r3, [pc, #348]	; (8002434 <measHandler+0x194>)
 80022d6:	0018      	movs	r0, r3
 80022d8:	f001 fe54 	bl	8003f84 <HAL_ADCEx_Calibration_Start>
			//hadc->Instance->CR = 1	//Enable ADC
			flags.meas.measRunning = 1;
 80022dc:	4b54      	ldr	r3, [pc, #336]	; (8002430 <measHandler+0x190>)
 80022de:	7d1a      	ldrb	r2, [r3, #20]
 80022e0:	2108      	movs	r1, #8
 80022e2:	430a      	orrs	r2, r1
 80022e4:	751a      	strb	r2, [r3, #20]
			if(currentPhase() == BATTERY_TEST || currentPhase() == BATTERY_TEST_DONE)	//probíhá battery test
 80022e6:	f000 fd5f 	bl	8002da8 <currentPhase>
 80022ea:	0003      	movs	r3, r0
 80022ec:	2b05      	cmp	r3, #5
 80022ee:	d004      	beq.n	80022fa <measHandler+0x5a>
 80022f0:	f000 fd5a 	bl	8002da8 <currentPhase>
 80022f4:	0003      	movs	r3, r0
 80022f6:	2b06      	cmp	r3, #6
 80022f8:	d108      	bne.n	800230c <measHandler+0x6c>
			{
				flags.meas.onlyBattery = 1;
 80022fa:	4b4d      	ldr	r3, [pc, #308]	; (8002430 <measHandler+0x190>)
 80022fc:	7d1a      	ldrb	r2, [r3, #20]
 80022fe:	2120      	movs	r1, #32
 8002300:	430a      	orrs	r2, r1
 8002302:	751a      	strb	r2, [r3, #20]
				ADC_State = U_BAT;
 8002304:	4b4c      	ldr	r3, [pc, #304]	; (8002438 <measHandler+0x198>)
 8002306:	220d      	movs	r2, #13
 8002308:	701a      	strb	r2, [r3, #0]
 800230a:	e007      	b.n	800231c <measHandler+0x7c>
			}
			else
			{
				flags.meas.onlyBattery = 0;
 800230c:	4b48      	ldr	r3, [pc, #288]	; (8002430 <measHandler+0x190>)
 800230e:	7d1a      	ldrb	r2, [r3, #20]
 8002310:	2120      	movs	r1, #32
 8002312:	438a      	bics	r2, r1
 8002314:	751a      	strb	r2, [r3, #20]
				ADC_State = U15V;
 8002316:	4b48      	ldr	r3, [pc, #288]	; (8002438 <measHandler+0x198>)
 8002318:	2201      	movs	r2, #1
 800231a:	701a      	strb	r2, [r3, #0]
			}
			ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 800231c:	4b46      	ldr	r3, [pc, #280]	; (8002438 <measHandler+0x198>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	1e59      	subs	r1, r3, #1
 8002322:	4b46      	ldr	r3, [pc, #280]	; (800243c <measHandler+0x19c>)
 8002324:	4a46      	ldr	r2, [pc, #280]	; (8002440 <measHandler+0x1a0>)
 8002326:	0089      	lsls	r1, r1, #2
 8002328:	588a      	ldr	r2, [r1, r2]
 800232a:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_ADC_Start_IT(&hadc);
 800232c:	4b41      	ldr	r3, [pc, #260]	; (8002434 <measHandler+0x194>)
 800232e:	0018      	movs	r0, r3
 8002330:	f001 fa48 	bl	80037c4 <HAL_ADC_Start_IT>
 8002334:	e004      	b.n	8002340 <measHandler+0xa0>
		}
		else
		{
			flags.meas.measConflict = 1;
 8002336:	4b3e      	ldr	r3, [pc, #248]	; (8002430 <measHandler+0x190>)
 8002338:	7d1a      	ldrb	r2, [r3, #20]
 800233a:	2110      	movs	r1, #16
 800233c:	430a      	orrs	r2, r1
 800233e:	751a      	strb	r2, [r3, #20]
		}
		flags.meas.measRequest = 0;
 8002340:	4b3b      	ldr	r3, [pc, #236]	; (8002430 <measHandler+0x190>)
 8002342:	7d1a      	ldrb	r2, [r3, #20]
 8002344:	2101      	movs	r1, #1
 8002346:	438a      	bics	r2, r1
 8002348:	751a      	strb	r2, [r3, #20]
	}

	if(ADC_State != ADC_WAITING && flags.meas.measDataReady)
 800234a:	4b3b      	ldr	r3, [pc, #236]	; (8002438 <measHandler+0x198>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d06a      	beq.n	8002428 <measHandler+0x188>
 8002352:	4b37      	ldr	r3, [pc, #220]	; (8002430 <measHandler+0x190>)
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	075b      	lsls	r3, r3, #29
 8002358:	0fdb      	lsrs	r3, r3, #31
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	d063      	beq.n	8002428 <measHandler+0x188>
	{

		flags.meas.measDataReady = 0;
 8002360:	4b33      	ldr	r3, [pc, #204]	; (8002430 <measHandler+0x190>)
 8002362:	7d1a      	ldrb	r2, [r3, #20]
 8002364:	2104      	movs	r1, #4
 8002366:	438a      	bics	r2, r1
 8002368:	751a      	strb	r2, [r3, #20]

		ADC_Buffer[ADC_State-1][numOfSamples] = HAL_ADC_GetValue(&hadc);
 800236a:	4b33      	ldr	r3, [pc, #204]	; (8002438 <measHandler+0x198>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	1e5c      	subs	r4, r3, #1
 8002370:	4b34      	ldr	r3, [pc, #208]	; (8002444 <measHandler+0x1a4>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	001d      	movs	r5, r3
 8002376:	4b2f      	ldr	r3, [pc, #188]	; (8002434 <measHandler+0x194>)
 8002378:	0018      	movs	r0, r3
 800237a:	f001 fadf 	bl	800393c <HAL_ADC_GetValue>
 800237e:	0001      	movs	r1, r0
 8002380:	4a31      	ldr	r2, [pc, #196]	; (8002448 <measHandler+0x1a8>)
 8002382:	0023      	movs	r3, r4
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	191b      	adds	r3, r3, r4
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	195b      	adds	r3, r3, r5
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	5099      	str	r1, [r3, r2]
		if(ADC_State == INTERNAL_REF)	//interni reference je vždy měřena jako poslední
 8002390:	4b29      	ldr	r3, [pc, #164]	; (8002438 <measHandler+0x198>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b0f      	cmp	r3, #15
 8002396:	d135      	bne.n	8002404 <measHandler+0x164>
		{
			numOfSamples++;
 8002398:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <measHandler+0x1a4>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	3301      	adds	r3, #1
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	4b28      	ldr	r3, [pc, #160]	; (8002444 <measHandler+0x1a4>)
 80023a2:	701a      	strb	r2, [r3, #0]
			if(numOfSamples == NUMBER_OF_SAMPLES)	//Naměřen dostatečný počet vzorků
 80023a4:	4b27      	ldr	r3, [pc, #156]	; (8002444 <measHandler+0x1a4>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b0a      	cmp	r3, #10
 80023aa:	d112      	bne.n	80023d2 <measHandler+0x132>
			{
				ADC_dataProcessing();
 80023ac:	f000 f8e8 	bl	8002580 <ADC_dataProcessing>
				flags.meas.measComplete = 1;
 80023b0:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <measHandler+0x190>)
 80023b2:	7d1a      	ldrb	r2, [r3, #20]
 80023b4:	2102      	movs	r1, #2
 80023b6:	430a      	orrs	r2, r1
 80023b8:	751a      	strb	r2, [r3, #20]
				flags.meas.measRunning = 0;
 80023ba:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <measHandler+0x190>)
 80023bc:	7d1a      	ldrb	r2, [r3, #20]
 80023be:	2108      	movs	r1, #8
 80023c0:	438a      	bics	r2, r1
 80023c2:	751a      	strb	r2, [r3, #20]
				ADC_State = ADC_WAITING;
 80023c4:	4b1c      	ldr	r3, [pc, #112]	; (8002438 <measHandler+0x198>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
				numOfSamples = 0;
 80023ca:	4b1e      	ldr	r3, [pc, #120]	; (8002444 <measHandler+0x1a4>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
			ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];	//Nastav měřený kanál

			HAL_ADC_Start_IT(&hadc);
		}
	}
}
 80023d0:	e02a      	b.n	8002428 <measHandler+0x188>
				ADC_State = flags.meas.onlyBattery? U_BAT : U15V;
 80023d2:	4b17      	ldr	r3, [pc, #92]	; (8002430 <measHandler+0x190>)
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	069b      	lsls	r3, r3, #26
 80023d8:	0fdb      	lsrs	r3, r3, #31
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <measHandler+0x144>
 80023e0:	220d      	movs	r2, #13
 80023e2:	e000      	b.n	80023e6 <measHandler+0x146>
 80023e4:	2201      	movs	r2, #1
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <measHandler+0x198>)
 80023e8:	701a      	strb	r2, [r3, #0]
				ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];
 80023ea:	4b13      	ldr	r3, [pc, #76]	; (8002438 <measHandler+0x198>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	1e59      	subs	r1, r3, #1
 80023f0:	4b12      	ldr	r3, [pc, #72]	; (800243c <measHandler+0x19c>)
 80023f2:	4a13      	ldr	r2, [pc, #76]	; (8002440 <measHandler+0x1a0>)
 80023f4:	0089      	lsls	r1, r1, #2
 80023f6:	588a      	ldr	r2, [r1, r2]
 80023f8:	629a      	str	r2, [r3, #40]	; 0x28
				HAL_ADC_Start_IT(&hadc);
 80023fa:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <measHandler+0x194>)
 80023fc:	0018      	movs	r0, r3
 80023fe:	f001 f9e1 	bl	80037c4 <HAL_ADC_Start_IT>
}
 8002402:	e011      	b.n	8002428 <measHandler+0x188>
			ADC_State += 2;	//Měř další kanál (měření proudů se přeskakuje)
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <measHandler+0x198>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	3302      	adds	r3, #2
 800240a:	b2da      	uxtb	r2, r3
 800240c:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <measHandler+0x198>)
 800240e:	701a      	strb	r2, [r3, #0]
			ADC1->CHSELR = ADC_ChannelConf[ADC_State-1];	//Nastav měřený kanál
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <measHandler+0x198>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	1e59      	subs	r1, r3, #1
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <measHandler+0x19c>)
 8002418:	4a09      	ldr	r2, [pc, #36]	; (8002440 <measHandler+0x1a0>)
 800241a:	0089      	lsls	r1, r1, #2
 800241c:	588a      	ldr	r2, [r1, r2]
 800241e:	629a      	str	r2, [r3, #40]	; 0x28
			HAL_ADC_Start_IT(&hadc);
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <measHandler+0x194>)
 8002422:	0018      	movs	r0, r3
 8002424:	f001 f9ce 	bl	80037c4 <HAL_ADC_Start_IT>
}
 8002428:	46c0      	nop			; (mov r8, r8)
 800242a:	46bd      	mov	sp, r7
 800242c:	bdb0      	pop	{r4, r5, r7, pc}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	20000680 	.word	0x20000680
 8002434:	20000214 	.word	0x20000214
 8002438:	200006a8 	.word	0x200006a8
 800243c:	40012400 	.word	0x40012400
 8002440:	0800e42c 	.word	0x0800e42c
 8002444:	200006a9 	.word	0x200006a9
 8002448:	20000384 	.word	0x20000384

0800244c <calibHandler>:

static void calibHandler()
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
	static uint32_t savedSec;

	if(flags.instructions.calibRequest)
 8002452:	4b44      	ldr	r3, [pc, #272]	; (8002564 <calibHandler+0x118>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	071b      	lsls	r3, r3, #28
 8002458:	0fdb      	lsrs	r3, r3, #31
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d032      	beq.n	80024c6 <calibHandler+0x7a>
	{
		sourceInTesting = &regValues[regCount - 1];
 8002460:	4b41      	ldr	r3, [pc, #260]	; (8002568 <calibHandler+0x11c>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b41      	ldr	r3, [pc, #260]	; (800256c <calibHandler+0x120>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	3b01      	subs	r3, #1
 800246a:	18d2      	adds	r2, r2, r3
 800246c:	4b40      	ldr	r3, [pc, #256]	; (8002570 <calibHandler+0x124>)
 800246e:	601a      	str	r2, [r3, #0]

		for(int i = 0; i < regCount; i++)
 8002470:	2300      	movs	r3, #0
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	e008      	b.n	8002488 <calibHandler+0x3c>
		{
			regValues[i] = 0;
 8002476:	4b3c      	ldr	r3, [pc, #240]	; (8002568 <calibHandler+0x11c>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	18d3      	adds	r3, r2, r3
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < regCount; i++)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3301      	adds	r3, #1
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	4b38      	ldr	r3, [pc, #224]	; (800256c <calibHandler+0x120>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	001a      	movs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4293      	cmp	r3, r2
 8002492:	dbf0      	blt.n	8002476 <calibHandler+0x2a>
		}
		RELAY_ON(*sourceInTesting);	//připojit relé
 8002494:	4b36      	ldr	r3, [pc, #216]	; (8002570 <calibHandler+0x124>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	781a      	ldrb	r2, [r3, #0]
 800249a:	4b35      	ldr	r3, [pc, #212]	; (8002570 <calibHandler+0x124>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2102      	movs	r1, #2
 80024a0:	430a      	orrs	r2, r1
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]

		sendData();	//poslat konfiguraci shift registrům
 80024a6:	f000 fa39 	bl	800291c <sendData>

		savedSec = sysTime[SYSTIME_SEC];
 80024aa:	4b32      	ldr	r3, [pc, #200]	; (8002574 <calibHandler+0x128>)
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	4b32      	ldr	r3, [pc, #200]	; (8002578 <calibHandler+0x12c>)
 80024b0:	601a      	str	r2, [r3, #0]

		flags.instructions.calibRequest = 0;
 80024b2:	4b2c      	ldr	r3, [pc, #176]	; (8002564 <calibHandler+0x118>)
 80024b4:	7b1a      	ldrb	r2, [r3, #12]
 80024b6:	2108      	movs	r1, #8
 80024b8:	438a      	bics	r2, r1
 80024ba:	731a      	strb	r2, [r3, #12]
		flags.calibRunning = 1;
 80024bc:	4b29      	ldr	r3, [pc, #164]	; (8002564 <calibHandler+0x118>)
 80024be:	7e1a      	ldrb	r2, [r3, #24]
 80024c0:	2108      	movs	r1, #8
 80024c2:	430a      	orrs	r2, r1
 80024c4:	761a      	strb	r2, [r3, #24]


	}
	if(flags.calibRunning)
 80024c6:	4b27      	ldr	r3, [pc, #156]	; (8002564 <calibHandler+0x118>)
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	071b      	lsls	r3, r3, #28
 80024cc:	0fdb      	lsrs	r3, r3, #31
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d043      	beq.n	800255c <calibHandler+0x110>
	{
		static uint8_t lock = 0;
		if((sysTime[SYSTIME_SEC] >= savedSec + 3) & !lock)
 80024d4:	4b27      	ldr	r3, [pc, #156]	; (8002574 <calibHandler+0x128>)
 80024d6:	6859      	ldr	r1, [r3, #4]
 80024d8:	4b27      	ldr	r3, [pc, #156]	; (8002578 <calibHandler+0x12c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	1cda      	adds	r2, r3, #3
 80024de:	2300      	movs	r3, #0
 80024e0:	4291      	cmp	r1, r2
 80024e2:	415b      	adcs	r3, r3
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	4a25      	ldr	r2, [pc, #148]	; (800257c <calibHandler+0x130>)
 80024e8:	7812      	ldrb	r2, [r2, #0]
 80024ea:	4251      	negs	r1, r2
 80024ec:	414a      	adcs	r2, r1
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	4013      	ands	r3, r2
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00c      	beq.n	8002512 <calibHandler+0xc6>
		{
			flags.meas.measRequest = 1;
 80024f8:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <calibHandler+0x118>)
 80024fa:	7d1a      	ldrb	r2, [r3, #20]
 80024fc:	2101      	movs	r1, #1
 80024fe:	430a      	orrs	r2, r1
 8002500:	751a      	strb	r2, [r3, #20]
			flags.meas.calibMeas = 1;
 8002502:	4b18      	ldr	r3, [pc, #96]	; (8002564 <calibHandler+0x118>)
 8002504:	7d1a      	ldrb	r2, [r3, #20]
 8002506:	2140      	movs	r1, #64	; 0x40
 8002508:	430a      	orrs	r2, r1
 800250a:	751a      	strb	r2, [r3, #20]
			lock = 1;
 800250c:	4b1b      	ldr	r3, [pc, #108]	; (800257c <calibHandler+0x130>)
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]
		}
		if(flags.instructions.calibDone)
 8002512:	4b14      	ldr	r3, [pc, #80]	; (8002564 <calibHandler+0x118>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	06db      	lsls	r3, r3, #27
 8002518:	0fdb      	lsrs	r3, r3, #31
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01d      	beq.n	800255c <calibHandler+0x110>
		{
			for(int i = 0; i < regCount; i++)
 8002520:	2300      	movs	r3, #0
 8002522:	603b      	str	r3, [r7, #0]
 8002524:	e008      	b.n	8002538 <calibHandler+0xec>
			{
				regValues[i] = 0;
 8002526:	4b10      	ldr	r3, [pc, #64]	; (8002568 <calibHandler+0x11c>)
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	18d3      	adds	r3, r2, r3
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < regCount; i++)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	3301      	adds	r3, #1
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <calibHandler+0x120>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	001a      	movs	r2, r3
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	4293      	cmp	r3, r2
 8002542:	dbf0      	blt.n	8002526 <calibHandler+0xda>
			}

			sendData();	//poslat konfiguraci shift registrům
 8002544:	f000 f9ea 	bl	800291c <sendData>
			flags.calibRunning = 0;
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <calibHandler+0x118>)
 800254a:	7e1a      	ldrb	r2, [r3, #24]
 800254c:	2108      	movs	r1, #8
 800254e:	438a      	bics	r2, r1
 8002550:	761a      	strb	r2, [r3, #24]
			flags.instructions.calibDone = 0;
 8002552:	4b04      	ldr	r3, [pc, #16]	; (8002564 <calibHandler+0x118>)
 8002554:	7b1a      	ldrb	r2, [r3, #12]
 8002556:	2110      	movs	r1, #16
 8002558:	438a      	bics	r2, r1
 800255a:	731a      	strb	r2, [r3, #12]
		}
	}
}
 800255c:	46c0      	nop			; (mov r8, r8)
 800255e:	46bd      	mov	sp, r7
 8002560:	b002      	add	sp, #8
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000680 	.word	0x20000680
 8002568:	200006b4 	.word	0x200006b4
 800256c:	200006b8 	.word	0x200006b8
 8002570:	200006c8 	.word	0x200006c8
 8002574:	20000670 	.word	0x20000670
 8002578:	200006ac 	.word	0x200006ac
 800257c:	200006b0 	.word	0x200006b0

08002580 <ADC_dataProcessing>:

//_____Zpracování naměřených dat_____//
static void ADC_dataProcessing()
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b0a4      	sub	sp, #144	; 0x90
 8002584:	af00      	add	r7, sp, #0
	uint32_t max[17] = {0};
 8002586:	2348      	movs	r3, #72	; 0x48
 8002588:	18fb      	adds	r3, r7, r3
 800258a:	0018      	movs	r0, r3
 800258c:	2344      	movs	r3, #68	; 0x44
 800258e:	001a      	movs	r2, r3
 8002590:	2100      	movs	r1, #0
 8002592:	f00b fa0e 	bl	800d9b2 <memset>
	uint32_t min[17] = {ADC_MAX};
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	0018      	movs	r0, r3
 800259a:	2344      	movs	r3, #68	; 0x44
 800259c:	001a      	movs	r2, r3
 800259e:	2100      	movs	r1, #0
 80025a0:	f00b fa07 	bl	800d9b2 <memset>
 80025a4:	1d3b      	adds	r3, r7, #4
 80025a6:	220e      	movs	r2, #14
 80025a8:	601a      	str	r2, [r3, #0]
	for(uint8_t i = 0; i < NUMBER_OF_SAMPLES; i++)
 80025aa:	238f      	movs	r3, #143	; 0x8f
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	2200      	movs	r2, #0
 80025b0:	701a      	strb	r2, [r3, #0]

	return;
	//return ADC_Buffer[10];
}
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b024      	add	sp, #144	; 0x90
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025bc:	b672      	cpsid	i
}
 80025be:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025c0:	e7fe      	b.n	80025c0 <Error_Handler+0x8>

080025c2 <createBuffer>:
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
 80025ca:	2018      	movs	r0, #24
 80025cc:	f00b f9d4 	bl	800d978 <malloc>
 80025d0:	0003      	movs	r3, r0
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <createBuffer+0x1c>
 80025da:	2300      	movs	r3, #0
 80025dc:	e022      	b.n	8002624 <createBuffer+0x62>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	0018      	movs	r0, r3
 80025e2:	f00b f9c9 	bl	800d978 <malloc>
 80025e6:	0003      	movs	r3, r0
 80025e8:	001a      	movs	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d105      	bne.n	8002602 <createBuffer+0x40>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	0018      	movs	r0, r3
 80025fa:	f00b f9c7 	bl	800d98c <free>
 80025fe:	2300      	movs	r3, #0
 8002600:	e010      	b.n	8002624 <createBuffer+0x62>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	605a      	str	r2, [r3, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	609a      	str	r2, [r3, #8]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	60da      	str	r2, [r3, #12]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	1e5a      	subs	r2, r3, #1
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	611a      	str	r2, [r3, #16]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2201      	movs	r2, #1
 8002620:	751a      	strb	r2, [r3, #20]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	0018      	movs	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	b004      	add	sp, #16
 800262a:	bd80      	pop	{r7, pc}

0800262c <clearBuffer>:
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	60da      	str	r2, [r3, #12]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	1e5a      	subs	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	611a      	str	r2, [r3, #16]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	751a      	strb	r2, [r3, #20]
 8002650:	46c0      	nop			; (mov r8, r8)
 8002652:	46bd      	mov	sp, r7
 8002654:	b002      	add	sp, #8
 8002656:	bd80      	pop	{r7, pc}

08002658 <push>:
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	000a      	movs	r2, r1
 8002662:	1cfb      	adds	r3, r7, #3
 8002664:	701a      	strb	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	7d1b      	ldrb	r3, [r3, #20]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d101      	bne.n	8002672 <push+0x1a>
 800266e:	2302      	movs	r3, #2
 8002670:	e025      	b.n	80026be <push+0x66>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	0019      	movs	r1, r3
 800267e:	0010      	movs	r0, r2
 8002680:	f7fd fec4 	bl	800040c <__aeabi_idivmod>
 8002684:	000b      	movs	r3, r1
 8002686:	001a      	movs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	611a      	str	r2, [r3, #16]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	18d3      	adds	r3, r2, r3
 80026a0:	1cfa      	adds	r2, r7, #3
 80026a2:	7812      	ldrb	r2, [r2, #0]
 80026a4:	701a      	strb	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	db01      	blt.n	80026b6 <push+0x5e>
 80026b2:	2202      	movs	r2, #2
 80026b4:	e000      	b.n	80026b8 <push+0x60>
 80026b6:	2200      	movs	r2, #0
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	751a      	strb	r2, [r3, #20]
 80026bc:	2300      	movs	r3, #0
 80026be:	0018      	movs	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b002      	add	sp, #8
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <pushStr>:
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b086      	sub	sp, #24
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	60f8      	str	r0, [r7, #12]
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	607a      	str	r2, [r7, #4]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6899      	ldr	r1, [r3, #8]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	18cb      	adds	r3, r1, r3
 80026de:	429a      	cmp	r2, r3
 80026e0:	da01      	bge.n	80026e6 <pushStr+0x20>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e013      	b.n	800270e <pushStr+0x48>
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	e00b      	b.n	8002704 <pushStr+0x3e>
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	18d3      	adds	r3, r2, r3
 80026f2:	781a      	ldrb	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	0011      	movs	r1, r2
 80026f8:	0018      	movs	r0, r3
 80026fa:	f7ff ffad 	bl	8002658 <push>
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	3301      	adds	r3, #1
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	429a      	cmp	r2, r3
 800270a:	dbef      	blt.n	80026ec <pushStr+0x26>
 800270c:	2300      	movs	r3, #0
 800270e:	0018      	movs	r0, r3
 8002710:	46bd      	mov	sp, r7
 8002712:	b006      	add	sp, #24
 8002714:	bd80      	pop	{r7, pc}

08002716 <pop>:
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	6039      	str	r1, [r7, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	7d1b      	ldrb	r3, [r3, #20]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <pop+0x16>
 8002728:	2301      	movs	r3, #1
 800272a:	e023      	b.n	8002774 <pop+0x5e>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	18d3      	adds	r3, r2, r3
 8002736:	781a      	ldrb	r2, [r3, #0]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	701a      	strb	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	0019      	movs	r1, r3
 8002748:	0010      	movs	r0, r2
 800274a:	f7fd fe5f 	bl	800040c <__aeabi_idivmod>
 800274e:	000b      	movs	r3, r1
 8002750:	001a      	movs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	1e5a      	subs	r2, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	1e5a      	subs	r2, r3, #1
 8002766:	4313      	orrs	r3, r2
 8002768:	0fdb      	lsrs	r3, r3, #31
 800276a:	b2db      	uxtb	r3, r3
 800276c:	001a      	movs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	751a      	strb	r2, [r3, #20]
 8002772:	2300      	movs	r3, #0
 8002774:	0018      	movs	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	b002      	add	sp, #8
 800277a:	bd80      	pop	{r7, pc}

0800277c <at>:
 800277c:	b580      	push	{r7, lr}
 800277e:	b086      	sub	sp, #24
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	7d1b      	ldrb	r3, [r3, #20]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d101      	bne.n	8002794 <at+0x18>
 8002790:	2301      	movs	r3, #1
 8002792:	e01a      	b.n	80027ca <at+0x4e>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	429a      	cmp	r2, r3
 800279c:	db01      	blt.n	80027a2 <at+0x26>
 800279e:	2303      	movs	r3, #3
 80027a0:	e013      	b.n	80027ca <at+0x4e>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	18d2      	adds	r2, r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	0019      	movs	r1, r3
 80027b0:	0010      	movs	r0, r2
 80027b2:	f7fd fe2b 	bl	800040c <__aeabi_idivmod>
 80027b6:	000b      	movs	r3, r1
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	18d3      	adds	r3, r2, r3
 80027c2:	781a      	ldrb	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	701a      	strb	r2, [r3, #0]
 80027c8:	2300      	movs	r3, #0
 80027ca:	0018      	movs	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b006      	add	sp, #24
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <getCount>:



//_____Zjistí počet registrů_____//
static uint8_t getCount(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af02      	add	r7, sp, #8
	uint8_t question;
	uint8_t answer;
	regCount = 0;
 80027da:	4b1f      	ldr	r3, [pc, #124]	; (8002858 <getCount+0x84>)
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]

	do
	{
		question = 42;
 80027e0:	1dfb      	adds	r3, r7, #7
 80027e2:	222a      	movs	r2, #42	; 0x2a
 80027e4:	701a      	strb	r2, [r3, #0]
		answer = 0;
 80027e6:	1dbb      	adds	r3, r7, #6
 80027e8:	2200      	movs	r2, #0
 80027ea:	701a      	strb	r2, [r3, #0]
		if(HAL_SPI_TransmitReceive(&hspi1, &question, &answer, 1, 100) != HAL_OK)
 80027ec:	1dba      	adds	r2, r7, #6
 80027ee:	1df9      	adds	r1, r7, #7
 80027f0:	481a      	ldr	r0, [pc, #104]	; (800285c <getCount+0x88>)
 80027f2:	2364      	movs	r3, #100	; 0x64
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2301      	movs	r3, #1
 80027f8:	f004 fe34 	bl	8007464 <HAL_SPI_TransmitReceive>
 80027fc:	1e03      	subs	r3, r0, #0
 80027fe:	d001      	beq.n	8002804 <getCount+0x30>
			return 0;
 8002800:	2300      	movs	r3, #0
 8002802:	e024      	b.n	800284e <getCount+0x7a>
		regCount++;
 8002804:	4b14      	ldr	r3, [pc, #80]	; (8002858 <getCount+0x84>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	3301      	adds	r3, #1
 800280a:	b2da      	uxtb	r2, r3
 800280c:	4b12      	ldr	r3, [pc, #72]	; (8002858 <getCount+0x84>)
 800280e:	701a      	strb	r2, [r3, #0]

		HAL_Delay(1);
 8002810:	2001      	movs	r0, #1
 8002812:	f000 fe73 	bl	80034fc <HAL_Delay>

		if(regCount >= 100)	//Ošetření nepřipojených relé desek
 8002816:	4b10      	ldr	r3, [pc, #64]	; (8002858 <getCount+0x84>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b63      	cmp	r3, #99	; 0x63
 800281c:	d909      	bls.n	8002832 <getCount+0x5e>
		{
			flags.conErr = 1;
 800281e:	4b10      	ldr	r3, [pc, #64]	; (8002860 <getCount+0x8c>)
 8002820:	7e1a      	ldrb	r2, [r3, #24]
 8002822:	2140      	movs	r1, #64	; 0x40
 8002824:	430a      	orrs	r2, r1
 8002826:	761a      	strb	r2, [r3, #24]
			regCount = 0;
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <getCount+0x84>)
 800282a:	2200      	movs	r2, #0
 800282c:	701a      	strb	r2, [r3, #0]
			return 0;
 800282e:	2300      	movs	r3, #0
 8002830:	e00d      	b.n	800284e <getCount+0x7a>
		}
	}
	while(answer != question);
 8002832:	1dbb      	adds	r3, r7, #6
 8002834:	781a      	ldrb	r2, [r3, #0]
 8002836:	1dfb      	adds	r3, r7, #7
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d1d0      	bne.n	80027e0 <getCount+0xc>

	regCount--;
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <getCount+0x84>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	3b01      	subs	r3, #1
 8002844:	b2da      	uxtb	r2, r3
 8002846:	4b04      	ldr	r3, [pc, #16]	; (8002858 <getCount+0x84>)
 8002848:	701a      	strb	r2, [r3, #0]

	return regCount;
 800284a:	4b03      	ldr	r3, [pc, #12]	; (8002858 <getCount+0x84>)
 800284c:	781b      	ldrb	r3, [r3, #0]
}
 800284e:	0018      	movs	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	b002      	add	sp, #8
 8002854:	bd80      	pop	{r7, pc}
 8002856:	46c0      	nop			; (mov r8, r8)
 8002858:	200006b8 	.word	0x200006b8
 800285c:	20000254 	.word	0x20000254
 8002860:	20000680 	.word	0x20000680

08002864 <regInit>:

//_____Inicializuje registry_____//
REG_STATE regInit(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
	//___Clear registrů___//
	REG_CLR_ACTIVE;
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	019b      	lsls	r3, r3, #6
 800286e:	4827      	ldr	r0, [pc, #156]	; (800290c <regInit+0xa8>)
 8002870:	2200      	movs	r2, #0
 8002872:	0019      	movs	r1, r3
 8002874:	f001 ff1f 	bl	80046b6 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002878:	2005      	movs	r0, #5
 800287a:	f000 fe3f 	bl	80034fc <HAL_Delay>
	REG_CLR_INACTIVE;
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	019b      	lsls	r3, r3, #6
 8002882:	4822      	ldr	r0, [pc, #136]	; (800290c <regInit+0xa8>)
 8002884:	2201      	movs	r2, #1
 8002886:	0019      	movs	r1, r3
 8002888:	f001 ff15 	bl	80046b6 <HAL_GPIO_WritePin>

	REG_DISABLE;
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	021b      	lsls	r3, r3, #8
 8002890:	481e      	ldr	r0, [pc, #120]	; (800290c <regInit+0xa8>)
 8002892:	2201      	movs	r2, #1
 8002894:	0019      	movs	r1, r3
 8002896:	f001 ff0e 	bl	80046b6 <HAL_GPIO_WritePin>

		if(getCount() == 0)
 800289a:	f7ff ff9b 	bl	80027d4 <getCount>
 800289e:	1e03      	subs	r3, r0, #0
 80028a0:	d101      	bne.n	80028a6 <regInit+0x42>
		{
			return REG_CON_ERR;	//Connection error
 80028a2:	2301      	movs	r3, #1
 80028a4:	e02e      	b.n	8002904 <regInit+0xa0>
		}

		regValues = (uint8_t*) malloc(regCount * sizeof(uint8_t));
 80028a6:	4b1a      	ldr	r3, [pc, #104]	; (8002910 <regInit+0xac>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	0018      	movs	r0, r3
 80028ac:	f00b f864 	bl	800d978 <malloc>
 80028b0:	0003      	movs	r3, r0
 80028b2:	001a      	movs	r2, r3
 80028b4:	4b17      	ldr	r3, [pc, #92]	; (8002914 <regInit+0xb0>)
 80028b6:	601a      	str	r2, [r3, #0]
		if(regValues == NULL)
 80028b8:	4b16      	ldr	r3, [pc, #88]	; (8002914 <regInit+0xb0>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d104      	bne.n	80028ca <regInit+0x66>
		{
			regState = REG_ERR;
 80028c0:	4b15      	ldr	r3, [pc, #84]	; (8002918 <regInit+0xb4>)
 80028c2:	2202      	movs	r2, #2
 80028c4:	701a      	strb	r2, [r3, #0]
			return REG_ERR;
 80028c6:	2302      	movs	r3, #2
 80028c8:	e01c      	b.n	8002904 <regInit+0xa0>
		}

		for(int i = 0; i < regCount; i++)
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	e008      	b.n	80028e2 <regInit+0x7e>
		{
			regValues[i] = 0;
 80028d0:	4b10      	ldr	r3, [pc, #64]	; (8002914 <regInit+0xb0>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	18d3      	adds	r3, r2, r3
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < regCount; i++)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3301      	adds	r3, #1
 80028e0:	607b      	str	r3, [r7, #4]
 80028e2:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <regInit+0xac>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	001a      	movs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4293      	cmp	r3, r2
 80028ec:	dbf0      	blt.n	80028d0 <regInit+0x6c>
		}

		sendData();
 80028ee:	f000 f815 	bl	800291c <sendData>

	REG_ENABLE;
 80028f2:	2380      	movs	r3, #128	; 0x80
 80028f4:	021b      	lsls	r3, r3, #8
 80028f6:	4805      	ldr	r0, [pc, #20]	; (800290c <regInit+0xa8>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	0019      	movs	r1, r3
 80028fc:	f001 fedb 	bl	80046b6 <HAL_GPIO_WritePin>

	return regState;
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <regInit+0xb4>)
 8002902:	781b      	ldrb	r3, [r3, #0]
}
 8002904:	0018      	movs	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	b002      	add	sp, #8
 800290a:	bd80      	pop	{r7, pc}
 800290c:	48000400 	.word	0x48000400
 8002910:	200006b8 	.word	0x200006b8
 8002914:	200006b4 	.word	0x200006b4
 8002918:	200006b1 	.word	0x200006b1

0800291c <sendData>:

//_____Pošle data z regValues do registrů_____//
REG_STATE sendData(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
	if(HAL_SPI_Transmit(&hspi1, &regValues[0], regCount, 100) == HAL_OK)
 8002920:	4b15      	ldr	r3, [pc, #84]	; (8002978 <sendData+0x5c>)
 8002922:	6819      	ldr	r1, [r3, #0]
 8002924:	4b15      	ldr	r3, [pc, #84]	; (800297c <sendData+0x60>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	b29a      	uxth	r2, r3
 800292a:	4815      	ldr	r0, [pc, #84]	; (8002980 <sendData+0x64>)
 800292c:	2364      	movs	r3, #100	; 0x64
 800292e:	f004 fc41 	bl	80071b4 <HAL_SPI_Transmit>
 8002932:	1e03      	subs	r3, r0, #0
 8002934:	d111      	bne.n	800295a <sendData+0x3e>
	{
		//vytvoř pulz na RCLK¨
		REG_RCLK_HIGH;
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	01db      	lsls	r3, r3, #7
 800293a:	4812      	ldr	r0, [pc, #72]	; (8002984 <sendData+0x68>)
 800293c:	2201      	movs	r2, #1
 800293e:	0019      	movs	r1, r3
 8002940:	f001 feb9 	bl	80046b6 <HAL_GPIO_WritePin>
		//HAL_Delay(1);
		REG_RCLK_LOW;
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	01db      	lsls	r3, r3, #7
 8002948:	480e      	ldr	r0, [pc, #56]	; (8002984 <sendData+0x68>)
 800294a:	2200      	movs	r2, #0
 800294c:	0019      	movs	r1, r3
 800294e:	f001 feb2 	bl	80046b6 <HAL_GPIO_WritePin>

		regState = REG_OK;
 8002952:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <sendData+0x6c>)
 8002954:	2200      	movs	r2, #0
 8002956:	701a      	strb	r2, [r3, #0]
 8002958:	e009      	b.n	800296e <sendData+0x52>
	}
	else
	{
		regState = REG_ERR;
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <sendData+0x6c>)
 800295c:	2202      	movs	r2, #2
 800295e:	701a      	strb	r2, [r3, #0]

		REG_DISABLE;	//výstup ve stavu vysoké impedance (zabrání nechtěnému nastavení relé)
 8002960:	2380      	movs	r3, #128	; 0x80
 8002962:	021b      	lsls	r3, r3, #8
 8002964:	4807      	ldr	r0, [pc, #28]	; (8002984 <sendData+0x68>)
 8002966:	2201      	movs	r2, #1
 8002968:	0019      	movs	r1, r3
 800296a:	f001 fea4 	bl	80046b6 <HAL_GPIO_WritePin>
	}

	return regState;
 800296e:	4b06      	ldr	r3, [pc, #24]	; (8002988 <sendData+0x6c>)
 8002970:	781b      	ldrb	r3, [r3, #0]
}
 8002972:	0018      	movs	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	200006b4 	.word	0x200006b4
 800297c:	200006b8 	.word	0x200006b8
 8002980:	20000254 	.word	0x20000254
 8002984:	48000400 	.word	0x48000400
 8002988:	200006b1 	.word	0x200006b1

0800298c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002992:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <HAL_MspInit+0x44>)
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <HAL_MspInit+0x44>)
 8002998:	2101      	movs	r1, #1
 800299a:	430a      	orrs	r2, r1
 800299c:	619a      	str	r2, [r3, #24]
 800299e:	4b0c      	ldr	r3, [pc, #48]	; (80029d0 <HAL_MspInit+0x44>)
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	2201      	movs	r2, #1
 80029a4:	4013      	ands	r3, r2
 80029a6:	607b      	str	r3, [r7, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029aa:	4b09      	ldr	r3, [pc, #36]	; (80029d0 <HAL_MspInit+0x44>)
 80029ac:	69da      	ldr	r2, [r3, #28]
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <HAL_MspInit+0x44>)
 80029b0:	2180      	movs	r1, #128	; 0x80
 80029b2:	0549      	lsls	r1, r1, #21
 80029b4:	430a      	orrs	r2, r1
 80029b6:	61da      	str	r2, [r3, #28]
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <HAL_MspInit+0x44>)
 80029ba:	69da      	ldr	r2, [r3, #28]
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	055b      	lsls	r3, r3, #21
 80029c0:	4013      	ands	r3, r2
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	46bd      	mov	sp, r7
 80029ca:	b002      	add	sp, #8
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	40021000 	.word	0x40021000

080029d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029d4:	b590      	push	{r4, r7, lr}
 80029d6:	b08d      	sub	sp, #52	; 0x34
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	241c      	movs	r4, #28
 80029de:	193b      	adds	r3, r7, r4
 80029e0:	0018      	movs	r0, r3
 80029e2:	2314      	movs	r3, #20
 80029e4:	001a      	movs	r2, r3
 80029e6:	2100      	movs	r1, #0
 80029e8:	f00a ffe3 	bl	800d9b2 <memset>
  if(hadc->Instance==ADC1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a3a      	ldr	r2, [pc, #232]	; (8002adc <HAL_ADC_MspInit+0x108>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d16d      	bne.n	8002ad2 <HAL_ADC_MspInit+0xfe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029f6:	4b3a      	ldr	r3, [pc, #232]	; (8002ae0 <HAL_ADC_MspInit+0x10c>)
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	4b39      	ldr	r3, [pc, #228]	; (8002ae0 <HAL_ADC_MspInit+0x10c>)
 80029fc:	2180      	movs	r1, #128	; 0x80
 80029fe:	0089      	lsls	r1, r1, #2
 8002a00:	430a      	orrs	r2, r1
 8002a02:	619a      	str	r2, [r3, #24]
 8002a04:	4b36      	ldr	r3, [pc, #216]	; (8002ae0 <HAL_ADC_MspInit+0x10c>)
 8002a06:	699a      	ldr	r2, [r3, #24]
 8002a08:	2380      	movs	r3, #128	; 0x80
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
 8002a10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a12:	4b33      	ldr	r3, [pc, #204]	; (8002ae0 <HAL_ADC_MspInit+0x10c>)
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	4b32      	ldr	r3, [pc, #200]	; (8002ae0 <HAL_ADC_MspInit+0x10c>)
 8002a18:	2180      	movs	r1, #128	; 0x80
 8002a1a:	0309      	lsls	r1, r1, #12
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	615a      	str	r2, [r3, #20]
 8002a20:	4b2f      	ldr	r3, [pc, #188]	; (8002ae0 <HAL_ADC_MspInit+0x10c>)
 8002a22:	695a      	ldr	r2, [r3, #20]
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	031b      	lsls	r3, r3, #12
 8002a28:	4013      	ands	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]
 8002a2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ae0 <HAL_ADC_MspInit+0x10c>)
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	4b2b      	ldr	r3, [pc, #172]	; (8002ae0 <HAL_ADC_MspInit+0x10c>)
 8002a34:	2180      	movs	r1, #128	; 0x80
 8002a36:	0289      	lsls	r1, r1, #10
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	615a      	str	r2, [r3, #20]
 8002a3c:	4b28      	ldr	r3, [pc, #160]	; (8002ae0 <HAL_ADC_MspInit+0x10c>)
 8002a3e:	695a      	ldr	r2, [r3, #20]
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	029b      	lsls	r3, r3, #10
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a4a:	4b25      	ldr	r3, [pc, #148]	; (8002ae0 <HAL_ADC_MspInit+0x10c>)
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	4b24      	ldr	r3, [pc, #144]	; (8002ae0 <HAL_ADC_MspInit+0x10c>)
 8002a50:	2180      	movs	r1, #128	; 0x80
 8002a52:	02c9      	lsls	r1, r1, #11
 8002a54:	430a      	orrs	r2, r1
 8002a56:	615a      	str	r2, [r3, #20]
 8002a58:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <HAL_ADC_MspInit+0x10c>)
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	02db      	lsls	r3, r3, #11
 8002a60:	4013      	ands	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
 8002a64:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002a66:	193b      	adds	r3, r7, r4
 8002a68:	223f      	movs	r2, #63	; 0x3f
 8002a6a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a6c:	193b      	adds	r3, r7, r4
 8002a6e:	2203      	movs	r2, #3
 8002a70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a72:	193b      	adds	r3, r7, r4
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a78:	193b      	adds	r3, r7, r4
 8002a7a:	4a1a      	ldr	r2, [pc, #104]	; (8002ae4 <HAL_ADC_MspInit+0x110>)
 8002a7c:	0019      	movs	r1, r3
 8002a7e:	0010      	movs	r0, r2
 8002a80:	f001 fc84 	bl	800438c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002a84:	193b      	adds	r3, r7, r4
 8002a86:	22ff      	movs	r2, #255	; 0xff
 8002a88:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a8a:	193b      	adds	r3, r7, r4
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	193b      	adds	r3, r7, r4
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a96:	193a      	adds	r2, r7, r4
 8002a98:	2390      	movs	r3, #144	; 0x90
 8002a9a:	05db      	lsls	r3, r3, #23
 8002a9c:	0011      	movs	r1, r2
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f001 fc74 	bl	800438c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002aa4:	193b      	adds	r3, r7, r4
 8002aa6:	2203      	movs	r2, #3
 8002aa8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002aaa:	193b      	adds	r3, r7, r4
 8002aac:	2203      	movs	r2, #3
 8002aae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	193b      	adds	r3, r7, r4
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab6:	193b      	adds	r3, r7, r4
 8002ab8:	4a0b      	ldr	r2, [pc, #44]	; (8002ae8 <HAL_ADC_MspInit+0x114>)
 8002aba:	0019      	movs	r1, r3
 8002abc:	0010      	movs	r0, r2
 8002abe:	f001 fc65 	bl	800438c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	200c      	movs	r0, #12
 8002ac8:	f001 fbb0 	bl	800422c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8002acc:	200c      	movs	r0, #12
 8002ace:	f001 fbc2 	bl	8004256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ad2:	46c0      	nop			; (mov r8, r8)
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	b00d      	add	sp, #52	; 0x34
 8002ad8:	bd90      	pop	{r4, r7, pc}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	40012400 	.word	0x40012400
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	48000800 	.word	0x48000800
 8002ae8:	48000400 	.word	0x48000400

08002aec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b08b      	sub	sp, #44	; 0x2c
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	2414      	movs	r4, #20
 8002af6:	193b      	adds	r3, r7, r4
 8002af8:	0018      	movs	r0, r3
 8002afa:	2314      	movs	r3, #20
 8002afc:	001a      	movs	r2, r3
 8002afe:	2100      	movs	r1, #0
 8002b00:	f00a ff57 	bl	800d9b2 <memset>
  if(hspi->Instance==SPI1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a1c      	ldr	r2, [pc, #112]	; (8002b7c <HAL_SPI_MspInit+0x90>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d131      	bne.n	8002b72 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b0e:	4b1c      	ldr	r3, [pc, #112]	; (8002b80 <HAL_SPI_MspInit+0x94>)
 8002b10:	699a      	ldr	r2, [r3, #24]
 8002b12:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <HAL_SPI_MspInit+0x94>)
 8002b14:	2180      	movs	r1, #128	; 0x80
 8002b16:	0149      	lsls	r1, r1, #5
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	619a      	str	r2, [r3, #24]
 8002b1c:	4b18      	ldr	r3, [pc, #96]	; (8002b80 <HAL_SPI_MspInit+0x94>)
 8002b1e:	699a      	ldr	r2, [r3, #24]
 8002b20:	2380      	movs	r3, #128	; 0x80
 8002b22:	015b      	lsls	r3, r3, #5
 8002b24:	4013      	ands	r3, r2
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <HAL_SPI_MspInit+0x94>)
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <HAL_SPI_MspInit+0x94>)
 8002b30:	2180      	movs	r1, #128	; 0x80
 8002b32:	02c9      	lsls	r1, r1, #11
 8002b34:	430a      	orrs	r2, r1
 8002b36:	615a      	str	r2, [r3, #20]
 8002b38:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <HAL_SPI_MspInit+0x94>)
 8002b3a:	695a      	ldr	r2, [r3, #20]
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	02db      	lsls	r3, r3, #11
 8002b40:	4013      	ands	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002b46:	0021      	movs	r1, r4
 8002b48:	187b      	adds	r3, r7, r1
 8002b4a:	2238      	movs	r2, #56	; 0x38
 8002b4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	187b      	adds	r3, r7, r1
 8002b50:	2202      	movs	r2, #2
 8002b52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b54:	187b      	adds	r3, r7, r1
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b5a:	187b      	adds	r3, r7, r1
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002b60:	187b      	adds	r3, r7, r1
 8002b62:	2200      	movs	r2, #0
 8002b64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b66:	187b      	adds	r3, r7, r1
 8002b68:	4a06      	ldr	r2, [pc, #24]	; (8002b84 <HAL_SPI_MspInit+0x98>)
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	0010      	movs	r0, r2
 8002b6e:	f001 fc0d 	bl	800438c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b00b      	add	sp, #44	; 0x2c
 8002b78:	bd90      	pop	{r4, r7, pc}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	40013000 	.word	0x40013000
 8002b80:	40021000 	.word	0x40021000
 8002b84:	48000400 	.word	0x48000400

08002b88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0e      	ldr	r2, [pc, #56]	; (8002bd0 <HAL_TIM_Base_MspInit+0x48>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d115      	bne.n	8002bc6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <HAL_TIM_Base_MspInit+0x4c>)
 8002b9c:	69da      	ldr	r2, [r3, #28]
 8002b9e:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <HAL_TIM_Base_MspInit+0x4c>)
 8002ba0:	2180      	movs	r1, #128	; 0x80
 8002ba2:	0049      	lsls	r1, r1, #1
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	61da      	str	r2, [r3, #28]
 8002ba8:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <HAL_TIM_Base_MspInit+0x4c>)
 8002baa:	69da      	ldr	r2, [r3, #28]
 8002bac:	2380      	movs	r3, #128	; 0x80
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2100      	movs	r1, #0
 8002bba:	2013      	movs	r0, #19
 8002bbc:	f001 fb36 	bl	800422c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002bc0:	2013      	movs	r0, #19
 8002bc2:	f001 fb48 	bl	8004256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b004      	add	sp, #16
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	40002000 	.word	0x40002000
 8002bd4:	40021000 	.word	0x40021000

08002bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bd8:	b590      	push	{r4, r7, lr}
 8002bda:	b08b      	sub	sp, #44	; 0x2c
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	2414      	movs	r4, #20
 8002be2:	193b      	adds	r3, r7, r4
 8002be4:	0018      	movs	r0, r3
 8002be6:	2314      	movs	r3, #20
 8002be8:	001a      	movs	r2, r3
 8002bea:	2100      	movs	r1, #0
 8002bec:	f00a fee1 	bl	800d9b2 <memset>
  if(huart->Instance==USART3)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a20      	ldr	r2, [pc, #128]	; (8002c78 <HAL_UART_MspInit+0xa0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d13a      	bne.n	8002c70 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bfa:	4b20      	ldr	r3, [pc, #128]	; (8002c7c <HAL_UART_MspInit+0xa4>)
 8002bfc:	69da      	ldr	r2, [r3, #28]
 8002bfe:	4b1f      	ldr	r3, [pc, #124]	; (8002c7c <HAL_UART_MspInit+0xa4>)
 8002c00:	2180      	movs	r1, #128	; 0x80
 8002c02:	02c9      	lsls	r1, r1, #11
 8002c04:	430a      	orrs	r2, r1
 8002c06:	61da      	str	r2, [r3, #28]
 8002c08:	4b1c      	ldr	r3, [pc, #112]	; (8002c7c <HAL_UART_MspInit+0xa4>)
 8002c0a:	69da      	ldr	r2, [r3, #28]
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	02db      	lsls	r3, r3, #11
 8002c10:	4013      	ands	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c16:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <HAL_UART_MspInit+0xa4>)
 8002c18:	695a      	ldr	r2, [r3, #20]
 8002c1a:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <HAL_UART_MspInit+0xa4>)
 8002c1c:	2180      	movs	r1, #128	; 0x80
 8002c1e:	0309      	lsls	r1, r1, #12
 8002c20:	430a      	orrs	r2, r1
 8002c22:	615a      	str	r2, [r3, #20]
 8002c24:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <HAL_UART_MspInit+0xa4>)
 8002c26:	695a      	ldr	r2, [r3, #20]
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	031b      	lsls	r3, r3, #12
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c32:	193b      	adds	r3, r7, r4
 8002c34:	22c0      	movs	r2, #192	; 0xc0
 8002c36:	0112      	lsls	r2, r2, #4
 8002c38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3a:	0021      	movs	r1, r4
 8002c3c:	187b      	adds	r3, r7, r1
 8002c3e:	2202      	movs	r2, #2
 8002c40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	187b      	adds	r3, r7, r1
 8002c44:	2200      	movs	r2, #0
 8002c46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c48:	187b      	adds	r3, r7, r1
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8002c4e:	187b      	adds	r3, r7, r1
 8002c50:	2201      	movs	r2, #1
 8002c52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c54:	187b      	adds	r3, r7, r1
 8002c56:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <HAL_UART_MspInit+0xa8>)
 8002c58:	0019      	movs	r1, r3
 8002c5a:	0010      	movs	r0, r2
 8002c5c:	f001 fb96 	bl	800438c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8002c60:	2200      	movs	r2, #0
 8002c62:	2100      	movs	r1, #0
 8002c64:	201d      	movs	r0, #29
 8002c66:	f001 fae1 	bl	800422c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8002c6a:	201d      	movs	r0, #29
 8002c6c:	f001 faf3 	bl	8004256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c70:	46c0      	nop			; (mov r8, r8)
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b00b      	add	sp, #44	; 0x2c
 8002c76:	bd90      	pop	{r4, r7, pc}
 8002c78:	40004800 	.word	0x40004800
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	48000800 	.word	0x48000800

08002c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c88:	e7fe      	b.n	8002c88 <NMI_Handler+0x4>

08002c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c8e:	e7fe      	b.n	8002c8e <HardFault_Handler+0x4>

08002c90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002c94:	46c0      	nop			; (mov r8, r8)
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ca8:	f000 fc0c 	bl	80034c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cac:	46c0      	nop			; (mov r8, r8)
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_1_Pin);
 8002cb6:	2380      	movs	r3, #128	; 0x80
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f001 fd34 	bl	8004728 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_0_Pin);
 8002cc0:	2380      	movs	r3, #128	; 0x80
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f001 fd2f 	bl	8004728 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002cca:	46c0      	nop			; (mov r8, r8)
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002cd4:	4b03      	ldr	r3, [pc, #12]	; (8002ce4 <ADC1_COMP_IRQHandler+0x14>)
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f000 fe3c 	bl	8003954 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 8002cdc:	46c0      	nop			; (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	20000214 	.word	0x20000214

08002ce8 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002cec:	4b03      	ldr	r3, [pc, #12]	; (8002cfc <TIM14_IRQHandler+0x14>)
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f004 fffa 	bl	8007ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002cf4:	46c0      	nop			; (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	200002b8 	.word	0x200002b8

08002d00 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d04:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <USART3_4_IRQHandler+0x14>)
 8002d06:	0018      	movs	r0, r3
 8002d08:	f005 fc5c 	bl	80085c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8002d0c:	46c0      	nop			; (mov r8, r8)
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			; (mov r8, r8)
 8002d14:	20000300 	.word	0x20000300

08002d18 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002d1c:	4b03      	ldr	r3, [pc, #12]	; (8002d2c <USB_IRQHandler+0x14>)
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f001 fe54 	bl	80049cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	2000136c 	.word	0x2000136c

08002d30 <_sbrk>:
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	4a14      	ldr	r2, [pc, #80]	; (8002d8c <_sbrk+0x5c>)
 8002d3a:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <_sbrk+0x60>)
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	613b      	str	r3, [r7, #16]
 8002d44:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <_sbrk+0x64>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d102      	bne.n	8002d52 <_sbrk+0x22>
 8002d4c:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <_sbrk+0x64>)
 8002d4e:	4a12      	ldr	r2, [pc, #72]	; (8002d98 <_sbrk+0x68>)
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	4b10      	ldr	r3, [pc, #64]	; (8002d94 <_sbrk+0x64>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	18d3      	adds	r3, r2, r3
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d207      	bcs.n	8002d70 <_sbrk+0x40>
 8002d60:	f00a fde0 	bl	800d924 <__errno>
 8002d64:	0003      	movs	r3, r0
 8002d66:	220c      	movs	r2, #12
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	425b      	negs	r3, r3
 8002d6e:	e009      	b.n	8002d84 <_sbrk+0x54>
 8002d70:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <_sbrk+0x64>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <_sbrk+0x64>)
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	18d2      	adds	r2, r2, r3
 8002d7e:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <_sbrk+0x64>)
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	0018      	movs	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b006      	add	sp, #24
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	20004000 	.word	0x20004000
 8002d90:	00000400 	.word	0x00000400
 8002d94:	200006bc 	.word	0x200006bc
 8002d98:	20001890 	.word	0x20001890

08002d9c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002da0:	46c0      	nop			; (mov r8, r8)
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <currentPhase>:
static void startTest();
static void stopTest();

//_____Dotaz na aktuální fázi testu_____//
TEST_PHASE currentPhase()
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
	return testPhase;
 8002dac:	4b02      	ldr	r3, [pc, #8]	; (8002db8 <currentPhase+0x10>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
}
 8002db0:	0018      	movs	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	200006c0 	.word	0x200006c0

08002dbc <testHandler>:

//_____Funkce pro řízení testu_____//
void testHandler()
{
 8002dbc:	b590      	push	{r4, r7, lr}
 8002dbe:	b08b      	sub	sp, #44	; 0x2c
 8002dc0:	af00      	add	r7, sp, #0
	flags.testProgress = 0;
 8002dc2:	4bcb      	ldr	r3, [pc, #812]	; (80030f0 <testHandler+0x334>)
 8002dc4:	7e1a      	ldrb	r2, [r3, #24]
 8002dc6:	2102      	movs	r1, #2
 8002dc8:	438a      	bics	r2, r1
 8002dca:	761a      	strb	r2, [r3, #24]
	flags.testCanceled = 0;
 8002dcc:	4bc8      	ldr	r3, [pc, #800]	; (80030f0 <testHandler+0x334>)
 8002dce:	7e1a      	ldrb	r2, [r3, #24]
 8002dd0:	2104      	movs	r1, #4
 8002dd2:	438a      	bics	r2, r1
 8002dd4:	761a      	strb	r2, [r3, #24]

	if(flags.instructions.startRequest)
 8002dd6:	4bc6      	ldr	r3, [pc, #792]	; (80030f0 <testHandler+0x334>)
 8002dd8:	7b1b      	ldrb	r3, [r3, #12]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	4013      	ands	r3, r2
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d032      	beq.n	8002e4a <testHandler+0x8e>
	{
		if(testPhase == WAITING)
 8002de4:	4bc3      	ldr	r3, [pc, #780]	; (80030f4 <testHandler+0x338>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d124      	bne.n	8002e36 <testHandler+0x7a>
		{
			if(flags.conErr)
 8002dec:	4bc0      	ldr	r3, [pc, #768]	; (80030f0 <testHandler+0x334>)
 8002dee:	7e1b      	ldrb	r3, [r3, #24]
 8002df0:	2240      	movs	r2, #64	; 0x40
 8002df2:	4013      	ands	r3, r2
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d01a      	beq.n	8002e30 <testHandler+0x74>
			{
				char txt[] = {"Relay PCB connection error\n"};
 8002dfa:	1d3b      	adds	r3, r7, #4
 8002dfc:	4abe      	ldr	r2, [pc, #760]	; (80030f8 <testHandler+0x33c>)
 8002dfe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002e00:	c313      	stmia	r3!, {r0, r1, r4}
 8002e02:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002e04:	c313      	stmia	r3!, {r0, r1, r4}
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	601a      	str	r2, [r3, #0]
				pushStr(USB_Tx_Buffer, txt, strlen(txt));
 8002e0a:	4bbc      	ldr	r3, [pc, #752]	; (80030fc <testHandler+0x340>)
 8002e0c:	681c      	ldr	r4, [r3, #0]
 8002e0e:	1d3b      	adds	r3, r7, #4
 8002e10:	0018      	movs	r0, r3
 8002e12:	f7fd f979 	bl	8000108 <strlen>
 8002e16:	0003      	movs	r3, r0
 8002e18:	001a      	movs	r2, r3
 8002e1a:	1d3b      	adds	r3, r7, #4
 8002e1c:	0019      	movs	r1, r3
 8002e1e:	0020      	movs	r0, r4
 8002e20:	f7ff fc51 	bl	80026c6 <pushStr>
				flags.instructions.startRequest = 0;
 8002e24:	4bb2      	ldr	r3, [pc, #712]	; (80030f0 <testHandler+0x334>)
 8002e26:	7b1a      	ldrb	r2, [r3, #12]
 8002e28:	2101      	movs	r1, #1
 8002e2a:	438a      	bics	r2, r1
 8002e2c:	731a      	strb	r2, [r3, #12]
 8002e2e:	e00c      	b.n	8002e4a <testHandler+0x8e>
			}
			else
			{
				startTest();
 8002e30:	f000 f9f6 	bl	8003220 <startTest>
 8002e34:	e009      	b.n	8002e4a <testHandler+0x8e>
			}
		}
		else
		{
			flags.startConflict = 1;
 8002e36:	4bae      	ldr	r3, [pc, #696]	; (80030f0 <testHandler+0x334>)
 8002e38:	7e1a      	ldrb	r2, [r3, #24]
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	761a      	strb	r2, [r3, #24]
			flags.instructions.startRequest = 0;
 8002e40:	4bab      	ldr	r3, [pc, #684]	; (80030f0 <testHandler+0x334>)
 8002e42:	7b1a      	ldrb	r2, [r3, #12]
 8002e44:	2101      	movs	r1, #1
 8002e46:	438a      	bics	r2, r1
 8002e48:	731a      	strb	r2, [r3, #12]
		}
	}
	if(flags.instructions.stopRequest)
 8002e4a:	4ba9      	ldr	r3, [pc, #676]	; (80030f0 <testHandler+0x334>)
 8002e4c:	7b1b      	ldrb	r3, [r3, #12]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	4013      	ands	r3, r2
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <testHandler+0xa0>
	{
		stopTest();
 8002e58:	f000 fa88 	bl	800336c <stopTest>
	}

	if(testPhase != WAITING)
 8002e5c:	4ba5      	ldr	r3, [pc, #660]	; (80030f4 <testHandler+0x338>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00d      	beq.n	8002e80 <testHandler+0xc4>
	{
		if(flags.buttons.butt0_ver)
 8002e64:	4ba2      	ldr	r3, [pc, #648]	; (80030f0 <testHandler+0x334>)
 8002e66:	791b      	ldrb	r3, [r3, #4]
 8002e68:	2202      	movs	r2, #2
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d006      	beq.n	8002e80 <testHandler+0xc4>
		{
			stopTest();
 8002e72:	f000 fa7b 	bl	800336c <stopTest>
			flags.testCanceled = 1;
 8002e76:	4b9e      	ldr	r3, [pc, #632]	; (80030f0 <testHandler+0x334>)
 8002e78:	7e1a      	ldrb	r2, [r3, #24]
 8002e7a:	2104      	movs	r1, #4
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	761a      	strb	r2, [r3, #24]
		}
	}

	switch(testPhase)
 8002e80:	4b9c      	ldr	r3, [pc, #624]	; (80030f4 <testHandler+0x338>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b06      	cmp	r3, #6
 8002e86:	d900      	bls.n	8002e8a <testHandler+0xce>
 8002e88:	e1be      	b.n	8003208 <testHandler+0x44c>
 8002e8a:	009a      	lsls	r2, r3, #2
 8002e8c:	4b9c      	ldr	r3, [pc, #624]	; (8003100 <testHandler+0x344>)
 8002e8e:	18d3      	adds	r3, r2, r3
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	469f      	mov	pc, r3
	{
	case WAITING:
		flags.testProgress = 0;
 8002e94:	4b96      	ldr	r3, [pc, #600]	; (80030f0 <testHandler+0x334>)
 8002e96:	7e1a      	ldrb	r2, [r3, #24]
 8002e98:	2102      	movs	r1, #2
 8002e9a:	438a      	bics	r2, r1
 8002e9c:	761a      	strb	r2, [r3, #24]
		//flags.meas.measRequest = 0;
		break;
 8002e9e:	e1b3      	b.n	8003208 <testHandler+0x44c>
	case START:

		//___Pokud je dokončeno měření napětí naprázdno...____//
		if(flags.meas.measComplete)
 8002ea0:	4b93      	ldr	r3, [pc, #588]	; (80030f0 <testHandler+0x334>)
 8002ea2:	7d1b      	ldrb	r3, [r3, #20]
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d005      	beq.n	8002eba <testHandler+0xfe>
		{
			testPhase++;
 8002eae:	4b91      	ldr	r3, [pc, #580]	; (80030f4 <testHandler+0x338>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	4b8f      	ldr	r3, [pc, #572]	; (80030f4 <testHandler+0x338>)
 8002eb8:	701a      	strb	r2, [r3, #0]
		}

		if(flags.time.sec)
 8002eba:	4b8d      	ldr	r3, [pc, #564]	; (80030f0 <testHandler+0x334>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d05e      	beq.n	8002f86 <testHandler+0x1ca>
		{
			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED1);	//blikání prvni progress led
 8002ec8:	4b8e      	ldr	r3, [pc, #568]	; (8003104 <testHandler+0x348>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	781a      	ldrb	r2, [r3, #0]
 8002ece:	4b8d      	ldr	r3, [pc, #564]	; (8003104 <testHandler+0x348>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2120      	movs	r1, #32
 8002ed4:	404a      	eors	r2, r1
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	701a      	strb	r2, [r3, #0]
			sendData();
 8002eda:	f7ff fd1f 	bl	800291c <sendData>

			switch(sysTime[SYSTIME_SEC])
 8002ede:	4b8a      	ldr	r3, [pc, #552]	; (8003108 <testHandler+0x34c>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b05      	cmp	r3, #5
 8002ee4:	d851      	bhi.n	8002f8a <testHandler+0x1ce>
 8002ee6:	009a      	lsls	r2, r3, #2
 8002ee8:	4b88      	ldr	r3, [pc, #544]	; (800310c <testHandler+0x350>)
 8002eea:	18d3      	adds	r3, r2, r3
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	469f      	mov	pc, r3
			{
			case 1:	//Po jedne sekunde zapnout topeni
				HAL_Delay(2);	//pro oddaleni sepnuti rele od spi komunikace
 8002ef0:	2002      	movs	r0, #2
 8002ef2:	f000 fb03 	bl	80034fc <HAL_Delay>
				HTR_ON;
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4885      	ldr	r0, [pc, #532]	; (8003110 <testHandler+0x354>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	0019      	movs	r1, r3
 8002f00:	f001 fbd9 	bl	80046b6 <HAL_GPIO_WritePin>
				EM_HTR_ON;
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4881      	ldr	r0, [pc, #516]	; (8003110 <testHandler+0x354>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	0019      	movs	r1, r3
 8002f0e:	f001 fbd2 	bl	80046b6 <HAL_GPIO_WritePin>
				break;
 8002f12:	e03b      	b.n	8002f8c <testHandler+0x1d0>
			case 2:
				break;
			case 3:	//V treti sekunde overit funkcnost topeni
				if(HAL_GPIO_ReadPin(HEATER_STATE_GPIO_Port, HEATER_STATE_Pin) != GPIO_PIN_RESET)	//Topení neni v poradku
 8002f14:	2380      	movs	r3, #128	; 0x80
 8002f16:	015b      	lsls	r3, r3, #5
 8002f18:	4a7e      	ldr	r2, [pc, #504]	; (8003114 <testHandler+0x358>)
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	0010      	movs	r0, r2
 8002f1e:	f001 fbad 	bl	800467c <HAL_GPIO_ReadPin>
 8002f22:	1e03      	subs	r3, r0, #0
 8002f24:	d007      	beq.n	8002f36 <testHandler+0x17a>
				{
					flags.heaterState = HEATER_ERR;
 8002f26:	4b72      	ldr	r3, [pc, #456]	; (80030f0 <testHandler+0x334>)
 8002f28:	7e1a      	ldrb	r2, [r3, #24]
 8002f2a:	2130      	movs	r1, #48	; 0x30
 8002f2c:	438a      	bics	r2, r1
 8002f2e:	1c11      	adds	r1, r2, #0
 8002f30:	2220      	movs	r2, #32
 8002f32:	430a      	orrs	r2, r1
 8002f34:	761a      	strb	r2, [r3, #24]
				}
				//vypnout topeni optotriak
				HTR_OFF;
 8002f36:	2380      	movs	r3, #128	; 0x80
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4875      	ldr	r0, [pc, #468]	; (8003110 <testHandler+0x354>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	0019      	movs	r1, r3
 8002f40:	f001 fbb9 	bl	80046b6 <HAL_GPIO_WritePin>
				break;
 8002f44:	e022      	b.n	8002f8c <testHandler+0x1d0>
			case 4:
				if(HAL_GPIO_ReadPin(HEATER_STATE_GPIO_Port, HEATER_STATE_Pin) != GPIO_PIN_SET)	//Topení neni v poradku
 8002f46:	2380      	movs	r3, #128	; 0x80
 8002f48:	015b      	lsls	r3, r3, #5
 8002f4a:	4a72      	ldr	r2, [pc, #456]	; (8003114 <testHandler+0x358>)
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	0010      	movs	r0, r2
 8002f50:	f001 fb94 	bl	800467c <HAL_GPIO_ReadPin>
 8002f54:	0003      	movs	r3, r0
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d004      	beq.n	8002f64 <testHandler+0x1a8>
				{
					flags.heaterState = HEATER_TRIAC_ERR;
 8002f5a:	4b65      	ldr	r3, [pc, #404]	; (80030f0 <testHandler+0x334>)
 8002f5c:	7e1a      	ldrb	r2, [r3, #24]
 8002f5e:	2130      	movs	r1, #48	; 0x30
 8002f60:	430a      	orrs	r2, r1
 8002f62:	761a      	strb	r2, [r3, #24]
				}
				//vypnout topeni
				HAL_Delay(2);	//pro oddaleni sepnuti rele od spi komunikace
 8002f64:	2002      	movs	r0, #2
 8002f66:	f000 fac9 	bl	80034fc <HAL_Delay>
				EM_HTR_OFF;
 8002f6a:	2380      	movs	r3, #128	; 0x80
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4868      	ldr	r0, [pc, #416]	; (8003110 <testHandler+0x354>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	0019      	movs	r1, r3
 8002f74:	f001 fb9f 	bl	80046b6 <HAL_GPIO_WritePin>
				break;
 8002f78:	e008      	b.n	8002f8c <testHandler+0x1d0>
			case 5:	//v pate sekunde zmerit napeti naprazdno
				flags.meas.measRequest = 1;
 8002f7a:	4b5d      	ldr	r3, [pc, #372]	; (80030f0 <testHandler+0x334>)
 8002f7c:	7d1a      	ldrb	r2, [r3, #20]
 8002f7e:	2101      	movs	r1, #1
 8002f80:	430a      	orrs	r2, r1
 8002f82:	751a      	strb	r2, [r3, #20]
				break;
 8002f84:	e002      	b.n	8002f8c <testHandler+0x1d0>
			default:
				break;
			}
		}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	e13e      	b.n	8003208 <testHandler+0x44c>
				break;
 8002f8a:	46c0      	nop			; (mov r8, r8)
		break;
 8002f8c:	e13c      	b.n	8003208 <testHandler+0x44c>
	case START_DONE:
		//___Připojení zátěže___//
		LOAD_MIN_ON;
 8002f8e:	4b60      	ldr	r3, [pc, #384]	; (8003110 <testHandler+0x354>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	2180      	movs	r1, #128	; 0x80
 8002f94:	0018      	movs	r0, r3
 8002f96:	f001 fb8e 	bl	80046b6 <HAL_GPIO_WritePin>
		LOAD_MAX_ON;
 8002f9a:	4b5d      	ldr	r3, [pc, #372]	; (8003110 <testHandler+0x354>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	2140      	movs	r1, #64	; 0x40
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f001 fb88 	bl	80046b6 <HAL_GPIO_WritePin>

		testPhase++;
 8002fa6:	4b53      	ldr	r3, [pc, #332]	; (80030f4 <testHandler+0x338>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	3301      	adds	r3, #1
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4b51      	ldr	r3, [pc, #324]	; (80030f4 <testHandler+0x338>)
 8002fb0:	701a      	strb	r2, [r3, #0]
		flags.testProgress = 1;
 8002fb2:	4b4f      	ldr	r3, [pc, #316]	; (80030f0 <testHandler+0x334>)
 8002fb4:	7e1a      	ldrb	r2, [r3, #24]
 8002fb6:	2102      	movs	r1, #2
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	761a      	strb	r2, [r3, #24]
		//flags.ui.shortBeep = 1;

		PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//rozsvítit první led
 8002fbc:	4b51      	ldr	r3, [pc, #324]	; (8003104 <testHandler+0x348>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	4b50      	ldr	r3, [pc, #320]	; (8003104 <testHandler+0x348>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2120      	movs	r1, #32
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	701a      	strb	r2, [r3, #0]

		//___Nulování času___//
		for(int i = 1; i < 4; i++)
 8002fce:	2301      	movs	r3, #1
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd2:	e007      	b.n	8002fe4 <testHandler+0x228>
		{
			sysTime[i] = 0;
 8002fd4:	4b4c      	ldr	r3, [pc, #304]	; (8003108 <testHandler+0x34c>)
 8002fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd8:	0092      	lsls	r2, r2, #2
 8002fda:	2100      	movs	r1, #0
 8002fdc:	50d1      	str	r1, [r2, r3]
		for(int i = 1; i < 4; i++)
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	ddf4      	ble.n	8002fd4 <testHandler+0x218>
		}
		break;
 8002fea:	e10d      	b.n	8003208 <testHandler+0x44c>
	case MAIN_TEST:
		if(flags.time.sec)	//___Změna času___//
 8002fec:	4b40      	ldr	r3, [pc, #256]	; (80030f0 <testHandler+0x334>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <testHandler+0x254>
		{
			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED2);	//blikání druhé progress led
 8002ffa:	4b42      	ldr	r3, [pc, #264]	; (8003104 <testHandler+0x348>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	781a      	ldrb	r2, [r3, #0]
 8003000:	4b40      	ldr	r3, [pc, #256]	; (8003104 <testHandler+0x348>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2110      	movs	r1, #16
 8003006:	404a      	eors	r2, r1
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	701a      	strb	r2, [r3, #0]
			sendData();
 800300c:	f7ff fc86 	bl	800291c <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
#else
		if(!(sysTime[SYSTIME_MIN] % 10) && !(sysTime[SYSTIME_MIN] == 0 && sysTime[SYSTIME_HOUR] == 0) && flags.time.min)	//___Měření napětí každých deset minut___//
 8003010:	4b3d      	ldr	r3, [pc, #244]	; (8003108 <testHandler+0x34c>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	210a      	movs	r1, #10
 8003016:	0018      	movs	r0, r3
 8003018:	f7fd f9f8 	bl	800040c <__aeabi_idivmod>
 800301c:	1e0b      	subs	r3, r1, #0
 800301e:	d113      	bne.n	8003048 <testHandler+0x28c>
 8003020:	4b39      	ldr	r3, [pc, #228]	; (8003108 <testHandler+0x34c>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d103      	bne.n	8003030 <testHandler+0x274>
 8003028:	4b37      	ldr	r3, [pc, #220]	; (8003108 <testHandler+0x34c>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00b      	beq.n	8003048 <testHandler+0x28c>
 8003030:	4b2f      	ldr	r3, [pc, #188]	; (80030f0 <testHandler+0x334>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2204      	movs	r2, #4
 8003036:	4013      	ands	r3, r2
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d004      	beq.n	8003048 <testHandler+0x28c>
#endif
		{
			flags.meas.measRequest = 1;
 800303e:	4b2c      	ldr	r3, [pc, #176]	; (80030f0 <testHandler+0x334>)
 8003040:	7d1a      	ldrb	r2, [r3, #20]
 8003042:	2101      	movs	r1, #1
 8003044:	430a      	orrs	r2, r1
 8003046:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 3)	//___Po deseti minutách je měření u konce___//
#else
		if(sysTime[SYSTIME_HOUR] >= 3)	//___Po třech hodinách je měření u konce___//
 8003048:	4b2f      	ldr	r3, [pc, #188]	; (8003108 <testHandler+0x34c>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b02      	cmp	r3, #2
 800304e:	dc00      	bgt.n	8003052 <testHandler+0x296>
 8003050:	e0d3      	b.n	80031fa <testHandler+0x43e>
#endif
		{
			testPhase++;
 8003052:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <testHandler+0x338>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	3301      	adds	r3, #1
 8003058:	b2da      	uxtb	r2, r3
 800305a:	4b26      	ldr	r3, [pc, #152]	; (80030f4 <testHandler+0x338>)
 800305c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800305e:	e0cc      	b.n	80031fa <testHandler+0x43e>
	case MAIN_TEST_DONE:
		if(!flags.meas.measRunning)
 8003060:	4b23      	ldr	r3, [pc, #140]	; (80030f0 <testHandler+0x334>)
 8003062:	7d1b      	ldrb	r3, [r3, #20]
 8003064:	2208      	movs	r2, #8
 8003066:	4013      	ands	r3, r2
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d000      	beq.n	8003070 <testHandler+0x2b4>
 800306e:	e0c6      	b.n	80031fe <testHandler+0x442>
		{
			flags.ui.notice = 1;
 8003070:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <testHandler+0x334>)
 8003072:	7c1a      	ldrb	r2, [r3, #16]
 8003074:	2108      	movs	r1, #8
 8003076:	430a      	orrs	r2, r1
 8003078:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 800307a:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <testHandler+0x334>)
 800307c:	7e1a      	ldrb	r2, [r3, #24]
 800307e:	2102      	movs	r1, #2
 8003080:	430a      	orrs	r2, r1
 8003082:	761a      	strb	r2, [r3, #24]

			testPhase++;
 8003084:	4b1b      	ldr	r3, [pc, #108]	; (80030f4 <testHandler+0x338>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	3301      	adds	r3, #1
 800308a:	b2da      	uxtb	r2, r3
 800308c:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <testHandler+0x338>)
 800308e:	701a      	strb	r2, [r3, #0]

			LOAD_MIN_OFF;
 8003090:	4b1f      	ldr	r3, [pc, #124]	; (8003110 <testHandler+0x354>)
 8003092:	2200      	movs	r2, #0
 8003094:	2180      	movs	r1, #128	; 0x80
 8003096:	0018      	movs	r0, r3
 8003098:	f001 fb0d 	bl	80046b6 <HAL_GPIO_WritePin>
			LOAD_MAX_OFF;
 800309c:	4b1c      	ldr	r3, [pc, #112]	; (8003110 <testHandler+0x354>)
 800309e:	2200      	movs	r2, #0
 80030a0:	2140      	movs	r1, #64	; 0x40
 80030a2:	0018      	movs	r0, r3
 80030a4:	f001 fb07 	bl	80046b6 <HAL_GPIO_WritePin>

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED2);
 80030a8:	4b16      	ldr	r3, [pc, #88]	; (8003104 <testHandler+0x348>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	781a      	ldrb	r2, [r3, #0]
 80030ae:	4b15      	ldr	r3, [pc, #84]	; (8003104 <testHandler+0x348>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2110      	movs	r1, #16
 80030b4:	430a      	orrs	r2, r1
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]
			PWR_OFF(*sourceInTesting);
 80030ba:	4b12      	ldr	r3, [pc, #72]	; (8003104 <testHandler+0x348>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	781a      	ldrb	r2, [r3, #0]
 80030c0:	4b10      	ldr	r3, [pc, #64]	; (8003104 <testHandler+0x348>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2101      	movs	r1, #1
 80030c6:	430a      	orrs	r2, r1
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	701a      	strb	r2, [r3, #0]
			sendData();
 80030cc:	f7ff fc26 	bl	800291c <sendData>

			//___Nulování času___//
			for(int i = 1; i < 4; i++)
 80030d0:	2301      	movs	r3, #1
 80030d2:	623b      	str	r3, [r7, #32]
 80030d4:	e007      	b.n	80030e6 <testHandler+0x32a>
			{
				sysTime[i] = 0;
 80030d6:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <testHandler+0x34c>)
 80030d8:	6a3a      	ldr	r2, [r7, #32]
 80030da:	0092      	lsls	r2, r2, #2
 80030dc:	2100      	movs	r1, #0
 80030de:	50d1      	str	r1, [r2, r3]
			for(int i = 1; i < 4; i++)
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	3301      	adds	r3, #1
 80030e4:	623b      	str	r3, [r7, #32]
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	ddf4      	ble.n	80030d6 <testHandler+0x31a>
			}
		}
		break;
 80030ec:	e087      	b.n	80031fe <testHandler+0x442>
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	20000680 	.word	0x20000680
 80030f4:	200006c0 	.word	0x200006c0
 80030f8:	0800e340 	.word	0x0800e340
 80030fc:	200001fc 	.word	0x200001fc
 8003100:	0800e4bc 	.word	0x0800e4bc
 8003104:	200006c8 	.word	0x200006c8
 8003108:	20000670 	.word	0x20000670
 800310c:	0800e4d8 	.word	0x0800e4d8
 8003110:	48000800 	.word	0x48000800
 8003114:	48000400 	.word	0x48000400
	case BATTERY_TEST:
		if(flags.time.sec)	//___Změna času___//
 8003118:	4b3d      	ldr	r3, [pc, #244]	; (8003210 <testHandler+0x454>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2202      	movs	r2, #2
 800311e:	4013      	ands	r3, r2
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00a      	beq.n	800313c <testHandler+0x380>
		{
			PROGRESS_RUNNING(*sourceInTesting, PROGRESS_LED3);	//blikání třetí progress led
 8003126:	4b3b      	ldr	r3, [pc, #236]	; (8003214 <testHandler+0x458>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	781a      	ldrb	r2, [r3, #0]
 800312c:	4b39      	ldr	r3, [pc, #228]	; (8003214 <testHandler+0x458>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2108      	movs	r1, #8
 8003132:	404a      	eors	r2, r1
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	701a      	strb	r2, [r3, #0]
			sendData();
 8003138:	f7ff fbf0 	bl	800291c <sendData>
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každou minutu___//
#else
		if(!(sysTime[SYSTIME_MIN] % 5) && sysTime[SYSTIME_MIN] != 0 && flags.time.min)	//___Měření napětí každých pět minut___//
 800313c:	4b36      	ldr	r3, [pc, #216]	; (8003218 <testHandler+0x45c>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2105      	movs	r1, #5
 8003142:	0018      	movs	r0, r3
 8003144:	f7fd f962 	bl	800040c <__aeabi_idivmod>
 8003148:	1e0b      	subs	r3, r1, #0
 800314a:	d114      	bne.n	8003176 <testHandler+0x3ba>
 800314c:	4b32      	ldr	r3, [pc, #200]	; (8003218 <testHandler+0x45c>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d010      	beq.n	8003176 <testHandler+0x3ba>
 8003154:	4b2e      	ldr	r3, [pc, #184]	; (8003210 <testHandler+0x454>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2204      	movs	r2, #4
 800315a:	4013      	ands	r3, r2
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d009      	beq.n	8003176 <testHandler+0x3ba>
#endif
		{
			flags.meas.onlyBattery = 1;
 8003162:	4b2b      	ldr	r3, [pc, #172]	; (8003210 <testHandler+0x454>)
 8003164:	7d1a      	ldrb	r2, [r3, #20]
 8003166:	2120      	movs	r1, #32
 8003168:	430a      	orrs	r2, r1
 800316a:	751a      	strb	r2, [r3, #20]
			flags.meas.measRequest = 1;
 800316c:	4b28      	ldr	r3, [pc, #160]	; (8003210 <testHandler+0x454>)
 800316e:	7d1a      	ldrb	r2, [r3, #20]
 8003170:	2101      	movs	r1, #1
 8003172:	430a      	orrs	r2, r1
 8003174:	751a      	strb	r2, [r3, #20]
		}
#ifdef __DEBUG_TEST__
		if(sysTime[SYSTIME_MIN] >= 2)	//___Po třech minutách je měření u konce___//
#else
		if(sysTime[SYSTIME_MIN] >= 15)	//___Po patnácti minutách je měření u konce___//
 8003176:	4b28      	ldr	r3, [pc, #160]	; (8003218 <testHandler+0x45c>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b0e      	cmp	r3, #14
 800317c:	dd41      	ble.n	8003202 <testHandler+0x446>
#endif
		{
			testPhase++;
 800317e:	4b27      	ldr	r3, [pc, #156]	; (800321c <testHandler+0x460>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	3301      	adds	r3, #1
 8003184:	b2da      	uxtb	r2, r3
 8003186:	4b25      	ldr	r3, [pc, #148]	; (800321c <testHandler+0x460>)
 8003188:	701a      	strb	r2, [r3, #0]
		}
		break;
 800318a:	e03a      	b.n	8003202 <testHandler+0x446>
	case BATTERY_TEST_DONE:
		if(!flags.meas.measRunning)
 800318c:	4b20      	ldr	r3, [pc, #128]	; (8003210 <testHandler+0x454>)
 800318e:	7d1b      	ldrb	r3, [r3, #20]
 8003190:	2208      	movs	r2, #8
 8003192:	4013      	ands	r3, r2
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d135      	bne.n	8003206 <testHandler+0x44a>
		{
			flags.ui.done = 1;
 800319a:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <testHandler+0x454>)
 800319c:	7c1a      	ldrb	r2, [r3, #16]
 800319e:	2110      	movs	r1, #16
 80031a0:	430a      	orrs	r2, r1
 80031a2:	741a      	strb	r2, [r3, #16]
			flags.testProgress = 1;
 80031a4:	4b1a      	ldr	r3, [pc, #104]	; (8003210 <testHandler+0x454>)
 80031a6:	7e1a      	ldrb	r2, [r3, #24]
 80031a8:	2102      	movs	r1, #2
 80031aa:	430a      	orrs	r2, r1
 80031ac:	761a      	strb	r2, [r3, #24]

			//Zobrazit text na displej

			PROGRESS_ON(*sourceInTesting, PROGRESS_LED3);
 80031ae:	4b19      	ldr	r3, [pc, #100]	; (8003214 <testHandler+0x458>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	781a      	ldrb	r2, [r3, #0]
 80031b4:	4b17      	ldr	r3, [pc, #92]	; (8003214 <testHandler+0x458>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2108      	movs	r1, #8
 80031ba:	430a      	orrs	r2, r1
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	701a      	strb	r2, [r3, #0]
			RELAY_OFF(*sourceInTesting);
 80031c0:	4b14      	ldr	r3, [pc, #80]	; (8003214 <testHandler+0x458>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	781a      	ldrb	r2, [r3, #0]
 80031c6:	4b13      	ldr	r3, [pc, #76]	; (8003214 <testHandler+0x458>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2102      	movs	r1, #2
 80031cc:	438a      	bics	r2, r1
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	701a      	strb	r2, [r3, #0]
			PWR_ON(*sourceInTesting);
 80031d2:	4b10      	ldr	r3, [pc, #64]	; (8003214 <testHandler+0x458>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <testHandler+0x458>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2101      	movs	r1, #1
 80031de:	438a      	bics	r2, r1
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	701a      	strb	r2, [r3, #0]
			sendData();
 80031e4:	f7ff fb9a 	bl	800291c <sendData>

			flags.meas.onlyBattery = 0;
 80031e8:	4b09      	ldr	r3, [pc, #36]	; (8003210 <testHandler+0x454>)
 80031ea:	7d1a      	ldrb	r2, [r3, #20]
 80031ec:	2120      	movs	r1, #32
 80031ee:	438a      	bics	r2, r1
 80031f0:	751a      	strb	r2, [r3, #20]

			testPhase = WAITING;
 80031f2:	4b0a      	ldr	r3, [pc, #40]	; (800321c <testHandler+0x460>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
		}
		break;
 80031f8:	e005      	b.n	8003206 <testHandler+0x44a>
		break;
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	e004      	b.n	8003208 <testHandler+0x44c>
		break;
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	e002      	b.n	8003208 <testHandler+0x44c>
		break;
 8003202:	46c0      	nop			; (mov r8, r8)
 8003204:	e000      	b.n	8003208 <testHandler+0x44c>
		break;
 8003206:	46c0      	nop			; (mov r8, r8)

	}
}
 8003208:	46c0      	nop			; (mov r8, r8)
 800320a:	46bd      	mov	sp, r7
 800320c:	b00b      	add	sp, #44	; 0x2c
 800320e:	bd90      	pop	{r4, r7, pc}
 8003210:	20000680 	.word	0x20000680
 8003214:	200006c8 	.word	0x200006c8
 8003218:	20000670 	.word	0x20000670
 800321c:	200006c0 	.word	0x200006c0

08003220 <startTest>:

//_____Funkce pro zahájení testu_____//
static void startTest(/*ukazatel na zdroj*/)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
	if(supplyToTest > regCount)
 8003226:	4b49      	ldr	r3, [pc, #292]	; (800334c <startTest+0x12c>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	b2da      	uxtb	r2, r3
 800322c:	4b48      	ldr	r3, [pc, #288]	; (8003350 <startTest+0x130>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d900      	bls.n	8003236 <startTest+0x16>
 8003234:	e085      	b.n	8003342 <startTest+0x122>
	{
		return;
	}

	flags.ui.shortBeep = 1;
 8003236:	4b47      	ldr	r3, [pc, #284]	; (8003354 <startTest+0x134>)
 8003238:	7c1a      	ldrb	r2, [r3, #16]
 800323a:	2101      	movs	r1, #1
 800323c:	430a      	orrs	r2, r1
 800323e:	741a      	strb	r2, [r3, #16]
	testPhase = START;
 8003240:	4b45      	ldr	r3, [pc, #276]	; (8003358 <startTest+0x138>)
 8003242:	2201      	movs	r2, #1
 8003244:	701a      	strb	r2, [r3, #0]
	testNum = 0;
 8003246:	4b45      	ldr	r3, [pc, #276]	; (800335c <startTest+0x13c>)
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
	flags.testProgress = 1;
 800324c:	4b41      	ldr	r3, [pc, #260]	; (8003354 <startTest+0x134>)
 800324e:	7e1a      	ldrb	r2, [r3, #24]
 8003250:	2102      	movs	r1, #2
 8003252:	430a      	orrs	r2, r1
 8003254:	761a      	strb	r2, [r3, #24]

	sourceInTesting = &regValues[regCount - (supplyToTest+1)];	//První deska (spodní) je řízena posledním bytem
 8003256:	4b42      	ldr	r3, [pc, #264]	; (8003360 <startTest+0x140>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a3d      	ldr	r2, [pc, #244]	; (8003350 <startTest+0x130>)
 800325c:	7812      	ldrb	r2, [r2, #0]
 800325e:	0011      	movs	r1, r2
 8003260:	4a3a      	ldr	r2, [pc, #232]	; (800334c <startTest+0x12c>)
 8003262:	7812      	ldrb	r2, [r2, #0]
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	3201      	adds	r2, #1
 8003268:	1a8a      	subs	r2, r1, r2
 800326a:	189a      	adds	r2, r3, r2
 800326c:	4b3d      	ldr	r3, [pc, #244]	; (8003364 <startTest+0x144>)
 800326e:	601a      	str	r2, [r3, #0]

	for(int i = 0; i < regCount; i++)
 8003270:	2300      	movs	r3, #0
 8003272:	607b      	str	r3, [r7, #4]
 8003274:	e01c      	b.n	80032b0 <startTest+0x90>
	{
		//Power up and disconnect all supplies
		RELAY_OFF(regValues[i]);
 8003276:	4b3a      	ldr	r3, [pc, #232]	; (8003360 <startTest+0x140>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	18d3      	adds	r3, r2, r3
 800327e:	781a      	ldrb	r2, [r3, #0]
 8003280:	4b37      	ldr	r3, [pc, #220]	; (8003360 <startTest+0x140>)
 8003282:	6819      	ldr	r1, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	18cb      	adds	r3, r1, r3
 8003288:	2102      	movs	r1, #2
 800328a:	438a      	bics	r2, r1
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	701a      	strb	r2, [r3, #0]
		PWR_ON(regValues[i]);
 8003290:	4b33      	ldr	r3, [pc, #204]	; (8003360 <startTest+0x140>)
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	18d3      	adds	r3, r2, r3
 8003298:	781a      	ldrb	r2, [r3, #0]
 800329a:	4b31      	ldr	r3, [pc, #196]	; (8003360 <startTest+0x140>)
 800329c:	6819      	ldr	r1, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	18cb      	adds	r3, r1, r3
 80032a2:	2101      	movs	r1, #1
 80032a4:	438a      	bics	r2, r1
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < regCount; i++)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3301      	adds	r3, #1
 80032ae:	607b      	str	r3, [r7, #4]
 80032b0:	4b27      	ldr	r3, [pc, #156]	; (8003350 <startTest+0x130>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	001a      	movs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4293      	cmp	r3, r2
 80032ba:	dbdc      	blt.n	8003276 <startTest+0x56>
	}
	PROGRESS_ON(*sourceInTesting, PROGRESS_LED1);	//rozsvítit první ledku progress
 80032bc:	4b29      	ldr	r3, [pc, #164]	; (8003364 <startTest+0x144>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	781a      	ldrb	r2, [r3, #0]
 80032c2:	4b28      	ldr	r3, [pc, #160]	; (8003364 <startTest+0x144>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2120      	movs	r1, #32
 80032c8:	430a      	orrs	r2, r1
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	701a      	strb	r2, [r3, #0]
	PROGRESS_OFF(*sourceInTesting, PROGRESS_LED2);	//Zhasnout zbyle led
 80032ce:	4b25      	ldr	r3, [pc, #148]	; (8003364 <startTest+0x144>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	781a      	ldrb	r2, [r3, #0]
 80032d4:	4b23      	ldr	r3, [pc, #140]	; (8003364 <startTest+0x144>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2110      	movs	r1, #16
 80032da:	438a      	bics	r2, r1
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	701a      	strb	r2, [r3, #0]
	PROGRESS_OFF(*sourceInTesting, PROGRESS_LED3);
 80032e0:	4b20      	ldr	r3, [pc, #128]	; (8003364 <startTest+0x144>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	781a      	ldrb	r2, [r3, #0]
 80032e6:	4b1f      	ldr	r3, [pc, #124]	; (8003364 <startTest+0x144>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2108      	movs	r1, #8
 80032ec:	438a      	bics	r2, r1
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	701a      	strb	r2, [r3, #0]
	ERROR_OFF(*sourceInTesting);
 80032f2:	4b1c      	ldr	r3, [pc, #112]	; (8003364 <startTest+0x144>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	781a      	ldrb	r2, [r3, #0]
 80032f8:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <startTest+0x144>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2104      	movs	r1, #4
 80032fe:	438a      	bics	r2, r1
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	701a      	strb	r2, [r3, #0]
	RELAY_ON(*sourceInTesting);	//připojit relé
 8003304:	4b17      	ldr	r3, [pc, #92]	; (8003364 <startTest+0x144>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	781a      	ldrb	r2, [r3, #0]
 800330a:	4b16      	ldr	r3, [pc, #88]	; (8003364 <startTest+0x144>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2102      	movs	r1, #2
 8003310:	430a      	orrs	r2, r1
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]

	sendData();	//poslat konfiguraci shift registrům
 8003316:	f7ff fb01 	bl	800291c <sendData>

	//___Nulování času___//
	for(int i = 1; i < 4; i++)
 800331a:	2301      	movs	r3, #1
 800331c:	603b      	str	r3, [r7, #0]
 800331e:	e007      	b.n	8003330 <startTest+0x110>
	{
		sysTime[i] = 0;
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <startTest+0x148>)
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	0092      	lsls	r2, r2, #2
 8003326:	2100      	movs	r1, #0
 8003328:	50d1      	str	r1, [r2, r3]
	for(int i = 1; i < 4; i++)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	3301      	adds	r3, #1
 800332e:	603b      	str	r3, [r7, #0]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	2b03      	cmp	r3, #3
 8003334:	ddf4      	ble.n	8003320 <startTest+0x100>
	}

	flags.instructions.startRequest = 0;
 8003336:	4b07      	ldr	r3, [pc, #28]	; (8003354 <startTest+0x134>)
 8003338:	7b1a      	ldrb	r2, [r3, #12]
 800333a:	2101      	movs	r1, #1
 800333c:	438a      	bics	r2, r1
 800333e:	731a      	strb	r2, [r3, #12]
 8003340:	e000      	b.n	8003344 <startTest+0x124>
		return;
 8003342:	46c0      	nop			; (mov r8, r8)
}
 8003344:	46bd      	mov	sp, r7
 8003346:	b002      	add	sp, #8
 8003348:	bd80      	pop	{r7, pc}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	2000069e 	.word	0x2000069e
 8003350:	200006b8 	.word	0x200006b8
 8003354:	20000680 	.word	0x20000680
 8003358:	200006c0 	.word	0x200006c0
 800335c:	200006c4 	.word	0x200006c4
 8003360:	200006b4 	.word	0x200006b4
 8003364:	200006c8 	.word	0x200006c8
 8003368:	20000670 	.word	0x20000670

0800336c <stopTest>:

//_____Funkce pro ukončení testu_____//
static void stopTest()
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
	flags.ui.longBeep = 1;
 8003370:	4b17      	ldr	r3, [pc, #92]	; (80033d0 <stopTest+0x64>)
 8003372:	7c1a      	ldrb	r2, [r3, #16]
 8003374:	2102      	movs	r1, #2
 8003376:	430a      	orrs	r2, r1
 8003378:	741a      	strb	r2, [r3, #16]
	testPhase = WAITING;
 800337a:	4b16      	ldr	r3, [pc, #88]	; (80033d4 <stopTest+0x68>)
 800337c:	2200      	movs	r2, #0
 800337e:	701a      	strb	r2, [r3, #0]

	//Zobrazit text na displej
	LOAD_MIN_OFF;
 8003380:	4b15      	ldr	r3, [pc, #84]	; (80033d8 <stopTest+0x6c>)
 8003382:	2200      	movs	r2, #0
 8003384:	2180      	movs	r1, #128	; 0x80
 8003386:	0018      	movs	r0, r3
 8003388:	f001 f995 	bl	80046b6 <HAL_GPIO_WritePin>
	LOAD_MAX_OFF;
 800338c:	4b12      	ldr	r3, [pc, #72]	; (80033d8 <stopTest+0x6c>)
 800338e:	2200      	movs	r2, #0
 8003390:	2140      	movs	r1, #64	; 0x40
 8003392:	0018      	movs	r0, r3
 8003394:	f001 f98f 	bl	80046b6 <HAL_GPIO_WritePin>

	if(sourceInTesting != NULL)
 8003398:	4b10      	ldr	r3, [pc, #64]	; (80033dc <stopTest+0x70>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00c      	beq.n	80033ba <stopTest+0x4e>
	{
		*sourceInTesting = 0;
 80033a0:	4b0e      	ldr	r3, [pc, #56]	; (80033dc <stopTest+0x70>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2200      	movs	r2, #0
 80033a6:	701a      	strb	r2, [r3, #0]
		ERROR_ON(*sourceInTesting);
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <stopTest+0x70>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	781a      	ldrb	r2, [r3, #0]
 80033ae:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <stopTest+0x70>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2104      	movs	r1, #4
 80033b4:	430a      	orrs	r2, r1
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]
	}
	sendData();
 80033ba:	f7ff faaf 	bl	800291c <sendData>

	flags.instructions.stopRequest = 0;
 80033be:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <stopTest+0x64>)
 80033c0:	7b1a      	ldrb	r2, [r3, #12]
 80033c2:	2102      	movs	r1, #2
 80033c4:	438a      	bics	r2, r1
 80033c6:	731a      	strb	r2, [r3, #12]
}
 80033c8:	46c0      	nop			; (mov r8, r8)
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	20000680 	.word	0x20000680
 80033d4:	200006c0 	.word	0x200006c0
 80033d8:	48000800 	.word	0x48000800
 80033dc:	200006c8 	.word	0x200006c8

080033e0 <Reset_Handler>:
 80033e0:	480d      	ldr	r0, [pc, #52]	; (8003418 <LoopForever+0x2>)
 80033e2:	4685      	mov	sp, r0
 80033e4:	480d      	ldr	r0, [pc, #52]	; (800341c <LoopForever+0x6>)
 80033e6:	490e      	ldr	r1, [pc, #56]	; (8003420 <LoopForever+0xa>)
 80033e8:	4a0e      	ldr	r2, [pc, #56]	; (8003424 <LoopForever+0xe>)
 80033ea:	2300      	movs	r3, #0
 80033ec:	e002      	b.n	80033f4 <LoopCopyDataInit>

080033ee <CopyDataInit>:
 80033ee:	58d4      	ldr	r4, [r2, r3]
 80033f0:	50c4      	str	r4, [r0, r3]
 80033f2:	3304      	adds	r3, #4

080033f4 <LoopCopyDataInit>:
 80033f4:	18c4      	adds	r4, r0, r3
 80033f6:	428c      	cmp	r4, r1
 80033f8:	d3f9      	bcc.n	80033ee <CopyDataInit>
 80033fa:	4a0b      	ldr	r2, [pc, #44]	; (8003428 <LoopForever+0x12>)
 80033fc:	4c0b      	ldr	r4, [pc, #44]	; (800342c <LoopForever+0x16>)
 80033fe:	2300      	movs	r3, #0
 8003400:	e001      	b.n	8003406 <LoopFillZerobss>

08003402 <FillZerobss>:
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	3204      	adds	r2, #4

08003406 <LoopFillZerobss>:
 8003406:	42a2      	cmp	r2, r4
 8003408:	d3fb      	bcc.n	8003402 <FillZerobss>
 800340a:	f7ff fcc7 	bl	8002d9c <SystemInit>
 800340e:	f00a fa8f 	bl	800d930 <__libc_init_array>
 8003412:	f7fd ff2f 	bl	8001274 <main>

08003416 <LoopForever>:
 8003416:	e7fe      	b.n	8003416 <LoopForever>
 8003418:	20004000 	.word	0x20004000
 800341c:	20000000 	.word	0x20000000
 8003420:	200001e0 	.word	0x200001e0
 8003424:	0800e61c 	.word	0x0800e61c
 8003428:	200001e0 	.word	0x200001e0
 800342c:	20001890 	.word	0x20001890

08003430 <CEC_CAN_IRQHandler>:
 8003430:	e7fe      	b.n	8003430 <CEC_CAN_IRQHandler>
	...

08003434 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003438:	4b07      	ldr	r3, [pc, #28]	; (8003458 <HAL_Init+0x24>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4b06      	ldr	r3, [pc, #24]	; (8003458 <HAL_Init+0x24>)
 800343e:	2110      	movs	r1, #16
 8003440:	430a      	orrs	r2, r1
 8003442:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003444:	2003      	movs	r0, #3
 8003446:	f000 f809 	bl	800345c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800344a:	f7ff fa9f 	bl	800298c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	0018      	movs	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	40022000 	.word	0x40022000

0800345c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800345c:	b590      	push	{r4, r7, lr}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003464:	4b14      	ldr	r3, [pc, #80]	; (80034b8 <HAL_InitTick+0x5c>)
 8003466:	681c      	ldr	r4, [r3, #0]
 8003468:	4b14      	ldr	r3, [pc, #80]	; (80034bc <HAL_InitTick+0x60>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	0019      	movs	r1, r3
 800346e:	23fa      	movs	r3, #250	; 0xfa
 8003470:	0098      	lsls	r0, r3, #2
 8003472:	f7fc fe5b 	bl	800012c <__udivsi3>
 8003476:	0003      	movs	r3, r0
 8003478:	0019      	movs	r1, r3
 800347a:	0020      	movs	r0, r4
 800347c:	f7fc fe56 	bl	800012c <__udivsi3>
 8003480:	0003      	movs	r3, r0
 8003482:	0018      	movs	r0, r3
 8003484:	f000 fef7 	bl	8004276 <HAL_SYSTICK_Config>
 8003488:	1e03      	subs	r3, r0, #0
 800348a:	d001      	beq.n	8003490 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e00f      	b.n	80034b0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b03      	cmp	r3, #3
 8003494:	d80b      	bhi.n	80034ae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	2301      	movs	r3, #1
 800349a:	425b      	negs	r3, r3
 800349c:	2200      	movs	r2, #0
 800349e:	0018      	movs	r0, r3
 80034a0:	f000 fec4 	bl	800422c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034a4:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <HAL_InitTick+0x64>)
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	e000      	b.n	80034b0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
}
 80034b0:	0018      	movs	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b003      	add	sp, #12
 80034b6:	bd90      	pop	{r4, r7, pc}
 80034b8:	20000000 	.word	0x20000000
 80034bc:	20000008 	.word	0x20000008
 80034c0:	20000004 	.word	0x20000004

080034c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <HAL_IncTick+0x1c>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	001a      	movs	r2, r3
 80034ce:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_IncTick+0x20>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	18d2      	adds	r2, r2, r3
 80034d4:	4b03      	ldr	r3, [pc, #12]	; (80034e4 <HAL_IncTick+0x20>)
 80034d6:	601a      	str	r2, [r3, #0]
}
 80034d8:	46c0      	nop			; (mov r8, r8)
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	20000008 	.word	0x20000008
 80034e4:	200006cc 	.word	0x200006cc

080034e8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  return uwTick;
 80034ec:	4b02      	ldr	r3, [pc, #8]	; (80034f8 <HAL_GetTick+0x10>)
 80034ee:	681b      	ldr	r3, [r3, #0]
}
 80034f0:	0018      	movs	r0, r3
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	200006cc 	.word	0x200006cc

080034fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003504:	f7ff fff0 	bl	80034e8 <HAL_GetTick>
 8003508:	0003      	movs	r3, r0
 800350a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	3301      	adds	r3, #1
 8003514:	d005      	beq.n	8003522 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003516:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <HAL_Delay+0x44>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	001a      	movs	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	189b      	adds	r3, r3, r2
 8003520:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	f7ff ffe0 	bl	80034e8 <HAL_GetTick>
 8003528:	0002      	movs	r2, r0
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	429a      	cmp	r2, r3
 8003532:	d8f7      	bhi.n	8003524 <HAL_Delay+0x28>
  {
  }
}
 8003534:	46c0      	nop			; (mov r8, r8)
 8003536:	46c0      	nop			; (mov r8, r8)
 8003538:	46bd      	mov	sp, r7
 800353a:	b004      	add	sp, #16
 800353c:	bd80      	pop	{r7, pc}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	20000008 	.word	0x20000008

08003544 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800354c:	230f      	movs	r3, #15
 800354e:	18fb      	adds	r3, r7, r3
 8003550:	2200      	movs	r2, #0
 8003552:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e125      	b.n	80037ae <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003566:	2b00      	cmp	r3, #0
 8003568:	d10a      	bne.n	8003580 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2234      	movs	r2, #52	; 0x34
 8003574:	2100      	movs	r1, #0
 8003576:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	0018      	movs	r0, r3
 800357c:	f7ff fa2a 	bl	80029d4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	2210      	movs	r2, #16
 8003586:	4013      	ands	r3, r2
 8003588:	d000      	beq.n	800358c <HAL_ADC_Init+0x48>
 800358a:	e103      	b.n	8003794 <HAL_ADC_Init+0x250>
 800358c:	230f      	movs	r3, #15
 800358e:	18fb      	adds	r3, r7, r3
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d000      	beq.n	8003598 <HAL_ADC_Init+0x54>
 8003596:	e0fd      	b.n	8003794 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2204      	movs	r2, #4
 80035a0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80035a2:	d000      	beq.n	80035a6 <HAL_ADC_Init+0x62>
 80035a4:	e0f6      	b.n	8003794 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035aa:	4a83      	ldr	r2, [pc, #524]	; (80037b8 <HAL_ADC_Init+0x274>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	2202      	movs	r2, #2
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2203      	movs	r2, #3
 80035be:	4013      	ands	r3, r2
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d112      	bne.n	80035ea <HAL_ADC_Init+0xa6>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2201      	movs	r2, #1
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d009      	beq.n	80035e6 <HAL_ADC_Init+0xa2>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	2380      	movs	r3, #128	; 0x80
 80035da:	021b      	lsls	r3, r3, #8
 80035dc:	401a      	ands	r2, r3
 80035de:	2380      	movs	r3, #128	; 0x80
 80035e0:	021b      	lsls	r3, r3, #8
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d101      	bne.n	80035ea <HAL_ADC_Init+0xa6>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <HAL_ADC_Init+0xa8>
 80035ea:	2300      	movs	r3, #0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d116      	bne.n	800361e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	2218      	movs	r2, #24
 80035f8:	4393      	bics	r3, r2
 80035fa:	0019      	movs	r1, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	430a      	orrs	r2, r1
 8003606:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	0899      	lsrs	r1, r3, #2
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4964      	ldr	r1, [pc, #400]	; (80037bc <HAL_ADC_Init+0x278>)
 800362a:	400a      	ands	r2, r1
 800362c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	7e1b      	ldrb	r3, [r3, #24]
 8003632:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	7e5b      	ldrb	r3, [r3, #25]
 8003638:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800363a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	7e9b      	ldrb	r3, [r3, #26]
 8003640:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003642:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	2b01      	cmp	r3, #1
 800364a:	d002      	beq.n	8003652 <HAL_ADC_Init+0x10e>
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	015b      	lsls	r3, r3, #5
 8003650:	e000      	b.n	8003654 <HAL_ADC_Init+0x110>
 8003652:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003654:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800365a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	2b02      	cmp	r3, #2
 8003662:	d101      	bne.n	8003668 <HAL_ADC_Init+0x124>
 8003664:	2304      	movs	r3, #4
 8003666:	e000      	b.n	800366a <HAL_ADC_Init+0x126>
 8003668:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800366a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2124      	movs	r1, #36	; 0x24
 8003670:	5c5b      	ldrb	r3, [r3, r1]
 8003672:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003674:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	4313      	orrs	r3, r2
 800367a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	7edb      	ldrb	r3, [r3, #27]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d115      	bne.n	80036b0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	7e9b      	ldrb	r3, [r3, #26]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d105      	bne.n	8003698 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2280      	movs	r2, #128	; 0x80
 8003690:	0252      	lsls	r2, r2, #9
 8003692:	4313      	orrs	r3, r2
 8003694:	60bb      	str	r3, [r7, #8]
 8003696:	e00b      	b.n	80036b0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	2220      	movs	r2, #32
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a8:	2201      	movs	r2, #1
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69da      	ldr	r2, [r3, #28]
 80036b4:	23c2      	movs	r3, #194	; 0xc2
 80036b6:	33ff      	adds	r3, #255	; 0xff
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d007      	beq.n	80036cc <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80036c4:	4313      	orrs	r3, r2
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68d9      	ldr	r1, [r3, #12]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	430a      	orrs	r2, r1
 80036da:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e0:	2380      	movs	r3, #128	; 0x80
 80036e2:	055b      	lsls	r3, r3, #21
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d01b      	beq.n	8003720 <HAL_ADC_Init+0x1dc>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d017      	beq.n	8003720 <HAL_ADC_Init+0x1dc>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d013      	beq.n	8003720 <HAL_ADC_Init+0x1dc>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d00f      	beq.n	8003720 <HAL_ADC_Init+0x1dc>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	2b04      	cmp	r3, #4
 8003706:	d00b      	beq.n	8003720 <HAL_ADC_Init+0x1dc>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	2b05      	cmp	r3, #5
 800370e:	d007      	beq.n	8003720 <HAL_ADC_Init+0x1dc>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	2b06      	cmp	r3, #6
 8003716:	d003      	beq.n	8003720 <HAL_ADC_Init+0x1dc>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	2b07      	cmp	r3, #7
 800371e:	d112      	bne.n	8003746 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2107      	movs	r1, #7
 800372c:	438a      	bics	r2, r1
 800372e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6959      	ldr	r1, [r3, #20]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373a:	2207      	movs	r2, #7
 800373c:	401a      	ands	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	4a1c      	ldr	r2, [pc, #112]	; (80037c0 <HAL_ADC_Init+0x27c>)
 800374e:	4013      	ands	r3, r2
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	429a      	cmp	r2, r3
 8003754:	d10b      	bne.n	800376e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	2203      	movs	r2, #3
 8003762:	4393      	bics	r3, r2
 8003764:	2201      	movs	r2, #1
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800376c:	e01c      	b.n	80037a8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003772:	2212      	movs	r2, #18
 8003774:	4393      	bics	r3, r2
 8003776:	2210      	movs	r2, #16
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003782:	2201      	movs	r2, #1
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800378a:	230f      	movs	r3, #15
 800378c:	18fb      	adds	r3, r7, r3
 800378e:	2201      	movs	r2, #1
 8003790:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003792:	e009      	b.n	80037a8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003798:	2210      	movs	r2, #16
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80037a0:	230f      	movs	r3, #15
 80037a2:	18fb      	adds	r3, r7, r3
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80037a8:	230f      	movs	r3, #15
 80037aa:	18fb      	adds	r3, r7, r3
 80037ac:	781b      	ldrb	r3, [r3, #0]
}
 80037ae:	0018      	movs	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b004      	add	sp, #16
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	fffffefd 	.word	0xfffffefd
 80037bc:	fffe0219 	.word	0xfffe0219
 80037c0:	833fffe7 	.word	0x833fffe7

080037c4 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80037c4:	b590      	push	{r4, r7, lr}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037cc:	230f      	movs	r3, #15
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2204      	movs	r2, #4
 80037dc:	4013      	ands	r3, r2
 80037de:	d156      	bne.n	800388e <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2234      	movs	r2, #52	; 0x34
 80037e4:	5c9b      	ldrb	r3, [r3, r2]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_ADC_Start_IT+0x2a>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e056      	b.n	800389c <HAL_ADC_Start_IT+0xd8>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2234      	movs	r2, #52	; 0x34
 80037f2:	2101      	movs	r1, #1
 80037f4:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	7e5b      	ldrb	r3, [r3, #25]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d007      	beq.n	800380e <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80037fe:	230f      	movs	r3, #15
 8003800:	18fc      	adds	r4, r7, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	0018      	movs	r0, r3
 8003806:	f000 fa7b 	bl	8003d00 <ADC_Enable>
 800380a:	0003      	movs	r3, r0
 800380c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800380e:	230f      	movs	r3, #15
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d13e      	bne.n	8003896 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381c:	4a21      	ldr	r2, [pc, #132]	; (80038a4 <HAL_ADC_Start_IT+0xe0>)
 800381e:	4013      	ands	r3, r2
 8003820:	2280      	movs	r2, #128	; 0x80
 8003822:	0052      	lsls	r2, r2, #1
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2234      	movs	r2, #52	; 0x34
 8003834:	2100      	movs	r1, #0
 8003836:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	221c      	movs	r2, #28
 800383e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	2b08      	cmp	r3, #8
 8003846:	d110      	bne.n	800386a <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2104      	movs	r1, #4
 8003854:	438a      	bics	r2, r1
 8003856:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2118      	movs	r1, #24
 8003864:	430a      	orrs	r2, r1
 8003866:	605a      	str	r2, [r3, #4]
          break;
 8003868:	e008      	b.n	800387c <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	211c      	movs	r1, #28
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]
          break;
 800387a:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2104      	movs	r1, #4
 8003888:	430a      	orrs	r2, r1
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	e003      	b.n	8003896 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800388e:	230f      	movs	r3, #15
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	2202      	movs	r2, #2
 8003894:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 8003896:	230f      	movs	r3, #15
 8003898:	18fb      	adds	r3, r7, r3
 800389a:	781b      	ldrb	r3, [r3, #0]
}
 800389c:	0018      	movs	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	b005      	add	sp, #20
 80038a2:	bd90      	pop	{r4, r7, pc}
 80038a4:	fffff0fe 	.word	0xfffff0fe

080038a8 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 80038a8:	b5b0      	push	{r4, r5, r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038b0:	230f      	movs	r3, #15
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2234      	movs	r2, #52	; 0x34
 80038bc:	5c9b      	ldrb	r3, [r3, r2]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d101      	bne.n	80038c6 <HAL_ADC_Stop_IT+0x1e>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e033      	b.n	800392e <HAL_ADC_Stop_IT+0x86>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2234      	movs	r2, #52	; 0x34
 80038ca:	2101      	movs	r1, #1
 80038cc:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80038ce:	250f      	movs	r5, #15
 80038d0:	197c      	adds	r4, r7, r5
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	0018      	movs	r0, r3
 80038d6:	f000 fb08 	bl	8003eea <ADC_ConversionStop>
 80038da:	0003      	movs	r3, r0
 80038dc:	7023      	strb	r3, [r4, #0]
   
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80038de:	0028      	movs	r0, r5
 80038e0:	183b      	adds	r3, r7, r0
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d11b      	bne.n	8003920 <HAL_ADC_Stop_IT+0x78>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	211c      	movs	r1, #28
 80038f4:	438a      	bics	r2, r1
 80038f6:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80038f8:	0005      	movs	r5, r0
 80038fa:	183c      	adds	r4, r7, r0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	0018      	movs	r0, r3
 8003900:	f000 fa82 	bl	8003e08 <ADC_Disable>
 8003904:	0003      	movs	r3, r0
 8003906:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003908:	197b      	adds	r3, r7, r5
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d107      	bne.n	8003920 <HAL_ADC_Stop_IT+0x78>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	4a08      	ldr	r2, [pc, #32]	; (8003938 <HAL_ADC_Stop_IT+0x90>)
 8003916:	4013      	ands	r3, r2
 8003918:	2201      	movs	r2, #1
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2234      	movs	r2, #52	; 0x34
 8003924:	2100      	movs	r1, #0
 8003926:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003928:	230f      	movs	r3, #15
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	781b      	ldrb	r3, [r3, #0]
}
 800392e:	0018      	movs	r0, r3
 8003930:	46bd      	mov	sp, r7
 8003932:	b004      	add	sp, #16
 8003934:	bdb0      	pop	{r4, r5, r7, pc}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	fffffefe 	.word	0xfffffefe

0800393c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800394a:	0018      	movs	r0, r3
 800394c:	46bd      	mov	sp, r7
 800394e:	b002      	add	sp, #8
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2204      	movs	r2, #4
 8003964:	4013      	ands	r3, r2
 8003966:	2b04      	cmp	r3, #4
 8003968:	d106      	bne.n	8003978 <HAL_ADC_IRQHandler+0x24>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	2204      	movs	r2, #4
 8003972:	4013      	ands	r3, r2
 8003974:	2b04      	cmp	r3, #4
 8003976:	d00d      	beq.n	8003994 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2208      	movs	r2, #8
 8003980:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8003982:	2b08      	cmp	r3, #8
 8003984:	d14f      	bne.n	8003a26 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	2208      	movs	r2, #8
 800398e:	4013      	ands	r3, r2
 8003990:	2b08      	cmp	r3, #8
 8003992:	d148      	bne.n	8003a26 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	2210      	movs	r2, #16
 800399a:	4013      	ands	r3, r2
 800399c:	d106      	bne.n	80039ac <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a2:	2280      	movs	r2, #128	; 0x80
 80039a4:	0092      	lsls	r2, r2, #2
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	23c0      	movs	r3, #192	; 0xc0
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	4013      	ands	r3, r2
 80039b8:	d12d      	bne.n	8003a16 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d129      	bne.n	8003a16 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2208      	movs	r2, #8
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d122      	bne.n	8003a16 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2204      	movs	r2, #4
 80039d8:	4013      	ands	r3, r2
 80039da:	d110      	bne.n	80039fe <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	210c      	movs	r1, #12
 80039e8:	438a      	bics	r2, r1
 80039ea:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f0:	4a33      	ldr	r2, [pc, #204]	; (8003ac0 <HAL_ADC_IRQHandler+0x16c>)
 80039f2:	4013      	ands	r3, r2
 80039f4:	2201      	movs	r2, #1
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	639a      	str	r2, [r3, #56]	; 0x38
 80039fc:	e00b      	b.n	8003a16 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	2220      	movs	r2, #32
 8003a04:	431a      	orrs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0e:	2201      	movs	r2, #1
 8003a10:	431a      	orrs	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f7fd fc17 	bl	800124c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	220c      	movs	r2, #12
 8003a24:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2280      	movs	r2, #128	; 0x80
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b80      	cmp	r3, #128	; 0x80
 8003a32:	d115      	bne.n	8003a60 <HAL_ADC_IRQHandler+0x10c>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2280      	movs	r2, #128	; 0x80
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	2b80      	cmp	r3, #128	; 0x80
 8003a40:	d10e      	bne.n	8003a60 <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	2280      	movs	r2, #128	; 0x80
 8003a48:	0252      	lsls	r2, r2, #9
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	0018      	movs	r0, r3
 8003a54:	f000 f836 	bl	8003ac4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2280      	movs	r2, #128	; 0x80
 8003a5e:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2210      	movs	r2, #16
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b10      	cmp	r3, #16
 8003a6c:	d123      	bne.n	8003ab6 <HAL_ADC_IRQHandler+0x162>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2210      	movs	r2, #16
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	d11c      	bne.n	8003ab6 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d006      	beq.n	8003a92 <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d10d      	bne.n	8003aae <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a96:	2202      	movs	r2, #2
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2210      	movs	r2, #16
 8003aa4:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	f000 f813 	bl	8003ad4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2210      	movs	r2, #16
 8003ab4:	601a      	str	r2, [r3, #0]
  }

}
 8003ab6:	46c0      	nop			; (mov r8, r8)
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	b002      	add	sp, #8
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	46c0      	nop			; (mov r8, r8)
 8003ac0:	fffffefe 	.word	0xfffffefe

08003ac4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8003acc:	46c0      	nop			; (mov r8, r8)
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b002      	add	sp, #8
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003adc:	46c0      	nop			; (mov r8, r8)
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b002      	add	sp, #8
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aee:	230f      	movs	r3, #15
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afe:	2380      	movs	r3, #128	; 0x80
 8003b00:	055b      	lsls	r3, r3, #21
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d011      	beq.n	8003b2a <HAL_ADC_ConfigChannel+0x46>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d00d      	beq.n	8003b2a <HAL_ADC_ConfigChannel+0x46>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d009      	beq.n	8003b2a <HAL_ADC_ConfigChannel+0x46>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d005      	beq.n	8003b2a <HAL_ADC_ConfigChannel+0x46>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d001      	beq.n	8003b2a <HAL_ADC_ConfigChannel+0x46>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2234      	movs	r2, #52	; 0x34
 8003b2e:	5c9b      	ldrb	r3, [r3, r2]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x54>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e0d0      	b.n	8003cda <HAL_ADC_ConfigChannel+0x1f6>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2234      	movs	r2, #52	; 0x34
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2204      	movs	r2, #4
 8003b48:	4013      	ands	r3, r2
 8003b4a:	d000      	beq.n	8003b4e <HAL_ADC_ConfigChannel+0x6a>
 8003b4c:	e0b4      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	4a64      	ldr	r2, [pc, #400]	; (8003ce4 <HAL_ADC_ConfigChannel+0x200>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d100      	bne.n	8003b5a <HAL_ADC_ConfigChannel+0x76>
 8003b58:	e082      	b.n	8003c60 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2201      	movs	r2, #1
 8003b66:	409a      	lsls	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b74:	2380      	movs	r3, #128	; 0x80
 8003b76:	055b      	lsls	r3, r3, #21
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d037      	beq.n	8003bec <HAL_ADC_ConfigChannel+0x108>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d033      	beq.n	8003bec <HAL_ADC_ConfigChannel+0x108>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d02f      	beq.n	8003bec <HAL_ADC_ConfigChannel+0x108>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d02b      	beq.n	8003bec <HAL_ADC_ConfigChannel+0x108>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d027      	beq.n	8003bec <HAL_ADC_ConfigChannel+0x108>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	2b05      	cmp	r3, #5
 8003ba2:	d023      	beq.n	8003bec <HAL_ADC_ConfigChannel+0x108>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	2b06      	cmp	r3, #6
 8003baa:	d01f      	beq.n	8003bec <HAL_ADC_ConfigChannel+0x108>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	2b07      	cmp	r3, #7
 8003bb2:	d01b      	beq.n	8003bec <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	2107      	movs	r1, #7
 8003bc0:	400b      	ands	r3, r1
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d012      	beq.n	8003bec <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695a      	ldr	r2, [r3, #20]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2107      	movs	r1, #7
 8003bd2:	438a      	bics	r2, r1
 8003bd4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6959      	ldr	r1, [r3, #20]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2207      	movs	r2, #7
 8003be2:	401a      	ands	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d007      	beq.n	8003c04 <HAL_ADC_ConfigChannel+0x120>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b11      	cmp	r3, #17
 8003bfa:	d003      	beq.n	8003c04 <HAL_ADC_ConfigChannel+0x120>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b12      	cmp	r3, #18
 8003c02:	d163      	bne.n	8003ccc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003c04:	4b38      	ldr	r3, [pc, #224]	; (8003ce8 <HAL_ADC_ConfigChannel+0x204>)
 8003c06:	6819      	ldr	r1, [r3, #0]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b10      	cmp	r3, #16
 8003c0e:	d009      	beq.n	8003c24 <HAL_ADC_ConfigChannel+0x140>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b11      	cmp	r3, #17
 8003c16:	d102      	bne.n	8003c1e <HAL_ADC_ConfigChannel+0x13a>
 8003c18:	2380      	movs	r3, #128	; 0x80
 8003c1a:	03db      	lsls	r3, r3, #15
 8003c1c:	e004      	b.n	8003c28 <HAL_ADC_ConfigChannel+0x144>
 8003c1e:	2380      	movs	r3, #128	; 0x80
 8003c20:	045b      	lsls	r3, r3, #17
 8003c22:	e001      	b.n	8003c28 <HAL_ADC_ConfigChannel+0x144>
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	041b      	lsls	r3, r3, #16
 8003c28:	4a2f      	ldr	r2, [pc, #188]	; (8003ce8 <HAL_ADC_ConfigChannel+0x204>)
 8003c2a:	430b      	orrs	r3, r1
 8003c2c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b10      	cmp	r3, #16
 8003c34:	d14a      	bne.n	8003ccc <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c36:	4b2d      	ldr	r3, [pc, #180]	; (8003cec <HAL_ADC_ConfigChannel+0x208>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	492d      	ldr	r1, [pc, #180]	; (8003cf0 <HAL_ADC_ConfigChannel+0x20c>)
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f7fc fa75 	bl	800012c <__udivsi3>
 8003c42:	0003      	movs	r3, r0
 8003c44:	001a      	movs	r2, r3
 8003c46:	0013      	movs	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	189b      	adds	r3, r3, r2
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c50:	e002      	b.n	8003c58 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	3b01      	subs	r3, #1
 8003c56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f9      	bne.n	8003c52 <HAL_ADC_ConfigChannel+0x16e>
 8003c5e:	e035      	b.n	8003ccc <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	4099      	lsls	r1, r3
 8003c6e:	000b      	movs	r3, r1
 8003c70:	43d9      	mvns	r1, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	400a      	ands	r2, r1
 8003c78:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b10      	cmp	r3, #16
 8003c80:	d007      	beq.n	8003c92 <HAL_ADC_ConfigChannel+0x1ae>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b11      	cmp	r3, #17
 8003c88:	d003      	beq.n	8003c92 <HAL_ADC_ConfigChannel+0x1ae>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b12      	cmp	r3, #18
 8003c90:	d11c      	bne.n	8003ccc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003c92:	4b15      	ldr	r3, [pc, #84]	; (8003ce8 <HAL_ADC_ConfigChannel+0x204>)
 8003c94:	6819      	ldr	r1, [r3, #0]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b10      	cmp	r3, #16
 8003c9c:	d007      	beq.n	8003cae <HAL_ADC_ConfigChannel+0x1ca>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b11      	cmp	r3, #17
 8003ca4:	d101      	bne.n	8003caa <HAL_ADC_ConfigChannel+0x1c6>
 8003ca6:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <HAL_ADC_ConfigChannel+0x210>)
 8003ca8:	e002      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0x1cc>
 8003caa:	4b13      	ldr	r3, [pc, #76]	; (8003cf8 <HAL_ADC_ConfigChannel+0x214>)
 8003cac:	e000      	b.n	8003cb0 <HAL_ADC_ConfigChannel+0x1cc>
 8003cae:	4b13      	ldr	r3, [pc, #76]	; (8003cfc <HAL_ADC_ConfigChannel+0x218>)
 8003cb0:	4a0d      	ldr	r2, [pc, #52]	; (8003ce8 <HAL_ADC_ConfigChannel+0x204>)
 8003cb2:	400b      	ands	r3, r1
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	e009      	b.n	8003ccc <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003cc4:	230f      	movs	r3, #15
 8003cc6:	18fb      	adds	r3, r7, r3
 8003cc8:	2201      	movs	r2, #1
 8003cca:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2234      	movs	r2, #52	; 0x34
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003cd4:	230f      	movs	r3, #15
 8003cd6:	18fb      	adds	r3, r7, r3
 8003cd8:	781b      	ldrb	r3, [r3, #0]
}
 8003cda:	0018      	movs	r0, r3
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	b004      	add	sp, #16
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	00001001 	.word	0x00001001
 8003ce8:	40012708 	.word	0x40012708
 8003cec:	20000000 	.word	0x20000000
 8003cf0:	000f4240 	.word	0x000f4240
 8003cf4:	ffbfffff 	.word	0xffbfffff
 8003cf8:	feffffff 	.word	0xfeffffff
 8003cfc:	ff7fffff 	.word	0xff7fffff

08003d00 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2203      	movs	r2, #3
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d112      	bne.n	8003d44 <ADC_Enable+0x44>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2201      	movs	r2, #1
 8003d26:	4013      	ands	r3, r2
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d009      	beq.n	8003d40 <ADC_Enable+0x40>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	2380      	movs	r3, #128	; 0x80
 8003d34:	021b      	lsls	r3, r3, #8
 8003d36:	401a      	ands	r2, r3
 8003d38:	2380      	movs	r3, #128	; 0x80
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d101      	bne.n	8003d44 <ADC_Enable+0x44>
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <ADC_Enable+0x46>
 8003d44:	2300      	movs	r3, #0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d152      	bne.n	8003df0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	4a2a      	ldr	r2, [pc, #168]	; (8003dfc <ADC_Enable+0xfc>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	d00d      	beq.n	8003d72 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5a:	2210      	movs	r2, #16
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d66:	2201      	movs	r2, #1
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e03f      	b.n	8003df2 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003d82:	4b1f      	ldr	r3, [pc, #124]	; (8003e00 <ADC_Enable+0x100>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	491f      	ldr	r1, [pc, #124]	; (8003e04 <ADC_Enable+0x104>)
 8003d88:	0018      	movs	r0, r3
 8003d8a:	f7fc f9cf 	bl	800012c <__udivsi3>
 8003d8e:	0003      	movs	r3, r0
 8003d90:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003d92:	e002      	b.n	8003d9a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1f9      	bne.n	8003d94 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003da0:	f7ff fba2 	bl	80034e8 <HAL_GetTick>
 8003da4:	0003      	movs	r3, r0
 8003da6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003da8:	e01b      	b.n	8003de2 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003daa:	f7ff fb9d 	bl	80034e8 <HAL_GetTick>
 8003dae:	0002      	movs	r2, r0
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d914      	bls.n	8003de2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d00d      	beq.n	8003de2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dca:	2210      	movs	r2, #16
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e007      	b.n	8003df2 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2201      	movs	r2, #1
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d1dc      	bne.n	8003daa <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	0018      	movs	r0, r3
 8003df4:	46bd      	mov	sp, r7
 8003df6:	b004      	add	sp, #16
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	80000017 	.word	0x80000017
 8003e00:	20000000 	.word	0x20000000
 8003e04:	000f4240 	.word	0x000f4240

08003e08 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2203      	movs	r2, #3
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d112      	bne.n	8003e48 <ADC_Disable+0x40>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d009      	beq.n	8003e44 <ADC_Disable+0x3c>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	2380      	movs	r3, #128	; 0x80
 8003e38:	021b      	lsls	r3, r3, #8
 8003e3a:	401a      	ands	r2, r3
 8003e3c:	2380      	movs	r3, #128	; 0x80
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d101      	bne.n	8003e48 <ADC_Disable+0x40>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <ADC_Disable+0x42>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d048      	beq.n	8003ee0 <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	2205      	movs	r2, #5
 8003e56:	4013      	ands	r3, r2
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d110      	bne.n	8003e7e <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2102      	movs	r1, #2
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	609a      	str	r2, [r3, #8]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2203      	movs	r2, #3
 8003e72:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003e74:	f7ff fb38 	bl	80034e8 <HAL_GetTick>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003e7c:	e029      	b.n	8003ed2 <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	2210      	movs	r2, #16
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8e:	2201      	movs	r2, #1
 8003e90:	431a      	orrs	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e023      	b.n	8003ee2 <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003e9a:	f7ff fb25 	bl	80034e8 <HAL_GetTick>
 8003e9e:	0002      	movs	r2, r0
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d914      	bls.n	8003ed2 <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d10d      	bne.n	8003ed2 <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	2210      	movs	r2, #16
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e007      	b.n	8003ee2 <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	4013      	ands	r3, r2
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d0dc      	beq.n	8003e9a <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	0018      	movs	r0, r3
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	b004      	add	sp, #16
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2204      	movs	r2, #4
 8003efe:	4013      	ands	r3, r2
 8003f00:	d03a      	beq.n	8003f78 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2204      	movs	r2, #4
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d10d      	bne.n	8003f2c <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2202      	movs	r2, #2
 8003f18:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003f1a:	d107      	bne.n	8003f2c <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2110      	movs	r1, #16
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f2c:	f7ff fadc 	bl	80034e8 <HAL_GetTick>
 8003f30:	0003      	movs	r3, r0
 8003f32:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003f34:	e01a      	b.n	8003f6c <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003f36:	f7ff fad7 	bl	80034e8 <HAL_GetTick>
 8003f3a:	0002      	movs	r2, r0
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d913      	bls.n	8003f6c <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2204      	movs	r2, #4
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d00d      	beq.n	8003f6c <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f54:	2210      	movs	r2, #16
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	2201      	movs	r2, #1
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e006      	b.n	8003f7a <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2204      	movs	r2, #4
 8003f74:	4013      	ands	r3, r2
 8003f76:	d1de      	bne.n	8003f36 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b004      	add	sp, #16
 8003f80:	bd80      	pop	{r7, pc}
	...

08003f84 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f8c:	2317      	movs	r3, #23
 8003f8e:	18fb      	adds	r3, r7, r3
 8003f90:	2200      	movs	r2, #0
 8003f92:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2234      	movs	r2, #52	; 0x34
 8003fa0:	5c9b      	ldrb	r3, [r3, r2]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_ADCEx_Calibration_Start+0x26>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e08d      	b.n	80040c6 <HAL_ADCEx_Calibration_Start+0x142>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2234      	movs	r2, #52	; 0x34
 8003fae:	2101      	movs	r1, #1
 8003fb0:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2203      	movs	r2, #3
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d112      	bne.n	8003fe6 <HAL_ADCEx_Calibration_Start+0x62>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	4013      	ands	r3, r2
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d009      	beq.n	8003fe2 <HAL_ADCEx_Calibration_Start+0x5e>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	2380      	movs	r3, #128	; 0x80
 8003fd6:	021b      	lsls	r3, r3, #8
 8003fd8:	401a      	ands	r2, r3
 8003fda:	2380      	movs	r3, #128	; 0x80
 8003fdc:	021b      	lsls	r3, r3, #8
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d101      	bne.n	8003fe6 <HAL_ADCEx_Calibration_Start+0x62>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e000      	b.n	8003fe8 <HAL_ADCEx_Calibration_Start+0x64>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d15b      	bne.n	80040a4 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	4a37      	ldr	r2, [pc, #220]	; (80040d0 <HAL_ADCEx_Calibration_Start+0x14c>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	2203      	movs	r2, #3
 8004004:	4013      	ands	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2103      	movs	r1, #3
 8004014:	438a      	bics	r2, r1
 8004016:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2180      	movs	r1, #128	; 0x80
 8004024:	0609      	lsls	r1, r1, #24
 8004026:	430a      	orrs	r2, r1
 8004028:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800402a:	f7ff fa5d 	bl	80034e8 <HAL_GetTick>
 800402e:	0003      	movs	r3, r0
 8004030:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004032:	e01d      	b.n	8004070 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004034:	f7ff fa58 	bl	80034e8 <HAL_GetTick>
 8004038:	0002      	movs	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d916      	bls.n	8004070 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	0fdb      	lsrs	r3, r3, #31
 800404a:	07da      	lsls	r2, r3, #31
 800404c:	2380      	movs	r3, #128	; 0x80
 800404e:	061b      	lsls	r3, r3, #24
 8004050:	429a      	cmp	r2, r3
 8004052:	d10d      	bne.n	8004070 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	2212      	movs	r2, #18
 800405a:	4393      	bics	r3, r2
 800405c:	2210      	movs	r2, #16
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2234      	movs	r2, #52	; 0x34
 8004068:	2100      	movs	r1, #0
 800406a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e02a      	b.n	80040c6 <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	0fdb      	lsrs	r3, r3, #31
 8004078:	07da      	lsls	r2, r3, #31
 800407a:	2380      	movs	r3, #128	; 0x80
 800407c:	061b      	lsls	r3, r3, #24
 800407e:	429a      	cmp	r2, r3
 8004080:	d0d8      	beq.n	8004034 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68d9      	ldr	r1, [r3, #12]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	430a      	orrs	r2, r1
 8004090:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004096:	2203      	movs	r2, #3
 8004098:	4393      	bics	r3, r2
 800409a:	2201      	movs	r2, #1
 800409c:	431a      	orrs	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	639a      	str	r2, [r3, #56]	; 0x38
 80040a2:	e009      	b.n	80040b8 <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	2220      	movs	r2, #32
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80040b0:	2317      	movs	r3, #23
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	2201      	movs	r2, #1
 80040b6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2234      	movs	r2, #52	; 0x34
 80040bc:	2100      	movs	r1, #0
 80040be:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80040c0:	2317      	movs	r3, #23
 80040c2:	18fb      	adds	r3, r7, r3
 80040c4:	781b      	ldrb	r3, [r3, #0]
}
 80040c6:	0018      	movs	r0, r3
 80040c8:	46bd      	mov	sp, r7
 80040ca:	b006      	add	sp, #24
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	46c0      	nop			; (mov r8, r8)
 80040d0:	fffffefd 	.word	0xfffffefd

080040d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	0002      	movs	r2, r0
 80040dc:	1dfb      	adds	r3, r7, #7
 80040de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80040e0:	1dfb      	adds	r3, r7, #7
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b7f      	cmp	r3, #127	; 0x7f
 80040e6:	d809      	bhi.n	80040fc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040e8:	1dfb      	adds	r3, r7, #7
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	001a      	movs	r2, r3
 80040ee:	231f      	movs	r3, #31
 80040f0:	401a      	ands	r2, r3
 80040f2:	4b04      	ldr	r3, [pc, #16]	; (8004104 <__NVIC_EnableIRQ+0x30>)
 80040f4:	2101      	movs	r1, #1
 80040f6:	4091      	lsls	r1, r2
 80040f8:	000a      	movs	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]
  }
}
 80040fc:	46c0      	nop			; (mov r8, r8)
 80040fe:	46bd      	mov	sp, r7
 8004100:	b002      	add	sp, #8
 8004102:	bd80      	pop	{r7, pc}
 8004104:	e000e100 	.word	0xe000e100

08004108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004108:	b590      	push	{r4, r7, lr}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	0002      	movs	r2, r0
 8004110:	6039      	str	r1, [r7, #0]
 8004112:	1dfb      	adds	r3, r7, #7
 8004114:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004116:	1dfb      	adds	r3, r7, #7
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b7f      	cmp	r3, #127	; 0x7f
 800411c:	d828      	bhi.n	8004170 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800411e:	4a2f      	ldr	r2, [pc, #188]	; (80041dc <__NVIC_SetPriority+0xd4>)
 8004120:	1dfb      	adds	r3, r7, #7
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	b25b      	sxtb	r3, r3
 8004126:	089b      	lsrs	r3, r3, #2
 8004128:	33c0      	adds	r3, #192	; 0xc0
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	589b      	ldr	r3, [r3, r2]
 800412e:	1dfa      	adds	r2, r7, #7
 8004130:	7812      	ldrb	r2, [r2, #0]
 8004132:	0011      	movs	r1, r2
 8004134:	2203      	movs	r2, #3
 8004136:	400a      	ands	r2, r1
 8004138:	00d2      	lsls	r2, r2, #3
 800413a:	21ff      	movs	r1, #255	; 0xff
 800413c:	4091      	lsls	r1, r2
 800413e:	000a      	movs	r2, r1
 8004140:	43d2      	mvns	r2, r2
 8004142:	401a      	ands	r2, r3
 8004144:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	019b      	lsls	r3, r3, #6
 800414a:	22ff      	movs	r2, #255	; 0xff
 800414c:	401a      	ands	r2, r3
 800414e:	1dfb      	adds	r3, r7, #7
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	0018      	movs	r0, r3
 8004154:	2303      	movs	r3, #3
 8004156:	4003      	ands	r3, r0
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800415c:	481f      	ldr	r0, [pc, #124]	; (80041dc <__NVIC_SetPriority+0xd4>)
 800415e:	1dfb      	adds	r3, r7, #7
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	b25b      	sxtb	r3, r3
 8004164:	089b      	lsrs	r3, r3, #2
 8004166:	430a      	orrs	r2, r1
 8004168:	33c0      	adds	r3, #192	; 0xc0
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800416e:	e031      	b.n	80041d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004170:	4a1b      	ldr	r2, [pc, #108]	; (80041e0 <__NVIC_SetPriority+0xd8>)
 8004172:	1dfb      	adds	r3, r7, #7
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	0019      	movs	r1, r3
 8004178:	230f      	movs	r3, #15
 800417a:	400b      	ands	r3, r1
 800417c:	3b08      	subs	r3, #8
 800417e:	089b      	lsrs	r3, r3, #2
 8004180:	3306      	adds	r3, #6
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	18d3      	adds	r3, r2, r3
 8004186:	3304      	adds	r3, #4
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	1dfa      	adds	r2, r7, #7
 800418c:	7812      	ldrb	r2, [r2, #0]
 800418e:	0011      	movs	r1, r2
 8004190:	2203      	movs	r2, #3
 8004192:	400a      	ands	r2, r1
 8004194:	00d2      	lsls	r2, r2, #3
 8004196:	21ff      	movs	r1, #255	; 0xff
 8004198:	4091      	lsls	r1, r2
 800419a:	000a      	movs	r2, r1
 800419c:	43d2      	mvns	r2, r2
 800419e:	401a      	ands	r2, r3
 80041a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	019b      	lsls	r3, r3, #6
 80041a6:	22ff      	movs	r2, #255	; 0xff
 80041a8:	401a      	ands	r2, r3
 80041aa:	1dfb      	adds	r3, r7, #7
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	0018      	movs	r0, r3
 80041b0:	2303      	movs	r3, #3
 80041b2:	4003      	ands	r3, r0
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041b8:	4809      	ldr	r0, [pc, #36]	; (80041e0 <__NVIC_SetPriority+0xd8>)
 80041ba:	1dfb      	adds	r3, r7, #7
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	001c      	movs	r4, r3
 80041c0:	230f      	movs	r3, #15
 80041c2:	4023      	ands	r3, r4
 80041c4:	3b08      	subs	r3, #8
 80041c6:	089b      	lsrs	r3, r3, #2
 80041c8:	430a      	orrs	r2, r1
 80041ca:	3306      	adds	r3, #6
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	18c3      	adds	r3, r0, r3
 80041d0:	3304      	adds	r3, #4
 80041d2:	601a      	str	r2, [r3, #0]
}
 80041d4:	46c0      	nop			; (mov r8, r8)
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b003      	add	sp, #12
 80041da:	bd90      	pop	{r4, r7, pc}
 80041dc:	e000e100 	.word	0xe000e100
 80041e0:	e000ed00 	.word	0xe000ed00

080041e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	1e5a      	subs	r2, r3, #1
 80041f0:	2380      	movs	r3, #128	; 0x80
 80041f2:	045b      	lsls	r3, r3, #17
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d301      	bcc.n	80041fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041f8:	2301      	movs	r3, #1
 80041fa:	e010      	b.n	800421e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041fc:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <SysTick_Config+0x44>)
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	3a01      	subs	r2, #1
 8004202:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004204:	2301      	movs	r3, #1
 8004206:	425b      	negs	r3, r3
 8004208:	2103      	movs	r1, #3
 800420a:	0018      	movs	r0, r3
 800420c:	f7ff ff7c 	bl	8004108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004210:	4b05      	ldr	r3, [pc, #20]	; (8004228 <SysTick_Config+0x44>)
 8004212:	2200      	movs	r2, #0
 8004214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004216:	4b04      	ldr	r3, [pc, #16]	; (8004228 <SysTick_Config+0x44>)
 8004218:	2207      	movs	r2, #7
 800421a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800421c:	2300      	movs	r3, #0
}
 800421e:	0018      	movs	r0, r3
 8004220:	46bd      	mov	sp, r7
 8004222:	b002      	add	sp, #8
 8004224:	bd80      	pop	{r7, pc}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	e000e010 	.word	0xe000e010

0800422c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	607a      	str	r2, [r7, #4]
 8004236:	210f      	movs	r1, #15
 8004238:	187b      	adds	r3, r7, r1
 800423a:	1c02      	adds	r2, r0, #0
 800423c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	187b      	adds	r3, r7, r1
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	b25b      	sxtb	r3, r3
 8004246:	0011      	movs	r1, r2
 8004248:	0018      	movs	r0, r3
 800424a:	f7ff ff5d 	bl	8004108 <__NVIC_SetPriority>
}
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	46bd      	mov	sp, r7
 8004252:	b004      	add	sp, #16
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b082      	sub	sp, #8
 800425a:	af00      	add	r7, sp, #0
 800425c:	0002      	movs	r2, r0
 800425e:	1dfb      	adds	r3, r7, #7
 8004260:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004262:	1dfb      	adds	r3, r7, #7
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	b25b      	sxtb	r3, r3
 8004268:	0018      	movs	r0, r3
 800426a:	f7ff ff33 	bl	80040d4 <__NVIC_EnableIRQ>
}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	46bd      	mov	sp, r7
 8004272:	b002      	add	sp, #8
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b082      	sub	sp, #8
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	0018      	movs	r0, r3
 8004282:	f7ff ffaf 	bl	80041e4 <SysTick_Config>
 8004286:	0003      	movs	r3, r0
}
 8004288:	0018      	movs	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	b002      	add	sp, #8
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2221      	movs	r2, #33	; 0x21
 800429c:	5c9b      	ldrb	r3, [r3, r2]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d008      	beq.n	80042b6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2204      	movs	r2, #4
 80042a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2220      	movs	r2, #32
 80042ae:	2100      	movs	r1, #0
 80042b0:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e020      	b.n	80042f8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	210e      	movs	r1, #14
 80042c2:	438a      	bics	r2, r1
 80042c4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2101      	movs	r1, #1
 80042d2:	438a      	bics	r2, r1
 80042d4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042de:	2101      	movs	r1, #1
 80042e0:	4091      	lsls	r1, r2
 80042e2:	000a      	movs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2221      	movs	r2, #33	; 0x21
 80042ea:	2101      	movs	r1, #1
 80042ec:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	2100      	movs	r1, #0
 80042f4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	0018      	movs	r0, r3
 80042fa:	46bd      	mov	sp, r7
 80042fc:	b002      	add	sp, #8
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004308:	210f      	movs	r1, #15
 800430a:	187b      	adds	r3, r7, r1
 800430c:	2200      	movs	r2, #0
 800430e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2221      	movs	r2, #33	; 0x21
 8004314:	5c9b      	ldrb	r3, [r3, r2]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d006      	beq.n	800432a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2204      	movs	r2, #4
 8004320:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004322:	187b      	adds	r3, r7, r1
 8004324:	2201      	movs	r2, #1
 8004326:	701a      	strb	r2, [r3, #0]
 8004328:	e028      	b.n	800437c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	210e      	movs	r1, #14
 8004336:	438a      	bics	r2, r1
 8004338:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2101      	movs	r1, #1
 8004346:	438a      	bics	r2, r1
 8004348:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004352:	2101      	movs	r1, #1
 8004354:	4091      	lsls	r1, r2
 8004356:	000a      	movs	r2, r1
 8004358:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2221      	movs	r2, #33	; 0x21
 800435e:	2101      	movs	r1, #1
 8004360:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	2100      	movs	r1, #0
 8004368:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436e:	2b00      	cmp	r3, #0
 8004370:	d004      	beq.n	800437c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	0010      	movs	r0, r2
 800437a:	4798      	blx	r3
    } 
  }
  return status;
 800437c:	230f      	movs	r3, #15
 800437e:	18fb      	adds	r3, r7, r3
 8004380:	781b      	ldrb	r3, [r3, #0]
}
 8004382:	0018      	movs	r0, r3
 8004384:	46bd      	mov	sp, r7
 8004386:	b004      	add	sp, #16
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004396:	2300      	movs	r3, #0
 8004398:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800439a:	e155      	b.n	8004648 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2101      	movs	r1, #1
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4091      	lsls	r1, r2
 80043a6:	000a      	movs	r2, r1
 80043a8:	4013      	ands	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d100      	bne.n	80043b4 <HAL_GPIO_Init+0x28>
 80043b2:	e146      	b.n	8004642 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2203      	movs	r2, #3
 80043ba:	4013      	ands	r3, r2
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d005      	beq.n	80043cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2203      	movs	r2, #3
 80043c6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d130      	bne.n	800442e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	2203      	movs	r2, #3
 80043d8:	409a      	lsls	r2, r3
 80043da:	0013      	movs	r3, r2
 80043dc:	43da      	mvns	r2, r3
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	4013      	ands	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	005b      	lsls	r3, r3, #1
 80043ec:	409a      	lsls	r2, r3
 80043ee:	0013      	movs	r3, r2
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004402:	2201      	movs	r2, #1
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	409a      	lsls	r2, r3
 8004408:	0013      	movs	r3, r2
 800440a:	43da      	mvns	r2, r3
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	4013      	ands	r3, r2
 8004410:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	091b      	lsrs	r3, r3, #4
 8004418:	2201      	movs	r2, #1
 800441a:	401a      	ands	r2, r3
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	409a      	lsls	r2, r3
 8004420:	0013      	movs	r3, r2
 8004422:	693a      	ldr	r2, [r7, #16]
 8004424:	4313      	orrs	r3, r2
 8004426:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2203      	movs	r2, #3
 8004434:	4013      	ands	r3, r2
 8004436:	2b03      	cmp	r3, #3
 8004438:	d017      	beq.n	800446a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	2203      	movs	r2, #3
 8004446:	409a      	lsls	r2, r3
 8004448:	0013      	movs	r3, r2
 800444a:	43da      	mvns	r2, r3
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	4013      	ands	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	409a      	lsls	r2, r3
 800445c:	0013      	movs	r3, r2
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2203      	movs	r2, #3
 8004470:	4013      	ands	r3, r2
 8004472:	2b02      	cmp	r3, #2
 8004474:	d123      	bne.n	80044be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	08da      	lsrs	r2, r3, #3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3208      	adds	r2, #8
 800447e:	0092      	lsls	r2, r2, #2
 8004480:	58d3      	ldr	r3, [r2, r3]
 8004482:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2207      	movs	r2, #7
 8004488:	4013      	ands	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	220f      	movs	r2, #15
 800448e:	409a      	lsls	r2, r3
 8004490:	0013      	movs	r3, r2
 8004492:	43da      	mvns	r2, r3
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	4013      	ands	r3, r2
 8004498:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	691a      	ldr	r2, [r3, #16]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	2107      	movs	r1, #7
 80044a2:	400b      	ands	r3, r1
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	409a      	lsls	r2, r3
 80044a8:	0013      	movs	r3, r2
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	08da      	lsrs	r2, r3, #3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3208      	adds	r2, #8
 80044b8:	0092      	lsls	r2, r2, #2
 80044ba:	6939      	ldr	r1, [r7, #16]
 80044bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	2203      	movs	r2, #3
 80044ca:	409a      	lsls	r2, r3
 80044cc:	0013      	movs	r3, r2
 80044ce:	43da      	mvns	r2, r3
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	4013      	ands	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2203      	movs	r2, #3
 80044dc:	401a      	ands	r2, r3
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	409a      	lsls	r2, r3
 80044e4:	0013      	movs	r3, r2
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	23c0      	movs	r3, #192	; 0xc0
 80044f8:	029b      	lsls	r3, r3, #10
 80044fa:	4013      	ands	r3, r2
 80044fc:	d100      	bne.n	8004500 <HAL_GPIO_Init+0x174>
 80044fe:	e0a0      	b.n	8004642 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004500:	4b57      	ldr	r3, [pc, #348]	; (8004660 <HAL_GPIO_Init+0x2d4>)
 8004502:	699a      	ldr	r2, [r3, #24]
 8004504:	4b56      	ldr	r3, [pc, #344]	; (8004660 <HAL_GPIO_Init+0x2d4>)
 8004506:	2101      	movs	r1, #1
 8004508:	430a      	orrs	r2, r1
 800450a:	619a      	str	r2, [r3, #24]
 800450c:	4b54      	ldr	r3, [pc, #336]	; (8004660 <HAL_GPIO_Init+0x2d4>)
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	2201      	movs	r2, #1
 8004512:	4013      	ands	r3, r2
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004518:	4a52      	ldr	r2, [pc, #328]	; (8004664 <HAL_GPIO_Init+0x2d8>)
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	089b      	lsrs	r3, r3, #2
 800451e:	3302      	adds	r3, #2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	589b      	ldr	r3, [r3, r2]
 8004524:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	2203      	movs	r2, #3
 800452a:	4013      	ands	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	220f      	movs	r2, #15
 8004530:	409a      	lsls	r2, r3
 8004532:	0013      	movs	r3, r2
 8004534:	43da      	mvns	r2, r3
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	4013      	ands	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	2390      	movs	r3, #144	; 0x90
 8004540:	05db      	lsls	r3, r3, #23
 8004542:	429a      	cmp	r2, r3
 8004544:	d019      	beq.n	800457a <HAL_GPIO_Init+0x1ee>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a47      	ldr	r2, [pc, #284]	; (8004668 <HAL_GPIO_Init+0x2dc>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d013      	beq.n	8004576 <HAL_GPIO_Init+0x1ea>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a46      	ldr	r2, [pc, #280]	; (800466c <HAL_GPIO_Init+0x2e0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00d      	beq.n	8004572 <HAL_GPIO_Init+0x1e6>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a45      	ldr	r2, [pc, #276]	; (8004670 <HAL_GPIO_Init+0x2e4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d007      	beq.n	800456e <HAL_GPIO_Init+0x1e2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a44      	ldr	r2, [pc, #272]	; (8004674 <HAL_GPIO_Init+0x2e8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d101      	bne.n	800456a <HAL_GPIO_Init+0x1de>
 8004566:	2304      	movs	r3, #4
 8004568:	e008      	b.n	800457c <HAL_GPIO_Init+0x1f0>
 800456a:	2305      	movs	r3, #5
 800456c:	e006      	b.n	800457c <HAL_GPIO_Init+0x1f0>
 800456e:	2303      	movs	r3, #3
 8004570:	e004      	b.n	800457c <HAL_GPIO_Init+0x1f0>
 8004572:	2302      	movs	r3, #2
 8004574:	e002      	b.n	800457c <HAL_GPIO_Init+0x1f0>
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <HAL_GPIO_Init+0x1f0>
 800457a:	2300      	movs	r3, #0
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	2103      	movs	r1, #3
 8004580:	400a      	ands	r2, r1
 8004582:	0092      	lsls	r2, r2, #2
 8004584:	4093      	lsls	r3, r2
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4313      	orrs	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800458c:	4935      	ldr	r1, [pc, #212]	; (8004664 <HAL_GPIO_Init+0x2d8>)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	089b      	lsrs	r3, r3, #2
 8004592:	3302      	adds	r3, #2
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800459a:	4b37      	ldr	r3, [pc, #220]	; (8004678 <HAL_GPIO_Init+0x2ec>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	43da      	mvns	r2, r3
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4013      	ands	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	2380      	movs	r3, #128	; 0x80
 80045b0:	025b      	lsls	r3, r3, #9
 80045b2:	4013      	ands	r3, r2
 80045b4:	d003      	beq.n	80045be <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80045be:	4b2e      	ldr	r3, [pc, #184]	; (8004678 <HAL_GPIO_Init+0x2ec>)
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80045c4:	4b2c      	ldr	r3, [pc, #176]	; (8004678 <HAL_GPIO_Init+0x2ec>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	43da      	mvns	r2, r3
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	4013      	ands	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	2380      	movs	r3, #128	; 0x80
 80045da:	029b      	lsls	r3, r3, #10
 80045dc:	4013      	ands	r3, r2
 80045de:	d003      	beq.n	80045e8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80045e8:	4b23      	ldr	r3, [pc, #140]	; (8004678 <HAL_GPIO_Init+0x2ec>)
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045ee:	4b22      	ldr	r3, [pc, #136]	; (8004678 <HAL_GPIO_Init+0x2ec>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	43da      	mvns	r2, r3
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	4013      	ands	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	2380      	movs	r3, #128	; 0x80
 8004604:	035b      	lsls	r3, r3, #13
 8004606:	4013      	ands	r3, r2
 8004608:	d003      	beq.n	8004612 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004612:	4b19      	ldr	r3, [pc, #100]	; (8004678 <HAL_GPIO_Init+0x2ec>)
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004618:	4b17      	ldr	r3, [pc, #92]	; (8004678 <HAL_GPIO_Init+0x2ec>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	43da      	mvns	r2, r3
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	4013      	ands	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	039b      	lsls	r3, r3, #14
 8004630:	4013      	ands	r3, r2
 8004632:	d003      	beq.n	800463c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4313      	orrs	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800463c:	4b0e      	ldr	r3, [pc, #56]	; (8004678 <HAL_GPIO_Init+0x2ec>)
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	3301      	adds	r3, #1
 8004646:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	40da      	lsrs	r2, r3
 8004650:	1e13      	subs	r3, r2, #0
 8004652:	d000      	beq.n	8004656 <HAL_GPIO_Init+0x2ca>
 8004654:	e6a2      	b.n	800439c <HAL_GPIO_Init+0x10>
  } 
}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	46c0      	nop			; (mov r8, r8)
 800465a:	46bd      	mov	sp, r7
 800465c:	b006      	add	sp, #24
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40021000 	.word	0x40021000
 8004664:	40010000 	.word	0x40010000
 8004668:	48000400 	.word	0x48000400
 800466c:	48000800 	.word	0x48000800
 8004670:	48000c00 	.word	0x48000c00
 8004674:	48001000 	.word	0x48001000
 8004678:	40010400 	.word	0x40010400

0800467c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	000a      	movs	r2, r1
 8004686:	1cbb      	adds	r3, r7, #2
 8004688:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	1cba      	adds	r2, r7, #2
 8004690:	8812      	ldrh	r2, [r2, #0]
 8004692:	4013      	ands	r3, r2
 8004694:	d004      	beq.n	80046a0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004696:	230f      	movs	r3, #15
 8004698:	18fb      	adds	r3, r7, r3
 800469a:	2201      	movs	r2, #1
 800469c:	701a      	strb	r2, [r3, #0]
 800469e:	e003      	b.n	80046a8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046a0:	230f      	movs	r3, #15
 80046a2:	18fb      	adds	r3, r7, r3
 80046a4:	2200      	movs	r2, #0
 80046a6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80046a8:	230f      	movs	r3, #15
 80046aa:	18fb      	adds	r3, r7, r3
 80046ac:	781b      	ldrb	r3, [r3, #0]
  }
 80046ae:	0018      	movs	r0, r3
 80046b0:	46bd      	mov	sp, r7
 80046b2:	b004      	add	sp, #16
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	0008      	movs	r0, r1
 80046c0:	0011      	movs	r1, r2
 80046c2:	1cbb      	adds	r3, r7, #2
 80046c4:	1c02      	adds	r2, r0, #0
 80046c6:	801a      	strh	r2, [r3, #0]
 80046c8:	1c7b      	adds	r3, r7, #1
 80046ca:	1c0a      	adds	r2, r1, #0
 80046cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046ce:	1c7b      	adds	r3, r7, #1
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d004      	beq.n	80046e0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046d6:	1cbb      	adds	r3, r7, #2
 80046d8:	881a      	ldrh	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046de:	e003      	b.n	80046e8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046e0:	1cbb      	adds	r3, r7, #2
 80046e2:	881a      	ldrh	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046e8:	46c0      	nop			; (mov r8, r8)
 80046ea:	46bd      	mov	sp, r7
 80046ec:	b002      	add	sp, #8
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	000a      	movs	r2, r1
 80046fa:	1cbb      	adds	r3, r7, #2
 80046fc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004704:	1cbb      	adds	r3, r7, #2
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4013      	ands	r3, r2
 800470c:	041a      	lsls	r2, r3, #16
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	43db      	mvns	r3, r3
 8004712:	1cb9      	adds	r1, r7, #2
 8004714:	8809      	ldrh	r1, [r1, #0]
 8004716:	400b      	ands	r3, r1
 8004718:	431a      	orrs	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	619a      	str	r2, [r3, #24]
}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	46bd      	mov	sp, r7
 8004722:	b004      	add	sp, #16
 8004724:	bd80      	pop	{r7, pc}
	...

08004728 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	0002      	movs	r2, r0
 8004730:	1dbb      	adds	r3, r7, #6
 8004732:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004734:	4b09      	ldr	r3, [pc, #36]	; (800475c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	1dba      	adds	r2, r7, #6
 800473a:	8812      	ldrh	r2, [r2, #0]
 800473c:	4013      	ands	r3, r2
 800473e:	d008      	beq.n	8004752 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004740:	4b06      	ldr	r3, [pc, #24]	; (800475c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004742:	1dba      	adds	r2, r7, #6
 8004744:	8812      	ldrh	r2, [r2, #0]
 8004746:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004748:	1dbb      	adds	r3, r7, #6
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	0018      	movs	r0, r3
 800474e:	f7fc fd39 	bl	80011c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004752:	46c0      	nop			; (mov r8, r8)
 8004754:	46bd      	mov	sp, r7
 8004756:	b002      	add	sp, #8
 8004758:	bd80      	pop	{r7, pc}
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	40010400 	.word	0x40010400

08004760 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004762:	b08b      	sub	sp, #44	; 0x2c
 8004764:	af06      	add	r7, sp, #24
 8004766:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e0ff      	b.n	8004972 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a81      	ldr	r2, [pc, #516]	; (800497c <HAL_PCD_Init+0x21c>)
 8004776:	5c9b      	ldrb	r3, [r3, r2]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d108      	bne.n	8004790 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	23aa      	movs	r3, #170	; 0xaa
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	2100      	movs	r1, #0
 8004786:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	0018      	movs	r0, r3
 800478c:	f008 fd6c 	bl	800d268 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a7a      	ldr	r2, [pc, #488]	; (800497c <HAL_PCD_Init+0x21c>)
 8004794:	2103      	movs	r1, #3
 8004796:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	0018      	movs	r0, r3
 800479e:	f004 fe0f 	bl	80093c0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047a2:	230f      	movs	r3, #15
 80047a4:	18fb      	adds	r3, r7, r3
 80047a6:	2200      	movs	r2, #0
 80047a8:	701a      	strb	r2, [r3, #0]
 80047aa:	e058      	b.n	800485e <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80047ac:	200f      	movs	r0, #15
 80047ae:	183b      	adds	r3, r7, r0
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	0013      	movs	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	189b      	adds	r3, r3, r2
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	18cb      	adds	r3, r1, r3
 80047c0:	3301      	adds	r3, #1
 80047c2:	2201      	movs	r2, #1
 80047c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80047c6:	183b      	adds	r3, r7, r0
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	0013      	movs	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	189b      	adds	r3, r3, r2
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	183a      	adds	r2, r7, r0
 80047d8:	7812      	ldrb	r2, [r2, #0]
 80047da:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80047dc:	0004      	movs	r4, r0
 80047de:	183b      	adds	r3, r7, r0
 80047e0:	781a      	ldrb	r2, [r3, #0]
 80047e2:	193b      	adds	r3, r7, r4
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	b298      	uxth	r0, r3
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	0013      	movs	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	189b      	adds	r3, r3, r2
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	18cb      	adds	r3, r1, r3
 80047f4:	3336      	adds	r3, #54	; 0x36
 80047f6:	1c02      	adds	r2, r0, #0
 80047f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80047fa:	193b      	adds	r3, r7, r4
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	0013      	movs	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	189b      	adds	r3, r3, r2
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	18cb      	adds	r3, r1, r3
 800480c:	3303      	adds	r3, #3
 800480e:	2200      	movs	r2, #0
 8004810:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004812:	193b      	adds	r3, r7, r4
 8004814:	781a      	ldrb	r2, [r3, #0]
 8004816:	6879      	ldr	r1, [r7, #4]
 8004818:	0013      	movs	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	189b      	adds	r3, r3, r2
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	18cb      	adds	r3, r1, r3
 8004822:	3338      	adds	r3, #56	; 0x38
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004828:	193b      	adds	r3, r7, r4
 800482a:	781a      	ldrb	r2, [r3, #0]
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	0013      	movs	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	189b      	adds	r3, r3, r2
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	18cb      	adds	r3, r1, r3
 8004838:	333c      	adds	r3, #60	; 0x3c
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800483e:	193b      	adds	r3, r7, r4
 8004840:	781a      	ldrb	r2, [r3, #0]
 8004842:	6879      	ldr	r1, [r7, #4]
 8004844:	0013      	movs	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	189b      	adds	r3, r3, r2
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	18cb      	adds	r3, r1, r3
 800484e:	3340      	adds	r3, #64	; 0x40
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004854:	193b      	adds	r3, r7, r4
 8004856:	781a      	ldrb	r2, [r3, #0]
 8004858:	193b      	adds	r3, r7, r4
 800485a:	3201      	adds	r2, #1
 800485c:	701a      	strb	r2, [r3, #0]
 800485e:	210f      	movs	r1, #15
 8004860:	187b      	adds	r3, r7, r1
 8004862:	781a      	ldrb	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	429a      	cmp	r2, r3
 800486a:	d39f      	bcc.n	80047ac <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800486c:	187b      	adds	r3, r7, r1
 800486e:	2200      	movs	r2, #0
 8004870:	701a      	strb	r2, [r3, #0]
 8004872:	e056      	b.n	8004922 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004874:	240f      	movs	r4, #15
 8004876:	193b      	adds	r3, r7, r4
 8004878:	781a      	ldrb	r2, [r3, #0]
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	236a      	movs	r3, #106	; 0x6a
 800487e:	33ff      	adds	r3, #255	; 0xff
 8004880:	0019      	movs	r1, r3
 8004882:	0013      	movs	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	189b      	adds	r3, r3, r2
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	18c3      	adds	r3, r0, r3
 800488c:	185b      	adds	r3, r3, r1
 800488e:	2200      	movs	r2, #0
 8004890:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004892:	193b      	adds	r3, r7, r4
 8004894:	781a      	ldrb	r2, [r3, #0]
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	23b4      	movs	r3, #180	; 0xb4
 800489a:	0059      	lsls	r1, r3, #1
 800489c:	0013      	movs	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	189b      	adds	r3, r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	18c3      	adds	r3, r0, r3
 80048a6:	185b      	adds	r3, r3, r1
 80048a8:	193a      	adds	r2, r7, r4
 80048aa:	7812      	ldrb	r2, [r2, #0]
 80048ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80048ae:	193b      	adds	r3, r7, r4
 80048b0:	781a      	ldrb	r2, [r3, #0]
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	236c      	movs	r3, #108	; 0x6c
 80048b6:	33ff      	adds	r3, #255	; 0xff
 80048b8:	0019      	movs	r1, r3
 80048ba:	0013      	movs	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	189b      	adds	r3, r3, r2
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	18c3      	adds	r3, r0, r3
 80048c4:	185b      	adds	r3, r3, r1
 80048c6:	2200      	movs	r2, #0
 80048c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80048ca:	193b      	adds	r3, r7, r4
 80048cc:	781a      	ldrb	r2, [r3, #0]
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	23bc      	movs	r3, #188	; 0xbc
 80048d2:	0059      	lsls	r1, r3, #1
 80048d4:	0013      	movs	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	189b      	adds	r3, r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	18c3      	adds	r3, r0, r3
 80048de:	185b      	adds	r3, r3, r1
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80048e4:	193b      	adds	r3, r7, r4
 80048e6:	781a      	ldrb	r2, [r3, #0]
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	23be      	movs	r3, #190	; 0xbe
 80048ec:	0059      	lsls	r1, r3, #1
 80048ee:	0013      	movs	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	189b      	adds	r3, r3, r2
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	18c3      	adds	r3, r0, r3
 80048f8:	185b      	adds	r3, r3, r1
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80048fe:	193b      	adds	r3, r7, r4
 8004900:	781a      	ldrb	r2, [r3, #0]
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	23c0      	movs	r3, #192	; 0xc0
 8004906:	0059      	lsls	r1, r3, #1
 8004908:	0013      	movs	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	189b      	adds	r3, r3, r2
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	18c3      	adds	r3, r0, r3
 8004912:	185b      	adds	r3, r3, r1
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004918:	193b      	adds	r3, r7, r4
 800491a:	781a      	ldrb	r2, [r3, #0]
 800491c:	193b      	adds	r3, r7, r4
 800491e:	3201      	adds	r2, #1
 8004920:	701a      	strb	r2, [r3, #0]
 8004922:	230f      	movs	r3, #15
 8004924:	18fb      	adds	r3, r7, r3
 8004926:	781a      	ldrb	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	429a      	cmp	r2, r3
 800492e:	d3a1      	bcc.n	8004874 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6818      	ldr	r0, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	466a      	mov	r2, sp
 8004938:	0011      	movs	r1, r2
 800493a:	001a      	movs	r2, r3
 800493c:	3210      	adds	r2, #16
 800493e:	ca70      	ldmia	r2!, {r4, r5, r6}
 8004940:	c170      	stmia	r1!, {r4, r5, r6}
 8004942:	ca30      	ldmia	r2!, {r4, r5}
 8004944:	c130      	stmia	r1!, {r4, r5}
 8004946:	6859      	ldr	r1, [r3, #4]
 8004948:	689a      	ldr	r2, [r3, #8]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f004 fd52 	bl	80093f4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2224      	movs	r2, #36	; 0x24
 8004954:	2100      	movs	r1, #0
 8004956:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a08      	ldr	r2, [pc, #32]	; (800497c <HAL_PCD_Init+0x21c>)
 800495c:	2101      	movs	r1, #1
 800495e:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d103      	bne.n	8004970 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	0018      	movs	r0, r3
 800496c:	f001 fd34 	bl	80063d8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	0018      	movs	r0, r3
 8004974:	46bd      	mov	sp, r7
 8004976:	b005      	add	sp, #20
 8004978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	000002a9 	.word	0x000002a9

08004980 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	23aa      	movs	r3, #170	; 0xaa
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	5cd3      	ldrb	r3, [r2, r3]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_PCD_Start+0x18>
 8004994:	2302      	movs	r3, #2
 8004996:	e014      	b.n	80049c2 <HAL_PCD_Start+0x42>
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	23aa      	movs	r3, #170	; 0xaa
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	2101      	movs	r1, #1
 80049a0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	0018      	movs	r0, r3
 80049a8:	f004 fcf4 	bl	8009394 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	0018      	movs	r0, r3
 80049b2:	f006 fc4b 	bl	800b24c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	23aa      	movs	r3, #170	; 0xaa
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	2100      	movs	r1, #0
 80049be:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	0018      	movs	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	b002      	add	sp, #8
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	0018      	movs	r0, r3
 80049da:	f006 fc4d 	bl	800b278 <USB_ReadInterrupts>
 80049de:	0002      	movs	r2, r0
 80049e0:	2380      	movs	r3, #128	; 0x80
 80049e2:	021b      	lsls	r3, r3, #8
 80049e4:	401a      	ands	r2, r3
 80049e6:	2380      	movs	r3, #128	; 0x80
 80049e8:	021b      	lsls	r3, r3, #8
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d103      	bne.n	80049f6 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	0018      	movs	r0, r3
 80049f2:	f000 fbbb 	bl	800516c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	0018      	movs	r0, r3
 80049fc:	f006 fc3c 	bl	800b278 <USB_ReadInterrupts>
 8004a00:	0002      	movs	r2, r0
 8004a02:	2380      	movs	r3, #128	; 0x80
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	401a      	ands	r2, r3
 8004a08:	2380      	movs	r3, #128	; 0x80
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d114      	bne.n	8004a3a <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2244      	movs	r2, #68	; 0x44
 8004a16:	5a9b      	ldrh	r3, [r3, r2]
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	49a2      	ldr	r1, [pc, #648]	; (8004ca8 <HAL_PCD_IRQHandler+0x2dc>)
 8004a20:	400a      	ands	r2, r1
 8004a22:	b291      	uxth	r1, r2
 8004a24:	2244      	movs	r2, #68	; 0x44
 8004a26:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	f008 fca7 	bl	800d37e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2100      	movs	r1, #0
 8004a34:	0018      	movs	r0, r3
 8004a36:	f000 f945 	bl	8004cc4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	0018      	movs	r0, r3
 8004a40:	f006 fc1a 	bl	800b278 <USB_ReadInterrupts>
 8004a44:	0002      	movs	r2, r0
 8004a46:	2380      	movs	r3, #128	; 0x80
 8004a48:	01db      	lsls	r3, r3, #7
 8004a4a:	401a      	ands	r2, r3
 8004a4c:	2380      	movs	r3, #128	; 0x80
 8004a4e:	01db      	lsls	r3, r3, #7
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d10b      	bne.n	8004a6c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2244      	movs	r2, #68	; 0x44
 8004a5a:	5a9b      	ldrh	r3, [r3, r2]
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4992      	ldr	r1, [pc, #584]	; (8004cac <HAL_PCD_IRQHandler+0x2e0>)
 8004a64:	400a      	ands	r2, r1
 8004a66:	b291      	uxth	r1, r2
 8004a68:	2244      	movs	r2, #68	; 0x44
 8004a6a:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	0018      	movs	r0, r3
 8004a72:	f006 fc01 	bl	800b278 <USB_ReadInterrupts>
 8004a76:	0002      	movs	r2, r0
 8004a78:	2380      	movs	r3, #128	; 0x80
 8004a7a:	019b      	lsls	r3, r3, #6
 8004a7c:	401a      	ands	r2, r3
 8004a7e:	2380      	movs	r3, #128	; 0x80
 8004a80:	019b      	lsls	r3, r3, #6
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d10b      	bne.n	8004a9e <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2244      	movs	r2, #68	; 0x44
 8004a8c:	5a9b      	ldrh	r3, [r3, r2]
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4986      	ldr	r1, [pc, #536]	; (8004cb0 <HAL_PCD_IRQHandler+0x2e4>)
 8004a96:	400a      	ands	r2, r1
 8004a98:	b291      	uxth	r1, r2
 8004a9a:	2244      	movs	r2, #68	; 0x44
 8004a9c:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	f006 fbe8 	bl	800b278 <USB_ReadInterrupts>
 8004aa8:	0002      	movs	r2, r0
 8004aaa:	2380      	movs	r3, #128	; 0x80
 8004aac:	015b      	lsls	r3, r3, #5
 8004aae:	401a      	ands	r2, r3
 8004ab0:	2380      	movs	r3, #128	; 0x80
 8004ab2:	015b      	lsls	r3, r3, #5
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d137      	bne.n	8004b28 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2240      	movs	r2, #64	; 0x40
 8004abe:	5a9b      	ldrh	r3, [r3, r2]
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2104      	movs	r1, #4
 8004ac8:	438a      	bics	r2, r1
 8004aca:	b291      	uxth	r1, r2
 8004acc:	2240      	movs	r2, #64	; 0x40
 8004ace:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2240      	movs	r2, #64	; 0x40
 8004ad6:	5a9b      	ldrh	r3, [r3, r2]
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2108      	movs	r1, #8
 8004ae0:	438a      	bics	r2, r1
 8004ae2:	b291      	uxth	r1, r2
 8004ae4:	2240      	movs	r2, #64	; 0x40
 8004ae6:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	23b8      	movs	r3, #184	; 0xb8
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	5cd3      	ldrb	r3, [r2, r3]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d109      	bne.n	8004b08 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	23b8      	movs	r3, #184	; 0xb8
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	2100      	movs	r1, #0
 8004afc:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2100      	movs	r1, #0
 8004b02:	0018      	movs	r0, r3
 8004b04:	f001 fc92 	bl	800642c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	f008 fc78 	bl	800d400 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2244      	movs	r2, #68	; 0x44
 8004b16:	5a9b      	ldrh	r3, [r3, r2]
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4965      	ldr	r1, [pc, #404]	; (8004cb4 <HAL_PCD_IRQHandler+0x2e8>)
 8004b20:	400a      	ands	r2, r1
 8004b22:	b291      	uxth	r1, r2
 8004b24:	2244      	movs	r2, #68	; 0x44
 8004b26:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f006 fba3 	bl	800b278 <USB_ReadInterrupts>
 8004b32:	0002      	movs	r2, r0
 8004b34:	2380      	movs	r3, #128	; 0x80
 8004b36:	011b      	lsls	r3, r3, #4
 8004b38:	401a      	ands	r2, r3
 8004b3a:	2380      	movs	r3, #128	; 0x80
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d127      	bne.n	8004b92 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2240      	movs	r2, #64	; 0x40
 8004b48:	5a9b      	ldrh	r3, [r3, r2]
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2108      	movs	r1, #8
 8004b52:	430a      	orrs	r2, r1
 8004b54:	b291      	uxth	r1, r2
 8004b56:	2240      	movs	r2, #64	; 0x40
 8004b58:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2244      	movs	r2, #68	; 0x44
 8004b60:	5a9b      	ldrh	r3, [r3, r2]
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4953      	ldr	r1, [pc, #332]	; (8004cb8 <HAL_PCD_IRQHandler+0x2ec>)
 8004b6a:	400a      	ands	r2, r1
 8004b6c:	b291      	uxth	r1, r2
 8004b6e:	2244      	movs	r2, #68	; 0x44
 8004b70:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2240      	movs	r2, #64	; 0x40
 8004b78:	5a9b      	ldrh	r3, [r3, r2]
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2104      	movs	r1, #4
 8004b82:	430a      	orrs	r2, r1
 8004b84:	b291      	uxth	r1, r2
 8004b86:	2240      	movs	r2, #64	; 0x40
 8004b88:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f008 fc1b 	bl	800d3c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	0018      	movs	r0, r3
 8004b98:	f006 fb6e 	bl	800b278 <USB_ReadInterrupts>
 8004b9c:	0003      	movs	r3, r0
 8004b9e:	2280      	movs	r2, #128	; 0x80
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b80      	cmp	r3, #128	; 0x80
 8004ba4:	d145      	bne.n	8004c32 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2244      	movs	r2, #68	; 0x44
 8004bac:	5a9b      	ldrh	r3, [r3, r2]
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2180      	movs	r1, #128	; 0x80
 8004bb6:	438a      	bics	r2, r1
 8004bb8:	b291      	uxth	r1, r2
 8004bba:	2244      	movs	r2, #68	; 0x44
 8004bbc:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	23b8      	movs	r3, #184	; 0xb8
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	5cd3      	ldrb	r3, [r2, r3]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d12f      	bne.n	8004c2a <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2240      	movs	r2, #64	; 0x40
 8004bd0:	5a9b      	ldrh	r3, [r3, r2]
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2104      	movs	r1, #4
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	b291      	uxth	r1, r2
 8004bde:	2240      	movs	r2, #64	; 0x40
 8004be0:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2240      	movs	r2, #64	; 0x40
 8004be8:	5a9b      	ldrh	r3, [r3, r2]
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2108      	movs	r1, #8
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	b291      	uxth	r1, r2
 8004bf6:	2240      	movs	r2, #64	; 0x40
 8004bf8:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	23b8      	movs	r3, #184	; 0xb8
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	2101      	movs	r1, #1
 8004c02:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2254      	movs	r2, #84	; 0x54
 8004c0a:	5a9b      	ldrh	r3, [r3, r2]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	089b      	lsrs	r3, r3, #2
 8004c10:	223c      	movs	r2, #60	; 0x3c
 8004c12:	4013      	ands	r3, r2
 8004c14:	0019      	movs	r1, r3
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	23b9      	movs	r3, #185	; 0xb9
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2101      	movs	r1, #1
 8004c22:	0018      	movs	r0, r3
 8004c24:	f001 fc02 	bl	800642c <HAL_PCDEx_LPM_Callback>
 8004c28:	e003      	b.n	8004c32 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f008 fbcb 	bl	800d3c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	0018      	movs	r0, r3
 8004c38:	f006 fb1e 	bl	800b278 <USB_ReadInterrupts>
 8004c3c:	0002      	movs	r2, r0
 8004c3e:	2380      	movs	r3, #128	; 0x80
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	401a      	ands	r2, r3
 8004c44:	2380      	movs	r3, #128	; 0x80
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d10f      	bne.n	8004c6c <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2244      	movs	r2, #68	; 0x44
 8004c52:	5a9b      	ldrh	r3, [r3, r2]
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4918      	ldr	r1, [pc, #96]	; (8004cbc <HAL_PCD_IRQHandler+0x2f0>)
 8004c5c:	400a      	ands	r2, r1
 8004c5e:	b291      	uxth	r1, r2
 8004c60:	2244      	movs	r2, #68	; 0x44
 8004c62:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	0018      	movs	r0, r3
 8004c68:	f008 fb7a 	bl	800d360 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	0018      	movs	r0, r3
 8004c72:	f006 fb01 	bl	800b278 <USB_ReadInterrupts>
 8004c76:	0002      	movs	r2, r0
 8004c78:	2380      	movs	r3, #128	; 0x80
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	401a      	ands	r2, r3
 8004c7e:	2380      	movs	r3, #128	; 0x80
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d10b      	bne.n	8004c9e <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2244      	movs	r2, #68	; 0x44
 8004c8c:	5a9b      	ldrh	r3, [r3, r2]
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	490a      	ldr	r1, [pc, #40]	; (8004cc0 <HAL_PCD_IRQHandler+0x2f4>)
 8004c96:	400a      	ands	r2, r1
 8004c98:	b291      	uxth	r1, r2
 8004c9a:	2244      	movs	r2, #68	; 0x44
 8004c9c:	5299      	strh	r1, [r3, r2]
  }
}
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	b002      	add	sp, #8
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	fffffbff 	.word	0xfffffbff
 8004cac:	ffffbfff 	.word	0xffffbfff
 8004cb0:	ffffdfff 	.word	0xffffdfff
 8004cb4:	ffffefff 	.word	0xffffefff
 8004cb8:	fffff7ff 	.word	0xfffff7ff
 8004cbc:	fffffdff 	.word	0xfffffdff
 8004cc0:	fffffeff 	.word	0xfffffeff

08004cc4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	000a      	movs	r2, r1
 8004cce:	1cfb      	adds	r3, r7, #3
 8004cd0:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	23aa      	movs	r3, #170	; 0xaa
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	5cd3      	ldrb	r3, [r2, r3]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <HAL_PCD_SetAddress+0x1e>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e017      	b.n	8004d12 <HAL_PCD_SetAddress+0x4e>
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	23aa      	movs	r3, #170	; 0xaa
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	2101      	movs	r1, #1
 8004cea:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	1cfa      	adds	r2, r7, #3
 8004cf0:	2124      	movs	r1, #36	; 0x24
 8004cf2:	7812      	ldrb	r2, [r2, #0]
 8004cf4:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	1cfb      	adds	r3, r7, #3
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	0019      	movs	r1, r3
 8004d00:	0010      	movs	r0, r2
 8004d02:	f006 fa8f 	bl	800b224 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	23aa      	movs	r3, #170	; 0xaa
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	0018      	movs	r0, r3
 8004d14:	46bd      	mov	sp, r7
 8004d16:	b002      	add	sp, #8
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d1a:	b590      	push	{r4, r7, lr}
 8004d1c:	b085      	sub	sp, #20
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	000c      	movs	r4, r1
 8004d24:	0010      	movs	r0, r2
 8004d26:	0019      	movs	r1, r3
 8004d28:	1cfb      	adds	r3, r7, #3
 8004d2a:	1c22      	adds	r2, r4, #0
 8004d2c:	701a      	strb	r2, [r3, #0]
 8004d2e:	003b      	movs	r3, r7
 8004d30:	1c02      	adds	r2, r0, #0
 8004d32:	801a      	strh	r2, [r3, #0]
 8004d34:	1cbb      	adds	r3, r7, #2
 8004d36:	1c0a      	adds	r2, r1, #0
 8004d38:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004d3a:	230b      	movs	r3, #11
 8004d3c:	18fb      	adds	r3, r7, r3
 8004d3e:	2200      	movs	r2, #0
 8004d40:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d42:	1cfb      	adds	r3, r7, #3
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	b25b      	sxtb	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	da0f      	bge.n	8004d6c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d4c:	1cfb      	adds	r3, r7, #3
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2207      	movs	r2, #7
 8004d52:	4013      	ands	r3, r2
 8004d54:	1c5a      	adds	r2, r3, #1
 8004d56:	0013      	movs	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	189b      	adds	r3, r3, r2
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	18d3      	adds	r3, r2, r3
 8004d62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2201      	movs	r2, #1
 8004d68:	705a      	strb	r2, [r3, #1]
 8004d6a:	e00f      	b.n	8004d8c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d6c:	1cfb      	adds	r3, r7, #3
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2207      	movs	r2, #7
 8004d72:	401a      	ands	r2, r3
 8004d74:	0013      	movs	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	189b      	adds	r3, r3, r2
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	3369      	adds	r3, #105	; 0x69
 8004d7e:	33ff      	adds	r3, #255	; 0xff
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	18d3      	adds	r3, r2, r3
 8004d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d8c:	1cfb      	adds	r3, r7, #3
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2207      	movs	r2, #7
 8004d92:	4013      	ands	r3, r2
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004d9a:	003b      	movs	r3, r7
 8004d9c:	881a      	ldrh	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	1cba      	adds	r2, r7, #2
 8004da6:	7812      	ldrb	r2, [r2, #0]
 8004da8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	785b      	ldrb	r3, [r3, #1]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d004      	beq.n	8004dbc <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004dbc:	1cbb      	adds	r3, r7, #2
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d102      	bne.n	8004dca <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	23aa      	movs	r3, #170	; 0xaa
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	5cd3      	ldrb	r3, [r2, r3]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d101      	bne.n	8004dda <HAL_PCD_EP_Open+0xc0>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	e013      	b.n	8004e02 <HAL_PCD_EP_Open+0xe8>
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	23aa      	movs	r3, #170	; 0xaa
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	2101      	movs	r1, #1
 8004de2:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	0011      	movs	r1, r2
 8004dec:	0018      	movs	r0, r3
 8004dee:	f004 fb29 	bl	8009444 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	23aa      	movs	r3, #170	; 0xaa
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	2100      	movs	r1, #0
 8004dfa:	54d1      	strb	r1, [r2, r3]

  return ret;
 8004dfc:	230b      	movs	r3, #11
 8004dfe:	18fb      	adds	r3, r7, r3
 8004e00:	781b      	ldrb	r3, [r3, #0]
}
 8004e02:	0018      	movs	r0, r3
 8004e04:	46bd      	mov	sp, r7
 8004e06:	b005      	add	sp, #20
 8004e08:	bd90      	pop	{r4, r7, pc}

08004e0a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b084      	sub	sp, #16
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	000a      	movs	r2, r1
 8004e14:	1cfb      	adds	r3, r7, #3
 8004e16:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e18:	1cfb      	adds	r3, r7, #3
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	b25b      	sxtb	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	da0f      	bge.n	8004e42 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e22:	1cfb      	adds	r3, r7, #3
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2207      	movs	r2, #7
 8004e28:	4013      	ands	r3, r2
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	0013      	movs	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	189b      	adds	r3, r3, r2
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	18d3      	adds	r3, r2, r3
 8004e38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	705a      	strb	r2, [r3, #1]
 8004e40:	e00f      	b.n	8004e62 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e42:	1cfb      	adds	r3, r7, #3
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2207      	movs	r2, #7
 8004e48:	401a      	ands	r2, r3
 8004e4a:	0013      	movs	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	189b      	adds	r3, r3, r2
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	3369      	adds	r3, #105	; 0x69
 8004e54:	33ff      	adds	r3, #255	; 0xff
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	18d3      	adds	r3, r2, r3
 8004e5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004e62:	1cfb      	adds	r3, r7, #3
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2207      	movs	r2, #7
 8004e68:	4013      	ands	r3, r2
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	23aa      	movs	r3, #170	; 0xaa
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	5cd3      	ldrb	r3, [r2, r3]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_PCD_EP_Close+0x76>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e011      	b.n	8004ea4 <HAL_PCD_EP_Close+0x9a>
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	23aa      	movs	r3, #170	; 0xaa
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	2101      	movs	r1, #1
 8004e88:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	0011      	movs	r1, r2
 8004e92:	0018      	movs	r0, r3
 8004e94:	f004 fe4a 	bl	8009b2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	23aa      	movs	r3, #170	; 0xaa
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	b004      	add	sp, #16
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	607a      	str	r2, [r7, #4]
 8004eb6:	603b      	str	r3, [r7, #0]
 8004eb8:	200b      	movs	r0, #11
 8004eba:	183b      	adds	r3, r7, r0
 8004ebc:	1c0a      	adds	r2, r1, #0
 8004ebe:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ec0:	0001      	movs	r1, r0
 8004ec2:	187b      	adds	r3, r7, r1
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	2207      	movs	r2, #7
 8004ec8:	401a      	ands	r2, r3
 8004eca:	0013      	movs	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	189b      	adds	r3, r3, r2
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	3369      	adds	r3, #105	; 0x69
 8004ed4:	33ff      	adds	r3, #255	; 0xff
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	18d3      	adds	r3, r2, r3
 8004eda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	2200      	movs	r2, #0
 8004eec:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ef4:	187b      	adds	r3, r7, r1
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2207      	movs	r2, #7
 8004efa:	4013      	ands	r3, r2
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f02:	187b      	adds	r3, r7, r1
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2207      	movs	r2, #7
 8004f08:	4013      	ands	r3, r2
 8004f0a:	d107      	bne.n	8004f1c <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	0011      	movs	r1, r2
 8004f14:	0018      	movs	r0, r3
 8004f16:	f004 ffc9 	bl	8009eac <USB_EPStartXfer>
 8004f1a:	e006      	b.n	8004f2a <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	0011      	movs	r1, r2
 8004f24:	0018      	movs	r0, r3
 8004f26:	f004 ffc1 	bl	8009eac <USB_EPStartXfer>
  }

  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	0018      	movs	r0, r3
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	b006      	add	sp, #24
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	000a      	movs	r2, r1
 8004f3e:	1cfb      	adds	r3, r7, #3
 8004f40:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f42:	1cfb      	adds	r3, r7, #3
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	2207      	movs	r2, #7
 8004f48:	401a      	ands	r2, r3
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	23c2      	movs	r3, #194	; 0xc2
 8004f4e:	0059      	lsls	r1, r3, #1
 8004f50:	0013      	movs	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	189b      	adds	r3, r3, r2
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	18c3      	adds	r3, r0, r3
 8004f5a:	185b      	adds	r3, r3, r1
 8004f5c:	681b      	ldr	r3, [r3, #0]
}
 8004f5e:	0018      	movs	r0, r3
 8004f60:	46bd      	mov	sp, r7
 8004f62:	b002      	add	sp, #8
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b086      	sub	sp, #24
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	603b      	str	r3, [r7, #0]
 8004f72:	200b      	movs	r0, #11
 8004f74:	183b      	adds	r3, r7, r0
 8004f76:	1c0a      	adds	r2, r1, #0
 8004f78:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f7a:	183b      	adds	r3, r7, r0
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	2207      	movs	r2, #7
 8004f80:	4013      	ands	r3, r2
 8004f82:	1c5a      	adds	r2, r3, #1
 8004f84:	0013      	movs	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	189b      	adds	r3, r3, r2
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	18d3      	adds	r3, r2, r3
 8004f90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2224      	movs	r2, #36	; 0x24
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fb8:	183b      	adds	r3, r7, r0
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2207      	movs	r2, #7
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004fc6:	183b      	adds	r3, r7, r0
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2207      	movs	r2, #7
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d107      	bne.n	8004fe0 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	0011      	movs	r1, r2
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f004 ff67 	bl	8009eac <USB_EPStartXfer>
 8004fde:	e006      	b.n	8004fee <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	0011      	movs	r1, r2
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f004 ff5f 	bl	8009eac <USB_EPStartXfer>
  }

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	b006      	add	sp, #24
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	000a      	movs	r2, r1
 8005002:	1cfb      	adds	r3, r7, #3
 8005004:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005006:	1cfb      	adds	r3, r7, #3
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2207      	movs	r2, #7
 800500c:	401a      	ands	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	429a      	cmp	r2, r3
 8005014:	d901      	bls.n	800501a <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e046      	b.n	80050a8 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800501a:	1cfb      	adds	r3, r7, #3
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	b25b      	sxtb	r3, r3
 8005020:	2b00      	cmp	r3, #0
 8005022:	da0f      	bge.n	8005044 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005024:	1cfb      	adds	r3, r7, #3
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2207      	movs	r2, #7
 800502a:	4013      	ands	r3, r2
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	0013      	movs	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	189b      	adds	r3, r3, r2
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	18d3      	adds	r3, r2, r3
 800503a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2201      	movs	r2, #1
 8005040:	705a      	strb	r2, [r3, #1]
 8005042:	e00d      	b.n	8005060 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005044:	1cfb      	adds	r3, r7, #3
 8005046:	781a      	ldrb	r2, [r3, #0]
 8005048:	0013      	movs	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	189b      	adds	r3, r3, r2
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	3369      	adds	r3, #105	; 0x69
 8005052:	33ff      	adds	r3, #255	; 0xff
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	18d3      	adds	r3, r2, r3
 8005058:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2201      	movs	r2, #1
 8005064:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005066:	1cfb      	adds	r3, r7, #3
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	2207      	movs	r2, #7
 800506c:	4013      	ands	r3, r2
 800506e:	b2da      	uxtb	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	23aa      	movs	r3, #170	; 0xaa
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	5cd3      	ldrb	r3, [r2, r3]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d101      	bne.n	8005084 <HAL_PCD_EP_SetStall+0x8c>
 8005080:	2302      	movs	r3, #2
 8005082:	e011      	b.n	80050a8 <HAL_PCD_EP_SetStall+0xb0>
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	23aa      	movs	r3, #170	; 0xaa
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	2101      	movs	r1, #1
 800508c:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	0011      	movs	r1, r2
 8005096:	0018      	movs	r0, r3
 8005098:	f005 ffc2 	bl	800b020 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	23aa      	movs	r3, #170	; 0xaa
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	2100      	movs	r1, #0
 80050a4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	0018      	movs	r0, r3
 80050aa:	46bd      	mov	sp, r7
 80050ac:	b004      	add	sp, #16
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	000a      	movs	r2, r1
 80050ba:	1cfb      	adds	r3, r7, #3
 80050bc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80050be:	1cfb      	adds	r3, r7, #3
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	220f      	movs	r2, #15
 80050c4:	401a      	ands	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d901      	bls.n	80050d2 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e048      	b.n	8005164 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050d2:	1cfb      	adds	r3, r7, #3
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	b25b      	sxtb	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	da0f      	bge.n	80050fc <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050dc:	1cfb      	adds	r3, r7, #3
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	2207      	movs	r2, #7
 80050e2:	4013      	ands	r3, r2
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	0013      	movs	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	189b      	adds	r3, r3, r2
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	18d3      	adds	r3, r2, r3
 80050f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2201      	movs	r2, #1
 80050f8:	705a      	strb	r2, [r3, #1]
 80050fa:	e00f      	b.n	800511c <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050fc:	1cfb      	adds	r3, r7, #3
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2207      	movs	r2, #7
 8005102:	401a      	ands	r2, r3
 8005104:	0013      	movs	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	189b      	adds	r3, r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	3369      	adds	r3, #105	; 0x69
 800510e:	33ff      	adds	r3, #255	; 0xff
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	18d3      	adds	r3, r2, r3
 8005114:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005122:	1cfb      	adds	r3, r7, #3
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	2207      	movs	r2, #7
 8005128:	4013      	ands	r3, r2
 800512a:	b2da      	uxtb	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	23aa      	movs	r3, #170	; 0xaa
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	5cd3      	ldrb	r3, [r2, r3]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d101      	bne.n	8005140 <HAL_PCD_EP_ClrStall+0x90>
 800513c:	2302      	movs	r3, #2
 800513e:	e011      	b.n	8005164 <HAL_PCD_EP_ClrStall+0xb4>
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	23aa      	movs	r3, #170	; 0xaa
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	2101      	movs	r1, #1
 8005148:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	0011      	movs	r1, r2
 8005152:	0018      	movs	r0, r3
 8005154:	f005 ffb4 	bl	800b0c0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	23aa      	movs	r3, #170	; 0xaa
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	2100      	movs	r1, #0
 8005160:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	0018      	movs	r0, r3
 8005166:	46bd      	mov	sp, r7
 8005168:	b004      	add	sp, #16
 800516a:	bd80      	pop	{r7, pc}

0800516c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800516c:	b5b0      	push	{r4, r5, r7, lr}
 800516e:	b096      	sub	sp, #88	; 0x58
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005174:	f000 fbd8 	bl	8005928 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	2056      	movs	r0, #86	; 0x56
 800517e:	183b      	adds	r3, r7, r0
 8005180:	2144      	movs	r1, #68	; 0x44
 8005182:	5a52      	ldrh	r2, [r2, r1]
 8005184:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005186:	183b      	adds	r3, r7, r0
 8005188:	881b      	ldrh	r3, [r3, #0]
 800518a:	b2da      	uxtb	r2, r3
 800518c:	2455      	movs	r4, #85	; 0x55
 800518e:	193b      	adds	r3, r7, r4
 8005190:	210f      	movs	r1, #15
 8005192:	400a      	ands	r2, r1
 8005194:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8005196:	193b      	adds	r3, r7, r4
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d000      	beq.n	80051a0 <PCD_EP_ISR_Handler+0x34>
 800519e:	e179      	b.n	8005494 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80051a0:	183b      	adds	r3, r7, r0
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	2210      	movs	r2, #16
 80051a6:	4013      	ands	r3, r2
 80051a8:	d154      	bne.n	8005254 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	881b      	ldrh	r3, [r3, #0]
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	200e      	movs	r0, #14
 80051b4:	183b      	adds	r3, r7, r0
 80051b6:	49af      	ldr	r1, [pc, #700]	; (8005474 <PCD_EP_ISR_Handler+0x308>)
 80051b8:	400a      	ands	r2, r1
 80051ba:	801a      	strh	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	183a      	adds	r2, r7, r0
 80051c2:	8812      	ldrh	r2, [r2, #0]
 80051c4:	49ac      	ldr	r1, [pc, #688]	; (8005478 <PCD_EP_ISR_Handler+0x30c>)
 80051c6:	430a      	orrs	r2, r1
 80051c8:	b292      	uxth	r2, r2
 80051ca:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3328      	adds	r3, #40	; 0x28
 80051d0:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2250      	movs	r2, #80	; 0x50
 80051d8:	5a9b      	ldrh	r3, [r3, r2]
 80051da:	b29b      	uxth	r3, r3
 80051dc:	001a      	movs	r2, r3
 80051de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	18d2      	adds	r2, r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	18d3      	adds	r3, r2, r3
 80051ec:	4aa3      	ldr	r2, [pc, #652]	; (800547c <PCD_EP_ISR_Handler+0x310>)
 80051ee:	4694      	mov	ip, r2
 80051f0:	4463      	add	r3, ip
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	059b      	lsls	r3, r3, #22
 80051f6:	0d9a      	lsrs	r2, r3, #22
 80051f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051fa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80051fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051fe:	695a      	ldr	r2, [r3, #20]
 8005200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	18d2      	adds	r2, r2, r3
 8005206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005208:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2100      	movs	r1, #0
 800520e:	0018      	movs	r0, r3
 8005210:	f008 f888 	bl	800d324 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2224      	movs	r2, #36	; 0x24
 8005218:	5c9b      	ldrb	r3, [r3, r2]
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <PCD_EP_ISR_Handler+0xb8>
 8005220:	f000 fb82 	bl	8005928 <PCD_EP_ISR_Handler+0x7bc>
 8005224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <PCD_EP_ISR_Handler+0xc4>
 800522c:	f000 fb7c 	bl	8005928 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2224      	movs	r2, #36	; 0x24
 8005234:	5c9b      	ldrb	r3, [r3, r2]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2280      	movs	r2, #128	; 0x80
 800523a:	4252      	negs	r2, r2
 800523c:	4313      	orrs	r3, r2
 800523e:	b2da      	uxtb	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	b291      	uxth	r1, r2
 8005246:	224c      	movs	r2, #76	; 0x4c
 8005248:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2224      	movs	r2, #36	; 0x24
 800524e:	2100      	movs	r1, #0
 8005250:	5499      	strb	r1, [r3, r2]
 8005252:	e369      	b.n	8005928 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3369      	adds	r3, #105	; 0x69
 8005258:	33ff      	adds	r3, #255	; 0xff
 800525a:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	2152      	movs	r1, #82	; 0x52
 8005262:	187b      	adds	r3, r7, r1
 8005264:	8812      	ldrh	r2, [r2, #0]
 8005266:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005268:	187b      	adds	r3, r7, r1
 800526a:	881a      	ldrh	r2, [r3, #0]
 800526c:	2380      	movs	r3, #128	; 0x80
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	4013      	ands	r3, r2
 8005272:	d037      	beq.n	80052e4 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2250      	movs	r2, #80	; 0x50
 800527a:	5a9b      	ldrh	r3, [r3, r2]
 800527c:	b29b      	uxth	r3, r3
 800527e:	001a      	movs	r2, r3
 8005280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	18d2      	adds	r2, r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	18d3      	adds	r3, r2, r3
 800528e:	4a7c      	ldr	r2, [pc, #496]	; (8005480 <PCD_EP_ISR_Handler+0x314>)
 8005290:	4694      	mov	ip, r2
 8005292:	4463      	add	r3, ip
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	059b      	lsls	r3, r3, #22
 8005298:	0d9a      	lsrs	r2, r3, #22
 800529a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800529c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6818      	ldr	r0, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	22ac      	movs	r2, #172	; 0xac
 80052a6:	0092      	lsls	r2, r2, #2
 80052a8:	1899      	adds	r1, r3, r2
 80052aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ac:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80052ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	f006 f832 	bl	800b31c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	b29a      	uxth	r2, r3
 80052c0:	2010      	movs	r0, #16
 80052c2:	183b      	adds	r3, r7, r0
 80052c4:	496f      	ldr	r1, [pc, #444]	; (8005484 <PCD_EP_ISR_Handler+0x318>)
 80052c6:	400a      	ands	r2, r1
 80052c8:	801a      	strh	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	183a      	adds	r2, r7, r0
 80052d0:	8812      	ldrh	r2, [r2, #0]
 80052d2:	2180      	movs	r1, #128	; 0x80
 80052d4:	430a      	orrs	r2, r1
 80052d6:	b292      	uxth	r2, r2
 80052d8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	0018      	movs	r0, r3
 80052de:	f007 ffeb 	bl	800d2b8 <HAL_PCD_SetupStageCallback>
 80052e2:	e321      	b.n	8005928 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80052e4:	2352      	movs	r3, #82	; 0x52
 80052e6:	18fb      	adds	r3, r7, r3
 80052e8:	2200      	movs	r2, #0
 80052ea:	5e9b      	ldrsh	r3, [r3, r2]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	db00      	blt.n	80052f2 <PCD_EP_ISR_Handler+0x186>
 80052f0:	e31a      	b.n	8005928 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	881b      	ldrh	r3, [r3, #0]
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	201e      	movs	r0, #30
 80052fc:	183b      	adds	r3, r7, r0
 80052fe:	4961      	ldr	r1, [pc, #388]	; (8005484 <PCD_EP_ISR_Handler+0x318>)
 8005300:	400a      	ands	r2, r1
 8005302:	801a      	strh	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	183a      	adds	r2, r7, r0
 800530a:	8812      	ldrh	r2, [r2, #0]
 800530c:	2180      	movs	r1, #128	; 0x80
 800530e:	430a      	orrs	r2, r1
 8005310:	b292      	uxth	r2, r2
 8005312:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2250      	movs	r2, #80	; 0x50
 800531a:	5a9b      	ldrh	r3, [r3, r2]
 800531c:	b29b      	uxth	r3, r3
 800531e:	001a      	movs	r2, r3
 8005320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	18d2      	adds	r2, r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	18d3      	adds	r3, r2, r3
 800532e:	4a54      	ldr	r2, [pc, #336]	; (8005480 <PCD_EP_ISR_Handler+0x314>)
 8005330:	4694      	mov	ip, r2
 8005332:	4463      	add	r3, ip
 8005334:	881b      	ldrh	r3, [r3, #0]
 8005336:	059b      	lsls	r3, r3, #22
 8005338:	0d9a      	lsrs	r2, r3, #22
 800533a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800533c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800533e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d01a      	beq.n	800537c <PCD_EP_ISR_Handler+0x210>
 8005346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d016      	beq.n	800537c <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005354:	6959      	ldr	r1, [r3, #20]
 8005356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005358:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800535a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800535c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800535e:	b29b      	uxth	r3, r3
 8005360:	f005 ffdc 	bl	800b31c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005366:	695a      	ldr	r2, [r3, #20]
 8005368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800536a:	69db      	ldr	r3, [r3, #28]
 800536c:	18d2      	adds	r2, r2, r3
 800536e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005370:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2100      	movs	r1, #0
 8005376:	0018      	movs	r0, r3
 8005378:	f007 ffb3 	bl	800d2e2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	b29b      	uxth	r3, r3
 8005384:	001a      	movs	r2, r3
 8005386:	2380      	movs	r3, #128	; 0x80
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	4013      	ands	r3, r2
 800538c:	d000      	beq.n	8005390 <PCD_EP_ISR_Handler+0x224>
 800538e:	e2cb      	b.n	8005928 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	61bb      	str	r3, [r7, #24]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2250      	movs	r2, #80	; 0x50
 800539c:	5a9b      	ldrh	r3, [r3, r2]
 800539e:	b29b      	uxth	r3, r3
 80053a0:	001a      	movs	r2, r3
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	189b      	adds	r3, r3, r2
 80053a6:	61bb      	str	r3, [r7, #24]
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	4a35      	ldr	r2, [pc, #212]	; (8005480 <PCD_EP_ISR_Handler+0x314>)
 80053ac:	4694      	mov	ip, r2
 80053ae:	4463      	add	r3, ip
 80053b0:	617b      	str	r3, [r7, #20]
 80053b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d110      	bne.n	80053dc <PCD_EP_ISR_Handler+0x270>
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	881b      	ldrh	r3, [r3, #0]
 80053be:	b29b      	uxth	r3, r3
 80053c0:	4a31      	ldr	r2, [pc, #196]	; (8005488 <PCD_EP_ISR_Handler+0x31c>)
 80053c2:	4013      	ands	r3, r2
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	801a      	strh	r2, [r3, #0]
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	4a29      	ldr	r2, [pc, #164]	; (8005478 <PCD_EP_ISR_Handler+0x30c>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	801a      	strh	r2, [r3, #0]
 80053da:	e02b      	b.n	8005434 <PCD_EP_ISR_Handler+0x2c8>
 80053dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	2b3e      	cmp	r3, #62	; 0x3e
 80053e2:	d812      	bhi.n	800540a <PCD_EP_ISR_Handler+0x29e>
 80053e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	085b      	lsrs	r3, r3, #1
 80053ea:	647b      	str	r3, [r7, #68]	; 0x44
 80053ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	2201      	movs	r2, #1
 80053f2:	4013      	ands	r3, r2
 80053f4:	d002      	beq.n	80053fc <PCD_EP_ISR_Handler+0x290>
 80053f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f8:	3301      	adds	r3, #1
 80053fa:	647b      	str	r3, [r7, #68]	; 0x44
 80053fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053fe:	b29b      	uxth	r3, r3
 8005400:	029b      	lsls	r3, r3, #10
 8005402:	b29a      	uxth	r2, r3
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	801a      	strh	r2, [r3, #0]
 8005408:	e014      	b.n	8005434 <PCD_EP_ISR_Handler+0x2c8>
 800540a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	095b      	lsrs	r3, r3, #5
 8005410:	647b      	str	r3, [r7, #68]	; 0x44
 8005412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	221f      	movs	r2, #31
 8005418:	4013      	ands	r3, r2
 800541a:	d102      	bne.n	8005422 <PCD_EP_ISR_Handler+0x2b6>
 800541c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800541e:	3b01      	subs	r3, #1
 8005420:	647b      	str	r3, [r7, #68]	; 0x44
 8005422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005424:	b29b      	uxth	r3, r3
 8005426:	029b      	lsls	r3, r3, #10
 8005428:	b29b      	uxth	r3, r3
 800542a:	4a13      	ldr	r2, [pc, #76]	; (8005478 <PCD_EP_ISR_Handler+0x30c>)
 800542c:	4313      	orrs	r3, r2
 800542e:	b29a      	uxth	r2, r3
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	b29a      	uxth	r2, r3
 800543c:	2012      	movs	r0, #18
 800543e:	183b      	adds	r3, r7, r0
 8005440:	4912      	ldr	r1, [pc, #72]	; (800548c <PCD_EP_ISR_Handler+0x320>)
 8005442:	400a      	ands	r2, r1
 8005444:	801a      	strh	r2, [r3, #0]
 8005446:	183b      	adds	r3, r7, r0
 8005448:	183a      	adds	r2, r7, r0
 800544a:	8812      	ldrh	r2, [r2, #0]
 800544c:	2180      	movs	r1, #128	; 0x80
 800544e:	0149      	lsls	r1, r1, #5
 8005450:	404a      	eors	r2, r1
 8005452:	801a      	strh	r2, [r3, #0]
 8005454:	183b      	adds	r3, r7, r0
 8005456:	183a      	adds	r2, r7, r0
 8005458:	8812      	ldrh	r2, [r2, #0]
 800545a:	2180      	movs	r1, #128	; 0x80
 800545c:	0189      	lsls	r1, r1, #6
 800545e:	404a      	eors	r2, r1
 8005460:	801a      	strh	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	183a      	adds	r2, r7, r0
 8005468:	8812      	ldrh	r2, [r2, #0]
 800546a:	4909      	ldr	r1, [pc, #36]	; (8005490 <PCD_EP_ISR_Handler+0x324>)
 800546c:	430a      	orrs	r2, r1
 800546e:	b292      	uxth	r2, r2
 8005470:	801a      	strh	r2, [r3, #0]
 8005472:	e259      	b.n	8005928 <PCD_EP_ISR_Handler+0x7bc>
 8005474:	ffff8f0f 	.word	0xffff8f0f
 8005478:	ffff8000 	.word	0xffff8000
 800547c:	00000402 	.word	0x00000402
 8005480:	00000406 	.word	0x00000406
 8005484:	00000f8f 	.word	0x00000f8f
 8005488:	ffff83ff 	.word	0xffff83ff
 800548c:	ffffbf8f 	.word	0xffffbf8f
 8005490:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	001a      	movs	r2, r3
 800549a:	2055      	movs	r0, #85	; 0x55
 800549c:	183b      	adds	r3, r7, r0
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	18d2      	adds	r2, r2, r3
 80054a4:	2152      	movs	r1, #82	; 0x52
 80054a6:	187b      	adds	r3, r7, r1
 80054a8:	8812      	ldrh	r2, [r2, #0]
 80054aa:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80054ac:	187b      	adds	r3, r7, r1
 80054ae:	2200      	movs	r2, #0
 80054b0:	5e9b      	ldrsh	r3, [r3, r2]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	db00      	blt.n	80054b8 <PCD_EP_ISR_Handler+0x34c>
 80054b6:	e0fa      	b.n	80056ae <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	001a      	movs	r2, r3
 80054be:	183b      	adds	r3, r7, r0
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	18d3      	adds	r3, r2, r3
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	2450      	movs	r4, #80	; 0x50
 80054cc:	193b      	adds	r3, r7, r4
 80054ce:	49cf      	ldr	r1, [pc, #828]	; (800580c <PCD_EP_ISR_Handler+0x6a0>)
 80054d0:	400a      	ands	r2, r1
 80054d2:	801a      	strh	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	001a      	movs	r2, r3
 80054da:	183b      	adds	r3, r7, r0
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	18d3      	adds	r3, r2, r3
 80054e2:	193a      	adds	r2, r7, r4
 80054e4:	8812      	ldrh	r2, [r2, #0]
 80054e6:	2180      	movs	r1, #128	; 0x80
 80054e8:	430a      	orrs	r2, r1
 80054ea:	b292      	uxth	r2, r2
 80054ec:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80054ee:	183b      	adds	r3, r7, r0
 80054f0:	781a      	ldrb	r2, [r3, #0]
 80054f2:	0013      	movs	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	189b      	adds	r3, r3, r2
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	3369      	adds	r3, #105	; 0x69
 80054fc:	33ff      	adds	r3, #255	; 0xff
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	18d3      	adds	r3, r2, r3
 8005502:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005506:	7b1b      	ldrb	r3, [r3, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d125      	bne.n	8005558 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2250      	movs	r2, #80	; 0x50
 8005512:	5a9b      	ldrh	r3, [r3, r2]
 8005514:	b29b      	uxth	r3, r3
 8005516:	001a      	movs	r2, r3
 8005518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	18d2      	adds	r2, r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	18d3      	adds	r3, r2, r3
 8005526:	4aba      	ldr	r2, [pc, #744]	; (8005810 <PCD_EP_ISR_Handler+0x6a4>)
 8005528:	4694      	mov	ip, r2
 800552a:	4463      	add	r3, ip
 800552c:	881a      	ldrh	r2, [r3, #0]
 800552e:	2448      	movs	r4, #72	; 0x48
 8005530:	193b      	adds	r3, r7, r4
 8005532:	0592      	lsls	r2, r2, #22
 8005534:	0d92      	lsrs	r2, r2, #22
 8005536:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8005538:	193b      	adds	r3, r7, r4
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d100      	bne.n	8005542 <PCD_EP_ISR_Handler+0x3d6>
 8005540:	e08d      	b.n	800565e <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005548:	6959      	ldr	r1, [r3, #20]
 800554a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800554c:	88da      	ldrh	r2, [r3, #6]
 800554e:	193b      	adds	r3, r7, r4
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	f005 fee3 	bl	800b31c <USB_ReadPMA>
 8005556:	e082      	b.n	800565e <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800555a:	78db      	ldrb	r3, [r3, #3]
 800555c:	2b02      	cmp	r3, #2
 800555e:	d10c      	bne.n	800557a <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005560:	2348      	movs	r3, #72	; 0x48
 8005562:	18fc      	adds	r4, r7, r3
 8005564:	2352      	movs	r3, #82	; 0x52
 8005566:	18fb      	adds	r3, r7, r3
 8005568:	881a      	ldrh	r2, [r3, #0]
 800556a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	0018      	movs	r0, r3
 8005570:	f000 f9ee 	bl	8005950 <HAL_PCD_EP_DB_Receive>
 8005574:	0003      	movs	r3, r0
 8005576:	8023      	strh	r3, [r4, #0]
 8005578:	e071      	b.n	800565e <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	001a      	movs	r2, r3
 8005580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	18d3      	adds	r3, r2, r3
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	b29a      	uxth	r2, r3
 800558c:	204a      	movs	r0, #74	; 0x4a
 800558e:	183b      	adds	r3, r7, r0
 8005590:	49a0      	ldr	r1, [pc, #640]	; (8005814 <PCD_EP_ISR_Handler+0x6a8>)
 8005592:	400a      	ands	r2, r1
 8005594:	801a      	strh	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	001a      	movs	r2, r3
 800559c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	18d3      	adds	r3, r2, r3
 80055a4:	183a      	adds	r2, r7, r0
 80055a6:	8812      	ldrh	r2, [r2, #0]
 80055a8:	499b      	ldr	r1, [pc, #620]	; (8005818 <PCD_EP_ISR_Handler+0x6ac>)
 80055aa:	430a      	orrs	r2, r1
 80055ac:	b292      	uxth	r2, r2
 80055ae:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	001a      	movs	r2, r3
 80055b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	18d3      	adds	r3, r2, r3
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	001a      	movs	r2, r3
 80055c4:	2380      	movs	r3, #128	; 0x80
 80055c6:	01db      	lsls	r3, r3, #7
 80055c8:	4013      	ands	r3, r2
 80055ca:	d024      	beq.n	8005616 <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2250      	movs	r2, #80	; 0x50
 80055d2:	5a9b      	ldrh	r3, [r3, r2]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	001a      	movs	r2, r3
 80055d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	00db      	lsls	r3, r3, #3
 80055de:	18d2      	adds	r2, r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	18d3      	adds	r3, r2, r3
 80055e6:	4a8d      	ldr	r2, [pc, #564]	; (800581c <PCD_EP_ISR_Handler+0x6b0>)
 80055e8:	4694      	mov	ip, r2
 80055ea:	4463      	add	r3, ip
 80055ec:	881a      	ldrh	r2, [r3, #0]
 80055ee:	2448      	movs	r4, #72	; 0x48
 80055f0:	193b      	adds	r3, r7, r4
 80055f2:	0592      	lsls	r2, r2, #22
 80055f4:	0d92      	lsrs	r2, r2, #22
 80055f6:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80055f8:	193b      	adds	r3, r7, r4
 80055fa:	881b      	ldrh	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d02e      	beq.n	800565e <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6818      	ldr	r0, [r3, #0]
 8005604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005606:	6959      	ldr	r1, [r3, #20]
 8005608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560a:	891a      	ldrh	r2, [r3, #8]
 800560c:	193b      	adds	r3, r7, r4
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	f005 fe84 	bl	800b31c <USB_ReadPMA>
 8005614:	e023      	b.n	800565e <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2250      	movs	r2, #80	; 0x50
 800561c:	5a9b      	ldrh	r3, [r3, r2]
 800561e:	b29b      	uxth	r3, r3
 8005620:	001a      	movs	r2, r3
 8005622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	18d2      	adds	r2, r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	18d3      	adds	r3, r2, r3
 8005630:	4a77      	ldr	r2, [pc, #476]	; (8005810 <PCD_EP_ISR_Handler+0x6a4>)
 8005632:	4694      	mov	ip, r2
 8005634:	4463      	add	r3, ip
 8005636:	881a      	ldrh	r2, [r3, #0]
 8005638:	2448      	movs	r4, #72	; 0x48
 800563a:	193b      	adds	r3, r7, r4
 800563c:	0592      	lsls	r2, r2, #22
 800563e:	0d92      	lsrs	r2, r2, #22
 8005640:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8005642:	193b      	adds	r3, r7, r4
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d009      	beq.n	800565e <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6818      	ldr	r0, [r3, #0]
 800564e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005650:	6959      	ldr	r1, [r3, #20]
 8005652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005654:	895a      	ldrh	r2, [r3, #10]
 8005656:	193b      	adds	r3, r7, r4
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	f005 fe5f 	bl	800b31c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800565e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005660:	69da      	ldr	r2, [r3, #28]
 8005662:	2148      	movs	r1, #72	; 0x48
 8005664:	187b      	adds	r3, r7, r1
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	18d2      	adds	r2, r2, r3
 800566a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800566c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800566e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005670:	695a      	ldr	r2, [r3, #20]
 8005672:	187b      	adds	r3, r7, r1
 8005674:	881b      	ldrh	r3, [r3, #0]
 8005676:	18d2      	adds	r2, r2, r3
 8005678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800567a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800567c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d005      	beq.n	8005690 <PCD_EP_ISR_Handler+0x524>
 8005684:	187b      	adds	r3, r7, r1
 8005686:	881a      	ldrh	r2, [r3, #0]
 8005688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	429a      	cmp	r2, r3
 800568e:	d207      	bcs.n	80056a0 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005692:	781a      	ldrb	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	0011      	movs	r1, r2
 8005698:	0018      	movs	r0, r3
 800569a:	f007 fe22 	bl	800d2e2 <HAL_PCD_DataOutStageCallback>
 800569e:	e006      	b.n	80056ae <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056a6:	0011      	movs	r1, r2
 80056a8:	0018      	movs	r0, r3
 80056aa:	f004 fbff 	bl	8009eac <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80056ae:	2452      	movs	r4, #82	; 0x52
 80056b0:	193b      	adds	r3, r7, r4
 80056b2:	881b      	ldrh	r3, [r3, #0]
 80056b4:	2280      	movs	r2, #128	; 0x80
 80056b6:	4013      	ands	r3, r2
 80056b8:	d100      	bne.n	80056bc <PCD_EP_ISR_Handler+0x550>
 80056ba:	e135      	b.n	8005928 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 80056bc:	2055      	movs	r0, #85	; 0x55
 80056be:	183b      	adds	r3, r7, r0
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	1c5a      	adds	r2, r3, #1
 80056c4:	0013      	movs	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	189b      	adds	r3, r3, r2
 80056ca:	00db      	lsls	r3, r3, #3
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	18d3      	adds	r3, r2, r3
 80056d0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	001a      	movs	r2, r3
 80056d8:	183b      	adds	r3, r7, r0
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	18d3      	adds	r3, r2, r3
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	2542      	movs	r5, #66	; 0x42
 80056e6:	197b      	adds	r3, r7, r5
 80056e8:	494d      	ldr	r1, [pc, #308]	; (8005820 <PCD_EP_ISR_Handler+0x6b4>)
 80056ea:	400a      	ands	r2, r1
 80056ec:	801a      	strh	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	001a      	movs	r2, r3
 80056f4:	183b      	adds	r3, r7, r0
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	18d3      	adds	r3, r2, r3
 80056fc:	197a      	adds	r2, r7, r5
 80056fe:	8812      	ldrh	r2, [r2, #0]
 8005700:	4948      	ldr	r1, [pc, #288]	; (8005824 <PCD_EP_ISR_Handler+0x6b8>)
 8005702:	430a      	orrs	r2, r1
 8005704:	b292      	uxth	r2, r2
 8005706:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 8005708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800570a:	78db      	ldrb	r3, [r3, #3]
 800570c:	2b02      	cmp	r3, #2
 800570e:	d100      	bne.n	8005712 <PCD_EP_ISR_Handler+0x5a6>
 8005710:	e0ad      	b.n	800586e <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 8005712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005714:	2200      	movs	r2, #0
 8005716:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005718:	193b      	adds	r3, r7, r4
 800571a:	881b      	ldrh	r3, [r3, #0]
 800571c:	2240      	movs	r2, #64	; 0x40
 800571e:	4013      	ands	r3, r2
 8005720:	d046      	beq.n	80057b0 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005724:	785b      	ldrb	r3, [r3, #1]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d125      	bne.n	8005776 <PCD_EP_ISR_Handler+0x60a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	627b      	str	r3, [r7, #36]	; 0x24
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2250      	movs	r2, #80	; 0x50
 8005736:	5a9b      	ldrh	r3, [r3, r2]
 8005738:	b29b      	uxth	r3, r3
 800573a:	001a      	movs	r2, r3
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	189b      	adds	r3, r3, r2
 8005740:	627b      	str	r3, [r7, #36]	; 0x24
 8005742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	00da      	lsls	r2, r3, #3
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	18d3      	adds	r3, r2, r3
 800574c:	4a33      	ldr	r2, [pc, #204]	; (800581c <PCD_EP_ISR_Handler+0x6b0>)
 800574e:	4694      	mov	ip, r2
 8005750:	4463      	add	r3, ip
 8005752:	623b      	str	r3, [r7, #32]
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	881b      	ldrh	r3, [r3, #0]
 8005758:	b29b      	uxth	r3, r3
 800575a:	4a33      	ldr	r2, [pc, #204]	; (8005828 <PCD_EP_ISR_Handler+0x6bc>)
 800575c:	4013      	ands	r3, r2
 800575e:	b29a      	uxth	r2, r3
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	801a      	strh	r2, [r3, #0]
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	b29b      	uxth	r3, r3
 800576a:	4a2e      	ldr	r2, [pc, #184]	; (8005824 <PCD_EP_ISR_Handler+0x6b8>)
 800576c:	4313      	orrs	r3, r2
 800576e:	b29a      	uxth	r2, r3
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	801a      	strh	r2, [r3, #0]
 8005774:	e073      	b.n	800585e <PCD_EP_ISR_Handler+0x6f2>
 8005776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005778:	785b      	ldrb	r3, [r3, #1]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d16f      	bne.n	800585e <PCD_EP_ISR_Handler+0x6f2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2250      	movs	r2, #80	; 0x50
 800578a:	5a9b      	ldrh	r3, [r3, r2]
 800578c:	b29b      	uxth	r3, r3
 800578e:	001a      	movs	r2, r3
 8005790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005792:	189b      	adds	r3, r3, r2
 8005794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	00da      	lsls	r2, r3, #3
 800579c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800579e:	18d3      	adds	r3, r2, r3
 80057a0:	4a1e      	ldr	r2, [pc, #120]	; (800581c <PCD_EP_ISR_Handler+0x6b0>)
 80057a2:	4694      	mov	ip, r2
 80057a4:	4463      	add	r3, ip
 80057a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80057a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057aa:	2200      	movs	r2, #0
 80057ac:	801a      	strh	r2, [r3, #0]
 80057ae:	e056      	b.n	800585e <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b8:	785b      	ldrb	r3, [r3, #1]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d136      	bne.n	800582c <PCD_EP_ISR_Handler+0x6c0>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	637b      	str	r3, [r7, #52]	; 0x34
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2250      	movs	r2, #80	; 0x50
 80057ca:	5a9b      	ldrh	r3, [r3, r2]
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	001a      	movs	r2, r3
 80057d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d2:	189b      	adds	r3, r3, r2
 80057d4:	637b      	str	r3, [r7, #52]	; 0x34
 80057d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	00da      	lsls	r2, r3, #3
 80057dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057de:	18d3      	adds	r3, r2, r3
 80057e0:	4a0b      	ldr	r2, [pc, #44]	; (8005810 <PCD_EP_ISR_Handler+0x6a4>)
 80057e2:	4694      	mov	ip, r2
 80057e4:	4463      	add	r3, ip
 80057e6:	633b      	str	r3, [r7, #48]	; 0x30
 80057e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	4a0e      	ldr	r2, [pc, #56]	; (8005828 <PCD_EP_ISR_Handler+0x6bc>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f6:	801a      	strh	r2, [r3, #0]
 80057f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fa:	881b      	ldrh	r3, [r3, #0]
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	4a09      	ldr	r2, [pc, #36]	; (8005824 <PCD_EP_ISR_Handler+0x6b8>)
 8005800:	4313      	orrs	r3, r2
 8005802:	b29a      	uxth	r2, r3
 8005804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005806:	801a      	strh	r2, [r3, #0]
 8005808:	e029      	b.n	800585e <PCD_EP_ISR_Handler+0x6f2>
 800580a:	46c0      	nop			; (mov r8, r8)
 800580c:	00000f8f 	.word	0x00000f8f
 8005810:	00000406 	.word	0x00000406
 8005814:	ffff8f8f 	.word	0xffff8f8f
 8005818:	ffff80c0 	.word	0xffff80c0
 800581c:	00000402 	.word	0x00000402
 8005820:	ffff8f0f 	.word	0xffff8f0f
 8005824:	ffff8000 	.word	0xffff8000
 8005828:	ffff83ff 	.word	0xffff83ff
 800582c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800582e:	785b      	ldrb	r3, [r3, #1]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d114      	bne.n	800585e <PCD_EP_ISR_Handler+0x6f2>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2250      	movs	r2, #80	; 0x50
 800583a:	5a9b      	ldrh	r3, [r3, r2]
 800583c:	b29b      	uxth	r3, r3
 800583e:	001a      	movs	r2, r3
 8005840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005842:	189b      	adds	r3, r3, r2
 8005844:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	00da      	lsls	r2, r3, #3
 800584c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800584e:	18d3      	adds	r3, r2, r3
 8005850:	4a3d      	ldr	r2, [pc, #244]	; (8005948 <PCD_EP_ISR_Handler+0x7dc>)
 8005852:	4694      	mov	ip, r2
 8005854:	4463      	add	r3, ip
 8005856:	63bb      	str	r3, [r7, #56]	; 0x38
 8005858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585a:	2200      	movs	r2, #0
 800585c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800585e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005860:	781a      	ldrb	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	0011      	movs	r1, r2
 8005866:	0018      	movs	r0, r3
 8005868:	f007 fd5c 	bl	800d324 <HAL_PCD_DataInStageCallback>
 800586c:	e05c      	b.n	8005928 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800586e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005870:	78db      	ldrb	r3, [r3, #3]
 8005872:	2b02      	cmp	r3, #2
 8005874:	d150      	bne.n	8005918 <PCD_EP_ISR_Handler+0x7ac>
 8005876:	2352      	movs	r3, #82	; 0x52
 8005878:	18fb      	adds	r3, r7, r3
 800587a:	881a      	ldrh	r2, [r3, #0]
 800587c:	2380      	movs	r3, #128	; 0x80
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	4013      	ands	r3, r2
 8005882:	d149      	bne.n	8005918 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2250      	movs	r2, #80	; 0x50
 800588a:	5a9b      	ldrh	r3, [r3, r2]
 800588c:	b29b      	uxth	r3, r3
 800588e:	001a      	movs	r2, r3
 8005890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	18d2      	adds	r2, r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	18d3      	adds	r3, r2, r3
 800589e:	4a2b      	ldr	r2, [pc, #172]	; (800594c <PCD_EP_ISR_Handler+0x7e0>)
 80058a0:	4694      	mov	ip, r2
 80058a2:	4463      	add	r3, ip
 80058a4:	881a      	ldrh	r2, [r3, #0]
 80058a6:	2140      	movs	r1, #64	; 0x40
 80058a8:	187b      	adds	r3, r7, r1
 80058aa:	0592      	lsls	r2, r2, #22
 80058ac:	0d92      	lsrs	r2, r2, #22
 80058ae:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 80058b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058b2:	699a      	ldr	r2, [r3, #24]
 80058b4:	187b      	adds	r3, r7, r1
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d907      	bls.n	80058cc <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 80058bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058be:	699a      	ldr	r2, [r3, #24]
 80058c0:	187b      	adds	r3, r7, r1
 80058c2:	881b      	ldrh	r3, [r3, #0]
 80058c4:	1ad2      	subs	r2, r2, r3
 80058c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c8:	619a      	str	r2, [r3, #24]
 80058ca:	e002      	b.n	80058d2 <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 80058cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ce:	2200      	movs	r2, #0
 80058d0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80058d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d107      	bne.n	80058ea <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80058da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058dc:	781a      	ldrb	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	0011      	movs	r1, r2
 80058e2:	0018      	movs	r0, r3
 80058e4:	f007 fd1e 	bl	800d324 <HAL_PCD_DataInStageCallback>
 80058e8:	e01e      	b.n	8005928 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80058ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ec:	695a      	ldr	r2, [r3, #20]
 80058ee:	2140      	movs	r1, #64	; 0x40
 80058f0:	187b      	adds	r3, r7, r1
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	18d2      	adds	r2, r2, r3
 80058f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80058fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058fc:	69da      	ldr	r2, [r3, #28]
 80058fe:	187b      	adds	r3, r7, r1
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	18d2      	adds	r2, r2, r3
 8005904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005906:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800590e:	0011      	movs	r1, r2
 8005910:	0018      	movs	r0, r3
 8005912:	f004 facb 	bl	8009eac <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8005916:	e007      	b.n	8005928 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005918:	2352      	movs	r3, #82	; 0x52
 800591a:	18fb      	adds	r3, r7, r3
 800591c:	881a      	ldrh	r2, [r3, #0]
 800591e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	0018      	movs	r0, r3
 8005924:	f000 f930 	bl	8005b88 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2244      	movs	r2, #68	; 0x44
 800592e:	5a9b      	ldrh	r3, [r3, r2]
 8005930:	b29b      	uxth	r3, r3
 8005932:	b21b      	sxth	r3, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	da01      	bge.n	800593c <PCD_EP_ISR_Handler+0x7d0>
 8005938:	f7ff fc1e 	bl	8005178 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	0018      	movs	r0, r3
 8005940:	46bd      	mov	sp, r7
 8005942:	b016      	add	sp, #88	; 0x58
 8005944:	bdb0      	pop	{r4, r5, r7, pc}
 8005946:	46c0      	nop			; (mov r8, r8)
 8005948:	00000406 	.word	0x00000406
 800594c:	00000402 	.word	0x00000402

08005950 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005950:	b590      	push	{r4, r7, lr}
 8005952:	b089      	sub	sp, #36	; 0x24
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	1dbb      	adds	r3, r7, #6
 800595c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800595e:	1dbb      	adds	r3, r7, #6
 8005960:	881a      	ldrh	r2, [r3, #0]
 8005962:	2380      	movs	r3, #128	; 0x80
 8005964:	01db      	lsls	r3, r3, #7
 8005966:	4013      	ands	r3, r2
 8005968:	d100      	bne.n	800596c <HAL_PCD_EP_DB_Receive+0x1c>
 800596a:	e07d      	b.n	8005a68 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2250      	movs	r2, #80	; 0x50
 8005972:	5a9b      	ldrh	r3, [r3, r2]
 8005974:	b29b      	uxth	r3, r3
 8005976:	001a      	movs	r2, r3
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	18d2      	adds	r2, r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	18d3      	adds	r3, r2, r3
 8005986:	4a7a      	ldr	r2, [pc, #488]	; (8005b70 <HAL_PCD_EP_DB_Receive+0x220>)
 8005988:	4694      	mov	ip, r2
 800598a:	4463      	add	r3, ip
 800598c:	881a      	ldrh	r2, [r3, #0]
 800598e:	211a      	movs	r1, #26
 8005990:	187b      	adds	r3, r7, r1
 8005992:	0592      	lsls	r2, r2, #22
 8005994:	0d92      	lsrs	r2, r2, #22
 8005996:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	699a      	ldr	r2, [r3, #24]
 800599c:	187b      	adds	r3, r7, r1
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d307      	bcc.n	80059b4 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	699a      	ldr	r2, [r3, #24]
 80059a8:	187b      	adds	r3, r7, r1
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	1ad2      	subs	r2, r2, r3
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	619a      	str	r2, [r3, #24]
 80059b2:	e002      	b.n	80059ba <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2200      	movs	r2, #0
 80059b8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d121      	bne.n	8005a06 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	001a      	movs	r2, r3
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	18d3      	adds	r3, r2, r3
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	2018      	movs	r0, #24
 80059d6:	183b      	adds	r3, r7, r0
 80059d8:	4966      	ldr	r1, [pc, #408]	; (8005b74 <HAL_PCD_EP_DB_Receive+0x224>)
 80059da:	400a      	ands	r2, r1
 80059dc:	801a      	strh	r2, [r3, #0]
 80059de:	183b      	adds	r3, r7, r0
 80059e0:	183a      	adds	r2, r7, r0
 80059e2:	8812      	ldrh	r2, [r2, #0]
 80059e4:	2180      	movs	r1, #128	; 0x80
 80059e6:	0189      	lsls	r1, r1, #6
 80059e8:	404a      	eors	r2, r1
 80059ea:	801a      	strh	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	001a      	movs	r2, r3
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	18d3      	adds	r3, r2, r3
 80059fa:	183a      	adds	r2, r7, r0
 80059fc:	8812      	ldrh	r2, [r2, #0]
 80059fe:	495e      	ldr	r1, [pc, #376]	; (8005b78 <HAL_PCD_EP_DB_Receive+0x228>)
 8005a00:	430a      	orrs	r2, r1
 8005a02:	b292      	uxth	r2, r2
 8005a04:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005a06:	1dbb      	adds	r3, r7, #6
 8005a08:	881b      	ldrh	r3, [r3, #0]
 8005a0a:	2240      	movs	r2, #64	; 0x40
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	d01a      	beq.n	8005a46 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	001a      	movs	r2, r3
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	18d3      	adds	r3, r2, r3
 8005a1e:	881b      	ldrh	r3, [r3, #0]
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	2016      	movs	r0, #22
 8005a24:	183b      	adds	r3, r7, r0
 8005a26:	4955      	ldr	r1, [pc, #340]	; (8005b7c <HAL_PCD_EP_DB_Receive+0x22c>)
 8005a28:	400a      	ands	r2, r1
 8005a2a:	801a      	strh	r2, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	001a      	movs	r2, r3
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	18d3      	adds	r3, r2, r3
 8005a3a:	183a      	adds	r2, r7, r0
 8005a3c:	8812      	ldrh	r2, [r2, #0]
 8005a3e:	4950      	ldr	r1, [pc, #320]	; (8005b80 <HAL_PCD_EP_DB_Receive+0x230>)
 8005a40:	430a      	orrs	r2, r1
 8005a42:	b292      	uxth	r2, r2
 8005a44:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8005a46:	241a      	movs	r4, #26
 8005a48:	193b      	adds	r3, r7, r4
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d100      	bne.n	8005a52 <HAL_PCD_EP_DB_Receive+0x102>
 8005a50:	e086      	b.n	8005b60 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6818      	ldr	r0, [r3, #0]
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	6959      	ldr	r1, [r3, #20]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	891a      	ldrh	r2, [r3, #8]
 8005a5e:	193b      	adds	r3, r7, r4
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	f005 fc5b 	bl	800b31c <USB_ReadPMA>
 8005a66:	e07b      	b.n	8005b60 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2250      	movs	r2, #80	; 0x50
 8005a6e:	5a9b      	ldrh	r3, [r3, r2]
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	001a      	movs	r2, r3
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	18d2      	adds	r2, r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	18d3      	adds	r3, r2, r3
 8005a82:	4a40      	ldr	r2, [pc, #256]	; (8005b84 <HAL_PCD_EP_DB_Receive+0x234>)
 8005a84:	4694      	mov	ip, r2
 8005a86:	4463      	add	r3, ip
 8005a88:	881a      	ldrh	r2, [r3, #0]
 8005a8a:	211a      	movs	r1, #26
 8005a8c:	187b      	adds	r3, r7, r1
 8005a8e:	0592      	lsls	r2, r2, #22
 8005a90:	0d92      	lsrs	r2, r2, #22
 8005a92:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	699a      	ldr	r2, [r3, #24]
 8005a98:	187b      	adds	r3, r7, r1
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d307      	bcc.n	8005ab0 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	699a      	ldr	r2, [r3, #24]
 8005aa4:	187b      	adds	r3, r7, r1
 8005aa6:	881b      	ldrh	r3, [r3, #0]
 8005aa8:	1ad2      	subs	r2, r2, r3
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	619a      	str	r2, [r3, #24]
 8005aae:	e002      	b.n	8005ab6 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d121      	bne.n	8005b02 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	001a      	movs	r2, r3
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	18d3      	adds	r3, r2, r3
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	201e      	movs	r0, #30
 8005ad2:	183b      	adds	r3, r7, r0
 8005ad4:	4927      	ldr	r1, [pc, #156]	; (8005b74 <HAL_PCD_EP_DB_Receive+0x224>)
 8005ad6:	400a      	ands	r2, r1
 8005ad8:	801a      	strh	r2, [r3, #0]
 8005ada:	183b      	adds	r3, r7, r0
 8005adc:	183a      	adds	r2, r7, r0
 8005ade:	8812      	ldrh	r2, [r2, #0]
 8005ae0:	2180      	movs	r1, #128	; 0x80
 8005ae2:	0189      	lsls	r1, r1, #6
 8005ae4:	404a      	eors	r2, r1
 8005ae6:	801a      	strh	r2, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	001a      	movs	r2, r3
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	18d3      	adds	r3, r2, r3
 8005af6:	183a      	adds	r2, r7, r0
 8005af8:	8812      	ldrh	r2, [r2, #0]
 8005afa:	491f      	ldr	r1, [pc, #124]	; (8005b78 <HAL_PCD_EP_DB_Receive+0x228>)
 8005afc:	430a      	orrs	r2, r1
 8005afe:	b292      	uxth	r2, r2
 8005b00:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005b02:	1dbb      	adds	r3, r7, #6
 8005b04:	881b      	ldrh	r3, [r3, #0]
 8005b06:	2240      	movs	r2, #64	; 0x40
 8005b08:	4013      	ands	r3, r2
 8005b0a:	d11a      	bne.n	8005b42 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	001a      	movs	r2, r3
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	18d3      	adds	r3, r2, r3
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	201c      	movs	r0, #28
 8005b20:	183b      	adds	r3, r7, r0
 8005b22:	4916      	ldr	r1, [pc, #88]	; (8005b7c <HAL_PCD_EP_DB_Receive+0x22c>)
 8005b24:	400a      	ands	r2, r1
 8005b26:	801a      	strh	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	001a      	movs	r2, r3
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	18d3      	adds	r3, r2, r3
 8005b36:	183a      	adds	r2, r7, r0
 8005b38:	8812      	ldrh	r2, [r2, #0]
 8005b3a:	4911      	ldr	r1, [pc, #68]	; (8005b80 <HAL_PCD_EP_DB_Receive+0x230>)
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	b292      	uxth	r2, r2
 8005b40:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8005b42:	241a      	movs	r4, #26
 8005b44:	193b      	adds	r3, r7, r4
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d009      	beq.n	8005b60 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6818      	ldr	r0, [r3, #0]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	6959      	ldr	r1, [r3, #20]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	895a      	ldrh	r2, [r3, #10]
 8005b58:	193b      	adds	r3, r7, r4
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	f005 fbde 	bl	800b31c <USB_ReadPMA>
    }
  }

  return count;
 8005b60:	231a      	movs	r3, #26
 8005b62:	18fb      	adds	r3, r7, r3
 8005b64:	881b      	ldrh	r3, [r3, #0]
}
 8005b66:	0018      	movs	r0, r3
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	b009      	add	sp, #36	; 0x24
 8005b6c:	bd90      	pop	{r4, r7, pc}
 8005b6e:	46c0      	nop			; (mov r8, r8)
 8005b70:	00000402 	.word	0x00000402
 8005b74:	ffffbf8f 	.word	0xffffbf8f
 8005b78:	ffff8080 	.word	0xffff8080
 8005b7c:	ffff8f8f 	.word	0xffff8f8f
 8005b80:	ffff80c0 	.word	0xffff80c0
 8005b84:	00000406 	.word	0x00000406

08005b88 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b0a2      	sub	sp, #136	; 0x88
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	1dbb      	adds	r3, r7, #6
 8005b94:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005b96:	1dbb      	adds	r3, r7, #6
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	2240      	movs	r2, #64	; 0x40
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	d100      	bne.n	8005ba2 <HAL_PCD_EP_DB_Transmit+0x1a>
 8005ba0:	e1c8      	b.n	8005f34 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2250      	movs	r2, #80	; 0x50
 8005ba8:	5a9b      	ldrh	r3, [r3, r2]
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	001a      	movs	r2, r3
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	18d2      	adds	r2, r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	18d3      	adds	r3, r2, r3
 8005bbc:	4ad7      	ldr	r2, [pc, #860]	; (8005f1c <HAL_PCD_EP_DB_Transmit+0x394>)
 8005bbe:	4694      	mov	ip, r2
 8005bc0:	4463      	add	r3, ip
 8005bc2:	881a      	ldrh	r2, [r3, #0]
 8005bc4:	214e      	movs	r1, #78	; 0x4e
 8005bc6:	187b      	adds	r3, r7, r1
 8005bc8:	0592      	lsls	r2, r2, #22
 8005bca:	0d92      	lsrs	r2, r2, #22
 8005bcc:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	187b      	adds	r3, r7, r1
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d907      	bls.n	8005bea <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	699a      	ldr	r2, [r3, #24]
 8005bde:	187b      	adds	r3, r7, r1
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	1ad2      	subs	r2, r2, r3
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	619a      	str	r2, [r3, #24]
 8005be8:	e002      	b.n	8005bf0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2200      	movs	r2, #0
 8005bee:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d000      	beq.n	8005bfa <HAL_PCD_EP_DB_Transmit+0x72>
 8005bf8:	e0b5      	b.n	8005d66 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	785b      	ldrb	r3, [r3, #1]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d125      	bne.n	8005c4e <HAL_PCD_EP_DB_Transmit+0xc6>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2250      	movs	r2, #80	; 0x50
 8005c0e:	5a9b      	ldrh	r3, [r3, r2]
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	001a      	movs	r2, r3
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	189b      	adds	r3, r3, r2
 8005c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	00da      	lsls	r2, r3, #3
 8005c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c22:	18d3      	adds	r3, r2, r3
 8005c24:	4abd      	ldr	r2, [pc, #756]	; (8005f1c <HAL_PCD_EP_DB_Transmit+0x394>)
 8005c26:	4694      	mov	ip, r2
 8005c28:	4463      	add	r3, ip
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	4abb      	ldr	r2, [pc, #748]	; (8005f20 <HAL_PCD_EP_DB_Transmit+0x398>)
 8005c34:	4013      	ands	r3, r2
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	801a      	strh	r2, [r3, #0]
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	4ab8      	ldr	r2, [pc, #736]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	801a      	strh	r2, [r3, #0]
 8005c4c:	e01b      	b.n	8005c86 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	785b      	ldrb	r3, [r3, #1]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d117      	bne.n	8005c86 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	633b      	str	r3, [r7, #48]	; 0x30
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2250      	movs	r2, #80	; 0x50
 8005c62:	5a9b      	ldrh	r3, [r3, r2]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	001a      	movs	r2, r3
 8005c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6a:	189b      	adds	r3, r3, r2
 8005c6c:	633b      	str	r3, [r7, #48]	; 0x30
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	00da      	lsls	r2, r3, #3
 8005c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c76:	18d3      	adds	r3, r2, r3
 8005c78:	4aa8      	ldr	r2, [pc, #672]	; (8005f1c <HAL_PCD_EP_DB_Transmit+0x394>)
 8005c7a:	4694      	mov	ip, r2
 8005c7c:	4463      	add	r3, ip
 8005c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c82:	2200      	movs	r2, #0
 8005c84:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	623b      	str	r3, [r7, #32]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	785b      	ldrb	r3, [r3, #1]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d125      	bne.n	8005ce0 <HAL_PCD_EP_DB_Transmit+0x158>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	61bb      	str	r3, [r7, #24]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2250      	movs	r2, #80	; 0x50
 8005ca0:	5a9b      	ldrh	r3, [r3, r2]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	001a      	movs	r2, r3
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	189b      	adds	r3, r3, r2
 8005caa:	61bb      	str	r3, [r7, #24]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	00da      	lsls	r2, r3, #3
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	18d3      	adds	r3, r2, r3
 8005cb6:	4a9c      	ldr	r2, [pc, #624]	; (8005f28 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8005cb8:	4694      	mov	ip, r2
 8005cba:	4463      	add	r3, ip
 8005cbc:	617b      	str	r3, [r7, #20]
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	4a96      	ldr	r2, [pc, #600]	; (8005f20 <HAL_PCD_EP_DB_Transmit+0x398>)
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	801a      	strh	r2, [r3, #0]
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	4a93      	ldr	r2, [pc, #588]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	801a      	strh	r2, [r3, #0]
 8005cde:	e018      	b.n	8005d12 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	785b      	ldrb	r3, [r3, #1]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d114      	bne.n	8005d12 <HAL_PCD_EP_DB_Transmit+0x18a>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2250      	movs	r2, #80	; 0x50
 8005cee:	5a9b      	ldrh	r3, [r3, r2]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	001a      	movs	r2, r3
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	189b      	adds	r3, r3, r2
 8005cf8:	623b      	str	r3, [r7, #32]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	00da      	lsls	r2, r3, #3
 8005d00:	6a3b      	ldr	r3, [r7, #32]
 8005d02:	18d3      	adds	r3, r2, r3
 8005d04:	4a88      	ldr	r2, [pc, #544]	; (8005f28 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8005d06:	4694      	mov	ip, r2
 8005d08:	4463      	add	r3, ip
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	781a      	ldrb	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	0011      	movs	r1, r2
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	f007 fb02 	bl	800d324 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005d20:	1dbb      	adds	r3, r7, #6
 8005d22:	881a      	ldrh	r2, [r3, #0]
 8005d24:	2380      	movs	r3, #128	; 0x80
 8005d26:	01db      	lsls	r3, r3, #7
 8005d28:	4013      	ands	r3, r2
 8005d2a:	d100      	bne.n	8005d2e <HAL_PCD_EP_DB_Transmit+0x1a6>
 8005d2c:	e2d4      	b.n	80062d8 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	001a      	movs	r2, r3
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	18d3      	adds	r3, r2, r3
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	2012      	movs	r0, #18
 8005d42:	183b      	adds	r3, r7, r0
 8005d44:	4979      	ldr	r1, [pc, #484]	; (8005f2c <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8005d46:	400a      	ands	r2, r1
 8005d48:	801a      	strh	r2, [r3, #0]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	001a      	movs	r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	18d3      	adds	r3, r2, r3
 8005d58:	183a      	adds	r2, r7, r0
 8005d5a:	8812      	ldrh	r2, [r2, #0]
 8005d5c:	4974      	ldr	r1, [pc, #464]	; (8005f30 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	b292      	uxth	r2, r2
 8005d62:	801a      	strh	r2, [r3, #0]
 8005d64:	e2b8      	b.n	80062d8 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005d66:	1dbb      	adds	r3, r7, #6
 8005d68:	881a      	ldrh	r2, [r3, #0]
 8005d6a:	2380      	movs	r3, #128	; 0x80
 8005d6c:	01db      	lsls	r3, r3, #7
 8005d6e:	4013      	ands	r3, r2
 8005d70:	d01a      	beq.n	8005da8 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	001a      	movs	r2, r3
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	18d3      	adds	r3, r2, r3
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	2044      	movs	r0, #68	; 0x44
 8005d86:	183b      	adds	r3, r7, r0
 8005d88:	4968      	ldr	r1, [pc, #416]	; (8005f2c <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8005d8a:	400a      	ands	r2, r1
 8005d8c:	801a      	strh	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	001a      	movs	r2, r3
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	18d3      	adds	r3, r2, r3
 8005d9c:	183a      	adds	r2, r7, r0
 8005d9e:	8812      	ldrh	r2, [r2, #0]
 8005da0:	4963      	ldr	r1, [pc, #396]	; (8005f30 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8005da2:	430a      	orrs	r2, r1
 8005da4:	b292      	uxth	r2, r2
 8005da6:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2224      	movs	r2, #36	; 0x24
 8005dac:	5c9b      	ldrb	r3, [r3, r2]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d000      	beq.n	8005db4 <HAL_PCD_EP_DB_Transmit+0x22c>
 8005db2:	e291      	b.n	80062d8 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	695a      	ldr	r2, [r3, #20]
 8005db8:	214e      	movs	r1, #78	; 0x4e
 8005dba:	187b      	adds	r3, r7, r1
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	18d2      	adds	r2, r2, r3
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	69da      	ldr	r2, [r3, #28]
 8005dc8:	187b      	adds	r3, r7, r1
 8005dca:	881b      	ldrh	r3, [r3, #0]
 8005dcc:	18d2      	adds	r2, r2, r3
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	6a1a      	ldr	r2, [r3, #32]
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d309      	bcc.n	8005df2 <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	6a1a      	ldr	r2, [r3, #32]
 8005de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dea:	1ad2      	subs	r2, r2, r3
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	621a      	str	r2, [r3, #32]
 8005df0:	e016      	b.n	8005e20 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d108      	bne.n	8005e0c <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8005dfa:	234e      	movs	r3, #78	; 0x4e
 8005dfc:	18fb      	adds	r3, r7, r3
 8005dfe:	881b      	ldrh	r3, [r3, #0]
 8005e00:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2224      	movs	r2, #36	; 0x24
 8005e06:	2100      	movs	r1, #0
 8005e08:	5499      	strb	r1, [r3, r2]
 8005e0a:	e009      	b.n	8005e20 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2224      	movs	r2, #36	; 0x24
 8005e10:	2100      	movs	r1, #0
 8005e12:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	785b      	ldrb	r3, [r3, #1]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d150      	bne.n	8005eca <HAL_PCD_EP_DB_Transmit+0x342>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2250      	movs	r2, #80	; 0x50
 8005e34:	5a9b      	ldrh	r3, [r3, r2]
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	001a      	movs	r2, r3
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3c:	189b      	adds	r3, r3, r2
 8005e3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	00da      	lsls	r2, r3, #3
 8005e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e48:	18d3      	adds	r3, r2, r3
 8005e4a:	4a34      	ldr	r2, [pc, #208]	; (8005f1c <HAL_PCD_EP_DB_Transmit+0x394>)
 8005e4c:	4694      	mov	ip, r2
 8005e4e:	4463      	add	r3, ip
 8005e50:	637b      	str	r3, [r7, #52]	; 0x34
 8005e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d110      	bne.n	8005e7a <HAL_PCD_EP_DB_Transmit+0x2f2>
 8005e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	4a30      	ldr	r2, [pc, #192]	; (8005f20 <HAL_PCD_EP_DB_Transmit+0x398>)
 8005e60:	4013      	ands	r3, r2
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e66:	801a      	strh	r2, [r3, #0]
 8005e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	4a2d      	ldr	r2, [pc, #180]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e76:	801a      	strh	r2, [r3, #0]
 8005e78:	e044      	b.n	8005f04 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e7c:	2b3e      	cmp	r3, #62	; 0x3e
 8005e7e:	d810      	bhi.n	8005ea2 <HAL_PCD_EP_DB_Transmit+0x31a>
 8005e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e82:	085b      	lsrs	r3, r3, #1
 8005e84:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e88:	2201      	movs	r2, #1
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	d002      	beq.n	8005e94 <HAL_PCD_EP_DB_Transmit+0x30c>
 8005e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e90:	3301      	adds	r3, #1
 8005e92:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	029b      	lsls	r3, r3, #10
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9e:	801a      	strh	r2, [r3, #0]
 8005ea0:	e030      	b.n	8005f04 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ea4:	095b      	lsrs	r3, r3, #5
 8005ea6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eaa:	221f      	movs	r2, #31
 8005eac:	4013      	ands	r3, r2
 8005eae:	d102      	bne.n	8005eb6 <HAL_PCD_EP_DB_Transmit+0x32e>
 8005eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	029b      	lsls	r3, r3, #10
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	4a19      	ldr	r2, [pc, #100]	; (8005f24 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec6:	801a      	strh	r2, [r3, #0]
 8005ec8:	e01c      	b.n	8005f04 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	785b      	ldrb	r3, [r3, #1]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d118      	bne.n	8005f04 <HAL_PCD_EP_DB_Transmit+0x37c>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2250      	movs	r2, #80	; 0x50
 8005ede:	5a9b      	ldrh	r3, [r3, r2]
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	001a      	movs	r2, r3
 8005ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ee6:	189b      	adds	r3, r3, r2
 8005ee8:	643b      	str	r3, [r7, #64]	; 0x40
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	00da      	lsls	r2, r3, #3
 8005ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ef2:	18d3      	adds	r3, r2, r3
 8005ef4:	4a09      	ldr	r2, [pc, #36]	; (8005f1c <HAL_PCD_EP_DB_Transmit+0x394>)
 8005ef6:	4694      	mov	ip, r2
 8005ef8:	4463      	add	r3, ip
 8005efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f02:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6818      	ldr	r0, [r3, #0]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	6959      	ldr	r1, [r3, #20]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	891a      	ldrh	r2, [r3, #8]
 8005f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	f005 f9be 	bl	800b294 <USB_WritePMA>
 8005f18:	e1de      	b.n	80062d8 <HAL_PCD_EP_DB_Transmit+0x750>
 8005f1a:	46c0      	nop			; (mov r8, r8)
 8005f1c:	00000402 	.word	0x00000402
 8005f20:	ffff83ff 	.word	0xffff83ff
 8005f24:	ffff8000 	.word	0xffff8000
 8005f28:	00000406 	.word	0x00000406
 8005f2c:	ffff8f8f 	.word	0xffff8f8f
 8005f30:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2250      	movs	r2, #80	; 0x50
 8005f3a:	5a9b      	ldrh	r3, [r3, r2]
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	001a      	movs	r2, r3
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	00db      	lsls	r3, r3, #3
 8005f46:	18d2      	adds	r2, r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	18d3      	adds	r3, r2, r3
 8005f4e:	4aca      	ldr	r2, [pc, #808]	; (8006278 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8005f50:	4694      	mov	ip, r2
 8005f52:	4463      	add	r3, ip
 8005f54:	881a      	ldrh	r2, [r3, #0]
 8005f56:	214e      	movs	r1, #78	; 0x4e
 8005f58:	187b      	adds	r3, r7, r1
 8005f5a:	0592      	lsls	r2, r2, #22
 8005f5c:	0d92      	lsrs	r2, r2, #22
 8005f5e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	699a      	ldr	r2, [r3, #24]
 8005f64:	187b      	adds	r3, r7, r1
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d307      	bcc.n	8005f7c <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	699a      	ldr	r2, [r3, #24]
 8005f70:	187b      	adds	r3, r7, r1
 8005f72:	881b      	ldrh	r3, [r3, #0]
 8005f74:	1ad2      	subs	r2, r2, r3
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	619a      	str	r2, [r3, #24]
 8005f7a:	e002      	b.n	8005f82 <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	699b      	ldr	r3, [r3, #24]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d000      	beq.n	8005f8c <HAL_PCD_EP_DB_Transmit+0x404>
 8005f8a:	e0c0      	b.n	800610e <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	785b      	ldrb	r3, [r3, #1]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d125      	bne.n	8005fe0 <HAL_PCD_EP_DB_Transmit+0x458>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2250      	movs	r2, #80	; 0x50
 8005fa0:	5a9b      	ldrh	r3, [r3, r2]
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	001a      	movs	r2, r3
 8005fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fa8:	189b      	adds	r3, r3, r2
 8005faa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	00da      	lsls	r2, r3, #3
 8005fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fb4:	18d3      	adds	r3, r2, r3
 8005fb6:	4ab1      	ldr	r2, [pc, #708]	; (800627c <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8005fb8:	4694      	mov	ip, r2
 8005fba:	4463      	add	r3, ip
 8005fbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	4aae      	ldr	r2, [pc, #696]	; (8006280 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fcc:	801a      	strh	r2, [r3, #0]
 8005fce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	4aab      	ldr	r2, [pc, #684]	; (8006284 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fdc:	801a      	strh	r2, [r3, #0]
 8005fde:	e01b      	b.n	8006018 <HAL_PCD_EP_DB_Transmit+0x490>
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	785b      	ldrb	r3, [r3, #1]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d117      	bne.n	8006018 <HAL_PCD_EP_DB_Transmit+0x490>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	677b      	str	r3, [r7, #116]	; 0x74
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2250      	movs	r2, #80	; 0x50
 8005ff4:	5a9b      	ldrh	r3, [r3, r2]
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	001a      	movs	r2, r3
 8005ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ffc:	189b      	adds	r3, r3, r2
 8005ffe:	677b      	str	r3, [r7, #116]	; 0x74
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	00da      	lsls	r2, r3, #3
 8006006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006008:	18d3      	adds	r3, r2, r3
 800600a:	4a9c      	ldr	r2, [pc, #624]	; (800627c <HAL_PCD_EP_DB_Transmit+0x6f4>)
 800600c:	4694      	mov	ip, r2
 800600e:	4463      	add	r3, ip
 8006010:	673b      	str	r3, [r7, #112]	; 0x70
 8006012:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006014:	2200      	movs	r2, #0
 8006016:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	67bb      	str	r3, [r7, #120]	; 0x78
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	785b      	ldrb	r3, [r3, #1]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d130      	bne.n	8006088 <HAL_PCD_EP_DB_Transmit+0x500>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2180      	movs	r1, #128	; 0x80
 800602c:	187a      	adds	r2, r7, r1
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2250      	movs	r2, #80	; 0x50
 8006036:	5a9b      	ldrh	r3, [r3, r2]
 8006038:	b29b      	uxth	r3, r3
 800603a:	001a      	movs	r2, r3
 800603c:	187b      	adds	r3, r7, r1
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	189b      	adds	r3, r3, r2
 8006042:	187a      	adds	r2, r7, r1
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	00da      	lsls	r2, r3, #3
 800604c:	187b      	adds	r3, r7, r1
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	18d3      	adds	r3, r2, r3
 8006052:	4a89      	ldr	r2, [pc, #548]	; (8006278 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8006054:	4694      	mov	ip, r2
 8006056:	4463      	add	r3, ip
 8006058:	2184      	movs	r1, #132	; 0x84
 800605a:	187a      	adds	r2, r7, r1
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	187b      	adds	r3, r7, r1
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	b29b      	uxth	r3, r3
 8006066:	4a86      	ldr	r2, [pc, #536]	; (8006280 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8006068:	4013      	ands	r3, r2
 800606a:	b29a      	uxth	r2, r3
 800606c:	187b      	adds	r3, r7, r1
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	801a      	strh	r2, [r3, #0]
 8006072:	187b      	adds	r3, r7, r1
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	b29b      	uxth	r3, r3
 800607a:	4a82      	ldr	r2, [pc, #520]	; (8006284 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800607c:	4313      	orrs	r3, r2
 800607e:	b29a      	uxth	r2, r3
 8006080:	187b      	adds	r3, r7, r1
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	801a      	strh	r2, [r3, #0]
 8006086:	e018      	b.n	80060ba <HAL_PCD_EP_DB_Transmit+0x532>
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	785b      	ldrb	r3, [r3, #1]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d114      	bne.n	80060ba <HAL_PCD_EP_DB_Transmit+0x532>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2250      	movs	r2, #80	; 0x50
 8006096:	5a9b      	ldrh	r3, [r3, r2]
 8006098:	b29b      	uxth	r3, r3
 800609a:	001a      	movs	r2, r3
 800609c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800609e:	189b      	adds	r3, r3, r2
 80060a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	00da      	lsls	r2, r3, #3
 80060a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060aa:	18d3      	adds	r3, r2, r3
 80060ac:	4a72      	ldr	r2, [pc, #456]	; (8006278 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80060ae:	4694      	mov	ip, r2
 80060b0:	4463      	add	r3, ip
 80060b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80060b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060b6:	2200      	movs	r2, #0
 80060b8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	781a      	ldrb	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	0011      	movs	r1, r2
 80060c2:	0018      	movs	r0, r3
 80060c4:	f007 f92e 	bl	800d324 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80060c8:	1dbb      	adds	r3, r7, #6
 80060ca:	881a      	ldrh	r2, [r3, #0]
 80060cc:	2380      	movs	r3, #128	; 0x80
 80060ce:	01db      	lsls	r3, r3, #7
 80060d0:	4013      	ands	r3, r2
 80060d2:	d000      	beq.n	80060d6 <HAL_PCD_EP_DB_Transmit+0x54e>
 80060d4:	e100      	b.n	80062d8 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	001a      	movs	r2, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	18d3      	adds	r3, r2, r3
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	2046      	movs	r0, #70	; 0x46
 80060ea:	183b      	adds	r3, r7, r0
 80060ec:	4966      	ldr	r1, [pc, #408]	; (8006288 <HAL_PCD_EP_DB_Transmit+0x700>)
 80060ee:	400a      	ands	r2, r1
 80060f0:	801a      	strh	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	001a      	movs	r2, r3
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	18d3      	adds	r3, r2, r3
 8006100:	183a      	adds	r2, r7, r0
 8006102:	8812      	ldrh	r2, [r2, #0]
 8006104:	4961      	ldr	r1, [pc, #388]	; (800628c <HAL_PCD_EP_DB_Transmit+0x704>)
 8006106:	430a      	orrs	r2, r1
 8006108:	b292      	uxth	r2, r2
 800610a:	801a      	strh	r2, [r3, #0]
 800610c:	e0e4      	b.n	80062d8 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800610e:	1dbb      	adds	r3, r7, #6
 8006110:	881a      	ldrh	r2, [r3, #0]
 8006112:	2380      	movs	r3, #128	; 0x80
 8006114:	01db      	lsls	r3, r3, #7
 8006116:	4013      	ands	r3, r2
 8006118:	d11a      	bne.n	8006150 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	001a      	movs	r2, r3
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	18d3      	adds	r3, r2, r3
 8006128:	881b      	ldrh	r3, [r3, #0]
 800612a:	b29a      	uxth	r2, r3
 800612c:	204c      	movs	r0, #76	; 0x4c
 800612e:	183b      	adds	r3, r7, r0
 8006130:	4955      	ldr	r1, [pc, #340]	; (8006288 <HAL_PCD_EP_DB_Transmit+0x700>)
 8006132:	400a      	ands	r2, r1
 8006134:	801a      	strh	r2, [r3, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	001a      	movs	r2, r3
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	18d3      	adds	r3, r2, r3
 8006144:	183a      	adds	r2, r7, r0
 8006146:	8812      	ldrh	r2, [r2, #0]
 8006148:	4950      	ldr	r1, [pc, #320]	; (800628c <HAL_PCD_EP_DB_Transmit+0x704>)
 800614a:	430a      	orrs	r2, r1
 800614c:	b292      	uxth	r2, r2
 800614e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2224      	movs	r2, #36	; 0x24
 8006154:	5c9b      	ldrb	r3, [r3, r2]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d000      	beq.n	800615c <HAL_PCD_EP_DB_Transmit+0x5d4>
 800615a:	e0bd      	b.n	80062d8 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	695a      	ldr	r2, [r3, #20]
 8006160:	214e      	movs	r1, #78	; 0x4e
 8006162:	187b      	adds	r3, r7, r1
 8006164:	881b      	ldrh	r3, [r3, #0]
 8006166:	18d2      	adds	r2, r2, r3
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	69da      	ldr	r2, [r3, #28]
 8006170:	187b      	adds	r3, r7, r1
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	18d2      	adds	r2, r2, r3
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	6a1a      	ldr	r2, [r3, #32]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	429a      	cmp	r2, r3
 8006184:	d309      	bcc.n	800619a <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	6a1a      	ldr	r2, [r3, #32]
 8006190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006192:	1ad2      	subs	r2, r2, r3
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	621a      	str	r2, [r3, #32]
 8006198:	e016      	b.n	80061c8 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d108      	bne.n	80061b4 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 80061a2:	234e      	movs	r3, #78	; 0x4e
 80061a4:	18fb      	adds	r3, r7, r3
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	2224      	movs	r2, #36	; 0x24
 80061ae:	2100      	movs	r1, #0
 80061b0:	5499      	strb	r1, [r3, r2]
 80061b2:	e009      	b.n	80061c8 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	2200      	movs	r2, #0
 80061be:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2224      	movs	r2, #36	; 0x24
 80061c4:	2100      	movs	r1, #0
 80061c6:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	667b      	str	r3, [r7, #100]	; 0x64
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	785b      	ldrb	r3, [r3, #1]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d15c      	bne.n	8006290 <HAL_PCD_EP_DB_Transmit+0x708>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2250      	movs	r2, #80	; 0x50
 80061e2:	5a9b      	ldrh	r3, [r3, r2]
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	001a      	movs	r2, r3
 80061e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061ea:	189b      	adds	r3, r3, r2
 80061ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	00da      	lsls	r2, r3, #3
 80061f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061f6:	18d3      	adds	r3, r2, r3
 80061f8:	4a1f      	ldr	r2, [pc, #124]	; (8006278 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80061fa:	4694      	mov	ip, r2
 80061fc:	4463      	add	r3, ip
 80061fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8006200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006202:	2b00      	cmp	r3, #0
 8006204:	d110      	bne.n	8006228 <HAL_PCD_EP_DB_Transmit+0x6a0>
 8006206:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b29b      	uxth	r3, r3
 800620c:	4a1c      	ldr	r2, [pc, #112]	; (8006280 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 800620e:	4013      	ands	r3, r2
 8006210:	b29a      	uxth	r2, r3
 8006212:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006214:	801a      	strh	r2, [r3, #0]
 8006216:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	b29b      	uxth	r3, r3
 800621c:	4a19      	ldr	r2, [pc, #100]	; (8006284 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800621e:	4313      	orrs	r3, r2
 8006220:	b29a      	uxth	r2, r3
 8006222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006224:	801a      	strh	r2, [r3, #0]
 8006226:	e04d      	b.n	80062c4 <HAL_PCD_EP_DB_Transmit+0x73c>
 8006228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800622a:	2b3e      	cmp	r3, #62	; 0x3e
 800622c:	d810      	bhi.n	8006250 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800622e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006230:	085b      	lsrs	r3, r3, #1
 8006232:	657b      	str	r3, [r7, #84]	; 0x54
 8006234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006236:	2201      	movs	r2, #1
 8006238:	4013      	ands	r3, r2
 800623a:	d002      	beq.n	8006242 <HAL_PCD_EP_DB_Transmit+0x6ba>
 800623c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800623e:	3301      	adds	r3, #1
 8006240:	657b      	str	r3, [r7, #84]	; 0x54
 8006242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006244:	b29b      	uxth	r3, r3
 8006246:	029b      	lsls	r3, r3, #10
 8006248:	b29a      	uxth	r2, r3
 800624a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800624c:	801a      	strh	r2, [r3, #0]
 800624e:	e039      	b.n	80062c4 <HAL_PCD_EP_DB_Transmit+0x73c>
 8006250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006252:	095b      	lsrs	r3, r3, #5
 8006254:	657b      	str	r3, [r7, #84]	; 0x54
 8006256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006258:	221f      	movs	r2, #31
 800625a:	4013      	ands	r3, r2
 800625c:	d102      	bne.n	8006264 <HAL_PCD_EP_DB_Transmit+0x6dc>
 800625e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006260:	3b01      	subs	r3, #1
 8006262:	657b      	str	r3, [r7, #84]	; 0x54
 8006264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006266:	b29b      	uxth	r3, r3
 8006268:	029b      	lsls	r3, r3, #10
 800626a:	b29b      	uxth	r3, r3
 800626c:	4a05      	ldr	r2, [pc, #20]	; (8006284 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800626e:	4313      	orrs	r3, r2
 8006270:	b29a      	uxth	r2, r3
 8006272:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006274:	801a      	strh	r2, [r3, #0]
 8006276:	e025      	b.n	80062c4 <HAL_PCD_EP_DB_Transmit+0x73c>
 8006278:	00000406 	.word	0x00000406
 800627c:	00000402 	.word	0x00000402
 8006280:	ffff83ff 	.word	0xffff83ff
 8006284:	ffff8000 	.word	0xffff8000
 8006288:	ffff8f8f 	.word	0xffff8f8f
 800628c:	ffffc080 	.word	0xffffc080
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	785b      	ldrb	r3, [r3, #1]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d115      	bne.n	80062c4 <HAL_PCD_EP_DB_Transmit+0x73c>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2250      	movs	r2, #80	; 0x50
 800629e:	5a9b      	ldrh	r3, [r3, r2]
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	001a      	movs	r2, r3
 80062a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062a6:	189b      	adds	r3, r3, r2
 80062a8:	667b      	str	r3, [r7, #100]	; 0x64
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	00da      	lsls	r2, r3, #3
 80062b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062b2:	18d3      	adds	r3, r2, r3
 80062b4:	4a1e      	ldr	r2, [pc, #120]	; (8006330 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 80062b6:	4694      	mov	ip, r2
 80062b8:	4463      	add	r3, ip
 80062ba:	663b      	str	r3, [r7, #96]	; 0x60
 80062bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062be:	b29a      	uxth	r2, r3
 80062c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062c2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6818      	ldr	r0, [r3, #0]
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	6959      	ldr	r1, [r3, #20]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	895a      	ldrh	r2, [r3, #10]
 80062d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	f004 ffde 	bl	800b294 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	001a      	movs	r2, r3
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	18d3      	adds	r3, r2, r3
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	2010      	movs	r0, #16
 80062ec:	183b      	adds	r3, r7, r0
 80062ee:	4911      	ldr	r1, [pc, #68]	; (8006334 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 80062f0:	400a      	ands	r2, r1
 80062f2:	801a      	strh	r2, [r3, #0]
 80062f4:	183b      	adds	r3, r7, r0
 80062f6:	183a      	adds	r2, r7, r0
 80062f8:	8812      	ldrh	r2, [r2, #0]
 80062fa:	2110      	movs	r1, #16
 80062fc:	404a      	eors	r2, r1
 80062fe:	801a      	strh	r2, [r3, #0]
 8006300:	183b      	adds	r3, r7, r0
 8006302:	183a      	adds	r2, r7, r0
 8006304:	8812      	ldrh	r2, [r2, #0]
 8006306:	2120      	movs	r1, #32
 8006308:	404a      	eors	r2, r1
 800630a:	801a      	strh	r2, [r3, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	001a      	movs	r2, r3
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	18d3      	adds	r3, r2, r3
 800631a:	183a      	adds	r2, r7, r0
 800631c:	8812      	ldrh	r2, [r2, #0]
 800631e:	4906      	ldr	r1, [pc, #24]	; (8006338 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 8006320:	430a      	orrs	r2, r1
 8006322:	b292      	uxth	r2, r2
 8006324:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	0018      	movs	r0, r3
 800632a:	46bd      	mov	sp, r7
 800632c:	b022      	add	sp, #136	; 0x88
 800632e:	bd80      	pop	{r7, pc}
 8006330:	00000406 	.word	0x00000406
 8006334:	ffff8fbf 	.word	0xffff8fbf
 8006338:	ffff8080 	.word	0xffff8080

0800633c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800633c:	b590      	push	{r4, r7, lr}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	0008      	movs	r0, r1
 8006346:	0011      	movs	r1, r2
 8006348:	607b      	str	r3, [r7, #4]
 800634a:	240a      	movs	r4, #10
 800634c:	193b      	adds	r3, r7, r4
 800634e:	1c02      	adds	r2, r0, #0
 8006350:	801a      	strh	r2, [r3, #0]
 8006352:	2308      	movs	r3, #8
 8006354:	18fb      	adds	r3, r7, r3
 8006356:	1c0a      	adds	r2, r1, #0
 8006358:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800635a:	0021      	movs	r1, r4
 800635c:	187b      	adds	r3, r7, r1
 800635e:	881b      	ldrh	r3, [r3, #0]
 8006360:	2280      	movs	r2, #128	; 0x80
 8006362:	4013      	ands	r3, r2
 8006364:	b29b      	uxth	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00c      	beq.n	8006384 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800636a:	187b      	adds	r3, r7, r1
 800636c:	881b      	ldrh	r3, [r3, #0]
 800636e:	2207      	movs	r2, #7
 8006370:	4013      	ands	r3, r2
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	0013      	movs	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	189b      	adds	r3, r3, r2
 800637a:	00db      	lsls	r3, r3, #3
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	18d3      	adds	r3, r2, r3
 8006380:	617b      	str	r3, [r7, #20]
 8006382:	e00b      	b.n	800639c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006384:	230a      	movs	r3, #10
 8006386:	18fb      	adds	r3, r7, r3
 8006388:	881a      	ldrh	r2, [r3, #0]
 800638a:	0013      	movs	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	189b      	adds	r3, r3, r2
 8006390:	00db      	lsls	r3, r3, #3
 8006392:	3369      	adds	r3, #105	; 0x69
 8006394:	33ff      	adds	r3, #255	; 0xff
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	18d3      	adds	r3, r2, r3
 800639a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800639c:	2308      	movs	r3, #8
 800639e:	18fb      	adds	r3, r7, r3
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d107      	bne.n	80063b6 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2200      	movs	r2, #0
 80063aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	80da      	strh	r2, [r3, #6]
 80063b4:	e00b      	b.n	80063ce <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2201      	movs	r2, #1
 80063ba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	b29a      	uxth	r2, r3
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	0c1b      	lsrs	r3, r3, #16
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	0018      	movs	r0, r3
 80063d2:	46bd      	mov	sp, r7
 80063d4:	b007      	add	sp, #28
 80063d6:	bd90      	pop	{r4, r7, pc}

080063d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	23ba      	movs	r3, #186	; 0xba
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	2101      	movs	r1, #1
 80063ee:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	23b8      	movs	r3, #184	; 0xb8
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	2100      	movs	r1, #0
 80063f8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2254      	movs	r2, #84	; 0x54
 80063fe:	5a9b      	ldrh	r3, [r3, r2]
 8006400:	b29b      	uxth	r3, r3
 8006402:	2201      	movs	r2, #1
 8006404:	4313      	orrs	r3, r2
 8006406:	b299      	uxth	r1, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2254      	movs	r2, #84	; 0x54
 800640c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2254      	movs	r2, #84	; 0x54
 8006412:	5a9b      	ldrh	r3, [r3, r2]
 8006414:	b29b      	uxth	r3, r3
 8006416:	2202      	movs	r2, #2
 8006418:	4313      	orrs	r3, r2
 800641a:	b299      	uxth	r1, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2254      	movs	r2, #84	; 0x54
 8006420:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	0018      	movs	r0, r3
 8006426:	46bd      	mov	sp, r7
 8006428:	b004      	add	sp, #16
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	000a      	movs	r2, r1
 8006436:	1cfb      	adds	r3, r7, #3
 8006438:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800643a:	46c0      	nop			; (mov r8, r8)
 800643c:	46bd      	mov	sp, r7
 800643e:	b002      	add	sp, #8
 8006440:	bd80      	pop	{r7, pc}
	...

08006444 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b088      	sub	sp, #32
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d102      	bne.n	8006458 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	f000 fb76 	bl	8006b44 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2201      	movs	r2, #1
 800645e:	4013      	ands	r3, r2
 8006460:	d100      	bne.n	8006464 <HAL_RCC_OscConfig+0x20>
 8006462:	e08e      	b.n	8006582 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8006464:	4bc5      	ldr	r3, [pc, #788]	; (800677c <HAL_RCC_OscConfig+0x338>)
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	220c      	movs	r2, #12
 800646a:	4013      	ands	r3, r2
 800646c:	2b04      	cmp	r3, #4
 800646e:	d00e      	beq.n	800648e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006470:	4bc2      	ldr	r3, [pc, #776]	; (800677c <HAL_RCC_OscConfig+0x338>)
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	220c      	movs	r2, #12
 8006476:	4013      	ands	r3, r2
 8006478:	2b08      	cmp	r3, #8
 800647a:	d117      	bne.n	80064ac <HAL_RCC_OscConfig+0x68>
 800647c:	4bbf      	ldr	r3, [pc, #764]	; (800677c <HAL_RCC_OscConfig+0x338>)
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	23c0      	movs	r3, #192	; 0xc0
 8006482:	025b      	lsls	r3, r3, #9
 8006484:	401a      	ands	r2, r3
 8006486:	2380      	movs	r3, #128	; 0x80
 8006488:	025b      	lsls	r3, r3, #9
 800648a:	429a      	cmp	r2, r3
 800648c:	d10e      	bne.n	80064ac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800648e:	4bbb      	ldr	r3, [pc, #748]	; (800677c <HAL_RCC_OscConfig+0x338>)
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	2380      	movs	r3, #128	; 0x80
 8006494:	029b      	lsls	r3, r3, #10
 8006496:	4013      	ands	r3, r2
 8006498:	d100      	bne.n	800649c <HAL_RCC_OscConfig+0x58>
 800649a:	e071      	b.n	8006580 <HAL_RCC_OscConfig+0x13c>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d000      	beq.n	80064a6 <HAL_RCC_OscConfig+0x62>
 80064a4:	e06c      	b.n	8006580 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	f000 fb4c 	bl	8006b44 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d107      	bne.n	80064c4 <HAL_RCC_OscConfig+0x80>
 80064b4:	4bb1      	ldr	r3, [pc, #708]	; (800677c <HAL_RCC_OscConfig+0x338>)
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	4bb0      	ldr	r3, [pc, #704]	; (800677c <HAL_RCC_OscConfig+0x338>)
 80064ba:	2180      	movs	r1, #128	; 0x80
 80064bc:	0249      	lsls	r1, r1, #9
 80064be:	430a      	orrs	r2, r1
 80064c0:	601a      	str	r2, [r3, #0]
 80064c2:	e02f      	b.n	8006524 <HAL_RCC_OscConfig+0xe0>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d10c      	bne.n	80064e6 <HAL_RCC_OscConfig+0xa2>
 80064cc:	4bab      	ldr	r3, [pc, #684]	; (800677c <HAL_RCC_OscConfig+0x338>)
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	4baa      	ldr	r3, [pc, #680]	; (800677c <HAL_RCC_OscConfig+0x338>)
 80064d2:	49ab      	ldr	r1, [pc, #684]	; (8006780 <HAL_RCC_OscConfig+0x33c>)
 80064d4:	400a      	ands	r2, r1
 80064d6:	601a      	str	r2, [r3, #0]
 80064d8:	4ba8      	ldr	r3, [pc, #672]	; (800677c <HAL_RCC_OscConfig+0x338>)
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	4ba7      	ldr	r3, [pc, #668]	; (800677c <HAL_RCC_OscConfig+0x338>)
 80064de:	49a9      	ldr	r1, [pc, #676]	; (8006784 <HAL_RCC_OscConfig+0x340>)
 80064e0:	400a      	ands	r2, r1
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	e01e      	b.n	8006524 <HAL_RCC_OscConfig+0xe0>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2b05      	cmp	r3, #5
 80064ec:	d10e      	bne.n	800650c <HAL_RCC_OscConfig+0xc8>
 80064ee:	4ba3      	ldr	r3, [pc, #652]	; (800677c <HAL_RCC_OscConfig+0x338>)
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	4ba2      	ldr	r3, [pc, #648]	; (800677c <HAL_RCC_OscConfig+0x338>)
 80064f4:	2180      	movs	r1, #128	; 0x80
 80064f6:	02c9      	lsls	r1, r1, #11
 80064f8:	430a      	orrs	r2, r1
 80064fa:	601a      	str	r2, [r3, #0]
 80064fc:	4b9f      	ldr	r3, [pc, #636]	; (800677c <HAL_RCC_OscConfig+0x338>)
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	4b9e      	ldr	r3, [pc, #632]	; (800677c <HAL_RCC_OscConfig+0x338>)
 8006502:	2180      	movs	r1, #128	; 0x80
 8006504:	0249      	lsls	r1, r1, #9
 8006506:	430a      	orrs	r2, r1
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	e00b      	b.n	8006524 <HAL_RCC_OscConfig+0xe0>
 800650c:	4b9b      	ldr	r3, [pc, #620]	; (800677c <HAL_RCC_OscConfig+0x338>)
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	4b9a      	ldr	r3, [pc, #616]	; (800677c <HAL_RCC_OscConfig+0x338>)
 8006512:	499b      	ldr	r1, [pc, #620]	; (8006780 <HAL_RCC_OscConfig+0x33c>)
 8006514:	400a      	ands	r2, r1
 8006516:	601a      	str	r2, [r3, #0]
 8006518:	4b98      	ldr	r3, [pc, #608]	; (800677c <HAL_RCC_OscConfig+0x338>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	4b97      	ldr	r3, [pc, #604]	; (800677c <HAL_RCC_OscConfig+0x338>)
 800651e:	4999      	ldr	r1, [pc, #612]	; (8006784 <HAL_RCC_OscConfig+0x340>)
 8006520:	400a      	ands	r2, r1
 8006522:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d014      	beq.n	8006556 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800652c:	f7fc ffdc 	bl	80034e8 <HAL_GetTick>
 8006530:	0003      	movs	r3, r0
 8006532:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006534:	e008      	b.n	8006548 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006536:	f7fc ffd7 	bl	80034e8 <HAL_GetTick>
 800653a:	0002      	movs	r2, r0
 800653c:	69bb      	ldr	r3, [r7, #24]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b64      	cmp	r3, #100	; 0x64
 8006542:	d901      	bls.n	8006548 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e2fd      	b.n	8006b44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006548:	4b8c      	ldr	r3, [pc, #560]	; (800677c <HAL_RCC_OscConfig+0x338>)
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	2380      	movs	r3, #128	; 0x80
 800654e:	029b      	lsls	r3, r3, #10
 8006550:	4013      	ands	r3, r2
 8006552:	d0f0      	beq.n	8006536 <HAL_RCC_OscConfig+0xf2>
 8006554:	e015      	b.n	8006582 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006556:	f7fc ffc7 	bl	80034e8 <HAL_GetTick>
 800655a:	0003      	movs	r3, r0
 800655c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800655e:	e008      	b.n	8006572 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006560:	f7fc ffc2 	bl	80034e8 <HAL_GetTick>
 8006564:	0002      	movs	r2, r0
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b64      	cmp	r3, #100	; 0x64
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e2e8      	b.n	8006b44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006572:	4b82      	ldr	r3, [pc, #520]	; (800677c <HAL_RCC_OscConfig+0x338>)
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	2380      	movs	r3, #128	; 0x80
 8006578:	029b      	lsls	r3, r3, #10
 800657a:	4013      	ands	r3, r2
 800657c:	d1f0      	bne.n	8006560 <HAL_RCC_OscConfig+0x11c>
 800657e:	e000      	b.n	8006582 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006580:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2202      	movs	r2, #2
 8006588:	4013      	ands	r3, r2
 800658a:	d100      	bne.n	800658e <HAL_RCC_OscConfig+0x14a>
 800658c:	e06c      	b.n	8006668 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800658e:	4b7b      	ldr	r3, [pc, #492]	; (800677c <HAL_RCC_OscConfig+0x338>)
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	220c      	movs	r2, #12
 8006594:	4013      	ands	r3, r2
 8006596:	d00e      	beq.n	80065b6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006598:	4b78      	ldr	r3, [pc, #480]	; (800677c <HAL_RCC_OscConfig+0x338>)
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	220c      	movs	r2, #12
 800659e:	4013      	ands	r3, r2
 80065a0:	2b08      	cmp	r3, #8
 80065a2:	d11f      	bne.n	80065e4 <HAL_RCC_OscConfig+0x1a0>
 80065a4:	4b75      	ldr	r3, [pc, #468]	; (800677c <HAL_RCC_OscConfig+0x338>)
 80065a6:	685a      	ldr	r2, [r3, #4]
 80065a8:	23c0      	movs	r3, #192	; 0xc0
 80065aa:	025b      	lsls	r3, r3, #9
 80065ac:	401a      	ands	r2, r3
 80065ae:	2380      	movs	r3, #128	; 0x80
 80065b0:	021b      	lsls	r3, r3, #8
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d116      	bne.n	80065e4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065b6:	4b71      	ldr	r3, [pc, #452]	; (800677c <HAL_RCC_OscConfig+0x338>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2202      	movs	r2, #2
 80065bc:	4013      	ands	r3, r2
 80065be:	d005      	beq.n	80065cc <HAL_RCC_OscConfig+0x188>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d001      	beq.n	80065cc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e2bb      	b.n	8006b44 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065cc:	4b6b      	ldr	r3, [pc, #428]	; (800677c <HAL_RCC_OscConfig+0x338>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	22f8      	movs	r2, #248	; 0xf8
 80065d2:	4393      	bics	r3, r2
 80065d4:	0019      	movs	r1, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	00da      	lsls	r2, r3, #3
 80065dc:	4b67      	ldr	r3, [pc, #412]	; (800677c <HAL_RCC_OscConfig+0x338>)
 80065de:	430a      	orrs	r2, r1
 80065e0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065e2:	e041      	b.n	8006668 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d024      	beq.n	8006636 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065ec:	4b63      	ldr	r3, [pc, #396]	; (800677c <HAL_RCC_OscConfig+0x338>)
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	4b62      	ldr	r3, [pc, #392]	; (800677c <HAL_RCC_OscConfig+0x338>)
 80065f2:	2101      	movs	r1, #1
 80065f4:	430a      	orrs	r2, r1
 80065f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065f8:	f7fc ff76 	bl	80034e8 <HAL_GetTick>
 80065fc:	0003      	movs	r3, r0
 80065fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006600:	e008      	b.n	8006614 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006602:	f7fc ff71 	bl	80034e8 <HAL_GetTick>
 8006606:	0002      	movs	r2, r0
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	2b02      	cmp	r3, #2
 800660e:	d901      	bls.n	8006614 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006610:	2303      	movs	r3, #3
 8006612:	e297      	b.n	8006b44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006614:	4b59      	ldr	r3, [pc, #356]	; (800677c <HAL_RCC_OscConfig+0x338>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2202      	movs	r2, #2
 800661a:	4013      	ands	r3, r2
 800661c:	d0f1      	beq.n	8006602 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800661e:	4b57      	ldr	r3, [pc, #348]	; (800677c <HAL_RCC_OscConfig+0x338>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	22f8      	movs	r2, #248	; 0xf8
 8006624:	4393      	bics	r3, r2
 8006626:	0019      	movs	r1, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	00da      	lsls	r2, r3, #3
 800662e:	4b53      	ldr	r3, [pc, #332]	; (800677c <HAL_RCC_OscConfig+0x338>)
 8006630:	430a      	orrs	r2, r1
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	e018      	b.n	8006668 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006636:	4b51      	ldr	r3, [pc, #324]	; (800677c <HAL_RCC_OscConfig+0x338>)
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	4b50      	ldr	r3, [pc, #320]	; (800677c <HAL_RCC_OscConfig+0x338>)
 800663c:	2101      	movs	r1, #1
 800663e:	438a      	bics	r2, r1
 8006640:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006642:	f7fc ff51 	bl	80034e8 <HAL_GetTick>
 8006646:	0003      	movs	r3, r0
 8006648:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800664a:	e008      	b.n	800665e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800664c:	f7fc ff4c 	bl	80034e8 <HAL_GetTick>
 8006650:	0002      	movs	r2, r0
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	1ad3      	subs	r3, r2, r3
 8006656:	2b02      	cmp	r3, #2
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e272      	b.n	8006b44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800665e:	4b47      	ldr	r3, [pc, #284]	; (800677c <HAL_RCC_OscConfig+0x338>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2202      	movs	r2, #2
 8006664:	4013      	ands	r3, r2
 8006666:	d1f1      	bne.n	800664c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2208      	movs	r2, #8
 800666e:	4013      	ands	r3, r2
 8006670:	d036      	beq.n	80066e0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d019      	beq.n	80066ae <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800667a:	4b40      	ldr	r3, [pc, #256]	; (800677c <HAL_RCC_OscConfig+0x338>)
 800667c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800667e:	4b3f      	ldr	r3, [pc, #252]	; (800677c <HAL_RCC_OscConfig+0x338>)
 8006680:	2101      	movs	r1, #1
 8006682:	430a      	orrs	r2, r1
 8006684:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006686:	f7fc ff2f 	bl	80034e8 <HAL_GetTick>
 800668a:	0003      	movs	r3, r0
 800668c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800668e:	e008      	b.n	80066a2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006690:	f7fc ff2a 	bl	80034e8 <HAL_GetTick>
 8006694:	0002      	movs	r2, r0
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	2b02      	cmp	r3, #2
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e250      	b.n	8006b44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066a2:	4b36      	ldr	r3, [pc, #216]	; (800677c <HAL_RCC_OscConfig+0x338>)
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	2202      	movs	r2, #2
 80066a8:	4013      	ands	r3, r2
 80066aa:	d0f1      	beq.n	8006690 <HAL_RCC_OscConfig+0x24c>
 80066ac:	e018      	b.n	80066e0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066ae:	4b33      	ldr	r3, [pc, #204]	; (800677c <HAL_RCC_OscConfig+0x338>)
 80066b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066b2:	4b32      	ldr	r3, [pc, #200]	; (800677c <HAL_RCC_OscConfig+0x338>)
 80066b4:	2101      	movs	r1, #1
 80066b6:	438a      	bics	r2, r1
 80066b8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066ba:	f7fc ff15 	bl	80034e8 <HAL_GetTick>
 80066be:	0003      	movs	r3, r0
 80066c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066c2:	e008      	b.n	80066d6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80066c4:	f7fc ff10 	bl	80034e8 <HAL_GetTick>
 80066c8:	0002      	movs	r2, r0
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e236      	b.n	8006b44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066d6:	4b29      	ldr	r3, [pc, #164]	; (800677c <HAL_RCC_OscConfig+0x338>)
 80066d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066da:	2202      	movs	r2, #2
 80066dc:	4013      	ands	r3, r2
 80066de:	d1f1      	bne.n	80066c4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2204      	movs	r2, #4
 80066e6:	4013      	ands	r3, r2
 80066e8:	d100      	bne.n	80066ec <HAL_RCC_OscConfig+0x2a8>
 80066ea:	e0b5      	b.n	8006858 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066ec:	201f      	movs	r0, #31
 80066ee:	183b      	adds	r3, r7, r0
 80066f0:	2200      	movs	r2, #0
 80066f2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066f4:	4b21      	ldr	r3, [pc, #132]	; (800677c <HAL_RCC_OscConfig+0x338>)
 80066f6:	69da      	ldr	r2, [r3, #28]
 80066f8:	2380      	movs	r3, #128	; 0x80
 80066fa:	055b      	lsls	r3, r3, #21
 80066fc:	4013      	ands	r3, r2
 80066fe:	d110      	bne.n	8006722 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006700:	4b1e      	ldr	r3, [pc, #120]	; (800677c <HAL_RCC_OscConfig+0x338>)
 8006702:	69da      	ldr	r2, [r3, #28]
 8006704:	4b1d      	ldr	r3, [pc, #116]	; (800677c <HAL_RCC_OscConfig+0x338>)
 8006706:	2180      	movs	r1, #128	; 0x80
 8006708:	0549      	lsls	r1, r1, #21
 800670a:	430a      	orrs	r2, r1
 800670c:	61da      	str	r2, [r3, #28]
 800670e:	4b1b      	ldr	r3, [pc, #108]	; (800677c <HAL_RCC_OscConfig+0x338>)
 8006710:	69da      	ldr	r2, [r3, #28]
 8006712:	2380      	movs	r3, #128	; 0x80
 8006714:	055b      	lsls	r3, r3, #21
 8006716:	4013      	ands	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800671c:	183b      	adds	r3, r7, r0
 800671e:	2201      	movs	r2, #1
 8006720:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006722:	4b19      	ldr	r3, [pc, #100]	; (8006788 <HAL_RCC_OscConfig+0x344>)
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	2380      	movs	r3, #128	; 0x80
 8006728:	005b      	lsls	r3, r3, #1
 800672a:	4013      	ands	r3, r2
 800672c:	d11a      	bne.n	8006764 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800672e:	4b16      	ldr	r3, [pc, #88]	; (8006788 <HAL_RCC_OscConfig+0x344>)
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	4b15      	ldr	r3, [pc, #84]	; (8006788 <HAL_RCC_OscConfig+0x344>)
 8006734:	2180      	movs	r1, #128	; 0x80
 8006736:	0049      	lsls	r1, r1, #1
 8006738:	430a      	orrs	r2, r1
 800673a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800673c:	f7fc fed4 	bl	80034e8 <HAL_GetTick>
 8006740:	0003      	movs	r3, r0
 8006742:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006744:	e008      	b.n	8006758 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006746:	f7fc fecf 	bl	80034e8 <HAL_GetTick>
 800674a:	0002      	movs	r2, r0
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	2b64      	cmp	r3, #100	; 0x64
 8006752:	d901      	bls.n	8006758 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e1f5      	b.n	8006b44 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006758:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <HAL_RCC_OscConfig+0x344>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	2380      	movs	r3, #128	; 0x80
 800675e:	005b      	lsls	r3, r3, #1
 8006760:	4013      	ands	r3, r2
 8006762:	d0f0      	beq.n	8006746 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d10f      	bne.n	800678c <HAL_RCC_OscConfig+0x348>
 800676c:	4b03      	ldr	r3, [pc, #12]	; (800677c <HAL_RCC_OscConfig+0x338>)
 800676e:	6a1a      	ldr	r2, [r3, #32]
 8006770:	4b02      	ldr	r3, [pc, #8]	; (800677c <HAL_RCC_OscConfig+0x338>)
 8006772:	2101      	movs	r1, #1
 8006774:	430a      	orrs	r2, r1
 8006776:	621a      	str	r2, [r3, #32]
 8006778:	e036      	b.n	80067e8 <HAL_RCC_OscConfig+0x3a4>
 800677a:	46c0      	nop			; (mov r8, r8)
 800677c:	40021000 	.word	0x40021000
 8006780:	fffeffff 	.word	0xfffeffff
 8006784:	fffbffff 	.word	0xfffbffff
 8006788:	40007000 	.word	0x40007000
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10c      	bne.n	80067ae <HAL_RCC_OscConfig+0x36a>
 8006794:	4bca      	ldr	r3, [pc, #808]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 8006796:	6a1a      	ldr	r2, [r3, #32]
 8006798:	4bc9      	ldr	r3, [pc, #804]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 800679a:	2101      	movs	r1, #1
 800679c:	438a      	bics	r2, r1
 800679e:	621a      	str	r2, [r3, #32]
 80067a0:	4bc7      	ldr	r3, [pc, #796]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80067a2:	6a1a      	ldr	r2, [r3, #32]
 80067a4:	4bc6      	ldr	r3, [pc, #792]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80067a6:	2104      	movs	r1, #4
 80067a8:	438a      	bics	r2, r1
 80067aa:	621a      	str	r2, [r3, #32]
 80067ac:	e01c      	b.n	80067e8 <HAL_RCC_OscConfig+0x3a4>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	2b05      	cmp	r3, #5
 80067b4:	d10c      	bne.n	80067d0 <HAL_RCC_OscConfig+0x38c>
 80067b6:	4bc2      	ldr	r3, [pc, #776]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80067b8:	6a1a      	ldr	r2, [r3, #32]
 80067ba:	4bc1      	ldr	r3, [pc, #772]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80067bc:	2104      	movs	r1, #4
 80067be:	430a      	orrs	r2, r1
 80067c0:	621a      	str	r2, [r3, #32]
 80067c2:	4bbf      	ldr	r3, [pc, #764]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80067c4:	6a1a      	ldr	r2, [r3, #32]
 80067c6:	4bbe      	ldr	r3, [pc, #760]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80067c8:	2101      	movs	r1, #1
 80067ca:	430a      	orrs	r2, r1
 80067cc:	621a      	str	r2, [r3, #32]
 80067ce:	e00b      	b.n	80067e8 <HAL_RCC_OscConfig+0x3a4>
 80067d0:	4bbb      	ldr	r3, [pc, #748]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80067d2:	6a1a      	ldr	r2, [r3, #32]
 80067d4:	4bba      	ldr	r3, [pc, #744]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80067d6:	2101      	movs	r1, #1
 80067d8:	438a      	bics	r2, r1
 80067da:	621a      	str	r2, [r3, #32]
 80067dc:	4bb8      	ldr	r3, [pc, #736]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80067de:	6a1a      	ldr	r2, [r3, #32]
 80067e0:	4bb7      	ldr	r3, [pc, #732]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80067e2:	2104      	movs	r1, #4
 80067e4:	438a      	bics	r2, r1
 80067e6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d014      	beq.n	800681a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067f0:	f7fc fe7a 	bl	80034e8 <HAL_GetTick>
 80067f4:	0003      	movs	r3, r0
 80067f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067f8:	e009      	b.n	800680e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067fa:	f7fc fe75 	bl	80034e8 <HAL_GetTick>
 80067fe:	0002      	movs	r2, r0
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	4aaf      	ldr	r2, [pc, #700]	; (8006ac4 <HAL_RCC_OscConfig+0x680>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d901      	bls.n	800680e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800680a:	2303      	movs	r3, #3
 800680c:	e19a      	b.n	8006b44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800680e:	4bac      	ldr	r3, [pc, #688]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 8006810:	6a1b      	ldr	r3, [r3, #32]
 8006812:	2202      	movs	r2, #2
 8006814:	4013      	ands	r3, r2
 8006816:	d0f0      	beq.n	80067fa <HAL_RCC_OscConfig+0x3b6>
 8006818:	e013      	b.n	8006842 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800681a:	f7fc fe65 	bl	80034e8 <HAL_GetTick>
 800681e:	0003      	movs	r3, r0
 8006820:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006822:	e009      	b.n	8006838 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006824:	f7fc fe60 	bl	80034e8 <HAL_GetTick>
 8006828:	0002      	movs	r2, r0
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	4aa5      	ldr	r2, [pc, #660]	; (8006ac4 <HAL_RCC_OscConfig+0x680>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d901      	bls.n	8006838 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e185      	b.n	8006b44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006838:	4ba1      	ldr	r3, [pc, #644]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	2202      	movs	r2, #2
 800683e:	4013      	ands	r3, r2
 8006840:	d1f0      	bne.n	8006824 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006842:	231f      	movs	r3, #31
 8006844:	18fb      	adds	r3, r7, r3
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d105      	bne.n	8006858 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800684c:	4b9c      	ldr	r3, [pc, #624]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 800684e:	69da      	ldr	r2, [r3, #28]
 8006850:	4b9b      	ldr	r3, [pc, #620]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 8006852:	499d      	ldr	r1, [pc, #628]	; (8006ac8 <HAL_RCC_OscConfig+0x684>)
 8006854:	400a      	ands	r2, r1
 8006856:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	2210      	movs	r2, #16
 800685e:	4013      	ands	r3, r2
 8006860:	d063      	beq.n	800692a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d12a      	bne.n	80068c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800686a:	4b95      	ldr	r3, [pc, #596]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 800686c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800686e:	4b94      	ldr	r3, [pc, #592]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 8006870:	2104      	movs	r1, #4
 8006872:	430a      	orrs	r2, r1
 8006874:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006876:	4b92      	ldr	r3, [pc, #584]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 8006878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800687a:	4b91      	ldr	r3, [pc, #580]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 800687c:	2101      	movs	r1, #1
 800687e:	430a      	orrs	r2, r1
 8006880:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006882:	f7fc fe31 	bl	80034e8 <HAL_GetTick>
 8006886:	0003      	movs	r3, r0
 8006888:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800688a:	e008      	b.n	800689e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800688c:	f7fc fe2c 	bl	80034e8 <HAL_GetTick>
 8006890:	0002      	movs	r2, r0
 8006892:	69bb      	ldr	r3, [r7, #24]
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	2b02      	cmp	r3, #2
 8006898:	d901      	bls.n	800689e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e152      	b.n	8006b44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800689e:	4b88      	ldr	r3, [pc, #544]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80068a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a2:	2202      	movs	r2, #2
 80068a4:	4013      	ands	r3, r2
 80068a6:	d0f1      	beq.n	800688c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80068a8:	4b85      	ldr	r3, [pc, #532]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80068aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ac:	22f8      	movs	r2, #248	; 0xf8
 80068ae:	4393      	bics	r3, r2
 80068b0:	0019      	movs	r1, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	00da      	lsls	r2, r3, #3
 80068b8:	4b81      	ldr	r3, [pc, #516]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80068ba:	430a      	orrs	r2, r1
 80068bc:	635a      	str	r2, [r3, #52]	; 0x34
 80068be:	e034      	b.n	800692a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	3305      	adds	r3, #5
 80068c6:	d111      	bne.n	80068ec <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80068c8:	4b7d      	ldr	r3, [pc, #500]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80068ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068cc:	4b7c      	ldr	r3, [pc, #496]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80068ce:	2104      	movs	r1, #4
 80068d0:	438a      	bics	r2, r1
 80068d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80068d4:	4b7a      	ldr	r3, [pc, #488]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80068d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d8:	22f8      	movs	r2, #248	; 0xf8
 80068da:	4393      	bics	r3, r2
 80068dc:	0019      	movs	r1, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	00da      	lsls	r2, r3, #3
 80068e4:	4b76      	ldr	r3, [pc, #472]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80068e6:	430a      	orrs	r2, r1
 80068e8:	635a      	str	r2, [r3, #52]	; 0x34
 80068ea:	e01e      	b.n	800692a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80068ec:	4b74      	ldr	r3, [pc, #464]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80068ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068f0:	4b73      	ldr	r3, [pc, #460]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80068f2:	2104      	movs	r1, #4
 80068f4:	430a      	orrs	r2, r1
 80068f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80068f8:	4b71      	ldr	r3, [pc, #452]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80068fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068fc:	4b70      	ldr	r3, [pc, #448]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80068fe:	2101      	movs	r1, #1
 8006900:	438a      	bics	r2, r1
 8006902:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006904:	f7fc fdf0 	bl	80034e8 <HAL_GetTick>
 8006908:	0003      	movs	r3, r0
 800690a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800690c:	e008      	b.n	8006920 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800690e:	f7fc fdeb 	bl	80034e8 <HAL_GetTick>
 8006912:	0002      	movs	r2, r0
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	2b02      	cmp	r3, #2
 800691a:	d901      	bls.n	8006920 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e111      	b.n	8006b44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006920:	4b67      	ldr	r3, [pc, #412]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 8006922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006924:	2202      	movs	r2, #2
 8006926:	4013      	ands	r3, r2
 8006928:	d1f1      	bne.n	800690e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2220      	movs	r2, #32
 8006930:	4013      	ands	r3, r2
 8006932:	d05c      	beq.n	80069ee <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006934:	4b62      	ldr	r3, [pc, #392]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	220c      	movs	r2, #12
 800693a:	4013      	ands	r3, r2
 800693c:	2b0c      	cmp	r3, #12
 800693e:	d00e      	beq.n	800695e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006940:	4b5f      	ldr	r3, [pc, #380]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	220c      	movs	r2, #12
 8006946:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006948:	2b08      	cmp	r3, #8
 800694a:	d114      	bne.n	8006976 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800694c:	4b5c      	ldr	r3, [pc, #368]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	23c0      	movs	r3, #192	; 0xc0
 8006952:	025b      	lsls	r3, r3, #9
 8006954:	401a      	ands	r2, r3
 8006956:	23c0      	movs	r3, #192	; 0xc0
 8006958:	025b      	lsls	r3, r3, #9
 800695a:	429a      	cmp	r2, r3
 800695c:	d10b      	bne.n	8006976 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800695e:	4b58      	ldr	r3, [pc, #352]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 8006960:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006962:	2380      	movs	r3, #128	; 0x80
 8006964:	025b      	lsls	r3, r3, #9
 8006966:	4013      	ands	r3, r2
 8006968:	d040      	beq.n	80069ec <HAL_RCC_OscConfig+0x5a8>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d03c      	beq.n	80069ec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e0e6      	b.n	8006b44 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d01b      	beq.n	80069b6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800697e:	4b50      	ldr	r3, [pc, #320]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 8006980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006982:	4b4f      	ldr	r3, [pc, #316]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 8006984:	2180      	movs	r1, #128	; 0x80
 8006986:	0249      	lsls	r1, r1, #9
 8006988:	430a      	orrs	r2, r1
 800698a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800698c:	f7fc fdac 	bl	80034e8 <HAL_GetTick>
 8006990:	0003      	movs	r3, r0
 8006992:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006994:	e008      	b.n	80069a8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006996:	f7fc fda7 	bl	80034e8 <HAL_GetTick>
 800699a:	0002      	movs	r2, r0
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d901      	bls.n	80069a8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e0cd      	b.n	8006b44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80069a8:	4b45      	ldr	r3, [pc, #276]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80069aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069ac:	2380      	movs	r3, #128	; 0x80
 80069ae:	025b      	lsls	r3, r3, #9
 80069b0:	4013      	ands	r3, r2
 80069b2:	d0f0      	beq.n	8006996 <HAL_RCC_OscConfig+0x552>
 80069b4:	e01b      	b.n	80069ee <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80069b6:	4b42      	ldr	r3, [pc, #264]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80069b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069ba:	4b41      	ldr	r3, [pc, #260]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80069bc:	4943      	ldr	r1, [pc, #268]	; (8006acc <HAL_RCC_OscConfig+0x688>)
 80069be:	400a      	ands	r2, r1
 80069c0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069c2:	f7fc fd91 	bl	80034e8 <HAL_GetTick>
 80069c6:	0003      	movs	r3, r0
 80069c8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80069ca:	e008      	b.n	80069de <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069cc:	f7fc fd8c 	bl	80034e8 <HAL_GetTick>
 80069d0:	0002      	movs	r2, r0
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e0b2      	b.n	8006b44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80069de:	4b38      	ldr	r3, [pc, #224]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80069e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069e2:	2380      	movs	r3, #128	; 0x80
 80069e4:	025b      	lsls	r3, r3, #9
 80069e6:	4013      	ands	r3, r2
 80069e8:	d1f0      	bne.n	80069cc <HAL_RCC_OscConfig+0x588>
 80069ea:	e000      	b.n	80069ee <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80069ec:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d100      	bne.n	80069f8 <HAL_RCC_OscConfig+0x5b4>
 80069f6:	e0a4      	b.n	8006b42 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069f8:	4b31      	ldr	r3, [pc, #196]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	220c      	movs	r2, #12
 80069fe:	4013      	ands	r3, r2
 8006a00:	2b08      	cmp	r3, #8
 8006a02:	d100      	bne.n	8006a06 <HAL_RCC_OscConfig+0x5c2>
 8006a04:	e078      	b.n	8006af8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d14c      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a0e:	4b2c      	ldr	r3, [pc, #176]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	4b2b      	ldr	r3, [pc, #172]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 8006a14:	492e      	ldr	r1, [pc, #184]	; (8006ad0 <HAL_RCC_OscConfig+0x68c>)
 8006a16:	400a      	ands	r2, r1
 8006a18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a1a:	f7fc fd65 	bl	80034e8 <HAL_GetTick>
 8006a1e:	0003      	movs	r3, r0
 8006a20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a22:	e008      	b.n	8006a36 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a24:	f7fc fd60 	bl	80034e8 <HAL_GetTick>
 8006a28:	0002      	movs	r2, r0
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d901      	bls.n	8006a36 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8006a32:	2303      	movs	r3, #3
 8006a34:	e086      	b.n	8006b44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a36:	4b22      	ldr	r3, [pc, #136]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	2380      	movs	r3, #128	; 0x80
 8006a3c:	049b      	lsls	r3, r3, #18
 8006a3e:	4013      	ands	r3, r2
 8006a40:	d1f0      	bne.n	8006a24 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a42:	4b1f      	ldr	r3, [pc, #124]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 8006a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a46:	220f      	movs	r2, #15
 8006a48:	4393      	bics	r3, r2
 8006a4a:	0019      	movs	r1, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a50:	4b1b      	ldr	r3, [pc, #108]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 8006a52:	430a      	orrs	r2, r1
 8006a54:	62da      	str	r2, [r3, #44]	; 0x2c
 8006a56:	4b1a      	ldr	r3, [pc, #104]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	4a1e      	ldr	r2, [pc, #120]	; (8006ad4 <HAL_RCC_OscConfig+0x690>)
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	0019      	movs	r1, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	4b15      	ldr	r3, [pc, #84]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a70:	4b13      	ldr	r3, [pc, #76]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	4b12      	ldr	r3, [pc, #72]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 8006a76:	2180      	movs	r1, #128	; 0x80
 8006a78:	0449      	lsls	r1, r1, #17
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a7e:	f7fc fd33 	bl	80034e8 <HAL_GetTick>
 8006a82:	0003      	movs	r3, r0
 8006a84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a86:	e008      	b.n	8006a9a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a88:	f7fc fd2e 	bl	80034e8 <HAL_GetTick>
 8006a8c:	0002      	movs	r2, r0
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e054      	b.n	8006b44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a9a:	4b09      	ldr	r3, [pc, #36]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	2380      	movs	r3, #128	; 0x80
 8006aa0:	049b      	lsls	r3, r3, #18
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	d0f0      	beq.n	8006a88 <HAL_RCC_OscConfig+0x644>
 8006aa6:	e04c      	b.n	8006b42 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aa8:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	4b04      	ldr	r3, [pc, #16]	; (8006ac0 <HAL_RCC_OscConfig+0x67c>)
 8006aae:	4908      	ldr	r1, [pc, #32]	; (8006ad0 <HAL_RCC_OscConfig+0x68c>)
 8006ab0:	400a      	ands	r2, r1
 8006ab2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ab4:	f7fc fd18 	bl	80034e8 <HAL_GetTick>
 8006ab8:	0003      	movs	r3, r0
 8006aba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006abc:	e015      	b.n	8006aea <HAL_RCC_OscConfig+0x6a6>
 8006abe:	46c0      	nop			; (mov r8, r8)
 8006ac0:	40021000 	.word	0x40021000
 8006ac4:	00001388 	.word	0x00001388
 8006ac8:	efffffff 	.word	0xefffffff
 8006acc:	fffeffff 	.word	0xfffeffff
 8006ad0:	feffffff 	.word	0xfeffffff
 8006ad4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ad8:	f7fc fd06 	bl	80034e8 <HAL_GetTick>
 8006adc:	0002      	movs	r2, r0
 8006ade:	69bb      	ldr	r3, [r7, #24]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e02c      	b.n	8006b44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006aea:	4b18      	ldr	r3, [pc, #96]	; (8006b4c <HAL_RCC_OscConfig+0x708>)
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	2380      	movs	r3, #128	; 0x80
 8006af0:	049b      	lsls	r3, r3, #18
 8006af2:	4013      	ands	r3, r2
 8006af4:	d1f0      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x694>
 8006af6:	e024      	b.n	8006b42 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d101      	bne.n	8006b04 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e01f      	b.n	8006b44 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006b04:	4b11      	ldr	r3, [pc, #68]	; (8006b4c <HAL_RCC_OscConfig+0x708>)
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006b0a:	4b10      	ldr	r3, [pc, #64]	; (8006b4c <HAL_RCC_OscConfig+0x708>)
 8006b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	23c0      	movs	r3, #192	; 0xc0
 8006b14:	025b      	lsls	r3, r3, #9
 8006b16:	401a      	ands	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d10e      	bne.n	8006b3e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	220f      	movs	r2, #15
 8006b24:	401a      	ands	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d107      	bne.n	8006b3e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	23f0      	movs	r3, #240	; 0xf0
 8006b32:	039b      	lsls	r3, r3, #14
 8006b34:	401a      	ands	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d001      	beq.n	8006b42 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e000      	b.n	8006b44 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	0018      	movs	r0, r3
 8006b46:	46bd      	mov	sp, r7
 8006b48:	b008      	add	sp, #32
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	40021000 	.word	0x40021000

08006b50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e0bf      	b.n	8006ce4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b64:	4b61      	ldr	r3, [pc, #388]	; (8006cec <HAL_RCC_ClockConfig+0x19c>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d911      	bls.n	8006b96 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b72:	4b5e      	ldr	r3, [pc, #376]	; (8006cec <HAL_RCC_ClockConfig+0x19c>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2201      	movs	r2, #1
 8006b78:	4393      	bics	r3, r2
 8006b7a:	0019      	movs	r1, r3
 8006b7c:	4b5b      	ldr	r3, [pc, #364]	; (8006cec <HAL_RCC_ClockConfig+0x19c>)
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b84:	4b59      	ldr	r3, [pc, #356]	; (8006cec <HAL_RCC_ClockConfig+0x19c>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d001      	beq.n	8006b96 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e0a6      	b.n	8006ce4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	d015      	beq.n	8006bcc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2204      	movs	r2, #4
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	d006      	beq.n	8006bb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006baa:	4b51      	ldr	r3, [pc, #324]	; (8006cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8006bac:	685a      	ldr	r2, [r3, #4]
 8006bae:	4b50      	ldr	r3, [pc, #320]	; (8006cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8006bb0:	21e0      	movs	r1, #224	; 0xe0
 8006bb2:	00c9      	lsls	r1, r1, #3
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bb8:	4b4d      	ldr	r3, [pc, #308]	; (8006cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	22f0      	movs	r2, #240	; 0xf0
 8006bbe:	4393      	bics	r3, r2
 8006bc0:	0019      	movs	r1, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	689a      	ldr	r2, [r3, #8]
 8006bc6:	4b4a      	ldr	r3, [pc, #296]	; (8006cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	d04c      	beq.n	8006c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d107      	bne.n	8006bee <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bde:	4b44      	ldr	r3, [pc, #272]	; (8006cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	2380      	movs	r3, #128	; 0x80
 8006be4:	029b      	lsls	r3, r3, #10
 8006be6:	4013      	ands	r3, r2
 8006be8:	d120      	bne.n	8006c2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e07a      	b.n	8006ce4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d107      	bne.n	8006c06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bf6:	4b3e      	ldr	r3, [pc, #248]	; (8006cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	2380      	movs	r3, #128	; 0x80
 8006bfc:	049b      	lsls	r3, r3, #18
 8006bfe:	4013      	ands	r3, r2
 8006c00:	d114      	bne.n	8006c2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e06e      	b.n	8006ce4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	2b03      	cmp	r3, #3
 8006c0c:	d107      	bne.n	8006c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006c0e:	4b38      	ldr	r3, [pc, #224]	; (8006cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8006c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c12:	2380      	movs	r3, #128	; 0x80
 8006c14:	025b      	lsls	r3, r3, #9
 8006c16:	4013      	ands	r3, r2
 8006c18:	d108      	bne.n	8006c2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e062      	b.n	8006ce4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c1e:	4b34      	ldr	r3, [pc, #208]	; (8006cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2202      	movs	r2, #2
 8006c24:	4013      	ands	r3, r2
 8006c26:	d101      	bne.n	8006c2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e05b      	b.n	8006ce4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c2c:	4b30      	ldr	r3, [pc, #192]	; (8006cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	2203      	movs	r2, #3
 8006c32:	4393      	bics	r3, r2
 8006c34:	0019      	movs	r1, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685a      	ldr	r2, [r3, #4]
 8006c3a:	4b2d      	ldr	r3, [pc, #180]	; (8006cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c40:	f7fc fc52 	bl	80034e8 <HAL_GetTick>
 8006c44:	0003      	movs	r3, r0
 8006c46:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c48:	e009      	b.n	8006c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c4a:	f7fc fc4d 	bl	80034e8 <HAL_GetTick>
 8006c4e:	0002      	movs	r2, r0
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	4a27      	ldr	r2, [pc, #156]	; (8006cf4 <HAL_RCC_ClockConfig+0x1a4>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e042      	b.n	8006ce4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c5e:	4b24      	ldr	r3, [pc, #144]	; (8006cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	220c      	movs	r2, #12
 8006c64:	401a      	ands	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d1ec      	bne.n	8006c4a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c70:	4b1e      	ldr	r3, [pc, #120]	; (8006cec <HAL_RCC_ClockConfig+0x19c>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2201      	movs	r2, #1
 8006c76:	4013      	ands	r3, r2
 8006c78:	683a      	ldr	r2, [r7, #0]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d211      	bcs.n	8006ca2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c7e:	4b1b      	ldr	r3, [pc, #108]	; (8006cec <HAL_RCC_ClockConfig+0x19c>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2201      	movs	r2, #1
 8006c84:	4393      	bics	r3, r2
 8006c86:	0019      	movs	r1, r3
 8006c88:	4b18      	ldr	r3, [pc, #96]	; (8006cec <HAL_RCC_ClockConfig+0x19c>)
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c90:	4b16      	ldr	r3, [pc, #88]	; (8006cec <HAL_RCC_ClockConfig+0x19c>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2201      	movs	r2, #1
 8006c96:	4013      	ands	r3, r2
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d001      	beq.n	8006ca2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e020      	b.n	8006ce4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2204      	movs	r2, #4
 8006ca8:	4013      	ands	r3, r2
 8006caa:	d009      	beq.n	8006cc0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006cac:	4b10      	ldr	r3, [pc, #64]	; (8006cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	4a11      	ldr	r2, [pc, #68]	; (8006cf8 <HAL_RCC_ClockConfig+0x1a8>)
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	0019      	movs	r1, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68da      	ldr	r2, [r3, #12]
 8006cba:	4b0d      	ldr	r3, [pc, #52]	; (8006cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006cc0:	f000 f820 	bl	8006d04 <HAL_RCC_GetSysClockFreq>
 8006cc4:	0001      	movs	r1, r0
 8006cc6:	4b0a      	ldr	r3, [pc, #40]	; (8006cf0 <HAL_RCC_ClockConfig+0x1a0>)
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	091b      	lsrs	r3, r3, #4
 8006ccc:	220f      	movs	r2, #15
 8006cce:	4013      	ands	r3, r2
 8006cd0:	4a0a      	ldr	r2, [pc, #40]	; (8006cfc <HAL_RCC_ClockConfig+0x1ac>)
 8006cd2:	5cd3      	ldrb	r3, [r2, r3]
 8006cd4:	000a      	movs	r2, r1
 8006cd6:	40da      	lsrs	r2, r3
 8006cd8:	4b09      	ldr	r3, [pc, #36]	; (8006d00 <HAL_RCC_ClockConfig+0x1b0>)
 8006cda:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006cdc:	2003      	movs	r0, #3
 8006cde:	f7fc fbbd 	bl	800345c <HAL_InitTick>
  
  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	0018      	movs	r0, r3
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	b004      	add	sp, #16
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	40022000 	.word	0x40022000
 8006cf0:	40021000 	.word	0x40021000
 8006cf4:	00001388 	.word	0x00001388
 8006cf8:	fffff8ff 	.word	0xfffff8ff
 8006cfc:	0800e4a4 	.word	0x0800e4a4
 8006d00:	20000000 	.word	0x20000000

08006d04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d04:	b590      	push	{r4, r7, lr}
 8006d06:	b08f      	sub	sp, #60	; 0x3c
 8006d08:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8006d0a:	2314      	movs	r3, #20
 8006d0c:	18fb      	adds	r3, r7, r3
 8006d0e:	4a38      	ldr	r2, [pc, #224]	; (8006df0 <HAL_RCC_GetSysClockFreq+0xec>)
 8006d10:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006d12:	c313      	stmia	r3!, {r0, r1, r4}
 8006d14:	6812      	ldr	r2, [r2, #0]
 8006d16:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8006d18:	1d3b      	adds	r3, r7, #4
 8006d1a:	4a36      	ldr	r2, [pc, #216]	; (8006df4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8006d1c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8006d1e:	c313      	stmia	r3!, {r0, r1, r4}
 8006d20:	6812      	ldr	r2, [r2, #0]
 8006d22:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d28:	2300      	movs	r3, #0
 8006d2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d30:	2300      	movs	r3, #0
 8006d32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8006d38:	4b2f      	ldr	r3, [pc, #188]	; (8006df8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d40:	220c      	movs	r2, #12
 8006d42:	4013      	ands	r3, r2
 8006d44:	2b0c      	cmp	r3, #12
 8006d46:	d047      	beq.n	8006dd8 <HAL_RCC_GetSysClockFreq+0xd4>
 8006d48:	d849      	bhi.n	8006dde <HAL_RCC_GetSysClockFreq+0xda>
 8006d4a:	2b04      	cmp	r3, #4
 8006d4c:	d002      	beq.n	8006d54 <HAL_RCC_GetSysClockFreq+0x50>
 8006d4e:	2b08      	cmp	r3, #8
 8006d50:	d003      	beq.n	8006d5a <HAL_RCC_GetSysClockFreq+0x56>
 8006d52:	e044      	b.n	8006dde <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006d54:	4b29      	ldr	r3, [pc, #164]	; (8006dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d56:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006d58:	e044      	b.n	8006de4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8006d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5c:	0c9b      	lsrs	r3, r3, #18
 8006d5e:	220f      	movs	r2, #15
 8006d60:	4013      	ands	r3, r2
 8006d62:	2214      	movs	r2, #20
 8006d64:	18ba      	adds	r2, r7, r2
 8006d66:	5cd3      	ldrb	r3, [r2, r3]
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8006d6a:	4b23      	ldr	r3, [pc, #140]	; (8006df8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8006d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6e:	220f      	movs	r2, #15
 8006d70:	4013      	ands	r3, r2
 8006d72:	1d3a      	adds	r2, r7, #4
 8006d74:	5cd3      	ldrb	r3, [r2, r3]
 8006d76:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d7a:	23c0      	movs	r3, #192	; 0xc0
 8006d7c:	025b      	lsls	r3, r3, #9
 8006d7e:	401a      	ands	r2, r3
 8006d80:	2380      	movs	r3, #128	; 0x80
 8006d82:	025b      	lsls	r3, r3, #9
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d109      	bne.n	8006d9c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006d88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d8a:	481c      	ldr	r0, [pc, #112]	; (8006dfc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006d8c:	f7f9 f9ce 	bl	800012c <__udivsi3>
 8006d90:	0003      	movs	r3, r0
 8006d92:	001a      	movs	r2, r3
 8006d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d96:	4353      	muls	r3, r2
 8006d98:	637b      	str	r3, [r7, #52]	; 0x34
 8006d9a:	e01a      	b.n	8006dd2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8006d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d9e:	23c0      	movs	r3, #192	; 0xc0
 8006da0:	025b      	lsls	r3, r3, #9
 8006da2:	401a      	ands	r2, r3
 8006da4:	23c0      	movs	r3, #192	; 0xc0
 8006da6:	025b      	lsls	r3, r3, #9
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d109      	bne.n	8006dc0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006dac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dae:	4814      	ldr	r0, [pc, #80]	; (8006e00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006db0:	f7f9 f9bc 	bl	800012c <__udivsi3>
 8006db4:	0003      	movs	r3, r0
 8006db6:	001a      	movs	r2, r3
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	4353      	muls	r3, r2
 8006dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8006dbe:	e008      	b.n	8006dd2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006dc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dc2:	4810      	ldr	r0, [pc, #64]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x100>)
 8006dc4:	f7f9 f9b2 	bl	800012c <__udivsi3>
 8006dc8:	0003      	movs	r3, r0
 8006dca:	001a      	movs	r2, r3
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	4353      	muls	r3, r2
 8006dd0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006dd6:	e005      	b.n	8006de4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8006dd8:	4b09      	ldr	r3, [pc, #36]	; (8006e00 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006dda:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006ddc:	e002      	b.n	8006de4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006dde:	4b09      	ldr	r3, [pc, #36]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x100>)
 8006de0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8006de2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8006de6:	0018      	movs	r0, r3
 8006de8:	46bd      	mov	sp, r7
 8006dea:	b00f      	add	sp, #60	; 0x3c
 8006dec:	bd90      	pop	{r4, r7, pc}
 8006dee:	46c0      	nop			; (mov r8, r8)
 8006df0:	0800e35c 	.word	0x0800e35c
 8006df4:	0800e36c 	.word	0x0800e36c
 8006df8:	40021000 	.word	0x40021000
 8006dfc:	00f42400 	.word	0x00f42400
 8006e00:	02dc6c00 	.word	0x02dc6c00
 8006e04:	007a1200 	.word	0x007a1200

08006e08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e0c:	4b02      	ldr	r3, [pc, #8]	; (8006e18 <HAL_RCC_GetHCLKFreq+0x10>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
}
 8006e10:	0018      	movs	r0, r3
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	46c0      	nop			; (mov r8, r8)
 8006e18:	20000000 	.word	0x20000000

08006e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8006e20:	f7ff fff2 	bl	8006e08 <HAL_RCC_GetHCLKFreq>
 8006e24:	0001      	movs	r1, r0
 8006e26:	4b06      	ldr	r3, [pc, #24]	; (8006e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	0a1b      	lsrs	r3, r3, #8
 8006e2c:	2207      	movs	r2, #7
 8006e2e:	4013      	ands	r3, r2
 8006e30:	4a04      	ldr	r2, [pc, #16]	; (8006e44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e32:	5cd3      	ldrb	r3, [r2, r3]
 8006e34:	40d9      	lsrs	r1, r3
 8006e36:	000b      	movs	r3, r1
}    
 8006e38:	0018      	movs	r0, r3
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	46c0      	nop			; (mov r8, r8)
 8006e40:	40021000 	.word	0x40021000
 8006e44:	0800e4b4 	.word	0x0800e4b4

08006e48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	2380      	movs	r3, #128	; 0x80
 8006e5e:	025b      	lsls	r3, r3, #9
 8006e60:	4013      	ands	r3, r2
 8006e62:	d100      	bne.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8006e64:	e08e      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8006e66:	2017      	movs	r0, #23
 8006e68:	183b      	adds	r3, r7, r0
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e6e:	4b6e      	ldr	r3, [pc, #440]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e70:	69da      	ldr	r2, [r3, #28]
 8006e72:	2380      	movs	r3, #128	; 0x80
 8006e74:	055b      	lsls	r3, r3, #21
 8006e76:	4013      	ands	r3, r2
 8006e78:	d110      	bne.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e7a:	4b6b      	ldr	r3, [pc, #428]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e7c:	69da      	ldr	r2, [r3, #28]
 8006e7e:	4b6a      	ldr	r3, [pc, #424]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e80:	2180      	movs	r1, #128	; 0x80
 8006e82:	0549      	lsls	r1, r1, #21
 8006e84:	430a      	orrs	r2, r1
 8006e86:	61da      	str	r2, [r3, #28]
 8006e88:	4b67      	ldr	r3, [pc, #412]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006e8a:	69da      	ldr	r2, [r3, #28]
 8006e8c:	2380      	movs	r3, #128	; 0x80
 8006e8e:	055b      	lsls	r3, r3, #21
 8006e90:	4013      	ands	r3, r2
 8006e92:	60bb      	str	r3, [r7, #8]
 8006e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e96:	183b      	adds	r3, r7, r0
 8006e98:	2201      	movs	r2, #1
 8006e9a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e9c:	4b63      	ldr	r3, [pc, #396]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	2380      	movs	r3, #128	; 0x80
 8006ea2:	005b      	lsls	r3, r3, #1
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	d11a      	bne.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ea8:	4b60      	ldr	r3, [pc, #384]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	4b5f      	ldr	r3, [pc, #380]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006eae:	2180      	movs	r1, #128	; 0x80
 8006eb0:	0049      	lsls	r1, r1, #1
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006eb6:	f7fc fb17 	bl	80034e8 <HAL_GetTick>
 8006eba:	0003      	movs	r3, r0
 8006ebc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ebe:	e008      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ec0:	f7fc fb12 	bl	80034e8 <HAL_GetTick>
 8006ec4:	0002      	movs	r2, r0
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	2b64      	cmp	r3, #100	; 0x64
 8006ecc:	d901      	bls.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e0a6      	b.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ed2:	4b56      	ldr	r3, [pc, #344]	; (800702c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	2380      	movs	r3, #128	; 0x80
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	4013      	ands	r3, r2
 8006edc:	d0f0      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ede:	4b52      	ldr	r3, [pc, #328]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ee0:	6a1a      	ldr	r2, [r3, #32]
 8006ee2:	23c0      	movs	r3, #192	; 0xc0
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d034      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	23c0      	movs	r3, #192	; 0xc0
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4013      	ands	r3, r2
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d02c      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f00:	4b49      	ldr	r3, [pc, #292]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	4a4a      	ldr	r2, [pc, #296]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006f06:	4013      	ands	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f0a:	4b47      	ldr	r3, [pc, #284]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f0c:	6a1a      	ldr	r2, [r3, #32]
 8006f0e:	4b46      	ldr	r3, [pc, #280]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f10:	2180      	movs	r1, #128	; 0x80
 8006f12:	0249      	lsls	r1, r1, #9
 8006f14:	430a      	orrs	r2, r1
 8006f16:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f18:	4b43      	ldr	r3, [pc, #268]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f1a:	6a1a      	ldr	r2, [r3, #32]
 8006f1c:	4b42      	ldr	r3, [pc, #264]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f1e:	4945      	ldr	r1, [pc, #276]	; (8007034 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8006f20:	400a      	ands	r2, r1
 8006f22:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006f24:	4b40      	ldr	r3, [pc, #256]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	4013      	ands	r3, r2
 8006f30:	d013      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f32:	f7fc fad9 	bl	80034e8 <HAL_GetTick>
 8006f36:	0003      	movs	r3, r0
 8006f38:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f3a:	e009      	b.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f3c:	f7fc fad4 	bl	80034e8 <HAL_GetTick>
 8006f40:	0002      	movs	r2, r0
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	4a3c      	ldr	r2, [pc, #240]	; (8007038 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d901      	bls.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e067      	b.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f50:	4b35      	ldr	r3, [pc, #212]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f52:	6a1b      	ldr	r3, [r3, #32]
 8006f54:	2202      	movs	r2, #2
 8006f56:	4013      	ands	r3, r2
 8006f58:	d0f0      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f5a:	4b33      	ldr	r3, [pc, #204]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	4a34      	ldr	r2, [pc, #208]	; (8007030 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8006f60:	4013      	ands	r3, r2
 8006f62:	0019      	movs	r1, r3
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	4b2f      	ldr	r3, [pc, #188]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006f6e:	2317      	movs	r3, #23
 8006f70:	18fb      	adds	r3, r7, r3
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d105      	bne.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f78:	4b2b      	ldr	r3, [pc, #172]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f7a:	69da      	ldr	r2, [r3, #28]
 8006f7c:	4b2a      	ldr	r3, [pc, #168]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f7e:	492f      	ldr	r1, [pc, #188]	; (800703c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006f80:	400a      	ands	r2, r1
 8006f82:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	d009      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f8e:	4b26      	ldr	r3, [pc, #152]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f92:	2203      	movs	r2, #3
 8006f94:	4393      	bics	r3, r2
 8006f96:	0019      	movs	r1, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	689a      	ldr	r2, [r3, #8]
 8006f9c:	4b22      	ldr	r3, [pc, #136]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	4013      	ands	r3, r2
 8006faa:	d009      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006fac:	4b1e      	ldr	r3, [pc, #120]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb0:	4a23      	ldr	r2, [pc, #140]	; (8007040 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	0019      	movs	r1, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	68da      	ldr	r2, [r3, #12]
 8006fba:	4b1b      	ldr	r3, [pc, #108]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	d009      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006fca:	4b17      	ldr	r3, [pc, #92]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fce:	2210      	movs	r2, #16
 8006fd0:	4393      	bics	r3, r2
 8006fd2:	0019      	movs	r1, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	691a      	ldr	r2, [r3, #16]
 8006fd8:	4b13      	ldr	r3, [pc, #76]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	2380      	movs	r3, #128	; 0x80
 8006fe4:	029b      	lsls	r3, r3, #10
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	d009      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006fea:	4b0f      	ldr	r3, [pc, #60]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fee:	2280      	movs	r2, #128	; 0x80
 8006ff0:	4393      	bics	r3, r2
 8006ff2:	0019      	movs	r1, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	699a      	ldr	r2, [r3, #24]
 8006ff8:	4b0b      	ldr	r3, [pc, #44]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	2380      	movs	r3, #128	; 0x80
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	4013      	ands	r3, r2
 8007008:	d009      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800700a:	4b07      	ldr	r3, [pc, #28]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800700c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700e:	2240      	movs	r2, #64	; 0x40
 8007010:	4393      	bics	r3, r2
 8007012:	0019      	movs	r1, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	695a      	ldr	r2, [r3, #20]
 8007018:	4b03      	ldr	r3, [pc, #12]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800701a:	430a      	orrs	r2, r1
 800701c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	0018      	movs	r0, r3
 8007022:	46bd      	mov	sp, r7
 8007024:	b006      	add	sp, #24
 8007026:	bd80      	pop	{r7, pc}
 8007028:	40021000 	.word	0x40021000
 800702c:	40007000 	.word	0x40007000
 8007030:	fffffcff 	.word	0xfffffcff
 8007034:	fffeffff 	.word	0xfffeffff
 8007038:	00001388 	.word	0x00001388
 800703c:	efffffff 	.word	0xefffffff
 8007040:	fffcffff 	.word	0xfffcffff

08007044 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e0a8      	b.n	80071a8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	2b00      	cmp	r3, #0
 800705c:	d109      	bne.n	8007072 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	2382      	movs	r3, #130	; 0x82
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	429a      	cmp	r2, r3
 8007068:	d009      	beq.n	800707e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	61da      	str	r2, [r3, #28]
 8007070:	e005      	b.n	800707e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	225d      	movs	r2, #93	; 0x5d
 8007088:	5c9b      	ldrb	r3, [r3, r2]
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	d107      	bne.n	80070a0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	225c      	movs	r2, #92	; 0x5c
 8007094:	2100      	movs	r1, #0
 8007096:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	0018      	movs	r0, r3
 800709c:	f7fb fd26 	bl	8002aec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	225d      	movs	r2, #93	; 0x5d
 80070a4:	2102      	movs	r1, #2
 80070a6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2140      	movs	r1, #64	; 0x40
 80070b4:	438a      	bics	r2, r1
 80070b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68da      	ldr	r2, [r3, #12]
 80070bc:	23e0      	movs	r3, #224	; 0xe0
 80070be:	00db      	lsls	r3, r3, #3
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d902      	bls.n	80070ca <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80070c4:	2300      	movs	r3, #0
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	e002      	b.n	80070d0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80070ca:	2380      	movs	r3, #128	; 0x80
 80070cc:	015b      	lsls	r3, r3, #5
 80070ce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68da      	ldr	r2, [r3, #12]
 80070d4:	23f0      	movs	r3, #240	; 0xf0
 80070d6:	011b      	lsls	r3, r3, #4
 80070d8:	429a      	cmp	r2, r3
 80070da:	d008      	beq.n	80070ee <HAL_SPI_Init+0xaa>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68da      	ldr	r2, [r3, #12]
 80070e0:	23e0      	movs	r3, #224	; 0xe0
 80070e2:	00db      	lsls	r3, r3, #3
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d002      	beq.n	80070ee <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	685a      	ldr	r2, [r3, #4]
 80070f2:	2382      	movs	r3, #130	; 0x82
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	401a      	ands	r2, r3
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6899      	ldr	r1, [r3, #8]
 80070fc:	2384      	movs	r3, #132	; 0x84
 80070fe:	021b      	lsls	r3, r3, #8
 8007100:	400b      	ands	r3, r1
 8007102:	431a      	orrs	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	2102      	movs	r1, #2
 800710a:	400b      	ands	r3, r1
 800710c:	431a      	orrs	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	2101      	movs	r1, #1
 8007114:	400b      	ands	r3, r1
 8007116:	431a      	orrs	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6999      	ldr	r1, [r3, #24]
 800711c:	2380      	movs	r3, #128	; 0x80
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	400b      	ands	r3, r1
 8007122:	431a      	orrs	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	69db      	ldr	r3, [r3, #28]
 8007128:	2138      	movs	r1, #56	; 0x38
 800712a:	400b      	ands	r3, r1
 800712c:	431a      	orrs	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	2180      	movs	r1, #128	; 0x80
 8007134:	400b      	ands	r3, r1
 8007136:	431a      	orrs	r2, r3
 8007138:	0011      	movs	r1, r2
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800713e:	2380      	movs	r3, #128	; 0x80
 8007140:	019b      	lsls	r3, r3, #6
 8007142:	401a      	ands	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	430a      	orrs	r2, r1
 800714a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	0c1b      	lsrs	r3, r3, #16
 8007152:	2204      	movs	r2, #4
 8007154:	401a      	ands	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715a:	2110      	movs	r1, #16
 800715c:	400b      	ands	r3, r1
 800715e:	431a      	orrs	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007164:	2108      	movs	r1, #8
 8007166:	400b      	ands	r3, r1
 8007168:	431a      	orrs	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68d9      	ldr	r1, [r3, #12]
 800716e:	23f0      	movs	r3, #240	; 0xf0
 8007170:	011b      	lsls	r3, r3, #4
 8007172:	400b      	ands	r3, r1
 8007174:	431a      	orrs	r2, r3
 8007176:	0011      	movs	r1, r2
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	2380      	movs	r3, #128	; 0x80
 800717c:	015b      	lsls	r3, r3, #5
 800717e:	401a      	ands	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	430a      	orrs	r2, r1
 8007186:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	69da      	ldr	r2, [r3, #28]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4907      	ldr	r1, [pc, #28]	; (80071b0 <HAL_SPI_Init+0x16c>)
 8007194:	400a      	ands	r2, r1
 8007196:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	225d      	movs	r2, #93	; 0x5d
 80071a2:	2101      	movs	r1, #1
 80071a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	0018      	movs	r0, r3
 80071aa:	46bd      	mov	sp, r7
 80071ac:	b004      	add	sp, #16
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	fffff7ff 	.word	0xfffff7ff

080071b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b088      	sub	sp, #32
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	603b      	str	r3, [r7, #0]
 80071c0:	1dbb      	adds	r3, r7, #6
 80071c2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071c4:	231f      	movs	r3, #31
 80071c6:	18fb      	adds	r3, r7, r3
 80071c8:	2200      	movs	r2, #0
 80071ca:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	225c      	movs	r2, #92	; 0x5c
 80071d0:	5c9b      	ldrb	r3, [r3, r2]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d101      	bne.n	80071da <HAL_SPI_Transmit+0x26>
 80071d6:	2302      	movs	r3, #2
 80071d8:	e140      	b.n	800745c <HAL_SPI_Transmit+0x2a8>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	225c      	movs	r2, #92	; 0x5c
 80071de:	2101      	movs	r1, #1
 80071e0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071e2:	f7fc f981 	bl	80034e8 <HAL_GetTick>
 80071e6:	0003      	movs	r3, r0
 80071e8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80071ea:	2316      	movs	r3, #22
 80071ec:	18fb      	adds	r3, r7, r3
 80071ee:	1dba      	adds	r2, r7, #6
 80071f0:	8812      	ldrh	r2, [r2, #0]
 80071f2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	225d      	movs	r2, #93	; 0x5d
 80071f8:	5c9b      	ldrb	r3, [r3, r2]
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d004      	beq.n	800720a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007200:	231f      	movs	r3, #31
 8007202:	18fb      	adds	r3, r7, r3
 8007204:	2202      	movs	r2, #2
 8007206:	701a      	strb	r2, [r3, #0]
    goto error;
 8007208:	e11d      	b.n	8007446 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d003      	beq.n	8007218 <HAL_SPI_Transmit+0x64>
 8007210:	1dbb      	adds	r3, r7, #6
 8007212:	881b      	ldrh	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d104      	bne.n	8007222 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8007218:	231f      	movs	r3, #31
 800721a:	18fb      	adds	r3, r7, r3
 800721c:	2201      	movs	r2, #1
 800721e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007220:	e111      	b.n	8007446 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	225d      	movs	r2, #93	; 0x5d
 8007226:	2103      	movs	r1, #3
 8007228:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	68ba      	ldr	r2, [r7, #8]
 8007234:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	1dba      	adds	r2, r7, #6
 800723a:	8812      	ldrh	r2, [r2, #0]
 800723c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	1dba      	adds	r2, r7, #6
 8007242:	8812      	ldrh	r2, [r2, #0]
 8007244:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2244      	movs	r2, #68	; 0x44
 8007250:	2100      	movs	r1, #0
 8007252:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2246      	movs	r2, #70	; 0x46
 8007258:	2100      	movs	r1, #0
 800725a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	689a      	ldr	r2, [r3, #8]
 800726c:	2380      	movs	r3, #128	; 0x80
 800726e:	021b      	lsls	r3, r3, #8
 8007270:	429a      	cmp	r2, r3
 8007272:	d110      	bne.n	8007296 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2140      	movs	r1, #64	; 0x40
 8007280:	438a      	bics	r2, r1
 8007282:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2180      	movs	r1, #128	; 0x80
 8007290:	01c9      	lsls	r1, r1, #7
 8007292:	430a      	orrs	r2, r1
 8007294:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2240      	movs	r2, #64	; 0x40
 800729e:	4013      	ands	r3, r2
 80072a0:	2b40      	cmp	r3, #64	; 0x40
 80072a2:	d007      	beq.n	80072b4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2140      	movs	r1, #64	; 0x40
 80072b0:	430a      	orrs	r2, r1
 80072b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	68da      	ldr	r2, [r3, #12]
 80072b8:	23e0      	movs	r3, #224	; 0xe0
 80072ba:	00db      	lsls	r3, r3, #3
 80072bc:	429a      	cmp	r2, r3
 80072be:	d94e      	bls.n	800735e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d004      	beq.n	80072d2 <HAL_SPI_Transmit+0x11e>
 80072c8:	2316      	movs	r3, #22
 80072ca:	18fb      	adds	r3, r7, r3
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d13f      	bne.n	8007352 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d6:	881a      	ldrh	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e2:	1c9a      	adds	r2, r3, #2
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	3b01      	subs	r3, #1
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80072f6:	e02c      	b.n	8007352 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	2202      	movs	r2, #2
 8007300:	4013      	ands	r3, r2
 8007302:	2b02      	cmp	r3, #2
 8007304:	d112      	bne.n	800732c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730a:	881a      	ldrh	r2, [r3, #0]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007316:	1c9a      	adds	r2, r3, #2
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007320:	b29b      	uxth	r3, r3
 8007322:	3b01      	subs	r3, #1
 8007324:	b29a      	uxth	r2, r3
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	87da      	strh	r2, [r3, #62]	; 0x3e
 800732a:	e012      	b.n	8007352 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800732c:	f7fc f8dc 	bl	80034e8 <HAL_GetTick>
 8007330:	0002      	movs	r2, r0
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	429a      	cmp	r2, r3
 800733a:	d802      	bhi.n	8007342 <HAL_SPI_Transmit+0x18e>
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	3301      	adds	r3, #1
 8007340:	d102      	bne.n	8007348 <HAL_SPI_Transmit+0x194>
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d104      	bne.n	8007352 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8007348:	231f      	movs	r3, #31
 800734a:	18fb      	adds	r3, r7, r3
 800734c:	2203      	movs	r2, #3
 800734e:	701a      	strb	r2, [r3, #0]
          goto error;
 8007350:	e079      	b.n	8007446 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007356:	b29b      	uxth	r3, r3
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1cd      	bne.n	80072f8 <HAL_SPI_Transmit+0x144>
 800735c:	e04f      	b.n	80073fe <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d004      	beq.n	8007370 <HAL_SPI_Transmit+0x1bc>
 8007366:	2316      	movs	r3, #22
 8007368:	18fb      	adds	r3, r7, r3
 800736a:	881b      	ldrh	r3, [r3, #0]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d141      	bne.n	80073f4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	330c      	adds	r3, #12
 800737a:	7812      	ldrb	r2, [r2, #0]
 800737c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007382:	1c5a      	adds	r2, r3, #1
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800738c:	b29b      	uxth	r3, r3
 800738e:	3b01      	subs	r3, #1
 8007390:	b29a      	uxth	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8007396:	e02d      	b.n	80073f4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	2202      	movs	r2, #2
 80073a0:	4013      	ands	r3, r2
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d113      	bne.n	80073ce <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	330c      	adds	r3, #12
 80073b0:	7812      	ldrb	r2, [r2, #0]
 80073b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b8:	1c5a      	adds	r2, r3, #1
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	3b01      	subs	r3, #1
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073cc:	e012      	b.n	80073f4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073ce:	f7fc f88b 	bl	80034e8 <HAL_GetTick>
 80073d2:	0002      	movs	r2, r0
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d802      	bhi.n	80073e4 <HAL_SPI_Transmit+0x230>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	3301      	adds	r3, #1
 80073e2:	d102      	bne.n	80073ea <HAL_SPI_Transmit+0x236>
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d104      	bne.n	80073f4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80073ea:	231f      	movs	r3, #31
 80073ec:	18fb      	adds	r3, r7, r3
 80073ee:	2203      	movs	r2, #3
 80073f0:	701a      	strb	r2, [r3, #0]
          goto error;
 80073f2:	e028      	b.n	8007446 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1cc      	bne.n	8007398 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073fe:	69ba      	ldr	r2, [r7, #24]
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	0018      	movs	r0, r3
 8007406:	f000 fb2f 	bl	8007a68 <SPI_EndRxTxTransaction>
 800740a:	1e03      	subs	r3, r0, #0
 800740c:	d002      	beq.n	8007414 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2220      	movs	r2, #32
 8007412:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10a      	bne.n	8007432 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800741c:	2300      	movs	r3, #0
 800741e:	613b      	str	r3, [r7, #16]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	613b      	str	r3, [r7, #16]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	613b      	str	r3, [r7, #16]
 8007430:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007436:	2b00      	cmp	r3, #0
 8007438:	d004      	beq.n	8007444 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800743a:	231f      	movs	r3, #31
 800743c:	18fb      	adds	r3, r7, r3
 800743e:	2201      	movs	r2, #1
 8007440:	701a      	strb	r2, [r3, #0]
 8007442:	e000      	b.n	8007446 <HAL_SPI_Transmit+0x292>
  }

error:
 8007444:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	225d      	movs	r2, #93	; 0x5d
 800744a:	2101      	movs	r1, #1
 800744c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	225c      	movs	r2, #92	; 0x5c
 8007452:	2100      	movs	r1, #0
 8007454:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007456:	231f      	movs	r3, #31
 8007458:	18fb      	adds	r3, r7, r3
 800745a:	781b      	ldrb	r3, [r3, #0]
}
 800745c:	0018      	movs	r0, r3
 800745e:	46bd      	mov	sp, r7
 8007460:	b008      	add	sp, #32
 8007462:	bd80      	pop	{r7, pc}

08007464 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b08a      	sub	sp, #40	; 0x28
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
 8007470:	001a      	movs	r2, r3
 8007472:	1cbb      	adds	r3, r7, #2
 8007474:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007476:	2301      	movs	r3, #1
 8007478:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800747a:	2323      	movs	r3, #35	; 0x23
 800747c:	18fb      	adds	r3, r7, r3
 800747e:	2200      	movs	r2, #0
 8007480:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	225c      	movs	r2, #92	; 0x5c
 8007486:	5c9b      	ldrb	r3, [r3, r2]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d101      	bne.n	8007490 <HAL_SPI_TransmitReceive+0x2c>
 800748c:	2302      	movs	r3, #2
 800748e:	e1b5      	b.n	80077fc <HAL_SPI_TransmitReceive+0x398>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	225c      	movs	r2, #92	; 0x5c
 8007494:	2101      	movs	r1, #1
 8007496:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007498:	f7fc f826 	bl	80034e8 <HAL_GetTick>
 800749c:	0003      	movs	r3, r0
 800749e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074a0:	201b      	movs	r0, #27
 80074a2:	183b      	adds	r3, r7, r0
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	215d      	movs	r1, #93	; 0x5d
 80074a8:	5c52      	ldrb	r2, [r2, r1]
 80074aa:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80074b2:	2312      	movs	r3, #18
 80074b4:	18fb      	adds	r3, r7, r3
 80074b6:	1cba      	adds	r2, r7, #2
 80074b8:	8812      	ldrh	r2, [r2, #0]
 80074ba:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074bc:	183b      	adds	r3, r7, r0
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d011      	beq.n	80074e8 <HAL_SPI_TransmitReceive+0x84>
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	2382      	movs	r3, #130	; 0x82
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d107      	bne.n	80074de <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d103      	bne.n	80074de <HAL_SPI_TransmitReceive+0x7a>
 80074d6:	183b      	adds	r3, r7, r0
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	2b04      	cmp	r3, #4
 80074dc:	d004      	beq.n	80074e8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80074de:	2323      	movs	r3, #35	; 0x23
 80074e0:	18fb      	adds	r3, r7, r3
 80074e2:	2202      	movs	r2, #2
 80074e4:	701a      	strb	r2, [r3, #0]
    goto error;
 80074e6:	e17e      	b.n	80077e6 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d006      	beq.n	80074fc <HAL_SPI_TransmitReceive+0x98>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d003      	beq.n	80074fc <HAL_SPI_TransmitReceive+0x98>
 80074f4:	1cbb      	adds	r3, r7, #2
 80074f6:	881b      	ldrh	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d104      	bne.n	8007506 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80074fc:	2323      	movs	r3, #35	; 0x23
 80074fe:	18fb      	adds	r3, r7, r3
 8007500:	2201      	movs	r2, #1
 8007502:	701a      	strb	r2, [r3, #0]
    goto error;
 8007504:	e16f      	b.n	80077e6 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	225d      	movs	r2, #93	; 0x5d
 800750a:	5c9b      	ldrb	r3, [r3, r2]
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b04      	cmp	r3, #4
 8007510:	d003      	beq.n	800751a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	225d      	movs	r2, #93	; 0x5d
 8007516:	2105      	movs	r1, #5
 8007518:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	1cba      	adds	r2, r7, #2
 800752a:	2146      	movs	r1, #70	; 0x46
 800752c:	8812      	ldrh	r2, [r2, #0]
 800752e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	1cba      	adds	r2, r7, #2
 8007534:	2144      	movs	r1, #68	; 0x44
 8007536:	8812      	ldrh	r2, [r2, #0]
 8007538:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	1cba      	adds	r2, r7, #2
 8007544:	8812      	ldrh	r2, [r2, #0]
 8007546:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	1cba      	adds	r2, r7, #2
 800754c:	8812      	ldrh	r2, [r2, #0]
 800754e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	68da      	ldr	r2, [r3, #12]
 8007560:	23e0      	movs	r3, #224	; 0xe0
 8007562:	00db      	lsls	r3, r3, #3
 8007564:	429a      	cmp	r2, r3
 8007566:	d908      	bls.n	800757a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	685a      	ldr	r2, [r3, #4]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	49a4      	ldr	r1, [pc, #656]	; (8007804 <HAL_SPI_TransmitReceive+0x3a0>)
 8007574:	400a      	ands	r2, r1
 8007576:	605a      	str	r2, [r3, #4]
 8007578:	e008      	b.n	800758c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2180      	movs	r1, #128	; 0x80
 8007586:	0149      	lsls	r1, r1, #5
 8007588:	430a      	orrs	r2, r1
 800758a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2240      	movs	r2, #64	; 0x40
 8007594:	4013      	ands	r3, r2
 8007596:	2b40      	cmp	r3, #64	; 0x40
 8007598:	d007      	beq.n	80075aa <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2140      	movs	r1, #64	; 0x40
 80075a6:	430a      	orrs	r2, r1
 80075a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	68da      	ldr	r2, [r3, #12]
 80075ae:	23e0      	movs	r3, #224	; 0xe0
 80075b0:	00db      	lsls	r3, r3, #3
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d800      	bhi.n	80075b8 <HAL_SPI_TransmitReceive+0x154>
 80075b6:	e07f      	b.n	80076b8 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d005      	beq.n	80075cc <HAL_SPI_TransmitReceive+0x168>
 80075c0:	2312      	movs	r3, #18
 80075c2:	18fb      	adds	r3, r7, r3
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d000      	beq.n	80075cc <HAL_SPI_TransmitReceive+0x168>
 80075ca:	e069      	b.n	80076a0 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d0:	881a      	ldrh	r2, [r3, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075dc:	1c9a      	adds	r2, r3, #2
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	3b01      	subs	r3, #1
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075f0:	e056      	b.n	80076a0 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	2202      	movs	r2, #2
 80075fa:	4013      	ands	r3, r2
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d11b      	bne.n	8007638 <HAL_SPI_TransmitReceive+0x1d4>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007604:	b29b      	uxth	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d016      	beq.n	8007638 <HAL_SPI_TransmitReceive+0x1d4>
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	2b01      	cmp	r3, #1
 800760e:	d113      	bne.n	8007638 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007614:	881a      	ldrh	r2, [r3, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007620:	1c9a      	adds	r2, r3, #2
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800762a:	b29b      	uxth	r3, r3
 800762c:	3b01      	subs	r3, #1
 800762e:	b29a      	uxth	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	2201      	movs	r2, #1
 8007640:	4013      	ands	r3, r2
 8007642:	2b01      	cmp	r3, #1
 8007644:	d11c      	bne.n	8007680 <HAL_SPI_TransmitReceive+0x21c>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2246      	movs	r2, #70	; 0x46
 800764a:	5a9b      	ldrh	r3, [r3, r2]
 800764c:	b29b      	uxth	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d016      	beq.n	8007680 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68da      	ldr	r2, [r3, #12]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765c:	b292      	uxth	r2, r2
 800765e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007664:	1c9a      	adds	r2, r3, #2
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2246      	movs	r2, #70	; 0x46
 800766e:	5a9b      	ldrh	r3, [r3, r2]
 8007670:	b29b      	uxth	r3, r3
 8007672:	3b01      	subs	r3, #1
 8007674:	b299      	uxth	r1, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2246      	movs	r2, #70	; 0x46
 800767a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800767c:	2301      	movs	r3, #1
 800767e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007680:	f7fb ff32 	bl	80034e8 <HAL_GetTick>
 8007684:	0002      	movs	r2, r0
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800768c:	429a      	cmp	r2, r3
 800768e:	d807      	bhi.n	80076a0 <HAL_SPI_TransmitReceive+0x23c>
 8007690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007692:	3301      	adds	r3, #1
 8007694:	d004      	beq.n	80076a0 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8007696:	2323      	movs	r3, #35	; 0x23
 8007698:	18fb      	adds	r3, r7, r3
 800769a:	2203      	movs	r2, #3
 800769c:	701a      	strb	r2, [r3, #0]
        goto error;
 800769e:	e0a2      	b.n	80077e6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1a3      	bne.n	80075f2 <HAL_SPI_TransmitReceive+0x18e>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2246      	movs	r2, #70	; 0x46
 80076ae:	5a9b      	ldrh	r3, [r3, r2]
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d19d      	bne.n	80075f2 <HAL_SPI_TransmitReceive+0x18e>
 80076b6:	e085      	b.n	80077c4 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d005      	beq.n	80076cc <HAL_SPI_TransmitReceive+0x268>
 80076c0:	2312      	movs	r3, #18
 80076c2:	18fb      	adds	r3, r7, r3
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d000      	beq.n	80076cc <HAL_SPI_TransmitReceive+0x268>
 80076ca:	e070      	b.n	80077ae <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	330c      	adds	r3, #12
 80076d6:	7812      	ldrb	r2, [r2, #0]
 80076d8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076de:	1c5a      	adds	r2, r3, #1
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	3b01      	subs	r3, #1
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076f2:	e05c      	b.n	80077ae <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	2202      	movs	r2, #2
 80076fc:	4013      	ands	r3, r2
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d11c      	bne.n	800773c <HAL_SPI_TransmitReceive+0x2d8>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007706:	b29b      	uxth	r3, r3
 8007708:	2b00      	cmp	r3, #0
 800770a:	d017      	beq.n	800773c <HAL_SPI_TransmitReceive+0x2d8>
 800770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770e:	2b01      	cmp	r3, #1
 8007710:	d114      	bne.n	800773c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	330c      	adds	r3, #12
 800771c:	7812      	ldrb	r2, [r2, #0]
 800771e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007724:	1c5a      	adds	r2, r3, #1
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800772e:	b29b      	uxth	r3, r3
 8007730:	3b01      	subs	r3, #1
 8007732:	b29a      	uxth	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007738:	2300      	movs	r3, #0
 800773a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	2201      	movs	r2, #1
 8007744:	4013      	ands	r3, r2
 8007746:	2b01      	cmp	r3, #1
 8007748:	d11e      	bne.n	8007788 <HAL_SPI_TransmitReceive+0x324>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2246      	movs	r2, #70	; 0x46
 800774e:	5a9b      	ldrh	r3, [r3, r2]
 8007750:	b29b      	uxth	r3, r3
 8007752:	2b00      	cmp	r3, #0
 8007754:	d018      	beq.n	8007788 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	330c      	adds	r3, #12
 800775c:	001a      	movs	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	7812      	ldrb	r2, [r2, #0]
 8007764:	b2d2      	uxtb	r2, r2
 8007766:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776c:	1c5a      	adds	r2, r3, #1
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2246      	movs	r2, #70	; 0x46
 8007776:	5a9b      	ldrh	r3, [r3, r2]
 8007778:	b29b      	uxth	r3, r3
 800777a:	3b01      	subs	r3, #1
 800777c:	b299      	uxth	r1, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2246      	movs	r2, #70	; 0x46
 8007782:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007784:	2301      	movs	r3, #1
 8007786:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007788:	f7fb feae 	bl	80034e8 <HAL_GetTick>
 800778c:	0002      	movs	r2, r0
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007794:	429a      	cmp	r2, r3
 8007796:	d802      	bhi.n	800779e <HAL_SPI_TransmitReceive+0x33a>
 8007798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779a:	3301      	adds	r3, #1
 800779c:	d102      	bne.n	80077a4 <HAL_SPI_TransmitReceive+0x340>
 800779e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d104      	bne.n	80077ae <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80077a4:	2323      	movs	r3, #35	; 0x23
 80077a6:	18fb      	adds	r3, r7, r3
 80077a8:	2203      	movs	r2, #3
 80077aa:	701a      	strb	r2, [r3, #0]
        goto error;
 80077ac:	e01b      	b.n	80077e6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d19d      	bne.n	80076f4 <HAL_SPI_TransmitReceive+0x290>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2246      	movs	r2, #70	; 0x46
 80077bc:	5a9b      	ldrh	r3, [r3, r2]
 80077be:	b29b      	uxth	r3, r3
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d197      	bne.n	80076f4 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077c4:	69fa      	ldr	r2, [r7, #28]
 80077c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	0018      	movs	r0, r3
 80077cc:	f000 f94c 	bl	8007a68 <SPI_EndRxTxTransaction>
 80077d0:	1e03      	subs	r3, r0, #0
 80077d2:	d007      	beq.n	80077e4 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 80077d4:	2323      	movs	r3, #35	; 0x23
 80077d6:	18fb      	adds	r3, r7, r3
 80077d8:	2201      	movs	r2, #1
 80077da:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2220      	movs	r2, #32
 80077e0:	661a      	str	r2, [r3, #96]	; 0x60
 80077e2:	e000      	b.n	80077e6 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 80077e4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	225d      	movs	r2, #93	; 0x5d
 80077ea:	2101      	movs	r1, #1
 80077ec:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	225c      	movs	r2, #92	; 0x5c
 80077f2:	2100      	movs	r1, #0
 80077f4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80077f6:	2323      	movs	r3, #35	; 0x23
 80077f8:	18fb      	adds	r3, r7, r3
 80077fa:	781b      	ldrb	r3, [r3, #0]
}
 80077fc:	0018      	movs	r0, r3
 80077fe:	46bd      	mov	sp, r7
 8007800:	b00a      	add	sp, #40	; 0x28
 8007802:	bd80      	pop	{r7, pc}
 8007804:	ffffefff 	.word	0xffffefff

08007808 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b088      	sub	sp, #32
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	603b      	str	r3, [r7, #0]
 8007814:	1dfb      	adds	r3, r7, #7
 8007816:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007818:	f7fb fe66 	bl	80034e8 <HAL_GetTick>
 800781c:	0002      	movs	r2, r0
 800781e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007820:	1a9b      	subs	r3, r3, r2
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	18d3      	adds	r3, r2, r3
 8007826:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007828:	f7fb fe5e 	bl	80034e8 <HAL_GetTick>
 800782c:	0003      	movs	r3, r0
 800782e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007830:	4b3a      	ldr	r3, [pc, #232]	; (800791c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	015b      	lsls	r3, r3, #5
 8007836:	0d1b      	lsrs	r3, r3, #20
 8007838:	69fa      	ldr	r2, [r7, #28]
 800783a:	4353      	muls	r3, r2
 800783c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800783e:	e058      	b.n	80078f2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	3301      	adds	r3, #1
 8007844:	d055      	beq.n	80078f2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007846:	f7fb fe4f 	bl	80034e8 <HAL_GetTick>
 800784a:	0002      	movs	r2, r0
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	1ad3      	subs	r3, r2, r3
 8007850:	69fa      	ldr	r2, [r7, #28]
 8007852:	429a      	cmp	r2, r3
 8007854:	d902      	bls.n	800785c <SPI_WaitFlagStateUntilTimeout+0x54>
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d142      	bne.n	80078e2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	685a      	ldr	r2, [r3, #4]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	21e0      	movs	r1, #224	; 0xe0
 8007868:	438a      	bics	r2, r1
 800786a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	2382      	movs	r3, #130	; 0x82
 8007872:	005b      	lsls	r3, r3, #1
 8007874:	429a      	cmp	r2, r3
 8007876:	d113      	bne.n	80078a0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	689a      	ldr	r2, [r3, #8]
 800787c:	2380      	movs	r3, #128	; 0x80
 800787e:	021b      	lsls	r3, r3, #8
 8007880:	429a      	cmp	r2, r3
 8007882:	d005      	beq.n	8007890 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	689a      	ldr	r2, [r3, #8]
 8007888:	2380      	movs	r3, #128	; 0x80
 800788a:	00db      	lsls	r3, r3, #3
 800788c:	429a      	cmp	r2, r3
 800788e:	d107      	bne.n	80078a0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2140      	movs	r1, #64	; 0x40
 800789c:	438a      	bics	r2, r1
 800789e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078a4:	2380      	movs	r3, #128	; 0x80
 80078a6:	019b      	lsls	r3, r3, #6
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d110      	bne.n	80078ce <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	491a      	ldr	r1, [pc, #104]	; (8007920 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80078b8:	400a      	ands	r2, r1
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2180      	movs	r1, #128	; 0x80
 80078c8:	0189      	lsls	r1, r1, #6
 80078ca:	430a      	orrs	r2, r1
 80078cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	225d      	movs	r2, #93	; 0x5d
 80078d2:	2101      	movs	r1, #1
 80078d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	225c      	movs	r2, #92	; 0x5c
 80078da:	2100      	movs	r1, #0
 80078dc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80078de:	2303      	movs	r3, #3
 80078e0:	e017      	b.n	8007912 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d101      	bne.n	80078ec <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80078e8:	2300      	movs	r3, #0
 80078ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	3b01      	subs	r3, #1
 80078f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	4013      	ands	r3, r2
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	425a      	negs	r2, r3
 8007902:	4153      	adcs	r3, r2
 8007904:	b2db      	uxtb	r3, r3
 8007906:	001a      	movs	r2, r3
 8007908:	1dfb      	adds	r3, r7, #7
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	429a      	cmp	r2, r3
 800790e:	d197      	bne.n	8007840 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	0018      	movs	r0, r3
 8007914:	46bd      	mov	sp, r7
 8007916:	b008      	add	sp, #32
 8007918:	bd80      	pop	{r7, pc}
 800791a:	46c0      	nop			; (mov r8, r8)
 800791c:	20000000 	.word	0x20000000
 8007920:	ffffdfff 	.word	0xffffdfff

08007924 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b08a      	sub	sp, #40	; 0x28
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]
 8007930:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007932:	2317      	movs	r3, #23
 8007934:	18fb      	adds	r3, r7, r3
 8007936:	2200      	movs	r2, #0
 8007938:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800793a:	f7fb fdd5 	bl	80034e8 <HAL_GetTick>
 800793e:	0002      	movs	r2, r0
 8007940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007942:	1a9b      	subs	r3, r3, r2
 8007944:	683a      	ldr	r2, [r7, #0]
 8007946:	18d3      	adds	r3, r2, r3
 8007948:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800794a:	f7fb fdcd 	bl	80034e8 <HAL_GetTick>
 800794e:	0003      	movs	r3, r0
 8007950:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	330c      	adds	r3, #12
 8007958:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800795a:	4b41      	ldr	r3, [pc, #260]	; (8007a60 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	0013      	movs	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	189b      	adds	r3, r3, r2
 8007964:	00da      	lsls	r2, r3, #3
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	0d1b      	lsrs	r3, r3, #20
 800796a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800796c:	4353      	muls	r3, r2
 800796e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007970:	e068      	b.n	8007a44 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	23c0      	movs	r3, #192	; 0xc0
 8007976:	00db      	lsls	r3, r3, #3
 8007978:	429a      	cmp	r2, r3
 800797a:	d10a      	bne.n	8007992 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d107      	bne.n	8007992 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	b2da      	uxtb	r2, r3
 8007988:	2117      	movs	r1, #23
 800798a:	187b      	adds	r3, r7, r1
 800798c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800798e:	187b      	adds	r3, r7, r1
 8007990:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	3301      	adds	r3, #1
 8007996:	d055      	beq.n	8007a44 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007998:	f7fb fda6 	bl	80034e8 <HAL_GetTick>
 800799c:	0002      	movs	r2, r0
 800799e:	6a3b      	ldr	r3, [r7, #32]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d902      	bls.n	80079ae <SPI_WaitFifoStateUntilTimeout+0x8a>
 80079a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d142      	bne.n	8007a34 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	21e0      	movs	r1, #224	; 0xe0
 80079ba:	438a      	bics	r2, r1
 80079bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	685a      	ldr	r2, [r3, #4]
 80079c2:	2382      	movs	r3, #130	; 0x82
 80079c4:	005b      	lsls	r3, r3, #1
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d113      	bne.n	80079f2 <SPI_WaitFifoStateUntilTimeout+0xce>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	689a      	ldr	r2, [r3, #8]
 80079ce:	2380      	movs	r3, #128	; 0x80
 80079d0:	021b      	lsls	r3, r3, #8
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d005      	beq.n	80079e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	689a      	ldr	r2, [r3, #8]
 80079da:	2380      	movs	r3, #128	; 0x80
 80079dc:	00db      	lsls	r3, r3, #3
 80079de:	429a      	cmp	r2, r3
 80079e0:	d107      	bne.n	80079f2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2140      	movs	r1, #64	; 0x40
 80079ee:	438a      	bics	r2, r1
 80079f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079f6:	2380      	movs	r3, #128	; 0x80
 80079f8:	019b      	lsls	r3, r3, #6
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d110      	bne.n	8007a20 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4916      	ldr	r1, [pc, #88]	; (8007a64 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007a0a:	400a      	ands	r2, r1
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2180      	movs	r1, #128	; 0x80
 8007a1a:	0189      	lsls	r1, r1, #6
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	225d      	movs	r2, #93	; 0x5d
 8007a24:	2101      	movs	r1, #1
 8007a26:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	225c      	movs	r2, #92	; 0x5c
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007a30:	2303      	movs	r3, #3
 8007a32:	e010      	b.n	8007a56 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d101      	bne.n	8007a3e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	3b01      	subs	r3, #1
 8007a42:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d18e      	bne.n	8007972 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	0018      	movs	r0, r3
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	b00a      	add	sp, #40	; 0x28
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	46c0      	nop			; (mov r8, r8)
 8007a60:	20000000 	.word	0x20000000
 8007a64:	ffffdfff 	.word	0xffffdfff

08007a68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b086      	sub	sp, #24
 8007a6c:	af02      	add	r7, sp, #8
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	23c0      	movs	r3, #192	; 0xc0
 8007a78:	0159      	lsls	r1, r3, #5
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	0013      	movs	r3, r2
 8007a82:	2200      	movs	r2, #0
 8007a84:	f7ff ff4e 	bl	8007924 <SPI_WaitFifoStateUntilTimeout>
 8007a88:	1e03      	subs	r3, r0, #0
 8007a8a:	d007      	beq.n	8007a9c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a90:	2220      	movs	r2, #32
 8007a92:	431a      	orrs	r2, r3
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e027      	b.n	8007aec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	9300      	str	r3, [sp, #0]
 8007aa4:	0013      	movs	r3, r2
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	2180      	movs	r1, #128	; 0x80
 8007aaa:	f7ff fead 	bl	8007808 <SPI_WaitFlagStateUntilTimeout>
 8007aae:	1e03      	subs	r3, r0, #0
 8007ab0:	d007      	beq.n	8007ac2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ab6:	2220      	movs	r2, #32
 8007ab8:	431a      	orrs	r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e014      	b.n	8007aec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	23c0      	movs	r3, #192	; 0xc0
 8007ac6:	00d9      	lsls	r1, r3, #3
 8007ac8:	68f8      	ldr	r0, [r7, #12]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	0013      	movs	r3, r2
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f7ff ff27 	bl	8007924 <SPI_WaitFifoStateUntilTimeout>
 8007ad6:	1e03      	subs	r3, r0, #0
 8007ad8:	d007      	beq.n	8007aea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ade:	2220      	movs	r2, #32
 8007ae0:	431a      	orrs	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e000      	b.n	8007aec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	0018      	movs	r0, r3
 8007aee:	46bd      	mov	sp, r7
 8007af0:	b004      	add	sp, #16
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e042      	b.n	8007b8c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	223d      	movs	r2, #61	; 0x3d
 8007b0a:	5c9b      	ldrb	r3, [r3, r2]
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d107      	bne.n	8007b22 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	223c      	movs	r2, #60	; 0x3c
 8007b16:	2100      	movs	r1, #0
 8007b18:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	0018      	movs	r0, r3
 8007b1e:	f7fb f833 	bl	8002b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	223d      	movs	r2, #61	; 0x3d
 8007b26:	2102      	movs	r1, #2
 8007b28:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	3304      	adds	r3, #4
 8007b32:	0019      	movs	r1, r3
 8007b34:	0010      	movs	r0, r2
 8007b36:	f000 fa65 	bl	8008004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2246      	movs	r2, #70	; 0x46
 8007b3e:	2101      	movs	r1, #1
 8007b40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	223e      	movs	r2, #62	; 0x3e
 8007b46:	2101      	movs	r1, #1
 8007b48:	5499      	strb	r1, [r3, r2]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	223f      	movs	r2, #63	; 0x3f
 8007b4e:	2101      	movs	r1, #1
 8007b50:	5499      	strb	r1, [r3, r2]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2240      	movs	r2, #64	; 0x40
 8007b56:	2101      	movs	r1, #1
 8007b58:	5499      	strb	r1, [r3, r2]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2241      	movs	r2, #65	; 0x41
 8007b5e:	2101      	movs	r1, #1
 8007b60:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2242      	movs	r2, #66	; 0x42
 8007b66:	2101      	movs	r1, #1
 8007b68:	5499      	strb	r1, [r3, r2]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2243      	movs	r2, #67	; 0x43
 8007b6e:	2101      	movs	r1, #1
 8007b70:	5499      	strb	r1, [r3, r2]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2244      	movs	r2, #68	; 0x44
 8007b76:	2101      	movs	r1, #1
 8007b78:	5499      	strb	r1, [r3, r2]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2245      	movs	r2, #69	; 0x45
 8007b7e:	2101      	movs	r1, #1
 8007b80:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	223d      	movs	r2, #61	; 0x3d
 8007b86:	2101      	movs	r1, #1
 8007b88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	0018      	movs	r0, r3
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	b002      	add	sp, #8
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	223d      	movs	r2, #61	; 0x3d
 8007ba0:	5c9b      	ldrb	r3, [r3, r2]
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d001      	beq.n	8007bac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e03b      	b.n	8007c24 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	223d      	movs	r2, #61	; 0x3d
 8007bb0:	2102      	movs	r1, #2
 8007bb2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68da      	ldr	r2, [r3, #12]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a18      	ldr	r2, [pc, #96]	; (8007c2c <HAL_TIM_Base_Start_IT+0x98>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d00f      	beq.n	8007bee <HAL_TIM_Base_Start_IT+0x5a>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	2380      	movs	r3, #128	; 0x80
 8007bd4:	05db      	lsls	r3, r3, #23
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d009      	beq.n	8007bee <HAL_TIM_Base_Start_IT+0x5a>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a14      	ldr	r2, [pc, #80]	; (8007c30 <HAL_TIM_Base_Start_IT+0x9c>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d004      	beq.n	8007bee <HAL_TIM_Base_Start_IT+0x5a>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a12      	ldr	r2, [pc, #72]	; (8007c34 <HAL_TIM_Base_Start_IT+0xa0>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d111      	bne.n	8007c12 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	2207      	movs	r2, #7
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2b06      	cmp	r3, #6
 8007bfe:	d010      	beq.n	8007c22 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2101      	movs	r1, #1
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c10:	e007      	b.n	8007c22 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2101      	movs	r1, #1
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	0018      	movs	r0, r3
 8007c26:	46bd      	mov	sp, r7
 8007c28:	b004      	add	sp, #16
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	40012c00 	.word	0x40012c00
 8007c30:	40000400 	.word	0x40000400
 8007c34:	40014000 	.word	0x40014000

08007c38 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e042      	b.n	8007cd0 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	223d      	movs	r2, #61	; 0x3d
 8007c4e:	5c9b      	ldrb	r3, [r3, r2]
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d107      	bne.n	8007c66 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	223c      	movs	r2, #60	; 0x3c
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	0018      	movs	r0, r3
 8007c62:	f000 f839 	bl	8007cd8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	223d      	movs	r2, #61	; 0x3d
 8007c6a:	2102      	movs	r1, #2
 8007c6c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	3304      	adds	r3, #4
 8007c76:	0019      	movs	r1, r3
 8007c78:	0010      	movs	r0, r2
 8007c7a:	f000 f9c3 	bl	8008004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2246      	movs	r2, #70	; 0x46
 8007c82:	2101      	movs	r1, #1
 8007c84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	223e      	movs	r2, #62	; 0x3e
 8007c8a:	2101      	movs	r1, #1
 8007c8c:	5499      	strb	r1, [r3, r2]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	223f      	movs	r2, #63	; 0x3f
 8007c92:	2101      	movs	r1, #1
 8007c94:	5499      	strb	r1, [r3, r2]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2240      	movs	r2, #64	; 0x40
 8007c9a:	2101      	movs	r1, #1
 8007c9c:	5499      	strb	r1, [r3, r2]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2241      	movs	r2, #65	; 0x41
 8007ca2:	2101      	movs	r1, #1
 8007ca4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2242      	movs	r2, #66	; 0x42
 8007caa:	2101      	movs	r1, #1
 8007cac:	5499      	strb	r1, [r3, r2]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2243      	movs	r2, #67	; 0x43
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	5499      	strb	r1, [r3, r2]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2244      	movs	r2, #68	; 0x44
 8007cba:	2101      	movs	r1, #1
 8007cbc:	5499      	strb	r1, [r3, r2]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2245      	movs	r2, #69	; 0x45
 8007cc2:	2101      	movs	r1, #1
 8007cc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	223d      	movs	r2, #61	; 0x3d
 8007cca:	2101      	movs	r1, #1
 8007ccc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	0018      	movs	r0, r3
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	b002      	add	sp, #8
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007ce0:	46c0      	nop			; (mov r8, r8)
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	b002      	add	sp, #8
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	691b      	ldr	r3, [r3, #16]
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d124      	bne.n	8007d48 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	2202      	movs	r2, #2
 8007d06:	4013      	ands	r3, r2
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d11d      	bne.n	8007d48 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2203      	movs	r2, #3
 8007d12:	4252      	negs	r2, r2
 8007d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	2203      	movs	r2, #3
 8007d24:	4013      	ands	r3, r2
 8007d26:	d004      	beq.n	8007d32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	0018      	movs	r0, r3
 8007d2c:	f000 f952 	bl	8007fd4 <HAL_TIM_IC_CaptureCallback>
 8007d30:	e007      	b.n	8007d42 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	0018      	movs	r0, r3
 8007d36:	f000 f945 	bl	8007fc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	0018      	movs	r0, r3
 8007d3e:	f000 f951 	bl	8007fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	2204      	movs	r2, #4
 8007d50:	4013      	ands	r3, r2
 8007d52:	2b04      	cmp	r3, #4
 8007d54:	d125      	bne.n	8007da2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	2204      	movs	r2, #4
 8007d5e:	4013      	ands	r3, r2
 8007d60:	2b04      	cmp	r3, #4
 8007d62:	d11e      	bne.n	8007da2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2205      	movs	r2, #5
 8007d6a:	4252      	negs	r2, r2
 8007d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2202      	movs	r2, #2
 8007d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	699a      	ldr	r2, [r3, #24]
 8007d7a:	23c0      	movs	r3, #192	; 0xc0
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4013      	ands	r3, r2
 8007d80:	d004      	beq.n	8007d8c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	0018      	movs	r0, r3
 8007d86:	f000 f925 	bl	8007fd4 <HAL_TIM_IC_CaptureCallback>
 8007d8a:	e007      	b.n	8007d9c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	0018      	movs	r0, r3
 8007d90:	f000 f918 	bl	8007fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	0018      	movs	r0, r3
 8007d98:	f000 f924 	bl	8007fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	2208      	movs	r2, #8
 8007daa:	4013      	ands	r3, r2
 8007dac:	2b08      	cmp	r3, #8
 8007dae:	d124      	bne.n	8007dfa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	2208      	movs	r2, #8
 8007db8:	4013      	ands	r3, r2
 8007dba:	2b08      	cmp	r3, #8
 8007dbc:	d11d      	bne.n	8007dfa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2209      	movs	r2, #9
 8007dc4:	4252      	negs	r2, r2
 8007dc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2204      	movs	r2, #4
 8007dcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	69db      	ldr	r3, [r3, #28]
 8007dd4:	2203      	movs	r2, #3
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	d004      	beq.n	8007de4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	0018      	movs	r0, r3
 8007dde:	f000 f8f9 	bl	8007fd4 <HAL_TIM_IC_CaptureCallback>
 8007de2:	e007      	b.n	8007df4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	0018      	movs	r0, r3
 8007de8:	f000 f8ec 	bl	8007fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	0018      	movs	r0, r3
 8007df0:	f000 f8f8 	bl	8007fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	2210      	movs	r2, #16
 8007e02:	4013      	ands	r3, r2
 8007e04:	2b10      	cmp	r3, #16
 8007e06:	d125      	bne.n	8007e54 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	2210      	movs	r2, #16
 8007e10:	4013      	ands	r3, r2
 8007e12:	2b10      	cmp	r3, #16
 8007e14:	d11e      	bne.n	8007e54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2211      	movs	r2, #17
 8007e1c:	4252      	negs	r2, r2
 8007e1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2208      	movs	r2, #8
 8007e24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	69da      	ldr	r2, [r3, #28]
 8007e2c:	23c0      	movs	r3, #192	; 0xc0
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	4013      	ands	r3, r2
 8007e32:	d004      	beq.n	8007e3e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	0018      	movs	r0, r3
 8007e38:	f000 f8cc 	bl	8007fd4 <HAL_TIM_IC_CaptureCallback>
 8007e3c:	e007      	b.n	8007e4e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	0018      	movs	r0, r3
 8007e42:	f000 f8bf 	bl	8007fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	0018      	movs	r0, r3
 8007e4a:	f000 f8cb 	bl	8007fe4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d10f      	bne.n	8007e82 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68db      	ldr	r3, [r3, #12]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d108      	bne.n	8007e82 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2202      	movs	r2, #2
 8007e76:	4252      	negs	r2, r2
 8007e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	0018      	movs	r0, r3
 8007e7e:	f7f9 f9c3 	bl	8001208 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	2280      	movs	r2, #128	; 0x80
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	2b80      	cmp	r3, #128	; 0x80
 8007e8e:	d10f      	bne.n	8007eb0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	2280      	movs	r2, #128	; 0x80
 8007e98:	4013      	ands	r3, r2
 8007e9a:	2b80      	cmp	r3, #128	; 0x80
 8007e9c:	d108      	bne.n	8007eb0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2281      	movs	r2, #129	; 0x81
 8007ea4:	4252      	negs	r2, r2
 8007ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	0018      	movs	r0, r3
 8007eac:	f000 fb2e 	bl	800850c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	2240      	movs	r2, #64	; 0x40
 8007eb8:	4013      	ands	r3, r2
 8007eba:	2b40      	cmp	r3, #64	; 0x40
 8007ebc:	d10f      	bne.n	8007ede <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	2240      	movs	r2, #64	; 0x40
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	2b40      	cmp	r3, #64	; 0x40
 8007eca:	d108      	bne.n	8007ede <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2241      	movs	r2, #65	; 0x41
 8007ed2:	4252      	negs	r2, r2
 8007ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	0018      	movs	r0, r3
 8007eda:	f000 f88b 	bl	8007ff4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	2b20      	cmp	r3, #32
 8007eea:	d10f      	bne.n	8007f0c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	2220      	movs	r2, #32
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	2b20      	cmp	r3, #32
 8007ef8:	d108      	bne.n	8007f0c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2221      	movs	r2, #33	; 0x21
 8007f00:	4252      	negs	r2, r2
 8007f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	0018      	movs	r0, r3
 8007f08:	f000 faf8 	bl	80084fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f0c:	46c0      	nop			; (mov r8, r8)
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	b002      	add	sp, #8
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f20:	2317      	movs	r3, #23
 8007f22:	18fb      	adds	r3, r7, r3
 8007f24:	2200      	movs	r2, #0
 8007f26:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	223c      	movs	r2, #60	; 0x3c
 8007f2c:	5c9b      	ldrb	r3, [r3, r2]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d101      	bne.n	8007f36 <HAL_TIM_OC_ConfigChannel+0x22>
 8007f32:	2302      	movs	r3, #2
 8007f34:	e042      	b.n	8007fbc <HAL_TIM_OC_ConfigChannel+0xa8>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	223c      	movs	r2, #60	; 0x3c
 8007f3a:	2101      	movs	r1, #1
 8007f3c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2b0c      	cmp	r3, #12
 8007f42:	d027      	beq.n	8007f94 <HAL_TIM_OC_ConfigChannel+0x80>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b0c      	cmp	r3, #12
 8007f48:	d82c      	bhi.n	8007fa4 <HAL_TIM_OC_ConfigChannel+0x90>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2b08      	cmp	r3, #8
 8007f4e:	d019      	beq.n	8007f84 <HAL_TIM_OC_ConfigChannel+0x70>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b08      	cmp	r3, #8
 8007f54:	d826      	bhi.n	8007fa4 <HAL_TIM_OC_ConfigChannel+0x90>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <HAL_TIM_OC_ConfigChannel+0x50>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b04      	cmp	r3, #4
 8007f60:	d008      	beq.n	8007f74 <HAL_TIM_OC_ConfigChannel+0x60>
 8007f62:	e01f      	b.n	8007fa4 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	0011      	movs	r1, r2
 8007f6c:	0018      	movs	r0, r3
 8007f6e:	f000 f8c9 	bl	8008104 <TIM_OC1_SetConfig>
      break;
 8007f72:	e01c      	b.n	8007fae <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	0011      	movs	r1, r2
 8007f7c:	0018      	movs	r0, r3
 8007f7e:	f000 f949 	bl	8008214 <TIM_OC2_SetConfig>
      break;
 8007f82:	e014      	b.n	8007fae <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	0011      	movs	r1, r2
 8007f8c:	0018      	movs	r0, r3
 8007f8e:	f000 f9c5 	bl	800831c <TIM_OC3_SetConfig>
      break;
 8007f92:	e00c      	b.n	8007fae <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68ba      	ldr	r2, [r7, #8]
 8007f9a:	0011      	movs	r1, r2
 8007f9c:	0018      	movs	r0, r3
 8007f9e:	f000 fa43 	bl	8008428 <TIM_OC4_SetConfig>
      break;
 8007fa2:	e004      	b.n	8007fae <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8007fa4:	2317      	movs	r3, #23
 8007fa6:	18fb      	adds	r3, r7, r3
 8007fa8:	2201      	movs	r2, #1
 8007faa:	701a      	strb	r2, [r3, #0]
      break;
 8007fac:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	223c      	movs	r2, #60	; 0x3c
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	5499      	strb	r1, [r3, r2]

  return status;
 8007fb6:	2317      	movs	r3, #23
 8007fb8:	18fb      	adds	r3, r7, r3
 8007fba:	781b      	ldrb	r3, [r3, #0]
}
 8007fbc:	0018      	movs	r0, r3
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	b006      	add	sp, #24
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007fcc:	46c0      	nop			; (mov r8, r8)
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	b002      	add	sp, #8
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fdc:	46c0      	nop			; (mov r8, r8)
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	b002      	add	sp, #8
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b082      	sub	sp, #8
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007fec:	46c0      	nop			; (mov r8, r8)
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	b002      	add	sp, #8
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ffc:	46c0      	nop			; (mov r8, r8)
 8007ffe:	46bd      	mov	sp, r7
 8008000:	b002      	add	sp, #8
 8008002:	bd80      	pop	{r7, pc}

08008004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a34      	ldr	r2, [pc, #208]	; (80080e8 <TIM_Base_SetConfig+0xe4>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d008      	beq.n	800802e <TIM_Base_SetConfig+0x2a>
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	2380      	movs	r3, #128	; 0x80
 8008020:	05db      	lsls	r3, r3, #23
 8008022:	429a      	cmp	r2, r3
 8008024:	d003      	beq.n	800802e <TIM_Base_SetConfig+0x2a>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a30      	ldr	r2, [pc, #192]	; (80080ec <TIM_Base_SetConfig+0xe8>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d108      	bne.n	8008040 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2270      	movs	r2, #112	; 0x70
 8008032:	4393      	bics	r3, r2
 8008034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	4313      	orrs	r3, r2
 800803e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a29      	ldr	r2, [pc, #164]	; (80080e8 <TIM_Base_SetConfig+0xe4>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d018      	beq.n	800807a <TIM_Base_SetConfig+0x76>
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	2380      	movs	r3, #128	; 0x80
 800804c:	05db      	lsls	r3, r3, #23
 800804e:	429a      	cmp	r2, r3
 8008050:	d013      	beq.n	800807a <TIM_Base_SetConfig+0x76>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a25      	ldr	r2, [pc, #148]	; (80080ec <TIM_Base_SetConfig+0xe8>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d00f      	beq.n	800807a <TIM_Base_SetConfig+0x76>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a24      	ldr	r2, [pc, #144]	; (80080f0 <TIM_Base_SetConfig+0xec>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d00b      	beq.n	800807a <TIM_Base_SetConfig+0x76>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a23      	ldr	r2, [pc, #140]	; (80080f4 <TIM_Base_SetConfig+0xf0>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d007      	beq.n	800807a <TIM_Base_SetConfig+0x76>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a22      	ldr	r2, [pc, #136]	; (80080f8 <TIM_Base_SetConfig+0xf4>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d003      	beq.n	800807a <TIM_Base_SetConfig+0x76>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a21      	ldr	r2, [pc, #132]	; (80080fc <TIM_Base_SetConfig+0xf8>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d108      	bne.n	800808c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	4a20      	ldr	r2, [pc, #128]	; (8008100 <TIM_Base_SetConfig+0xfc>)
 800807e:	4013      	ands	r3, r2
 8008080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	4313      	orrs	r3, r2
 800808a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2280      	movs	r2, #128	; 0x80
 8008090:	4393      	bics	r3, r2
 8008092:	001a      	movs	r2, r3
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	695b      	ldr	r3, [r3, #20]
 8008098:	4313      	orrs	r3, r2
 800809a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	689a      	ldr	r2, [r3, #8]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a0c      	ldr	r2, [pc, #48]	; (80080e8 <TIM_Base_SetConfig+0xe4>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d00b      	beq.n	80080d2 <TIM_Base_SetConfig+0xce>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a0d      	ldr	r2, [pc, #52]	; (80080f4 <TIM_Base_SetConfig+0xf0>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d007      	beq.n	80080d2 <TIM_Base_SetConfig+0xce>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a0c      	ldr	r2, [pc, #48]	; (80080f8 <TIM_Base_SetConfig+0xf4>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d003      	beq.n	80080d2 <TIM_Base_SetConfig+0xce>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a0b      	ldr	r2, [pc, #44]	; (80080fc <TIM_Base_SetConfig+0xf8>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d103      	bne.n	80080da <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	691a      	ldr	r2, [r3, #16]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2201      	movs	r2, #1
 80080de:	615a      	str	r2, [r3, #20]
}
 80080e0:	46c0      	nop			; (mov r8, r8)
 80080e2:	46bd      	mov	sp, r7
 80080e4:	b004      	add	sp, #16
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	40012c00 	.word	0x40012c00
 80080ec:	40000400 	.word	0x40000400
 80080f0:	40002000 	.word	0x40002000
 80080f4:	40014000 	.word	0x40014000
 80080f8:	40014400 	.word	0x40014400
 80080fc:	40014800 	.word	0x40014800
 8008100:	fffffcff 	.word	0xfffffcff

08008104 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	2201      	movs	r2, #1
 8008114:	4393      	bics	r3, r2
 8008116:	001a      	movs	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a1b      	ldr	r3, [r3, #32]
 8008120:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2270      	movs	r2, #112	; 0x70
 8008132:	4393      	bics	r3, r2
 8008134:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2203      	movs	r2, #3
 800813a:	4393      	bics	r3, r2
 800813c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	4313      	orrs	r3, r2
 8008146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	2202      	movs	r2, #2
 800814c:	4393      	bics	r3, r2
 800814e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	4313      	orrs	r3, r2
 8008158:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a27      	ldr	r2, [pc, #156]	; (80081fc <TIM_OC1_SetConfig+0xf8>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d00b      	beq.n	800817a <TIM_OC1_SetConfig+0x76>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a26      	ldr	r2, [pc, #152]	; (8008200 <TIM_OC1_SetConfig+0xfc>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d007      	beq.n	800817a <TIM_OC1_SetConfig+0x76>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a25      	ldr	r2, [pc, #148]	; (8008204 <TIM_OC1_SetConfig+0x100>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d003      	beq.n	800817a <TIM_OC1_SetConfig+0x76>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a24      	ldr	r2, [pc, #144]	; (8008208 <TIM_OC1_SetConfig+0x104>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d10c      	bne.n	8008194 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	2208      	movs	r2, #8
 800817e:	4393      	bics	r3, r2
 8008180:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	4313      	orrs	r3, r2
 800818a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	2204      	movs	r2, #4
 8008190:	4393      	bics	r3, r2
 8008192:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	4a19      	ldr	r2, [pc, #100]	; (80081fc <TIM_OC1_SetConfig+0xf8>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d00b      	beq.n	80081b4 <TIM_OC1_SetConfig+0xb0>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	4a18      	ldr	r2, [pc, #96]	; (8008200 <TIM_OC1_SetConfig+0xfc>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d007      	beq.n	80081b4 <TIM_OC1_SetConfig+0xb0>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	4a17      	ldr	r2, [pc, #92]	; (8008204 <TIM_OC1_SetConfig+0x100>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d003      	beq.n	80081b4 <TIM_OC1_SetConfig+0xb0>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4a16      	ldr	r2, [pc, #88]	; (8008208 <TIM_OC1_SetConfig+0x104>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d111      	bne.n	80081d8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	4a15      	ldr	r2, [pc, #84]	; (800820c <TIM_OC1_SetConfig+0x108>)
 80081b8:	4013      	ands	r3, r2
 80081ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	4a14      	ldr	r2, [pc, #80]	; (8008210 <TIM_OC1_SetConfig+0x10c>)
 80081c0:	4013      	ands	r3, r2
 80081c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	695b      	ldr	r3, [r3, #20]
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	621a      	str	r2, [r3, #32]
}
 80081f2:	46c0      	nop			; (mov r8, r8)
 80081f4:	46bd      	mov	sp, r7
 80081f6:	b006      	add	sp, #24
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	46c0      	nop			; (mov r8, r8)
 80081fc:	40012c00 	.word	0x40012c00
 8008200:	40014000 	.word	0x40014000
 8008204:	40014400 	.word	0x40014400
 8008208:	40014800 	.word	0x40014800
 800820c:	fffffeff 	.word	0xfffffeff
 8008210:	fffffdff 	.word	0xfffffdff

08008214 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b086      	sub	sp, #24
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a1b      	ldr	r3, [r3, #32]
 8008222:	2210      	movs	r2, #16
 8008224:	4393      	bics	r3, r2
 8008226:	001a      	movs	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a1b      	ldr	r3, [r3, #32]
 8008230:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	699b      	ldr	r3, [r3, #24]
 800823c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	4a2e      	ldr	r2, [pc, #184]	; (80082fc <TIM_OC2_SetConfig+0xe8>)
 8008242:	4013      	ands	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	4a2d      	ldr	r2, [pc, #180]	; (8008300 <TIM_OC2_SetConfig+0xec>)
 800824a:	4013      	ands	r3, r2
 800824c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	021b      	lsls	r3, r3, #8
 8008254:	68fa      	ldr	r2, [r7, #12]
 8008256:	4313      	orrs	r3, r2
 8008258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	2220      	movs	r2, #32
 800825e:	4393      	bics	r3, r2
 8008260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	011b      	lsls	r3, r3, #4
 8008268:	697a      	ldr	r2, [r7, #20]
 800826a:	4313      	orrs	r3, r2
 800826c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a24      	ldr	r2, [pc, #144]	; (8008304 <TIM_OC2_SetConfig+0xf0>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d10d      	bne.n	8008292 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	2280      	movs	r2, #128	; 0x80
 800827a:	4393      	bics	r3, r2
 800827c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	011b      	lsls	r3, r3, #4
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	4313      	orrs	r3, r2
 8008288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	2240      	movs	r2, #64	; 0x40
 800828e:	4393      	bics	r3, r2
 8008290:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a1b      	ldr	r2, [pc, #108]	; (8008304 <TIM_OC2_SetConfig+0xf0>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d00b      	beq.n	80082b2 <TIM_OC2_SetConfig+0x9e>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a1a      	ldr	r2, [pc, #104]	; (8008308 <TIM_OC2_SetConfig+0xf4>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d007      	beq.n	80082b2 <TIM_OC2_SetConfig+0x9e>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a19      	ldr	r2, [pc, #100]	; (800830c <TIM_OC2_SetConfig+0xf8>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d003      	beq.n	80082b2 <TIM_OC2_SetConfig+0x9e>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a18      	ldr	r2, [pc, #96]	; (8008310 <TIM_OC2_SetConfig+0xfc>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d113      	bne.n	80082da <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	4a17      	ldr	r2, [pc, #92]	; (8008314 <TIM_OC2_SetConfig+0x100>)
 80082b6:	4013      	ands	r3, r2
 80082b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	4a16      	ldr	r2, [pc, #88]	; (8008318 <TIM_OC2_SetConfig+0x104>)
 80082be:	4013      	ands	r3, r2
 80082c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	693a      	ldr	r2, [r7, #16]
 80082de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	685a      	ldr	r2, [r3, #4]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	697a      	ldr	r2, [r7, #20]
 80082f2:	621a      	str	r2, [r3, #32]
}
 80082f4:	46c0      	nop			; (mov r8, r8)
 80082f6:	46bd      	mov	sp, r7
 80082f8:	b006      	add	sp, #24
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	ffff8fff 	.word	0xffff8fff
 8008300:	fffffcff 	.word	0xfffffcff
 8008304:	40012c00 	.word	0x40012c00
 8008308:	40014000 	.word	0x40014000
 800830c:	40014400 	.word	0x40014400
 8008310:	40014800 	.word	0x40014800
 8008314:	fffffbff 	.word	0xfffffbff
 8008318:	fffff7ff 	.word	0xfffff7ff

0800831c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	4a35      	ldr	r2, [pc, #212]	; (8008400 <TIM_OC3_SetConfig+0xe4>)
 800832c:	401a      	ands	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	69db      	ldr	r3, [r3, #28]
 8008342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2270      	movs	r2, #112	; 0x70
 8008348:	4393      	bics	r3, r2
 800834a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2203      	movs	r2, #3
 8008350:	4393      	bics	r3, r2
 8008352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	4313      	orrs	r3, r2
 800835c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	4a28      	ldr	r2, [pc, #160]	; (8008404 <TIM_OC3_SetConfig+0xe8>)
 8008362:	4013      	ands	r3, r2
 8008364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	021b      	lsls	r3, r3, #8
 800836c:	697a      	ldr	r2, [r7, #20]
 800836e:	4313      	orrs	r3, r2
 8008370:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a24      	ldr	r2, [pc, #144]	; (8008408 <TIM_OC3_SetConfig+0xec>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d10d      	bne.n	8008396 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	4a23      	ldr	r2, [pc, #140]	; (800840c <TIM_OC3_SetConfig+0xf0>)
 800837e:	4013      	ands	r3, r2
 8008380:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	021b      	lsls	r3, r3, #8
 8008388:	697a      	ldr	r2, [r7, #20]
 800838a:	4313      	orrs	r3, r2
 800838c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	4a1f      	ldr	r2, [pc, #124]	; (8008410 <TIM_OC3_SetConfig+0xf4>)
 8008392:	4013      	ands	r3, r2
 8008394:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a1b      	ldr	r2, [pc, #108]	; (8008408 <TIM_OC3_SetConfig+0xec>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d00b      	beq.n	80083b6 <TIM_OC3_SetConfig+0x9a>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a1c      	ldr	r2, [pc, #112]	; (8008414 <TIM_OC3_SetConfig+0xf8>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d007      	beq.n	80083b6 <TIM_OC3_SetConfig+0x9a>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a1b      	ldr	r2, [pc, #108]	; (8008418 <TIM_OC3_SetConfig+0xfc>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d003      	beq.n	80083b6 <TIM_OC3_SetConfig+0x9a>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a1a      	ldr	r2, [pc, #104]	; (800841c <TIM_OC3_SetConfig+0x100>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d113      	bne.n	80083de <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	4a19      	ldr	r2, [pc, #100]	; (8008420 <TIM_OC3_SetConfig+0x104>)
 80083ba:	4013      	ands	r3, r2
 80083bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	4a18      	ldr	r2, [pc, #96]	; (8008424 <TIM_OC3_SetConfig+0x108>)
 80083c2:	4013      	ands	r3, r2
 80083c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	695b      	ldr	r3, [r3, #20]
 80083ca:	011b      	lsls	r3, r3, #4
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	699b      	ldr	r3, [r3, #24]
 80083d6:	011b      	lsls	r3, r3, #4
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	4313      	orrs	r3, r2
 80083dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	685a      	ldr	r2, [r3, #4]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	621a      	str	r2, [r3, #32]
}
 80083f8:	46c0      	nop			; (mov r8, r8)
 80083fa:	46bd      	mov	sp, r7
 80083fc:	b006      	add	sp, #24
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	fffffeff 	.word	0xfffffeff
 8008404:	fffffdff 	.word	0xfffffdff
 8008408:	40012c00 	.word	0x40012c00
 800840c:	fffff7ff 	.word	0xfffff7ff
 8008410:	fffffbff 	.word	0xfffffbff
 8008414:	40014000 	.word	0x40014000
 8008418:	40014400 	.word	0x40014400
 800841c:	40014800 	.word	0x40014800
 8008420:	ffffefff 	.word	0xffffefff
 8008424:	ffffdfff 	.word	0xffffdfff

08008428 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b086      	sub	sp, #24
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	4a28      	ldr	r2, [pc, #160]	; (80084d8 <TIM_OC4_SetConfig+0xb0>)
 8008438:	401a      	ands	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a1b      	ldr	r3, [r3, #32]
 8008442:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4a22      	ldr	r2, [pc, #136]	; (80084dc <TIM_OC4_SetConfig+0xb4>)
 8008454:	4013      	ands	r3, r2
 8008456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	4a21      	ldr	r2, [pc, #132]	; (80084e0 <TIM_OC4_SetConfig+0xb8>)
 800845c:	4013      	ands	r3, r2
 800845e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	021b      	lsls	r3, r3, #8
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	4313      	orrs	r3, r2
 800846a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	4a1d      	ldr	r2, [pc, #116]	; (80084e4 <TIM_OC4_SetConfig+0xbc>)
 8008470:	4013      	ands	r3, r2
 8008472:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	031b      	lsls	r3, r3, #12
 800847a:	693a      	ldr	r2, [r7, #16]
 800847c:	4313      	orrs	r3, r2
 800847e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a19      	ldr	r2, [pc, #100]	; (80084e8 <TIM_OC4_SetConfig+0xc0>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d00b      	beq.n	80084a0 <TIM_OC4_SetConfig+0x78>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a18      	ldr	r2, [pc, #96]	; (80084ec <TIM_OC4_SetConfig+0xc4>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d007      	beq.n	80084a0 <TIM_OC4_SetConfig+0x78>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a17      	ldr	r2, [pc, #92]	; (80084f0 <TIM_OC4_SetConfig+0xc8>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d003      	beq.n	80084a0 <TIM_OC4_SetConfig+0x78>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a16      	ldr	r2, [pc, #88]	; (80084f4 <TIM_OC4_SetConfig+0xcc>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d109      	bne.n	80084b4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	4a15      	ldr	r2, [pc, #84]	; (80084f8 <TIM_OC4_SetConfig+0xd0>)
 80084a4:	4013      	ands	r3, r2
 80084a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	695b      	ldr	r3, [r3, #20]
 80084ac:	019b      	lsls	r3, r3, #6
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	685a      	ldr	r2, [r3, #4]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	693a      	ldr	r2, [r7, #16]
 80084cc:	621a      	str	r2, [r3, #32]
}
 80084ce:	46c0      	nop			; (mov r8, r8)
 80084d0:	46bd      	mov	sp, r7
 80084d2:	b006      	add	sp, #24
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	46c0      	nop			; (mov r8, r8)
 80084d8:	ffffefff 	.word	0xffffefff
 80084dc:	ffff8fff 	.word	0xffff8fff
 80084e0:	fffffcff 	.word	0xfffffcff
 80084e4:	ffffdfff 	.word	0xffffdfff
 80084e8:	40012c00 	.word	0x40012c00
 80084ec:	40014000 	.word	0x40014000
 80084f0:	40014400 	.word	0x40014400
 80084f4:	40014800 	.word	0x40014800
 80084f8:	ffffbfff 	.word	0xffffbfff

080084fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008504:	46c0      	nop			; (mov r8, r8)
 8008506:	46bd      	mov	sp, r7
 8008508:	b002      	add	sp, #8
 800850a:	bd80      	pop	{r7, pc}

0800850c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008514:	46c0      	nop			; (mov r8, r8)
 8008516:	46bd      	mov	sp, r7
 8008518:	b002      	add	sp, #8
 800851a:	bd80      	pop	{r7, pc}

0800851c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d101      	bne.n	800852e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e044      	b.n	80085b8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008532:	2b00      	cmp	r3, #0
 8008534:	d107      	bne.n	8008546 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2274      	movs	r2, #116	; 0x74
 800853a:	2100      	movs	r1, #0
 800853c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	0018      	movs	r0, r3
 8008542:	f7fa fb49 	bl	8002bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2224      	movs	r2, #36	; 0x24
 800854a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2101      	movs	r1, #1
 8008558:	438a      	bics	r2, r1
 800855a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	0018      	movs	r0, r3
 8008560:	f000 fb24 	bl	8008bac <UART_SetConfig>
 8008564:	0003      	movs	r3, r0
 8008566:	2b01      	cmp	r3, #1
 8008568:	d101      	bne.n	800856e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e024      	b.n	80085b8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008572:	2b00      	cmp	r3, #0
 8008574:	d003      	beq.n	800857e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	0018      	movs	r0, r3
 800857a:	f000 fc9f 	bl	8008ebc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	685a      	ldr	r2, [r3, #4]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	490d      	ldr	r1, [pc, #52]	; (80085c0 <HAL_UART_Init+0xa4>)
 800858a:	400a      	ands	r2, r1
 800858c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	689a      	ldr	r2, [r3, #8]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	212a      	movs	r1, #42	; 0x2a
 800859a:	438a      	bics	r2, r1
 800859c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2101      	movs	r1, #1
 80085aa:	430a      	orrs	r2, r1
 80085ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	0018      	movs	r0, r3
 80085b2:	f000 fd37 	bl	8009024 <UART_CheckIdleState>
 80085b6:	0003      	movs	r3, r0
}
 80085b8:	0018      	movs	r0, r3
 80085ba:	46bd      	mov	sp, r7
 80085bc:	b002      	add	sp, #8
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	ffffb7ff 	.word	0xffffb7ff

080085c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085c4:	b590      	push	{r4, r7, lr}
 80085c6:	b0ab      	sub	sp, #172	; 0xac
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	69db      	ldr	r3, [r3, #28]
 80085d2:	22a4      	movs	r2, #164	; 0xa4
 80085d4:	18b9      	adds	r1, r7, r2
 80085d6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	20a0      	movs	r0, #160	; 0xa0
 80085e0:	1839      	adds	r1, r7, r0
 80085e2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	219c      	movs	r1, #156	; 0x9c
 80085ec:	1879      	adds	r1, r7, r1
 80085ee:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80085f0:	0011      	movs	r1, r2
 80085f2:	18bb      	adds	r3, r7, r2
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a99      	ldr	r2, [pc, #612]	; (800885c <HAL_UART_IRQHandler+0x298>)
 80085f8:	4013      	ands	r3, r2
 80085fa:	2298      	movs	r2, #152	; 0x98
 80085fc:	18bc      	adds	r4, r7, r2
 80085fe:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8008600:	18bb      	adds	r3, r7, r2
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d114      	bne.n	8008632 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008608:	187b      	adds	r3, r7, r1
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2220      	movs	r2, #32
 800860e:	4013      	ands	r3, r2
 8008610:	d00f      	beq.n	8008632 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008612:	183b      	adds	r3, r7, r0
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2220      	movs	r2, #32
 8008618:	4013      	ands	r3, r2
 800861a:	d00a      	beq.n	8008632 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008620:	2b00      	cmp	r3, #0
 8008622:	d100      	bne.n	8008626 <HAL_UART_IRQHandler+0x62>
 8008624:	e296      	b.n	8008b54 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	0010      	movs	r0, r2
 800862e:	4798      	blx	r3
      }
      return;
 8008630:	e290      	b.n	8008b54 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008632:	2398      	movs	r3, #152	; 0x98
 8008634:	18fb      	adds	r3, r7, r3
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d100      	bne.n	800863e <HAL_UART_IRQHandler+0x7a>
 800863c:	e114      	b.n	8008868 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800863e:	239c      	movs	r3, #156	; 0x9c
 8008640:	18fb      	adds	r3, r7, r3
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2201      	movs	r2, #1
 8008646:	4013      	ands	r3, r2
 8008648:	d106      	bne.n	8008658 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800864a:	23a0      	movs	r3, #160	; 0xa0
 800864c:	18fb      	adds	r3, r7, r3
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a83      	ldr	r2, [pc, #524]	; (8008860 <HAL_UART_IRQHandler+0x29c>)
 8008652:	4013      	ands	r3, r2
 8008654:	d100      	bne.n	8008658 <HAL_UART_IRQHandler+0x94>
 8008656:	e107      	b.n	8008868 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008658:	23a4      	movs	r3, #164	; 0xa4
 800865a:	18fb      	adds	r3, r7, r3
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2201      	movs	r2, #1
 8008660:	4013      	ands	r3, r2
 8008662:	d012      	beq.n	800868a <HAL_UART_IRQHandler+0xc6>
 8008664:	23a0      	movs	r3, #160	; 0xa0
 8008666:	18fb      	adds	r3, r7, r3
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	2380      	movs	r3, #128	; 0x80
 800866c:	005b      	lsls	r3, r3, #1
 800866e:	4013      	ands	r3, r2
 8008670:	d00b      	beq.n	800868a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	2201      	movs	r2, #1
 8008678:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2280      	movs	r2, #128	; 0x80
 800867e:	589b      	ldr	r3, [r3, r2]
 8008680:	2201      	movs	r2, #1
 8008682:	431a      	orrs	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2180      	movs	r1, #128	; 0x80
 8008688:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800868a:	23a4      	movs	r3, #164	; 0xa4
 800868c:	18fb      	adds	r3, r7, r3
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2202      	movs	r2, #2
 8008692:	4013      	ands	r3, r2
 8008694:	d011      	beq.n	80086ba <HAL_UART_IRQHandler+0xf6>
 8008696:	239c      	movs	r3, #156	; 0x9c
 8008698:	18fb      	adds	r3, r7, r3
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2201      	movs	r2, #1
 800869e:	4013      	ands	r3, r2
 80086a0:	d00b      	beq.n	80086ba <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2202      	movs	r2, #2
 80086a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2280      	movs	r2, #128	; 0x80
 80086ae:	589b      	ldr	r3, [r3, r2]
 80086b0:	2204      	movs	r2, #4
 80086b2:	431a      	orrs	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2180      	movs	r1, #128	; 0x80
 80086b8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086ba:	23a4      	movs	r3, #164	; 0xa4
 80086bc:	18fb      	adds	r3, r7, r3
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2204      	movs	r2, #4
 80086c2:	4013      	ands	r3, r2
 80086c4:	d011      	beq.n	80086ea <HAL_UART_IRQHandler+0x126>
 80086c6:	239c      	movs	r3, #156	; 0x9c
 80086c8:	18fb      	adds	r3, r7, r3
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2201      	movs	r2, #1
 80086ce:	4013      	ands	r3, r2
 80086d0:	d00b      	beq.n	80086ea <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2204      	movs	r2, #4
 80086d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2280      	movs	r2, #128	; 0x80
 80086de:	589b      	ldr	r3, [r3, r2]
 80086e0:	2202      	movs	r2, #2
 80086e2:	431a      	orrs	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2180      	movs	r1, #128	; 0x80
 80086e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80086ea:	23a4      	movs	r3, #164	; 0xa4
 80086ec:	18fb      	adds	r3, r7, r3
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2208      	movs	r2, #8
 80086f2:	4013      	ands	r3, r2
 80086f4:	d017      	beq.n	8008726 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80086f6:	23a0      	movs	r3, #160	; 0xa0
 80086f8:	18fb      	adds	r3, r7, r3
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2220      	movs	r2, #32
 80086fe:	4013      	ands	r3, r2
 8008700:	d105      	bne.n	800870e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008702:	239c      	movs	r3, #156	; 0x9c
 8008704:	18fb      	adds	r3, r7, r3
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2201      	movs	r2, #1
 800870a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800870c:	d00b      	beq.n	8008726 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2208      	movs	r2, #8
 8008714:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2280      	movs	r2, #128	; 0x80
 800871a:	589b      	ldr	r3, [r3, r2]
 800871c:	2208      	movs	r2, #8
 800871e:	431a      	orrs	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2180      	movs	r1, #128	; 0x80
 8008724:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008726:	23a4      	movs	r3, #164	; 0xa4
 8008728:	18fb      	adds	r3, r7, r3
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	2380      	movs	r3, #128	; 0x80
 800872e:	011b      	lsls	r3, r3, #4
 8008730:	4013      	ands	r3, r2
 8008732:	d013      	beq.n	800875c <HAL_UART_IRQHandler+0x198>
 8008734:	23a0      	movs	r3, #160	; 0xa0
 8008736:	18fb      	adds	r3, r7, r3
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	2380      	movs	r3, #128	; 0x80
 800873c:	04db      	lsls	r3, r3, #19
 800873e:	4013      	ands	r3, r2
 8008740:	d00c      	beq.n	800875c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2280      	movs	r2, #128	; 0x80
 8008748:	0112      	lsls	r2, r2, #4
 800874a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2280      	movs	r2, #128	; 0x80
 8008750:	589b      	ldr	r3, [r3, r2]
 8008752:	2220      	movs	r2, #32
 8008754:	431a      	orrs	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2180      	movs	r1, #128	; 0x80
 800875a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2280      	movs	r2, #128	; 0x80
 8008760:	589b      	ldr	r3, [r3, r2]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d100      	bne.n	8008768 <HAL_UART_IRQHandler+0x1a4>
 8008766:	e1f7      	b.n	8008b58 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008768:	23a4      	movs	r3, #164	; 0xa4
 800876a:	18fb      	adds	r3, r7, r3
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2220      	movs	r2, #32
 8008770:	4013      	ands	r3, r2
 8008772:	d00e      	beq.n	8008792 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008774:	23a0      	movs	r3, #160	; 0xa0
 8008776:	18fb      	adds	r3, r7, r3
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2220      	movs	r2, #32
 800877c:	4013      	ands	r3, r2
 800877e:	d008      	beq.n	8008792 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008784:	2b00      	cmp	r3, #0
 8008786:	d004      	beq.n	8008792 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	0010      	movs	r0, r2
 8008790:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2280      	movs	r2, #128	; 0x80
 8008796:	589b      	ldr	r3, [r3, r2]
 8008798:	2194      	movs	r1, #148	; 0x94
 800879a:	187a      	adds	r2, r7, r1
 800879c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	2240      	movs	r2, #64	; 0x40
 80087a6:	4013      	ands	r3, r2
 80087a8:	2b40      	cmp	r3, #64	; 0x40
 80087aa:	d004      	beq.n	80087b6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80087ac:	187b      	adds	r3, r7, r1
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2228      	movs	r2, #40	; 0x28
 80087b2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80087b4:	d047      	beq.n	8008846 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	0018      	movs	r0, r3
 80087ba:	f000 fd3f 	bl	800923c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	2240      	movs	r2, #64	; 0x40
 80087c6:	4013      	ands	r3, r2
 80087c8:	2b40      	cmp	r3, #64	; 0x40
 80087ca:	d137      	bne.n	800883c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087cc:	f3ef 8310 	mrs	r3, PRIMASK
 80087d0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80087d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087d4:	2090      	movs	r0, #144	; 0x90
 80087d6:	183a      	adds	r2, r7, r0
 80087d8:	6013      	str	r3, [r2, #0]
 80087da:	2301      	movs	r3, #1
 80087dc:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087e0:	f383 8810 	msr	PRIMASK, r3
}
 80087e4:	46c0      	nop			; (mov r8, r8)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	689a      	ldr	r2, [r3, #8]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2140      	movs	r1, #64	; 0x40
 80087f2:	438a      	bics	r2, r1
 80087f4:	609a      	str	r2, [r3, #8]
 80087f6:	183b      	adds	r3, r7, r0
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087fe:	f383 8810 	msr	PRIMASK, r3
}
 8008802:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008808:	2b00      	cmp	r3, #0
 800880a:	d012      	beq.n	8008832 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008810:	4a14      	ldr	r2, [pc, #80]	; (8008864 <HAL_UART_IRQHandler+0x2a0>)
 8008812:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008818:	0018      	movs	r0, r3
 800881a:	f7fb fd71 	bl	8004300 <HAL_DMA_Abort_IT>
 800881e:	1e03      	subs	r3, r0, #0
 8008820:	d01a      	beq.n	8008858 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008826:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800882c:	0018      	movs	r0, r3
 800882e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008830:	e012      	b.n	8008858 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	0018      	movs	r0, r3
 8008836:	f000 f9a5 	bl	8008b84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800883a:	e00d      	b.n	8008858 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	0018      	movs	r0, r3
 8008840:	f000 f9a0 	bl	8008b84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008844:	e008      	b.n	8008858 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	0018      	movs	r0, r3
 800884a:	f000 f99b 	bl	8008b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2280      	movs	r2, #128	; 0x80
 8008852:	2100      	movs	r1, #0
 8008854:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8008856:	e17f      	b.n	8008b58 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008858:	46c0      	nop			; (mov r8, r8)
    return;
 800885a:	e17d      	b.n	8008b58 <HAL_UART_IRQHandler+0x594>
 800885c:	0000080f 	.word	0x0000080f
 8008860:	04000120 	.word	0x04000120
 8008864:	08009301 	.word	0x08009301

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800886c:	2b01      	cmp	r3, #1
 800886e:	d000      	beq.n	8008872 <HAL_UART_IRQHandler+0x2ae>
 8008870:	e131      	b.n	8008ad6 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008872:	23a4      	movs	r3, #164	; 0xa4
 8008874:	18fb      	adds	r3, r7, r3
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2210      	movs	r2, #16
 800887a:	4013      	ands	r3, r2
 800887c:	d100      	bne.n	8008880 <HAL_UART_IRQHandler+0x2bc>
 800887e:	e12a      	b.n	8008ad6 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008880:	23a0      	movs	r3, #160	; 0xa0
 8008882:	18fb      	adds	r3, r7, r3
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2210      	movs	r2, #16
 8008888:	4013      	ands	r3, r2
 800888a:	d100      	bne.n	800888e <HAL_UART_IRQHandler+0x2ca>
 800888c:	e123      	b.n	8008ad6 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2210      	movs	r2, #16
 8008894:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	2240      	movs	r2, #64	; 0x40
 800889e:	4013      	ands	r3, r2
 80088a0:	2b40      	cmp	r3, #64	; 0x40
 80088a2:	d000      	beq.n	80088a6 <HAL_UART_IRQHandler+0x2e2>
 80088a4:	e09b      	b.n	80089de <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	685a      	ldr	r2, [r3, #4]
 80088ae:	217e      	movs	r1, #126	; 0x7e
 80088b0:	187b      	adds	r3, r7, r1
 80088b2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80088b4:	187b      	adds	r3, r7, r1
 80088b6:	881b      	ldrh	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d100      	bne.n	80088be <HAL_UART_IRQHandler+0x2fa>
 80088bc:	e14e      	b.n	8008b5c <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2258      	movs	r2, #88	; 0x58
 80088c2:	5a9b      	ldrh	r3, [r3, r2]
 80088c4:	187a      	adds	r2, r7, r1
 80088c6:	8812      	ldrh	r2, [r2, #0]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d300      	bcc.n	80088ce <HAL_UART_IRQHandler+0x30a>
 80088cc:	e146      	b.n	8008b5c <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	187a      	adds	r2, r7, r1
 80088d2:	215a      	movs	r1, #90	; 0x5a
 80088d4:	8812      	ldrh	r2, [r2, #0]
 80088d6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088dc:	699b      	ldr	r3, [r3, #24]
 80088de:	2b20      	cmp	r3, #32
 80088e0:	d06e      	beq.n	80089c0 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088e2:	f3ef 8310 	mrs	r3, PRIMASK
 80088e6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80088e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80088ec:	2301      	movs	r3, #1
 80088ee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f2:	f383 8810 	msr	PRIMASK, r3
}
 80088f6:	46c0      	nop			; (mov r8, r8)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	499a      	ldr	r1, [pc, #616]	; (8008b6c <HAL_UART_IRQHandler+0x5a8>)
 8008904:	400a      	ands	r2, r1
 8008906:	601a      	str	r2, [r3, #0]
 8008908:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800890a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800890c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890e:	f383 8810 	msr	PRIMASK, r3
}
 8008912:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008914:	f3ef 8310 	mrs	r3, PRIMASK
 8008918:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800891a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800891c:	677b      	str	r3, [r7, #116]	; 0x74
 800891e:	2301      	movs	r3, #1
 8008920:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008924:	f383 8810 	msr	PRIMASK, r3
}
 8008928:	46c0      	nop			; (mov r8, r8)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	689a      	ldr	r2, [r3, #8]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2101      	movs	r1, #1
 8008936:	438a      	bics	r2, r1
 8008938:	609a      	str	r2, [r3, #8]
 800893a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800893c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800893e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008940:	f383 8810 	msr	PRIMASK, r3
}
 8008944:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008946:	f3ef 8310 	mrs	r3, PRIMASK
 800894a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800894c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800894e:	673b      	str	r3, [r7, #112]	; 0x70
 8008950:	2301      	movs	r3, #1
 8008952:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008956:	f383 8810 	msr	PRIMASK, r3
}
 800895a:	46c0      	nop			; (mov r8, r8)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	689a      	ldr	r2, [r3, #8]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2140      	movs	r1, #64	; 0x40
 8008968:	438a      	bics	r2, r1
 800896a:	609a      	str	r2, [r3, #8]
 800896c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800896e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008970:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008972:	f383 8810 	msr	PRIMASK, r3
}
 8008976:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2220      	movs	r2, #32
 800897c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008984:	f3ef 8310 	mrs	r3, PRIMASK
 8008988:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800898a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800898c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800898e:	2301      	movs	r3, #1
 8008990:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008992:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008994:	f383 8810 	msr	PRIMASK, r3
}
 8008998:	46c0      	nop			; (mov r8, r8)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2110      	movs	r1, #16
 80089a6:	438a      	bics	r2, r1
 80089a8:	601a      	str	r2, [r3, #0]
 80089aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089b0:	f383 8810 	msr	PRIMASK, r3
}
 80089b4:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ba:	0018      	movs	r0, r3
 80089bc:	f7fb fc68 	bl	8004290 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2258      	movs	r2, #88	; 0x58
 80089c4:	5a9a      	ldrh	r2, [r3, r2]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	215a      	movs	r1, #90	; 0x5a
 80089ca:	5a5b      	ldrh	r3, [r3, r1]
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	0011      	movs	r1, r2
 80089d6:	0018      	movs	r0, r3
 80089d8:	f000 f8dc 	bl	8008b94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80089dc:	e0be      	b.n	8008b5c <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2258      	movs	r2, #88	; 0x58
 80089e2:	5a99      	ldrh	r1, [r3, r2]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	225a      	movs	r2, #90	; 0x5a
 80089e8:	5a9b      	ldrh	r3, [r3, r2]
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	208e      	movs	r0, #142	; 0x8e
 80089ee:	183b      	adds	r3, r7, r0
 80089f0:	1a8a      	subs	r2, r1, r2
 80089f2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	225a      	movs	r2, #90	; 0x5a
 80089f8:	5a9b      	ldrh	r3, [r3, r2]
 80089fa:	b29b      	uxth	r3, r3
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d100      	bne.n	8008a02 <HAL_UART_IRQHandler+0x43e>
 8008a00:	e0ae      	b.n	8008b60 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8008a02:	183b      	adds	r3, r7, r0
 8008a04:	881b      	ldrh	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d100      	bne.n	8008a0c <HAL_UART_IRQHandler+0x448>
 8008a0a:	e0a9      	b.n	8008b60 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8008a10:	60fb      	str	r3, [r7, #12]
  return(result);
 8008a12:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a14:	2488      	movs	r4, #136	; 0x88
 8008a16:	193a      	adds	r2, r7, r4
 8008a18:	6013      	str	r3, [r2, #0]
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	f383 8810 	msr	PRIMASK, r3
}
 8008a24:	46c0      	nop			; (mov r8, r8)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	494f      	ldr	r1, [pc, #316]	; (8008b70 <HAL_UART_IRQHandler+0x5ac>)
 8008a32:	400a      	ands	r2, r1
 8008a34:	601a      	str	r2, [r3, #0]
 8008a36:	193b      	adds	r3, r7, r4
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	f383 8810 	msr	PRIMASK, r3
}
 8008a42:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a44:	f3ef 8310 	mrs	r3, PRIMASK
 8008a48:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a4a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a4c:	2484      	movs	r4, #132	; 0x84
 8008a4e:	193a      	adds	r2, r7, r4
 8008a50:	6013      	str	r3, [r2, #0]
 8008a52:	2301      	movs	r3, #1
 8008a54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	f383 8810 	msr	PRIMASK, r3
}
 8008a5c:	46c0      	nop			; (mov r8, r8)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	689a      	ldr	r2, [r3, #8]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2101      	movs	r1, #1
 8008a6a:	438a      	bics	r2, r1
 8008a6c:	609a      	str	r2, [r3, #8]
 8008a6e:	193b      	adds	r3, r7, r4
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	f383 8810 	msr	PRIMASK, r3
}
 8008a7a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2220      	movs	r2, #32
 8008a80:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8008a92:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a96:	2480      	movs	r4, #128	; 0x80
 8008a98:	193a      	adds	r2, r7, r4
 8008a9a:	6013      	str	r3, [r2, #0]
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa2:	f383 8810 	msr	PRIMASK, r3
}
 8008aa6:	46c0      	nop			; (mov r8, r8)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2110      	movs	r1, #16
 8008ab4:	438a      	bics	r2, r1
 8008ab6:	601a      	str	r2, [r3, #0]
 8008ab8:	193b      	adds	r3, r7, r4
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac0:	f383 8810 	msr	PRIMASK, r3
}
 8008ac4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ac6:	183b      	adds	r3, r7, r0
 8008ac8:	881a      	ldrh	r2, [r3, #0]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	0011      	movs	r1, r2
 8008ace:	0018      	movs	r0, r3
 8008ad0:	f000 f860 	bl	8008b94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ad4:	e044      	b.n	8008b60 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ad6:	23a4      	movs	r3, #164	; 0xa4
 8008ad8:	18fb      	adds	r3, r7, r3
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	2380      	movs	r3, #128	; 0x80
 8008ade:	035b      	lsls	r3, r3, #13
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	d010      	beq.n	8008b06 <HAL_UART_IRQHandler+0x542>
 8008ae4:	239c      	movs	r3, #156	; 0x9c
 8008ae6:	18fb      	adds	r3, r7, r3
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	2380      	movs	r3, #128	; 0x80
 8008aec:	03db      	lsls	r3, r3, #15
 8008aee:	4013      	ands	r3, r2
 8008af0:	d009      	beq.n	8008b06 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2280      	movs	r2, #128	; 0x80
 8008af8:	0352      	lsls	r2, r2, #13
 8008afa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	0018      	movs	r0, r3
 8008b00:	f000 fc40 	bl	8009384 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b04:	e02f      	b.n	8008b66 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008b06:	23a4      	movs	r3, #164	; 0xa4
 8008b08:	18fb      	adds	r3, r7, r3
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	2280      	movs	r2, #128	; 0x80
 8008b0e:	4013      	ands	r3, r2
 8008b10:	d00f      	beq.n	8008b32 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008b12:	23a0      	movs	r3, #160	; 0xa0
 8008b14:	18fb      	adds	r3, r7, r3
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2280      	movs	r2, #128	; 0x80
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	d009      	beq.n	8008b32 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d01e      	beq.n	8008b64 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	0010      	movs	r0, r2
 8008b2e:	4798      	blx	r3
    }
    return;
 8008b30:	e018      	b.n	8008b64 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b32:	23a4      	movs	r3, #164	; 0xa4
 8008b34:	18fb      	adds	r3, r7, r3
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2240      	movs	r2, #64	; 0x40
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	d013      	beq.n	8008b66 <HAL_UART_IRQHandler+0x5a2>
 8008b3e:	23a0      	movs	r3, #160	; 0xa0
 8008b40:	18fb      	adds	r3, r7, r3
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2240      	movs	r2, #64	; 0x40
 8008b46:	4013      	ands	r3, r2
 8008b48:	d00d      	beq.n	8008b66 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	0018      	movs	r0, r3
 8008b4e:	f000 fbee 	bl	800932e <UART_EndTransmit_IT>
    return;
 8008b52:	e008      	b.n	8008b66 <HAL_UART_IRQHandler+0x5a2>
      return;
 8008b54:	46c0      	nop			; (mov r8, r8)
 8008b56:	e006      	b.n	8008b66 <HAL_UART_IRQHandler+0x5a2>
    return;
 8008b58:	46c0      	nop			; (mov r8, r8)
 8008b5a:	e004      	b.n	8008b66 <HAL_UART_IRQHandler+0x5a2>
      return;
 8008b5c:	46c0      	nop			; (mov r8, r8)
 8008b5e:	e002      	b.n	8008b66 <HAL_UART_IRQHandler+0x5a2>
      return;
 8008b60:	46c0      	nop			; (mov r8, r8)
 8008b62:	e000      	b.n	8008b66 <HAL_UART_IRQHandler+0x5a2>
    return;
 8008b64:	46c0      	nop			; (mov r8, r8)
  }

}
 8008b66:	46bd      	mov	sp, r7
 8008b68:	b02b      	add	sp, #172	; 0xac
 8008b6a:	bd90      	pop	{r4, r7, pc}
 8008b6c:	fffffeff 	.word	0xfffffeff
 8008b70:	fffffedf 	.word	0xfffffedf

08008b74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b7c:	46c0      	nop			; (mov r8, r8)
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	b002      	add	sp, #8
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b8c:	46c0      	nop			; (mov r8, r8)
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	b002      	add	sp, #8
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b082      	sub	sp, #8
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	000a      	movs	r2, r1
 8008b9e:	1cbb      	adds	r3, r7, #2
 8008ba0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ba2:	46c0      	nop			; (mov r8, r8)
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	b002      	add	sp, #8
 8008ba8:	bd80      	pop	{r7, pc}
	...

08008bac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b088      	sub	sp, #32
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bb4:	231e      	movs	r3, #30
 8008bb6:	18fb      	adds	r3, r7, r3
 8008bb8:	2200      	movs	r2, #0
 8008bba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	689a      	ldr	r2, [r3, #8]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	431a      	orrs	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	431a      	orrs	r2, r3
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	69db      	ldr	r3, [r3, #28]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4aaf      	ldr	r2, [pc, #700]	; (8008e98 <UART_SetConfig+0x2ec>)
 8008bdc:	4013      	ands	r3, r2
 8008bde:	0019      	movs	r1, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	697a      	ldr	r2, [r7, #20]
 8008be6:	430a      	orrs	r2, r1
 8008be8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	4aaa      	ldr	r2, [pc, #680]	; (8008e9c <UART_SetConfig+0x2f0>)
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	0019      	movs	r1, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	68da      	ldr	r2, [r3, #12]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	699b      	ldr	r3, [r3, #24]
 8008c06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6a1b      	ldr	r3, [r3, #32]
 8008c0c:	697a      	ldr	r2, [r7, #20]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	4aa1      	ldr	r2, [pc, #644]	; (8008ea0 <UART_SetConfig+0x2f4>)
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	0019      	movs	r1, r3
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	430a      	orrs	r2, r1
 8008c26:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a9d      	ldr	r2, [pc, #628]	; (8008ea4 <UART_SetConfig+0x2f8>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d127      	bne.n	8008c82 <UART_SetConfig+0xd6>
 8008c32:	4b9d      	ldr	r3, [pc, #628]	; (8008ea8 <UART_SetConfig+0x2fc>)
 8008c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c36:	2203      	movs	r2, #3
 8008c38:	4013      	ands	r3, r2
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	d00d      	beq.n	8008c5a <UART_SetConfig+0xae>
 8008c3e:	d81b      	bhi.n	8008c78 <UART_SetConfig+0xcc>
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d014      	beq.n	8008c6e <UART_SetConfig+0xc2>
 8008c44:	d818      	bhi.n	8008c78 <UART_SetConfig+0xcc>
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d002      	beq.n	8008c50 <UART_SetConfig+0xa4>
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d00a      	beq.n	8008c64 <UART_SetConfig+0xb8>
 8008c4e:	e013      	b.n	8008c78 <UART_SetConfig+0xcc>
 8008c50:	231f      	movs	r3, #31
 8008c52:	18fb      	adds	r3, r7, r3
 8008c54:	2200      	movs	r2, #0
 8008c56:	701a      	strb	r2, [r3, #0]
 8008c58:	e065      	b.n	8008d26 <UART_SetConfig+0x17a>
 8008c5a:	231f      	movs	r3, #31
 8008c5c:	18fb      	adds	r3, r7, r3
 8008c5e:	2202      	movs	r2, #2
 8008c60:	701a      	strb	r2, [r3, #0]
 8008c62:	e060      	b.n	8008d26 <UART_SetConfig+0x17a>
 8008c64:	231f      	movs	r3, #31
 8008c66:	18fb      	adds	r3, r7, r3
 8008c68:	2204      	movs	r2, #4
 8008c6a:	701a      	strb	r2, [r3, #0]
 8008c6c:	e05b      	b.n	8008d26 <UART_SetConfig+0x17a>
 8008c6e:	231f      	movs	r3, #31
 8008c70:	18fb      	adds	r3, r7, r3
 8008c72:	2208      	movs	r2, #8
 8008c74:	701a      	strb	r2, [r3, #0]
 8008c76:	e056      	b.n	8008d26 <UART_SetConfig+0x17a>
 8008c78:	231f      	movs	r3, #31
 8008c7a:	18fb      	adds	r3, r7, r3
 8008c7c:	2210      	movs	r2, #16
 8008c7e:	701a      	strb	r2, [r3, #0]
 8008c80:	e051      	b.n	8008d26 <UART_SetConfig+0x17a>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a89      	ldr	r2, [pc, #548]	; (8008eac <UART_SetConfig+0x300>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d134      	bne.n	8008cf6 <UART_SetConfig+0x14a>
 8008c8c:	4b86      	ldr	r3, [pc, #536]	; (8008ea8 <UART_SetConfig+0x2fc>)
 8008c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c90:	23c0      	movs	r3, #192	; 0xc0
 8008c92:	029b      	lsls	r3, r3, #10
 8008c94:	4013      	ands	r3, r2
 8008c96:	22c0      	movs	r2, #192	; 0xc0
 8008c98:	0292      	lsls	r2, r2, #10
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d017      	beq.n	8008cce <UART_SetConfig+0x122>
 8008c9e:	22c0      	movs	r2, #192	; 0xc0
 8008ca0:	0292      	lsls	r2, r2, #10
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d822      	bhi.n	8008cec <UART_SetConfig+0x140>
 8008ca6:	2280      	movs	r2, #128	; 0x80
 8008ca8:	0292      	lsls	r2, r2, #10
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d019      	beq.n	8008ce2 <UART_SetConfig+0x136>
 8008cae:	2280      	movs	r2, #128	; 0x80
 8008cb0:	0292      	lsls	r2, r2, #10
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d81a      	bhi.n	8008cec <UART_SetConfig+0x140>
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d004      	beq.n	8008cc4 <UART_SetConfig+0x118>
 8008cba:	2280      	movs	r2, #128	; 0x80
 8008cbc:	0252      	lsls	r2, r2, #9
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d00a      	beq.n	8008cd8 <UART_SetConfig+0x12c>
 8008cc2:	e013      	b.n	8008cec <UART_SetConfig+0x140>
 8008cc4:	231f      	movs	r3, #31
 8008cc6:	18fb      	adds	r3, r7, r3
 8008cc8:	2200      	movs	r2, #0
 8008cca:	701a      	strb	r2, [r3, #0]
 8008ccc:	e02b      	b.n	8008d26 <UART_SetConfig+0x17a>
 8008cce:	231f      	movs	r3, #31
 8008cd0:	18fb      	adds	r3, r7, r3
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	701a      	strb	r2, [r3, #0]
 8008cd6:	e026      	b.n	8008d26 <UART_SetConfig+0x17a>
 8008cd8:	231f      	movs	r3, #31
 8008cda:	18fb      	adds	r3, r7, r3
 8008cdc:	2204      	movs	r2, #4
 8008cde:	701a      	strb	r2, [r3, #0]
 8008ce0:	e021      	b.n	8008d26 <UART_SetConfig+0x17a>
 8008ce2:	231f      	movs	r3, #31
 8008ce4:	18fb      	adds	r3, r7, r3
 8008ce6:	2208      	movs	r2, #8
 8008ce8:	701a      	strb	r2, [r3, #0]
 8008cea:	e01c      	b.n	8008d26 <UART_SetConfig+0x17a>
 8008cec:	231f      	movs	r3, #31
 8008cee:	18fb      	adds	r3, r7, r3
 8008cf0:	2210      	movs	r2, #16
 8008cf2:	701a      	strb	r2, [r3, #0]
 8008cf4:	e017      	b.n	8008d26 <UART_SetConfig+0x17a>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a6d      	ldr	r2, [pc, #436]	; (8008eb0 <UART_SetConfig+0x304>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d104      	bne.n	8008d0a <UART_SetConfig+0x15e>
 8008d00:	231f      	movs	r3, #31
 8008d02:	18fb      	adds	r3, r7, r3
 8008d04:	2200      	movs	r2, #0
 8008d06:	701a      	strb	r2, [r3, #0]
 8008d08:	e00d      	b.n	8008d26 <UART_SetConfig+0x17a>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a69      	ldr	r2, [pc, #420]	; (8008eb4 <UART_SetConfig+0x308>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d104      	bne.n	8008d1e <UART_SetConfig+0x172>
 8008d14:	231f      	movs	r3, #31
 8008d16:	18fb      	adds	r3, r7, r3
 8008d18:	2200      	movs	r2, #0
 8008d1a:	701a      	strb	r2, [r3, #0]
 8008d1c:	e003      	b.n	8008d26 <UART_SetConfig+0x17a>
 8008d1e:	231f      	movs	r3, #31
 8008d20:	18fb      	adds	r3, r7, r3
 8008d22:	2210      	movs	r2, #16
 8008d24:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	69da      	ldr	r2, [r3, #28]
 8008d2a:	2380      	movs	r3, #128	; 0x80
 8008d2c:	021b      	lsls	r3, r3, #8
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d15d      	bne.n	8008dee <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8008d32:	231f      	movs	r3, #31
 8008d34:	18fb      	adds	r3, r7, r3
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	2b08      	cmp	r3, #8
 8008d3a:	d015      	beq.n	8008d68 <UART_SetConfig+0x1bc>
 8008d3c:	dc18      	bgt.n	8008d70 <UART_SetConfig+0x1c4>
 8008d3e:	2b04      	cmp	r3, #4
 8008d40:	d00d      	beq.n	8008d5e <UART_SetConfig+0x1b2>
 8008d42:	dc15      	bgt.n	8008d70 <UART_SetConfig+0x1c4>
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d002      	beq.n	8008d4e <UART_SetConfig+0x1a2>
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d005      	beq.n	8008d58 <UART_SetConfig+0x1ac>
 8008d4c:	e010      	b.n	8008d70 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d4e:	f7fe f865 	bl	8006e1c <HAL_RCC_GetPCLK1Freq>
 8008d52:	0003      	movs	r3, r0
 8008d54:	61bb      	str	r3, [r7, #24]
        break;
 8008d56:	e012      	b.n	8008d7e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d58:	4b57      	ldr	r3, [pc, #348]	; (8008eb8 <UART_SetConfig+0x30c>)
 8008d5a:	61bb      	str	r3, [r7, #24]
        break;
 8008d5c:	e00f      	b.n	8008d7e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d5e:	f7fd ffd1 	bl	8006d04 <HAL_RCC_GetSysClockFreq>
 8008d62:	0003      	movs	r3, r0
 8008d64:	61bb      	str	r3, [r7, #24]
        break;
 8008d66:	e00a      	b.n	8008d7e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d68:	2380      	movs	r3, #128	; 0x80
 8008d6a:	021b      	lsls	r3, r3, #8
 8008d6c:	61bb      	str	r3, [r7, #24]
        break;
 8008d6e:	e006      	b.n	8008d7e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8008d70:	2300      	movs	r3, #0
 8008d72:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008d74:	231e      	movs	r3, #30
 8008d76:	18fb      	adds	r3, r7, r3
 8008d78:	2201      	movs	r2, #1
 8008d7a:	701a      	strb	r2, [r3, #0]
        break;
 8008d7c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d100      	bne.n	8008d86 <UART_SetConfig+0x1da>
 8008d84:	e07b      	b.n	8008e7e <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	005a      	lsls	r2, r3, #1
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	085b      	lsrs	r3, r3, #1
 8008d90:	18d2      	adds	r2, r2, r3
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	0019      	movs	r1, r3
 8008d98:	0010      	movs	r0, r2
 8008d9a:	f7f7 f9c7 	bl	800012c <__udivsi3>
 8008d9e:	0003      	movs	r3, r0
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	2b0f      	cmp	r3, #15
 8008da8:	d91c      	bls.n	8008de4 <UART_SetConfig+0x238>
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	2380      	movs	r3, #128	; 0x80
 8008dae:	025b      	lsls	r3, r3, #9
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d217      	bcs.n	8008de4 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	200e      	movs	r0, #14
 8008dba:	183b      	adds	r3, r7, r0
 8008dbc:	210f      	movs	r1, #15
 8008dbe:	438a      	bics	r2, r1
 8008dc0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	085b      	lsrs	r3, r3, #1
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	2207      	movs	r2, #7
 8008dca:	4013      	ands	r3, r2
 8008dcc:	b299      	uxth	r1, r3
 8008dce:	183b      	adds	r3, r7, r0
 8008dd0:	183a      	adds	r2, r7, r0
 8008dd2:	8812      	ldrh	r2, [r2, #0]
 8008dd4:	430a      	orrs	r2, r1
 8008dd6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	183a      	adds	r2, r7, r0
 8008dde:	8812      	ldrh	r2, [r2, #0]
 8008de0:	60da      	str	r2, [r3, #12]
 8008de2:	e04c      	b.n	8008e7e <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8008de4:	231e      	movs	r3, #30
 8008de6:	18fb      	adds	r3, r7, r3
 8008de8:	2201      	movs	r2, #1
 8008dea:	701a      	strb	r2, [r3, #0]
 8008dec:	e047      	b.n	8008e7e <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008dee:	231f      	movs	r3, #31
 8008df0:	18fb      	adds	r3, r7, r3
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	2b08      	cmp	r3, #8
 8008df6:	d015      	beq.n	8008e24 <UART_SetConfig+0x278>
 8008df8:	dc18      	bgt.n	8008e2c <UART_SetConfig+0x280>
 8008dfa:	2b04      	cmp	r3, #4
 8008dfc:	d00d      	beq.n	8008e1a <UART_SetConfig+0x26e>
 8008dfe:	dc15      	bgt.n	8008e2c <UART_SetConfig+0x280>
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d002      	beq.n	8008e0a <UART_SetConfig+0x25e>
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d005      	beq.n	8008e14 <UART_SetConfig+0x268>
 8008e08:	e010      	b.n	8008e2c <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e0a:	f7fe f807 	bl	8006e1c <HAL_RCC_GetPCLK1Freq>
 8008e0e:	0003      	movs	r3, r0
 8008e10:	61bb      	str	r3, [r7, #24]
        break;
 8008e12:	e012      	b.n	8008e3a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e14:	4b28      	ldr	r3, [pc, #160]	; (8008eb8 <UART_SetConfig+0x30c>)
 8008e16:	61bb      	str	r3, [r7, #24]
        break;
 8008e18:	e00f      	b.n	8008e3a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e1a:	f7fd ff73 	bl	8006d04 <HAL_RCC_GetSysClockFreq>
 8008e1e:	0003      	movs	r3, r0
 8008e20:	61bb      	str	r3, [r7, #24]
        break;
 8008e22:	e00a      	b.n	8008e3a <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e24:	2380      	movs	r3, #128	; 0x80
 8008e26:	021b      	lsls	r3, r3, #8
 8008e28:	61bb      	str	r3, [r7, #24]
        break;
 8008e2a:	e006      	b.n	8008e3a <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008e30:	231e      	movs	r3, #30
 8008e32:	18fb      	adds	r3, r7, r3
 8008e34:	2201      	movs	r2, #1
 8008e36:	701a      	strb	r2, [r3, #0]
        break;
 8008e38:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d01e      	beq.n	8008e7e <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	085a      	lsrs	r2, r3, #1
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	18d2      	adds	r2, r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	0019      	movs	r1, r3
 8008e50:	0010      	movs	r0, r2
 8008e52:	f7f7 f96b 	bl	800012c <__udivsi3>
 8008e56:	0003      	movs	r3, r0
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	2b0f      	cmp	r3, #15
 8008e60:	d909      	bls.n	8008e76 <UART_SetConfig+0x2ca>
 8008e62:	693a      	ldr	r2, [r7, #16]
 8008e64:	2380      	movs	r3, #128	; 0x80
 8008e66:	025b      	lsls	r3, r3, #9
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d204      	bcs.n	8008e76 <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	693a      	ldr	r2, [r7, #16]
 8008e72:	60da      	str	r2, [r3, #12]
 8008e74:	e003      	b.n	8008e7e <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8008e76:	231e      	movs	r3, #30
 8008e78:	18fb      	adds	r3, r7, r3
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008e8a:	231e      	movs	r3, #30
 8008e8c:	18fb      	adds	r3, r7, r3
 8008e8e:	781b      	ldrb	r3, [r3, #0]
}
 8008e90:	0018      	movs	r0, r3
 8008e92:	46bd      	mov	sp, r7
 8008e94:	b008      	add	sp, #32
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	efff69f3 	.word	0xefff69f3
 8008e9c:	ffffcfff 	.word	0xffffcfff
 8008ea0:	fffff4ff 	.word	0xfffff4ff
 8008ea4:	40013800 	.word	0x40013800
 8008ea8:	40021000 	.word	0x40021000
 8008eac:	40004400 	.word	0x40004400
 8008eb0:	40004800 	.word	0x40004800
 8008eb4:	40004c00 	.word	0x40004c00
 8008eb8:	007a1200 	.word	0x007a1200

08008ebc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec8:	2201      	movs	r2, #1
 8008eca:	4013      	ands	r3, r2
 8008ecc:	d00b      	beq.n	8008ee6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	4a4a      	ldr	r2, [pc, #296]	; (8009000 <UART_AdvFeatureConfig+0x144>)
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	0019      	movs	r1, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	430a      	orrs	r2, r1
 8008ee4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eea:	2202      	movs	r2, #2
 8008eec:	4013      	ands	r3, r2
 8008eee:	d00b      	beq.n	8008f08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	4a43      	ldr	r2, [pc, #268]	; (8009004 <UART_AdvFeatureConfig+0x148>)
 8008ef8:	4013      	ands	r3, r2
 8008efa:	0019      	movs	r1, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	430a      	orrs	r2, r1
 8008f06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0c:	2204      	movs	r2, #4
 8008f0e:	4013      	ands	r3, r2
 8008f10:	d00b      	beq.n	8008f2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	4a3b      	ldr	r2, [pc, #236]	; (8009008 <UART_AdvFeatureConfig+0x14c>)
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	0019      	movs	r1, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	430a      	orrs	r2, r1
 8008f28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2e:	2208      	movs	r2, #8
 8008f30:	4013      	ands	r3, r2
 8008f32:	d00b      	beq.n	8008f4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	4a34      	ldr	r2, [pc, #208]	; (800900c <UART_AdvFeatureConfig+0x150>)
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	0019      	movs	r1, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	430a      	orrs	r2, r1
 8008f4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f50:	2210      	movs	r2, #16
 8008f52:	4013      	ands	r3, r2
 8008f54:	d00b      	beq.n	8008f6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	4a2c      	ldr	r2, [pc, #176]	; (8009010 <UART_AdvFeatureConfig+0x154>)
 8008f5e:	4013      	ands	r3, r2
 8008f60:	0019      	movs	r1, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	430a      	orrs	r2, r1
 8008f6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f72:	2220      	movs	r2, #32
 8008f74:	4013      	ands	r3, r2
 8008f76:	d00b      	beq.n	8008f90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	4a25      	ldr	r2, [pc, #148]	; (8009014 <UART_AdvFeatureConfig+0x158>)
 8008f80:	4013      	ands	r3, r2
 8008f82:	0019      	movs	r1, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f94:	2240      	movs	r2, #64	; 0x40
 8008f96:	4013      	ands	r3, r2
 8008f98:	d01d      	beq.n	8008fd6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	4a1d      	ldr	r2, [pc, #116]	; (8009018 <UART_AdvFeatureConfig+0x15c>)
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	0019      	movs	r1, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	430a      	orrs	r2, r1
 8008fb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fb6:	2380      	movs	r3, #128	; 0x80
 8008fb8:	035b      	lsls	r3, r3, #13
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d10b      	bne.n	8008fd6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	4a15      	ldr	r2, [pc, #84]	; (800901c <UART_AdvFeatureConfig+0x160>)
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	0019      	movs	r1, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	430a      	orrs	r2, r1
 8008fd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fda:	2280      	movs	r2, #128	; 0x80
 8008fdc:	4013      	ands	r3, r2
 8008fde:	d00b      	beq.n	8008ff8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	4a0e      	ldr	r2, [pc, #56]	; (8009020 <UART_AdvFeatureConfig+0x164>)
 8008fe8:	4013      	ands	r3, r2
 8008fea:	0019      	movs	r1, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	430a      	orrs	r2, r1
 8008ff6:	605a      	str	r2, [r3, #4]
  }
}
 8008ff8:	46c0      	nop			; (mov r8, r8)
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	b002      	add	sp, #8
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	fffdffff 	.word	0xfffdffff
 8009004:	fffeffff 	.word	0xfffeffff
 8009008:	fffbffff 	.word	0xfffbffff
 800900c:	ffff7fff 	.word	0xffff7fff
 8009010:	ffffefff 	.word	0xffffefff
 8009014:	ffffdfff 	.word	0xffffdfff
 8009018:	ffefffff 	.word	0xffefffff
 800901c:	ff9fffff 	.word	0xff9fffff
 8009020:	fff7ffff 	.word	0xfff7ffff

08009024 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b086      	sub	sp, #24
 8009028:	af02      	add	r7, sp, #8
 800902a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2280      	movs	r2, #128	; 0x80
 8009030:	2100      	movs	r1, #0
 8009032:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009034:	f7fa fa58 	bl	80034e8 <HAL_GetTick>
 8009038:	0003      	movs	r3, r0
 800903a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2208      	movs	r2, #8
 8009044:	4013      	ands	r3, r2
 8009046:	2b08      	cmp	r3, #8
 8009048:	d10c      	bne.n	8009064 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2280      	movs	r2, #128	; 0x80
 800904e:	0391      	lsls	r1, r2, #14
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	4a17      	ldr	r2, [pc, #92]	; (80090b0 <UART_CheckIdleState+0x8c>)
 8009054:	9200      	str	r2, [sp, #0]
 8009056:	2200      	movs	r2, #0
 8009058:	f000 f82c 	bl	80090b4 <UART_WaitOnFlagUntilTimeout>
 800905c:	1e03      	subs	r3, r0, #0
 800905e:	d001      	beq.n	8009064 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009060:	2303      	movs	r3, #3
 8009062:	e021      	b.n	80090a8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2204      	movs	r2, #4
 800906c:	4013      	ands	r3, r2
 800906e:	2b04      	cmp	r3, #4
 8009070:	d10c      	bne.n	800908c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2280      	movs	r2, #128	; 0x80
 8009076:	03d1      	lsls	r1, r2, #15
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	4a0d      	ldr	r2, [pc, #52]	; (80090b0 <UART_CheckIdleState+0x8c>)
 800907c:	9200      	str	r2, [sp, #0]
 800907e:	2200      	movs	r2, #0
 8009080:	f000 f818 	bl	80090b4 <UART_WaitOnFlagUntilTimeout>
 8009084:	1e03      	subs	r3, r0, #0
 8009086:	d001      	beq.n	800908c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009088:	2303      	movs	r3, #3
 800908a:	e00d      	b.n	80090a8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2220      	movs	r2, #32
 8009090:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2220      	movs	r2, #32
 8009096:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2274      	movs	r2, #116	; 0x74
 80090a2:	2100      	movs	r1, #0
 80090a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	0018      	movs	r0, r3
 80090aa:	46bd      	mov	sp, r7
 80090ac:	b004      	add	sp, #16
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	01ffffff 	.word	0x01ffffff

080090b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b094      	sub	sp, #80	; 0x50
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	603b      	str	r3, [r7, #0]
 80090c0:	1dfb      	adds	r3, r7, #7
 80090c2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090c4:	e0a3      	b.n	800920e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090c8:	3301      	adds	r3, #1
 80090ca:	d100      	bne.n	80090ce <UART_WaitOnFlagUntilTimeout+0x1a>
 80090cc:	e09f      	b.n	800920e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090ce:	f7fa fa0b 	bl	80034e8 <HAL_GetTick>
 80090d2:	0002      	movs	r2, r0
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	1ad3      	subs	r3, r2, r3
 80090d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090da:	429a      	cmp	r2, r3
 80090dc:	d302      	bcc.n	80090e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80090de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d13d      	bne.n	8009160 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090e4:	f3ef 8310 	mrs	r3, PRIMASK
 80090e8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80090ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80090ec:	647b      	str	r3, [r7, #68]	; 0x44
 80090ee:	2301      	movs	r3, #1
 80090f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f4:	f383 8810 	msr	PRIMASK, r3
}
 80090f8:	46c0      	nop			; (mov r8, r8)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	494c      	ldr	r1, [pc, #304]	; (8009238 <UART_WaitOnFlagUntilTimeout+0x184>)
 8009106:	400a      	ands	r2, r1
 8009108:	601a      	str	r2, [r3, #0]
 800910a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800910c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800910e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009110:	f383 8810 	msr	PRIMASK, r3
}
 8009114:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009116:	f3ef 8310 	mrs	r3, PRIMASK
 800911a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800911c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800911e:	643b      	str	r3, [r7, #64]	; 0x40
 8009120:	2301      	movs	r3, #1
 8009122:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009126:	f383 8810 	msr	PRIMASK, r3
}
 800912a:	46c0      	nop			; (mov r8, r8)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	689a      	ldr	r2, [r3, #8]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2101      	movs	r1, #1
 8009138:	438a      	bics	r2, r1
 800913a:	609a      	str	r2, [r3, #8]
 800913c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800913e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009142:	f383 8810 	msr	PRIMASK, r3
}
 8009146:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2220      	movs	r2, #32
 800914c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2220      	movs	r2, #32
 8009152:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2274      	movs	r2, #116	; 0x74
 8009158:	2100      	movs	r1, #0
 800915a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800915c:	2303      	movs	r3, #3
 800915e:	e067      	b.n	8009230 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	2204      	movs	r2, #4
 8009168:	4013      	ands	r3, r2
 800916a:	d050      	beq.n	800920e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	69da      	ldr	r2, [r3, #28]
 8009172:	2380      	movs	r3, #128	; 0x80
 8009174:	011b      	lsls	r3, r3, #4
 8009176:	401a      	ands	r2, r3
 8009178:	2380      	movs	r3, #128	; 0x80
 800917a:	011b      	lsls	r3, r3, #4
 800917c:	429a      	cmp	r2, r3
 800917e:	d146      	bne.n	800920e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2280      	movs	r2, #128	; 0x80
 8009186:	0112      	lsls	r2, r2, #4
 8009188:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800918a:	f3ef 8310 	mrs	r3, PRIMASK
 800918e:	613b      	str	r3, [r7, #16]
  return(result);
 8009190:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009194:	2301      	movs	r3, #1
 8009196:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	f383 8810 	msr	PRIMASK, r3
}
 800919e:	46c0      	nop			; (mov r8, r8)
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4923      	ldr	r1, [pc, #140]	; (8009238 <UART_WaitOnFlagUntilTimeout+0x184>)
 80091ac:	400a      	ands	r2, r1
 80091ae:	601a      	str	r2, [r3, #0]
 80091b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091b4:	69bb      	ldr	r3, [r7, #24]
 80091b6:	f383 8810 	msr	PRIMASK, r3
}
 80091ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091bc:	f3ef 8310 	mrs	r3, PRIMASK
 80091c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80091c2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80091c6:	2301      	movs	r3, #1
 80091c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091ca:	6a3b      	ldr	r3, [r7, #32]
 80091cc:	f383 8810 	msr	PRIMASK, r3
}
 80091d0:	46c0      	nop			; (mov r8, r8)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	689a      	ldr	r2, [r3, #8]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2101      	movs	r1, #1
 80091de:	438a      	bics	r2, r1
 80091e0:	609a      	str	r2, [r3, #8]
 80091e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091e4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e8:	f383 8810 	msr	PRIMASK, r3
}
 80091ec:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2220      	movs	r2, #32
 80091f2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2220      	movs	r2, #32
 80091f8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2280      	movs	r2, #128	; 0x80
 80091fe:	2120      	movs	r1, #32
 8009200:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2274      	movs	r2, #116	; 0x74
 8009206:	2100      	movs	r1, #0
 8009208:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800920a:	2303      	movs	r3, #3
 800920c:	e010      	b.n	8009230 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	69db      	ldr	r3, [r3, #28]
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	4013      	ands	r3, r2
 8009218:	68ba      	ldr	r2, [r7, #8]
 800921a:	1ad3      	subs	r3, r2, r3
 800921c:	425a      	negs	r2, r3
 800921e:	4153      	adcs	r3, r2
 8009220:	b2db      	uxtb	r3, r3
 8009222:	001a      	movs	r2, r3
 8009224:	1dfb      	adds	r3, r7, #7
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	429a      	cmp	r2, r3
 800922a:	d100      	bne.n	800922e <UART_WaitOnFlagUntilTimeout+0x17a>
 800922c:	e74b      	b.n	80090c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	0018      	movs	r0, r3
 8009232:	46bd      	mov	sp, r7
 8009234:	b014      	add	sp, #80	; 0x50
 8009236:	bd80      	pop	{r7, pc}
 8009238:	fffffe5f 	.word	0xfffffe5f

0800923c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b08e      	sub	sp, #56	; 0x38
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009244:	f3ef 8310 	mrs	r3, PRIMASK
 8009248:	617b      	str	r3, [r7, #20]
  return(result);
 800924a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800924c:	637b      	str	r3, [r7, #52]	; 0x34
 800924e:	2301      	movs	r3, #1
 8009250:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	f383 8810 	msr	PRIMASK, r3
}
 8009258:	46c0      	nop			; (mov r8, r8)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4925      	ldr	r1, [pc, #148]	; (80092fc <UART_EndRxTransfer+0xc0>)
 8009266:	400a      	ands	r2, r1
 8009268:	601a      	str	r2, [r3, #0]
 800926a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800926c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	f383 8810 	msr	PRIMASK, r3
}
 8009274:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009276:	f3ef 8310 	mrs	r3, PRIMASK
 800927a:	623b      	str	r3, [r7, #32]
  return(result);
 800927c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800927e:	633b      	str	r3, [r7, #48]	; 0x30
 8009280:	2301      	movs	r3, #1
 8009282:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009286:	f383 8810 	msr	PRIMASK, r3
}
 800928a:	46c0      	nop			; (mov r8, r8)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	689a      	ldr	r2, [r3, #8]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2101      	movs	r1, #1
 8009298:	438a      	bics	r2, r1
 800929a:	609a      	str	r2, [r3, #8]
 800929c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a2:	f383 8810 	msr	PRIMASK, r3
}
 80092a6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d118      	bne.n	80092e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092b0:	f3ef 8310 	mrs	r3, PRIMASK
 80092b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80092b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092ba:	2301      	movs	r3, #1
 80092bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f383 8810 	msr	PRIMASK, r3
}
 80092c4:	46c0      	nop			; (mov r8, r8)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2110      	movs	r1, #16
 80092d2:	438a      	bics	r2, r1
 80092d4:	601a      	str	r2, [r3, #0]
 80092d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	f383 8810 	msr	PRIMASK, r3
}
 80092e0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2220      	movs	r2, #32
 80092e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80092f4:	46c0      	nop			; (mov r8, r8)
 80092f6:	46bd      	mov	sp, r7
 80092f8:	b00e      	add	sp, #56	; 0x38
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	fffffedf 	.word	0xfffffedf

08009300 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	225a      	movs	r2, #90	; 0x5a
 8009312:	2100      	movs	r1, #0
 8009314:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2252      	movs	r2, #82	; 0x52
 800931a:	2100      	movs	r1, #0
 800931c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	0018      	movs	r0, r3
 8009322:	f7ff fc2f 	bl	8008b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009326:	46c0      	nop			; (mov r8, r8)
 8009328:	46bd      	mov	sp, r7
 800932a:	b004      	add	sp, #16
 800932c:	bd80      	pop	{r7, pc}

0800932e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b086      	sub	sp, #24
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009336:	f3ef 8310 	mrs	r3, PRIMASK
 800933a:	60bb      	str	r3, [r7, #8]
  return(result);
 800933c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800933e:	617b      	str	r3, [r7, #20]
 8009340:	2301      	movs	r3, #1
 8009342:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f383 8810 	msr	PRIMASK, r3
}
 800934a:	46c0      	nop			; (mov r8, r8)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2140      	movs	r1, #64	; 0x40
 8009358:	438a      	bics	r2, r1
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	f383 8810 	msr	PRIMASK, r3
}
 8009366:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2220      	movs	r2, #32
 800936c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2200      	movs	r2, #0
 8009372:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	0018      	movs	r0, r3
 8009378:	f7ff fbfc 	bl	8008b74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800937c:	46c0      	nop			; (mov r8, r8)
 800937e:	46bd      	mov	sp, r7
 8009380:	b006      	add	sp, #24
 8009382:	bd80      	pop	{r7, pc}

08009384 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b082      	sub	sp, #8
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800938c:	46c0      	nop			; (mov r8, r8)
 800938e:	46bd      	mov	sp, r7
 8009390:	b002      	add	sp, #8
 8009392:	bd80      	pop	{r7, pc}

08009394 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2244      	movs	r2, #68	; 0x44
 80093a0:	2100      	movs	r1, #0
 80093a2:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80093a4:	4b05      	ldr	r3, [pc, #20]	; (80093bc <USB_EnableGlobalInt+0x28>)
 80093a6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	b299      	uxth	r1, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2240      	movs	r2, #64	; 0x40
 80093b0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	0018      	movs	r0, r3
 80093b6:	46bd      	mov	sp, r7
 80093b8:	b004      	add	sp, #16
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	0000bf80 	.word	0x0000bf80

080093c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80093c8:	4b09      	ldr	r3, [pc, #36]	; (80093f0 <USB_DisableGlobalInt+0x30>)
 80093ca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2240      	movs	r2, #64	; 0x40
 80093d0:	5a9b      	ldrh	r3, [r3, r2]
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	b292      	uxth	r2, r2
 80093d8:	43d2      	mvns	r2, r2
 80093da:	b292      	uxth	r2, r2
 80093dc:	4013      	ands	r3, r2
 80093de:	b299      	uxth	r1, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2240      	movs	r2, #64	; 0x40
 80093e4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80093e6:	2300      	movs	r3, #0
}
 80093e8:	0018      	movs	r0, r3
 80093ea:	46bd      	mov	sp, r7
 80093ec:	b004      	add	sp, #16
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	0000bf80 	.word	0x0000bf80

080093f4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80093f4:	b084      	sub	sp, #16
 80093f6:	b590      	push	{r4, r7, lr}
 80093f8:	b083      	sub	sp, #12
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
 80093fe:	2004      	movs	r0, #4
 8009400:	2410      	movs	r4, #16
 8009402:	1900      	adds	r0, r0, r4
 8009404:	2408      	movs	r4, #8
 8009406:	46a4      	mov	ip, r4
 8009408:	44bc      	add	ip, r7
 800940a:	4460      	add	r0, ip
 800940c:	6001      	str	r1, [r0, #0]
 800940e:	6042      	str	r2, [r0, #4]
 8009410:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2240      	movs	r2, #64	; 0x40
 8009416:	2101      	movs	r1, #1
 8009418:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2240      	movs	r2, #64	; 0x40
 800941e:	2100      	movs	r1, #0
 8009420:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2244      	movs	r2, #68	; 0x44
 8009426:	2100      	movs	r1, #0
 8009428:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2250      	movs	r2, #80	; 0x50
 800942e:	2100      	movs	r1, #0
 8009430:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	0018      	movs	r0, r3
 8009436:	46bd      	mov	sp, r7
 8009438:	b003      	add	sp, #12
 800943a:	bc90      	pop	{r4, r7}
 800943c:	bc08      	pop	{r3}
 800943e:	b004      	add	sp, #16
 8009440:	4718      	bx	r3
	...

08009444 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b09c      	sub	sp, #112	; 0x70
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800944e:	236f      	movs	r3, #111	; 0x6f
 8009450:	18fb      	adds	r3, r7, r3
 8009452:	2200      	movs	r2, #0
 8009454:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	18d3      	adds	r3, r2, r3
 8009460:	881b      	ldrh	r3, [r3, #0]
 8009462:	b29a      	uxth	r2, r3
 8009464:	236c      	movs	r3, #108	; 0x6c
 8009466:	18fb      	adds	r3, r7, r3
 8009468:	49cf      	ldr	r1, [pc, #828]	; (80097a8 <USB_ActivateEndpoint+0x364>)
 800946a:	400a      	ands	r2, r1
 800946c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	78db      	ldrb	r3, [r3, #3]
 8009472:	2b03      	cmp	r3, #3
 8009474:	d017      	beq.n	80094a6 <USB_ActivateEndpoint+0x62>
 8009476:	dc28      	bgt.n	80094ca <USB_ActivateEndpoint+0x86>
 8009478:	2b02      	cmp	r3, #2
 800947a:	d00e      	beq.n	800949a <USB_ActivateEndpoint+0x56>
 800947c:	dc25      	bgt.n	80094ca <USB_ActivateEndpoint+0x86>
 800947e:	2b00      	cmp	r3, #0
 8009480:	d002      	beq.n	8009488 <USB_ActivateEndpoint+0x44>
 8009482:	2b01      	cmp	r3, #1
 8009484:	d018      	beq.n	80094b8 <USB_ActivateEndpoint+0x74>
 8009486:	e020      	b.n	80094ca <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009488:	226c      	movs	r2, #108	; 0x6c
 800948a:	18bb      	adds	r3, r7, r2
 800948c:	18ba      	adds	r2, r7, r2
 800948e:	8812      	ldrh	r2, [r2, #0]
 8009490:	2180      	movs	r1, #128	; 0x80
 8009492:	0089      	lsls	r1, r1, #2
 8009494:	430a      	orrs	r2, r1
 8009496:	801a      	strh	r2, [r3, #0]
      break;
 8009498:	e01c      	b.n	80094d4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800949a:	226c      	movs	r2, #108	; 0x6c
 800949c:	18bb      	adds	r3, r7, r2
 800949e:	18ba      	adds	r2, r7, r2
 80094a0:	8812      	ldrh	r2, [r2, #0]
 80094a2:	801a      	strh	r2, [r3, #0]
      break;
 80094a4:	e016      	b.n	80094d4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80094a6:	226c      	movs	r2, #108	; 0x6c
 80094a8:	18bb      	adds	r3, r7, r2
 80094aa:	18ba      	adds	r2, r7, r2
 80094ac:	8812      	ldrh	r2, [r2, #0]
 80094ae:	21c0      	movs	r1, #192	; 0xc0
 80094b0:	00c9      	lsls	r1, r1, #3
 80094b2:	430a      	orrs	r2, r1
 80094b4:	801a      	strh	r2, [r3, #0]
      break;
 80094b6:	e00d      	b.n	80094d4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80094b8:	226c      	movs	r2, #108	; 0x6c
 80094ba:	18bb      	adds	r3, r7, r2
 80094bc:	18ba      	adds	r2, r7, r2
 80094be:	8812      	ldrh	r2, [r2, #0]
 80094c0:	2180      	movs	r1, #128	; 0x80
 80094c2:	00c9      	lsls	r1, r1, #3
 80094c4:	430a      	orrs	r2, r1
 80094c6:	801a      	strh	r2, [r3, #0]
      break;
 80094c8:	e004      	b.n	80094d4 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80094ca:	236f      	movs	r3, #111	; 0x6f
 80094cc:	18fb      	adds	r3, r7, r3
 80094ce:	2201      	movs	r2, #1
 80094d0:	701a      	strb	r2, [r3, #0]
      break;
 80094d2:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	781b      	ldrb	r3, [r3, #0]
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	18d3      	adds	r3, r2, r3
 80094de:	226c      	movs	r2, #108	; 0x6c
 80094e0:	18ba      	adds	r2, r7, r2
 80094e2:	8812      	ldrh	r2, [r2, #0]
 80094e4:	49b1      	ldr	r1, [pc, #708]	; (80097ac <USB_ActivateEndpoint+0x368>)
 80094e6:	430a      	orrs	r2, r1
 80094e8:	b292      	uxth	r2, r2
 80094ea:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80094ec:	687a      	ldr	r2, [r7, #4]
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	18d3      	adds	r3, r2, r3
 80094f6:	881b      	ldrh	r3, [r3, #0]
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	b21b      	sxth	r3, r3
 80094fc:	4aac      	ldr	r2, [pc, #688]	; (80097b0 <USB_ActivateEndpoint+0x36c>)
 80094fe:	4013      	ands	r3, r2
 8009500:	b21a      	sxth	r2, r3
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	b21b      	sxth	r3, r3
 8009508:	4313      	orrs	r3, r2
 800950a:	b21a      	sxth	r2, r3
 800950c:	2166      	movs	r1, #102	; 0x66
 800950e:	187b      	adds	r3, r7, r1
 8009510:	801a      	strh	r2, [r3, #0]
 8009512:	687a      	ldr	r2, [r7, #4]
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	18d3      	adds	r3, r2, r3
 800951c:	187a      	adds	r2, r7, r1
 800951e:	8812      	ldrh	r2, [r2, #0]
 8009520:	49a2      	ldr	r1, [pc, #648]	; (80097ac <USB_ActivateEndpoint+0x368>)
 8009522:	430a      	orrs	r2, r1
 8009524:	b292      	uxth	r2, r2
 8009526:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	7b1b      	ldrb	r3, [r3, #12]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d000      	beq.n	8009532 <USB_ActivateEndpoint+0xee>
 8009530:	e150      	b.n	80097d4 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	785b      	ldrb	r3, [r3, #1]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d100      	bne.n	800953c <USB_ActivateEndpoint+0xf8>
 800953a:	e07a      	b.n	8009632 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	61bb      	str	r3, [r7, #24]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2250      	movs	r2, #80	; 0x50
 8009544:	5a9b      	ldrh	r3, [r3, r2]
 8009546:	b29b      	uxth	r3, r3
 8009548:	001a      	movs	r2, r3
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	189b      	adds	r3, r3, r2
 800954e:	61bb      	str	r3, [r7, #24]
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	00da      	lsls	r2, r3, #3
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	18d3      	adds	r3, r2, r3
 800955a:	2280      	movs	r2, #128	; 0x80
 800955c:	00d2      	lsls	r2, r2, #3
 800955e:	4694      	mov	ip, r2
 8009560:	4463      	add	r3, ip
 8009562:	617b      	str	r3, [r7, #20]
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	88db      	ldrh	r3, [r3, #6]
 8009568:	085b      	lsrs	r3, r3, #1
 800956a:	b29b      	uxth	r3, r3
 800956c:	18db      	adds	r3, r3, r3
 800956e:	b29a      	uxth	r2, r3
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	18d2      	adds	r2, r2, r3
 800957e:	2112      	movs	r1, #18
 8009580:	187b      	adds	r3, r7, r1
 8009582:	8812      	ldrh	r2, [r2, #0]
 8009584:	801a      	strh	r2, [r3, #0]
 8009586:	187b      	adds	r3, r7, r1
 8009588:	881b      	ldrh	r3, [r3, #0]
 800958a:	2240      	movs	r2, #64	; 0x40
 800958c:	4013      	ands	r3, r2
 800958e:	d016      	beq.n	80095be <USB_ActivateEndpoint+0x17a>
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	18d3      	adds	r3, r2, r3
 800959a:	881b      	ldrh	r3, [r3, #0]
 800959c:	b29a      	uxth	r2, r3
 800959e:	2010      	movs	r0, #16
 80095a0:	183b      	adds	r3, r7, r0
 80095a2:	4983      	ldr	r1, [pc, #524]	; (80097b0 <USB_ActivateEndpoint+0x36c>)
 80095a4:	400a      	ands	r2, r1
 80095a6:	801a      	strh	r2, [r3, #0]
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	18d3      	adds	r3, r2, r3
 80095b2:	183a      	adds	r2, r7, r0
 80095b4:	8812      	ldrh	r2, [r2, #0]
 80095b6:	497f      	ldr	r1, [pc, #508]	; (80097b4 <USB_ActivateEndpoint+0x370>)
 80095b8:	430a      	orrs	r2, r1
 80095ba:	b292      	uxth	r2, r2
 80095bc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	78db      	ldrb	r3, [r3, #3]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d01d      	beq.n	8009602 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	18d3      	adds	r3, r2, r3
 80095d0:	881b      	ldrh	r3, [r3, #0]
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	200c      	movs	r0, #12
 80095d6:	183b      	adds	r3, r7, r0
 80095d8:	4977      	ldr	r1, [pc, #476]	; (80097b8 <USB_ActivateEndpoint+0x374>)
 80095da:	400a      	ands	r2, r1
 80095dc:	801a      	strh	r2, [r3, #0]
 80095de:	183b      	adds	r3, r7, r0
 80095e0:	183a      	adds	r2, r7, r0
 80095e2:	8812      	ldrh	r2, [r2, #0]
 80095e4:	2120      	movs	r1, #32
 80095e6:	404a      	eors	r2, r1
 80095e8:	801a      	strh	r2, [r3, #0]
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	18d3      	adds	r3, r2, r3
 80095f4:	183a      	adds	r2, r7, r0
 80095f6:	8812      	ldrh	r2, [r2, #0]
 80095f8:	496c      	ldr	r1, [pc, #432]	; (80097ac <USB_ActivateEndpoint+0x368>)
 80095fa:	430a      	orrs	r2, r1
 80095fc:	b292      	uxth	r2, r2
 80095fe:	801a      	strh	r2, [r3, #0]
 8009600:	e27a      	b.n	8009af8 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	18d3      	adds	r3, r2, r3
 800960c:	881b      	ldrh	r3, [r3, #0]
 800960e:	b29a      	uxth	r2, r3
 8009610:	200e      	movs	r0, #14
 8009612:	183b      	adds	r3, r7, r0
 8009614:	4968      	ldr	r1, [pc, #416]	; (80097b8 <USB_ActivateEndpoint+0x374>)
 8009616:	400a      	ands	r2, r1
 8009618:	801a      	strh	r2, [r3, #0]
 800961a:	687a      	ldr	r2, [r7, #4]
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	009b      	lsls	r3, r3, #2
 8009622:	18d3      	adds	r3, r2, r3
 8009624:	183a      	adds	r2, r7, r0
 8009626:	8812      	ldrh	r2, [r2, #0]
 8009628:	4960      	ldr	r1, [pc, #384]	; (80097ac <USB_ActivateEndpoint+0x368>)
 800962a:	430a      	orrs	r2, r1
 800962c:	b292      	uxth	r2, r2
 800962e:	801a      	strh	r2, [r3, #0]
 8009630:	e262      	b.n	8009af8 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	633b      	str	r3, [r7, #48]	; 0x30
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2250      	movs	r2, #80	; 0x50
 800963a:	5a9b      	ldrh	r3, [r3, r2]
 800963c:	b29b      	uxth	r3, r3
 800963e:	001a      	movs	r2, r3
 8009640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009642:	189b      	adds	r3, r3, r2
 8009644:	633b      	str	r3, [r7, #48]	; 0x30
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	00da      	lsls	r2, r3, #3
 800964c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964e:	18d3      	adds	r3, r2, r3
 8009650:	4a5a      	ldr	r2, [pc, #360]	; (80097bc <USB_ActivateEndpoint+0x378>)
 8009652:	4694      	mov	ip, r2
 8009654:	4463      	add	r3, ip
 8009656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	88db      	ldrh	r3, [r3, #6]
 800965c:	085b      	lsrs	r3, r3, #1
 800965e:	b29b      	uxth	r3, r3
 8009660:	18db      	adds	r3, r3, r3
 8009662:	b29a      	uxth	r2, r3
 8009664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009666:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	62bb      	str	r3, [r7, #40]	; 0x28
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2250      	movs	r2, #80	; 0x50
 8009670:	5a9b      	ldrh	r3, [r3, r2]
 8009672:	b29b      	uxth	r3, r3
 8009674:	001a      	movs	r2, r3
 8009676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009678:	189b      	adds	r3, r3, r2
 800967a:	62bb      	str	r3, [r7, #40]	; 0x28
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	00da      	lsls	r2, r3, #3
 8009682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009684:	18d3      	adds	r3, r2, r3
 8009686:	4a4e      	ldr	r2, [pc, #312]	; (80097c0 <USB_ActivateEndpoint+0x37c>)
 8009688:	4694      	mov	ip, r2
 800968a:	4463      	add	r3, ip
 800968c:	627b      	str	r3, [r7, #36]	; 0x24
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d110      	bne.n	80096b8 <USB_ActivateEndpoint+0x274>
 8009696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009698:	881b      	ldrh	r3, [r3, #0]
 800969a:	b29b      	uxth	r3, r3
 800969c:	4a49      	ldr	r2, [pc, #292]	; (80097c4 <USB_ActivateEndpoint+0x380>)
 800969e:	4013      	ands	r3, r2
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a4:	801a      	strh	r2, [r3, #0]
 80096a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a8:	881b      	ldrh	r3, [r3, #0]
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	4a46      	ldr	r2, [pc, #280]	; (80097c8 <USB_ActivateEndpoint+0x384>)
 80096ae:	4313      	orrs	r3, r2
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b4:	801a      	strh	r2, [r3, #0]
 80096b6:	e02b      	b.n	8009710 <USB_ActivateEndpoint+0x2cc>
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	2b3e      	cmp	r3, #62	; 0x3e
 80096be:	d812      	bhi.n	80096e6 <USB_ActivateEndpoint+0x2a2>
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	085b      	lsrs	r3, r3, #1
 80096c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	2201      	movs	r2, #1
 80096ce:	4013      	ands	r3, r2
 80096d0:	d002      	beq.n	80096d8 <USB_ActivateEndpoint+0x294>
 80096d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096d4:	3301      	adds	r3, #1
 80096d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80096d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096da:	b29b      	uxth	r3, r3
 80096dc:	029b      	lsls	r3, r3, #10
 80096de:	b29a      	uxth	r2, r3
 80096e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e2:	801a      	strh	r2, [r3, #0]
 80096e4:	e014      	b.n	8009710 <USB_ActivateEndpoint+0x2cc>
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	691b      	ldr	r3, [r3, #16]
 80096ea:	095b      	lsrs	r3, r3, #5
 80096ec:	66bb      	str	r3, [r7, #104]	; 0x68
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	691b      	ldr	r3, [r3, #16]
 80096f2:	221f      	movs	r2, #31
 80096f4:	4013      	ands	r3, r2
 80096f6:	d102      	bne.n	80096fe <USB_ActivateEndpoint+0x2ba>
 80096f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096fa:	3b01      	subs	r3, #1
 80096fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80096fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009700:	b29b      	uxth	r3, r3
 8009702:	029b      	lsls	r3, r3, #10
 8009704:	b29b      	uxth	r3, r3
 8009706:	4a30      	ldr	r2, [pc, #192]	; (80097c8 <USB_ActivateEndpoint+0x384>)
 8009708:	4313      	orrs	r3, r2
 800970a:	b29a      	uxth	r2, r3
 800970c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	18d2      	adds	r2, r2, r3
 800971a:	2122      	movs	r1, #34	; 0x22
 800971c:	187b      	adds	r3, r7, r1
 800971e:	8812      	ldrh	r2, [r2, #0]
 8009720:	801a      	strh	r2, [r3, #0]
 8009722:	187b      	adds	r3, r7, r1
 8009724:	881a      	ldrh	r2, [r3, #0]
 8009726:	2380      	movs	r3, #128	; 0x80
 8009728:	01db      	lsls	r3, r3, #7
 800972a:	4013      	ands	r3, r2
 800972c:	d016      	beq.n	800975c <USB_ActivateEndpoint+0x318>
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	18d3      	adds	r3, r2, r3
 8009738:	881b      	ldrh	r3, [r3, #0]
 800973a:	b29a      	uxth	r2, r3
 800973c:	2020      	movs	r0, #32
 800973e:	183b      	adds	r3, r7, r0
 8009740:	491b      	ldr	r1, [pc, #108]	; (80097b0 <USB_ActivateEndpoint+0x36c>)
 8009742:	400a      	ands	r2, r1
 8009744:	801a      	strh	r2, [r3, #0]
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	18d3      	adds	r3, r2, r3
 8009750:	183a      	adds	r2, r7, r0
 8009752:	8812      	ldrh	r2, [r2, #0]
 8009754:	491d      	ldr	r1, [pc, #116]	; (80097cc <USB_ActivateEndpoint+0x388>)
 8009756:	430a      	orrs	r2, r1
 8009758:	b292      	uxth	r2, r2
 800975a:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	18d3      	adds	r3, r2, r3
 8009766:	881b      	ldrh	r3, [r3, #0]
 8009768:	b29a      	uxth	r2, r3
 800976a:	201e      	movs	r0, #30
 800976c:	183b      	adds	r3, r7, r0
 800976e:	4918      	ldr	r1, [pc, #96]	; (80097d0 <USB_ActivateEndpoint+0x38c>)
 8009770:	400a      	ands	r2, r1
 8009772:	801a      	strh	r2, [r3, #0]
 8009774:	183b      	adds	r3, r7, r0
 8009776:	183a      	adds	r2, r7, r0
 8009778:	8812      	ldrh	r2, [r2, #0]
 800977a:	2180      	movs	r1, #128	; 0x80
 800977c:	0149      	lsls	r1, r1, #5
 800977e:	404a      	eors	r2, r1
 8009780:	801a      	strh	r2, [r3, #0]
 8009782:	183b      	adds	r3, r7, r0
 8009784:	183a      	adds	r2, r7, r0
 8009786:	8812      	ldrh	r2, [r2, #0]
 8009788:	2180      	movs	r1, #128	; 0x80
 800978a:	0189      	lsls	r1, r1, #6
 800978c:	404a      	eors	r2, r1
 800978e:	801a      	strh	r2, [r3, #0]
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	18d3      	adds	r3, r2, r3
 800979a:	183a      	adds	r2, r7, r0
 800979c:	8812      	ldrh	r2, [r2, #0]
 800979e:	4903      	ldr	r1, [pc, #12]	; (80097ac <USB_ActivateEndpoint+0x368>)
 80097a0:	430a      	orrs	r2, r1
 80097a2:	b292      	uxth	r2, r2
 80097a4:	801a      	strh	r2, [r3, #0]
 80097a6:	e1a7      	b.n	8009af8 <USB_ActivateEndpoint+0x6b4>
 80097a8:	ffff898f 	.word	0xffff898f
 80097ac:	ffff8080 	.word	0xffff8080
 80097b0:	ffff8f8f 	.word	0xffff8f8f
 80097b4:	ffff80c0 	.word	0xffff80c0
 80097b8:	ffff8fbf 	.word	0xffff8fbf
 80097bc:	00000404 	.word	0x00000404
 80097c0:	00000406 	.word	0x00000406
 80097c4:	ffff83ff 	.word	0xffff83ff
 80097c8:	ffff8000 	.word	0xffff8000
 80097cc:	ffffc080 	.word	0xffffc080
 80097d0:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	78db      	ldrb	r3, [r3, #3]
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d117      	bne.n	800980c <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	18d3      	adds	r3, r2, r3
 80097e6:	881b      	ldrh	r3, [r3, #0]
 80097e8:	b29a      	uxth	r2, r3
 80097ea:	2062      	movs	r0, #98	; 0x62
 80097ec:	183b      	adds	r3, r7, r0
 80097ee:	49c6      	ldr	r1, [pc, #792]	; (8009b08 <USB_ActivateEndpoint+0x6c4>)
 80097f0:	400a      	ands	r2, r1
 80097f2:	801a      	strh	r2, [r3, #0]
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	18d3      	adds	r3, r2, r3
 80097fe:	183a      	adds	r2, r7, r0
 8009800:	8812      	ldrh	r2, [r2, #0]
 8009802:	49c2      	ldr	r1, [pc, #776]	; (8009b0c <USB_ActivateEndpoint+0x6c8>)
 8009804:	430a      	orrs	r2, r1
 8009806:	b292      	uxth	r2, r2
 8009808:	801a      	strh	r2, [r3, #0]
 800980a:	e016      	b.n	800983a <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	18d3      	adds	r3, r2, r3
 8009816:	881b      	ldrh	r3, [r3, #0]
 8009818:	b29a      	uxth	r2, r3
 800981a:	2064      	movs	r0, #100	; 0x64
 800981c:	183b      	adds	r3, r7, r0
 800981e:	49bc      	ldr	r1, [pc, #752]	; (8009b10 <USB_ActivateEndpoint+0x6cc>)
 8009820:	400a      	ands	r2, r1
 8009822:	801a      	strh	r2, [r3, #0]
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	18d3      	adds	r3, r2, r3
 800982e:	183a      	adds	r2, r7, r0
 8009830:	8812      	ldrh	r2, [r2, #0]
 8009832:	49b8      	ldr	r1, [pc, #736]	; (8009b14 <USB_ActivateEndpoint+0x6d0>)
 8009834:	430a      	orrs	r2, r1
 8009836:	b292      	uxth	r2, r2
 8009838:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2250      	movs	r2, #80	; 0x50
 8009842:	5a9b      	ldrh	r3, [r3, r2]
 8009844:	b29b      	uxth	r3, r3
 8009846:	001a      	movs	r2, r3
 8009848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800984a:	189b      	adds	r3, r3, r2
 800984c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	00da      	lsls	r2, r3, #3
 8009854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009856:	18d3      	adds	r3, r2, r3
 8009858:	2280      	movs	r2, #128	; 0x80
 800985a:	00d2      	lsls	r2, r2, #3
 800985c:	4694      	mov	ip, r2
 800985e:	4463      	add	r3, ip
 8009860:	65bb      	str	r3, [r7, #88]	; 0x58
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	891b      	ldrh	r3, [r3, #8]
 8009866:	085b      	lsrs	r3, r3, #1
 8009868:	b29b      	uxth	r3, r3
 800986a:	18db      	adds	r3, r3, r3
 800986c:	b29a      	uxth	r2, r3
 800986e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009870:	801a      	strh	r2, [r3, #0]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	657b      	str	r3, [r7, #84]	; 0x54
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2250      	movs	r2, #80	; 0x50
 800987a:	5a9b      	ldrh	r3, [r3, r2]
 800987c:	b29b      	uxth	r3, r3
 800987e:	001a      	movs	r2, r3
 8009880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009882:	189b      	adds	r3, r3, r2
 8009884:	657b      	str	r3, [r7, #84]	; 0x54
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	00da      	lsls	r2, r3, #3
 800988c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800988e:	18d3      	adds	r3, r2, r3
 8009890:	4aa1      	ldr	r2, [pc, #644]	; (8009b18 <USB_ActivateEndpoint+0x6d4>)
 8009892:	4694      	mov	ip, r2
 8009894:	4463      	add	r3, ip
 8009896:	653b      	str	r3, [r7, #80]	; 0x50
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	895b      	ldrh	r3, [r3, #10]
 800989c:	085b      	lsrs	r3, r3, #1
 800989e:	b29b      	uxth	r3, r3
 80098a0:	18db      	adds	r3, r3, r3
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098a6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	785b      	ldrb	r3, [r3, #1]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d000      	beq.n	80098b2 <USB_ActivateEndpoint+0x46e>
 80098b0:	e087      	b.n	80099c2 <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	18d2      	adds	r2, r2, r3
 80098bc:	2140      	movs	r1, #64	; 0x40
 80098be:	187b      	adds	r3, r7, r1
 80098c0:	8812      	ldrh	r2, [r2, #0]
 80098c2:	801a      	strh	r2, [r3, #0]
 80098c4:	187b      	adds	r3, r7, r1
 80098c6:	881a      	ldrh	r2, [r3, #0]
 80098c8:	2380      	movs	r3, #128	; 0x80
 80098ca:	01db      	lsls	r3, r3, #7
 80098cc:	4013      	ands	r3, r2
 80098ce:	d016      	beq.n	80098fe <USB_ActivateEndpoint+0x4ba>
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	18d3      	adds	r3, r2, r3
 80098da:	881b      	ldrh	r3, [r3, #0]
 80098dc:	b29a      	uxth	r2, r3
 80098de:	203e      	movs	r0, #62	; 0x3e
 80098e0:	183b      	adds	r3, r7, r0
 80098e2:	4989      	ldr	r1, [pc, #548]	; (8009b08 <USB_ActivateEndpoint+0x6c4>)
 80098e4:	400a      	ands	r2, r1
 80098e6:	801a      	strh	r2, [r3, #0]
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	18d3      	adds	r3, r2, r3
 80098f2:	183a      	adds	r2, r7, r0
 80098f4:	8812      	ldrh	r2, [r2, #0]
 80098f6:	4989      	ldr	r1, [pc, #548]	; (8009b1c <USB_ActivateEndpoint+0x6d8>)
 80098f8:	430a      	orrs	r2, r1
 80098fa:	b292      	uxth	r2, r2
 80098fc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	18d2      	adds	r2, r2, r3
 8009908:	213c      	movs	r1, #60	; 0x3c
 800990a:	187b      	adds	r3, r7, r1
 800990c:	8812      	ldrh	r2, [r2, #0]
 800990e:	801a      	strh	r2, [r3, #0]
 8009910:	187b      	adds	r3, r7, r1
 8009912:	881b      	ldrh	r3, [r3, #0]
 8009914:	2240      	movs	r2, #64	; 0x40
 8009916:	4013      	ands	r3, r2
 8009918:	d016      	beq.n	8009948 <USB_ActivateEndpoint+0x504>
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	009b      	lsls	r3, r3, #2
 8009922:	18d3      	adds	r3, r2, r3
 8009924:	881b      	ldrh	r3, [r3, #0]
 8009926:	b29a      	uxth	r2, r3
 8009928:	203a      	movs	r0, #58	; 0x3a
 800992a:	183b      	adds	r3, r7, r0
 800992c:	4976      	ldr	r1, [pc, #472]	; (8009b08 <USB_ActivateEndpoint+0x6c4>)
 800992e:	400a      	ands	r2, r1
 8009930:	801a      	strh	r2, [r3, #0]
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	18d3      	adds	r3, r2, r3
 800993c:	183a      	adds	r2, r7, r0
 800993e:	8812      	ldrh	r2, [r2, #0]
 8009940:	4977      	ldr	r1, [pc, #476]	; (8009b20 <USB_ActivateEndpoint+0x6dc>)
 8009942:	430a      	orrs	r2, r1
 8009944:	b292      	uxth	r2, r2
 8009946:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	18d3      	adds	r3, r2, r3
 8009952:	881b      	ldrh	r3, [r3, #0]
 8009954:	b29a      	uxth	r2, r3
 8009956:	2038      	movs	r0, #56	; 0x38
 8009958:	183b      	adds	r3, r7, r0
 800995a:	4972      	ldr	r1, [pc, #456]	; (8009b24 <USB_ActivateEndpoint+0x6e0>)
 800995c:	400a      	ands	r2, r1
 800995e:	801a      	strh	r2, [r3, #0]
 8009960:	183b      	adds	r3, r7, r0
 8009962:	183a      	adds	r2, r7, r0
 8009964:	8812      	ldrh	r2, [r2, #0]
 8009966:	2180      	movs	r1, #128	; 0x80
 8009968:	0149      	lsls	r1, r1, #5
 800996a:	404a      	eors	r2, r1
 800996c:	801a      	strh	r2, [r3, #0]
 800996e:	183b      	adds	r3, r7, r0
 8009970:	183a      	adds	r2, r7, r0
 8009972:	8812      	ldrh	r2, [r2, #0]
 8009974:	2180      	movs	r1, #128	; 0x80
 8009976:	0189      	lsls	r1, r1, #6
 8009978:	404a      	eors	r2, r1
 800997a:	801a      	strh	r2, [r3, #0]
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	18d3      	adds	r3, r2, r3
 8009986:	183a      	adds	r2, r7, r0
 8009988:	8812      	ldrh	r2, [r2, #0]
 800998a:	4962      	ldr	r1, [pc, #392]	; (8009b14 <USB_ActivateEndpoint+0x6d0>)
 800998c:	430a      	orrs	r2, r1
 800998e:	b292      	uxth	r2, r2
 8009990:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	18d3      	adds	r3, r2, r3
 800999c:	881b      	ldrh	r3, [r3, #0]
 800999e:	b29a      	uxth	r2, r3
 80099a0:	2036      	movs	r0, #54	; 0x36
 80099a2:	183b      	adds	r3, r7, r0
 80099a4:	4960      	ldr	r1, [pc, #384]	; (8009b28 <USB_ActivateEndpoint+0x6e4>)
 80099a6:	400a      	ands	r2, r1
 80099a8:	801a      	strh	r2, [r3, #0]
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	18d3      	adds	r3, r2, r3
 80099b4:	183a      	adds	r2, r7, r0
 80099b6:	8812      	ldrh	r2, [r2, #0]
 80099b8:	4956      	ldr	r1, [pc, #344]	; (8009b14 <USB_ActivateEndpoint+0x6d0>)
 80099ba:	430a      	orrs	r2, r1
 80099bc:	b292      	uxth	r2, r2
 80099be:	801a      	strh	r2, [r3, #0]
 80099c0:	e09a      	b.n	8009af8 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80099c2:	687a      	ldr	r2, [r7, #4]
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	18d2      	adds	r2, r2, r3
 80099cc:	214e      	movs	r1, #78	; 0x4e
 80099ce:	187b      	adds	r3, r7, r1
 80099d0:	8812      	ldrh	r2, [r2, #0]
 80099d2:	801a      	strh	r2, [r3, #0]
 80099d4:	187b      	adds	r3, r7, r1
 80099d6:	881a      	ldrh	r2, [r3, #0]
 80099d8:	2380      	movs	r3, #128	; 0x80
 80099da:	01db      	lsls	r3, r3, #7
 80099dc:	4013      	ands	r3, r2
 80099de:	d016      	beq.n	8009a0e <USB_ActivateEndpoint+0x5ca>
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	18d3      	adds	r3, r2, r3
 80099ea:	881b      	ldrh	r3, [r3, #0]
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	204c      	movs	r0, #76	; 0x4c
 80099f0:	183b      	adds	r3, r7, r0
 80099f2:	4945      	ldr	r1, [pc, #276]	; (8009b08 <USB_ActivateEndpoint+0x6c4>)
 80099f4:	400a      	ands	r2, r1
 80099f6:	801a      	strh	r2, [r3, #0]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	18d3      	adds	r3, r2, r3
 8009a02:	183a      	adds	r2, r7, r0
 8009a04:	8812      	ldrh	r2, [r2, #0]
 8009a06:	4945      	ldr	r1, [pc, #276]	; (8009b1c <USB_ActivateEndpoint+0x6d8>)
 8009a08:	430a      	orrs	r2, r1
 8009a0a:	b292      	uxth	r2, r2
 8009a0c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	18d2      	adds	r2, r2, r3
 8009a18:	214a      	movs	r1, #74	; 0x4a
 8009a1a:	187b      	adds	r3, r7, r1
 8009a1c:	8812      	ldrh	r2, [r2, #0]
 8009a1e:	801a      	strh	r2, [r3, #0]
 8009a20:	187b      	adds	r3, r7, r1
 8009a22:	881b      	ldrh	r3, [r3, #0]
 8009a24:	2240      	movs	r2, #64	; 0x40
 8009a26:	4013      	ands	r3, r2
 8009a28:	d016      	beq.n	8009a58 <USB_ActivateEndpoint+0x614>
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	18d3      	adds	r3, r2, r3
 8009a34:	881b      	ldrh	r3, [r3, #0]
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	2048      	movs	r0, #72	; 0x48
 8009a3a:	183b      	adds	r3, r7, r0
 8009a3c:	4932      	ldr	r1, [pc, #200]	; (8009b08 <USB_ActivateEndpoint+0x6c4>)
 8009a3e:	400a      	ands	r2, r1
 8009a40:	801a      	strh	r2, [r3, #0]
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	18d3      	adds	r3, r2, r3
 8009a4c:	183a      	adds	r2, r7, r0
 8009a4e:	8812      	ldrh	r2, [r2, #0]
 8009a50:	4933      	ldr	r1, [pc, #204]	; (8009b20 <USB_ActivateEndpoint+0x6dc>)
 8009a52:	430a      	orrs	r2, r1
 8009a54:	b292      	uxth	r2, r2
 8009a56:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	78db      	ldrb	r3, [r3, #3]
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d01d      	beq.n	8009a9c <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	18d3      	adds	r3, r2, r3
 8009a6a:	881b      	ldrh	r3, [r3, #0]
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	2044      	movs	r0, #68	; 0x44
 8009a70:	183b      	adds	r3, r7, r0
 8009a72:	492d      	ldr	r1, [pc, #180]	; (8009b28 <USB_ActivateEndpoint+0x6e4>)
 8009a74:	400a      	ands	r2, r1
 8009a76:	801a      	strh	r2, [r3, #0]
 8009a78:	183b      	adds	r3, r7, r0
 8009a7a:	183a      	adds	r2, r7, r0
 8009a7c:	8812      	ldrh	r2, [r2, #0]
 8009a7e:	2120      	movs	r1, #32
 8009a80:	404a      	eors	r2, r1
 8009a82:	801a      	strh	r2, [r3, #0]
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	781b      	ldrb	r3, [r3, #0]
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	18d3      	adds	r3, r2, r3
 8009a8e:	183a      	adds	r2, r7, r0
 8009a90:	8812      	ldrh	r2, [r2, #0]
 8009a92:	4920      	ldr	r1, [pc, #128]	; (8009b14 <USB_ActivateEndpoint+0x6d0>)
 8009a94:	430a      	orrs	r2, r1
 8009a96:	b292      	uxth	r2, r2
 8009a98:	801a      	strh	r2, [r3, #0]
 8009a9a:	e016      	b.n	8009aca <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	18d3      	adds	r3, r2, r3
 8009aa6:	881b      	ldrh	r3, [r3, #0]
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	2046      	movs	r0, #70	; 0x46
 8009aac:	183b      	adds	r3, r7, r0
 8009aae:	491e      	ldr	r1, [pc, #120]	; (8009b28 <USB_ActivateEndpoint+0x6e4>)
 8009ab0:	400a      	ands	r2, r1
 8009ab2:	801a      	strh	r2, [r3, #0]
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	18d3      	adds	r3, r2, r3
 8009abe:	183a      	adds	r2, r7, r0
 8009ac0:	8812      	ldrh	r2, [r2, #0]
 8009ac2:	4914      	ldr	r1, [pc, #80]	; (8009b14 <USB_ActivateEndpoint+0x6d0>)
 8009ac4:	430a      	orrs	r2, r1
 8009ac6:	b292      	uxth	r2, r2
 8009ac8:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	18d3      	adds	r3, r2, r3
 8009ad4:	881b      	ldrh	r3, [r3, #0]
 8009ad6:	b29a      	uxth	r2, r3
 8009ad8:	2042      	movs	r0, #66	; 0x42
 8009ada:	183b      	adds	r3, r7, r0
 8009adc:	4911      	ldr	r1, [pc, #68]	; (8009b24 <USB_ActivateEndpoint+0x6e0>)
 8009ade:	400a      	ands	r2, r1
 8009ae0:	801a      	strh	r2, [r3, #0]
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	18d3      	adds	r3, r2, r3
 8009aec:	183a      	adds	r2, r7, r0
 8009aee:	8812      	ldrh	r2, [r2, #0]
 8009af0:	4908      	ldr	r1, [pc, #32]	; (8009b14 <USB_ActivateEndpoint+0x6d0>)
 8009af2:	430a      	orrs	r2, r1
 8009af4:	b292      	uxth	r2, r2
 8009af6:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8009af8:	236f      	movs	r3, #111	; 0x6f
 8009afa:	18fb      	adds	r3, r7, r3
 8009afc:	781b      	ldrb	r3, [r3, #0]
}
 8009afe:	0018      	movs	r0, r3
 8009b00:	46bd      	mov	sp, r7
 8009b02:	b01c      	add	sp, #112	; 0x70
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	46c0      	nop			; (mov r8, r8)
 8009b08:	ffff8f8f 	.word	0xffff8f8f
 8009b0c:	ffff8180 	.word	0xffff8180
 8009b10:	ffff8e8f 	.word	0xffff8e8f
 8009b14:	ffff8080 	.word	0xffff8080
 8009b18:	00000404 	.word	0x00000404
 8009b1c:	ffffc080 	.word	0xffffc080
 8009b20:	ffff80c0 	.word	0xffff80c0
 8009b24:	ffffbf8f 	.word	0xffffbf8f
 8009b28:	ffff8fbf 	.word	0xffff8fbf

08009b2c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b08c      	sub	sp, #48	; 0x30
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	7b1b      	ldrb	r3, [r3, #12]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d000      	beq.n	8009b40 <USB_DeactivateEndpoint+0x14>
 8009b3e:	e07e      	b.n	8009c3e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	785b      	ldrb	r3, [r3, #1]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d03c      	beq.n	8009bc2 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	18d2      	adds	r2, r2, r3
 8009b52:	210c      	movs	r1, #12
 8009b54:	187b      	adds	r3, r7, r1
 8009b56:	8812      	ldrh	r2, [r2, #0]
 8009b58:	801a      	strh	r2, [r3, #0]
 8009b5a:	187b      	adds	r3, r7, r1
 8009b5c:	881b      	ldrh	r3, [r3, #0]
 8009b5e:	2240      	movs	r2, #64	; 0x40
 8009b60:	4013      	ands	r3, r2
 8009b62:	d016      	beq.n	8009b92 <USB_DeactivateEndpoint+0x66>
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	18d3      	adds	r3, r2, r3
 8009b6e:	881b      	ldrh	r3, [r3, #0]
 8009b70:	b29a      	uxth	r2, r3
 8009b72:	200a      	movs	r0, #10
 8009b74:	183b      	adds	r3, r7, r0
 8009b76:	49c7      	ldr	r1, [pc, #796]	; (8009e94 <USB_DeactivateEndpoint+0x368>)
 8009b78:	400a      	ands	r2, r1
 8009b7a:	801a      	strh	r2, [r3, #0]
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	009b      	lsls	r3, r3, #2
 8009b84:	18d3      	adds	r3, r2, r3
 8009b86:	183a      	adds	r2, r7, r0
 8009b88:	8812      	ldrh	r2, [r2, #0]
 8009b8a:	49c3      	ldr	r1, [pc, #780]	; (8009e98 <USB_DeactivateEndpoint+0x36c>)
 8009b8c:	430a      	orrs	r2, r1
 8009b8e:	b292      	uxth	r2, r2
 8009b90:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	18d3      	adds	r3, r2, r3
 8009b9c:	881b      	ldrh	r3, [r3, #0]
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	2008      	movs	r0, #8
 8009ba2:	183b      	adds	r3, r7, r0
 8009ba4:	49bd      	ldr	r1, [pc, #756]	; (8009e9c <USB_DeactivateEndpoint+0x370>)
 8009ba6:	400a      	ands	r2, r1
 8009ba8:	801a      	strh	r2, [r3, #0]
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	18d3      	adds	r3, r2, r3
 8009bb4:	183a      	adds	r2, r7, r0
 8009bb6:	8812      	ldrh	r2, [r2, #0]
 8009bb8:	49b9      	ldr	r1, [pc, #740]	; (8009ea0 <USB_DeactivateEndpoint+0x374>)
 8009bba:	430a      	orrs	r2, r1
 8009bbc:	b292      	uxth	r2, r2
 8009bbe:	801a      	strh	r2, [r3, #0]
 8009bc0:	e163      	b.n	8009e8a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	18d2      	adds	r2, r2, r3
 8009bcc:	2112      	movs	r1, #18
 8009bce:	187b      	adds	r3, r7, r1
 8009bd0:	8812      	ldrh	r2, [r2, #0]
 8009bd2:	801a      	strh	r2, [r3, #0]
 8009bd4:	187b      	adds	r3, r7, r1
 8009bd6:	881a      	ldrh	r2, [r3, #0]
 8009bd8:	2380      	movs	r3, #128	; 0x80
 8009bda:	01db      	lsls	r3, r3, #7
 8009bdc:	4013      	ands	r3, r2
 8009bde:	d016      	beq.n	8009c0e <USB_DeactivateEndpoint+0xe2>
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	18d3      	adds	r3, r2, r3
 8009bea:	881b      	ldrh	r3, [r3, #0]
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	2010      	movs	r0, #16
 8009bf0:	183b      	adds	r3, r7, r0
 8009bf2:	49a8      	ldr	r1, [pc, #672]	; (8009e94 <USB_DeactivateEndpoint+0x368>)
 8009bf4:	400a      	ands	r2, r1
 8009bf6:	801a      	strh	r2, [r3, #0]
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	18d3      	adds	r3, r2, r3
 8009c02:	183a      	adds	r2, r7, r0
 8009c04:	8812      	ldrh	r2, [r2, #0]
 8009c06:	49a7      	ldr	r1, [pc, #668]	; (8009ea4 <USB_DeactivateEndpoint+0x378>)
 8009c08:	430a      	orrs	r2, r1
 8009c0a:	b292      	uxth	r2, r2
 8009c0c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	781b      	ldrb	r3, [r3, #0]
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	18d3      	adds	r3, r2, r3
 8009c18:	881b      	ldrh	r3, [r3, #0]
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	200e      	movs	r0, #14
 8009c1e:	183b      	adds	r3, r7, r0
 8009c20:	49a1      	ldr	r1, [pc, #644]	; (8009ea8 <USB_DeactivateEndpoint+0x37c>)
 8009c22:	400a      	ands	r2, r1
 8009c24:	801a      	strh	r2, [r3, #0]
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	18d3      	adds	r3, r2, r3
 8009c30:	183a      	adds	r2, r7, r0
 8009c32:	8812      	ldrh	r2, [r2, #0]
 8009c34:	499a      	ldr	r1, [pc, #616]	; (8009ea0 <USB_DeactivateEndpoint+0x374>)
 8009c36:	430a      	orrs	r2, r1
 8009c38:	b292      	uxth	r2, r2
 8009c3a:	801a      	strh	r2, [r3, #0]
 8009c3c:	e125      	b.n	8009e8a <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	785b      	ldrb	r3, [r3, #1]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d000      	beq.n	8009c48 <USB_DeactivateEndpoint+0x11c>
 8009c46:	e090      	b.n	8009d6a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	781b      	ldrb	r3, [r3, #0]
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	18d2      	adds	r2, r2, r3
 8009c52:	2120      	movs	r1, #32
 8009c54:	187b      	adds	r3, r7, r1
 8009c56:	8812      	ldrh	r2, [r2, #0]
 8009c58:	801a      	strh	r2, [r3, #0]
 8009c5a:	187b      	adds	r3, r7, r1
 8009c5c:	881a      	ldrh	r2, [r3, #0]
 8009c5e:	2380      	movs	r3, #128	; 0x80
 8009c60:	01db      	lsls	r3, r3, #7
 8009c62:	4013      	ands	r3, r2
 8009c64:	d016      	beq.n	8009c94 <USB_DeactivateEndpoint+0x168>
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	18d3      	adds	r3, r2, r3
 8009c70:	881b      	ldrh	r3, [r3, #0]
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	201e      	movs	r0, #30
 8009c76:	183b      	adds	r3, r7, r0
 8009c78:	4986      	ldr	r1, [pc, #536]	; (8009e94 <USB_DeactivateEndpoint+0x368>)
 8009c7a:	400a      	ands	r2, r1
 8009c7c:	801a      	strh	r2, [r3, #0]
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	18d3      	adds	r3, r2, r3
 8009c88:	183a      	adds	r2, r7, r0
 8009c8a:	8812      	ldrh	r2, [r2, #0]
 8009c8c:	4985      	ldr	r1, [pc, #532]	; (8009ea4 <USB_DeactivateEndpoint+0x378>)
 8009c8e:	430a      	orrs	r2, r1
 8009c90:	b292      	uxth	r2, r2
 8009c92:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	18d2      	adds	r2, r2, r3
 8009c9e:	211c      	movs	r1, #28
 8009ca0:	187b      	adds	r3, r7, r1
 8009ca2:	8812      	ldrh	r2, [r2, #0]
 8009ca4:	801a      	strh	r2, [r3, #0]
 8009ca6:	187b      	adds	r3, r7, r1
 8009ca8:	881b      	ldrh	r3, [r3, #0]
 8009caa:	2240      	movs	r2, #64	; 0x40
 8009cac:	4013      	ands	r3, r2
 8009cae:	d016      	beq.n	8009cde <USB_DeactivateEndpoint+0x1b2>
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	009b      	lsls	r3, r3, #2
 8009cb8:	18d3      	adds	r3, r2, r3
 8009cba:	881b      	ldrh	r3, [r3, #0]
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	201a      	movs	r0, #26
 8009cc0:	183b      	adds	r3, r7, r0
 8009cc2:	4974      	ldr	r1, [pc, #464]	; (8009e94 <USB_DeactivateEndpoint+0x368>)
 8009cc4:	400a      	ands	r2, r1
 8009cc6:	801a      	strh	r2, [r3, #0]
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	18d3      	adds	r3, r2, r3
 8009cd2:	183a      	adds	r2, r7, r0
 8009cd4:	8812      	ldrh	r2, [r2, #0]
 8009cd6:	4970      	ldr	r1, [pc, #448]	; (8009e98 <USB_DeactivateEndpoint+0x36c>)
 8009cd8:	430a      	orrs	r2, r1
 8009cda:	b292      	uxth	r2, r2
 8009cdc:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	18d3      	adds	r3, r2, r3
 8009ce8:	881b      	ldrh	r3, [r3, #0]
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	2018      	movs	r0, #24
 8009cee:	183b      	adds	r3, r7, r0
 8009cf0:	4968      	ldr	r1, [pc, #416]	; (8009e94 <USB_DeactivateEndpoint+0x368>)
 8009cf2:	400a      	ands	r2, r1
 8009cf4:	801a      	strh	r2, [r3, #0]
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	18d3      	adds	r3, r2, r3
 8009d00:	183a      	adds	r2, r7, r0
 8009d02:	8812      	ldrh	r2, [r2, #0]
 8009d04:	4964      	ldr	r1, [pc, #400]	; (8009e98 <USB_DeactivateEndpoint+0x36c>)
 8009d06:	430a      	orrs	r2, r1
 8009d08:	b292      	uxth	r2, r2
 8009d0a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	009b      	lsls	r3, r3, #2
 8009d14:	18d3      	adds	r3, r2, r3
 8009d16:	881b      	ldrh	r3, [r3, #0]
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	2016      	movs	r0, #22
 8009d1c:	183b      	adds	r3, r7, r0
 8009d1e:	4962      	ldr	r1, [pc, #392]	; (8009ea8 <USB_DeactivateEndpoint+0x37c>)
 8009d20:	400a      	ands	r2, r1
 8009d22:	801a      	strh	r2, [r3, #0]
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	18d3      	adds	r3, r2, r3
 8009d2e:	183a      	adds	r2, r7, r0
 8009d30:	8812      	ldrh	r2, [r2, #0]
 8009d32:	495b      	ldr	r1, [pc, #364]	; (8009ea0 <USB_DeactivateEndpoint+0x374>)
 8009d34:	430a      	orrs	r2, r1
 8009d36:	b292      	uxth	r2, r2
 8009d38:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	18d3      	adds	r3, r2, r3
 8009d44:	881b      	ldrh	r3, [r3, #0]
 8009d46:	b29a      	uxth	r2, r3
 8009d48:	2014      	movs	r0, #20
 8009d4a:	183b      	adds	r3, r7, r0
 8009d4c:	4953      	ldr	r1, [pc, #332]	; (8009e9c <USB_DeactivateEndpoint+0x370>)
 8009d4e:	400a      	ands	r2, r1
 8009d50:	801a      	strh	r2, [r3, #0]
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	18d3      	adds	r3, r2, r3
 8009d5c:	183a      	adds	r2, r7, r0
 8009d5e:	8812      	ldrh	r2, [r2, #0]
 8009d60:	494f      	ldr	r1, [pc, #316]	; (8009ea0 <USB_DeactivateEndpoint+0x374>)
 8009d62:	430a      	orrs	r2, r1
 8009d64:	b292      	uxth	r2, r2
 8009d66:	801a      	strh	r2, [r3, #0]
 8009d68:	e08f      	b.n	8009e8a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	18d2      	adds	r2, r2, r3
 8009d74:	212e      	movs	r1, #46	; 0x2e
 8009d76:	187b      	adds	r3, r7, r1
 8009d78:	8812      	ldrh	r2, [r2, #0]
 8009d7a:	801a      	strh	r2, [r3, #0]
 8009d7c:	187b      	adds	r3, r7, r1
 8009d7e:	881a      	ldrh	r2, [r3, #0]
 8009d80:	2380      	movs	r3, #128	; 0x80
 8009d82:	01db      	lsls	r3, r3, #7
 8009d84:	4013      	ands	r3, r2
 8009d86:	d016      	beq.n	8009db6 <USB_DeactivateEndpoint+0x28a>
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	18d3      	adds	r3, r2, r3
 8009d92:	881b      	ldrh	r3, [r3, #0]
 8009d94:	b29a      	uxth	r2, r3
 8009d96:	202c      	movs	r0, #44	; 0x2c
 8009d98:	183b      	adds	r3, r7, r0
 8009d9a:	493e      	ldr	r1, [pc, #248]	; (8009e94 <USB_DeactivateEndpoint+0x368>)
 8009d9c:	400a      	ands	r2, r1
 8009d9e:	801a      	strh	r2, [r3, #0]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	18d3      	adds	r3, r2, r3
 8009daa:	183a      	adds	r2, r7, r0
 8009dac:	8812      	ldrh	r2, [r2, #0]
 8009dae:	493d      	ldr	r1, [pc, #244]	; (8009ea4 <USB_DeactivateEndpoint+0x378>)
 8009db0:	430a      	orrs	r2, r1
 8009db2:	b292      	uxth	r2, r2
 8009db4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	781b      	ldrb	r3, [r3, #0]
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	18d2      	adds	r2, r2, r3
 8009dc0:	212a      	movs	r1, #42	; 0x2a
 8009dc2:	187b      	adds	r3, r7, r1
 8009dc4:	8812      	ldrh	r2, [r2, #0]
 8009dc6:	801a      	strh	r2, [r3, #0]
 8009dc8:	187b      	adds	r3, r7, r1
 8009dca:	881b      	ldrh	r3, [r3, #0]
 8009dcc:	2240      	movs	r2, #64	; 0x40
 8009dce:	4013      	ands	r3, r2
 8009dd0:	d016      	beq.n	8009e00 <USB_DeactivateEndpoint+0x2d4>
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	18d3      	adds	r3, r2, r3
 8009ddc:	881b      	ldrh	r3, [r3, #0]
 8009dde:	b29a      	uxth	r2, r3
 8009de0:	2028      	movs	r0, #40	; 0x28
 8009de2:	183b      	adds	r3, r7, r0
 8009de4:	492b      	ldr	r1, [pc, #172]	; (8009e94 <USB_DeactivateEndpoint+0x368>)
 8009de6:	400a      	ands	r2, r1
 8009de8:	801a      	strh	r2, [r3, #0]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	18d3      	adds	r3, r2, r3
 8009df4:	183a      	adds	r2, r7, r0
 8009df6:	8812      	ldrh	r2, [r2, #0]
 8009df8:	4927      	ldr	r1, [pc, #156]	; (8009e98 <USB_DeactivateEndpoint+0x36c>)
 8009dfa:	430a      	orrs	r2, r1
 8009dfc:	b292      	uxth	r2, r2
 8009dfe:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	18d3      	adds	r3, r2, r3
 8009e0a:	881b      	ldrh	r3, [r3, #0]
 8009e0c:	b29a      	uxth	r2, r3
 8009e0e:	2026      	movs	r0, #38	; 0x26
 8009e10:	183b      	adds	r3, r7, r0
 8009e12:	4920      	ldr	r1, [pc, #128]	; (8009e94 <USB_DeactivateEndpoint+0x368>)
 8009e14:	400a      	ands	r2, r1
 8009e16:	801a      	strh	r2, [r3, #0]
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	18d3      	adds	r3, r2, r3
 8009e22:	183a      	adds	r2, r7, r0
 8009e24:	8812      	ldrh	r2, [r2, #0]
 8009e26:	491f      	ldr	r1, [pc, #124]	; (8009ea4 <USB_DeactivateEndpoint+0x378>)
 8009e28:	430a      	orrs	r2, r1
 8009e2a:	b292      	uxth	r2, r2
 8009e2c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	781b      	ldrb	r3, [r3, #0]
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	18d3      	adds	r3, r2, r3
 8009e38:	881b      	ldrh	r3, [r3, #0]
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	2024      	movs	r0, #36	; 0x24
 8009e3e:	183b      	adds	r3, r7, r0
 8009e40:	4916      	ldr	r1, [pc, #88]	; (8009e9c <USB_DeactivateEndpoint+0x370>)
 8009e42:	400a      	ands	r2, r1
 8009e44:	801a      	strh	r2, [r3, #0]
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	18d3      	adds	r3, r2, r3
 8009e50:	183a      	adds	r2, r7, r0
 8009e52:	8812      	ldrh	r2, [r2, #0]
 8009e54:	4912      	ldr	r1, [pc, #72]	; (8009ea0 <USB_DeactivateEndpoint+0x374>)
 8009e56:	430a      	orrs	r2, r1
 8009e58:	b292      	uxth	r2, r2
 8009e5a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	18d3      	adds	r3, r2, r3
 8009e66:	881b      	ldrh	r3, [r3, #0]
 8009e68:	b29a      	uxth	r2, r3
 8009e6a:	2022      	movs	r0, #34	; 0x22
 8009e6c:	183b      	adds	r3, r7, r0
 8009e6e:	490e      	ldr	r1, [pc, #56]	; (8009ea8 <USB_DeactivateEndpoint+0x37c>)
 8009e70:	400a      	ands	r2, r1
 8009e72:	801a      	strh	r2, [r3, #0]
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	18d3      	adds	r3, r2, r3
 8009e7e:	183a      	adds	r2, r7, r0
 8009e80:	8812      	ldrh	r2, [r2, #0]
 8009e82:	4907      	ldr	r1, [pc, #28]	; (8009ea0 <USB_DeactivateEndpoint+0x374>)
 8009e84:	430a      	orrs	r2, r1
 8009e86:	b292      	uxth	r2, r2
 8009e88:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8009e8a:	2300      	movs	r3, #0
}
 8009e8c:	0018      	movs	r0, r3
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	b00c      	add	sp, #48	; 0x30
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	ffff8f8f 	.word	0xffff8f8f
 8009e98:	ffff80c0 	.word	0xffff80c0
 8009e9c:	ffff8fbf 	.word	0xffff8fbf
 8009ea0:	ffff8080 	.word	0xffff8080
 8009ea4:	ffffc080 	.word	0xffffc080
 8009ea8:	ffffbf8f 	.word	0xffffbf8f

08009eac <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009eac:	b590      	push	{r4, r7, lr}
 8009eae:	b0c3      	sub	sp, #268	; 0x10c
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	785b      	ldrb	r3, [r3, #1]
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d001      	beq.n	8009ec2 <USB_EPStartXfer+0x16>
 8009ebe:	f000 fcef 	bl	800a8a0 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	699a      	ldr	r2, [r3, #24]
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	691b      	ldr	r3, [r3, #16]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d905      	bls.n	8009eda <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	1d7a      	adds	r2, r7, #5
 8009ed4:	32ff      	adds	r2, #255	; 0xff
 8009ed6:	6013      	str	r3, [r2, #0]
 8009ed8:	e004      	b.n	8009ee4 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	699b      	ldr	r3, [r3, #24]
 8009ede:	1d7a      	adds	r2, r7, #5
 8009ee0:	32ff      	adds	r2, #255	; 0xff
 8009ee2:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	7b1b      	ldrb	r3, [r3, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d125      	bne.n	8009f38 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	6959      	ldr	r1, [r3, #20]
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	88da      	ldrh	r2, [r3, #6]
 8009ef4:	1d7b      	adds	r3, r7, #5
 8009ef6:	33ff      	adds	r3, #255	; 0xff
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f001 f9c9 	bl	800b294 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	613b      	str	r3, [r7, #16]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2250      	movs	r2, #80	; 0x50
 8009f0a:	5a9b      	ldrh	r3, [r3, r2]
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	001a      	movs	r2, r3
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	189b      	adds	r3, r3, r2
 8009f14:	613b      	str	r3, [r7, #16]
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	00da      	lsls	r2, r3, #3
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	18d3      	adds	r3, r2, r3
 8009f20:	4acc      	ldr	r2, [pc, #816]	; (800a254 <USB_EPStartXfer+0x3a8>)
 8009f22:	4694      	mov	ip, r2
 8009f24:	4463      	add	r3, ip
 8009f26:	60fb      	str	r3, [r7, #12]
 8009f28:	1d7b      	adds	r3, r7, #5
 8009f2a:	33ff      	adds	r3, #255	; 0xff
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	b29a      	uxth	r2, r3
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	801a      	strh	r2, [r3, #0]
 8009f34:	f000 fc8f 	bl	800a856 <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	78db      	ldrb	r3, [r3, #3]
 8009f3c:	2b02      	cmp	r3, #2
 8009f3e:	d000      	beq.n	8009f42 <USB_EPStartXfer+0x96>
 8009f40:	e33a      	b.n	800a5b8 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	6a1a      	ldr	r2, [r3, #32]
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	d800      	bhi.n	8009f50 <USB_EPStartXfer+0xa4>
 8009f4e:	e2df      	b.n	800a510 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	009b      	lsls	r3, r3, #2
 8009f58:	18d3      	adds	r3, r2, r3
 8009f5a:	881b      	ldrh	r3, [r3, #0]
 8009f5c:	b29a      	uxth	r2, r3
 8009f5e:	2056      	movs	r0, #86	; 0x56
 8009f60:	183b      	adds	r3, r7, r0
 8009f62:	49bd      	ldr	r1, [pc, #756]	; (800a258 <USB_EPStartXfer+0x3ac>)
 8009f64:	400a      	ands	r2, r1
 8009f66:	801a      	strh	r2, [r3, #0]
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	18d3      	adds	r3, r2, r3
 8009f72:	183a      	adds	r2, r7, r0
 8009f74:	8812      	ldrh	r2, [r2, #0]
 8009f76:	49b9      	ldr	r1, [pc, #740]	; (800a25c <USB_EPStartXfer+0x3b0>)
 8009f78:	430a      	orrs	r2, r1
 8009f7a:	b292      	uxth	r2, r2
 8009f7c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	6a1a      	ldr	r2, [r3, #32]
 8009f82:	1d7b      	adds	r3, r7, #5
 8009f84:	33ff      	adds	r3, #255	; 0xff
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	1ad2      	subs	r2, r2, r3
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	18d3      	adds	r3, r2, r3
 8009f98:	881b      	ldrh	r3, [r3, #0]
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	001a      	movs	r2, r3
 8009f9e:	2340      	movs	r3, #64	; 0x40
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	d100      	bne.n	8009fa6 <USB_EPStartXfer+0xfa>
 8009fa4:	e162      	b.n	800a26c <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	785b      	ldrb	r3, [r3, #1]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d16a      	bne.n	800a088 <USB_EPStartXfer+0x1dc>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2250      	movs	r2, #80	; 0x50
 8009fba:	5a9b      	ldrh	r3, [r3, r2]
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	001a      	movs	r2, r3
 8009fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc2:	189b      	adds	r3, r3, r2
 8009fc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	00da      	lsls	r2, r3, #3
 8009fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fce:	18d3      	adds	r3, r2, r3
 8009fd0:	4aa3      	ldr	r2, [pc, #652]	; (800a260 <USB_EPStartXfer+0x3b4>)
 8009fd2:	4694      	mov	ip, r2
 8009fd4:	4463      	add	r3, ip
 8009fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8009fd8:	1d7b      	adds	r3, r7, #5
 8009fda:	33ff      	adds	r3, #255	; 0xff
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d110      	bne.n	800a004 <USB_EPStartXfer+0x158>
 8009fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe4:	881b      	ldrh	r3, [r3, #0]
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	4a9e      	ldr	r2, [pc, #632]	; (800a264 <USB_EPStartXfer+0x3b8>)
 8009fea:	4013      	ands	r3, r2
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff0:	801a      	strh	r2, [r3, #0]
 8009ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff4:	881b      	ldrh	r3, [r3, #0]
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	4a9b      	ldr	r2, [pc, #620]	; (800a268 <USB_EPStartXfer+0x3bc>)
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	b29a      	uxth	r2, r3
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a000:	801a      	strh	r2, [r3, #0]
 800a002:	e05c      	b.n	800a0be <USB_EPStartXfer+0x212>
 800a004:	1d7b      	adds	r3, r7, #5
 800a006:	33ff      	adds	r3, #255	; 0xff
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2b3e      	cmp	r3, #62	; 0x3e
 800a00c:	d81c      	bhi.n	800a048 <USB_EPStartXfer+0x19c>
 800a00e:	1d7b      	adds	r3, r7, #5
 800a010:	33ff      	adds	r3, #255	; 0xff
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	085b      	lsrs	r3, r3, #1
 800a016:	1c7a      	adds	r2, r7, #1
 800a018:	32ff      	adds	r2, #255	; 0xff
 800a01a:	6013      	str	r3, [r2, #0]
 800a01c:	1d7b      	adds	r3, r7, #5
 800a01e:	33ff      	adds	r3, #255	; 0xff
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2201      	movs	r2, #1
 800a024:	4013      	ands	r3, r2
 800a026:	d006      	beq.n	800a036 <USB_EPStartXfer+0x18a>
 800a028:	1c7b      	adds	r3, r7, #1
 800a02a:	33ff      	adds	r3, #255	; 0xff
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	3301      	adds	r3, #1
 800a030:	1c7a      	adds	r2, r7, #1
 800a032:	32ff      	adds	r2, #255	; 0xff
 800a034:	6013      	str	r3, [r2, #0]
 800a036:	1c7b      	adds	r3, r7, #1
 800a038:	33ff      	adds	r3, #255	; 0xff
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	029b      	lsls	r3, r3, #10
 800a040:	b29a      	uxth	r2, r3
 800a042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a044:	801a      	strh	r2, [r3, #0]
 800a046:	e03a      	b.n	800a0be <USB_EPStartXfer+0x212>
 800a048:	1d7b      	adds	r3, r7, #5
 800a04a:	33ff      	adds	r3, #255	; 0xff
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	095b      	lsrs	r3, r3, #5
 800a050:	1c7a      	adds	r2, r7, #1
 800a052:	32ff      	adds	r2, #255	; 0xff
 800a054:	6013      	str	r3, [r2, #0]
 800a056:	1d7b      	adds	r3, r7, #5
 800a058:	33ff      	adds	r3, #255	; 0xff
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	221f      	movs	r2, #31
 800a05e:	4013      	ands	r3, r2
 800a060:	d106      	bne.n	800a070 <USB_EPStartXfer+0x1c4>
 800a062:	1c7b      	adds	r3, r7, #1
 800a064:	33ff      	adds	r3, #255	; 0xff
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	3b01      	subs	r3, #1
 800a06a:	1c7a      	adds	r2, r7, #1
 800a06c:	32ff      	adds	r2, #255	; 0xff
 800a06e:	6013      	str	r3, [r2, #0]
 800a070:	1c7b      	adds	r3, r7, #1
 800a072:	33ff      	adds	r3, #255	; 0xff
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	b29b      	uxth	r3, r3
 800a078:	029b      	lsls	r3, r3, #10
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	4a7a      	ldr	r2, [pc, #488]	; (800a268 <USB_EPStartXfer+0x3bc>)
 800a07e:	4313      	orrs	r3, r2
 800a080:	b29a      	uxth	r2, r3
 800a082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a084:	801a      	strh	r2, [r3, #0]
 800a086:	e01a      	b.n	800a0be <USB_EPStartXfer+0x212>
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	785b      	ldrb	r3, [r3, #1]
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d116      	bne.n	800a0be <USB_EPStartXfer+0x212>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2250      	movs	r2, #80	; 0x50
 800a094:	5a9b      	ldrh	r3, [r3, r2]
 800a096:	b29b      	uxth	r3, r3
 800a098:	001a      	movs	r2, r3
 800a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09c:	189b      	adds	r3, r3, r2
 800a09e:	633b      	str	r3, [r7, #48]	; 0x30
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	00da      	lsls	r2, r3, #3
 800a0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a8:	18d3      	adds	r3, r2, r3
 800a0aa:	4a6d      	ldr	r2, [pc, #436]	; (800a260 <USB_EPStartXfer+0x3b4>)
 800a0ac:	4694      	mov	ip, r2
 800a0ae:	4463      	add	r3, ip
 800a0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0b2:	1d7b      	adds	r3, r7, #5
 800a0b4:	33ff      	adds	r3, #255	; 0xff
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	b29a      	uxth	r2, r3
 800a0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a0be:	2076      	movs	r0, #118	; 0x76
 800a0c0:	183b      	adds	r3, r7, r0
 800a0c2:	683a      	ldr	r2, [r7, #0]
 800a0c4:	8952      	ldrh	r2, [r2, #10]
 800a0c6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	6959      	ldr	r1, [r3, #20]
 800a0cc:	1d7b      	adds	r3, r7, #5
 800a0ce:	33ff      	adds	r3, #255	; 0xff
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	b29c      	uxth	r4, r3
 800a0d4:	183b      	adds	r3, r7, r0
 800a0d6:	881a      	ldrh	r2, [r3, #0]
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	0023      	movs	r3, r4
 800a0dc:	f001 f8da 	bl	800b294 <USB_WritePMA>
            ep->xfer_buff += len;
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	695a      	ldr	r2, [r3, #20]
 800a0e4:	1d7b      	adds	r3, r7, #5
 800a0e6:	33ff      	adds	r3, #255	; 0xff
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	18d2      	adds	r2, r2, r3
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	6a1a      	ldr	r2, [r3, #32]
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d908      	bls.n	800a10e <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	6a1a      	ldr	r2, [r3, #32]
 800a100:	1d7b      	adds	r3, r7, #5
 800a102:	33ff      	adds	r3, #255	; 0xff
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	1ad2      	subs	r2, r2, r3
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	621a      	str	r2, [r3, #32]
 800a10c:	e007      	b.n	800a11e <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	6a1b      	ldr	r3, [r3, #32]
 800a112:	1d7a      	adds	r2, r7, #5
 800a114:	32ff      	adds	r2, #255	; 0xff
 800a116:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	2200      	movs	r2, #0
 800a11c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	785b      	ldrb	r3, [r3, #1]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d166      	bne.n	800a1f4 <USB_EPStartXfer+0x348>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	61bb      	str	r3, [r7, #24]
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2250      	movs	r2, #80	; 0x50
 800a12e:	5a9b      	ldrh	r3, [r3, r2]
 800a130:	b29b      	uxth	r3, r3
 800a132:	001a      	movs	r2, r3
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	189b      	adds	r3, r3, r2
 800a138:	61bb      	str	r3, [r7, #24]
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	00da      	lsls	r2, r3, #3
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	18d3      	adds	r3, r2, r3
 800a144:	4a43      	ldr	r2, [pc, #268]	; (800a254 <USB_EPStartXfer+0x3a8>)
 800a146:	4694      	mov	ip, r2
 800a148:	4463      	add	r3, ip
 800a14a:	617b      	str	r3, [r7, #20]
 800a14c:	1d7b      	adds	r3, r7, #5
 800a14e:	33ff      	adds	r3, #255	; 0xff
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d110      	bne.n	800a178 <USB_EPStartXfer+0x2cc>
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	881b      	ldrh	r3, [r3, #0]
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	4a41      	ldr	r2, [pc, #260]	; (800a264 <USB_EPStartXfer+0x3b8>)
 800a15e:	4013      	ands	r3, r2
 800a160:	b29a      	uxth	r2, r3
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	801a      	strh	r2, [r3, #0]
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	881b      	ldrh	r3, [r3, #0]
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	4a3e      	ldr	r2, [pc, #248]	; (800a268 <USB_EPStartXfer+0x3bc>)
 800a16e:	4313      	orrs	r3, r2
 800a170:	b29a      	uxth	r2, r3
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	801a      	strh	r2, [r3, #0]
 800a176:	e05a      	b.n	800a22e <USB_EPStartXfer+0x382>
 800a178:	1d7b      	adds	r3, r7, #5
 800a17a:	33ff      	adds	r3, #255	; 0xff
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b3e      	cmp	r3, #62	; 0x3e
 800a180:	d81a      	bhi.n	800a1b8 <USB_EPStartXfer+0x30c>
 800a182:	1d7b      	adds	r3, r7, #5
 800a184:	33ff      	adds	r3, #255	; 0xff
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	085b      	lsrs	r3, r3, #1
 800a18a:	21fc      	movs	r1, #252	; 0xfc
 800a18c:	187a      	adds	r2, r7, r1
 800a18e:	6013      	str	r3, [r2, #0]
 800a190:	1d7b      	adds	r3, r7, #5
 800a192:	33ff      	adds	r3, #255	; 0xff
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	2201      	movs	r2, #1
 800a198:	4013      	ands	r3, r2
 800a19a:	d004      	beq.n	800a1a6 <USB_EPStartXfer+0x2fa>
 800a19c:	187b      	adds	r3, r7, r1
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	187a      	adds	r2, r7, r1
 800a1a4:	6013      	str	r3, [r2, #0]
 800a1a6:	23fc      	movs	r3, #252	; 0xfc
 800a1a8:	18fb      	adds	r3, r7, r3
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	029b      	lsls	r3, r3, #10
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	801a      	strh	r2, [r3, #0]
 800a1b6:	e03a      	b.n	800a22e <USB_EPStartXfer+0x382>
 800a1b8:	1d7b      	adds	r3, r7, #5
 800a1ba:	33ff      	adds	r3, #255	; 0xff
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	095b      	lsrs	r3, r3, #5
 800a1c0:	21fc      	movs	r1, #252	; 0xfc
 800a1c2:	187a      	adds	r2, r7, r1
 800a1c4:	6013      	str	r3, [r2, #0]
 800a1c6:	1d7b      	adds	r3, r7, #5
 800a1c8:	33ff      	adds	r3, #255	; 0xff
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	221f      	movs	r2, #31
 800a1ce:	4013      	ands	r3, r2
 800a1d0:	d104      	bne.n	800a1dc <USB_EPStartXfer+0x330>
 800a1d2:	187b      	adds	r3, r7, r1
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	3b01      	subs	r3, #1
 800a1d8:	187a      	adds	r2, r7, r1
 800a1da:	6013      	str	r3, [r2, #0]
 800a1dc:	23fc      	movs	r3, #252	; 0xfc
 800a1de:	18fb      	adds	r3, r7, r3
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	029b      	lsls	r3, r3, #10
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	4a1f      	ldr	r2, [pc, #124]	; (800a268 <USB_EPStartXfer+0x3bc>)
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	b29a      	uxth	r2, r3
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	801a      	strh	r2, [r3, #0]
 800a1f2:	e01c      	b.n	800a22e <USB_EPStartXfer+0x382>
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	785b      	ldrb	r3, [r3, #1]
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d118      	bne.n	800a22e <USB_EPStartXfer+0x382>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	623b      	str	r3, [r7, #32]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2250      	movs	r2, #80	; 0x50
 800a204:	5a9b      	ldrh	r3, [r3, r2]
 800a206:	b29b      	uxth	r3, r3
 800a208:	001a      	movs	r2, r3
 800a20a:	6a3b      	ldr	r3, [r7, #32]
 800a20c:	189b      	adds	r3, r3, r2
 800a20e:	623b      	str	r3, [r7, #32]
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	00da      	lsls	r2, r3, #3
 800a216:	6a3b      	ldr	r3, [r7, #32]
 800a218:	18d3      	adds	r3, r2, r3
 800a21a:	4a0e      	ldr	r2, [pc, #56]	; (800a254 <USB_EPStartXfer+0x3a8>)
 800a21c:	4694      	mov	ip, r2
 800a21e:	4463      	add	r3, ip
 800a220:	61fb      	str	r3, [r7, #28]
 800a222:	1d7b      	adds	r3, r7, #5
 800a224:	33ff      	adds	r3, #255	; 0xff
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	b29a      	uxth	r2, r3
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a22e:	2076      	movs	r0, #118	; 0x76
 800a230:	183b      	adds	r3, r7, r0
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	8912      	ldrh	r2, [r2, #8]
 800a236:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	6959      	ldr	r1, [r3, #20]
 800a23c:	1d7b      	adds	r3, r7, #5
 800a23e:	33ff      	adds	r3, #255	; 0xff
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	b29c      	uxth	r4, r3
 800a244:	183b      	adds	r3, r7, r0
 800a246:	881a      	ldrh	r2, [r3, #0]
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	0023      	movs	r3, r4
 800a24c:	f001 f822 	bl	800b294 <USB_WritePMA>
 800a250:	e301      	b.n	800a856 <USB_EPStartXfer+0x9aa>
 800a252:	46c0      	nop			; (mov r8, r8)
 800a254:	00000402 	.word	0x00000402
 800a258:	ffff8f8f 	.word	0xffff8f8f
 800a25c:	ffff8180 	.word	0xffff8180
 800a260:	00000406 	.word	0x00000406
 800a264:	ffff83ff 	.word	0xffff83ff
 800a268:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	785b      	ldrb	r3, [r3, #1]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d166      	bne.n	800a342 <USB_EPStartXfer+0x496>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	64bb      	str	r3, [r7, #72]	; 0x48
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2250      	movs	r2, #80	; 0x50
 800a27c:	5a9b      	ldrh	r3, [r3, r2]
 800a27e:	b29b      	uxth	r3, r3
 800a280:	001a      	movs	r2, r3
 800a282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a284:	189b      	adds	r3, r3, r2
 800a286:	64bb      	str	r3, [r7, #72]	; 0x48
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	00da      	lsls	r2, r3, #3
 800a28e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a290:	18d3      	adds	r3, r2, r3
 800a292:	4ac3      	ldr	r2, [pc, #780]	; (800a5a0 <USB_EPStartXfer+0x6f4>)
 800a294:	4694      	mov	ip, r2
 800a296:	4463      	add	r3, ip
 800a298:	647b      	str	r3, [r7, #68]	; 0x44
 800a29a:	1d7b      	adds	r3, r7, #5
 800a29c:	33ff      	adds	r3, #255	; 0xff
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d110      	bne.n	800a2c6 <USB_EPStartXfer+0x41a>
 800a2a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2a6:	881b      	ldrh	r3, [r3, #0]
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	4abe      	ldr	r2, [pc, #760]	; (800a5a4 <USB_EPStartXfer+0x6f8>)
 800a2ac:	4013      	ands	r3, r2
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2b2:	801a      	strh	r2, [r3, #0]
 800a2b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2b6:	881b      	ldrh	r3, [r3, #0]
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	4abb      	ldr	r2, [pc, #748]	; (800a5a8 <USB_EPStartXfer+0x6fc>)
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2c2:	801a      	strh	r2, [r3, #0]
 800a2c4:	e05a      	b.n	800a37c <USB_EPStartXfer+0x4d0>
 800a2c6:	1d7b      	adds	r3, r7, #5
 800a2c8:	33ff      	adds	r3, #255	; 0xff
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2b3e      	cmp	r3, #62	; 0x3e
 800a2ce:	d81a      	bhi.n	800a306 <USB_EPStartXfer+0x45a>
 800a2d0:	1d7b      	adds	r3, r7, #5
 800a2d2:	33ff      	adds	r3, #255	; 0xff
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	085b      	lsrs	r3, r3, #1
 800a2d8:	21f8      	movs	r1, #248	; 0xf8
 800a2da:	187a      	adds	r2, r7, r1
 800a2dc:	6013      	str	r3, [r2, #0]
 800a2de:	1d7b      	adds	r3, r7, #5
 800a2e0:	33ff      	adds	r3, #255	; 0xff
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	4013      	ands	r3, r2
 800a2e8:	d004      	beq.n	800a2f4 <USB_EPStartXfer+0x448>
 800a2ea:	187b      	adds	r3, r7, r1
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	187a      	adds	r2, r7, r1
 800a2f2:	6013      	str	r3, [r2, #0]
 800a2f4:	23f8      	movs	r3, #248	; 0xf8
 800a2f6:	18fb      	adds	r3, r7, r3
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	b29b      	uxth	r3, r3
 800a2fc:	029b      	lsls	r3, r3, #10
 800a2fe:	b29a      	uxth	r2, r3
 800a300:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a302:	801a      	strh	r2, [r3, #0]
 800a304:	e03a      	b.n	800a37c <USB_EPStartXfer+0x4d0>
 800a306:	1d7b      	adds	r3, r7, #5
 800a308:	33ff      	adds	r3, #255	; 0xff
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	095b      	lsrs	r3, r3, #5
 800a30e:	21f8      	movs	r1, #248	; 0xf8
 800a310:	187a      	adds	r2, r7, r1
 800a312:	6013      	str	r3, [r2, #0]
 800a314:	1d7b      	adds	r3, r7, #5
 800a316:	33ff      	adds	r3, #255	; 0xff
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	221f      	movs	r2, #31
 800a31c:	4013      	ands	r3, r2
 800a31e:	d104      	bne.n	800a32a <USB_EPStartXfer+0x47e>
 800a320:	187b      	adds	r3, r7, r1
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	3b01      	subs	r3, #1
 800a326:	187a      	adds	r2, r7, r1
 800a328:	6013      	str	r3, [r2, #0]
 800a32a:	23f8      	movs	r3, #248	; 0xf8
 800a32c:	18fb      	adds	r3, r7, r3
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	b29b      	uxth	r3, r3
 800a332:	029b      	lsls	r3, r3, #10
 800a334:	b29b      	uxth	r3, r3
 800a336:	4a9c      	ldr	r2, [pc, #624]	; (800a5a8 <USB_EPStartXfer+0x6fc>)
 800a338:	4313      	orrs	r3, r2
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a33e:	801a      	strh	r2, [r3, #0]
 800a340:	e01c      	b.n	800a37c <USB_EPStartXfer+0x4d0>
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	785b      	ldrb	r3, [r3, #1]
 800a346:	2b01      	cmp	r3, #1
 800a348:	d118      	bne.n	800a37c <USB_EPStartXfer+0x4d0>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	653b      	str	r3, [r7, #80]	; 0x50
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2250      	movs	r2, #80	; 0x50
 800a352:	5a9b      	ldrh	r3, [r3, r2]
 800a354:	b29b      	uxth	r3, r3
 800a356:	001a      	movs	r2, r3
 800a358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a35a:	189b      	adds	r3, r3, r2
 800a35c:	653b      	str	r3, [r7, #80]	; 0x50
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	00da      	lsls	r2, r3, #3
 800a364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a366:	18d3      	adds	r3, r2, r3
 800a368:	4a8d      	ldr	r2, [pc, #564]	; (800a5a0 <USB_EPStartXfer+0x6f4>)
 800a36a:	4694      	mov	ip, r2
 800a36c:	4463      	add	r3, ip
 800a36e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a370:	1d7b      	adds	r3, r7, #5
 800a372:	33ff      	adds	r3, #255	; 0xff
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	b29a      	uxth	r2, r3
 800a378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a37a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a37c:	2076      	movs	r0, #118	; 0x76
 800a37e:	183b      	adds	r3, r7, r0
 800a380:	683a      	ldr	r2, [r7, #0]
 800a382:	8912      	ldrh	r2, [r2, #8]
 800a384:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	6959      	ldr	r1, [r3, #20]
 800a38a:	1d7b      	adds	r3, r7, #5
 800a38c:	33ff      	adds	r3, #255	; 0xff
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	b29c      	uxth	r4, r3
 800a392:	183b      	adds	r3, r7, r0
 800a394:	881a      	ldrh	r2, [r3, #0]
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	0023      	movs	r3, r4
 800a39a:	f000 ff7b 	bl	800b294 <USB_WritePMA>
            ep->xfer_buff += len;
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	695a      	ldr	r2, [r3, #20]
 800a3a2:	1d7b      	adds	r3, r7, #5
 800a3a4:	33ff      	adds	r3, #255	; 0xff
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	18d2      	adds	r2, r2, r3
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	6a1a      	ldr	r2, [r3, #32]
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d908      	bls.n	800a3cc <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	6a1a      	ldr	r2, [r3, #32]
 800a3be:	1d7b      	adds	r3, r7, #5
 800a3c0:	33ff      	adds	r3, #255	; 0xff
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	1ad2      	subs	r2, r2, r3
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	621a      	str	r2, [r3, #32]
 800a3ca:	e007      	b.n	800a3dc <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	6a1b      	ldr	r3, [r3, #32]
 800a3d0:	1d7a      	adds	r2, r7, #5
 800a3d2:	32ff      	adds	r2, #255	; 0xff
 800a3d4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	643b      	str	r3, [r7, #64]	; 0x40
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	785b      	ldrb	r3, [r3, #1]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d166      	bne.n	800a4b6 <USB_EPStartXfer+0x60a>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2250      	movs	r2, #80	; 0x50
 800a3f0:	5a9b      	ldrh	r3, [r3, r2]
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	001a      	movs	r2, r3
 800a3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f8:	189b      	adds	r3, r3, r2
 800a3fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	00da      	lsls	r2, r3, #3
 800a402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a404:	18d3      	adds	r3, r2, r3
 800a406:	4a69      	ldr	r2, [pc, #420]	; (800a5ac <USB_EPStartXfer+0x700>)
 800a408:	4694      	mov	ip, r2
 800a40a:	4463      	add	r3, ip
 800a40c:	637b      	str	r3, [r7, #52]	; 0x34
 800a40e:	1d7b      	adds	r3, r7, #5
 800a410:	33ff      	adds	r3, #255	; 0xff
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d110      	bne.n	800a43a <USB_EPStartXfer+0x58e>
 800a418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a41a:	881b      	ldrh	r3, [r3, #0]
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	4a61      	ldr	r2, [pc, #388]	; (800a5a4 <USB_EPStartXfer+0x6f8>)
 800a420:	4013      	ands	r3, r2
 800a422:	b29a      	uxth	r2, r3
 800a424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a426:	801a      	strh	r2, [r3, #0]
 800a428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a42a:	881b      	ldrh	r3, [r3, #0]
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	4a5e      	ldr	r2, [pc, #376]	; (800a5a8 <USB_EPStartXfer+0x6fc>)
 800a430:	4313      	orrs	r3, r2
 800a432:	b29a      	uxth	r2, r3
 800a434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a436:	801a      	strh	r2, [r3, #0]
 800a438:	e058      	b.n	800a4ec <USB_EPStartXfer+0x640>
 800a43a:	1d7b      	adds	r3, r7, #5
 800a43c:	33ff      	adds	r3, #255	; 0xff
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2b3e      	cmp	r3, #62	; 0x3e
 800a442:	d81a      	bhi.n	800a47a <USB_EPStartXfer+0x5ce>
 800a444:	1d7b      	adds	r3, r7, #5
 800a446:	33ff      	adds	r3, #255	; 0xff
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	085b      	lsrs	r3, r3, #1
 800a44c:	21f4      	movs	r1, #244	; 0xf4
 800a44e:	187a      	adds	r2, r7, r1
 800a450:	6013      	str	r3, [r2, #0]
 800a452:	1d7b      	adds	r3, r7, #5
 800a454:	33ff      	adds	r3, #255	; 0xff
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2201      	movs	r2, #1
 800a45a:	4013      	ands	r3, r2
 800a45c:	d004      	beq.n	800a468 <USB_EPStartXfer+0x5bc>
 800a45e:	187b      	adds	r3, r7, r1
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	3301      	adds	r3, #1
 800a464:	187a      	adds	r2, r7, r1
 800a466:	6013      	str	r3, [r2, #0]
 800a468:	23f4      	movs	r3, #244	; 0xf4
 800a46a:	18fb      	adds	r3, r7, r3
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	b29b      	uxth	r3, r3
 800a470:	029b      	lsls	r3, r3, #10
 800a472:	b29a      	uxth	r2, r3
 800a474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a476:	801a      	strh	r2, [r3, #0]
 800a478:	e038      	b.n	800a4ec <USB_EPStartXfer+0x640>
 800a47a:	1d7b      	adds	r3, r7, #5
 800a47c:	33ff      	adds	r3, #255	; 0xff
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	095b      	lsrs	r3, r3, #5
 800a482:	21f4      	movs	r1, #244	; 0xf4
 800a484:	187a      	adds	r2, r7, r1
 800a486:	6013      	str	r3, [r2, #0]
 800a488:	1d7b      	adds	r3, r7, #5
 800a48a:	33ff      	adds	r3, #255	; 0xff
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	221f      	movs	r2, #31
 800a490:	4013      	ands	r3, r2
 800a492:	d104      	bne.n	800a49e <USB_EPStartXfer+0x5f2>
 800a494:	187b      	adds	r3, r7, r1
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	3b01      	subs	r3, #1
 800a49a:	187a      	adds	r2, r7, r1
 800a49c:	6013      	str	r3, [r2, #0]
 800a49e:	23f4      	movs	r3, #244	; 0xf4
 800a4a0:	18fb      	adds	r3, r7, r3
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	029b      	lsls	r3, r3, #10
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	4a3f      	ldr	r2, [pc, #252]	; (800a5a8 <USB_EPStartXfer+0x6fc>)
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	b29a      	uxth	r2, r3
 800a4b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4b2:	801a      	strh	r2, [r3, #0]
 800a4b4:	e01a      	b.n	800a4ec <USB_EPStartXfer+0x640>
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	785b      	ldrb	r3, [r3, #1]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d116      	bne.n	800a4ec <USB_EPStartXfer+0x640>
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2250      	movs	r2, #80	; 0x50
 800a4c2:	5a9b      	ldrh	r3, [r3, r2]
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	001a      	movs	r2, r3
 800a4c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4ca:	189b      	adds	r3, r3, r2
 800a4cc:	643b      	str	r3, [r7, #64]	; 0x40
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	00da      	lsls	r2, r3, #3
 800a4d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4d6:	18d3      	adds	r3, r2, r3
 800a4d8:	4a34      	ldr	r2, [pc, #208]	; (800a5ac <USB_EPStartXfer+0x700>)
 800a4da:	4694      	mov	ip, r2
 800a4dc:	4463      	add	r3, ip
 800a4de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4e0:	1d7b      	adds	r3, r7, #5
 800a4e2:	33ff      	adds	r3, #255	; 0xff
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	b29a      	uxth	r2, r3
 800a4e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a4ec:	2076      	movs	r0, #118	; 0x76
 800a4ee:	183b      	adds	r3, r7, r0
 800a4f0:	683a      	ldr	r2, [r7, #0]
 800a4f2:	8952      	ldrh	r2, [r2, #10]
 800a4f4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	6959      	ldr	r1, [r3, #20]
 800a4fa:	1d7b      	adds	r3, r7, #5
 800a4fc:	33ff      	adds	r3, #255	; 0xff
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	b29c      	uxth	r4, r3
 800a502:	183b      	adds	r3, r7, r0
 800a504:	881a      	ldrh	r2, [r3, #0]
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	0023      	movs	r3, r4
 800a50a:	f000 fec3 	bl	800b294 <USB_WritePMA>
 800a50e:	e1a2      	b.n	800a856 <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	6a1b      	ldr	r3, [r3, #32]
 800a514:	1d7a      	adds	r2, r7, #5
 800a516:	32ff      	adds	r2, #255	; 0xff
 800a518:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	18d3      	adds	r3, r2, r3
 800a524:	881b      	ldrh	r3, [r3, #0]
 800a526:	b29a      	uxth	r2, r3
 800a528:	2062      	movs	r0, #98	; 0x62
 800a52a:	183b      	adds	r3, r7, r0
 800a52c:	4920      	ldr	r1, [pc, #128]	; (800a5b0 <USB_EPStartXfer+0x704>)
 800a52e:	400a      	ands	r2, r1
 800a530:	801a      	strh	r2, [r3, #0]
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	18d3      	adds	r3, r2, r3
 800a53c:	183a      	adds	r2, r7, r0
 800a53e:	8812      	ldrh	r2, [r2, #0]
 800a540:	491c      	ldr	r1, [pc, #112]	; (800a5b4 <USB_EPStartXfer+0x708>)
 800a542:	430a      	orrs	r2, r1
 800a544:	b292      	uxth	r2, r2
 800a546:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2250      	movs	r2, #80	; 0x50
 800a550:	5a9b      	ldrh	r3, [r3, r2]
 800a552:	b29b      	uxth	r3, r3
 800a554:	001a      	movs	r2, r3
 800a556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a558:	189b      	adds	r3, r3, r2
 800a55a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	00da      	lsls	r2, r3, #3
 800a562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a564:	18d3      	adds	r3, r2, r3
 800a566:	4a0e      	ldr	r2, [pc, #56]	; (800a5a0 <USB_EPStartXfer+0x6f4>)
 800a568:	4694      	mov	ip, r2
 800a56a:	4463      	add	r3, ip
 800a56c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a56e:	1d7b      	adds	r3, r7, #5
 800a570:	33ff      	adds	r3, #255	; 0xff
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	b29a      	uxth	r2, r3
 800a576:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a578:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a57a:	2076      	movs	r0, #118	; 0x76
 800a57c:	183b      	adds	r3, r7, r0
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	8912      	ldrh	r2, [r2, #8]
 800a582:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	6959      	ldr	r1, [r3, #20]
 800a588:	1d7b      	adds	r3, r7, #5
 800a58a:	33ff      	adds	r3, #255	; 0xff
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	b29c      	uxth	r4, r3
 800a590:	183b      	adds	r3, r7, r0
 800a592:	881a      	ldrh	r2, [r3, #0]
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	0023      	movs	r3, r4
 800a598:	f000 fe7c 	bl	800b294 <USB_WritePMA>
 800a59c:	e15b      	b.n	800a856 <USB_EPStartXfer+0x9aa>
 800a59e:	46c0      	nop			; (mov r8, r8)
 800a5a0:	00000402 	.word	0x00000402
 800a5a4:	ffff83ff 	.word	0xffff83ff
 800a5a8:	ffff8000 	.word	0xffff8000
 800a5ac:	00000406 	.word	0x00000406
 800a5b0:	ffff8e8f 	.word	0xffff8e8f
 800a5b4:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	6a1a      	ldr	r2, [r3, #32]
 800a5bc:	1d7b      	adds	r3, r7, #5
 800a5be:	33ff      	adds	r3, #255	; 0xff
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	1ad2      	subs	r2, r2, r3
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	18d3      	adds	r3, r2, r3
 800a5d2:	881b      	ldrh	r3, [r3, #0]
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	001a      	movs	r2, r3
 800a5d8:	2340      	movs	r3, #64	; 0x40
 800a5da:	4013      	ands	r3, r2
 800a5dc:	d100      	bne.n	800a5e0 <USB_EPStartXfer+0x734>
 800a5de:	e099      	b.n	800a714 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	673b      	str	r3, [r7, #112]	; 0x70
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	785b      	ldrb	r3, [r3, #1]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d166      	bne.n	800a6ba <USB_EPStartXfer+0x80e>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	66bb      	str	r3, [r7, #104]	; 0x68
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2250      	movs	r2, #80	; 0x50
 800a5f4:	5a9b      	ldrh	r3, [r3, r2]
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	001a      	movs	r2, r3
 800a5fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a5fc:	189b      	adds	r3, r3, r2
 800a5fe:	66bb      	str	r3, [r7, #104]	; 0x68
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	00da      	lsls	r2, r3, #3
 800a606:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a608:	18d3      	adds	r3, r2, r3
 800a60a:	4ad0      	ldr	r2, [pc, #832]	; (800a94c <USB_EPStartXfer+0xaa0>)
 800a60c:	4694      	mov	ip, r2
 800a60e:	4463      	add	r3, ip
 800a610:	667b      	str	r3, [r7, #100]	; 0x64
 800a612:	1d7b      	adds	r3, r7, #5
 800a614:	33ff      	adds	r3, #255	; 0xff
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d110      	bne.n	800a63e <USB_EPStartXfer+0x792>
 800a61c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a61e:	881b      	ldrh	r3, [r3, #0]
 800a620:	b29b      	uxth	r3, r3
 800a622:	4acb      	ldr	r2, [pc, #812]	; (800a950 <USB_EPStartXfer+0xaa4>)
 800a624:	4013      	ands	r3, r2
 800a626:	b29a      	uxth	r2, r3
 800a628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a62a:	801a      	strh	r2, [r3, #0]
 800a62c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a62e:	881b      	ldrh	r3, [r3, #0]
 800a630:	b29b      	uxth	r3, r3
 800a632:	4ac8      	ldr	r2, [pc, #800]	; (800a954 <USB_EPStartXfer+0xaa8>)
 800a634:	4313      	orrs	r3, r2
 800a636:	b29a      	uxth	r2, r3
 800a638:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a63a:	801a      	strh	r2, [r3, #0]
 800a63c:	e058      	b.n	800a6f0 <USB_EPStartXfer+0x844>
 800a63e:	1d7b      	adds	r3, r7, #5
 800a640:	33ff      	adds	r3, #255	; 0xff
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	2b3e      	cmp	r3, #62	; 0x3e
 800a646:	d81a      	bhi.n	800a67e <USB_EPStartXfer+0x7d2>
 800a648:	1d7b      	adds	r3, r7, #5
 800a64a:	33ff      	adds	r3, #255	; 0xff
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	085b      	lsrs	r3, r3, #1
 800a650:	21f0      	movs	r1, #240	; 0xf0
 800a652:	187a      	adds	r2, r7, r1
 800a654:	6013      	str	r3, [r2, #0]
 800a656:	1d7b      	adds	r3, r7, #5
 800a658:	33ff      	adds	r3, #255	; 0xff
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2201      	movs	r2, #1
 800a65e:	4013      	ands	r3, r2
 800a660:	d004      	beq.n	800a66c <USB_EPStartXfer+0x7c0>
 800a662:	187b      	adds	r3, r7, r1
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	3301      	adds	r3, #1
 800a668:	187a      	adds	r2, r7, r1
 800a66a:	6013      	str	r3, [r2, #0]
 800a66c:	23f0      	movs	r3, #240	; 0xf0
 800a66e:	18fb      	adds	r3, r7, r3
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	b29b      	uxth	r3, r3
 800a674:	029b      	lsls	r3, r3, #10
 800a676:	b29a      	uxth	r2, r3
 800a678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a67a:	801a      	strh	r2, [r3, #0]
 800a67c:	e038      	b.n	800a6f0 <USB_EPStartXfer+0x844>
 800a67e:	1d7b      	adds	r3, r7, #5
 800a680:	33ff      	adds	r3, #255	; 0xff
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	095b      	lsrs	r3, r3, #5
 800a686:	21f0      	movs	r1, #240	; 0xf0
 800a688:	187a      	adds	r2, r7, r1
 800a68a:	6013      	str	r3, [r2, #0]
 800a68c:	1d7b      	adds	r3, r7, #5
 800a68e:	33ff      	adds	r3, #255	; 0xff
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	221f      	movs	r2, #31
 800a694:	4013      	ands	r3, r2
 800a696:	d104      	bne.n	800a6a2 <USB_EPStartXfer+0x7f6>
 800a698:	187b      	adds	r3, r7, r1
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	3b01      	subs	r3, #1
 800a69e:	187a      	adds	r2, r7, r1
 800a6a0:	6013      	str	r3, [r2, #0]
 800a6a2:	23f0      	movs	r3, #240	; 0xf0
 800a6a4:	18fb      	adds	r3, r7, r3
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	029b      	lsls	r3, r3, #10
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	4aa9      	ldr	r2, [pc, #676]	; (800a954 <USB_EPStartXfer+0xaa8>)
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	b29a      	uxth	r2, r3
 800a6b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6b6:	801a      	strh	r2, [r3, #0]
 800a6b8:	e01a      	b.n	800a6f0 <USB_EPStartXfer+0x844>
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	785b      	ldrb	r3, [r3, #1]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d116      	bne.n	800a6f0 <USB_EPStartXfer+0x844>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2250      	movs	r2, #80	; 0x50
 800a6c6:	5a9b      	ldrh	r3, [r3, r2]
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	001a      	movs	r2, r3
 800a6cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6ce:	189b      	adds	r3, r3, r2
 800a6d0:	673b      	str	r3, [r7, #112]	; 0x70
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	00da      	lsls	r2, r3, #3
 800a6d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6da:	18d3      	adds	r3, r2, r3
 800a6dc:	4a9b      	ldr	r2, [pc, #620]	; (800a94c <USB_EPStartXfer+0xaa0>)
 800a6de:	4694      	mov	ip, r2
 800a6e0:	4463      	add	r3, ip
 800a6e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a6e4:	1d7b      	adds	r3, r7, #5
 800a6e6:	33ff      	adds	r3, #255	; 0xff
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6ee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a6f0:	2076      	movs	r0, #118	; 0x76
 800a6f2:	183b      	adds	r3, r7, r0
 800a6f4:	683a      	ldr	r2, [r7, #0]
 800a6f6:	8952      	ldrh	r2, [r2, #10]
 800a6f8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	6959      	ldr	r1, [r3, #20]
 800a6fe:	1d7b      	adds	r3, r7, #5
 800a700:	33ff      	adds	r3, #255	; 0xff
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	b29c      	uxth	r4, r3
 800a706:	183b      	adds	r3, r7, r0
 800a708:	881a      	ldrh	r2, [r3, #0]
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	0023      	movs	r3, r4
 800a70e:	f000 fdc1 	bl	800b294 <USB_WritePMA>
 800a712:	e0a0      	b.n	800a856 <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	785b      	ldrb	r3, [r3, #1]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d166      	bne.n	800a7ea <USB_EPStartXfer+0x93e>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2250      	movs	r2, #80	; 0x50
 800a724:	5a9b      	ldrh	r3, [r3, r2]
 800a726:	b29b      	uxth	r3, r3
 800a728:	001a      	movs	r2, r3
 800a72a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a72c:	189b      	adds	r3, r3, r2
 800a72e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	00da      	lsls	r2, r3, #3
 800a736:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a738:	18d3      	adds	r3, r2, r3
 800a73a:	4a87      	ldr	r2, [pc, #540]	; (800a958 <USB_EPStartXfer+0xaac>)
 800a73c:	4694      	mov	ip, r2
 800a73e:	4463      	add	r3, ip
 800a740:	67bb      	str	r3, [r7, #120]	; 0x78
 800a742:	1d7b      	adds	r3, r7, #5
 800a744:	33ff      	adds	r3, #255	; 0xff
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d110      	bne.n	800a76e <USB_EPStartXfer+0x8c2>
 800a74c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a74e:	881b      	ldrh	r3, [r3, #0]
 800a750:	b29b      	uxth	r3, r3
 800a752:	4a7f      	ldr	r2, [pc, #508]	; (800a950 <USB_EPStartXfer+0xaa4>)
 800a754:	4013      	ands	r3, r2
 800a756:	b29a      	uxth	r2, r3
 800a758:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a75a:	801a      	strh	r2, [r3, #0]
 800a75c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a75e:	881b      	ldrh	r3, [r3, #0]
 800a760:	b29b      	uxth	r3, r3
 800a762:	4a7c      	ldr	r2, [pc, #496]	; (800a954 <USB_EPStartXfer+0xaa8>)
 800a764:	4313      	orrs	r3, r2
 800a766:	b29a      	uxth	r2, r3
 800a768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a76a:	801a      	strh	r2, [r3, #0]
 800a76c:	e062      	b.n	800a834 <USB_EPStartXfer+0x988>
 800a76e:	1d7b      	adds	r3, r7, #5
 800a770:	33ff      	adds	r3, #255	; 0xff
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b3e      	cmp	r3, #62	; 0x3e
 800a776:	d81a      	bhi.n	800a7ae <USB_EPStartXfer+0x902>
 800a778:	1d7b      	adds	r3, r7, #5
 800a77a:	33ff      	adds	r3, #255	; 0xff
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	085b      	lsrs	r3, r3, #1
 800a780:	21ec      	movs	r1, #236	; 0xec
 800a782:	187a      	adds	r2, r7, r1
 800a784:	6013      	str	r3, [r2, #0]
 800a786:	1d7b      	adds	r3, r7, #5
 800a788:	33ff      	adds	r3, #255	; 0xff
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2201      	movs	r2, #1
 800a78e:	4013      	ands	r3, r2
 800a790:	d004      	beq.n	800a79c <USB_EPStartXfer+0x8f0>
 800a792:	187b      	adds	r3, r7, r1
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	3301      	adds	r3, #1
 800a798:	187a      	adds	r2, r7, r1
 800a79a:	6013      	str	r3, [r2, #0]
 800a79c:	23ec      	movs	r3, #236	; 0xec
 800a79e:	18fb      	adds	r3, r7, r3
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	029b      	lsls	r3, r3, #10
 800a7a6:	b29a      	uxth	r2, r3
 800a7a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7aa:	801a      	strh	r2, [r3, #0]
 800a7ac:	e042      	b.n	800a834 <USB_EPStartXfer+0x988>
 800a7ae:	1d7b      	adds	r3, r7, #5
 800a7b0:	33ff      	adds	r3, #255	; 0xff
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	095b      	lsrs	r3, r3, #5
 800a7b6:	21ec      	movs	r1, #236	; 0xec
 800a7b8:	187a      	adds	r2, r7, r1
 800a7ba:	6013      	str	r3, [r2, #0]
 800a7bc:	1d7b      	adds	r3, r7, #5
 800a7be:	33ff      	adds	r3, #255	; 0xff
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	221f      	movs	r2, #31
 800a7c4:	4013      	ands	r3, r2
 800a7c6:	d104      	bne.n	800a7d2 <USB_EPStartXfer+0x926>
 800a7c8:	187b      	adds	r3, r7, r1
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	187a      	adds	r2, r7, r1
 800a7d0:	6013      	str	r3, [r2, #0]
 800a7d2:	23ec      	movs	r3, #236	; 0xec
 800a7d4:	18fb      	adds	r3, r7, r3
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	029b      	lsls	r3, r3, #10
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	4a5d      	ldr	r2, [pc, #372]	; (800a954 <USB_EPStartXfer+0xaa8>)
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7e6:	801a      	strh	r2, [r3, #0]
 800a7e8:	e024      	b.n	800a834 <USB_EPStartXfer+0x988>
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	785b      	ldrb	r3, [r3, #1]
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d120      	bne.n	800a834 <USB_EPStartXfer+0x988>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2184      	movs	r1, #132	; 0x84
 800a7f6:	187a      	adds	r2, r7, r1
 800a7f8:	6013      	str	r3, [r2, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2250      	movs	r2, #80	; 0x50
 800a7fe:	5a9b      	ldrh	r3, [r3, r2]
 800a800:	b29b      	uxth	r3, r3
 800a802:	001a      	movs	r2, r3
 800a804:	187b      	adds	r3, r7, r1
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	189b      	adds	r3, r3, r2
 800a80a:	187a      	adds	r2, r7, r1
 800a80c:	6013      	str	r3, [r2, #0]
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	00da      	lsls	r2, r3, #3
 800a814:	187b      	adds	r3, r7, r1
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	18d3      	adds	r3, r2, r3
 800a81a:	4a4f      	ldr	r2, [pc, #316]	; (800a958 <USB_EPStartXfer+0xaac>)
 800a81c:	4694      	mov	ip, r2
 800a81e:	4463      	add	r3, ip
 800a820:	2180      	movs	r1, #128	; 0x80
 800a822:	187a      	adds	r2, r7, r1
 800a824:	6013      	str	r3, [r2, #0]
 800a826:	1d7b      	adds	r3, r7, #5
 800a828:	33ff      	adds	r3, #255	; 0xff
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	187b      	adds	r3, r7, r1
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a834:	2076      	movs	r0, #118	; 0x76
 800a836:	183b      	adds	r3, r7, r0
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	8912      	ldrh	r2, [r2, #8]
 800a83c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	6959      	ldr	r1, [r3, #20]
 800a842:	1d7b      	adds	r3, r7, #5
 800a844:	33ff      	adds	r3, #255	; 0xff
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	b29c      	uxth	r4, r3
 800a84a:	183b      	adds	r3, r7, r0
 800a84c:	881a      	ldrh	r2, [r3, #0]
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	0023      	movs	r3, r4
 800a852:	f000 fd1f 	bl	800b294 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	18d3      	adds	r3, r2, r3
 800a860:	881b      	ldrh	r3, [r3, #0]
 800a862:	b29a      	uxth	r2, r3
 800a864:	200a      	movs	r0, #10
 800a866:	183b      	adds	r3, r7, r0
 800a868:	493c      	ldr	r1, [pc, #240]	; (800a95c <USB_EPStartXfer+0xab0>)
 800a86a:	400a      	ands	r2, r1
 800a86c:	801a      	strh	r2, [r3, #0]
 800a86e:	183b      	adds	r3, r7, r0
 800a870:	183a      	adds	r2, r7, r0
 800a872:	8812      	ldrh	r2, [r2, #0]
 800a874:	2110      	movs	r1, #16
 800a876:	404a      	eors	r2, r1
 800a878:	801a      	strh	r2, [r3, #0]
 800a87a:	183b      	adds	r3, r7, r0
 800a87c:	183a      	adds	r2, r7, r0
 800a87e:	8812      	ldrh	r2, [r2, #0]
 800a880:	2120      	movs	r1, #32
 800a882:	404a      	eors	r2, r1
 800a884:	801a      	strh	r2, [r3, #0]
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	18d3      	adds	r3, r2, r3
 800a890:	183a      	adds	r2, r7, r0
 800a892:	8812      	ldrh	r2, [r2, #0]
 800a894:	4932      	ldr	r1, [pc, #200]	; (800a960 <USB_EPStartXfer+0xab4>)
 800a896:	430a      	orrs	r2, r1
 800a898:	b292      	uxth	r2, r2
 800a89a:	801a      	strh	r2, [r3, #0]
 800a89c:	f000 fbaf 	bl	800affe <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	7b1b      	ldrb	r3, [r3, #12]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d000      	beq.n	800a8aa <USB_EPStartXfer+0x9fe>
 800a8a8:	e09e      	b.n	800a9e8 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	699a      	ldr	r2, [r3, #24]
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	691b      	ldr	r3, [r3, #16]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d90d      	bls.n	800a8d2 <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	691b      	ldr	r3, [r3, #16]
 800a8ba:	1d7a      	adds	r2, r7, #5
 800a8bc:	32ff      	adds	r2, #255	; 0xff
 800a8be:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	699a      	ldr	r2, [r3, #24]
 800a8c4:	1d7b      	adds	r3, r7, #5
 800a8c6:	33ff      	adds	r3, #255	; 0xff
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	1ad2      	subs	r2, r2, r3
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	619a      	str	r2, [r3, #24]
 800a8d0:	e007      	b.n	800a8e2 <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	699b      	ldr	r3, [r3, #24]
 800a8d6:	1d7a      	adds	r2, r7, #5
 800a8d8:	32ff      	adds	r2, #255	; 0xff
 800a8da:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2190      	movs	r1, #144	; 0x90
 800a8e6:	187a      	adds	r2, r7, r1
 800a8e8:	6013      	str	r3, [r2, #0]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2250      	movs	r2, #80	; 0x50
 800a8ee:	5a9b      	ldrh	r3, [r3, r2]
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	001a      	movs	r2, r3
 800a8f4:	187b      	adds	r3, r7, r1
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	189b      	adds	r3, r3, r2
 800a8fa:	187a      	adds	r2, r7, r1
 800a8fc:	6013      	str	r3, [r2, #0]
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	00da      	lsls	r2, r3, #3
 800a904:	187b      	adds	r3, r7, r1
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	18d3      	adds	r3, r2, r3
 800a90a:	4a10      	ldr	r2, [pc, #64]	; (800a94c <USB_EPStartXfer+0xaa0>)
 800a90c:	4694      	mov	ip, r2
 800a90e:	4463      	add	r3, ip
 800a910:	218c      	movs	r1, #140	; 0x8c
 800a912:	187a      	adds	r2, r7, r1
 800a914:	6013      	str	r3, [r2, #0]
 800a916:	1d7b      	adds	r3, r7, #5
 800a918:	33ff      	adds	r3, #255	; 0xff
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d121      	bne.n	800a964 <USB_EPStartXfer+0xab8>
 800a920:	187b      	adds	r3, r7, r1
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	881b      	ldrh	r3, [r3, #0]
 800a926:	b29b      	uxth	r3, r3
 800a928:	4a09      	ldr	r2, [pc, #36]	; (800a950 <USB_EPStartXfer+0xaa4>)
 800a92a:	4013      	ands	r3, r2
 800a92c:	b29a      	uxth	r2, r3
 800a92e:	187b      	adds	r3, r7, r1
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	801a      	strh	r2, [r3, #0]
 800a934:	187b      	adds	r3, r7, r1
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	881b      	ldrh	r3, [r3, #0]
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	4a05      	ldr	r2, [pc, #20]	; (800a954 <USB_EPStartXfer+0xaa8>)
 800a93e:	4313      	orrs	r3, r2
 800a940:	b29a      	uxth	r2, r3
 800a942:	187b      	adds	r3, r7, r1
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	801a      	strh	r2, [r3, #0]
 800a948:	e334      	b.n	800afb4 <USB_EPStartXfer+0x1108>
 800a94a:	46c0      	nop			; (mov r8, r8)
 800a94c:	00000406 	.word	0x00000406
 800a950:	ffff83ff 	.word	0xffff83ff
 800a954:	ffff8000 	.word	0xffff8000
 800a958:	00000402 	.word	0x00000402
 800a95c:	ffff8fbf 	.word	0xffff8fbf
 800a960:	ffff8080 	.word	0xffff8080
 800a964:	1d7b      	adds	r3, r7, #5
 800a966:	33ff      	adds	r3, #255	; 0xff
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2b3e      	cmp	r3, #62	; 0x3e
 800a96c:	d81c      	bhi.n	800a9a8 <USB_EPStartXfer+0xafc>
 800a96e:	1d7b      	adds	r3, r7, #5
 800a970:	33ff      	adds	r3, #255	; 0xff
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	085b      	lsrs	r3, r3, #1
 800a976:	21e8      	movs	r1, #232	; 0xe8
 800a978:	187a      	adds	r2, r7, r1
 800a97a:	6013      	str	r3, [r2, #0]
 800a97c:	1d7b      	adds	r3, r7, #5
 800a97e:	33ff      	adds	r3, #255	; 0xff
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2201      	movs	r2, #1
 800a984:	4013      	ands	r3, r2
 800a986:	d004      	beq.n	800a992 <USB_EPStartXfer+0xae6>
 800a988:	187b      	adds	r3, r7, r1
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	3301      	adds	r3, #1
 800a98e:	187a      	adds	r2, r7, r1
 800a990:	6013      	str	r3, [r2, #0]
 800a992:	23e8      	movs	r3, #232	; 0xe8
 800a994:	18fb      	adds	r3, r7, r3
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	b29b      	uxth	r3, r3
 800a99a:	029b      	lsls	r3, r3, #10
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	238c      	movs	r3, #140	; 0x8c
 800a9a0:	18fb      	adds	r3, r7, r3
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	801a      	strh	r2, [r3, #0]
 800a9a6:	e305      	b.n	800afb4 <USB_EPStartXfer+0x1108>
 800a9a8:	1d7b      	adds	r3, r7, #5
 800a9aa:	33ff      	adds	r3, #255	; 0xff
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	095b      	lsrs	r3, r3, #5
 800a9b0:	21e8      	movs	r1, #232	; 0xe8
 800a9b2:	187a      	adds	r2, r7, r1
 800a9b4:	6013      	str	r3, [r2, #0]
 800a9b6:	1d7b      	adds	r3, r7, #5
 800a9b8:	33ff      	adds	r3, #255	; 0xff
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	221f      	movs	r2, #31
 800a9be:	4013      	ands	r3, r2
 800a9c0:	d104      	bne.n	800a9cc <USB_EPStartXfer+0xb20>
 800a9c2:	187b      	adds	r3, r7, r1
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	187a      	adds	r2, r7, r1
 800a9ca:	6013      	str	r3, [r2, #0]
 800a9cc:	23e8      	movs	r3, #232	; 0xe8
 800a9ce:	18fb      	adds	r3, r7, r3
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	029b      	lsls	r3, r3, #10
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	4aca      	ldr	r2, [pc, #808]	; (800ad04 <USB_EPStartXfer+0xe58>)
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	b29a      	uxth	r2, r3
 800a9de:	238c      	movs	r3, #140	; 0x8c
 800a9e0:	18fb      	adds	r3, r7, r3
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	801a      	strh	r2, [r3, #0]
 800a9e6:	e2e5      	b.n	800afb4 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	78db      	ldrb	r3, [r3, #3]
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	d000      	beq.n	800a9f2 <USB_EPStartXfer+0xb46>
 800a9f0:	e16f      	b.n	800acd2 <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	785b      	ldrb	r3, [r3, #1]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d16f      	bne.n	800aada <USB_EPStartXfer+0xc2e>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	21ac      	movs	r1, #172	; 0xac
 800a9fe:	187a      	adds	r2, r7, r1
 800aa00:	6013      	str	r3, [r2, #0]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2250      	movs	r2, #80	; 0x50
 800aa06:	5a9b      	ldrh	r3, [r3, r2]
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	001a      	movs	r2, r3
 800aa0c:	187b      	adds	r3, r7, r1
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	189b      	adds	r3, r3, r2
 800aa12:	187a      	adds	r2, r7, r1
 800aa14:	6013      	str	r3, [r2, #0]
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	00da      	lsls	r2, r3, #3
 800aa1c:	187b      	adds	r3, r7, r1
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	18d3      	adds	r3, r2, r3
 800aa22:	4ab9      	ldr	r2, [pc, #740]	; (800ad08 <USB_EPStartXfer+0xe5c>)
 800aa24:	4694      	mov	ip, r2
 800aa26:	4463      	add	r3, ip
 800aa28:	21a8      	movs	r1, #168	; 0xa8
 800aa2a:	187a      	adds	r2, r7, r1
 800aa2c:	6013      	str	r3, [r2, #0]
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d114      	bne.n	800aa60 <USB_EPStartXfer+0xbb4>
 800aa36:	187b      	adds	r3, r7, r1
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	881b      	ldrh	r3, [r3, #0]
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	4ab3      	ldr	r2, [pc, #716]	; (800ad0c <USB_EPStartXfer+0xe60>)
 800aa40:	4013      	ands	r3, r2
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	187b      	adds	r3, r7, r1
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	801a      	strh	r2, [r3, #0]
 800aa4a:	187b      	adds	r3, r7, r1
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	881b      	ldrh	r3, [r3, #0]
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	4aac      	ldr	r2, [pc, #688]	; (800ad04 <USB_EPStartXfer+0xe58>)
 800aa54:	4313      	orrs	r3, r2
 800aa56:	b29a      	uxth	r2, r3
 800aa58:	187b      	adds	r3, r7, r1
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	801a      	strh	r2, [r3, #0]
 800aa5e:	e060      	b.n	800ab22 <USB_EPStartXfer+0xc76>
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	691b      	ldr	r3, [r3, #16]
 800aa64:	2b3e      	cmp	r3, #62	; 0x3e
 800aa66:	d81a      	bhi.n	800aa9e <USB_EPStartXfer+0xbf2>
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	085b      	lsrs	r3, r3, #1
 800aa6e:	21e4      	movs	r1, #228	; 0xe4
 800aa70:	187a      	adds	r2, r7, r1
 800aa72:	6013      	str	r3, [r2, #0]
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	691b      	ldr	r3, [r3, #16]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	4013      	ands	r3, r2
 800aa7c:	d004      	beq.n	800aa88 <USB_EPStartXfer+0xbdc>
 800aa7e:	187b      	adds	r3, r7, r1
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	3301      	adds	r3, #1
 800aa84:	187a      	adds	r2, r7, r1
 800aa86:	6013      	str	r3, [r2, #0]
 800aa88:	23e4      	movs	r3, #228	; 0xe4
 800aa8a:	18fb      	adds	r3, r7, r3
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	029b      	lsls	r3, r3, #10
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	23a8      	movs	r3, #168	; 0xa8
 800aa96:	18fb      	adds	r3, r7, r3
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	801a      	strh	r2, [r3, #0]
 800aa9c:	e041      	b.n	800ab22 <USB_EPStartXfer+0xc76>
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	691b      	ldr	r3, [r3, #16]
 800aaa2:	095b      	lsrs	r3, r3, #5
 800aaa4:	21e4      	movs	r1, #228	; 0xe4
 800aaa6:	187a      	adds	r2, r7, r1
 800aaa8:	6013      	str	r3, [r2, #0]
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	691b      	ldr	r3, [r3, #16]
 800aaae:	221f      	movs	r2, #31
 800aab0:	4013      	ands	r3, r2
 800aab2:	d104      	bne.n	800aabe <USB_EPStartXfer+0xc12>
 800aab4:	187b      	adds	r3, r7, r1
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	3b01      	subs	r3, #1
 800aaba:	187a      	adds	r2, r7, r1
 800aabc:	6013      	str	r3, [r2, #0]
 800aabe:	23e4      	movs	r3, #228	; 0xe4
 800aac0:	18fb      	adds	r3, r7, r3
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	029b      	lsls	r3, r3, #10
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	4a8e      	ldr	r2, [pc, #568]	; (800ad04 <USB_EPStartXfer+0xe58>)
 800aacc:	4313      	orrs	r3, r2
 800aace:	b29a      	uxth	r2, r3
 800aad0:	23a8      	movs	r3, #168	; 0xa8
 800aad2:	18fb      	adds	r3, r7, r3
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	801a      	strh	r2, [r3, #0]
 800aad8:	e023      	b.n	800ab22 <USB_EPStartXfer+0xc76>
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	785b      	ldrb	r3, [r3, #1]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d11f      	bne.n	800ab22 <USB_EPStartXfer+0xc76>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	21b4      	movs	r1, #180	; 0xb4
 800aae6:	187a      	adds	r2, r7, r1
 800aae8:	6013      	str	r3, [r2, #0]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2250      	movs	r2, #80	; 0x50
 800aaee:	5a9b      	ldrh	r3, [r3, r2]
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	001a      	movs	r2, r3
 800aaf4:	187b      	adds	r3, r7, r1
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	189b      	adds	r3, r3, r2
 800aafa:	187a      	adds	r2, r7, r1
 800aafc:	6013      	str	r3, [r2, #0]
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	00da      	lsls	r2, r3, #3
 800ab04:	187b      	adds	r3, r7, r1
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	18d3      	adds	r3, r2, r3
 800ab0a:	4a7f      	ldr	r2, [pc, #508]	; (800ad08 <USB_EPStartXfer+0xe5c>)
 800ab0c:	4694      	mov	ip, r2
 800ab0e:	4463      	add	r3, ip
 800ab10:	21b0      	movs	r1, #176	; 0xb0
 800ab12:	187a      	adds	r2, r7, r1
 800ab14:	6013      	str	r3, [r2, #0]
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	b29a      	uxth	r2, r3
 800ab1c:	187b      	adds	r3, r7, r1
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	801a      	strh	r2, [r3, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	22a4      	movs	r2, #164	; 0xa4
 800ab26:	18ba      	adds	r2, r7, r2
 800ab28:	6013      	str	r3, [r2, #0]
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	785b      	ldrb	r3, [r3, #1]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d16f      	bne.n	800ac12 <USB_EPStartXfer+0xd66>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	219c      	movs	r1, #156	; 0x9c
 800ab36:	187a      	adds	r2, r7, r1
 800ab38:	6013      	str	r3, [r2, #0]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2250      	movs	r2, #80	; 0x50
 800ab3e:	5a9b      	ldrh	r3, [r3, r2]
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	001a      	movs	r2, r3
 800ab44:	187b      	adds	r3, r7, r1
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	189b      	adds	r3, r3, r2
 800ab4a:	187a      	adds	r2, r7, r1
 800ab4c:	6013      	str	r3, [r2, #0]
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	00da      	lsls	r2, r3, #3
 800ab54:	187b      	adds	r3, r7, r1
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	18d3      	adds	r3, r2, r3
 800ab5a:	4a6d      	ldr	r2, [pc, #436]	; (800ad10 <USB_EPStartXfer+0xe64>)
 800ab5c:	4694      	mov	ip, r2
 800ab5e:	4463      	add	r3, ip
 800ab60:	2198      	movs	r1, #152	; 0x98
 800ab62:	187a      	adds	r2, r7, r1
 800ab64:	6013      	str	r3, [r2, #0]
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d114      	bne.n	800ab98 <USB_EPStartXfer+0xcec>
 800ab6e:	187b      	adds	r3, r7, r1
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	881b      	ldrh	r3, [r3, #0]
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	4a65      	ldr	r2, [pc, #404]	; (800ad0c <USB_EPStartXfer+0xe60>)
 800ab78:	4013      	ands	r3, r2
 800ab7a:	b29a      	uxth	r2, r3
 800ab7c:	187b      	adds	r3, r7, r1
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	801a      	strh	r2, [r3, #0]
 800ab82:	187b      	adds	r3, r7, r1
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	881b      	ldrh	r3, [r3, #0]
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	4a5e      	ldr	r2, [pc, #376]	; (800ad04 <USB_EPStartXfer+0xe58>)
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	b29a      	uxth	r2, r3
 800ab90:	187b      	adds	r3, r7, r1
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	801a      	strh	r2, [r3, #0]
 800ab96:	e05d      	b.n	800ac54 <USB_EPStartXfer+0xda8>
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	2b3e      	cmp	r3, #62	; 0x3e
 800ab9e:	d81a      	bhi.n	800abd6 <USB_EPStartXfer+0xd2a>
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	085b      	lsrs	r3, r3, #1
 800aba6:	21e0      	movs	r1, #224	; 0xe0
 800aba8:	187a      	adds	r2, r7, r1
 800abaa:	6013      	str	r3, [r2, #0]
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	691b      	ldr	r3, [r3, #16]
 800abb0:	2201      	movs	r2, #1
 800abb2:	4013      	ands	r3, r2
 800abb4:	d004      	beq.n	800abc0 <USB_EPStartXfer+0xd14>
 800abb6:	187b      	adds	r3, r7, r1
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	3301      	adds	r3, #1
 800abbc:	187a      	adds	r2, r7, r1
 800abbe:	6013      	str	r3, [r2, #0]
 800abc0:	23e0      	movs	r3, #224	; 0xe0
 800abc2:	18fb      	adds	r3, r7, r3
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	029b      	lsls	r3, r3, #10
 800abca:	b29a      	uxth	r2, r3
 800abcc:	2398      	movs	r3, #152	; 0x98
 800abce:	18fb      	adds	r3, r7, r3
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	801a      	strh	r2, [r3, #0]
 800abd4:	e03e      	b.n	800ac54 <USB_EPStartXfer+0xda8>
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	691b      	ldr	r3, [r3, #16]
 800abda:	095b      	lsrs	r3, r3, #5
 800abdc:	21e0      	movs	r1, #224	; 0xe0
 800abde:	187a      	adds	r2, r7, r1
 800abe0:	6013      	str	r3, [r2, #0]
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	691b      	ldr	r3, [r3, #16]
 800abe6:	221f      	movs	r2, #31
 800abe8:	4013      	ands	r3, r2
 800abea:	d104      	bne.n	800abf6 <USB_EPStartXfer+0xd4a>
 800abec:	187b      	adds	r3, r7, r1
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	3b01      	subs	r3, #1
 800abf2:	187a      	adds	r2, r7, r1
 800abf4:	6013      	str	r3, [r2, #0]
 800abf6:	23e0      	movs	r3, #224	; 0xe0
 800abf8:	18fb      	adds	r3, r7, r3
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	029b      	lsls	r3, r3, #10
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	4a40      	ldr	r2, [pc, #256]	; (800ad04 <USB_EPStartXfer+0xe58>)
 800ac04:	4313      	orrs	r3, r2
 800ac06:	b29a      	uxth	r2, r3
 800ac08:	2398      	movs	r3, #152	; 0x98
 800ac0a:	18fb      	adds	r3, r7, r3
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	801a      	strh	r2, [r3, #0]
 800ac10:	e020      	b.n	800ac54 <USB_EPStartXfer+0xda8>
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	785b      	ldrb	r3, [r3, #1]
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d11c      	bne.n	800ac54 <USB_EPStartXfer+0xda8>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2250      	movs	r2, #80	; 0x50
 800ac1e:	5a9b      	ldrh	r3, [r3, r2]
 800ac20:	b29b      	uxth	r3, r3
 800ac22:	001a      	movs	r2, r3
 800ac24:	21a4      	movs	r1, #164	; 0xa4
 800ac26:	187b      	adds	r3, r7, r1
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	189b      	adds	r3, r3, r2
 800ac2c:	187a      	adds	r2, r7, r1
 800ac2e:	6013      	str	r3, [r2, #0]
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	00da      	lsls	r2, r3, #3
 800ac36:	187b      	adds	r3, r7, r1
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	18d3      	adds	r3, r2, r3
 800ac3c:	4a34      	ldr	r2, [pc, #208]	; (800ad10 <USB_EPStartXfer+0xe64>)
 800ac3e:	4694      	mov	ip, r2
 800ac40:	4463      	add	r3, ip
 800ac42:	21a0      	movs	r1, #160	; 0xa0
 800ac44:	187a      	adds	r2, r7, r1
 800ac46:	6013      	str	r3, [r2, #0]
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	691b      	ldr	r3, [r3, #16]
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	187b      	adds	r3, r7, r1
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	69db      	ldr	r3, [r3, #28]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d100      	bne.n	800ac5e <USB_EPStartXfer+0xdb2>
 800ac5c:	e1aa      	b.n	800afb4 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	18d2      	adds	r2, r2, r3
 800ac68:	2196      	movs	r1, #150	; 0x96
 800ac6a:	187b      	adds	r3, r7, r1
 800ac6c:	8812      	ldrh	r2, [r2, #0]
 800ac6e:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ac70:	187b      	adds	r3, r7, r1
 800ac72:	881a      	ldrh	r2, [r3, #0]
 800ac74:	2380      	movs	r3, #128	; 0x80
 800ac76:	01db      	lsls	r3, r3, #7
 800ac78:	4013      	ands	r3, r2
 800ac7a:	d004      	beq.n	800ac86 <USB_EPStartXfer+0xdda>
 800ac7c:	187b      	adds	r3, r7, r1
 800ac7e:	881b      	ldrh	r3, [r3, #0]
 800ac80:	2240      	movs	r2, #64	; 0x40
 800ac82:	4013      	ands	r3, r2
 800ac84:	d10d      	bne.n	800aca2 <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ac86:	2196      	movs	r1, #150	; 0x96
 800ac88:	187b      	adds	r3, r7, r1
 800ac8a:	881a      	ldrh	r2, [r3, #0]
 800ac8c:	2380      	movs	r3, #128	; 0x80
 800ac8e:	01db      	lsls	r3, r3, #7
 800ac90:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ac92:	d000      	beq.n	800ac96 <USB_EPStartXfer+0xdea>
 800ac94:	e18e      	b.n	800afb4 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ac96:	187b      	adds	r3, r7, r1
 800ac98:	881b      	ldrh	r3, [r3, #0]
 800ac9a:	2240      	movs	r2, #64	; 0x40
 800ac9c:	4013      	ands	r3, r2
 800ac9e:	d000      	beq.n	800aca2 <USB_EPStartXfer+0xdf6>
 800aca0:	e188      	b.n	800afb4 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	18d3      	adds	r3, r2, r3
 800acac:	881b      	ldrh	r3, [r3, #0]
 800acae:	b29a      	uxth	r2, r3
 800acb0:	2094      	movs	r0, #148	; 0x94
 800acb2:	183b      	adds	r3, r7, r0
 800acb4:	4917      	ldr	r1, [pc, #92]	; (800ad14 <USB_EPStartXfer+0xe68>)
 800acb6:	400a      	ands	r2, r1
 800acb8:	801a      	strh	r2, [r3, #0]
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	18d3      	adds	r3, r2, r3
 800acc4:	183a      	adds	r2, r7, r0
 800acc6:	8812      	ldrh	r2, [r2, #0]
 800acc8:	4913      	ldr	r1, [pc, #76]	; (800ad18 <USB_EPStartXfer+0xe6c>)
 800acca:	430a      	orrs	r2, r1
 800accc:	b292      	uxth	r2, r2
 800acce:	801a      	strh	r2, [r3, #0]
 800acd0:	e170      	b.n	800afb4 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	78db      	ldrb	r3, [r3, #3]
 800acd6:	2b01      	cmp	r3, #1
 800acd8:	d000      	beq.n	800acdc <USB_EPStartXfer+0xe30>
 800acda:	e169      	b.n	800afb0 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	699a      	ldr	r2, [r3, #24]
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	691b      	ldr	r3, [r3, #16]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d919      	bls.n	800ad1c <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	691b      	ldr	r3, [r3, #16]
 800acec:	1d7a      	adds	r2, r7, #5
 800acee:	32ff      	adds	r2, #255	; 0xff
 800acf0:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	699a      	ldr	r2, [r3, #24]
 800acf6:	1d7b      	adds	r3, r7, #5
 800acf8:	33ff      	adds	r3, #255	; 0xff
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	1ad2      	subs	r2, r2, r3
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	619a      	str	r2, [r3, #24]
 800ad02:	e013      	b.n	800ad2c <USB_EPStartXfer+0xe80>
 800ad04:	ffff8000 	.word	0xffff8000
 800ad08:	00000402 	.word	0x00000402
 800ad0c:	ffff83ff 	.word	0xffff83ff
 800ad10:	00000406 	.word	0x00000406
 800ad14:	ffff8f8f 	.word	0xffff8f8f
 800ad18:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	699b      	ldr	r3, [r3, #24]
 800ad20:	1d7a      	adds	r2, r7, #5
 800ad22:	32ff      	adds	r2, #255	; 0xff
 800ad24:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	785b      	ldrb	r3, [r3, #1]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d000      	beq.n	800ad36 <USB_EPStartXfer+0xe8a>
 800ad34:	e075      	b.n	800ae22 <USB_EPStartXfer+0xf76>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	21cc      	movs	r1, #204	; 0xcc
 800ad3a:	187a      	adds	r2, r7, r1
 800ad3c:	6013      	str	r3, [r2, #0]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2250      	movs	r2, #80	; 0x50
 800ad42:	5a9b      	ldrh	r3, [r3, r2]
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	001a      	movs	r2, r3
 800ad48:	187b      	adds	r3, r7, r1
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	189b      	adds	r3, r3, r2
 800ad4e:	187a      	adds	r2, r7, r1
 800ad50:	6013      	str	r3, [r2, #0]
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	00da      	lsls	r2, r3, #3
 800ad58:	187b      	adds	r3, r7, r1
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	18d3      	adds	r3, r2, r3
 800ad5e:	4aaa      	ldr	r2, [pc, #680]	; (800b008 <USB_EPStartXfer+0x115c>)
 800ad60:	4694      	mov	ip, r2
 800ad62:	4463      	add	r3, ip
 800ad64:	21c8      	movs	r1, #200	; 0xc8
 800ad66:	187a      	adds	r2, r7, r1
 800ad68:	6013      	str	r3, [r2, #0]
 800ad6a:	1d7b      	adds	r3, r7, #5
 800ad6c:	33ff      	adds	r3, #255	; 0xff
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d114      	bne.n	800ad9e <USB_EPStartXfer+0xef2>
 800ad74:	187b      	adds	r3, r7, r1
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	881b      	ldrh	r3, [r3, #0]
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	4aa3      	ldr	r2, [pc, #652]	; (800b00c <USB_EPStartXfer+0x1160>)
 800ad7e:	4013      	ands	r3, r2
 800ad80:	b29a      	uxth	r2, r3
 800ad82:	187b      	adds	r3, r7, r1
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	801a      	strh	r2, [r3, #0]
 800ad88:	187b      	adds	r3, r7, r1
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	881b      	ldrh	r3, [r3, #0]
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	4a9f      	ldr	r2, [pc, #636]	; (800b010 <USB_EPStartXfer+0x1164>)
 800ad92:	4313      	orrs	r3, r2
 800ad94:	b29a      	uxth	r2, r3
 800ad96:	187b      	adds	r3, r7, r1
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	801a      	strh	r2, [r3, #0]
 800ad9c:	e066      	b.n	800ae6c <USB_EPStartXfer+0xfc0>
 800ad9e:	1d7b      	adds	r3, r7, #5
 800ada0:	33ff      	adds	r3, #255	; 0xff
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b3e      	cmp	r3, #62	; 0x3e
 800ada6:	d81c      	bhi.n	800ade2 <USB_EPStartXfer+0xf36>
 800ada8:	1d7b      	adds	r3, r7, #5
 800adaa:	33ff      	adds	r3, #255	; 0xff
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	085b      	lsrs	r3, r3, #1
 800adb0:	21dc      	movs	r1, #220	; 0xdc
 800adb2:	187a      	adds	r2, r7, r1
 800adb4:	6013      	str	r3, [r2, #0]
 800adb6:	1d7b      	adds	r3, r7, #5
 800adb8:	33ff      	adds	r3, #255	; 0xff
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	2201      	movs	r2, #1
 800adbe:	4013      	ands	r3, r2
 800adc0:	d004      	beq.n	800adcc <USB_EPStartXfer+0xf20>
 800adc2:	187b      	adds	r3, r7, r1
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	3301      	adds	r3, #1
 800adc8:	187a      	adds	r2, r7, r1
 800adca:	6013      	str	r3, [r2, #0]
 800adcc:	23dc      	movs	r3, #220	; 0xdc
 800adce:	18fb      	adds	r3, r7, r3
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	b29b      	uxth	r3, r3
 800add4:	029b      	lsls	r3, r3, #10
 800add6:	b29a      	uxth	r2, r3
 800add8:	23c8      	movs	r3, #200	; 0xc8
 800adda:	18fb      	adds	r3, r7, r3
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	801a      	strh	r2, [r3, #0]
 800ade0:	e044      	b.n	800ae6c <USB_EPStartXfer+0xfc0>
 800ade2:	1d7b      	adds	r3, r7, #5
 800ade4:	33ff      	adds	r3, #255	; 0xff
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	095b      	lsrs	r3, r3, #5
 800adea:	21dc      	movs	r1, #220	; 0xdc
 800adec:	187a      	adds	r2, r7, r1
 800adee:	6013      	str	r3, [r2, #0]
 800adf0:	1d7b      	adds	r3, r7, #5
 800adf2:	33ff      	adds	r3, #255	; 0xff
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	221f      	movs	r2, #31
 800adf8:	4013      	ands	r3, r2
 800adfa:	d104      	bne.n	800ae06 <USB_EPStartXfer+0xf5a>
 800adfc:	187b      	adds	r3, r7, r1
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	3b01      	subs	r3, #1
 800ae02:	187a      	adds	r2, r7, r1
 800ae04:	6013      	str	r3, [r2, #0]
 800ae06:	23dc      	movs	r3, #220	; 0xdc
 800ae08:	18fb      	adds	r3, r7, r3
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	029b      	lsls	r3, r3, #10
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	4a7f      	ldr	r2, [pc, #508]	; (800b010 <USB_EPStartXfer+0x1164>)
 800ae14:	4313      	orrs	r3, r2
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	23c8      	movs	r3, #200	; 0xc8
 800ae1a:	18fb      	adds	r3, r7, r3
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	801a      	strh	r2, [r3, #0]
 800ae20:	e024      	b.n	800ae6c <USB_EPStartXfer+0xfc0>
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	785b      	ldrb	r3, [r3, #1]
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d120      	bne.n	800ae6c <USB_EPStartXfer+0xfc0>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	21d4      	movs	r1, #212	; 0xd4
 800ae2e:	187a      	adds	r2, r7, r1
 800ae30:	6013      	str	r3, [r2, #0]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2250      	movs	r2, #80	; 0x50
 800ae36:	5a9b      	ldrh	r3, [r3, r2]
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	001a      	movs	r2, r3
 800ae3c:	187b      	adds	r3, r7, r1
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	189b      	adds	r3, r3, r2
 800ae42:	187a      	adds	r2, r7, r1
 800ae44:	6013      	str	r3, [r2, #0]
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	00da      	lsls	r2, r3, #3
 800ae4c:	187b      	adds	r3, r7, r1
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	18d3      	adds	r3, r2, r3
 800ae52:	4a6d      	ldr	r2, [pc, #436]	; (800b008 <USB_EPStartXfer+0x115c>)
 800ae54:	4694      	mov	ip, r2
 800ae56:	4463      	add	r3, ip
 800ae58:	21d0      	movs	r1, #208	; 0xd0
 800ae5a:	187a      	adds	r2, r7, r1
 800ae5c:	6013      	str	r3, [r2, #0]
 800ae5e:	1d7b      	adds	r3, r7, #5
 800ae60:	33ff      	adds	r3, #255	; 0xff
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	187b      	adds	r3, r7, r1
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	801a      	strh	r2, [r3, #0]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	22c4      	movs	r2, #196	; 0xc4
 800ae70:	18ba      	adds	r2, r7, r2
 800ae72:	6013      	str	r3, [r2, #0]
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	785b      	ldrb	r3, [r3, #1]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d000      	beq.n	800ae7e <USB_EPStartXfer+0xfd2>
 800ae7c:	e075      	b.n	800af6a <USB_EPStartXfer+0x10be>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	21bc      	movs	r1, #188	; 0xbc
 800ae82:	187a      	adds	r2, r7, r1
 800ae84:	6013      	str	r3, [r2, #0]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2250      	movs	r2, #80	; 0x50
 800ae8a:	5a9b      	ldrh	r3, [r3, r2]
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	001a      	movs	r2, r3
 800ae90:	187b      	adds	r3, r7, r1
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	189b      	adds	r3, r3, r2
 800ae96:	187a      	adds	r2, r7, r1
 800ae98:	6013      	str	r3, [r2, #0]
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	00da      	lsls	r2, r3, #3
 800aea0:	187b      	adds	r3, r7, r1
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	18d3      	adds	r3, r2, r3
 800aea6:	4a5b      	ldr	r2, [pc, #364]	; (800b014 <USB_EPStartXfer+0x1168>)
 800aea8:	4694      	mov	ip, r2
 800aeaa:	4463      	add	r3, ip
 800aeac:	21b8      	movs	r1, #184	; 0xb8
 800aeae:	187a      	adds	r2, r7, r1
 800aeb0:	6013      	str	r3, [r2, #0]
 800aeb2:	1d7b      	adds	r3, r7, #5
 800aeb4:	33ff      	adds	r3, #255	; 0xff
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d114      	bne.n	800aee6 <USB_EPStartXfer+0x103a>
 800aebc:	187b      	adds	r3, r7, r1
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	881b      	ldrh	r3, [r3, #0]
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	4a51      	ldr	r2, [pc, #324]	; (800b00c <USB_EPStartXfer+0x1160>)
 800aec6:	4013      	ands	r3, r2
 800aec8:	b29a      	uxth	r2, r3
 800aeca:	187b      	adds	r3, r7, r1
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	801a      	strh	r2, [r3, #0]
 800aed0:	187b      	adds	r3, r7, r1
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	881b      	ldrh	r3, [r3, #0]
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	4a4d      	ldr	r2, [pc, #308]	; (800b010 <USB_EPStartXfer+0x1164>)
 800aeda:	4313      	orrs	r3, r2
 800aedc:	b29a      	uxth	r2, r3
 800aede:	187b      	adds	r3, r7, r1
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	801a      	strh	r2, [r3, #0]
 800aee4:	e066      	b.n	800afb4 <USB_EPStartXfer+0x1108>
 800aee6:	1d7b      	adds	r3, r7, #5
 800aee8:	33ff      	adds	r3, #255	; 0xff
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	2b3e      	cmp	r3, #62	; 0x3e
 800aeee:	d81c      	bhi.n	800af2a <USB_EPStartXfer+0x107e>
 800aef0:	1d7b      	adds	r3, r7, #5
 800aef2:	33ff      	adds	r3, #255	; 0xff
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	085b      	lsrs	r3, r3, #1
 800aef8:	21d8      	movs	r1, #216	; 0xd8
 800aefa:	187a      	adds	r2, r7, r1
 800aefc:	6013      	str	r3, [r2, #0]
 800aefe:	1d7b      	adds	r3, r7, #5
 800af00:	33ff      	adds	r3, #255	; 0xff
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	2201      	movs	r2, #1
 800af06:	4013      	ands	r3, r2
 800af08:	d004      	beq.n	800af14 <USB_EPStartXfer+0x1068>
 800af0a:	187b      	adds	r3, r7, r1
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	3301      	adds	r3, #1
 800af10:	187a      	adds	r2, r7, r1
 800af12:	6013      	str	r3, [r2, #0]
 800af14:	23d8      	movs	r3, #216	; 0xd8
 800af16:	18fb      	adds	r3, r7, r3
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	029b      	lsls	r3, r3, #10
 800af1e:	b29a      	uxth	r2, r3
 800af20:	23b8      	movs	r3, #184	; 0xb8
 800af22:	18fb      	adds	r3, r7, r3
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	801a      	strh	r2, [r3, #0]
 800af28:	e044      	b.n	800afb4 <USB_EPStartXfer+0x1108>
 800af2a:	1d7b      	adds	r3, r7, #5
 800af2c:	33ff      	adds	r3, #255	; 0xff
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	095b      	lsrs	r3, r3, #5
 800af32:	21d8      	movs	r1, #216	; 0xd8
 800af34:	187a      	adds	r2, r7, r1
 800af36:	6013      	str	r3, [r2, #0]
 800af38:	1d7b      	adds	r3, r7, #5
 800af3a:	33ff      	adds	r3, #255	; 0xff
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	221f      	movs	r2, #31
 800af40:	4013      	ands	r3, r2
 800af42:	d104      	bne.n	800af4e <USB_EPStartXfer+0x10a2>
 800af44:	187b      	adds	r3, r7, r1
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	3b01      	subs	r3, #1
 800af4a:	187a      	adds	r2, r7, r1
 800af4c:	6013      	str	r3, [r2, #0]
 800af4e:	23d8      	movs	r3, #216	; 0xd8
 800af50:	18fb      	adds	r3, r7, r3
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	b29b      	uxth	r3, r3
 800af56:	029b      	lsls	r3, r3, #10
 800af58:	b29b      	uxth	r3, r3
 800af5a:	4a2d      	ldr	r2, [pc, #180]	; (800b010 <USB_EPStartXfer+0x1164>)
 800af5c:	4313      	orrs	r3, r2
 800af5e:	b29a      	uxth	r2, r3
 800af60:	23b8      	movs	r3, #184	; 0xb8
 800af62:	18fb      	adds	r3, r7, r3
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	801a      	strh	r2, [r3, #0]
 800af68:	e024      	b.n	800afb4 <USB_EPStartXfer+0x1108>
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	785b      	ldrb	r3, [r3, #1]
 800af6e:	2b01      	cmp	r3, #1
 800af70:	d120      	bne.n	800afb4 <USB_EPStartXfer+0x1108>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2250      	movs	r2, #80	; 0x50
 800af76:	5a9b      	ldrh	r3, [r3, r2]
 800af78:	b29b      	uxth	r3, r3
 800af7a:	001a      	movs	r2, r3
 800af7c:	21c4      	movs	r1, #196	; 0xc4
 800af7e:	187b      	adds	r3, r7, r1
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	189b      	adds	r3, r3, r2
 800af84:	187a      	adds	r2, r7, r1
 800af86:	6013      	str	r3, [r2, #0]
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	00da      	lsls	r2, r3, #3
 800af8e:	187b      	adds	r3, r7, r1
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	18d3      	adds	r3, r2, r3
 800af94:	4a1f      	ldr	r2, [pc, #124]	; (800b014 <USB_EPStartXfer+0x1168>)
 800af96:	4694      	mov	ip, r2
 800af98:	4463      	add	r3, ip
 800af9a:	21c0      	movs	r1, #192	; 0xc0
 800af9c:	187a      	adds	r2, r7, r1
 800af9e:	6013      	str	r3, [r2, #0]
 800afa0:	1d7b      	adds	r3, r7, #5
 800afa2:	33ff      	adds	r3, #255	; 0xff
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	187b      	adds	r3, r7, r1
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	801a      	strh	r2, [r3, #0]
 800afae:	e001      	b.n	800afb4 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 800afb0:	2301      	movs	r3, #1
 800afb2:	e025      	b.n	800b000 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	18d3      	adds	r3, r2, r3
 800afbe:	881b      	ldrh	r3, [r3, #0]
 800afc0:	b29a      	uxth	r2, r3
 800afc2:	208a      	movs	r0, #138	; 0x8a
 800afc4:	183b      	adds	r3, r7, r0
 800afc6:	4914      	ldr	r1, [pc, #80]	; (800b018 <USB_EPStartXfer+0x116c>)
 800afc8:	400a      	ands	r2, r1
 800afca:	801a      	strh	r2, [r3, #0]
 800afcc:	183b      	adds	r3, r7, r0
 800afce:	183a      	adds	r2, r7, r0
 800afd0:	8812      	ldrh	r2, [r2, #0]
 800afd2:	2180      	movs	r1, #128	; 0x80
 800afd4:	0149      	lsls	r1, r1, #5
 800afd6:	404a      	eors	r2, r1
 800afd8:	801a      	strh	r2, [r3, #0]
 800afda:	183b      	adds	r3, r7, r0
 800afdc:	183a      	adds	r2, r7, r0
 800afde:	8812      	ldrh	r2, [r2, #0]
 800afe0:	2180      	movs	r1, #128	; 0x80
 800afe2:	0189      	lsls	r1, r1, #6
 800afe4:	404a      	eors	r2, r1
 800afe6:	801a      	strh	r2, [r3, #0]
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	18d3      	adds	r3, r2, r3
 800aff2:	183a      	adds	r2, r7, r0
 800aff4:	8812      	ldrh	r2, [r2, #0]
 800aff6:	4909      	ldr	r1, [pc, #36]	; (800b01c <USB_EPStartXfer+0x1170>)
 800aff8:	430a      	orrs	r2, r1
 800affa:	b292      	uxth	r2, r2
 800affc:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800affe:	2300      	movs	r3, #0
}
 800b000:	0018      	movs	r0, r3
 800b002:	46bd      	mov	sp, r7
 800b004:	b043      	add	sp, #268	; 0x10c
 800b006:	bd90      	pop	{r4, r7, pc}
 800b008:	00000402 	.word	0x00000402
 800b00c:	ffff83ff 	.word	0xffff83ff
 800b010:	ffff8000 	.word	0xffff8000
 800b014:	00000406 	.word	0x00000406
 800b018:	ffffbf8f 	.word	0xffffbf8f
 800b01c:	ffff8080 	.word	0xffff8080

0800b020 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	785b      	ldrb	r3, [r3, #1]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d01d      	beq.n	800b06e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	18d3      	adds	r3, r2, r3
 800b03c:	881b      	ldrh	r3, [r3, #0]
 800b03e:	b29a      	uxth	r2, r3
 800b040:	200c      	movs	r0, #12
 800b042:	183b      	adds	r3, r7, r0
 800b044:	491b      	ldr	r1, [pc, #108]	; (800b0b4 <USB_EPSetStall+0x94>)
 800b046:	400a      	ands	r2, r1
 800b048:	801a      	strh	r2, [r3, #0]
 800b04a:	183b      	adds	r3, r7, r0
 800b04c:	183a      	adds	r2, r7, r0
 800b04e:	8812      	ldrh	r2, [r2, #0]
 800b050:	2110      	movs	r1, #16
 800b052:	404a      	eors	r2, r1
 800b054:	801a      	strh	r2, [r3, #0]
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	18d3      	adds	r3, r2, r3
 800b060:	183a      	adds	r2, r7, r0
 800b062:	8812      	ldrh	r2, [r2, #0]
 800b064:	4914      	ldr	r1, [pc, #80]	; (800b0b8 <USB_EPSetStall+0x98>)
 800b066:	430a      	orrs	r2, r1
 800b068:	b292      	uxth	r2, r2
 800b06a:	801a      	strh	r2, [r3, #0]
 800b06c:	e01d      	b.n	800b0aa <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	18d3      	adds	r3, r2, r3
 800b078:	881b      	ldrh	r3, [r3, #0]
 800b07a:	b29a      	uxth	r2, r3
 800b07c:	200e      	movs	r0, #14
 800b07e:	183b      	adds	r3, r7, r0
 800b080:	490e      	ldr	r1, [pc, #56]	; (800b0bc <USB_EPSetStall+0x9c>)
 800b082:	400a      	ands	r2, r1
 800b084:	801a      	strh	r2, [r3, #0]
 800b086:	183b      	adds	r3, r7, r0
 800b088:	183a      	adds	r2, r7, r0
 800b08a:	8812      	ldrh	r2, [r2, #0]
 800b08c:	2180      	movs	r1, #128	; 0x80
 800b08e:	0149      	lsls	r1, r1, #5
 800b090:	404a      	eors	r2, r1
 800b092:	801a      	strh	r2, [r3, #0]
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	18d3      	adds	r3, r2, r3
 800b09e:	183a      	adds	r2, r7, r0
 800b0a0:	8812      	ldrh	r2, [r2, #0]
 800b0a2:	4905      	ldr	r1, [pc, #20]	; (800b0b8 <USB_EPSetStall+0x98>)
 800b0a4:	430a      	orrs	r2, r1
 800b0a6:	b292      	uxth	r2, r2
 800b0a8:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	0018      	movs	r0, r3
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	b004      	add	sp, #16
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	ffff8fbf 	.word	0xffff8fbf
 800b0b8:	ffff8080 	.word	0xffff8080
 800b0bc:	ffffbf8f 	.word	0xffffbf8f

0800b0c0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b086      	sub	sp, #24
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	7b1b      	ldrb	r3, [r3, #12]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d000      	beq.n	800b0d4 <USB_EPClearStall+0x14>
 800b0d2:	e095      	b.n	800b200 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	785b      	ldrb	r3, [r3, #1]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d046      	beq.n	800b16a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	18d2      	adds	r2, r2, r3
 800b0e6:	2110      	movs	r1, #16
 800b0e8:	187b      	adds	r3, r7, r1
 800b0ea:	8812      	ldrh	r2, [r2, #0]
 800b0ec:	801a      	strh	r2, [r3, #0]
 800b0ee:	187b      	adds	r3, r7, r1
 800b0f0:	881b      	ldrh	r3, [r3, #0]
 800b0f2:	2240      	movs	r2, #64	; 0x40
 800b0f4:	4013      	ands	r3, r2
 800b0f6:	d016      	beq.n	800b126 <USB_EPClearStall+0x66>
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	18d3      	adds	r3, r2, r3
 800b102:	881b      	ldrh	r3, [r3, #0]
 800b104:	b29a      	uxth	r2, r3
 800b106:	200e      	movs	r0, #14
 800b108:	183b      	adds	r3, r7, r0
 800b10a:	4940      	ldr	r1, [pc, #256]	; (800b20c <USB_EPClearStall+0x14c>)
 800b10c:	400a      	ands	r2, r1
 800b10e:	801a      	strh	r2, [r3, #0]
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	18d3      	adds	r3, r2, r3
 800b11a:	183a      	adds	r2, r7, r0
 800b11c:	8812      	ldrh	r2, [r2, #0]
 800b11e:	493c      	ldr	r1, [pc, #240]	; (800b210 <USB_EPClearStall+0x150>)
 800b120:	430a      	orrs	r2, r1
 800b122:	b292      	uxth	r2, r2
 800b124:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	78db      	ldrb	r3, [r3, #3]
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d068      	beq.n	800b200 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	18d3      	adds	r3, r2, r3
 800b138:	881b      	ldrh	r3, [r3, #0]
 800b13a:	b29a      	uxth	r2, r3
 800b13c:	200c      	movs	r0, #12
 800b13e:	183b      	adds	r3, r7, r0
 800b140:	4934      	ldr	r1, [pc, #208]	; (800b214 <USB_EPClearStall+0x154>)
 800b142:	400a      	ands	r2, r1
 800b144:	801a      	strh	r2, [r3, #0]
 800b146:	183b      	adds	r3, r7, r0
 800b148:	183a      	adds	r2, r7, r0
 800b14a:	8812      	ldrh	r2, [r2, #0]
 800b14c:	2120      	movs	r1, #32
 800b14e:	404a      	eors	r2, r1
 800b150:	801a      	strh	r2, [r3, #0]
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	18d3      	adds	r3, r2, r3
 800b15c:	183a      	adds	r2, r7, r0
 800b15e:	8812      	ldrh	r2, [r2, #0]
 800b160:	492d      	ldr	r1, [pc, #180]	; (800b218 <USB_EPClearStall+0x158>)
 800b162:	430a      	orrs	r2, r1
 800b164:	b292      	uxth	r2, r2
 800b166:	801a      	strh	r2, [r3, #0]
 800b168:	e04a      	b.n	800b200 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	18d2      	adds	r2, r2, r3
 800b174:	2116      	movs	r1, #22
 800b176:	187b      	adds	r3, r7, r1
 800b178:	8812      	ldrh	r2, [r2, #0]
 800b17a:	801a      	strh	r2, [r3, #0]
 800b17c:	187b      	adds	r3, r7, r1
 800b17e:	881a      	ldrh	r2, [r3, #0]
 800b180:	2380      	movs	r3, #128	; 0x80
 800b182:	01db      	lsls	r3, r3, #7
 800b184:	4013      	ands	r3, r2
 800b186:	d016      	beq.n	800b1b6 <USB_EPClearStall+0xf6>
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	18d3      	adds	r3, r2, r3
 800b192:	881b      	ldrh	r3, [r3, #0]
 800b194:	b29a      	uxth	r2, r3
 800b196:	2014      	movs	r0, #20
 800b198:	183b      	adds	r3, r7, r0
 800b19a:	491c      	ldr	r1, [pc, #112]	; (800b20c <USB_EPClearStall+0x14c>)
 800b19c:	400a      	ands	r2, r1
 800b19e:	801a      	strh	r2, [r3, #0]
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	18d3      	adds	r3, r2, r3
 800b1aa:	183a      	adds	r2, r7, r0
 800b1ac:	8812      	ldrh	r2, [r2, #0]
 800b1ae:	491b      	ldr	r1, [pc, #108]	; (800b21c <USB_EPClearStall+0x15c>)
 800b1b0:	430a      	orrs	r2, r1
 800b1b2:	b292      	uxth	r2, r2
 800b1b4:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	18d3      	adds	r3, r2, r3
 800b1c0:	881b      	ldrh	r3, [r3, #0]
 800b1c2:	b29a      	uxth	r2, r3
 800b1c4:	2012      	movs	r0, #18
 800b1c6:	183b      	adds	r3, r7, r0
 800b1c8:	4915      	ldr	r1, [pc, #84]	; (800b220 <USB_EPClearStall+0x160>)
 800b1ca:	400a      	ands	r2, r1
 800b1cc:	801a      	strh	r2, [r3, #0]
 800b1ce:	183b      	adds	r3, r7, r0
 800b1d0:	183a      	adds	r2, r7, r0
 800b1d2:	8812      	ldrh	r2, [r2, #0]
 800b1d4:	2180      	movs	r1, #128	; 0x80
 800b1d6:	0149      	lsls	r1, r1, #5
 800b1d8:	404a      	eors	r2, r1
 800b1da:	801a      	strh	r2, [r3, #0]
 800b1dc:	183b      	adds	r3, r7, r0
 800b1de:	183a      	adds	r2, r7, r0
 800b1e0:	8812      	ldrh	r2, [r2, #0]
 800b1e2:	2180      	movs	r1, #128	; 0x80
 800b1e4:	0189      	lsls	r1, r1, #6
 800b1e6:	404a      	eors	r2, r1
 800b1e8:	801a      	strh	r2, [r3, #0]
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	781b      	ldrb	r3, [r3, #0]
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	18d3      	adds	r3, r2, r3
 800b1f4:	183a      	adds	r2, r7, r0
 800b1f6:	8812      	ldrh	r2, [r2, #0]
 800b1f8:	4907      	ldr	r1, [pc, #28]	; (800b218 <USB_EPClearStall+0x158>)
 800b1fa:	430a      	orrs	r2, r1
 800b1fc:	b292      	uxth	r2, r2
 800b1fe:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800b200:	2300      	movs	r3, #0
}
 800b202:	0018      	movs	r0, r3
 800b204:	46bd      	mov	sp, r7
 800b206:	b006      	add	sp, #24
 800b208:	bd80      	pop	{r7, pc}
 800b20a:	46c0      	nop			; (mov r8, r8)
 800b20c:	ffff8f8f 	.word	0xffff8f8f
 800b210:	ffff80c0 	.word	0xffff80c0
 800b214:	ffff8fbf 	.word	0xffff8fbf
 800b218:	ffff8080 	.word	0xffff8080
 800b21c:	ffffc080 	.word	0xffffc080
 800b220:	ffffbf8f 	.word	0xffffbf8f

0800b224 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	000a      	movs	r2, r1
 800b22e:	1cfb      	adds	r3, r7, #3
 800b230:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800b232:	1cfb      	adds	r3, r7, #3
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d103      	bne.n	800b242 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	224c      	movs	r2, #76	; 0x4c
 800b23e:	2180      	movs	r1, #128	; 0x80
 800b240:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800b242:	2300      	movs	r3, #0
}
 800b244:	0018      	movs	r0, r3
 800b246:	46bd      	mov	sp, r7
 800b248:	b002      	add	sp, #8
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2258      	movs	r2, #88	; 0x58
 800b258:	5a9b      	ldrh	r3, [r3, r2]
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	4a05      	ldr	r2, [pc, #20]	; (800b274 <USB_DevConnect+0x28>)
 800b25e:	4313      	orrs	r3, r2
 800b260:	b299      	uxth	r1, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2258      	movs	r2, #88	; 0x58
 800b266:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800b268:	2300      	movs	r3, #0
}
 800b26a:	0018      	movs	r0, r3
 800b26c:	46bd      	mov	sp, r7
 800b26e:	b002      	add	sp, #8
 800b270:	bd80      	pop	{r7, pc}
 800b272:	46c0      	nop			; (mov r8, r8)
 800b274:	ffff8000 	.word	0xffff8000

0800b278 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2244      	movs	r2, #68	; 0x44
 800b284:	5a9b      	ldrh	r3, [r3, r2]
 800b286:	b29b      	uxth	r3, r3
 800b288:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b28a:	68fb      	ldr	r3, [r7, #12]
}
 800b28c:	0018      	movs	r0, r3
 800b28e:	46bd      	mov	sp, r7
 800b290:	b004      	add	sp, #16
 800b292:	bd80      	pop	{r7, pc}

0800b294 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b08c      	sub	sp, #48	; 0x30
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	0019      	movs	r1, r3
 800b2a0:	1dbb      	adds	r3, r7, #6
 800b2a2:	801a      	strh	r2, [r3, #0]
 800b2a4:	1d3b      	adds	r3, r7, #4
 800b2a6:	1c0a      	adds	r2, r1, #0
 800b2a8:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b2aa:	1d3b      	adds	r3, r7, #4
 800b2ac:	881b      	ldrh	r3, [r3, #0]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	085b      	lsrs	r3, r3, #1
 800b2b2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b2bc:	1dbb      	adds	r3, r7, #6
 800b2be:	881a      	ldrh	r2, [r3, #0]
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	18d3      	adds	r3, r2, r3
 800b2c4:	2280      	movs	r2, #128	; 0x80
 800b2c6:	00d2      	lsls	r2, r2, #3
 800b2c8:	4694      	mov	ip, r2
 800b2ca:	4463      	add	r3, ip
 800b2cc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800b2ce:	6a3b      	ldr	r3, [r7, #32]
 800b2d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b2d2:	e01b      	b.n	800b30c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800b2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2dc:	3301      	adds	r3, #1
 800b2de:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	b29b      	uxth	r3, r3
 800b2e6:	021b      	lsls	r3, r3, #8
 800b2e8:	b29b      	uxth	r3, r3
 800b2ea:	001a      	movs	r2, r3
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	b29a      	uxth	r2, r3
 800b2f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fc:	3302      	adds	r3, #2
 800b2fe:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800b300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b302:	3301      	adds	r3, #1
 800b304:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800b306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b308:	3b01      	subs	r3, #1
 800b30a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1e0      	bne.n	800b2d4 <USB_WritePMA+0x40>
  }
}
 800b312:	46c0      	nop			; (mov r8, r8)
 800b314:	46c0      	nop			; (mov r8, r8)
 800b316:	46bd      	mov	sp, r7
 800b318:	b00c      	add	sp, #48	; 0x30
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b08a      	sub	sp, #40	; 0x28
 800b320:	af00      	add	r7, sp, #0
 800b322:	60f8      	str	r0, [r7, #12]
 800b324:	60b9      	str	r1, [r7, #8]
 800b326:	0019      	movs	r1, r3
 800b328:	1dbb      	adds	r3, r7, #6
 800b32a:	801a      	strh	r2, [r3, #0]
 800b32c:	1d3b      	adds	r3, r7, #4
 800b32e:	1c0a      	adds	r2, r1, #0
 800b330:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b332:	1d3b      	adds	r3, r7, #4
 800b334:	881b      	ldrh	r3, [r3, #0]
 800b336:	085b      	lsrs	r3, r3, #1
 800b338:	b29b      	uxth	r3, r3
 800b33a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b344:	1dbb      	adds	r3, r7, #6
 800b346:	881a      	ldrh	r2, [r3, #0]
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	18d3      	adds	r3, r2, r3
 800b34c:	2280      	movs	r2, #128	; 0x80
 800b34e:	00d2      	lsls	r2, r2, #3
 800b350:	4694      	mov	ip, r2
 800b352:	4463      	add	r3, ip
 800b354:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	627b      	str	r3, [r7, #36]	; 0x24
 800b35a:	e018      	b.n	800b38e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b35c:	6a3b      	ldr	r3, [r7, #32]
 800b35e:	881b      	ldrh	r3, [r3, #0]
 800b360:	b29b      	uxth	r3, r3
 800b362:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b364:	6a3b      	ldr	r3, [r7, #32]
 800b366:	3302      	adds	r3, #2
 800b368:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	b2da      	uxtb	r2, r3
 800b36e:	69fb      	ldr	r3, [r7, #28]
 800b370:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b372:	69fb      	ldr	r3, [r7, #28]
 800b374:	3301      	adds	r3, #1
 800b376:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	0a1b      	lsrs	r3, r3, #8
 800b37c:	b2da      	uxtb	r2, r3
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	3301      	adds	r3, #1
 800b386:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800b388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38a:	3b01      	subs	r3, #1
 800b38c:	627b      	str	r3, [r7, #36]	; 0x24
 800b38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b390:	2b00      	cmp	r3, #0
 800b392:	d1e3      	bne.n	800b35c <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800b394:	1d3b      	adds	r3, r7, #4
 800b396:	881b      	ldrh	r3, [r3, #0]
 800b398:	2201      	movs	r2, #1
 800b39a:	4013      	ands	r3, r2
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d007      	beq.n	800b3b2 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800b3a2:	6a3b      	ldr	r3, [r7, #32]
 800b3a4:	881b      	ldrh	r3, [r3, #0]
 800b3a6:	b29b      	uxth	r3, r3
 800b3a8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	b2da      	uxtb	r2, r3
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	701a      	strb	r2, [r3, #0]
  }
}
 800b3b2:	46c0      	nop			; (mov r8, r8)
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	b00a      	add	sp, #40	; 0x28
 800b3b8:	bd80      	pop	{r7, pc}

0800b3ba <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3ba:	b580      	push	{r7, lr}
 800b3bc:	b084      	sub	sp, #16
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
 800b3c2:	000a      	movs	r2, r1
 800b3c4:	1cfb      	adds	r3, r7, #3
 800b3c6:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800b3c8:	230f      	movs	r3, #15
 800b3ca:	18fb      	adds	r3, r7, r3
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	7c1b      	ldrb	r3, [r3, #16]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d116      	bne.n	800b406 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b3d8:	2380      	movs	r3, #128	; 0x80
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	2202      	movs	r2, #2
 800b3e0:	2181      	movs	r1, #129	; 0x81
 800b3e2:	f002 f8b4 	bl	800d54e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b3ec:	2380      	movs	r3, #128	; 0x80
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	2202      	movs	r2, #2
 800b3f4:	2101      	movs	r1, #1
 800b3f6:	f002 f8aa 	bl	800d54e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	23b6      	movs	r3, #182	; 0xb6
 800b3fe:	005b      	lsls	r3, r3, #1
 800b400:	2101      	movs	r1, #1
 800b402:	50d1      	str	r1, [r2, r3]
 800b404:	e013      	b.n	800b42e <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	2340      	movs	r3, #64	; 0x40
 800b40a:	2202      	movs	r2, #2
 800b40c:	2181      	movs	r1, #129	; 0x81
 800b40e:	f002 f89e 	bl	800d54e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2201      	movs	r2, #1
 800b416:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	2340      	movs	r3, #64	; 0x40
 800b41c:	2202      	movs	r2, #2
 800b41e:	2101      	movs	r1, #1
 800b420:	f002 f895 	bl	800d54e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	23b6      	movs	r3, #182	; 0xb6
 800b428:	005b      	lsls	r3, r3, #1
 800b42a:	2101      	movs	r1, #1
 800b42c:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	2308      	movs	r3, #8
 800b432:	2203      	movs	r2, #3
 800b434:	2182      	movs	r1, #130	; 0x82
 800b436:	f002 f88a 	bl	800d54e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2201      	movs	r2, #1
 800b43e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b440:	2387      	movs	r3, #135	; 0x87
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	0018      	movs	r0, r3
 800b446:	f002 fa1b 	bl	800d880 <USBD_static_malloc>
 800b44a:	0001      	movs	r1, r0
 800b44c:	687a      	ldr	r2, [r7, #4]
 800b44e:	23ae      	movs	r3, #174	; 0xae
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	23ae      	movs	r3, #174	; 0xae
 800b458:	009b      	lsls	r3, r3, #2
 800b45a:	58d3      	ldr	r3, [r2, r3]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d104      	bne.n	800b46a <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800b460:	230f      	movs	r3, #15
 800b462:	18fb      	adds	r3, r7, r3
 800b464:	2201      	movs	r2, #1
 800b466:	701a      	strb	r2, [r3, #0]
 800b468:	e02c      	b.n	800b4c4 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	23ae      	movs	r3, #174	; 0xae
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	58d3      	ldr	r3, [r2, r3]
 800b472:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	23af      	movs	r3, #175	; 0xaf
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	58d3      	ldr	r3, [r2, r3]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b480:	68ba      	ldr	r2, [r7, #8]
 800b482:	2385      	movs	r3, #133	; 0x85
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	2100      	movs	r1, #0
 800b488:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800b48a:	68ba      	ldr	r2, [r7, #8]
 800b48c:	2386      	movs	r3, #134	; 0x86
 800b48e:	009b      	lsls	r3, r3, #2
 800b490:	2100      	movs	r1, #0
 800b492:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	7c1b      	ldrb	r3, [r3, #16]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d10a      	bne.n	800b4b2 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b49c:	68ba      	ldr	r2, [r7, #8]
 800b49e:	2381      	movs	r3, #129	; 0x81
 800b4a0:	009b      	lsls	r3, r3, #2
 800b4a2:	58d2      	ldr	r2, [r2, r3]
 800b4a4:	2380      	movs	r3, #128	; 0x80
 800b4a6:	009b      	lsls	r3, r3, #2
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	2101      	movs	r1, #1
 800b4ac:	f002 f99a 	bl	800d7e4 <USBD_LL_PrepareReceive>
 800b4b0:	e008      	b.n	800b4c4 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	2381      	movs	r3, #129	; 0x81
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	58d2      	ldr	r2, [r2, r3]
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	2340      	movs	r3, #64	; 0x40
 800b4be:	2101      	movs	r1, #1
 800b4c0:	f002 f990 	bl	800d7e4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b4c4:	230f      	movs	r3, #15
 800b4c6:	18fb      	adds	r3, r7, r3
 800b4c8:	781b      	ldrb	r3, [r3, #0]
}
 800b4ca:	0018      	movs	r0, r3
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	b004      	add	sp, #16
 800b4d0:	bd80      	pop	{r7, pc}

0800b4d2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4d2:	b580      	push	{r7, lr}
 800b4d4:	b084      	sub	sp, #16
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	6078      	str	r0, [r7, #4]
 800b4da:	000a      	movs	r2, r1
 800b4dc:	1cfb      	adds	r3, r7, #3
 800b4de:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800b4e0:	230f      	movs	r3, #15
 800b4e2:	18fb      	adds	r3, r7, r3
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2181      	movs	r1, #129	; 0x81
 800b4ec:	0018      	movs	r0, r3
 800b4ee:	f002 f865 	bl	800d5bc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2101      	movs	r1, #1
 800b4fc:	0018      	movs	r0, r3
 800b4fe:	f002 f85d 	bl	800d5bc <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	23b6      	movs	r3, #182	; 0xb6
 800b506:	005b      	lsls	r3, r3, #1
 800b508:	2100      	movs	r1, #0
 800b50a:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2182      	movs	r1, #130	; 0x82
 800b510:	0018      	movs	r0, r3
 800b512:	f002 f853 	bl	800d5bc <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2200      	movs	r2, #0
 800b51a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b51c:	687a      	ldr	r2, [r7, #4]
 800b51e:	23ae      	movs	r3, #174	; 0xae
 800b520:	009b      	lsls	r3, r3, #2
 800b522:	58d3      	ldr	r3, [r2, r3]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d011      	beq.n	800b54c <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	23af      	movs	r3, #175	; 0xaf
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	58d3      	ldr	r3, [r2, r3]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	23ae      	movs	r3, #174	; 0xae
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	58d3      	ldr	r3, [r2, r3]
 800b53c:	0018      	movs	r0, r3
 800b53e:	f002 f9ab 	bl	800d898 <USBD_static_free>
    pdev->pClassData = NULL;
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	23ae      	movs	r3, #174	; 0xae
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	2100      	movs	r1, #0
 800b54a:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800b54c:	230f      	movs	r3, #15
 800b54e:	18fb      	adds	r3, r7, r3
 800b550:	781b      	ldrb	r3, [r3, #0]
}
 800b552:	0018      	movs	r0, r3
 800b554:	46bd      	mov	sp, r7
 800b556:	b004      	add	sp, #16
 800b558:	bd80      	pop	{r7, pc}
	...

0800b55c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b086      	sub	sp, #24
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	23ae      	movs	r3, #174	; 0xae
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	58d3      	ldr	r3, [r2, r3]
 800b56e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b570:	230f      	movs	r3, #15
 800b572:	18fb      	adds	r3, r7, r3
 800b574:	2200      	movs	r2, #0
 800b576:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800b578:	230c      	movs	r3, #12
 800b57a:	18fb      	adds	r3, r7, r3
 800b57c:	2200      	movs	r2, #0
 800b57e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800b580:	2317      	movs	r3, #23
 800b582:	18fb      	adds	r3, r7, r3
 800b584:	2200      	movs	r2, #0
 800b586:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	001a      	movs	r2, r3
 800b58e:	2360      	movs	r3, #96	; 0x60
 800b590:	4013      	ands	r3, r2
 800b592:	d03d      	beq.n	800b610 <USBD_CDC_Setup+0xb4>
 800b594:	2b20      	cmp	r3, #32
 800b596:	d000      	beq.n	800b59a <USBD_CDC_Setup+0x3e>
 800b598:	e094      	b.n	800b6c4 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	88db      	ldrh	r3, [r3, #6]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d02b      	beq.n	800b5fa <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	b25b      	sxtb	r3, r3
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	da12      	bge.n	800b5d2 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b5ac:	687a      	ldr	r2, [r7, #4]
 800b5ae:	23af      	movs	r3, #175	; 0xaf
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	58d3      	ldr	r3, [r2, r3]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	683a      	ldr	r2, [r7, #0]
 800b5b8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b5ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b5bc:	683a      	ldr	r2, [r7, #0]
 800b5be:	88d2      	ldrh	r2, [r2, #6]
 800b5c0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b5c2:	6939      	ldr	r1, [r7, #16]
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	88da      	ldrh	r2, [r3, #6]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	0018      	movs	r0, r3
 800b5cc:	f001 fbb2 	bl	800cd34 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b5d0:	e083      	b.n	800b6da <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	7859      	ldrb	r1, [r3, #1]
 800b5d6:	693a      	ldr	r2, [r7, #16]
 800b5d8:	2380      	movs	r3, #128	; 0x80
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	88db      	ldrh	r3, [r3, #6]
 800b5e2:	b2d9      	uxtb	r1, r3
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	4a40      	ldr	r2, [pc, #256]	; (800b6e8 <USBD_CDC_Setup+0x18c>)
 800b5e8:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b5ea:	6939      	ldr	r1, [r7, #16]
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	88da      	ldrh	r2, [r3, #6]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	0018      	movs	r0, r3
 800b5f4:	f001 fbd1 	bl	800cd9a <USBD_CtlPrepareRx>
      break;
 800b5f8:	e06f      	b.n	800b6da <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	23af      	movs	r3, #175	; 0xaf
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	58d3      	ldr	r3, [r2, r3]
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	683a      	ldr	r2, [r7, #0]
 800b606:	7850      	ldrb	r0, [r2, #1]
 800b608:	6839      	ldr	r1, [r7, #0]
 800b60a:	2200      	movs	r2, #0
 800b60c:	4798      	blx	r3
      break;
 800b60e:	e064      	b.n	800b6da <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	785b      	ldrb	r3, [r3, #1]
 800b614:	2b0b      	cmp	r3, #11
 800b616:	d037      	beq.n	800b688 <USBD_CDC_Setup+0x12c>
 800b618:	dc47      	bgt.n	800b6aa <USBD_CDC_Setup+0x14e>
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d002      	beq.n	800b624 <USBD_CDC_Setup+0xc8>
 800b61e:	2b0a      	cmp	r3, #10
 800b620:	d019      	beq.n	800b656 <USBD_CDC_Setup+0xfa>
 800b622:	e042      	b.n	800b6aa <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	23a7      	movs	r3, #167	; 0xa7
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	5cd3      	ldrb	r3, [r2, r3]
 800b62c:	2b03      	cmp	r3, #3
 800b62e:	d107      	bne.n	800b640 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b630:	230c      	movs	r3, #12
 800b632:	18f9      	adds	r1, r7, r3
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2202      	movs	r2, #2
 800b638:	0018      	movs	r0, r3
 800b63a:	f001 fb7b 	bl	800cd34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b63e:	e040      	b.n	800b6c2 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800b640:	683a      	ldr	r2, [r7, #0]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	0011      	movs	r1, r2
 800b646:	0018      	movs	r0, r3
 800b648:	f001 faf6 	bl	800cc38 <USBD_CtlError>
            ret = USBD_FAIL;
 800b64c:	2317      	movs	r3, #23
 800b64e:	18fb      	adds	r3, r7, r3
 800b650:	2202      	movs	r2, #2
 800b652:	701a      	strb	r2, [r3, #0]
          break;
 800b654:	e035      	b.n	800b6c2 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	23a7      	movs	r3, #167	; 0xa7
 800b65a:	009b      	lsls	r3, r3, #2
 800b65c:	5cd3      	ldrb	r3, [r2, r3]
 800b65e:	2b03      	cmp	r3, #3
 800b660:	d107      	bne.n	800b672 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b662:	230f      	movs	r3, #15
 800b664:	18f9      	adds	r1, r7, r3
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2201      	movs	r2, #1
 800b66a:	0018      	movs	r0, r3
 800b66c:	f001 fb62 	bl	800cd34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b670:	e027      	b.n	800b6c2 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800b672:	683a      	ldr	r2, [r7, #0]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	0011      	movs	r1, r2
 800b678:	0018      	movs	r0, r3
 800b67a:	f001 fadd 	bl	800cc38 <USBD_CtlError>
            ret = USBD_FAIL;
 800b67e:	2317      	movs	r3, #23
 800b680:	18fb      	adds	r3, r7, r3
 800b682:	2202      	movs	r2, #2
 800b684:	701a      	strb	r2, [r3, #0]
          break;
 800b686:	e01c      	b.n	800b6c2 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	23a7      	movs	r3, #167	; 0xa7
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	5cd3      	ldrb	r3, [r2, r3]
 800b690:	2b03      	cmp	r3, #3
 800b692:	d015      	beq.n	800b6c0 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800b694:	683a      	ldr	r2, [r7, #0]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	0011      	movs	r1, r2
 800b69a:	0018      	movs	r0, r3
 800b69c:	f001 facc 	bl	800cc38 <USBD_CtlError>
            ret = USBD_FAIL;
 800b6a0:	2317      	movs	r3, #23
 800b6a2:	18fb      	adds	r3, r7, r3
 800b6a4:	2202      	movs	r2, #2
 800b6a6:	701a      	strb	r2, [r3, #0]
          }
          break;
 800b6a8:	e00a      	b.n	800b6c0 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800b6aa:	683a      	ldr	r2, [r7, #0]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	0011      	movs	r1, r2
 800b6b0:	0018      	movs	r0, r3
 800b6b2:	f001 fac1 	bl	800cc38 <USBD_CtlError>
          ret = USBD_FAIL;
 800b6b6:	2317      	movs	r3, #23
 800b6b8:	18fb      	adds	r3, r7, r3
 800b6ba:	2202      	movs	r2, #2
 800b6bc:	701a      	strb	r2, [r3, #0]
          break;
 800b6be:	e000      	b.n	800b6c2 <USBD_CDC_Setup+0x166>
          break;
 800b6c0:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b6c2:	e00a      	b.n	800b6da <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800b6c4:	683a      	ldr	r2, [r7, #0]
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	0011      	movs	r1, r2
 800b6ca:	0018      	movs	r0, r3
 800b6cc:	f001 fab4 	bl	800cc38 <USBD_CtlError>
      ret = USBD_FAIL;
 800b6d0:	2317      	movs	r3, #23
 800b6d2:	18fb      	adds	r3, r7, r3
 800b6d4:	2202      	movs	r2, #2
 800b6d6:	701a      	strb	r2, [r3, #0]
      break;
 800b6d8:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800b6da:	2317      	movs	r3, #23
 800b6dc:	18fb      	adds	r3, r7, r3
 800b6de:	781b      	ldrb	r3, [r3, #0]
}
 800b6e0:	0018      	movs	r0, r3
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	b006      	add	sp, #24
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	00000201 	.word	0x00000201

0800b6ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	000a      	movs	r2, r1
 800b6f6:	1cfb      	adds	r3, r7, #3
 800b6f8:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b6fa:	687a      	ldr	r2, [r7, #4]
 800b6fc:	23ae      	movs	r3, #174	; 0xae
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	58d3      	ldr	r3, [r2, r3]
 800b702:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b704:	687a      	ldr	r2, [r7, #4]
 800b706:	23b0      	movs	r3, #176	; 0xb0
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	58d3      	ldr	r3, [r2, r3]
 800b70c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	23ae      	movs	r3, #174	; 0xae
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	58d3      	ldr	r3, [r2, r3]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d03e      	beq.n	800b798 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b71a:	1cfb      	adds	r3, r7, #3
 800b71c:	781a      	ldrb	r2, [r3, #0]
 800b71e:	6879      	ldr	r1, [r7, #4]
 800b720:	0013      	movs	r3, r2
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	189b      	adds	r3, r3, r2
 800b726:	009b      	lsls	r3, r3, #2
 800b728:	18cb      	adds	r3, r1, r3
 800b72a:	331c      	adds	r3, #28
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d02b      	beq.n	800b78a <USBD_CDC_DataIn+0x9e>
 800b732:	1cfb      	adds	r3, r7, #3
 800b734:	781a      	ldrb	r2, [r3, #0]
 800b736:	6879      	ldr	r1, [r7, #4]
 800b738:	0013      	movs	r3, r2
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	189b      	adds	r3, r3, r2
 800b73e:	009b      	lsls	r3, r3, #2
 800b740:	18cb      	adds	r3, r1, r3
 800b742:	331c      	adds	r3, #28
 800b744:	6818      	ldr	r0, [r3, #0]
 800b746:	1cfb      	adds	r3, r7, #3
 800b748:	781a      	ldrb	r2, [r3, #0]
 800b74a:	68b9      	ldr	r1, [r7, #8]
 800b74c:	0013      	movs	r3, r2
 800b74e:	009b      	lsls	r3, r3, #2
 800b750:	189b      	adds	r3, r3, r2
 800b752:	00db      	lsls	r3, r3, #3
 800b754:	18cb      	adds	r3, r1, r3
 800b756:	3338      	adds	r3, #56	; 0x38
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	0019      	movs	r1, r3
 800b75c:	f7f4 fd6c 	bl	8000238 <__aeabi_uidivmod>
 800b760:	1e0b      	subs	r3, r1, #0
 800b762:	d112      	bne.n	800b78a <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b764:	1cfb      	adds	r3, r7, #3
 800b766:	781a      	ldrb	r2, [r3, #0]
 800b768:	6879      	ldr	r1, [r7, #4]
 800b76a:	0013      	movs	r3, r2
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	189b      	adds	r3, r3, r2
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	18cb      	adds	r3, r1, r3
 800b774:	331c      	adds	r3, #28
 800b776:	2200      	movs	r2, #0
 800b778:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b77a:	1cfb      	adds	r3, r7, #3
 800b77c:	7819      	ldrb	r1, [r3, #0]
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	2300      	movs	r3, #0
 800b782:	2200      	movs	r2, #0
 800b784:	f001 fff7 	bl	800d776 <USBD_LL_Transmit>
 800b788:	e004      	b.n	800b794 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800b78a:	68fa      	ldr	r2, [r7, #12]
 800b78c:	2385      	movs	r3, #133	; 0x85
 800b78e:	009b      	lsls	r3, r3, #2
 800b790:	2100      	movs	r1, #0
 800b792:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800b794:	2300      	movs	r3, #0
 800b796:	e000      	b.n	800b79a <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800b798:	2302      	movs	r3, #2
  }
}
 800b79a:	0018      	movs	r0, r3
 800b79c:	46bd      	mov	sp, r7
 800b79e:	b004      	add	sp, #16
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b084      	sub	sp, #16
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
 800b7aa:	000a      	movs	r2, r1
 800b7ac:	1cfb      	adds	r3, r7, #3
 800b7ae:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	23ae      	movs	r3, #174	; 0xae
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	58d3      	ldr	r3, [r2, r3]
 800b7b8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b7ba:	1cfb      	adds	r3, r7, #3
 800b7bc:	781a      	ldrb	r2, [r3, #0]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	0011      	movs	r1, r2
 800b7c2:	0018      	movs	r0, r3
 800b7c4:	f002 f845 	bl	800d852 <USBD_LL_GetRxDataSize>
 800b7c8:	0001      	movs	r1, r0
 800b7ca:	68fa      	ldr	r2, [r7, #12]
 800b7cc:	2383      	movs	r3, #131	; 0x83
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	23ae      	movs	r3, #174	; 0xae
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	58d3      	ldr	r3, [r2, r3]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d011      	beq.n	800b802 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b7de:	687a      	ldr	r2, [r7, #4]
 800b7e0:	23af      	movs	r3, #175	; 0xaf
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	58d3      	ldr	r3, [r2, r3]
 800b7e6:	68da      	ldr	r2, [r3, #12]
 800b7e8:	68f9      	ldr	r1, [r7, #12]
 800b7ea:	2381      	movs	r3, #129	; 0x81
 800b7ec:	009b      	lsls	r3, r3, #2
 800b7ee:	58c8      	ldr	r0, [r1, r3]
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2183      	movs	r1, #131	; 0x83
 800b7f4:	0089      	lsls	r1, r1, #2
 800b7f6:	468c      	mov	ip, r1
 800b7f8:	4463      	add	r3, ip
 800b7fa:	0019      	movs	r1, r3
 800b7fc:	4790      	blx	r2

    return USBD_OK;
 800b7fe:	2300      	movs	r3, #0
 800b800:	e000      	b.n	800b804 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800b802:	2302      	movs	r3, #2
  }
}
 800b804:	0018      	movs	r0, r3
 800b806:	46bd      	mov	sp, r7
 800b808:	b004      	add	sp, #16
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b80c:	b590      	push	{r4, r7, lr}
 800b80e:	b085      	sub	sp, #20
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	23ae      	movs	r3, #174	; 0xae
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	58d3      	ldr	r3, [r2, r3]
 800b81c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	23af      	movs	r3, #175	; 0xaf
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	58d3      	ldr	r3, [r2, r3]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d019      	beq.n	800b85e <USBD_CDC_EP0_RxReady+0x52>
 800b82a:	68fa      	ldr	r2, [r7, #12]
 800b82c:	2380      	movs	r3, #128	; 0x80
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	5cd3      	ldrb	r3, [r2, r3]
 800b832:	2bff      	cmp	r3, #255	; 0xff
 800b834:	d013      	beq.n	800b85e <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	23af      	movs	r3, #175	; 0xaf
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	58d3      	ldr	r3, [r2, r3]
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	68f9      	ldr	r1, [r7, #12]
 800b842:	2280      	movs	r2, #128	; 0x80
 800b844:	0092      	lsls	r2, r2, #2
 800b846:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800b848:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b84a:	68fa      	ldr	r2, [r7, #12]
 800b84c:	4c06      	ldr	r4, [pc, #24]	; (800b868 <USBD_CDC_EP0_RxReady+0x5c>)
 800b84e:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b850:	b292      	uxth	r2, r2
 800b852:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b854:	68fa      	ldr	r2, [r7, #12]
 800b856:	2380      	movs	r3, #128	; 0x80
 800b858:	009b      	lsls	r3, r3, #2
 800b85a:	21ff      	movs	r1, #255	; 0xff
 800b85c:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800b85e:	2300      	movs	r3, #0
}
 800b860:	0018      	movs	r0, r3
 800b862:	46bd      	mov	sp, r7
 800b864:	b005      	add	sp, #20
 800b866:	bd90      	pop	{r4, r7, pc}
 800b868:	00000201 	.word	0x00000201

0800b86c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2243      	movs	r2, #67	; 0x43
 800b878:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b87a:	4b02      	ldr	r3, [pc, #8]	; (800b884 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800b87c:	0018      	movs	r0, r3
 800b87e:	46bd      	mov	sp, r7
 800b880:	b002      	add	sp, #8
 800b882:	bd80      	pop	{r7, pc}
 800b884:	20000094 	.word	0x20000094

0800b888 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2243      	movs	r2, #67	; 0x43
 800b894:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b896:	4b02      	ldr	r3, [pc, #8]	; (800b8a0 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800b898:	0018      	movs	r0, r3
 800b89a:	46bd      	mov	sp, r7
 800b89c:	b002      	add	sp, #8
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	20000050 	.word	0x20000050

0800b8a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b082      	sub	sp, #8
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2243      	movs	r2, #67	; 0x43
 800b8b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b8b2:	4b02      	ldr	r3, [pc, #8]	; (800b8bc <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800b8b4:	0018      	movs	r0, r3
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	b002      	add	sp, #8
 800b8ba:	bd80      	pop	{r7, pc}
 800b8bc:	200000d8 	.word	0x200000d8

0800b8c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b082      	sub	sp, #8
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	220a      	movs	r2, #10
 800b8cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b8ce:	4b02      	ldr	r3, [pc, #8]	; (800b8d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800b8d0:	0018      	movs	r0, r3
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	b002      	add	sp, #8
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	2000000c 	.word	0x2000000c

0800b8dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b8e6:	200f      	movs	r0, #15
 800b8e8:	183b      	adds	r3, r7, r0
 800b8ea:	2202      	movs	r2, #2
 800b8ec:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d007      	beq.n	800b904 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800b8f4:	687a      	ldr	r2, [r7, #4]
 800b8f6:	23af      	movs	r3, #175	; 0xaf
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	6839      	ldr	r1, [r7, #0]
 800b8fc:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800b8fe:	183b      	adds	r3, r7, r0
 800b900:	2200      	movs	r2, #0
 800b902:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800b904:	230f      	movs	r3, #15
 800b906:	18fb      	adds	r3, r7, r3
 800b908:	781b      	ldrb	r3, [r3, #0]
}
 800b90a:	0018      	movs	r0, r3
 800b90c:	46bd      	mov	sp, r7
 800b90e:	b004      	add	sp, #16
 800b910:	bd80      	pop	{r7, pc}

0800b912 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b912:	b580      	push	{r7, lr}
 800b914:	b086      	sub	sp, #24
 800b916:	af00      	add	r7, sp, #0
 800b918:	60f8      	str	r0, [r7, #12]
 800b91a:	60b9      	str	r1, [r7, #8]
 800b91c:	1dbb      	adds	r3, r7, #6
 800b91e:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b920:	68fa      	ldr	r2, [r7, #12]
 800b922:	23ae      	movs	r3, #174	; 0xae
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	58d3      	ldr	r3, [r2, r3]
 800b928:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b92a:	697a      	ldr	r2, [r7, #20]
 800b92c:	2382      	movs	r3, #130	; 0x82
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	68b9      	ldr	r1, [r7, #8]
 800b932:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800b934:	1dbb      	adds	r3, r7, #6
 800b936:	8819      	ldrh	r1, [r3, #0]
 800b938:	697a      	ldr	r2, [r7, #20]
 800b93a:	2384      	movs	r3, #132	; 0x84
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800b940:	2300      	movs	r3, #0
}
 800b942:	0018      	movs	r0, r3
 800b944:	46bd      	mov	sp, r7
 800b946:	b006      	add	sp, #24
 800b948:	bd80      	pop	{r7, pc}

0800b94a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b084      	sub	sp, #16
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
 800b952:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	23ae      	movs	r3, #174	; 0xae
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	58d3      	ldr	r3, [r2, r3]
 800b95c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	2381      	movs	r3, #129	; 0x81
 800b962:	009b      	lsls	r3, r3, #2
 800b964:	6839      	ldr	r1, [r7, #0]
 800b966:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800b968:	2300      	movs	r3, #0
}
 800b96a:	0018      	movs	r0, r3
 800b96c:	46bd      	mov	sp, r7
 800b96e:	b004      	add	sp, #16
 800b970:	bd80      	pop	{r7, pc}

0800b972 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b972:	b580      	push	{r7, lr}
 800b974:	b084      	sub	sp, #16
 800b976:	af00      	add	r7, sp, #0
 800b978:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b97a:	687a      	ldr	r2, [r7, #4]
 800b97c:	23ae      	movs	r3, #174	; 0xae
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	58d3      	ldr	r3, [r2, r3]
 800b982:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	23ae      	movs	r3, #174	; 0xae
 800b988:	009b      	lsls	r3, r3, #2
 800b98a:	58d3      	ldr	r3, [r2, r3]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d022      	beq.n	800b9d6 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	2385      	movs	r3, #133	; 0x85
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	58d3      	ldr	r3, [r2, r3]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d11a      	bne.n	800b9d2 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b99c:	68fa      	ldr	r2, [r7, #12]
 800b99e:	2385      	movs	r3, #133	; 0x85
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	2101      	movs	r1, #1
 800b9a4:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b9a6:	68fa      	ldr	r2, [r7, #12]
 800b9a8:	2384      	movs	r3, #132	; 0x84
 800b9aa:	009b      	lsls	r3, r3, #2
 800b9ac:	58d2      	ldr	r2, [r2, r3]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b9b2:	68fa      	ldr	r2, [r7, #12]
 800b9b4:	2382      	movs	r3, #130	; 0x82
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800b9ba:	68fa      	ldr	r2, [r7, #12]
 800b9bc:	2384      	movs	r3, #132	; 0x84
 800b9be:	009b      	lsls	r3, r3, #2
 800b9c0:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	000a      	movs	r2, r1
 800b9c8:	2181      	movs	r1, #129	; 0x81
 800b9ca:	f001 fed4 	bl	800d776 <USBD_LL_Transmit>

      return USBD_OK;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	e002      	b.n	800b9d8 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	e000      	b.n	800b9d8 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800b9d6:	2302      	movs	r3, #2
  }
}
 800b9d8:	0018      	movs	r0, r3
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	b004      	add	sp, #16
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	23ae      	movs	r3, #174	; 0xae
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	58d3      	ldr	r3, [r2, r3]
 800b9f0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b9f2:	687a      	ldr	r2, [r7, #4]
 800b9f4:	23ae      	movs	r3, #174	; 0xae
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	58d3      	ldr	r3, [r2, r3]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d019      	beq.n	800ba32 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	7c1b      	ldrb	r3, [r3, #16]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d10a      	bne.n	800ba1c <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ba06:	68fa      	ldr	r2, [r7, #12]
 800ba08:	2381      	movs	r3, #129	; 0x81
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	58d2      	ldr	r2, [r2, r3]
 800ba0e:	2380      	movs	r3, #128	; 0x80
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	2101      	movs	r1, #1
 800ba16:	f001 fee5 	bl	800d7e4 <USBD_LL_PrepareReceive>
 800ba1a:	e008      	b.n	800ba2e <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ba1c:	68fa      	ldr	r2, [r7, #12]
 800ba1e:	2381      	movs	r3, #129	; 0x81
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	58d2      	ldr	r2, [r2, r3]
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	2340      	movs	r3, #64	; 0x40
 800ba28:	2101      	movs	r1, #1
 800ba2a:	f001 fedb 	bl	800d7e4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	e000      	b.n	800ba34 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800ba32:	2302      	movs	r3, #2
  }
}
 800ba34:	0018      	movs	r0, r3
 800ba36:	46bd      	mov	sp, r7
 800ba38:	b004      	add	sp, #16
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	60f8      	str	r0, [r7, #12]
 800ba44:	60b9      	str	r1, [r7, #8]
 800ba46:	1dfb      	adds	r3, r7, #7
 800ba48:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d101      	bne.n	800ba54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800ba50:	2302      	movs	r3, #2
 800ba52:	e020      	b.n	800ba96 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800ba54:	68fa      	ldr	r2, [r7, #12]
 800ba56:	23ad      	movs	r3, #173	; 0xad
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	58d3      	ldr	r3, [r2, r3]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d004      	beq.n	800ba6a <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	23ad      	movs	r3, #173	; 0xad
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	2100      	movs	r1, #0
 800ba68:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d004      	beq.n	800ba7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ba70:	68fa      	ldr	r2, [r7, #12]
 800ba72:	23ac      	movs	r3, #172	; 0xac
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	68b9      	ldr	r1, [r7, #8]
 800ba78:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba7a:	68fa      	ldr	r2, [r7, #12]
 800ba7c:	23a7      	movs	r3, #167	; 0xa7
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	2101      	movs	r1, #1
 800ba82:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	1dfa      	adds	r2, r7, #7
 800ba88:	7812      	ldrb	r2, [r2, #0]
 800ba8a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	0018      	movs	r0, r3
 800ba90:	f001 fcd4 	bl	800d43c <USBD_LL_Init>

  return USBD_OK;
 800ba94:	2300      	movs	r3, #0
}
 800ba96:	0018      	movs	r0, r3
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	b004      	add	sp, #16
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b084      	sub	sp, #16
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
 800baa6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800baa8:	200f      	movs	r0, #15
 800baaa:	183b      	adds	r3, r7, r0
 800baac:	2200      	movs	r2, #0
 800baae:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d008      	beq.n	800bac8 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	23ad      	movs	r3, #173	; 0xad
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	6839      	ldr	r1, [r7, #0]
 800babe:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800bac0:	183b      	adds	r3, r7, r0
 800bac2:	2200      	movs	r2, #0
 800bac4:	701a      	strb	r2, [r3, #0]
 800bac6:	e003      	b.n	800bad0 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800bac8:	230f      	movs	r3, #15
 800baca:	18fb      	adds	r3, r7, r3
 800bacc:	2202      	movs	r2, #2
 800bace:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800bad0:	230f      	movs	r3, #15
 800bad2:	18fb      	adds	r3, r7, r3
 800bad4:	781b      	ldrb	r3, [r3, #0]
}
 800bad6:	0018      	movs	r0, r3
 800bad8:	46bd      	mov	sp, r7
 800bada:	b004      	add	sp, #16
 800badc:	bd80      	pop	{r7, pc}

0800bade <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b082      	sub	sp, #8
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	0018      	movs	r0, r3
 800baea:	f001 fd0b 	bl	800d504 <USBD_LL_Start>

  return USBD_OK;
 800baee:	2300      	movs	r3, #0
}
 800baf0:	0018      	movs	r0, r3
 800baf2:	46bd      	mov	sp, r7
 800baf4:	b002      	add	sp, #8
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	0018      	movs	r0, r3
 800bb04:	46bd      	mov	sp, r7
 800bb06:	b002      	add	sp, #8
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bb0a:	b590      	push	{r4, r7, lr}
 800bb0c:	b085      	sub	sp, #20
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
 800bb12:	000a      	movs	r2, r1
 800bb14:	1cfb      	adds	r3, r7, #3
 800bb16:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bb18:	240f      	movs	r4, #15
 800bb1a:	193b      	adds	r3, r7, r4
 800bb1c:	2202      	movs	r2, #2
 800bb1e:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	23ad      	movs	r3, #173	; 0xad
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	58d3      	ldr	r3, [r2, r3]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d00e      	beq.n	800bb4a <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	23ad      	movs	r3, #173	; 0xad
 800bb30:	009b      	lsls	r3, r3, #2
 800bb32:	58d3      	ldr	r3, [r2, r3]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	1cfa      	adds	r2, r7, #3
 800bb38:	7811      	ldrb	r1, [r2, #0]
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	0010      	movs	r0, r2
 800bb3e:	4798      	blx	r3
 800bb40:	1e03      	subs	r3, r0, #0
 800bb42:	d102      	bne.n	800bb4a <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800bb44:	193b      	adds	r3, r7, r4
 800bb46:	2200      	movs	r2, #0
 800bb48:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800bb4a:	230f      	movs	r3, #15
 800bb4c:	18fb      	adds	r3, r7, r3
 800bb4e:	781b      	ldrb	r3, [r3, #0]
}
 800bb50:	0018      	movs	r0, r3
 800bb52:	46bd      	mov	sp, r7
 800bb54:	b005      	add	sp, #20
 800bb56:	bd90      	pop	{r4, r7, pc}

0800bb58 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	000a      	movs	r2, r1
 800bb62:	1cfb      	adds	r3, r7, #3
 800bb64:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	23ad      	movs	r3, #173	; 0xad
 800bb6a:	009b      	lsls	r3, r3, #2
 800bb6c:	58d3      	ldr	r3, [r2, r3]
 800bb6e:	685b      	ldr	r3, [r3, #4]
 800bb70:	1cfa      	adds	r2, r7, #3
 800bb72:	7811      	ldrb	r1, [r2, #0]
 800bb74:	687a      	ldr	r2, [r7, #4]
 800bb76:	0010      	movs	r0, r2
 800bb78:	4798      	blx	r3

  return USBD_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	0018      	movs	r0, r3
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	b002      	add	sp, #8
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	22aa      	movs	r2, #170	; 0xaa
 800bb92:	0092      	lsls	r2, r2, #2
 800bb94:	4694      	mov	ip, r2
 800bb96:	4463      	add	r3, ip
 800bb98:	683a      	ldr	r2, [r7, #0]
 800bb9a:	0011      	movs	r1, r2
 800bb9c:	0018      	movs	r0, r3
 800bb9e:	f001 f810 	bl	800cbc2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	23a5      	movs	r3, #165	; 0xa5
 800bba6:	009b      	lsls	r3, r3, #2
 800bba8:	2101      	movs	r1, #1
 800bbaa:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	4a23      	ldr	r2, [pc, #140]	; (800bc3c <USBD_LL_SetupStage+0xb8>)
 800bbb0:	5a9b      	ldrh	r3, [r3, r2]
 800bbb2:	0019      	movs	r1, r3
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	23a6      	movs	r3, #166	; 0xa6
 800bbb8:	009b      	lsls	r3, r3, #2
 800bbba:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800bbbc:	687a      	ldr	r2, [r7, #4]
 800bbbe:	23aa      	movs	r3, #170	; 0xaa
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	5cd3      	ldrb	r3, [r2, r3]
 800bbc4:	001a      	movs	r2, r3
 800bbc6:	231f      	movs	r3, #31
 800bbc8:	4013      	ands	r3, r2
 800bbca:	2b02      	cmp	r3, #2
 800bbcc:	d019      	beq.n	800bc02 <USBD_LL_SetupStage+0x7e>
 800bbce:	d822      	bhi.n	800bc16 <USBD_LL_SetupStage+0x92>
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d002      	beq.n	800bbda <USBD_LL_SetupStage+0x56>
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d00a      	beq.n	800bbee <USBD_LL_SetupStage+0x6a>
 800bbd8:	e01d      	b.n	800bc16 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	22aa      	movs	r2, #170	; 0xaa
 800bbde:	0092      	lsls	r2, r2, #2
 800bbe0:	189a      	adds	r2, r3, r2
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	0011      	movs	r1, r2
 800bbe6:	0018      	movs	r0, r3
 800bbe8:	f000 fa10 	bl	800c00c <USBD_StdDevReq>
      break;
 800bbec:	e020      	b.n	800bc30 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	22aa      	movs	r2, #170	; 0xaa
 800bbf2:	0092      	lsls	r2, r2, #2
 800bbf4:	189a      	adds	r2, r3, r2
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	0011      	movs	r1, r2
 800bbfa:	0018      	movs	r0, r3
 800bbfc:	f000 fa78 	bl	800c0f0 <USBD_StdItfReq>
      break;
 800bc00:	e016      	b.n	800bc30 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	22aa      	movs	r2, #170	; 0xaa
 800bc06:	0092      	lsls	r2, r2, #2
 800bc08:	189a      	adds	r2, r3, r2
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	0011      	movs	r1, r2
 800bc0e:	0018      	movs	r0, r3
 800bc10:	f000 fac5 	bl	800c19e <USBD_StdEPReq>
      break;
 800bc14:	e00c      	b.n	800bc30 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	23aa      	movs	r3, #170	; 0xaa
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	5cd3      	ldrb	r3, [r2, r3]
 800bc1e:	227f      	movs	r2, #127	; 0x7f
 800bc20:	4393      	bics	r3, r2
 800bc22:	b2da      	uxtb	r2, r3
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	0011      	movs	r1, r2
 800bc28:	0018      	movs	r0, r3
 800bc2a:	f001 fcf2 	bl	800d612 <USBD_LL_StallEP>
      break;
 800bc2e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	0018      	movs	r0, r3
 800bc34:	46bd      	mov	sp, r7
 800bc36:	b002      	add	sp, #8
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	46c0      	nop			; (mov r8, r8)
 800bc3c:	000002ae 	.word	0x000002ae

0800bc40 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b086      	sub	sp, #24
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	607a      	str	r2, [r7, #4]
 800bc4a:	200b      	movs	r0, #11
 800bc4c:	183b      	adds	r3, r7, r0
 800bc4e:	1c0a      	adds	r2, r1, #0
 800bc50:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bc52:	183b      	adds	r3, r7, r0
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d154      	bne.n	800bd04 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	3355      	adds	r3, #85	; 0x55
 800bc5e:	33ff      	adds	r3, #255	; 0xff
 800bc60:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	23a5      	movs	r3, #165	; 0xa5
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	58d3      	ldr	r3, [r2, r3]
 800bc6a:	2b03      	cmp	r3, #3
 800bc6c:	d139      	bne.n	800bce2 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	68da      	ldr	r2, [r3, #12]
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	691b      	ldr	r3, [r3, #16]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d919      	bls.n	800bcae <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	68da      	ldr	r2, [r3, #12]
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	691b      	ldr	r3, [r3, #16]
 800bc82:	1ad2      	subs	r2, r2, r3
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	68da      	ldr	r2, [r3, #12]
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d203      	bcs.n	800bc9c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	e002      	b.n	800bca2 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	6879      	ldr	r1, [r7, #4]
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	001a      	movs	r2, r3
 800bca8:	f001 f89b 	bl	800cde2 <USBD_CtlContinueRx>
 800bcac:	e045      	b.n	800bd3a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	23ad      	movs	r3, #173	; 0xad
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	58d3      	ldr	r3, [r2, r3]
 800bcb6:	691b      	ldr	r3, [r3, #16]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d00d      	beq.n	800bcd8 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	23a7      	movs	r3, #167	; 0xa7
 800bcc0:	009b      	lsls	r3, r3, #2
 800bcc2:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bcc4:	2b03      	cmp	r3, #3
 800bcc6:	d107      	bne.n	800bcd8 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bcc8:	68fa      	ldr	r2, [r7, #12]
 800bcca:	23ad      	movs	r3, #173	; 0xad
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	58d3      	ldr	r3, [r2, r3]
 800bcd0:	691b      	ldr	r3, [r3, #16]
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	0010      	movs	r0, r2
 800bcd6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	0018      	movs	r0, r3
 800bcdc:	f001 f894 	bl	800ce08 <USBD_CtlSendStatus>
 800bce0:	e02b      	b.n	800bd3a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	23a5      	movs	r3, #165	; 0xa5
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	58d3      	ldr	r3, [r2, r3]
 800bcea:	2b05      	cmp	r3, #5
 800bcec:	d125      	bne.n	800bd3a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bcee:	68fa      	ldr	r2, [r7, #12]
 800bcf0:	23a5      	movs	r3, #165	; 0xa5
 800bcf2:	009b      	lsls	r3, r3, #2
 800bcf4:	2100      	movs	r1, #0
 800bcf6:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2100      	movs	r1, #0
 800bcfc:	0018      	movs	r0, r3
 800bcfe:	f001 fc88 	bl	800d612 <USBD_LL_StallEP>
 800bd02:	e01a      	b.n	800bd3a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	23ad      	movs	r3, #173	; 0xad
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	58d3      	ldr	r3, [r2, r3]
 800bd0c:	699b      	ldr	r3, [r3, #24]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d011      	beq.n	800bd36 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd12:	68fa      	ldr	r2, [r7, #12]
 800bd14:	23a7      	movs	r3, #167	; 0xa7
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800bd1a:	2b03      	cmp	r3, #3
 800bd1c:	d10b      	bne.n	800bd36 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	23ad      	movs	r3, #173	; 0xad
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	58d3      	ldr	r3, [r2, r3]
 800bd26:	699b      	ldr	r3, [r3, #24]
 800bd28:	220b      	movs	r2, #11
 800bd2a:	18ba      	adds	r2, r7, r2
 800bd2c:	7811      	ldrb	r1, [r2, #0]
 800bd2e:	68fa      	ldr	r2, [r7, #12]
 800bd30:	0010      	movs	r0, r2
 800bd32:	4798      	blx	r3
 800bd34:	e001      	b.n	800bd3a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bd36:	2302      	movs	r3, #2
 800bd38:	e000      	b.n	800bd3c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800bd3a:	2300      	movs	r3, #0
}
 800bd3c:	0018      	movs	r0, r3
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	b006      	add	sp, #24
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b086      	sub	sp, #24
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	60f8      	str	r0, [r7, #12]
 800bd4c:	607a      	str	r2, [r7, #4]
 800bd4e:	200b      	movs	r0, #11
 800bd50:	183b      	adds	r3, r7, r0
 800bd52:	1c0a      	adds	r2, r1, #0
 800bd54:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bd56:	183b      	adds	r3, r7, r0
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d000      	beq.n	800bd60 <USBD_LL_DataInStage+0x1c>
 800bd5e:	e08e      	b.n	800be7e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	3314      	adds	r3, #20
 800bd64:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bd66:	68fa      	ldr	r2, [r7, #12]
 800bd68:	23a5      	movs	r3, #165	; 0xa5
 800bd6a:	009b      	lsls	r3, r3, #2
 800bd6c:	58d3      	ldr	r3, [r2, r3]
 800bd6e:	2b02      	cmp	r3, #2
 800bd70:	d164      	bne.n	800be3c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	68da      	ldr	r2, [r3, #12]
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	691b      	ldr	r3, [r3, #16]
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d915      	bls.n	800bdaa <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	68da      	ldr	r2, [r3, #12]
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	691b      	ldr	r3, [r3, #16]
 800bd86:	1ad2      	subs	r2, r2, r3
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	68db      	ldr	r3, [r3, #12]
 800bd90:	b29a      	uxth	r2, r3
 800bd92:	6879      	ldr	r1, [r7, #4]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	0018      	movs	r0, r3
 800bd98:	f000 ffec 	bl	800cd74 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd9c:	68f8      	ldr	r0, [r7, #12]
 800bd9e:	2300      	movs	r3, #0
 800bda0:	2200      	movs	r2, #0
 800bda2:	2100      	movs	r1, #0
 800bda4:	f001 fd1e 	bl	800d7e4 <USBD_LL_PrepareReceive>
 800bda8:	e059      	b.n	800be5e <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	689a      	ldr	r2, [r3, #8]
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	691b      	ldr	r3, [r3, #16]
 800bdb2:	0019      	movs	r1, r3
 800bdb4:	0010      	movs	r0, r2
 800bdb6:	f7f4 fa3f 	bl	8000238 <__aeabi_uidivmod>
 800bdba:	1e0b      	subs	r3, r1, #0
 800bdbc:	d11f      	bne.n	800bdfe <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	689a      	ldr	r2, [r3, #8]
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d319      	bcc.n	800bdfe <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	689a      	ldr	r2, [r3, #8]
 800bdce:	68f9      	ldr	r1, [r7, #12]
 800bdd0:	23a6      	movs	r3, #166	; 0xa6
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d211      	bcs.n	800bdfe <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2200      	movs	r2, #0
 800bdde:	2100      	movs	r1, #0
 800bde0:	0018      	movs	r0, r3
 800bde2:	f000 ffc7 	bl	800cd74 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bde6:	68fa      	ldr	r2, [r7, #12]
 800bde8:	23a6      	movs	r3, #166	; 0xa6
 800bdea:	009b      	lsls	r3, r3, #2
 800bdec:	2100      	movs	r1, #0
 800bdee:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bdf0:	68f8      	ldr	r0, [r7, #12]
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	2100      	movs	r1, #0
 800bdf8:	f001 fcf4 	bl	800d7e4 <USBD_LL_PrepareReceive>
 800bdfc:	e02f      	b.n	800be5e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bdfe:	68fa      	ldr	r2, [r7, #12]
 800be00:	23ad      	movs	r3, #173	; 0xad
 800be02:	009b      	lsls	r3, r3, #2
 800be04:	58d3      	ldr	r3, [r2, r3]
 800be06:	68db      	ldr	r3, [r3, #12]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d00d      	beq.n	800be28 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800be0c:	68fa      	ldr	r2, [r7, #12]
 800be0e:	23a7      	movs	r3, #167	; 0xa7
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800be14:	2b03      	cmp	r3, #3
 800be16:	d107      	bne.n	800be28 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	23ad      	movs	r3, #173	; 0xad
 800be1c:	009b      	lsls	r3, r3, #2
 800be1e:	58d3      	ldr	r3, [r2, r3]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	68fa      	ldr	r2, [r7, #12]
 800be24:	0010      	movs	r0, r2
 800be26:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2180      	movs	r1, #128	; 0x80
 800be2c:	0018      	movs	r0, r3
 800be2e:	f001 fbf0 	bl	800d612 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	0018      	movs	r0, r3
 800be36:	f000 fffb 	bl	800ce30 <USBD_CtlReceiveStatus>
 800be3a:	e010      	b.n	800be5e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800be3c:	68fa      	ldr	r2, [r7, #12]
 800be3e:	23a5      	movs	r3, #165	; 0xa5
 800be40:	009b      	lsls	r3, r3, #2
 800be42:	58d3      	ldr	r3, [r2, r3]
 800be44:	2b04      	cmp	r3, #4
 800be46:	d005      	beq.n	800be54 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800be48:	68fa      	ldr	r2, [r7, #12]
 800be4a:	23a5      	movs	r3, #165	; 0xa5
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800be50:	2b00      	cmp	r3, #0
 800be52:	d104      	bne.n	800be5e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	2180      	movs	r1, #128	; 0x80
 800be58:	0018      	movs	r0, r3
 800be5a:	f001 fbda 	bl	800d612 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	23a8      	movs	r3, #168	; 0xa8
 800be62:	009b      	lsls	r3, r3, #2
 800be64:	5cd3      	ldrb	r3, [r2, r3]
 800be66:	2b01      	cmp	r3, #1
 800be68:	d124      	bne.n	800beb4 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	0018      	movs	r0, r3
 800be6e:	f7ff fe43 	bl	800baf8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800be72:	68fa      	ldr	r2, [r7, #12]
 800be74:	23a8      	movs	r3, #168	; 0xa8
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	2100      	movs	r1, #0
 800be7a:	54d1      	strb	r1, [r2, r3]
 800be7c:	e01a      	b.n	800beb4 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800be7e:	68fa      	ldr	r2, [r7, #12]
 800be80:	23ad      	movs	r3, #173	; 0xad
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	58d3      	ldr	r3, [r2, r3]
 800be86:	695b      	ldr	r3, [r3, #20]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d011      	beq.n	800beb0 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800be8c:	68fa      	ldr	r2, [r7, #12]
 800be8e:	23a7      	movs	r3, #167	; 0xa7
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800be94:	2b03      	cmp	r3, #3
 800be96:	d10b      	bne.n	800beb0 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800be98:	68fa      	ldr	r2, [r7, #12]
 800be9a:	23ad      	movs	r3, #173	; 0xad
 800be9c:	009b      	lsls	r3, r3, #2
 800be9e:	58d3      	ldr	r3, [r2, r3]
 800bea0:	695b      	ldr	r3, [r3, #20]
 800bea2:	220b      	movs	r2, #11
 800bea4:	18ba      	adds	r2, r7, r2
 800bea6:	7811      	ldrb	r1, [r2, #0]
 800bea8:	68fa      	ldr	r2, [r7, #12]
 800beaa:	0010      	movs	r0, r2
 800beac:	4798      	blx	r3
 800beae:	e001      	b.n	800beb4 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800beb0:	2302      	movs	r3, #2
 800beb2:	e000      	b.n	800beb6 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	0018      	movs	r0, r3
 800beb8:	46bd      	mov	sp, r7
 800beba:	b006      	add	sp, #24
 800bebc:	bd80      	pop	{r7, pc}

0800bebe <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bebe:	b580      	push	{r7, lr}
 800bec0:	b082      	sub	sp, #8
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	2340      	movs	r3, #64	; 0x40
 800beca:	2200      	movs	r2, #0
 800becc:	2100      	movs	r1, #0
 800bece:	f001 fb3e 	bl	800d54e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	23ac      	movs	r3, #172	; 0xac
 800bed6:	005b      	lsls	r3, r3, #1
 800bed8:	2101      	movs	r1, #1
 800beda:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	23b2      	movs	r3, #178	; 0xb2
 800bee0:	005b      	lsls	r3, r3, #1
 800bee2:	2140      	movs	r1, #64	; 0x40
 800bee4:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	2340      	movs	r3, #64	; 0x40
 800beea:	2200      	movs	r2, #0
 800beec:	2180      	movs	r1, #128	; 0x80
 800beee:	f001 fb2e 	bl	800d54e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2201      	movs	r2, #1
 800bef6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2240      	movs	r2, #64	; 0x40
 800befc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	23a7      	movs	r3, #167	; 0xa7
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	2101      	movs	r1, #1
 800bf06:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	23a5      	movs	r3, #165	; 0xa5
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	2100      	movs	r1, #0
 800bf10:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2200      	movs	r2, #0
 800bf16:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	23a9      	movs	r3, #169	; 0xa9
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	2100      	movs	r1, #0
 800bf20:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	23ae      	movs	r3, #174	; 0xae
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	58d3      	ldr	r3, [r2, r3]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d00a      	beq.n	800bf44 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	23ad      	movs	r3, #173	; 0xad
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	58d3      	ldr	r3, [r2, r3]
 800bf36:	685a      	ldr	r2, [r3, #4]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	685b      	ldr	r3, [r3, #4]
 800bf3c:	b2d9      	uxtb	r1, r3
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	0018      	movs	r0, r3
 800bf42:	4790      	blx	r2
  }

  return USBD_OK;
 800bf44:	2300      	movs	r3, #0
}
 800bf46:	0018      	movs	r0, r3
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	b002      	add	sp, #8
 800bf4c:	bd80      	pop	{r7, pc}

0800bf4e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bf4e:	b580      	push	{r7, lr}
 800bf50:	b082      	sub	sp, #8
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	6078      	str	r0, [r7, #4]
 800bf56:	000a      	movs	r2, r1
 800bf58:	1cfb      	adds	r3, r7, #3
 800bf5a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	1cfa      	adds	r2, r7, #3
 800bf60:	7812      	ldrb	r2, [r2, #0]
 800bf62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bf64:	2300      	movs	r3, #0
}
 800bf66:	0018      	movs	r0, r3
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	b002      	add	sp, #8
 800bf6c:	bd80      	pop	{r7, pc}
	...

0800bf70 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bf78:	687a      	ldr	r2, [r7, #4]
 800bf7a:	23a7      	movs	r3, #167	; 0xa7
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	5cd1      	ldrb	r1, [r2, r3]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	4a06      	ldr	r2, [pc, #24]	; (800bf9c <USBD_LL_Suspend+0x2c>)
 800bf84:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bf86:	687a      	ldr	r2, [r7, #4]
 800bf88:	23a7      	movs	r3, #167	; 0xa7
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	2104      	movs	r1, #4
 800bf8e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800bf90:	2300      	movs	r3, #0
}
 800bf92:	0018      	movs	r0, r3
 800bf94:	46bd      	mov	sp, r7
 800bf96:	b002      	add	sp, #8
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	46c0      	nop			; (mov r8, r8)
 800bf9c:	0000029d 	.word	0x0000029d

0800bfa0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	23a7      	movs	r3, #167	; 0xa7
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	5cd3      	ldrb	r3, [r2, r3]
 800bfb0:	2b04      	cmp	r3, #4
 800bfb2:	d106      	bne.n	800bfc2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	4a05      	ldr	r2, [pc, #20]	; (800bfcc <USBD_LL_Resume+0x2c>)
 800bfb8:	5c99      	ldrb	r1, [r3, r2]
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	23a7      	movs	r3, #167	; 0xa7
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800bfc2:	2300      	movs	r3, #0
}
 800bfc4:	0018      	movs	r0, r3
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	b002      	add	sp, #8
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	0000029d 	.word	0x0000029d

0800bfd0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b082      	sub	sp, #8
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	23a7      	movs	r3, #167	; 0xa7
 800bfdc:	009b      	lsls	r3, r3, #2
 800bfde:	5cd3      	ldrb	r3, [r2, r3]
 800bfe0:	2b03      	cmp	r3, #3
 800bfe2:	d10e      	bne.n	800c002 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	23ad      	movs	r3, #173	; 0xad
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	58d3      	ldr	r3, [r2, r3]
 800bfec:	69db      	ldr	r3, [r3, #28]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d007      	beq.n	800c002 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	23ad      	movs	r3, #173	; 0xad
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	58d3      	ldr	r3, [r2, r3]
 800bffa:	69db      	ldr	r3, [r3, #28]
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	0010      	movs	r0, r2
 800c000:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c002:	2300      	movs	r3, #0
}
 800c004:	0018      	movs	r0, r3
 800c006:	46bd      	mov	sp, r7
 800c008:	b002      	add	sp, #8
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c016:	230f      	movs	r3, #15
 800c018:	18fb      	adds	r3, r7, r3
 800c01a:	2200      	movs	r2, #0
 800c01c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	781b      	ldrb	r3, [r3, #0]
 800c022:	001a      	movs	r2, r3
 800c024:	2360      	movs	r3, #96	; 0x60
 800c026:	4013      	ands	r3, r2
 800c028:	2b40      	cmp	r3, #64	; 0x40
 800c02a:	d004      	beq.n	800c036 <USBD_StdDevReq+0x2a>
 800c02c:	d84f      	bhi.n	800c0ce <USBD_StdDevReq+0xc2>
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d00b      	beq.n	800c04a <USBD_StdDevReq+0x3e>
 800c032:	2b20      	cmp	r3, #32
 800c034:	d14b      	bne.n	800c0ce <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	23ad      	movs	r3, #173	; 0xad
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	58d3      	ldr	r3, [r2, r3]
 800c03e:	689b      	ldr	r3, [r3, #8]
 800c040:	6839      	ldr	r1, [r7, #0]
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	0010      	movs	r0, r2
 800c046:	4798      	blx	r3
      break;
 800c048:	e048      	b.n	800c0dc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	785b      	ldrb	r3, [r3, #1]
 800c04e:	2b09      	cmp	r3, #9
 800c050:	d835      	bhi.n	800c0be <USBD_StdDevReq+0xb2>
 800c052:	009a      	lsls	r2, r3, #2
 800c054:	4b25      	ldr	r3, [pc, #148]	; (800c0ec <USBD_StdDevReq+0xe0>)
 800c056:	18d3      	adds	r3, r2, r3
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c05c:	683a      	ldr	r2, [r7, #0]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	0011      	movs	r1, r2
 800c062:	0018      	movs	r0, r3
 800c064:	f000 fa52 	bl	800c50c <USBD_GetDescriptor>
          break;
 800c068:	e030      	b.n	800c0cc <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c06a:	683a      	ldr	r2, [r7, #0]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	0011      	movs	r1, r2
 800c070:	0018      	movs	r0, r3
 800c072:	f000 fbfd 	bl	800c870 <USBD_SetAddress>
          break;
 800c076:	e029      	b.n	800c0cc <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800c078:	683a      	ldr	r2, [r7, #0]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	0011      	movs	r1, r2
 800c07e:	0018      	movs	r0, r3
 800c080:	f000 fc4a 	bl	800c918 <USBD_SetConfig>
          break;
 800c084:	e022      	b.n	800c0cc <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c086:	683a      	ldr	r2, [r7, #0]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	0011      	movs	r1, r2
 800c08c:	0018      	movs	r0, r3
 800c08e:	f000 fce7 	bl	800ca60 <USBD_GetConfig>
          break;
 800c092:	e01b      	b.n	800c0cc <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c094:	683a      	ldr	r2, [r7, #0]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	0011      	movs	r1, r2
 800c09a:	0018      	movs	r0, r3
 800c09c:	f000 fd1b 	bl	800cad6 <USBD_GetStatus>
          break;
 800c0a0:	e014      	b.n	800c0cc <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c0a2:	683a      	ldr	r2, [r7, #0]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	0011      	movs	r1, r2
 800c0a8:	0018      	movs	r0, r3
 800c0aa:	f000 fd4e 	bl	800cb4a <USBD_SetFeature>
          break;
 800c0ae:	e00d      	b.n	800c0cc <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c0b0:	683a      	ldr	r2, [r7, #0]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	0011      	movs	r1, r2
 800c0b6:	0018      	movs	r0, r3
 800c0b8:	f000 fd5d 	bl	800cb76 <USBD_ClrFeature>
          break;
 800c0bc:	e006      	b.n	800c0cc <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c0be:	683a      	ldr	r2, [r7, #0]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	0011      	movs	r1, r2
 800c0c4:	0018      	movs	r0, r3
 800c0c6:	f000 fdb7 	bl	800cc38 <USBD_CtlError>
          break;
 800c0ca:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800c0cc:	e006      	b.n	800c0dc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c0ce:	683a      	ldr	r2, [r7, #0]
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	0011      	movs	r1, r2
 800c0d4:	0018      	movs	r0, r3
 800c0d6:	f000 fdaf 	bl	800cc38 <USBD_CtlError>
      break;
 800c0da:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800c0dc:	230f      	movs	r3, #15
 800c0de:	18fb      	adds	r3, r7, r3
 800c0e0:	781b      	ldrb	r3, [r3, #0]
}
 800c0e2:	0018      	movs	r0, r3
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	b004      	add	sp, #16
 800c0e8:	bd80      	pop	{r7, pc}
 800c0ea:	46c0      	nop			; (mov r8, r8)
 800c0ec:	0800e4f0 	.word	0x0800e4f0

0800c0f0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800c0f0:	b5b0      	push	{r4, r5, r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0fa:	230f      	movs	r3, #15
 800c0fc:	18fb      	adds	r3, r7, r3
 800c0fe:	2200      	movs	r2, #0
 800c100:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	001a      	movs	r2, r3
 800c108:	2360      	movs	r3, #96	; 0x60
 800c10a:	4013      	ands	r3, r2
 800c10c:	2b40      	cmp	r3, #64	; 0x40
 800c10e:	d004      	beq.n	800c11a <USBD_StdItfReq+0x2a>
 800c110:	d839      	bhi.n	800c186 <USBD_StdItfReq+0x96>
 800c112:	2b00      	cmp	r3, #0
 800c114:	d001      	beq.n	800c11a <USBD_StdItfReq+0x2a>
 800c116:	2b20      	cmp	r3, #32
 800c118:	d135      	bne.n	800c186 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	23a7      	movs	r3, #167	; 0xa7
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	5cd3      	ldrb	r3, [r2, r3]
 800c122:	3b01      	subs	r3, #1
 800c124:	2b02      	cmp	r3, #2
 800c126:	d825      	bhi.n	800c174 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	889b      	ldrh	r3, [r3, #4]
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d819      	bhi.n	800c166 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	23ad      	movs	r3, #173	; 0xad
 800c136:	009b      	lsls	r3, r3, #2
 800c138:	58d3      	ldr	r3, [r2, r3]
 800c13a:	689b      	ldr	r3, [r3, #8]
 800c13c:	250f      	movs	r5, #15
 800c13e:	197c      	adds	r4, r7, r5
 800c140:	6839      	ldr	r1, [r7, #0]
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	0010      	movs	r0, r2
 800c146:	4798      	blx	r3
 800c148:	0003      	movs	r3, r0
 800c14a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	88db      	ldrh	r3, [r3, #6]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d116      	bne.n	800c182 <USBD_StdItfReq+0x92>
 800c154:	197b      	adds	r3, r7, r5
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d112      	bne.n	800c182 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	0018      	movs	r0, r3
 800c160:	f000 fe52 	bl	800ce08 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c164:	e00d      	b.n	800c182 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800c166:	683a      	ldr	r2, [r7, #0]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	0011      	movs	r1, r2
 800c16c:	0018      	movs	r0, r3
 800c16e:	f000 fd63 	bl	800cc38 <USBD_CtlError>
          break;
 800c172:	e006      	b.n	800c182 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800c174:	683a      	ldr	r2, [r7, #0]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	0011      	movs	r1, r2
 800c17a:	0018      	movs	r0, r3
 800c17c:	f000 fd5c 	bl	800cc38 <USBD_CtlError>
          break;
 800c180:	e000      	b.n	800c184 <USBD_StdItfReq+0x94>
          break;
 800c182:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800c184:	e006      	b.n	800c194 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800c186:	683a      	ldr	r2, [r7, #0]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	0011      	movs	r1, r2
 800c18c:	0018      	movs	r0, r3
 800c18e:	f000 fd53 	bl	800cc38 <USBD_CtlError>
      break;
 800c192:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800c194:	2300      	movs	r3, #0
}
 800c196:	0018      	movs	r0, r3
 800c198:	46bd      	mov	sp, r7
 800c19a:	b004      	add	sp, #16
 800c19c:	bdb0      	pop	{r4, r5, r7, pc}

0800c19e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c19e:	b5b0      	push	{r4, r5, r7, lr}
 800c1a0:	b084      	sub	sp, #16
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]
 800c1a6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c1a8:	230f      	movs	r3, #15
 800c1aa:	18fb      	adds	r3, r7, r3
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	889a      	ldrh	r2, [r3, #4]
 800c1b4:	230e      	movs	r3, #14
 800c1b6:	18fb      	adds	r3, r7, r3
 800c1b8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	001a      	movs	r2, r3
 800c1c0:	2360      	movs	r3, #96	; 0x60
 800c1c2:	4013      	ands	r3, r2
 800c1c4:	2b40      	cmp	r3, #64	; 0x40
 800c1c6:	d006      	beq.n	800c1d6 <USBD_StdEPReq+0x38>
 800c1c8:	d900      	bls.n	800c1cc <USBD_StdEPReq+0x2e>
 800c1ca:	e190      	b.n	800c4ee <USBD_StdEPReq+0x350>
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d00c      	beq.n	800c1ea <USBD_StdEPReq+0x4c>
 800c1d0:	2b20      	cmp	r3, #32
 800c1d2:	d000      	beq.n	800c1d6 <USBD_StdEPReq+0x38>
 800c1d4:	e18b      	b.n	800c4ee <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	23ad      	movs	r3, #173	; 0xad
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	58d3      	ldr	r3, [r2, r3]
 800c1de:	689b      	ldr	r3, [r3, #8]
 800c1e0:	6839      	ldr	r1, [r7, #0]
 800c1e2:	687a      	ldr	r2, [r7, #4]
 800c1e4:	0010      	movs	r0, r2
 800c1e6:	4798      	blx	r3
      break;
 800c1e8:	e188      	b.n	800c4fc <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	001a      	movs	r2, r3
 800c1f0:	2360      	movs	r3, #96	; 0x60
 800c1f2:	4013      	ands	r3, r2
 800c1f4:	2b20      	cmp	r3, #32
 800c1f6:	d10f      	bne.n	800c218 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	23ad      	movs	r3, #173	; 0xad
 800c1fc:	009b      	lsls	r3, r3, #2
 800c1fe:	58d3      	ldr	r3, [r2, r3]
 800c200:	689b      	ldr	r3, [r3, #8]
 800c202:	250f      	movs	r5, #15
 800c204:	197c      	adds	r4, r7, r5
 800c206:	6839      	ldr	r1, [r7, #0]
 800c208:	687a      	ldr	r2, [r7, #4]
 800c20a:	0010      	movs	r0, r2
 800c20c:	4798      	blx	r3
 800c20e:	0003      	movs	r3, r0
 800c210:	7023      	strb	r3, [r4, #0]

        return ret;
 800c212:	197b      	adds	r3, r7, r5
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	e174      	b.n	800c502 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	785b      	ldrb	r3, [r3, #1]
 800c21c:	2b03      	cmp	r3, #3
 800c21e:	d007      	beq.n	800c230 <USBD_StdEPReq+0x92>
 800c220:	dd00      	ble.n	800c224 <USBD_StdEPReq+0x86>
 800c222:	e15c      	b.n	800c4de <USBD_StdEPReq+0x340>
 800c224:	2b00      	cmp	r3, #0
 800c226:	d100      	bne.n	800c22a <USBD_StdEPReq+0x8c>
 800c228:	e092      	b.n	800c350 <USBD_StdEPReq+0x1b2>
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	d04b      	beq.n	800c2c6 <USBD_StdEPReq+0x128>
 800c22e:	e156      	b.n	800c4de <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	23a7      	movs	r3, #167	; 0xa7
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	5cd3      	ldrb	r3, [r2, r3]
 800c238:	2b02      	cmp	r3, #2
 800c23a:	d002      	beq.n	800c242 <USBD_StdEPReq+0xa4>
 800c23c:	2b03      	cmp	r3, #3
 800c23e:	d01d      	beq.n	800c27c <USBD_StdEPReq+0xde>
 800c240:	e039      	b.n	800c2b6 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c242:	220e      	movs	r2, #14
 800c244:	18bb      	adds	r3, r7, r2
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d010      	beq.n	800c26e <USBD_StdEPReq+0xd0>
 800c24c:	18bb      	adds	r3, r7, r2
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	2b80      	cmp	r3, #128	; 0x80
 800c252:	d00c      	beq.n	800c26e <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c254:	18bb      	adds	r3, r7, r2
 800c256:	781a      	ldrb	r2, [r3, #0]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	0011      	movs	r1, r2
 800c25c:	0018      	movs	r0, r3
 800c25e:	f001 f9d8 	bl	800d612 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2180      	movs	r1, #128	; 0x80
 800c266:	0018      	movs	r0, r3
 800c268:	f001 f9d3 	bl	800d612 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c26c:	e02a      	b.n	800c2c4 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800c26e:	683a      	ldr	r2, [r7, #0]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	0011      	movs	r1, r2
 800c274:	0018      	movs	r0, r3
 800c276:	f000 fcdf 	bl	800cc38 <USBD_CtlError>
              break;
 800c27a:	e023      	b.n	800c2c4 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	885b      	ldrh	r3, [r3, #2]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d113      	bne.n	800c2ac <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800c284:	220e      	movs	r2, #14
 800c286:	18bb      	adds	r3, r7, r2
 800c288:	781b      	ldrb	r3, [r3, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d00e      	beq.n	800c2ac <USBD_StdEPReq+0x10e>
 800c28e:	18bb      	adds	r3, r7, r2
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	2b80      	cmp	r3, #128	; 0x80
 800c294:	d00a      	beq.n	800c2ac <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	88db      	ldrh	r3, [r3, #6]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d106      	bne.n	800c2ac <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c29e:	18bb      	adds	r3, r7, r2
 800c2a0:	781a      	ldrb	r2, [r3, #0]
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	0011      	movs	r1, r2
 800c2a6:	0018      	movs	r0, r3
 800c2a8:	f001 f9b3 	bl	800d612 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	0018      	movs	r0, r3
 800c2b0:	f000 fdaa 	bl	800ce08 <USBD_CtlSendStatus>

              break;
 800c2b4:	e006      	b.n	800c2c4 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800c2b6:	683a      	ldr	r2, [r7, #0]
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	0011      	movs	r1, r2
 800c2bc:	0018      	movs	r0, r3
 800c2be:	f000 fcbb 	bl	800cc38 <USBD_CtlError>
              break;
 800c2c2:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800c2c4:	e112      	b.n	800c4ec <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	23a7      	movs	r3, #167	; 0xa7
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	5cd3      	ldrb	r3, [r2, r3]
 800c2ce:	2b02      	cmp	r3, #2
 800c2d0:	d002      	beq.n	800c2d8 <USBD_StdEPReq+0x13a>
 800c2d2:	2b03      	cmp	r3, #3
 800c2d4:	d01d      	beq.n	800c312 <USBD_StdEPReq+0x174>
 800c2d6:	e032      	b.n	800c33e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2d8:	220e      	movs	r2, #14
 800c2da:	18bb      	adds	r3, r7, r2
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d010      	beq.n	800c304 <USBD_StdEPReq+0x166>
 800c2e2:	18bb      	adds	r3, r7, r2
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	2b80      	cmp	r3, #128	; 0x80
 800c2e8:	d00c      	beq.n	800c304 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c2ea:	18bb      	adds	r3, r7, r2
 800c2ec:	781a      	ldrb	r2, [r3, #0]
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	0011      	movs	r1, r2
 800c2f2:	0018      	movs	r0, r3
 800c2f4:	f001 f98d 	bl	800d612 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2180      	movs	r1, #128	; 0x80
 800c2fc:	0018      	movs	r0, r3
 800c2fe:	f001 f988 	bl	800d612 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c302:	e024      	b.n	800c34e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800c304:	683a      	ldr	r2, [r7, #0]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	0011      	movs	r1, r2
 800c30a:	0018      	movs	r0, r3
 800c30c:	f000 fc94 	bl	800cc38 <USBD_CtlError>
              break;
 800c310:	e01d      	b.n	800c34e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	885b      	ldrh	r3, [r3, #2]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d118      	bne.n	800c34c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c31a:	210e      	movs	r1, #14
 800c31c:	187b      	adds	r3, r7, r1
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	227f      	movs	r2, #127	; 0x7f
 800c322:	4013      	ands	r3, r2
 800c324:	d006      	beq.n	800c334 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c326:	187b      	adds	r3, r7, r1
 800c328:	781a      	ldrb	r2, [r3, #0]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	0011      	movs	r1, r2
 800c32e:	0018      	movs	r0, r3
 800c330:	f001 f99a 	bl	800d668 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	0018      	movs	r0, r3
 800c338:	f000 fd66 	bl	800ce08 <USBD_CtlSendStatus>
              }
              break;
 800c33c:	e006      	b.n	800c34c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800c33e:	683a      	ldr	r2, [r7, #0]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	0011      	movs	r1, r2
 800c344:	0018      	movs	r0, r3
 800c346:	f000 fc77 	bl	800cc38 <USBD_CtlError>
              break;
 800c34a:	e000      	b.n	800c34e <USBD_StdEPReq+0x1b0>
              break;
 800c34c:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800c34e:	e0cd      	b.n	800c4ec <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	23a7      	movs	r3, #167	; 0xa7
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	5cd3      	ldrb	r3, [r2, r3]
 800c358:	2b02      	cmp	r3, #2
 800c35a:	d002      	beq.n	800c362 <USBD_StdEPReq+0x1c4>
 800c35c:	2b03      	cmp	r3, #3
 800c35e:	d03c      	beq.n	800c3da <USBD_StdEPReq+0x23c>
 800c360:	e0b5      	b.n	800c4ce <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c362:	220e      	movs	r2, #14
 800c364:	18bb      	adds	r3, r7, r2
 800c366:	781b      	ldrb	r3, [r3, #0]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d00a      	beq.n	800c382 <USBD_StdEPReq+0x1e4>
 800c36c:	18bb      	adds	r3, r7, r2
 800c36e:	781b      	ldrb	r3, [r3, #0]
 800c370:	2b80      	cmp	r3, #128	; 0x80
 800c372:	d006      	beq.n	800c382 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800c374:	683a      	ldr	r2, [r7, #0]
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	0011      	movs	r1, r2
 800c37a:	0018      	movs	r0, r3
 800c37c:	f000 fc5c 	bl	800cc38 <USBD_CtlError>
                break;
 800c380:	e0ac      	b.n	800c4dc <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c382:	220e      	movs	r2, #14
 800c384:	18bb      	adds	r3, r7, r2
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	b25b      	sxtb	r3, r3
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	da0c      	bge.n	800c3a8 <USBD_StdEPReq+0x20a>
 800c38e:	18bb      	adds	r3, r7, r2
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	227f      	movs	r2, #127	; 0x7f
 800c394:	401a      	ands	r2, r3
 800c396:	0013      	movs	r3, r2
 800c398:	009b      	lsls	r3, r3, #2
 800c39a:	189b      	adds	r3, r3, r2
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	3310      	adds	r3, #16
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	18d3      	adds	r3, r2, r3
 800c3a4:	3304      	adds	r3, #4
 800c3a6:	e00d      	b.n	800c3c4 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c3a8:	230e      	movs	r3, #14
 800c3aa:	18fb      	adds	r3, r7, r3
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	227f      	movs	r2, #127	; 0x7f
 800c3b0:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3b2:	0013      	movs	r3, r2
 800c3b4:	009b      	lsls	r3, r3, #2
 800c3b6:	189b      	adds	r3, r3, r2
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	3351      	adds	r3, #81	; 0x51
 800c3bc:	33ff      	adds	r3, #255	; 0xff
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	18d3      	adds	r3, r2, r3
 800c3c2:	3304      	adds	r3, #4
 800c3c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c3cc:	68b9      	ldr	r1, [r7, #8]
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2202      	movs	r2, #2
 800c3d2:	0018      	movs	r0, r3
 800c3d4:	f000 fcae 	bl	800cd34 <USBD_CtlSendData>
              break;
 800c3d8:	e080      	b.n	800c4dc <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c3da:	220e      	movs	r2, #14
 800c3dc:	18bb      	adds	r3, r7, r2
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	b25b      	sxtb	r3, r3
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	da14      	bge.n	800c410 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c3e6:	18bb      	adds	r3, r7, r2
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	220f      	movs	r2, #15
 800c3ec:	401a      	ands	r2, r3
 800c3ee:	6879      	ldr	r1, [r7, #4]
 800c3f0:	0013      	movs	r3, r2
 800c3f2:	009b      	lsls	r3, r3, #2
 800c3f4:	189b      	adds	r3, r3, r2
 800c3f6:	009b      	lsls	r3, r3, #2
 800c3f8:	18cb      	adds	r3, r1, r3
 800c3fa:	3318      	adds	r3, #24
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d11e      	bne.n	800c440 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800c402:	683a      	ldr	r2, [r7, #0]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	0011      	movs	r1, r2
 800c408:	0018      	movs	r0, r3
 800c40a:	f000 fc15 	bl	800cc38 <USBD_CtlError>
                  break;
 800c40e:	e065      	b.n	800c4dc <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c410:	230e      	movs	r3, #14
 800c412:	18fb      	adds	r3, r7, r3
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	220f      	movs	r2, #15
 800c418:	401a      	ands	r2, r3
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	23ac      	movs	r3, #172	; 0xac
 800c41e:	0059      	lsls	r1, r3, #1
 800c420:	0013      	movs	r3, r2
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	189b      	adds	r3, r3, r2
 800c426:	009b      	lsls	r3, r3, #2
 800c428:	18c3      	adds	r3, r0, r3
 800c42a:	185b      	adds	r3, r3, r1
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d106      	bne.n	800c440 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800c432:	683a      	ldr	r2, [r7, #0]
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	0011      	movs	r1, r2
 800c438:	0018      	movs	r0, r3
 800c43a:	f000 fbfd 	bl	800cc38 <USBD_CtlError>
                  break;
 800c43e:	e04d      	b.n	800c4dc <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c440:	220e      	movs	r2, #14
 800c442:	18bb      	adds	r3, r7, r2
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	b25b      	sxtb	r3, r3
 800c448:	2b00      	cmp	r3, #0
 800c44a:	da0c      	bge.n	800c466 <USBD_StdEPReq+0x2c8>
 800c44c:	18bb      	adds	r3, r7, r2
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	227f      	movs	r2, #127	; 0x7f
 800c452:	401a      	ands	r2, r3
 800c454:	0013      	movs	r3, r2
 800c456:	009b      	lsls	r3, r3, #2
 800c458:	189b      	adds	r3, r3, r2
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	3310      	adds	r3, #16
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	18d3      	adds	r3, r2, r3
 800c462:	3304      	adds	r3, #4
 800c464:	e00d      	b.n	800c482 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c466:	230e      	movs	r3, #14
 800c468:	18fb      	adds	r3, r7, r3
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	227f      	movs	r2, #127	; 0x7f
 800c46e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c470:	0013      	movs	r3, r2
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	189b      	adds	r3, r3, r2
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	3351      	adds	r3, #81	; 0x51
 800c47a:	33ff      	adds	r3, #255	; 0xff
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	18d3      	adds	r3, r2, r3
 800c480:	3304      	adds	r3, #4
 800c482:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c484:	220e      	movs	r2, #14
 800c486:	18bb      	adds	r3, r7, r2
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d003      	beq.n	800c496 <USBD_StdEPReq+0x2f8>
 800c48e:	18bb      	adds	r3, r7, r2
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	2b80      	cmp	r3, #128	; 0x80
 800c494:	d103      	bne.n	800c49e <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	2200      	movs	r2, #0
 800c49a:	601a      	str	r2, [r3, #0]
 800c49c:	e010      	b.n	800c4c0 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c49e:	230e      	movs	r3, #14
 800c4a0:	18fb      	adds	r3, r7, r3
 800c4a2:	781a      	ldrb	r2, [r3, #0]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	0011      	movs	r1, r2
 800c4a8:	0018      	movs	r0, r3
 800c4aa:	f001 f908 	bl	800d6be <USBD_LL_IsStallEP>
 800c4ae:	1e03      	subs	r3, r0, #0
 800c4b0:	d003      	beq.n	800c4ba <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	601a      	str	r2, [r3, #0]
 800c4b8:	e002      	b.n	800c4c0 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	2200      	movs	r2, #0
 800c4be:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c4c0:	68b9      	ldr	r1, [r7, #8]
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2202      	movs	r2, #2
 800c4c6:	0018      	movs	r0, r3
 800c4c8:	f000 fc34 	bl	800cd34 <USBD_CtlSendData>
              break;
 800c4cc:	e006      	b.n	800c4dc <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800c4ce:	683a      	ldr	r2, [r7, #0]
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	0011      	movs	r1, r2
 800c4d4:	0018      	movs	r0, r3
 800c4d6:	f000 fbaf 	bl	800cc38 <USBD_CtlError>
              break;
 800c4da:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800c4dc:	e006      	b.n	800c4ec <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800c4de:	683a      	ldr	r2, [r7, #0]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	0011      	movs	r1, r2
 800c4e4:	0018      	movs	r0, r3
 800c4e6:	f000 fba7 	bl	800cc38 <USBD_CtlError>
          break;
 800c4ea:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800c4ec:	e006      	b.n	800c4fc <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800c4ee:	683a      	ldr	r2, [r7, #0]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	0011      	movs	r1, r2
 800c4f4:	0018      	movs	r0, r3
 800c4f6:	f000 fb9f 	bl	800cc38 <USBD_CtlError>
      break;
 800c4fa:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800c4fc:	230f      	movs	r3, #15
 800c4fe:	18fb      	adds	r3, r7, r3
 800c500:	781b      	ldrb	r3, [r3, #0]
}
 800c502:	0018      	movs	r0, r3
 800c504:	46bd      	mov	sp, r7
 800c506:	b004      	add	sp, #16
 800c508:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c50c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c516:	2308      	movs	r3, #8
 800c518:	18fb      	adds	r3, r7, r3
 800c51a:	2200      	movs	r2, #0
 800c51c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800c51e:	2300      	movs	r3, #0
 800c520:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c522:	230b      	movs	r3, #11
 800c524:	18fb      	adds	r3, r7, r3
 800c526:	2200      	movs	r2, #0
 800c528:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	885b      	ldrh	r3, [r3, #2]
 800c52e:	0a1b      	lsrs	r3, r3, #8
 800c530:	b29b      	uxth	r3, r3
 800c532:	2b07      	cmp	r3, #7
 800c534:	d900      	bls.n	800c538 <USBD_GetDescriptor+0x2c>
 800c536:	e159      	b.n	800c7ec <USBD_GetDescriptor+0x2e0>
 800c538:	009a      	lsls	r2, r3, #2
 800c53a:	4bcb      	ldr	r3, [pc, #812]	; (800c868 <USBD_GetDescriptor+0x35c>)
 800c53c:	18d3      	adds	r3, r2, r3
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	23ac      	movs	r3, #172	; 0xac
 800c546:	009b      	lsls	r3, r3, #2
 800c548:	58d3      	ldr	r3, [r2, r3]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	7c12      	ldrb	r2, [r2, #16]
 800c550:	2108      	movs	r1, #8
 800c552:	1879      	adds	r1, r7, r1
 800c554:	0010      	movs	r0, r2
 800c556:	4798      	blx	r3
 800c558:	0003      	movs	r3, r0
 800c55a:	60fb      	str	r3, [r7, #12]
      break;
 800c55c:	e153      	b.n	800c806 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	7c1b      	ldrb	r3, [r3, #16]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d10f      	bne.n	800c586 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	23ad      	movs	r3, #173	; 0xad
 800c56a:	009b      	lsls	r3, r3, #2
 800c56c:	58d3      	ldr	r3, [r2, r3]
 800c56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c570:	2208      	movs	r2, #8
 800c572:	18ba      	adds	r2, r7, r2
 800c574:	0010      	movs	r0, r2
 800c576:	4798      	blx	r3
 800c578:	0003      	movs	r3, r0
 800c57a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	3301      	adds	r3, #1
 800c580:	2202      	movs	r2, #2
 800c582:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c584:	e13f      	b.n	800c806 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	23ad      	movs	r3, #173	; 0xad
 800c58a:	009b      	lsls	r3, r3, #2
 800c58c:	58d3      	ldr	r3, [r2, r3]
 800c58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c590:	2208      	movs	r2, #8
 800c592:	18ba      	adds	r2, r7, r2
 800c594:	0010      	movs	r0, r2
 800c596:	4798      	blx	r3
 800c598:	0003      	movs	r3, r0
 800c59a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	3301      	adds	r3, #1
 800c5a0:	2202      	movs	r2, #2
 800c5a2:	701a      	strb	r2, [r3, #0]
      break;
 800c5a4:	e12f      	b.n	800c806 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	885b      	ldrh	r3, [r3, #2]
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	2b05      	cmp	r3, #5
 800c5ae:	d900      	bls.n	800c5b2 <USBD_GetDescriptor+0xa6>
 800c5b0:	e0d0      	b.n	800c754 <USBD_GetDescriptor+0x248>
 800c5b2:	009a      	lsls	r2, r3, #2
 800c5b4:	4bad      	ldr	r3, [pc, #692]	; (800c86c <USBD_GetDescriptor+0x360>)
 800c5b6:	18d3      	adds	r3, r2, r3
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	23ac      	movs	r3, #172	; 0xac
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	58d3      	ldr	r3, [r2, r3]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d00d      	beq.n	800c5e6 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	23ac      	movs	r3, #172	; 0xac
 800c5ce:	009b      	lsls	r3, r3, #2
 800c5d0:	58d3      	ldr	r3, [r2, r3]
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	687a      	ldr	r2, [r7, #4]
 800c5d6:	7c12      	ldrb	r2, [r2, #16]
 800c5d8:	2108      	movs	r1, #8
 800c5da:	1879      	adds	r1, r7, r1
 800c5dc:	0010      	movs	r0, r2
 800c5de:	4798      	blx	r3
 800c5e0:	0003      	movs	r3, r0
 800c5e2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5e4:	e0c3      	b.n	800c76e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c5e6:	683a      	ldr	r2, [r7, #0]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	0011      	movs	r1, r2
 800c5ec:	0018      	movs	r0, r3
 800c5ee:	f000 fb23 	bl	800cc38 <USBD_CtlError>
            err++;
 800c5f2:	210b      	movs	r1, #11
 800c5f4:	187b      	adds	r3, r7, r1
 800c5f6:	781a      	ldrb	r2, [r3, #0]
 800c5f8:	187b      	adds	r3, r7, r1
 800c5fa:	3201      	adds	r2, #1
 800c5fc:	701a      	strb	r2, [r3, #0]
          break;
 800c5fe:	e0b6      	b.n	800c76e <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	23ac      	movs	r3, #172	; 0xac
 800c604:	009b      	lsls	r3, r3, #2
 800c606:	58d3      	ldr	r3, [r2, r3]
 800c608:	689b      	ldr	r3, [r3, #8]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d00d      	beq.n	800c62a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	23ac      	movs	r3, #172	; 0xac
 800c612:	009b      	lsls	r3, r3, #2
 800c614:	58d3      	ldr	r3, [r2, r3]
 800c616:	689b      	ldr	r3, [r3, #8]
 800c618:	687a      	ldr	r2, [r7, #4]
 800c61a:	7c12      	ldrb	r2, [r2, #16]
 800c61c:	2108      	movs	r1, #8
 800c61e:	1879      	adds	r1, r7, r1
 800c620:	0010      	movs	r0, r2
 800c622:	4798      	blx	r3
 800c624:	0003      	movs	r3, r0
 800c626:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c628:	e0a1      	b.n	800c76e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c62a:	683a      	ldr	r2, [r7, #0]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	0011      	movs	r1, r2
 800c630:	0018      	movs	r0, r3
 800c632:	f000 fb01 	bl	800cc38 <USBD_CtlError>
            err++;
 800c636:	210b      	movs	r1, #11
 800c638:	187b      	adds	r3, r7, r1
 800c63a:	781a      	ldrb	r2, [r3, #0]
 800c63c:	187b      	adds	r3, r7, r1
 800c63e:	3201      	adds	r2, #1
 800c640:	701a      	strb	r2, [r3, #0]
          break;
 800c642:	e094      	b.n	800c76e <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	23ac      	movs	r3, #172	; 0xac
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	58d3      	ldr	r3, [r2, r3]
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d00d      	beq.n	800c66e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	23ac      	movs	r3, #172	; 0xac
 800c656:	009b      	lsls	r3, r3, #2
 800c658:	58d3      	ldr	r3, [r2, r3]
 800c65a:	68db      	ldr	r3, [r3, #12]
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	7c12      	ldrb	r2, [r2, #16]
 800c660:	2108      	movs	r1, #8
 800c662:	1879      	adds	r1, r7, r1
 800c664:	0010      	movs	r0, r2
 800c666:	4798      	blx	r3
 800c668:	0003      	movs	r3, r0
 800c66a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c66c:	e07f      	b.n	800c76e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c66e:	683a      	ldr	r2, [r7, #0]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	0011      	movs	r1, r2
 800c674:	0018      	movs	r0, r3
 800c676:	f000 fadf 	bl	800cc38 <USBD_CtlError>
            err++;
 800c67a:	210b      	movs	r1, #11
 800c67c:	187b      	adds	r3, r7, r1
 800c67e:	781a      	ldrb	r2, [r3, #0]
 800c680:	187b      	adds	r3, r7, r1
 800c682:	3201      	adds	r2, #1
 800c684:	701a      	strb	r2, [r3, #0]
          break;
 800c686:	e072      	b.n	800c76e <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	23ac      	movs	r3, #172	; 0xac
 800c68c:	009b      	lsls	r3, r3, #2
 800c68e:	58d3      	ldr	r3, [r2, r3]
 800c690:	691b      	ldr	r3, [r3, #16]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d00d      	beq.n	800c6b2 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	23ac      	movs	r3, #172	; 0xac
 800c69a:	009b      	lsls	r3, r3, #2
 800c69c:	58d3      	ldr	r3, [r2, r3]
 800c69e:	691b      	ldr	r3, [r3, #16]
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	7c12      	ldrb	r2, [r2, #16]
 800c6a4:	2108      	movs	r1, #8
 800c6a6:	1879      	adds	r1, r7, r1
 800c6a8:	0010      	movs	r0, r2
 800c6aa:	4798      	blx	r3
 800c6ac:	0003      	movs	r3, r0
 800c6ae:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6b0:	e05d      	b.n	800c76e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c6b2:	683a      	ldr	r2, [r7, #0]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	0011      	movs	r1, r2
 800c6b8:	0018      	movs	r0, r3
 800c6ba:	f000 fabd 	bl	800cc38 <USBD_CtlError>
            err++;
 800c6be:	210b      	movs	r1, #11
 800c6c0:	187b      	adds	r3, r7, r1
 800c6c2:	781a      	ldrb	r2, [r3, #0]
 800c6c4:	187b      	adds	r3, r7, r1
 800c6c6:	3201      	adds	r2, #1
 800c6c8:	701a      	strb	r2, [r3, #0]
          break;
 800c6ca:	e050      	b.n	800c76e <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c6cc:	687a      	ldr	r2, [r7, #4]
 800c6ce:	23ac      	movs	r3, #172	; 0xac
 800c6d0:	009b      	lsls	r3, r3, #2
 800c6d2:	58d3      	ldr	r3, [r2, r3]
 800c6d4:	695b      	ldr	r3, [r3, #20]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d00d      	beq.n	800c6f6 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c6da:	687a      	ldr	r2, [r7, #4]
 800c6dc:	23ac      	movs	r3, #172	; 0xac
 800c6de:	009b      	lsls	r3, r3, #2
 800c6e0:	58d3      	ldr	r3, [r2, r3]
 800c6e2:	695b      	ldr	r3, [r3, #20]
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	7c12      	ldrb	r2, [r2, #16]
 800c6e8:	2108      	movs	r1, #8
 800c6ea:	1879      	adds	r1, r7, r1
 800c6ec:	0010      	movs	r0, r2
 800c6ee:	4798      	blx	r3
 800c6f0:	0003      	movs	r3, r0
 800c6f2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6f4:	e03b      	b.n	800c76e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	0011      	movs	r1, r2
 800c6fc:	0018      	movs	r0, r3
 800c6fe:	f000 fa9b 	bl	800cc38 <USBD_CtlError>
            err++;
 800c702:	210b      	movs	r1, #11
 800c704:	187b      	adds	r3, r7, r1
 800c706:	781a      	ldrb	r2, [r3, #0]
 800c708:	187b      	adds	r3, r7, r1
 800c70a:	3201      	adds	r2, #1
 800c70c:	701a      	strb	r2, [r3, #0]
          break;
 800c70e:	e02e      	b.n	800c76e <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	23ac      	movs	r3, #172	; 0xac
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	58d3      	ldr	r3, [r2, r3]
 800c718:	699b      	ldr	r3, [r3, #24]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d00d      	beq.n	800c73a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	23ac      	movs	r3, #172	; 0xac
 800c722:	009b      	lsls	r3, r3, #2
 800c724:	58d3      	ldr	r3, [r2, r3]
 800c726:	699b      	ldr	r3, [r3, #24]
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	7c12      	ldrb	r2, [r2, #16]
 800c72c:	2108      	movs	r1, #8
 800c72e:	1879      	adds	r1, r7, r1
 800c730:	0010      	movs	r0, r2
 800c732:	4798      	blx	r3
 800c734:	0003      	movs	r3, r0
 800c736:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c738:	e019      	b.n	800c76e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800c73a:	683a      	ldr	r2, [r7, #0]
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	0011      	movs	r1, r2
 800c740:	0018      	movs	r0, r3
 800c742:	f000 fa79 	bl	800cc38 <USBD_CtlError>
            err++;
 800c746:	210b      	movs	r1, #11
 800c748:	187b      	adds	r3, r7, r1
 800c74a:	781a      	ldrb	r2, [r3, #0]
 800c74c:	187b      	adds	r3, r7, r1
 800c74e:	3201      	adds	r2, #1
 800c750:	701a      	strb	r2, [r3, #0]
          break;
 800c752:	e00c      	b.n	800c76e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c754:	683a      	ldr	r2, [r7, #0]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	0011      	movs	r1, r2
 800c75a:	0018      	movs	r0, r3
 800c75c:	f000 fa6c 	bl	800cc38 <USBD_CtlError>
          err++;
 800c760:	210b      	movs	r1, #11
 800c762:	187b      	adds	r3, r7, r1
 800c764:	781a      	ldrb	r2, [r3, #0]
 800c766:	187b      	adds	r3, r7, r1
 800c768:	3201      	adds	r2, #1
 800c76a:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800c76c:	e04b      	b.n	800c806 <USBD_GetDescriptor+0x2fa>
 800c76e:	e04a      	b.n	800c806 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	7c1b      	ldrb	r3, [r3, #16]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d10b      	bne.n	800c790 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	23ad      	movs	r3, #173	; 0xad
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	58d3      	ldr	r3, [r2, r3]
 800c780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c782:	2208      	movs	r2, #8
 800c784:	18ba      	adds	r2, r7, r2
 800c786:	0010      	movs	r0, r2
 800c788:	4798      	blx	r3
 800c78a:	0003      	movs	r3, r0
 800c78c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c78e:	e03a      	b.n	800c806 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800c790:	683a      	ldr	r2, [r7, #0]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	0011      	movs	r1, r2
 800c796:	0018      	movs	r0, r3
 800c798:	f000 fa4e 	bl	800cc38 <USBD_CtlError>
        err++;
 800c79c:	210b      	movs	r1, #11
 800c79e:	187b      	adds	r3, r7, r1
 800c7a0:	781a      	ldrb	r2, [r3, #0]
 800c7a2:	187b      	adds	r3, r7, r1
 800c7a4:	3201      	adds	r2, #1
 800c7a6:	701a      	strb	r2, [r3, #0]
      break;
 800c7a8:	e02d      	b.n	800c806 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	7c1b      	ldrb	r3, [r3, #16]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d10f      	bne.n	800c7d2 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	23ad      	movs	r3, #173	; 0xad
 800c7b6:	009b      	lsls	r3, r3, #2
 800c7b8:	58d3      	ldr	r3, [r2, r3]
 800c7ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7bc:	2208      	movs	r2, #8
 800c7be:	18ba      	adds	r2, r7, r2
 800c7c0:	0010      	movs	r0, r2
 800c7c2:	4798      	blx	r3
 800c7c4:	0003      	movs	r3, r0
 800c7c6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	2207      	movs	r2, #7
 800c7ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7d0:	e019      	b.n	800c806 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800c7d2:	683a      	ldr	r2, [r7, #0]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	0011      	movs	r1, r2
 800c7d8:	0018      	movs	r0, r3
 800c7da:	f000 fa2d 	bl	800cc38 <USBD_CtlError>
        err++;
 800c7de:	210b      	movs	r1, #11
 800c7e0:	187b      	adds	r3, r7, r1
 800c7e2:	781a      	ldrb	r2, [r3, #0]
 800c7e4:	187b      	adds	r3, r7, r1
 800c7e6:	3201      	adds	r2, #1
 800c7e8:	701a      	strb	r2, [r3, #0]
      break;
 800c7ea:	e00c      	b.n	800c806 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800c7ec:	683a      	ldr	r2, [r7, #0]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	0011      	movs	r1, r2
 800c7f2:	0018      	movs	r0, r3
 800c7f4:	f000 fa20 	bl	800cc38 <USBD_CtlError>
      err++;
 800c7f8:	210b      	movs	r1, #11
 800c7fa:	187b      	adds	r3, r7, r1
 800c7fc:	781a      	ldrb	r2, [r3, #0]
 800c7fe:	187b      	adds	r3, r7, r1
 800c800:	3201      	adds	r2, #1
 800c802:	701a      	strb	r2, [r3, #0]
      break;
 800c804:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800c806:	230b      	movs	r3, #11
 800c808:	18fb      	adds	r3, r7, r3
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d127      	bne.n	800c860 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c810:	2108      	movs	r1, #8
 800c812:	187b      	adds	r3, r7, r1
 800c814:	881b      	ldrh	r3, [r3, #0]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d019      	beq.n	800c84e <USBD_GetDescriptor+0x342>
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	88db      	ldrh	r3, [r3, #6]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d015      	beq.n	800c84e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	88da      	ldrh	r2, [r3, #6]
 800c826:	187b      	adds	r3, r7, r1
 800c828:	881b      	ldrh	r3, [r3, #0]
 800c82a:	1c18      	adds	r0, r3, #0
 800c82c:	1c11      	adds	r1, r2, #0
 800c82e:	b28a      	uxth	r2, r1
 800c830:	b283      	uxth	r3, r0
 800c832:	429a      	cmp	r2, r3
 800c834:	d900      	bls.n	800c838 <USBD_GetDescriptor+0x32c>
 800c836:	1c01      	adds	r1, r0, #0
 800c838:	b28a      	uxth	r2, r1
 800c83a:	2108      	movs	r1, #8
 800c83c:	187b      	adds	r3, r7, r1
 800c83e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c840:	187b      	adds	r3, r7, r1
 800c842:	881a      	ldrh	r2, [r3, #0]
 800c844:	68f9      	ldr	r1, [r7, #12]
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	0018      	movs	r0, r3
 800c84a:	f000 fa73 	bl	800cd34 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	88db      	ldrh	r3, [r3, #6]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d105      	bne.n	800c862 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	0018      	movs	r0, r3
 800c85a:	f000 fad5 	bl	800ce08 <USBD_CtlSendStatus>
 800c85e:	e000      	b.n	800c862 <USBD_GetDescriptor+0x356>
    return;
 800c860:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800c862:	46bd      	mov	sp, r7
 800c864:	b004      	add	sp, #16
 800c866:	bd80      	pop	{r7, pc}
 800c868:	0800e518 	.word	0x0800e518
 800c86c:	0800e538 	.word	0x0800e538

0800c870 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c870:	b590      	push	{r4, r7, lr}
 800c872:	b085      	sub	sp, #20
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	889b      	ldrh	r3, [r3, #4]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d13d      	bne.n	800c8fe <USBD_SetAddress+0x8e>
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	88db      	ldrh	r3, [r3, #6]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d139      	bne.n	800c8fe <USBD_SetAddress+0x8e>
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	885b      	ldrh	r3, [r3, #2]
 800c88e:	2b7f      	cmp	r3, #127	; 0x7f
 800c890:	d835      	bhi.n	800c8fe <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	885b      	ldrh	r3, [r3, #2]
 800c896:	b2da      	uxtb	r2, r3
 800c898:	230f      	movs	r3, #15
 800c89a:	18fb      	adds	r3, r7, r3
 800c89c:	217f      	movs	r1, #127	; 0x7f
 800c89e:	400a      	ands	r2, r1
 800c8a0:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	23a7      	movs	r3, #167	; 0xa7
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	5cd3      	ldrb	r3, [r2, r3]
 800c8aa:	2b03      	cmp	r3, #3
 800c8ac:	d106      	bne.n	800c8bc <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800c8ae:	683a      	ldr	r2, [r7, #0]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	0011      	movs	r1, r2
 800c8b4:	0018      	movs	r0, r3
 800c8b6:	f000 f9bf 	bl	800cc38 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8ba:	e027      	b.n	800c90c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	240f      	movs	r4, #15
 800c8c0:	193a      	adds	r2, r7, r4
 800c8c2:	4914      	ldr	r1, [pc, #80]	; (800c914 <USBD_SetAddress+0xa4>)
 800c8c4:	7812      	ldrb	r2, [r2, #0]
 800c8c6:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c8c8:	193b      	adds	r3, r7, r4
 800c8ca:	781a      	ldrb	r2, [r3, #0]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	0011      	movs	r1, r2
 800c8d0:	0018      	movs	r0, r3
 800c8d2:	f000 ff25 	bl	800d720 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	0018      	movs	r0, r3
 800c8da:	f000 fa95 	bl	800ce08 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c8de:	193b      	adds	r3, r7, r4
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d005      	beq.n	800c8f2 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8e6:	687a      	ldr	r2, [r7, #4]
 800c8e8:	23a7      	movs	r3, #167	; 0xa7
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	2102      	movs	r1, #2
 800c8ee:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8f0:	e00c      	b.n	800c90c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	23a7      	movs	r3, #167	; 0xa7
 800c8f6:	009b      	lsls	r3, r3, #2
 800c8f8:	2101      	movs	r1, #1
 800c8fa:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8fc:	e006      	b.n	800c90c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c8fe:	683a      	ldr	r2, [r7, #0]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	0011      	movs	r1, r2
 800c904:	0018      	movs	r0, r3
 800c906:	f000 f997 	bl	800cc38 <USBD_CtlError>
  }
}
 800c90a:	46c0      	nop			; (mov r8, r8)
 800c90c:	46c0      	nop			; (mov r8, r8)
 800c90e:	46bd      	mov	sp, r7
 800c910:	b005      	add	sp, #20
 800c912:	bd90      	pop	{r4, r7, pc}
 800c914:	0000029e 	.word	0x0000029e

0800c918 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	885b      	ldrh	r3, [r3, #2]
 800c926:	b2da      	uxtb	r2, r3
 800c928:	4b4c      	ldr	r3, [pc, #304]	; (800ca5c <USBD_SetConfig+0x144>)
 800c92a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c92c:	4b4b      	ldr	r3, [pc, #300]	; (800ca5c <USBD_SetConfig+0x144>)
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	2b01      	cmp	r3, #1
 800c932:	d906      	bls.n	800c942 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800c934:	683a      	ldr	r2, [r7, #0]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	0011      	movs	r1, r2
 800c93a:	0018      	movs	r0, r3
 800c93c:	f000 f97c 	bl	800cc38 <USBD_CtlError>
 800c940:	e088      	b.n	800ca54 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	23a7      	movs	r3, #167	; 0xa7
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	5cd3      	ldrb	r3, [r2, r3]
 800c94a:	2b02      	cmp	r3, #2
 800c94c:	d002      	beq.n	800c954 <USBD_SetConfig+0x3c>
 800c94e:	2b03      	cmp	r3, #3
 800c950:	d029      	beq.n	800c9a6 <USBD_SetConfig+0x8e>
 800c952:	e071      	b.n	800ca38 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c954:	4b41      	ldr	r3, [pc, #260]	; (800ca5c <USBD_SetConfig+0x144>)
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d01f      	beq.n	800c99c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800c95c:	4b3f      	ldr	r3, [pc, #252]	; (800ca5c <USBD_SetConfig+0x144>)
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	001a      	movs	r2, r3
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	23a7      	movs	r3, #167	; 0xa7
 800c96a:	009b      	lsls	r3, r3, #2
 800c96c:	2103      	movs	r1, #3
 800c96e:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c970:	4b3a      	ldr	r3, [pc, #232]	; (800ca5c <USBD_SetConfig+0x144>)
 800c972:	781a      	ldrb	r2, [r3, #0]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	0011      	movs	r1, r2
 800c978:	0018      	movs	r0, r3
 800c97a:	f7ff f8c6 	bl	800bb0a <USBD_SetClassConfig>
 800c97e:	0003      	movs	r3, r0
 800c980:	2b02      	cmp	r3, #2
 800c982:	d106      	bne.n	800c992 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800c984:	683a      	ldr	r2, [r7, #0]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	0011      	movs	r1, r2
 800c98a:	0018      	movs	r0, r3
 800c98c:	f000 f954 	bl	800cc38 <USBD_CtlError>
            return;
 800c990:	e060      	b.n	800ca54 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	0018      	movs	r0, r3
 800c996:	f000 fa37 	bl	800ce08 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c99a:	e05b      	b.n	800ca54 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	0018      	movs	r0, r3
 800c9a0:	f000 fa32 	bl	800ce08 <USBD_CtlSendStatus>
        break;
 800c9a4:	e056      	b.n	800ca54 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c9a6:	4b2d      	ldr	r3, [pc, #180]	; (800ca5c <USBD_SetConfig+0x144>)
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d115      	bne.n	800c9da <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	23a7      	movs	r3, #167	; 0xa7
 800c9b2:	009b      	lsls	r3, r3, #2
 800c9b4:	2102      	movs	r1, #2
 800c9b6:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800c9b8:	4b28      	ldr	r3, [pc, #160]	; (800ca5c <USBD_SetConfig+0x144>)
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	001a      	movs	r2, r3
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c9c2:	4b26      	ldr	r3, [pc, #152]	; (800ca5c <USBD_SetConfig+0x144>)
 800c9c4:	781a      	ldrb	r2, [r3, #0]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	0011      	movs	r1, r2
 800c9ca:	0018      	movs	r0, r3
 800c9cc:	f7ff f8c4 	bl	800bb58 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	0018      	movs	r0, r3
 800c9d4:	f000 fa18 	bl	800ce08 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c9d8:	e03c      	b.n	800ca54 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800c9da:	4b20      	ldr	r3, [pc, #128]	; (800ca5c <USBD_SetConfig+0x144>)
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	001a      	movs	r2, r3
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d022      	beq.n	800ca2e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	b2da      	uxtb	r2, r3
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	0011      	movs	r1, r2
 800c9f2:	0018      	movs	r0, r3
 800c9f4:	f7ff f8b0 	bl	800bb58 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c9f8:	4b18      	ldr	r3, [pc, #96]	; (800ca5c <USBD_SetConfig+0x144>)
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	001a      	movs	r2, r3
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ca02:	4b16      	ldr	r3, [pc, #88]	; (800ca5c <USBD_SetConfig+0x144>)
 800ca04:	781a      	ldrb	r2, [r3, #0]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	0011      	movs	r1, r2
 800ca0a:	0018      	movs	r0, r3
 800ca0c:	f7ff f87d 	bl	800bb0a <USBD_SetClassConfig>
 800ca10:	0003      	movs	r3, r0
 800ca12:	2b02      	cmp	r3, #2
 800ca14:	d106      	bne.n	800ca24 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800ca16:	683a      	ldr	r2, [r7, #0]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	0011      	movs	r1, r2
 800ca1c:	0018      	movs	r0, r3
 800ca1e:	f000 f90b 	bl	800cc38 <USBD_CtlError>
            return;
 800ca22:	e017      	b.n	800ca54 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	0018      	movs	r0, r3
 800ca28:	f000 f9ee 	bl	800ce08 <USBD_CtlSendStatus>
        break;
 800ca2c:	e012      	b.n	800ca54 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	0018      	movs	r0, r3
 800ca32:	f000 f9e9 	bl	800ce08 <USBD_CtlSendStatus>
        break;
 800ca36:	e00d      	b.n	800ca54 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800ca38:	683a      	ldr	r2, [r7, #0]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	0011      	movs	r1, r2
 800ca3e:	0018      	movs	r0, r3
 800ca40:	f000 f8fa 	bl	800cc38 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800ca44:	4b05      	ldr	r3, [pc, #20]	; (800ca5c <USBD_SetConfig+0x144>)
 800ca46:	781a      	ldrb	r2, [r3, #0]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	0011      	movs	r1, r2
 800ca4c:	0018      	movs	r0, r3
 800ca4e:	f7ff f883 	bl	800bb58 <USBD_ClrClassConfig>
        break;
 800ca52:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800ca54:	46bd      	mov	sp, r7
 800ca56:	b002      	add	sp, #8
 800ca58:	bd80      	pop	{r7, pc}
 800ca5a:	46c0      	nop			; (mov r8, r8)
 800ca5c:	200006d0 	.word	0x200006d0

0800ca60 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b082      	sub	sp, #8
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	88db      	ldrh	r3, [r3, #6]
 800ca6e:	2b01      	cmp	r3, #1
 800ca70:	d006      	beq.n	800ca80 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800ca72:	683a      	ldr	r2, [r7, #0]
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	0011      	movs	r1, r2
 800ca78:	0018      	movs	r0, r3
 800ca7a:	f000 f8dd 	bl	800cc38 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ca7e:	e026      	b.n	800cace <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800ca80:	687a      	ldr	r2, [r7, #4]
 800ca82:	23a7      	movs	r3, #167	; 0xa7
 800ca84:	009b      	lsls	r3, r3, #2
 800ca86:	5cd3      	ldrb	r3, [r2, r3]
 800ca88:	2b02      	cmp	r3, #2
 800ca8a:	dc02      	bgt.n	800ca92 <USBD_GetConfig+0x32>
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	dc03      	bgt.n	800ca98 <USBD_GetConfig+0x38>
 800ca90:	e016      	b.n	800cac0 <USBD_GetConfig+0x60>
 800ca92:	2b03      	cmp	r3, #3
 800ca94:	d00c      	beq.n	800cab0 <USBD_GetConfig+0x50>
 800ca96:	e013      	b.n	800cac0 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	3308      	adds	r3, #8
 800caa2:	0019      	movs	r1, r3
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2201      	movs	r2, #1
 800caa8:	0018      	movs	r0, r3
 800caaa:	f000 f943 	bl	800cd34 <USBD_CtlSendData>
        break;
 800caae:	e00e      	b.n	800cace <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	1d19      	adds	r1, r3, #4
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2201      	movs	r2, #1
 800cab8:	0018      	movs	r0, r3
 800caba:	f000 f93b 	bl	800cd34 <USBD_CtlSendData>
        break;
 800cabe:	e006      	b.n	800cace <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800cac0:	683a      	ldr	r2, [r7, #0]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	0011      	movs	r1, r2
 800cac6:	0018      	movs	r0, r3
 800cac8:	f000 f8b6 	bl	800cc38 <USBD_CtlError>
        break;
 800cacc:	46c0      	nop			; (mov r8, r8)
}
 800cace:	46c0      	nop			; (mov r8, r8)
 800cad0:	46bd      	mov	sp, r7
 800cad2:	b002      	add	sp, #8
 800cad4:	bd80      	pop	{r7, pc}

0800cad6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cad6:	b580      	push	{r7, lr}
 800cad8:	b082      	sub	sp, #8
 800cada:	af00      	add	r7, sp, #0
 800cadc:	6078      	str	r0, [r7, #4]
 800cade:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	23a7      	movs	r3, #167	; 0xa7
 800cae4:	009b      	lsls	r3, r3, #2
 800cae6:	5cd3      	ldrb	r3, [r2, r3]
 800cae8:	3b01      	subs	r3, #1
 800caea:	2b02      	cmp	r3, #2
 800caec:	d822      	bhi.n	800cb34 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	88db      	ldrh	r3, [r3, #6]
 800caf2:	2b02      	cmp	r3, #2
 800caf4:	d006      	beq.n	800cb04 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800caf6:	683a      	ldr	r2, [r7, #0]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	0011      	movs	r1, r2
 800cafc:	0018      	movs	r0, r3
 800cafe:	f000 f89b 	bl	800cc38 <USBD_CtlError>
        break;
 800cb02:	e01e      	b.n	800cb42 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2201      	movs	r2, #1
 800cb08:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	23a9      	movs	r3, #169	; 0xa9
 800cb0e:	009b      	lsls	r3, r3, #2
 800cb10:	58d3      	ldr	r3, [r2, r3]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d005      	beq.n	800cb22 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	68db      	ldr	r3, [r3, #12]
 800cb1a:	2202      	movs	r2, #2
 800cb1c:	431a      	orrs	r2, r3
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	330c      	adds	r3, #12
 800cb26:	0019      	movs	r1, r3
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2202      	movs	r2, #2
 800cb2c:	0018      	movs	r0, r3
 800cb2e:	f000 f901 	bl	800cd34 <USBD_CtlSendData>
      break;
 800cb32:	e006      	b.n	800cb42 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800cb34:	683a      	ldr	r2, [r7, #0]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	0011      	movs	r1, r2
 800cb3a:	0018      	movs	r0, r3
 800cb3c:	f000 f87c 	bl	800cc38 <USBD_CtlError>
      break;
 800cb40:	46c0      	nop			; (mov r8, r8)
  }
}
 800cb42:	46c0      	nop			; (mov r8, r8)
 800cb44:	46bd      	mov	sp, r7
 800cb46:	b002      	add	sp, #8
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b082      	sub	sp, #8
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
 800cb52:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	885b      	ldrh	r3, [r3, #2]
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	d108      	bne.n	800cb6e <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	23a9      	movs	r3, #169	; 0xa9
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	2101      	movs	r1, #1
 800cb64:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	0018      	movs	r0, r3
 800cb6a:	f000 f94d 	bl	800ce08 <USBD_CtlSendStatus>
  }
}
 800cb6e:	46c0      	nop			; (mov r8, r8)
 800cb70:	46bd      	mov	sp, r7
 800cb72:	b002      	add	sp, #8
 800cb74:	bd80      	pop	{r7, pc}

0800cb76 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800cb76:	b580      	push	{r7, lr}
 800cb78:	b082      	sub	sp, #8
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
 800cb7e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	23a7      	movs	r3, #167	; 0xa7
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	5cd3      	ldrb	r3, [r2, r3]
 800cb88:	3b01      	subs	r3, #1
 800cb8a:	2b02      	cmp	r3, #2
 800cb8c:	d80d      	bhi.n	800cbaa <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	885b      	ldrh	r3, [r3, #2]
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	d110      	bne.n	800cbb8 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800cb96:	687a      	ldr	r2, [r7, #4]
 800cb98:	23a9      	movs	r3, #169	; 0xa9
 800cb9a:	009b      	lsls	r3, r3, #2
 800cb9c:	2100      	movs	r1, #0
 800cb9e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	0018      	movs	r0, r3
 800cba4:	f000 f930 	bl	800ce08 <USBD_CtlSendStatus>
      }
      break;
 800cba8:	e006      	b.n	800cbb8 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800cbaa:	683a      	ldr	r2, [r7, #0]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	0011      	movs	r1, r2
 800cbb0:	0018      	movs	r0, r3
 800cbb2:	f000 f841 	bl	800cc38 <USBD_CtlError>
      break;
 800cbb6:	e000      	b.n	800cbba <USBD_ClrFeature+0x44>
      break;
 800cbb8:	46c0      	nop			; (mov r8, r8)
  }
}
 800cbba:	46c0      	nop			; (mov r8, r8)
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	b002      	add	sp, #8
 800cbc0:	bd80      	pop	{r7, pc}

0800cbc2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b082      	sub	sp, #8
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
 800cbca:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	781a      	ldrb	r2, [r3, #0]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	785a      	ldrb	r2, [r3, #1]
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	3302      	adds	r3, #2
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	b29a      	uxth	r2, r3
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	3303      	adds	r3, #3
 800cbe8:	781b      	ldrb	r3, [r3, #0]
 800cbea:	b29b      	uxth	r3, r3
 800cbec:	021b      	lsls	r3, r3, #8
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	18d3      	adds	r3, r2, r3
 800cbf2:	b29a      	uxth	r2, r3
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	3304      	adds	r3, #4
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	b29a      	uxth	r2, r3
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	3305      	adds	r3, #5
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	021b      	lsls	r3, r3, #8
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	18d3      	adds	r3, r2, r3
 800cc0e:	b29a      	uxth	r2, r3
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	3306      	adds	r3, #6
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	b29a      	uxth	r2, r3
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	3307      	adds	r3, #7
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	b29b      	uxth	r3, r3
 800cc24:	021b      	lsls	r3, r3, #8
 800cc26:	b29b      	uxth	r3, r3
 800cc28:	18d3      	adds	r3, r2, r3
 800cc2a:	b29a      	uxth	r2, r3
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	80da      	strh	r2, [r3, #6]

}
 800cc30:	46c0      	nop			; (mov r8, r8)
 800cc32:	46bd      	mov	sp, r7
 800cc34:	b002      	add	sp, #8
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
 800cc40:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2180      	movs	r1, #128	; 0x80
 800cc46:	0018      	movs	r0, r3
 800cc48:	f000 fce3 	bl	800d612 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2100      	movs	r1, #0
 800cc50:	0018      	movs	r0, r3
 800cc52:	f000 fcde 	bl	800d612 <USBD_LL_StallEP>
}
 800cc56:	46c0      	nop			; (mov r8, r8)
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	b002      	add	sp, #8
 800cc5c:	bd80      	pop	{r7, pc}

0800cc5e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cc5e:	b590      	push	{r4, r7, lr}
 800cc60:	b087      	sub	sp, #28
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	60f8      	str	r0, [r7, #12]
 800cc66:	60b9      	str	r1, [r7, #8]
 800cc68:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cc6a:	2417      	movs	r4, #23
 800cc6c:	193b      	adds	r3, r7, r4
 800cc6e:	2200      	movs	r2, #0
 800cc70:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d03c      	beq.n	800ccf2 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	0018      	movs	r0, r3
 800cc7c:	f000 f83d 	bl	800ccfa <USBD_GetLen>
 800cc80:	0003      	movs	r3, r0
 800cc82:	3301      	adds	r3, #1
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	18db      	adds	r3, r3, r3
 800cc88:	b29a      	uxth	r2, r3
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800cc8e:	193b      	adds	r3, r7, r4
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	193a      	adds	r2, r7, r4
 800cc94:	1c59      	adds	r1, r3, #1
 800cc96:	7011      	strb	r1, [r2, #0]
 800cc98:	001a      	movs	r2, r3
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	189b      	adds	r3, r3, r2
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	7812      	ldrb	r2, [r2, #0]
 800cca2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800cca4:	193b      	adds	r3, r7, r4
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	193a      	adds	r2, r7, r4
 800ccaa:	1c59      	adds	r1, r3, #1
 800ccac:	7011      	strb	r1, [r2, #0]
 800ccae:	001a      	movs	r2, r3
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	189b      	adds	r3, r3, r2
 800ccb4:	2203      	movs	r2, #3
 800ccb6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ccb8:	e017      	b.n	800ccea <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	1c5a      	adds	r2, r3, #1
 800ccbe:	60fa      	str	r2, [r7, #12]
 800ccc0:	2417      	movs	r4, #23
 800ccc2:	193a      	adds	r2, r7, r4
 800ccc4:	7812      	ldrb	r2, [r2, #0]
 800ccc6:	1939      	adds	r1, r7, r4
 800ccc8:	1c50      	adds	r0, r2, #1
 800ccca:	7008      	strb	r0, [r1, #0]
 800cccc:	0011      	movs	r1, r2
 800ccce:	68ba      	ldr	r2, [r7, #8]
 800ccd0:	1852      	adds	r2, r2, r1
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ccd6:	193b      	adds	r3, r7, r4
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	193a      	adds	r2, r7, r4
 800ccdc:	1c59      	adds	r1, r3, #1
 800ccde:	7011      	strb	r1, [r2, #0]
 800cce0:	001a      	movs	r2, r3
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	189b      	adds	r3, r3, r2
 800cce6:	2200      	movs	r2, #0
 800cce8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d1e3      	bne.n	800ccba <USBD_GetString+0x5c>
    }
  }
}
 800ccf2:	46c0      	nop			; (mov r8, r8)
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	b007      	add	sp, #28
 800ccf8:	bd90      	pop	{r4, r7, pc}

0800ccfa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ccfa:	b580      	push	{r7, lr}
 800ccfc:	b084      	sub	sp, #16
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cd02:	230f      	movs	r3, #15
 800cd04:	18fb      	adds	r3, r7, r3
 800cd06:	2200      	movs	r2, #0
 800cd08:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800cd0a:	e008      	b.n	800cd1e <USBD_GetLen+0x24>
  {
    len++;
 800cd0c:	210f      	movs	r1, #15
 800cd0e:	187b      	adds	r3, r7, r1
 800cd10:	781a      	ldrb	r2, [r3, #0]
 800cd12:	187b      	adds	r3, r7, r1
 800cd14:	3201      	adds	r2, #1
 800cd16:	701a      	strb	r2, [r3, #0]
    buf++;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d1f2      	bne.n	800cd0c <USBD_GetLen+0x12>
  }

  return len;
 800cd26:	230f      	movs	r3, #15
 800cd28:	18fb      	adds	r3, r7, r3
 800cd2a:	781b      	ldrb	r3, [r3, #0]
}
 800cd2c:	0018      	movs	r0, r3
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	b004      	add	sp, #16
 800cd32:	bd80      	pop	{r7, pc}

0800cd34 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b084      	sub	sp, #16
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	1dbb      	adds	r3, r7, #6
 800cd40:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cd42:	68fa      	ldr	r2, [r7, #12]
 800cd44:	23a5      	movs	r3, #165	; 0xa5
 800cd46:	009b      	lsls	r3, r3, #2
 800cd48:	2102      	movs	r1, #2
 800cd4a:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800cd4c:	1dbb      	adds	r3, r7, #6
 800cd4e:	881a      	ldrh	r2, [r3, #0]
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800cd54:	1dbb      	adds	r3, r7, #6
 800cd56:	881a      	ldrh	r2, [r3, #0]
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd5c:	1dbb      	adds	r3, r7, #6
 800cd5e:	881b      	ldrh	r3, [r3, #0]
 800cd60:	68ba      	ldr	r2, [r7, #8]
 800cd62:	68f8      	ldr	r0, [r7, #12]
 800cd64:	2100      	movs	r1, #0
 800cd66:	f000 fd06 	bl	800d776 <USBD_LL_Transmit>

  return USBD_OK;
 800cd6a:	2300      	movs	r3, #0
}
 800cd6c:	0018      	movs	r0, r3
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	b004      	add	sp, #16
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b084      	sub	sp, #16
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	60b9      	str	r1, [r7, #8]
 800cd7e:	1dbb      	adds	r3, r7, #6
 800cd80:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd82:	1dbb      	adds	r3, r7, #6
 800cd84:	881b      	ldrh	r3, [r3, #0]
 800cd86:	68ba      	ldr	r2, [r7, #8]
 800cd88:	68f8      	ldr	r0, [r7, #12]
 800cd8a:	2100      	movs	r1, #0
 800cd8c:	f000 fcf3 	bl	800d776 <USBD_LL_Transmit>

  return USBD_OK;
 800cd90:	2300      	movs	r3, #0
}
 800cd92:	0018      	movs	r0, r3
 800cd94:	46bd      	mov	sp, r7
 800cd96:	b004      	add	sp, #16
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800cd9a:	b580      	push	{r7, lr}
 800cd9c:	b084      	sub	sp, #16
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	60f8      	str	r0, [r7, #12]
 800cda2:	60b9      	str	r1, [r7, #8]
 800cda4:	1dbb      	adds	r3, r7, #6
 800cda6:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	23a5      	movs	r3, #165	; 0xa5
 800cdac:	009b      	lsls	r3, r3, #2
 800cdae:	2103      	movs	r1, #3
 800cdb0:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800cdb2:	1dbb      	adds	r3, r7, #6
 800cdb4:	8819      	ldrh	r1, [r3, #0]
 800cdb6:	68fa      	ldr	r2, [r7, #12]
 800cdb8:	23ae      	movs	r3, #174	; 0xae
 800cdba:	005b      	lsls	r3, r3, #1
 800cdbc:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800cdbe:	1dbb      	adds	r3, r7, #6
 800cdc0:	8819      	ldrh	r1, [r3, #0]
 800cdc2:	68fa      	ldr	r2, [r7, #12]
 800cdc4:	23b0      	movs	r3, #176	; 0xb0
 800cdc6:	005b      	lsls	r3, r3, #1
 800cdc8:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cdca:	1dbb      	adds	r3, r7, #6
 800cdcc:	881b      	ldrh	r3, [r3, #0]
 800cdce:	68ba      	ldr	r2, [r7, #8]
 800cdd0:	68f8      	ldr	r0, [r7, #12]
 800cdd2:	2100      	movs	r1, #0
 800cdd4:	f000 fd06 	bl	800d7e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdd8:	2300      	movs	r3, #0
}
 800cdda:	0018      	movs	r0, r3
 800cddc:	46bd      	mov	sp, r7
 800cdde:	b004      	add	sp, #16
 800cde0:	bd80      	pop	{r7, pc}

0800cde2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800cde2:	b580      	push	{r7, lr}
 800cde4:	b084      	sub	sp, #16
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	60f8      	str	r0, [r7, #12]
 800cdea:	60b9      	str	r1, [r7, #8]
 800cdec:	1dbb      	adds	r3, r7, #6
 800cdee:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cdf0:	1dbb      	adds	r3, r7, #6
 800cdf2:	881b      	ldrh	r3, [r3, #0]
 800cdf4:	68ba      	ldr	r2, [r7, #8]
 800cdf6:	68f8      	ldr	r0, [r7, #12]
 800cdf8:	2100      	movs	r1, #0
 800cdfa:	f000 fcf3 	bl	800d7e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdfe:	2300      	movs	r3, #0
}
 800ce00:	0018      	movs	r0, r3
 800ce02:	46bd      	mov	sp, r7
 800ce04:	b004      	add	sp, #16
 800ce06:	bd80      	pop	{r7, pc}

0800ce08 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	23a5      	movs	r3, #165	; 0xa5
 800ce14:	009b      	lsls	r3, r3, #2
 800ce16:	2104      	movs	r1, #4
 800ce18:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	2200      	movs	r2, #0
 800ce20:	2100      	movs	r1, #0
 800ce22:	f000 fca8 	bl	800d776 <USBD_LL_Transmit>

  return USBD_OK;
 800ce26:	2300      	movs	r3, #0
}
 800ce28:	0018      	movs	r0, r3
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	b002      	add	sp, #8
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ce38:	687a      	ldr	r2, [r7, #4]
 800ce3a:	23a5      	movs	r3, #165	; 0xa5
 800ce3c:	009b      	lsls	r3, r3, #2
 800ce3e:	2105      	movs	r1, #5
 800ce40:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	2300      	movs	r3, #0
 800ce46:	2200      	movs	r2, #0
 800ce48:	2100      	movs	r1, #0
 800ce4a:	f000 fccb 	bl	800d7e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce4e:	2300      	movs	r3, #0
}
 800ce50:	0018      	movs	r0, r3
 800ce52:	46bd      	mov	sp, r7
 800ce54:	b002      	add	sp, #8
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ce5c:	4914      	ldr	r1, [pc, #80]	; (800ceb0 <MX_USB_DEVICE_Init+0x58>)
 800ce5e:	4b15      	ldr	r3, [pc, #84]	; (800ceb4 <MX_USB_DEVICE_Init+0x5c>)
 800ce60:	2200      	movs	r2, #0
 800ce62:	0018      	movs	r0, r3
 800ce64:	f7fe fdea 	bl	800ba3c <USBD_Init>
 800ce68:	1e03      	subs	r3, r0, #0
 800ce6a:	d001      	beq.n	800ce70 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ce6c:	f7f5 fba4 	bl	80025b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ce70:	4a11      	ldr	r2, [pc, #68]	; (800ceb8 <MX_USB_DEVICE_Init+0x60>)
 800ce72:	4b10      	ldr	r3, [pc, #64]	; (800ceb4 <MX_USB_DEVICE_Init+0x5c>)
 800ce74:	0011      	movs	r1, r2
 800ce76:	0018      	movs	r0, r3
 800ce78:	f7fe fe11 	bl	800ba9e <USBD_RegisterClass>
 800ce7c:	1e03      	subs	r3, r0, #0
 800ce7e:	d001      	beq.n	800ce84 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800ce80:	f7f5 fb9a 	bl	80025b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ce84:	4a0d      	ldr	r2, [pc, #52]	; (800cebc <MX_USB_DEVICE_Init+0x64>)
 800ce86:	4b0b      	ldr	r3, [pc, #44]	; (800ceb4 <MX_USB_DEVICE_Init+0x5c>)
 800ce88:	0011      	movs	r1, r2
 800ce8a:	0018      	movs	r0, r3
 800ce8c:	f7fe fd26 	bl	800b8dc <USBD_CDC_RegisterInterface>
 800ce90:	1e03      	subs	r3, r0, #0
 800ce92:	d001      	beq.n	800ce98 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800ce94:	f7f5 fb90 	bl	80025b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ce98:	4b06      	ldr	r3, [pc, #24]	; (800ceb4 <MX_USB_DEVICE_Init+0x5c>)
 800ce9a:	0018      	movs	r0, r3
 800ce9c:	f7fe fe1f 	bl	800bade <USBD_Start>
 800cea0:	1e03      	subs	r3, r0, #0
 800cea2:	d001      	beq.n	800cea8 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800cea4:	f7f5 fb88 	bl	80025b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cea8:	46c0      	nop			; (mov r8, r8)
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	46c0      	nop			; (mov r8, r8)
 800ceb0:	2000012c 	.word	0x2000012c
 800ceb4:	200006d4 	.word	0x200006d4
 800ceb8:	20000018 	.word	0x20000018
 800cebc:	2000011c 	.word	0x2000011c

0800cec0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cec4:	4907      	ldr	r1, [pc, #28]	; (800cee4 <CDC_Init_FS+0x24>)
 800cec6:	4b08      	ldr	r3, [pc, #32]	; (800cee8 <CDC_Init_FS+0x28>)
 800cec8:	2200      	movs	r2, #0
 800ceca:	0018      	movs	r0, r3
 800cecc:	f7fe fd21 	bl	800b912 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ced0:	4a06      	ldr	r2, [pc, #24]	; (800ceec <CDC_Init_FS+0x2c>)
 800ced2:	4b05      	ldr	r3, [pc, #20]	; (800cee8 <CDC_Init_FS+0x28>)
 800ced4:	0011      	movs	r1, r2
 800ced6:	0018      	movs	r0, r3
 800ced8:	f7fe fd37 	bl	800b94a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cedc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cede:	0018      	movs	r0, r3
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}
 800cee4:	20000d80 	.word	0x20000d80
 800cee8:	200006d4 	.word	0x200006d4
 800ceec:	20000998 	.word	0x20000998

0800cef0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cef4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cef6:	0018      	movs	r0, r3
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b082      	sub	sp, #8
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6039      	str	r1, [r7, #0]
 800cf04:	0011      	movs	r1, r2
 800cf06:	1dfb      	adds	r3, r7, #7
 800cf08:	1c02      	adds	r2, r0, #0
 800cf0a:	701a      	strb	r2, [r3, #0]
 800cf0c:	1d3b      	adds	r3, r7, #4
 800cf0e:	1c0a      	adds	r2, r1, #0
 800cf10:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cf12:	1dfb      	adds	r3, r7, #7
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	2b23      	cmp	r3, #35	; 0x23
 800cf18:	d804      	bhi.n	800cf24 <CDC_Control_FS+0x28>
 800cf1a:	009a      	lsls	r2, r3, #2
 800cf1c:	4b04      	ldr	r3, [pc, #16]	; (800cf30 <CDC_Control_FS+0x34>)
 800cf1e:	18d3      	adds	r3, r2, r3
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cf24:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800cf26:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cf28:	0018      	movs	r0, r3
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	b002      	add	sp, #8
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	0800e550 	.word	0x0800e550

0800cf34 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cf34:	b590      	push	{r4, r7, lr}
 800cf36:	b085      	sub	sp, #20
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  flags.data_received = 1;
 800cf3e:	4b18      	ldr	r3, [pc, #96]	; (800cfa0 <CDC_Receive_FS+0x6c>)
 800cf40:	7a1a      	ldrb	r2, [r3, #8]
 800cf42:	2101      	movs	r1, #1
 800cf44:	430a      	orrs	r2, r1
 800cf46:	721a      	strb	r2, [r3, #8]

  for(uint8_t i = 0; i < *Len; i++)
 800cf48:	230f      	movs	r3, #15
 800cf4a:	18fb      	adds	r3, r7, r3
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	701a      	strb	r2, [r3, #0]
 800cf50:	e00f      	b.n	800cf72 <CDC_Receive_FS+0x3e>
  {
	  push(USB_Rx_Buffer, Buf[i]);
 800cf52:	4b14      	ldr	r3, [pc, #80]	; (800cfa4 <CDC_Receive_FS+0x70>)
 800cf54:	6818      	ldr	r0, [r3, #0]
 800cf56:	240f      	movs	r4, #15
 800cf58:	193b      	adds	r3, r7, r4
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	687a      	ldr	r2, [r7, #4]
 800cf5e:	18d3      	adds	r3, r2, r3
 800cf60:	781b      	ldrb	r3, [r3, #0]
 800cf62:	0019      	movs	r1, r3
 800cf64:	f7f5 fb78 	bl	8002658 <push>
  for(uint8_t i = 0; i < *Len; i++)
 800cf68:	193b      	adds	r3, r7, r4
 800cf6a:	781a      	ldrb	r2, [r3, #0]
 800cf6c:	193b      	adds	r3, r7, r4
 800cf6e:	3201      	adds	r2, #1
 800cf70:	701a      	strb	r2, [r3, #0]
 800cf72:	230f      	movs	r3, #15
 800cf74:	18fb      	adds	r3, r7, r3
 800cf76:	781a      	ldrb	r2, [r3, #0]
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d3e8      	bcc.n	800cf52 <CDC_Receive_FS+0x1e>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cf80:	687a      	ldr	r2, [r7, #4]
 800cf82:	4b09      	ldr	r3, [pc, #36]	; (800cfa8 <CDC_Receive_FS+0x74>)
 800cf84:	0011      	movs	r1, r2
 800cf86:	0018      	movs	r0, r3
 800cf88:	f7fe fcdf 	bl	800b94a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cf8c:	4b06      	ldr	r3, [pc, #24]	; (800cfa8 <CDC_Receive_FS+0x74>)
 800cf8e:	0018      	movs	r0, r3
 800cf90:	f7fe fd26 	bl	800b9e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cf94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cf96:	0018      	movs	r0, r3
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	b005      	add	sp, #20
 800cf9c:	bd90      	pop	{r4, r7, pc}
 800cf9e:	46c0      	nop			; (mov r8, r8)
 800cfa0:	20000680 	.word	0x20000680
 800cfa4:	20001168 	.word	0x20001168
 800cfa8:	200006d4 	.word	0x200006d4

0800cfac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cfac:	b5b0      	push	{r4, r5, r7, lr}
 800cfae:	b084      	sub	sp, #16
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	000a      	movs	r2, r1
 800cfb6:	1cbb      	adds	r3, r7, #2
 800cfb8:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800cfba:	230f      	movs	r3, #15
 800cfbc:	18fb      	adds	r3, r7, r3
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cfc2:	4a11      	ldr	r2, [pc, #68]	; (800d008 <CDC_Transmit_FS+0x5c>)
 800cfc4:	23ae      	movs	r3, #174	; 0xae
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	58d3      	ldr	r3, [r2, r3]
 800cfca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cfcc:	68ba      	ldr	r2, [r7, #8]
 800cfce:	2385      	movs	r3, #133	; 0x85
 800cfd0:	009b      	lsls	r3, r3, #2
 800cfd2:	58d3      	ldr	r3, [r2, r3]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d001      	beq.n	800cfdc <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800cfd8:	2301      	movs	r3, #1
 800cfda:	e010      	b.n	800cffe <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cfdc:	1cbb      	adds	r3, r7, #2
 800cfde:	881a      	ldrh	r2, [r3, #0]
 800cfe0:	6879      	ldr	r1, [r7, #4]
 800cfe2:	4b09      	ldr	r3, [pc, #36]	; (800d008 <CDC_Transmit_FS+0x5c>)
 800cfe4:	0018      	movs	r0, r3
 800cfe6:	f7fe fc94 	bl	800b912 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cfea:	250f      	movs	r5, #15
 800cfec:	197c      	adds	r4, r7, r5
 800cfee:	4b06      	ldr	r3, [pc, #24]	; (800d008 <CDC_Transmit_FS+0x5c>)
 800cff0:	0018      	movs	r0, r3
 800cff2:	f7fe fcbe 	bl	800b972 <USBD_CDC_TransmitPacket>
 800cff6:	0003      	movs	r3, r0
 800cff8:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 800cffa:	197b      	adds	r3, r7, r5
 800cffc:	781b      	ldrb	r3, [r3, #0]
}
 800cffe:	0018      	movs	r0, r3
 800d000:	46bd      	mov	sp, r7
 800d002:	b004      	add	sp, #16
 800d004:	bdb0      	pop	{r4, r5, r7, pc}
 800d006:	46c0      	nop			; (mov r8, r8)
 800d008:	200006d4 	.word	0x200006d4

0800d00c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	0002      	movs	r2, r0
 800d014:	6039      	str	r1, [r7, #0]
 800d016:	1dfb      	adds	r3, r7, #7
 800d018:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	2212      	movs	r2, #18
 800d01e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d020:	4b02      	ldr	r3, [pc, #8]	; (800d02c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d022:	0018      	movs	r0, r3
 800d024:	46bd      	mov	sp, r7
 800d026:	b002      	add	sp, #8
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	46c0      	nop			; (mov r8, r8)
 800d02c:	20000148 	.word	0x20000148

0800d030 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	0002      	movs	r2, r0
 800d038:	6039      	str	r1, [r7, #0]
 800d03a:	1dfb      	adds	r3, r7, #7
 800d03c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	2204      	movs	r2, #4
 800d042:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d044:	4b02      	ldr	r3, [pc, #8]	; (800d050 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d046:	0018      	movs	r0, r3
 800d048:	46bd      	mov	sp, r7
 800d04a:	b002      	add	sp, #8
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	46c0      	nop			; (mov r8, r8)
 800d050:	2000015c 	.word	0x2000015c

0800d054 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
 800d05a:	0002      	movs	r2, r0
 800d05c:	6039      	str	r1, [r7, #0]
 800d05e:	1dfb      	adds	r3, r7, #7
 800d060:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800d062:	1dfb      	adds	r3, r7, #7
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d106      	bne.n	800d078 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d06a:	683a      	ldr	r2, [r7, #0]
 800d06c:	4908      	ldr	r1, [pc, #32]	; (800d090 <USBD_FS_ProductStrDescriptor+0x3c>)
 800d06e:	4b09      	ldr	r3, [pc, #36]	; (800d094 <USBD_FS_ProductStrDescriptor+0x40>)
 800d070:	0018      	movs	r0, r3
 800d072:	f7ff fdf4 	bl	800cc5e <USBD_GetString>
 800d076:	e005      	b.n	800d084 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d078:	683a      	ldr	r2, [r7, #0]
 800d07a:	4905      	ldr	r1, [pc, #20]	; (800d090 <USBD_FS_ProductStrDescriptor+0x3c>)
 800d07c:	4b05      	ldr	r3, [pc, #20]	; (800d094 <USBD_FS_ProductStrDescriptor+0x40>)
 800d07e:	0018      	movs	r0, r3
 800d080:	f7ff fded 	bl	800cc5e <USBD_GetString>
  }
  return USBD_StrDesc;
 800d084:	4b02      	ldr	r3, [pc, #8]	; (800d090 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800d086:	0018      	movs	r0, r3
 800d088:	46bd      	mov	sp, r7
 800d08a:	b002      	add	sp, #8
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	46c0      	nop			; (mov r8, r8)
 800d090:	2000116c 	.word	0x2000116c
 800d094:	0800e37c 	.word	0x0800e37c

0800d098 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	0002      	movs	r2, r0
 800d0a0:	6039      	str	r1, [r7, #0]
 800d0a2:	1dfb      	adds	r3, r7, #7
 800d0a4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d0a6:	683a      	ldr	r2, [r7, #0]
 800d0a8:	4904      	ldr	r1, [pc, #16]	; (800d0bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d0aa:	4b05      	ldr	r3, [pc, #20]	; (800d0c0 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800d0ac:	0018      	movs	r0, r3
 800d0ae:	f7ff fdd6 	bl	800cc5e <USBD_GetString>
  return USBD_StrDesc;
 800d0b2:	4b02      	ldr	r3, [pc, #8]	; (800d0bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800d0b4:	0018      	movs	r0, r3
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	b002      	add	sp, #8
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	2000116c 	.word	0x2000116c
 800d0c0:	0800e394 	.word	0x0800e394

0800d0c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	0002      	movs	r2, r0
 800d0cc:	6039      	str	r1, [r7, #0]
 800d0ce:	1dfb      	adds	r3, r7, #7
 800d0d0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	221a      	movs	r2, #26
 800d0d6:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d0d8:	f000 f84c 	bl	800d174 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d0dc:	4b02      	ldr	r3, [pc, #8]	; (800d0e8 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800d0de:	0018      	movs	r0, r3
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	b002      	add	sp, #8
 800d0e4:	bd80      	pop	{r7, pc}
 800d0e6:	46c0      	nop			; (mov r8, r8)
 800d0e8:	20000160 	.word	0x20000160

0800d0ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	0002      	movs	r2, r0
 800d0f4:	6039      	str	r1, [r7, #0]
 800d0f6:	1dfb      	adds	r3, r7, #7
 800d0f8:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800d0fa:	1dfb      	adds	r3, r7, #7
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d106      	bne.n	800d110 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d102:	683a      	ldr	r2, [r7, #0]
 800d104:	4908      	ldr	r1, [pc, #32]	; (800d128 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800d106:	4b09      	ldr	r3, [pc, #36]	; (800d12c <USBD_FS_ConfigStrDescriptor+0x40>)
 800d108:	0018      	movs	r0, r3
 800d10a:	f7ff fda8 	bl	800cc5e <USBD_GetString>
 800d10e:	e005      	b.n	800d11c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d110:	683a      	ldr	r2, [r7, #0]
 800d112:	4905      	ldr	r1, [pc, #20]	; (800d128 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800d114:	4b05      	ldr	r3, [pc, #20]	; (800d12c <USBD_FS_ConfigStrDescriptor+0x40>)
 800d116:	0018      	movs	r0, r3
 800d118:	f7ff fda1 	bl	800cc5e <USBD_GetString>
  }
  return USBD_StrDesc;
 800d11c:	4b02      	ldr	r3, [pc, #8]	; (800d128 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800d11e:	0018      	movs	r0, r3
 800d120:	46bd      	mov	sp, r7
 800d122:	b002      	add	sp, #8
 800d124:	bd80      	pop	{r7, pc}
 800d126:	46c0      	nop			; (mov r8, r8)
 800d128:	2000116c 	.word	0x2000116c
 800d12c:	0800e3a8 	.word	0x0800e3a8

0800d130 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b082      	sub	sp, #8
 800d134:	af00      	add	r7, sp, #0
 800d136:	0002      	movs	r2, r0
 800d138:	6039      	str	r1, [r7, #0]
 800d13a:	1dfb      	adds	r3, r7, #7
 800d13c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800d13e:	1dfb      	adds	r3, r7, #7
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d106      	bne.n	800d154 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d146:	683a      	ldr	r2, [r7, #0]
 800d148:	4908      	ldr	r1, [pc, #32]	; (800d16c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800d14a:	4b09      	ldr	r3, [pc, #36]	; (800d170 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800d14c:	0018      	movs	r0, r3
 800d14e:	f7ff fd86 	bl	800cc5e <USBD_GetString>
 800d152:	e005      	b.n	800d160 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d154:	683a      	ldr	r2, [r7, #0]
 800d156:	4905      	ldr	r1, [pc, #20]	; (800d16c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800d158:	4b05      	ldr	r3, [pc, #20]	; (800d170 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800d15a:	0018      	movs	r0, r3
 800d15c:	f7ff fd7f 	bl	800cc5e <USBD_GetString>
  }
  return USBD_StrDesc;
 800d160:	4b02      	ldr	r3, [pc, #8]	; (800d16c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800d162:	0018      	movs	r0, r3
 800d164:	46bd      	mov	sp, r7
 800d166:	b002      	add	sp, #8
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	46c0      	nop			; (mov r8, r8)
 800d16c:	2000116c 	.word	0x2000116c
 800d170:	0800e3b4 	.word	0x0800e3b4

0800d174 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d17a:	4b10      	ldr	r3, [pc, #64]	; (800d1bc <Get_SerialNum+0x48>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d180:	4b0f      	ldr	r3, [pc, #60]	; (800d1c0 <Get_SerialNum+0x4c>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d186:	4b0f      	ldr	r3, [pc, #60]	; (800d1c4 <Get_SerialNum+0x50>)
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d18c:	68fa      	ldr	r2, [r7, #12]
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	18d3      	adds	r3, r2, r3
 800d192:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d00b      	beq.n	800d1b2 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d19a:	490b      	ldr	r1, [pc, #44]	; (800d1c8 <Get_SerialNum+0x54>)
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	2208      	movs	r2, #8
 800d1a0:	0018      	movs	r0, r3
 800d1a2:	f000 f815 	bl	800d1d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d1a6:	4909      	ldr	r1, [pc, #36]	; (800d1cc <Get_SerialNum+0x58>)
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	2204      	movs	r2, #4
 800d1ac:	0018      	movs	r0, r3
 800d1ae:	f000 f80f 	bl	800d1d0 <IntToUnicode>
  }
}
 800d1b2:	46c0      	nop			; (mov r8, r8)
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	b004      	add	sp, #16
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	46c0      	nop			; (mov r8, r8)
 800d1bc:	1ffff7ac 	.word	0x1ffff7ac
 800d1c0:	1ffff7b0 	.word	0x1ffff7b0
 800d1c4:	1ffff7b4 	.word	0x1ffff7b4
 800d1c8:	20000162 	.word	0x20000162
 800d1cc:	20000172 	.word	0x20000172

0800d1d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b086      	sub	sp, #24
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	60f8      	str	r0, [r7, #12]
 800d1d8:	60b9      	str	r1, [r7, #8]
 800d1da:	1dfb      	adds	r3, r7, #7
 800d1dc:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800d1de:	2117      	movs	r1, #23
 800d1e0:	187b      	adds	r3, r7, r1
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800d1e6:	187b      	adds	r3, r7, r1
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	701a      	strb	r2, [r3, #0]
 800d1ec:	e02f      	b.n	800d24e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	0f1b      	lsrs	r3, r3, #28
 800d1f2:	2b09      	cmp	r3, #9
 800d1f4:	d80d      	bhi.n	800d212 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	0f1b      	lsrs	r3, r3, #28
 800d1fa:	b2da      	uxtb	r2, r3
 800d1fc:	2317      	movs	r3, #23
 800d1fe:	18fb      	adds	r3, r7, r3
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	005b      	lsls	r3, r3, #1
 800d204:	0019      	movs	r1, r3
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	185b      	adds	r3, r3, r1
 800d20a:	3230      	adds	r2, #48	; 0x30
 800d20c:	b2d2      	uxtb	r2, r2
 800d20e:	701a      	strb	r2, [r3, #0]
 800d210:	e00c      	b.n	800d22c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	0f1b      	lsrs	r3, r3, #28
 800d216:	b2da      	uxtb	r2, r3
 800d218:	2317      	movs	r3, #23
 800d21a:	18fb      	adds	r3, r7, r3
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	005b      	lsls	r3, r3, #1
 800d220:	0019      	movs	r1, r3
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	185b      	adds	r3, r3, r1
 800d226:	3237      	adds	r2, #55	; 0x37
 800d228:	b2d2      	uxtb	r2, r2
 800d22a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	011b      	lsls	r3, r3, #4
 800d230:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d232:	2117      	movs	r1, #23
 800d234:	187b      	adds	r3, r7, r1
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	005b      	lsls	r3, r3, #1
 800d23a:	3301      	adds	r3, #1
 800d23c:	68ba      	ldr	r2, [r7, #8]
 800d23e:	18d3      	adds	r3, r2, r3
 800d240:	2200      	movs	r2, #0
 800d242:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d244:	187b      	adds	r3, r7, r1
 800d246:	781a      	ldrb	r2, [r3, #0]
 800d248:	187b      	adds	r3, r7, r1
 800d24a:	3201      	adds	r2, #1
 800d24c:	701a      	strb	r2, [r3, #0]
 800d24e:	2317      	movs	r3, #23
 800d250:	18fa      	adds	r2, r7, r3
 800d252:	1dfb      	adds	r3, r7, #7
 800d254:	7812      	ldrb	r2, [r2, #0]
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	429a      	cmp	r2, r3
 800d25a:	d3c8      	bcc.n	800d1ee <IntToUnicode+0x1e>
  }
}
 800d25c:	46c0      	nop			; (mov r8, r8)
 800d25e:	46c0      	nop			; (mov r8, r8)
 800d260:	46bd      	mov	sp, r7
 800d262:	b006      	add	sp, #24
 800d264:	bd80      	pop	{r7, pc}
	...

0800d268 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b084      	sub	sp, #16
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	4a0e      	ldr	r2, [pc, #56]	; (800d2b0 <HAL_PCD_MspInit+0x48>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d115      	bne.n	800d2a6 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800d27a:	4b0e      	ldr	r3, [pc, #56]	; (800d2b4 <HAL_PCD_MspInit+0x4c>)
 800d27c:	69da      	ldr	r2, [r3, #28]
 800d27e:	4b0d      	ldr	r3, [pc, #52]	; (800d2b4 <HAL_PCD_MspInit+0x4c>)
 800d280:	2180      	movs	r1, #128	; 0x80
 800d282:	0409      	lsls	r1, r1, #16
 800d284:	430a      	orrs	r2, r1
 800d286:	61da      	str	r2, [r3, #28]
 800d288:	4b0a      	ldr	r3, [pc, #40]	; (800d2b4 <HAL_PCD_MspInit+0x4c>)
 800d28a:	69da      	ldr	r2, [r3, #28]
 800d28c:	2380      	movs	r3, #128	; 0x80
 800d28e:	041b      	lsls	r3, r3, #16
 800d290:	4013      	ands	r3, r2
 800d292:	60fb      	str	r3, [r7, #12]
 800d294:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800d296:	2200      	movs	r2, #0
 800d298:	2100      	movs	r1, #0
 800d29a:	201f      	movs	r0, #31
 800d29c:	f7f6 ffc6 	bl	800422c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800d2a0:	201f      	movs	r0, #31
 800d2a2:	f7f6 ffd8 	bl	8004256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800d2a6:	46c0      	nop			; (mov r8, r8)
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	b004      	add	sp, #16
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	46c0      	nop			; (mov r8, r8)
 800d2b0:	40005c00 	.word	0x40005c00
 800d2b4:	40021000 	.word	0x40021000

0800d2b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b082      	sub	sp, #8
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d2c0:	687a      	ldr	r2, [r7, #4]
 800d2c2:	23bc      	movs	r3, #188	; 0xbc
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	58d2      	ldr	r2, [r2, r3]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	21ac      	movs	r1, #172	; 0xac
 800d2cc:	0089      	lsls	r1, r1, #2
 800d2ce:	468c      	mov	ip, r1
 800d2d0:	4463      	add	r3, ip
 800d2d2:	0019      	movs	r1, r3
 800d2d4:	0010      	movs	r0, r2
 800d2d6:	f7fe fc55 	bl	800bb84 <USBD_LL_SetupStage>
}
 800d2da:	46c0      	nop			; (mov r8, r8)
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	b002      	add	sp, #8
 800d2e0:	bd80      	pop	{r7, pc}

0800d2e2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2e2:	b590      	push	{r4, r7, lr}
 800d2e4:	b083      	sub	sp, #12
 800d2e6:	af00      	add	r7, sp, #0
 800d2e8:	6078      	str	r0, [r7, #4]
 800d2ea:	000a      	movs	r2, r1
 800d2ec:	1cfb      	adds	r3, r7, #3
 800d2ee:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	23bc      	movs	r3, #188	; 0xbc
 800d2f4:	009b      	lsls	r3, r3, #2
 800d2f6:	58d4      	ldr	r4, [r2, r3]
 800d2f8:	1cfb      	adds	r3, r7, #3
 800d2fa:	781a      	ldrb	r2, [r3, #0]
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	23be      	movs	r3, #190	; 0xbe
 800d300:	0059      	lsls	r1, r3, #1
 800d302:	0013      	movs	r3, r2
 800d304:	009b      	lsls	r3, r3, #2
 800d306:	189b      	adds	r3, r3, r2
 800d308:	00db      	lsls	r3, r3, #3
 800d30a:	18c3      	adds	r3, r0, r3
 800d30c:	185b      	adds	r3, r3, r1
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	1cfb      	adds	r3, r7, #3
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	0019      	movs	r1, r3
 800d316:	0020      	movs	r0, r4
 800d318:	f7fe fc92 	bl	800bc40 <USBD_LL_DataOutStage>
}
 800d31c:	46c0      	nop			; (mov r8, r8)
 800d31e:	46bd      	mov	sp, r7
 800d320:	b003      	add	sp, #12
 800d322:	bd90      	pop	{r4, r7, pc}

0800d324 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	000a      	movs	r2, r1
 800d32e:	1cfb      	adds	r3, r7, #3
 800d330:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d332:	687a      	ldr	r2, [r7, #4]
 800d334:	23bc      	movs	r3, #188	; 0xbc
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	58d0      	ldr	r0, [r2, r3]
 800d33a:	1cfb      	adds	r3, r7, #3
 800d33c:	781a      	ldrb	r2, [r3, #0]
 800d33e:	6879      	ldr	r1, [r7, #4]
 800d340:	0013      	movs	r3, r2
 800d342:	009b      	lsls	r3, r3, #2
 800d344:	189b      	adds	r3, r3, r2
 800d346:	00db      	lsls	r3, r3, #3
 800d348:	18cb      	adds	r3, r1, r3
 800d34a:	333c      	adds	r3, #60	; 0x3c
 800d34c:	681a      	ldr	r2, [r3, #0]
 800d34e:	1cfb      	adds	r3, r7, #3
 800d350:	781b      	ldrb	r3, [r3, #0]
 800d352:	0019      	movs	r1, r3
 800d354:	f7fe fcf6 	bl	800bd44 <USBD_LL_DataInStage>
}
 800d358:	46c0      	nop			; (mov r8, r8)
 800d35a:	46bd      	mov	sp, r7
 800d35c:	b002      	add	sp, #8
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	23bc      	movs	r3, #188	; 0xbc
 800d36c:	009b      	lsls	r3, r3, #2
 800d36e:	58d3      	ldr	r3, [r2, r3]
 800d370:	0018      	movs	r0, r3
 800d372:	f7fe fe2d 	bl	800bfd0 <USBD_LL_SOF>
}
 800d376:	46c0      	nop			; (mov r8, r8)
 800d378:	46bd      	mov	sp, r7
 800d37a:	b002      	add	sp, #8
 800d37c:	bd80      	pop	{r7, pc}

0800d37e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d37e:	b580      	push	{r7, lr}
 800d380:	b084      	sub	sp, #16
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d386:	230f      	movs	r3, #15
 800d388:	18fb      	adds	r3, r7, r3
 800d38a:	2201      	movs	r2, #1
 800d38c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	689b      	ldr	r3, [r3, #8]
 800d392:	2b02      	cmp	r3, #2
 800d394:	d001      	beq.n	800d39a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800d396:	f7f5 f90f 	bl	80025b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d39a:	687a      	ldr	r2, [r7, #4]
 800d39c:	23bc      	movs	r3, #188	; 0xbc
 800d39e:	009b      	lsls	r3, r3, #2
 800d3a0:	58d2      	ldr	r2, [r2, r3]
 800d3a2:	230f      	movs	r3, #15
 800d3a4:	18fb      	adds	r3, r7, r3
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	0019      	movs	r1, r3
 800d3aa:	0010      	movs	r0, r2
 800d3ac:	f7fe fdcf 	bl	800bf4e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	23bc      	movs	r3, #188	; 0xbc
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	58d3      	ldr	r3, [r2, r3]
 800d3b8:	0018      	movs	r0, r3
 800d3ba:	f7fe fd80 	bl	800bebe <USBD_LL_Reset>
}
 800d3be:	46c0      	nop			; (mov r8, r8)
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	b004      	add	sp, #16
 800d3c4:	bd80      	pop	{r7, pc}
	...

0800d3c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b082      	sub	sp, #8
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	23bc      	movs	r3, #188	; 0xbc
 800d3d4:	009b      	lsls	r3, r3, #2
 800d3d6:	58d3      	ldr	r3, [r2, r3]
 800d3d8:	0018      	movs	r0, r3
 800d3da:	f7fe fdc9 	bl	800bf70 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	699b      	ldr	r3, [r3, #24]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d005      	beq.n	800d3f2 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d3e6:	4b05      	ldr	r3, [pc, #20]	; (800d3fc <HAL_PCD_SuspendCallback+0x34>)
 800d3e8:	691a      	ldr	r2, [r3, #16]
 800d3ea:	4b04      	ldr	r3, [pc, #16]	; (800d3fc <HAL_PCD_SuspendCallback+0x34>)
 800d3ec:	2106      	movs	r1, #6
 800d3ee:	430a      	orrs	r2, r1
 800d3f0:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800d3f2:	46c0      	nop			; (mov r8, r8)
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	b002      	add	sp, #8
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	46c0      	nop			; (mov r8, r8)
 800d3fc:	e000ed00 	.word	0xe000ed00

0800d400 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	699b      	ldr	r3, [r3, #24]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d007      	beq.n	800d420 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d410:	4b09      	ldr	r3, [pc, #36]	; (800d438 <HAL_PCD_ResumeCallback+0x38>)
 800d412:	691a      	ldr	r2, [r3, #16]
 800d414:	4b08      	ldr	r3, [pc, #32]	; (800d438 <HAL_PCD_ResumeCallback+0x38>)
 800d416:	2106      	movs	r1, #6
 800d418:	438a      	bics	r2, r1
 800d41a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800d41c:	f000 fa44 	bl	800d8a8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d420:	687a      	ldr	r2, [r7, #4]
 800d422:	23bc      	movs	r3, #188	; 0xbc
 800d424:	009b      	lsls	r3, r3, #2
 800d426:	58d3      	ldr	r3, [r2, r3]
 800d428:	0018      	movs	r0, r3
 800d42a:	f7fe fdb9 	bl	800bfa0 <USBD_LL_Resume>
}
 800d42e:	46c0      	nop			; (mov r8, r8)
 800d430:	46bd      	mov	sp, r7
 800d432:	b002      	add	sp, #8
 800d434:	bd80      	pop	{r7, pc}
 800d436:	46c0      	nop			; (mov r8, r8)
 800d438:	e000ed00 	.word	0xe000ed00

0800d43c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800d444:	4a2d      	ldr	r2, [pc, #180]	; (800d4fc <USBD_LL_Init+0xc0>)
 800d446:	23bc      	movs	r3, #188	; 0xbc
 800d448:	009b      	lsls	r3, r3, #2
 800d44a:	6879      	ldr	r1, [r7, #4]
 800d44c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800d44e:	687a      	ldr	r2, [r7, #4]
 800d450:	23b0      	movs	r3, #176	; 0xb0
 800d452:	009b      	lsls	r3, r3, #2
 800d454:	4929      	ldr	r1, [pc, #164]	; (800d4fc <USBD_LL_Init+0xc0>)
 800d456:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800d458:	4b28      	ldr	r3, [pc, #160]	; (800d4fc <USBD_LL_Init+0xc0>)
 800d45a:	4a29      	ldr	r2, [pc, #164]	; (800d500 <USBD_LL_Init+0xc4>)
 800d45c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d45e:	4b27      	ldr	r3, [pc, #156]	; (800d4fc <USBD_LL_Init+0xc0>)
 800d460:	2208      	movs	r2, #8
 800d462:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d464:	4b25      	ldr	r3, [pc, #148]	; (800d4fc <USBD_LL_Init+0xc0>)
 800d466:	2202      	movs	r2, #2
 800d468:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d46a:	4b24      	ldr	r3, [pc, #144]	; (800d4fc <USBD_LL_Init+0xc0>)
 800d46c:	2202      	movs	r2, #2
 800d46e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d470:	4b22      	ldr	r3, [pc, #136]	; (800d4fc <USBD_LL_Init+0xc0>)
 800d472:	2200      	movs	r2, #0
 800d474:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d476:	4b21      	ldr	r3, [pc, #132]	; (800d4fc <USBD_LL_Init+0xc0>)
 800d478:	2200      	movs	r2, #0
 800d47a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d47c:	4b1f      	ldr	r3, [pc, #124]	; (800d4fc <USBD_LL_Init+0xc0>)
 800d47e:	2200      	movs	r2, #0
 800d480:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d482:	4b1e      	ldr	r3, [pc, #120]	; (800d4fc <USBD_LL_Init+0xc0>)
 800d484:	0018      	movs	r0, r3
 800d486:	f7f7 f96b 	bl	8004760 <HAL_PCD_Init>
 800d48a:	1e03      	subs	r3, r0, #0
 800d48c:	d001      	beq.n	800d492 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800d48e:	f7f5 f893 	bl	80025b8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	23b0      	movs	r3, #176	; 0xb0
 800d496:	009b      	lsls	r3, r3, #2
 800d498:	58d0      	ldr	r0, [r2, r3]
 800d49a:	2318      	movs	r3, #24
 800d49c:	2200      	movs	r2, #0
 800d49e:	2100      	movs	r1, #0
 800d4a0:	f7f8 ff4c 	bl	800633c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d4a4:	687a      	ldr	r2, [r7, #4]
 800d4a6:	23b0      	movs	r3, #176	; 0xb0
 800d4a8:	009b      	lsls	r3, r3, #2
 800d4aa:	58d0      	ldr	r0, [r2, r3]
 800d4ac:	2358      	movs	r3, #88	; 0x58
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	2180      	movs	r1, #128	; 0x80
 800d4b2:	f7f8 ff43 	bl	800633c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	23b0      	movs	r3, #176	; 0xb0
 800d4ba:	009b      	lsls	r3, r3, #2
 800d4bc:	58d0      	ldr	r0, [r2, r3]
 800d4be:	23c0      	movs	r3, #192	; 0xc0
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	2181      	movs	r1, #129	; 0x81
 800d4c4:	f7f8 ff3a 	bl	800633c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d4c8:	687a      	ldr	r2, [r7, #4]
 800d4ca:	23b0      	movs	r3, #176	; 0xb0
 800d4cc:	009b      	lsls	r3, r3, #2
 800d4ce:	58d0      	ldr	r0, [r2, r3]
 800d4d0:	2388      	movs	r3, #136	; 0x88
 800d4d2:	005b      	lsls	r3, r3, #1
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	2101      	movs	r1, #1
 800d4d8:	f7f8 ff30 	bl	800633c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d4dc:	687a      	ldr	r2, [r7, #4]
 800d4de:	23b0      	movs	r3, #176	; 0xb0
 800d4e0:	009b      	lsls	r3, r3, #2
 800d4e2:	58d0      	ldr	r0, [r2, r3]
 800d4e4:	2380      	movs	r3, #128	; 0x80
 800d4e6:	005b      	lsls	r3, r3, #1
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	2182      	movs	r1, #130	; 0x82
 800d4ec:	f7f8 ff26 	bl	800633c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d4f0:	2300      	movs	r3, #0
}
 800d4f2:	0018      	movs	r0, r3
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	b002      	add	sp, #8
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	46c0      	nop			; (mov r8, r8)
 800d4fc:	2000136c 	.word	0x2000136c
 800d500:	40005c00 	.word	0x40005c00

0800d504 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d504:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d506:	b085      	sub	sp, #20
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d50c:	210f      	movs	r1, #15
 800d50e:	187b      	adds	r3, r7, r1
 800d510:	2200      	movs	r2, #0
 800d512:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d514:	260e      	movs	r6, #14
 800d516:	19bb      	adds	r3, r7, r6
 800d518:	2200      	movs	r2, #0
 800d51a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d51c:	687a      	ldr	r2, [r7, #4]
 800d51e:	23b0      	movs	r3, #176	; 0xb0
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	58d3      	ldr	r3, [r2, r3]
 800d524:	000d      	movs	r5, r1
 800d526:	187c      	adds	r4, r7, r1
 800d528:	0018      	movs	r0, r3
 800d52a:	f7f7 fa29 	bl	8004980 <HAL_PCD_Start>
 800d52e:	0003      	movs	r3, r0
 800d530:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d532:	19bc      	adds	r4, r7, r6
 800d534:	197b      	adds	r3, r7, r5
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	0018      	movs	r0, r3
 800d53a:	f000 f9bc 	bl	800d8b6 <USBD_Get_USB_Status>
 800d53e:	0003      	movs	r3, r0
 800d540:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d542:	19bb      	adds	r3, r7, r6
 800d544:	781b      	ldrb	r3, [r3, #0]
}
 800d546:	0018      	movs	r0, r3
 800d548:	46bd      	mov	sp, r7
 800d54a:	b005      	add	sp, #20
 800d54c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d54e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d54e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d550:	b085      	sub	sp, #20
 800d552:	af00      	add	r7, sp, #0
 800d554:	6078      	str	r0, [r7, #4]
 800d556:	000c      	movs	r4, r1
 800d558:	0010      	movs	r0, r2
 800d55a:	0019      	movs	r1, r3
 800d55c:	1cfb      	adds	r3, r7, #3
 800d55e:	1c22      	adds	r2, r4, #0
 800d560:	701a      	strb	r2, [r3, #0]
 800d562:	1cbb      	adds	r3, r7, #2
 800d564:	1c02      	adds	r2, r0, #0
 800d566:	701a      	strb	r2, [r3, #0]
 800d568:	003b      	movs	r3, r7
 800d56a:	1c0a      	adds	r2, r1, #0
 800d56c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d56e:	260f      	movs	r6, #15
 800d570:	19bb      	adds	r3, r7, r6
 800d572:	2200      	movs	r2, #0
 800d574:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d576:	250e      	movs	r5, #14
 800d578:	197b      	adds	r3, r7, r5
 800d57a:	2200      	movs	r2, #0
 800d57c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	23b0      	movs	r3, #176	; 0xb0
 800d582:	009b      	lsls	r3, r3, #2
 800d584:	58d0      	ldr	r0, [r2, r3]
 800d586:	19bc      	adds	r4, r7, r6
 800d588:	1cbb      	adds	r3, r7, #2
 800d58a:	781d      	ldrb	r5, [r3, #0]
 800d58c:	003b      	movs	r3, r7
 800d58e:	881a      	ldrh	r2, [r3, #0]
 800d590:	1cfb      	adds	r3, r7, #3
 800d592:	7819      	ldrb	r1, [r3, #0]
 800d594:	002b      	movs	r3, r5
 800d596:	f7f7 fbc0 	bl	8004d1a <HAL_PCD_EP_Open>
 800d59a:	0003      	movs	r3, r0
 800d59c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d59e:	250e      	movs	r5, #14
 800d5a0:	197c      	adds	r4, r7, r5
 800d5a2:	19bb      	adds	r3, r7, r6
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	0018      	movs	r0, r3
 800d5a8:	f000 f985 	bl	800d8b6 <USBD_Get_USB_Status>
 800d5ac:	0003      	movs	r3, r0
 800d5ae:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d5b0:	197b      	adds	r3, r7, r5
 800d5b2:	781b      	ldrb	r3, [r3, #0]
}
 800d5b4:	0018      	movs	r0, r3
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	b005      	add	sp, #20
 800d5ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d5bc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5be:	b085      	sub	sp, #20
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	000a      	movs	r2, r1
 800d5c6:	1cfb      	adds	r3, r7, #3
 800d5c8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5ca:	210f      	movs	r1, #15
 800d5cc:	187b      	adds	r3, r7, r1
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5d2:	260e      	movs	r6, #14
 800d5d4:	19bb      	adds	r3, r7, r6
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d5da:	687a      	ldr	r2, [r7, #4]
 800d5dc:	23b0      	movs	r3, #176	; 0xb0
 800d5de:	009b      	lsls	r3, r3, #2
 800d5e0:	58d2      	ldr	r2, [r2, r3]
 800d5e2:	000d      	movs	r5, r1
 800d5e4:	187c      	adds	r4, r7, r1
 800d5e6:	1cfb      	adds	r3, r7, #3
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	0019      	movs	r1, r3
 800d5ec:	0010      	movs	r0, r2
 800d5ee:	f7f7 fc0c 	bl	8004e0a <HAL_PCD_EP_Close>
 800d5f2:	0003      	movs	r3, r0
 800d5f4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5f6:	19bc      	adds	r4, r7, r6
 800d5f8:	197b      	adds	r3, r7, r5
 800d5fa:	781b      	ldrb	r3, [r3, #0]
 800d5fc:	0018      	movs	r0, r3
 800d5fe:	f000 f95a 	bl	800d8b6 <USBD_Get_USB_Status>
 800d602:	0003      	movs	r3, r0
 800d604:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d606:	19bb      	adds	r3, r7, r6
 800d608:	781b      	ldrb	r3, [r3, #0]
}
 800d60a:	0018      	movs	r0, r3
 800d60c:	46bd      	mov	sp, r7
 800d60e:	b005      	add	sp, #20
 800d610:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d612 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d612:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d614:	b085      	sub	sp, #20
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
 800d61a:	000a      	movs	r2, r1
 800d61c:	1cfb      	adds	r3, r7, #3
 800d61e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d620:	210f      	movs	r1, #15
 800d622:	187b      	adds	r3, r7, r1
 800d624:	2200      	movs	r2, #0
 800d626:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d628:	260e      	movs	r6, #14
 800d62a:	19bb      	adds	r3, r7, r6
 800d62c:	2200      	movs	r2, #0
 800d62e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d630:	687a      	ldr	r2, [r7, #4]
 800d632:	23b0      	movs	r3, #176	; 0xb0
 800d634:	009b      	lsls	r3, r3, #2
 800d636:	58d2      	ldr	r2, [r2, r3]
 800d638:	000d      	movs	r5, r1
 800d63a:	187c      	adds	r4, r7, r1
 800d63c:	1cfb      	adds	r3, r7, #3
 800d63e:	781b      	ldrb	r3, [r3, #0]
 800d640:	0019      	movs	r1, r3
 800d642:	0010      	movs	r0, r2
 800d644:	f7f7 fcd8 	bl	8004ff8 <HAL_PCD_EP_SetStall>
 800d648:	0003      	movs	r3, r0
 800d64a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d64c:	19bc      	adds	r4, r7, r6
 800d64e:	197b      	adds	r3, r7, r5
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	0018      	movs	r0, r3
 800d654:	f000 f92f 	bl	800d8b6 <USBD_Get_USB_Status>
 800d658:	0003      	movs	r3, r0
 800d65a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d65c:	19bb      	adds	r3, r7, r6
 800d65e:	781b      	ldrb	r3, [r3, #0]
}
 800d660:	0018      	movs	r0, r3
 800d662:	46bd      	mov	sp, r7
 800d664:	b005      	add	sp, #20
 800d666:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d668 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d66a:	b085      	sub	sp, #20
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	000a      	movs	r2, r1
 800d672:	1cfb      	adds	r3, r7, #3
 800d674:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d676:	210f      	movs	r1, #15
 800d678:	187b      	adds	r3, r7, r1
 800d67a:	2200      	movs	r2, #0
 800d67c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d67e:	260e      	movs	r6, #14
 800d680:	19bb      	adds	r3, r7, r6
 800d682:	2200      	movs	r2, #0
 800d684:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d686:	687a      	ldr	r2, [r7, #4]
 800d688:	23b0      	movs	r3, #176	; 0xb0
 800d68a:	009b      	lsls	r3, r3, #2
 800d68c:	58d2      	ldr	r2, [r2, r3]
 800d68e:	000d      	movs	r5, r1
 800d690:	187c      	adds	r4, r7, r1
 800d692:	1cfb      	adds	r3, r7, #3
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	0019      	movs	r1, r3
 800d698:	0010      	movs	r0, r2
 800d69a:	f7f7 fd09 	bl	80050b0 <HAL_PCD_EP_ClrStall>
 800d69e:	0003      	movs	r3, r0
 800d6a0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6a2:	19bc      	adds	r4, r7, r6
 800d6a4:	197b      	adds	r3, r7, r5
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	0018      	movs	r0, r3
 800d6aa:	f000 f904 	bl	800d8b6 <USBD_Get_USB_Status>
 800d6ae:	0003      	movs	r3, r0
 800d6b0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d6b2:	19bb      	adds	r3, r7, r6
 800d6b4:	781b      	ldrb	r3, [r3, #0]
}
 800d6b6:	0018      	movs	r0, r3
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	b005      	add	sp, #20
 800d6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d6be <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6be:	b580      	push	{r7, lr}
 800d6c0:	b084      	sub	sp, #16
 800d6c2:	af00      	add	r7, sp, #0
 800d6c4:	6078      	str	r0, [r7, #4]
 800d6c6:	000a      	movs	r2, r1
 800d6c8:	1cfb      	adds	r3, r7, #3
 800d6ca:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	23b0      	movs	r3, #176	; 0xb0
 800d6d0:	009b      	lsls	r3, r3, #2
 800d6d2:	58d3      	ldr	r3, [r2, r3]
 800d6d4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d6d6:	1cfb      	adds	r3, r7, #3
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	b25b      	sxtb	r3, r3
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	da0d      	bge.n	800d6fc <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d6e0:	1cfb      	adds	r3, r7, #3
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	227f      	movs	r2, #127	; 0x7f
 800d6e6:	4013      	ands	r3, r2
 800d6e8:	68f9      	ldr	r1, [r7, #12]
 800d6ea:	1c5a      	adds	r2, r3, #1
 800d6ec:	0013      	movs	r3, r2
 800d6ee:	009b      	lsls	r3, r3, #2
 800d6f0:	189b      	adds	r3, r3, r2
 800d6f2:	00db      	lsls	r3, r3, #3
 800d6f4:	18cb      	adds	r3, r1, r3
 800d6f6:	3302      	adds	r3, #2
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	e00d      	b.n	800d718 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d6fc:	1cfb      	adds	r3, r7, #3
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	227f      	movs	r2, #127	; 0x7f
 800d702:	401a      	ands	r2, r3
 800d704:	68f8      	ldr	r0, [r7, #12]
 800d706:	23b5      	movs	r3, #181	; 0xb5
 800d708:	0059      	lsls	r1, r3, #1
 800d70a:	0013      	movs	r3, r2
 800d70c:	009b      	lsls	r3, r3, #2
 800d70e:	189b      	adds	r3, r3, r2
 800d710:	00db      	lsls	r3, r3, #3
 800d712:	18c3      	adds	r3, r0, r3
 800d714:	185b      	adds	r3, r3, r1
 800d716:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d718:	0018      	movs	r0, r3
 800d71a:	46bd      	mov	sp, r7
 800d71c:	b004      	add	sp, #16
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d720:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d722:	b085      	sub	sp, #20
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	000a      	movs	r2, r1
 800d72a:	1cfb      	adds	r3, r7, #3
 800d72c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d72e:	210f      	movs	r1, #15
 800d730:	187b      	adds	r3, r7, r1
 800d732:	2200      	movs	r2, #0
 800d734:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d736:	260e      	movs	r6, #14
 800d738:	19bb      	adds	r3, r7, r6
 800d73a:	2200      	movs	r2, #0
 800d73c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d73e:	687a      	ldr	r2, [r7, #4]
 800d740:	23b0      	movs	r3, #176	; 0xb0
 800d742:	009b      	lsls	r3, r3, #2
 800d744:	58d2      	ldr	r2, [r2, r3]
 800d746:	000d      	movs	r5, r1
 800d748:	187c      	adds	r4, r7, r1
 800d74a:	1cfb      	adds	r3, r7, #3
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	0019      	movs	r1, r3
 800d750:	0010      	movs	r0, r2
 800d752:	f7f7 fab7 	bl	8004cc4 <HAL_PCD_SetAddress>
 800d756:	0003      	movs	r3, r0
 800d758:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d75a:	19bc      	adds	r4, r7, r6
 800d75c:	197b      	adds	r3, r7, r5
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	0018      	movs	r0, r3
 800d762:	f000 f8a8 	bl	800d8b6 <USBD_Get_USB_Status>
 800d766:	0003      	movs	r3, r0
 800d768:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d76a:	19bb      	adds	r3, r7, r6
 800d76c:	781b      	ldrb	r3, [r3, #0]
}
 800d76e:	0018      	movs	r0, r3
 800d770:	46bd      	mov	sp, r7
 800d772:	b005      	add	sp, #20
 800d774:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d776 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d776:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d778:	b087      	sub	sp, #28
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	60f8      	str	r0, [r7, #12]
 800d77e:	0008      	movs	r0, r1
 800d780:	607a      	str	r2, [r7, #4]
 800d782:	0019      	movs	r1, r3
 800d784:	230b      	movs	r3, #11
 800d786:	18fb      	adds	r3, r7, r3
 800d788:	1c02      	adds	r2, r0, #0
 800d78a:	701a      	strb	r2, [r3, #0]
 800d78c:	2408      	movs	r4, #8
 800d78e:	193b      	adds	r3, r7, r4
 800d790:	1c0a      	adds	r2, r1, #0
 800d792:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d794:	2117      	movs	r1, #23
 800d796:	187b      	adds	r3, r7, r1
 800d798:	2200      	movs	r2, #0
 800d79a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d79c:	2516      	movs	r5, #22
 800d79e:	197b      	adds	r3, r7, r5
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d7a4:	68fa      	ldr	r2, [r7, #12]
 800d7a6:	23b0      	movs	r3, #176	; 0xb0
 800d7a8:	009b      	lsls	r3, r3, #2
 800d7aa:	58d0      	ldr	r0, [r2, r3]
 800d7ac:	193b      	adds	r3, r7, r4
 800d7ae:	881d      	ldrh	r5, [r3, #0]
 800d7b0:	000e      	movs	r6, r1
 800d7b2:	187c      	adds	r4, r7, r1
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	230b      	movs	r3, #11
 800d7b8:	18fb      	adds	r3, r7, r3
 800d7ba:	7819      	ldrb	r1, [r3, #0]
 800d7bc:	002b      	movs	r3, r5
 800d7be:	f7f7 fbd2 	bl	8004f66 <HAL_PCD_EP_Transmit>
 800d7c2:	0003      	movs	r3, r0
 800d7c4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7c6:	2516      	movs	r5, #22
 800d7c8:	197c      	adds	r4, r7, r5
 800d7ca:	19bb      	adds	r3, r7, r6
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	0018      	movs	r0, r3
 800d7d0:	f000 f871 	bl	800d8b6 <USBD_Get_USB_Status>
 800d7d4:	0003      	movs	r3, r0
 800d7d6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d7d8:	197b      	adds	r3, r7, r5
 800d7da:	781b      	ldrb	r3, [r3, #0]
}
 800d7dc:	0018      	movs	r0, r3
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	b007      	add	sp, #28
 800d7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d7e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7e6:	b087      	sub	sp, #28
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	60f8      	str	r0, [r7, #12]
 800d7ec:	0008      	movs	r0, r1
 800d7ee:	607a      	str	r2, [r7, #4]
 800d7f0:	0019      	movs	r1, r3
 800d7f2:	230b      	movs	r3, #11
 800d7f4:	18fb      	adds	r3, r7, r3
 800d7f6:	1c02      	adds	r2, r0, #0
 800d7f8:	701a      	strb	r2, [r3, #0]
 800d7fa:	2408      	movs	r4, #8
 800d7fc:	193b      	adds	r3, r7, r4
 800d7fe:	1c0a      	adds	r2, r1, #0
 800d800:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d802:	2117      	movs	r1, #23
 800d804:	187b      	adds	r3, r7, r1
 800d806:	2200      	movs	r2, #0
 800d808:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d80a:	2516      	movs	r5, #22
 800d80c:	197b      	adds	r3, r7, r5
 800d80e:	2200      	movs	r2, #0
 800d810:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d812:	68fa      	ldr	r2, [r7, #12]
 800d814:	23b0      	movs	r3, #176	; 0xb0
 800d816:	009b      	lsls	r3, r3, #2
 800d818:	58d0      	ldr	r0, [r2, r3]
 800d81a:	193b      	adds	r3, r7, r4
 800d81c:	881d      	ldrh	r5, [r3, #0]
 800d81e:	000e      	movs	r6, r1
 800d820:	187c      	adds	r4, r7, r1
 800d822:	687a      	ldr	r2, [r7, #4]
 800d824:	230b      	movs	r3, #11
 800d826:	18fb      	adds	r3, r7, r3
 800d828:	7819      	ldrb	r1, [r3, #0]
 800d82a:	002b      	movs	r3, r5
 800d82c:	f7f7 fb3e 	bl	8004eac <HAL_PCD_EP_Receive>
 800d830:	0003      	movs	r3, r0
 800d832:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d834:	2516      	movs	r5, #22
 800d836:	197c      	adds	r4, r7, r5
 800d838:	19bb      	adds	r3, r7, r6
 800d83a:	781b      	ldrb	r3, [r3, #0]
 800d83c:	0018      	movs	r0, r3
 800d83e:	f000 f83a 	bl	800d8b6 <USBD_Get_USB_Status>
 800d842:	0003      	movs	r3, r0
 800d844:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800d846:	197b      	adds	r3, r7, r5
 800d848:	781b      	ldrb	r3, [r3, #0]
}
 800d84a:	0018      	movs	r0, r3
 800d84c:	46bd      	mov	sp, r7
 800d84e:	b007      	add	sp, #28
 800d850:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d852 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d852:	b580      	push	{r7, lr}
 800d854:	b082      	sub	sp, #8
 800d856:	af00      	add	r7, sp, #0
 800d858:	6078      	str	r0, [r7, #4]
 800d85a:	000a      	movs	r2, r1
 800d85c:	1cfb      	adds	r3, r7, #3
 800d85e:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	23b0      	movs	r3, #176	; 0xb0
 800d864:	009b      	lsls	r3, r3, #2
 800d866:	58d2      	ldr	r2, [r2, r3]
 800d868:	1cfb      	adds	r3, r7, #3
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	0019      	movs	r1, r3
 800d86e:	0010      	movs	r0, r2
 800d870:	f7f7 fb60 	bl	8004f34 <HAL_PCD_EP_GetRxCount>
 800d874:	0003      	movs	r3, r0
}
 800d876:	0018      	movs	r0, r3
 800d878:	46bd      	mov	sp, r7
 800d87a:	b002      	add	sp, #8
 800d87c:	bd80      	pop	{r7, pc}
	...

0800d880 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b082      	sub	sp, #8
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d888:	4b02      	ldr	r3, [pc, #8]	; (800d894 <USBD_static_malloc+0x14>)
}
 800d88a:	0018      	movs	r0, r3
 800d88c:	46bd      	mov	sp, r7
 800d88e:	b002      	add	sp, #8
 800d890:	bd80      	pop	{r7, pc}
 800d892:	46c0      	nop			; (mov r8, r8)
 800d894:	20001660 	.word	0x20001660

0800d898 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]

}
 800d8a0:	46c0      	nop			; (mov r8, r8)
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	b002      	add	sp, #8
 800d8a6:	bd80      	pop	{r7, pc}

0800d8a8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d8ac:	f7f3 fd6e 	bl	800138c <SystemClock_Config>
}
 800d8b0:	46c0      	nop			; (mov r8, r8)
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}

0800d8b6 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d8b6:	b580      	push	{r7, lr}
 800d8b8:	b084      	sub	sp, #16
 800d8ba:	af00      	add	r7, sp, #0
 800d8bc:	0002      	movs	r2, r0
 800d8be:	1dfb      	adds	r3, r7, #7
 800d8c0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8c2:	230f      	movs	r3, #15
 800d8c4:	18fb      	adds	r3, r7, r3
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800d8ca:	1dfb      	adds	r3, r7, #7
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	2b03      	cmp	r3, #3
 800d8d0:	d017      	beq.n	800d902 <USBD_Get_USB_Status+0x4c>
 800d8d2:	dc1b      	bgt.n	800d90c <USBD_Get_USB_Status+0x56>
 800d8d4:	2b02      	cmp	r3, #2
 800d8d6:	d00f      	beq.n	800d8f8 <USBD_Get_USB_Status+0x42>
 800d8d8:	dc18      	bgt.n	800d90c <USBD_Get_USB_Status+0x56>
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d002      	beq.n	800d8e4 <USBD_Get_USB_Status+0x2e>
 800d8de:	2b01      	cmp	r3, #1
 800d8e0:	d005      	beq.n	800d8ee <USBD_Get_USB_Status+0x38>
 800d8e2:	e013      	b.n	800d90c <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d8e4:	230f      	movs	r3, #15
 800d8e6:	18fb      	adds	r3, r7, r3
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	701a      	strb	r2, [r3, #0]
    break;
 800d8ec:	e013      	b.n	800d916 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d8ee:	230f      	movs	r3, #15
 800d8f0:	18fb      	adds	r3, r7, r3
 800d8f2:	2202      	movs	r2, #2
 800d8f4:	701a      	strb	r2, [r3, #0]
    break;
 800d8f6:	e00e      	b.n	800d916 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d8f8:	230f      	movs	r3, #15
 800d8fa:	18fb      	adds	r3, r7, r3
 800d8fc:	2201      	movs	r2, #1
 800d8fe:	701a      	strb	r2, [r3, #0]
    break;
 800d900:	e009      	b.n	800d916 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d902:	230f      	movs	r3, #15
 800d904:	18fb      	adds	r3, r7, r3
 800d906:	2202      	movs	r2, #2
 800d908:	701a      	strb	r2, [r3, #0]
    break;
 800d90a:	e004      	b.n	800d916 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800d90c:	230f      	movs	r3, #15
 800d90e:	18fb      	adds	r3, r7, r3
 800d910:	2202      	movs	r2, #2
 800d912:	701a      	strb	r2, [r3, #0]
    break;
 800d914:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800d916:	230f      	movs	r3, #15
 800d918:	18fb      	adds	r3, r7, r3
 800d91a:	781b      	ldrb	r3, [r3, #0]
}
 800d91c:	0018      	movs	r0, r3
 800d91e:	46bd      	mov	sp, r7
 800d920:	b004      	add	sp, #16
 800d922:	bd80      	pop	{r7, pc}

0800d924 <__errno>:
 800d924:	4b01      	ldr	r3, [pc, #4]	; (800d92c <__errno+0x8>)
 800d926:	6818      	ldr	r0, [r3, #0]
 800d928:	4770      	bx	lr
 800d92a:	46c0      	nop			; (mov r8, r8)
 800d92c:	2000017c 	.word	0x2000017c

0800d930 <__libc_init_array>:
 800d930:	b570      	push	{r4, r5, r6, lr}
 800d932:	2600      	movs	r6, #0
 800d934:	4d0c      	ldr	r5, [pc, #48]	; (800d968 <__libc_init_array+0x38>)
 800d936:	4c0d      	ldr	r4, [pc, #52]	; (800d96c <__libc_init_array+0x3c>)
 800d938:	1b64      	subs	r4, r4, r5
 800d93a:	10a4      	asrs	r4, r4, #2
 800d93c:	42a6      	cmp	r6, r4
 800d93e:	d109      	bne.n	800d954 <__libc_init_array+0x24>
 800d940:	2600      	movs	r6, #0
 800d942:	f000 fc9f 	bl	800e284 <_init>
 800d946:	4d0a      	ldr	r5, [pc, #40]	; (800d970 <__libc_init_array+0x40>)
 800d948:	4c0a      	ldr	r4, [pc, #40]	; (800d974 <__libc_init_array+0x44>)
 800d94a:	1b64      	subs	r4, r4, r5
 800d94c:	10a4      	asrs	r4, r4, #2
 800d94e:	42a6      	cmp	r6, r4
 800d950:	d105      	bne.n	800d95e <__libc_init_array+0x2e>
 800d952:	bd70      	pop	{r4, r5, r6, pc}
 800d954:	00b3      	lsls	r3, r6, #2
 800d956:	58eb      	ldr	r3, [r5, r3]
 800d958:	4798      	blx	r3
 800d95a:	3601      	adds	r6, #1
 800d95c:	e7ee      	b.n	800d93c <__libc_init_array+0xc>
 800d95e:	00b3      	lsls	r3, r6, #2
 800d960:	58eb      	ldr	r3, [r5, r3]
 800d962:	4798      	blx	r3
 800d964:	3601      	adds	r6, #1
 800d966:	e7f2      	b.n	800d94e <__libc_init_array+0x1e>
 800d968:	0800e614 	.word	0x0800e614
 800d96c:	0800e614 	.word	0x0800e614
 800d970:	0800e614 	.word	0x0800e614
 800d974:	0800e618 	.word	0x0800e618

0800d978 <malloc>:
 800d978:	b510      	push	{r4, lr}
 800d97a:	4b03      	ldr	r3, [pc, #12]	; (800d988 <malloc+0x10>)
 800d97c:	0001      	movs	r1, r0
 800d97e:	6818      	ldr	r0, [r3, #0]
 800d980:	f000 f88c 	bl	800da9c <_malloc_r>
 800d984:	bd10      	pop	{r4, pc}
 800d986:	46c0      	nop			; (mov r8, r8)
 800d988:	2000017c 	.word	0x2000017c

0800d98c <free>:
 800d98c:	b510      	push	{r4, lr}
 800d98e:	4b03      	ldr	r3, [pc, #12]	; (800d99c <free+0x10>)
 800d990:	0001      	movs	r1, r0
 800d992:	6818      	ldr	r0, [r3, #0]
 800d994:	f000 f816 	bl	800d9c4 <_free_r>
 800d998:	bd10      	pop	{r4, pc}
 800d99a:	46c0      	nop			; (mov r8, r8)
 800d99c:	2000017c 	.word	0x2000017c

0800d9a0 <memcpy>:
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	b510      	push	{r4, lr}
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d100      	bne.n	800d9aa <memcpy+0xa>
 800d9a8:	bd10      	pop	{r4, pc}
 800d9aa:	5ccc      	ldrb	r4, [r1, r3]
 800d9ac:	54c4      	strb	r4, [r0, r3]
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	e7f8      	b.n	800d9a4 <memcpy+0x4>

0800d9b2 <memset>:
 800d9b2:	0003      	movs	r3, r0
 800d9b4:	1882      	adds	r2, r0, r2
 800d9b6:	4293      	cmp	r3, r2
 800d9b8:	d100      	bne.n	800d9bc <memset+0xa>
 800d9ba:	4770      	bx	lr
 800d9bc:	7019      	strb	r1, [r3, #0]
 800d9be:	3301      	adds	r3, #1
 800d9c0:	e7f9      	b.n	800d9b6 <memset+0x4>
	...

0800d9c4 <_free_r>:
 800d9c4:	b570      	push	{r4, r5, r6, lr}
 800d9c6:	0005      	movs	r5, r0
 800d9c8:	2900      	cmp	r1, #0
 800d9ca:	d010      	beq.n	800d9ee <_free_r+0x2a>
 800d9cc:	1f0c      	subs	r4, r1, #4
 800d9ce:	6823      	ldr	r3, [r4, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	da00      	bge.n	800d9d6 <_free_r+0x12>
 800d9d4:	18e4      	adds	r4, r4, r3
 800d9d6:	0028      	movs	r0, r5
 800d9d8:	f000 f908 	bl	800dbec <__malloc_lock>
 800d9dc:	4a1d      	ldr	r2, [pc, #116]	; (800da54 <_free_r+0x90>)
 800d9de:	6813      	ldr	r3, [r2, #0]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d105      	bne.n	800d9f0 <_free_r+0x2c>
 800d9e4:	6063      	str	r3, [r4, #4]
 800d9e6:	6014      	str	r4, [r2, #0]
 800d9e8:	0028      	movs	r0, r5
 800d9ea:	f000 f907 	bl	800dbfc <__malloc_unlock>
 800d9ee:	bd70      	pop	{r4, r5, r6, pc}
 800d9f0:	42a3      	cmp	r3, r4
 800d9f2:	d908      	bls.n	800da06 <_free_r+0x42>
 800d9f4:	6821      	ldr	r1, [r4, #0]
 800d9f6:	1860      	adds	r0, r4, r1
 800d9f8:	4283      	cmp	r3, r0
 800d9fa:	d1f3      	bne.n	800d9e4 <_free_r+0x20>
 800d9fc:	6818      	ldr	r0, [r3, #0]
 800d9fe:	685b      	ldr	r3, [r3, #4]
 800da00:	1841      	adds	r1, r0, r1
 800da02:	6021      	str	r1, [r4, #0]
 800da04:	e7ee      	b.n	800d9e4 <_free_r+0x20>
 800da06:	001a      	movs	r2, r3
 800da08:	685b      	ldr	r3, [r3, #4]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d001      	beq.n	800da12 <_free_r+0x4e>
 800da0e:	42a3      	cmp	r3, r4
 800da10:	d9f9      	bls.n	800da06 <_free_r+0x42>
 800da12:	6811      	ldr	r1, [r2, #0]
 800da14:	1850      	adds	r0, r2, r1
 800da16:	42a0      	cmp	r0, r4
 800da18:	d10b      	bne.n	800da32 <_free_r+0x6e>
 800da1a:	6820      	ldr	r0, [r4, #0]
 800da1c:	1809      	adds	r1, r1, r0
 800da1e:	1850      	adds	r0, r2, r1
 800da20:	6011      	str	r1, [r2, #0]
 800da22:	4283      	cmp	r3, r0
 800da24:	d1e0      	bne.n	800d9e8 <_free_r+0x24>
 800da26:	6818      	ldr	r0, [r3, #0]
 800da28:	685b      	ldr	r3, [r3, #4]
 800da2a:	1841      	adds	r1, r0, r1
 800da2c:	6011      	str	r1, [r2, #0]
 800da2e:	6053      	str	r3, [r2, #4]
 800da30:	e7da      	b.n	800d9e8 <_free_r+0x24>
 800da32:	42a0      	cmp	r0, r4
 800da34:	d902      	bls.n	800da3c <_free_r+0x78>
 800da36:	230c      	movs	r3, #12
 800da38:	602b      	str	r3, [r5, #0]
 800da3a:	e7d5      	b.n	800d9e8 <_free_r+0x24>
 800da3c:	6821      	ldr	r1, [r4, #0]
 800da3e:	1860      	adds	r0, r4, r1
 800da40:	4283      	cmp	r3, r0
 800da42:	d103      	bne.n	800da4c <_free_r+0x88>
 800da44:	6818      	ldr	r0, [r3, #0]
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	1841      	adds	r1, r0, r1
 800da4a:	6021      	str	r1, [r4, #0]
 800da4c:	6063      	str	r3, [r4, #4]
 800da4e:	6054      	str	r4, [r2, #4]
 800da50:	e7ca      	b.n	800d9e8 <_free_r+0x24>
 800da52:	46c0      	nop			; (mov r8, r8)
 800da54:	20001880 	.word	0x20001880

0800da58 <sbrk_aligned>:
 800da58:	b570      	push	{r4, r5, r6, lr}
 800da5a:	4e0f      	ldr	r6, [pc, #60]	; (800da98 <sbrk_aligned+0x40>)
 800da5c:	000d      	movs	r5, r1
 800da5e:	6831      	ldr	r1, [r6, #0]
 800da60:	0004      	movs	r4, r0
 800da62:	2900      	cmp	r1, #0
 800da64:	d102      	bne.n	800da6c <sbrk_aligned+0x14>
 800da66:	f000 f88f 	bl	800db88 <_sbrk_r>
 800da6a:	6030      	str	r0, [r6, #0]
 800da6c:	0029      	movs	r1, r5
 800da6e:	0020      	movs	r0, r4
 800da70:	f000 f88a 	bl	800db88 <_sbrk_r>
 800da74:	1c43      	adds	r3, r0, #1
 800da76:	d00a      	beq.n	800da8e <sbrk_aligned+0x36>
 800da78:	2303      	movs	r3, #3
 800da7a:	1cc5      	adds	r5, r0, #3
 800da7c:	439d      	bics	r5, r3
 800da7e:	42a8      	cmp	r0, r5
 800da80:	d007      	beq.n	800da92 <sbrk_aligned+0x3a>
 800da82:	1a29      	subs	r1, r5, r0
 800da84:	0020      	movs	r0, r4
 800da86:	f000 f87f 	bl	800db88 <_sbrk_r>
 800da8a:	1c43      	adds	r3, r0, #1
 800da8c:	d101      	bne.n	800da92 <sbrk_aligned+0x3a>
 800da8e:	2501      	movs	r5, #1
 800da90:	426d      	negs	r5, r5
 800da92:	0028      	movs	r0, r5
 800da94:	bd70      	pop	{r4, r5, r6, pc}
 800da96:	46c0      	nop			; (mov r8, r8)
 800da98:	20001884 	.word	0x20001884

0800da9c <_malloc_r>:
 800da9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800da9e:	2203      	movs	r2, #3
 800daa0:	1ccb      	adds	r3, r1, #3
 800daa2:	4393      	bics	r3, r2
 800daa4:	3308      	adds	r3, #8
 800daa6:	0006      	movs	r6, r0
 800daa8:	001f      	movs	r7, r3
 800daaa:	2b0c      	cmp	r3, #12
 800daac:	d232      	bcs.n	800db14 <_malloc_r+0x78>
 800daae:	270c      	movs	r7, #12
 800dab0:	42b9      	cmp	r1, r7
 800dab2:	d831      	bhi.n	800db18 <_malloc_r+0x7c>
 800dab4:	0030      	movs	r0, r6
 800dab6:	f000 f899 	bl	800dbec <__malloc_lock>
 800daba:	4d32      	ldr	r5, [pc, #200]	; (800db84 <_malloc_r+0xe8>)
 800dabc:	682b      	ldr	r3, [r5, #0]
 800dabe:	001c      	movs	r4, r3
 800dac0:	2c00      	cmp	r4, #0
 800dac2:	d12e      	bne.n	800db22 <_malloc_r+0x86>
 800dac4:	0039      	movs	r1, r7
 800dac6:	0030      	movs	r0, r6
 800dac8:	f7ff ffc6 	bl	800da58 <sbrk_aligned>
 800dacc:	0004      	movs	r4, r0
 800dace:	1c43      	adds	r3, r0, #1
 800dad0:	d11e      	bne.n	800db10 <_malloc_r+0x74>
 800dad2:	682c      	ldr	r4, [r5, #0]
 800dad4:	0025      	movs	r5, r4
 800dad6:	2d00      	cmp	r5, #0
 800dad8:	d14a      	bne.n	800db70 <_malloc_r+0xd4>
 800dada:	6823      	ldr	r3, [r4, #0]
 800dadc:	0029      	movs	r1, r5
 800dade:	18e3      	adds	r3, r4, r3
 800dae0:	0030      	movs	r0, r6
 800dae2:	9301      	str	r3, [sp, #4]
 800dae4:	f000 f850 	bl	800db88 <_sbrk_r>
 800dae8:	9b01      	ldr	r3, [sp, #4]
 800daea:	4283      	cmp	r3, r0
 800daec:	d143      	bne.n	800db76 <_malloc_r+0xda>
 800daee:	6823      	ldr	r3, [r4, #0]
 800daf0:	3703      	adds	r7, #3
 800daf2:	1aff      	subs	r7, r7, r3
 800daf4:	2303      	movs	r3, #3
 800daf6:	439f      	bics	r7, r3
 800daf8:	3708      	adds	r7, #8
 800dafa:	2f0c      	cmp	r7, #12
 800dafc:	d200      	bcs.n	800db00 <_malloc_r+0x64>
 800dafe:	270c      	movs	r7, #12
 800db00:	0039      	movs	r1, r7
 800db02:	0030      	movs	r0, r6
 800db04:	f7ff ffa8 	bl	800da58 <sbrk_aligned>
 800db08:	1c43      	adds	r3, r0, #1
 800db0a:	d034      	beq.n	800db76 <_malloc_r+0xda>
 800db0c:	6823      	ldr	r3, [r4, #0]
 800db0e:	19df      	adds	r7, r3, r7
 800db10:	6027      	str	r7, [r4, #0]
 800db12:	e013      	b.n	800db3c <_malloc_r+0xa0>
 800db14:	2b00      	cmp	r3, #0
 800db16:	dacb      	bge.n	800dab0 <_malloc_r+0x14>
 800db18:	230c      	movs	r3, #12
 800db1a:	2500      	movs	r5, #0
 800db1c:	6033      	str	r3, [r6, #0]
 800db1e:	0028      	movs	r0, r5
 800db20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800db22:	6822      	ldr	r2, [r4, #0]
 800db24:	1bd1      	subs	r1, r2, r7
 800db26:	d420      	bmi.n	800db6a <_malloc_r+0xce>
 800db28:	290b      	cmp	r1, #11
 800db2a:	d917      	bls.n	800db5c <_malloc_r+0xc0>
 800db2c:	19e2      	adds	r2, r4, r7
 800db2e:	6027      	str	r7, [r4, #0]
 800db30:	42a3      	cmp	r3, r4
 800db32:	d111      	bne.n	800db58 <_malloc_r+0xbc>
 800db34:	602a      	str	r2, [r5, #0]
 800db36:	6863      	ldr	r3, [r4, #4]
 800db38:	6011      	str	r1, [r2, #0]
 800db3a:	6053      	str	r3, [r2, #4]
 800db3c:	0030      	movs	r0, r6
 800db3e:	0025      	movs	r5, r4
 800db40:	f000 f85c 	bl	800dbfc <__malloc_unlock>
 800db44:	2207      	movs	r2, #7
 800db46:	350b      	adds	r5, #11
 800db48:	1d23      	adds	r3, r4, #4
 800db4a:	4395      	bics	r5, r2
 800db4c:	1aea      	subs	r2, r5, r3
 800db4e:	429d      	cmp	r5, r3
 800db50:	d0e5      	beq.n	800db1e <_malloc_r+0x82>
 800db52:	1b5b      	subs	r3, r3, r5
 800db54:	50a3      	str	r3, [r4, r2]
 800db56:	e7e2      	b.n	800db1e <_malloc_r+0x82>
 800db58:	605a      	str	r2, [r3, #4]
 800db5a:	e7ec      	b.n	800db36 <_malloc_r+0x9a>
 800db5c:	6862      	ldr	r2, [r4, #4]
 800db5e:	42a3      	cmp	r3, r4
 800db60:	d101      	bne.n	800db66 <_malloc_r+0xca>
 800db62:	602a      	str	r2, [r5, #0]
 800db64:	e7ea      	b.n	800db3c <_malloc_r+0xa0>
 800db66:	605a      	str	r2, [r3, #4]
 800db68:	e7e8      	b.n	800db3c <_malloc_r+0xa0>
 800db6a:	0023      	movs	r3, r4
 800db6c:	6864      	ldr	r4, [r4, #4]
 800db6e:	e7a7      	b.n	800dac0 <_malloc_r+0x24>
 800db70:	002c      	movs	r4, r5
 800db72:	686d      	ldr	r5, [r5, #4]
 800db74:	e7af      	b.n	800dad6 <_malloc_r+0x3a>
 800db76:	230c      	movs	r3, #12
 800db78:	0030      	movs	r0, r6
 800db7a:	6033      	str	r3, [r6, #0]
 800db7c:	f000 f83e 	bl	800dbfc <__malloc_unlock>
 800db80:	e7cd      	b.n	800db1e <_malloc_r+0x82>
 800db82:	46c0      	nop			; (mov r8, r8)
 800db84:	20001880 	.word	0x20001880

0800db88 <_sbrk_r>:
 800db88:	2300      	movs	r3, #0
 800db8a:	b570      	push	{r4, r5, r6, lr}
 800db8c:	4d06      	ldr	r5, [pc, #24]	; (800dba8 <_sbrk_r+0x20>)
 800db8e:	0004      	movs	r4, r0
 800db90:	0008      	movs	r0, r1
 800db92:	602b      	str	r3, [r5, #0]
 800db94:	f7f5 f8cc 	bl	8002d30 <_sbrk>
 800db98:	1c43      	adds	r3, r0, #1
 800db9a:	d103      	bne.n	800dba4 <_sbrk_r+0x1c>
 800db9c:	682b      	ldr	r3, [r5, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d000      	beq.n	800dba4 <_sbrk_r+0x1c>
 800dba2:	6023      	str	r3, [r4, #0]
 800dba4:	bd70      	pop	{r4, r5, r6, pc}
 800dba6:	46c0      	nop			; (mov r8, r8)
 800dba8:	20001888 	.word	0x20001888

0800dbac <siprintf>:
 800dbac:	b40e      	push	{r1, r2, r3}
 800dbae:	b500      	push	{lr}
 800dbb0:	490b      	ldr	r1, [pc, #44]	; (800dbe0 <siprintf+0x34>)
 800dbb2:	b09c      	sub	sp, #112	; 0x70
 800dbb4:	ab1d      	add	r3, sp, #116	; 0x74
 800dbb6:	9002      	str	r0, [sp, #8]
 800dbb8:	9006      	str	r0, [sp, #24]
 800dbba:	9107      	str	r1, [sp, #28]
 800dbbc:	9104      	str	r1, [sp, #16]
 800dbbe:	4809      	ldr	r0, [pc, #36]	; (800dbe4 <siprintf+0x38>)
 800dbc0:	4909      	ldr	r1, [pc, #36]	; (800dbe8 <siprintf+0x3c>)
 800dbc2:	cb04      	ldmia	r3!, {r2}
 800dbc4:	9105      	str	r1, [sp, #20]
 800dbc6:	6800      	ldr	r0, [r0, #0]
 800dbc8:	a902      	add	r1, sp, #8
 800dbca:	9301      	str	r3, [sp, #4]
 800dbcc:	f000 f880 	bl	800dcd0 <_svfiprintf_r>
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	9a02      	ldr	r2, [sp, #8]
 800dbd4:	7013      	strb	r3, [r2, #0]
 800dbd6:	b01c      	add	sp, #112	; 0x70
 800dbd8:	bc08      	pop	{r3}
 800dbda:	b003      	add	sp, #12
 800dbdc:	4718      	bx	r3
 800dbde:	46c0      	nop			; (mov r8, r8)
 800dbe0:	7fffffff 	.word	0x7fffffff
 800dbe4:	2000017c 	.word	0x2000017c
 800dbe8:	ffff0208 	.word	0xffff0208

0800dbec <__malloc_lock>:
 800dbec:	b510      	push	{r4, lr}
 800dbee:	4802      	ldr	r0, [pc, #8]	; (800dbf8 <__malloc_lock+0xc>)
 800dbf0:	f000 faf0 	bl	800e1d4 <__retarget_lock_acquire_recursive>
 800dbf4:	bd10      	pop	{r4, pc}
 800dbf6:	46c0      	nop			; (mov r8, r8)
 800dbf8:	2000188c 	.word	0x2000188c

0800dbfc <__malloc_unlock>:
 800dbfc:	b510      	push	{r4, lr}
 800dbfe:	4802      	ldr	r0, [pc, #8]	; (800dc08 <__malloc_unlock+0xc>)
 800dc00:	f000 fae9 	bl	800e1d6 <__retarget_lock_release_recursive>
 800dc04:	bd10      	pop	{r4, pc}
 800dc06:	46c0      	nop			; (mov r8, r8)
 800dc08:	2000188c 	.word	0x2000188c

0800dc0c <__ssputs_r>:
 800dc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc0e:	688e      	ldr	r6, [r1, #8]
 800dc10:	b085      	sub	sp, #20
 800dc12:	0007      	movs	r7, r0
 800dc14:	000c      	movs	r4, r1
 800dc16:	9203      	str	r2, [sp, #12]
 800dc18:	9301      	str	r3, [sp, #4]
 800dc1a:	429e      	cmp	r6, r3
 800dc1c:	d83c      	bhi.n	800dc98 <__ssputs_r+0x8c>
 800dc1e:	2390      	movs	r3, #144	; 0x90
 800dc20:	898a      	ldrh	r2, [r1, #12]
 800dc22:	00db      	lsls	r3, r3, #3
 800dc24:	421a      	tst	r2, r3
 800dc26:	d034      	beq.n	800dc92 <__ssputs_r+0x86>
 800dc28:	6909      	ldr	r1, [r1, #16]
 800dc2a:	6823      	ldr	r3, [r4, #0]
 800dc2c:	6960      	ldr	r0, [r4, #20]
 800dc2e:	1a5b      	subs	r3, r3, r1
 800dc30:	9302      	str	r3, [sp, #8]
 800dc32:	2303      	movs	r3, #3
 800dc34:	4343      	muls	r3, r0
 800dc36:	0fdd      	lsrs	r5, r3, #31
 800dc38:	18ed      	adds	r5, r5, r3
 800dc3a:	9b01      	ldr	r3, [sp, #4]
 800dc3c:	9802      	ldr	r0, [sp, #8]
 800dc3e:	3301      	adds	r3, #1
 800dc40:	181b      	adds	r3, r3, r0
 800dc42:	106d      	asrs	r5, r5, #1
 800dc44:	42ab      	cmp	r3, r5
 800dc46:	d900      	bls.n	800dc4a <__ssputs_r+0x3e>
 800dc48:	001d      	movs	r5, r3
 800dc4a:	0553      	lsls	r3, r2, #21
 800dc4c:	d532      	bpl.n	800dcb4 <__ssputs_r+0xa8>
 800dc4e:	0029      	movs	r1, r5
 800dc50:	0038      	movs	r0, r7
 800dc52:	f7ff ff23 	bl	800da9c <_malloc_r>
 800dc56:	1e06      	subs	r6, r0, #0
 800dc58:	d109      	bne.n	800dc6e <__ssputs_r+0x62>
 800dc5a:	230c      	movs	r3, #12
 800dc5c:	603b      	str	r3, [r7, #0]
 800dc5e:	2340      	movs	r3, #64	; 0x40
 800dc60:	2001      	movs	r0, #1
 800dc62:	89a2      	ldrh	r2, [r4, #12]
 800dc64:	4240      	negs	r0, r0
 800dc66:	4313      	orrs	r3, r2
 800dc68:	81a3      	strh	r3, [r4, #12]
 800dc6a:	b005      	add	sp, #20
 800dc6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc6e:	9a02      	ldr	r2, [sp, #8]
 800dc70:	6921      	ldr	r1, [r4, #16]
 800dc72:	f7ff fe95 	bl	800d9a0 <memcpy>
 800dc76:	89a3      	ldrh	r3, [r4, #12]
 800dc78:	4a14      	ldr	r2, [pc, #80]	; (800dccc <__ssputs_r+0xc0>)
 800dc7a:	401a      	ands	r2, r3
 800dc7c:	2380      	movs	r3, #128	; 0x80
 800dc7e:	4313      	orrs	r3, r2
 800dc80:	81a3      	strh	r3, [r4, #12]
 800dc82:	9b02      	ldr	r3, [sp, #8]
 800dc84:	6126      	str	r6, [r4, #16]
 800dc86:	18f6      	adds	r6, r6, r3
 800dc88:	6026      	str	r6, [r4, #0]
 800dc8a:	6165      	str	r5, [r4, #20]
 800dc8c:	9e01      	ldr	r6, [sp, #4]
 800dc8e:	1aed      	subs	r5, r5, r3
 800dc90:	60a5      	str	r5, [r4, #8]
 800dc92:	9b01      	ldr	r3, [sp, #4]
 800dc94:	429e      	cmp	r6, r3
 800dc96:	d900      	bls.n	800dc9a <__ssputs_r+0x8e>
 800dc98:	9e01      	ldr	r6, [sp, #4]
 800dc9a:	0032      	movs	r2, r6
 800dc9c:	9903      	ldr	r1, [sp, #12]
 800dc9e:	6820      	ldr	r0, [r4, #0]
 800dca0:	f000 faa5 	bl	800e1ee <memmove>
 800dca4:	68a3      	ldr	r3, [r4, #8]
 800dca6:	2000      	movs	r0, #0
 800dca8:	1b9b      	subs	r3, r3, r6
 800dcaa:	60a3      	str	r3, [r4, #8]
 800dcac:	6823      	ldr	r3, [r4, #0]
 800dcae:	199e      	adds	r6, r3, r6
 800dcb0:	6026      	str	r6, [r4, #0]
 800dcb2:	e7da      	b.n	800dc6a <__ssputs_r+0x5e>
 800dcb4:	002a      	movs	r2, r5
 800dcb6:	0038      	movs	r0, r7
 800dcb8:	f000 faac 	bl	800e214 <_realloc_r>
 800dcbc:	1e06      	subs	r6, r0, #0
 800dcbe:	d1e0      	bne.n	800dc82 <__ssputs_r+0x76>
 800dcc0:	0038      	movs	r0, r7
 800dcc2:	6921      	ldr	r1, [r4, #16]
 800dcc4:	f7ff fe7e 	bl	800d9c4 <_free_r>
 800dcc8:	e7c7      	b.n	800dc5a <__ssputs_r+0x4e>
 800dcca:	46c0      	nop			; (mov r8, r8)
 800dccc:	fffffb7f 	.word	0xfffffb7f

0800dcd0 <_svfiprintf_r>:
 800dcd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcd2:	b0a1      	sub	sp, #132	; 0x84
 800dcd4:	9003      	str	r0, [sp, #12]
 800dcd6:	001d      	movs	r5, r3
 800dcd8:	898b      	ldrh	r3, [r1, #12]
 800dcda:	000f      	movs	r7, r1
 800dcdc:	0016      	movs	r6, r2
 800dcde:	061b      	lsls	r3, r3, #24
 800dce0:	d511      	bpl.n	800dd06 <_svfiprintf_r+0x36>
 800dce2:	690b      	ldr	r3, [r1, #16]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d10e      	bne.n	800dd06 <_svfiprintf_r+0x36>
 800dce8:	2140      	movs	r1, #64	; 0x40
 800dcea:	f7ff fed7 	bl	800da9c <_malloc_r>
 800dcee:	6038      	str	r0, [r7, #0]
 800dcf0:	6138      	str	r0, [r7, #16]
 800dcf2:	2800      	cmp	r0, #0
 800dcf4:	d105      	bne.n	800dd02 <_svfiprintf_r+0x32>
 800dcf6:	230c      	movs	r3, #12
 800dcf8:	9a03      	ldr	r2, [sp, #12]
 800dcfa:	3801      	subs	r0, #1
 800dcfc:	6013      	str	r3, [r2, #0]
 800dcfe:	b021      	add	sp, #132	; 0x84
 800dd00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd02:	2340      	movs	r3, #64	; 0x40
 800dd04:	617b      	str	r3, [r7, #20]
 800dd06:	2300      	movs	r3, #0
 800dd08:	ac08      	add	r4, sp, #32
 800dd0a:	6163      	str	r3, [r4, #20]
 800dd0c:	3320      	adds	r3, #32
 800dd0e:	7663      	strb	r3, [r4, #25]
 800dd10:	3310      	adds	r3, #16
 800dd12:	76a3      	strb	r3, [r4, #26]
 800dd14:	9507      	str	r5, [sp, #28]
 800dd16:	0035      	movs	r5, r6
 800dd18:	782b      	ldrb	r3, [r5, #0]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d001      	beq.n	800dd22 <_svfiprintf_r+0x52>
 800dd1e:	2b25      	cmp	r3, #37	; 0x25
 800dd20:	d147      	bne.n	800ddb2 <_svfiprintf_r+0xe2>
 800dd22:	1bab      	subs	r3, r5, r6
 800dd24:	9305      	str	r3, [sp, #20]
 800dd26:	42b5      	cmp	r5, r6
 800dd28:	d00c      	beq.n	800dd44 <_svfiprintf_r+0x74>
 800dd2a:	0032      	movs	r2, r6
 800dd2c:	0039      	movs	r1, r7
 800dd2e:	9803      	ldr	r0, [sp, #12]
 800dd30:	f7ff ff6c 	bl	800dc0c <__ssputs_r>
 800dd34:	1c43      	adds	r3, r0, #1
 800dd36:	d100      	bne.n	800dd3a <_svfiprintf_r+0x6a>
 800dd38:	e0ae      	b.n	800de98 <_svfiprintf_r+0x1c8>
 800dd3a:	6962      	ldr	r2, [r4, #20]
 800dd3c:	9b05      	ldr	r3, [sp, #20]
 800dd3e:	4694      	mov	ip, r2
 800dd40:	4463      	add	r3, ip
 800dd42:	6163      	str	r3, [r4, #20]
 800dd44:	782b      	ldrb	r3, [r5, #0]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d100      	bne.n	800dd4c <_svfiprintf_r+0x7c>
 800dd4a:	e0a5      	b.n	800de98 <_svfiprintf_r+0x1c8>
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	2300      	movs	r3, #0
 800dd50:	4252      	negs	r2, r2
 800dd52:	6062      	str	r2, [r4, #4]
 800dd54:	a904      	add	r1, sp, #16
 800dd56:	3254      	adds	r2, #84	; 0x54
 800dd58:	1852      	adds	r2, r2, r1
 800dd5a:	1c6e      	adds	r6, r5, #1
 800dd5c:	6023      	str	r3, [r4, #0]
 800dd5e:	60e3      	str	r3, [r4, #12]
 800dd60:	60a3      	str	r3, [r4, #8]
 800dd62:	7013      	strb	r3, [r2, #0]
 800dd64:	65a3      	str	r3, [r4, #88]	; 0x58
 800dd66:	2205      	movs	r2, #5
 800dd68:	7831      	ldrb	r1, [r6, #0]
 800dd6a:	4854      	ldr	r0, [pc, #336]	; (800debc <_svfiprintf_r+0x1ec>)
 800dd6c:	f000 fa34 	bl	800e1d8 <memchr>
 800dd70:	1c75      	adds	r5, r6, #1
 800dd72:	2800      	cmp	r0, #0
 800dd74:	d11f      	bne.n	800ddb6 <_svfiprintf_r+0xe6>
 800dd76:	6822      	ldr	r2, [r4, #0]
 800dd78:	06d3      	lsls	r3, r2, #27
 800dd7a:	d504      	bpl.n	800dd86 <_svfiprintf_r+0xb6>
 800dd7c:	2353      	movs	r3, #83	; 0x53
 800dd7e:	a904      	add	r1, sp, #16
 800dd80:	185b      	adds	r3, r3, r1
 800dd82:	2120      	movs	r1, #32
 800dd84:	7019      	strb	r1, [r3, #0]
 800dd86:	0713      	lsls	r3, r2, #28
 800dd88:	d504      	bpl.n	800dd94 <_svfiprintf_r+0xc4>
 800dd8a:	2353      	movs	r3, #83	; 0x53
 800dd8c:	a904      	add	r1, sp, #16
 800dd8e:	185b      	adds	r3, r3, r1
 800dd90:	212b      	movs	r1, #43	; 0x2b
 800dd92:	7019      	strb	r1, [r3, #0]
 800dd94:	7833      	ldrb	r3, [r6, #0]
 800dd96:	2b2a      	cmp	r3, #42	; 0x2a
 800dd98:	d016      	beq.n	800ddc8 <_svfiprintf_r+0xf8>
 800dd9a:	0035      	movs	r5, r6
 800dd9c:	2100      	movs	r1, #0
 800dd9e:	200a      	movs	r0, #10
 800dda0:	68e3      	ldr	r3, [r4, #12]
 800dda2:	782a      	ldrb	r2, [r5, #0]
 800dda4:	1c6e      	adds	r6, r5, #1
 800dda6:	3a30      	subs	r2, #48	; 0x30
 800dda8:	2a09      	cmp	r2, #9
 800ddaa:	d94e      	bls.n	800de4a <_svfiprintf_r+0x17a>
 800ddac:	2900      	cmp	r1, #0
 800ddae:	d111      	bne.n	800ddd4 <_svfiprintf_r+0x104>
 800ddb0:	e017      	b.n	800dde2 <_svfiprintf_r+0x112>
 800ddb2:	3501      	adds	r5, #1
 800ddb4:	e7b0      	b.n	800dd18 <_svfiprintf_r+0x48>
 800ddb6:	4b41      	ldr	r3, [pc, #260]	; (800debc <_svfiprintf_r+0x1ec>)
 800ddb8:	6822      	ldr	r2, [r4, #0]
 800ddba:	1ac0      	subs	r0, r0, r3
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	4083      	lsls	r3, r0
 800ddc0:	4313      	orrs	r3, r2
 800ddc2:	002e      	movs	r6, r5
 800ddc4:	6023      	str	r3, [r4, #0]
 800ddc6:	e7ce      	b.n	800dd66 <_svfiprintf_r+0x96>
 800ddc8:	9b07      	ldr	r3, [sp, #28]
 800ddca:	1d19      	adds	r1, r3, #4
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	9107      	str	r1, [sp, #28]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	db01      	blt.n	800ddd8 <_svfiprintf_r+0x108>
 800ddd4:	930b      	str	r3, [sp, #44]	; 0x2c
 800ddd6:	e004      	b.n	800dde2 <_svfiprintf_r+0x112>
 800ddd8:	425b      	negs	r3, r3
 800ddda:	60e3      	str	r3, [r4, #12]
 800dddc:	2302      	movs	r3, #2
 800ddde:	4313      	orrs	r3, r2
 800dde0:	6023      	str	r3, [r4, #0]
 800dde2:	782b      	ldrb	r3, [r5, #0]
 800dde4:	2b2e      	cmp	r3, #46	; 0x2e
 800dde6:	d10a      	bne.n	800ddfe <_svfiprintf_r+0x12e>
 800dde8:	786b      	ldrb	r3, [r5, #1]
 800ddea:	2b2a      	cmp	r3, #42	; 0x2a
 800ddec:	d135      	bne.n	800de5a <_svfiprintf_r+0x18a>
 800ddee:	9b07      	ldr	r3, [sp, #28]
 800ddf0:	3502      	adds	r5, #2
 800ddf2:	1d1a      	adds	r2, r3, #4
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	9207      	str	r2, [sp, #28]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	db2b      	blt.n	800de54 <_svfiprintf_r+0x184>
 800ddfc:	9309      	str	r3, [sp, #36]	; 0x24
 800ddfe:	4e30      	ldr	r6, [pc, #192]	; (800dec0 <_svfiprintf_r+0x1f0>)
 800de00:	2203      	movs	r2, #3
 800de02:	0030      	movs	r0, r6
 800de04:	7829      	ldrb	r1, [r5, #0]
 800de06:	f000 f9e7 	bl	800e1d8 <memchr>
 800de0a:	2800      	cmp	r0, #0
 800de0c:	d006      	beq.n	800de1c <_svfiprintf_r+0x14c>
 800de0e:	2340      	movs	r3, #64	; 0x40
 800de10:	1b80      	subs	r0, r0, r6
 800de12:	4083      	lsls	r3, r0
 800de14:	6822      	ldr	r2, [r4, #0]
 800de16:	3501      	adds	r5, #1
 800de18:	4313      	orrs	r3, r2
 800de1a:	6023      	str	r3, [r4, #0]
 800de1c:	7829      	ldrb	r1, [r5, #0]
 800de1e:	2206      	movs	r2, #6
 800de20:	4828      	ldr	r0, [pc, #160]	; (800dec4 <_svfiprintf_r+0x1f4>)
 800de22:	1c6e      	adds	r6, r5, #1
 800de24:	7621      	strb	r1, [r4, #24]
 800de26:	f000 f9d7 	bl	800e1d8 <memchr>
 800de2a:	2800      	cmp	r0, #0
 800de2c:	d03c      	beq.n	800dea8 <_svfiprintf_r+0x1d8>
 800de2e:	4b26      	ldr	r3, [pc, #152]	; (800dec8 <_svfiprintf_r+0x1f8>)
 800de30:	2b00      	cmp	r3, #0
 800de32:	d125      	bne.n	800de80 <_svfiprintf_r+0x1b0>
 800de34:	2207      	movs	r2, #7
 800de36:	9b07      	ldr	r3, [sp, #28]
 800de38:	3307      	adds	r3, #7
 800de3a:	4393      	bics	r3, r2
 800de3c:	3308      	adds	r3, #8
 800de3e:	9307      	str	r3, [sp, #28]
 800de40:	6963      	ldr	r3, [r4, #20]
 800de42:	9a04      	ldr	r2, [sp, #16]
 800de44:	189b      	adds	r3, r3, r2
 800de46:	6163      	str	r3, [r4, #20]
 800de48:	e765      	b.n	800dd16 <_svfiprintf_r+0x46>
 800de4a:	4343      	muls	r3, r0
 800de4c:	0035      	movs	r5, r6
 800de4e:	2101      	movs	r1, #1
 800de50:	189b      	adds	r3, r3, r2
 800de52:	e7a6      	b.n	800dda2 <_svfiprintf_r+0xd2>
 800de54:	2301      	movs	r3, #1
 800de56:	425b      	negs	r3, r3
 800de58:	e7d0      	b.n	800ddfc <_svfiprintf_r+0x12c>
 800de5a:	2300      	movs	r3, #0
 800de5c:	200a      	movs	r0, #10
 800de5e:	001a      	movs	r2, r3
 800de60:	3501      	adds	r5, #1
 800de62:	6063      	str	r3, [r4, #4]
 800de64:	7829      	ldrb	r1, [r5, #0]
 800de66:	1c6e      	adds	r6, r5, #1
 800de68:	3930      	subs	r1, #48	; 0x30
 800de6a:	2909      	cmp	r1, #9
 800de6c:	d903      	bls.n	800de76 <_svfiprintf_r+0x1a6>
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d0c5      	beq.n	800ddfe <_svfiprintf_r+0x12e>
 800de72:	9209      	str	r2, [sp, #36]	; 0x24
 800de74:	e7c3      	b.n	800ddfe <_svfiprintf_r+0x12e>
 800de76:	4342      	muls	r2, r0
 800de78:	0035      	movs	r5, r6
 800de7a:	2301      	movs	r3, #1
 800de7c:	1852      	adds	r2, r2, r1
 800de7e:	e7f1      	b.n	800de64 <_svfiprintf_r+0x194>
 800de80:	ab07      	add	r3, sp, #28
 800de82:	9300      	str	r3, [sp, #0]
 800de84:	003a      	movs	r2, r7
 800de86:	0021      	movs	r1, r4
 800de88:	4b10      	ldr	r3, [pc, #64]	; (800decc <_svfiprintf_r+0x1fc>)
 800de8a:	9803      	ldr	r0, [sp, #12]
 800de8c:	e000      	b.n	800de90 <_svfiprintf_r+0x1c0>
 800de8e:	bf00      	nop
 800de90:	9004      	str	r0, [sp, #16]
 800de92:	9b04      	ldr	r3, [sp, #16]
 800de94:	3301      	adds	r3, #1
 800de96:	d1d3      	bne.n	800de40 <_svfiprintf_r+0x170>
 800de98:	89bb      	ldrh	r3, [r7, #12]
 800de9a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800de9c:	065b      	lsls	r3, r3, #25
 800de9e:	d400      	bmi.n	800dea2 <_svfiprintf_r+0x1d2>
 800dea0:	e72d      	b.n	800dcfe <_svfiprintf_r+0x2e>
 800dea2:	2001      	movs	r0, #1
 800dea4:	4240      	negs	r0, r0
 800dea6:	e72a      	b.n	800dcfe <_svfiprintf_r+0x2e>
 800dea8:	ab07      	add	r3, sp, #28
 800deaa:	9300      	str	r3, [sp, #0]
 800deac:	003a      	movs	r2, r7
 800deae:	0021      	movs	r1, r4
 800deb0:	4b06      	ldr	r3, [pc, #24]	; (800decc <_svfiprintf_r+0x1fc>)
 800deb2:	9803      	ldr	r0, [sp, #12]
 800deb4:	f000 f87c 	bl	800dfb0 <_printf_i>
 800deb8:	e7ea      	b.n	800de90 <_svfiprintf_r+0x1c0>
 800deba:	46c0      	nop			; (mov r8, r8)
 800debc:	0800e5e0 	.word	0x0800e5e0
 800dec0:	0800e5e6 	.word	0x0800e5e6
 800dec4:	0800e5ea 	.word	0x0800e5ea
 800dec8:	00000000 	.word	0x00000000
 800decc:	0800dc0d 	.word	0x0800dc0d

0800ded0 <_printf_common>:
 800ded0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ded2:	0015      	movs	r5, r2
 800ded4:	9301      	str	r3, [sp, #4]
 800ded6:	688a      	ldr	r2, [r1, #8]
 800ded8:	690b      	ldr	r3, [r1, #16]
 800deda:	000c      	movs	r4, r1
 800dedc:	9000      	str	r0, [sp, #0]
 800dede:	4293      	cmp	r3, r2
 800dee0:	da00      	bge.n	800dee4 <_printf_common+0x14>
 800dee2:	0013      	movs	r3, r2
 800dee4:	0022      	movs	r2, r4
 800dee6:	602b      	str	r3, [r5, #0]
 800dee8:	3243      	adds	r2, #67	; 0x43
 800deea:	7812      	ldrb	r2, [r2, #0]
 800deec:	2a00      	cmp	r2, #0
 800deee:	d001      	beq.n	800def4 <_printf_common+0x24>
 800def0:	3301      	adds	r3, #1
 800def2:	602b      	str	r3, [r5, #0]
 800def4:	6823      	ldr	r3, [r4, #0]
 800def6:	069b      	lsls	r3, r3, #26
 800def8:	d502      	bpl.n	800df00 <_printf_common+0x30>
 800defa:	682b      	ldr	r3, [r5, #0]
 800defc:	3302      	adds	r3, #2
 800defe:	602b      	str	r3, [r5, #0]
 800df00:	6822      	ldr	r2, [r4, #0]
 800df02:	2306      	movs	r3, #6
 800df04:	0017      	movs	r7, r2
 800df06:	401f      	ands	r7, r3
 800df08:	421a      	tst	r2, r3
 800df0a:	d027      	beq.n	800df5c <_printf_common+0x8c>
 800df0c:	0023      	movs	r3, r4
 800df0e:	3343      	adds	r3, #67	; 0x43
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	1e5a      	subs	r2, r3, #1
 800df14:	4193      	sbcs	r3, r2
 800df16:	6822      	ldr	r2, [r4, #0]
 800df18:	0692      	lsls	r2, r2, #26
 800df1a:	d430      	bmi.n	800df7e <_printf_common+0xae>
 800df1c:	0022      	movs	r2, r4
 800df1e:	9901      	ldr	r1, [sp, #4]
 800df20:	9800      	ldr	r0, [sp, #0]
 800df22:	9e08      	ldr	r6, [sp, #32]
 800df24:	3243      	adds	r2, #67	; 0x43
 800df26:	47b0      	blx	r6
 800df28:	1c43      	adds	r3, r0, #1
 800df2a:	d025      	beq.n	800df78 <_printf_common+0xa8>
 800df2c:	2306      	movs	r3, #6
 800df2e:	6820      	ldr	r0, [r4, #0]
 800df30:	682a      	ldr	r2, [r5, #0]
 800df32:	68e1      	ldr	r1, [r4, #12]
 800df34:	2500      	movs	r5, #0
 800df36:	4003      	ands	r3, r0
 800df38:	2b04      	cmp	r3, #4
 800df3a:	d103      	bne.n	800df44 <_printf_common+0x74>
 800df3c:	1a8d      	subs	r5, r1, r2
 800df3e:	43eb      	mvns	r3, r5
 800df40:	17db      	asrs	r3, r3, #31
 800df42:	401d      	ands	r5, r3
 800df44:	68a3      	ldr	r3, [r4, #8]
 800df46:	6922      	ldr	r2, [r4, #16]
 800df48:	4293      	cmp	r3, r2
 800df4a:	dd01      	ble.n	800df50 <_printf_common+0x80>
 800df4c:	1a9b      	subs	r3, r3, r2
 800df4e:	18ed      	adds	r5, r5, r3
 800df50:	2700      	movs	r7, #0
 800df52:	42bd      	cmp	r5, r7
 800df54:	d120      	bne.n	800df98 <_printf_common+0xc8>
 800df56:	2000      	movs	r0, #0
 800df58:	e010      	b.n	800df7c <_printf_common+0xac>
 800df5a:	3701      	adds	r7, #1
 800df5c:	68e3      	ldr	r3, [r4, #12]
 800df5e:	682a      	ldr	r2, [r5, #0]
 800df60:	1a9b      	subs	r3, r3, r2
 800df62:	42bb      	cmp	r3, r7
 800df64:	ddd2      	ble.n	800df0c <_printf_common+0x3c>
 800df66:	0022      	movs	r2, r4
 800df68:	2301      	movs	r3, #1
 800df6a:	9901      	ldr	r1, [sp, #4]
 800df6c:	9800      	ldr	r0, [sp, #0]
 800df6e:	9e08      	ldr	r6, [sp, #32]
 800df70:	3219      	adds	r2, #25
 800df72:	47b0      	blx	r6
 800df74:	1c43      	adds	r3, r0, #1
 800df76:	d1f0      	bne.n	800df5a <_printf_common+0x8a>
 800df78:	2001      	movs	r0, #1
 800df7a:	4240      	negs	r0, r0
 800df7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800df7e:	2030      	movs	r0, #48	; 0x30
 800df80:	18e1      	adds	r1, r4, r3
 800df82:	3143      	adds	r1, #67	; 0x43
 800df84:	7008      	strb	r0, [r1, #0]
 800df86:	0021      	movs	r1, r4
 800df88:	1c5a      	adds	r2, r3, #1
 800df8a:	3145      	adds	r1, #69	; 0x45
 800df8c:	7809      	ldrb	r1, [r1, #0]
 800df8e:	18a2      	adds	r2, r4, r2
 800df90:	3243      	adds	r2, #67	; 0x43
 800df92:	3302      	adds	r3, #2
 800df94:	7011      	strb	r1, [r2, #0]
 800df96:	e7c1      	b.n	800df1c <_printf_common+0x4c>
 800df98:	0022      	movs	r2, r4
 800df9a:	2301      	movs	r3, #1
 800df9c:	9901      	ldr	r1, [sp, #4]
 800df9e:	9800      	ldr	r0, [sp, #0]
 800dfa0:	9e08      	ldr	r6, [sp, #32]
 800dfa2:	321a      	adds	r2, #26
 800dfa4:	47b0      	blx	r6
 800dfa6:	1c43      	adds	r3, r0, #1
 800dfa8:	d0e6      	beq.n	800df78 <_printf_common+0xa8>
 800dfaa:	3701      	adds	r7, #1
 800dfac:	e7d1      	b.n	800df52 <_printf_common+0x82>
	...

0800dfb0 <_printf_i>:
 800dfb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfb2:	b08b      	sub	sp, #44	; 0x2c
 800dfb4:	9206      	str	r2, [sp, #24]
 800dfb6:	000a      	movs	r2, r1
 800dfb8:	3243      	adds	r2, #67	; 0x43
 800dfba:	9307      	str	r3, [sp, #28]
 800dfbc:	9005      	str	r0, [sp, #20]
 800dfbe:	9204      	str	r2, [sp, #16]
 800dfc0:	7e0a      	ldrb	r2, [r1, #24]
 800dfc2:	000c      	movs	r4, r1
 800dfc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dfc6:	2a78      	cmp	r2, #120	; 0x78
 800dfc8:	d807      	bhi.n	800dfda <_printf_i+0x2a>
 800dfca:	2a62      	cmp	r2, #98	; 0x62
 800dfcc:	d809      	bhi.n	800dfe2 <_printf_i+0x32>
 800dfce:	2a00      	cmp	r2, #0
 800dfd0:	d100      	bne.n	800dfd4 <_printf_i+0x24>
 800dfd2:	e0c1      	b.n	800e158 <_printf_i+0x1a8>
 800dfd4:	2a58      	cmp	r2, #88	; 0x58
 800dfd6:	d100      	bne.n	800dfda <_printf_i+0x2a>
 800dfd8:	e08c      	b.n	800e0f4 <_printf_i+0x144>
 800dfda:	0026      	movs	r6, r4
 800dfdc:	3642      	adds	r6, #66	; 0x42
 800dfde:	7032      	strb	r2, [r6, #0]
 800dfe0:	e022      	b.n	800e028 <_printf_i+0x78>
 800dfe2:	0010      	movs	r0, r2
 800dfe4:	3863      	subs	r0, #99	; 0x63
 800dfe6:	2815      	cmp	r0, #21
 800dfe8:	d8f7      	bhi.n	800dfda <_printf_i+0x2a>
 800dfea:	f7f2 f895 	bl	8000118 <__gnu_thumb1_case_shi>
 800dfee:	0016      	.short	0x0016
 800dff0:	fff6001f 	.word	0xfff6001f
 800dff4:	fff6fff6 	.word	0xfff6fff6
 800dff8:	001ffff6 	.word	0x001ffff6
 800dffc:	fff6fff6 	.word	0xfff6fff6
 800e000:	fff6fff6 	.word	0xfff6fff6
 800e004:	003600a8 	.word	0x003600a8
 800e008:	fff6009a 	.word	0xfff6009a
 800e00c:	00b9fff6 	.word	0x00b9fff6
 800e010:	0036fff6 	.word	0x0036fff6
 800e014:	fff6fff6 	.word	0xfff6fff6
 800e018:	009e      	.short	0x009e
 800e01a:	0026      	movs	r6, r4
 800e01c:	681a      	ldr	r2, [r3, #0]
 800e01e:	3642      	adds	r6, #66	; 0x42
 800e020:	1d11      	adds	r1, r2, #4
 800e022:	6019      	str	r1, [r3, #0]
 800e024:	6813      	ldr	r3, [r2, #0]
 800e026:	7033      	strb	r3, [r6, #0]
 800e028:	2301      	movs	r3, #1
 800e02a:	e0a7      	b.n	800e17c <_printf_i+0x1cc>
 800e02c:	6808      	ldr	r0, [r1, #0]
 800e02e:	6819      	ldr	r1, [r3, #0]
 800e030:	1d0a      	adds	r2, r1, #4
 800e032:	0605      	lsls	r5, r0, #24
 800e034:	d50b      	bpl.n	800e04e <_printf_i+0x9e>
 800e036:	680d      	ldr	r5, [r1, #0]
 800e038:	601a      	str	r2, [r3, #0]
 800e03a:	2d00      	cmp	r5, #0
 800e03c:	da03      	bge.n	800e046 <_printf_i+0x96>
 800e03e:	232d      	movs	r3, #45	; 0x2d
 800e040:	9a04      	ldr	r2, [sp, #16]
 800e042:	426d      	negs	r5, r5
 800e044:	7013      	strb	r3, [r2, #0]
 800e046:	4b61      	ldr	r3, [pc, #388]	; (800e1cc <_printf_i+0x21c>)
 800e048:	270a      	movs	r7, #10
 800e04a:	9303      	str	r3, [sp, #12]
 800e04c:	e01b      	b.n	800e086 <_printf_i+0xd6>
 800e04e:	680d      	ldr	r5, [r1, #0]
 800e050:	601a      	str	r2, [r3, #0]
 800e052:	0641      	lsls	r1, r0, #25
 800e054:	d5f1      	bpl.n	800e03a <_printf_i+0x8a>
 800e056:	b22d      	sxth	r5, r5
 800e058:	e7ef      	b.n	800e03a <_printf_i+0x8a>
 800e05a:	680d      	ldr	r5, [r1, #0]
 800e05c:	6819      	ldr	r1, [r3, #0]
 800e05e:	1d08      	adds	r0, r1, #4
 800e060:	6018      	str	r0, [r3, #0]
 800e062:	062e      	lsls	r6, r5, #24
 800e064:	d501      	bpl.n	800e06a <_printf_i+0xba>
 800e066:	680d      	ldr	r5, [r1, #0]
 800e068:	e003      	b.n	800e072 <_printf_i+0xc2>
 800e06a:	066d      	lsls	r5, r5, #25
 800e06c:	d5fb      	bpl.n	800e066 <_printf_i+0xb6>
 800e06e:	680d      	ldr	r5, [r1, #0]
 800e070:	b2ad      	uxth	r5, r5
 800e072:	4b56      	ldr	r3, [pc, #344]	; (800e1cc <_printf_i+0x21c>)
 800e074:	2708      	movs	r7, #8
 800e076:	9303      	str	r3, [sp, #12]
 800e078:	2a6f      	cmp	r2, #111	; 0x6f
 800e07a:	d000      	beq.n	800e07e <_printf_i+0xce>
 800e07c:	3702      	adds	r7, #2
 800e07e:	0023      	movs	r3, r4
 800e080:	2200      	movs	r2, #0
 800e082:	3343      	adds	r3, #67	; 0x43
 800e084:	701a      	strb	r2, [r3, #0]
 800e086:	6863      	ldr	r3, [r4, #4]
 800e088:	60a3      	str	r3, [r4, #8]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	db03      	blt.n	800e096 <_printf_i+0xe6>
 800e08e:	2204      	movs	r2, #4
 800e090:	6821      	ldr	r1, [r4, #0]
 800e092:	4391      	bics	r1, r2
 800e094:	6021      	str	r1, [r4, #0]
 800e096:	2d00      	cmp	r5, #0
 800e098:	d102      	bne.n	800e0a0 <_printf_i+0xf0>
 800e09a:	9e04      	ldr	r6, [sp, #16]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d00c      	beq.n	800e0ba <_printf_i+0x10a>
 800e0a0:	9e04      	ldr	r6, [sp, #16]
 800e0a2:	0028      	movs	r0, r5
 800e0a4:	0039      	movs	r1, r7
 800e0a6:	f7f2 f8c7 	bl	8000238 <__aeabi_uidivmod>
 800e0aa:	9b03      	ldr	r3, [sp, #12]
 800e0ac:	3e01      	subs	r6, #1
 800e0ae:	5c5b      	ldrb	r3, [r3, r1]
 800e0b0:	7033      	strb	r3, [r6, #0]
 800e0b2:	002b      	movs	r3, r5
 800e0b4:	0005      	movs	r5, r0
 800e0b6:	429f      	cmp	r7, r3
 800e0b8:	d9f3      	bls.n	800e0a2 <_printf_i+0xf2>
 800e0ba:	2f08      	cmp	r7, #8
 800e0bc:	d109      	bne.n	800e0d2 <_printf_i+0x122>
 800e0be:	6823      	ldr	r3, [r4, #0]
 800e0c0:	07db      	lsls	r3, r3, #31
 800e0c2:	d506      	bpl.n	800e0d2 <_printf_i+0x122>
 800e0c4:	6863      	ldr	r3, [r4, #4]
 800e0c6:	6922      	ldr	r2, [r4, #16]
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	dc02      	bgt.n	800e0d2 <_printf_i+0x122>
 800e0cc:	2330      	movs	r3, #48	; 0x30
 800e0ce:	3e01      	subs	r6, #1
 800e0d0:	7033      	strb	r3, [r6, #0]
 800e0d2:	9b04      	ldr	r3, [sp, #16]
 800e0d4:	1b9b      	subs	r3, r3, r6
 800e0d6:	6123      	str	r3, [r4, #16]
 800e0d8:	9b07      	ldr	r3, [sp, #28]
 800e0da:	0021      	movs	r1, r4
 800e0dc:	9300      	str	r3, [sp, #0]
 800e0de:	9805      	ldr	r0, [sp, #20]
 800e0e0:	9b06      	ldr	r3, [sp, #24]
 800e0e2:	aa09      	add	r2, sp, #36	; 0x24
 800e0e4:	f7ff fef4 	bl	800ded0 <_printf_common>
 800e0e8:	1c43      	adds	r3, r0, #1
 800e0ea:	d14c      	bne.n	800e186 <_printf_i+0x1d6>
 800e0ec:	2001      	movs	r0, #1
 800e0ee:	4240      	negs	r0, r0
 800e0f0:	b00b      	add	sp, #44	; 0x2c
 800e0f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0f4:	3145      	adds	r1, #69	; 0x45
 800e0f6:	700a      	strb	r2, [r1, #0]
 800e0f8:	4a34      	ldr	r2, [pc, #208]	; (800e1cc <_printf_i+0x21c>)
 800e0fa:	9203      	str	r2, [sp, #12]
 800e0fc:	681a      	ldr	r2, [r3, #0]
 800e0fe:	6821      	ldr	r1, [r4, #0]
 800e100:	ca20      	ldmia	r2!, {r5}
 800e102:	601a      	str	r2, [r3, #0]
 800e104:	0608      	lsls	r0, r1, #24
 800e106:	d516      	bpl.n	800e136 <_printf_i+0x186>
 800e108:	07cb      	lsls	r3, r1, #31
 800e10a:	d502      	bpl.n	800e112 <_printf_i+0x162>
 800e10c:	2320      	movs	r3, #32
 800e10e:	4319      	orrs	r1, r3
 800e110:	6021      	str	r1, [r4, #0]
 800e112:	2710      	movs	r7, #16
 800e114:	2d00      	cmp	r5, #0
 800e116:	d1b2      	bne.n	800e07e <_printf_i+0xce>
 800e118:	2320      	movs	r3, #32
 800e11a:	6822      	ldr	r2, [r4, #0]
 800e11c:	439a      	bics	r2, r3
 800e11e:	6022      	str	r2, [r4, #0]
 800e120:	e7ad      	b.n	800e07e <_printf_i+0xce>
 800e122:	2220      	movs	r2, #32
 800e124:	6809      	ldr	r1, [r1, #0]
 800e126:	430a      	orrs	r2, r1
 800e128:	6022      	str	r2, [r4, #0]
 800e12a:	0022      	movs	r2, r4
 800e12c:	2178      	movs	r1, #120	; 0x78
 800e12e:	3245      	adds	r2, #69	; 0x45
 800e130:	7011      	strb	r1, [r2, #0]
 800e132:	4a27      	ldr	r2, [pc, #156]	; (800e1d0 <_printf_i+0x220>)
 800e134:	e7e1      	b.n	800e0fa <_printf_i+0x14a>
 800e136:	0648      	lsls	r0, r1, #25
 800e138:	d5e6      	bpl.n	800e108 <_printf_i+0x158>
 800e13a:	b2ad      	uxth	r5, r5
 800e13c:	e7e4      	b.n	800e108 <_printf_i+0x158>
 800e13e:	681a      	ldr	r2, [r3, #0]
 800e140:	680d      	ldr	r5, [r1, #0]
 800e142:	1d10      	adds	r0, r2, #4
 800e144:	6949      	ldr	r1, [r1, #20]
 800e146:	6018      	str	r0, [r3, #0]
 800e148:	6813      	ldr	r3, [r2, #0]
 800e14a:	062e      	lsls	r6, r5, #24
 800e14c:	d501      	bpl.n	800e152 <_printf_i+0x1a2>
 800e14e:	6019      	str	r1, [r3, #0]
 800e150:	e002      	b.n	800e158 <_printf_i+0x1a8>
 800e152:	066d      	lsls	r5, r5, #25
 800e154:	d5fb      	bpl.n	800e14e <_printf_i+0x19e>
 800e156:	8019      	strh	r1, [r3, #0]
 800e158:	2300      	movs	r3, #0
 800e15a:	9e04      	ldr	r6, [sp, #16]
 800e15c:	6123      	str	r3, [r4, #16]
 800e15e:	e7bb      	b.n	800e0d8 <_printf_i+0x128>
 800e160:	681a      	ldr	r2, [r3, #0]
 800e162:	1d11      	adds	r1, r2, #4
 800e164:	6019      	str	r1, [r3, #0]
 800e166:	6816      	ldr	r6, [r2, #0]
 800e168:	2100      	movs	r1, #0
 800e16a:	0030      	movs	r0, r6
 800e16c:	6862      	ldr	r2, [r4, #4]
 800e16e:	f000 f833 	bl	800e1d8 <memchr>
 800e172:	2800      	cmp	r0, #0
 800e174:	d001      	beq.n	800e17a <_printf_i+0x1ca>
 800e176:	1b80      	subs	r0, r0, r6
 800e178:	6060      	str	r0, [r4, #4]
 800e17a:	6863      	ldr	r3, [r4, #4]
 800e17c:	6123      	str	r3, [r4, #16]
 800e17e:	2300      	movs	r3, #0
 800e180:	9a04      	ldr	r2, [sp, #16]
 800e182:	7013      	strb	r3, [r2, #0]
 800e184:	e7a8      	b.n	800e0d8 <_printf_i+0x128>
 800e186:	6923      	ldr	r3, [r4, #16]
 800e188:	0032      	movs	r2, r6
 800e18a:	9906      	ldr	r1, [sp, #24]
 800e18c:	9805      	ldr	r0, [sp, #20]
 800e18e:	9d07      	ldr	r5, [sp, #28]
 800e190:	47a8      	blx	r5
 800e192:	1c43      	adds	r3, r0, #1
 800e194:	d0aa      	beq.n	800e0ec <_printf_i+0x13c>
 800e196:	6823      	ldr	r3, [r4, #0]
 800e198:	079b      	lsls	r3, r3, #30
 800e19a:	d415      	bmi.n	800e1c8 <_printf_i+0x218>
 800e19c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e19e:	68e0      	ldr	r0, [r4, #12]
 800e1a0:	4298      	cmp	r0, r3
 800e1a2:	daa5      	bge.n	800e0f0 <_printf_i+0x140>
 800e1a4:	0018      	movs	r0, r3
 800e1a6:	e7a3      	b.n	800e0f0 <_printf_i+0x140>
 800e1a8:	0022      	movs	r2, r4
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	9906      	ldr	r1, [sp, #24]
 800e1ae:	9805      	ldr	r0, [sp, #20]
 800e1b0:	9e07      	ldr	r6, [sp, #28]
 800e1b2:	3219      	adds	r2, #25
 800e1b4:	47b0      	blx	r6
 800e1b6:	1c43      	adds	r3, r0, #1
 800e1b8:	d098      	beq.n	800e0ec <_printf_i+0x13c>
 800e1ba:	3501      	adds	r5, #1
 800e1bc:	68e3      	ldr	r3, [r4, #12]
 800e1be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1c0:	1a9b      	subs	r3, r3, r2
 800e1c2:	42ab      	cmp	r3, r5
 800e1c4:	dcf0      	bgt.n	800e1a8 <_printf_i+0x1f8>
 800e1c6:	e7e9      	b.n	800e19c <_printf_i+0x1ec>
 800e1c8:	2500      	movs	r5, #0
 800e1ca:	e7f7      	b.n	800e1bc <_printf_i+0x20c>
 800e1cc:	0800e5f1 	.word	0x0800e5f1
 800e1d0:	0800e602 	.word	0x0800e602

0800e1d4 <__retarget_lock_acquire_recursive>:
 800e1d4:	4770      	bx	lr

0800e1d6 <__retarget_lock_release_recursive>:
 800e1d6:	4770      	bx	lr

0800e1d8 <memchr>:
 800e1d8:	b2c9      	uxtb	r1, r1
 800e1da:	1882      	adds	r2, r0, r2
 800e1dc:	4290      	cmp	r0, r2
 800e1de:	d101      	bne.n	800e1e4 <memchr+0xc>
 800e1e0:	2000      	movs	r0, #0
 800e1e2:	4770      	bx	lr
 800e1e4:	7803      	ldrb	r3, [r0, #0]
 800e1e6:	428b      	cmp	r3, r1
 800e1e8:	d0fb      	beq.n	800e1e2 <memchr+0xa>
 800e1ea:	3001      	adds	r0, #1
 800e1ec:	e7f6      	b.n	800e1dc <memchr+0x4>

0800e1ee <memmove>:
 800e1ee:	b510      	push	{r4, lr}
 800e1f0:	4288      	cmp	r0, r1
 800e1f2:	d902      	bls.n	800e1fa <memmove+0xc>
 800e1f4:	188b      	adds	r3, r1, r2
 800e1f6:	4298      	cmp	r0, r3
 800e1f8:	d303      	bcc.n	800e202 <memmove+0x14>
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	e007      	b.n	800e20e <memmove+0x20>
 800e1fe:	5c8b      	ldrb	r3, [r1, r2]
 800e200:	5483      	strb	r3, [r0, r2]
 800e202:	3a01      	subs	r2, #1
 800e204:	d2fb      	bcs.n	800e1fe <memmove+0x10>
 800e206:	bd10      	pop	{r4, pc}
 800e208:	5ccc      	ldrb	r4, [r1, r3]
 800e20a:	54c4      	strb	r4, [r0, r3]
 800e20c:	3301      	adds	r3, #1
 800e20e:	429a      	cmp	r2, r3
 800e210:	d1fa      	bne.n	800e208 <memmove+0x1a>
 800e212:	e7f8      	b.n	800e206 <memmove+0x18>

0800e214 <_realloc_r>:
 800e214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e216:	0007      	movs	r7, r0
 800e218:	000e      	movs	r6, r1
 800e21a:	0014      	movs	r4, r2
 800e21c:	2900      	cmp	r1, #0
 800e21e:	d105      	bne.n	800e22c <_realloc_r+0x18>
 800e220:	0011      	movs	r1, r2
 800e222:	f7ff fc3b 	bl	800da9c <_malloc_r>
 800e226:	0005      	movs	r5, r0
 800e228:	0028      	movs	r0, r5
 800e22a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e22c:	2a00      	cmp	r2, #0
 800e22e:	d103      	bne.n	800e238 <_realloc_r+0x24>
 800e230:	f7ff fbc8 	bl	800d9c4 <_free_r>
 800e234:	0025      	movs	r5, r4
 800e236:	e7f7      	b.n	800e228 <_realloc_r+0x14>
 800e238:	f000 f81b 	bl	800e272 <_malloc_usable_size_r>
 800e23c:	9001      	str	r0, [sp, #4]
 800e23e:	4284      	cmp	r4, r0
 800e240:	d803      	bhi.n	800e24a <_realloc_r+0x36>
 800e242:	0035      	movs	r5, r6
 800e244:	0843      	lsrs	r3, r0, #1
 800e246:	42a3      	cmp	r3, r4
 800e248:	d3ee      	bcc.n	800e228 <_realloc_r+0x14>
 800e24a:	0021      	movs	r1, r4
 800e24c:	0038      	movs	r0, r7
 800e24e:	f7ff fc25 	bl	800da9c <_malloc_r>
 800e252:	1e05      	subs	r5, r0, #0
 800e254:	d0e8      	beq.n	800e228 <_realloc_r+0x14>
 800e256:	9b01      	ldr	r3, [sp, #4]
 800e258:	0022      	movs	r2, r4
 800e25a:	429c      	cmp	r4, r3
 800e25c:	d900      	bls.n	800e260 <_realloc_r+0x4c>
 800e25e:	001a      	movs	r2, r3
 800e260:	0031      	movs	r1, r6
 800e262:	0028      	movs	r0, r5
 800e264:	f7ff fb9c 	bl	800d9a0 <memcpy>
 800e268:	0031      	movs	r1, r6
 800e26a:	0038      	movs	r0, r7
 800e26c:	f7ff fbaa 	bl	800d9c4 <_free_r>
 800e270:	e7da      	b.n	800e228 <_realloc_r+0x14>

0800e272 <_malloc_usable_size_r>:
 800e272:	1f0b      	subs	r3, r1, #4
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	1f18      	subs	r0, r3, #4
 800e278:	2b00      	cmp	r3, #0
 800e27a:	da01      	bge.n	800e280 <_malloc_usable_size_r+0xe>
 800e27c:	580b      	ldr	r3, [r1, r0]
 800e27e:	18c0      	adds	r0, r0, r3
 800e280:	4770      	bx	lr
	...

0800e284 <_init>:
 800e284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e286:	46c0      	nop			; (mov r8, r8)
 800e288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e28a:	bc08      	pop	{r3}
 800e28c:	469e      	mov	lr, r3
 800e28e:	4770      	bx	lr

0800e290 <_fini>:
 800e290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e292:	46c0      	nop			; (mov r8, r8)
 800e294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e296:	bc08      	pop	{r3}
 800e298:	469e      	mov	lr, r3
 800e29a:	4770      	bx	lr
